

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 16 17:22:32 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1F26                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1F26  3463               	retlw	99
  2163  1F27  3402               	retlw	2
  2164  1F28  3400               	retlw	0
  2165  1F29  3400               	retlw	0
  2166  1F2A  3400               	retlw	0
  2167  1F2B  3400               	retlw	0
  2168  1F2C  3400               	retlw	0
  2169  1F2D  3400               	retlw	0
  2170  1F2E  3400               	retlw	0
  2171  1F2F  3400               	retlw	0
  2172  1F30  3400               	retlw	0
  2173  1F31  3400               	retlw	0
  2174  1F32  34FF               	retlw	255
  2175  1F33  34FF               	retlw	255
  2176  1F34  34FF               	retlw	255
  2177  1F35  3400               	retlw	0
  2178  1F36  3400               	retlw	0
  2179  1F37  3400               	retlw	0
  2180  1F38  3400               	retlw	0
  2181  1F39  3400               	retlw	0
  2182  1F3A  3400               	retlw	0
  2183  1F3B  3400               	retlw	0
  2184  1F3C  3400               	retlw	0
  2185  1F3D  3400               	retlw	0
  2186  1F3E  3400               	retlw	0
  2187  1F3F  3400               	retlw	0
  2188  1F40  3400               	retlw	0
  2189  1F41  3400               	retlw	0
  2190  1F42  3400               	retlw	0
  2191  1F43  3400               	retlw	0
  2192  1F44  3400               	retlw	0
  2193  1F45  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK0
  2389  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  001A  30A0               	movlw	low __pbssBANK1
  2393  001B  0084               	movwf	4
  2394  001C  3000               	movlw	high __pbssBANK1
  2395  001D  0085               	movwf	5
  2396  001E  3048               	movlw	72
  2397  001F  319A  22FD  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  0022  3020               	movlw	low __pbssBANK2
  2401  0023  0084               	movwf	4
  2402  0024  3001               	movlw	high __pbssBANK2
  2403  0025  0085               	movwf	5
  2404  0026  304E               	movlw	78
  2405  0027  319A  22FD  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  002A  30A0               	movlw	low __pbssBANK3
  2409  002B  0084               	movwf	4
  2410  002C  3001               	movlw	high __pbssBANK3
  2411  002D  0085               	movwf	5
  2412  002E  304F               	movlw	79
  2413  002F  319A  22FD  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  0032  3020               	movlw	low __pbssBANK4
  2417  0033  0084               	movwf	4
  2418  0034  3002               	movlw	high __pbssBANK4
  2419  0035  0085               	movwf	5
  2420  0036  3025               	movlw	37
  2421  0037  319A  22FD  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  003A  3026               	movlw	low __pidataBANK4
  2425  003B  0084               	movwf	4
  2426  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2427  003D  0085               	movwf	5
  2428  003E  3045               	movlw	low __pdataBANK4
  2429  003F  0086               	movwf	6
  2430  0040  3002               	movlw	high __pdataBANK4
  2431  0041  0087               	movwf	7
  2432  0042  3020               	movlw	32
  2433  0043  319A  22F7         	fcall	init_ram
  2434  0045                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  0045                     __end_of__initialization:	
  2438  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  0046  0020               	movlb	0
  2440  0047  3188  2813         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03C0                     __pbitbssCOMMON:	
  2444  03C0                     _Receive_OK:	
  2445  03C0                     	ds	1
  2446  03C1                     _Transceive_OK:	
  2447  03C1                     	ds	1
  2448                           
  2449                           	psect	bssCOMMON
  2450  0075                     __pbssCOMMON:	
  2451  0075                     _DelayOff:	
  2452  0075                     	ds	1
  2453  0076                     _DimmerLightsIntr:	
  2454  0076                     	ds	1
  2455  0077                     _Sw:	
  2456  0077                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006F                     __pbssBANK0:	
  2460  006F                     _DimmerLights:	
  2461  006F                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _myMain:	
  2466  00A0                     	ds	14
  2467  00AE                     _Buz1:	
  2468  00AE                     	ds	12
  2469  00BA                     _RF1:	
  2470  00BA                     	ds	12
  2471  00C6                     _Dimmer:	
  2472  00C6                     	ds	3
  2473  00C9                     _CRC:	
  2474  00C9                     	ds	1
  2475  00CA                     _DimmerLights11:	
  2476  00CA                     	ds	1
  2477  00CB                     _DimmerLights22:	
  2478  00CB                     	ds	1
  2479  00CC                     _DimmerLightsIntrIOC:	
  2480  00CC                     	ds	1
  2481  00CD                     _LED:	
  2482  00CD                     	ds	1
  2483  00CE                     _RSSI:	
  2484  00CE                     	ds	1
  2485  00CF                     _Rx_Length:	
  2486  00CF                     	ds	1
  2487  00D0                     _SPI0Buffer:	
  2488  00D0                     	ds	1
  2489  00D1                     _SwDetect:	
  2490  00D1                     	ds	1
  2491  00D2                     _Tx_Length:	
  2492  00D2                     	ds	1
  2493  00D3                     _r_address:	
  2494  00D3                     	ds	1
  2495  00D4                     _r_data:	
  2496  00D4                     	ds	1
  2497  00D5                     _s_data:	
  2498  00D5                     	ds	1
  2499  00D6                     _Temp:	
  2500  00D6                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _Timer1:	
  2505  0120                     	ds	3
  2506  0123                     _RF_Count:	
  2507  0123                     	ds	2
  2508  0125                     _WDT:	
  2509  0125                     	ds	2
  2510  0127                     _Load:	
  2511  0127                     	ds	46
  2512  0155                     _DimmerLights1:	
  2513  0155                     	ds	17
  2514  0166                     _VarErrLED:	
  2515  0166                     	ds	4
  2516  016A                     _VarLED1:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _DimmerLights2:	
  2524  01BE                     	ds	17
  2525  01CF                     _Sw1:	
  2526  01CF                     	ds	9
  2527  01D8                     _Sw2:	
  2528  01D8                     	ds	9
  2529  01E1                     _DlySw1:	
  2530  01E1                     	ds	5
  2531  01E6                     _DlySw2:	
  2532  01E6                     	ds	5
  2533  01EB                     _VarLED2:	
  2534  01EB                     	ds	4
  2535                           
  2536                           	psect	bssBANK4
  2537  0220                     __pbssBANK4:	
  2538  0220                     _Memory:	
  2539  0220                     	ds	37
  2540                           
  2541                           	psect	dataBANK4
  2542  0245                     __pdataBANK4:	
  2543  0245                     __product:	
  2544  0245                     	ds	32
  2545                           
  2546                           	psect	clrtext
  2547  1AFD                     clear_ram0:	
  2548                           ;	Called with FSR0 containing the base address, and
  2549                           ;	WREG with the size to clear
  2550                           
  2551  1AFD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2552  1AFE                     clrloop0:	
  2553  1AFE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2554  1AFF  3101               	addfsr 0,1
  2555  1B00  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2556  1B01  2AFE               	goto	clrloop0	;have we reached the end yet?
  2557  1B02  3400               	retlw	0	;all done for this memory range, return
  2558                           
  2559                           	psect	inittext
  2560  1AF7                     init_ram:	
  2561  1AF7  00FE               	movwf	126
  2562  1AF8                     initloop:	
  2563  1AF8  0012               	moviw fsr0++
  2564  1AF9  001E               	movwi fsr1++
  2565  1AFA  0BFE               	decfsz	126,f
  2566  1AFB  2AF8               	goto	initloop
  2567  1AFC  3400               	retlw	0
  2568                           
  2569                           	psect	cstackBANK4
  2570  0265                     __pcstackBANK4:	
  2571  0265                     setRF_Main@loop_f:	
  2572                           
  2573                           ; 1 bytes @ 0x0
  2574  0265                     	ds	1
  2575  0266                     setRF_Main@Receive_OK:	
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  0266                     	ds	1
  2579  0267                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x2
  2582  0267                     	ds	1
  2583  0268                     ?_main:	
  2584  0268                     main@argc:	
  2585                           ; 2 bytes @ 0x3
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  0268                     	ds	2
  2590  026A                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x5
  2593  026A                     	ds	2
  2594                           
  2595                           	psect	cstackBANK1
  2596  00E8                     __pcstackBANK1:	
  2597  00E8                     setDimmerLights_ErrorClose@count:	
  2598  00E8                     Exception_Main@count:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601                           
  2602                           ; 1 bytes @ 0x0
  2603  00E8                     	ds	1
  2604  00E9                     setDimmerLights_ErrorClose@lights:	
  2605  00E9                     Exception_Main@error:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608                           
  2609                           ; 1 bytes @ 0x1
  2610  00E9                     	ds	1
  2611  00EA                     setDimmerLights_ErrorClose@i:	
  2612  00EA                     Exception_Main@i:	
  2613                           ; 2 bytes @ 0x2
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x2
  2617  00EA                     	ds	2
  2618  00EC                     getRxData@error:	
  2619  00EC                     Exception_Main@i_3620:	
  2620                           ; 1 bytes @ 0x4
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0x4
  2624  00EC                     	ds	1
  2625  00ED                     ??_setRF_Main:	
  2626                           
  2627                           ; 0 bytes @ 0x5
  2628  00ED                     	ds	1
  2629  00EE                     Exception_Main@lights:	
  2630                           
  2631                           ; 1 bytes @ 0x6
  2632  00EE                     	ds	1
  2633                           
  2634                           	psect	cstackCOMMON
  2635  0070                     __pcstackCOMMON:	
  2636  0070                     ?_Timeout_Counter:	
  2637  0070                     ?_set_TimeoutCleared:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_WriteByte:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_WriteCommand:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ReadStatus:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ReadByte:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_PowerRST:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_InitSetREG:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_InitPATable:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_ClearTXFIFO:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_ClearRXFIFO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_FrequencyCabr:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_SIDLEMode:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DlyOff_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DlyOff_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setDimmerLights_ErrorClose:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setDimmerLights_Line:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setTxData:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_IOC_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_TMR1_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Flash_Memory_Write:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Modify:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_WDT_Clearing:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_myMain_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Temp_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Load_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Switch_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_getLoad_AD:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_getTemp_AD:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_my_MainTimer:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Temp_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Load_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Switch_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RF_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Exception_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setLoad_AH_AL_Restore:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setTemp_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setTemp_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRF_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_RF_RxDisable:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_getRxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setLog_Code:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setControl_Lights_Table:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setRFSW_Control:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRFSW_AdjControl:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setRF_DimmerValue:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setSw_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Buzzer_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_TxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_RxData:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_CC2500_PowerOnInitial:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOffPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DelayOff_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerIntrIOCPointSelect:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ??_DimmerIntrIOCPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerIntrPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ??_DimmerIntrPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_setDimmerLights_IntrControl:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLightsPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_setDimmerLights_SwOn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerLights_SwOff:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setDimmerLights_AdjOn:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setDimmerLights_AdjRF:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Mcu_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_ISR:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_setDimmerReClock:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_Modify:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_setMemory_LoopSave:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_setRF_Learn:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_TouchPower:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_SwPointSelect:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_DelayTimejudge:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Allow_Condition:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_setPercentValue:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getPercentValue:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getRF_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getSw_KeyStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDelayOff_GO:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDimmer_LoadGO:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerLights_Line:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerLights_Status:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getAll_DimmerLights_AdjSw:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmer_Load_Status:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getMain_Lights_Count:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x0
  2978  0070                     	ds	1
  2979  0071                     DimmerIntrIOCPointSelect@lights:	
  2980  0071                     DimmerIntrPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x1
  2985  0071                     	ds	1
  2986  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2987  0072                     ??_setDimmerLights_IntrControl:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x2
  2995  0072                     	ds	1
  2996  0073                     ??_IOC_ISR:	
  2997  0073                     ??_setDimmerReClock:	
  2998                           ; 0 bytes @ 0x3
  2999                           
  3000  0073                     setDimmerLights_IntrControl@lights:	
  3001                           ; 0 bytes @ 0x3
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x3
  3005  0073                     	ds	1
  3006  0074                     ??_TMR1_ISR:	
  3007  0074                     ??_ISR:	
  3008                           ; 0 bytes @ 0x4
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0x4
  3012  0074                     	ds	1
  3013                           
  3014                           	psect	cstackBANK0
  3015  0020                     __pcstackBANK0:	
  3016  0020                     ??_Timeout_Counter:	
  3017  0020                     ??_set_TimeoutCleared:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_CC2500_WriteByte:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_CC2500_ReadByte:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ?_DelayTime_1us:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_setTxData:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_Fosc_Set:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_IO_Set:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_TMR1_Set:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_ADC_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IOC_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_WDT_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Flash_Memory_Read:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ?_setMemory_Data:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Flash_Memory_Write:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_WDT_Clearing:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_myMain_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Temp_Initialization:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setLoad_AH_AL_Restore:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_setTemp_Initialization:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_setRF_Initialization:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getRF_KeyStatus:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getSw_KeyStatus:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Buzzer_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Buzzer_Main:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_DelayOffPointSelect:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_DimmerLightsPointSelect:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_getDimmer_LoadGO:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getDimmerLights_Line:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getDimmer_Load_Status:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_LedPointSelect:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Unlock:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_Flash_Memory_Erasing:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_setMemory_Modify:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_setMemory_LoopSave:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Main:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_getMain_Lights_Count:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_setRF_Learn:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_TouchPower:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_SwPointSelect:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ?___bmul:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ?_getBuz_GO:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     ?_getAD:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155  0020                     ?___wmul:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158  0020                     ?___awdiv:	
  3159                           ; 2 bytes @ 0x0
  3160                           
  3161  0020                     ?___lwdiv:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164  0020                     ?___ftpack:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167  0020                     getDimmer_LoadGO@loadgo:	
  3168                           ; 3 bytes @ 0x0
  3169                           
  3170  0020                     setDimmerLights_Line@lights:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     getDimmer_Load_Status@status:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     getAD@adcon1:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     setMemory_Data@data:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0020                     getMain_LightsStatus@status:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     getMain_Lights_Count@count:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     getLoad_OK@ok:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0020                     ___bmul@multiplicand:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0020                     DelayTime_1us@count:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0020                     ___wmul@multiplier:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ___awdiv@divisor:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     ___lwdiv@divisor:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206  0020                     ___ftpack@arg:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209                           
  3210                           ; 3 bytes @ 0x0
  3211  0020                     	ds	1
  3212  0021                     ??_getDimmerLights_Allow_Condition:	
  3213  0021                     ??_setMemory_Data:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_RF_Initialization:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??_Mcu_Initialization:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     ??___bmul:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     CC2500_WriteByte@loop_a:	
  3226                           ; 0 bytes @ 0x1
  3227                           
  3228  0021                     CC2500_ReadByte@loop_b:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     DelayOffPointSelect@sw:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     DimmerLightsPointSelect@lights:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     getDimmerLights_Line@line:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     LedPointSelect@led:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     Flash_Memory_Read@i:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     Flash_Memory_Write@i:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     setMemory_Modify@command:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     setMemory_LoopSave@command:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255  0021                     getMain_Lights_Count@status1:	
  3256                           ; 1 bytes @ 0x1
  3257                           
  3258  0021                     setLoad_AH_AL_Restore@i:	
  3259                           ; 1 bytes @ 0x1
  3260                           
  3261  0021                     setRF_Learn@command:	
  3262                           ; 1 bytes @ 0x1
  3263                           
  3264  0021                     getRF_KeyStatus@key:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     SwPointSelect@sw:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     _getSw_KeyStatus$6246:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273  0021                     _getMain_All_Error_Status$3605:	
  3274                           ; 1 bytes @ 0x1
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x1
  3278  0021                     	ds	1
  3279  0022                     ??_CC2500_WriteCommand:	
  3280  0022                     ??_CC2500_ReadStatus:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_DelayTime_1us:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ?_CC2500_WriteREG:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_DlyOff_Initialization:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_setDimmerLights_Initialization:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     ?_setLED:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     ??_setLED_Main:	
  3299                           ; 0 bytes @ 0x2
  3300                           
  3301  0022                     ??_Load_Initialization:	
  3302                           ; 0 bytes @ 0x2
  3303                           
  3304  0022                     ??_getBuz_GO:	
  3305                           ; 0 bytes @ 0x2
  3306                           
  3307  0022                     ??_getDelayOff_GO:	
  3308                           ; 0 bytes @ 0x2
  3309                           
  3310  0022                     ??_getDimmerLights_Status:	
  3311                           ; 0 bytes @ 0x2
  3312                           
  3313  0022                     ??_getAll_DimmerLights_AdjSw:	
  3314                           ; 0 bytes @ 0x2
  3315                           
  3316  0022                     CC2500_WriteREG@value:	
  3317                           ; 0 bytes @ 0x2
  3318                           
  3319  0022                     DlyOff_Initialization@sw:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     getDelayOff_GO@sw:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     _getDimmerLights_Allow_Condition$2329:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     getDimmerLights_Status@lights:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     setLED@command:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     Flash_Memory_Read@address:	
  3335                           ; 1 bytes @ 0x2
  3336                           
  3337  0022                     setMemory_Data@address:	
  3338                           ; 1 bytes @ 0x2
  3339                           
  3340  0022                     getMain_Lights_Count@status2:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0022                     _getRF_KeyStatus$5260:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0022                     _getSw_KeyStatus$6247:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0022                     ___bmul@product:	
  3350                           ; 1 bytes @ 0x2
  3351                           
  3352  0022                     DelayTime_1us@i:	
  3353                           ; 1 bytes @ 0x2
  3354                           
  3355  0022                     ___wmul@multiplicand:	
  3356                           ; 2 bytes @ 0x2
  3357                           
  3358  0022                     ___awdiv@dividend:	
  3359                           ; 2 bytes @ 0x2
  3360                           
  3361  0022                     ___lwdiv@dividend:	
  3362                           ; 2 bytes @ 0x2
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x2
  3366  0022                     	ds	1
  3367  0023                     ??_CC2500_WriteREG:	
  3368  0023                     ??_setLED:	
  3369                           ; 0 bytes @ 0x3
  3370                           
  3371  0023                     ??_DelayOff_Initialization:	
  3372                           ; 0 bytes @ 0x3
  3373                           
  3374  0023                     ??_getAD:	
  3375                           ; 0 bytes @ 0x3
  3376                           
  3377  0023                     CC2500_WriteCommand@command:	
  3378                           ; 0 bytes @ 0x3
  3379                           
  3380  0023                     CC2500_ReadStatus@status_addr:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     getDelayOff_GO@go:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     setDimmerLights_Initialization@lights:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     _getDimmerLights_Allow_Condition$2330:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392  0023                     getDimmerLights_Status@status:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0023                     getAll_DimmerLights_AdjSw@count:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0023                     setLED@led:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401  0023                     getAD@adcon0:	
  3402                           ; 1 bytes @ 0x3
  3403                           
  3404  0023                     Flash_Memory_Read@ret:	
  3405                           ; 1 bytes @ 0x3
  3406                           
  3407  0023                     getSw_KeyStatus@status:	
  3408                           ; 1 bytes @ 0x3
  3409                           
  3410  0023                     ___bmul@multiplier:	
  3411                           ; 1 bytes @ 0x3
  3412                           
  3413  0023                     ___ftpack@exp:	
  3414                           ; 1 bytes @ 0x3
  3415                           
  3416  0023                     _getMain_All_Error_Status$3606:	
  3417                           ; 1 bytes @ 0x3
  3418                           
  3419                           
  3420                           ; 2 bytes @ 0x3
  3421  0023                     	ds	1
  3422  0024                     ??_CC2500_ClearTXFIFO:	
  3423  0024                     ??_CC2500_ClearRXFIFO:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_CC2500_SIDLEMode:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_DelayTimejudge:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_setLED_Initialization:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??_Flash_Memory_Modify:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??_getLoad_AD:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??_getTemp_AD:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     ??_RF_RxDisable:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     ??_setSw_Initialization:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450  0024                     ??_CC2500_TxData:	
  3451                           ; 0 bytes @ 0x4
  3452                           
  3453  0024                     ??_CC2500_RxData:	
  3454                           ; 0 bytes @ 0x4
  3455                           
  3456  0024                     ??_DimmerLights_Initialization:	
  3457                           ; 0 bytes @ 0x4
  3458                           
  3459  0024                     ??___wmul:	
  3460                           ; 0 bytes @ 0x4
  3461                           
  3462  0024                     ??___awdiv:	
  3463                           ; 0 bytes @ 0x4
  3464                           
  3465  0024                     ??___lwdiv:	
  3466                           ; 0 bytes @ 0x4
  3467                           
  3468  0024                     CC2500_WriteREG@w_addr:	
  3469                           ; 0 bytes @ 0x4
  3470                           
  3471  0024                     _getDimmerLights_Allow_Condition$2331:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0024                     setLED_Initialization@led:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0024                     setLED_Main@led:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0024                     setSw_Initialization@sw:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0024                     getSw_KeyStatus@sw:	
  3484                           ; 1 bytes @ 0x4
  3485                           
  3486  0024                     ___ftpack@sign:	
  3487                           ; 1 bytes @ 0x4
  3488                           
  3489  0024                     getBuz_GO@i:	
  3490                           ; 1 bytes @ 0x4
  3491                           
  3492  0024                     DelayTime_1us@j:	
  3493                           ; 2 bytes @ 0x4
  3494                           
  3495  0024                     getAll_DimmerLights_AdjSw@i:	
  3496                           ; 2 bytes @ 0x4
  3497                           
  3498  0024                     ___wmul@product:	
  3499                           ; 2 bytes @ 0x4
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x4
  3503  0024                     	ds	1
  3504  0025                     ??_CC2500_InitSetREG:	
  3505  0025                     ??_CC2500_InitPATable:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0025                     ??_Switch_Initialization:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0025                     ??___ftpack:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0025                     ??_LED_Initialization:	
  3515                           ; 0 bytes @ 0x5
  3516                           
  3517  0025                     ??_LED_Main:	
  3518                           ; 0 bytes @ 0x5
  3519                           
  3520  0025                     CC2500_TxData@loop_e:	
  3521                           ; 0 bytes @ 0x5
  3522                           
  3523  0025                     CC2500_RxData@loop_f:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0025                     getDimmerLights_Allow_Condition@lights:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0025                     Flash_Memory_Modify@i:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532  0025                     getMain_All_Error_Status@command:	
  3533                           ; 1 bytes @ 0x5
  3534                           
  3535  0025                     getTemp_AD@channel:	
  3536                           ; 1 bytes @ 0x5
  3537                           
  3538  0025                     ___awdiv@counter:	
  3539                           ; 1 bytes @ 0x5
  3540                           
  3541  0025                     ___lwdiv@counter:	
  3542                           ; 1 bytes @ 0x5
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x5
  3546  0025                     	ds	1
  3547  0026                     ??_CC2500_PowerRST:	
  3548  0026                     ??_CC2500_FrequencyCabr:	
  3549                           ; 0 bytes @ 0x6
  3550                           
  3551  0026                     ??_Flash_Memory_Main:	
  3552                           ; 0 bytes @ 0x6
  3553                           
  3554  0026                     CC2500_InitSetREG@temp1:	
  3555                           ; 0 bytes @ 0x6
  3556                           
  3557  0026                     CC2500_InitPATable@temp:	
  3558                           ; 1 bytes @ 0x6
  3559                           
  3560  0026                     DelayTimejudge@i:	
  3561                           ; 1 bytes @ 0x6
  3562                           
  3563  0026                     getDimmerLights_Allow_Condition@allow:	
  3564                           ; 1 bytes @ 0x6
  3565                           
  3566  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3567                           ; 1 bytes @ 0x6
  3568                           
  3569  0026                     getMain_All_Error_Status@status:	
  3570                           ; 1 bytes @ 0x6
  3571                           
  3572  0026                     getLoad_AD@channel:	
  3573                           ; 1 bytes @ 0x6
  3574                           
  3575  0026                     ___awdiv@sign:	
  3576                           ; 1 bytes @ 0x6
  3577                           
  3578  0026                     ___lwdiv@quotient:	
  3579                           ; 1 bytes @ 0x6
  3580                           
  3581                           
  3582                           ; 2 bytes @ 0x6
  3583  0026                     	ds	1
  3584  0027                     ??_setDimmerLights_AdjOn:	
  3585  0027                     CC2500_InitSetREG@temp2:	
  3586                           ; 0 bytes @ 0x7
  3587                           
  3588  0027                     CC2500_InitPATable@loop_d:	
  3589                           ; 1 bytes @ 0x7
  3590                           
  3591  0027                     DelayTimejudge@j:	
  3592                           ; 1 bytes @ 0x7
  3593                           
  3594  0027                     setDimmerLights_AdjOn@sw:	
  3595                           ; 1 bytes @ 0x7
  3596                           
  3597  0027                     getLoad_AD@k:	
  3598                           ; 1 bytes @ 0x7
  3599                           
  3600  0027                     ___awdiv@quotient:	
  3601                           ; 1 bytes @ 0x7
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x7
  3605  0027                     	ds	1
  3606  0028                     ??_Load_Main:	
  3607  0028                     ?___awtoft:	
  3608                           ; 0 bytes @ 0x8
  3609                           
  3610  0028                     CC2500_InitSetREG@loop_c:	
  3611                           ; 3 bytes @ 0x8
  3612                           
  3613  0028                     DelayTimejudge@k:	
  3614                           ; 1 bytes @ 0x8
  3615                           
  3616  0028                     getLoad_AD@j:	
  3617                           ; 1 bytes @ 0x8
  3618                           
  3619  0028                     ___awtoft@c:	
  3620                           ; 1 bytes @ 0x8
  3621                           
  3622                           
  3623                           ; 2 bytes @ 0x8
  3624  0028                     	ds	1
  3625  0029                     ?_setBuz:	
  3626  0029                     ??_CC2500_PowerOnInitial:	
  3627                           ; 0 bytes @ 0x9
  3628                           
  3629  0029                     DelayTimejudge@value:	
  3630                           ; 0 bytes @ 0x9
  3631                           
  3632  0029                     getLoad_AD@i:	
  3633                           ; 1 bytes @ 0x9
  3634                           
  3635  0029                     setBuz@time:	
  3636                           ; 1 bytes @ 0x9
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x9
  3640  0029                     	ds	1
  3641  002A                     Load_Main@error:	
  3642                           
  3643                           ; 1 bytes @ 0xA
  3644  002A                     	ds	1
  3645  002B                     ??_setBuz:	
  3646  002B                     ??___awtoft:	
  3647                           ; 0 bytes @ 0xB
  3648                           
  3649  002B                     Load_Main@Load_Status:	
  3650                           ; 0 bytes @ 0xB
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xB
  3654  002B                     	ds	1
  3655  002C                     setBuz@count:	
  3656  002C                     Load_Main@i:	
  3657                           ; 1 bytes @ 0xC
  3658                           
  3659                           
  3660                           ; 2 bytes @ 0xC
  3661  002C                     	ds	1
  3662  002D                     ??_my_MainTimer:	
  3663  002D                     ??_setDimmerLights_SwOn:	
  3664                           ; 0 bytes @ 0xD
  3665                           
  3666  002D                     ___awtoft@sign:	
  3667                           ; 0 bytes @ 0xD
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0xD
  3671  002D                     	ds	1
  3672  002E                     ?___ftdiv:	
  3673  002E                     ?___ftmul:	
  3674                           ; 3 bytes @ 0xE
  3675                           
  3676  002E                     _setDimmerLights_SwOn$2310:	
  3677                           ; 3 bytes @ 0xE
  3678                           
  3679  002E                     ___ftdiv@f2:	
  3680                           ; 1 bytes @ 0xE
  3681                           
  3682  002E                     ___ftmul@f1:	
  3683                           ; 3 bytes @ 0xE
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0xE
  3687  002E                     	ds	1
  3688  002F                     _setDimmerLights_SwOn$2311:	
  3689                           
  3690                           ; 1 bytes @ 0xF
  3691  002F                     	ds	1
  3692  0030                     setDimmerLights_SwOn@idle:	
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     setDimmerLights_SwOn@sw:	
  3697  0031                     ___ftdiv@f1:	
  3698                           ; 1 bytes @ 0x11
  3699                           
  3700  0031                     ___ftmul@f2:	
  3701                           ; 3 bytes @ 0x11
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0x11
  3705  0031                     	ds	3
  3706  0034                     ??___ftdiv:	
  3707  0034                     ??___ftmul:	
  3708                           ; 0 bytes @ 0x14
  3709                           
  3710                           
  3711                           ; 0 bytes @ 0x14
  3712  0034                     	ds	4
  3713  0038                     ___ftdiv@cntr:	
  3714  0038                     ___ftmul@exp:	
  3715                           ; 1 bytes @ 0x18
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x18
  3719  0038                     	ds	1
  3720  0039                     ___ftdiv@f3:	
  3721  0039                     ___ftmul@f3_as_product:	
  3722                           ; 3 bytes @ 0x19
  3723                           
  3724                           
  3725                           ; 3 bytes @ 0x19
  3726  0039                     	ds	3
  3727  003C                     ___ftdiv@exp:	
  3728  003C                     ___ftmul@cntr:	
  3729                           ; 1 bytes @ 0x1C
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x1C
  3733  003C                     	ds	1
  3734  003D                     ___ftdiv@sign:	
  3735  003D                     ___ftmul@sign:	
  3736                           ; 1 bytes @ 0x1D
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x1D
  3740  003D                     	ds	1
  3741  003E                     ?___ftneg:	
  3742  003E                     ___ftneg@f1:	
  3743                           ; 3 bytes @ 0x1E
  3744                           
  3745                           
  3746                           ; 3 bytes @ 0x1E
  3747  003E                     	ds	3
  3748  0041                     ??___ftneg:	
  3749  0041                     ?___ftadd:	
  3750                           ; 0 bytes @ 0x21
  3751                           
  3752  0041                     ___ftadd@f1:	
  3753                           ; 3 bytes @ 0x21
  3754                           
  3755                           
  3756                           ; 3 bytes @ 0x21
  3757  0041                     	ds	3
  3758  0044                     ___ftadd@f2:	
  3759                           
  3760                           ; 3 bytes @ 0x24
  3761  0044                     	ds	3
  3762  0047                     ??___ftadd:	
  3763                           
  3764                           ; 0 bytes @ 0x27
  3765  0047                     	ds	4
  3766  004B                     ___ftadd@sign:	
  3767                           
  3768                           ; 1 bytes @ 0x2B
  3769  004B                     	ds	1
  3770  004C                     ___ftadd@exp2:	
  3771                           
  3772                           ; 1 bytes @ 0x2C
  3773  004C                     	ds	1
  3774  004D                     ___ftadd@exp1:	
  3775                           
  3776                           ; 1 bytes @ 0x2D
  3777  004D                     	ds	1
  3778  004E                     ?___fttol:	
  3779  004E                     ___fttol@f1:	
  3780                           ; 4 bytes @ 0x2E
  3781                           
  3782                           
  3783                           ; 3 bytes @ 0x2E
  3784  004E                     	ds	4
  3785  0052                     ??___fttol:	
  3786                           
  3787                           ; 0 bytes @ 0x32
  3788  0052                     	ds	4
  3789  0056                     ___fttol@sign1:	
  3790                           
  3791                           ; 1 bytes @ 0x36
  3792  0056                     	ds	1
  3793  0057                     ___fttol@lval:	
  3794                           
  3795                           ; 4 bytes @ 0x37
  3796  0057                     	ds	4
  3797  005B                     ___fttol@exp1:	
  3798                           
  3799                           ; 1 bytes @ 0x3B
  3800  005B                     	ds	1
  3801  005C                     ??_setPercentValue:	
  3802  005C                     ??_getPercentValue:	
  3803                           ; 0 bytes @ 0x3C
  3804                           
  3805                           
  3806                           ; 0 bytes @ 0x3C
  3807  005C                     	ds	2
  3808  005E                     getPercentValue@value:	
  3809  005E                     setPercentValue@value:	
  3810                           ; 1 bytes @ 0x3E
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x3E
  3814  005E                     	ds	1
  3815  005F                     getPercentValue@i:	
  3816  005F                     setPercentValue@i:	
  3817                           ; 3 bytes @ 0x3F
  3818                           
  3819                           
  3820                           ; 3 bytes @ 0x3F
  3821  005F                     	ds	3
  3822  0062                     ?_setProductData:	
  3823  0062                     ??_setDimmerLights_AdjRF:	
  3824                           ; 0 bytes @ 0x42
  3825                           
  3826  0062                     ??_Flash_Memory_Initialization:	
  3827                           ; 0 bytes @ 0x42
  3828                           
  3829  0062                     setProductData@value:	
  3830                           ; 0 bytes @ 0x42
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x42
  3834  0062                     	ds	1
  3835  0063                     ??_setProductData:	
  3836  0063                     setDimmerLights_AdjRF@lights:	
  3837                           ; 0 bytes @ 0x43
  3838                           
  3839  0063                     Flash_Memory_Initialization@i:	
  3840                           ; 1 bytes @ 0x43
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x43
  3844  0063                     	ds	2
  3845  0065                     setProductData@address:	
  3846                           
  3847                           ; 1 bytes @ 0x45
  3848  0065                     	ds	1
  3849  0066                     ?_setRF_DimmerLights:	
  3850  0066                     ??_setTemp_Main:	
  3851                           ; 0 bytes @ 0x46
  3852                           
  3853  0066                     ??_setLog_Code:	
  3854                           ; 0 bytes @ 0x46
  3855                           
  3856  0066                     ??_setRF_DimmerValue:	
  3857                           ; 0 bytes @ 0x46
  3858                           
  3859  0066                     ?_setDelayOff_GO:	
  3860                           ; 0 bytes @ 0x46
  3861                           
  3862  0066                     setDelayOff_GO@command:	
  3863                           ; 0 bytes @ 0x46
  3864                           
  3865  0066                     setRF_DimmerLights@on:	
  3866                           ; 1 bytes @ 0x46
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x46
  3870  0066                     	ds	1
  3871  0067                     ??_setRF_DimmerLights:	
  3872  0067                     setDelayOff_GO@value:	
  3873                           ; 0 bytes @ 0x47
  3874                           
  3875  0067                     setRF_DimmerValue@lights:	
  3876                           ; 1 bytes @ 0x47
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x47
  3880  0067                     	ds	1
  3881  0068                     ??_setRFSW_AdjControl:	
  3882  0068                     ??_setDelayOff_GO:	
  3883                           ; 0 bytes @ 0x48
  3884                           
  3885  0068                     setTemp_Main@error:	
  3886                           ; 0 bytes @ 0x48
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x48
  3890  0068                     	ds	1
  3891  0069                     ??_Temp_Main:	
  3892  0069                     setDelayOff_GO@sw:	
  3893                           ; 0 bytes @ 0x49
  3894                           
  3895  0069                     setRF_DimmerLights@status:	
  3896                           ; 1 bytes @ 0x49
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x49
  3900  0069                     	ds	1
  3901  006A                     ??_setDimmerLights_SwOff:	
  3902  006A                     setDimmerLights_SwOff@sw:	
  3903                           ; 0 bytes @ 0x4A
  3904                           
  3905  006A                     setRFSW_AdjControl@status:	
  3906                           ; 1 bytes @ 0x4A
  3907                           
  3908  006A                     setRF_DimmerLights@lights:	
  3909                           ; 1 bytes @ 0x4A
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x4A
  3913  006A                     	ds	1
  3914  006B                     ??_setDimmerLights_ErrorClose:	
  3915  006B                     ?_setDimmerLights:	
  3916                           ; 0 bytes @ 0x4B
  3917                           
  3918  006B                     ?_setDimmerLights_Adj:	
  3919                           ; 0 bytes @ 0x4B
  3920                           
  3921  006B                     ??_Exception_Main:	
  3922                           ; 0 bytes @ 0x4B
  3923                           
  3924  006B                     ??_setRFSW_Control:	
  3925                           ; 0 bytes @ 0x4B
  3926                           
  3927  006B                     ??_setSw_Main:	
  3928                           ; 0 bytes @ 0x4B
  3929                           
  3930  006B                     setDimmerLights@status:	
  3931                           ; 0 bytes @ 0x4B
  3932                           
  3933  006B                     setDimmerLights_Adj@status:	
  3934                           ; 1 bytes @ 0x4B
  3935                           
  3936  006B                     setRFSW_AdjControl@sw:	
  3937                           ; 1 bytes @ 0x4B
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x4B
  3941  006B                     	ds	1
  3942  006C                     ??_DlyOff_Main:	
  3943  006C                     ??_setDimmerLights:	
  3944                           ; 0 bytes @ 0x4C
  3945                           
  3946  006C                     ??_setDimmerLights_Adj:	
  3947                           ; 0 bytes @ 0x4C
  3948                           
  3949  006C                     setRFSW_Control@status:	
  3950                           ; 0 bytes @ 0x4C
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x4C
  3954  006C                     	ds	1
  3955  006D                     setDimmerLights@lights:	
  3956  006D                     setDimmerLights_Adj@lights:	
  3957                           ; 1 bytes @ 0x4D
  3958                           
  3959  006D                     setRFSW_Control@sw:	
  3960                           ; 1 bytes @ 0x4D
  3961                           
  3962  006D                     setSw_Main@sw:	
  3963                           ; 1 bytes @ 0x4D
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x4D
  3967  006D                     	ds	1
  3968  006E                     ??_setDimmerLights_Main:	
  3969  006E                     ??_Switch_Main:	
  3970                           ; 0 bytes @ 0x4E
  3971                           
  3972  006E                     ??_getRxData:	
  3973                           ; 0 bytes @ 0x4E
  3974                           
  3975  006E                     ??_setControl_Lights_Table:	
  3976                           ; 0 bytes @ 0x4E
  3977                           
  3978  006E                     DlyOff_Main@sw:	
  3979                           ; 0 bytes @ 0x4E
  3980                           
  3981  006E                     setDimmerLights_Main@lights:	
  3982                           ; 1 bytes @ 0x4E
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0x4E
  3986  006E                     	ds	1
  3987  006F                     ??_RF_Main:	
  3988  006F                     ??_DelayOff_Main:	
  3989                           ; 0 bytes @ 0x4F
  3990                           
  3991  006F                     ??_DimmerLights_Main:	
  3992                           ; 0 bytes @ 0x4F
  3993                           
  3994  006F                     ??_main:	
  3995                           ; 0 bytes @ 0x4F
  3996                           
  3997                           
  3998                           	psect	maintext
  3999  0813                     __pmaintext:	
  4000                           ; 0 bytes @ 0x4F
  4001 ;;
  4002 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4003 ;;
  4004 ;; *************** function _main *****************
  4005 ;; Defined at:
  4006 ;;		line 7 in file "../src/Main_B1.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  argc            2    3[BANK4 ] int 
  4009 ;;  argv            2    5[BANK4 ] PTR PTR unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  2    3[BANK4 ] int 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 17F/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4021 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4025 ;;Total ram usage:        4 bytes
  4026 ;; Hardware stack levels required when called:   15
  4027 ;; This function calls:
  4028 ;;		_Buzzer_Initialization
  4029 ;;		_Buzzer_Main
  4030 ;;		_CC2500_PowerOnInitial
  4031 ;;		_DelayOff_Initialization
  4032 ;;		_DelayOff_Main
  4033 ;;		_DimmerLights_Initialization
  4034 ;;		_DimmerLights_Main
  4035 ;;		_Exception_Main
  4036 ;;		_Flash_Memory_Initialization
  4037 ;;		_Flash_Memory_Main
  4038 ;;		_LED_Initialization
  4039 ;;		_LED_Main
  4040 ;;		_Load_Initialization
  4041 ;;		_Load_Main
  4042 ;;		_Mcu_Initialization
  4043 ;;		_RF_Initialization
  4044 ;;		_RF_Main
  4045 ;;		_Switch_Initialization
  4046 ;;		_Switch_Main
  4047 ;;		_Temp_Initialization
  4048 ;;		_Temp_Main
  4049 ;;		_WDT_Main
  4050 ;;		_getLoad_AD
  4051 ;;		_getTemp_AD
  4052 ;;		_myMain_Initialization
  4053 ;;		_my_MainTimer
  4054 ;; This function is called by:
  4055 ;;		Startup code after reset
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _main
  4061  0813                     _main:	
  4062                           
  4063                           ;Main_B1.c: 8: myMain_Initialization();
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4067  0813  319C  2403  3188   	fcall	_myMain_Initialization
  4068                           
  4069                           ;Main_B1.c: 9: Mcu_Initialization();
  4070  0816  319C  248B  3188   	fcall	_Mcu_Initialization
  4071                           
  4072                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4073  0819  3186  263F  3188   	fcall	_Flash_Memory_Initialization
  4074                           
  4075                           ;Main_B1.c: 11: LED_Initialization();
  4076  081C  319B  238E  3188   	fcall	_LED_Initialization
  4077                           
  4078                           ;Main_B1.c: 12: Buzzer_Initialization();
  4079  081F  319A  22CA  3188   	fcall	_Buzzer_Initialization
  4080                           
  4081                           ;Main_B1.c: 14: ;;
  4082                           ;Main_B1.c: 15: Temp_Initialization();
  4083  0822  319A  22D6  3188   	fcall	_Temp_Initialization
  4084                           
  4085                           ;Main_B1.c: 16: Load_Initialization();
  4086  0825  319A  22CD  3188   	fcall	_Load_Initialization
  4087                           
  4088                           ;Main_B1.c: 17: ;;
  4089                           ;Main_B1.c: 18: DelayOff_Initialization();
  4090  0828  319B  2312  3188   	fcall	_DelayOff_Initialization
  4091                           
  4092                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4093  082B  319D  2510  3188   	fcall	_DimmerLights_Initialization
  4094                           
  4095                           ;Main_B1.c: 21: ;;
  4096                           ;Main_B1.c: 22: ;;
  4097                           ;Main_B1.c: 23: ;;
  4098                           ;Main_B1.c: 24: Switch_Initialization();
  4099  082E  319B  23CA  3188   	fcall	_Switch_Initialization
  4100                           
  4101                           ;Main_B1.c: 25: RF_Initialization();
  4102  0831  319A  22D0  3188   	fcall	_RF_Initialization
  4103                           
  4104                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4105  0834  319D  2589  3188   	fcall	_CC2500_PowerOnInitial
  4106  0837                     l10978:	
  4107                           ;Main_B1.c: 27: ;;
  4108                           ;Main_B1.c: 28: ;;
  4109                           ;Main_B1.c: 30: while (1) {
  4110                           
  4111                           
  4112                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4113  0837  0021               	movlb	1	; select bank1
  4114  0838  1C20               	btfss	_myMain^(0+128),0
  4115  0839  2842               	goto	l10982
  4116                           
  4117                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4118  083A  3005               	movlw	5
  4119  083B  318C  246D  3188   	fcall	_getLoad_AD
  4120                           
  4121                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4122  083E  3009               	movlw	9
  4123  083F  3193  2361  3188   	fcall	_getTemp_AD
  4124  0842                     l10982:	
  4125                           
  4126                           ;Main_B1.c: 57: }
  4127                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4128  0842  0022               	movlb	2	; select bank2
  4129  0843  1C20               	btfss	_Timer1^(0+256),0
  4130  0844  2837               	goto	l10978
  4131                           
  4132                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4133  0845  1020               	bcf	_Timer1^(0+256),0
  4134                           
  4135                           ;Main_B1.c: 96: my_MainTimer();
  4136  0846  3192  22E7  3188   	fcall	_my_MainTimer
  4137                           
  4138                           ;Main_B1.c: 97: WDT_Main();
  4139  0849  319C  249D  3188   	fcall	_WDT_Main
  4140                           
  4141                           ;Main_B1.c: 98: ;;
  4142                           ;Main_B1.c: 99: ;;
  4143                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4144  084C  0021               	movlb	1	; select bank1
  4145  084D  1C20               	btfss	_myMain^(0+128),0
  4146  084E  2837               	goto	l10978
  4147                           
  4148                           ;Main_B1.c: 101: Flash_Memory_Main();
  4149  084F  3191  21CF  3188   	fcall	_Flash_Memory_Main
  4150                           
  4151                           ;Main_B1.c: 103: LED_Main();
  4152  0852  319B  239A  3188   	fcall	_LED_Main
  4153                           
  4154                           ;Main_B1.c: 104: Buzzer_Main();
  4155  0855  3194  2424  3188   	fcall	_Buzzer_Main
  4156                           
  4157                           ;Main_B1.c: 106: ;;
  4158                           ;Main_B1.c: 107: Temp_Main();
  4159  0858  319A  22D9  3188   	fcall	_Temp_Main
  4160                           
  4161                           ;Main_B1.c: 108: Load_Main();
  4162  085B  3180  2049  3188   	fcall	_Load_Main
  4163                           
  4164                           ;Main_B1.c: 109: ;;
  4165                           ;Main_B1.c: 111: ;;
  4166                           ;Main_B1.c: 112: DimmerLights_Main();
  4167  085E  319E  26E6  3188   	fcall	_DimmerLights_Main
  4168                           
  4169                           ;Main_B1.c: 113: Switch_Main();
  4170  0861  319B  235F  3188   	fcall	_Switch_Main
  4171                           
  4172                           ;Main_B1.c: 114: ;;
  4173                           ;Main_B1.c: 115: ;;
  4174                           ;Main_B1.c: 117: RF_Main();
  4175  0864  319A  22D3  3188   	fcall	_RF_Main
  4176                           
  4177                           ;Main_B1.c: 118: DelayOff_Main();
  4178  0867  319B  231A  3188   	fcall	_DelayOff_Main
  4179                           
  4180                           ;Main_B1.c: 119: ;;
  4181                           ;Main_B1.c: 120: ;;
  4182                           ;Main_B1.c: 121: Exception_Main();
  4183  086A  3185  255F  3188   	fcall	_Exception_Main
  4184  086D  2837               	goto	l10978
  4185  086E                     __end_of_main:	
  4186                           ;Main_B1.c: 128: }
  4187                           ;Main_B1.c: 129: }
  4188                           ;Main_B1.c: 163: }
  4189                           ;Main_B1.c: 164: return (0);
  4190                           ;	Return value of _main is never used
  4191                           
  4192                           
  4193                           	psect	text1
  4194  12E7                     __ptext1:	
  4195 ;; *************** function _my_MainTimer *****************
  4196 ;; Defined at:
  4197 ;;		line 185 in file "../src/Main_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    7
  4218 ;; This function calls:
  4219 ;;		_setBuz
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _my_MainTimer
  4227  12E7                     _my_MainTimer:	
  4228                           
  4229                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4233  12E7  0021               	movlb	1	; select bank1
  4234  12E8  1820               	btfsc	_myMain^(0+128),0
  4235  12E9  2B01               	goto	l10680
  4236                           
  4237                           ;Main_B1.c: 189: myMain.PowerCount++;
  4238  12EA  3001               	movlw	1
  4239  12EB  0020               	movlb	0	; select bank0
  4240  12EC  00AD               	movwf	??_my_MainTimer
  4241  12ED  082D               	movf	??_my_MainTimer,w
  4242  12EE  0021               	movlb	1	; select bank1
  4243  12EF  07A1               	addwf	(_myMain^(0+128)+1),f
  4244                           
  4245                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4246  12F0  0821               	movf	(_myMain^(0+128)+1),w
  4247  12F1  3A96               	xorlw	150
  4248  12F2  1D03               	skipz
  4249  12F3  0008               	return
  4250                           
  4251                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4252  12F4  01A1               	clrf	(_myMain^(0+128)+1)
  4253                           
  4254                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4255  12F5  1420               	bsf	_myMain^(0+128),0
  4256                           
  4257                           ;Main_B1.c: 197: setBuz(3, 50);
  4258  12F6  3032               	movlw	50
  4259  12F7  0020               	movlb	0	; select bank0
  4260  12F8  00A9               	movwf	setBuz@time
  4261  12F9  3000               	movlw	0
  4262  12FA  00AA               	movwf	setBuz@time+1
  4263  12FB  3003               	movlw	3
  4264  12FC  3197  274E         	fcall	_setBuz
  4265                           
  4266                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4267  12FE  0021               	movlb	1	; select bank1
  4268  12FF  1620               	bsf	_myMain^(0+128),4
  4269                           
  4270                           ;Main_B1.c: 207: }
  4271                           ;Main_B1.c: 208: } else {
  4272  1300  0008               	return
  4273  1301                     l10680:	
  4274                           
  4275                           ;Main_B1.c: 209: myMain.PowerCount++;
  4276  1301  3001               	movlw	1
  4277  1302  0020               	movlb	0	; select bank0
  4278  1303  00AD               	movwf	??_my_MainTimer
  4279  1304  082D               	movf	??_my_MainTimer,w
  4280  1305  0021               	movlb	1	; select bank1
  4281  1306  07A1               	addwf	(_myMain^(0+128)+1),f
  4282                           
  4283                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4284  1307  0821               	movf	(_myMain^(0+128)+1),w
  4285  1308  3A64               	xorlw	100
  4286  1309  1903               	btfsc	3,2
  4287                           
  4288                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4289  130A  01A1               	clrf	(_myMain^(0+128)+1)
  4290                           
  4291                           ;Main_B1.c: 226: }
  4292                           ;Main_B1.c: 228: myMain.Count1++;
  4293  130B  3001               	movlw	1
  4294  130C  07A4               	addwf	(_myMain^(0+128)+4),f
  4295  130D  3000               	movlw	0
  4296  130E  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4297                           
  4298                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4299  130F  3004               	movlw	4
  4300  1310  3EA0               	addlw	_myMain& (0+255)
  4301  1311  0086               	movwf	6
  4302  1312  0187               	clrf	7
  4303  1313  3F40               	moviw [0]fsr1
  4304  1314  3A64               	xorlw	100
  4305  1315  1D03               	skipz
  4306  1316  2B19               	goto	u12525
  4307  1317  3F41               	moviw [1]fsr1
  4308  1318  3A00               	xorlw	0
  4309  1319                     u12525:	
  4310  1319  1D03               	skipz
  4311  131A  0008               	return
  4312                           
  4313                           ;Main_B1.c: 230: {
  4314                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4315  131B  01A4               	clrf	(_myMain^(0+128)+4)
  4316  131C  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4317                           
  4318                           ;Main_B1.c: 243: if (myMain.Flag) {
  4319  131D  1CA0               	btfss	_myMain^(0+128),1
  4320  131E  2B21               	goto	l1545
  4321                           
  4322                           ;Main_B1.c: 244: myMain.Flag = 0;
  4323  131F  10A0               	bcf	_myMain^(0+128),1
  4324                           
  4325                           ;Main_B1.c: 253: } else {
  4326  1320  0008               	return
  4327  1321                     l1545:	
  4328                           
  4329                           ;Main_B1.c: 254: myMain.Flag = 1;
  4330  1321  14A0               	bsf	_myMain^(0+128),1
  4331  1322  0008               	return
  4332  1323                     __end_of_my_MainTimer:	
  4333                           
  4334                           	psect	text2
  4335  1C03                     __ptext2:	
  4336 ;; *************** function _myMain_Initialization *****************
  4337 ;; Defined at:
  4338 ;;		line 170 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _myMain_Initialization
  4368  1C03                     _myMain_Initialization:	
  4369                           
  4370                           ;Main_B1.c: 173: product = &_product;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4374  1C03  3045               	movlw	__product& (0+255)
  4375  1C04  0020               	movlb	0	; select bank0
  4376  1C05  00A0               	movwf	??_myMain_Initialization
  4377  1C06  0820               	movf	??_myMain_Initialization,w
  4378  1C07  00F9               	movwf	_product
  4379                           
  4380                           ;Main_B1.c: 174: product->Data[20] = 210;
  4381  1C08  30D2               	movlw	210
  4382  1C09  00A0               	movwf	??_myMain_Initialization
  4383  1C0A  0879               	movf	_product,w
  4384  1C0B  3E14               	addlw	20
  4385  1C0C  0086               	movwf	6
  4386  1C0D  3002               	movlw	2	; select bank4/5
  4387  1C0E  0087               	movwf	7
  4388  1C0F  0820               	movf	??_myMain_Initialization,w
  4389  1C10  0081               	movwf	1
  4390  1C11  0008               	return
  4391  1C12                     __end_of_myMain_Initialization:	
  4392                           
  4393                           	psect	text3
  4394  1361                     __ptext3:	
  4395 ;; *************** function _getTemp_AD *****************
  4396 ;; Defined at:
  4397 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  channel         1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  channel         1    5[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_getAD
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getTemp_AD
  4427  1361                     _getTemp_AD:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4431                           ;getTemp_AD@channel stored from wreg
  4432  1361  0020               	movlb	0	; select bank0
  4433  1362  00A5               	movwf	getTemp_AD@channel
  4434                           
  4435                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4436  1363  0021               	movlb	1	; select bank1
  4437  1364  1D56               	btfss	_Temp^(0+128),2
  4438  1365  0008               	return
  4439                           
  4440                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4441  1366  30F0               	movlw	240
  4442  1367  0020               	movlb	0	; select bank0
  4443  1368  00A4               	movwf	??_getTemp_AD
  4444  1369  0824               	movf	??_getTemp_AD,w
  4445  136A  00A0               	movwf	getAD@adcon1
  4446  136B  0825               	movf	getTemp_AD@channel,w
  4447  136C  319F  2706  3193   	fcall	_getAD
  4448  136F  0020               	movlb	0	; select bank0
  4449  1370  0821               	movf	?_getAD+1,w
  4450  1371  0021               	movlb	1	; select bank1
  4451  1372  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4452  1373  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4453  1374  0020               	movlb	0	; select bank0
  4454  1375  0820               	movf	?_getAD,w
  4455  1376  0021               	movlb	1	; select bank1
  4456  1377  01E2               	clrf	(_Temp^(0+128)+12)
  4457  1378  07E2               	addwf	(_Temp^(0+128)+12),f
  4458                           
  4459                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4460  1379  300C               	movlw	12
  4461  137A  3ED6               	addlw	_Temp& (0+255)
  4462  137B  0086               	movwf	6
  4463  137C  0187               	clrf	7
  4464  137D  0016               	moviw fsr1++
  4465  137E  0401               	iorwf	1,w
  4466  137F  1903               	skipnz
  4467  1380  0008               	return
  4468                           
  4469                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4470  1381  0863               	movf	((_Temp+1)^(0+128)+12),w
  4471  1382  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4472  1383  1D03               	skipz
  4473  1384  2B87               	goto	u12475
  4474  1385  0862               	movf	(_Temp^(0+128)+12),w
  4475  1386  025E               	subwf	(_Temp^(0+128)+8),w
  4476  1387                     u12475:	
  4477  1387  1803               	skipnc
  4478  1388  2B90               	goto	l10662
  4479                           
  4480                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4481  1389  0863               	movf	((_Temp+1)^(0+128)+12),w
  4482  138A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4483  138B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4484  138C  0862               	movf	(_Temp^(0+128)+12),w
  4485  138D  01DE               	clrf	(_Temp^(0+128)+8)
  4486  138E  07DE               	addwf	(_Temp^(0+128)+8),f
  4487                           
  4488                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4489  138F  0008               	return
  4490  1390                     l10662:	
  4491  1390  0863               	movf	((_Temp+1)^(0+128)+12),w
  4492  1391  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4493  1392  1D03               	skipz
  4494  1393  2B96               	goto	u12485
  4495  1394  0862               	movf	(_Temp^(0+128)+12),w
  4496  1395  0260               	subwf	(_Temp^(0+128)+10),w
  4497  1396                     u12485:	
  4498  1396  1803               	skipnc
  4499  1397  0008               	return
  4500                           
  4501                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4502  1398  0863               	movf	((_Temp+1)^(0+128)+12),w
  4503  1399  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4504  139A  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4505  139B  0862               	movf	(_Temp^(0+128)+12),w
  4506  139C  01E0               	clrf	(_Temp^(0+128)+10)
  4507  139D  07E0               	addwf	(_Temp^(0+128)+10),f
  4508  139E  0008               	return
  4509  139F                     __end_of_getTemp_AD:	
  4510                           
  4511                           	psect	text4
  4512  0C6D                     __ptext4:	
  4513 ;; *************** function _getLoad_AD *****************
  4514 ;; Defined at:
  4515 ;;		line 15 in file "../src/OverLoad_B1.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  channel         1    wreg     unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  channel         1    6[BANK0 ] unsigned char 
  4520 ;;  i               1    9[BANK0 ] unsigned char 
  4521 ;;  j               1    8[BANK0 ] unsigned char 
  4522 ;;  k               1    7[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        6 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    7
  4539 ;; This function calls:
  4540 ;;		_getAD
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _getLoad_AD
  4548  0C6D                     _getLoad_AD:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4552                           ;getLoad_AD@channel stored from wreg
  4553  0C6D  0020               	movlb	0	; select bank0
  4554  0C6E  00A6               	movwf	getLoad_AD@channel
  4555                           
  4556                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4557  0C6F  01A9               	clrf	getLoad_AD@i
  4558  0C70  01A8               	clrf	getLoad_AD@j
  4559  0C71  01A7               	clrf	getLoad_AD@k
  4560                           
  4561                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4562  0C72  0022               	movlb	2	; select bank2
  4563  0C73  1E27               	btfss	_Load^(0+256),4
  4564  0C74  0008               	return
  4565                           
  4566                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4567  0C75  30F3               	movlw	243
  4568  0C76  0020               	movlb	0	; select bank0
  4569  0C77  00A4               	movwf	??_getLoad_AD
  4570  0C78  0824               	movf	??_getLoad_AD,w
  4571  0C79  00A0               	movwf	getAD@adcon1
  4572  0C7A  0826               	movf	getLoad_AD@channel,w
  4573  0C7B  319F  2706  318C   	fcall	_getAD
  4574  0C7E  0020               	movlb	0	; select bank0
  4575  0C7F  0821               	movf	?_getAD+1,w
  4576  0C80  0022               	movlb	2	; select bank2
  4577  0C81  01C9               	clrf	((_Load+1)^(0+256)+33)
  4578  0C82  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4579  0C83  0020               	movlb	0	; select bank0
  4580  0C84  0820               	movf	?_getAD,w
  4581  0C85  0022               	movlb	2	; select bank2
  4582  0C86  01C8               	clrf	(_Load^(0+256)+33)
  4583  0C87  07C8               	addwf	(_Load^(0+256)+33),f
  4584                           
  4585                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4586  0C88  0020               	movlb	0	; select bank0
  4587  0C89  01A9               	clrf	getLoad_AD@i
  4588  0C8A  3004               	movlw	4
  4589  0C8B  0229               	subwf	getLoad_AD@i,w
  4590  0C8C  1803               	btfsc	3,0
  4591  0C8D  2CBB               	goto	l10632
  4592  0C8E                     l10620:	
  4593                           
  4594                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4595  0C8E  3529               	lslf	getLoad_AD@i,w
  4596  0C8F  3E32               	addlw	(_Load+11)& (0+255)
  4597  0C90  0086               	movwf	6
  4598  0C91  3001               	movlw	1	; select bank2/3
  4599  0C92  0087               	movwf	7
  4600  0C93  3F40               	moviw [0]fsr1
  4601  0C94  00A4               	movwf	??_getLoad_AD
  4602  0C95  3F41               	moviw [1]fsr1
  4603  0C96  00A5               	movwf	??_getLoad_AD+1
  4604  0C97  0022               	movlb	2	; select bank2
  4605  0C98  0849               	movf	((_Load+1)^(0+256)+33),w
  4606  0C99  0020               	movlb	0	; select bank0
  4607  0C9A  0225               	subwf	??_getLoad_AD+1,w
  4608  0C9B  1D03               	skipz
  4609  0C9C  2CA1               	goto	u12375
  4610  0C9D  0022               	movlb	2	; select bank2
  4611  0C9E  0848               	movf	(_Load^(0+256)+33),w
  4612  0C9F  0020               	movlb	0	; select bank0
  4613  0CA0  0224               	subwf	??_getLoad_AD,w
  4614  0CA1                     u12375:	
  4615  0CA1  1803               	skipnc
  4616  0CA2  2CB3               	goto	l10628
  4617  0CA3  08A8               	movf	getLoad_AD@j,f
  4618  0CA4  1D03               	skipz
  4619  0CA5  2CB3               	goto	l10628
  4620                           
  4621                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4622  0CA6  3529               	lslf	getLoad_AD@i,w
  4623  0CA7  3E32               	addlw	(_Load+11)& (0+255)
  4624  0CA8  0086               	movwf	6
  4625  0CA9  3001               	movlw	1	; select bank2/3
  4626  0CAA  0087               	movwf	7
  4627  0CAB  0022               	movlb	2	; select bank2
  4628  0CAC  0848               	movf	(_Load^(0+256)+33),w
  4629  0CAD  3FC0               	movwi [0]fsr1
  4630  0CAE  0849               	movf	((_Load+1)^(0+256)+33),w
  4631  0CAF  3FC1               	movwi [1]fsr1
  4632                           
  4633                           ;OverLoad_B1.c: 24: j = 1;
  4634  0CB0  0020               	movlb	0	; select bank0
  4635  0CB1  01A8               	clrf	getLoad_AD@j
  4636  0CB2  0AA8               	incf	getLoad_AD@j,f
  4637  0CB3                     l10628:	
  4638  0CB3  3001               	movlw	1
  4639  0CB4  00A4               	movwf	??_getLoad_AD
  4640  0CB5  0824               	movf	??_getLoad_AD,w
  4641  0CB6  07A9               	addwf	getLoad_AD@i,f
  4642  0CB7  3004               	movlw	4
  4643  0CB8  0229               	subwf	getLoad_AD@i,w
  4644  0CB9  1C03               	skipc
  4645  0CBA  2C8E               	goto	l10620
  4646  0CBB                     l10632:	
  4647                           
  4648                           ;OverLoad_B1.c: 25: }
  4649                           ;OverLoad_B1.c: 26: }
  4650                           ;OverLoad_B1.c: 27: if (j == 0) {
  4651  0CBB  08A8               	movf	getLoad_AD@j,f
  4652  0CBC  1D03               	skipz
  4653  0CBD  0008               	return
  4654                           
  4655                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4656  0CBE  01A9               	clrf	getLoad_AD@i
  4657  0CBF                     L1:	
  4658  0CBF  3004               	movlw	4
  4659  0CC0  0229               	subwf	getLoad_AD@i,w
  4660  0CC1  1803               	btfsc	3,0
  4661  0CC2  0008               	return
  4662                           
  4663                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4664  0CC3  3529               	lslf	getLoad_AD@i,w
  4665  0CC4  3E3C               	addlw	(_Load+21)& (0+255)
  4666  0CC5  0086               	movwf	6
  4667  0CC6  3001               	movlw	1	; select bank2/3
  4668  0CC7  0087               	movwf	7
  4669  0CC8  3F40               	moviw [0]fsr1
  4670  0CC9  00A4               	movwf	??_getLoad_AD
  4671  0CCA  3F41               	moviw [1]fsr1
  4672  0CCB  00A5               	movwf	??_getLoad_AD+1
  4673  0CCC  0825               	movf	??_getLoad_AD+1,w
  4674  0CCD  0022               	movlb	2	; select bank2
  4675  0CCE  0249               	subwf	((_Load+1)^(0+256)+33),w
  4676  0CCF  1D03               	skipz
  4677  0CD0  2CD5               	goto	u12425
  4678  0CD1  0020               	movlb	0	; select bank0
  4679  0CD2  0824               	movf	??_getLoad_AD,w
  4680  0CD3  0022               	movlb	2	; select bank2
  4681  0CD4  0248               	subwf	(_Load^(0+256)+33),w
  4682  0CD5                     u12425:	
  4683  0CD5  1803               	skipnc
  4684  0CD6  2CE8               	goto	l10648
  4685  0CD7  0020               	movlb	0	; select bank0
  4686  0CD8  08A7               	movf	getLoad_AD@k,f
  4687  0CD9  1D03               	skipz
  4688  0CDA  2CE8               	goto	l10648
  4689                           
  4690                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4691  0CDB  3529               	lslf	getLoad_AD@i,w
  4692  0CDC  3E3C               	addlw	(_Load+21)& (0+255)
  4693  0CDD  0086               	movwf	6
  4694  0CDE  3001               	movlw	1	; select bank2/3
  4695  0CDF  0087               	movwf	7
  4696  0CE0  0022               	movlb	2	; select bank2
  4697  0CE1  0848               	movf	(_Load^(0+256)+33),w
  4698  0CE2  3FC0               	movwi [0]fsr1
  4699  0CE3  0849               	movf	((_Load+1)^(0+256)+33),w
  4700  0CE4  3FC1               	movwi [1]fsr1
  4701                           
  4702                           ;OverLoad_B1.c: 31: k = 1;
  4703  0CE5  0020               	movlb	0	; select bank0
  4704  0CE6  01A7               	clrf	getLoad_AD@k
  4705  0CE7  0AA7               	incf	getLoad_AD@k,f
  4706  0CE8                     l10648:	
  4707  0CE8  3001               	movlw	1
  4708  0CE9  0020               	movlb	0	; select bank0
  4709  0CEA  00A4               	movwf	??_getLoad_AD
  4710  0CEB  0824               	movf	??_getLoad_AD,w
  4711  0CEC  07A9               	addwf	getLoad_AD@i,f
  4712  0CED  2CBF               	goto	L1
  4713  0CEE                     __end_of_getLoad_AD:	
  4714                           
  4715                           	psect	text5
  4716  1F06                     __ptext5:	
  4717 ;; *************** function _getAD *****************
  4718 ;; Defined at:
  4719 ;;		line 453 in file "../src/MCU_B1.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  adcon0          1    wreg     unsigned char 
  4722 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    0[BANK0 ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_Timeout_Counter
  4743 ;;		_set_TimeoutCleared
  4744 ;; This function is called by:
  4745 ;;		_getLoad_AD
  4746 ;;		_getTemp_AD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _getAD
  4752  1F06                     _getAD:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;getAD@adcon0 stored from wreg
  4757  1F06  0020               	movlb	0	; select bank0
  4758  1F07  00A3               	movwf	getAD@adcon0
  4759                           
  4760                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4761  1F08  0823               	movf	getAD@adcon0,w
  4762  1F09  0021               	movlb	1	; select bank1
  4763  1F0A  009D               	movwf	29	;volatile
  4764                           
  4765                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4766  1F0B  0020               	movlb	0	; select bank0
  4767  1F0C  0820               	movf	getAD@adcon1,w
  4768  1F0D  0021               	movlb	1	; select bank1
  4769  1F0E  009E               	movwf	30	;volatile
  4770                           
  4771                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4772  1F0F  149D               	bsf	29,1	;volatile
  4773                           
  4774                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4775  1F10  2F14               	goto	l10102
  4776  1F11                     l10100:	
  4777                           
  4778                           ;MCU_B1.c: 458: Timeout_Counter();
  4779  1F11  319D  2574  319F   	fcall	_Timeout_Counter
  4780  1F14                     l10102:	
  4781  1F14  0021               	movlb	1	; select bank1
  4782  1F15  1C9D               	btfss	29,1	;volatile
  4783  1F16  2F19               	goto	l10106
  4784  1F17  1D2B               	btfss	(_myMain^(0+128)+11),2
  4785  1F18  2F11               	goto	l10100
  4786  1F19                     l10106:	
  4787                           
  4788                           ;MCU_B1.c: 459: };
  4789                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4790  1F19  319A  22EC         	fcall	_set_TimeoutCleared
  4791                           
  4792                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4793  1F1B  0021               	movlb	1	; select bank1
  4794  1F1C  081C               	movf	28,w	;volatile
  4795  1F1D  0020               	movlb	0	; select bank0
  4796  1F1E  01A1               	clrf	?_getAD+1
  4797  1F1F  07A1               	addwf	?_getAD+1,f
  4798  1F20  0021               	movlb	1	; select bank1
  4799  1F21  081B               	movf	27,w	;volatile
  4800  1F22  0020               	movlb	0	; select bank0
  4801  1F23  01A0               	clrf	?_getAD
  4802  1F24  07A0               	addwf	?_getAD,f
  4803  1F25  0008               	return
  4804  1F26                     __end_of_getAD:	
  4805                           
  4806                           	psect	text6
  4807  1C9D                     __ptext6:	
  4808 ;; *************** function _WDT_Main *****************
  4809 ;; Defined at:
  4810 ;;		line 1097 in file "../src/MCU_B1.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_WDT_Clearing
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _WDT_Main
  4840  1C9D                     _WDT_Main:	
  4841                           
  4842                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4846  1C9D  0022               	movlb	2	; select bank2
  4847  1C9E  1C25               	btfss	_WDT^(0+256),0
  4848  1C9F  0008               	return
  4849                           
  4850                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4851  1CA0  3001               	movlw	1
  4852  1CA1  02A6               	subwf	(_WDT^(0+256)+1),f
  4853  1CA2  0826               	movf	(_WDT^(0+256)+1),w
  4854  1CA3  3AFF               	xorlw	255
  4855  1CA4  1903               	skipnz
  4856  1CA5  0008               	return
  4857                           
  4858                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4859  1CA6  3064               	movlw	100
  4860  1CA7  0020               	movlb	0	; select bank0
  4861  1CA8  00A0               	movwf	??_WDT_Main
  4862  1CA9  0820               	movf	??_WDT_Main,w
  4863  1CAA  0022               	movlb	2	; select bank2
  4864  1CAB  00A6               	movwf	(_WDT^(0+256)+1)
  4865                           
  4866                           ;MCU_B1.c: 1101: WDT_Clearing();
  4867  1CAC  3180  2002         	fcall	_WDT_Clearing
  4868  1CAE  0008               	return
  4869  1CAF                     __end_of_WDT_Main:	
  4870                           
  4871                           	psect	text7
  4872  0002                     __ptext7:	
  4873 ;; *************** function _WDT_Clearing *****************
  4874 ;; Defined at:
  4875 ;;		line 1107 in file "../src/MCU_B1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		None
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_WDT_Main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _WDT_Clearing
  4905  0002                     _WDT_Clearing:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _WDT_Clearing: []
  4909  0002  0064               	clrwdt	;# 
  4910  0003  0008               	return
  4911  0004                     __end_of_WDT_Clearing:	
  4912                           
  4913                           	psect	text8
  4914  1AD9                     __ptext8:	
  4915 ;; *************** function _Temp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		_setTemp_Main
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Temp_Main
  4947  1AD9                     _Temp_Main:	
  4948                           
  4949                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4953  1AD9  318F  2750         	fcall	_setTemp_Main
  4954  1ADB  0008               	return
  4955  1ADC                     __end_of_Temp_Main:	
  4956                           
  4957                           	psect	text9
  4958  0F50                     __ptext9:	
  4959 ;; *************** function _setTemp_Main *****************
  4960 ;; Defined at:
  4961 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  error           1   72[BANK0 ] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        3 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    7
  4982 ;; This function calls:
  4983 ;;		_getMain_All_Error_Status
  4984 ;;		_setBuz
  4985 ;;		_setProductData
  4986 ;; This function is called by:
  4987 ;;		_Temp_Main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _setTemp_Main
  4993  0F50                     _setTemp_Main:	
  4994                           
  4995                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4999  0F50  3000               	movlw	0
  5000  0F51  3191  2168  318F   	fcall	_getMain_All_Error_Status
  5001  0F54  0020               	movlb	0	; select bank0
  5002  0F55  00E6               	movwf	??_setTemp_Main
  5003  0F56  0866               	movf	??_setTemp_Main,w
  5004  0F57  00E8               	movwf	setTemp_Main@error
  5005                           
  5006                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5007  0F58  0021               	movlb	1	; select bank1
  5008  0F59  1C56               	btfss	_Temp^(0+128),0
  5009  0F5A  2FFC               	goto	l1895
  5010                           
  5011                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5012  0F5B  1956               	btfsc	_Temp^(0+128),2
  5013  0F5C  2F6C               	goto	l10172
  5014                           
  5015                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5016  0F5D  3001               	movlw	1
  5017  0F5E  07D7               	addwf	(_Temp^(0+128)+1),f
  5018  0F5F  3000               	movlw	0
  5019  0F60  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5020                           
  5021                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5022  0F61  3001               	movlw	1
  5023  0F62  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5024  0F63  30F4               	movlw	244
  5025  0F64  1903               	skipnz
  5026  0F65  0257               	subwf	(_Temp^(0+128)+1),w
  5027  0F66  1C03               	skipc
  5028  0F67  0008               	return
  5029                           
  5030                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5031  0F68  01D7               	clrf	(_Temp^(0+128)+1)
  5032  0F69  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5035  0F6A  1556               	bsf	_Temp^(0+128),2
  5036                           
  5037                           ;OverTemperature_B1.c: 70: }
  5038                           ;OverTemperature_B1.c: 71: } else {
  5039  0F6B  0008               	return
  5040  0F6C                     l10172:	
  5041                           
  5042                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5043  0F6C  3001               	movlw	1
  5044  0F6D  07D7               	addwf	(_Temp^(0+128)+1),f
  5045  0F6E  3000               	movlw	0
  5046  0F6F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5047                           
  5048                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5049  0F70  3000               	movlw	0
  5050  0F71  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5051  0F72  3005               	movlw	5
  5052  0F73  1903               	skipnz
  5053  0F74  0257               	subwf	(_Temp^(0+128)+1),w
  5054  0F75  1C03               	skipc
  5055  0F76  0008               	return
  5056                           
  5057                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5058  0F77  01D7               	clrf	(_Temp^(0+128)+1)
  5059  0F78  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5060                           
  5061                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5062  0F79  3008               	movlw	8
  5063  0F7A  3ED6               	addlw	_Temp& (0+255)
  5064  0F7B  0086               	movwf	6
  5065  0F7C  0187               	clrf	7
  5066  0F7D  0016               	moviw fsr1++
  5067  0F7E  0401               	iorwf	1,w
  5068  0F7F  1903               	skipnz
  5069  0F80  2FF6               	goto	l1900
  5070  0F81  300A               	movlw	10
  5071  0F82  3ED6               	addlw	_Temp& (0+255)
  5072  0F83  0086               	movwf	6
  5073  0F84  0187               	clrf	7
  5074  0F85  0016               	moviw fsr1++
  5075  0F86  0401               	iorwf	1,w
  5076  0F87  1903               	skipnz
  5077  0F88  2FF6               	goto	l1900
  5078                           
  5079                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5080  0F89  1156               	bcf	_Temp^(0+128),2
  5081                           
  5082                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5083  0F8A  300A               	movlw	10
  5084  0F8B  3ED6               	addlw	_Temp& (0+255)
  5085  0F8C  0086               	movwf	6
  5086  0F8D  0187               	clrf	7
  5087  0F8E  3008               	movlw	8
  5088  0F8F  3ED6               	addlw	_Temp& (0+255)
  5089  0F90  0084               	movwf	4
  5090  0F91  0185               	clrf	5
  5091  0F92  3F40               	moviw [0]fsr1
  5092  0F93  0700               	addwf	0,w
  5093  0F94  0020               	movlb	0	; select bank0
  5094  0F95  00E6               	movwf	??_setTemp_Main
  5095  0F96  3101               	addfsr 0,1
  5096  0F97  3F41               	moviw [1]fsr1
  5097  0F98  3D00               	addwfc	0,w
  5098  0F99  00E7               	movwf	??_setTemp_Main+1
  5099  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5100  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5101  0F9C  0866               	movf	??_setTemp_Main,w
  5102  0F9D  0021               	movlb	1	; select bank1
  5103  0F9E  00DC               	movwf	(_Temp^(0+128)+6)
  5104  0F9F  0020               	movlb	0	; select bank0
  5105  0FA0  0867               	movf	??_setTemp_Main+1,w
  5106  0FA1  0021               	movlb	1	; select bank1
  5107  0FA2  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5108                           
  5109                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5110  0FA3  30C7               	movlw	199
  5111  0FA4  00E4               	movwf	(_Temp^(0+128)+14)
  5112  0FA5  3001               	movlw	1
  5113  0FA6  00E5               	movwf	(_Temp^(0+128)+15)
  5114                           
  5115                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5116  0FA7  309F               	movlw	159
  5117  0FA8  00E6               	movwf	(_Temp^(0+128)+16)
  5118  0FA9  3001               	movlw	1
  5119  0FAA  00E7               	movwf	(_Temp^(0+128)+17)
  5120                           
  5121                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5122  0FAB  1CD6               	btfss	_Temp^(0+128),1
  5123  0FAC  2FCD               	goto	l10204
  5124                           
  5125                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5126  0FAD  0865               	movf	((_Temp+1)^(0+128)+14),w
  5127  0FAE  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5128  0FAF  1D03               	skipz
  5129  0FB0  2FB3               	goto	u11565
  5130  0FB1  0864               	movf	(_Temp^(0+128)+14),w
  5131  0FB2  025C               	subwf	(_Temp^(0+128)+6),w
  5132  0FB3                     u11565:	
  5133  0FB3  1C03               	skipc
  5134  0FB4  2FCB               	goto	l10202
  5135                           
  5136                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5137  0FB5  3001               	movlw	1
  5138  0FB6  0020               	movlb	0	; select bank0
  5139  0FB7  00E6               	movwf	??_setTemp_Main
  5140  0FB8  0866               	movf	??_setTemp_Main,w
  5141  0FB9  0021               	movlb	1	; select bank1
  5142  0FBA  07D9               	addwf	(_Temp^(0+128)+3),f
  5143                           
  5144                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5145  0FBB  3003               	movlw	3
  5146  0FBC  0259               	subwf	(_Temp^(0+128)+3),w
  5147  0FBD  1C03               	skipc
  5148  0FBE  2FE3               	goto	l10216
  5149                           
  5150                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5151  0FBF  01D9               	clrf	(_Temp^(0+128)+3)
  5152                           
  5153                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5154  0FC0  10D6               	bcf	_Temp^(0+128),1
  5155                           
  5156                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5157  0FC1  3064               	movlw	100
  5158  0FC2  0020               	movlb	0	; select bank0
  5159  0FC3  00A9               	movwf	setBuz@time
  5160  0FC4  3000               	movlw	0
  5161  0FC5  00AA               	movwf	setBuz@time+1
  5162  0FC6  3002               	movlw	2
  5163  0FC7  3197  274E  318F   	fcall	_setBuz
  5164                           
  5165                           ;OverTemperature_B1.c: 103: }
  5166                           ;OverTemperature_B1.c: 104: } else {
  5167  0FCA  2FE3               	goto	l10216
  5168  0FCB                     l10202:	
  5169                           
  5170                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5171  0FCB  0021               	movlb	1	; select bank1
  5172  0FCC  2FE2               	goto	l10214
  5173  0FCD                     l10204:	
  5174                           ;OverTemperature_B1.c: 106: }
  5175                           ;OverTemperature_B1.c: 107: } else {
  5176                           
  5177                           
  5178                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5179  0FCD  085D               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FCE  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5181  0FCF  1D03               	skipz
  5182  0FD0  2FD3               	goto	u11585
  5183  0FD1  085C               	movf	(_Temp^(0+128)+6),w
  5184  0FD2  0266               	subwf	(_Temp^(0+128)+16),w
  5185  0FD3                     u11585:	
  5186  0FD3  1C03               	skipc
  5187  0FD4  2FE2               	goto	l10214
  5188                           
  5189                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5190  0FD5  3001               	movlw	1
  5191  0FD6  0020               	movlb	0	; select bank0
  5192  0FD7  00E6               	movwf	??_setTemp_Main
  5193  0FD8  0866               	movf	??_setTemp_Main,w
  5194  0FD9  0021               	movlb	1	; select bank1
  5195  0FDA  07D9               	addwf	(_Temp^(0+128)+3),f
  5196                           
  5197                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5198  0FDB  3003               	movlw	3
  5199  0FDC  0259               	subwf	(_Temp^(0+128)+3),w
  5200  0FDD  1C03               	skipc
  5201  0FDE  2FE3               	goto	l10216
  5202                           
  5203                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5204  0FDF  01D9               	clrf	(_Temp^(0+128)+3)
  5205                           
  5206                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5207  0FE0  14D6               	bsf	_Temp^(0+128),1
  5208                           
  5209                           ;OverTemperature_B1.c: 113: }
  5210                           ;OverTemperature_B1.c: 114: } else {
  5211  0FE1  2FE3               	goto	l10216
  5212  0FE2                     l10214:	
  5213                           
  5214                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5215  0FE2  01D9               	clrf	(_Temp^(0+128)+3)
  5216  0FE3                     l10216:	
  5217                           
  5218                           ;OverTemperature_B1.c: 116: }
  5219                           ;OverTemperature_B1.c: 117: }
  5220                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5221  0FE3  0021               	movlb	1	; select bank1
  5222  0FE4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5223  0FE5  0020               	movlb	0	; select bank0
  5224  0FE6  00E6               	movwf	??_setTemp_Main
  5225  0FE7  0866               	movf	??_setTemp_Main,w
  5226  0FE8  00E2               	movwf	setProductData@value
  5227  0FE9  3018               	movlw	24
  5228  0FEA  319B  23D7  318F   	fcall	_setProductData
  5229                           
  5230                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5231  0FED  0021               	movlb	1	; select bank1
  5232  0FEE  085C               	movf	(_Temp^(0+128)+6),w
  5233  0FEF  0020               	movlb	0	; select bank0
  5234  0FF0  00E6               	movwf	??_setTemp_Main
  5235  0FF1  0866               	movf	??_setTemp_Main,w
  5236  0FF2  00E2               	movwf	setProductData@value
  5237  0FF3  3019               	movlw	25
  5238  0FF4  319B  23D7         	fcall	_setProductData
  5239  0FF6                     l1900:	
  5240                           
  5241                           ;OverTemperature_B1.c: 135: }
  5242                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5243  0FF6  0021               	movlb	1	; select bank1
  5244  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5245  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5246                           
  5247                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5248  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5249  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5250                           
  5251                           ;OverTemperature_B1.c: 138: }
  5252                           ;OverTemperature_B1.c: 139: }
  5253                           ;OverTemperature_B1.c: 141: } else {
  5254  0FFB  0008               	return
  5255  0FFC                     l1895:	
  5256                           
  5257                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5258  0FFC  1C20               	btfss	_myMain^(0+128),0
  5259  0FFD  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5262  0FFE  1456               	bsf	_Temp^(0+128),0
  5263  0FFF  0008               	return
  5264  1000                     __end_of_setTemp_Main:	
  5265                           
  5266                           	psect	text10
  5267  1AD6                     __ptext10:	
  5268 ;; *************** function _Temp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    6
  5291 ;; This function calls:
  5292 ;;		_setTemp_Initialization
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _Temp_Initialization
  5300  1AD6                     _Temp_Initialization:	
  5301                           
  5302                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5306  1AD6  319A  22C9         	fcall	_setTemp_Initialization
  5307  1AD8  0008               	return
  5308  1AD9                     __end_of_Temp_Initialization:	
  5309                           
  5310                           	psect	text11
  5311  1AC9                     __ptext11:	
  5312 ;; *************** function _setTemp_Initialization *****************
  5313 ;; Defined at:
  5314 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Temp_Initialization
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _setTemp_Initialization
  5344  1AC9                     _setTemp_Initialization:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _setTemp_Initialization: []
  5348  1AC9  0008               	return
  5349  1ACA                     __end_of_setTemp_Initialization:	
  5350                           
  5351                           	psect	text12
  5352  1B5F                     __ptext12:	
  5353 ;; *************** function _Switch_Main *****************
  5354 ;; Defined at:
  5355 ;;		line 72 in file "../src/Switch_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_TouchPower
  5378 ;;		_setSw_Main
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _Switch_Main
  5386  1B5F                     _Switch_Main:	
  5387                           
  5388                           ;Switch_B1.c: 75: setSw_Main(1);
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5392  1B5F  3001               	movlw	1
  5393  1B60  3181  21F5  319B   	fcall	_setSw_Main
  5394                           
  5395                           ;Switch_B1.c: 79: setSw_Main(2);
  5396  1B63  3002               	movlw	2
  5397  1B64  3181  21F5  319B   	fcall	_setSw_Main
  5398                           
  5399                           ;Switch_B1.c: 87: TouchPower();
  5400  1B67  319D  259E         	fcall	_TouchPower
  5401  1B69  0008               	return
  5402  1B6A                     __end_of_Switch_Main:	
  5403                           
  5404                           	psect	text13
  5405  01F5                     __ptext13:	
  5406 ;; *************** function _setSw_Main *****************
  5407 ;; Defined at:
  5408 ;;		line 121 in file "../src/Switch_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  sw              1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  sw              1   77[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        3 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    9
  5429 ;; This function calls:
  5430 ;;		_SwPointSelect
  5431 ;;		_getMain_All_Error_Status
  5432 ;;		_getSw_KeyStatus
  5433 ;;		_setBuz
  5434 ;;		_setDimmerLights_AdjOn
  5435 ;;		_setDimmerLights_SwOff
  5436 ;;		_setDimmerLights_SwOn
  5437 ;;		_setRF_Learn
  5438 ;; This function is called by:
  5439 ;;		_Switch_Main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _setSw_Main
  5445  01F5                     _setSw_Main:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5449                           ;setSw_Main@sw stored from wreg
  5450  01F5  0020               	movlb	0	; select bank0
  5451  01F6  00ED               	movwf	setSw_Main@sw
  5452                           
  5453                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5454  01F7  086D               	movf	setSw_Main@sw,w
  5455  01F8  319D  254C  3181   	fcall	_SwPointSelect
  5456                           
  5457                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5458  01FB  0877               	movf	_Sw,w
  5459  01FC  0086               	movwf	6
  5460  01FD  3001               	movlw	1	; select bank2/3
  5461  01FE  0087               	movwf	7
  5462  01FF  1C01               	btfss	1,0
  5463  0200  2B5F               	goto	l2664
  5464                           
  5465                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5466  0201  3000               	movlw	0
  5467  0202  3191  2168  3181   	fcall	_getMain_All_Error_Status
  5468  0205  3800               	iorlw	0
  5469  0206  1D03               	skipz
  5470  0207  2A23               	goto	l10328
  5471                           
  5472                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5473  0208  0A77               	incf	_Sw,w
  5474  0209  0086               	movwf	6
  5475  020A  3001               	movlw	1	; select bank2/3
  5476  020B  0087               	movwf	7
  5477  020C  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5480  020D  0020               	movlb	0	; select bank0
  5481  020E  086D               	movf	setSw_Main@sw,w
  5482  020F  319E  26A7  3181   	fcall	_getSw_KeyStatus
  5483  0212  3A01               	xorlw	1
  5484  0213  3000               	movlw	0
  5485  0214  1903               	skipnz
  5486  0215  3001               	movlw	1
  5487  0216  0020               	movlb	0	; select bank0
  5488  0217  00EB               	movwf	??_setSw_Main
  5489  0218  0877               	movf	_Sw,w
  5490  0219  0086               	movwf	6
  5491  021A  3001               	movlw	1	; select bank2/3
  5492  021B  0087               	movwf	7
  5493  021C  0DEB               	rlf	??_setSw_Main,f
  5494  021D  0801               	movf	1,w
  5495  021E  066B               	xorwf	??_setSw_Main,w
  5496  021F  39FD               	andlw	-3
  5497  0220  066B               	xorwf	??_setSw_Main,w
  5498  0221  0081               	movwf	1
  5499                           
  5500                           ;Switch_B1.c: 128: } else {
  5501  0222  2A38               	goto	l2666
  5502  0223                     l10328:	
  5503                           
  5504                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5505  0223  0A77               	incf	_Sw,w
  5506  0224  0086               	movwf	6
  5507  0225  3001               	movlw	1	; select bank2/3
  5508  0226  0087               	movwf	7
  5509  0227  1881               	btfsc	1,1
  5510  0228  2A38               	goto	l2666
  5511                           
  5512                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5513  0229  0A77               	incf	_Sw,w
  5514  022A  0086               	movwf	6
  5515  022B  3001               	movlw	1	; select bank2/3
  5516  022C  0087               	movwf	7
  5517  022D  1481               	bsf	1,1
  5518                           
  5519                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5520  022E  0877               	movf	_Sw,w
  5521  022F  0086               	movwf	6
  5522  0230  3001               	movlw	1	; select bank2/3
  5523  0231  0087               	movwf	7
  5524  0232  1081               	bcf	1,1
  5525                           
  5526                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5527  0233  0877               	movf	_Sw,w
  5528  0234  0086               	movwf	6
  5529  0235  3001               	movlw	1	; select bank2/3
  5530  0236  0087               	movwf	7
  5531  0237  1501               	bsf	1,2
  5532  0238                     l2666:	
  5533                           
  5534                           ;Switch_B1.c: 133: }
  5535                           ;Switch_B1.c: 134: }
  5536                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5537  0238  0877               	movf	_Sw,w
  5538  0239  0086               	movwf	6
  5539  023A  3001               	movlw	1	; select bank2/3
  5540  023B  0087               	movwf	7
  5541  023C  1C81               	btfss	1,1
  5542  023D  2B08               	goto	l10378
  5543                           
  5544                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5545  023E  0877               	movf	_Sw,w
  5546  023F  0086               	movwf	6
  5547  0240  3001               	movlw	1	; select bank2/3
  5548  0241  0087               	movwf	7
  5549  0242  1901               	btfsc	1,2
  5550  0243  2A66               	goto	l10344
  5551                           
  5552                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5553  0244  3001               	movlw	1
  5554  0245  0020               	movlb	0	; select bank0
  5555  0246  00EB               	movwf	??_setSw_Main
  5556  0247  0877               	movf	_Sw,w
  5557  0248  3E02               	addlw	2
  5558  0249  0086               	movwf	6
  5559  024A  3001               	movlw	1	; select bank2/3
  5560  024B  0087               	movwf	7
  5561  024C  086B               	movf	??_setSw_Main,w
  5562  024D  0781               	addwf	1,f
  5563                           
  5564                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5565  024E  0877               	movf	_Sw,w
  5566  024F  3E02               	addlw	2
  5567  0250  0086               	movwf	6
  5568  0251  3001               	movlw	1	; select bank2/3
  5569  0252  0087               	movwf	7
  5570  0253  3005               	movlw	5
  5571  0254  0201               	subwf	1,w
  5572  0255  1C03               	skipc
  5573  0256  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5576  0257  0877               	movf	_Sw,w
  5577  0258  3E02               	addlw	2
  5578  0259  0086               	movwf	6
  5579  025A  3001               	movlw	1	; select bank2/3
  5580  025B  0087               	movwf	7
  5581  025C  0181               	clrf	1
  5582                           
  5583                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5584  025D  0877               	movf	_Sw,w
  5585  025E  0086               	movwf	6
  5586  025F  3001               	movlw	1	; select bank2/3
  5587  0260  0087               	movwf	7
  5588  0261  1501               	bsf	1,2
  5589                           
  5590                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5591  0262  086D               	movf	setSw_Main@sw,w
  5592  0263  3188  206E         	fcall	_setDimmerLights_SwOn
  5593                           
  5594                           ;Switch_B1.c: 147: }
  5595                           ;Switch_B1.c: 148: } else {
  5596  0265  0008               	return
  5597  0266                     l10344:	
  5598                           
  5599                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5600  0266  0877               	movf	_Sw,w
  5601  0267  0086               	movwf	6
  5602  0268  3001               	movlw	1	; select bank2/3
  5603  0269  0087               	movwf	7
  5604  026A  1981               	btfsc	1,3
  5605  026B  2A98               	goto	l10354
  5606                           
  5607                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5608  026C  0877               	movf	_Sw,w
  5609  026D  3E03               	addlw	3
  5610  026E  0086               	movwf	6
  5611  026F  3001               	movlw	1	; select bank2/3
  5612  0270  0087               	movwf	7
  5613  0271  3001               	movlw	1
  5614  0272  0781               	addwf	1,f
  5615  0273  3141               	addfsr 1,1
  5616  0274  1803               	skipnc
  5617  0275  0A81               	incf	1,f
  5618                           
  5619                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5620  0276  0877               	movf	_Sw,w
  5621  0277  3E03               	addlw	3
  5622  0278  0086               	movwf	6
  5623  0279  3001               	movlw	1	; select bank2/3
  5624  027A  0087               	movwf	7
  5625  027B  3F40               	moviw [0]fsr1
  5626  027C  0020               	movlb	0	; select bank0
  5627  027D  00EB               	movwf	??_setSw_Main
  5628  027E  3F41               	moviw [1]fsr1
  5629  027F  00EC               	movwf	??_setSw_Main+1
  5630  0280  3000               	movlw	0
  5631  0281  026C               	subwf	??_setSw_Main+1,w
  5632  0282  3096               	movlw	150
  5633  0283  1903               	skipnz
  5634  0284  026B               	subwf	??_setSw_Main,w
  5635  0285  1C03               	skipc
  5636  0286  0008               	return
  5637                           
  5638                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5639  0287  0877               	movf	_Sw,w
  5640  0288  3E03               	addlw	3
  5641  0289  0086               	movwf	6
  5642  028A  3001               	movlw	1	; select bank2/3
  5643  028B  0087               	movwf	7
  5644  028C  3000               	movlw	0
  5645  028D  3FC0               	movwi [0]fsr1
  5646  028E  3FC1               	movwi [1]fsr1
  5647                           
  5648                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5649  028F  0877               	movf	_Sw,w
  5650  0290  0086               	movwf	6
  5651  0291  3001               	movlw	1	; select bank2/3
  5652  0292  0087               	movwf	7
  5653  0293  1581               	bsf	1,3
  5654                           
  5655                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5656  0294  086D               	movf	setSw_Main@sw,w
  5657  0295  3192  2205         	fcall	_setDimmerLights_AdjOn
  5658                           
  5659                           ;Switch_B1.c: 159: }
  5660                           ;Switch_B1.c: 160: } else {
  5661  0297  0008               	return
  5662  0298                     l10354:	
  5663                           
  5664                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5665  0298  0877               	movf	_Sw,w
  5666  0299  0086               	movwf	6
  5667  029A  3001               	movlw	1	; select bank2/3
  5668  029B  0087               	movwf	7
  5669  029C  1A01               	btfsc	1,4
  5670  029D  2AD6               	goto	l10368
  5671                           
  5672                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5673  029E  0877               	movf	_Sw,w
  5674  029F  3E05               	addlw	5
  5675  02A0  0086               	movwf	6
  5676  02A1  3001               	movlw	1	; select bank2/3
  5677  02A2  0087               	movwf	7
  5678  02A3  3001               	movlw	1
  5679  02A4  0781               	addwf	1,f
  5680  02A5  3141               	addfsr 1,1
  5681  02A6  1803               	skipnc
  5682  02A7  0A81               	incf	1,f
  5683                           
  5684                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5685  02A8  0877               	movf	_Sw,w
  5686  02A9  3E05               	addlw	5
  5687  02AA  0086               	movwf	6
  5688  02AB  3001               	movlw	1	; select bank2/3
  5689  02AC  0087               	movwf	7
  5690  02AD  3F40               	moviw [0]fsr1
  5691  02AE  0020               	movlb	0	; select bank0
  5692  02AF  00EB               	movwf	??_setSw_Main
  5693  02B0  3F41               	moviw [1]fsr1
  5694  02B1  00EC               	movwf	??_setSw_Main+1
  5695  02B2  3000               	movlw	0
  5696  02B3  026C               	subwf	??_setSw_Main+1,w
  5697  02B4  3096               	movlw	150
  5698  02B5  1903               	skipnz
  5699  02B6  026B               	subwf	??_setSw_Main,w
  5700  02B7  1C03               	skipc
  5701  02B8  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5704  02B9  0877               	movf	_Sw,w
  5705  02BA  3E05               	addlw	5
  5706  02BB  0086               	movwf	6
  5707  02BC  3001               	movlw	1	; select bank2/3
  5708  02BD  0087               	movwf	7
  5709  02BE  3000               	movlw	0
  5710  02BF  3FC0               	movwi [0]fsr1
  5711  02C0  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5714  02C1  0877               	movf	_Sw,w
  5715  02C2  0086               	movwf	6
  5716  02C3  3001               	movlw	1	; select bank2/3
  5717  02C4  0087               	movwf	7
  5718  02C5  1601               	bsf	1,4
  5719                           
  5720                           ;Switch_B1.c: 168: setRF_Learn(1);
  5721  02C6  3001               	movlw	1
  5722  02C7  319D  2560  3181   	fcall	_setRF_Learn
  5723                           
  5724                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5725  02CA  0021               	movlb	1	; select bank1
  5726  02CB  1EA0               	btfss	_myMain^(0+128),5
  5727  02CC  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 171: setBuz(2, 100);
  5730  02CD  3064               	movlw	100
  5731  02CE  0020               	movlb	0	; select bank0
  5732  02CF  00A9               	movwf	setBuz@time
  5733  02D0  3000               	movlw	0
  5734  02D1  00AA               	movwf	setBuz@time+1
  5735  02D2  3002               	movlw	2
  5736  02D3  3197  274E         	fcall	_setBuz
  5737                           
  5738                           ;Switch_B1.c: 172: }
  5739                           ;Switch_B1.c: 174: }
  5740                           ;Switch_B1.c: 175: } else {
  5741  02D5  0008               	return
  5742  02D6                     l10368:	
  5743                           
  5744                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5745  02D6  0877               	movf	_Sw,w
  5746  02D7  0086               	movwf	6
  5747  02D8  3001               	movlw	1	; select bank2/3
  5748  02D9  0087               	movwf	7
  5749  02DA  1A81               	btfsc	1,5
  5750  02DB  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5753  02DC  0877               	movf	_Sw,w
  5754  02DD  3E07               	addlw	7
  5755  02DE  0086               	movwf	6
  5756  02DF  3001               	movlw	1	; select bank2/3
  5757  02E0  0087               	movwf	7
  5758  02E1  3001               	movlw	1
  5759  02E2  0781               	addwf	1,f
  5760  02E3  3141               	addfsr 1,1
  5761  02E4  1803               	skipnc
  5762  02E5  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5765  02E6  0877               	movf	_Sw,w
  5766  02E7  3E07               	addlw	7
  5767  02E8  0086               	movwf	6
  5768  02E9  3001               	movlw	1	; select bank2/3
  5769  02EA  0087               	movwf	7
  5770  02EB  3F40               	moviw [0]fsr1
  5771  02EC  0020               	movlb	0	; select bank0
  5772  02ED  00EB               	movwf	??_setSw_Main
  5773  02EE  3F41               	moviw [1]fsr1
  5774  02EF  00EC               	movwf	??_setSw_Main+1
  5775  02F0  3001               	movlw	1
  5776  02F1  026C               	subwf	??_setSw_Main+1,w
  5777  02F2  302C               	movlw	44
  5778  02F3  1903               	skipnz
  5779  02F4  026B               	subwf	??_setSw_Main,w
  5780  02F5  1C03               	skipc
  5781  02F6  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5784  02F7  0877               	movf	_Sw,w
  5785  02F8  3E07               	addlw	7
  5786  02F9  0086               	movwf	6
  5787  02FA  3001               	movlw	1	; select bank2/3
  5788  02FB  0087               	movwf	7
  5789  02FC  3000               	movlw	0
  5790  02FD  3FC0               	movwi [0]fsr1
  5791  02FE  3FC1               	movwi [1]fsr1
  5792                           
  5793                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5794  02FF  0877               	movf	_Sw,w
  5795  0300  0086               	movwf	6
  5796  0301  3001               	movlw	1	; select bank2/3
  5797  0302  0087               	movwf	7
  5798  0303  1681               	bsf	1,5
  5799                           
  5800                           ;Switch_B1.c: 183: setRF_Learn(0);
  5801  0304  3000               	movlw	0
  5802  0305  319D  2560         	fcall	_setRF_Learn
  5803                           
  5804                           ;Switch_B1.c: 186: }
  5805                           ;Switch_B1.c: 187: }
  5806                           ;Switch_B1.c: 188: }
  5807                           ;Switch_B1.c: 189: }
  5808                           ;Switch_B1.c: 190: }
  5809                           ;Switch_B1.c: 191: } else {
  5810  0307  0008               	return
  5811  0308                     l10378:	
  5812                           
  5813                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5814  0308  0877               	movf	_Sw,w
  5815  0309  0086               	movwf	6
  5816  030A  3001               	movlw	1	; select bank2/3
  5817  030B  0087               	movwf	7
  5818  030C  1D01               	btfss	1,2
  5819  030D  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5822  030E  3001               	movlw	1
  5823  030F  0020               	movlb	0	; select bank0
  5824  0310  00EB               	movwf	??_setSw_Main
  5825  0311  0877               	movf	_Sw,w
  5826  0312  3E02               	addlw	2
  5827  0313  0086               	movwf	6
  5828  0314  3001               	movlw	1	; select bank2/3
  5829  0315  0087               	movwf	7
  5830  0316  086B               	movf	??_setSw_Main,w
  5831  0317  0781               	addwf	1,f
  5832                           
  5833                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5834  0318  0877               	movf	_Sw,w
  5835  0319  3E02               	addlw	2
  5836  031A  0086               	movwf	6
  5837  031B  3001               	movlw	1	; select bank2/3
  5838  031C  0087               	movwf	7
  5839  031D  3005               	movlw	5
  5840  031E  0201               	subwf	1,w
  5841  031F  1C03               	skipc
  5842  0320  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5845  0321  0877               	movf	_Sw,w
  5846  0322  3E02               	addlw	2
  5847  0323  0086               	movwf	6
  5848  0324  3001               	movlw	1	; select bank2/3
  5849  0325  0087               	movwf	7
  5850  0326  0181               	clrf	1
  5851                           
  5852                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5853  0327  0877               	movf	_Sw,w
  5854  0328  0086               	movwf	6
  5855  0329  3001               	movlw	1	; select bank2/3
  5856  032A  0087               	movwf	7
  5857  032B  1101               	bcf	1,2
  5858                           
  5859                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5860  032C  0877               	movf	_Sw,w
  5861  032D  3E03               	addlw	3
  5862  032E  0086               	movwf	6
  5863  032F  3001               	movlw	1	; select bank2/3
  5864  0330  0087               	movwf	7
  5865  0331  3000               	movlw	0
  5866  0332  3FC0               	movwi [0]fsr1
  5867  0333  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5870  0334  0877               	movf	_Sw,w
  5871  0335  0086               	movwf	6
  5872  0336  3001               	movlw	1	; select bank2/3
  5873  0337  0087               	movwf	7
  5874  0338  1181               	bcf	1,3
  5875                           
  5876                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5877  0339  0877               	movf	_Sw,w
  5878  033A  3E05               	addlw	5
  5879  033B  0086               	movwf	6
  5880  033C  3001               	movlw	1	; select bank2/3
  5881  033D  0087               	movwf	7
  5882  033E  3000               	movlw	0
  5883  033F  3FC0               	movwi [0]fsr1
  5884  0340  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5887  0341  0877               	movf	_Sw,w
  5888  0342  0086               	movwf	6
  5889  0343  3001               	movlw	1	; select bank2/3
  5890  0344  0087               	movwf	7
  5891  0345  1201               	bcf	1,4
  5892                           
  5893                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5894  0346  0877               	movf	_Sw,w
  5895  0347  3E07               	addlw	7
  5896  0348  0086               	movwf	6
  5897  0349  3001               	movlw	1	; select bank2/3
  5898  034A  0087               	movwf	7
  5899  034B  3000               	movlw	0
  5900  034C  3FC0               	movwi [0]fsr1
  5901  034D  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5904  034E  0877               	movf	_Sw,w
  5905  034F  0086               	movwf	6
  5906  0350  3001               	movlw	1	; select bank2/3
  5907  0351  0087               	movwf	7
  5908  0352  1281               	bcf	1,5
  5909                           
  5910                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5911  0353  0021               	movlb	1	; select bank1
  5912  0354  1851               	btfsc	_SwDetect^(0+128),0
  5913  0355  2B5B               	goto	l10404
  5914                           
  5915                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5916  0356  0020               	movlb	0	; select bank0
  5917  0357  086D               	movf	setSw_Main@sw,w
  5918  0358  3194  24BC  3181   	fcall	_setDimmerLights_SwOff
  5919  035B                     l10404:	
  5920                           
  5921                           ;Switch_B1.c: 206: }
  5922                           ;Switch_B1.c: 209: setRF_Learn(0);
  5923  035B  3000               	movlw	0
  5924  035C  319D  2560         	fcall	_setRF_Learn
  5925                           
  5926                           ;Switch_B1.c: 211: }
  5927                           ;Switch_B1.c: 212: }
  5928                           ;Switch_B1.c: 213: }
  5929                           ;Switch_B1.c: 214: } else {
  5930  035E  0008               	return
  5931  035F                     l2664:	
  5932                           
  5933                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5934  035F  0021               	movlb	1	; select bank1
  5935  0360  1C20               	btfss	_myMain^(0+128),0
  5936  0361  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5939  0362  0877               	movf	_Sw,w
  5940  0363  0086               	movwf	6
  5941  0364  3001               	movlw	1	; select bank2/3
  5942  0365  0087               	movwf	7
  5943  0366  1401               	bsf	1,0
  5944  0367  0008               	return
  5945  0368                     __end_of_setSw_Main:	
  5946                           
  5947                           	psect	text14
  5948  1D60                     __ptext14:	
  5949 ;; *************** function _setRF_Learn *****************
  5950 ;; Defined at:
  5951 ;;		line 23 in file "../src/RF_Control_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  command         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  command         1    1[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        2 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _setRF_Learn
  5981  1D60                     _setRF_Learn:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5985                           ;setRF_Learn@command stored from wreg
  5986  1D60  0020               	movlb	0	; select bank0
  5987  1D61  00A1               	movwf	setRF_Learn@command
  5988                           
  5989                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5990  1D62  0821               	movf	setRF_Learn@command,w
  5991  1D63  3A01               	xorlw	1
  5992  1D64  3000               	movlw	0
  5993  1D65  1903               	skipnz
  5994  1D66  3001               	movlw	1
  5995  1D67  00A0               	movwf	??_setRF_Learn
  5996  1D68  0EA0               	swapf	??_setRF_Learn,f
  5997  1D69  0DA0               	rlf	??_setRF_Learn,f
  5998  1D6A  0DA0               	rlf	??_setRF_Learn,f
  5999  1D6B  0021               	movlb	1	; select bank1
  6000  1D6C  083A               	movf	_RF1^(0+128),w
  6001  1D6D  0020               	movlb	0	; select bank0
  6002  1D6E  0620               	xorwf	??_setRF_Learn,w
  6003  1D6F  39BF               	andlw	-65
  6004  1D70  0620               	xorwf	??_setRF_Learn,w
  6005  1D71  0021               	movlb	1	; select bank1
  6006  1D72  00BA               	movwf	_RF1^(0+128)
  6007  1D73  0008               	return
  6008  1D74                     __end_of_setRF_Learn:	
  6009                           
  6010                           	psect	text15
  6011  1205                     __ptext15:	
  6012 ;; *************** function _setDimmerLights_AdjOn *****************
  6013 ;; Defined at:
  6014 ;;		line 477 in file "../src/Dimmer_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  sw              1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  sw              1    7[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    7
  6035 ;; This function calls:
  6036 ;;		_DimmerLightsPointSelect
  6037 ;;		_getDimmerLights_Allow_Condition
  6038 ;; This function is called by:
  6039 ;;		_setSw_Main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _setDimmerLights_AdjOn
  6045  1205                     _setDimmerLights_AdjOn:	
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6049                           ;setDimmerLights_AdjOn@sw stored from wreg
  6050  1205  0020               	movlb	0	; select bank0
  6051  1206  00A7               	movwf	setDimmerLights_AdjOn@sw
  6052                           
  6053                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6054  1207  0827               	movf	setDimmerLights_AdjOn@sw,w
  6055  1208  319C  24AF  3192   	fcall	_DimmerLightsPointSelect
  6056                           
  6057                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6058  120B  0020               	movlb	0	; select bank0
  6059  120C  086F               	movf	_DimmerLights,w
  6060  120D  3E0A               	addlw	10
  6061  120E  0086               	movwf	6
  6062  120F  3001               	movlw	1	; select bank2/3
  6063  1210  0087               	movwf	7
  6064  1211  1881               	btfsc	1,1
  6065  1212  0008               	return
  6066  1213  0827               	movf	setDimmerLights_AdjOn@sw,w
  6067  1214  3192  2272  3192   	fcall	_getDimmerLights_Allow_Condition
  6068  1217  3800               	iorlw	0
  6069  1218  1D03               	skipz
  6070  1219  0008               	return
  6071                           
  6072                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6073  121A  0020               	movlb	0	; select bank0
  6074  121B  086F               	movf	_DimmerLights,w
  6075  121C  3E0B               	addlw	11
  6076  121D  0086               	movwf	6
  6077  121E  3001               	movlw	1	; select bank2/3
  6078  121F  0087               	movwf	7
  6079  1220  1C81               	btfss	1,1
  6080  1221  0008               	return
  6081                           
  6082                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6083  1222  086F               	movf	_DimmerLights,w
  6084  1223  3E0B               	addlw	11
  6085  1224  0086               	movwf	6
  6086  1225  3001               	movlw	1	; select bank2/3
  6087  1226  0087               	movwf	7
  6088  1227  1501               	bsf	1,2
  6089                           
  6090                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6091  1228  086F               	movf	_DimmerLights,w
  6092  1229  3E02               	addlw	2
  6093  122A  0086               	movwf	6
  6094  122B  3001               	movlw	1	; select bank2/3
  6095  122C  0087               	movwf	7
  6096  122D  1481               	bsf	1,1
  6097                           
  6098                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6099  122E  086F               	movf	_DimmerLights,w
  6100  122F  3E0A               	addlw	10
  6101  1230  0086               	movwf	6
  6102  1231  3001               	movlw	1	; select bank2/3
  6103  1232  0087               	movwf	7
  6104  1233  1581               	bsf	1,3
  6105                           
  6106                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6107  1234  086F               	movf	_DimmerLights,w
  6108  1235  3E0A               	addlw	10
  6109  1236  0086               	movwf	6
  6110  1237  3001               	movlw	1	; select bank2/3
  6111  1238  0087               	movwf	7
  6112  1239  1501               	bsf	1,2
  6113  123A  0008               	return
  6114  123B                     __end_of_setDimmerLights_AdjOn:	
  6115                           
  6116                           	psect	text16
  6117  1EA7                     __ptext16:	
  6118 ;; *************** function _getSw_KeyStatus *****************
  6119 ;; Defined at:
  6120 ;;		line 222 in file "../src/Switch_B1.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  sw              1    wreg     unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  sw              1    4[BANK0 ] unsigned char 
  6125 ;;  status          1    3[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      unsigned char 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        5 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_setSw_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _getSw_KeyStatus
  6151  1EA7                     _getSw_KeyStatus:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6155                           ;getSw_KeyStatus@sw stored from wreg
  6156  1EA7  0020               	movlb	0	; select bank0
  6157  1EA8  00A4               	movwf	getSw_KeyStatus@sw
  6158                           
  6159                           ;Switch_B1.c: 223: char status = 0;
  6160  1EA9  01A3               	clrf	getSw_KeyStatus@status
  6161                           
  6162                           ;Switch_B1.c: 235: if (sw == 1) {
  6163  1EAA  0824               	movf	getSw_KeyStatus@sw,w
  6164  1EAB  3A01               	xorlw	1
  6165  1EAC  1D03               	skipz
  6166  1EAD  2EB6               	goto	l9828
  6167                           
  6168                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6169  1EAE  01A1               	clrf	_getSw_KeyStatus$6246
  6170  1EAF  0AA1               	incf	_getSw_KeyStatus$6246,f
  6171  1EB0  1F0C               	btfss	12,6	;volatile
  6172  1EB1  1A0C               	btfsc	12,4	;volatile
  6173  1EB2  2EB4               	goto	l9826
  6174  1EB3  01A1               	clrf	_getSw_KeyStatus$6246
  6175  1EB4                     l9826:	
  6176  1EB4  0821               	movf	_getSw_KeyStatus$6246,w
  6177  1EB5  2EC1               	goto	L2
  6178  1EB6                     l9828:	
  6179                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6180                           
  6181  1EB6  0824               	movf	getSw_KeyStatus@sw,w
  6182  1EB7  3A02               	xorlw	2
  6183  1EB8  1D03               	skipz
  6184  1EB9  2EC4               	goto	l9838
  6185                           
  6186                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6187  1EBA  01A2               	clrf	_getSw_KeyStatus$6247
  6188  1EBB  0AA2               	incf	_getSw_KeyStatus$6247,f
  6189  1EBC  1C0C               	btfss	12,0	;volatile
  6190  1EBD  188D               	btfsc	13,1	;volatile
  6191  1EBE  2EC0               	goto	l9836
  6192  1EBF  01A2               	clrf	_getSw_KeyStatus$6247
  6193  1EC0                     l9836:	
  6194  1EC0  0822               	movf	_getSw_KeyStatus$6247,w
  6195  1EC1                     L2:	
  6196  1EC1  00A0               	movwf	??_getSw_KeyStatus
  6197  1EC2  0820               	movf	??_getSw_KeyStatus,w
  6198  1EC3  00A3               	movwf	getSw_KeyStatus@status
  6199  1EC4                     l9838:	
  6200                           
  6201                           ;Switch_B1.c: 239: }
  6202                           ;Switch_B1.c: 246: return status;
  6203  1EC4  0823               	movf	getSw_KeyStatus@status,w
  6204  1EC5  0008               	return
  6205  1EC6                     __end_of_getSw_KeyStatus:	
  6206                           
  6207                           	psect	text17
  6208  1D4C                     __ptext17:	
  6209 ;; *************** function _SwPointSelect *****************
  6210 ;; Defined at:
  6211 ;;		line 25 in file "../src/Switch_B1.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  sw              1    wreg     unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  sw              1    1[BANK0 ] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;		None               void
  6218 ;; Registers used:
  6219 ;;		wreg
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;Total ram usage:        2 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    5
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_setSw_Main
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _SwPointSelect
  6241  1D4C                     _SwPointSelect:	
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _SwPointSelect: [wreg]
  6245                           ;SwPointSelect@sw stored from wreg
  6246  1D4C  0020               	movlb	0	; select bank0
  6247  1D4D  00A1               	movwf	SwPointSelect@sw
  6248                           
  6249                           ;Switch_B1.c: 28: if (sw == 1) {
  6250  1D4E  0821               	movf	SwPointSelect@sw,w
  6251  1D4F  3A01               	xorlw	1
  6252  1D50  1D03               	skipz
  6253  1D51  2D57               	goto	l9812
  6254                           
  6255                           ;Switch_B1.c: 29: Sw = &Sw1;
  6256  1D52  30CF               	movlw	_Sw1& (0+255)
  6257  1D53  00A0               	movwf	??_SwPointSelect
  6258  1D54  0820               	movf	??_SwPointSelect,w
  6259  1D55  00F7               	movwf	_Sw
  6260                           
  6261                           ;Switch_B1.c: 30: }
  6262  1D56  0008               	return
  6263  1D57                     l9812:	
  6264                           
  6265                           ;Switch_B1.c: 33: else if (sw == 2) {
  6266  1D57  0821               	movf	SwPointSelect@sw,w
  6267  1D58  3A02               	xorlw	2
  6268  1D59  1D03               	skipz
  6269  1D5A  0008               	return
  6270                           
  6271                           ;Switch_B1.c: 34: Sw = &Sw2;
  6272  1D5B  30D8               	movlw	_Sw2& (0+255)
  6273  1D5C  00A0               	movwf	??_SwPointSelect
  6274  1D5D  0820               	movf	??_SwPointSelect,w
  6275  1D5E  00F7               	movwf	_Sw
  6276  1D5F  0008               	return
  6277  1D60                     __end_of_SwPointSelect:	
  6278                           
  6279                           	psect	text18
  6280  1BCA                     __ptext18:	
  6281 ;; *************** function _Switch_Initialization *****************
  6282 ;; Defined at:
  6283 ;;		line 46 in file "../src/Switch_B1.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    8
  6304 ;; This function calls:
  6305 ;;		_TouchPower
  6306 ;;		_setSw_Initialization
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _Switch_Initialization
  6314  1BCA                     _Switch_Initialization:	
  6315                           
  6316                           ;Switch_B1.c: 47: TouchPower();
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6320  1BCA  319D  259E  319B   	fcall	_TouchPower
  6321                           
  6322                           ;Switch_B1.c: 49: WPUB1 = 0;
  6323  1BCD  0024               	movlb	4	; select bank4
  6324  1BCE  108D               	bcf	13,1	;volatile
  6325                           
  6326                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6327  1BCF  3001               	movlw	1
  6328  1BD0  319B  233A  319B   	fcall	_setSw_Initialization
  6329                           
  6330                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6331  1BD3  3002               	movlw	2
  6332  1BD4  319B  233A         	fcall	_setSw_Initialization
  6333  1BD6  0008               	return
  6334  1BD7                     __end_of_Switch_Initialization:	
  6335                           
  6336                           	psect	text19
  6337  1B3A                     __ptext19:	
  6338 ;; *************** function _setSw_Initialization *****************
  6339 ;; Defined at:
  6340 ;;		line 93 in file "../src/Switch_B1.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  sw              1    wreg     unsigned char 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  sw              1    4[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    7
  6361 ;; This function calls:
  6362 ;;		_setLED
  6363 ;; This function is called by:
  6364 ;;		_Switch_Initialization
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _setSw_Initialization
  6370  1B3A                     _setSw_Initialization:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6374                           ;setSw_Initialization@sw stored from wreg
  6375  1B3A  0020               	movlb	0	; select bank0
  6376  1B3B  00A4               	movwf	setSw_Initialization@sw
  6377                           
  6378                           ;Switch_B1.c: 94: setLED(sw, 1);
  6379  1B3C  01A2               	clrf	setLED@command
  6380  1B3D  0AA2               	incf	setLED@command,f
  6381  1B3E  0824               	movf	setSw_Initialization@sw,w
  6382  1B3F  3196  264F         	fcall	_setLED
  6383  1B41  0008               	return
  6384  1B42                     __end_of_setSw_Initialization:	
  6385                           
  6386                           	psect	text20
  6387  1D9E                     __ptext20:	
  6388 ;; *************** function _TouchPower *****************
  6389 ;; Defined at:
  6390 ;;		line 10 in file "../src/Switch_B1.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;Total ram usage:        0 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    6
  6411 ;; This function calls:
  6412 ;;		_Timeout_Counter
  6413 ;;		_set_TimeoutCleared
  6414 ;; This function is called by:
  6415 ;;		_Switch_Initialization
  6416 ;;		_Switch_Main
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _TouchPower
  6422  1D9E                     _TouchPower:	
  6423                           
  6424                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6425                           
  6426                           ;incstack = 0
  6427                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6428  1D9E  0020               	movlb	0	; select bank0
  6429  1D9F  1A8E               	btfsc	14,5	;volatile
  6430  1DA0  0008               	return
  6431                           
  6432                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6433  1DA1  0021               	movlb	1	; select bank1
  6434  1DA2  1C20               	btfss	_myMain^(0+128),0
  6435  1DA3  0008               	return
  6436  1DA4  2DAA               	goto	l10310
  6437  1DA5                     l2642:	
  6438                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6439                           
  6440                           
  6441                           ;Switch_B1.c: 14: RC5 = 1;
  6442  1DA5  0020               	movlb	0	; select bank0
  6443  1DA6  168E               	bsf	14,5	;volatile
  6444                           
  6445                           ;Switch_B1.c: 15: Timeout_Counter();
  6446  1DA7  319D  2574  319D   	fcall	_Timeout_Counter
  6447  1DAA                     l10310:	
  6448  1DAA  0020               	movlb	0	; select bank0
  6449  1DAB  1A8E               	btfsc	14,5	;volatile
  6450  1DAC  2DB0               	goto	l10314
  6451  1DAD  0021               	movlb	1	; select bank1
  6452  1DAE  1D2B               	btfss	(_myMain^(0+128)+11),2
  6453  1DAF  2DA5               	goto	l2642
  6454  1DB0                     l10314:	
  6455                           
  6456                           ;Switch_B1.c: 16: }
  6457                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6458  1DB0  319A  22EC         	fcall	_set_TimeoutCleared
  6459  1DB2  0008               	return
  6460  1DB3                     __end_of_TouchPower:	
  6461                           
  6462                           	psect	text21
  6463  1AD3                     __ptext21:	
  6464 ;; *************** function _RF_Main *****************
  6465 ;; Defined at:
  6466 ;;		line 16 in file "../src/RF_Control_B1.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;		None               void
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:   14
  6487 ;; This function calls:
  6488 ;;		_setRF_Main
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _RF_Main
  6496  1AD3                     _RF_Main:	
  6497                           
  6498                           ;RF_Control_B1.c: 18: setRF_Main();
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6502  1AD3  318D  2575         	fcall	_setRF_Main
  6503  1AD5  0008               	return
  6504  1AD6                     __end_of_RF_Main:	
  6505                           
  6506                           	psect	text22
  6507  0D75                     __ptext22:	
  6508 ;; *************** function _setRF_Main *****************
  6509 ;; Defined at:
  6510 ;;		line 52 in file "../src/RF_Control_B1.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  error           1    2[BANK4 ] unsigned char 
  6515 ;;  Receive_OK      1    1[BANK4 ] unsigned char 
  6516 ;;  loop_f          1    0[BANK4 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       0       1       0       0       3       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        4 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:   13
  6533 ;; This function calls:
  6534 ;;		_CC2500_RxData
  6535 ;;		_CC2500_TxData
  6536 ;;		_CC2500_WriteCommand
  6537 ;;		_RF_RxDisable
  6538 ;;		_getBuz_GO
  6539 ;;		_getMain_All_Error_Status
  6540 ;;		_getRF_KeyStatus
  6541 ;;		_getRxData
  6542 ;; This function is called by:
  6543 ;;		_RF_Main
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _setRF_Main
  6549  0D75                     _setRF_Main:	
  6550                           
  6551                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6555  0D75  0024               	movlb	4	; select bank4
  6556  0D76  01E5               	clrf	setRF_Main@loop_f^(0+512)
  6557  0D77  01E6               	clrf	setRF_Main@Receive_OK^(0+512)
  6558  0D78  01E7               	clrf	setRF_Main@error^(0+512)
  6559                           
  6560                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6561  0D79  0021               	movlb	1	; select bank1
  6562  0D7A  1C3A               	btfss	_RF1^(0+128),0
  6563  0D7B  2E08               	goto	l2249
  6564                           
  6565                           ;RF_Control_B1.c: 56: if (RF1.Correction == 1) {
  6566  0D7C  1EBB               	btfss	(_RF1^(0+128)+1),5
  6567  0D7D  2D8E               	goto	l10236
  6568                           
  6569                           ;RF_Control_B1.c: 57: RF1.CorrectionCounter++;
  6570  0D7E  3001               	movlw	1
  6571  0D7F  07C4               	addwf	(_RF1^(0+128)+10),f
  6572  0D80  3000               	movlw	0
  6573  0D81  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6574                           
  6575                           ;RF_Control_B1.c: 58: if (RF1.CorrectionCounter >= 6000) {
  6576  0D82  3017               	movlw	23
  6577  0D83  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6578  0D84  3070               	movlw	112
  6579  0D85  1903               	skipnz
  6580  0D86  0244               	subwf	(_RF1^(0+128)+10),w
  6581  0D87  1C03               	skipc
  6582  0D88  2D8E               	goto	l10236
  6583                           
  6584                           ;RF_Control_B1.c: 59: RF1.CorrectionCounter = 0;
  6585  0D89  01C4               	clrf	(_RF1^(0+128)+10)
  6586  0D8A  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6587                           
  6588                           ;RF_Control_B1.c: 60: RF_RxDisable();
  6589  0D8B  319B  23F4  318D   	fcall	_RF_RxDisable
  6590  0D8E                     l10236:	
  6591                           
  6592                           ;RF_Control_B1.c: 61: }
  6593                           ;RF_Control_B1.c: 62: }
  6594                           ;RF_Control_B1.c: 64: if (RF1.Learn == 0) {
  6595  0D8E  0021               	movlb	1	; select bank1
  6596  0D8F  1B3A               	btfsc	_RF1^(0+128),6
  6597  0D90  2DA4               	goto	l2252
  6598                           
  6599                           ;RF_Control_B1.c: 65: if (RF1.Run == 1) {
  6600  0D91  1CBB               	btfss	(_RF1^(0+128)+1),1
  6601  0D92  2DA9               	goto	l10252
  6602                           
  6603                           ;RF_Control_B1.c: 66: RF1.Count++;
  6604  0D93  3001               	movlw	1
  6605  0D94  07BC               	addwf	(_RF1^(0+128)+2),f
  6606  0D95  3000               	movlw	0
  6607  0D96  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6608                           
  6609                           ;RF_Control_B1.c: 67: if (RF1.Count == RF1.RunTime) {
  6610  0D97  3002               	movlw	2
  6611  0D98  3EBA               	addlw	_RF1& (0+255)
  6612  0D99  0086               	movwf	6
  6613  0D9A  0187               	clrf	7
  6614  0D9B  3F40               	moviw [0]fsr1
  6615  0D9C  0641               	xorwf	(_RF1^(0+128)+7),w
  6616  0D9D  1D03               	skipz
  6617  0D9E  2DA1               	goto	u11665
  6618  0D9F  3F41               	moviw [1]fsr1
  6619  0DA0  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6620  0DA1                     u11665:	
  6621  0DA1  1D03               	skipz
  6622  0DA2  2DA9               	goto	l10252
  6623  0DA3  2DA6               	goto	l10248
  6624  0DA4                     l2252:	
  6625                           ;RF_Control_B1.c: 70: }
  6626                           ;RF_Control_B1.c: 71: }
  6627                           ;RF_Control_B1.c: 72: } else {
  6628                           
  6629                           ;RF_Control_B1.c: 69: RF1.Run = 0;
  6630                           
  6631                           ;RF_Control_B1.c: 68: RF1.Count = 0;
  6632                           
  6633                           
  6634                           ;RF_Control_B1.c: 73: if (RF1.Run == 1) {
  6635  0DA4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6636  0DA5  2DA9               	goto	l10252
  6637  0DA6                     l10248:	
  6638                           
  6639                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6640  0DA6  01BC               	clrf	(_RF1^(0+128)+2)
  6641  0DA7  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6642                           
  6643                           ;RF_Control_B1.c: 75: RF1.Run = 0;
  6644  0DA8  10BB               	bcf	(_RF1^(0+128)+1),1
  6645  0DA9                     l10252:	
  6646                           
  6647                           ;RF_Control_B1.c: 76: }
  6648                           ;RF_Control_B1.c: 77: }
  6649                           ;RF_Control_B1.c: 79: if (getBuz_GO() == 0) {
  6650  0DA9  319C  2433  318D   	fcall	_getBuz_GO
  6651  0DAC  0020               	movlb	0	; select bank0
  6652  0DAD  0821               	movf	?_getBuz_GO+1,w
  6653  0DAE  0420               	iorwf	?_getBuz_GO,w
  6654  0DAF  1D03               	skipz
  6655  0DB0  0008               	return
  6656                           
  6657                           ;RF_Control_B1.c: 80: if (getMain_All_Error_Status(0) == 0) {
  6658  0DB1  3000               	movlw	0
  6659  0DB2  3191  2168  318D   	fcall	_getMain_All_Error_Status
  6660  0DB5  3800               	iorlw	0
  6661  0DB6  1D03               	skipz
  6662  0DB7  2DCD               	goto	l2258
  6663                           
  6664                           ;RF_Control_B1.c: 82: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6665  0DB8  319C  2444  318D   	fcall	_getRF_KeyStatus
  6666  0DBB  3A01               	xorlw	1
  6667  0DBC  3000               	movlw	0
  6668  0DBD  1903               	skipnz
  6669  0DBE  3001               	movlw	1
  6670  0DBF  0021               	movlb	1	; select bank1
  6671  0DC0  00ED               	movwf	??_setRF_Main^(0+128)
  6672  0DC1  0CED               	rrf	??_setRF_Main^(0+128),f
  6673  0DC2  0CED               	rrf	??_setRF_Main^(0+128),f
  6674  0DC3  083A               	movf	_RF1^(0+128),w
  6675  0DC4  066D               	xorwf	??_setRF_Main^(0+128),w
  6676  0DC5  397F               	andlw	-129
  6677  0DC6  066D               	xorwf	??_setRF_Main^(0+128),w
  6678  0DC7  00BA               	movwf	_RF1^(0+128)
  6679                           
  6680                           ;RF_Control_B1.c: 83: if (RF1.Key == 1 && RF1.Learn == 0) {
  6681  0DC8  1BBA               	btfsc	_RF1^(0+128),7
  6682  0DC9  1B3A               	btfsc	_RF1^(0+128),6
  6683  0DCA  2DCF               	goto	l2260
  6684                           
  6685                           ;RF_Control_B1.c: 84: RF1.Run = 1;
  6686  0DCB  14BB               	bsf	(_RF1^(0+128)+1),1
  6687                           
  6688                           ;RF_Control_B1.c: 85: }
  6689                           ;RF_Control_B1.c: 90: } else {
  6690  0DCC  2DCF               	goto	l2260
  6691  0DCD                     l2258:	
  6692                           
  6693                           ;RF_Control_B1.c: 91: RF1.Key = 0;
  6694  0DCD  0021               	movlb	1	; select bank1
  6695  0DCE  13BA               	bcf	_RF1^(0+128),7
  6696  0DCF                     l2260:	
  6697                           
  6698                           ;RF_Control_B1.c: 92: }
  6699                           ;RF_Control_B1.c: 94: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6700  0DCF  193A               	btfsc	_RF1^(0+128),2
  6701  0DD0  1B3A               	btfsc	_RF1^(0+128),6
  6702  0DD1  2DE0               	goto	l10276
  6703                           
  6704                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6705  0DD2  113A               	bcf	_RF1^(0+128),2
  6706                           
  6707                           ;RF_Control_B1.c: 96: RF1.RxStatus = 0;
  6708  0DD3  11BA               	bcf	_RF1^(0+128),3
  6709                           
  6710                           ;RF_Control_B1.c: 97: RF1.ReceiveGO = 0;
  6711  0DD4  10BA               	bcf	_RF1^(0+128),1
  6712                           
  6713                           ;RF_Control_B1.c: 98: RF1.RunTime = 5;
  6714  0DD5  3005               	movlw	5
  6715  0DD6  00C1               	movwf	(_RF1^(0+128)+7)
  6716  0DD7  3000               	movlw	0
  6717  0DD8  00C2               	movwf	(_RF1^(0+128)+8)
  6718                           
  6719                           ;RF_Control_B1.c: 99: RF1.Run = 1;
  6720  0DD9  14BB               	bsf	(_RF1^(0+128)+1),1
  6721                           
  6722                           ;RF_Control_B1.c: 100: RF_RxDisable();
  6723  0DDA  319B  23F4  318D   	fcall	_RF_RxDisable
  6724                           
  6725                           ;RF_Control_B1.c: 101: CC2500_TxData();
  6726  0DDD  3189  21EA  318D   	fcall	_CC2500_TxData
  6727  0DE0                     l10276:	
  6728                           
  6729                           ;RF_Control_B1.c: 102: }
  6730                           ;RF_Control_B1.c: 104: if (RF1.Run == 0 && RF1.TransceiveGO == 0) {
  6731  0DE0  0021               	movlb	1	; select bank1
  6732  0DE1  18BB               	btfsc	(_RF1^(0+128)+1),1
  6733  0DE2  0008               	return
  6734  0DE3  193A               	btfsc	_RF1^(0+128),2
  6735  0DE4  0008               	return
  6736                           
  6737                           ;RF_Control_B1.c: 105: if (RF1.RxStatus == 1) {
  6738  0DE5  1DBA               	btfss	_RF1^(0+128),3
  6739  0DE6  2DF9               	goto	l2263
  6740                           
  6741                           ;RF_Control_B1.c: 106: if (RF1.Key == 0 || RF1.Learn == 1) {
  6742  0DE7  1FBA               	btfss	_RF1^(0+128),7
  6743  0DE8  2DEB               	goto	l10286
  6744  0DE9  1F3A               	btfss	_RF1^(0+128),6
  6745  0DEA  0008               	return
  6746  0DEB                     l10286:	
  6747                           
  6748                           ;RF_Control_B1.c: 108: CC2500_RxData();
  6749  0DEB  318B  237F  318D   	fcall	_CC2500_RxData
  6750                           
  6751                           ;RF_Control_B1.c: 110: if (RF1.ReceiveGO == 1) {
  6752  0DEE  0021               	movlb	1	; select bank1
  6753  0DEF  1CBA               	btfss	_RF1^(0+128),1
  6754  0DF0  0008               	return
  6755                           
  6756                           ;RF_Control_B1.c: 111: RF1.ReceiveGO = 0;
  6757  0DF1  10BA               	bcf	_RF1^(0+128),1
  6758                           
  6759                           ;RF_Control_B1.c: 112: RF1.Run = 1;
  6760  0DF2  14BB               	bsf	(_RF1^(0+128)+1),1
  6761                           
  6762                           ;RF_Control_B1.c: 113: RF1.Correction = 0;
  6763  0DF3  12BB               	bcf	(_RF1^(0+128)+1),5
  6764                           
  6765                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6766  0DF4  01C4               	clrf	(_RF1^(0+128)+10)
  6767  0DF5  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6768                           
  6769                           ;RF_Control_B1.c: 122: getRxData();
  6770  0DF6  318B  23EE         	fcall	_getRxData
  6771                           
  6772                           ;RF_Control_B1.c: 124: }
  6773                           ;RF_Control_B1.c: 125: }
  6774                           ;RF_Control_B1.c: 126: } else {
  6775  0DF8  0008               	return
  6776  0DF9                     l2263:	
  6777                           
  6778                           ;RF_Control_B1.c: 128: if (RF1.ReceiveGO == 0) {
  6779  0DF9  18BA               	btfsc	_RF1^(0+128),1
  6780  0DFA  0008               	return
  6781                           
  6782                           ;RF_Control_B1.c: 129: RF1.RxStatus = 1;
  6783  0DFB  15BA               	bsf	_RF1^(0+128),3
  6784                           
  6785                           ;RF_Control_B1.c: 131: CC2500_WriteCommand(0x36);
  6786  0DFC  3036               	movlw	54
  6787  0DFD  319D  25FD  318D   	fcall	_CC2500_WriteCommand
  6788                           
  6789                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x3A);
  6790  0E00  303A               	movlw	58
  6791  0E01  319D  25FD  318D   	fcall	_CC2500_WriteCommand
  6792                           
  6793                           ;RF_Control_B1.c: 134: CC2500_WriteCommand(0x34);
  6794  0E04  3034               	movlw	52
  6795  0E05  319D  25FD         	fcall	_CC2500_WriteCommand
  6796                           
  6797                           ;RF_Control_B1.c: 135: }
  6798                           ;RF_Control_B1.c: 137: }
  6799                           ;RF_Control_B1.c: 138: }
  6800                           ;RF_Control_B1.c: 139: }
  6801                           ;RF_Control_B1.c: 140: } else {
  6802  0E07  0008               	return
  6803  0E08                     l2249:	
  6804                           
  6805                           ;RF_Control_B1.c: 141: if (myMain.PowerON == 1) {
  6806  0E08  1C20               	btfss	_myMain^(0+128),0
  6807  0E09  0008               	return
  6808                           
  6809                           ;RF_Control_B1.c: 142: RF1.Enable = 1;
  6810  0E0A  143A               	bsf	_RF1^(0+128),0
  6811  0E0B  0008               	return
  6812  0E0C                     __end_of_setRF_Main:	
  6813                           
  6814                           	psect	text23
  6815  0BEE                     __ptext23:	
  6816 ;; *************** function _getRxData *****************
  6817 ;; Defined at:
  6818 ;;		line 236 in file "../src/RF_Control_B1.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;  error           1    4[BANK1 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6833 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;Total ram usage:        2 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:   12
  6839 ;; This function calls:
  6840 ;;		_getMain_All_Error_Status
  6841 ;;		_setControl_Lights_Table
  6842 ;;		_setLog_Code
  6843 ;;		_setTxData
  6844 ;; This function is called by:
  6845 ;;		_setRF_Main
  6846 ;; This function uses a non-reentrant model
  6847 ;;
  6848                           
  6849                           
  6850                           ;psect for function _getRxData
  6851  0BEE                     _getRxData:	
  6852                           
  6853                           ;RF_Control_B1.c: 237: char error = getMain_All_Error_Status(0);
  6854                           
  6855                           ;incstack = 0
  6856                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6857  0BEE  3000               	movlw	0
  6858  0BEF  3191  2168  318B   	fcall	_getMain_All_Error_Status
  6859  0BF2  0020               	movlb	0	; select bank0
  6860  0BF3  00EE               	movwf	??_getRxData
  6861  0BF4  086E               	movf	??_getRxData,w
  6862  0BF5  0021               	movlb	1	; select bank1
  6863  0BF6  00EC               	movwf	getRxData@error^(0+128)
  6864                           
  6865                           ;RF_Control_B1.c: 238: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6866  0BF7  0023               	movlb	3	; select bank3
  6867  0BF8  0820               	movf	_RF_Data^(0+384),w
  6868  0BF9  3AAA               	xorlw	170
  6869  0BFA  1D03               	skipz
  6870  0BFB  2C12               	goto	l9766
  6871  0BFC  0821               	movf	(_RF_Data^(0+384)+1),w
  6872  0BFD  3A01               	xorlw	1
  6873  0BFE  1D03               	skipz
  6874  0BFF  2C12               	goto	l9766
  6875                           
  6876                           ;RF_Control_B1.c: 240: product->Data[2] = 0x55;
  6877  0C00  3055               	movlw	85
  6878  0C01  0020               	movlb	0	; select bank0
  6879  0C02  00EE               	movwf	??_getRxData
  6880  0C03  0879               	movf	_product,w
  6881  0C04  3E02               	addlw	2
  6882  0C05  0086               	movwf	6
  6883  0C06  3002               	movlw	2	; select bank4/5
  6884  0C07  0087               	movwf	7
  6885  0C08  086E               	movf	??_getRxData,w
  6886  0C09  0081               	movwf	1
  6887                           
  6888                           ;RF_Control_B1.c: 241: setTxData();
  6889  0C0A  318E  260C         	fcall	_setTxData
  6890                           
  6891                           ;RF_Control_B1.c: 242: RF1.RunTime = 10;
  6892  0C0C  300A               	movlw	10
  6893  0C0D  0021               	movlb	1	; select bank1
  6894  0C0E  00C1               	movwf	(_RF1^(0+128)+7)
  6895  0C0F  3000               	movlw	0
  6896  0C10  00C2               	movwf	(_RF1^(0+128)+8)
  6897                           
  6898                           ;RF_Control_B1.c: 248: } else {
  6899  0C11  0008               	return
  6900  0C12                     l9766:	
  6901                           
  6902                           ;RF_Control_B1.c: 250: if (error == 0) {
  6903  0C12  0021               	movlb	1	; select bank1
  6904  0C13  08EC               	movf	getRxData@error^(0+128),f
  6905  0C14  1D03               	skipz
  6906  0C15  0008               	return
  6907                           
  6908                           ;RF_Control_B1.c: 251: if (RF1.Learn == 1) {
  6909  0C16  1F3A               	btfss	_RF1^(0+128),6
  6910  0C17  2C23               	goto	l9776
  6911                           
  6912                           ;RF_Control_B1.c: 252: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6913  0C18  0023               	movlb	3	; select bank3
  6914  0C19  08A0               	movf	_RF_Data^(0+384),f
  6915  0C1A  1D03               	skipz
  6916  0C1B  0008               	return
  6917  0C1C  0821               	movf	(_RF_Data^(0+384)+1),w
  6918  0C1D  3A64               	xorlw	100
  6919  0C1E  1D03               	skipz
  6920  0C1F  0008               	return
  6921                           
  6922                           ;RF_Control_B1.c: 253: setLog_Code();
  6923  0C20  3191  219B         	fcall	_setLog_Code
  6924                           
  6925                           ;RF_Control_B1.c: 254: }
  6926                           ;RF_Control_B1.c: 255: } else {
  6927  0C22  0008               	return
  6928  0C23                     l9776:	
  6929                           
  6930                           ;RF_Control_B1.c: 256: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6931  0C23  0023               	movlb	3	; select bank3
  6932  0C24  08A0               	movf	_RF_Data^(0+384),f
  6933  0C25  1D03               	skipz
  6934  0C26  2C58               	goto	l9796
  6935  0C27  0821               	movf	(_RF_Data^(0+384)+1),w
  6936  0C28  3A02               	xorlw	2
  6937  0C29  1D03               	skipz
  6938  0C2A  2C58               	goto	l9796
  6939                           
  6940                           ;RF_Control_B1.c: 258: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6941  0C2B  082C               	movf	(_RF_Data^(0+384)+12),w
  6942  0C2C  3AFF               	xorlw	255
  6943  0C2D  1D03               	skipz
  6944  0C2E  2C39               	goto	l9788
  6945  0C2F  082D               	movf	(_RF_Data^(0+384)+13),w
  6946  0C30  3AFF               	xorlw	255
  6947  0C31  1D03               	skipz
  6948  0C32  2C39               	goto	l9788
  6949  0C33  082E               	movf	(_RF_Data^(0+384)+14),w
  6950  0C34  3AFF               	xorlw	255
  6951  0C35  1D03               	skipz
  6952  0C36  2C39               	goto	l9788
  6953                           
  6954                           ;RF_Control_B1.c: 259: __nop();
  6955  0C37  0000               	nop
  6956                           
  6957                           ;RF_Control_B1.c: 260: } else {
  6958  0C38  0008               	return
  6959  0C39                     l9788:	
  6960                           
  6961                           ;RF_Control_B1.c: 261: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6962  0C39  0879               	movf	_product,w
  6963  0C3A  3E0C               	addlw	12
  6964  0C3B  0086               	movwf	6
  6965  0C3C  3002               	movlw	2	; select bank4/5
  6966  0C3D  0087               	movwf	7
  6967  0C3E  0023               	movlb	3	; select bank3
  6968  0C3F  082C               	movf	(_RF_Data^(0+384)+12),w
  6969  0C40  0601               	xorwf	1,w
  6970  0C41  1D03               	skipz
  6971  0C42  0008               	return
  6972  0C43  0879               	movf	_product,w
  6973  0C44  3E0D               	addlw	13
  6974  0C45  0086               	movwf	6
  6975  0C46  3002               	movlw	2	; select bank4/5
  6976  0C47  0087               	movwf	7
  6977  0C48  082D               	movf	(_RF_Data^(0+384)+13),w
  6978  0C49  0601               	xorwf	1,w
  6979  0C4A  1D03               	skipz
  6980  0C4B  0008               	return
  6981  0C4C  0879               	movf	_product,w
  6982  0C4D  3E0E               	addlw	14
  6983  0C4E  0086               	movwf	6
  6984  0C4F  3002               	movlw	2	; select bank4/5
  6985  0C50  0087               	movwf	7
  6986  0C51  082E               	movf	(_RF_Data^(0+384)+14),w
  6987  0C52  0601               	xorwf	1,w
  6988  0C53  1D03               	skipz
  6989  0C54  0008               	return
  6990                           
  6991                           ;RF_Control_B1.c: 262: setControl_Lights_Table();
  6992  0C55  318B  2318         	fcall	_setControl_Lights_Table
  6993                           
  6994                           ;RF_Control_B1.c: 263: }
  6995                           ;RF_Control_B1.c: 264: }
  6996                           ;RF_Control_B1.c: 265: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6997  0C57  0008               	return
  6998  0C58                     l9796:	
  6999  0C58  0023               	movlb	3	; select bank3
  7000  0C59  0820               	movf	_RF_Data^(0+384),w
  7001  0C5A  3AFF               	xorlw	255
  7002  0C5B  1D03               	skipz
  7003  0C5C  2C63               	goto	l9802
  7004  0C5D  0821               	movf	(_RF_Data^(0+384)+1),w
  7005  0C5E  3A02               	xorlw	2
  7006  0C5F  1D03               	skipz
  7007  0C60  2C63               	goto	l9802
  7008                           
  7009                           ;RF_Control_B1.c: 266: __nop();
  7010  0C61  0000               	nop
  7011                           
  7012                           ;RF_Control_B1.c: 267: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7013  0C62  0008               	return
  7014  0C63                     l9802:	
  7015  0C63  0023               	movlb	3	; select bank3
  7016  0C64  08A0               	movf	_RF_Data^(0+384),f
  7017  0C65  1D03               	skipz
  7018  0C66  0008               	return
  7019  0C67  0821               	movf	(_RF_Data^(0+384)+1),w
  7020  0C68  3A65               	xorlw	101
  7021  0C69  1D03               	skipz
  7022  0C6A  0008               	return
  7023                           
  7024                           ;RF_Control_B1.c: 268: __nop();
  7025  0C6B  0000               	nop
  7026                           
  7027                           ;RF_Control_B1.c: 276: ;
  7028                           
  7029                           ;RF_Control_B1.c: 269: }
  7030                           ;RF_Control_B1.c: 274: }
  7031                           ;RF_Control_B1.c: 275: } else {
  7032  0C6C  0008               	return
  7033  0C6D                     __end_of_getRxData:	
  7034                           
  7035                           	psect	text24
  7036  119B                     __ptext24:	
  7037 ;; *************** function _setLog_Code *****************
  7038 ;; Defined at:
  7039 ;;		line 282 in file "../src/RF_Control_B1.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;		None
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;		None
  7044 ;; Return value:  Size  Location     Type
  7045 ;;		None               void
  7046 ;; Registers used:
  7047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;Total ram usage:        1 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    7
  7060 ;; This function calls:
  7061 ;;		_setBuz
  7062 ;;		_setMemory_LoopSave
  7063 ;;		_setMemory_Modify
  7064 ;;		_setProductData
  7065 ;; This function is called by:
  7066 ;;		_getRxData
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _setLog_Code
  7072  119B                     _setLog_Code:	
  7073                           
  7074                           ;RF_Control_B1.c: 283: RF1.Learn = 0;
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7078  119B  0021               	movlb	1	; select bank1
  7079  119C  133A               	bcf	_RF1^(0+128),6
  7080                           
  7081                           ;RF_Control_B1.c: 284: setProductData(12, RF_Data[12]);
  7082  119D  0023               	movlb	3	; select bank3
  7083  119E  082C               	movf	(_RF_Data^(0+384)+12),w
  7084  119F  0020               	movlb	0	; select bank0
  7085  11A0  00E6               	movwf	??_setLog_Code
  7086  11A1  0866               	movf	??_setLog_Code,w
  7087  11A2  00E2               	movwf	setProductData@value
  7088  11A3  300C               	movlw	12
  7089  11A4  319B  23D7  3191   	fcall	_setProductData
  7090                           
  7091                           ;RF_Control_B1.c: 285: setProductData(13, RF_Data[13]);
  7092  11A7  0023               	movlb	3	; select bank3
  7093  11A8  082D               	movf	(_RF_Data^(0+384)+13),w
  7094  11A9  0020               	movlb	0	; select bank0
  7095  11AA  00E6               	movwf	??_setLog_Code
  7096  11AB  0866               	movf	??_setLog_Code,w
  7097  11AC  00E2               	movwf	setProductData@value
  7098  11AD  300D               	movlw	13
  7099  11AE  319B  23D7  3191   	fcall	_setProductData
  7100                           
  7101                           ;RF_Control_B1.c: 286: setProductData(14, RF_Data[14]);
  7102  11B1  0023               	movlb	3	; select bank3
  7103  11B2  082E               	movf	(_RF_Data^(0+384)+14),w
  7104  11B3  0020               	movlb	0	; select bank0
  7105  11B4  00E6               	movwf	??_setLog_Code
  7106  11B5  0866               	movf	??_setLog_Code,w
  7107  11B6  00E2               	movwf	setProductData@value
  7108  11B7  300E               	movlw	14
  7109  11B8  319B  23D7  3191   	fcall	_setProductData
  7110                           
  7111                           ;RF_Control_B1.c: 287: setBuz(1, 100);
  7112  11BB  3064               	movlw	100
  7113  11BC  0020               	movlb	0	; select bank0
  7114  11BD  00A9               	movwf	setBuz@time
  7115  11BE  3000               	movlw	0
  7116  11BF  00AA               	movwf	setBuz@time+1
  7117  11C0  3001               	movlw	1
  7118  11C1  3197  274E  3191   	fcall	_setBuz
  7119                           
  7120                           ;RF_Control_B1.c: 288: if (myMain.First == 1) {
  7121  11C4  0021               	movlb	1	; select bank1
  7122  11C5  1EA0               	btfss	_myMain^(0+128),5
  7123  11C6  29CB               	goto	l2312
  7124                           
  7125                           ;RF_Control_B1.c: 289: setMemory_LoopSave(1);
  7126  11C7  3001               	movlw	1
  7127  11C8  3188  2000  3191   	fcall	_setMemory_LoopSave
  7128  11CB                     l2312:	
  7129                           
  7130                           ;RF_Control_B1.c: 290: }
  7131                           ;RF_Control_B1.c: 291: setMemory_Modify(1);
  7132  11CB  3001               	movlw	1
  7133  11CC  319C  24D5         	fcall	_setMemory_Modify
  7134  11CE  0008               	return
  7135  11CF                     __end_of_setLog_Code:	
  7136                           
  7137                           	psect	text25
  7138  0800                     __ptext25:	
  7139 ;; *************** function _setMemory_LoopSave *****************
  7140 ;; Defined at:
  7141 ;;		line 1070 in file "../src/MCU_B1.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  command         1    wreg     unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  command         1    1[BANK0 ] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;		None               void
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;Total ram usage:        2 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    5
  7162 ;; This function calls:
  7163 ;;		Nothing
  7164 ;; This function is called by:
  7165 ;;		_setLog_Code
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _setMemory_LoopSave
  7171  0800                     _setMemory_LoopSave:	
  7172                           
  7173                           ;incstack = 0
  7174                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7175                           ;setMemory_LoopSave@command stored from wreg
  7176  0800  0020               	movlb	0	; select bank0
  7177  0801  00A1               	movwf	setMemory_LoopSave@command
  7178                           
  7179                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7180  0802  0821               	movf	setMemory_LoopSave@command,w
  7181  0803  3A01               	xorlw	1
  7182  0804  3000               	movlw	0
  7183  0805  1903               	skipnz
  7184  0806  3001               	movlw	1
  7185  0807  00A0               	movwf	??_setMemory_LoopSave
  7186  0808  0DA0               	rlf	??_setMemory_LoopSave,f
  7187  0809  0DA0               	rlf	??_setMemory_LoopSave,f
  7188  080A  0024               	movlb	4	; select bank4
  7189  080B  0844               	movf	(_Memory^(0+512)+36),w
  7190  080C  0020               	movlb	0	; select bank0
  7191  080D  0620               	xorwf	??_setMemory_LoopSave,w
  7192  080E  39FB               	andlw	-5
  7193  080F  0620               	xorwf	??_setMemory_LoopSave,w
  7194  0810  0024               	movlb	4	; select bank4
  7195  0811  00C4               	movwf	(_Memory^(0+512)+36)
  7196  0812  0008               	return
  7197  0813                     __end_of_setMemory_LoopSave:	
  7198                           
  7199                           	psect	text26
  7200  0B18                     __ptext26:	
  7201 ;; *************** function _setControl_Lights_Table *****************
  7202 ;; Defined at:
  7203 ;;		line 295 in file "../src/RF_Control_B1.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;		None
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;		None               void
  7210 ;; Registers used:
  7211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;Total ram usage:        0 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:   11
  7224 ;; This function calls:
  7225 ;;		_setBuz
  7226 ;;		_setDimmerLights_ErrorClose
  7227 ;;		_setProductData
  7228 ;;		_setRFSW_AdjControl
  7229 ;;		_setRFSW_Control
  7230 ;;		_setTxData
  7231 ;; This function is called by:
  7232 ;;		_getRxData
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           
  7237                           ;psect for function _setControl_Lights_Table
  7238  0B18                     _setControl_Lights_Table:	
  7239                           
  7240                           ;RF_Control_B1.c: 296: switch (RF_Data[15]) {
  7241                           
  7242                           ;incstack = 0
  7243                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7244  0B18  2B63               	goto	l9454
  7245  0B19                     l9438:	
  7246                           ;RF_Control_B1.c: 297: case 0x00:
  7247                           
  7248                           
  7249                           ;RF_Control_B1.c: 299: setDimmerLights_ErrorClose(255);
  7250  0B19  30FF               	movlw	255
  7251  0B1A  3189  2188  318B   	fcall	_setDimmerLights_ErrorClose
  7252                           
  7253                           ;RF_Control_B1.c: 301: setProductData(9, 0);
  7254  0B1D  0020               	movlb	0	; select bank0
  7255  0B1E  01E2               	clrf	setProductData@value
  7256  0B1F  3009               	movlw	9
  7257  0B20  319B  23D7  318B   	fcall	_setProductData
  7258                           
  7259                           ;RF_Control_B1.c: 302: setProductData(11, 0);
  7260  0B23  0020               	movlb	0	; select bank0
  7261  0B24  01E2               	clrf	setProductData@value
  7262  0B25  300B               	movlw	11
  7263  0B26  319B  23D7  318B   	fcall	_setProductData
  7264                           
  7265                           ;RF_Control_B1.c: 303: setProductData(15, 0);
  7266  0B29  0020               	movlb	0	; select bank0
  7267  0B2A  01E2               	clrf	setProductData@value
  7268  0B2B  300F               	movlw	15
  7269  0B2C  319B  23D7  318B   	fcall	_setProductData
  7270                           
  7271                           ;RF_Control_B1.c: 304: setProductData(17, 0);
  7272  0B2F  0020               	movlb	0	; select bank0
  7273  0B30  01E2               	clrf	setProductData@value
  7274  0B31  3011               	movlw	17
  7275  0B32  319B  23D7  318B   	fcall	_setProductData
  7276                           
  7277                           ;RF_Control_B1.c: 305: setBuz(1, 100);
  7278  0B35  3064               	movlw	100
  7279  0B36  0020               	movlb	0	; select bank0
  7280  0B37  00A9               	movwf	setBuz@time
  7281  0B38  3000               	movlw	0
  7282  0B39  00AA               	movwf	setBuz@time+1
  7283  0B3A  3001               	movlw	1
  7284  0B3B  3197  274E         	fcall	_setBuz
  7285                           
  7286                           ;RF_Control_B1.c: 307: break;
  7287  0B3D  0008               	return
  7288  0B3E                     l9442:	
  7289                           ;RF_Control_B1.c: 308: case 0x20:
  7290                           
  7291                           
  7292                           ;RF_Control_B1.c: 309: setProductData(9, 0);
  7293  0B3E  0020               	movlb	0	; select bank0
  7294  0B3F  01E2               	clrf	setProductData@value
  7295  0B40  3009               	movlw	9
  7296  0B41  319B  23D7  318B   	fcall	_setProductData
  7297                           
  7298                           ;RF_Control_B1.c: 310: setProductData(11, 0);
  7299  0B44  0020               	movlb	0	; select bank0
  7300  0B45  01E2               	clrf	setProductData@value
  7301  0B46  300B               	movlw	11
  7302  0B47  319B  23D7  318B   	fcall	_setProductData
  7303                           
  7304                           ;RF_Control_B1.c: 311: setProductData(17, 0);
  7305  0B4A  0020               	movlb	0	; select bank0
  7306  0B4B  01E2               	clrf	setProductData@value
  7307  0B4C  3011               	movlw	17
  7308  0B4D  319B  23D7  318B   	fcall	_setProductData
  7309                           
  7310                           ;RF_Control_B1.c: 312: setTxData();
  7311  0B50  318E  260C         	fcall	_setTxData
  7312                           
  7313                           ;RF_Control_B1.c: 313: break;
  7314  0B52  0008               	return
  7315  0B53                     l9444:	
  7316                           ;RF_Control_B1.c: 314: case 0x01:
  7317                           
  7318                           
  7319                           ;RF_Control_B1.c: 316: setRFSW_Control(1);
  7320  0B53  3001               	movlw	1
  7321  0B54  3195  250B         	fcall	_setRFSW_Control
  7322                           
  7323                           ;RF_Control_B1.c: 318: break;
  7324  0B56  0008               	return
  7325  0B57                     l9446:	
  7326                           ;RF_Control_B1.c: 319: case 0x02:
  7327                           
  7328                           
  7329                           ;RF_Control_B1.c: 321: setRFSW_Control(2);
  7330  0B57  3002               	movlw	2
  7331  0B58  3195  250B         	fcall	_setRFSW_Control
  7332                           
  7333                           ;RF_Control_B1.c: 328: break;
  7334                           
  7335                           ;RF_Control_B1.c: 324: case 0x03:
  7336                           
  7337                           ;RF_Control_B1.c: 323: break;
  7338  0B5A  0008               	return
  7339  0B5B                     l9448:	
  7340                           ;RF_Control_B1.c: 329: case 0x11:
  7341                           
  7342                           
  7343                           ;RF_Control_B1.c: 332: setRFSW_AdjControl(1);
  7344  0B5B  3001               	movlw	1
  7345  0B5C  3193  2323         	fcall	_setRFSW_AdjControl
  7346                           
  7347                           ;RF_Control_B1.c: 335: break;
  7348  0B5E  0008               	return
  7349  0B5F                     l9450:	
  7350                           ;RF_Control_B1.c: 336: case 0x21:
  7351                           
  7352                           
  7353                           ;RF_Control_B1.c: 339: setRFSW_AdjControl(2);
  7354  0B5F  3002               	movlw	2
  7355  0B60  3193  2323         	fcall	_setRFSW_AdjControl
  7356                           
  7357                           ;RF_Control_B1.c: 350: }
  7358                           
  7359                           ;RF_Control_B1.c: 349: break;
  7360                           
  7361                           ;RF_Control_B1.c: 343: case 0x31:
  7362                           
  7363                           ;RF_Control_B1.c: 342: break;
  7364  0B62  0008               	return
  7365  0B63                     l9454:	
  7366  0B63  0023               	movlb	3	; select bank3
  7367  0B64  082F               	movf	(_RF_Data^(0+384)+15),w
  7368                           
  7369                           ; Switch size 1, requested type "space"
  7370                           ; Number of cases is 8, Range of values is 0 to 49
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte           25    13 (average)
  7374                           ; direct_byte          106     6 (fixed)
  7375                           ; jumptable            260     6 (fixed)
  7376                           ;	Chosen strategy is simple_byte
  7377  0B65  3A00               	xorlw	0	; case 0
  7378  0B66  1903               	skipnz
  7379  0B67  2B19               	goto	l9438
  7380  0B68  3A01               	xorlw	1	; case 1
  7381  0B69  1903               	skipnz
  7382  0B6A  2B53               	goto	l9444
  7383  0B6B  3A03               	xorlw	3	; case 2
  7384  0B6C  1903               	skipnz
  7385  0B6D  2B57               	goto	l9446
  7386  0B6E  3A01               	xorlw	1	; case 3
  7387  0B6F  1903               	skipnz
  7388  0B70  2B7E               	goto	l2326
  7389  0B71  3A12               	xorlw	18	; case 17
  7390  0B72  1903               	skipnz
  7391  0B73  2B5B               	goto	l9448
  7392  0B74  3A31               	xorlw	49	; case 32
  7393  0B75  1903               	skipnz
  7394  0B76  2B3E               	goto	l9442
  7395  0B77  3A01               	xorlw	1	; case 33
  7396  0B78  1903               	skipnz
  7397  0B79  2B5F               	goto	l9450
  7398  0B7A  3A10               	xorlw	16	; case 49
  7399  0B7B  1903               	skipnz
  7400  0B7C  2B7E               	goto	l2326
  7401  0B7D  2B7E               	goto	l2326
  7402  0B7E                     l2326:	
  7403  0B7E  0008               	return
  7404  0B7F                     __end_of_setControl_Lights_Table:	
  7405                           
  7406                           	psect	text27
  7407  150B                     __ptext27:	
  7408 ;; *************** function _setRFSW_Control *****************
  7409 ;; Defined at:
  7410 ;;		line 377 in file "../src/RF_Control_B1.c"
  7411 ;; Parameters:    Size  Location     Type
  7412 ;;  sw              1    wreg     unsigned char 
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;  sw              1   77[BANK0 ] unsigned char 
  7415 ;;  status          1   76[BANK0 ] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;		None               void
  7418 ;; Registers used:
  7419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;Total ram usage:        3 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    9
  7432 ;; This function calls:
  7433 ;;		_getDelayOff_GO
  7434 ;;		_getDimmerLights_Status
  7435 ;;		_setBuz
  7436 ;;		_setDelayOff_GO
  7437 ;;		_setDimmerLights_SwOff
  7438 ;;		_setDimmerLights_SwOn
  7439 ;;		_setRF_DimmerLights
  7440 ;;		_setTxData
  7441 ;; This function is called by:
  7442 ;;		_setControl_Lights_Table
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           
  7447                           ;psect for function _setRFSW_Control
  7448  150B                     _setRFSW_Control:	
  7449                           
  7450                           ;incstack = 0
  7451                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7452                           ;setRFSW_Control@sw stored from wreg
  7453  150B  0020               	movlb	0	; select bank0
  7454  150C  00ED               	movwf	setRFSW_Control@sw
  7455                           
  7456                           ;RF_Control_B1.c: 378: char status = 0;
  7457  150D  01EC               	clrf	setRFSW_Control@status
  7458                           
  7459                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7460  150E  0023               	movlb	3	; select bank3
  7461  150F  0830               	movf	(_RF_Data^(0+384)+16),w
  7462  1510  3A80               	xorlw	128
  7463  1511  1D03               	skipz
  7464  1512  2D3E               	goto	l9232
  7465                           
  7466                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7467  1513  0020               	movlb	0	; select bank0
  7468  1514  01E6               	clrf	setDelayOff_GO@command
  7469  1515  0AE6               	incf	setDelayOff_GO@command,f
  7470  1516  0023               	movlb	3	; select bank3
  7471  1517  0831               	movf	(_RF_Data^(0+384)+17),w
  7472  1518  0020               	movlb	0	; select bank0
  7473  1519  00EB               	movwf	??_setRFSW_Control
  7474  151A  086B               	movf	??_setRFSW_Control,w
  7475  151B  00E7               	movwf	setDelayOff_GO@value
  7476  151C  086D               	movf	setRFSW_Control@sw,w
  7477  151D  3195  25FC  3195   	fcall	_setDelayOff_GO
  7478                           
  7479                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7480  1520  0020               	movlb	0	; select bank0
  7481  1521  086D               	movf	setRFSW_Control@sw,w
  7482  1522  319C  2422  3195   	fcall	_getDimmerLights_Status
  7483  1525  3A01               	xorlw	1
  7484  1526  1D03               	skipz
  7485  1527  2D4D               	goto	l9236
  7486                           
  7487                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7488  1528  3064               	movlw	100
  7489  1529  0020               	movlb	0	; select bank0
  7490  152A  00A9               	movwf	setBuz@time
  7491  152B  3000               	movlw	0
  7492  152C  00AA               	movwf	setBuz@time+1
  7493  152D  3001               	movlw	1
  7494  152E  3197  274E  3195   	fcall	_setBuz
  7495                           
  7496                           ;RF_Control_B1.c: 385: status = 1;
  7497  1531  0020               	movlb	0	; select bank0
  7498  1532  01EC               	clrf	setRFSW_Control@status
  7499  1533  0AEC               	incf	setRFSW_Control@status,f
  7500                           
  7501                           ;RF_Control_B1.c: 386: setRF_DimmerLights(sw, 1);
  7502  1534  01E6               	clrf	setRF_DimmerLights@on
  7503  1535  0AE6               	incf	setRF_DimmerLights@on,f
  7504  1536  086D               	movf	setRFSW_Control@sw,w
  7505  1537  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7506                           
  7507                           ;RF_Control_B1.c: 387: setTxData();
  7508  153A  318E  260C  3195   	fcall	_setTxData
  7509                           
  7510                           ;RF_Control_B1.c: 389: }
  7511                           ;RF_Control_B1.c: 390: } else {
  7512  153D  2D4D               	goto	l9236
  7513  153E                     l9232:	
  7514                           
  7515                           ;RF_Control_B1.c: 392: if (getDelayOff_GO(sw) == 1) {
  7516  153E  0020               	movlb	0	; select bank0
  7517  153F  086D               	movf	setRFSW_Control@sw,w
  7518  1540  319C  2412  3195   	fcall	_getDelayOff_GO
  7519  1543  3A01               	xorlw	1
  7520  1544  1D03               	skipz
  7521  1545  2D4D               	goto	l9236
  7522                           
  7523                           ;RF_Control_B1.c: 393: setDelayOff_GO(sw, 0, 0);
  7524  1546  0020               	movlb	0	; select bank0
  7525  1547  01E6               	clrf	setDelayOff_GO@command
  7526  1548  01E7               	clrf	setDelayOff_GO@value
  7527  1549  086D               	movf	setRFSW_Control@sw,w
  7528  154A  3195  25FC  3195   	fcall	_setDelayOff_GO
  7529  154D                     l9236:	
  7530                           
  7531                           ;RF_Control_B1.c: 394: }
  7532                           ;RF_Control_B1.c: 396: }
  7533                           ;RF_Control_B1.c: 397: if (status == 0) {
  7534  154D  0020               	movlb	0	; select bank0
  7535  154E  08EC               	movf	setRFSW_Control@status,f
  7536  154F  1D03               	skipz
  7537  1550  0008               	return
  7538                           
  7539                           ;RF_Control_B1.c: 399: setDimmerLights_SwOn(sw);
  7540  1551  086D               	movf	setRFSW_Control@sw,w
  7541  1552  3188  206E  3195   	fcall	_setDimmerLights_SwOn
  7542                           
  7543                           ;RF_Control_B1.c: 400: setDimmerLights_SwOff(sw);
  7544  1555  0020               	movlb	0	; select bank0
  7545  1556  086D               	movf	setRFSW_Control@sw,w
  7546  1557  3194  24BC         	fcall	_setDimmerLights_SwOff
  7547  1559  0008               	return
  7548  155A                     __end_of_setRFSW_Control:	
  7549                           
  7550                           	psect	text28
  7551  086E                     __ptext28:	
  7552 ;; *************** function _setDimmerLights_SwOn *****************
  7553 ;; Defined at:
  7554 ;;		line 405 in file "../src/Dimmer_B1.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  sw              1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  sw              1   17[BANK0 ] unsigned char 
  7559 ;;  idle            1   16[BANK0 ] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;		None               void
  7562 ;; Registers used:
  7563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;Total ram usage:        5 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    7
  7576 ;; This function calls:
  7577 ;;		_DimmerLightsPointSelect
  7578 ;;		_setBuz
  7579 ;; This function is called by:
  7580 ;;		_setRFSW_Control
  7581 ;;		_setSw_Main
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           
  7586                           ;psect for function _setDimmerLights_SwOn
  7587  086E                     _setDimmerLights_SwOn:	
  7588                           
  7589                           ;incstack = 0
  7590                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7591                           ;setDimmerLights_SwOn@sw stored from wreg
  7592  086E  0020               	movlb	0	; select bank0
  7593  086F  00B1               	movwf	setDimmerLights_SwOn@sw
  7594                           
  7595                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7596  0870  0831               	movf	setDimmerLights_SwOn@sw,w
  7597  0871  319C  24AF  3188   	fcall	_DimmerLightsPointSelect
  7598                           
  7599                           ;Dimmer_B1.c: 407: char idle = 0;
  7600  0874  0020               	movlb	0	; select bank0
  7601  0875  01B0               	clrf	setDimmerLights_SwOn@idle
  7602                           
  7603                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7604  0876  08B0               	movf	setDimmerLights_SwOn@idle,f
  7605  0877  1D03               	skipz
  7606  0878  2899               	goto	l9020
  7607                           
  7608                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7609  0879  0831               	movf	setDimmerLights_SwOn@sw,w
  7610  087A  3A01               	xorlw	1
  7611  087B  1D03               	skipz
  7612  087C  2888               	goto	l9010
  7613                           
  7614                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7615  087D  01AE               	clrf	_setDimmerLights_SwOn$2310
  7616  087E  0AAE               	incf	_setDimmerLights_SwOn$2310,f
  7617  087F  0023               	movlb	3	; select bank3
  7618  0880  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
  7619  0881  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
  7620  0882  2885               	goto	l9008
  7621  0883  0020               	movlb	0	; select bank0
  7622  0884  01AE               	clrf	_setDimmerLights_SwOn$2310
  7623  0885                     l9008:	
  7624  0885  0020               	movlb	0	; select bank0
  7625  0886  082E               	movf	_setDimmerLights_SwOn$2310,w
  7626  0887  2896               	goto	L3
  7627  0888                     l9010:	
  7628                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7629                           
  7630  0888  0831               	movf	setDimmerLights_SwOn@sw,w
  7631  0889  3A02               	xorlw	2
  7632  088A  1D03               	skipz
  7633  088B  2899               	goto	l9020
  7634                           
  7635                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7636  088C  01AF               	clrf	_setDimmerLights_SwOn$2311
  7637  088D  0AAF               	incf	_setDimmerLights_SwOn$2311,f
  7638  088E  0022               	movlb	2	; select bank2
  7639  088F  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
  7640  0890  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
  7641  0891  2894               	goto	l9018
  7642  0892  0020               	movlb	0	; select bank0
  7643  0893  01AF               	clrf	_setDimmerLights_SwOn$2311
  7644  0894                     l9018:	
  7645  0894  0020               	movlb	0	; select bank0
  7646  0895  082F               	movf	_setDimmerLights_SwOn$2311,w
  7647  0896                     L3:	
  7648  0896  00AD               	movwf	??_setDimmerLights_SwOn
  7649  0897  082D               	movf	??_setDimmerLights_SwOn,w
  7650  0898  00B0               	movwf	setDimmerLights_SwOn@idle
  7651  0899                     l9020:	
  7652                           
  7653                           ;Dimmer_B1.c: 415: }
  7654                           ;Dimmer_B1.c: 416: }
  7655                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7656  0899  08B0               	movf	setDimmerLights_SwOn@idle,f
  7657  089A  1D03               	skipz
  7658  089B  0008               	return
  7659                           
  7660                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7661  089C  086F               	movf	_DimmerLights,w
  7662  089D  3E0B               	addlw	11
  7663  089E  0086               	movwf	6
  7664  089F  3001               	movlw	1	; select bank2/3
  7665  08A0  0087               	movwf	7
  7666  08A1  1481               	bsf	1,1
  7667                           
  7668                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7669  08A2  086F               	movf	_DimmerLights,w
  7670  08A3  3E02               	addlw	2
  7671  08A4  0086               	movwf	6
  7672  08A5  3001               	movlw	1	; select bank2/3
  7673  08A6  0087               	movwf	7
  7674  08A7  1881               	btfsc	1,1
  7675  08A8  28BC               	goto	l9026
  7676                           
  7677                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7678  08A9  086F               	movf	_DimmerLights,w
  7679  08AA  3E02               	addlw	2
  7680  08AB  0086               	movwf	6
  7681  08AC  3001               	movlw	1	; select bank2/3
  7682  08AD  0087               	movwf	7
  7683  08AE  1481               	bsf	1,1
  7684                           
  7685                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7686  08AF  086F               	movf	_DimmerLights,w
  7687  08B0  3E0A               	addlw	10
  7688  08B1  0086               	movwf	6
  7689  08B2  3001               	movlw	1	; select bank2/3
  7690  08B3  0087               	movwf	7
  7691  08B4  1481               	bsf	1,1
  7692                           
  7693                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7694  08B5  086F               	movf	_DimmerLights,w
  7695  08B6  3E0A               	addlw	10
  7696  08B7  0086               	movwf	6
  7697  08B8  3001               	movlw	1	; select bank2/3
  7698  08B9  0087               	movwf	7
  7699  08BA  1401               	bsf	1,0
  7700                           
  7701                           ;Dimmer_B1.c: 442: } else {
  7702  08BB  28C2               	goto	l9028
  7703  08BC                     l9026:	
  7704                           
  7705                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7706  08BC  086F               	movf	_DimmerLights,w
  7707  08BD  3E02               	addlw	2
  7708  08BE  0086               	movwf	6
  7709  08BF  3001               	movlw	1	; select bank2/3
  7710  08C0  0087               	movwf	7
  7711  08C1  1081               	bcf	1,1
  7712  08C2                     l9028:	
  7713                           
  7714                           ;Dimmer_B1.c: 444: }
  7715                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7716  08C2  3064               	movlw	100
  7717  08C3  00A9               	movwf	setBuz@time
  7718  08C4  3000               	movlw	0
  7719  08C5  00AA               	movwf	setBuz@time+1
  7720  08C6  3001               	movlw	1
  7721  08C7  3197  274E         	fcall	_setBuz
  7722  08C9  0008               	return
  7723  08CA                     __end_of_setDimmerLights_SwOn:	
  7724                           
  7725                           	psect	text29
  7726  1323                     __ptext29:	
  7727 ;; *************** function _setRFSW_AdjControl *****************
  7728 ;; Defined at:
  7729 ;;		line 406 in file "../src/RF_Control_B1.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  sw              1    wreg     unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  sw              1   75[BANK0 ] unsigned char 
  7734 ;;  status          1   74[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;		None               void
  7737 ;; Registers used:
  7738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:        4 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:   10
  7751 ;; This function calls:
  7752 ;;		_getDimmerLights_Status
  7753 ;;		_setMemory_Modify
  7754 ;;		_setProductData
  7755 ;;		_setRF_DimmerValue
  7756 ;;		_setTxData
  7757 ;; This function is called by:
  7758 ;;		_setControl_Lights_Table
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _setRFSW_AdjControl
  7764  1323                     _setRFSW_AdjControl:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7768                           ;setRFSW_AdjControl@sw stored from wreg
  7769  1323  0020               	movlb	0	; select bank0
  7770  1324  00EB               	movwf	setRFSW_AdjControl@sw
  7771                           
  7772                           ;RF_Control_B1.c: 407: char status = 0;
  7773  1325  01EA               	clrf	setRFSW_AdjControl@status
  7774                           
  7775                           ;RF_Control_B1.c: 409: status = getDimmerLights_Status(sw);
  7776  1326  086B               	movf	setRFSW_AdjControl@sw,w
  7777  1327  319C  2422  3193   	fcall	_getDimmerLights_Status
  7778  132A  0020               	movlb	0	; select bank0
  7779  132B  00E8               	movwf	??_setRFSW_AdjControl
  7780  132C  0868               	movf	??_setRFSW_AdjControl,w
  7781  132D  00EA               	movwf	setRFSW_AdjControl@status
  7782                           
  7783                           ;RF_Control_B1.c: 412: if (status == 1) {
  7784  132E  086A               	movf	setRFSW_AdjControl@status,w
  7785  132F  3A01               	xorlw	1
  7786  1330  1D03               	skipz
  7787  1331  2B3C               	goto	l9250
  7788                           
  7789                           ;RF_Control_B1.c: 413: setMemory_Modify(1);
  7790  1332  3001               	movlw	1
  7791  1333  319C  24D5  3193   	fcall	_setMemory_Modify
  7792                           
  7793                           ;RF_Control_B1.c: 414: setRF_DimmerValue(sw);
  7794  1336  0020               	movlb	0	; select bank0
  7795  1337  086B               	movf	setRFSW_AdjControl@sw,w
  7796  1338  3191  2139  3193   	fcall	_setRF_DimmerValue
  7797                           
  7798                           ;RF_Control_B1.c: 415: } else {
  7799  133B  2B4D               	goto	l2338
  7800  133C                     l9250:	
  7801                           
  7802                           ;RF_Control_B1.c: 416: setProductData(9, product->Data[20 + sw]);
  7803  133C  0020               	movlb	0	; select bank0
  7804  133D  086B               	movf	setRFSW_AdjControl@sw,w
  7805  133E  3E14               	addlw	20
  7806  133F  0779               	addwf	_product,w
  7807  1340  00E8               	movwf	??_setRFSW_AdjControl
  7808  1341  0868               	movf	??_setRFSW_AdjControl,w
  7809  1342  0086               	movwf	6
  7810  1343  3002               	movlw	2	; select bank4/5
  7811  1344  0087               	movwf	7
  7812  1345  0801               	movf	1,w
  7813  1346  00E9               	movwf	??_setRFSW_AdjControl+1
  7814  1347  0869               	movf	??_setRFSW_AdjControl+1,w
  7815  1348  00E2               	movwf	setProductData@value
  7816  1349  3009               	movlw	9
  7817  134A  319B  23D7  3193   	fcall	_setProductData
  7818  134D                     l2338:	
  7819                           
  7820                           ;RF_Control_B1.c: 417: }
  7821                           ;RF_Control_B1.c: 418: setProductData(17, product->Data[26 + sw]);
  7822  134D  0020               	movlb	0	; select bank0
  7823  134E  086B               	movf	setRFSW_AdjControl@sw,w
  7824  134F  3E1A               	addlw	26
  7825  1350  0779               	addwf	_product,w
  7826  1351  00E8               	movwf	??_setRFSW_AdjControl
  7827  1352  0868               	movf	??_setRFSW_AdjControl,w
  7828  1353  0086               	movwf	6
  7829  1354  3002               	movlw	2	; select bank4/5
  7830  1355  0087               	movwf	7
  7831  1356  0801               	movf	1,w
  7832  1357  00E9               	movwf	??_setRFSW_AdjControl+1
  7833  1358  0869               	movf	??_setRFSW_AdjControl+1,w
  7834  1359  00E2               	movwf	setProductData@value
  7835  135A  3011               	movlw	17
  7836  135B  319B  23D7  3193   	fcall	_setProductData
  7837                           
  7838                           ;RF_Control_B1.c: 419: setTxData();
  7839  135E  318E  260C         	fcall	_setTxData
  7840  1360  0008               	return
  7841  1361                     __end_of_setRFSW_AdjControl:	
  7842                           
  7843                           	psect	text30
  7844  1139                     __ptext30:	
  7845 ;; *************** function _setRF_DimmerValue *****************
  7846 ;; Defined at:
  7847 ;;		line 424 in file "../src/RF_Control_B1.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;  lights          1    wreg     unsigned char 
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;  lights          1   71[BANK0 ] unsigned char 
  7852 ;; Return value:  Size  Location     Type
  7853 ;;		None               void
  7854 ;; Registers used:
  7855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7856 ;; Tracked objects:
  7857 ;;		On entry : 0/0
  7858 ;;		On exit  : 0/0
  7859 ;;		Unchanged: 0/0
  7860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;Total ram usage:        2 bytes
  7866 ;; Hardware stack levels used:    1
  7867 ;; Hardware stack levels required when called:    9
  7868 ;; This function calls:
  7869 ;;		_setDimmerLights_AdjRF
  7870 ;;		_setProductData
  7871 ;; This function is called by:
  7872 ;;		_setRFSW_AdjControl
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           
  7877                           ;psect for function _setRF_DimmerValue
  7878  1139                     _setRF_DimmerValue:	
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7882                           ;setRF_DimmerValue@lights stored from wreg
  7883  1139  0020               	movlb	0	; select bank0
  7884  113A  00E7               	movwf	setRF_DimmerValue@lights
  7885                           
  7886                           ;RF_Control_B1.c: 425: if (RF_Data[9] > 0x64) {
  7887  113B  3065               	movlw	101
  7888  113C  0023               	movlb	3	; select bank3
  7889  113D  0229               	subwf	(_RF_Data^(0+384)+9),w
  7890  113E  1C03               	skipc
  7891  113F  2946               	goto	l9122
  7892                           
  7893                           ;RF_Control_B1.c: 426: RF_Data[9] = 0x64;
  7894  1140  3064               	movlw	100
  7895  1141  0020               	movlb	0	; select bank0
  7896  1142  00E6               	movwf	??_setRF_DimmerValue
  7897  1143  0866               	movf	??_setRF_DimmerValue,w
  7898  1144  0023               	movlb	3	; select bank3
  7899  1145  00A9               	movwf	(_RF_Data^(0+384)+9)
  7900  1146                     l9122:	
  7901                           
  7902                           ;RF_Control_B1.c: 427: }
  7903                           ;RF_Control_B1.c: 428: setProductData(9, RF_Data[9]);
  7904  1146  0829               	movf	(_RF_Data^(0+384)+9),w
  7905  1147  0020               	movlb	0	; select bank0
  7906  1148  00E6               	movwf	??_setRF_DimmerValue
  7907  1149  0866               	movf	??_setRF_DimmerValue,w
  7908  114A  00E2               	movwf	setProductData@value
  7909  114B  3009               	movlw	9
  7910  114C  319B  23D7  3191   	fcall	_setProductData
  7911                           
  7912                           ;RF_Control_B1.c: 429: setProductData(11, lights);
  7913  114F  0020               	movlb	0	; select bank0
  7914  1150  0867               	movf	setRF_DimmerValue@lights,w
  7915  1151  00E6               	movwf	??_setRF_DimmerValue
  7916  1152  0866               	movf	??_setRF_DimmerValue,w
  7917  1153  00E2               	movwf	setProductData@value
  7918  1154  300B               	movlw	11
  7919  1155  319B  23D7  3191   	fcall	_setProductData
  7920                           
  7921                           ;RF_Control_B1.c: 430: setProductData((20 + lights), RF_Data[9]);
  7922  1158  0023               	movlb	3	; select bank3
  7923  1159  0829               	movf	(_RF_Data^(0+384)+9),w
  7924  115A  0020               	movlb	0	; select bank0
  7925  115B  00E6               	movwf	??_setRF_DimmerValue
  7926  115C  0866               	movf	??_setRF_DimmerValue,w
  7927  115D  00E2               	movwf	setProductData@value
  7928  115E  0867               	movf	setRF_DimmerValue@lights,w
  7929  115F  3E14               	addlw	20
  7930  1160  319B  23D7  3191   	fcall	_setProductData
  7931                           
  7932                           ;RF_Control_B1.c: 431: setDimmerLights_AdjRF(lights);
  7933  1163  0020               	movlb	0	; select bank0
  7934  1164  0867               	movf	setRF_DimmerValue@lights,w
  7935  1165  319F  2768         	fcall	_setDimmerLights_AdjRF
  7936  1167  0008               	return
  7937  1168                     __end_of_setRF_DimmerValue:	
  7938                           
  7939                           	psect	text31
  7940  1F68                     __ptext31:	
  7941 ;; *************** function _setDimmerLights_AdjRF *****************
  7942 ;; Defined at:
  7943 ;;		line 899 in file "../src/Dimmer_B1.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  lights          1    wreg     unsigned char 
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;  lights          1   67[BANK0 ] unsigned char 
  7948 ;; Return value:  Size  Location     Type
  7949 ;;		None               void
  7950 ;; Registers used:
  7951 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;Total ram usage:        2 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    8
  7964 ;; This function calls:
  7965 ;;		_DimmerLightsPointSelect
  7966 ;;		_getPercentValue
  7967 ;; This function is called by:
  7968 ;;		_setRF_DimmerValue
  7969 ;; This function uses a non-reentrant model
  7970 ;;
  7971                           
  7972                           
  7973                           ;psect for function _setDimmerLights_AdjRF
  7974  1F68                     _setDimmerLights_AdjRF:	
  7975                           
  7976                           ;incstack = 0
  7977                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7978                           ;setDimmerLights_AdjRF@lights stored from wreg
  7979  1F68  0020               	movlb	0	; select bank0
  7980  1F69  00E3               	movwf	setDimmerLights_AdjRF@lights
  7981                           
  7982                           ;Dimmer_B1.c: 901: DimmerLightsPointSelect(lights);
  7983  1F6A  0863               	movf	setDimmerLights_AdjRF@lights,w
  7984  1F6B  319C  24AF  319F   	fcall	_DimmerLightsPointSelect
  7985                           
  7986                           ;Dimmer_B1.c: 902: DimmerLights->AdjRF = 1;
  7987  1F6E  0020               	movlb	0	; select bank0
  7988  1F6F  086F               	movf	_DimmerLights,w
  7989  1F70  3E02               	addlw	2
  7990  1F71  0086               	movwf	6
  7991  1F72  3001               	movlw	1	; select bank2/3
  7992  1F73  0087               	movwf	7
  7993  1F74  1401               	bsf	1,0
  7994                           
  7995                           ;Dimmer_B1.c: 903: DimmerLights->Signal = 1;
  7996  1F75  0A6F               	incf	_DimmerLights,w
  7997  1F76  0086               	movwf	6
  7998  1F77  3001               	movlw	1	; select bank2/3
  7999  1F78  0087               	movwf	7
  8000  1F79  1681               	bsf	1,5
  8001                           
  8002                           ;Dimmer_B1.c: 904: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8003  1F7A  0879               	movf	_product,w
  8004  1F7B  3E09               	addlw	9
  8005  1F7C  0086               	movwf	6
  8006  1F7D  3002               	movlw	2	; select bank4/5
  8007  1F7E  0087               	movwf	7
  8008  1F7F  0801               	movf	1,w
  8009  1F80  318A  22B3         	fcall	_getPercentValue
  8010  1F82  0020               	movlb	0	; select bank0
  8011  1F83  00E2               	movwf	??_setDimmerLights_AdjRF
  8012  1F84  086F               	movf	_DimmerLights,w
  8013  1F85  3E06               	addlw	6
  8014  1F86  0086               	movwf	6
  8015  1F87  3001               	movlw	1	; select bank2/3
  8016  1F88  0087               	movwf	7
  8017  1F89  0862               	movf	??_setDimmerLights_AdjRF,w
  8018  1F8A  0081               	movwf	1
  8019  1F8B  0008               	return
  8020  1F8C                     __end_of_setDimmerLights_AdjRF:	
  8021                           
  8022                           	psect	text32
  8023  0AB3                     __ptext32:	
  8024 ;; *************** function _getPercentValue *****************
  8025 ;; Defined at:
  8026 ;;		line 1014 in file "../src/Dimmer_B1.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  value           1    wreg     unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  value           1   62[BANK0 ] unsigned char 
  8031 ;;  i               3   63[BANK0 ] float 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      unsigned char 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, pclath, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;Total ram usage:        6 bytes
  8046 ;; Hardware stack levels used:    1
  8047 ;; Hardware stack levels required when called:    7
  8048 ;; This function calls:
  8049 ;;		___awtoft
  8050 ;;		___ftadd
  8051 ;;		___ftdiv
  8052 ;;		___ftmul
  8053 ;;		___ftneg
  8054 ;;		___fttol
  8055 ;; This function is called by:
  8056 ;;		_setDimmerLights_AdjRF
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _getPercentValue
  8062  0AB3                     _getPercentValue:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8066                           ;getPercentValue@value stored from wreg
  8067  0AB3  0020               	movlb	0	; select bank0
  8068  0AB4  00DE               	movwf	getPercentValue@value
  8069                           
  8070                           ;Dimmer_B1.c: 1022: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  8071  0AB5  3000               	movlw	0
  8072  0AB6  00DF               	movwf	getPercentValue@i
  8073  0AB7  3040               	movlw	64
  8074  0AB8  00E0               	movwf	getPercentValue@i+1
  8075  0AB9  3042               	movlw	66
  8076  0ABA  00E1               	movwf	getPercentValue@i+2
  8077                           
  8078                           ;Dimmer_B1.c: 1023: i /= 100;
  8079  0ABB  3000               	movlw	0
  8080  0ABC  00AE               	movwf	___ftdiv@f2
  8081  0ABD  30C8               	movlw	200
  8082  0ABE  00AF               	movwf	___ftdiv@f2+1
  8083  0ABF  3042               	movlw	66
  8084  0AC0  00B0               	movwf	___ftdiv@f2+2
  8085  0AC1  085F               	movf	getPercentValue@i,w
  8086  0AC2  00B1               	movwf	___ftdiv@f1
  8087  0AC3  0860               	movf	getPercentValue@i+1,w
  8088  0AC4  00B2               	movwf	___ftdiv@f1+1
  8089  0AC5  0861               	movf	getPercentValue@i+2,w
  8090  0AC6  00B3               	movwf	___ftdiv@f1+2
  8091  0AC7  318E  26A7  318A   	fcall	___ftdiv
  8092  0ACA  0020               	movlb	0	; select bank0
  8093  0ACB  082E               	movf	?___ftdiv,w
  8094  0ACC  00DF               	movwf	getPercentValue@i
  8095  0ACD  082F               	movf	?___ftdiv+1,w
  8096  0ACE  00E0               	movwf	getPercentValue@i+1
  8097  0ACF  0830               	movf	?___ftdiv+2,w
  8098  0AD0  00E1               	movwf	getPercentValue@i+2
  8099                           
  8100                           ;Dimmer_B1.c: 1025: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  8101  0AD1  085E               	movf	getPercentValue@value,w
  8102  0AD2  00DC               	movwf	??_getPercentValue
  8103  0AD3  01DD               	clrf	??_getPercentValue+1
  8104  0AD4  09DC               	comf	??_getPercentValue,f
  8105  0AD5  09DD               	comf	??_getPercentValue+1,f
  8106  0AD6  0ADC               	incf	??_getPercentValue,f
  8107  0AD7  1903               	skipnz
  8108  0AD8  0ADD               	incf	??_getPercentValue+1,f
  8109  0AD9  085C               	movf	??_getPercentValue,w
  8110  0ADA  3E64               	addlw	100
  8111  0ADB  00A8               	movwf	___awtoft@c
  8112  0ADC  3000               	movlw	0
  8113  0ADD  3D5D               	addwfc	??_getPercentValue+1,w
  8114  0ADE  00A9               	movwf	___awtoft@c+1
  8115  0ADF  319F  2746  318A   	fcall	___awtoft
  8116  0AE2  0020               	movlb	0	; select bank0
  8117  0AE3  0828               	movf	?___awtoft,w
  8118  0AE4  00B1               	movwf	___ftmul@f2
  8119  0AE5  0829               	movf	?___awtoft+1,w
  8120  0AE6  00B2               	movwf	___ftmul@f2+1
  8121  0AE7  082A               	movf	?___awtoft+2,w
  8122  0AE8  00B3               	movwf	___ftmul@f2+2
  8123  0AE9  085F               	movf	getPercentValue@i,w
  8124  0AEA  00AE               	movwf	___ftmul@f1
  8125  0AEB  0860               	movf	getPercentValue@i+1,w
  8126  0AEC  00AF               	movwf	___ftmul@f1+1
  8127  0AED  0861               	movf	getPercentValue@i+2,w
  8128  0AEE  00B0               	movwf	___ftmul@f1+2
  8129  0AEF  3187  271B  318A   	fcall	___ftmul
  8130  0AF2  0020               	movlb	0	; select bank0
  8131  0AF3  082E               	movf	?___ftmul,w
  8132  0AF4  00BE               	movwf	___ftneg@f1
  8133  0AF5  082F               	movf	?___ftmul+1,w
  8134  0AF6  00BF               	movwf	___ftneg@f1+1
  8135  0AF7  0830               	movf	?___ftmul+2,w
  8136  0AF8  00C0               	movwf	___ftneg@f1+2
  8137  0AF9  319B  2342  318A   	fcall	___ftneg
  8138  0AFC  0020               	movlb	0	; select bank0
  8139  0AFD  083E               	movf	?___ftneg,w
  8140  0AFE  00C4               	movwf	___ftadd@f2
  8141  0AFF  083F               	movf	?___ftneg+1,w
  8142  0B00  00C5               	movwf	___ftadd@f2+1
  8143  0B01  0840               	movf	?___ftneg+2,w
  8144  0B02  00C6               	movwf	___ftadd@f2+2
  8145  0B03  3000               	movlw	0
  8146  0B04  00C1               	movwf	___ftadd@f1
  8147  0B05  3070               	movlw	112
  8148  0B06  00C2               	movwf	___ftadd@f1+1
  8149  0B07  3042               	movlw	66
  8150  0B08  00C3               	movwf	___ftadd@f1+2
  8151  0B09  3184  2469  318A   	fcall	___ftadd
  8152  0B0C  0020               	movlb	0	; select bank0
  8153  0B0D  0841               	movf	?___ftadd,w
  8154  0B0E  00CE               	movwf	___fttol@f1
  8155  0B0F  0842               	movf	?___ftadd+1,w
  8156  0B10  00CF               	movwf	___fttol@f1+1
  8157  0B11  0843               	movf	?___ftadd+2,w
  8158  0B12  00D0               	movwf	___fttol@f1+2
  8159  0B13  318C  24EE         	fcall	___fttol
  8160  0B15  0020               	movlb	0	; select bank0
  8161  0B16  084E               	movf	?___fttol,w
  8162  0B17  0008               	return
  8163  0B18                     __end_of_getPercentValue:	
  8164                           
  8165                           	psect	text33
  8166  071B                     __ptext33:	
  8167 ;; *************** function ___ftmul *****************
  8168 ;; Defined at:
  8169 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  f1              3   14[BANK0 ] float 
  8172 ;;  f2              3   17[BANK0 ] float 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8175 ;;  sign            1   29[BANK0 ] unsigned char 
  8176 ;;  cntr            1   28[BANK0 ] unsigned char 
  8177 ;;  exp             1   24[BANK0 ] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;                  3   14[BANK0 ] float 
  8180 ;; Registers used:
  8181 ;;		wreg, status,2, status,0, pclath, cstack
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8187 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;Total ram usage:       16 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    6
  8194 ;; This function calls:
  8195 ;;		___ftpack
  8196 ;; This function is called by:
  8197 ;;		_getPercentValue
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function ___ftmul
  8203  071B                     ___ftmul:	
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8207  071B  0020               	movlb	0	; select bank0
  8208  071C  082E               	movf	___ftmul@f1,w
  8209  071D  00B4               	movwf	??___ftmul
  8210  071E  082F               	movf	___ftmul@f1+1,w
  8211  071F  00B5               	movwf	??___ftmul+1
  8212  0720  0830               	movf	___ftmul@f1+2,w
  8213  0721  00B6               	movwf	??___ftmul+2
  8214  0722  1003               	clrc
  8215  0723  0D35               	rlf	??___ftmul+1,w
  8216  0724  0D36               	rlf	??___ftmul+2,w
  8217  0725  00B7               	movwf	??___ftmul+3
  8218  0726  0837               	movf	??___ftmul+3,w
  8219  0727  00B8               	movwf	___ftmul@exp
  8220  0728  08B8               	movf	___ftmul@exp,f
  8221  0729  1D03               	skipz
  8222  072A  2F32               	goto	l8746
  8223  072B  3000               	movlw	0
  8224  072C  00AE               	movwf	?___ftmul
  8225  072D  3000               	movlw	0
  8226  072E  00AF               	movwf	?___ftmul+1
  8227  072F  3000               	movlw	0
  8228  0730  00B0               	movwf	?___ftmul+2
  8229  0731  0008               	return
  8230  0732                     l8746:	
  8231  0732  0831               	movf	___ftmul@f2,w
  8232  0733  00B4               	movwf	??___ftmul
  8233  0734  0832               	movf	___ftmul@f2+1,w
  8234  0735  00B5               	movwf	??___ftmul+1
  8235  0736  0833               	movf	___ftmul@f2+2,w
  8236  0737  00B6               	movwf	??___ftmul+2
  8237  0738  1003               	clrc
  8238  0739  0D35               	rlf	??___ftmul+1,w
  8239  073A  0D36               	rlf	??___ftmul+2,w
  8240  073B  00B7               	movwf	??___ftmul+3
  8241  073C  0837               	movf	??___ftmul+3,w
  8242  073D  00BD               	movwf	___ftmul@sign
  8243  073E  08BD               	movf	___ftmul@sign,f
  8244  073F  1D03               	skipz
  8245  0740  2F48               	goto	l8752
  8246  0741  3000               	movlw	0
  8247  0742  00AE               	movwf	?___ftmul
  8248  0743  3000               	movlw	0
  8249  0744  00AF               	movwf	?___ftmul+1
  8250  0745  3000               	movlw	0
  8251  0746  00B0               	movwf	?___ftmul+2
  8252  0747  0008               	return
  8253  0748                     l8752:	
  8254  0748  083D               	movf	___ftmul@sign,w
  8255  0749  3E7B               	addlw	123
  8256  074A  00B4               	movwf	??___ftmul
  8257  074B  0834               	movf	??___ftmul,w
  8258  074C  07B8               	addwf	___ftmul@exp,f
  8259  074D  082E               	movf	___ftmul@f1,w
  8260  074E  00B4               	movwf	??___ftmul
  8261  074F  082F               	movf	___ftmul@f1+1,w
  8262  0750  00B5               	movwf	??___ftmul+1
  8263  0751  0830               	movf	___ftmul@f1+2,w
  8264  0752  00B6               	movwf	??___ftmul+2
  8265  0753  3010               	movlw	16
  8266  0754                     u9385:	
  8267  0754  36B6               	lsrf	??___ftmul+2,f
  8268  0755  0CB5               	rrf	??___ftmul+1,f
  8269  0756  0CB4               	rrf	??___ftmul,f
  8270  0757  0B89               	decfsz	9,f
  8271  0758  2F54               	goto	u9385
  8272  0759  0834               	movf	??___ftmul,w
  8273  075A  00B7               	movwf	??___ftmul+3
  8274  075B  0837               	movf	??___ftmul+3,w
  8275  075C  00BD               	movwf	___ftmul@sign
  8276  075D  0831               	movf	___ftmul@f2,w
  8277  075E  00B4               	movwf	??___ftmul
  8278  075F  0832               	movf	___ftmul@f2+1,w
  8279  0760  00B5               	movwf	??___ftmul+1
  8280  0761  0833               	movf	___ftmul@f2+2,w
  8281  0762  00B6               	movwf	??___ftmul+2
  8282  0763  3010               	movlw	16
  8283  0764                     u9395:	
  8284  0764  36B6               	lsrf	??___ftmul+2,f
  8285  0765  0CB5               	rrf	??___ftmul+1,f
  8286  0766  0CB4               	rrf	??___ftmul,f
  8287  0767  0B89               	decfsz	9,f
  8288  0768  2F64               	goto	u9395
  8289  0769  0834               	movf	??___ftmul,w
  8290  076A  00B7               	movwf	??___ftmul+3
  8291  076B  0837               	movf	??___ftmul+3,w
  8292  076C  06BD               	xorwf	___ftmul@sign,f
  8293  076D  3080               	movlw	128
  8294  076E  00B4               	movwf	??___ftmul
  8295  076F  0834               	movf	??___ftmul,w
  8296  0770  05BD               	andwf	___ftmul@sign,f
  8297  0771  17AF               	bsf	___ftmul@f1+1,7
  8298  0772  17B2               	bsf	___ftmul@f2+1,7
  8299  0773  30FF               	movlw	255
  8300  0774  05B1               	andwf	___ftmul@f2,f
  8301  0775  30FF               	movlw	255
  8302  0776  05B2               	andwf	___ftmul@f2+1,f
  8303  0777  3000               	movlw	0
  8304  0778  05B3               	andwf	___ftmul@f2+2,f
  8305  0779  3000               	movlw	0
  8306  077A  00B9               	movwf	___ftmul@f3_as_product
  8307  077B  3000               	movlw	0
  8308  077C  00BA               	movwf	___ftmul@f3_as_product+1
  8309  077D  3000               	movlw	0
  8310  077E  00BB               	movwf	___ftmul@f3_as_product+2
  8311  077F  3007               	movlw	7
  8312  0780  00B4               	movwf	??___ftmul
  8313  0781  0834               	movf	??___ftmul,w
  8314  0782  00BC               	movwf	___ftmul@cntr
  8315  0783                     l8764:	
  8316  0783  1C2E               	btfss	___ftmul@f1,0
  8317  0784  2F8B               	goto	l8768
  8318  0785  0831               	movf	___ftmul@f2,w
  8319  0786  07B9               	addwf	___ftmul@f3_as_product,f
  8320  0787  0832               	movf	___ftmul@f2+1,w
  8321  0788  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8322  0789  0833               	movf	___ftmul@f2+2,w
  8323  078A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8324  078B                     l8768:	
  8325  078B  3001               	movlw	1
  8326  078C                     u9415:	
  8327  078C  36B0               	lsrf	___ftmul@f1+2,f
  8328  078D  0CAF               	rrf	___ftmul@f1+1,f
  8329  078E  0CAE               	rrf	___ftmul@f1,f
  8330  078F  0B89               	decfsz	9,f
  8331  0790  2F8C               	goto	u9415
  8332  0791  3001               	movlw	1
  8333  0792                     u9425:	
  8334  0792  35B1               	lslf	___ftmul@f2,f
  8335  0793  0DB2               	rlf	___ftmul@f2+1,f
  8336  0794  0DB3               	rlf	___ftmul@f2+2,f
  8337  0795  0B89               	decfsz	9,f
  8338  0796  2F92               	goto	u9425
  8339  0797  3001               	movlw	1
  8340  0798  02BC               	subwf	___ftmul@cntr,f
  8341  0799  1D03               	btfss	3,2
  8342  079A  2F83               	goto	l8764
  8343  079B  3009               	movlw	9
  8344  079C  00B4               	movwf	??___ftmul
  8345  079D  0834               	movf	??___ftmul,w
  8346  079E  00BC               	movwf	___ftmul@cntr
  8347  079F                     l8776:	
  8348  079F  1C2E               	btfss	___ftmul@f1,0
  8349  07A0  2FA7               	goto	l8780
  8350  07A1  0831               	movf	___ftmul@f2,w
  8351  07A2  07B9               	addwf	___ftmul@f3_as_product,f
  8352  07A3  0832               	movf	___ftmul@f2+1,w
  8353  07A4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8354  07A5  0833               	movf	___ftmul@f2+2,w
  8355  07A6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8356  07A7                     l8780:	
  8357  07A7  3001               	movlw	1
  8358  07A8                     u9455:	
  8359  07A8  36B0               	lsrf	___ftmul@f1+2,f
  8360  07A9  0CAF               	rrf	___ftmul@f1+1,f
  8361  07AA  0CAE               	rrf	___ftmul@f1,f
  8362  07AB  0B89               	decfsz	9,f
  8363  07AC  2FA8               	goto	u9455
  8364  07AD  3001               	movlw	1
  8365  07AE                     u9465:	
  8366  07AE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8367  07AF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8368  07B0  0CB9               	rrf	___ftmul@f3_as_product,f
  8369  07B1  0B89               	decfsz	9,f
  8370  07B2  2FAE               	goto	u9465
  8371  07B3  3001               	movlw	1
  8372  07B4  02BC               	subwf	___ftmul@cntr,f
  8373  07B5  1D03               	btfss	3,2
  8374  07B6  2F9F               	goto	l8776
  8375  07B7  0839               	movf	___ftmul@f3_as_product,w
  8376  07B8  00A0               	movwf	___ftpack@arg
  8377  07B9  083A               	movf	___ftmul@f3_as_product+1,w
  8378  07BA  00A1               	movwf	___ftpack@arg+1
  8379  07BB  083B               	movf	___ftmul@f3_as_product+2,w
  8380  07BC  00A2               	movwf	___ftpack@arg+2
  8381  07BD  0838               	movf	___ftmul@exp,w
  8382  07BE  00B4               	movwf	??___ftmul
  8383  07BF  0834               	movf	??___ftmul,w
  8384  07C0  00A3               	movwf	___ftpack@exp
  8385  07C1  083D               	movf	___ftmul@sign,w
  8386  07C2  00B5               	movwf	??___ftmul+1
  8387  07C3  0835               	movf	??___ftmul+1,w
  8388  07C4  00A4               	movwf	___ftpack@sign
  8389  07C5  3189  2127         	fcall	___ftpack
  8390  07C7  0020               	movlb	0	; select bank0
  8391  07C8  0820               	movf	?___ftpack,w
  8392  07C9  00AE               	movwf	?___ftmul
  8393  07CA  0821               	movf	?___ftpack+1,w
  8394  07CB  00AF               	movwf	?___ftmul+1
  8395  07CC  0822               	movf	?___ftpack+2,w
  8396  07CD  00B0               	movwf	?___ftmul+2
  8397  07CE  0008               	return
  8398  07CF                     __end_of___ftmul:	
  8399                           
  8400                           	psect	text34
  8401  1CD5                     __ptext34:	
  8402 ;; *************** function _setMemory_Modify *****************
  8403 ;; Defined at:
  8404 ;;		line 1064 in file "../src/MCU_B1.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  command         1    wreg     unsigned char 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  command         1    1[BANK0 ] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;		None               void
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        2 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    5
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_setLog_Code
  8429 ;;		_setRFSW_AdjControl
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _setMemory_Modify
  8435  1CD5                     _setMemory_Modify:	
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8439                           ;setMemory_Modify@command stored from wreg
  8440  1CD5  0020               	movlb	0	; select bank0
  8441  1CD6  00A1               	movwf	setMemory_Modify@command
  8442                           
  8443                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8444  1CD7  0821               	movf	setMemory_Modify@command,w
  8445  1CD8  3A01               	xorlw	1
  8446  1CD9  3000               	movlw	0
  8447  1CDA  1903               	skipnz
  8448  1CDB  3001               	movlw	1
  8449  1CDC  00A0               	movwf	??_setMemory_Modify
  8450  1CDD  0024               	movlb	4	; select bank4
  8451  1CDE  0844               	movf	(_Memory^(0+512)+36),w
  8452  1CDF  0020               	movlb	0	; select bank0
  8453  1CE0  0620               	xorwf	??_setMemory_Modify,w
  8454  1CE1  39FE               	andlw	-2
  8455  1CE2  0620               	xorwf	??_setMemory_Modify,w
  8456  1CE3  0024               	movlb	4	; select bank4
  8457  1CE4  00C4               	movwf	(_Memory^(0+512)+36)
  8458                           
  8459                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8460  1CE5  01C2               	clrf	(_Memory^(0+512)+34)
  8461  1CE6  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8462  1CE7  0008               	return
  8463  1CE8                     __end_of_setMemory_Modify:	
  8464                           
  8465                           	psect	text35
  8466  1C44                     __ptext35:	
  8467 ;; *************** function _getRF_KeyStatus *****************
  8468 ;; Defined at:
  8469 ;;		line 148 in file "../src/RF_Control_B1.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;		None
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  key             1    1[BANK0 ] unsigned char 
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  1    wreg      unsigned char 
  8476 ;; Registers used:
  8477 ;;		wreg, status,2
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;Total ram usage:        3 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    5
  8490 ;; This function calls:
  8491 ;;		Nothing
  8492 ;; This function is called by:
  8493 ;;		_setRF_Main
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           
  8498                           ;psect for function _getRF_KeyStatus
  8499  1C44                     _getRF_KeyStatus:	
  8500                           
  8501                           ;RF_Control_B1.c: 149: char key = 0;
  8502                           
  8503                           ;incstack = 0
  8504                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8505  1C44  0020               	movlb	0	; select bank0
  8506  1C45  01A1               	clrf	getRF_KeyStatus@key
  8507                           
  8508                           ;RF_Control_B1.c: 155: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8509  1C46  01A2               	clrf	_getRF_KeyStatus$5260
  8510  1C47  0AA2               	incf	_getRF_KeyStatus$5260,f
  8511  1C48  1F0C               	btfss	12,6	;volatile
  8512  1C49  1A0C               	btfsc	12,4	;volatile
  8513  1C4A  2C4F               	goto	l9748
  8514  1C4B  1C0C               	btfss	12,0	;volatile
  8515  1C4C  188D               	btfsc	13,1	;volatile
  8516  1C4D  2C4F               	goto	l9748
  8517  1C4E  01A2               	clrf	_getRF_KeyStatus$5260
  8518  1C4F                     l9748:	
  8519  1C4F  0822               	movf	_getRF_KeyStatus$5260,w
  8520  1C50  00A0               	movwf	??_getRF_KeyStatus
  8521  1C51  0820               	movf	??_getRF_KeyStatus,w
  8522  1C52  00A1               	movwf	getRF_KeyStatus@key
  8523                           
  8524                           ;RF_Control_B1.c: 161: return key;
  8525  1C53  0821               	movf	getRF_KeyStatus@key,w
  8526  1C54  0008               	return
  8527  1C55                     __end_of_getRF_KeyStatus:	
  8528                           
  8529                           	psect	text36
  8530  1C33                     __ptext36:	
  8531 ;; *************** function _getBuz_GO *****************
  8532 ;; Defined at:
  8533 ;;		line 82 in file "../src/Buzzer_B1.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  i               2    4[BANK0 ] int 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  2    0[BANK0 ] int 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;Total ram usage:        6 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    5
  8554 ;; This function calls:
  8555 ;;		Nothing
  8556 ;; This function is called by:
  8557 ;;		_setRF_Main
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           
  8562                           ;psect for function _getBuz_GO
  8563  1C33                     _getBuz_GO:	
  8564                           
  8565                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8566                           
  8567                           ;incstack = 0
  8568                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8569  1C33  0021               	movlb	1	; select bank1
  8570  1C34  0C2E               	rrf	_Buz1^(0+128),w
  8571  1C35  3901               	andlw	1
  8572  1C36  0020               	movlb	0	; select bank0
  8573  1C37  00A2               	movwf	??_getBuz_GO
  8574  1C38  01A3               	clrf	??_getBuz_GO+1
  8575  1C39  0822               	movf	??_getBuz_GO,w
  8576  1C3A  00A4               	movwf	getBuz_GO@i
  8577  1C3B  0823               	movf	??_getBuz_GO+1,w
  8578  1C3C  00A5               	movwf	getBuz_GO@i+1
  8579                           
  8580                           ;Buzzer_B1.c: 84: return i;
  8581  1C3D  0825               	movf	getBuz_GO@i+1,w
  8582  1C3E  01A1               	clrf	?_getBuz_GO+1
  8583  1C3F  07A1               	addwf	?_getBuz_GO+1,f
  8584  1C40  0824               	movf	getBuz_GO@i,w
  8585  1C41  01A0               	clrf	?_getBuz_GO
  8586  1C42  07A0               	addwf	?_getBuz_GO,f
  8587  1C43  0008               	return
  8588  1C44                     __end_of_getBuz_GO:	
  8589                           
  8590                           	psect	text37
  8591  1BF4                     __ptext37:	
  8592 ;; *************** function _RF_RxDisable *****************
  8593 ;; Defined at:
  8594 ;;		line 223 in file "../src/RF_Control_B1.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;		None
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;		None
  8599 ;; Return value:  Size  Location     Type
  8600 ;;		None               void
  8601 ;; Registers used:
  8602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        0 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    7
  8615 ;; This function calls:
  8616 ;;		_CC2500_WriteCommand
  8617 ;; This function is called by:
  8618 ;;		_setRF_Main
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _RF_RxDisable
  8624  1BF4                     _RF_RxDisable:	
  8625                           
  8626                           ;RF_Control_B1.c: 224: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8630  1BF4  0021               	movlb	1	; select bank1
  8631  1BF5  18BA               	btfsc	_RF1^(0+128),1
  8632  1BF6  2BF9               	goto	l2290
  8633  1BF7  1DBA               	btfss	_RF1^(0+128),3
  8634  1BF8  0008               	return
  8635  1BF9                     l2290:	
  8636                           
  8637                           ;RF_Control_B1.c: 225: RF1.RxStatus = 0;
  8638  1BF9  11BA               	bcf	_RF1^(0+128),3
  8639                           
  8640                           ;RF_Control_B1.c: 226: RF1.ReceiveGO = 0;
  8641  1BFA  10BA               	bcf	_RF1^(0+128),1
  8642                           
  8643                           ;RF_Control_B1.c: 227: CC2500_WriteCommand(0x36);
  8644  1BFB  3036               	movlw	54
  8645  1BFC  319D  25FD  319B   	fcall	_CC2500_WriteCommand
  8646                           
  8647                           ;RF_Control_B1.c: 229: CC2500_WriteCommand(0x3A);
  8648  1BFF  303A               	movlw	58
  8649  1C00  319D  25FD         	fcall	_CC2500_WriteCommand
  8650  1C02  0008               	return
  8651  1C03                     __end_of_RF_RxDisable:	
  8652                           
  8653                           	psect	text38
  8654  09EA                     __ptext38:	
  8655 ;; *************** function _CC2500_TxData *****************
  8656 ;; Defined at:
  8657 ;;		line 32 in file "../src/CC2500_B1.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;		None
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;		None               void
  8664 ;; Registers used:
  8665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;Total ram usage:        2 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    7
  8678 ;; This function calls:
  8679 ;;		_CC2500_WriteByte
  8680 ;;		_CC2500_WriteCommand
  8681 ;;		_Timeout_Counter
  8682 ;;		_set_TimeoutCleared
  8683 ;; This function is called by:
  8684 ;;		_setRF_Main
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _CC2500_TxData
  8690  09EA                     _CC2500_TxData:	
  8691                           
  8692                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8693                           ;CC2500_B1.c: 35: RC4 = 0;
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8697  09EA  0020               	movlb	0	; select bank0
  8698  09EB  120E               	bcf	14,4	;volatile
  8699                           
  8700                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8701  09EC  307F               	movlw	127
  8702  09ED  00A4               	movwf	??_CC2500_TxData
  8703  09EE  0824               	movf	??_CC2500_TxData,w
  8704  09EF  0021               	movlb	1	; select bank1
  8705  09F0  00D0               	movwf	_SPI0Buffer^(0+128)
  8706                           
  8707                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8708  09F1  29F5               	goto	l9466
  8709  09F2                     l9464:	
  8710                           
  8711                           ;CC2500_B1.c: 38: Timeout_Counter();
  8712  09F2  319D  2574  3189   	fcall	_Timeout_Counter
  8713  09F5                     l9466:	
  8714  09F5  0020               	movlb	0	; select bank0
  8715  09F6  1D0E               	btfss	14,2	;volatile
  8716  09F7  29FB               	goto	l9470
  8717  09F8  0021               	movlb	1	; select bank1
  8718  09F9  1D2B               	btfss	(_myMain^(0+128)+11),2
  8719  09FA  29F2               	goto	l9464
  8720  09FB                     l9470:	
  8721                           
  8722                           ;CC2500_B1.c: 39: };
  8723                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8724  09FB  319A  22EC  3189   	fcall	_set_TimeoutCleared
  8725                           
  8726                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8727  09FE  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8728                           
  8729                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8730  0A01  0021               	movlb	1	; select bank1
  8731  0A02  0852               	movf	_Tx_Length^(0+128),w
  8732  0A03  0020               	movlb	0	; select bank0
  8733  0A04  00A4               	movwf	??_CC2500_TxData
  8734  0A05  0824               	movf	??_CC2500_TxData,w
  8735  0A06  0021               	movlb	1	; select bank1
  8736  0A07  00D0               	movwf	_SPI0Buffer^(0+128)
  8737                           
  8738                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8739  0A08  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8740                           
  8741                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8742  0A0B  0020               	movlb	0	; select bank0
  8743  0A0C  01A5               	clrf	CC2500_TxData@loop_e
  8744  0A0D                     l9484:	
  8745  0A0D  0021               	movlb	1	; select bank1
  8746  0A0E  0852               	movf	_Tx_Length^(0+128),w
  8747  0A0F  0020               	movlb	0	; select bank0
  8748  0A10  0225               	subwf	CC2500_TxData@loop_e,w
  8749  0A11  1803               	btfsc	3,0
  8750  0A12  2A26               	goto	l255
  8751                           
  8752                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8753  0A13  0825               	movf	CC2500_TxData@loop_e,w
  8754  0A14  3EA0               	addlw	_RF_Data& (0+255)
  8755  0A15  0086               	movwf	6
  8756  0A16  3001               	movlw	1	; select bank3/4
  8757  0A17  0087               	movwf	7
  8758  0A18  0801               	movf	1,w
  8759  0A19  00A4               	movwf	??_CC2500_TxData
  8760  0A1A  0824               	movf	??_CC2500_TxData,w
  8761  0A1B  0021               	movlb	1	; select bank1
  8762  0A1C  00D0               	movwf	_SPI0Buffer^(0+128)
  8763                           
  8764                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8765  0A1D  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8766  0A20  3001               	movlw	1
  8767  0A21  0020               	movlb	0	; select bank0
  8768  0A22  00A4               	movwf	??_CC2500_TxData
  8769  0A23  0824               	movf	??_CC2500_TxData,w
  8770  0A24  07A5               	addwf	CC2500_TxData@loop_e,f
  8771  0A25  2A0D               	goto	l9484
  8772  0A26                     l255:	
  8773                           
  8774                           ;CC2500_B1.c: 48: }
  8775                           ;CC2500_B1.c: 49: RC4 = 1;
  8776  0A26  160E               	bsf	14,4	;volatile
  8777                           
  8778                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8779  0A27  3035               	movlw	53
  8780  0A28  319D  25FD  3189   	fcall	_CC2500_WriteCommand
  8781                           
  8782                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8783  0A2B  2A2F               	goto	l9490
  8784  0A2C                     l9488:	
  8785                           
  8786                           ;CC2500_B1.c: 52: Timeout_Counter();
  8787  0A2C  319D  2574  3189   	fcall	_Timeout_Counter
  8788  0A2F                     l9490:	
  8789  0A2F  0020               	movlb	0	; select bank0
  8790  0A30  180D               	btfsc	13,0	;volatile
  8791  0A31  2A35               	goto	l9494
  8792  0A32  0021               	movlb	1	; select bank1
  8793  0A33  1D2B               	btfss	(_myMain^(0+128)+11),2
  8794  0A34  2A2C               	goto	l9488
  8795  0A35                     l9494:	
  8796                           
  8797                           ;CC2500_B1.c: 53: };
  8798                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8799  0A35  319A  22EC  3189   	fcall	_set_TimeoutCleared
  8800                           
  8801                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8802  0A38  2A3C               	goto	l9498
  8803  0A39                     l9496:	
  8804                           
  8805                           ;CC2500_B1.c: 57: Timeout_Counter();
  8806  0A39  319D  2574  3189   	fcall	_Timeout_Counter
  8807  0A3C                     l9498:	
  8808  0A3C  0020               	movlb	0	; select bank0
  8809  0A3D  1C0D               	btfss	13,0	;volatile
  8810  0A3E  2A42               	goto	l9502
  8811  0A3F  0021               	movlb	1	; select bank1
  8812  0A40  1D2B               	btfss	(_myMain^(0+128)+11),2
  8813  0A41  2A39               	goto	l9496
  8814  0A42                     l9502:	
  8815                           
  8816                           ;CC2500_B1.c: 58: };
  8817                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8818  0A42  319A  22EC  3189   	fcall	_set_TimeoutCleared
  8819                           
  8820                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8821  0A45  3036               	movlw	54
  8822  0A46  319D  25FD  3189   	fcall	_CC2500_WriteCommand
  8823                           
  8824                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8825  0A49  303B               	movlw	59
  8826  0A4A  319D  25FD         	fcall	_CC2500_WriteCommand
  8827                           
  8828                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8829  0A4C  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8830  0A4D  0008               	return
  8831  0A4E                     __end_of_CC2500_TxData:	
  8832                           
  8833                           	psect	text39
  8834  0B7F                     __ptext39:	
  8835 ;; *************** function _CC2500_RxData *****************
  8836 ;; Defined at:
  8837 ;;		line 70 in file "../src/CC2500_B1.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;		None
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8842 ;; Return value:  Size  Location     Type
  8843 ;;		None               void
  8844 ;; Registers used:
  8845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;Total ram usage:        2 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    7
  8858 ;; This function calls:
  8859 ;;		_CC2500_ReadByte
  8860 ;;		_CC2500_ReadStatus
  8861 ;;		_CC2500_WriteByte
  8862 ;;		_Timeout_Counter
  8863 ;;		_set_TimeoutCleared
  8864 ;; This function is called by:
  8865 ;;		_setRF_Main
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function _CC2500_RxData
  8871  0B7F                     _CC2500_RxData:	
  8872                           
  8873                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8874                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8875                           
  8876                           ;incstack = 0
  8877                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8878  0B7F  0020               	movlb	0	; select bank0
  8879  0B80  180D               	btfsc	13,0	;volatile
  8880  0B81  2B86               	goto	l9516
  8881  0B82  2B8F               	goto	l9522
  8882  0B83                     l9514:	
  8883                           ;CC2500_B1.c: 76: {
  8884                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8885                           
  8886                           
  8887                           ;CC2500_B1.c: 78: Timeout_Counter();
  8888  0B83  319D  2574  318B   	fcall	_Timeout_Counter
  8889  0B86                     l9516:	
  8890  0B86  0020               	movlb	0	; select bank0
  8891  0B87  1C0D               	btfss	13,0	;volatile
  8892  0B88  2B8C               	goto	l9520
  8893  0B89  0021               	movlb	1	; select bank1
  8894  0B8A  1D2B               	btfss	(_myMain^(0+128)+11),2
  8895  0B8B  2B83               	goto	l9514
  8896  0B8C                     l9520:	
  8897                           
  8898                           ;CC2500_B1.c: 79: };
  8899                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8900  0B8C  319A  22EC  318B   	fcall	_set_TimeoutCleared
  8901  0B8F                     l9522:	
  8902                           
  8903                           ;CC2500_B1.c: 81: }
  8904                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8905  0B8F  303B               	movlw	59
  8906  0B90  319F  278C  318B   	fcall	_CC2500_ReadStatus
  8907                           
  8908                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8909  0B93  0021               	movlb	1	; select bank1
  8910  0B94  0855               	movf	_s_data^(0+128),w
  8911  0B95  1903               	btfsc	3,2
  8912  0B96  0008               	return
  8913                           
  8914                           ;CC2500_B1.c: 86: RC4 = 0;
  8915  0B97  0020               	movlb	0	; select bank0
  8916  0B98  120E               	bcf	14,4	;volatile
  8917                           
  8918                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8919  0B99  30FF               	movlw	255
  8920  0B9A  00A4               	movwf	??_CC2500_RxData
  8921  0B9B  0824               	movf	??_CC2500_RxData,w
  8922  0B9C  0021               	movlb	1	; select bank1
  8923  0B9D  00D0               	movwf	_SPI0Buffer^(0+128)
  8924                           
  8925                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8926  0B9E  2BA2               	goto	l9532
  8927  0B9F                     l9530:	
  8928                           
  8929                           ;CC2500_B1.c: 89: Timeout_Counter();
  8930  0B9F  319D  2574  318B   	fcall	_Timeout_Counter
  8931  0BA2                     l9532:	
  8932  0BA2  0020               	movlb	0	; select bank0
  8933  0BA3  1D0E               	btfss	14,2	;volatile
  8934  0BA4  2BA8               	goto	l9536
  8935  0BA5  0021               	movlb	1	; select bank1
  8936  0BA6  1D2B               	btfss	(_myMain^(0+128)+11),2
  8937  0BA7  2B9F               	goto	l9530
  8938  0BA8                     l9536:	
  8939                           
  8940                           ;CC2500_B1.c: 90: };
  8941                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8942  0BA8  319A  22EC  318B   	fcall	_set_TimeoutCleared
  8943                           
  8944                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8945  0BAB  319D  25CB  318B   	fcall	_CC2500_WriteByte
  8946                           
  8947                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8948  0BAE  319E  264D  318B   	fcall	_CC2500_ReadByte
  8949                           
  8950                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8951  0BB1  0021               	movlb	1	; select bank1
  8952  0BB2  0850               	movf	_SPI0Buffer^(0+128),w
  8953  0BB3  0020               	movlb	0	; select bank0
  8954  0BB4  00A4               	movwf	??_CC2500_RxData
  8955  0BB5  0824               	movf	??_CC2500_RxData,w
  8956  0BB6  0021               	movlb	1	; select bank1
  8957  0BB7  00CF               	movwf	_Rx_Length^(0+128)
  8958                           
  8959                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8960  0BB8  0020               	movlb	0	; select bank0
  8961  0BB9  01A5               	clrf	CC2500_RxData@loop_f
  8962  0BBA                     l9552:	
  8963  0BBA  0021               	movlb	1	; select bank1
  8964  0BBB  084F               	movf	_Rx_Length^(0+128),w
  8965  0BBC  0020               	movlb	0	; select bank0
  8966  0BBD  0225               	subwf	CC2500_RxData@loop_f,w
  8967  0BBE  1803               	btfsc	3,0
  8968  0BBF  2BD3               	goto	l9554
  8969                           
  8970                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8971  0BC0  319E  264D  318B   	fcall	_CC2500_ReadByte
  8972                           
  8973                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8974  0BC3  0021               	movlb	1	; select bank1
  8975  0BC4  0850               	movf	_SPI0Buffer^(0+128),w
  8976  0BC5  0020               	movlb	0	; select bank0
  8977  0BC6  00A4               	movwf	??_CC2500_RxData
  8978  0BC7  0825               	movf	CC2500_RxData@loop_f,w
  8979  0BC8  3EA0               	addlw	_RF_Data& (0+255)
  8980  0BC9  0086               	movwf	6
  8981  0BCA  3001               	movlw	1	; select bank3/4
  8982  0BCB  0087               	movwf	7
  8983  0BCC  0824               	movf	??_CC2500_RxData,w
  8984  0BCD  0081               	movwf	1
  8985  0BCE  3001               	movlw	1
  8986  0BCF  00A4               	movwf	??_CC2500_RxData
  8987  0BD0  0824               	movf	??_CC2500_RxData,w
  8988  0BD1  07A5               	addwf	CC2500_RxData@loop_f,f
  8989  0BD2  2BBA               	goto	l9552
  8990  0BD3                     l9554:	
  8991                           
  8992                           ;CC2500_B1.c: 99: }
  8993                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8994  0BD3  319E  264D  318B   	fcall	_CC2500_ReadByte
  8995                           
  8996                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8997  0BD6  0021               	movlb	1	; select bank1
  8998  0BD7  0850               	movf	_SPI0Buffer^(0+128),w
  8999  0BD8  0020               	movlb	0	; select bank0
  9000  0BD9  00A4               	movwf	??_CC2500_RxData
  9001  0BDA  0824               	movf	??_CC2500_RxData,w
  9002  0BDB  0021               	movlb	1	; select bank1
  9003  0BDC  00CE               	movwf	_RSSI^(0+128)
  9004                           
  9005                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9006  0BDD  319E  264D         	fcall	_CC2500_ReadByte
  9007                           
  9008                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9009  0BDF  0021               	movlb	1	; select bank1
  9010  0BE0  0850               	movf	_SPI0Buffer^(0+128),w
  9011  0BE1  0020               	movlb	0	; select bank0
  9012  0BE2  00A4               	movwf	??_CC2500_RxData
  9013  0BE3  0824               	movf	??_CC2500_RxData,w
  9014  0BE4  0021               	movlb	1	; select bank1
  9015  0BE5  00C9               	movwf	_CRC^(0+128)
  9016                           
  9017                           ;CC2500_B1.c: 104: RC4 = 1;
  9018  0BE6  0020               	movlb	0	; select bank0
  9019  0BE7  160E               	bsf	14,4	;volatile
  9020                           
  9021                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9022  0BE8  0021               	movlb	1	; select bank1
  9023  0BE9  1BC9               	btfsc	_CRC^(0+128),7
  9024                           
  9025                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9026  0BEA  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9027                           
  9028                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9029  0BEB  11BA               	bcf	_RF1^(0+128),3
  9030                           
  9031                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9032  0BEC  14BA               	bsf	_RF1^(0+128),1
  9033  0BED  0008               	return
  9034  0BEE                     __end_of_CC2500_RxData:	
  9035                           
  9036                           	psect	text40
  9037  1F8C                     __ptext40:	
  9038 ;; *************** function _CC2500_ReadStatus *****************
  9039 ;; Defined at:
  9040 ;;		line 301 in file "../src/CC2500_B1.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  status_addr     1    wreg     unsigned char 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;		None               void
  9047 ;; Registers used:
  9048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:        2 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    6
  9061 ;; This function calls:
  9062 ;;		_CC2500_ReadByte
  9063 ;;		_CC2500_WriteByte
  9064 ;;		_Timeout_Counter
  9065 ;;		_set_TimeoutCleared
  9066 ;; This function is called by:
  9067 ;;		_CC2500_RxData
  9068 ;; This function uses a non-reentrant model
  9069 ;;
  9070                           
  9071                           
  9072                           ;psect for function _CC2500_ReadStatus
  9073  1F8C                     _CC2500_ReadStatus:	
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9077                           ;CC2500_ReadStatus@status_addr stored from wreg
  9078  1F8C  0020               	movlb	0	; select bank0
  9079  1F8D  00A3               	movwf	CC2500_ReadStatus@status_addr
  9080                           
  9081                           ;CC2500_B1.c: 302: RC4 = 0;
  9082  1F8E  120E               	bcf	14,4	;volatile
  9083                           
  9084                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9085  1F8F  0823               	movf	CC2500_ReadStatus@status_addr,w
  9086  1F90  3EC0               	addlw	192
  9087  1F91  00A2               	movwf	??_CC2500_ReadStatus
  9088  1F92  0822               	movf	??_CC2500_ReadStatus,w
  9089  1F93  0021               	movlb	1	; select bank1
  9090  1F94  00D0               	movwf	_SPI0Buffer^(0+128)
  9091                           
  9092                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9093  1F95  2F99               	goto	l9274
  9094  1F96                     l9272:	
  9095                           
  9096                           ;CC2500_B1.c: 306: Timeout_Counter();
  9097  1F96  319D  2574  319F   	fcall	_Timeout_Counter
  9098  1F99                     l9274:	
  9099  1F99  0020               	movlb	0	; select bank0
  9100  1F9A  1D0E               	btfss	14,2	;volatile
  9101  1F9B  2F9F               	goto	l9278
  9102  1F9C  0021               	movlb	1	; select bank1
  9103  1F9D  1D2B               	btfss	(_myMain^(0+128)+11),2
  9104  1F9E  2F96               	goto	l9272
  9105  1F9F                     l9278:	
  9106                           
  9107                           ;CC2500_B1.c: 307: };
  9108                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9109  1F9F  319A  22EC  319F   	fcall	_set_TimeoutCleared
  9110                           
  9111                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9112  1FA2  319D  25CB  319F   	fcall	_CC2500_WriteByte
  9113                           
  9114                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9115  1FA5  319E  264D         	fcall	_CC2500_ReadByte
  9116                           
  9117                           ;CC2500_B1.c: 312: RC4 = 1;
  9118  1FA7  0020               	movlb	0	; select bank0
  9119  1FA8  160E               	bsf	14,4	;volatile
  9120                           
  9121                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9122  1FA9  0021               	movlb	1	; select bank1
  9123  1FAA  0850               	movf	_SPI0Buffer^(0+128),w
  9124  1FAB  0020               	movlb	0	; select bank0
  9125  1FAC  00A2               	movwf	??_CC2500_ReadStatus
  9126  1FAD  0822               	movf	??_CC2500_ReadStatus,w
  9127  1FAE  0021               	movlb	1	; select bank1
  9128  1FAF  00D5               	movwf	_s_data^(0+128)
  9129  1FB0  0008               	return
  9130  1FB1                     __end_of_CC2500_ReadStatus:	
  9131                           
  9132                           	psect	text41
  9133  1E4D                     __ptext41:	
  9134 ;; *************** function _CC2500_ReadByte *****************
  9135 ;; Defined at:
  9136 ;;		line 235 in file "../src/CC2500_B1.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9141 ;; Return value:  Size  Location     Type
  9142 ;;		None               void
  9143 ;; Registers used:
  9144 ;;		wreg, status,2, status,0
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;Total ram usage:        2 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    5
  9157 ;; This function calls:
  9158 ;;		Nothing
  9159 ;; This function is called by:
  9160 ;;		_CC2500_RxData
  9161 ;;		_CC2500_ReadStatus
  9162 ;;		_CC2500_ReadREG
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _CC2500_ReadByte
  9168  1E4D                     _CC2500_ReadByte:	
  9169                           
  9170                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9171                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9172                           
  9173                           ;incstack = 0
  9174                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9175  1E4D  0020               	movlb	0	; select bank0
  9176  1E4E  01A1               	clrf	CC2500_ReadByte@loop_b
  9177  1E4F                     L4:	
  9178  1E4F  3008               	movlw	8
  9179  1E50  0221               	subwf	CC2500_ReadByte@loop_b,w
  9180  1E51  1803               	btfsc	3,0
  9181  1E52  0008               	return
  9182                           
  9183                           ;CC2500_B1.c: 238: RC1 = 1;
  9184  1E53  148E               	bsf	14,1	;volatile
  9185                           
  9186                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9187  1E54  1003               	clrc
  9188  1E55  0021               	movlb	1	; select bank1
  9189  1E56  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9190                           
  9191                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9192  1E57  0020               	movlb	0	; select bank0
  9193  1E58  1D0E               	btfss	14,2	;volatile
  9194  1E59  2E5D               	goto	l9170
  9195                           
  9196                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9197  1E5A  0021               	movlb	1	; select bank1
  9198  1E5B  1450               	bsf	_SPI0Buffer^(0+128),0
  9199  1E5C  2E63               	goto	l9172
  9200  1E5D                     l9170:	
  9201                           
  9202                           ;CC2500_B1.c: 242: else
  9203                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9204  1E5D  30FE               	movlw	254
  9205  1E5E  0020               	movlb	0	; select bank0
  9206  1E5F  00A0               	movwf	??_CC2500_ReadByte
  9207  1E60  0820               	movf	??_CC2500_ReadByte,w
  9208  1E61  0021               	movlb	1	; select bank1
  9209  1E62  05D0               	andwf	_SPI0Buffer^(0+128),f
  9210  1E63                     l9172:	
  9211                           
  9212                           ;CC2500_B1.c: 244: RC1 = 0;
  9213  1E63  0020               	movlb	0	; select bank0
  9214  1E64  108E               	bcf	14,1	;volatile
  9215  1E65  3001               	movlw	1
  9216  1E66  00A0               	movwf	??_CC2500_ReadByte
  9217  1E67  0820               	movf	??_CC2500_ReadByte,w
  9218  1E68  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9219  1E69  2E4F               	goto	L4
  9220  1E6A                     __end_of_CC2500_ReadByte:	
  9221                           
  9222                           	psect	text42
  9223  1AD0                     __ptext42:	
  9224 ;; *************** function _RF_Initialization *****************
  9225 ;; Defined at:
  9226 ;;		line 9 in file "../src/RF_Control_B1.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;		None
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;		None               void
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0, pclath, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;Total ram usage:        0 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    6
  9247 ;; This function calls:
  9248 ;;		_setRF_Initialization
  9249 ;; This function is called by:
  9250 ;;		_main
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           
  9255                           ;psect for function _RF_Initialization
  9256  1AD0                     _RF_Initialization:	
  9257                           
  9258                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9262  1AD0  319B  2354         	fcall	_setRF_Initialization
  9263  1AD2  0008               	return
  9264  1AD3                     __end_of_RF_Initialization:	
  9265                           
  9266                           	psect	text43
  9267  1B54                     __ptext43:	
  9268 ;; *************** function _setRF_Initialization *****************
  9269 ;; Defined at:
  9270 ;;		line 43 in file "../src/RF_Control_B1.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;		None
  9275 ;; Return value:  Size  Location     Type
  9276 ;;		None               void
  9277 ;; Registers used:
  9278 ;;		wreg
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;Total ram usage:        1 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    5
  9291 ;; This function calls:
  9292 ;;		Nothing
  9293 ;; This function is called by:
  9294 ;;		_RF_Initialization
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           
  9299                           ;psect for function _setRF_Initialization
  9300  1B54                     _setRF_Initialization:	
  9301                           
  9302                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9303                           
  9304                           ;incstack = 0
  9305                           ; Regs used in _setRF_Initialization: [wreg]
  9306  1B54  3015               	movlw	21
  9307  1B55  0020               	movlb	0	; select bank0
  9308  1B56  00A0               	movwf	??_setRF_Initialization
  9309  1B57  0820               	movf	??_setRF_Initialization,w
  9310  1B58  0021               	movlb	1	; select bank1
  9311  1B59  00D2               	movwf	_Tx_Length^(0+128)
  9312                           
  9313                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9314  1B5A  3005               	movlw	5
  9315  1B5B  00C1               	movwf	(_RF1^(0+128)+7)
  9316  1B5C  3000               	movlw	0
  9317  1B5D  00C2               	movwf	(_RF1^(0+128)+8)
  9318  1B5E  0008               	return
  9319  1B5F                     __end_of_setRF_Initialization:	
  9320                           
  9321                           	psect	text44
  9322  1C8B                     __ptext44:	
  9323 ;; *************** function _Mcu_Initialization *****************
  9324 ;; Defined at:
  9325 ;;		line 30 in file "../src/MCU_B1.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;		None               void
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    6
  9346 ;; This function calls:
  9347 ;;		_ADC_Set
  9348 ;;		_Fosc_Set
  9349 ;;		_IOC_Set
  9350 ;;		_IO_Set
  9351 ;;		_TMR1_Set
  9352 ;;		_WDT_Set
  9353 ;; This function is called by:
  9354 ;;		_main
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function _Mcu_Initialization
  9360  1C8B                     _Mcu_Initialization:	
  9361                           
  9362                           ;MCU_B1.c: 32: Fosc_Set();
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9366  1C8B  319A  22E8  319C   	fcall	_Fosc_Set
  9367                           
  9368                           ;MCU_B1.c: 34: IO_Set();
  9369  1C8E  319D  25E4  319C   	fcall	_IO_Set
  9370                           
  9371                           ;MCU_B1.c: 36: ;;
  9372                           ;MCU_B1.c: 38: TMR1_Set();
  9373  1C91  319B  23B2  319C   	fcall	_TMR1_Set
  9374                           
  9375                           ;MCU_B1.c: 40: ADC_Set();
  9376  1C94  319B  2303  319C   	fcall	_ADC_Set
  9377                           
  9378                           ;MCU_B1.c: 42: ;;
  9379                           ;MCU_B1.c: 44: ;;
  9380                           ;MCU_B1.c: 46: IOC_Set();
  9381  1C97  319B  23A6  319C   	fcall	_IOC_Set
  9382                           
  9383                           ;MCU_B1.c: 48: ;;
  9384                           ;MCU_B1.c: 50: ;;
  9385                           ;MCU_B1.c: 52: WDT_Set();
  9386  1C9A  319B  23BE         	fcall	_WDT_Set
  9387  1C9C  0008               	return
  9388  1C9D                     __end_of_Mcu_Initialization:	
  9389                           
  9390                           	psect	text45
  9391  1BBE                     __ptext45:	
  9392 ;; *************** function _WDT_Set *****************
  9393 ;; Defined at:
  9394 ;;		line 1083 in file "../src/MCU_B1.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;		None
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;		None
  9399 ;; Return value:  Size  Location     Type
  9400 ;;		None               void
  9401 ;; Registers used:
  9402 ;;		wreg
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;Total ram usage:        1 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    5
  9415 ;; This function calls:
  9416 ;;		Nothing
  9417 ;; This function is called by:
  9418 ;;		_Mcu_Initialization
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422                           
  9423                           ;psect for function _WDT_Set
  9424  1BBE                     _WDT_Set:	
  9425                           
  9426                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9427                           
  9428                           ;incstack = 0
  9429                           ; Regs used in _WDT_Set: [wreg]
  9430  1BBE  3017               	movlw	23
  9431  1BBF  0021               	movlb	1	; select bank1
  9432  1BC0  0097               	movwf	23	;volatile
  9433                           
  9434                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9435  1BC1  0022               	movlb	2	; select bank2
  9436  1BC2  1425               	bsf	_WDT^(0+256),0
  9437                           
  9438                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9439  1BC3  300A               	movlw	10
  9440  1BC4  0020               	movlb	0	; select bank0
  9441  1BC5  00A0               	movwf	??_WDT_Set
  9442  1BC6  0820               	movf	??_WDT_Set,w
  9443  1BC7  0022               	movlb	2	; select bank2
  9444  1BC8  00A6               	movwf	(_WDT^(0+256)+1)
  9445  1BC9  0008               	return
  9446  1BCA                     __end_of_WDT_Set:	
  9447                           
  9448                           	psect	text46
  9449  1BB2                     __ptext46:	
  9450 ;; *************** function _TMR1_Set *****************
  9451 ;; Defined at:
  9452 ;;		line 199 in file "../src/MCU_B1.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;		None
  9457 ;; Return value:  Size  Location     Type
  9458 ;;		None               void
  9459 ;; Registers used:
  9460 ;;		wreg
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;Total ram usage:        0 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    5
  9473 ;; This function calls:
  9474 ;;		Nothing
  9475 ;; This function is called by:
  9476 ;;		_Mcu_Initialization
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           
  9481                           ;psect for function _TMR1_Set
  9482  1BB2                     _TMR1_Set:	
  9483                           
  9484                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9485                           
  9486                           ;incstack = 0
  9487                           ; Regs used in _TMR1_Set: [wreg]
  9488  1BB2  3041               	movlw	65
  9489  1BB3  0020               	movlb	0	; select bank0
  9490  1BB4  0098               	movwf	24	;volatile
  9491                           
  9492                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9493  1BB5  30FA               	movlw	250
  9494  1BB6  0097               	movwf	23	;volatile
  9495                           
  9496                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9497  1BB7  3038               	movlw	56
  9498  1BB8  0096               	movwf	22	;volatile
  9499                           
  9500                           ;MCU_B1.c: 203: TMR1IE = 1;
  9501  1BB9  0021               	movlb	1	; select bank1
  9502  1BBA  1411               	bsf	17,0	;volatile
  9503                           
  9504                           ;MCU_B1.c: 204: PEIE = 1;
  9505  1BBB  170B               	bsf	11,6	;volatile
  9506                           
  9507                           ;MCU_B1.c: 205: GIE = 1;
  9508  1BBC  178B               	bsf	11,7	;volatile
  9509  1BBD  0008               	return
  9510  1BBE                     __end_of_TMR1_Set:	
  9511                           
  9512                           	psect	text47
  9513  1DE4                     __ptext47:	
  9514 ;; *************** function _IO_Set *****************
  9515 ;; Defined at:
  9516 ;;		line 60 in file "../src/MCU_B1.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;		None
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;		None               void
  9523 ;; Registers used:
  9524 ;;		wreg, status,2
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;Total ram usage:        0 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    5
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_Mcu_Initialization
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           
  9545                           ;psect for function _IO_Set
  9546  1DE4                     _IO_Set:	
  9547                           
  9548                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9549                           
  9550                           ;incstack = 0
  9551                           ; Regs used in _IO_Set: [wreg+status,2]
  9552  1DE4  3077               	movlw	119
  9553  1DE5  0021               	movlb	1	; select bank1
  9554  1DE6  008C               	movwf	12	;volatile
  9555                           
  9556                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9557  1DE7  3007               	movlw	7
  9558  1DE8  008D               	movwf	13	;volatile
  9559                           
  9560                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9561  1DE9  300C               	movlw	12
  9562  1DEA  008E               	movwf	14	;volatile
  9563                           
  9564                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9565  1DEB  0022               	movlb	2	; select bank2
  9566  1DEC  018C               	clrf	12	;volatile
  9567                           
  9568                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9569  1DED  3002               	movlw	2
  9570  1DEE  008D               	movwf	13	;volatile
  9571                           
  9572                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9573  1DEF  018E               	clrf	14	;volatile
  9574                           
  9575                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9576  1DF0  3022               	movlw	34
  9577  1DF1  0023               	movlb	3	; select bank3
  9578  1DF2  008C               	movwf	12	;volatile
  9579                           
  9580                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9581  1DF3  018D               	clrf	13	;volatile
  9582                           
  9583                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9584  1DF4  018E               	clrf	14	;volatile
  9585                           
  9586                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9587  1DF5  3077               	movlw	119
  9588  1DF6  0020               	movlb	0	; select bank0
  9589  1DF7  008C               	movwf	12	;volatile
  9590                           
  9591                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9592  1DF8  3007               	movlw	7
  9593  1DF9  008D               	movwf	13	;volatile
  9594                           
  9595                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9596  1DFA  300C               	movlw	12
  9597  1DFB  008E               	movwf	14	;volatile
  9598  1DFC  0008               	return
  9599  1DFD                     __end_of_IO_Set:	
  9600                           
  9601                           	psect	text48
  9602  1BA6                     __ptext48:	
  9603 ;; *************** function _IOC_Set *****************
  9604 ;; Defined at:
  9605 ;;		line 365 in file "../src/MCU_B1.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;		None
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;		None
  9610 ;; Return value:  Size  Location     Type
  9611 ;;		None               void
  9612 ;; Registers used:
  9613 ;;		wreg, status,2
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;Total ram usage:        0 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; Hardware stack levels required when called:    5
  9626 ;; This function calls:
  9627 ;;		Nothing
  9628 ;; This function is called by:
  9629 ;;		_Mcu_Initialization
  9630 ;; This function uses a non-reentrant model
  9631 ;;
  9632                           
  9633                           
  9634                           ;psect for function _IOC_Set
  9635  1BA6                     _IOC_Set:	
  9636                           
  9637                           ;MCU_B1.c: 366: WPUB2 = 0;
  9638                           
  9639                           ;incstack = 0
  9640                           ; Regs used in _IOC_Set: [wreg+status,2]
  9641  1BA6  0024               	movlb	4	; select bank4
  9642  1BA7  110D               	bcf	13,2	;volatile
  9643                           
  9644                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9645  1BA8  0027               	movlb	7	; select bank7
  9646  1BA9  0194               	clrf	20	;volatile
  9647                           
  9648                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9649  1BAA  3004               	movlw	4
  9650  1BAB  0095               	movwf	21	;volatile
  9651                           
  9652                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9653  1BAC  0196               	clrf	22	;volatile
  9654                           
  9655                           ;MCU_B1.c: 393: IOCIE = 1;
  9656  1BAD  158B               	bsf	11,3	;volatile
  9657                           
  9658                           ;MCU_B1.c: 394: IOCIF = 0;
  9659  1BAE  100B               	bcf	11,0	;volatile
  9660                           
  9661                           ;MCU_B1.c: 395: PEIE = 1;
  9662  1BAF  170B               	bsf	11,6	;volatile
  9663                           
  9664                           ;MCU_B1.c: 396: GIE = 1;
  9665  1BB0  178B               	bsf	11,7	;volatile
  9666  1BB1  0008               	return
  9667  1BB2                     __end_of_IOC_Set:	
  9668                           
  9669                           	psect	text49
  9670  1AE8                     __ptext49:	
  9671 ;; *************** function _Fosc_Set *****************
  9672 ;; Defined at:
  9673 ;;		line 56 in file "../src/MCU_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        0 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    5
  9694 ;; This function calls:
  9695 ;;		Nothing
  9696 ;; This function is called by:
  9697 ;;		_Mcu_Initialization
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           
  9702                           ;psect for function _Fosc_Set
  9703  1AE8                     _Fosc_Set:	
  9704                           
  9705                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9706                           
  9707                           ;incstack = 0
  9708                           ; Regs used in _Fosc_Set: [wreg]
  9709  1AE8  3078               	movlw	120
  9710  1AE9  0021               	movlb	1	; select bank1
  9711  1AEA  0099               	movwf	25	;volatile
  9712  1AEB  0008               	return
  9713  1AEC                     __end_of_Fosc_Set:	
  9714                           
  9715                           	psect	text50
  9716  1B03                     __ptext50:	
  9717 ;; *************** function _ADC_Set *****************
  9718 ;; Defined at:
  9719 ;;		line 419 in file "../src/MCU_B1.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;		None
  9724 ;; Return value:  Size  Location     Type
  9725 ;;		None               void
  9726 ;; Registers used:
  9727 ;;		wreg
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        0 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    5
  9740 ;; This function calls:
  9741 ;;		Nothing
  9742 ;; This function is called by:
  9743 ;;		_Mcu_Initialization
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           
  9748                           ;psect for function _ADC_Set
  9749  1B03                     _ADC_Set:	
  9750                           
  9751                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9752                           
  9753                           ;incstack = 0
  9754                           ; Regs used in _ADC_Set: [wreg]
  9755  1B03  30F3               	movlw	243
  9756  1B04  0021               	movlb	1	; select bank1
  9757  1B05  009E               	movwf	30	;volatile
  9758                           
  9759                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9760  1B06  30C1               	movlw	193
  9761  1B07  0022               	movlb	2	; select bank2
  9762  1B08  0097               	movwf	23	;volatile
  9763  1B09  0008               	return
  9764  1B0A                     __end_of_ADC_Set:	
  9765                           
  9766                           	psect	text51
  9767  0049                     __ptext51:	
  9768 ;; *************** function _Load_Main *****************
  9769 ;; Defined at:
  9770 ;;		line 39 in file "../src/OverLoad_B1.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  i               2   12[BANK0 ] int 
  9775 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9776 ;;  error           1   10[BANK0 ] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;Total ram usage:        6 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    7
  9793 ;; This function calls:
  9794 ;;		___lwdiv
  9795 ;;		___wmul
  9796 ;;		_getAll_DimmerLights_AdjSw
  9797 ;;		_getDimmer_LoadGO
  9798 ;;		_getDimmer_Load_Status
  9799 ;;		_getMain_All_Error_Status
  9800 ;;		_getMain_LightsStatus
  9801 ;;		_getMain_Lights_Count
  9802 ;;		_setLoad_AH_AL_Restore
  9803 ;; This function is called by:
  9804 ;;		_main
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           
  9809                           ;psect for function _Load_Main
  9810  0049                     _Load_Main:	
  9811                           
  9812                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9813                           
  9814                           ;incstack = 0
  9815                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9816  0049  3000               	movlw	0
  9817  004A  3191  2168  3180   	fcall	_getMain_All_Error_Status
  9818  004D  0020               	movlb	0	; select bank0
  9819  004E  00A8               	movwf	??_Load_Main
  9820  004F  0828               	movf	??_Load_Main,w
  9821  0050  00AA               	movwf	Load_Main@error
  9822                           
  9823                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9824  0051  01AB               	clrf	Load_Main@Load_Status
  9825                           
  9826                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9827  0052  0022               	movlb	2	; select bank2
  9828  0053  1C27               	btfss	_Load^(0+256),0
  9829  0054  29EF               	goto	l1727
  9830                           
  9831                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9832  0055  319C  24C2  3180   	fcall	_getMain_LightsStatus
  9833  0058  3800               	iorlw	0
  9834  0059  1D03               	skipz
  9835  005A  285D               	goto	l10708
  9836                           
  9837                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9838  005B  0022               	movlb	2	; select bank2
  9839  005C  287E               	goto	l10726
  9840  005D                     l10708:	
  9841                           ;OverLoad_B1.c: 66: } else {
  9842                           
  9843                           
  9844                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9845  005D  0020               	movlb	0	; select bank0
  9846  005E  08AA               	movf	Load_Main@error,f
  9847  005F  1D03               	skipz
  9848  0060  287B               	goto	l1730
  9849  0061  3190  20DD  3180   	fcall	_getAll_DimmerLights_AdjSw
  9850  0064  3800               	iorlw	0
  9851  0065  1D03               	skipz
  9852  0066  287B               	goto	l1730
  9853                           
  9854                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9855  0067  0022               	movlb	2	; select bank2
  9856  0068  14A7               	bsf	_Load^(0+256),1
  9857                           
  9858                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9859  0069  319B  232A  3180   	fcall	_getDimmer_LoadGO
  9860  006C  3A01               	xorlw	1
  9861  006D  1D03               	skipz
  9862  006E  2876               	goto	l1731
  9863                           
  9864                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9865  006F  0022               	movlb	2	; select bank2
  9866  0070  1DA7               	btfss	_Load^(0+256),3
  9867  0071  1BA7               	btfsc	_Load^(0+256),7
  9868  0072  287F               	goto	l1729
  9869                           
  9870                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9871  0073  15A7               	bsf	_Load^(0+256),3
  9872                           
  9873                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9874  0074  01D0               	clrf	(_Load^(0+256)+41)
  9875                           
  9876                           ;OverLoad_B1.c: 76: }
  9877                           ;OverLoad_B1.c: 77: } else {
  9878  0075  287F               	goto	l1729
  9879  0076                     l1731:	
  9880                           
  9881                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9882  0076  0022               	movlb	2	; select bank2
  9883  0077  1FA7               	btfss	_Load^(0+256),7
  9884  0078  287F               	goto	l1729
  9885                           
  9886                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9887  0079  13A7               	bcf	_Load^(0+256),7
  9888                           
  9889                           ;OverLoad_B1.c: 80: }
  9890                           ;OverLoad_B1.c: 81: }
  9891                           ;OverLoad_B1.c: 82: } else {
  9892  007A  287F               	goto	l1729
  9893  007B                     l1730:	
  9894                           
  9895                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9896  007B  0022               	movlb	2	; select bank2
  9897  007C  1CA7               	btfss	_Load^(0+256),1
  9898  007D  287F               	goto	l1729
  9899  007E                     l10726:	
  9900                           
  9901                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9902  007E  10A7               	bcf	_Load^(0+256),1
  9903  007F                     l1729:	
  9904                           
  9905                           ;OverLoad_B1.c: 85: }
  9906                           ;OverLoad_B1.c: 86: }
  9907                           ;OverLoad_B1.c: 88: }
  9908                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9909  007F  1CA7               	btfss	_Load^(0+256),1
  9910  0080  29CB               	goto	l1737
  9911                           
  9912                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9913  0081  1527               	bsf	_Load^(0+256),2
  9914                           
  9915                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9916  0082  1E27               	btfss	_Load^(0+256),4
  9917  0083  29C9               	goto	l1738
  9918                           
  9919                           ;OverLoad_B1.c: 95: Load.Time++;
  9920  0084  3001               	movlw	1
  9921  0085  07A8               	addwf	(_Load^(0+256)+1),f
  9922  0086  3000               	movlw	0
  9923  0087  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9924                           
  9925                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9926  0088  3000               	movlw	0
  9927  0089  0229               	subwf	((_Load+1)^(0+256)+1),w
  9928  008A  3005               	movlw	5
  9929  008B  1903               	skipnz
  9930  008C  0228               	subwf	(_Load^(0+256)+1),w
  9931  008D  1C03               	skipc
  9932  008E  0008               	return
  9933                           
  9934                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9935  008F  01A8               	clrf	(_Load^(0+256)+1)
  9936  0090  01A9               	clrf	((_Load+1)^(0+256)+1)
  9937                           
  9938                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9939  0091  1227               	bcf	_Load^(0+256),4
  9940                           
  9941                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9942  0092  3001               	movlw	1
  9943  0093  0020               	movlb	0	; select bank0
  9944  0094  00AC               	movwf	Load_Main@i
  9945  0095  3000               	movlw	0
  9946  0096  00AD               	movwf	Load_Main@i+1
  9947  0097  082D               	movf	Load_Main@i+1,w
  9948  0098  3A80               	xorlw	128
  9949  0099  00A8               	movwf	??_Load_Main
  9950  009A  3080               	movlw	128
  9951  009B  0228               	subwf	??_Load_Main,w
  9952  009C  1D03               	skipz
  9953  009D  28A0               	goto	u12665
  9954  009E  3004               	movlw	4
  9955  009F  022C               	subwf	Load_Main@i,w
  9956  00A0                     u12665:	
  9957  00A0  1803               	btfsc	3,0
  9958  00A1  28D4               	goto	l10748
  9959  00A2                     l10742:	
  9960                           
  9961                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9962  00A2  0020               	movlb	0	; select bank0
  9963  00A3  352C               	lslf	Load_Main@i,w
  9964  00A4  3E32               	addlw	(_Load+11)& (0+255)
  9965  00A5  0086               	movwf	6
  9966  00A6  3001               	movlw	1	; select bank2/3
  9967  00A7  0087               	movwf	7
  9968  00A8  3F40               	moviw [0]fsr1
  9969  00A9  00A8               	movwf	??_Load_Main
  9970  00AA  3F41               	moviw [1]fsr1
  9971  00AB  00A9               	movwf	??_Load_Main+1
  9972  00AC  0828               	movf	??_Load_Main,w
  9973  00AD  0022               	movlb	2	; select bank2
  9974  00AE  07AC               	addwf	(_Load^(0+256)+5),f
  9975  00AF  0020               	movlb	0	; select bank0
  9976  00B0  0829               	movf	??_Load_Main+1,w
  9977  00B1  0022               	movlb	2	; select bank2
  9978  00B2  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
  9979                           
  9980                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9981  00B3  0020               	movlb	0	; select bank0
  9982  00B4  352C               	lslf	Load_Main@i,w
  9983  00B5  3E3C               	addlw	(_Load+21)& (0+255)
  9984  00B6  0086               	movwf	6
  9985  00B7  3001               	movlw	1	; select bank2/3
  9986  00B8  0087               	movwf	7
  9987  00B9  3F40               	moviw [0]fsr1
  9988  00BA  00A8               	movwf	??_Load_Main
  9989  00BB  3F41               	moviw [1]fsr1
  9990  00BC  00A9               	movwf	??_Load_Main+1
  9991  00BD  0828               	movf	??_Load_Main,w
  9992  00BE  0022               	movlb	2	; select bank2
  9993  00BF  07AE               	addwf	(_Load^(0+256)+7),f
  9994  00C0  0020               	movlb	0	; select bank0
  9995  00C1  0829               	movf	??_Load_Main+1,w
  9996  00C2  0022               	movlb	2	; select bank2
  9997  00C3  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
  9998  00C4  3001               	movlw	1
  9999  00C5  0020               	movlb	0	; select bank0
 10000  00C6  07AC               	addwf	Load_Main@i,f
 10001  00C7  3000               	movlw	0
 10002  00C8  3DAD               	addwfc	Load_Main@i+1,f
 10003  00C9  082D               	movf	Load_Main@i+1,w
 10004  00CA  3A80               	xorlw	128
 10005  00CB  00A8               	movwf	??_Load_Main
 10006  00CC  3080               	movlw	128
 10007  00CD  0228               	subwf	??_Load_Main,w
 10008  00CE  1D03               	skipz
 10009  00CF  28D2               	goto	u12675
 10010  00D0  3004               	movlw	4
 10011  00D1  022C               	subwf	Load_Main@i,w
 10012  00D2                     u12675:	
 10013  00D2  1C03               	skipc
 10014  00D3  28A2               	goto	l10742
 10015  00D4                     l10748:	
 10016                           
 10017                           ;OverLoad_B1.c: 103: }
 10018                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10019  00D4  3003               	movlw	3
 10020  00D5  0020               	movlb	0	; select bank0
 10021  00D6  00A0               	movwf	___lwdiv@divisor
 10022  00D7  3000               	movlw	0
 10023  00D8  00A1               	movwf	___lwdiv@divisor+1
 10024  00D9  0022               	movlb	2	; select bank2
 10025  00DA  082D               	movf	((_Load+1)^(0+256)+5),w
 10026  00DB  0020               	movlb	0	; select bank0
 10027  00DC  01A3               	clrf	___lwdiv@dividend+1
 10028  00DD  07A3               	addwf	___lwdiv@dividend+1,f
 10029  00DE  0022               	movlb	2	; select bank2
 10030  00DF  082C               	movf	(_Load^(0+256)+5),w
 10031  00E0  0020               	movlb	0	; select bank0
 10032  00E1  01A2               	clrf	___lwdiv@dividend
 10033  00E2  07A2               	addwf	___lwdiv@dividend,f
 10034  00E3  3192  223B  3180   	fcall	___lwdiv
 10035  00E6  0020               	movlb	0	; select bank0
 10036  00E7  0821               	movf	?___lwdiv+1,w
 10037  00E8  0022               	movlb	2	; select bank2
 10038  00E9  01AD               	clrf	((_Load+1)^(0+256)+5)
 10039  00EA  07AD               	addwf	((_Load+1)^(0+256)+5),f
 10040  00EB  0020               	movlb	0	; select bank0
 10041  00EC  0820               	movf	?___lwdiv,w
 10042  00ED  0022               	movlb	2	; select bank2
 10043  00EE  01AC               	clrf	(_Load^(0+256)+5)
 10044  00EF  07AC               	addwf	(_Load^(0+256)+5),f
 10045                           
 10046                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10047  00F0  3003               	movlw	3
 10048  00F1  0020               	movlb	0	; select bank0
 10049  00F2  00A0               	movwf	___lwdiv@divisor
 10050  00F3  3000               	movlw	0
 10051  00F4  00A1               	movwf	___lwdiv@divisor+1
 10052  00F5  0022               	movlb	2	; select bank2
 10053  00F6  082F               	movf	((_Load+1)^(0+256)+7),w
 10054  00F7  0020               	movlb	0	; select bank0
 10055  00F8  01A3               	clrf	___lwdiv@dividend+1
 10056  00F9  07A3               	addwf	___lwdiv@dividend+1,f
 10057  00FA  0022               	movlb	2	; select bank2
 10058  00FB  082E               	movf	(_Load^(0+256)+7),w
 10059  00FC  0020               	movlb	0	; select bank0
 10060  00FD  01A2               	clrf	___lwdiv@dividend
 10061  00FE  07A2               	addwf	___lwdiv@dividend,f
 10062  00FF  3192  223B  3180   	fcall	___lwdiv
 10063  0102  0020               	movlb	0	; select bank0
 10064  0103  0821               	movf	?___lwdiv+1,w
 10065  0104  0022               	movlb	2	; select bank2
 10066  0105  01AF               	clrf	((_Load+1)^(0+256)+7)
 10067  0106  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10068  0107  0020               	movlb	0	; select bank0
 10069  0108  0820               	movf	?___lwdiv,w
 10070  0109  0022               	movlb	2	; select bank2
 10071  010A  01AE               	clrf	(_Load^(0+256)+7)
 10072  010B  07AE               	addwf	(_Load^(0+256)+7),f
 10073                           
 10074                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10075  010C  319E  2631  3180   	fcall	_setLoad_AH_AL_Restore
 10076                           
 10077                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
 10078  010F  0022               	movlb	2	; select bank2
 10079  0110  082D               	movf	((_Load+1)^(0+256)+5),w
 10080  0111  022F               	subwf	((_Load+1)^(0+256)+7),w
 10081  0112  1D03               	skipz
 10082  0113  2916               	goto	u12685
 10083  0114  082C               	movf	(_Load^(0+256)+5),w
 10084  0115  022E               	subwf	(_Load^(0+256)+7),w
 10085  0116                     u12685:	
 10086  0116  1803               	skipnc
 10087  0117  0008               	return
 10088                           
 10089                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10090  0118  3005               	movlw	5
 10091  0119  3E27               	addlw	_Load& (0+255)
 10092  011A  0086               	movwf	6
 10093  011B  3001               	movlw	1	; select bank2/3
 10094  011C  0087               	movwf	7
 10095  011D  092E               	comf	(_Load^(0+256)+7),w
 10096  011E  0020               	movlb	0	; select bank0
 10097  011F  00A8               	movwf	??_Load_Main
 10098  0120  0022               	movlb	2	; select bank2
 10099  0121  092F               	comf	((_Load+1)^(0+256)+7),w
 10100  0122  0020               	movlb	0	; select bank0
 10101  0123  00A9               	movwf	??_Load_Main+1
 10102  0124  0AA8               	incf	??_Load_Main,f
 10103  0125  1903               	skipnz
 10104  0126  0AA9               	incf	??_Load_Main+1,f
 10105  0127  3F40               	moviw [0]fsr1
 10106  0128  0728               	addwf	??_Load_Main,w
 10107  0129  0022               	movlb	2	; select bank2
 10108  012A  00C6               	movwf	(_Load^(0+256)+31)
 10109  012B  3F41               	moviw [1]fsr1
 10110  012C  0020               	movlb	0	; select bank0
 10111  012D  3D29               	addwfc	??_Load_Main+1,w
 10112  012E  0022               	movlb	2	; select bank2
 10113  012F  00C7               	movwf	(_Load^(0+256)+32)
 10114                           
 10115                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10116  0130  01AC               	clrf	(_Load^(0+256)+5)
 10117  0131  01AD               	clrf	((_Load+1)^(0+256)+5)
 10118                           
 10119                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10120  0132  01AE               	clrf	(_Load^(0+256)+7)
 10121  0133  01AF               	clrf	((_Load+1)^(0+256)+7)
 10122                           
 10123                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10124  0134  1DA7               	btfss	_Load^(0+256),3
 10125  0135  2995               	goto	l10788
 10126                           
 10127                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10128  0136  3002               	movlw	2
 10129  0137  0250               	subwf	(_Load^(0+256)+41),w
 10130  0138  1803               	skipnc
 10131  0139  2995               	goto	l10788
 10132                           
 10133                           ;OverLoad_B1.c: 115: Load.Count++;
 10134  013A  3001               	movlw	1
 10135  013B  0020               	movlb	0	; select bank0
 10136  013C  00A8               	movwf	??_Load_Main
 10137  013D  0828               	movf	??_Load_Main,w
 10138  013E  0022               	movlb	2	; select bank2
 10139  013F  07D0               	addwf	(_Load^(0+256)+41),f
 10140                           
 10141                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10142  0140  319B  2332  3180   	fcall	_getDimmer_Load_Status
 10143  0143  0020               	movlb	0	; select bank0
 10144  0144  00A8               	movwf	??_Load_Main
 10145  0145  0828               	movf	??_Load_Main,w
 10146  0146  00AB               	movwf	Load_Main@Load_Status
 10147                           
 10148                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10149  0147  319D  2538  3180   	fcall	_getMain_Lights_Count
 10150  014A  0020               	movlb	0	; select bank0
 10151  014B  00A8               	movwf	??_Load_Main
 10152  014C  0828               	movf	??_Load_Main,w
 10153  014D  0022               	movlb	2	; select bank2
 10154  014E  00D3               	movwf	(_Load^(0+256)+44)
 10155                           
 10156                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10157  014F  0850               	movf	(_Load^(0+256)+41),w
 10158  0150  3A01               	xorlw	1
 10159  0151  1D03               	skipz
 10160  0152  295D               	goto	l10774
 10161                           
 10162                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10163  0153  3002               	movlw	2
 10164  0154  0020               	movlb	0	; select bank0
 10165  0155  00A8               	movwf	??_Load_Main
 10166  0156  0828               	movf	??_Load_Main,w
 10167  0157  0022               	movlb	2	; select bank2
 10168  0158  00D2               	movwf	(_Load^(0+256)+43)
 10169                           
 10170                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10171  0159  30E8               	movlw	232
 10172  015A  00CC               	movwf	(_Load^(0+256)+37)
 10173  015B  3003               	movlw	3
 10174  015C  2968               	goto	L5
 10175  015D                     l10774:	
 10176                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10177                           
 10178  015D  0850               	movf	(_Load^(0+256)+41),w
 10179  015E  3A02               	xorlw	2
 10180  015F  1D03               	skipz
 10181  0160  2995               	goto	l10788
 10182                           
 10183                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10184  0161  0853               	movf	(_Load^(0+256)+44),w
 10185  0162  3A01               	xorlw	1
 10186  0163  1D03               	skipz
 10187  0164  296A               	goto	l10780
 10188                           
 10189                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10190  0165  3037               	movlw	55
 10191  0166  00CC               	movwf	(_Load^(0+256)+37)
 10192  0167  3000               	movlw	0
 10193  0168                     L5:	
 10194  0168  00CD               	movwf	(_Load^(0+256)+38)
 10195                           
 10196                           ;OverLoad_B1.c: 124: } else {
 10197  0169  2995               	goto	l10788
 10198  016A                     l10780:	
 10199                           
 10200                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10201  016A  0020               	movlb	0	; select bank0
 10202  016B  08AB               	movf	Load_Main@Load_Status,f
 10203  016C  1D03               	skipz
 10204  016D  2989               	goto	l10784
 10205                           
 10206                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10207  016E  0022               	movlb	2	; select bank2
 10208  016F  0853               	movf	(_Load^(0+256)+44),w
 10209  0170  0020               	movlb	0	; select bank0
 10210  0171  00A8               	movwf	??_Load_Main
 10211  0172  01A9               	clrf	??_Load_Main+1
 10212  0173  0828               	movf	??_Load_Main,w
 10213  0174  00A0               	movwf	___wmul@multiplier
 10214  0175  0829               	movf	??_Load_Main+1,w
 10215  0176  00A1               	movwf	___wmul@multiplier+1
 10216  0177  3037               	movlw	55
 10217  0178  00A2               	movwf	___wmul@multiplicand
 10218  0179  3000               	movlw	0
 10219  017A  00A3               	movwf	___wmul@multiplicand+1
 10220  017B  319E  266A  3180   	fcall	___wmul
 10221  017E  0020               	movlb	0	; select bank0
 10222  017F  0821               	movf	?___wmul+1,w
 10223  0180  0022               	movlb	2	; select bank2
 10224  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10225  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10226  0183  0020               	movlb	0	; select bank0
 10227  0184  0820               	movf	?___wmul,w
 10228  0185  0022               	movlb	2	; select bank2
 10229  0186  01CC               	clrf	(_Load^(0+256)+37)
 10230  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10231                           
 10232                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10233  0188  2995               	goto	l10788
 10234  0189                     l10784:	
 10235  0189  0020               	movlb	0	; select bank0
 10236  018A  082B               	movf	Load_Main@Load_Status,w
 10237  018B  3A01               	xorlw	1
 10238  018C  1D03               	skipz
 10239  018D  2995               	goto	l10788
 10240                           
 10241                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10242  018E  0022               	movlb	2	; select bank2
 10243  018F  0830               	movf	(_Load^(0+256)+9),w
 10244  0190  3E37               	addlw	55
 10245  0191  00CC               	movwf	(_Load^(0+256)+37)
 10246  0192  3000               	movlw	0
 10247  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10248  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10249  0195                     l10788:	
 10250                           
 10251                           ;OverLoad_B1.c: 129: }
 10252                           ;OverLoad_B1.c: 130: }
 10253                           ;OverLoad_B1.c: 131: }
 10254                           ;OverLoad_B1.c: 132: }
 10255                           ;OverLoad_B1.c: 133: }
 10256                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10257  0195  0022               	movlb	2	; select bank2
 10258  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10259  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10260  0198  1D03               	skipz
 10261  0199  299C               	goto	u12765
 10262  019A  084C               	movf	(_Load^(0+256)+37),w
 10263  019B  0246               	subwf	(_Load^(0+256)+31),w
 10264  019C                     u12765:	
 10265  019C  1C03               	skipc
 10266  019D  29AB               	goto	l10798
 10267                           
 10268                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10269  019E  3001               	movlw	1
 10270  019F  0020               	movlb	0	; select bank0
 10271  01A0  00A8               	movwf	??_Load_Main
 10272  01A1  0828               	movf	??_Load_Main,w
 10273  01A2  0022               	movlb	2	; select bank2
 10274  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10275                           
 10276                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10277  01A4  0851               	movf	(_Load^(0+256)+42),w
 10278  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10279  01A6  1803               	skipnc
 10280  01A7  0008               	return
 10281                           
 10282                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10283  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10284                           
 10285                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10286  01A9  16A7               	bsf	_Load^(0+256),5
 10287                           
 10288                           ;OverLoad_B1.c: 161: }
 10289                           ;OverLoad_B1.c: 162: } else {
 10290  01AA  0008               	return
 10291  01AB                     l10798:	
 10292                           
 10293                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10294  01AB  01D1               	clrf	(_Load^(0+256)+42)
 10295                           
 10296                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10297  01AC  1DA7               	btfss	_Load^(0+256),3
 10298  01AD  0008               	return
 10299                           
 10300                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10301  01AE  3001               	movlw	1
 10302  01AF  0020               	movlb	0	; select bank0
 10303  01B0  00A8               	movwf	??_Load_Main
 10304  01B1  0828               	movf	??_Load_Main,w
 10305  01B2  0022               	movlb	2	; select bank2
 10306  01B3  07D4               	addwf	(_Load^(0+256)+45),f
 10307                           
 10308                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10309  01B4  3003               	movlw	3
 10310  01B5  0254               	subwf	(_Load^(0+256)+45),w
 10311  01B6  1C03               	skipc
 10312  01B7  0008               	return
 10313                           
 10314                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10315  01B8  01D4               	clrf	(_Load^(0+256)+45)
 10316                           
 10317                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10318  01B9  17A7               	bsf	_Load^(0+256),7
 10319                           
 10320                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10321  01BA  11A7               	bcf	_Load^(0+256),3
 10322                           
 10323                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10324  01BB  01D0               	clrf	(_Load^(0+256)+41)
 10325                           
 10326                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10327  01BC  0847               	movf	((_Load+1)^(0+256)+31),w
 10328  01BD  01B1               	clrf	((_Load+1)^(0+256)+9)
 10329  01BE  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10330  01BF  0846               	movf	(_Load^(0+256)+31),w
 10331  01C0  01B0               	clrf	(_Load^(0+256)+9)
 10332  01C1  07B0               	addwf	(_Load^(0+256)+9),f
 10333                           
 10334                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10335  01C2  3003               	movlw	3
 10336  01C3  0020               	movlb	0	; select bank0
 10337  01C4  00A8               	movwf	??_Load_Main
 10338  01C5  0828               	movf	??_Load_Main,w
 10339  01C6  0022               	movlb	2	; select bank2
 10340  01C7  00D2               	movwf	(_Load^(0+256)+43)
 10341                           
 10342                           ;OverLoad_B1.c: 196: }
 10343                           ;OverLoad_B1.c: 197: }
 10344                           ;OverLoad_B1.c: 198: }
 10345                           ;OverLoad_B1.c: 200: }
 10346                           ;OverLoad_B1.c: 201: }
 10347                           ;OverLoad_B1.c: 202: } else {
 10348  01C8  0008               	return
 10349  01C9                     l1738:	
 10350                           
 10351                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 10352  01C9  1627               	bsf	_Load^(0+256),4
 10353                           
 10354                           ;OverLoad_B1.c: 204: }
 10355                           ;OverLoad_B1.c: 205: } else {
 10356  01CA  0008               	return
 10357  01CB                     l1737:	
 10358                           
 10359                           ;OverLoad_B1.c: 206: if (Load.LightsON == 1) {
 10360  01CB  1D27               	btfss	_Load^(0+256),2
 10361  01CC  29DE               	goto	l10836
 10362                           
 10363                           ;OverLoad_B1.c: 207: Load.LightsON = 0;
 10364  01CD  1127               	bcf	_Load^(0+256),2
 10365                           
 10366                           ;OverLoad_B1.c: 209: Load.ADtoGO = 0;
 10367  01CE  1227               	bcf	_Load^(0+256),4
 10368                           
 10369                           ;OverLoad_B1.c: 210: Load.Time = 0;
 10370  01CF  01A8               	clrf	(_Load^(0+256)+1)
 10371  01D0  01A9               	clrf	((_Load+1)^(0+256)+1)
 10372                           
 10373                           ;OverLoad_B1.c: 211: setLoad_AH_AL_Restore();
 10374  01D1  319E  2631  3180   	fcall	_setLoad_AH_AL_Restore
 10375                           
 10376                           ;OverLoad_B1.c: 213: Load.ErrorCount = 0;
 10377  01D4  0022               	movlb	2	; select bank2
 10378  01D5  01D1               	clrf	(_Load^(0+256)+42)
 10379                           
 10380                           ;OverLoad_B1.c: 214: Load.SafeCount = 0;
 10381  01D6  01D4               	clrf	(_Load^(0+256)+45)
 10382                           
 10383                           ;OverLoad_B1.c: 216: Load.ADH = 0;
 10384  01D7  01AC               	clrf	(_Load^(0+256)+5)
 10385  01D8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10386                           
 10387                           ;OverLoad_B1.c: 217: Load.ADL = 0;
 10388  01D9  01AE               	clrf	(_Load^(0+256)+7)
 10389  01DA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10390                           
 10391                           ;OverLoad_B1.c: 223: Load.Run = 0;
 10392  01DB  11A7               	bcf	_Load^(0+256),3
 10393                           
 10394                           ;OverLoad_B1.c: 224: Load.Count = 0;
 10395  01DC  01D0               	clrf	(_Load^(0+256)+41)
 10396                           
 10397                           ;OverLoad_B1.c: 225: Load.OK = 0;
 10398  01DD  13A7               	bcf	_Load^(0+256),7
 10399  01DE                     l10836:	
 10400                           
 10401                           ;OverLoad_B1.c: 247: }
 10402                           ;OverLoad_B1.c: 248: if (Load.ERROR == 1) {
 10403  01DE  1EA7               	btfss	_Load^(0+256),5
 10404  01DF  0008               	return
 10405                           
 10406                           ;OverLoad_B1.c: 249: Load.ErrorTime++;
 10407  01E0  3001               	movlw	1
 10408  01E1  07AA               	addwf	(_Load^(0+256)+3),f
 10409  01E2  3000               	movlw	0
 10410  01E3  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10411                           
 10412                           ;OverLoad_B1.c: 250: if (Load.ErrorTime >= 1000) {
 10413  01E4  3003               	movlw	3
 10414  01E5  022B               	subwf	((_Load+1)^(0+256)+3),w
 10415  01E6  30E8               	movlw	232
 10416  01E7  1903               	skipnz
 10417  01E8  022A               	subwf	(_Load^(0+256)+3),w
 10418  01E9  1C03               	skipc
 10419  01EA  0008               	return
 10420                           
 10421                           ;OverLoad_B1.c: 251: Load.ErrorTime = 0;
 10422  01EB  01AA               	clrf	(_Load^(0+256)+3)
 10423  01EC  01AB               	clrf	((_Load+1)^(0+256)+3)
 10424                           
 10425                           ;OverLoad_B1.c: 252: Load.ERROR = 0;
 10426  01ED  12A7               	bcf	_Load^(0+256),5
 10427                           
 10428                           ;OverLoad_B1.c: 253: }
 10429                           ;OverLoad_B1.c: 254: }
 10430                           ;OverLoad_B1.c: 255: }
 10431                           ;OverLoad_B1.c: 256: } else {
 10432  01EE  0008               	return
 10433  01EF                     l1727:	
 10434                           
 10435                           ;OverLoad_B1.c: 257: if (myMain.PowerON == 1) {
 10436  01EF  0021               	movlb	1	; select bank1
 10437  01F0  1C20               	btfss	_myMain^(0+128),0
 10438  01F1  0008               	return
 10439                           
 10440                           ;OverLoad_B1.c: 258: Load.Enable = 1;
 10441  01F2  0022               	movlb	2	; select bank2
 10442  01F3  1427               	bsf	_Load^(0+256),0
 10443  01F4  0008               	return
 10444  01F5                     __end_of_Load_Main:	
 10445                           
 10446                           	psect	text52
 10447  1D38                     __ptext52:	
 10448 ;; *************** function _getMain_Lights_Count *****************
 10449 ;; Defined at:
 10450 ;;		line 467 in file "../src/Main_B1.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  status2         1    2[BANK0 ] unsigned char 
 10455 ;;  status1         1    1[BANK0 ] unsigned char 
 10456 ;;  count           1    0[BANK0 ] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      unsigned char 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        3 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    5
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		_Load_Main
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           
 10481                           ;psect for function _getMain_Lights_Count
 10482  1D38                     _getMain_Lights_Count:	
 10483                           
 10484                           ;Main_B1.c: 468: char count = 0;
 10485                           
 10486                           ;incstack = 0
 10487                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10488  1D38  0020               	movlb	0	; select bank0
 10489  1D39  01A0               	clrf	getMain_Lights_Count@count
 10490                           
 10491                           ;Main_B1.c: 472: char status1 = 0;
 10492  1D3A  01A1               	clrf	getMain_Lights_Count@status1
 10493                           
 10494                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10495  1D3B  3000               	movlw	0
 10496  1D3C  0022               	movlb	2	; select bank2
 10497  1D3D  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10498  1D3E  3001               	movlw	1
 10499  1D3F  0020               	movlb	0	; select bank0
 10500  1D40  00A1               	movwf	getMain_Lights_Count@status1
 10501                           
 10502                           ;Main_B1.c: 476: char status2 = 0;
 10503  1D41  01A2               	clrf	getMain_Lights_Count@status2
 10504                           
 10505                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10506  1D42  3000               	movlw	0
 10507  1D43  0023               	movlb	3	; select bank3
 10508  1D44  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10509  1D45  3001               	movlw	1
 10510  1D46  0020               	movlb	0	; select bank0
 10511  1D47  00A2               	movwf	getMain_Lights_Count@status2
 10512                           
 10513                           ;Main_B1.c: 501: return count = (status1 + status2);
 10514  1D48  0821               	movf	getMain_Lights_Count@status1,w
 10515  1D49  0722               	addwf	getMain_Lights_Count@status2,w
 10516  1D4A  00A0               	movwf	getMain_Lights_Count@count
 10517  1D4B  0008               	return
 10518  1D4C                     __end_of_getMain_Lights_Count:	
 10519                           
 10520                           	psect	text53
 10521  1B32                     __ptext53:	
 10522 ;; *************** function _getDimmer_Load_Status *****************
 10523 ;; Defined at:
 10524 ;;		line 884 in file "../src/Dimmer_B1.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;		None
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  status          1    0[BANK0 ] unsigned char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  1    wreg      unsigned char 
 10531 ;; Registers used:
 10532 ;;		wreg, status,2
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;Total ram usage:        1 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:    5
 10545 ;; This function calls:
 10546 ;;		Nothing
 10547 ;; This function is called by:
 10548 ;;		_Load_Main
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _getDimmer_Load_Status
 10554  1B32                     _getDimmer_Load_Status:	
 10555                           
 10556                           ;Dimmer_B1.c: 885: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10557                           
 10558                           ;incstack = 0
 10559                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10560  1B32  3000               	movlw	0
 10561  1B33  0021               	movlb	1	; select bank1
 10562  1B34  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10563  1B35  3001               	movlw	1
 10564  1B36  0020               	movlb	0	; select bank0
 10565  1B37  00A0               	movwf	getDimmer_Load_Status@status
 10566                           
 10567                           ;Dimmer_B1.c: 886: return status;
 10568  1B38  0820               	movf	getDimmer_Load_Status@status,w
 10569  1B39  0008               	return
 10570  1B3A                     __end_of_getDimmer_Load_Status:	
 10571                           
 10572                           	psect	text54
 10573  1B2A                     __ptext54:	
 10574 ;; *************** function _getDimmer_LoadGO *****************
 10575 ;; Defined at:
 10576 ;;		line 623 in file "../src/Dimmer_B1.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;		None
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10581 ;; Return value:  Size  Location     Type
 10582 ;;                  1    wreg      unsigned char 
 10583 ;; Registers used:
 10584 ;;		wreg, status,2
 10585 ;; Tracked objects:
 10586 ;;		On entry : 0/0
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;Total ram usage:        1 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; Hardware stack levels required when called:    5
 10597 ;; This function calls:
 10598 ;;		Nothing
 10599 ;; This function is called by:
 10600 ;;		_Load_Main
 10601 ;; This function uses a non-reentrant model
 10602 ;;
 10603                           
 10604                           
 10605                           ;psect for function _getDimmer_LoadGO
 10606  1B2A                     _getDimmer_LoadGO:	
 10607                           
 10608                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10609                           
 10610                           ;incstack = 0
 10611                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10612  1B2A  3000               	movlw	0
 10613  1B2B  0021               	movlb	1	; select bank1
 10614  1B2C  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10615  1B2D  3001               	movlw	1
 10616  1B2E  0020               	movlb	0	; select bank0
 10617  1B2F  00A0               	movwf	getDimmer_LoadGO@loadgo
 10618                           
 10619                           ;Dimmer_B1.c: 625: return loadgo;
 10620  1B30  0820               	movf	getDimmer_LoadGO@loadgo,w
 10621  1B31  0008               	return
 10622  1B32                     __end_of_getDimmer_LoadGO:	
 10623                           
 10624                           	psect	text55
 10625  10DD                     __ptext55:	
 10626 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10627 ;; Defined at:
 10628 ;;		line 828 in file "../src/Dimmer_B1.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;  i               2    4[BANK0 ] int 
 10633 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10634 ;;  count           1    3[BANK0 ] unsigned char 
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  1    wreg      unsigned char 
 10637 ;; Registers used:
 10638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10647 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10648 ;;Total ram usage:        5 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:    6
 10651 ;; This function calls:
 10652 ;;		_DimmerLightsPointSelect
 10653 ;; This function is called by:
 10654 ;;		_Load_Main
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _getAll_DimmerLights_AdjSw
 10660  10DD                     _getAll_DimmerLights_AdjSw:	
 10661                           
 10662                           ;Dimmer_B1.c: 829: char count = 2;
 10663                           
 10664                           ;incstack = 0
 10665                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10666  10DD  3002               	movlw	2
 10667  10DE  0020               	movlb	0	; select bank0
 10668  10DF  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10669  10E0  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10670  10E1  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10671                           
 10672                           ;Dimmer_B1.c: 830: char adjsw = 0;
 10673  10E2  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10674                           
 10675                           ;Dimmer_B1.c: 832: for (int i = 0; i < count; i++) {
 10676  10E3  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10677  10E4  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10678  10E5                     l10010:	
 10679  10E5  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10680  10E6  3A80               	xorlw	128
 10681  10E7  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10682  10E8  3080               	movlw	128
 10683  10E9  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10684  10EA  1D03               	skipz
 10685  10EB  28EE               	goto	u11365
 10686  10EC  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10687  10ED  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10688  10EE                     u11365:	
 10689  10EE  1803               	btfsc	3,0
 10690  10EF  2907               	goto	l10012
 10691                           
 10692                           ;Dimmer_B1.c: 833: DimmerLightsPointSelect(i + 1);
 10693  10F0  0020               	movlb	0	; select bank0
 10694  10F1  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10695  10F2  3E01               	addlw	1
 10696  10F3  319C  24AF  3190   	fcall	_DimmerLightsPointSelect
 10697                           
 10698                           ;Dimmer_B1.c: 834: if (adjsw == 0) {
 10699  10F6  0020               	movlb	0	; select bank0
 10700  10F7  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10701  10F8  1D03               	skipz
 10702  10F9  2902               	goto	l10008
 10703                           
 10704                           ;Dimmer_B1.c: 835: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10705  10FA  0A6F               	incf	_DimmerLights,w
 10706  10FB  0086               	movwf	6
 10707  10FC  3001               	movlw	1	; select bank2/3
 10708  10FD  0087               	movwf	7
 10709  10FE  3000               	movlw	0
 10710  10FF  1B01               	btfsc	1,6
 10711  1100  3001               	movlw	1
 10712  1101  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10713  1102                     l10008:	
 10714  1102  3001               	movlw	1
 10715  1103  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10716  1104  3000               	movlw	0
 10717  1105  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10718  1106  28E5               	goto	l10010
 10719  1107                     l10012:	
 10720                           
 10721                           ;Dimmer_B1.c: 836: }
 10722                           ;Dimmer_B1.c: 837: }
 10723                           ;Dimmer_B1.c: 838: return adjsw;
 10724  1107  0020               	movlb	0	; select bank0
 10725  1108  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10726  1109  0008               	return
 10727  110A                     __end_of_getAll_DimmerLights_AdjSw:	
 10728                           
 10729                           	psect	text56
 10730  1E6A                     __ptext56:	
 10731 ;; *************** function ___wmul *****************
 10732 ;; Defined at:
 10733 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10736 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;  product         2    4[BANK0 ] unsigned int 
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  2    0[BANK0 ] unsigned int 
 10741 ;; Registers used:
 10742 ;;		wreg, status,2, status,0
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10748 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;Total ram usage:        6 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    5
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_Load_Main
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function ___wmul
 10764  1E6A                     ___wmul:	
 10765                           
 10766                           ;incstack = 0
 10767                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10768  1E6A  0020               	movlb	0	; select bank0
 10769  1E6B  01A4               	clrf	___wmul@product
 10770  1E6C  01A5               	clrf	___wmul@product+1
 10771  1E6D                     l10410:	
 10772  1E6D  1C20               	btfss	___wmul@multiplier,0
 10773  1E6E  2E73               	goto	l2869
 10774  1E6F  0822               	movf	___wmul@multiplicand,w
 10775  1E70  07A4               	addwf	___wmul@product,f
 10776  1E71  0823               	movf	___wmul@multiplicand+1,w
 10777  1E72  3DA5               	addwfc	___wmul@product+1,f
 10778  1E73                     l2869:	
 10779  1E73  3001               	movlw	1
 10780  1E74                     u12045:	
 10781  1E74  35A2               	lslf	___wmul@multiplicand,f
 10782  1E75  0DA3               	rlf	___wmul@multiplicand+1,f
 10783  1E76  0B89               	decfsz	9,f
 10784  1E77  2E74               	goto	u12045
 10785  1E78  3001               	movlw	1
 10786  1E79                     u12055:	
 10787  1E79  36A1               	lsrf	___wmul@multiplier+1,f
 10788  1E7A  0CA0               	rrf	___wmul@multiplier,f
 10789  1E7B  0B89               	decfsz	9,f
 10790  1E7C  2E79               	goto	u12055
 10791  1E7D  0821               	movf	___wmul@multiplier+1,w
 10792  1E7E  0420               	iorwf	___wmul@multiplier,w
 10793  1E7F  1D03               	skipz
 10794  1E80  2E6D               	goto	l10410
 10795  1E81  0825               	movf	___wmul@product+1,w
 10796  1E82  01A1               	clrf	?___wmul+1
 10797  1E83  07A1               	addwf	?___wmul+1,f
 10798  1E84  0824               	movf	___wmul@product,w
 10799  1E85  01A0               	clrf	?___wmul
 10800  1E86  07A0               	addwf	?___wmul,f
 10801  1E87  0008               	return
 10802  1E88                     __end_of___wmul:	
 10803                           
 10804                           	psect	text57
 10805  123B                     __ptext57:	
 10806 ;; *************** function ___lwdiv *****************
 10807 ;; Defined at:
 10808 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;  divisor         2    0[BANK0 ] unsigned int 
 10811 ;;  dividend        2    2[BANK0 ] unsigned int 
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;  quotient        2    6[BANK0 ] unsigned int 
 10814 ;;  counter         1    5[BANK0 ] unsigned char 
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  2    0[BANK0 ] unsigned int 
 10817 ;; Registers used:
 10818 ;;		wreg, status,2, status,0
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;Total ram usage:        8 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; Hardware stack levels required when called:    5
 10831 ;; This function calls:
 10832 ;;		Nothing
 10833 ;; This function is called by:
 10834 ;;		_Load_Main
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           
 10839                           ;psect for function ___lwdiv
 10840  123B                     ___lwdiv:	
 10841                           
 10842                           ;incstack = 0
 10843                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10844  123B  0020               	movlb	0	; select bank0
 10845  123C  01A6               	clrf	___lwdiv@quotient
 10846  123D  01A7               	clrf	___lwdiv@quotient+1
 10847  123E  0821               	movf	___lwdiv@divisor+1,w
 10848  123F  0420               	iorwf	___lwdiv@divisor,w
 10849  1240  1903               	skipnz
 10850  1241  2A6B               	goto	l10442
 10851  1242  01A5               	clrf	___lwdiv@counter
 10852  1243  0AA5               	incf	___lwdiv@counter,f
 10853  1244                     l10430:	
 10854  1244  1BA1               	btfsc	___lwdiv@divisor+1,7
 10855  1245  2A50               	goto	l10432
 10856  1246  3001               	movlw	1
 10857  1247                     u12085:	
 10858  1247  35A0               	lslf	___lwdiv@divisor,f
 10859  1248  0DA1               	rlf	___lwdiv@divisor+1,f
 10860  1249  0B89               	decfsz	9,f
 10861  124A  2A47               	goto	u12085
 10862  124B  3001               	movlw	1
 10863  124C  00A4               	movwf	??___lwdiv
 10864  124D  0824               	movf	??___lwdiv,w
 10865  124E  07A5               	addwf	___lwdiv@counter,f
 10866  124F  2A44               	goto	l10430
 10867  1250                     l10432:	
 10868  1250  3001               	movlw	1
 10869  1251                     u12105:	
 10870  1251  35A6               	lslf	___lwdiv@quotient,f
 10871  1252  0DA7               	rlf	___lwdiv@quotient+1,f
 10872  1253  0B89               	decfsz	9,f
 10873  1254  2A51               	goto	u12105
 10874  1255  0821               	movf	___lwdiv@divisor+1,w
 10875  1256  0223               	subwf	___lwdiv@dividend+1,w
 10876  1257  1D03               	skipz
 10877  1258  2A5B               	goto	u12115
 10878  1259  0820               	movf	___lwdiv@divisor,w
 10879  125A  0222               	subwf	___lwdiv@dividend,w
 10880  125B                     u12115:	
 10881  125B  1C03               	skipc
 10882  125C  2A62               	goto	l10438
 10883  125D  0820               	movf	___lwdiv@divisor,w
 10884  125E  02A2               	subwf	___lwdiv@dividend,f
 10885  125F  0821               	movf	___lwdiv@divisor+1,w
 10886  1260  3BA3               	subwfb	___lwdiv@dividend+1,f
 10887  1261  1426               	bsf	___lwdiv@quotient,0
 10888  1262                     l10438:	
 10889  1262  3001               	movlw	1
 10890  1263                     u12125:	
 10891  1263  36A1               	lsrf	___lwdiv@divisor+1,f
 10892  1264  0CA0               	rrf	___lwdiv@divisor,f
 10893  1265  0B89               	decfsz	9,f
 10894  1266  2A63               	goto	u12125
 10895  1267  3001               	movlw	1
 10896  1268  02A5               	subwf	___lwdiv@counter,f
 10897  1269  1D03               	btfss	3,2
 10898  126A  2A50               	goto	l10432
 10899  126B                     l10442:	
 10900  126B  0827               	movf	___lwdiv@quotient+1,w
 10901  126C  01A1               	clrf	?___lwdiv+1
 10902  126D  07A1               	addwf	?___lwdiv+1,f
 10903  126E  0826               	movf	___lwdiv@quotient,w
 10904  126F  01A0               	clrf	?___lwdiv
 10905  1270  07A0               	addwf	?___lwdiv,f
 10906  1271  0008               	return
 10907  1272                     __end_of___lwdiv:	
 10908                           
 10909                           	psect	text58
 10910  1ACD                     __ptext58:	
 10911 ;; *************** function _Load_Initialization *****************
 10912 ;; Defined at:
 10913 ;;		line 9 in file "../src/OverLoad_B1.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;		None               void
 10920 ;; Registers used:
 10921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    6
 10934 ;; This function calls:
 10935 ;;		_setLoad_AH_AL_Restore
 10936 ;; This function is called by:
 10937 ;;		_main
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           
 10942                           ;psect for function _Load_Initialization
 10943  1ACD                     _Load_Initialization:	
 10944                           
 10945                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10946                           
 10947                           ;incstack = 0
 10948                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10949  1ACD  319E  2631         	fcall	_setLoad_AH_AL_Restore
 10950  1ACF  0008               	return
 10951  1AD0                     __end_of_Load_Initialization:	
 10952                           
 10953                           	psect	text59
 10954  1E31                     __ptext59:	
 10955 ;; *************** function _setLoad_AH_AL_Restore *****************
 10956 ;; Defined at:
 10957 ;;		line 284 in file "../src/OverLoad_B1.c"
 10958 ;; Parameters:    Size  Location     Type
 10959 ;;		None
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;  i               1    1[BANK0 ] unsigned char 
 10962 ;; Return value:  Size  Location     Type
 10963 ;;		None               void
 10964 ;; Registers used:
 10965 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;Total ram usage:        2 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    5
 10978 ;; This function calls:
 10979 ;;		Nothing
 10980 ;; This function is called by:
 10981 ;;		_Load_Initialization
 10982 ;;		_Load_Main
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _setLoad_AH_AL_Restore
 10988  1E31                     _setLoad_AH_AL_Restore:	
 10989                           
 10990                           ;OverLoad_B1.c: 285: char i;
 10991                           ;OverLoad_B1.c: 286: for (i = 0; i < 5; i++) {
 10992                           
 10993                           ;incstack = 0
 10994                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10995  1E31  0020               	movlb	0	; select bank0
 10996  1E32  01A1               	clrf	setLoad_AH_AL_Restore@i
 10997  1E33                     L6:	
 10998  1E33  3005               	movlw	5
 10999  1E34  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11000  1E35  1803               	btfsc	3,0
 11001  1E36  0008               	return
 11002                           
 11003                           ;OverLoad_B1.c: 287: Load.AH[i] = 0;
 11004  1E37  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11005  1E38  3E32               	addlw	(_Load+11)& (0+255)
 11006  1E39  0086               	movwf	6
 11007  1E3A  3001               	movlw	1	; select bank2/3
 11008  1E3B  0087               	movwf	7
 11009  1E3C  3000               	movlw	0
 11010  1E3D  3FC0               	movwi [0]fsr1
 11011  1E3E  3FC1               	movwi [1]fsr1
 11012                           
 11013                           ;OverLoad_B1.c: 288: Load.AL[i] = 0xffff;
 11014  1E3F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11015  1E40  3E3C               	addlw	(_Load+21)& (0+255)
 11016  1E41  0086               	movwf	6
 11017  1E42  3001               	movlw	1	; select bank2/3
 11018  1E43  0087               	movwf	7
 11019  1E44  30FF               	movlw	255
 11020  1E45  3FC0               	movwi [0]fsr1
 11021  1E46  30FF               	movlw	255
 11022  1E47  3FC1               	movwi [1]fsr1
 11023  1E48  3001               	movlw	1
 11024  1E49  00A0               	movwf	??_setLoad_AH_AL_Restore
 11025  1E4A  0820               	movf	??_setLoad_AH_AL_Restore,w
 11026  1E4B  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11027  1E4C  2E33               	goto	L6
 11028  1E4D                     __end_of_setLoad_AH_AL_Restore:	
 11029                           
 11030                           	psect	text60
 11031  1B9A                     __ptext60:	
 11032 ;; *************** function _LED_Main *****************
 11033 ;; Defined at:
 11034 ;;		line 47 in file "../src/LED_B1.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;		None
 11039 ;; Return value:  Size  Location     Type
 11040 ;;		None               void
 11041 ;; Registers used:
 11042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;Total ram usage:        0 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; Hardware stack levels required when called:    7
 11055 ;; This function calls:
 11056 ;;		_setLED_Main
 11057 ;; This function is called by:
 11058 ;;		_main
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _LED_Main
 11064  1B9A                     _LED_Main:	
 11065                           
 11066                           ;LED_B1.c: 53: setLED_Main(1);
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11070  1B9A  3001               	movlw	1
 11071  1B9B  3193  239F  319B   	fcall	_setLED_Main
 11072                           
 11073                           ;LED_B1.c: 56: setLED_Main(2);
 11074  1B9E  3002               	movlw	2
 11075  1B9F  3193  239F  319B   	fcall	_setLED_Main
 11076                           
 11077                           ;LED_B1.c: 62: setLED_Main(99);
 11078  1BA2  3063               	movlw	99
 11079  1BA3  3193  239F         	fcall	_setLED_Main
 11080  1BA5  0008               	return
 11081  1BA6                     __end_of_LED_Main:	
 11082                           
 11083                           	psect	text61
 11084  139F                     __ptext61:	
 11085 ;; *************** function _setLED_Main *****************
 11086 ;; Defined at:
 11087 ;;		line 221 in file "../src/LED_B1.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  led             1    wreg     unsigned char 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  led             1    4[BANK0 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;		None               void
 11094 ;; Registers used:
 11095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:        3 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    6
 11108 ;; This function calls:
 11109 ;;		_LedPointSelect
 11110 ;; This function is called by:
 11111 ;;		_LED_Main
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _setLED_Main
 11117  139F                     _setLED_Main:	
 11118                           
 11119                           ;incstack = 0
 11120                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11121                           ;setLED_Main@led stored from wreg
 11122  139F  0020               	movlb	0	; select bank0
 11123  13A0  00A4               	movwf	setLED_Main@led
 11124                           
 11125                           ;LED_B1.c: 222: LedPointSelect(led);
 11126  13A1  0824               	movf	setLED_Main@led,w
 11127  13A2  319E  26C6  3193   	fcall	_LedPointSelect
 11128                           
 11129                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11130  13A5  0021               	movlb	1	; select bank1
 11131  13A6  084D               	movf	_LED^(0+128),w
 11132  13A7  0086               	movwf	6
 11133  13A8  3001               	movlw	1	; select bank2/3
 11134  13A9  0087               	movwf	7
 11135  13AA  1C81               	btfss	1,1
 11136  13AB  0008               	return
 11137                           
 11138                           ;LED_B1.c: 224: LED->Time++;
 11139  13AC  0A4D               	incf	_LED^(0+128),w
 11140  13AD  0086               	movwf	6
 11141  13AE  3001               	movlw	1	; select bank2/3
 11142  13AF  0087               	movwf	7
 11143  13B0  3001               	movlw	1
 11144  13B1  0781               	addwf	1,f
 11145  13B2  3141               	addfsr 1,1
 11146  13B3  1803               	skipnc
 11147  13B4  0A81               	incf	1,f
 11148                           
 11149                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11150  13B5  0A4D               	incf	_LED^(0+128),w
 11151  13B6  0086               	movwf	6
 11152  13B7  3001               	movlw	1	; select bank2/3
 11153  13B8  0087               	movwf	7
 11154  13B9  3F40               	moviw [0]fsr1
 11155  13BA  0020               	movlb	0	; select bank0
 11156  13BB  00A2               	movwf	??_setLED_Main
 11157  13BC  3F41               	moviw [1]fsr1
 11158  13BD  00A3               	movwf	??_setLED_Main+1
 11159  13BE  3000               	movlw	0
 11160  13BF  0223               	subwf	??_setLED_Main+1,w
 11161  13C0  3032               	movlw	50
 11162  13C1  1903               	skipnz
 11163  13C2  0222               	subwf	??_setLED_Main,w
 11164  13C3  1C03               	skipc
 11165  13C4  0008               	return
 11166                           
 11167                           ;LED_B1.c: 226: LED->Time = 0;
 11168  13C5  0021               	movlb	1	; select bank1
 11169  13C6  0A4D               	incf	_LED^(0+128),w
 11170  13C7  0086               	movwf	6
 11171  13C8  3001               	movlw	1	; select bank2/3
 11172  13C9  0087               	movwf	7
 11173  13CA  3000               	movlw	0
 11174  13CB  3FC0               	movwi [0]fsr1
 11175  13CC  3FC1               	movwi [1]fsr1
 11176                           
 11177                           ;LED_B1.c: 228: if (led == 1) {
 11178  13CD  0020               	movlb	0	; select bank0
 11179  13CE  0824               	movf	setLED_Main@led,w
 11180  13CF  3A01               	xorlw	1
 11181                           
 11182                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11183  13D0  3008               	movlw	8
 11184  13D1  1903               	btfsc	3,2
 11185  13D2  068C               	xorwf	12,f
 11186                           
 11187                           ;LED_B1.c: 230: }
 11188                           ;LED_B1.c: 233: if (led == 2) {
 11189  13D3  0824               	movf	setLED_Main@led,w
 11190  13D4  3A02               	xorlw	2
 11191  13D5  1D03               	skipz
 11192  13D6  2BD9               	goto	l1065
 11193                           
 11194                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11195  13D7  3080               	movlw	128
 11196  13D8  068E               	xorwf	14,f
 11197  13D9                     l1065:	
 11198                           
 11199                           ;LED_B1.c: 235: }
 11200                           ;LED_B1.c: 243: if (led == 99) {
 11201  13D9  0824               	movf	setLED_Main@led,w
 11202  13DA  3A63               	xorlw	99
 11203  13DB  1D03               	skipz
 11204  13DC  0008               	return
 11205                           
 11206                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11207  13DD  3020               	movlw	32
 11208  13DE  068D               	xorwf	13,f
 11209  13DF  0008               	return
 11210  13E0                     __end_of_setLED_Main:	
 11211                           
 11212                           	psect	text62
 11213  1B8E                     __ptext62:	
 11214 ;; *************** function _LED_Initialization *****************
 11215 ;; Defined at:
 11216 ;;		line 31 in file "../src/LED_B1.c"
 11217 ;; Parameters:    Size  Location     Type
 11218 ;;		None
 11219 ;; Auto vars:     Size  Location     Type
 11220 ;;		None
 11221 ;; Return value:  Size  Location     Type
 11222 ;;		None               void
 11223 ;; Registers used:
 11224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11225 ;; Tracked objects:
 11226 ;;		On entry : 0/0
 11227 ;;		On exit  : 0/0
 11228 ;;		Unchanged: 0/0
 11229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;Total ram usage:        0 bytes
 11235 ;; Hardware stack levels used:    1
 11236 ;; Hardware stack levels required when called:    8
 11237 ;; This function calls:
 11238 ;;		_setLED_Initialization
 11239 ;; This function is called by:
 11240 ;;		_main
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           
 11245                           ;psect for function _LED_Initialization
 11246  1B8E                     _LED_Initialization:	
 11247                           
 11248                           ;LED_B1.c: 33: setLED_Initialization(1);
 11249                           
 11250                           ;incstack = 0
 11251                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11252  1B8E  3001               	movlw	1
 11253  1B8F  319C  2479  319B   	fcall	_setLED_Initialization
 11254                           
 11255                           ;LED_B1.c: 36: setLED_Initialization(2);
 11256  1B92  3002               	movlw	2
 11257  1B93  319C  2479  319B   	fcall	_setLED_Initialization
 11258                           
 11259                           ;LED_B1.c: 42: setLED_Initialization(99);
 11260  1B96  3063               	movlw	99
 11261  1B97  319C  2479         	fcall	_setLED_Initialization
 11262  1B99  0008               	return
 11263  1B9A                     __end_of_LED_Initialization:	
 11264                           
 11265                           	psect	text63
 11266  1C79                     __ptext63:	
 11267 ;; *************** function _setLED_Initialization *****************
 11268 ;; Defined at:
 11269 ;;		line 69 in file "../src/LED_B1.c"
 11270 ;; Parameters:    Size  Location     Type
 11271 ;;  led             1    wreg     unsigned char 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  led             1    4[BANK0 ] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;		None               void
 11276 ;; Registers used:
 11277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;Total ram usage:        1 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    7
 11290 ;; This function calls:
 11291 ;;		_LedPointSelect
 11292 ;;		_setLED
 11293 ;; This function is called by:
 11294 ;;		_LED_Initialization
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function _setLED_Initialization
 11300  1C79                     _setLED_Initialization:	
 11301                           
 11302                           ;incstack = 0
 11303                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11304                           ;setLED_Initialization@led stored from wreg
 11305  1C79  0020               	movlb	0	; select bank0
 11306  1C7A  00A4               	movwf	setLED_Initialization@led
 11307                           
 11308                           ;LED_B1.c: 70: LedPointSelect(led);
 11309  1C7B  0824               	movf	setLED_Initialization@led,w
 11310  1C7C  319E  26C6  319C   	fcall	_LedPointSelect
 11311                           
 11312                           ;LED_B1.c: 71: LED->Enable = 1;
 11313  1C7F  0021               	movlb	1	; select bank1
 11314  1C80  084D               	movf	_LED^(0+128),w
 11315  1C81  0086               	movwf	6
 11316  1C82  3001               	movlw	1	; select bank2/3
 11317  1C83  0087               	movwf	7
 11318  1C84  1401               	bsf	1,0
 11319                           
 11320                           ;LED_B1.c: 72: setLED(led, 0);
 11321  1C85  0020               	movlb	0	; select bank0
 11322  1C86  01A2               	clrf	setLED@command
 11323  1C87  0824               	movf	setLED_Initialization@led,w
 11324  1C88  3196  264F         	fcall	_setLED
 11325  1C8A  0008               	return
 11326  1C8B                     __end_of_setLED_Initialization:	
 11327                           
 11328                           	psect	text64
 11329  11CF                     __ptext64:	
 11330 ;; *************** function _Flash_Memory_Main *****************
 11331 ;; Defined at:
 11332 ;;		line 965 in file "../src/MCU_B1.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;		None
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;		None
 11337 ;; Return value:  Size  Location     Type
 11338 ;;		None               void
 11339 ;; Registers used:
 11340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : 0/0
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;Total ram usage:        1 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    8
 11353 ;; This function calls:
 11354 ;;		_Flash_Memory_Modify
 11355 ;;		_getMain_LightsStatus
 11356 ;; This function is called by:
 11357 ;;		_main
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           
 11362                           ;psect for function _Flash_Memory_Main
 11363  11CF                     _Flash_Memory_Main:	
 11364                           
 11365                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11366                           
 11367                           ;incstack = 0
 11368                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11369  11CF  0024               	movlb	4	; select bank4
 11370  11D0  1C44               	btfss	(_Memory^(0+512)+36),0
 11371  11D1  0008               	return
 11372                           
 11373                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11374  11D2  319C  24C2  3191   	fcall	_getMain_LightsStatus
 11375  11D5  3A00               	xorlw	0
 11376  11D6  3000               	movlw	0
 11377  11D7  1903               	skipnz
 11378  11D8  3001               	movlw	1
 11379  11D9  0020               	movlb	0	; select bank0
 11380  11DA  00A6               	movwf	??_Flash_Memory_Main
 11381  11DB  0DA6               	rlf	??_Flash_Memory_Main,f
 11382  11DC  0024               	movlb	4	; select bank4
 11383  11DD  0844               	movf	(_Memory^(0+512)+36),w
 11384  11DE  0020               	movlb	0	; select bank0
 11385  11DF  0626               	xorwf	??_Flash_Memory_Main,w
 11386  11E0  39FD               	andlw	-3
 11387  11E1  0626               	xorwf	??_Flash_Memory_Main,w
 11388  11E2  0024               	movlb	4	; select bank4
 11389  11E3  00C4               	movwf	(_Memory^(0+512)+36)
 11390                           
 11391                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11392  11E4  1CC4               	btfss	(_Memory^(0+512)+36),1
 11393  11E5  29FF               	goto	l1333
 11394                           
 11395                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11396  11E6  15C4               	bsf	(_Memory^(0+512)+36),3
 11397                           
 11398                           ;MCU_B1.c: 970: Memory.Time++;
 11399  11E7  3001               	movlw	1
 11400  11E8  07C2               	addwf	(_Memory^(0+512)+34),f
 11401  11E9  3000               	movlw	0
 11402  11EA  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11403                           
 11404                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11405  11EB  3022               	movlw	34
 11406  11EC  3E20               	addlw	_Memory& (0+255)
 11407  11ED  0086               	movwf	6
 11408  11EE  3002               	movlw	2	; select bank4/5
 11409  11EF  0087               	movwf	7
 11410  11F0  3F40               	moviw [0]fsr1
 11411  11F1  3A19               	xorlw	25
 11412  11F2  1D03               	skipz
 11413  11F3  29F6               	goto	u12315
 11414  11F4  3F41               	moviw [1]fsr1
 11415  11F5  3A00               	xorlw	0
 11416  11F6                     u12315:	
 11417  11F6  1D03               	skipz
 11418  11F7  0008               	return
 11419                           
 11420                           ;MCU_B1.c: 972: Memory.Time = 0;
 11421  11F8  01C2               	clrf	(_Memory^(0+512)+34)
 11422  11F9  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11423                           
 11424                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11425  11FA  1044               	bcf	(_Memory^(0+512)+36),0
 11426                           
 11427                           ;MCU_B1.c: 974: Memory.GO = 0;
 11428  11FB  10C4               	bcf	(_Memory^(0+512)+36),1
 11429                           
 11430                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11431  11FC  3194  246E         	fcall	_Flash_Memory_Modify
 11432                           
 11433                           ;MCU_B1.c: 976: }
 11434                           ;MCU_B1.c: 977: } else {
 11435  11FE  0008               	return
 11436  11FF                     l1333:	
 11437                           
 11438                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11439  11FF  1DC4               	btfss	(_Memory^(0+512)+36),3
 11440  1200  0008               	return
 11441                           
 11442                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11443  1201  11C4               	bcf	(_Memory^(0+512)+36),3
 11444                           
 11445                           ;MCU_B1.c: 980: Memory.Time = 0;
 11446  1202  01C2               	clrf	(_Memory^(0+512)+34)
 11447  1203  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11448  1204  0008               	return
 11449  1205                     __end_of_Flash_Memory_Main:	
 11450                           
 11451                           	psect	text65
 11452  146E                     __ptext65:	
 11453 ;; *************** function _Flash_Memory_Modify *****************
 11454 ;; Defined at:
 11455 ;;		line 1038 in file "../src/MCU_B1.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;		None
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  i               1    5[BANK0 ] unsigned char 
 11460 ;; Return value:  Size  Location     Type
 11461 ;;		None               void
 11462 ;; Registers used:
 11463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;Total ram usage:        2 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    7
 11476 ;; This function calls:
 11477 ;;		_Flash_Memory_Erasing
 11478 ;;		_Flash_Memory_Read
 11479 ;;		_Flash_Memory_Write
 11480 ;;		_setMemory_Data
 11481 ;; This function is called by:
 11482 ;;		_Flash_Memory_Main
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           
 11487                           ;psect for function _Flash_Memory_Modify
 11488  146E                     _Flash_Memory_Modify:	
 11489                           
 11490                           ;MCU_B1.c: 1039: char i = 0;
 11491                           
 11492                           ;incstack = 0
 11493                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11494  146E  0020               	movlb	0	; select bank0
 11495  146F  01A5               	clrf	Flash_Memory_Modify@i
 11496                           
 11497                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11498  1470  01A5               	clrf	Flash_Memory_Modify@i
 11499  1471  3020               	movlw	32
 11500  1472  0225               	subwf	Flash_Memory_Modify@i,w
 11501  1473  1803               	btfsc	3,0
 11502  1474  2C8A               	goto	l10124
 11503  1475                     l10118:	
 11504                           
 11505                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11506  1475  0825               	movf	Flash_Memory_Modify@i,w
 11507  1476  319E  2617  3194   	fcall	_Flash_Memory_Read
 11508  1479  0020               	movlb	0	; select bank0
 11509  147A  00A4               	movwf	??_Flash_Memory_Modify
 11510  147B  0825               	movf	Flash_Memory_Modify@i,w
 11511  147C  3E20               	addlw	_Memory& (0+255)
 11512  147D  0086               	movwf	6
 11513  147E  3002               	movlw	2	; select bank4/5
 11514  147F  0087               	movwf	7
 11515  1480  0824               	movf	??_Flash_Memory_Modify,w
 11516  1481  0081               	movwf	1
 11517  1482  3001               	movlw	1
 11518  1483  00A4               	movwf	??_Flash_Memory_Modify
 11519  1484  0824               	movf	??_Flash_Memory_Modify,w
 11520  1485  07A5               	addwf	Flash_Memory_Modify@i,f
 11521  1486  3020               	movlw	32
 11522  1487  0225               	subwf	Flash_Memory_Modify@i,w
 11523  1488  1C03               	skipc
 11524  1489  2C75               	goto	l10118
 11525  148A                     l10124:	
 11526                           
 11527                           ;MCU_B1.c: 1042: }
 11528                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11529  148A  0879               	movf	_product,w
 11530  148B  0086               	movwf	6
 11531  148C  3002               	movlw	2	; select bank4/5
 11532  148D  0087               	movwf	7
 11533  148E  3002               	movlw	2	; select bank4/5
 11534  148F  3F4C               	moviw [12]fsr1
 11535  1490  00A0               	movwf	setMemory_Data@data
 11536  1491  3000               	movlw	0
 11537  1492  319B  2376  3194   	fcall	_setMemory_Data
 11538                           
 11539                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11540  1495  0879               	movf	_product,w
 11541  1496  0086               	movwf	6
 11542  1497  3002               	movlw	2	; select bank4/5
 11543  1498  0087               	movwf	7
 11544  1499  3002               	movlw	2	; select bank4/5
 11545  149A  3F4D               	moviw [13]fsr1
 11546  149B  0020               	movlb	0	; select bank0
 11547  149C  00A0               	movwf	setMemory_Data@data
 11548  149D  3001               	movlw	1
 11549  149E  319B  2376  3194   	fcall	_setMemory_Data
 11550                           
 11551                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11552  14A1  0879               	movf	_product,w
 11553  14A2  0086               	movwf	6
 11554  14A3  3002               	movlw	2	; select bank4/5
 11555  14A4  0087               	movwf	7
 11556  14A5  3002               	movlw	2	; select bank4/5
 11557  14A6  3F4E               	moviw [14]fsr1
 11558  14A7  0020               	movlb	0	; select bank0
 11559  14A8  00A0               	movwf	setMemory_Data@data
 11560  14A9  3002               	movlw	2
 11561  14AA  319B  2376  3194   	fcall	_setMemory_Data
 11562                           
 11563                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11564  14AD  0024               	movlb	4	; select bank4
 11565  14AE  1D44               	btfss	(_Memory^(0+512)+36),2
 11566  14AF  2CB4               	goto	l1356
 11567                           
 11568                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11569  14B0  1144               	bcf	(_Memory^(0+512)+36),2
 11570                           
 11571                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11572  14B1  0021               	movlb	1	; select bank1
 11573  14B2  11A0               	bcf	_myMain^(0+128),3
 11574                           
 11575                           ;MCU_B1.c: 1054: myMain.First = 0;
 11576  14B3  12A0               	bcf	_myMain^(0+128),5
 11577  14B4                     l1356:	
 11578                           
 11579                           ;MCU_B1.c: 1056: }
 11580                           ;MCU_B1.c: 1057: GIE = 0;
 11581  14B4  138B               	bcf	11,7	;volatile
 11582                           
 11583                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11584  14B5  319B  2382  3194   	fcall	_Flash_Memory_Erasing
 11585                           
 11586                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11587  14B8  3191  210A         	fcall	_Flash_Memory_Write
 11588                           
 11589                           ;MCU_B1.c: 1060: GIE = 1;
 11590  14BA  178B               	bsf	11,7	;volatile
 11591  14BB  0008               	return
 11592  14BC                     __end_of_Flash_Memory_Modify:	
 11593                           
 11594                           	psect	text66
 11595  1B82                     __ptext66:	
 11596 ;; *************** function _Flash_Memory_Erasing *****************
 11597 ;; Defined at:
 11598 ;;		line 1027 in file "../src/MCU_B1.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;		None
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;		None
 11603 ;; Return value:  Size  Location     Type
 11604 ;;		None               void
 11605 ;; Registers used:
 11606 ;;		wreg, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        0 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    6
 11619 ;; This function calls:
 11620 ;;		_Flash_Memory_Unlock
 11621 ;; This function is called by:
 11622 ;;		_Flash_Memory_Modify
 11623 ;; This function uses a non-reentrant model
 11624 ;;
 11625                           
 11626                           
 11627                           ;psect for function _Flash_Memory_Erasing
 11628  1B82                     _Flash_Memory_Erasing:	
 11629                           
 11630                           ;MCU_B1.c: 1028: CFGS = 0;
 11631                           
 11632                           ;incstack = 0
 11633                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11634  1B82  0023               	movlb	3	; select bank3
 11635  1B83  1315               	bcf	21,6	;volatile
 11636                           
 11637                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11638  1B84  3030               	movlw	48
 11639  1B85  0092               	movwf	18	;volatile
 11640                           
 11641                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11642  1B86  0191               	clrf	17	;volatile
 11643                           
 11644                           ;MCU_B1.c: 1031: FREE = 1;
 11645  1B87  1615               	bsf	21,4	;volatile
 11646                           
 11647                           ;MCU_B1.c: 1032: WREN = 1;
 11648  1B88  1515               	bsf	21,2	;volatile
 11649                           
 11650                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11651  1B89  319B  234B         	fcall	_Flash_Memory_Unlock
 11652                           
 11653                           ;MCU_B1.c: 1034: WREN = 0;
 11654  1B8B  0023               	movlb	3	; select bank3
 11655  1B8C  1115               	bcf	21,2	;volatile
 11656  1B8D  0008               	return
 11657  1B8E                     __end_of_Flash_Memory_Erasing:	
 11658                           
 11659                           	psect	text67
 11660  063F                     __ptext67:	
 11661 ;; *************** function _Flash_Memory_Initialization *****************
 11662 ;; Defined at:
 11663 ;;		line 924 in file "../src/MCU_B1.c"
 11664 ;; Parameters:    Size  Location     Type
 11665 ;;		None
 11666 ;; Auto vars:     Size  Location     Type
 11667 ;;  i               1   67[BANK0 ] unsigned char 
 11668 ;; Return value:  Size  Location     Type
 11669 ;;		None               void
 11670 ;; Registers used:
 11671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11672 ;; Tracked objects:
 11673 ;;		On entry : 0/0
 11674 ;;		On exit  : 0/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;Total ram usage:        2 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    8
 11684 ;; This function calls:
 11685 ;;		_Flash_Memory_Read
 11686 ;;		_Flash_Memory_Write
 11687 ;;		_setMemory_Data
 11688 ;;		_setPercentValue
 11689 ;; This function is called by:
 11690 ;;		_main
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           
 11695                           ;psect for function _Flash_Memory_Initialization
 11696  063F                     _Flash_Memory_Initialization:	
 11697                           
 11698                           ;MCU_B1.c: 925: char i = 0;
 11699                           
 11700                           ;incstack = 0
 11701                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11702  063F  0020               	movlb	0	; select bank0
 11703  0640  01E3               	clrf	Flash_Memory_Initialization@i
 11704                           
 11705                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11706  0641  301F               	movlw	31
 11707  0642  319E  2617  3186   	fcall	_Flash_Memory_Read
 11708  0645  3AAA               	xorlw	170
 11709  0646  1D03               	skipz
 11710  0647  2EB1               	goto	l10530
 11711                           
 11712                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11713  0648  3000               	movlw	0
 11714  0649  319E  2617  3186   	fcall	_Flash_Memory_Read
 11715  064C  0020               	movlb	0	; select bank0
 11716  064D  00E2               	movwf	??_Flash_Memory_Initialization
 11717  064E  0879               	movf	_product,w
 11718  064F  3E0C               	addlw	12
 11719  0650  0086               	movwf	6
 11720  0651  3002               	movlw	2	; select bank4/5
 11721  0652  0087               	movwf	7
 11722  0653  0862               	movf	??_Flash_Memory_Initialization,w
 11723  0654  0081               	movwf	1
 11724                           
 11725                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11726  0655  3001               	movlw	1
 11727  0656  319E  2617  3186   	fcall	_Flash_Memory_Read
 11728  0659  0020               	movlb	0	; select bank0
 11729  065A  00E2               	movwf	??_Flash_Memory_Initialization
 11730  065B  0879               	movf	_product,w
 11731  065C  3E0D               	addlw	13
 11732  065D  0086               	movwf	6
 11733  065E  3002               	movlw	2	; select bank4/5
 11734  065F  0087               	movwf	7
 11735  0660  0862               	movf	??_Flash_Memory_Initialization,w
 11736  0661  0081               	movwf	1
 11737                           
 11738                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11739  0662  3002               	movlw	2
 11740  0663  319E  2617  3186   	fcall	_Flash_Memory_Read
 11741  0666  0020               	movlb	0	; select bank0
 11742  0667  00E2               	movwf	??_Flash_Memory_Initialization
 11743  0668  0879               	movf	_product,w
 11744  0669  3E0E               	addlw	14
 11745  066A  0086               	movwf	6
 11746  066B  3002               	movlw	2	; select bank4/5
 11747  066C  0087               	movwf	7
 11748  066D  0862               	movf	??_Flash_Memory_Initialization,w
 11749  066E  0081               	movwf	1
 11750                           
 11751                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 11752  066F  303C               	movlw	60
 11753  0670  318A  224E  3186   	fcall	_setPercentValue
 11754  0673  0020               	movlb	0	; select bank0
 11755  0674  00E2               	movwf	??_Flash_Memory_Initialization
 11756  0675  0862               	movf	??_Flash_Memory_Initialization,w
 11757  0676  00E3               	movwf	Flash_Memory_Initialization@i
 11758                           
 11759                           ;MCU_B1.c: 936: product->Data[21] = i;
 11760  0677  0863               	movf	Flash_Memory_Initialization@i,w
 11761  0678  00E2               	movwf	??_Flash_Memory_Initialization
 11762  0679  0879               	movf	_product,w
 11763  067A  3E15               	addlw	21
 11764  067B  0086               	movwf	6
 11765  067C  3002               	movlw	2	; select bank4/5
 11766  067D  0087               	movwf	7
 11767  067E  0862               	movf	??_Flash_Memory_Initialization,w
 11768  067F  0081               	movwf	1
 11769                           
 11770                           ;MCU_B1.c: 937: product->Data[22] = i;
 11771  0680  0863               	movf	Flash_Memory_Initialization@i,w
 11772  0681  00E2               	movwf	??_Flash_Memory_Initialization
 11773  0682  0879               	movf	_product,w
 11774  0683  3E16               	addlw	22
 11775  0684  0086               	movwf	6
 11776  0685  3002               	movlw	2	; select bank4/5
 11777  0686  0087               	movwf	7
 11778  0687  0862               	movf	??_Flash_Memory_Initialization,w
 11779  0688  0081               	movwf	1
 11780                           
 11781                           ;MCU_B1.c: 938: product->Data[23] = i;
 11782  0689  0863               	movf	Flash_Memory_Initialization@i,w
 11783  068A  00E2               	movwf	??_Flash_Memory_Initialization
 11784  068B  0879               	movf	_product,w
 11785  068C  3E17               	addlw	23
 11786  068D  0086               	movwf	6
 11787  068E  3002               	movlw	2	; select bank4/5
 11788  068F  0087               	movwf	7
 11789  0690  0862               	movf	??_Flash_Memory_Initialization,w
 11790  0691  0081               	movwf	1
 11791                           
 11792                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11793  0692  0879               	movf	_product,w
 11794  0693  3E0C               	addlw	12
 11795  0694  0086               	movwf	6
 11796  0695  3002               	movlw	2	; select bank4/5
 11797  0696  0087               	movwf	7
 11798  0697  0801               	movf	1,w
 11799  0698  3AFF               	xorlw	255
 11800  0699  1D03               	skipz
 11801  069A  0008               	return
 11802  069B  0879               	movf	_product,w
 11803  069C  3E0D               	addlw	13
 11804  069D  0086               	movwf	6
 11805  069E  3002               	movlw	2	; select bank4/5
 11806  069F  0087               	movwf	7
 11807  06A0  0801               	movf	1,w
 11808  06A1  3AFF               	xorlw	255
 11809  06A2  1D03               	skipz
 11810  06A3  0008               	return
 11811  06A4  0879               	movf	_product,w
 11812  06A5  3E0E               	addlw	14
 11813  06A6  0086               	movwf	6
 11814  06A7  3002               	movlw	2	; select bank4/5
 11815  06A8  0087               	movwf	7
 11816  06A9  0801               	movf	1,w
 11817  06AA  3AFF               	xorlw	255
 11818  06AB  1D03               	skipz
 11819  06AC  0008               	return
 11820                           
 11821                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11822  06AD  0021               	movlb	1	; select bank1
 11823  06AE  15A0               	bsf	_myMain^(0+128),3
 11824                           
 11825                           ;MCU_B1.c: 942: myMain.First = 1;
 11826  06AF  16A0               	bsf	_myMain^(0+128),5
 11827                           
 11828                           ;MCU_B1.c: 943: }
 11829                           ;MCU_B1.c: 944: } else {
 11830  06B0  0008               	return
 11831  06B1                     l10530:	
 11832                           
 11833                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 11834  06B1  303C               	movlw	60
 11835  06B2  318A  224E  3186   	fcall	_setPercentValue
 11836  06B5  0020               	movlb	0	; select bank0
 11837  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11838  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11839  06B8  00E3               	movwf	Flash_Memory_Initialization@i
 11840                           
 11841                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11842  06B9  30FF               	movlw	255
 11843  06BA  00E2               	movwf	??_Flash_Memory_Initialization
 11844  06BB  0862               	movf	??_Flash_Memory_Initialization,w
 11845  06BC  00A0               	movwf	setMemory_Data@data
 11846  06BD  3000               	movlw	0
 11847  06BE  319B  2376  3186   	fcall	_setMemory_Data
 11848                           
 11849                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11850  06C1  30FF               	movlw	255
 11851  06C2  0020               	movlb	0	; select bank0
 11852  06C3  00E2               	movwf	??_Flash_Memory_Initialization
 11853  06C4  0862               	movf	??_Flash_Memory_Initialization,w
 11854  06C5  00A0               	movwf	setMemory_Data@data
 11855  06C6  3001               	movlw	1
 11856  06C7  319B  2376  3186   	fcall	_setMemory_Data
 11857                           
 11858                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11859  06CA  30FF               	movlw	255
 11860  06CB  0020               	movlb	0	; select bank0
 11861  06CC  00E2               	movwf	??_Flash_Memory_Initialization
 11862  06CD  0862               	movf	??_Flash_Memory_Initialization,w
 11863  06CE  00A0               	movwf	setMemory_Data@data
 11864  06CF  3002               	movlw	2
 11865  06D0  319B  2376  3186   	fcall	_setMemory_Data
 11866                           
 11867                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11868  06D3  30FF               	movlw	255
 11869  06D4  0020               	movlb	0	; select bank0
 11870  06D5  00E2               	movwf	??_Flash_Memory_Initialization
 11871  06D6  0862               	movf	??_Flash_Memory_Initialization,w
 11872  06D7  00A0               	movwf	setMemory_Data@data
 11873  06D8  3003               	movlw	3
 11874  06D9  319B  2376  3186   	fcall	_setMemory_Data
 11875                           
 11876                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11877  06DC  30FF               	movlw	255
 11878  06DD  0020               	movlb	0	; select bank0
 11879  06DE  00E2               	movwf	??_Flash_Memory_Initialization
 11880  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11881  06E0  00A0               	movwf	setMemory_Data@data
 11882  06E1  3004               	movlw	4
 11883  06E2  319B  2376  3186   	fcall	_setMemory_Data
 11884                           
 11885                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11886  06E5  30FF               	movlw	255
 11887  06E6  0020               	movlb	0	; select bank0
 11888  06E7  00E2               	movwf	??_Flash_Memory_Initialization
 11889  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11890  06E9  00A0               	movwf	setMemory_Data@data
 11891  06EA  3005               	movlw	5
 11892  06EB  319B  2376  3186   	fcall	_setMemory_Data
 11893                           
 11894                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11895  06EE  30AA               	movlw	170
 11896  06EF  0020               	movlb	0	; select bank0
 11897  06F0  00E2               	movwf	??_Flash_Memory_Initialization
 11898  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 11899  06F2  00A0               	movwf	setMemory_Data@data
 11900  06F3  301F               	movlw	31
 11901  06F4  319B  2376  3186   	fcall	_setMemory_Data
 11902                           
 11903                           ;MCU_B1.c: 953: product->Data[21] = i;
 11904  06F7  0020               	movlb	0	; select bank0
 11905  06F8  0863               	movf	Flash_Memory_Initialization@i,w
 11906  06F9  00E2               	movwf	??_Flash_Memory_Initialization
 11907  06FA  0879               	movf	_product,w
 11908  06FB  3E15               	addlw	21
 11909  06FC  0086               	movwf	6
 11910  06FD  3002               	movlw	2	; select bank4/5
 11911  06FE  0087               	movwf	7
 11912  06FF  0862               	movf	??_Flash_Memory_Initialization,w
 11913  0700  0081               	movwf	1
 11914                           
 11915                           ;MCU_B1.c: 954: product->Data[22] = i;
 11916  0701  0863               	movf	Flash_Memory_Initialization@i,w
 11917  0702  00E2               	movwf	??_Flash_Memory_Initialization
 11918  0703  0879               	movf	_product,w
 11919  0704  3E16               	addlw	22
 11920  0705  0086               	movwf	6
 11921  0706  3002               	movlw	2	; select bank4/5
 11922  0707  0087               	movwf	7
 11923  0708  0862               	movf	??_Flash_Memory_Initialization,w
 11924  0709  0081               	movwf	1
 11925                           
 11926                           ;MCU_B1.c: 955: product->Data[23] = i;
 11927  070A  0863               	movf	Flash_Memory_Initialization@i,w
 11928  070B  00E2               	movwf	??_Flash_Memory_Initialization
 11929  070C  0879               	movf	_product,w
 11930  070D  3E17               	addlw	23
 11931  070E  0086               	movwf	6
 11932  070F  3002               	movlw	2	; select bank4/5
 11933  0710  0087               	movwf	7
 11934  0711  0862               	movf	??_Flash_Memory_Initialization,w
 11935  0712  0081               	movwf	1
 11936                           
 11937                           ;MCU_B1.c: 956: GIE = 0;
 11938  0713  138B               	bcf	11,7	;volatile
 11939                           
 11940                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11941  0714  3191  210A         	fcall	_Flash_Memory_Write
 11942                           
 11943                           ;MCU_B1.c: 958: GIE = 1;
 11944  0716  178B               	bsf	11,7	;volatile
 11945                           
 11946                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11947  0717  0021               	movlb	1	; select bank1
 11948  0718  15A0               	bsf	_myMain^(0+128),3
 11949                           
 11950                           ;MCU_B1.c: 960: myMain.First = 1;
 11951  0719  16A0               	bsf	_myMain^(0+128),5
 11952  071A  0008               	return
 11953  071B                     __end_of_Flash_Memory_Initialization:	
 11954                           
 11955                           	psect	text68
 11956  1B76                     __ptext68:	
 11957 ;; *************** function _setMemory_Data *****************
 11958 ;; Defined at:
 11959 ;;		line 1075 in file "../src/MCU_B1.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  address         1    wreg     unsigned char 
 11962 ;;  data            1    0[BANK0 ] unsigned char 
 11963 ;; Auto vars:     Size  Location     Type
 11964 ;;  address         1    2[BANK0 ] unsigned char 
 11965 ;; Return value:  Size  Location     Type
 11966 ;;		None               void
 11967 ;; Registers used:
 11968 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11974 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11978 ;;Total ram usage:        3 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; Hardware stack levels required when called:    5
 11981 ;; This function calls:
 11982 ;;		Nothing
 11983 ;; This function is called by:
 11984 ;;		_Flash_Memory_Initialization
 11985 ;;		_Flash_Memory_Modify
 11986 ;; This function uses a non-reentrant model
 11987 ;;
 11988                           
 11989                           
 11990                           ;psect for function _setMemory_Data
 11991  1B76                     _setMemory_Data:	
 11992                           
 11993                           ;incstack = 0
 11994                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11995                           ;setMemory_Data@address stored from wreg
 11996  1B76  0020               	movlb	0	; select bank0
 11997  1B77  00A2               	movwf	setMemory_Data@address
 11998                           
 11999                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 12000  1B78  0820               	movf	setMemory_Data@data,w
 12001  1B79  00A1               	movwf	??_setMemory_Data
 12002  1B7A  0822               	movf	setMemory_Data@address,w
 12003  1B7B  3E20               	addlw	_Memory& (0+255)
 12004  1B7C  0086               	movwf	6
 12005  1B7D  3002               	movlw	2	; select bank4/5
 12006  1B7E  0087               	movwf	7
 12007  1B7F  0821               	movf	??_setMemory_Data,w
 12008  1B80  0081               	movwf	1
 12009  1B81  0008               	return
 12010  1B82                     __end_of_setMemory_Data:	
 12011                           
 12012                           	psect	text69
 12013  110A                     __ptext69:	
 12014 ;; *************** function _Flash_Memory_Write *****************
 12015 ;; Defined at:
 12016 ;;		line 1008 in file "../src/MCU_B1.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;		None
 12019 ;; Auto vars:     Size  Location     Type
 12020 ;;  i               1    1[BANK0 ] unsigned char 
 12021 ;; Return value:  Size  Location     Type
 12022 ;;		None               void
 12023 ;; Registers used:
 12024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12025 ;; Tracked objects:
 12026 ;;		On entry : 0/0
 12027 ;;		On exit  : 0/0
 12028 ;;		Unchanged: 0/0
 12029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;Total ram usage:        2 bytes
 12035 ;; Hardware stack levels used:    1
 12036 ;; Hardware stack levels required when called:    6
 12037 ;; This function calls:
 12038 ;;		_Flash_Memory_Unlock
 12039 ;; This function is called by:
 12040 ;;		_Flash_Memory_Initialization
 12041 ;;		_Flash_Memory_Modify
 12042 ;; This function uses a non-reentrant model
 12043 ;;
 12044                           
 12045                           
 12046                           ;psect for function _Flash_Memory_Write
 12047  110A                     _Flash_Memory_Write:	
 12048                           
 12049                           ;MCU_B1.c: 1009: char i = 0;
 12050                           
 12051                           ;incstack = 0
 12052                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12053  110A  0020               	movlb	0	; select bank0
 12054  110B  01A1               	clrf	Flash_Memory_Write@i
 12055                           
 12056                           ;MCU_B1.c: 1010: CFGS = 0;
 12057  110C  0023               	movlb	3	; select bank3
 12058  110D  1315               	bcf	21,6	;volatile
 12059                           
 12060                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12061  110E  3030               	movlw	48
 12062  110F  0092               	movwf	18	;volatile
 12063                           
 12064                           ;MCU_B1.c: 1012: PMDATH = 0;
 12065  1110  0194               	clrf	20	;volatile
 12066                           
 12067                           ;MCU_B1.c: 1013: FREE = 0;
 12068  1111  1215               	bcf	21,4	;volatile
 12069                           
 12070                           ;MCU_B1.c: 1014: LWLO = 1;
 12071  1112  1695               	bsf	21,5	;volatile
 12072                           
 12073                           ;MCU_B1.c: 1015: WREN = 1;
 12074  1113  1515               	bsf	21,2	;volatile
 12075                           
 12076                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 12077  1114  0020               	movlb	0	; select bank0
 12078  1115  01A1               	clrf	Flash_Memory_Write@i
 12079  1116  3020               	movlw	32
 12080  1117  0221               	subwf	Flash_Memory_Write@i,w
 12081  1118  1803               	btfsc	3,0
 12082  1119  2932               	goto	l1347
 12083  111A                     l9698:	
 12084                           
 12085                           ;MCU_B1.c: 1017: PMADRL = i;
 12086  111A  0821               	movf	Flash_Memory_Write@i,w
 12087  111B  0023               	movlb	3	; select bank3
 12088  111C  0091               	movwf	17	;volatile
 12089                           
 12090                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 12091  111D  0020               	movlb	0	; select bank0
 12092  111E  0821               	movf	Flash_Memory_Write@i,w
 12093  111F  3E20               	addlw	_Memory& (0+255)
 12094  1120  0086               	movwf	6
 12095  1121  3002               	movlw	2	; select bank4/5
 12096  1122  0087               	movwf	7
 12097  1123  0801               	movf	1,w
 12098  1124  0023               	movlb	3	; select bank3
 12099  1125  0093               	movwf	19	;volatile
 12100                           
 12101                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 12102  1126  319B  234B  3191   	fcall	_Flash_Memory_Unlock
 12103  1129  3001               	movlw	1
 12104  112A  0020               	movlb	0	; select bank0
 12105  112B  00A0               	movwf	??_Flash_Memory_Write
 12106  112C  0820               	movf	??_Flash_Memory_Write,w
 12107  112D  07A1               	addwf	Flash_Memory_Write@i,f
 12108  112E  3020               	movlw	32
 12109  112F  0221               	subwf	Flash_Memory_Write@i,w
 12110  1130  1C03               	skipc
 12111  1131  291A               	goto	l9698
 12112  1132                     l1347:	
 12113                           
 12114                           ;MCU_B1.c: 1020: }
 12115                           ;MCU_B1.c: 1021: LWLO = 0;
 12116  1132  0023               	movlb	3	; select bank3
 12117  1133  1295               	bcf	21,5	;volatile
 12118                           
 12119                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12120  1134  319B  234B         	fcall	_Flash_Memory_Unlock
 12121                           
 12122                           ;MCU_B1.c: 1023: WREN = 0;
 12123  1136  0023               	movlb	3	; select bank3
 12124  1137  1115               	bcf	21,2	;volatile
 12125  1138  0008               	return
 12126  1139                     __end_of_Flash_Memory_Write:	
 12127                           
 12128                           	psect	text70
 12129  1B4B                     __ptext70:	
 12130 ;; *************** function _Flash_Memory_Unlock *****************
 12131 ;; Defined at:
 12132 ;;		line 987 in file "../src/MCU_B1.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;		None               void
 12139 ;; Registers used:
 12140 ;;		wreg
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    5
 12153 ;; This function calls:
 12154 ;;		Nothing
 12155 ;; This function is called by:
 12156 ;;		_Flash_Memory_Write
 12157 ;;		_Flash_Memory_Erasing
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           
 12162                           ;psect for function _Flash_Memory_Unlock
 12163  1B4B                     _Flash_Memory_Unlock:	
 12164                           
 12165                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 12166                           
 12167                           ;incstack = 0
 12168                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12169  1B4B  3055               	movlw	85
 12170  1B4C  0023               	movlb	3	; select bank3
 12171  1B4D  0096               	movwf	22	;volatile
 12172                           
 12173                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 12174  1B4E  30AA               	movlw	170
 12175  1B4F  0096               	movwf	22	;volatile
 12176                           
 12177                           ;MCU_B1.c: 990: WR = 1;
 12178  1B50  1495               	bsf	21,1	;volatile
 12179                           
 12180                           ;MCU_B1.c: 991: __nop();
 12181  1B51  0000               	nop
 12182                           
 12183                           ;MCU_B1.c: 992: __nop();
 12184  1B52  0000               	nop
 12185  1B53  0008               	return
 12186  1B54                     __end_of_Flash_Memory_Unlock:	
 12187                           
 12188                           	psect	text71
 12189  1E17                     __ptext71:	
 12190 ;; *************** function _Flash_Memory_Read *****************
 12191 ;; Defined at:
 12192 ;;		line 996 in file "../src/MCU_B1.c"
 12193 ;; Parameters:    Size  Location     Type
 12194 ;;  address         1    wreg     unsigned char 
 12195 ;; Auto vars:     Size  Location     Type
 12196 ;;  address         1    2[BANK0 ] unsigned char 
 12197 ;;  ret             1    3[BANK0 ] unsigned char 
 12198 ;;  i               1    1[BANK0 ] unsigned char 
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  1    wreg      unsigned char 
 12201 ;; Registers used:
 12202 ;;		wreg, status,2
 12203 ;; Tracked objects:
 12204 ;;		On entry : 0/0
 12205 ;;		On exit  : 0/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;Total ram usage:        4 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    5
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		_Flash_Memory_Initialization
 12219 ;;		_Flash_Memory_Modify
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           
 12224                           ;psect for function _Flash_Memory_Read
 12225  1E17                     _Flash_Memory_Read:	
 12226                           
 12227                           ;incstack = 0
 12228                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12229                           ;Flash_Memory_Read@address stored from wreg
 12230  1E17  0020               	movlb	0	; select bank0
 12231  1E18  00A2               	movwf	Flash_Memory_Read@address
 12232                           
 12233                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12234  1E19  01A1               	clrf	Flash_Memory_Read@i
 12235  1E1A  01A3               	clrf	Flash_Memory_Read@ret
 12236                           
 12237                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12238  1E1B  3030               	movlw	48
 12239  1E1C  0023               	movlb	3	; select bank3
 12240  1E1D  0092               	movwf	18	;volatile
 12241                           
 12242                           ;MCU_B1.c: 999: PMADRL = address;
 12243  1E1E  0020               	movlb	0	; select bank0
 12244  1E1F  0822               	movf	Flash_Memory_Read@address,w
 12245  1E20  0023               	movlb	3	; select bank3
 12246  1E21  0091               	movwf	17	;volatile
 12247                           
 12248                           ;MCU_B1.c: 1000: CFGS = 0;
 12249  1E22  1315               	bcf	21,6	;volatile
 12250                           
 12251                           ;MCU_B1.c: 1001: RD = 1;
 12252  1E23  1415               	bsf	21,0	;volatile
 12253                           
 12254                           ;MCU_B1.c: 1002: i = PMDATH;
 12255  1E24  0814               	movf	20,w	;volatile
 12256  1E25  0020               	movlb	0	; select bank0
 12257  1E26  00A0               	movwf	??_Flash_Memory_Read
 12258  1E27  0820               	movf	??_Flash_Memory_Read,w
 12259  1E28  00A1               	movwf	Flash_Memory_Read@i
 12260                           
 12261                           ;MCU_B1.c: 1003: ret = PMDATL;
 12262  1E29  0023               	movlb	3	; select bank3
 12263  1E2A  0813               	movf	19,w	;volatile
 12264  1E2B  0020               	movlb	0	; select bank0
 12265  1E2C  00A0               	movwf	??_Flash_Memory_Read
 12266  1E2D  0820               	movf	??_Flash_Memory_Read,w
 12267  1E2E  00A3               	movwf	Flash_Memory_Read@ret
 12268                           
 12269                           ;MCU_B1.c: 1004: return ret;
 12270  1E2F  0823               	movf	Flash_Memory_Read@ret,w
 12271  1E30  0008               	return
 12272  1E31                     __end_of_Flash_Memory_Read:	
 12273                           
 12274                           	psect	text72
 12275  055F                     __ptext72:	
 12276 ;; *************** function _Exception_Main *****************
 12277 ;; Defined at:
 12278 ;;		line 523 in file "../src/Main_B1.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;		None
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  i               2    4[BANK1 ] int 
 12283 ;;  i               2    2[BANK1 ] int 
 12284 ;;  lights          1    6[BANK1 ] unsigned char 
 12285 ;;  error           1    1[BANK1 ] unsigned char 
 12286 ;;  count           1    0[BANK1 ] unsigned char 
 12287 ;; Return value:  Size  Location     Type
 12288 ;;		None               void
 12289 ;; Registers used:
 12290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;Total ram usage:        8 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:    9
 12303 ;; This function calls:
 12304 ;;		_getDimmerLights_Line
 12305 ;;		_getDimmerLights_Status
 12306 ;;		_getMain_All_Error_Status
 12307 ;;		_getMain_LightsStatus
 12308 ;;		_setBuz
 12309 ;;		_setDimmerLights_SwOff
 12310 ;;		_setLED
 12311 ;; This function is called by:
 12312 ;;		_main
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           
 12317                           ;psect for function _Exception_Main
 12318  055F                     _Exception_Main:	
 12319                           
 12320                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12321                           
 12322                           ;incstack = 0
 12323                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12324  055F  3000               	movlw	0
 12325  0560  3191  2168  3185   	fcall	_getMain_All_Error_Status
 12326  0563  0020               	movlb	0	; select bank0
 12327  0564  00EB               	movwf	??_Exception_Main
 12328  0565  086B               	movf	??_Exception_Main,w
 12329  0566  0021               	movlb	1	; select bank1
 12330  0567  00E9               	movwf	Exception_Main@error^(0+128)
 12331                           
 12332                           ;Main_B1.c: 525: char lights = 0, count = 2;
 12333  0568  01EE               	clrf	Exception_Main@lights^(0+128)
 12334  0569  3002               	movlw	2
 12335  056A  0020               	movlb	0	; select bank0
 12336  056B  00EB               	movwf	??_Exception_Main
 12337  056C  086B               	movf	??_Exception_Main,w
 12338  056D  0021               	movlb	1	; select bank1
 12339  056E  00E8               	movwf	Exception_Main@count^(0+128)
 12340                           
 12341                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12342  056F  1DAB               	btfss	(_myMain^(0+128)+11),3
 12343  0570  2D7E               	goto	l10864
 12344                           
 12345                           ;Main_B1.c: 527: if (error == 0) {
 12346  0571  08E9               	movf	Exception_Main@error^(0+128),f
 12347  0572  1D03               	skipz
 12348  0573  0008               	return
 12349                           
 12350                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12351  0574  11AB               	bcf	(_myMain^(0+128)+11),3
 12352                           
 12353                           ;Main_B1.c: 533: setLED(99, 10);
 12354  0575  300A               	movlw	10
 12355  0576  0020               	movlb	0	; select bank0
 12356  0577  00EB               	movwf	??_Exception_Main
 12357  0578  086B               	movf	??_Exception_Main,w
 12358  0579  00A2               	movwf	setLED@command
 12359  057A  3063               	movlw	99
 12360  057B  3196  264F         	fcall	_setLED
 12361                           
 12362                           ;Main_B1.c: 535: }
 12363                           ;Main_B1.c: 536: } else {
 12364  057D  0008               	return
 12365  057E                     l10864:	
 12366                           
 12367                           ;Main_B1.c: 537: if (error != 0) {
 12368  057E  0021               	movlb	1	; select bank1
 12369  057F  0869               	movf	Exception_Main@error^(0+128),w
 12370  0580  1903               	btfsc	3,2
 12371  0581  0008               	return
 12372                           
 12373                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12374  0582  15AB               	bsf	(_myMain^(0+128)+11),3
 12375                           
 12376                           ;Main_B1.c: 541: setLED(99, 11);
 12377  0583  300B               	movlw	11
 12378  0584  0020               	movlb	0	; select bank0
 12379  0585  00EB               	movwf	??_Exception_Main
 12380  0586  086B               	movf	??_Exception_Main,w
 12381  0587  00A2               	movwf	setLED@command
 12382  0588  3063               	movlw	99
 12383  0589  3196  264F  3185   	fcall	_setLED
 12384                           
 12385                           ;Main_B1.c: 543: switch (error) {
 12386  058C  2E34               	goto	l10912
 12387  058D                     l10870:	
 12388                           ;Main_B1.c: 544: case 2:
 12389                           
 12390                           
 12391                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12392  058D  319C  24C2  3185   	fcall	_getMain_LightsStatus
 12393  0590  3A01               	xorlw	1
 12394  0591  1D03               	skipz
 12395  0592  2D9C               	goto	l10874
 12396                           
 12397                           ;Main_B1.c: 546: setBuz(10, 300);
 12398  0593  302C               	movlw	44
 12399  0594  0020               	movlb	0	; select bank0
 12400  0595  00A9               	movwf	setBuz@time
 12401  0596  3001               	movlw	1
 12402  0597  00AA               	movwf	setBuz@time+1
 12403  0598  300A               	movlw	10
 12404  0599  3197  274E  3185   	fcall	_setBuz
 12405  059C                     l10874:	
 12406                           
 12407                           ;Main_B1.c: 547: }
 12408                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12409  059C  0021               	movlb	1	; select bank1
 12410  059D  01EA               	clrf	Exception_Main@i^(0+128)
 12411  059E  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12412  059F                     l10884:	
 12413  059F  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12414  05A0  3A80               	xorlw	128
 12415  05A1  0020               	movlb	0	; select bank0
 12416  05A2  00EB               	movwf	??_Exception_Main
 12417  05A3  3080               	movlw	128
 12418  05A4  026B               	subwf	??_Exception_Main,w
 12419  05A5  1D03               	skipz
 12420  05A6  2DAA               	goto	u12895
 12421  05A7  0021               	movlb	1	; select bank1
 12422  05A8  0868               	movf	Exception_Main@count^(0+128),w
 12423  05A9  026A               	subwf	Exception_Main@i^(0+128),w
 12424  05AA                     u12895:	
 12425  05AA  1803               	btfsc	3,0
 12426  05AB  2DCE               	goto	u12890
 12427                           
 12428                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12429  05AC  0021               	movlb	1	; select bank1
 12430  05AD  086A               	movf	Exception_Main@i^(0+128),w
 12431  05AE  3E01               	addlw	1
 12432  05AF  319C  2422  3185   	fcall	_getDimmerLights_Status
 12433  05B2  3A01               	xorlw	1
 12434  05B3  1D03               	skipz
 12435  05B4  2DC8               	goto	l10882
 12436                           
 12437                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12438  05B5  0020               	movlb	0	; select bank0
 12439  05B6  086F               	movf	_DimmerLights,w
 12440  05B7  3E0B               	addlw	11
 12441  05B8  0086               	movwf	6
 12442  05B9  3001               	movlw	1	; select bank2/3
 12443  05BA  0087               	movwf	7
 12444  05BB  1481               	bsf	1,1
 12445                           
 12446                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12447  05BC  086F               	movf	_DimmerLights,w
 12448  05BD  3E02               	addlw	2
 12449  05BE  0086               	movwf	6
 12450  05BF  3001               	movlw	1	; select bank2/3
 12451  05C0  0087               	movwf	7
 12452  05C1  1081               	bcf	1,1
 12453                           
 12454                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12455  05C2  0021               	movlb	1	; select bank1
 12456  05C3  086A               	movf	Exception_Main@i^(0+128),w
 12457  05C4  3E01               	addlw	1
 12458  05C5  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12459  05C8                     l10882:	
 12460  05C8  3001               	movlw	1
 12461  05C9  0021               	movlb	1	; select bank1
 12462  05CA  07EA               	addwf	Exception_Main@i^(0+128),f
 12463  05CB  3000               	movlw	0
 12464  05CC  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12465  05CD  2D9F               	goto	l10884
 12466  05CE                     u12890:	
 12467  05CE  0021               	movlb	1	; select bank1
 12468  05CF  0008               	return
 12469  05D0                     l10886:	
 12470                           ;Main_B1.c: 558: case 3:
 12471                           
 12472                           ;Main_B1.c: 555: }
 12473                           ;Main_B1.c: 556: }
 12474                           ;Main_B1.c: 557: break;
 12475                           
 12476                           
 12477                           ;Main_B1.c: 560: setBuz(5, 300);
 12478  05D0  302C               	movlw	44
 12479  05D1  0020               	movlb	0	; select bank0
 12480  05D2  00A9               	movwf	setBuz@time
 12481  05D3  3001               	movlw	1
 12482  05D4  00AA               	movwf	setBuz@time+1
 12483  05D5  3005               	movlw	5
 12484  05D6  3197  274E  3185   	fcall	_setBuz
 12485                           
 12486                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12487  05D9  319D  2524  3185   	fcall	_getDimmerLights_Line
 12488  05DC  0020               	movlb	0	; select bank0
 12489  05DD  00EB               	movwf	??_Exception_Main
 12490  05DE  086B               	movf	??_Exception_Main,w
 12491  05DF  0021               	movlb	1	; select bank1
 12492  05E0  00EE               	movwf	Exception_Main@lights^(0+128)
 12493                           
 12494                           ;Main_B1.c: 562: if (lights == 0) {
 12495  05E1  08EE               	movf	Exception_Main@lights^(0+128),f
 12496  05E2  1D03               	skipz
 12497  05E3  2E17               	goto	l10904
 12498                           
 12499                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12500  05E4  01EC               	clrf	Exception_Main@i_3620^(0+128)
 12501  05E5  01ED               	clrf	(Exception_Main@i_3620+1)^(0+128)
 12502  05E6                     l10902:	
 12503  05E6  086D               	movf	(Exception_Main@i_3620+1)^(0+128),w
 12504  05E7  3A80               	xorlw	128
 12505  05E8  0020               	movlb	0	; select bank0
 12506  05E9  00EB               	movwf	??_Exception_Main
 12507  05EA  3080               	movlw	128
 12508  05EB  026B               	subwf	??_Exception_Main,w
 12509  05EC  1D03               	skipz
 12510  05ED  2DF1               	goto	u12925
 12511  05EE  0021               	movlb	1	; select bank1
 12512  05EF  0868               	movf	Exception_Main@count^(0+128),w
 12513  05F0  026C               	subwf	Exception_Main@i_3620^(0+128),w
 12514  05F1                     u12925:	
 12515  05F1  1803               	btfsc	3,0
 12516  05F2  2E15               	goto	u12920
 12517                           
 12518                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12519  05F3  0021               	movlb	1	; select bank1
 12520  05F4  086C               	movf	Exception_Main@i_3620^(0+128),w
 12521  05F5  3E01               	addlw	1
 12522  05F6  319C  2422  3185   	fcall	_getDimmerLights_Status
 12523  05F9  3A01               	xorlw	1
 12524  05FA  1D03               	skipz
 12525  05FB  2E0F               	goto	l10900
 12526                           
 12527                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12528  05FC  0020               	movlb	0	; select bank0
 12529  05FD  086F               	movf	_DimmerLights,w
 12530  05FE  3E0B               	addlw	11
 12531  05FF  0086               	movwf	6
 12532  0600  3001               	movlw	1	; select bank2/3
 12533  0601  0087               	movwf	7
 12534  0602  1481               	bsf	1,1
 12535                           
 12536                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12537  0603  086F               	movf	_DimmerLights,w
 12538  0604  3E02               	addlw	2
 12539  0605  0086               	movwf	6
 12540  0606  3001               	movlw	1	; select bank2/3
 12541  0607  0087               	movwf	7
 12542  0608  1081               	bcf	1,1
 12543                           
 12544                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12545  0609  0021               	movlb	1	; select bank1
 12546  060A  086C               	movf	Exception_Main@i_3620^(0+128),w
 12547  060B  3E01               	addlw	1
 12548  060C  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12549  060F                     l10900:	
 12550  060F  3001               	movlw	1
 12551  0610  0021               	movlb	1	; select bank1
 12552  0611  07EC               	addwf	Exception_Main@i_3620^(0+128),f
 12553  0612  3000               	movlw	0
 12554  0613  3DED               	addwfc	(Exception_Main@i_3620+1)^(0+128),f
 12555  0614  2DE6               	goto	l10902
 12556  0615                     u12920:	
 12557  0615  0021               	movlb	1	; select bank1
 12558  0616  0008               	return
 12559  0617                     l10904:	
 12560                           ;Main_B1.c: 570: }
 12561                           ;Main_B1.c: 571: }
 12562                           ;Main_B1.c: 572: } else {
 12563                           
 12564                           
 12565                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12566  0617  0021               	movlb	1	; select bank1
 12567  0618  086E               	movf	Exception_Main@lights^(0+128),w
 12568  0619  319C  2422  3185   	fcall	_getDimmerLights_Status
 12569  061C  3A01               	xorlw	1
 12570  061D  1903               	btfsc	3,2
 12571  061E  2E21               	goto	l10906
 12572  061F  0021               	movlb	1	; select bank1
 12573  0620  0008               	return
 12574  0621                     l10906:	
 12575                           
 12576                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12577  0621  0020               	movlb	0	; select bank0
 12578  0622  086F               	movf	_DimmerLights,w
 12579  0623  3E0B               	addlw	11
 12580  0624  0086               	movwf	6
 12581  0625  3001               	movlw	1	; select bank2/3
 12582  0626  0087               	movwf	7
 12583  0627  1481               	bsf	1,1
 12584                           
 12585                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12586  0628  086F               	movf	_DimmerLights,w
 12587  0629  3E02               	addlw	2
 12588  062A  0086               	movwf	6
 12589  062B  3001               	movlw	1	; select bank2/3
 12590  062C  0087               	movwf	7
 12591  062D  1081               	bcf	1,1
 12592                           
 12593                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12594  062E  0021               	movlb	1	; select bank1
 12595  062F  086E               	movf	Exception_Main@lights^(0+128),w
 12596  0630  3194  24BC         	fcall	_setDimmerLights_SwOff
 12597  0632  0021               	movlb	1	; select bank1
 12598  0633  0008               	return
 12599  0634                     l10912:	
 12600                           ;Main_B1.c: 582: }
 12601                           
 12602                           ;Main_B1.c: 579: }
 12603                           ;Main_B1.c: 580: }
 12604                           ;Main_B1.c: 581: break;
 12605                           
 12606  0634  0021               	movlb	1	; select bank1
 12607  0635  0869               	movf	Exception_Main@error^(0+128),w
 12608                           
 12609                           ; Switch size 1, requested type "space"
 12610                           ; Number of cases is 2, Range of values is 2 to 3
 12611                           ; switch strategies available:
 12612                           ; Name         Instructions Cycles
 12613                           ; simple_byte            7     4 (average)
 12614                           ; direct_byte           13     9 (fixed)
 12615                           ; jumptable            263     9 (fixed)
 12616                           ;	Chosen strategy is simple_byte
 12617  0636  3A02               	xorlw	2	; case 2
 12618  0637  1903               	skipnz
 12619  0638  2D8D               	goto	l10870
 12620  0639  3A01               	xorlw	1	; case 3
 12621  063A  1903               	skipnz
 12622  063B  2DD0               	goto	l10886
 12623  063C  2E3E               	goto	l1607
 12624  063D  0008               	return
 12625  063E                     l1607:	
 12626  063E  0008               	return
 12627  063F                     __end_of_Exception_Main:	
 12628                           
 12629                           	psect	text73
 12630  1D24                     __ptext73:	
 12631 ;; *************** function _getDimmerLights_Line *****************
 12632 ;; Defined at:
 12633 ;;		line 732 in file "../src/Dimmer_B1.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;		None
 12636 ;; Auto vars:     Size  Location     Type
 12637 ;;  line            1    1[BANK0 ] unsigned char 
 12638 ;; Return value:  Size  Location     Type
 12639 ;;                  1    wreg      unsigned char 
 12640 ;; Registers used:
 12641 ;;		wreg, status,2
 12642 ;; Tracked objects:
 12643 ;;		On entry : 0/0
 12644 ;;		On exit  : 0/0
 12645 ;;		Unchanged: 0/0
 12646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;Total ram usage:        2 bytes
 12652 ;; Hardware stack levels used:    1
 12653 ;; Hardware stack levels required when called:    5
 12654 ;; This function calls:
 12655 ;;		Nothing
 12656 ;; This function is called by:
 12657 ;;		_Exception_Main
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           
 12662                           ;psect for function _getDimmerLights_Line
 12663  1D24                     _getDimmerLights_Line:	
 12664                           
 12665                           ;Dimmer_B1.c: 733: char line = 0;
 12666                           
 12667                           ;incstack = 0
 12668                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12669  1D24  0020               	movlb	0	; select bank0
 12670  1D25  01A1               	clrf	getDimmerLights_Line@line
 12671                           
 12672                           ;Dimmer_B1.c: 735: if (DimmerLights1.Line == 1) {
 12673  1D26  0022               	movlb	2	; select bank2
 12674  1D27  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12675  1D28  2D2D               	goto	l858
 12676                           
 12677                           ;Dimmer_B1.c: 736: line = 1;
 12678  1D29  0020               	movlb	0	; select bank0
 12679  1D2A  01A1               	clrf	getDimmerLights_Line@line
 12680  1D2B  0AA1               	incf	getDimmerLights_Line@line,f
 12681                           
 12682                           ;Dimmer_B1.c: 737: }
 12683  1D2C  2D35               	goto	l859
 12684  1D2D                     l858:	
 12685                           
 12686                           ;Dimmer_B1.c: 740: else if (DimmerLights2.Line == 1) {
 12687  1D2D  0023               	movlb	3	; select bank3
 12688  1D2E  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12689  1D2F  2D35               	goto	l859
 12690                           
 12691                           ;Dimmer_B1.c: 741: line = 2;
 12692  1D30  3002               	movlw	2
 12693  1D31  0020               	movlb	0	; select bank0
 12694  1D32  00A0               	movwf	??_getDimmerLights_Line
 12695  1D33  0820               	movf	??_getDimmerLights_Line,w
 12696  1D34  00A1               	movwf	getDimmerLights_Line@line
 12697  1D35                     l859:	
 12698                           
 12699                           ;Dimmer_B1.c: 742: }
 12700                           ;Dimmer_B1.c: 749: return line;
 12701  1D35  0020               	movlb	0	; select bank0
 12702  1D36  0821               	movf	getDimmerLights_Line@line,w
 12703  1D37  0008               	return
 12704  1D38                     __end_of_getDimmerLights_Line:	
 12705                           
 12706                           	psect	text74
 12707  1EE6                     __ptext74:	
 12708 ;; *************** function _DimmerLights_Main *****************
 12709 ;; Defined at:
 12710 ;;		line 501 in file "../src/Dimmer_B1.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;		None
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;		None               void
 12717 ;; Registers used:
 12718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;Total ram usage:        0 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:   10
 12731 ;; This function calls:
 12732 ;;		_getLoad_OK
 12733 ;;		_getMain_All_Error_Status
 12734 ;;		_getMain_LightsStatus
 12735 ;;		_setDimmerLights_Main
 12736 ;; This function is called by:
 12737 ;;		_main
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           
 12742                           ;psect for function _DimmerLights_Main
 12743  1EE6                     _DimmerLights_Main:	
 12744                           
 12745                           ;Dimmer_B1.c: 513: if (Dimmer.LoadGO == 1) {
 12746                           
 12747                           ;incstack = 0
 12748                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12749  1EE6  0021               	movlb	1	; select bank1
 12750  1EE7  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12751  1EE8  2EFE               	goto	l10500
 12752                           
 12753                           ;Dimmer_B1.c: 514: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12754  1EE9  319B  2322  319E   	fcall	_getLoad_OK
 12755  1EEC  3A01               	xorlw	1
 12756  1EED  1903               	skipnz
 12757  1EEE  2EFC               	goto	l809
 12758  1EEF  3000               	movlw	0
 12759  1EF0  3191  2168  319E   	fcall	_getMain_All_Error_Status
 12760  1EF3  3800               	iorlw	0
 12761  1EF4  1D03               	skipz
 12762  1EF5  2EFC               	goto	l809
 12763  1EF6  319C  24C2  319E   	fcall	_getMain_LightsStatus
 12764  1EF9  3800               	iorlw	0
 12765  1EFA  1D03               	skipz
 12766  1EFB  2EFE               	goto	l10500
 12767  1EFC                     l809:	
 12768                           
 12769                           ;Dimmer_B1.c: 515: Dimmer.LoadGO = 0;
 12770  1EFC  0021               	movlb	1	; select bank1
 12771  1EFD  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12772  1EFE                     l10500:	
 12773                           
 12774                           ;Dimmer_B1.c: 516: }
 12775                           ;Dimmer_B1.c: 517: }
 12776                           ;Dimmer_B1.c: 521: setDimmerLights_Main(1);
 12777  1EFE  3001               	movlw	1
 12778  1EFF  3195  255A  319E   	fcall	_setDimmerLights_Main
 12779                           
 12780                           ;Dimmer_B1.c: 525: setDimmerLights_Main(2);
 12781  1F02  3002               	movlw	2
 12782  1F03  3195  255A         	fcall	_setDimmerLights_Main
 12783  1F05  0008               	return
 12784  1F06                     __end_of_DimmerLights_Main:	
 12785                           
 12786                           	psect	text75
 12787  155A                     __ptext75:	
 12788 ;; *************** function _setDimmerLights_Main *****************
 12789 ;; Defined at:
 12790 ;;		line 535 in file "../src/Dimmer_B1.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;  lights          1    wreg     unsigned char 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;  lights          1   78[BANK0 ] unsigned char 
 12795 ;; Return value:  Size  Location     Type
 12796 ;;		None               void
 12797 ;; Registers used:
 12798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12807 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12808 ;;Total ram usage:        1 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    9
 12811 ;; This function calls:
 12812 ;;		_DimmerLightsPointSelect
 12813 ;;		_getDimmerLights_Allow_Condition
 12814 ;;		_setDimmerLights
 12815 ;;		_setDimmerLights_Adj
 12816 ;; This function is called by:
 12817 ;;		_DimmerLights_Main
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           
 12822                           ;psect for function _setDimmerLights_Main
 12823  155A                     _setDimmerLights_Main:	
 12824                           
 12825                           ;incstack = 0
 12826                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12827                           ;setDimmerLights_Main@lights stored from wreg
 12828  155A  0020               	movlb	0	; select bank0
 12829  155B  00EE               	movwf	setDimmerLights_Main@lights
 12830                           
 12831                           ;Dimmer_B1.c: 536: DimmerLightsPointSelect(lights);
 12832  155C  086E               	movf	setDimmerLights_Main@lights,w
 12833  155D  319C  24AF  3195   	fcall	_DimmerLightsPointSelect
 12834                           
 12835                           ;Dimmer_B1.c: 538: if (DimmerLights->Trigger == 1) {
 12836  1560  0020               	movlb	0	; select bank0
 12837  1561  086F               	movf	_DimmerLights,w
 12838  1562  3E0A               	addlw	10
 12839  1563  0086               	movwf	6
 12840  1564  3001               	movlw	1	; select bank2/3
 12841  1565  0087               	movwf	7
 12842  1566  1C81               	btfss	1,1
 12843  1567  2D89               	goto	l9972
 12844                           
 12845                           ;Dimmer_B1.c: 539: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12846  1568  086E               	movf	setDimmerLights_Main@lights,w
 12847  1569  3192  2272  3195   	fcall	_getDimmerLights_Allow_Condition
 12848  156C  3800               	iorlw	0
 12849  156D  1D03               	skipz
 12850  156E  0008               	return
 12851                           
 12852                           ;Dimmer_B1.c: 540: DimmerLights->Trigger = 0;
 12853  156F  0020               	movlb	0	; select bank0
 12854  1570  086F               	movf	_DimmerLights,w
 12855  1571  3E0A               	addlw	10
 12856  1572  0086               	movwf	6
 12857  1573  3001               	movlw	1	; select bank2/3
 12858  1574  0087               	movwf	7
 12859  1575  1081               	bcf	1,1
 12860                           
 12861                           ;Dimmer_B1.c: 541: if (DimmerLights->Switch == 1) {
 12862  1576  086F               	movf	_DimmerLights,w
 12863  1577  3E0A               	addlw	10
 12864  1578  0086               	movwf	6
 12865  1579  3001               	movlw	1	; select bank2/3
 12866  157A  0087               	movwf	7
 12867  157B  1C01               	btfss	1,0
 12868  157C  2D83               	goto	l9970
 12869                           
 12870                           ;Dimmer_B1.c: 542: setDimmerLights(lights, 1);
 12871  157D  01EB               	clrf	setDimmerLights@status
 12872  157E  0AEB               	incf	setDimmerLights@status,f
 12873  157F  086E               	movf	setDimmerLights_Main@lights,w
 12874  1580  3195  25AA         	fcall	_setDimmerLights
 12875                           
 12876                           ;Dimmer_B1.c: 543: } else {
 12877  1582  0008               	return
 12878  1583                     l9970:	
 12879                           
 12880                           ;Dimmer_B1.c: 544: setDimmerLights(lights, 0);
 12881  1583  0020               	movlb	0	; select bank0
 12882  1584  01EB               	clrf	setDimmerLights@status
 12883  1585  086E               	movf	setDimmerLights_Main@lights,w
 12884  1586  3195  25AA         	fcall	_setDimmerLights
 12885                           
 12886                           ;Dimmer_B1.c: 545: }
 12887                           ;Dimmer_B1.c: 546: }
 12888                           ;Dimmer_B1.c: 547: } else {
 12889  1588  0008               	return
 12890  1589                     l9972:	
 12891                           
 12892                           ;Dimmer_B1.c: 548: if (DimmerLights->TriggerAdj == 1) {
 12893  1589  0020               	movlb	0	; select bank0
 12894  158A  086F               	movf	_DimmerLights,w
 12895  158B  3E0A               	addlw	10
 12896  158C  0086               	movwf	6
 12897  158D  3001               	movlw	1	; select bank2/3
 12898  158E  0087               	movwf	7
 12899  158F  1D81               	btfss	1,3
 12900  1590  0008               	return
 12901                           
 12902                           ;Dimmer_B1.c: 549: DimmerLights->TriggerAdj = 0;
 12903  1591  086F               	movf	_DimmerLights,w
 12904  1592  3E0A               	addlw	10
 12905  1593  0086               	movwf	6
 12906  1594  3001               	movlw	1	; select bank2/3
 12907  1595  0087               	movwf	7
 12908  1596  1181               	bcf	1,3
 12909                           
 12910                           ;Dimmer_B1.c: 550: if (DimmerLights->SwitchAdj == 1) {
 12911  1597  086F               	movf	_DimmerLights,w
 12912  1598  3E0A               	addlw	10
 12913  1599  0086               	movwf	6
 12914  159A  3001               	movlw	1	; select bank2/3
 12915  159B  0087               	movwf	7
 12916  159C  1D01               	btfss	1,2
 12917  159D  2DA4               	goto	l9978
 12918                           
 12919                           ;Dimmer_B1.c: 551: setDimmerLights_Adj(lights, 1);
 12920  159E  01EB               	clrf	setDimmerLights_Adj@status
 12921  159F  0AEB               	incf	setDimmerLights_Adj@status,f
 12922  15A0  086E               	movf	setDimmerLights_Main@lights,w
 12923  15A1  3196  26F6         	fcall	_setDimmerLights_Adj
 12924                           
 12925                           ;Dimmer_B1.c: 552: } else {
 12926  15A3  0008               	return
 12927  15A4                     l9978:	
 12928                           
 12929                           ;Dimmer_B1.c: 553: setDimmerLights_Adj(lights, 0);
 12930  15A4  0020               	movlb	0	; select bank0
 12931  15A5  01EB               	clrf	setDimmerLights_Adj@status
 12932  15A6  086E               	movf	setDimmerLights_Main@lights,w
 12933  15A7  3196  26F6         	fcall	_setDimmerLights_Adj
 12934  15A9  0008               	return
 12935  15AA                     __end_of_setDimmerLights_Main:	
 12936                           
 12937                           	psect	text76
 12938  16F6                     __ptext76:	
 12939 ;; *************** function _setDimmerLights_Adj *****************
 12940 ;; Defined at:
 12941 ;;		line 668 in file "../src/Dimmer_B1.c"
 12942 ;; Parameters:    Size  Location     Type
 12943 ;;  lights          1    wreg     unsigned char 
 12944 ;;  status          1   75[BANK0 ] unsigned char 
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;  lights          1   77[BANK0 ] unsigned char 
 12947 ;; Return value:  Size  Location     Type
 12948 ;;		None               void
 12949 ;; Registers used:
 12950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12960 ;;Total ram usage:        3 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    8
 12963 ;; This function calls:
 12964 ;;		_setBuz
 12965 ;;		_setDimmerLights_Line
 12966 ;;		_setPercentValue
 12967 ;;		_setProductData
 12968 ;;		_setRF_DimmerLights
 12969 ;;		_setTxData
 12970 ;; This function is called by:
 12971 ;;		_setDimmerLights_Main
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           
 12976                           ;psect for function _setDimmerLights_Adj
 12977  16F6                     _setDimmerLights_Adj:	
 12978                           
 12979                           ;incstack = 0
 12980                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12981                           ;setDimmerLights_Adj@lights stored from wreg
 12982  16F6  0020               	movlb	0	; select bank0
 12983  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12984                           
 12985                           ;Dimmer_B1.c: 670: if (status == 1) {
 12986  16F8  086B               	movf	setDimmerLights_Adj@status,w
 12987  16F9  3A01               	xorlw	1
 12988  16FA  1D03               	skipz
 12989  16FB  2F0E               	goto	l9640
 12990                           
 12991                           ;Dimmer_B1.c: 671: DimmerLights->AdjSw = 1;
 12992  16FC  0A6F               	incf	_DimmerLights,w
 12993  16FD  0086               	movwf	6
 12994  16FE  3001               	movlw	1	; select bank2/3
 12995  16FF  0087               	movwf	7
 12996  1700  1701               	bsf	1,6
 12997                           
 12998                           ;Dimmer_B1.c: 672: DimmerLights->Signal = 1;
 12999  1701  0A6F               	incf	_DimmerLights,w
 13000  1702  0086               	movwf	6
 13001  1703  3001               	movlw	1	; select bank2/3
 13002  1704  0087               	movwf	7
 13003  1705  1681               	bsf	1,5
 13004                           
 13005                           ;Dimmer_B1.c: 673: setBuz(1, 100);
 13006  1706  3064               	movlw	100
 13007  1707  00A9               	movwf	setBuz@time
 13008  1708  3000               	movlw	0
 13009  1709  00AA               	movwf	setBuz@time+1
 13010  170A  3001               	movlw	1
 13011  170B  3197  274E         	fcall	_setBuz
 13012                           
 13013                           ;Dimmer_B1.c: 674: } else if (status == 0) {
 13014  170D  0008               	return
 13015  170E                     l9640:	
 13016  170E  0020               	movlb	0	; select bank0
 13017  170F  08EB               	movf	setDimmerLights_Adj@status,f
 13018  1710  1D03               	skipz
 13019  1711  0008               	return
 13020                           
 13021                           ;Dimmer_B1.c: 675: Dimmer.Load_Status = 0;
 13022  1712  0021               	movlb	1	; select bank1
 13023  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13024                           
 13025                           ;Dimmer_B1.c: 676: setDimmerLights_Line(lights);
 13026  1714  0020               	movlb	0	; select bank0
 13027  1715  086D               	movf	setDimmerLights_Adj@lights,w
 13028  1716  319D  25B3  3196   	fcall	_setDimmerLights_Line
 13029                           
 13030                           ;Dimmer_B1.c: 677: DimmerLights->AdjSw = 0;
 13031  1719  0020               	movlb	0	; select bank0
 13032  171A  0A6F               	incf	_DimmerLights,w
 13033  171B  0086               	movwf	6
 13034  171C  3001               	movlw	1	; select bank2/3
 13035  171D  0087               	movwf	7
 13036  171E  1301               	bcf	1,6
 13037                           
 13038                           ;Dimmer_B1.c: 678: DimmerLights->Signal = 0;
 13039  171F  0A6F               	incf	_DimmerLights,w
 13040  1720  0086               	movwf	6
 13041  1721  3001               	movlw	1	; select bank2/3
 13042  1722  0087               	movwf	7
 13043  1723  1281               	bcf	1,5
 13044                           
 13045                           ;Dimmer_B1.c: 680: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13046  1724  086F               	movf	_DimmerLights,w
 13047  1725  3E04               	addlw	4
 13048  1726  0086               	movwf	6
 13049  1727  3001               	movlw	1	; select bank2/3
 13050  1728  0087               	movwf	7
 13051  1729  0801               	movf	1,w
 13052  172A  00EC               	movwf	??_setDimmerLights_Adj
 13053  172B  086F               	movf	_DimmerLights,w
 13054  172C  3E06               	addlw	6
 13055  172D  0086               	movwf	6
 13056  172E  3001               	movlw	1	; select bank2/3
 13057  172F  0087               	movwf	7
 13058  1730  086C               	movf	??_setDimmerLights_Adj,w
 13059  1731  0081               	movwf	1
 13060                           
 13061                           ;Dimmer_B1.c: 681: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13062  1732  086F               	movf	_DimmerLights,w
 13063  1733  3E04               	addlw	4
 13064  1734  0086               	movwf	6
 13065  1735  3001               	movlw	1	; select bank2/3
 13066  1736  0087               	movwf	7
 13067  1737  0801               	movf	1,w
 13068  1738  318A  224E  3196   	fcall	_setPercentValue
 13069  173B  0020               	movlb	0	; select bank0
 13070  173C  00EC               	movwf	??_setDimmerLights_Adj
 13071  173D  086C               	movf	??_setDimmerLights_Adj,w
 13072  173E  00E2               	movwf	setProductData@value
 13073  173F  086D               	movf	setDimmerLights_Adj@lights,w
 13074  1740  3E14               	addlw	20
 13075  1741  319B  23D7  3196   	fcall	_setProductData
 13076                           
 13077                           ;Dimmer_B1.c: 696: setRF_DimmerLights(lights, 1);
 13078  1744  0020               	movlb	0	; select bank0
 13079  1745  01E6               	clrf	setRF_DimmerLights@on
 13080  1746  0AE6               	incf	setRF_DimmerLights@on,f
 13081  1747  086D               	movf	setDimmerLights_Adj@lights,w
 13082  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 13083                           
 13084                           ;Dimmer_B1.c: 697: setTxData();
 13085  174B  318E  260C         	fcall	_setTxData
 13086  174D  0008               	return
 13087  174E                     __end_of_setDimmerLights_Adj:	
 13088                           
 13089                           	psect	text77
 13090  15AA                     __ptext77:	
 13091 ;; *************** function _setDimmerLights *****************
 13092 ;; Defined at:
 13093 ;;		line 630 in file "../src/Dimmer_B1.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;  lights          1    wreg     unsigned char 
 13096 ;;  status          1   75[BANK0 ] unsigned char 
 13097 ;; Auto vars:     Size  Location     Type
 13098 ;;  lights          1   77[BANK0 ] unsigned char 
 13099 ;; Return value:  Size  Location     Type
 13100 ;;		None               void
 13101 ;; Registers used:
 13102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13103 ;; Tracked objects:
 13104 ;;		On entry : 0/0
 13105 ;;		On exit  : 0/0
 13106 ;;		Unchanged: 0/0
 13107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13108 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;Total ram usage:        3 bytes
 13113 ;; Hardware stack levels used:    1
 13114 ;; Hardware stack levels required when called:    8
 13115 ;; This function calls:
 13116 ;;		_setDimmerLights_Line
 13117 ;;		_setLED
 13118 ;;		_setPercentValue
 13119 ;;		_setProductData
 13120 ;;		_setRF_DimmerLights
 13121 ;;		_setTxData
 13122 ;; This function is called by:
 13123 ;;		_setDimmerLights_Main
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127                           
 13128                           ;psect for function _setDimmerLights
 13129  15AA                     _setDimmerLights:	
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13133                           ;setDimmerLights@lights stored from wreg
 13134  15AA  0020               	movlb	0	; select bank0
 13135  15AB  00ED               	movwf	setDimmerLights@lights
 13136                           
 13137                           ;Dimmer_B1.c: 638: if (status == 1) {
 13138  15AC  086B               	movf	setDimmerLights@status,w
 13139  15AD  3A01               	xorlw	1
 13140  15AE  1D03               	skipz
 13141  15AF  2DDA               	goto	l9620
 13142                           
 13143                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 13144  15B0  0A6F               	incf	_DimmerLights,w
 13145  15B1  0086               	movwf	6
 13146  15B2  3001               	movlw	1	; select bank2/3
 13147  15B3  0087               	movwf	7
 13148  15B4  1501               	bsf	1,2
 13149                           
 13150                           ;Dimmer_B1.c: 640: Dimmer.Load_Status = 1;
 13151  15B5  0021               	movlb	1	; select bank1
 13152  15B6  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13153                           
 13154                           ;Dimmer_B1.c: 641: setDimmerLights_Line(lights);
 13155  15B7  0020               	movlb	0	; select bank0
 13156  15B8  086D               	movf	setDimmerLights@lights,w
 13157  15B9  319D  25B3  3195   	fcall	_setDimmerLights_Line
 13158                           
 13159                           ;Dimmer_B1.c: 643: setLED(lights, 0);
 13160  15BC  0020               	movlb	0	; select bank0
 13161  15BD  01A2               	clrf	setLED@command
 13162  15BE  086D               	movf	setDimmerLights@lights,w
 13163  15BF  3196  264F  3195   	fcall	_setLED
 13164                           
 13165                           ;Dimmer_B1.c: 648: DimmerLights->DimmingValue = ((char)(75*0.8));
 13166  15C2  303C               	movlw	60
 13167  15C3  0020               	movlb	0	; select bank0
 13168  15C4  00EC               	movwf	??_setDimmerLights
 13169  15C5  086F               	movf	_DimmerLights,w
 13170  15C6  3E04               	addlw	4
 13171  15C7  0086               	movwf	6
 13172  15C8  3001               	movlw	1	; select bank2/3
 13173  15C9  0087               	movwf	7
 13174  15CA  086C               	movf	??_setDimmerLights,w
 13175  15CB  0081               	movwf	1
 13176                           
 13177                           ;Dimmer_B1.c: 650: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 13178  15CC  303C               	movlw	60
 13179  15CD  318A  224E  3195   	fcall	_setPercentValue
 13180  15D0  0020               	movlb	0	; select bank0
 13181  15D1  00EC               	movwf	??_setDimmerLights
 13182  15D2  086C               	movf	??_setDimmerLights,w
 13183  15D3  00E2               	movwf	setProductData@value
 13184  15D4  086D               	movf	setDimmerLights@lights,w
 13185  15D5  3E14               	addlw	20
 13186  15D6  319B  23D7  3195   	fcall	_setProductData
 13187                           
 13188                           ;Dimmer_B1.c: 652: } else if (status == 0) {
 13189  15D9  2DF0               	goto	l9630
 13190  15DA                     l9620:	
 13191  15DA  0020               	movlb	0	; select bank0
 13192  15DB  08EB               	movf	setDimmerLights@status,f
 13193  15DC  1D03               	skipz
 13194  15DD  2DF0               	goto	l9630
 13195                           
 13196                           ;Dimmer_B1.c: 653: DimmerLights->StatusFlag = 0;
 13197  15DE  0A6F               	incf	_DimmerLights,w
 13198  15DF  0086               	movwf	6
 13199  15E0  3001               	movlw	1	; select bank2/3
 13200  15E1  0087               	movwf	7
 13201  15E2  1101               	bcf	1,2
 13202                           
 13203                           ;Dimmer_B1.c: 654: Dimmer.Load_Status = 0;
 13204  15E3  0021               	movlb	1	; select bank1
 13205  15E4  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13206                           
 13207                           ;Dimmer_B1.c: 655: setDimmerLights_Line(0);
 13208  15E5  3000               	movlw	0
 13209  15E6  319D  25B3  3195   	fcall	_setDimmerLights_Line
 13210                           
 13211                           ;Dimmer_B1.c: 657: setLED(lights, 1);
 13212  15E9  0020               	movlb	0	; select bank0
 13213  15EA  01A2               	clrf	setLED@command
 13214  15EB  0AA2               	incf	setLED@command,f
 13215  15EC  086D               	movf	setDimmerLights@lights,w
 13216  15ED  3196  264F  3195   	fcall	_setLED
 13217  15F0                     l9630:	
 13218                           
 13219                           ;Dimmer_B1.c: 659: }
 13220                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 13221  15F0  0020               	movlb	0	; select bank0
 13222  15F1  086B               	movf	setDimmerLights@status,w
 13223  15F2  00EC               	movwf	??_setDimmerLights
 13224  15F3  086C               	movf	??_setDimmerLights,w
 13225  15F4  00E6               	movwf	setRF_DimmerLights@on
 13226  15F5  086D               	movf	setDimmerLights@lights,w
 13227  15F6  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13228                           
 13229                           ;Dimmer_B1.c: 663: setTxData();
 13230  15F9  318E  260C         	fcall	_setTxData
 13231  15FB  0008               	return
 13232  15FC                     __end_of_setDimmerLights:	
 13233                           
 13234                           	psect	text78
 13235  0E0C                     __ptext78:	
 13236 ;; *************** function _setTxData *****************
 13237 ;; Defined at:
 13238 ;;		line 165 in file "../src/RF_Control_B1.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;		None
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  i               1    0        unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;		None               void
 13245 ;; Registers used:
 13246 ;;		wreg, fsr1l, fsr1h
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        1 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    5
 13259 ;; This function calls:
 13260 ;;		Nothing
 13261 ;; This function is called by:
 13262 ;;		_setDimmerLights
 13263 ;;		_setDimmerLights_Adj
 13264 ;;		_getRxData
 13265 ;;		_setControl_Lights_Table
 13266 ;;		_setRFSW_Control
 13267 ;;		_setRFSW_AdjControl
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           
 13272                           ;psect for function _setTxData
 13273  0E0C                     _setTxData:	
 13274                           
 13275                           ;RF_Control_B1.c: 166: char i;
 13276                           ;RF_Control_B1.c: 167: if (RF1.Enable == 1) {
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _setTxData: [wregfsr1]
 13280  0E0C  0021               	movlb	1	; select bank1
 13281  0E0D  1C3A               	btfss	_RF1^(0+128),0
 13282  0E0E  0008               	return
 13283                           
 13284                           ;RF_Control_B1.c: 169: if (RF1.TransceiveGO == 0) {
 13285  0E0F  193A               	btfsc	_RF1^(0+128),2
 13286  0E10  0008               	return
 13287                           
 13288                           ;RF_Control_B1.c: 170: RF1.TransceiveGO = 1;
 13289  0E11  153A               	bsf	_RF1^(0+128),2
 13290                           
 13291                           ;RF_Control_B1.c: 171: RF1.RunTime = 20;
 13292  0E12  3014               	movlw	20
 13293  0E13  00C1               	movwf	(_RF1^(0+128)+7)
 13294  0E14  3000               	movlw	0
 13295  0E15  00C2               	movwf	(_RF1^(0+128)+8)
 13296                           
 13297                           ;RF_Control_B1.c: 183: RF_Data[0] = 0x63;
 13298  0E16  3063               	movlw	99
 13299  0E17  0020               	movlb	0	; select bank0
 13300  0E18  00A0               	movwf	??_setTxData
 13301  0E19  0820               	movf	??_setTxData,w
 13302  0E1A  0023               	movlb	3	; select bank3
 13303  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13304                           
 13305                           ;RF_Control_B1.c: 184: RF_Data[1] = 0x02;
 13306  0E1C  3002               	movlw	2
 13307  0E1D  0020               	movlb	0	; select bank0
 13308  0E1E  00A0               	movwf	??_setTxData
 13309  0E1F  0820               	movf	??_setTxData,w
 13310  0E20  0023               	movlb	3	; select bank3
 13311  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13312                           
 13313                           ;RF_Control_B1.c: 186: RF_Data[2] = product->Data[2];
 13314  0E22  0879               	movf	_product,w
 13315  0E23  0086               	movwf	6
 13316  0E24  3002               	movlw	2	; select bank4/5
 13317  0E25  0087               	movwf	7
 13318  0E26  3002               	movlw	2	; select bank4/5
 13319  0E27  3F42               	moviw [2]fsr1
 13320  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13321                           
 13322                           ;RF_Control_B1.c: 187: RF_Data[3] = product->Data[3];
 13323  0E29  0879               	movf	_product,w
 13324  0E2A  0086               	movwf	6
 13325  0E2B  3002               	movlw	2	; select bank4/5
 13326  0E2C  0087               	movwf	7
 13327  0E2D  3002               	movlw	2	; select bank4/5
 13328  0E2E  3F43               	moviw [3]fsr1
 13329  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13330                           
 13331                           ;RF_Control_B1.c: 188: RF_Data[4] = product->Data[4];
 13332  0E30  0879               	movf	_product,w
 13333  0E31  0086               	movwf	6
 13334  0E32  3002               	movlw	2	; select bank4/5
 13335  0E33  0087               	movwf	7
 13336  0E34  3002               	movlw	2	; select bank4/5
 13337  0E35  3F44               	moviw [4]fsr1
 13338  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13339                           
 13340                           ;RF_Control_B1.c: 189: RF_Data[5] = product->Data[5];
 13341  0E37  0879               	movf	_product,w
 13342  0E38  0086               	movwf	6
 13343  0E39  3002               	movlw	2	; select bank4/5
 13344  0E3A  0087               	movwf	7
 13345  0E3B  3002               	movlw	2	; select bank4/5
 13346  0E3C  3F45               	moviw [5]fsr1
 13347  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13348                           
 13349                           ;RF_Control_B1.c: 190: RF_Data[6] = product->Data[6];
 13350  0E3E  0879               	movf	_product,w
 13351  0E3F  0086               	movwf	6
 13352  0E40  3002               	movlw	2	; select bank4/5
 13353  0E41  0087               	movwf	7
 13354  0E42  3002               	movlw	2	; select bank4/5
 13355  0E43  3F46               	moviw [6]fsr1
 13356  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13357                           
 13358                           ;RF_Control_B1.c: 191: RF_Data[7] = product->Data[7];
 13359  0E45  0879               	movf	_product,w
 13360  0E46  0086               	movwf	6
 13361  0E47  3002               	movlw	2	; select bank4/5
 13362  0E48  0087               	movwf	7
 13363  0E49  3002               	movlw	2	; select bank4/5
 13364  0E4A  3F47               	moviw [7]fsr1
 13365  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13366                           
 13367                           ;RF_Control_B1.c: 192: RF_Data[8] = product->Data[8];
 13368  0E4C  0879               	movf	_product,w
 13369  0E4D  0086               	movwf	6
 13370  0E4E  3002               	movlw	2	; select bank4/5
 13371  0E4F  0087               	movwf	7
 13372  0E50  3002               	movlw	2	; select bank4/5
 13373  0E51  3F48               	moviw [8]fsr1
 13374  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13375                           
 13376                           ;RF_Control_B1.c: 193: RF_Data[9] = product->Data[9];
 13377  0E53  0879               	movf	_product,w
 13378  0E54  0086               	movwf	6
 13379  0E55  3002               	movlw	2	; select bank4/5
 13380  0E56  0087               	movwf	7
 13381  0E57  3002               	movlw	2	; select bank4/5
 13382  0E58  3F49               	moviw [9]fsr1
 13383  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13384                           
 13385                           ;RF_Control_B1.c: 194: RF_Data[10] = product->Data[10];
 13386  0E5A  0879               	movf	_product,w
 13387  0E5B  0086               	movwf	6
 13388  0E5C  3002               	movlw	2	; select bank4/5
 13389  0E5D  0087               	movwf	7
 13390  0E5E  3002               	movlw	2	; select bank4/5
 13391  0E5F  3F4A               	moviw [10]fsr1
 13392  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13393                           
 13394                           ;RF_Control_B1.c: 195: RF_Data[11] = product->Data[11];
 13395  0E61  0879               	movf	_product,w
 13396  0E62  0086               	movwf	6
 13397  0E63  3002               	movlw	2	; select bank4/5
 13398  0E64  0087               	movwf	7
 13399  0E65  3002               	movlw	2	; select bank4/5
 13400  0E66  3F4B               	moviw [11]fsr1
 13401  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13402                           
 13403                           ;RF_Control_B1.c: 196: RF_Data[12] = product->Data[12];
 13404  0E68  0879               	movf	_product,w
 13405  0E69  0086               	movwf	6
 13406  0E6A  3002               	movlw	2	; select bank4/5
 13407  0E6B  0087               	movwf	7
 13408  0E6C  3002               	movlw	2	; select bank4/5
 13409  0E6D  3F4C               	moviw [12]fsr1
 13410  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13411                           
 13412                           ;RF_Control_B1.c: 197: RF_Data[13] = product->Data[13];
 13413  0E6F  0879               	movf	_product,w
 13414  0E70  0086               	movwf	6
 13415  0E71  3002               	movlw	2	; select bank4/5
 13416  0E72  0087               	movwf	7
 13417  0E73  3002               	movlw	2	; select bank4/5
 13418  0E74  3F4D               	moviw [13]fsr1
 13419  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13420                           
 13421                           ;RF_Control_B1.c: 198: RF_Data[14] = product->Data[14];
 13422  0E76  0879               	movf	_product,w
 13423  0E77  0086               	movwf	6
 13424  0E78  3002               	movlw	2	; select bank4/5
 13425  0E79  0087               	movwf	7
 13426  0E7A  3002               	movlw	2	; select bank4/5
 13427  0E7B  3F4E               	moviw [14]fsr1
 13428  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13429                           
 13430                           ;RF_Control_B1.c: 199: RF_Data[15] = product->Data[15];
 13431  0E7D  0879               	movf	_product,w
 13432  0E7E  0086               	movwf	6
 13433  0E7F  3002               	movlw	2	; select bank4/5
 13434  0E80  0087               	movwf	7
 13435  0E81  3002               	movlw	2	; select bank4/5
 13436  0E82  3F4F               	moviw [15]fsr1
 13437  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13438                           
 13439                           ;RF_Control_B1.c: 200: RF_Data[16] = product->Data[16];
 13440  0E84  0879               	movf	_product,w
 13441  0E85  0086               	movwf	6
 13442  0E86  3002               	movlw	2	; select bank4/5
 13443  0E87  0087               	movwf	7
 13444  0E88  3002               	movlw	2	; select bank4/5
 13445  0E89  3F50               	moviw [16]fsr1
 13446  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13447                           
 13448                           ;RF_Control_B1.c: 201: RF_Data[17] = product->Data[17];
 13449  0E8B  0879               	movf	_product,w
 13450  0E8C  0086               	movwf	6
 13451  0E8D  3002               	movlw	2	; select bank4/5
 13452  0E8E  0087               	movwf	7
 13453  0E8F  3002               	movlw	2	; select bank4/5
 13454  0E90  3F51               	moviw [17]fsr1
 13455  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13456                           
 13457                           ;RF_Control_B1.c: 202: RF_Data[18] = product->Data[18];
 13458  0E92  0879               	movf	_product,w
 13459  0E93  0086               	movwf	6
 13460  0E94  3002               	movlw	2	; select bank4/5
 13461  0E95  0087               	movwf	7
 13462  0E96  3002               	movlw	2	; select bank4/5
 13463  0E97  3F52               	moviw [18]fsr1
 13464  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13465                           
 13466                           ;RF_Control_B1.c: 203: RF_Data[19] = product->Data[19];
 13467  0E99  0879               	movf	_product,w
 13468  0E9A  0086               	movwf	6
 13469  0E9B  3002               	movlw	2	; select bank4/5
 13470  0E9C  0087               	movwf	7
 13471  0E9D  3002               	movlw	2	; select bank4/5
 13472  0E9E  3F53               	moviw [19]fsr1
 13473  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13474                           
 13475                           ;RF_Control_B1.c: 204: RF_Data[20] = 210;
 13476  0EA0  30D2               	movlw	210
 13477  0EA1  0020               	movlb	0	; select bank0
 13478  0EA2  00A0               	movwf	??_setTxData
 13479  0EA3  0820               	movf	??_setTxData,w
 13480  0EA4  0023               	movlb	3	; select bank3
 13481  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13482  0EA6  0008               	return
 13483  0EA7                     __end_of_setTxData:	
 13484                           
 13485                           	psect	text79
 13486  17A7                     __ptext79:	
 13487 ;; *************** function _setRF_DimmerLights *****************
 13488 ;; Defined at:
 13489 ;;		line 435 in file "../src/RF_Control_B1.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;  lights          1    wreg     unsigned char 
 13492 ;;  on              1   70[BANK0 ] unsigned char 
 13493 ;; Auto vars:     Size  Location     Type
 13494 ;;  lights          1   74[BANK0 ] unsigned char 
 13495 ;;  status          1   73[BANK0 ] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;		None               void
 13498 ;; Registers used:
 13499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;Total ram usage:        5 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    6
 13512 ;; This function calls:
 13513 ;;		_setProductData
 13514 ;; This function is called by:
 13515 ;;		_setDimmerLights
 13516 ;;		_setDimmerLights_Adj
 13517 ;;		_setRFSW_Control
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           
 13522                           ;psect for function _setRF_DimmerLights
 13523  17A7                     _setRF_DimmerLights:	
 13524                           
 13525                           ;incstack = 0
 13526                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13527                           ;setRF_DimmerLights@lights stored from wreg
 13528  17A7  0020               	movlb	0	; select bank0
 13529  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13530                           
 13531                           ;RF_Control_B1.c: 436: char status = 1;
 13532  17A9  01E9               	clrf	setRF_DimmerLights@status
 13533  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13534                           
 13535                           ;RF_Control_B1.c: 437: status <<= (lights - 1);
 13536  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13537  17AC  3EFF               	addlw	-1
 13538  17AD  0A89               	incf	9,f
 13539  17AE  2FB1               	goto	u9960
 13540  17AF                     u9965:	
 13541  17AF  1003               	clrc
 13542  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13543  17B1                     u9960:	
 13544  17B1  3EFF               	addlw	-1
 13545  17B2  1D03               	skipz
 13546  17B3  2FAF               	goto	u9965
 13547                           
 13548                           ;RF_Control_B1.c: 438: setProductData(11, lights);
 13549  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13550  17B5  00E7               	movwf	??_setRF_DimmerLights
 13551  17B6  0867               	movf	??_setRF_DimmerLights,w
 13552  17B7  00E2               	movwf	setProductData@value
 13553  17B8  300B               	movlw	11
 13554  17B9  319B  23D7  3197   	fcall	_setProductData
 13555                           
 13556                           ;RF_Control_B1.c: 446: setProductData(9, product->Data[20 + lights]);
 13557  17BC  0020               	movlb	0	; select bank0
 13558  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13559  17BE  3E14               	addlw	20
 13560  17BF  0779               	addwf	_product,w
 13561  17C0  00E7               	movwf	??_setRF_DimmerLights
 13562  17C1  0867               	movf	??_setRF_DimmerLights,w
 13563  17C2  0086               	movwf	6
 13564  17C3  3002               	movlw	2	; select bank4/5
 13565  17C4  0087               	movwf	7
 13566  17C5  0801               	movf	1,w
 13567  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13568  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13569  17C8  00E2               	movwf	setProductData@value
 13570  17C9  3009               	movlw	9
 13571  17CA  319B  23D7  3197   	fcall	_setProductData
 13572                           
 13573                           ;RF_Control_B1.c: 447: setProductData(17, product->Data[26 + lights]);
 13574  17CD  0020               	movlb	0	; select bank0
 13575  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13576  17CF  3E1A               	addlw	26
 13577  17D0  0779               	addwf	_product,w
 13578  17D1  00E7               	movwf	??_setRF_DimmerLights
 13579  17D2  0867               	movf	??_setRF_DimmerLights,w
 13580  17D3  0086               	movwf	6
 13581  17D4  3002               	movlw	2	; select bank4/5
 13582  17D5  0087               	movwf	7
 13583  17D6  0801               	movf	1,w
 13584  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13585  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13586  17D9  00E2               	movwf	setProductData@value
 13587  17DA  3011               	movlw	17
 13588  17DB  319B  23D7  3197   	fcall	_setProductData
 13589                           
 13590                           ;RF_Control_B1.c: 448: if (on == 1) {
 13591  17DE  0020               	movlb	0	; select bank0
 13592  17DF  0866               	movf	setRF_DimmerLights@on,w
 13593  17E0  3A01               	xorlw	1
 13594  17E1  1D03               	skipz
 13595  17E2  2FF1               	goto	l9060
 13596                           
 13597                           ;RF_Control_B1.c: 449: setProductData(15, (product->Data[15] | status));
 13598  17E3  0879               	movf	_product,w
 13599  17E4  3E0F               	addlw	15
 13600  17E5  0086               	movwf	6
 13601  17E6  3002               	movlw	2	; select bank4/5
 13602  17E7  0087               	movwf	7
 13603  17E8  0801               	movf	1,w
 13604  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13605  17EA  00E7               	movwf	??_setRF_DimmerLights
 13606  17EB  0867               	movf	??_setRF_DimmerLights,w
 13607  17EC  00E2               	movwf	setProductData@value
 13608  17ED  300F               	movlw	15
 13609  17EE  319B  23D7         	fcall	_setProductData
 13610                           
 13611                           ;RF_Control_B1.c: 450: } else {
 13612  17F0  0008               	return
 13613  17F1                     l9060:	
 13614                           
 13615                           ;RF_Control_B1.c: 451: setProductData(15, (product->Data[15]&(~status)));
 13616  17F1  0879               	movf	_product,w
 13617  17F2  3E0F               	addlw	15
 13618  17F3  0086               	movwf	6
 13619  17F4  3002               	movlw	2	; select bank4/5
 13620  17F5  0087               	movwf	7
 13621  17F6  0020               	movlb	0	; select bank0
 13622  17F7  0969               	comf	setRF_DimmerLights@status,w
 13623  17F8  0501               	andwf	1,w
 13624  17F9  00E7               	movwf	??_setRF_DimmerLights
 13625  17FA  0867               	movf	??_setRF_DimmerLights,w
 13626  17FB  00E2               	movwf	setProductData@value
 13627  17FC  300F               	movlw	15
 13628  17FD  319B  23D7         	fcall	_setProductData
 13629  17FF  0008               	return
 13630  1800                     __end_of_setRF_DimmerLights:	
 13631                           
 13632                           	psect	text80
 13633  0A4E                     __ptext80:	
 13634 ;; *************** function _setPercentValue *****************
 13635 ;; Defined at:
 13636 ;;		line 1030 in file "../src/Dimmer_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  value           1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  value           1   62[BANK0 ] unsigned char 
 13641 ;;  i               3   63[BANK0 ] float 
 13642 ;; Return value:  Size  Location     Type
 13643 ;;                  1    wreg      unsigned char 
 13644 ;; Registers used:
 13645 ;;		wreg, status,2, status,0, pclath, cstack
 13646 ;; Tracked objects:
 13647 ;;		On entry : 0/0
 13648 ;;		On exit  : 0/0
 13649 ;;		Unchanged: 0/0
 13650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13655 ;;Total ram usage:        6 bytes
 13656 ;; Hardware stack levels used:    1
 13657 ;; Hardware stack levels required when called:    7
 13658 ;; This function calls:
 13659 ;;		___awtoft
 13660 ;;		___ftadd
 13661 ;;		___ftdiv
 13662 ;;		___ftneg
 13663 ;;		___fttol
 13664 ;; This function is called by:
 13665 ;;		_setDimmerLights
 13666 ;;		_setDimmerLights_Adj
 13667 ;;		_Flash_Memory_Initialization
 13668 ;; This function uses a non-reentrant model
 13669 ;;
 13670                           
 13671                           
 13672                           ;psect for function _setPercentValue
 13673  0A4E                     _setPercentValue:	
 13674                           
 13675                           ;incstack = 0
 13676                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13677                           ;setPercentValue@value stored from wreg
 13678  0A4E  0020               	movlb	0	; select bank0
 13679  0A4F  00DE               	movwf	setPercentValue@value
 13680                           
 13681                           ;Dimmer_B1.c: 1038: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 13682  0A50  3000               	movlw	0
 13683  0A51  00DF               	movwf	setPercentValue@i
 13684  0A52  3040               	movlw	64
 13685  0A53  00E0               	movwf	setPercentValue@i+1
 13686  0A54  3042               	movlw	66
 13687  0A55  00E1               	movwf	setPercentValue@i+2
 13688                           
 13689                           ;Dimmer_B1.c: 1039: i /= 100;
 13690  0A56  3000               	movlw	0
 13691  0A57  00AE               	movwf	___ftdiv@f2
 13692  0A58  30C8               	movlw	200
 13693  0A59  00AF               	movwf	___ftdiv@f2+1
 13694  0A5A  3042               	movlw	66
 13695  0A5B  00B0               	movwf	___ftdiv@f2+2
 13696  0A5C  085F               	movf	setPercentValue@i,w
 13697  0A5D  00B1               	movwf	___ftdiv@f1
 13698  0A5E  0860               	movf	setPercentValue@i+1,w
 13699  0A5F  00B2               	movwf	___ftdiv@f1+1
 13700  0A60  0861               	movf	setPercentValue@i+2,w
 13701  0A61  00B3               	movwf	___ftdiv@f1+2
 13702  0A62  318E  26A7  318A   	fcall	___ftdiv
 13703  0A65  0020               	movlb	0	; select bank0
 13704  0A66  082E               	movf	?___ftdiv,w
 13705  0A67  00DF               	movwf	setPercentValue@i
 13706  0A68  082F               	movf	?___ftdiv+1,w
 13707  0A69  00E0               	movwf	setPercentValue@i+1
 13708  0A6A  0830               	movf	?___ftdiv+2,w
 13709  0A6B  00E1               	movwf	setPercentValue@i+2
 13710                           
 13711                           ;Dimmer_B1.c: 1041: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 13712  0A6C  085E               	movf	setPercentValue@value,w
 13713  0A6D  00DC               	movwf	??_setPercentValue
 13714  0A6E  01DD               	clrf	??_setPercentValue+1
 13715  0A6F  09DC               	comf	??_setPercentValue,f
 13716  0A70  09DD               	comf	??_setPercentValue+1,f
 13717  0A71  0ADC               	incf	??_setPercentValue,f
 13718  0A72  1903               	skipnz
 13719  0A73  0ADD               	incf	??_setPercentValue+1,f
 13720  0A74  085C               	movf	??_setPercentValue,w
 13721  0A75  3E3C               	addlw	60
 13722  0A76  00A8               	movwf	___awtoft@c
 13723  0A77  3000               	movlw	0
 13724  0A78  3D5D               	addwfc	??_setPercentValue+1,w
 13725  0A79  00A9               	movwf	___awtoft@c+1
 13726  0A7A  319F  2746  318A   	fcall	___awtoft
 13727  0A7D  0020               	movlb	0	; select bank0
 13728  0A7E  0828               	movf	?___awtoft,w
 13729  0A7F  00B1               	movwf	___ftdiv@f1
 13730  0A80  0829               	movf	?___awtoft+1,w
 13731  0A81  00B2               	movwf	___ftdiv@f1+1
 13732  0A82  082A               	movf	?___awtoft+2,w
 13733  0A83  00B3               	movwf	___ftdiv@f1+2
 13734  0A84  085F               	movf	setPercentValue@i,w
 13735  0A85  00AE               	movwf	___ftdiv@f2
 13736  0A86  0860               	movf	setPercentValue@i+1,w
 13737  0A87  00AF               	movwf	___ftdiv@f2+1
 13738  0A88  0861               	movf	setPercentValue@i+2,w
 13739  0A89  00B0               	movwf	___ftdiv@f2+2
 13740  0A8A  318E  26A7  318A   	fcall	___ftdiv
 13741  0A8D  0020               	movlb	0	; select bank0
 13742  0A8E  082E               	movf	?___ftdiv,w
 13743  0A8F  00BE               	movwf	___ftneg@f1
 13744  0A90  082F               	movf	?___ftdiv+1,w
 13745  0A91  00BF               	movwf	___ftneg@f1+1
 13746  0A92  0830               	movf	?___ftdiv+2,w
 13747  0A93  00C0               	movwf	___ftneg@f1+2
 13748  0A94  319B  2342  318A   	fcall	___ftneg
 13749  0A97  0020               	movlb	0	; select bank0
 13750  0A98  083E               	movf	?___ftneg,w
 13751  0A99  00C4               	movwf	___ftadd@f2
 13752  0A9A  083F               	movf	?___ftneg+1,w
 13753  0A9B  00C5               	movwf	___ftadd@f2+1
 13754  0A9C  0840               	movf	?___ftneg+2,w
 13755  0A9D  00C6               	movwf	___ftadd@f2+2
 13756  0A9E  3000               	movlw	0
 13757  0A9F  00C1               	movwf	___ftadd@f1
 13758  0AA0  30C8               	movlw	200
 13759  0AA1  00C2               	movwf	___ftadd@f1+1
 13760  0AA2  3042               	movlw	66
 13761  0AA3  00C3               	movwf	___ftadd@f1+2
 13762  0AA4  3184  2469  318A   	fcall	___ftadd
 13763  0AA7  0020               	movlb	0	; select bank0
 13764  0AA8  0841               	movf	?___ftadd,w
 13765  0AA9  00CE               	movwf	___fttol@f1
 13766  0AAA  0842               	movf	?___ftadd+1,w
 13767  0AAB  00CF               	movwf	___fttol@f1+1
 13768  0AAC  0843               	movf	?___ftadd+2,w
 13769  0AAD  00D0               	movwf	___fttol@f1+2
 13770  0AAE  318C  24EE         	fcall	___fttol
 13771  0AB0  0020               	movlb	0	; select bank0
 13772  0AB1  084E               	movf	?___fttol,w
 13773  0AB2  0008               	return
 13774  0AB3                     __end_of_setPercentValue:	
 13775                           
 13776                           	psect	text81
 13777  0CEE                     __ptext81:	
 13778 ;; *************** function ___fttol *****************
 13779 ;; Defined at:
 13780 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  f1              3   46[BANK0 ] float 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  lval            4   55[BANK0 ] unsigned long 
 13785 ;;  exp1            1   59[BANK0 ] unsigned char 
 13786 ;;  sign1           1   54[BANK0 ] unsigned char 
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  4   46[BANK0 ] long 
 13789 ;; Registers used:
 13790 ;;		wreg, status,2, status,0
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13796 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;Total ram usage:       14 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    5
 13803 ;; This function calls:
 13804 ;;		Nothing
 13805 ;; This function is called by:
 13806 ;;		_getPercentValue
 13807 ;;		_setPercentValue
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           
 13812                           ;psect for function ___fttol
 13813  0CEE                     ___fttol:	
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13817  0CEE  0020               	movlb	0	; select bank0
 13818  0CEF  084E               	movf	___fttol@f1,w
 13819  0CF0  00D2               	movwf	??___fttol
 13820  0CF1  084F               	movf	___fttol@f1+1,w
 13821  0CF2  00D3               	movwf	??___fttol+1
 13822  0CF3  0850               	movf	___fttol@f1+2,w
 13823  0CF4  00D4               	movwf	??___fttol+2
 13824  0CF5  1003               	clrc
 13825  0CF6  0D53               	rlf	??___fttol+1,w
 13826  0CF7  0D54               	rlf	??___fttol+2,w
 13827  0CF8  00D5               	movwf	??___fttol+3
 13828  0CF9  0855               	movf	??___fttol+3,w
 13829  0CFA  00DB               	movwf	___fttol@exp1
 13830  0CFB  08DB               	movf	___fttol@exp1,f
 13831  0CFC  1D03               	skipz
 13832  0CFD  2D07               	goto	l8804
 13833  0CFE  3000               	movlw	0
 13834  0CFF  00D1               	movwf	?___fttol+3
 13835  0D00  3000               	movlw	0
 13836  0D01  00D0               	movwf	?___fttol+2
 13837  0D02  3000               	movlw	0
 13838  0D03  00CF               	movwf	?___fttol+1
 13839  0D04  3000               	movlw	0
 13840  0D05  00CE               	movwf	?___fttol
 13841  0D06  0008               	return
 13842  0D07                     l8804:	
 13843  0D07  084E               	movf	___fttol@f1,w
 13844  0D08  00D2               	movwf	??___fttol
 13845  0D09  084F               	movf	___fttol@f1+1,w
 13846  0D0A  00D3               	movwf	??___fttol+1
 13847  0D0B  0850               	movf	___fttol@f1+2,w
 13848  0D0C  00D4               	movwf	??___fttol+2
 13849  0D0D  3017               	movlw	23
 13850  0D0E                     u9505:	
 13851  0D0E  36D4               	lsrf	??___fttol+2,f
 13852  0D0F  0CD3               	rrf	??___fttol+1,f
 13853  0D10  0CD2               	rrf	??___fttol,f
 13854  0D11  0B89               	decfsz	9,f
 13855  0D12  2D0E               	goto	u9505
 13856  0D13  0852               	movf	??___fttol,w
 13857  0D14  00D5               	movwf	??___fttol+3
 13858  0D15  0855               	movf	??___fttol+3,w
 13859  0D16  00D6               	movwf	___fttol@sign1
 13860  0D17  17CF               	bsf	___fttol@f1+1,7
 13861  0D18  30FF               	movlw	255
 13862  0D19  05CE               	andwf	___fttol@f1,f
 13863  0D1A  30FF               	movlw	255
 13864  0D1B  05CF               	andwf	___fttol@f1+1,f
 13865  0D1C  3000               	movlw	0
 13866  0D1D  05D0               	andwf	___fttol@f1+2,f
 13867  0D1E  084E               	movf	___fttol@f1,w
 13868  0D1F  00D7               	movwf	___fttol@lval
 13869  0D20  084F               	movf	___fttol@f1+1,w
 13870  0D21  00D8               	movwf	___fttol@lval+1
 13871  0D22  0850               	movf	___fttol@f1+2,w
 13872  0D23  00D9               	movwf	___fttol@lval+2
 13873  0D24  01DA               	clrf	___fttol@lval+3
 13874  0D25  308E               	movlw	142
 13875  0D26  02DB               	subwf	___fttol@exp1,f
 13876  0D27  1FDB               	btfss	___fttol@exp1,7
 13877  0D28  2D45               	goto	l8824
 13878  0D29  085B               	movf	___fttol@exp1,w
 13879  0D2A  3A80               	xorlw	128
 13880  0D2B  3E8F               	addlw	143
 13881  0D2C  1803               	skipnc
 13882  0D2D  2D37               	goto	l8822
 13883  0D2E  3000               	movlw	0
 13884  0D2F  00D1               	movwf	?___fttol+3
 13885  0D30  3000               	movlw	0
 13886  0D31  00D0               	movwf	?___fttol+2
 13887  0D32  3000               	movlw	0
 13888  0D33  00CF               	movwf	?___fttol+1
 13889  0D34  3000               	movlw	0
 13890  0D35  00CE               	movwf	?___fttol
 13891  0D36  0008               	return
 13892  0D37                     l8822:	
 13893  0D37  3001               	movlw	1
 13894  0D38                     u9535:	
 13895  0D38  36DA               	lsrf	___fttol@lval+3,f
 13896  0D39  0CD9               	rrf	___fttol@lval+2,f
 13897  0D3A  0CD8               	rrf	___fttol@lval+1,f
 13898  0D3B  0CD7               	rrf	___fttol@lval,f
 13899  0D3C  0B89               	decfsz	9,f
 13900  0D3D  2D38               	goto	u9535
 13901  0D3E  3001               	movlw	1
 13902  0D3F  00D2               	movwf	??___fttol
 13903  0D40  0852               	movf	??___fttol,w
 13904  0D41  07DB               	addwf	___fttol@exp1,f
 13905  0D42  1903               	btfsc	3,2
 13906  0D43  2D5E               	goto	l8834
 13907  0D44  2D37               	goto	l8822
 13908  0D45                     l8824:	
 13909  0D45  3018               	movlw	24
 13910  0D46  025B               	subwf	___fttol@exp1,w
 13911  0D47  1C03               	skipc
 13912  0D48  2D5B               	goto	l8832
 13913  0D49  3000               	movlw	0
 13914  0D4A  00D1               	movwf	?___fttol+3
 13915  0D4B  3000               	movlw	0
 13916  0D4C  00D0               	movwf	?___fttol+2
 13917  0D4D  3000               	movlw	0
 13918  0D4E  00CF               	movwf	?___fttol+1
 13919  0D4F  3000               	movlw	0
 13920  0D50  00CE               	movwf	?___fttol
 13921  0D51  0008               	return
 13922  0D52                     l8830:	
 13923  0D52  3001               	movlw	1
 13924  0D53                     u9565:	
 13925  0D53  35D7               	lslf	___fttol@lval,f
 13926  0D54  0DD8               	rlf	___fttol@lval+1,f
 13927  0D55  0DD9               	rlf	___fttol@lval+2,f
 13928  0D56  0DDA               	rlf	___fttol@lval+3,f
 13929  0D57  0B89               	decfsz	9,f
 13930  0D58  2D53               	goto	u9565
 13931  0D59  3001               	movlw	1
 13932  0D5A  02DB               	subwf	___fttol@exp1,f
 13933  0D5B                     l8832:	
 13934  0D5B  08DB               	movf	___fttol@exp1,f
 13935  0D5C  1D03               	skipz
 13936  0D5D  2D52               	goto	l8830
 13937  0D5E                     l8834:	
 13938  0D5E  0856               	movf	___fttol@sign1,w
 13939  0D5F  1903               	btfsc	3,2
 13940  0D60  2D6C               	goto	l8838
 13941  0D61  09D7               	comf	___fttol@lval,f
 13942  0D62  09D8               	comf	___fttol@lval+1,f
 13943  0D63  09D9               	comf	___fttol@lval+2,f
 13944  0D64  09DA               	comf	___fttol@lval+3,f
 13945  0D65  0AD7               	incf	___fttol@lval,f
 13946  0D66  1903               	skipnz
 13947  0D67  0AD8               	incf	___fttol@lval+1,f
 13948  0D68  1903               	skipnz
 13949  0D69  0AD9               	incf	___fttol@lval+2,f
 13950  0D6A  1903               	skipnz
 13951  0D6B  0ADA               	incf	___fttol@lval+3,f
 13952  0D6C                     l8838:	
 13953  0D6C  085A               	movf	___fttol@lval+3,w
 13954  0D6D  00D1               	movwf	?___fttol+3
 13955  0D6E  0859               	movf	___fttol@lval+2,w
 13956  0D6F  00D0               	movwf	?___fttol+2
 13957  0D70  0858               	movf	___fttol@lval+1,w
 13958  0D71  00CF               	movwf	?___fttol+1
 13959  0D72  0857               	movf	___fttol@lval,w
 13960  0D73  00CE               	movwf	?___fttol
 13961  0D74  0008               	return
 13962  0D75                     __end_of___fttol:	
 13963                           
 13964                           	psect	text82
 13965  1B42                     __ptext82:	
 13966 ;; *************** function ___ftneg *****************
 13967 ;; Defined at:
 13968 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  f1              3   30[BANK0 ] float 
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;		None
 13973 ;; Return value:  Size  Location     Type
 13974 ;;                  3   30[BANK0 ] float 
 13975 ;; Registers used:
 13976 ;;		wreg
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13982 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;Total ram usage:        3 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    5
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		_getPercentValue
 13993 ;;		_setPercentValue
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           
 13998                           ;psect for function ___ftneg
 13999  1B42                     ___ftneg:	
 14000                           
 14001                           ;incstack = 0
 14002                           ; Regs used in ___ftneg: [wreg]
 14003  1B42  0020               	movlb	0	; select bank0
 14004  1B43  0840               	movf	___ftneg@f1+2,w
 14005  1B44  043F               	iorwf	___ftneg@f1+1,w
 14006  1B45  043E               	iorwf	___ftneg@f1,w
 14007  1B46  1903               	skipnz
 14008  1B47  0008               	return
 14009  1B48  3080               	movlw	128
 14010  1B49  06C0               	xorwf	___ftneg@f1+2,f
 14011  1B4A  0008               	return
 14012  1B4B                     __end_of___ftneg:	
 14013                           
 14014                           	psect	text83
 14015  0EA7                     __ptext83:	
 14016 ;; *************** function ___ftdiv *****************
 14017 ;; Defined at:
 14018 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;  f2              3   14[BANK0 ] float 
 14021 ;;  f1              3   17[BANK0 ] float 
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  f3              3   25[BANK0 ] float 
 14024 ;;  sign            1   29[BANK0 ] unsigned char 
 14025 ;;  exp             1   28[BANK0 ] unsigned char 
 14026 ;;  cntr            1   24[BANK0 ] unsigned char 
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  3   14[BANK0 ] float 
 14029 ;; Registers used:
 14030 ;;		wreg, status,2, status,0, pclath, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14036 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;Total ram usage:       16 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; Hardware stack levels required when called:    6
 14043 ;; This function calls:
 14044 ;;		___ftpack
 14045 ;; This function is called by:
 14046 ;;		_getPercentValue
 14047 ;;		_setPercentValue
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           
 14052                           ;psect for function ___ftdiv
 14053  0EA7                     ___ftdiv:	
 14054                           
 14055                           ;incstack = 0
 14056                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14057  0EA7  0020               	movlb	0	; select bank0
 14058  0EA8  0831               	movf	___ftdiv@f1,w
 14059  0EA9  00B4               	movwf	??___ftdiv
 14060  0EAA  0832               	movf	___ftdiv@f1+1,w
 14061  0EAB  00B5               	movwf	??___ftdiv+1
 14062  0EAC  0833               	movf	___ftdiv@f1+2,w
 14063  0EAD  00B6               	movwf	??___ftdiv+2
 14064  0EAE  1003               	clrc
 14065  0EAF  0D35               	rlf	??___ftdiv+1,w
 14066  0EB0  0D36               	rlf	??___ftdiv+2,w
 14067  0EB1  00B7               	movwf	??___ftdiv+3
 14068  0EB2  0837               	movf	??___ftdiv+3,w
 14069  0EB3  00BC               	movwf	___ftdiv@exp
 14070  0EB4  08BC               	movf	___ftdiv@exp,f
 14071  0EB5  1D03               	skipz
 14072  0EB6  2EBE               	goto	l8704
 14073  0EB7  3000               	movlw	0
 14074  0EB8  00AE               	movwf	?___ftdiv
 14075  0EB9  3000               	movlw	0
 14076  0EBA  00AF               	movwf	?___ftdiv+1
 14077  0EBB  3000               	movlw	0
 14078  0EBC  00B0               	movwf	?___ftdiv+2
 14079  0EBD  0008               	return
 14080  0EBE                     l8704:	
 14081  0EBE  082E               	movf	___ftdiv@f2,w
 14082  0EBF  00B4               	movwf	??___ftdiv
 14083  0EC0  082F               	movf	___ftdiv@f2+1,w
 14084  0EC1  00B5               	movwf	??___ftdiv+1
 14085  0EC2  0830               	movf	___ftdiv@f2+2,w
 14086  0EC3  00B6               	movwf	??___ftdiv+2
 14087  0EC4  1003               	clrc
 14088  0EC5  0D35               	rlf	??___ftdiv+1,w
 14089  0EC6  0D36               	rlf	??___ftdiv+2,w
 14090  0EC7  00B7               	movwf	??___ftdiv+3
 14091  0EC8  0837               	movf	??___ftdiv+3,w
 14092  0EC9  00BD               	movwf	___ftdiv@sign
 14093  0ECA  08BD               	movf	___ftdiv@sign,f
 14094  0ECB  1D03               	skipz
 14095  0ECC  2ED4               	goto	l8710
 14096  0ECD  3000               	movlw	0
 14097  0ECE  00AE               	movwf	?___ftdiv
 14098  0ECF  3000               	movlw	0
 14099  0ED0  00AF               	movwf	?___ftdiv+1
 14100  0ED1  3000               	movlw	0
 14101  0ED2  00B0               	movwf	?___ftdiv+2
 14102  0ED3  0008               	return
 14103  0ED4                     l8710:	
 14104  0ED4  3000               	movlw	0
 14105  0ED5  00B9               	movwf	___ftdiv@f3
 14106  0ED6  3000               	movlw	0
 14107  0ED7  00BA               	movwf	___ftdiv@f3+1
 14108  0ED8  3000               	movlw	0
 14109  0ED9  00BB               	movwf	___ftdiv@f3+2
 14110  0EDA  3089               	movlw	137
 14111  0EDB  073D               	addwf	___ftdiv@sign,w
 14112  0EDC  00B4               	movwf	??___ftdiv
 14113  0EDD  0834               	movf	??___ftdiv,w
 14114  0EDE  02BC               	subwf	___ftdiv@exp,f
 14115  0EDF  0831               	movf	___ftdiv@f1,w
 14116  0EE0  00B4               	movwf	??___ftdiv
 14117  0EE1  0832               	movf	___ftdiv@f1+1,w
 14118  0EE2  00B5               	movwf	??___ftdiv+1
 14119  0EE3  0833               	movf	___ftdiv@f1+2,w
 14120  0EE4  00B6               	movwf	??___ftdiv+2
 14121  0EE5  3010               	movlw	16
 14122  0EE6                     u9305:	
 14123  0EE6  36B6               	lsrf	??___ftdiv+2,f
 14124  0EE7  0CB5               	rrf	??___ftdiv+1,f
 14125  0EE8  0CB4               	rrf	??___ftdiv,f
 14126  0EE9  0B89               	decfsz	9,f
 14127  0EEA  2EE6               	goto	u9305
 14128  0EEB  0834               	movf	??___ftdiv,w
 14129  0EEC  00B7               	movwf	??___ftdiv+3
 14130  0EED  0837               	movf	??___ftdiv+3,w
 14131  0EEE  00BD               	movwf	___ftdiv@sign
 14132  0EEF  082E               	movf	___ftdiv@f2,w
 14133  0EF0  00B4               	movwf	??___ftdiv
 14134  0EF1  082F               	movf	___ftdiv@f2+1,w
 14135  0EF2  00B5               	movwf	??___ftdiv+1
 14136  0EF3  0830               	movf	___ftdiv@f2+2,w
 14137  0EF4  00B6               	movwf	??___ftdiv+2
 14138  0EF5  3010               	movlw	16
 14139  0EF6                     u9315:	
 14140  0EF6  36B6               	lsrf	??___ftdiv+2,f
 14141  0EF7  0CB5               	rrf	??___ftdiv+1,f
 14142  0EF8  0CB4               	rrf	??___ftdiv,f
 14143  0EF9  0B89               	decfsz	9,f
 14144  0EFA  2EF6               	goto	u9315
 14145  0EFB  0834               	movf	??___ftdiv,w
 14146  0EFC  00B7               	movwf	??___ftdiv+3
 14147  0EFD  0837               	movf	??___ftdiv+3,w
 14148  0EFE  06BD               	xorwf	___ftdiv@sign,f
 14149  0EFF  3080               	movlw	128
 14150  0F00  00B4               	movwf	??___ftdiv
 14151  0F01  0834               	movf	??___ftdiv,w
 14152  0F02  05BD               	andwf	___ftdiv@sign,f
 14153  0F03  17B2               	bsf	___ftdiv@f1+1,7
 14154  0F04  30FF               	movlw	255
 14155  0F05  05B1               	andwf	___ftdiv@f1,f
 14156  0F06  30FF               	movlw	255
 14157  0F07  05B2               	andwf	___ftdiv@f1+1,f
 14158  0F08  3000               	movlw	0
 14159  0F09  05B3               	andwf	___ftdiv@f1+2,f
 14160  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 14161  0F0B  30FF               	movlw	255
 14162  0F0C  05AE               	andwf	___ftdiv@f2,f
 14163  0F0D  30FF               	movlw	255
 14164  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 14165  0F0F  3000               	movlw	0
 14166  0F10  05B0               	andwf	___ftdiv@f2+2,f
 14167  0F11  3018               	movlw	24
 14168  0F12  00B4               	movwf	??___ftdiv
 14169  0F13  0834               	movf	??___ftdiv,w
 14170  0F14  00B8               	movwf	___ftdiv@cntr
 14171  0F15                     l8724:	
 14172  0F15  3001               	movlw	1
 14173  0F16                     u9325:	
 14174  0F16  35B9               	lslf	___ftdiv@f3,f
 14175  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 14176  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 14177  0F19  0B89               	decfsz	9,f
 14178  0F1A  2F16               	goto	u9325
 14179  0F1B  0830               	movf	___ftdiv@f2+2,w
 14180  0F1C  0233               	subwf	___ftdiv@f1+2,w
 14181  0F1D  1D03               	skipz
 14182  0F1E  2F25               	goto	u9335
 14183  0F1F  082F               	movf	___ftdiv@f2+1,w
 14184  0F20  0232               	subwf	___ftdiv@f1+1,w
 14185  0F21  1D03               	skipz
 14186  0F22  2F25               	goto	u9335
 14187  0F23  082E               	movf	___ftdiv@f2,w
 14188  0F24  0231               	subwf	___ftdiv@f1,w
 14189  0F25                     u9335:	
 14190  0F25  1C03               	skipc
 14191  0F26  2F2E               	goto	l8732
 14192  0F27  082E               	movf	___ftdiv@f2,w
 14193  0F28  02B1               	subwf	___ftdiv@f1,f
 14194  0F29  082F               	movf	___ftdiv@f2+1,w
 14195  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 14196  0F2B  0830               	movf	___ftdiv@f2+2,w
 14197  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 14198  0F2D  1439               	bsf	___ftdiv@f3,0
 14199  0F2E                     l8732:	
 14200  0F2E  3001               	movlw	1
 14201  0F2F                     u9345:	
 14202  0F2F  35B1               	lslf	___ftdiv@f1,f
 14203  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 14204  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 14205  0F32  0B89               	decfsz	9,f
 14206  0F33  2F2F               	goto	u9345
 14207  0F34  3001               	movlw	1
 14208  0F35  02B8               	subwf	___ftdiv@cntr,f
 14209  0F36  1D03               	btfss	3,2
 14210  0F37  2F15               	goto	l8724
 14211  0F38  0839               	movf	___ftdiv@f3,w
 14212  0F39  00A0               	movwf	___ftpack@arg
 14213  0F3A  083A               	movf	___ftdiv@f3+1,w
 14214  0F3B  00A1               	movwf	___ftpack@arg+1
 14215  0F3C  083B               	movf	___ftdiv@f3+2,w
 14216  0F3D  00A2               	movwf	___ftpack@arg+2
 14217  0F3E  083C               	movf	___ftdiv@exp,w
 14218  0F3F  00B4               	movwf	??___ftdiv
 14219  0F40  0834               	movf	??___ftdiv,w
 14220  0F41  00A3               	movwf	___ftpack@exp
 14221  0F42  083D               	movf	___ftdiv@sign,w
 14222  0F43  00B5               	movwf	??___ftdiv+1
 14223  0F44  0835               	movf	??___ftdiv+1,w
 14224  0F45  00A4               	movwf	___ftpack@sign
 14225  0F46  3189  2127         	fcall	___ftpack
 14226  0F48  0020               	movlb	0	; select bank0
 14227  0F49  0820               	movf	?___ftpack,w
 14228  0F4A  00AE               	movwf	?___ftdiv
 14229  0F4B  0821               	movf	?___ftpack+1,w
 14230  0F4C  00AF               	movwf	?___ftdiv+1
 14231  0F4D  0822               	movf	?___ftpack+2,w
 14232  0F4E  00B0               	movwf	?___ftdiv+2
 14233  0F4F  0008               	return
 14234  0F50                     __end_of___ftdiv:	
 14235                           
 14236                           	psect	text84
 14237  0469                     __ptext84:	
 14238 ;; *************** function ___ftadd *****************
 14239 ;; Defined at:
 14240 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14241 ;; Parameters:    Size  Location     Type
 14242 ;;  f1              3   33[BANK0 ] float 
 14243 ;;  f2              3   36[BANK0 ] float 
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;  exp1            1   45[BANK0 ] unsigned char 
 14246 ;;  exp2            1   44[BANK0 ] unsigned char 
 14247 ;;  sign            1   43[BANK0 ] unsigned char 
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  3   33[BANK0 ] float 
 14250 ;; Registers used:
 14251 ;;		wreg, status,2, status,0, pclath, cstack
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:       13 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    6
 14264 ;; This function calls:
 14265 ;;		___ftpack
 14266 ;; This function is called by:
 14267 ;;		_getPercentValue
 14268 ;;		_setPercentValue
 14269 ;; This function uses a non-reentrant model
 14270 ;;
 14271                           
 14272                           
 14273                           ;psect for function ___ftadd
 14274  0469                     ___ftadd:	
 14275                           
 14276                           ;incstack = 0
 14277                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14278  0469  0020               	movlb	0	; select bank0
 14279  046A  0841               	movf	___ftadd@f1,w
 14280  046B  00C7               	movwf	??___ftadd
 14281  046C  0842               	movf	___ftadd@f1+1,w
 14282  046D  00C8               	movwf	??___ftadd+1
 14283  046E  0843               	movf	___ftadd@f1+2,w
 14284  046F  00C9               	movwf	??___ftadd+2
 14285  0470  1003               	clrc
 14286  0471  0D48               	rlf	??___ftadd+1,w
 14287  0472  0D49               	rlf	??___ftadd+2,w
 14288  0473  00CA               	movwf	??___ftadd+3
 14289  0474  084A               	movf	??___ftadd+3,w
 14290  0475  00CD               	movwf	___ftadd@exp1
 14291  0476  0844               	movf	___ftadd@f2,w
 14292  0477  00C7               	movwf	??___ftadd
 14293  0478  0845               	movf	___ftadd@f2+1,w
 14294  0479  00C8               	movwf	??___ftadd+1
 14295  047A  0846               	movf	___ftadd@f2+2,w
 14296  047B  00C9               	movwf	??___ftadd+2
 14297  047C  1003               	clrc
 14298  047D  0D48               	rlf	??___ftadd+1,w
 14299  047E  0D49               	rlf	??___ftadd+2,w
 14300  047F  00CA               	movwf	??___ftadd+3
 14301  0480  084A               	movf	??___ftadd+3,w
 14302  0481  00CC               	movwf	___ftadd@exp2
 14303  0482  084D               	movf	___ftadd@exp1,w
 14304  0483  1903               	btfsc	3,2
 14305  0484  2C91               	goto	l8634
 14306  0485  084C               	movf	___ftadd@exp2,w
 14307  0486  024D               	subwf	___ftadd@exp1,w
 14308  0487  1803               	skipnc
 14309  0488  2C98               	goto	l8638
 14310  0489  034D               	decf	___ftadd@exp1,w
 14311  048A  3AFF               	xorlw	255
 14312  048B  074C               	addwf	___ftadd@exp2,w
 14313  048C  00C7               	movwf	??___ftadd
 14314  048D  3019               	movlw	25
 14315  048E  0247               	subwf	??___ftadd,w
 14316  048F  1C03               	skipc
 14317  0490  2C98               	goto	l8638
 14318  0491                     l8634:	
 14319  0491  0844               	movf	___ftadd@f2,w
 14320  0492  00C1               	movwf	?___ftadd
 14321  0493  0845               	movf	___ftadd@f2+1,w
 14322  0494  00C2               	movwf	?___ftadd+1
 14323  0495  0846               	movf	___ftadd@f2+2,w
 14324  0496  00C3               	movwf	?___ftadd+2
 14325  0497  0008               	return
 14326  0498                     l8638:	
 14327  0498  084C               	movf	___ftadd@exp2,w
 14328  0499  1903               	btfsc	3,2
 14329  049A  0008               	return
 14330  049B  084D               	movf	___ftadd@exp1,w
 14331  049C  024C               	subwf	___ftadd@exp2,w
 14332  049D  1803               	skipnc
 14333  049E  2CA7               	goto	l8644
 14334  049F  034C               	decf	___ftadd@exp2,w
 14335  04A0  3AFF               	xorlw	255
 14336  04A1  074D               	addwf	___ftadd@exp1,w
 14337  04A2  00C7               	movwf	??___ftadd
 14338  04A3  3019               	movlw	25
 14339  04A4  0247               	subwf	??___ftadd,w
 14340  04A5  1803               	btfsc	3,0
 14341  04A6  0008               	return
 14342  04A7                     l8644:	
 14343  04A7  3006               	movlw	6
 14344  04A8  00C7               	movwf	??___ftadd
 14345  04A9  0847               	movf	??___ftadd,w
 14346  04AA  00CB               	movwf	___ftadd@sign
 14347  04AB  1BC3               	btfsc	___ftadd@f1+2,7
 14348  04AC  17CB               	bsf	___ftadd@sign,7
 14349  04AD  1BC6               	btfsc	___ftadd@f2+2,7
 14350  04AE  174B               	bsf	___ftadd@sign,6
 14351  04AF  17C2               	bsf	___ftadd@f1+1,7
 14352  04B0  30FF               	movlw	255
 14353  04B1  05C1               	andwf	___ftadd@f1,f
 14354  04B2  30FF               	movlw	255
 14355  04B3  05C2               	andwf	___ftadd@f1+1,f
 14356  04B4  3000               	movlw	0
 14357  04B5  05C3               	andwf	___ftadd@f1+2,f
 14358  04B6  17C5               	bsf	___ftadd@f2+1,7
 14359  04B7  30FF               	movlw	255
 14360  04B8  05C4               	andwf	___ftadd@f2,f
 14361  04B9  30FF               	movlw	255
 14362  04BA  05C5               	andwf	___ftadd@f2+1,f
 14363  04BB  3000               	movlw	0
 14364  04BC  05C6               	andwf	___ftadd@f2+2,f
 14365  04BD  084C               	movf	___ftadd@exp2,w
 14366  04BE  024D               	subwf	___ftadd@exp1,w
 14367  04BF  1803               	skipnc
 14368  04C0  2CE3               	goto	l8666
 14369  04C1                     l8656:	
 14370  04C1  3001               	movlw	1
 14371  04C2                     u9145:	
 14372  04C2  35C4               	lslf	___ftadd@f2,f
 14373  04C3  0DC5               	rlf	___ftadd@f2+1,f
 14374  04C4  0DC6               	rlf	___ftadd@f2+2,f
 14375  04C5  0B89               	decfsz	9,f
 14376  04C6  2CC2               	goto	u9145
 14377  04C7  3001               	movlw	1
 14378  04C8  02CC               	subwf	___ftadd@exp2,f
 14379  04C9  084C               	movf	___ftadd@exp2,w
 14380  04CA  064D               	xorwf	___ftadd@exp1,w
 14381  04CB  1903               	skipnz
 14382  04CC  2CDE               	goto	l8664
 14383  04CD  3001               	movlw	1
 14384  04CE  02CB               	subwf	___ftadd@sign,f
 14385  04CF  084B               	movf	___ftadd@sign,w
 14386  04D0  3907               	andlw	7
 14387  04D1  1903               	btfsc	3,2
 14388  04D2  2CDE               	goto	l8664
 14389  04D3  2CC1               	goto	l8656
 14390  04D4                     l8662:	
 14391  04D4  3001               	movlw	1
 14392  04D5                     u9175:	
 14393  04D5  36C3               	lsrf	___ftadd@f1+2,f
 14394  04D6  0CC2               	rrf	___ftadd@f1+1,f
 14395  04D7  0CC1               	rrf	___ftadd@f1,f
 14396  04D8  0B89               	decfsz	9,f
 14397  04D9  2CD5               	goto	u9175
 14398  04DA  3001               	movlw	1
 14399  04DB  00C7               	movwf	??___ftadd
 14400  04DC  0847               	movf	??___ftadd,w
 14401  04DD  07CD               	addwf	___ftadd@exp1,f
 14402  04DE                     l8664:	
 14403  04DE  084D               	movf	___ftadd@exp1,w
 14404  04DF  064C               	xorwf	___ftadd@exp2,w
 14405  04E0  1903               	btfsc	3,2
 14406  04E1  2D08               	goto	l3059
 14407  04E2  2CD4               	goto	l8662
 14408  04E3                     l8666:	
 14409  04E3  084D               	movf	___ftadd@exp1,w
 14410  04E4  024C               	subwf	___ftadd@exp2,w
 14411  04E5  1803               	skipnc
 14412  04E6  2D08               	goto	l3059
 14413  04E7                     l8668:	
 14414  04E7  3001               	movlw	1
 14415  04E8                     u9205:	
 14416  04E8  35C1               	lslf	___ftadd@f1,f
 14417  04E9  0DC2               	rlf	___ftadd@f1+1,f
 14418  04EA  0DC3               	rlf	___ftadd@f1+2,f
 14419  04EB  0B89               	decfsz	9,f
 14420  04EC  2CE8               	goto	u9205
 14421  04ED  3001               	movlw	1
 14422  04EE  02CD               	subwf	___ftadd@exp1,f
 14423  04EF  084C               	movf	___ftadd@exp2,w
 14424  04F0  064D               	xorwf	___ftadd@exp1,w
 14425  04F1  1903               	skipnz
 14426  04F2  2D04               	goto	l8676
 14427  04F3  3001               	movlw	1
 14428  04F4  02CB               	subwf	___ftadd@sign,f
 14429  04F5  084B               	movf	___ftadd@sign,w
 14430  04F6  3907               	andlw	7
 14431  04F7  1903               	btfsc	3,2
 14432  04F8  2D04               	goto	l8676
 14433  04F9  2CE7               	goto	l8668
 14434  04FA                     l8674:	
 14435  04FA  3001               	movlw	1
 14436  04FB                     u9235:	
 14437  04FB  36C6               	lsrf	___ftadd@f2+2,f
 14438  04FC  0CC5               	rrf	___ftadd@f2+1,f
 14439  04FD  0CC4               	rrf	___ftadd@f2,f
 14440  04FE  0B89               	decfsz	9,f
 14441  04FF  2CFB               	goto	u9235
 14442  0500  3001               	movlw	1
 14443  0501  00C7               	movwf	??___ftadd
 14444  0502  0847               	movf	??___ftadd,w
 14445  0503  07CC               	addwf	___ftadd@exp2,f
 14446  0504                     l8676:	
 14447  0504  084D               	movf	___ftadd@exp1,w
 14448  0505  064C               	xorwf	___ftadd@exp2,w
 14449  0506  1D03               	skipz
 14450  0507  2CFA               	goto	l8674
 14451  0508                     l3059:	
 14452  0508  1FCB               	btfss	___ftadd@sign,7
 14453  0509  2D1A               	goto	l8680
 14454  050A  30FF               	movlw	255
 14455  050B  06C1               	xorwf	___ftadd@f1,f
 14456  050C  30FF               	movlw	255
 14457  050D  06C2               	xorwf	___ftadd@f1+1,f
 14458  050E  30FF               	movlw	255
 14459  050F  06C3               	xorwf	___ftadd@f1+2,f
 14460  0510  3001               	movlw	1
 14461  0511  07C1               	addwf	___ftadd@f1,f
 14462  0512  3000               	movlw	0
 14463  0513  1803               	skipnc
 14464  0514  3001               	movlw	1
 14465  0515  07C2               	addwf	___ftadd@f1+1,f
 14466  0516  3000               	movlw	0
 14467  0517  1803               	skipnc
 14468  0518  3001               	movlw	1
 14469  0519  07C3               	addwf	___ftadd@f1+2,f
 14470  051A                     l8680:	
 14471  051A  1F4B               	btfss	___ftadd@sign,6
 14472  051B  2D2C               	goto	l8684
 14473  051C  30FF               	movlw	255
 14474  051D  06C4               	xorwf	___ftadd@f2,f
 14475  051E  30FF               	movlw	255
 14476  051F  06C5               	xorwf	___ftadd@f2+1,f
 14477  0520  30FF               	movlw	255
 14478  0521  06C6               	xorwf	___ftadd@f2+2,f
 14479  0522  3001               	movlw	1
 14480  0523  07C4               	addwf	___ftadd@f2,f
 14481  0524  3000               	movlw	0
 14482  0525  1803               	skipnc
 14483  0526  3001               	movlw	1
 14484  0527  07C5               	addwf	___ftadd@f2+1,f
 14485  0528  3000               	movlw	0
 14486  0529  1803               	skipnc
 14487  052A  3001               	movlw	1
 14488  052B  07C6               	addwf	___ftadd@f2+2,f
 14489  052C                     l8684:	
 14490  052C  01CB               	clrf	___ftadd@sign
 14491  052D  0841               	movf	___ftadd@f1,w
 14492  052E  07C4               	addwf	___ftadd@f2,f
 14493  052F  0842               	movf	___ftadd@f1+1,w
 14494  0530  3DC5               	addwfc	___ftadd@f2+1,f
 14495  0531  0843               	movf	___ftadd@f1+2,w
 14496  0532  3DC6               	addwfc	___ftadd@f2+2,f
 14497  0533  1FC6               	btfss	___ftadd@f2+2,7
 14498  0534  2D47               	goto	l8694
 14499  0535  30FF               	movlw	255
 14500  0536  06C4               	xorwf	___ftadd@f2,f
 14501  0537  30FF               	movlw	255
 14502  0538  06C5               	xorwf	___ftadd@f2+1,f
 14503  0539  30FF               	movlw	255
 14504  053A  06C6               	xorwf	___ftadd@f2+2,f
 14505  053B  3001               	movlw	1
 14506  053C  07C4               	addwf	___ftadd@f2,f
 14507  053D  3000               	movlw	0
 14508  053E  1803               	skipnc
 14509  053F  3001               	movlw	1
 14510  0540  07C5               	addwf	___ftadd@f2+1,f
 14511  0541  3000               	movlw	0
 14512  0542  1803               	skipnc
 14513  0543  3001               	movlw	1
 14514  0544  07C6               	addwf	___ftadd@f2+2,f
 14515  0545  01CB               	clrf	___ftadd@sign
 14516  0546  0ACB               	incf	___ftadd@sign,f
 14517  0547                     l8694:	
 14518  0547  0844               	movf	___ftadd@f2,w
 14519  0548  00A0               	movwf	___ftpack@arg
 14520  0549  0845               	movf	___ftadd@f2+1,w
 14521  054A  00A1               	movwf	___ftpack@arg+1
 14522  054B  0846               	movf	___ftadd@f2+2,w
 14523  054C  00A2               	movwf	___ftpack@arg+2
 14524  054D  084D               	movf	___ftadd@exp1,w
 14525  054E  00C7               	movwf	??___ftadd
 14526  054F  0847               	movf	??___ftadd,w
 14527  0550  00A3               	movwf	___ftpack@exp
 14528  0551  084B               	movf	___ftadd@sign,w
 14529  0552  00C8               	movwf	??___ftadd+1
 14530  0553  0848               	movf	??___ftadd+1,w
 14531  0554  00A4               	movwf	___ftpack@sign
 14532  0555  3189  2127         	fcall	___ftpack
 14533  0557  0020               	movlb	0	; select bank0
 14534  0558  0820               	movf	?___ftpack,w
 14535  0559  00C1               	movwf	?___ftadd
 14536  055A  0821               	movf	?___ftpack+1,w
 14537  055B  00C2               	movwf	?___ftadd+1
 14538  055C  0822               	movf	?___ftpack+2,w
 14539  055D  00C3               	movwf	?___ftadd+2
 14540  055E  0008               	return
 14541  055F                     __end_of___ftadd:	
 14542                           
 14543                           	psect	text85
 14544  1F46                     __ptext85:	
 14545 ;; *************** function ___awtoft *****************
 14546 ;; Defined at:
 14547 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;  c               2    8[BANK0 ] int 
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;  sign            1   13[BANK0 ] unsigned char 
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  3    8[BANK0 ] float 
 14554 ;; Registers used:
 14555 ;;		wreg, status,2, status,0, pclath, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14561 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;Total ram usage:        6 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    6
 14568 ;; This function calls:
 14569 ;;		___ftpack
 14570 ;; This function is called by:
 14571 ;;		_getPercentValue
 14572 ;;		_setPercentValue
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           
 14577                           ;psect for function ___awtoft
 14578  1F46                     ___awtoft:	
 14579                           
 14580                           ;incstack = 0
 14581                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14582  1F46  0020               	movlb	0	; select bank0
 14583  1F47  01AD               	clrf	___awtoft@sign
 14584  1F48  1FA9               	btfss	___awtoft@c+1,7
 14585  1F49  2F51               	goto	l8622
 14586  1F4A  09A8               	comf	___awtoft@c,f
 14587  1F4B  09A9               	comf	___awtoft@c+1,f
 14588  1F4C  0AA8               	incf	___awtoft@c,f
 14589  1F4D  1903               	skipnz
 14590  1F4E  0AA9               	incf	___awtoft@c+1,f
 14591  1F4F  01AD               	clrf	___awtoft@sign
 14592  1F50  0AAD               	incf	___awtoft@sign,f
 14593  1F51                     l8622:	
 14594  1F51  0828               	movf	___awtoft@c,w
 14595  1F52  00A0               	movwf	___ftpack@arg
 14596  1F53  0829               	movf	___awtoft@c+1,w
 14597  1F54  00A1               	movwf	___ftpack@arg+1
 14598  1F55  01A2               	clrf	___ftpack@arg+2
 14599  1F56  308E               	movlw	142
 14600  1F57  00AB               	movwf	??___awtoft
 14601  1F58  082B               	movf	??___awtoft,w
 14602  1F59  00A3               	movwf	___ftpack@exp
 14603  1F5A  082D               	movf	___awtoft@sign,w
 14604  1F5B  00AC               	movwf	??___awtoft+1
 14605  1F5C  082C               	movf	??___awtoft+1,w
 14606  1F5D  00A4               	movwf	___ftpack@sign
 14607  1F5E  3189  2127         	fcall	___ftpack
 14608  1F60  0020               	movlb	0	; select bank0
 14609  1F61  0820               	movf	?___ftpack,w
 14610  1F62  00A8               	movwf	?___awtoft
 14611  1F63  0821               	movf	?___ftpack+1,w
 14612  1F64  00A9               	movwf	?___awtoft+1
 14613  1F65  0822               	movf	?___ftpack+2,w
 14614  1F66  00AA               	movwf	?___awtoft+2
 14615  1F67  0008               	return
 14616  1F68                     __end_of___awtoft:	
 14617                           
 14618                           	psect	text86
 14619  0927                     __ptext86:	
 14620 ;; *************** function ___ftpack *****************
 14621 ;; Defined at:
 14622 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;  arg             3    0[BANK0 ] unsigned um
 14625 ;;  exp             1    3[BANK0 ] unsigned char 
 14626 ;;  sign            1    4[BANK0 ] unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;		None
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  3    0[BANK0 ] float 
 14631 ;; Registers used:
 14632 ;;		wreg, status,2, status,0
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        8 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    5
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		___awtoft
 14649 ;;		___ftadd
 14650 ;;		___ftdiv
 14651 ;;		___ftmul
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function ___ftpack
 14657  0927                     ___ftpack:	
 14658                           
 14659                           ;incstack = 0
 14660                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14661  0927  0020               	movlb	0	; select bank0
 14662  0928  0823               	movf	___ftpack@exp,w
 14663  0929  1903               	btfsc	3,2
 14664  092A  2930               	goto	l8572
 14665  092B  0822               	movf	___ftpack@arg+2,w
 14666  092C  0421               	iorwf	___ftpack@arg+1,w
 14667  092D  0420               	iorwf	___ftpack@arg,w
 14668  092E  1D03               	skipz
 14669  092F  2941               	goto	l8578
 14670  0930                     l8572:	
 14671  0930  3000               	movlw	0
 14672  0931  00A0               	movwf	?___ftpack
 14673  0932  3000               	movlw	0
 14674  0933  00A1               	movwf	?___ftpack+1
 14675  0934  3000               	movlw	0
 14676  0935  00A2               	movwf	?___ftpack+2
 14677  0936  0008               	return
 14678  0937                     l8576:	
 14679  0937  3001               	movlw	1
 14680  0938  00A5               	movwf	??___ftpack
 14681  0939  0825               	movf	??___ftpack,w
 14682  093A  07A3               	addwf	___ftpack@exp,f
 14683  093B  3001               	movlw	1
 14684  093C                     u8935:	
 14685  093C  36A2               	lsrf	___ftpack@arg+2,f
 14686  093D  0CA1               	rrf	___ftpack@arg+1,f
 14687  093E  0CA0               	rrf	___ftpack@arg,f
 14688  093F  0B89               	decfsz	9,f
 14689  0940  293C               	goto	u8935
 14690  0941                     l8578:	
 14691  0941  30FE               	movlw	254
 14692  0942  0522               	andwf	___ftpack@arg+2,w
 14693  0943  1903               	btfsc	3,2
 14694  0944  295A               	goto	l3030
 14695  0945  2937               	goto	l8576
 14696  0946                     l8580:	
 14697  0946  3001               	movlw	1
 14698  0947  00A5               	movwf	??___ftpack
 14699  0948  0825               	movf	??___ftpack,w
 14700  0949  07A3               	addwf	___ftpack@exp,f
 14701  094A  3001               	movlw	1
 14702  094B  07A0               	addwf	___ftpack@arg,f
 14703  094C  3000               	movlw	0
 14704  094D  1803               	skipnc
 14705  094E  3001               	movlw	1
 14706  094F  07A1               	addwf	___ftpack@arg+1,f
 14707  0950  3000               	movlw	0
 14708  0951  1803               	skipnc
 14709  0952  3001               	movlw	1
 14710  0953  07A2               	addwf	___ftpack@arg+2,f
 14711  0954  3001               	movlw	1
 14712  0955                     u8955:	
 14713  0955  36A2               	lsrf	___ftpack@arg+2,f
 14714  0956  0CA1               	rrf	___ftpack@arg+1,f
 14715  0957  0CA0               	rrf	___ftpack@arg,f
 14716  0958  0B89               	decfsz	9,f
 14717  0959  2955               	goto	u8955
 14718  095A                     l3030:	
 14719  095A  30FF               	movlw	255
 14720  095B  0522               	andwf	___ftpack@arg+2,w
 14721  095C  1903               	btfsc	3,2
 14722  095D  2967               	goto	l8588
 14723  095E  2946               	goto	l8580
 14724  095F                     l8586:	
 14725  095F  3001               	movlw	1
 14726  0960  02A3               	subwf	___ftpack@exp,f
 14727  0961  3001               	movlw	1
 14728  0962                     u8975:	
 14729  0962  35A0               	lslf	___ftpack@arg,f
 14730  0963  0DA1               	rlf	___ftpack@arg+1,f
 14731  0964  0DA2               	rlf	___ftpack@arg+2,f
 14732  0965  0B89               	decfsz	9,f
 14733  0966  2962               	goto	u8975
 14734  0967                     l8588:	
 14735  0967  1FA1               	btfss	___ftpack@arg+1,7
 14736  0968  295F               	goto	l8586
 14737  0969  1823               	btfsc	___ftpack@exp,0
 14738  096A  2971               	goto	l3036
 14739  096B  30FF               	movlw	255
 14740  096C  05A0               	andwf	___ftpack@arg,f
 14741  096D  307F               	movlw	127
 14742  096E  05A1               	andwf	___ftpack@arg+1,f
 14743  096F  30FF               	movlw	255
 14744  0970  05A2               	andwf	___ftpack@arg+2,f
 14745  0971                     l3036:	
 14746  0971  1003               	clrc
 14747  0972  0CA3               	rrf	___ftpack@exp,f
 14748  0973  0823               	movf	___ftpack@exp,w
 14749  0974  00A5               	movwf	??___ftpack
 14750  0975  01A6               	clrf	??___ftpack+1
 14751  0976  01A7               	clrf	??___ftpack+2
 14752  0977  3010               	movlw	16
 14753  0978                     u9005:	
 14754  0978  35A5               	lslf	??___ftpack,f
 14755  0979  0DA6               	rlf	??___ftpack+1,f
 14756  097A  0DA7               	rlf	??___ftpack+2,f
 14757  097B  0B89               	decfsz	9,f
 14758  097C  2978               	goto	u9005
 14759  097D  0825               	movf	??___ftpack,w
 14760  097E  04A0               	iorwf	___ftpack@arg,f
 14761  097F  0826               	movf	??___ftpack+1,w
 14762  0980  04A1               	iorwf	___ftpack@arg+1,f
 14763  0981  0827               	movf	??___ftpack+2,w
 14764  0982  04A2               	iorwf	___ftpack@arg+2,f
 14765  0983  0824               	movf	___ftpack@sign,w
 14766  0984  1903               	btfsc	3,2
 14767  0985  0008               	return
 14768  0986  17A2               	bsf	___ftpack@arg+2,7
 14769  0987  0008               	return
 14770  0988                     __end_of___ftpack:	
 14771                           
 14772                           	psect	text87
 14773  164F                     __ptext87:	
 14774 ;; *************** function _setLED *****************
 14775 ;; Defined at:
 14776 ;;		line 76 in file "../src/LED_B1.c"
 14777 ;; Parameters:    Size  Location     Type
 14778 ;;  led             1    wreg     unsigned char 
 14779 ;;  command         1    2[BANK0 ] unsigned char 
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  led             1    3[BANK0 ] unsigned char 
 14782 ;; Return value:  Size  Location     Type
 14783 ;;		None               void
 14784 ;; Registers used:
 14785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : 0/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14791 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;Total ram usage:        2 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; Hardware stack levels required when called:    6
 14798 ;; This function calls:
 14799 ;;		_LedPointSelect
 14800 ;; This function is called by:
 14801 ;;		_setDimmerLights
 14802 ;;		_setLED_Initialization
 14803 ;;		_Exception_Main
 14804 ;;		_setSw_Initialization
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           
 14809                           ;psect for function _setLED
 14810  164F                     _setLED:	
 14811                           
 14812                           ;incstack = 0
 14813                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14814                           ;setLED@led stored from wreg
 14815  164F  0020               	movlb	0	; select bank0
 14816  1650  00A3               	movwf	setLED@led
 14817                           
 14818                           ;LED_B1.c: 77: LedPointSelect(led);
 14819  1651  0823               	movf	setLED@led,w
 14820  1652  319E  26C6  3196   	fcall	_LedPointSelect
 14821                           
 14822                           ;LED_B1.c: 78: if (command == 0) {
 14823  1655  0020               	movlb	0	; select bank0
 14824  1656  08A2               	movf	setLED@command,f
 14825  1657  1D03               	skipz
 14826  1658  2E66               	goto	l9376
 14827                           
 14828                           ;LED_B1.c: 80: if (led == 1) {
 14829  1659  0823               	movf	setLED@led,w
 14830  165A  3A01               	xorlw	1
 14831  165B  1D03               	skipz
 14832  165C  2E5E               	goto	l9368
 14833                           
 14834                           ;LED_B1.c: 84: RA3 = 1;
 14835  165D  158C               	bsf	12,3	;volatile
 14836  165E                     l9368:	
 14837                           
 14838                           ;LED_B1.c: 86: }
 14839                           ;LED_B1.c: 89: if (led == 2) {
 14840  165E  0823               	movf	setLED@led,w
 14841  165F  3A02               	xorlw	2
 14842  1660  1903               	btfsc	3,2
 14843                           
 14844                           ;LED_B1.c: 93: RC7 = 1;
 14845  1661  178E               	bsf	14,7	;volatile
 14846                           
 14847                           ;LED_B1.c: 95: }
 14848                           ;LED_B1.c: 107: if (led == 99) {
 14849  1662  0823               	movf	setLED@led,w
 14850  1663  3A63               	xorlw	99
 14851  1664  1903               	btfsc	3,2
 14852                           
 14853                           ;LED_B1.c: 111: RB5 = 1;
 14854  1665  168D               	bsf	13,5	;volatile
 14855  1666                     l9376:	
 14856                           
 14857                           ;LED_B1.c: 113: }
 14858                           ;LED_B1.c: 115: }
 14859                           ;LED_B1.c: 116: if (command == 1) {
 14860  1666  0822               	movf	setLED@command,w
 14861  1667  3A01               	xorlw	1
 14862  1668  1D03               	skipz
 14863  1669  2E77               	goto	l9390
 14864                           
 14865                           ;LED_B1.c: 118: if (led == 1) {
 14866  166A  0823               	movf	setLED@led,w
 14867  166B  3A01               	xorlw	1
 14868  166C  1D03               	skipz
 14869  166D  2E6F               	goto	l9382
 14870                           
 14871                           ;LED_B1.c: 122: RA3 = 0;
 14872  166E  118C               	bcf	12,3	;volatile
 14873  166F                     l9382:	
 14874                           
 14875                           ;LED_B1.c: 124: }
 14876                           ;LED_B1.c: 127: if (led == 2) {
 14877  166F  0823               	movf	setLED@led,w
 14878  1670  3A02               	xorlw	2
 14879  1671  1903               	btfsc	3,2
 14880                           
 14881                           ;LED_B1.c: 131: RC7 = 0;
 14882  1672  138E               	bcf	14,7	;volatile
 14883                           
 14884                           ;LED_B1.c: 133: }
 14885                           ;LED_B1.c: 145: if (led == 99) {
 14886  1673  0823               	movf	setLED@led,w
 14887  1674  3A63               	xorlw	99
 14888  1675  1903               	btfsc	3,2
 14889                           
 14890                           ;LED_B1.c: 149: RB5 = 0;
 14891  1676  128D               	bcf	13,5	;volatile
 14892  1677                     l9390:	
 14893                           
 14894                           ;LED_B1.c: 151: }
 14895                           ;LED_B1.c: 153: }
 14896                           ;LED_B1.c: 154: if (command == 10) {
 14897  1677  0822               	movf	setLED@command,w
 14898  1678  3A0A               	xorlw	10
 14899  1679  1D03               	skipz
 14900  167A  2E97               	goto	l9406
 14901                           
 14902                           ;LED_B1.c: 155: LED->GO = 0;
 14903  167B  0021               	movlb	1	; select bank1
 14904  167C  084D               	movf	_LED^(0+128),w
 14905  167D  0086               	movwf	6
 14906  167E  3001               	movlw	1	; select bank2/3
 14907  167F  0087               	movwf	7
 14908  1680  1081               	bcf	1,1
 14909                           
 14910                           ;LED_B1.c: 156: LED->Time = 0;
 14911  1681  0A4D               	incf	_LED^(0+128),w
 14912  1682  0086               	movwf	6
 14913  1683  3001               	movlw	1	; select bank2/3
 14914  1684  0087               	movwf	7
 14915  1685  3000               	movlw	0
 14916  1686  3FC0               	movwi [0]fsr1
 14917  1687  3FC1               	movwi [1]fsr1
 14918                           
 14919                           ;LED_B1.c: 158: if (led == 1) {
 14920  1688  0020               	movlb	0	; select bank0
 14921  1689  0823               	movf	setLED@led,w
 14922  168A  3A01               	xorlw	1
 14923  168B  1D03               	skipz
 14924  168C  2E8F               	goto	l9398
 14925                           
 14926                           ;LED_B1.c: 162: RA3 = 1;
 14927  168D  158C               	bsf	12,3	;volatile
 14928                           
 14929                           ;LED_B1.c: 164: }
 14930  168E  2E93               	goto	l9402
 14931  168F                     l9398:	
 14932                           
 14933                           ;LED_B1.c: 167: else if (led == 2) {
 14934  168F  0823               	movf	setLED@led,w
 14935  1690  3A02               	xorlw	2
 14936  1691  1903               	btfsc	3,2
 14937                           
 14938                           ;LED_B1.c: 171: RC7 = 1;
 14939  1692  178E               	bsf	14,7	;volatile
 14940  1693                     l9402:	
 14941                           
 14942                           ;LED_B1.c: 173: }
 14943                           ;LED_B1.c: 185: if (led == 99) {
 14944  1693  0823               	movf	setLED@led,w
 14945  1694  3A63               	xorlw	99
 14946  1695  1903               	btfsc	3,2
 14947                           
 14948                           ;LED_B1.c: 189: RB5 = 1;
 14949  1696  168D               	bsf	13,5	;volatile
 14950  1697                     l9406:	
 14951                           
 14952                           ;LED_B1.c: 191: }
 14953                           ;LED_B1.c: 193: }
 14954                           ;LED_B1.c: 194: if (command == 11) {
 14955  1697  0822               	movf	setLED@command,w
 14956  1698  3A0B               	xorlw	11
 14957  1699  1D03               	skipz
 14958  169A  0008               	return
 14959                           
 14960                           ;LED_B1.c: 195: LED->GO = 1;
 14961  169B  0021               	movlb	1	; select bank1
 14962  169C  084D               	movf	_LED^(0+128),w
 14963  169D  0086               	movwf	6
 14964  169E  3001               	movlw	1	; select bank2/3
 14965  169F  0087               	movwf	7
 14966  16A0  1481               	bsf	1,1
 14967  16A1  0008               	return
 14968  16A2                     __end_of_setLED:	
 14969                           
 14970                           	psect	text88
 14971  1EC6                     __ptext88:	
 14972 ;; *************** function _LedPointSelect *****************
 14973 ;; Defined at:
 14974 ;;		line 7 in file "../src/LED_B1.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;  led             1    wreg     unsigned char 
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  led             1    1[BANK0 ] unsigned char 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;		None               void
 14981 ;; Registers used:
 14982 ;;		wreg
 14983 ;; Tracked objects:
 14984 ;;		On entry : 0/0
 14985 ;;		On exit  : 0/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;Total ram usage:        2 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    5
 14995 ;; This function calls:
 14996 ;;		Nothing
 14997 ;; This function is called by:
 14998 ;;		_setLED_Initialization
 14999 ;;		_setLED
 15000 ;;		_setLED_Main
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           
 15005                           ;psect for function _LedPointSelect
 15006  1EC6                     _LedPointSelect:	
 15007                           
 15008                           ;incstack = 0
 15009                           ; Regs used in _LedPointSelect: [wreg]
 15010                           ;LedPointSelect@led stored from wreg
 15011  1EC6  0020               	movlb	0	; select bank0
 15012  1EC7  00A1               	movwf	LedPointSelect@led
 15013                           
 15014                           ;LED_B1.c: 9: if (led == 1) {
 15015  1EC8  0821               	movf	LedPointSelect@led,w
 15016  1EC9  3A01               	xorlw	1
 15017  1ECA  1D03               	skipz
 15018  1ECB  2ED1               	goto	l1030
 15019                           
 15020                           ;LED_B1.c: 10: LED = &VarLED1;
 15021  1ECC  306A               	movlw	_VarLED1& (0+255)
 15022  1ECD  00A0               	movwf	??_LedPointSelect
 15023  1ECE  0820               	movf	??_LedPointSelect,w
 15024  1ECF  0021               	movlb	1	; select bank1
 15025  1ED0  00CD               	movwf	_LED^(0+128)
 15026  1ED1                     l1030:	
 15027                           
 15028                           ;LED_B1.c: 11: }
 15029                           ;LED_B1.c: 14: if (led == 2) {
 15030  1ED1  0020               	movlb	0	; select bank0
 15031  1ED2  0821               	movf	LedPointSelect@led,w
 15032  1ED3  3A02               	xorlw	2
 15033  1ED4  1D03               	skipz
 15034  1ED5  2EDB               	goto	l1031
 15035                           
 15036                           ;LED_B1.c: 15: LED = &VarLED2;
 15037  1ED6  30EB               	movlw	_VarLED2& (0+255)
 15038  1ED7  00A0               	movwf	??_LedPointSelect
 15039  1ED8  0820               	movf	??_LedPointSelect,w
 15040  1ED9  0021               	movlb	1	; select bank1
 15041  1EDA  00CD               	movwf	_LED^(0+128)
 15042  1EDB                     l1031:	
 15043                           
 15044                           ;LED_B1.c: 16: }
 15045                           ;LED_B1.c: 24: if (led == 99) {
 15046  1EDB  0020               	movlb	0	; select bank0
 15047  1EDC  0821               	movf	LedPointSelect@led,w
 15048  1EDD  3A63               	xorlw	99
 15049  1EDE  1D03               	skipz
 15050  1EDF  0008               	return
 15051                           
 15052                           ;LED_B1.c: 25: LED = &VarErrLED;
 15053  1EE0  3066               	movlw	_VarErrLED& (0+255)
 15054  1EE1  00A0               	movwf	??_LedPointSelect
 15055  1EE2  0820               	movf	??_LedPointSelect,w
 15056  1EE3  0021               	movlb	1	; select bank1
 15057  1EE4  00CD               	movwf	_LED^(0+128)
 15058  1EE5  0008               	return
 15059  1EE6                     __end_of_LedPointSelect:	
 15060                           
 15061                           	psect	text89
 15062  1DB3                     __ptext89:	
 15063 ;; *************** function _setDimmerLights_Line *****************
 15064 ;; Defined at:
 15065 ;;		line 702 in file "../src/Dimmer_B1.c"
 15066 ;; Parameters:    Size  Location     Type
 15067 ;;  lights          1    wreg     unsigned char 
 15068 ;; Auto vars:     Size  Location     Type
 15069 ;;  lights          1    0[BANK0 ] unsigned char 
 15070 ;; Return value:  Size  Location     Type
 15071 ;;		None               void
 15072 ;; Registers used:
 15073 ;;		wreg
 15074 ;; Tracked objects:
 15075 ;;		On entry : 0/0
 15076 ;;		On exit  : 0/0
 15077 ;;		Unchanged: 0/0
 15078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;Total ram usage:        1 bytes
 15084 ;; Hardware stack levels used:    1
 15085 ;; Hardware stack levels required when called:    5
 15086 ;; This function calls:
 15087 ;;		Nothing
 15088 ;; This function is called by:
 15089 ;;		_setDimmerLights
 15090 ;;		_setDimmerLights_Adj
 15091 ;; This function uses a non-reentrant model
 15092 ;;
 15093                           
 15094                           
 15095                           ;psect for function _setDimmerLights_Line
 15096  1DB3                     _setDimmerLights_Line:	
 15097                           
 15098                           ;incstack = 0
 15099                           ; Regs used in _setDimmerLights_Line: [wreg]
 15100                           ;setDimmerLights_Line@lights stored from wreg
 15101  1DB3  0020               	movlb	0	; select bank0
 15102  1DB4  00A0               	movwf	setDimmerLights_Line@lights
 15103                           
 15104                           ;Dimmer_B1.c: 703: Dimmer.LoadGO = 1;
 15105  1DB5  0021               	movlb	1	; select bank1
 15106  1DB6  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15107                           
 15108                           ;Dimmer_B1.c: 705: DimmerLights1.Line = 0;
 15109  1DB7  0022               	movlb	2	; select bank2
 15110  1DB8  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15111                           
 15112                           ;Dimmer_B1.c: 708: DimmerLights2.Line = 0;
 15113  1DB9  0023               	movlb	3	; select bank3
 15114  1DBA  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15115                           
 15116                           ;Dimmer_B1.c: 714: if (lights == 1) {
 15117  1DBB  0020               	movlb	0	; select bank0
 15118  1DBC  0820               	movf	setDimmerLights_Line@lights,w
 15119  1DBD  3A01               	xorlw	1
 15120  1DBE  1D03               	skipz
 15121  1DBF  2DC3               	goto	l9356
 15122                           
 15123                           ;Dimmer_B1.c: 715: DimmerLights1.Line = 1;
 15124  1DC0  0022               	movlb	2	; select bank2
 15125  1DC1  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15126                           
 15127                           ;Dimmer_B1.c: 716: }
 15128  1DC2  0008               	return
 15129  1DC3                     l9356:	
 15130                           
 15131                           ;Dimmer_B1.c: 719: else if (lights == 2) {
 15132  1DC3  0020               	movlb	0	; select bank0
 15133  1DC4  0820               	movf	setDimmerLights_Line@lights,w
 15134  1DC5  3A02               	xorlw	2
 15135  1DC6  1D03               	skipz
 15136  1DC7  0008               	return
 15137                           
 15138                           ;Dimmer_B1.c: 720: DimmerLights2.Line = 1;
 15139  1DC8  0023               	movlb	3	; select bank3
 15140  1DC9  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15141  1DCA  0008               	return
 15142  1DCB                     __end_of_setDimmerLights_Line:	
 15143                           
 15144                           	psect	text90
 15145  1272                     __ptext90:	
 15146 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15147 ;; Defined at:
 15148 ;;		line 585 in file "../src/Dimmer_B1.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;  lights          1    wreg     unsigned char 
 15151 ;; Auto vars:     Size  Location     Type
 15152 ;;  lights          1    5[BANK0 ] unsigned char 
 15153 ;;  allow           1    6[BANK0 ] unsigned char 
 15154 ;; Return value:  Size  Location     Type
 15155 ;;                  1    wreg      unsigned char 
 15156 ;; Registers used:
 15157 ;;		wreg, status,2, status,0, pclath, cstack
 15158 ;; Tracked objects:
 15159 ;;		On entry : 0/0
 15160 ;;		On exit  : 0/0
 15161 ;;		Unchanged: 0/0
 15162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;Total ram usage:        6 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; Hardware stack levels required when called:    6
 15170 ;; This function calls:
 15171 ;;		_getLoad_OK
 15172 ;; This function is called by:
 15173 ;;		_setDimmerLights_AdjOn
 15174 ;;		_setDimmerLights_Main
 15175 ;; This function uses a non-reentrant model
 15176 ;;
 15177                           
 15178                           
 15179                           ;psect for function _getDimmerLights_Allow_Condition
 15180  1272                     _getDimmerLights_Allow_Condition:	
 15181                           
 15182                           ;incstack = 0
 15183                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15184                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15185  1272  0020               	movlb	0	; select bank0
 15186  1273  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 15187                           
 15188                           ;Dimmer_B1.c: 586: char allow = 0;
 15189  1274  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 15190                           
 15191                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15192  1275  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15193  1276  0AA2               	incf	_getDimmerLights_Allow_Condition$2329,f
 15194  1277  319B  2322  3192   	fcall	_getLoad_OK
 15195  127A  3800               	iorlw	0
 15196  127B  1D03               	skipz
 15197  127C  2A82               	goto	l9298
 15198  127D  0021               	movlb	1	; select bank1
 15199  127E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15200  127F  2A82               	goto	l9298
 15201  1280  0020               	movlb	0	; select bank0
 15202  1281  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15203  1282                     l9298:	
 15204  1282  0020               	movlb	0	; select bank0
 15205  1283  0822               	movf	_getDimmerLights_Allow_Condition$2329,w
 15206  1284  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15207  1285  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15208  1286  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15209                           
 15210                           ;Dimmer_B1.c: 599: if (allow == 0) {
 15211  1287  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 15212  1288  1D03               	skipz
 15213  1289  2AAA               	goto	l9322
 15214                           
 15215                           ;Dimmer_B1.c: 600: if (lights == 1) {
 15216  128A  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15217  128B  3A01               	xorlw	1
 15218  128C  1D03               	skipz
 15219  128D  2A99               	goto	l9312
 15220                           
 15221                           ;Dimmer_B1.c: 601: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15222  128E  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15223  128F  0AA3               	incf	_getDimmerLights_Allow_Condition$2330,f
 15224  1290  0023               	movlb	3	; select bank3
 15225  1291  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15226  1292  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15227  1293  2A96               	goto	l9310
 15228  1294  0020               	movlb	0	; select bank0
 15229  1295  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15230  1296                     l9310:	
 15231  1296  0020               	movlb	0	; select bank0
 15232  1297  0823               	movf	_getDimmerLights_Allow_Condition$2330,w
 15233  1298  2AA7               	goto	L7
 15234  1299                     l9312:	
 15235                           ;Dimmer_B1.c: 602: } else if (lights == 2) {
 15236                           
 15237  1299  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15238  129A  3A02               	xorlw	2
 15239  129B  1D03               	skipz
 15240  129C  2AAA               	goto	l9322
 15241                           
 15242                           ;Dimmer_B1.c: 603: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15243  129D  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15244  129E  0AA4               	incf	_getDimmerLights_Allow_Condition$2331,f
 15245  129F  0022               	movlb	2	; select bank2
 15246  12A0  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15247  12A1  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15248  12A2  2AA5               	goto	l9320
 15249  12A3  0020               	movlb	0	; select bank0
 15250  12A4  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15251  12A5                     l9320:	
 15252  12A5  0020               	movlb	0	; select bank0
 15253  12A6  0824               	movf	_getDimmerLights_Allow_Condition$2331,w
 15254  12A7                     L7:	
 15255  12A7  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15256  12A8  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15257  12A9  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15258  12AA                     l9322:	
 15259                           
 15260                           ;Dimmer_B1.c: 604: }
 15261                           ;Dimmer_B1.c: 605: }
 15262                           ;Dimmer_B1.c: 619: return allow;
 15263  12AA  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 15264  12AB  0008               	return
 15265  12AC                     __end_of_getDimmerLights_Allow_Condition:	
 15266                           
 15267                           	psect	text91
 15268  1B22                     __ptext91:	
 15269 ;; *************** function _getLoad_OK *****************
 15270 ;; Defined at:
 15271 ;;		line 264 in file "../src/OverLoad_B1.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;		None
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;  ok              1    0[BANK0 ] unsigned char 
 15276 ;; Return value:  Size  Location     Type
 15277 ;;                  1    wreg      unsigned char 
 15278 ;; Registers used:
 15279 ;;		wreg, status,2
 15280 ;; Tracked objects:
 15281 ;;		On entry : 0/0
 15282 ;;		On exit  : 0/0
 15283 ;;		Unchanged: 0/0
 15284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;Total ram usage:        1 bytes
 15290 ;; Hardware stack levels used:    1
 15291 ;; Hardware stack levels required when called:    5
 15292 ;; This function calls:
 15293 ;;		Nothing
 15294 ;; This function is called by:
 15295 ;;		_DimmerLights_Main
 15296 ;;		_getDimmerLights_Allow_Condition
 15297 ;; This function uses a non-reentrant model
 15298 ;;
 15299                           
 15300                           
 15301                           ;psect for function _getLoad_OK
 15302  1B22                     _getLoad_OK:	
 15303                           
 15304                           ;OverLoad_B1.c: 265: char ok = Load.OK == 1 ? 1 : 0;
 15305                           
 15306                           ;incstack = 0
 15307                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15308  1B22  3000               	movlw	0
 15309  1B23  0022               	movlb	2	; select bank2
 15310  1B24  1BA7               	btfsc	_Load^(0+256),7
 15311  1B25  3001               	movlw	1
 15312  1B26  0020               	movlb	0	; select bank0
 15313  1B27  00A0               	movwf	getLoad_OK@ok
 15314                           
 15315                           ;OverLoad_B1.c: 266: return ok;
 15316  1B28  0820               	movf	getLoad_OK@ok,w
 15317  1B29  0008               	return
 15318  1B2A                     __end_of_getLoad_OK:	
 15319                           
 15320                           	psect	text92
 15321  1CC2                     __ptext92:	
 15322 ;; *************** function _getMain_LightsStatus *****************
 15323 ;; Defined at:
 15324 ;;		line 375 in file "../src/Main_B1.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;		None
 15327 ;; Auto vars:     Size  Location     Type
 15328 ;;  status          1    0[BANK0 ] unsigned char 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      unsigned char 
 15331 ;; Registers used:
 15332 ;;		wreg, status,2, status,0
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;Total ram usage:        1 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:    5
 15345 ;; This function calls:
 15346 ;;		Nothing
 15347 ;; This function is called by:
 15348 ;;		_DimmerLights_Main
 15349 ;;		_Flash_Memory_Main
 15350 ;;		_Exception_Main
 15351 ;;		_Load_Main
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function _getMain_LightsStatus
 15357  1CC2                     _getMain_LightsStatus:	
 15358                           
 15359                           ;Main_B1.c: 376: char status = 0;
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15363  1CC2  0020               	movlb	0	; select bank0
 15364  1CC3  01A0               	clrf	getMain_LightsStatus@status
 15365                           
 15366                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15367  1CC4  3000               	movlw	0
 15368  1CC5  0022               	movlb	2	; select bank2
 15369  1CC6  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15370  1CC7  3001               	movlw	1
 15371  1CC8  0020               	movlb	0	; select bank0
 15372  1CC9  00A0               	movwf	getMain_LightsStatus@status
 15373                           
 15374                           ;Main_B1.c: 396: if (status == 0) {
 15375  1CCA  08A0               	movf	getMain_LightsStatus@status,f
 15376  1CCB  1D03               	skipz
 15377  1CCC  2CD3               	goto	l9956
 15378                           
 15379                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15380  1CCD  3000               	movlw	0
 15381  1CCE  0023               	movlb	3	; select bank3
 15382  1CCF  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15383  1CD0  3001               	movlw	1
 15384  1CD1  0020               	movlb	0	; select bank0
 15385  1CD2  00A0               	movwf	getMain_LightsStatus@status
 15386  1CD3                     l9956:	
 15387                           
 15388                           ;Main_B1.c: 398: }
 15389                           ;Main_B1.c: 422: return status;
 15390  1CD3  0820               	movf	getMain_LightsStatus@status,w
 15391  1CD4  0008               	return
 15392  1CD5                     __end_of_getMain_LightsStatus:	
 15393                           
 15394                           	psect	text93
 15395  1168                     __ptext93:	
 15396 ;; *************** function _getMain_All_Error_Status *****************
 15397 ;; Defined at:
 15398 ;;		line 426 in file "../src/Main_B1.c"
 15399 ;; Parameters:    Size  Location     Type
 15400 ;;  command         1    wreg     unsigned char 
 15401 ;; Auto vars:     Size  Location     Type
 15402 ;;  command         1    5[BANK0 ] unsigned char 
 15403 ;;  status          1    6[BANK0 ] unsigned char 
 15404 ;; Return value:  Size  Location     Type
 15405 ;;                  1    wreg      unsigned char 
 15406 ;; Registers used:
 15407 ;;		wreg, status,2, status,0
 15408 ;; Tracked objects:
 15409 ;;		On entry : 0/0
 15410 ;;		On exit  : 0/0
 15411 ;;		Unchanged: 0/0
 15412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15416 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15417 ;;Total ram usage:        7 bytes
 15418 ;; Hardware stack levels used:    1
 15419 ;; Hardware stack levels required when called:    5
 15420 ;; This function calls:
 15421 ;;		Nothing
 15422 ;; This function is called by:
 15423 ;;		_DimmerLights_Main
 15424 ;;		_Exception_Main
 15425 ;;		_Load_Main
 15426 ;;		_setTemp_Main
 15427 ;;		_setRF_Main
 15428 ;;		_getRxData
 15429 ;;		_setSw_Main
 15430 ;; This function uses a non-reentrant model
 15431 ;;
 15432                           
 15433                           
 15434                           ;psect for function _getMain_All_Error_Status
 15435  1168                     _getMain_All_Error_Status:	
 15436                           
 15437                           ;incstack = 0
 15438                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15439                           ;getMain_All_Error_Status@command stored from wreg
 15440  1168  0020               	movlb	0	; select bank0
 15441  1169  00A5               	movwf	getMain_All_Error_Status@command
 15442                           
 15443                           ;Main_B1.c: 427: char status = 0;
 15444  116A  01A6               	clrf	getMain_All_Error_Status@status
 15445                           
 15446                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15447  116B  08A6               	movf	getMain_All_Error_Status@status,f
 15448  116C  1D03               	skipz
 15449  116D  2982               	goto	l9338
 15450  116E  0825               	movf	getMain_All_Error_Status@command,w
 15451  116F  3A02               	xorlw	2
 15452  1170  1903               	skipnz
 15453  1171  2982               	goto	l9338
 15454                           
 15455                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15456  1172  0021               	movlb	1	; select bank1
 15457  1173  18D6               	btfsc	_Temp^(0+128),1
 15458  1174  2979               	goto	l9336
 15459  1175  0020               	movlb	0	; select bank0
 15460  1176  01A1               	clrf	_getMain_All_Error_Status$3605
 15461  1177  01A2               	clrf	_getMain_All_Error_Status$3605+1
 15462  1178  297E               	goto	l1572
 15463  1179                     l9336:	
 15464  1179  3002               	movlw	2
 15465  117A  0020               	movlb	0	; select bank0
 15466  117B  00A1               	movwf	_getMain_All_Error_Status$3605
 15467  117C  3000               	movlw	0
 15468  117D  00A2               	movwf	_getMain_All_Error_Status$3605+1
 15469  117E                     l1572:	
 15470  117E  0821               	movf	_getMain_All_Error_Status$3605,w
 15471  117F  00A0               	movwf	??_getMain_All_Error_Status
 15472  1180  0820               	movf	??_getMain_All_Error_Status,w
 15473  1181  00A6               	movwf	getMain_All_Error_Status@status
 15474  1182                     l9338:	
 15475                           
 15476                           ;Main_B1.c: 440: }
 15477                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15478  1182  08A6               	movf	getMain_All_Error_Status@status,f
 15479  1183  1D03               	skipz
 15480  1184  2999               	goto	l1573
 15481  1185  0825               	movf	getMain_All_Error_Status@command,w
 15482  1186  3A03               	xorlw	3
 15483  1187  1903               	skipnz
 15484  1188  2999               	goto	l1573
 15485                           
 15486                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15487  1189  0022               	movlb	2	; select bank2
 15488  118A  1AA7               	btfsc	_Load^(0+256),5
 15489  118B  2990               	goto	l9346
 15490  118C  0020               	movlb	0	; select bank0
 15491  118D  01A3               	clrf	_getMain_All_Error_Status$3606
 15492  118E  01A4               	clrf	_getMain_All_Error_Status$3606+1
 15493  118F  2995               	goto	l1577
 15494  1190                     l9346:	
 15495  1190  3003               	movlw	3
 15496  1191  0020               	movlb	0	; select bank0
 15497  1192  00A3               	movwf	_getMain_All_Error_Status$3606
 15498  1193  3000               	movlw	0
 15499  1194  00A4               	movwf	_getMain_All_Error_Status$3606+1
 15500  1195                     l1577:	
 15501  1195  0823               	movf	_getMain_All_Error_Status$3606,w
 15502  1196  00A0               	movwf	??_getMain_All_Error_Status
 15503  1197  0820               	movf	??_getMain_All_Error_Status,w
 15504  1198  00A6               	movwf	getMain_All_Error_Status@status
 15505  1199                     l1573:	
 15506                           
 15507                           ;Main_B1.c: 447: }
 15508                           ;Main_B1.c: 463: return status;
 15509  1199  0826               	movf	getMain_All_Error_Status@status,w
 15510  119A  0008               	return
 15511  119B                     __end_of_getMain_All_Error_Status:	
 15512                           
 15513                           	psect	text94
 15514  1D10                     __ptext94:	
 15515 ;; *************** function _DimmerLights_Initialization *****************
 15516 ;; Defined at:
 15517 ;;		line 341 in file "../src/Dimmer_B1.c"
 15518 ;; Parameters:    Size  Location     Type
 15519 ;;		None
 15520 ;; Auto vars:     Size  Location     Type
 15521 ;;		None
 15522 ;; Return value:  Size  Location     Type
 15523 ;;		None               void
 15524 ;; Registers used:
 15525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15526 ;; Tracked objects:
 15527 ;;		On entry : 0/0
 15528 ;;		On exit  : 0/0
 15529 ;;		Unchanged: 0/0
 15530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;Total ram usage:        1 bytes
 15536 ;; Hardware stack levels used:    1
 15537 ;; Hardware stack levels required when called:    7
 15538 ;; This function calls:
 15539 ;;		_setDimmerLights_Initialization
 15540 ;; This function is called by:
 15541 ;;		_main
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545                           
 15546                           ;psect for function _DimmerLights_Initialization
 15547  1D10                     _DimmerLights_Initialization:	
 15548                           
 15549                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15550                           
 15551                           ;incstack = 0
 15552                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15553  1D10  3055               	movlw	_DimmerLights1& (0+255)
 15554  1D11  0020               	movlb	0	; select bank0
 15555  1D12  00A4               	movwf	??_DimmerLights_Initialization
 15556  1D13  0824               	movf	??_DimmerLights_Initialization,w
 15557  1D14  0021               	movlb	1	; select bank1
 15558  1D15  00CA               	movwf	_DimmerLights11^(0+128)
 15559                           
 15560                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15561  1D16  3001               	movlw	1
 15562  1D17  3187  27CF  319D   	fcall	_setDimmerLights_Initialization
 15563                           
 15564                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15565  1D1A  30BE               	movlw	_DimmerLights2& (0+255)
 15566  1D1B  0020               	movlb	0	; select bank0
 15567  1D1C  00A4               	movwf	??_DimmerLights_Initialization
 15568  1D1D  0824               	movf	??_DimmerLights_Initialization,w
 15569  1D1E  0021               	movlb	1	; select bank1
 15570  1D1F  00CB               	movwf	_DimmerLights22^(0+128)
 15571                           
 15572                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15573  1D20  3002               	movlw	2
 15574  1D21  3187  27CF         	fcall	_setDimmerLights_Initialization
 15575  1D23  0008               	return
 15576  1D24                     __end_of_DimmerLights_Initialization:	
 15577                           
 15578                           	psect	text95
 15579  07CF                     __ptext95:	
 15580 ;; *************** function _setDimmerLights_Initialization *****************
 15581 ;; Defined at:
 15582 ;;		line 365 in file "../src/Dimmer_B1.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  lights          1    wreg     unsigned char 
 15585 ;; Auto vars:     Size  Location     Type
 15586 ;;  lights          1    3[BANK0 ] unsigned char 
 15587 ;; Return value:  Size  Location     Type
 15588 ;;		None               void
 15589 ;; Registers used:
 15590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15591 ;; Tracked objects:
 15592 ;;		On entry : 0/0
 15593 ;;		On exit  : 0/0
 15594 ;;		Unchanged: 0/0
 15595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;Total ram usage:        2 bytes
 15601 ;; Hardware stack levels used:    1
 15602 ;; Hardware stack levels required when called:    6
 15603 ;; This function calls:
 15604 ;;		_DimmerLightsPointSelect
 15605 ;; This function is called by:
 15606 ;;		_DimmerLights_Initialization
 15607 ;; This function uses a non-reentrant model
 15608 ;;
 15609                           
 15610                           
 15611                           ;psect for function _setDimmerLights_Initialization
 15612  07CF                     _setDimmerLights_Initialization:	
 15613                           
 15614                           ;incstack = 0
 15615                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15616                           ;setDimmerLights_Initialization@lights stored from wreg
 15617  07CF  0020               	movlb	0	; select bank0
 15618  07D0  00A3               	movwf	setDimmerLights_Initialization@lights
 15619                           
 15620                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15621  07D1  0823               	movf	setDimmerLights_Initialization@lights,w
 15622  07D2  319C  24AF  3187   	fcall	_DimmerLightsPointSelect
 15623                           
 15624                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15625  07D5  3007               	movlw	7
 15626  07D6  0020               	movlb	0	; select bank0
 15627  07D7  00A2               	movwf	??_setDimmerLights_Initialization
 15628  07D8  086F               	movf	_DimmerLights,w
 15629  07D9  3E08               	addlw	8
 15630  07DA  0086               	movwf	6
 15631  07DB  3001               	movlw	1	; select bank2/3
 15632  07DC  0087               	movwf	7
 15633  07DD  0822               	movf	??_setDimmerLights_Initialization,w
 15634  07DE  0081               	movwf	1
 15635                           
 15636                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75*0.8));
 15637  07DF  303C               	movlw	60
 15638  07E0  00A2               	movwf	??_setDimmerLights_Initialization
 15639  07E1  086F               	movf	_DimmerLights,w
 15640  07E2  3E06               	addlw	6
 15641  07E3  0086               	movwf	6
 15642  07E4  3001               	movlw	1	; select bank2/3
 15643  07E5  0087               	movwf	7
 15644  07E6  0822               	movf	??_setDimmerLights_Initialization,w
 15645  07E7  0081               	movwf	1
 15646                           
 15647                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15648  07E8  300C               	movlw	12
 15649  07E9  00A2               	movwf	??_setDimmerLights_Initialization
 15650  07EA  086F               	movf	_DimmerLights,w
 15651  07EB  3E09               	addlw	9
 15652  07EC  0086               	movwf	6
 15653  07ED  3001               	movlw	1	; select bank2/3
 15654  07EE  0087               	movwf	7
 15655  07EF  0822               	movf	??_setDimmerLights_Initialization,w
 15656  07F0  0081               	movwf	1
 15657                           
 15658                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15659  07F1  086F               	movf	_DimmerLights,w
 15660  07F2  3E06               	addlw	6
 15661  07F3  0086               	movwf	6
 15662  07F4  3001               	movlw	1	; select bank2/3
 15663  07F5  0087               	movwf	7
 15664  07F6  0801               	movf	1,w
 15665  07F7  00A2               	movwf	??_setDimmerLights_Initialization
 15666  07F8  086F               	movf	_DimmerLights,w
 15667  07F9  3E04               	addlw	4
 15668  07FA  0086               	movwf	6
 15669  07FB  3001               	movlw	1	; select bank2/3
 15670  07FC  0087               	movwf	7
 15671  07FD  0822               	movf	??_setDimmerLights_Initialization,w
 15672  07FE  0081               	movwf	1
 15673  07FF  0008               	return
 15674  0800                     __end_of_setDimmerLights_Initialization:	
 15675                           
 15676                           	psect	text96
 15677  1B1A                     __ptext96:	
 15678 ;; *************** function _DelayOff_Main *****************
 15679 ;; Defined at:
 15680 ;;		line 41 in file "../src/DelayOff_B1.c"
 15681 ;; Parameters:    Size  Location     Type
 15682 ;;		None
 15683 ;; Auto vars:     Size  Location     Type
 15684 ;;		None
 15685 ;; Return value:  Size  Location     Type
 15686 ;;		None               void
 15687 ;; Registers used:
 15688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15689 ;; Tracked objects:
 15690 ;;		On entry : 0/0
 15691 ;;		On exit  : 0/0
 15692 ;;		Unchanged: 0/0
 15693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;Total ram usage:        0 bytes
 15699 ;; Hardware stack levels used:    1
 15700 ;; Hardware stack levels required when called:   11
 15701 ;; This function calls:
 15702 ;;		_DlyOff_Main
 15703 ;; This function is called by:
 15704 ;;		_main
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           
 15709                           ;psect for function _DelayOff_Main
 15710  1B1A                     _DelayOff_Main:	
 15711                           
 15712                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15713                           
 15714                           ;incstack = 0
 15715                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15716  1B1A  3001               	movlw	1
 15717  1B1B  3188  20CA  319B   	fcall	_DlyOff_Main
 15718                           
 15719                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15720  1B1E  3002               	movlw	2
 15721  1B1F  3188  20CA         	fcall	_DlyOff_Main
 15722  1B21  0008               	return
 15723  1B22                     __end_of_DelayOff_Main:	
 15724                           
 15725                           	psect	text97
 15726  08CA                     __ptext97:	
 15727 ;; *************** function _DlyOff_Main *****************
 15728 ;; Defined at:
 15729 ;;		line 61 in file "../src/DelayOff_B1.c"
 15730 ;; Parameters:    Size  Location     Type
 15731 ;;  sw              1    wreg     unsigned char 
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;  sw              1   78[BANK0 ] unsigned char 
 15734 ;; Return value:  Size  Location     Type
 15735 ;;		None               void
 15736 ;; Registers used:
 15737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : 0/0
 15740 ;;		On exit  : 0/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15746 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15747 ;;Total ram usage:        3 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:   10
 15750 ;; This function calls:
 15751 ;;		_DelayOffPointSelect
 15752 ;;		_setBuz
 15753 ;;		_setDimmerLights_ErrorClose
 15754 ;; This function is called by:
 15755 ;;		_DelayOff_Main
 15756 ;; This function uses a non-reentrant model
 15757 ;;
 15758                           
 15759                           
 15760                           ;psect for function _DlyOff_Main
 15761  08CA                     _DlyOff_Main:	
 15762                           
 15763                           ;incstack = 0
 15764                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15765                           ;DlyOff_Main@sw stored from wreg
 15766  08CA  0020               	movlb	0	; select bank0
 15767  08CB  00EE               	movwf	DlyOff_Main@sw
 15768                           
 15769                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15770  08CC  086E               	movf	DlyOff_Main@sw,w
 15771  08CD  319C  24FC  3188   	fcall	_DelayOffPointSelect
 15772                           
 15773                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15774  08D0  0875               	movf	_DelayOff,w
 15775  08D1  0086               	movwf	6
 15776  08D2  3001               	movlw	1	; select bank2/3
 15777  08D3  0087               	movwf	7
 15778  08D4  1C81               	btfss	1,1
 15779  08D5  0008               	return
 15780                           
 15781                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15782  08D6  0875               	movf	_DelayOff,w
 15783  08D7  3E02               	addlw	2
 15784  08D8  0086               	movwf	6
 15785  08D9  3001               	movlw	1	; select bank2/3
 15786  08DA  0087               	movwf	7
 15787  08DB  3001               	movlw	1
 15788  08DC  0781               	addwf	1,f
 15789  08DD  3141               	addfsr 1,1
 15790  08DE  1803               	skipnc
 15791  08DF  0A81               	incf	1,f
 15792                           
 15793                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15794  08E0  0875               	movf	_DelayOff,w
 15795  08E1  3E02               	addlw	2
 15796  08E2  0086               	movwf	6
 15797  08E3  3001               	movlw	1	; select bank2/3
 15798  08E4  0087               	movwf	7
 15799  08E5  3F40               	moviw [0]fsr1
 15800  08E6  0020               	movlb	0	; select bank0
 15801  08E7  00EC               	movwf	??_DlyOff_Main
 15802  08E8  3F41               	moviw [1]fsr1
 15803  08E9  00ED               	movwf	??_DlyOff_Main+1
 15804  08EA  3017               	movlw	23
 15805  08EB  026D               	subwf	??_DlyOff_Main+1,w
 15806  08EC  3070               	movlw	112
 15807  08ED  1903               	skipnz
 15808  08EE  026C               	subwf	??_DlyOff_Main,w
 15809  08EF  1C03               	skipc
 15810  08F0  0008               	return
 15811                           
 15812                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15813  08F1  0875               	movf	_DelayOff,w
 15814  08F2  3E02               	addlw	2
 15815  08F3  0086               	movwf	6
 15816  08F4  3001               	movlw	1	; select bank2/3
 15817  08F5  0087               	movwf	7
 15818  08F6  3000               	movlw	0
 15819  08F7  3FC0               	movwi [0]fsr1
 15820  08F8  3FC1               	movwi [1]fsr1
 15821                           
 15822                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15823  08F9  3001               	movlw	1
 15824  08FA  00EC               	movwf	??_DlyOff_Main
 15825  08FB  0875               	movf	_DelayOff,w
 15826  08FC  3E04               	addlw	4
 15827  08FD  0086               	movwf	6
 15828  08FE  3001               	movlw	1	; select bank2/3
 15829  08FF  0087               	movwf	7
 15830  0900  086C               	movf	??_DlyOff_Main,w
 15831  0901  0781               	addwf	1,f
 15832                           
 15833                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15834  0902  0875               	movf	_DelayOff,w
 15835  0903  3E04               	addlw	4
 15836  0904  0086               	movwf	6
 15837  0905  3001               	movlw	1	; select bank2/3
 15838  0906  0087               	movwf	7
 15839  0907  0A75               	incf	_DelayOff,w
 15840  0908  0084               	movwf	4
 15841  0909  3001               	movlw	1	; select bank2/3
 15842  090A  0085               	movwf	5
 15843  090B  0800               	movf	0,w
 15844  090C  0201               	subwf	1,w
 15845  090D  1C03               	skipc
 15846  090E  0008               	return
 15847                           
 15848                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15849  090F  0875               	movf	_DelayOff,w
 15850  0910  3E04               	addlw	4
 15851  0911  0086               	movwf	6
 15852  0912  3001               	movlw	1	; select bank2/3
 15853  0913  0087               	movwf	7
 15854  0914  0181               	clrf	1
 15855                           
 15856                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15857  0915  0875               	movf	_DelayOff,w
 15858  0916  0086               	movwf	6
 15859  0917  3001               	movlw	1	; select bank2/3
 15860  0918  0087               	movwf	7
 15861  0919  1081               	bcf	1,1
 15862                           
 15863                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15864  091A  3064               	movlw	100
 15865  091B  00A9               	movwf	setBuz@time
 15866  091C  3000               	movlw	0
 15867  091D  00AA               	movwf	setBuz@time+1
 15868  091E  3001               	movlw	1
 15869  091F  3197  274E  3188   	fcall	_setBuz
 15870                           
 15871                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15872  0922  0020               	movlb	0	; select bank0
 15873  0923  086E               	movf	DlyOff_Main@sw,w
 15874  0924  3189  2188         	fcall	_setDimmerLights_ErrorClose
 15875  0926  0008               	return
 15876  0927                     __end_of_DlyOff_Main:	
 15877                           
 15878                           	psect	text98
 15879  0988                     __ptext98:	
 15880 ;; *************** function _setDimmerLights_ErrorClose *****************
 15881 ;; Defined at:
 15882 ;;		line 842 in file "../src/Dimmer_B1.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  lights          1    wreg     unsigned char 
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;  lights          1    1[BANK1 ] unsigned char 
 15887 ;;  i               2    2[BANK1 ] int 
 15888 ;;  count           1    0[BANK1 ] unsigned char 
 15889 ;; Return value:  Size  Location     Type
 15890 ;;		None               void
 15891 ;; Registers used:
 15892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15893 ;; Tracked objects:
 15894 ;;		On entry : 0/0
 15895 ;;		On exit  : 0/0
 15896 ;;		Unchanged: 0/0
 15897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;Total ram usage:        5 bytes
 15903 ;; Hardware stack levels used:    1
 15904 ;; Hardware stack levels required when called:    9
 15905 ;; This function calls:
 15906 ;;		_DimmerLightsPointSelect
 15907 ;;		_getDimmerLights_Status
 15908 ;;		_setDimmerLights_SwOff
 15909 ;; This function is called by:
 15910 ;;		_DlyOff_Main
 15911 ;;		_setControl_Lights_Table
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           
 15916                           ;psect for function _setDimmerLights_ErrorClose
 15917  0988                     _setDimmerLights_ErrorClose:	
 15918                           
 15919                           ;incstack = 0
 15920                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15921                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15922  0988  0021               	movlb	1	; select bank1
 15923  0989  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15924                           
 15925                           ;Dimmer_B1.c: 843: if (lights == 255) {
 15926  098A  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15927  098B  3AFF               	xorlw	255
 15928  098C  1D03               	skipz
 15929  098D  29CB               	goto	l9194
 15930                           
 15931                           ;Dimmer_B1.c: 848: char count = 2;
 15932  098E  3002               	movlw	2
 15933  098F  0020               	movlb	0	; select bank0
 15934  0990  00EB               	movwf	??_setDimmerLights_ErrorClose
 15935  0991  086B               	movf	??_setDimmerLights_ErrorClose,w
 15936  0992  0021               	movlb	1	; select bank1
 15937  0993  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 15938                           
 15939                           ;Dimmer_B1.c: 853: for (int i = 0; i < count; i++) {
 15940  0994  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15941  0995  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15942  0996                     l9192:	
 15943  0996  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15944  0997  3A80               	xorlw	128
 15945  0998  0020               	movlb	0	; select bank0
 15946  0999  00EB               	movwf	??_setDimmerLights_ErrorClose
 15947  099A  3080               	movlw	128
 15948  099B  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15949  099C  1D03               	skipz
 15950  099D  29A1               	goto	u10105
 15951  099E  0021               	movlb	1	; select bank1
 15952  099F  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15953  09A0  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15954  09A1                     u10105:	
 15955  09A1  1803               	btfsc	3,0
 15956  09A2  0008               	return
 15957                           
 15958                           ;Dimmer_B1.c: 854: DimmerLightsPointSelect(i + 1);
 15959  09A3  0021               	movlb	1	; select bank1
 15960  09A4  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15961  09A5  3E01               	addlw	1
 15962  09A6  319C  24AF  3189   	fcall	_DimmerLightsPointSelect
 15963                           
 15964                           ;Dimmer_B1.c: 855: if (getDimmerLights_Status(i + 1) == 1) {
 15965  09A9  0021               	movlb	1	; select bank1
 15966  09AA  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15967  09AB  3E01               	addlw	1
 15968  09AC  319C  2422  3189   	fcall	_getDimmerLights_Status
 15969  09AF  3A01               	xorlw	1
 15970  09B0  1D03               	skipz
 15971  09B1  29C5               	goto	l9190
 15972                           
 15973                           ;Dimmer_B1.c: 856: DimmerLights->SwFlag = 1;
 15974  09B2  0020               	movlb	0	; select bank0
 15975  09B3  086F               	movf	_DimmerLights,w
 15976  09B4  3E0B               	addlw	11
 15977  09B5  0086               	movwf	6
 15978  09B6  3001               	movlw	1	; select bank2/3
 15979  09B7  0087               	movwf	7
 15980  09B8  1481               	bsf	1,1
 15981                           
 15982                           ;Dimmer_B1.c: 857: DimmerLights->Status = 0;
 15983  09B9  086F               	movf	_DimmerLights,w
 15984  09BA  3E02               	addlw	2
 15985  09BB  0086               	movwf	6
 15986  09BC  3001               	movlw	1	; select bank2/3
 15987  09BD  0087               	movwf	7
 15988  09BE  1081               	bcf	1,1
 15989                           
 15990                           ;Dimmer_B1.c: 858: setDimmerLights_SwOff(i + 1);
 15991  09BF  0021               	movlb	1	; select bank1
 15992  09C0  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15993  09C1  3E01               	addlw	1
 15994  09C2  3194  24BC  3189   	fcall	_setDimmerLights_SwOff
 15995  09C5                     l9190:	
 15996  09C5  3001               	movlw	1
 15997  09C6  0021               	movlb	1	; select bank1
 15998  09C7  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15999  09C8  3000               	movlw	0
 16000  09C9  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 16001  09CA  2996               	goto	l9192
 16002  09CB                     l9194:	
 16003                           ;Dimmer_B1.c: 859: }
 16004                           ;Dimmer_B1.c: 860: }
 16005                           ;Dimmer_B1.c: 861: } else {
 16006                           
 16007                           
 16008                           ;Dimmer_B1.c: 862: DimmerLightsPointSelect(lights);
 16009  09CB  0021               	movlb	1	; select bank1
 16010  09CC  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16011  09CD  319C  24AF  3189   	fcall	_DimmerLightsPointSelect
 16012                           
 16013                           ;Dimmer_B1.c: 863: if (getDimmerLights_Status(lights) == 1) {
 16014  09D0  0021               	movlb	1	; select bank1
 16015  09D1  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16016  09D2  319C  2422  3189   	fcall	_getDimmerLights_Status
 16017  09D5  3A01               	xorlw	1
 16018  09D6  1D03               	skipz
 16019  09D7  0008               	return
 16020                           
 16021                           ;Dimmer_B1.c: 864: DimmerLights->SwFlag = 1;
 16022  09D8  0020               	movlb	0	; select bank0
 16023  09D9  086F               	movf	_DimmerLights,w
 16024  09DA  3E0B               	addlw	11
 16025  09DB  0086               	movwf	6
 16026  09DC  3001               	movlw	1	; select bank2/3
 16027  09DD  0087               	movwf	7
 16028  09DE  1481               	bsf	1,1
 16029                           
 16030                           ;Dimmer_B1.c: 865: DimmerLights->Status = 0;
 16031  09DF  086F               	movf	_DimmerLights,w
 16032  09E0  3E02               	addlw	2
 16033  09E1  0086               	movwf	6
 16034  09E2  3001               	movlw	1	; select bank2/3
 16035  09E3  0087               	movwf	7
 16036  09E4  1081               	bcf	1,1
 16037                           
 16038                           ;Dimmer_B1.c: 866: setDimmerLights_SwOff(lights);
 16039  09E5  0021               	movlb	1	; select bank1
 16040  09E6  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16041  09E7  3194  24BC         	fcall	_setDimmerLights_SwOff
 16042  09E9  0008               	return
 16043  09EA                     __end_of_setDimmerLights_ErrorClose:	
 16044                           
 16045                           	psect	text99
 16046  14BC                     __ptext99:	
 16047 ;; *************** function _setDimmerLights_SwOff *****************
 16048 ;; Defined at:
 16049 ;;		line 450 in file "../src/Dimmer_B1.c"
 16050 ;; Parameters:    Size  Location     Type
 16051 ;;  sw              1    wreg     unsigned char 
 16052 ;; Auto vars:     Size  Location     Type
 16053 ;;  sw              1   74[BANK0 ] unsigned char 
 16054 ;; Return value:  Size  Location     Type
 16055 ;;		None               void
 16056 ;; Registers used:
 16057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16058 ;; Tracked objects:
 16059 ;;		On entry : 0/0
 16060 ;;		On exit  : 0/0
 16061 ;;		Unchanged: 0/0
 16062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16066 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;Total ram usage:        1 bytes
 16068 ;; Hardware stack levels used:    1
 16069 ;; Hardware stack levels required when called:    8
 16070 ;; This function calls:
 16071 ;;		_DimmerLightsPointSelect
 16072 ;;		_getDelayOff_GO
 16073 ;;		_setDelayOff_GO
 16074 ;; This function is called by:
 16075 ;;		_setDimmerLights_ErrorClose
 16076 ;;		_Exception_Main
 16077 ;;		_setRFSW_Control
 16078 ;;		_setSw_Main
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           
 16083                           ;psect for function _setDimmerLights_SwOff
 16084  14BC                     _setDimmerLights_SwOff:	
 16085                           
 16086                           ;incstack = 0
 16087                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16088                           ;setDimmerLights_SwOff@sw stored from wreg
 16089  14BC  0020               	movlb	0	; select bank0
 16090  14BD  00EA               	movwf	setDimmerLights_SwOff@sw
 16091                           
 16092                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 16093  14BE  086A               	movf	setDimmerLights_SwOff@sw,w
 16094  14BF  319C  24AF  3194   	fcall	_DimmerLightsPointSelect
 16095                           
 16096                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 16097  14C2  0020               	movlb	0	; select bank0
 16098  14C3  086F               	movf	_DimmerLights,w
 16099  14C4  3E0B               	addlw	11
 16100  14C5  0086               	movwf	6
 16101  14C6  3001               	movlw	1	; select bank2/3
 16102  14C7  0087               	movwf	7
 16103  14C8  1C81               	btfss	1,1
 16104  14C9  0008               	return
 16105                           
 16106                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 16107  14CA  086F               	movf	_DimmerLights,w
 16108  14CB  3E0B               	addlw	11
 16109  14CC  0086               	movwf	6
 16110  14CD  3001               	movlw	1	; select bank2/3
 16111  14CE  0087               	movwf	7
 16112  14CF  1081               	bcf	1,1
 16113                           
 16114                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 16115  14D0  086F               	movf	_DimmerLights,w
 16116  14D1  3E02               	addlw	2
 16117  14D2  0086               	movwf	6
 16118  14D3  3001               	movlw	1	; select bank2/3
 16119  14D4  0087               	movwf	7
 16120  14D5  1C81               	btfss	1,1
 16121  14D6  2CF1               	goto	l9040
 16122                           
 16123                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 16124  14D7  086F               	movf	_DimmerLights,w
 16125  14D8  3E0B               	addlw	11
 16126  14D9  0086               	movwf	6
 16127  14DA  3001               	movlw	1	; select bank2/3
 16128  14DB  0087               	movwf	7
 16129  14DC  1D01               	btfss	1,2
 16130  14DD  0008               	return
 16131                           
 16132                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 16133  14DE  086F               	movf	_DimmerLights,w
 16134  14DF  3E0B               	addlw	11
 16135  14E0  0086               	movwf	6
 16136  14E1  3001               	movlw	1	; select bank2/3
 16137  14E2  0087               	movwf	7
 16138  14E3  1101               	bcf	1,2
 16139                           
 16140                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 16141  14E4  086F               	movf	_DimmerLights,w
 16142  14E5  3E0A               	addlw	10
 16143  14E6  0086               	movwf	6
 16144  14E7  3001               	movlw	1	; select bank2/3
 16145  14E8  0087               	movwf	7
 16146  14E9  1581               	bsf	1,3
 16147                           
 16148                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 16149  14EA  086F               	movf	_DimmerLights,w
 16150  14EB  3E0A               	addlw	10
 16151  14EC  0086               	movwf	6
 16152  14ED  3001               	movlw	1	; select bank2/3
 16153  14EE  0087               	movwf	7
 16154  14EF  1101               	bcf	1,2
 16155                           
 16156                           ;Dimmer_B1.c: 462: }
 16157                           ;Dimmer_B1.c: 463: } else {
 16158  14F0  0008               	return
 16159  14F1                     l9040:	
 16160                           
 16161                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 16162  14F1  086F               	movf	_DimmerLights,w
 16163  14F2  3E0A               	addlw	10
 16164  14F3  0086               	movwf	6
 16165  14F4  3001               	movlw	1	; select bank2/3
 16166  14F5  0087               	movwf	7
 16167  14F6  1481               	bsf	1,1
 16168                           
 16169                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 16170  14F7  086F               	movf	_DimmerLights,w
 16171  14F8  3E0A               	addlw	10
 16172  14F9  0086               	movwf	6
 16173  14FA  3001               	movlw	1	; select bank2/3
 16174  14FB  0087               	movwf	7
 16175  14FC  1001               	bcf	1,0
 16176                           
 16177                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 16178  14FD  086A               	movf	setDimmerLights_SwOff@sw,w
 16179  14FE  319C  2412  3194   	fcall	_getDelayOff_GO
 16180  1501  3A01               	xorlw	1
 16181  1502  1D03               	skipz
 16182  1503  0008               	return
 16183                           
 16184                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 16185  1504  0020               	movlb	0	; select bank0
 16186  1505  01E6               	clrf	setDelayOff_GO@command
 16187  1506  01E7               	clrf	setDelayOff_GO@value
 16188  1507  086A               	movf	setDimmerLights_SwOff@sw,w
 16189  1508  3195  25FC         	fcall	_setDelayOff_GO
 16190  150A  0008               	return
 16191  150B                     __end_of_setDimmerLights_SwOff:	
 16192                           
 16193                           	psect	text100
 16194  15FC                     __ptext100:	
 16195 ;; *************** function _setDelayOff_GO *****************
 16196 ;; Defined at:
 16197 ;;		line 83 in file "../src/DelayOff_B1.c"
 16198 ;; Parameters:    Size  Location     Type
 16199 ;;  sw              1    wreg     unsigned char 
 16200 ;;  command         1   70[BANK0 ] unsigned char 
 16201 ;;  value           1   71[BANK0 ] unsigned char 
 16202 ;; Auto vars:     Size  Location     Type
 16203 ;;  sw              1   73[BANK0 ] unsigned char 
 16204 ;; Return value:  Size  Location     Type
 16205 ;;		None               void
 16206 ;; Registers used:
 16207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16208 ;; Tracked objects:
 16209 ;;		On entry : 0/0
 16210 ;;		On exit  : 0/0
 16211 ;;		Unchanged: 0/0
 16212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16217 ;;Total ram usage:        4 bytes
 16218 ;; Hardware stack levels used:    1
 16219 ;; Hardware stack levels required when called:    7
 16220 ;; This function calls:
 16221 ;;		_DelayOffPointSelect
 16222 ;;		_DelayTimejudge
 16223 ;;		_setProductData
 16224 ;; This function is called by:
 16225 ;;		_setDimmerLights_SwOff
 16226 ;;		_setRFSW_Control
 16227 ;; This function uses a non-reentrant model
 16228 ;;
 16229                           
 16230                           
 16231                           ;psect for function _setDelayOff_GO
 16232  15FC                     _setDelayOff_GO:	
 16233                           
 16234                           ;incstack = 0
 16235                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16236                           ;setDelayOff_GO@sw stored from wreg
 16237  15FC  0020               	movlb	0	; select bank0
 16238  15FD  00E9               	movwf	setDelayOff_GO@sw
 16239                           
 16240                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16241  15FE  0869               	movf	setDelayOff_GO@sw,w
 16242  15FF  319C  24FC  3195   	fcall	_DelayOffPointSelect
 16243                           
 16244                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16245  1602  0020               	movlb	0	; select bank0
 16246  1603  0866               	movf	setDelayOff_GO@command,w
 16247  1604  3A01               	xorlw	1
 16248  1605  3000               	movlw	0
 16249  1606  1903               	skipnz
 16250  1607  3001               	movlw	1
 16251  1608  00E8               	movwf	??_setDelayOff_GO
 16252  1609  0875               	movf	_DelayOff,w
 16253  160A  0086               	movwf	6
 16254  160B  3001               	movlw	1	; select bank2/3
 16255  160C  0087               	movwf	7
 16256  160D  0DE8               	rlf	??_setDelayOff_GO,f
 16257  160E  0801               	movf	1,w
 16258  160F  0668               	xorwf	??_setDelayOff_GO,w
 16259  1610  39FD               	andlw	-3
 16260  1611  0668               	xorwf	??_setDelayOff_GO,w
 16261  1612  0081               	movwf	1
 16262                           
 16263                           ;DelayOff_B1.c: 89: if (command == 1) {
 16264  1613  0866               	movf	setDelayOff_GO@command,w
 16265  1614  3A01               	xorlw	1
 16266  1615  1D03               	skipz
 16267  1616  2E3A               	goto	l8972
 16268                           
 16269                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16270  1617  0867               	movf	setDelayOff_GO@value,w
 16271  1618  3190  20B3  3195   	fcall	_DelayTimejudge
 16272  161B  0020               	movlb	0	; select bank0
 16273  161C  00E8               	movwf	??_setDelayOff_GO
 16274  161D  0A75               	incf	_DelayOff,w
 16275  161E  0086               	movwf	6
 16276  161F  3001               	movlw	1	; select bank2/3
 16277  1620  0087               	movwf	7
 16278  1621  0868               	movf	??_setDelayOff_GO,w
 16279  1622  0081               	movwf	1
 16280                           
 16281                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16282  1623  300F               	movlw	15
 16283  1624  0567               	andwf	setDelayOff_GO@value,w
 16284  1625  00E8               	movwf	??_setDelayOff_GO
 16285  1626  0868               	movf	??_setDelayOff_GO,w
 16286  1627  3A05               	xorlw	5
 16287  1628  1903               	skipnz
 16288  1629  2E2E               	goto	l8966
 16289  162A  0867               	movf	setDelayOff_GO@value,w
 16290  162B  390F               	andlw	15
 16291  162C  1D03               	btfss	3,2
 16292  162D  2E34               	goto	l8970
 16293  162E                     l8966:	
 16294  162E  3026               	movlw	38
 16295  162F  0267               	subwf	setDelayOff_GO@value,w
 16296  1630  1803               	skipnc
 16297  1631  2E34               	goto	l8970
 16298                           
 16299                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16300  1632  0867               	movf	setDelayOff_GO@value,w
 16301  1633  2E36               	goto	L9
 16302  1634                     l8970:	
 16303                           ;DelayOff_B1.c: 93: } else {
 16304                           
 16305                           
 16306                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16307  1634  3005               	movlw	5
 16308  1635  0020               	movlb	0	; select bank0
 16309  1636                     L9:	
 16310  1636  00E8               	movwf	??_setDelayOff_GO
 16311  1637  0868               	movf	??_setDelayOff_GO,w
 16312  1638  00E2               	movwf	setProductData@value
 16313  1639  2E3C               	goto	L8
 16314  163A                     l8972:	
 16315                           ;DelayOff_B1.c: 95: }
 16316                           ;DelayOff_B1.c: 96: } else {
 16317                           
 16318                           
 16319                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16320  163A  0020               	movlb	0	; select bank0
 16321  163B  01E2               	clrf	setProductData@value
 16322  163C                     L8:	
 16323  163C  0869               	movf	setDelayOff_GO@sw,w
 16324  163D  3E1A               	addlw	26
 16325  163E  319B  23D7         	fcall	_setProductData
 16326                           
 16327                           ;DelayOff_B1.c: 98: }
 16328                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16329  1640  0875               	movf	_DelayOff,w
 16330  1641  3E02               	addlw	2
 16331  1642  0086               	movwf	6
 16332  1643  3001               	movlw	1	; select bank2/3
 16333  1644  0087               	movwf	7
 16334  1645  3000               	movlw	0
 16335  1646  3FC0               	movwi [0]fsr1
 16336  1647  3FC1               	movwi [1]fsr1
 16337                           
 16338                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16339  1648  0875               	movf	_DelayOff,w
 16340  1649  3E04               	addlw	4
 16341  164A  0086               	movwf	6
 16342  164B  3001               	movlw	1	; select bank2/3
 16343  164C  0087               	movwf	7
 16344  164D  0181               	clrf	1
 16345  164E  0008               	return
 16346  164F                     __end_of_setDelayOff_GO:	
 16347                           
 16348                           	psect	text101
 16349  1BD7                     __ptext101:	
 16350 ;; *************** function _setProductData *****************
 16351 ;; Defined at:
 16352 ;;		line 605 in file "../src/Main_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  address         1    wreg     unsigned char 
 16355 ;;  value           1   66[BANK0 ] unsigned char 
 16356 ;; Auto vars:     Size  Location     Type
 16357 ;;  address         1   69[BANK0 ] unsigned char 
 16358 ;; Return value:  Size  Location     Type
 16359 ;;		None               void
 16360 ;; Registers used:
 16361 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16362 ;; Tracked objects:
 16363 ;;		On entry : 0/0
 16364 ;;		On exit  : 0/0
 16365 ;;		Unchanged: 0/0
 16366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16367 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;Total ram usage:        4 bytes
 16372 ;; Hardware stack levels used:    1
 16373 ;; Hardware stack levels required when called:    5
 16374 ;; This function calls:
 16375 ;;		Nothing
 16376 ;; This function is called by:
 16377 ;;		_setDelayOff_GO
 16378 ;;		_setDimmerLights
 16379 ;;		_setDimmerLights_Adj
 16380 ;;		_setTemp_Main
 16381 ;;		_setLog_Code
 16382 ;;		_setControl_Lights_Table
 16383 ;;		_setRFSW_AdjControl
 16384 ;;		_setRF_DimmerValue
 16385 ;;		_setRF_DimmerLights
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _setProductData
 16391  1BD7                     _setProductData:	
 16392                           
 16393                           ;incstack = 0
 16394                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16395                           ;setProductData@address stored from wreg
 16396  1BD7  0020               	movlb	0	; select bank0
 16397  1BD8  00E5               	movwf	setProductData@address
 16398                           
 16399                           ;Main_B1.c: 606: product->Data[address] = value;
 16400  1BD9  0862               	movf	setProductData@value,w
 16401  1BDA  00E3               	movwf	??_setProductData
 16402  1BDB  0865               	movf	setProductData@address,w
 16403  1BDC  0779               	addwf	_product,w
 16404  1BDD  00E4               	movwf	??_setProductData+1
 16405  1BDE  0864               	movf	??_setProductData+1,w
 16406  1BDF  0086               	movwf	6
 16407  1BE0  3002               	movlw	2	; select bank4/5
 16408  1BE1  0087               	movwf	7
 16409  1BE2  0863               	movf	??_setProductData,w
 16410  1BE3  0081               	movwf	1
 16411  1BE4  0008               	return
 16412  1BE5                     __end_of_setProductData:	
 16413                           
 16414                           	psect	text102
 16415  10B3                     __ptext102:	
 16416 ;; *************** function _DelayTimejudge *****************
 16417 ;; Defined at:
 16418 ;;		line 112 in file "../src/DelayOff_B1.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;  value           1    wreg     unsigned char 
 16421 ;; Auto vars:     Size  Location     Type
 16422 ;;  value           1    9[BANK0 ] unsigned char 
 16423 ;;  k               1    8[BANK0 ] unsigned char 
 16424 ;;  j               1    7[BANK0 ] unsigned char 
 16425 ;;  i               1    6[BANK0 ] unsigned char 
 16426 ;; Return value:  Size  Location     Type
 16427 ;;                  1    wreg      unsigned char 
 16428 ;; Registers used:
 16429 ;;		wreg, status,2, status,0, pclath, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16438 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16439 ;;Total ram usage:        6 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    6
 16442 ;; This function calls:
 16443 ;;		___bmul
 16444 ;; This function is called by:
 16445 ;;		_setDelayOff_GO
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           
 16450                           ;psect for function _DelayTimejudge
 16451  10B3                     _DelayTimejudge:	
 16452                           
 16453                           ;incstack = 0
 16454                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16455                           ;DelayTimejudge@value stored from wreg
 16456  10B3  0020               	movlb	0	; select bank0
 16457  10B4  00A9               	movwf	DelayTimejudge@value
 16458                           
 16459                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16460  10B5  3005               	movlw	5
 16461  10B6  00A4               	movwf	??_DelayTimejudge
 16462  10B7  0824               	movf	??_DelayTimejudge,w
 16463  10B8  00A6               	movwf	DelayTimejudge@i
 16464  10B9  01A7               	clrf	DelayTimejudge@j
 16465  10BA  01A8               	clrf	DelayTimejudge@k
 16466                           
 16467                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16468  10BB  3031               	movlw	49
 16469  10BC  0229               	subwf	DelayTimejudge@value,w
 16470  10BD  1803               	skipnc
 16471  10BE  28DB               	goto	l8862
 16472                           
 16473                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16474  10BF  0829               	movf	DelayTimejudge@value,w
 16475  10C0  390F               	andlw	15
 16476  10C1  00A4               	movwf	??_DelayTimejudge
 16477  10C2  0824               	movf	??_DelayTimejudge,w
 16478  10C3  00A7               	movwf	DelayTimejudge@j
 16479                           
 16480                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16481  10C4  0829               	movf	DelayTimejudge@value,w
 16482  10C5  00A4               	movwf	??_DelayTimejudge
 16483  10C6  3004               	movlw	4
 16484  10C7                     u9625:	
 16485  10C7  36A4               	lsrf	??_DelayTimejudge,f
 16486  10C8  0B89               	decfsz	9,f
 16487  10C9  28C7               	goto	u9625
 16488  10CA  0824               	movf	??_DelayTimejudge,w
 16489  10CB  390F               	andlw	15
 16490  10CC  00A5               	movwf	??_DelayTimejudge+1
 16491  10CD  0825               	movf	??_DelayTimejudge+1,w
 16492  10CE  00A8               	movwf	DelayTimejudge@k
 16493                           
 16494                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16495  10CF  300A               	movlw	10
 16496  10D0  00A4               	movwf	??_DelayTimejudge
 16497  10D1  0824               	movf	??_DelayTimejudge,w
 16498  10D2  00A0               	movwf	___bmul@multiplicand
 16499  10D3  0828               	movf	DelayTimejudge@k,w
 16500  10D4  319C  2467         	fcall	___bmul
 16501  10D6  0020               	movlb	0	; select bank0
 16502  10D7  0727               	addwf	DelayTimejudge@j,w
 16503  10D8  00A5               	movwf	??_DelayTimejudge+1
 16504  10D9  0825               	movf	??_DelayTimejudge+1,w
 16505  10DA  00A6               	movwf	DelayTimejudge@i
 16506  10DB                     l8862:	
 16507                           
 16508                           ;DelayOff_B1.c: 118: }
 16509                           ;DelayOff_B1.c: 139: return i;
 16510  10DB  0826               	movf	DelayTimejudge@i,w
 16511  10DC  0008               	return
 16512  10DD                     __end_of_DelayTimejudge:	
 16513                           
 16514                           	psect	text103
 16515  1C67                     __ptext103:	
 16516 ;; *************** function ___bmul *****************
 16517 ;; Defined at:
 16518 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16519 ;; Parameters:    Size  Location     Type
 16520 ;;  multiplier      1    wreg     unsigned char 
 16521 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16522 ;; Auto vars:     Size  Location     Type
 16523 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16524 ;;  product         1    2[BANK0 ] unsigned char 
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      unsigned char 
 16527 ;; Registers used:
 16528 ;;		wreg, status,2, status,0
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16534 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;Total ram usage:        4 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    5
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_DelayTimejudge
 16545 ;; This function uses a non-reentrant model
 16546 ;;
 16547                           
 16548                           
 16549                           ;psect for function ___bmul
 16550  1C67                     ___bmul:	
 16551                           
 16552                           ;incstack = 0
 16553                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16554                           ;___bmul@multiplier stored from wreg
 16555  1C67  0020               	movlb	0	; select bank0
 16556  1C68  00A3               	movwf	___bmul@multiplier
 16557  1C69  01A2               	clrf	___bmul@product
 16558  1C6A                     l8600:	
 16559  1C6A  1C23               	btfss	___bmul@multiplier,0
 16560  1C6B  2C70               	goto	l8604
 16561  1C6C  0820               	movf	___bmul@multiplicand,w
 16562  1C6D  00A1               	movwf	??___bmul
 16563  1C6E  0821               	movf	??___bmul,w
 16564  1C6F  07A2               	addwf	___bmul@product,f
 16565  1C70                     l8604:	
 16566  1C70  1003               	clrc
 16567  1C71  0DA0               	rlf	___bmul@multiplicand,f
 16568  1C72  1003               	clrc
 16569  1C73  0CA3               	rrf	___bmul@multiplier,f
 16570  1C74  08A3               	movf	___bmul@multiplier,f
 16571  1C75  1D03               	skipz
 16572  1C76  2C6A               	goto	l8600
 16573  1C77  0822               	movf	___bmul@product,w
 16574  1C78  0008               	return
 16575  1C79                     __end_of___bmul:	
 16576                           
 16577                           	psect	text104
 16578  1C12                     __ptext104:	
 16579 ;; *************** function _getDelayOff_GO *****************
 16580 ;; Defined at:
 16581 ;;		line 105 in file "../src/DelayOff_B1.c"
 16582 ;; Parameters:    Size  Location     Type
 16583 ;;  sw              1    wreg     unsigned char 
 16584 ;; Auto vars:     Size  Location     Type
 16585 ;;  sw              1    2[BANK0 ] unsigned char 
 16586 ;;  go              1    3[BANK0 ] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  1    wreg      unsigned char 
 16589 ;; Registers used:
 16590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;Total ram usage:        2 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    6
 16603 ;; This function calls:
 16604 ;;		_DelayOffPointSelect
 16605 ;; This function is called by:
 16606 ;;		_setDimmerLights_SwOff
 16607 ;;		_setRFSW_Control
 16608 ;; This function uses a non-reentrant model
 16609 ;;
 16610                           
 16611                           
 16612                           ;psect for function _getDelayOff_GO
 16613  1C12                     _getDelayOff_GO:	
 16614                           
 16615                           ;incstack = 0
 16616                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16617                           ;getDelayOff_GO@sw stored from wreg
 16618  1C12  0020               	movlb	0	; select bank0
 16619  1C13  00A2               	movwf	getDelayOff_GO@sw
 16620                           
 16621                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16622  1C14  0822               	movf	getDelayOff_GO@sw,w
 16623  1C15  319C  24FC         	fcall	_DelayOffPointSelect
 16624                           
 16625                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16626  1C17  0875               	movf	_DelayOff,w
 16627  1C18  0086               	movwf	6
 16628  1C19  3001               	movlw	1	; select bank2/3
 16629  1C1A  0087               	movwf	7
 16630  1C1B  3000               	movlw	0
 16631  1C1C  1881               	btfsc	1,1
 16632  1C1D  3001               	movlw	1
 16633  1C1E  0020               	movlb	0	; select bank0
 16634  1C1F  00A3               	movwf	getDelayOff_GO@go
 16635                           
 16636                           ;DelayOff_B1.c: 108: return go;
 16637  1C20  0823               	movf	getDelayOff_GO@go,w
 16638  1C21  0008               	return
 16639  1C22                     __end_of_getDelayOff_GO:	
 16640                           
 16641                           	psect	text105
 16642  1C22                     __ptext105:	
 16643 ;; *************** function _getDimmerLights_Status *****************
 16644 ;; Defined at:
 16645 ;;		line 753 in file "../src/Dimmer_B1.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;  lights          1    wreg     unsigned char 
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;  lights          1    2[BANK0 ] unsigned char 
 16650 ;;  status          1    3[BANK0 ] unsigned char 
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      unsigned char 
 16653 ;; Registers used:
 16654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16655 ;; Tracked objects:
 16656 ;;		On entry : 0/0
 16657 ;;		On exit  : 0/0
 16658 ;;		Unchanged: 0/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16661 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;Total ram usage:        2 bytes
 16665 ;; Hardware stack levels used:    1
 16666 ;; Hardware stack levels required when called:    6
 16667 ;; This function calls:
 16668 ;;		_DimmerLightsPointSelect
 16669 ;; This function is called by:
 16670 ;;		_setDimmerLights_ErrorClose
 16671 ;;		_Exception_Main
 16672 ;;		_setRFSW_Control
 16673 ;;		_setRFSW_AdjControl
 16674 ;; This function uses a non-reentrant model
 16675 ;;
 16676                           
 16677                           
 16678                           ;psect for function _getDimmerLights_Status
 16679  1C22                     _getDimmerLights_Status:	
 16680                           
 16681                           ;incstack = 0
 16682                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16683                           ;getDimmerLights_Status@lights stored from wreg
 16684  1C22  0020               	movlb	0	; select bank0
 16685  1C23  00A2               	movwf	getDimmerLights_Status@lights
 16686                           
 16687                           ;Dimmer_B1.c: 754: DimmerLightsPointSelect(lights);
 16688  1C24  0822               	movf	getDimmerLights_Status@lights,w
 16689  1C25  319C  24AF         	fcall	_DimmerLightsPointSelect
 16690                           
 16691                           ;Dimmer_B1.c: 755: char status = DimmerLights->Status == 1 ? 1 : 0;
 16692  1C27  0020               	movlb	0	; select bank0
 16693  1C28  086F               	movf	_DimmerLights,w
 16694  1C29  3E02               	addlw	2
 16695  1C2A  0086               	movwf	6
 16696  1C2B  3001               	movlw	1	; select bank2/3
 16697  1C2C  0087               	movwf	7
 16698  1C2D  3000               	movlw	0
 16699  1C2E  1881               	btfsc	1,1
 16700  1C2F  3001               	movlw	1
 16701  1C30  00A3               	movwf	getDimmerLights_Status@status
 16702                           
 16703                           ;Dimmer_B1.c: 756: return status;
 16704  1C31  0823               	movf	getDimmerLights_Status@status,w
 16705  1C32  0008               	return
 16706  1C33                     __end_of_getDimmerLights_Status:	
 16707                           
 16708                           	psect	text106
 16709  1CAF                     __ptext106:	
 16710 ;; *************** function _DimmerLightsPointSelect *****************
 16711 ;; Defined at:
 16712 ;;		line 321 in file "../src/Dimmer_B1.c"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;  lights          1    wreg     unsigned char 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;  lights          1    1[BANK0 ] unsigned char 
 16717 ;; Return value:  Size  Location     Type
 16718 ;;		None               void
 16719 ;; Registers used:
 16720 ;;		wreg
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;Total ram usage:        2 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    5
 16733 ;; This function calls:
 16734 ;;		Nothing
 16735 ;; This function is called by:
 16736 ;;		_setDimmerLights_Initialization
 16737 ;;		_setDimmerLights_SwOn
 16738 ;;		_setDimmerLights_SwOff
 16739 ;;		_setDimmerLights_AdjOn
 16740 ;;		_setDimmerLights_Main
 16741 ;;		_getDimmerLights_Status
 16742 ;;		_getAll_DimmerLights_AdjSw
 16743 ;;		_setDimmerLights_ErrorClose
 16744 ;;		_setDimmerLights_AdjRF
 16745 ;;		_setDimmerLights_Status
 16746 ;;		_setDimmerLights_GO
 16747 ;;		_setDimmerLights_MaxmumValue
 16748 ;;		_setDimmerLights_Trigger
 16749 ;;		_setDimmerLights_TriggerAdj
 16750 ;; This function uses a non-reentrant model
 16751 ;;
 16752                           
 16753                           
 16754                           ;psect for function _DimmerLightsPointSelect
 16755  1CAF                     _DimmerLightsPointSelect:	
 16756                           
 16757                           ;incstack = 0
 16758                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16759                           ;DimmerLightsPointSelect@lights stored from wreg
 16760  1CAF  0020               	movlb	0	; select bank0
 16761  1CB0  00A1               	movwf	DimmerLightsPointSelect@lights
 16762                           
 16763                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16764  1CB1  0821               	movf	DimmerLightsPointSelect@lights,w
 16765  1CB2  3A01               	xorlw	1
 16766  1CB3  1D03               	skipz
 16767  1CB4  2CB9               	goto	l768
 16768                           
 16769                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16770  1CB5  3055               	movlw	_DimmerLights1& (0+255)
 16771  1CB6  00A0               	movwf	??_DimmerLightsPointSelect
 16772  1CB7  0820               	movf	??_DimmerLightsPointSelect,w
 16773  1CB8  00EF               	movwf	_DimmerLights
 16774  1CB9                     l768:	
 16775                           
 16776                           ;Dimmer_B1.c: 325: }
 16777                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16778  1CB9  0821               	movf	DimmerLightsPointSelect@lights,w
 16779  1CBA  3A02               	xorlw	2
 16780  1CBB  1D03               	skipz
 16781  1CBC  0008               	return
 16782                           
 16783                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 16784  1CBD  30BE               	movlw	_DimmerLights2& (0+255)
 16785  1CBE  00A0               	movwf	??_DimmerLightsPointSelect
 16786  1CBF  0820               	movf	??_DimmerLightsPointSelect,w
 16787  1CC0  00EF               	movwf	_DimmerLights
 16788  1CC1  0008               	return
 16789  1CC2                     __end_of_DimmerLightsPointSelect:	
 16790                           
 16791                           	psect	text107
 16792  174E                     __ptext107:	
 16793 ;; *************** function _setBuz *****************
 16794 ;; Defined at:
 16795 ;;		line 22 in file "../src/Buzzer_B1.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  count           1    wreg     unsigned char 
 16798 ;;  time            2    9[BANK0 ] int 
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;  count           1   12[BANK0 ] unsigned char 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;		None               void
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0, pclath, cstack
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;Total ram usage:        4 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:    6
 16817 ;; This function calls:
 16818 ;;		___awdiv
 16819 ;; This function is called by:
 16820 ;;		_DlyOff_Main
 16821 ;;		_setDimmerLights_SwOn
 16822 ;;		_setDimmerLights_Adj
 16823 ;;		_my_MainTimer
 16824 ;;		_Exception_Main
 16825 ;;		_setTemp_Main
 16826 ;;		_setLog_Code
 16827 ;;		_setControl_Lights_Table
 16828 ;;		_setRFSW_Control
 16829 ;;		_setSw_Main
 16830 ;; This function uses a non-reentrant model
 16831 ;;
 16832                           
 16833                           
 16834                           ;psect for function _setBuz
 16835  174E                     _setBuz:	
 16836                           
 16837                           ;incstack = 0
 16838                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16839                           ;setBuz@count stored from wreg
 16840  174E  0020               	movlb	0	; select bank0
 16841  174F  00AC               	movwf	setBuz@count
 16842                           
 16843                           ;Buzzer_B1.c: 23: time /= 10;
 16844  1750  300A               	movlw	10
 16845  1751  00A0               	movwf	___awdiv@divisor
 16846  1752  3000               	movlw	0
 16847  1753  00A1               	movwf	___awdiv@divisor+1
 16848  1754  082A               	movf	setBuz@time+1,w
 16849  1755  01A3               	clrf	___awdiv@dividend+1
 16850  1756  07A3               	addwf	___awdiv@dividend+1,f
 16851  1757  0829               	movf	setBuz@time,w
 16852  1758  01A2               	clrf	___awdiv@dividend
 16853  1759  07A2               	addwf	___awdiv@dividend,f
 16854  175A  3196  26A2  3197   	fcall	___awdiv
 16855  175D  0020               	movlb	0	; select bank0
 16856  175E  0821               	movf	?___awdiv+1,w
 16857  175F  01AA               	clrf	setBuz@time+1
 16858  1760  07AA               	addwf	setBuz@time+1,f
 16859  1761  0820               	movf	?___awdiv,w
 16860  1762  01A9               	clrf	setBuz@time
 16861  1763  07A9               	addwf	setBuz@time,f
 16862                           
 16863                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16864  1764  0021               	movlb	1	; select bank1
 16865  1765  1C2E               	btfss	_Buz1^(0+128),0
 16866  1766  0008               	return
 16867                           
 16868                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16869  1767  18AE               	btfsc	_Buz1^(0+128),1
 16870  1768  2F7F               	goto	l96
 16871                           
 16872                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16873  1769  14AE               	bsf	_Buz1^(0+128),1
 16874                           
 16875                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16876  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16877  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16878                           
 16879                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16880  176C  0020               	movlb	0	; select bank0
 16881  176D  082C               	movf	setBuz@count,w
 16882  176E  00AB               	movwf	??_setBuz
 16883  176F  082B               	movf	??_setBuz,w
 16884  1770  0021               	movlb	1	; select bank1
 16885  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16886                           
 16887                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16888  1772  0020               	movlb	0	; select bank0
 16889  1773  082A               	movf	setBuz@time+1,w
 16890  1774  0021               	movlb	1	; select bank1
 16891  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16892  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16893  1777  0020               	movlb	0	; select bank0
 16894  1778  0829               	movf	setBuz@time,w
 16895  1779  0021               	movlb	1	; select bank1
 16896  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16897  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16898                           
 16899                           ;Buzzer_B1.c: 30: RB3 = 1;
 16900  177C  0020               	movlb	0	; select bank0
 16901  177D  158D               	bsf	13,3	;volatile
 16902                           
 16903                           ;Buzzer_B1.c: 31: } else {
 16904  177E  0008               	return
 16905  177F                     l96:	
 16906                           
 16907                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16908  177F  19AE               	btfsc	_Buz1^(0+128),3
 16909  1780  2F93               	goto	l98
 16910                           
 16911                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16912  1781  15AE               	bsf	_Buz1^(0+128),3
 16913                           
 16914                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16915  1782  0020               	movlb	0	; select bank0
 16916  1783  082C               	movf	setBuz@count,w
 16917  1784  00AB               	movwf	??_setBuz
 16918  1785  082B               	movf	??_setBuz,w
 16919  1786  0021               	movlb	1	; select bank1
 16920  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16921                           
 16922                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16923  1788  0020               	movlb	0	; select bank0
 16924  1789  082A               	movf	setBuz@time+1,w
 16925  178A  0021               	movlb	1	; select bank1
 16926  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16927  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16928  178D  0020               	movlb	0	; select bank0
 16929  178E  0829               	movf	setBuz@time,w
 16930  178F  0021               	movlb	1	; select bank1
 16931  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16932  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16933                           
 16934                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16935  1792  0008               	return
 16936  1793                     l98:	
 16937  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16938  1794  0008               	return
 16939                           
 16940                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16941  1795  162E               	bsf	_Buz1^(0+128),4
 16942                           
 16943                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16944  1796  0020               	movlb	0	; select bank0
 16945  1797  082C               	movf	setBuz@count,w
 16946  1798  00AB               	movwf	??_setBuz
 16947  1799  082B               	movf	??_setBuz,w
 16948  179A  0021               	movlb	1	; select bank1
 16949  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16950                           
 16951                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16952  179C  0020               	movlb	0	; select bank0
 16953  179D  082A               	movf	setBuz@time+1,w
 16954  179E  0021               	movlb	1	; select bank1
 16955  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16956  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16957  17A1  0020               	movlb	0	; select bank0
 16958  17A2  0829               	movf	setBuz@time,w
 16959  17A3  0021               	movlb	1	; select bank1
 16960  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16961  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16962  17A6  0008               	return
 16963  17A7                     __end_of_setBuz:	
 16964                           
 16965                           	psect	text108
 16966  16A2                     __ptext108:	
 16967 ;; *************** function ___awdiv *****************
 16968 ;; Defined at:
 16969 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;  divisor         2    0[BANK0 ] int 
 16972 ;;  dividend        2    2[BANK0 ] int 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;  quotient        2    7[BANK0 ] int 
 16975 ;;  sign            1    6[BANK0 ] unsigned char 
 16976 ;;  counter         1    5[BANK0 ] unsigned char 
 16977 ;; Return value:  Size  Location     Type
 16978 ;;                  2    0[BANK0 ] int 
 16979 ;; Registers used:
 16980 ;;		wreg, status,2, status,0
 16981 ;; Tracked objects:
 16982 ;;		On entry : 0/0
 16983 ;;		On exit  : 0/0
 16984 ;;		Unchanged: 0/0
 16985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16989 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16990 ;;Total ram usage:        9 bytes
 16991 ;; Hardware stack levels used:    1
 16992 ;; Hardware stack levels required when called:    5
 16993 ;; This function calls:
 16994 ;;		Nothing
 16995 ;; This function is called by:
 16996 ;;		_setBuz
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           
 17001                           ;psect for function ___awdiv
 17002  16A2                     ___awdiv:	
 17003                           
 17004                           ;incstack = 0
 17005                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17006  16A2  0020               	movlb	0	; select bank0
 17007  16A3  01A6               	clrf	___awdiv@sign
 17008  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 17009  16A5  2EAD               	goto	l8890
 17010  16A6  09A0               	comf	___awdiv@divisor,f
 17011  16A7  09A1               	comf	___awdiv@divisor+1,f
 17012  16A8  0AA0               	incf	___awdiv@divisor,f
 17013  16A9  1903               	skipnz
 17014  16AA  0AA1               	incf	___awdiv@divisor+1,f
 17015  16AB  01A6               	clrf	___awdiv@sign
 17016  16AC  0AA6               	incf	___awdiv@sign,f
 17017  16AD                     l8890:	
 17018  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 17019  16AE  2EB8               	goto	l8896
 17020  16AF  09A2               	comf	___awdiv@dividend,f
 17021  16B0  09A3               	comf	___awdiv@dividend+1,f
 17022  16B1  0AA2               	incf	___awdiv@dividend,f
 17023  16B2  1903               	skipnz
 17024  16B3  0AA3               	incf	___awdiv@dividend+1,f
 17025  16B4  3001               	movlw	1
 17026  16B5  00A4               	movwf	??___awdiv
 17027  16B6  0824               	movf	??___awdiv,w
 17028  16B7  06A6               	xorwf	___awdiv@sign,f
 17029  16B8                     l8896:	
 17030  16B8  01A7               	clrf	___awdiv@quotient
 17031  16B9  01A8               	clrf	___awdiv@quotient+1
 17032  16BA  0821               	movf	___awdiv@divisor+1,w
 17033  16BB  0420               	iorwf	___awdiv@divisor,w
 17034  16BC  1903               	skipnz
 17035  16BD  2EE7               	goto	l8918
 17036  16BE  01A5               	clrf	___awdiv@counter
 17037  16BF  0AA5               	incf	___awdiv@counter,f
 17038  16C0                     l8906:	
 17039  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 17040  16C1  2ECC               	goto	l8908
 17041  16C2  3001               	movlw	1
 17042  16C3                     u9685:	
 17043  16C3  35A0               	lslf	___awdiv@divisor,f
 17044  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 17045  16C5  0B89               	decfsz	9,f
 17046  16C6  2EC3               	goto	u9685
 17047  16C7  3001               	movlw	1
 17048  16C8  00A4               	movwf	??___awdiv
 17049  16C9  0824               	movf	??___awdiv,w
 17050  16CA  07A5               	addwf	___awdiv@counter,f
 17051  16CB  2EC0               	goto	l8906
 17052  16CC                     l8908:	
 17053  16CC  3001               	movlw	1
 17054  16CD                     u9705:	
 17055  16CD  35A7               	lslf	___awdiv@quotient,f
 17056  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 17057  16CF  0B89               	decfsz	9,f
 17058  16D0  2ECD               	goto	u9705
 17059  16D1  0821               	movf	___awdiv@divisor+1,w
 17060  16D2  0223               	subwf	___awdiv@dividend+1,w
 17061  16D3  1D03               	skipz
 17062  16D4  2ED7               	goto	u9715
 17063  16D5  0820               	movf	___awdiv@divisor,w
 17064  16D6  0222               	subwf	___awdiv@dividend,w
 17065  16D7                     u9715:	
 17066  16D7  1C03               	skipc
 17067  16D8  2EDE               	goto	l8914
 17068  16D9  0820               	movf	___awdiv@divisor,w
 17069  16DA  02A2               	subwf	___awdiv@dividend,f
 17070  16DB  0821               	movf	___awdiv@divisor+1,w
 17071  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 17072  16DD  1427               	bsf	___awdiv@quotient,0
 17073  16DE                     l8914:	
 17074  16DE  3001               	movlw	1
 17075  16DF                     u9725:	
 17076  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 17077  16E0  0CA0               	rrf	___awdiv@divisor,f
 17078  16E1  0B89               	decfsz	9,f
 17079  16E2  2EDF               	goto	u9725
 17080  16E3  3001               	movlw	1
 17081  16E4  02A5               	subwf	___awdiv@counter,f
 17082  16E5  1D03               	btfss	3,2
 17083  16E6  2ECC               	goto	l8908
 17084  16E7                     l8918:	
 17085  16E7  0826               	movf	___awdiv@sign,w
 17086  16E8  1903               	btfsc	3,2
 17087  16E9  2EEF               	goto	l8922
 17088  16EA  09A7               	comf	___awdiv@quotient,f
 17089  16EB  09A8               	comf	___awdiv@quotient+1,f
 17090  16EC  0AA7               	incf	___awdiv@quotient,f
 17091  16ED  1903               	skipnz
 17092  16EE  0AA8               	incf	___awdiv@quotient+1,f
 17093  16EF                     l8922:	
 17094  16EF  0828               	movf	___awdiv@quotient+1,w
 17095  16F0  01A1               	clrf	?___awdiv+1
 17096  16F1  07A1               	addwf	?___awdiv+1,f
 17097  16F2  0827               	movf	___awdiv@quotient,w
 17098  16F3  01A0               	clrf	?___awdiv
 17099  16F4  07A0               	addwf	?___awdiv,f
 17100  16F5  0008               	return
 17101  16F6                     __end_of___awdiv:	
 17102                           
 17103                           	psect	text109
 17104  1B12                     __ptext109:	
 17105 ;; *************** function _DelayOff_Initialization *****************
 17106 ;; Defined at:
 17107 ;;		line 26 in file "../src/DelayOff_B1.c"
 17108 ;; Parameters:    Size  Location     Type
 17109 ;;		None
 17110 ;; Auto vars:     Size  Location     Type
 17111 ;;		None
 17112 ;; Return value:  Size  Location     Type
 17113 ;;		None               void
 17114 ;; Registers used:
 17115 ;;		wreg, status,2, status,0, pclath, cstack
 17116 ;; Tracked objects:
 17117 ;;		On entry : 0/0
 17118 ;;		On exit  : 0/0
 17119 ;;		Unchanged: 0/0
 17120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17125 ;;Total ram usage:        0 bytes
 17126 ;; Hardware stack levels used:    1
 17127 ;; Hardware stack levels required when called:    7
 17128 ;; This function calls:
 17129 ;;		_DlyOff_Initialization
 17130 ;; This function is called by:
 17131 ;;		_main
 17132 ;; This function uses a non-reentrant model
 17133 ;;
 17134                           
 17135                           
 17136                           ;psect for function _DelayOff_Initialization
 17137  1B12                     _DelayOff_Initialization:	
 17138                           
 17139                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17140                           
 17141                           ;incstack = 0
 17142                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17143  1B12  3001               	movlw	1
 17144  1B13  319A  22F1  319B   	fcall	_DlyOff_Initialization
 17145                           
 17146                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17147  1B16  3002               	movlw	2
 17148  1B17  319A  22F1         	fcall	_DlyOff_Initialization
 17149  1B19  0008               	return
 17150  1B1A                     __end_of_DelayOff_Initialization:	
 17151                           
 17152                           	psect	text110
 17153  1AF1                     __ptext110:	
 17154 ;; *************** function _DlyOff_Initialization *****************
 17155 ;; Defined at:
 17156 ;;		line 56 in file "../src/DelayOff_B1.c"
 17157 ;; Parameters:    Size  Location     Type
 17158 ;;  sw              1    wreg     unsigned char 
 17159 ;; Auto vars:     Size  Location     Type
 17160 ;;  sw              1    2[BANK0 ] unsigned char 
 17161 ;; Return value:  Size  Location     Type
 17162 ;;		None               void
 17163 ;; Registers used:
 17164 ;;		wreg, status,2, status,0, pclath, cstack
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17173 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;Total ram usage:        1 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    6
 17177 ;; This function calls:
 17178 ;;		_DelayOffPointSelect
 17179 ;; This function is called by:
 17180 ;;		_DelayOff_Initialization
 17181 ;; This function uses a non-reentrant model
 17182 ;;
 17183                           
 17184                           
 17185                           ;psect for function _DlyOff_Initialization
 17186  1AF1                     _DlyOff_Initialization:	
 17187                           
 17188                           ;incstack = 0
 17189                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17190                           ;DlyOff_Initialization@sw stored from wreg
 17191  1AF1  0020               	movlb	0	; select bank0
 17192  1AF2  00A2               	movwf	DlyOff_Initialization@sw
 17193                           
 17194                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17195  1AF3  0822               	movf	DlyOff_Initialization@sw,w
 17196  1AF4  319C  24FC         	fcall	_DelayOffPointSelect
 17197  1AF6  0008               	return
 17198  1AF7                     __end_of_DlyOff_Initialization:	
 17199                           
 17200                           	psect	text111
 17201  1CFC                     __ptext111:	
 17202 ;; *************** function _DelayOffPointSelect *****************
 17203 ;; Defined at:
 17204 ;;		line 7 in file "../src/DelayOff_B1.c"
 17205 ;; Parameters:    Size  Location     Type
 17206 ;;  sw              1    wreg     unsigned char 
 17207 ;; Auto vars:     Size  Location     Type
 17208 ;;  sw              1    1[BANK0 ] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;		None               void
 17211 ;; Registers used:
 17212 ;;		wreg
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;Total ram usage:        2 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    5
 17225 ;; This function calls:
 17226 ;;		Nothing
 17227 ;; This function is called by:
 17228 ;;		_DlyOff_Initialization
 17229 ;;		_DlyOff_Main
 17230 ;;		_setDelayOff_GO
 17231 ;;		_getDelayOff_GO
 17232 ;; This function uses a non-reentrant model
 17233 ;;
 17234                           
 17235                           
 17236                           ;psect for function _DelayOffPointSelect
 17237  1CFC                     _DelayOffPointSelect:	
 17238                           
 17239                           ;incstack = 0
 17240                           ; Regs used in _DelayOffPointSelect: [wreg]
 17241                           ;DelayOffPointSelect@sw stored from wreg
 17242  1CFC  0020               	movlb	0	; select bank0
 17243  1CFD  00A1               	movwf	DelayOffPointSelect@sw
 17244                           
 17245                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17246  1CFE  0821               	movf	DelayOffPointSelect@sw,w
 17247  1CFF  3A01               	xorlw	1
 17248  1D00  1D03               	skipz
 17249  1D01  2D07               	goto	l8846
 17250                           
 17251                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17252  1D02  30E1               	movlw	_DlySw1& (0+255)
 17253  1D03  00A0               	movwf	??_DelayOffPointSelect
 17254  1D04  0820               	movf	??_DelayOffPointSelect,w
 17255  1D05  00F5               	movwf	_DelayOff
 17256                           
 17257                           ;DelayOff_B1.c: 11: }
 17258  1D06  0008               	return
 17259  1D07                     l8846:	
 17260                           
 17261                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17262  1D07  0821               	movf	DelayOffPointSelect@sw,w
 17263  1D08  3A02               	xorlw	2
 17264  1D09  1D03               	skipz
 17265  1D0A  0008               	return
 17266                           
 17267                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17268  1D0B  30E6               	movlw	_DlySw2& (0+255)
 17269  1D0C  00A0               	movwf	??_DelayOffPointSelect
 17270  1D0D  0820               	movf	??_DelayOffPointSelect,w
 17271  1D0E  00F5               	movwf	_DelayOff
 17272  1D0F  0008               	return
 17273  1D10                     __end_of_DelayOffPointSelect:	
 17274                           
 17275                           	psect	text112
 17276  1D89                     __ptext112:	
 17277 ;; *************** function _CC2500_PowerOnInitial *****************
 17278 ;; Defined at:
 17279 ;;		line 119 in file "../src/CC2500_B1.c"
 17280 ;; Parameters:    Size  Location     Type
 17281 ;;		None
 17282 ;; Auto vars:     Size  Location     Type
 17283 ;;		None
 17284 ;; Return value:  Size  Location     Type
 17285 ;;		None               void
 17286 ;; Registers used:
 17287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17288 ;; Tracked objects:
 17289 ;;		On entry : 0/0
 17290 ;;		On exit  : 0/0
 17291 ;;		Unchanged: 0/0
 17292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;Total ram usage:        0 bytes
 17298 ;; Hardware stack levels used:    1
 17299 ;; Hardware stack levels required when called:    8
 17300 ;; This function calls:
 17301 ;;		_CC2500_ClearRXFIFO
 17302 ;;		_CC2500_ClearTXFIFO
 17303 ;;		_CC2500_FrequencyCabr
 17304 ;;		_CC2500_InitPATable
 17305 ;;		_CC2500_InitSetREG
 17306 ;;		_CC2500_PowerRST
 17307 ;;		_CC2500_SIDLEMode
 17308 ;; This function is called by:
 17309 ;;		_main
 17310 ;; This function uses a non-reentrant model
 17311 ;;
 17312                           
 17313                           
 17314                           ;psect for function _CC2500_PowerOnInitial
 17315  1D89                     _CC2500_PowerOnInitial:	
 17316                           
 17317                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17318                           
 17319                           ;incstack = 0
 17320                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17321  1D89  3193  23E0  319D   	fcall	_CC2500_PowerRST
 17322                           
 17323                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17324  1D8C  3190  2089  319D   	fcall	_CC2500_InitSetREG
 17325                           
 17326                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17327  1D8F  319E  2688  319D   	fcall	_CC2500_InitPATable
 17328                           
 17329                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17330  1D92  319A  22E0  319D   	fcall	_CC2500_ClearTXFIFO
 17331                           
 17332                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17333  1D95  319A  22DC  319D   	fcall	_CC2500_ClearRXFIFO
 17334                           
 17335                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17336  1D98  319B  236A  319D   	fcall	_CC2500_FrequencyCabr
 17337                           
 17338                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17339  1D9B  319A  22E4         	fcall	_CC2500_SIDLEMode
 17340  1D9D  0008               	return
 17341  1D9E                     __end_of_CC2500_PowerOnInitial:	
 17342                           
 17343                           	psect	text113
 17344  1AE4                     __ptext113:	
 17345 ;; *************** function _CC2500_SIDLEMode *****************
 17346 ;; Defined at:
 17347 ;;		line 209 in file "../src/CC2500_B1.c"
 17348 ;; Parameters:    Size  Location     Type
 17349 ;;		None
 17350 ;; Auto vars:     Size  Location     Type
 17351 ;;		None
 17352 ;; Return value:  Size  Location     Type
 17353 ;;		None               void
 17354 ;; Registers used:
 17355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17356 ;; Tracked objects:
 17357 ;;		On entry : 0/0
 17358 ;;		On exit  : 0/0
 17359 ;;		Unchanged: 0/0
 17360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17365 ;;Total ram usage:        0 bytes
 17366 ;; Hardware stack levels used:    1
 17367 ;; Hardware stack levels required when called:    7
 17368 ;; This function calls:
 17369 ;;		_CC2500_WriteCommand
 17370 ;; This function is called by:
 17371 ;;		_CC2500_PowerOnInitial
 17372 ;; This function uses a non-reentrant model
 17373 ;;
 17374                           
 17375                           
 17376                           ;psect for function _CC2500_SIDLEMode
 17377  1AE4                     _CC2500_SIDLEMode:	
 17378                           
 17379                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17380                           
 17381                           ;incstack = 0
 17382                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17383  1AE4  3036               	movlw	54
 17384  1AE5  319D  25FD         	fcall	_CC2500_WriteCommand
 17385  1AE7  0008               	return
 17386  1AE8                     __end_of_CC2500_SIDLEMode:	
 17387                           
 17388                           	psect	text114
 17389  13E0                     __ptext114:	
 17390 ;; *************** function _CC2500_PowerRST *****************
 17391 ;; Defined at:
 17392 ;;		line 132 in file "../src/CC2500_B1.c"
 17393 ;; Parameters:    Size  Location     Type
 17394 ;;		None
 17395 ;; Auto vars:     Size  Location     Type
 17396 ;;		None
 17397 ;; Return value:  Size  Location     Type
 17398 ;;		None               void
 17399 ;; Registers used:
 17400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17401 ;; Tracked objects:
 17402 ;;		On entry : 0/0
 17403 ;;		On exit  : 0/0
 17404 ;;		Unchanged: 0/0
 17405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17410 ;;Total ram usage:        1 bytes
 17411 ;; Hardware stack levels used:    1
 17412 ;; Hardware stack levels required when called:    6
 17413 ;; This function calls:
 17414 ;;		_CC2500_WriteByte
 17415 ;;		_DelayTime_1us
 17416 ;;		_Timeout_Counter
 17417 ;;		_set_TimeoutCleared
 17418 ;; This function is called by:
 17419 ;;		_CC2500_PowerOnInitial
 17420 ;; This function uses a non-reentrant model
 17421 ;;
 17422                           
 17423                           
 17424                           ;psect for function _CC2500_PowerRST
 17425  13E0                     _CC2500_PowerRST:	
 17426                           
 17427                           ;CC2500_B1.c: 133: RC1 = 0;
 17428                           
 17429                           ;incstack = 0
 17430                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17431  13E0  0020               	movlb	0	; select bank0
 17432  13E1  108E               	bcf	14,1	;volatile
 17433                           
 17434                           ;CC2500_B1.c: 134: RC0 = 0;
 17435  13E2  100E               	bcf	14,0	;volatile
 17436                           
 17437                           ;CC2500_B1.c: 135: RC4 = 1;
 17438  13E3  160E               	bsf	14,4	;volatile
 17439                           
 17440                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17441  13E4  300A               	movlw	10
 17442  13E5  00A0               	movwf	DelayTime_1us@count
 17443  13E6  3000               	movlw	0
 17444  13E7  00A1               	movwf	DelayTime_1us@count+1
 17445  13E8  319F  27B1  3193   	fcall	_DelayTime_1us
 17446                           
 17447                           ;CC2500_B1.c: 137: RC4 = 0;
 17448  13EB  0020               	movlb	0	; select bank0
 17449  13EC  120E               	bcf	14,4	;volatile
 17450                           
 17451                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17452  13ED  300A               	movlw	10
 17453  13EE  00A0               	movwf	DelayTime_1us@count
 17454  13EF  3000               	movlw	0
 17455  13F0  00A1               	movwf	DelayTime_1us@count+1
 17456  13F1  319F  27B1  3193   	fcall	_DelayTime_1us
 17457                           
 17458                           ;CC2500_B1.c: 139: RC4 = 1;
 17459  13F4  0020               	movlb	0	; select bank0
 17460  13F5  160E               	bsf	14,4	;volatile
 17461                           
 17462                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17463  13F6  3028               	movlw	40
 17464  13F7  00A0               	movwf	DelayTime_1us@count
 17465  13F8  3000               	movlw	0
 17466  13F9  00A1               	movwf	DelayTime_1us@count+1
 17467  13FA  319F  27B1  3193   	fcall	_DelayTime_1us
 17468                           
 17469                           ;CC2500_B1.c: 141: RC4 = 0;
 17470  13FD  0020               	movlb	0	; select bank0
 17471  13FE  120E               	bcf	14,4	;volatile
 17472                           
 17473                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17474  13FF  3030               	movlw	48
 17475  1400  00A6               	movwf	??_CC2500_PowerRST
 17476  1401  0826               	movf	??_CC2500_PowerRST,w
 17477  1402  0021               	movlb	1	; select bank1
 17478  1403  00D0               	movwf	_SPI0Buffer^(0+128)
 17479                           
 17480                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17481  1404  2C08               	goto	l9856
 17482  1405                     l9854:	
 17483                           
 17484                           ;CC2500_B1.c: 144: Timeout_Counter();
 17485  1405  319D  2574  3193   	fcall	_Timeout_Counter
 17486  1408                     l9856:	
 17487  1408  0020               	movlb	0	; select bank0
 17488  1409  1D0E               	btfss	14,2	;volatile
 17489  140A  2C0E               	goto	l9860
 17490  140B  0021               	movlb	1	; select bank1
 17491  140C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17492  140D  2C05               	goto	l9854
 17493  140E                     l9860:	
 17494                           
 17495                           ;CC2500_B1.c: 145: };
 17496                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17497  140E  319A  22EC  3193   	fcall	_set_TimeoutCleared
 17498                           
 17499                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17500  1411  319D  25CB  3193   	fcall	_CC2500_WriteByte
 17501                           
 17502                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17503  1414  2C18               	goto	l9866
 17504  1415                     l9864:	
 17505                           
 17506                           ;CC2500_B1.c: 149: Timeout_Counter();
 17507  1415  319D  2574  3193   	fcall	_Timeout_Counter
 17508  1418                     l9866:	
 17509  1418  0020               	movlb	0	; select bank0
 17510  1419  1D0E               	btfss	14,2	;volatile
 17511  141A  2C1E               	goto	l9870
 17512  141B  0021               	movlb	1	; select bank1
 17513  141C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17514  141D  2C15               	goto	l9864
 17515  141E                     l9870:	
 17516                           
 17517                           ;CC2500_B1.c: 150: };
 17518                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17519  141E  319A  22EC         	fcall	_set_TimeoutCleared
 17520                           
 17521                           ;CC2500_B1.c: 152: RC0 = 0;
 17522  1420  0020               	movlb	0	; select bank0
 17523  1421  100E               	bcf	14,0	;volatile
 17524                           
 17525                           ;CC2500_B1.c: 153: RC4 = 1;
 17526  1422  160E               	bsf	14,4	;volatile
 17527  1423  0008               	return
 17528  1424                     __end_of_CC2500_PowerRST:	
 17529                           
 17530                           	psect	text115
 17531  1089                     __ptext115:	
 17532 ;; *************** function _CC2500_InitSetREG *****************
 17533 ;; Defined at:
 17534 ;;		line 159 in file "../src/CC2500_B1.c"
 17535 ;; Parameters:    Size  Location     Type
 17536 ;;		None
 17537 ;; Auto vars:     Size  Location     Type
 17538 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17539 ;;  temp2           1    7[BANK0 ] unsigned char 
 17540 ;;  temp1           1    6[BANK0 ] unsigned char 
 17541 ;; Return value:  Size  Location     Type
 17542 ;;		None               void
 17543 ;; Registers used:
 17544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17545 ;; Tracked objects:
 17546 ;;		On entry : 0/0
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;Total ram usage:        4 bytes
 17555 ;; Hardware stack levels used:    1
 17556 ;; Hardware stack levels required when called:    7
 17557 ;; This function calls:
 17558 ;;		_CC2500_WriteREG
 17559 ;; This function is called by:
 17560 ;;		_CC2500_PowerOnInitial
 17561 ;; This function uses a non-reentrant model
 17562 ;;
 17563                           
 17564                           
 17565                           ;psect for function _CC2500_InitSetREG
 17566  1089                     _CC2500_InitSetREG:	
 17567                           
 17568                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17569                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17570                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17571                           
 17572                           ;incstack = 0
 17573                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17574  1089  0020               	movlb	0	; select bank0
 17575  108A  01A8               	clrf	CC2500_InitSetREG@loop_c
 17576  108B                     L10:	
 17577  108B  302F               	movlw	47
 17578  108C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17579  108D  1803               	btfsc	3,0
 17580  108E  0008               	return
 17581                           
 17582                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17583  108F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17584  1090  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17585  1091  0084               	movwf	4
 17586  1092  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17587  1093  1803               	skipnc
 17588  1094  3E01               	addlw	1
 17589  1095  0085               	movwf	5
 17590  1096  0800               	movf	0,w	;code access
 17591  1097  00A5               	movwf	??_CC2500_InitSetREG
 17592  1098  0825               	movf	??_CC2500_InitSetREG,w
 17593  1099  00A6               	movwf	CC2500_InitSetREG@temp1
 17594                           
 17595                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17596  109A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17597  109B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17598  109C  0084               	movwf	4
 17599  109D  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17600  109E  1803               	skipnc
 17601  109F  3E01               	addlw	1
 17602  10A0  0085               	movwf	5
 17603  10A1  0800               	movf	0,w	;code access
 17604  10A2  00A5               	movwf	??_CC2500_InitSetREG
 17605  10A3  0825               	movf	??_CC2500_InitSetREG,w
 17606  10A4  00A7               	movwf	CC2500_InitSetREG@temp2
 17607                           
 17608                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17609  10A5  0827               	movf	CC2500_InitSetREG@temp2,w
 17610  10A6  00A5               	movwf	??_CC2500_InitSetREG
 17611  10A7  0825               	movf	??_CC2500_InitSetREG,w
 17612  10A8  00A2               	movwf	CC2500_WriteREG@value
 17613  10A9  0826               	movf	CC2500_InitSetREG@temp1,w
 17614  10AA  3190  2066  3190   	fcall	_CC2500_WriteREG
 17615  10AD  3001               	movlw	1
 17616  10AE  0020               	movlb	0	; select bank0
 17617  10AF  00A5               	movwf	??_CC2500_InitSetREG
 17618  10B0  0825               	movf	??_CC2500_InitSetREG,w
 17619  10B1  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17620  10B2  288B               	goto	L10
 17621  10B3                     __end_of_CC2500_InitSetREG:	
 17622                           
 17623                           	psect	text116
 17624  1E88                     __ptext116:	
 17625 ;; *************** function _CC2500_InitPATable *****************
 17626 ;; Defined at:
 17627 ;;		line 174 in file "../src/CC2500_B1.c"
 17628 ;; Parameters:    Size  Location     Type
 17629 ;;		None
 17630 ;; Auto vars:     Size  Location     Type
 17631 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17632 ;;  temp            1    6[BANK0 ] unsigned char 
 17633 ;; Return value:  Size  Location     Type
 17634 ;;		None               void
 17635 ;; Registers used:
 17636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;Total ram usage:        3 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    7
 17649 ;; This function calls:
 17650 ;;		_CC2500_WriteREG
 17651 ;; This function is called by:
 17652 ;;		_CC2500_PowerOnInitial
 17653 ;; This function uses a non-reentrant model
 17654 ;;
 17655                           
 17656                           
 17657                           ;psect for function _CC2500_InitPATable
 17658  1E88                     _CC2500_InitPATable:	
 17659                           
 17660                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17661                           ;CC2500_B1.c: 176: unsigned char temp;
 17662                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17663                           
 17664                           ;incstack = 0
 17665                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17666  1E88  0020               	movlb	0	; select bank0
 17667  1E89  01A7               	clrf	CC2500_InitPATable@loop_d
 17668  1E8A                     L11:	
 17669  1E8A  3008               	movlw	8
 17670  1E8B  0227               	subwf	CC2500_InitPATable@loop_d,w
 17671  1E8C  1803               	btfsc	3,0
 17672  1E8D  0008               	return
 17673                           
 17674                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17675  1E8E  0827               	movf	CC2500_InitPATable@loop_d,w
 17676  1E8F  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17677  1E90  0084               	movwf	4
 17678  1E91  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17679  1E92  1803               	skipnc
 17680  1E93  3E01               	addlw	1
 17681  1E94  0085               	movwf	5
 17682  1E95  0800               	movf	0,w	;code access
 17683  1E96  00A5               	movwf	??_CC2500_InitPATable
 17684  1E97  0825               	movf	??_CC2500_InitPATable,w
 17685  1E98  00A6               	movwf	CC2500_InitPATable@temp
 17686                           
 17687                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17688  1E99  0826               	movf	CC2500_InitPATable@temp,w
 17689  1E9A  00A5               	movwf	??_CC2500_InitPATable
 17690  1E9B  0825               	movf	??_CC2500_InitPATable,w
 17691  1E9C  00A2               	movwf	CC2500_WriteREG@value
 17692  1E9D  303E               	movlw	62
 17693  1E9E  3190  2066  319E   	fcall	_CC2500_WriteREG
 17694  1EA1  3001               	movlw	1
 17695  1EA2  0020               	movlb	0	; select bank0
 17696  1EA3  00A5               	movwf	??_CC2500_InitPATable
 17697  1EA4  0825               	movf	??_CC2500_InitPATable,w
 17698  1EA5  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17699  1EA6  2E8A               	goto	L11
 17700  1EA7                     __end_of_CC2500_InitPATable:	
 17701                           
 17702                           	psect	text117
 17703  1066                     __ptext117:	
 17704 ;; *************** function _CC2500_WriteREG *****************
 17705 ;; Defined at:
 17706 ;;		line 251 in file "../src/CC2500_B1.c"
 17707 ;; Parameters:    Size  Location     Type
 17708 ;;  w_addr          1    wreg     unsigned char 
 17709 ;;  value           1    2[BANK0 ] unsigned char 
 17710 ;; Auto vars:     Size  Location     Type
 17711 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17712 ;; Return value:  Size  Location     Type
 17713 ;;		None               void
 17714 ;; Registers used:
 17715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17716 ;; Tracked objects:
 17717 ;;		On entry : 0/0
 17718 ;;		On exit  : 0/0
 17719 ;;		Unchanged: 0/0
 17720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17721 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17724 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;Total ram usage:        3 bytes
 17726 ;; Hardware stack levels used:    1
 17727 ;; Hardware stack levels required when called:    6
 17728 ;; This function calls:
 17729 ;;		_CC2500_WriteByte
 17730 ;;		_Timeout_Counter
 17731 ;;		_set_TimeoutCleared
 17732 ;; This function is called by:
 17733 ;;		_CC2500_InitSetREG
 17734 ;;		_CC2500_InitPATable
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           
 17739                           ;psect for function _CC2500_WriteREG
 17740  1066                     _CC2500_WriteREG:	
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17744                           ;CC2500_WriteREG@w_addr stored from wreg
 17745  1066  0020               	movlb	0	; select bank0
 17746  1067  00A4               	movwf	CC2500_WriteREG@w_addr
 17747                           
 17748                           ;CC2500_B1.c: 252: RC4 = 0;
 17749  1068  120E               	bcf	14,4	;volatile
 17750                           
 17751                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17752  1069  0824               	movf	CC2500_WriteREG@w_addr,w
 17753  106A  00A3               	movwf	??_CC2500_WriteREG
 17754  106B  0823               	movf	??_CC2500_WriteREG,w
 17755  106C  0021               	movlb	1	; select bank1
 17756  106D  00D0               	movwf	_SPI0Buffer^(0+128)
 17757                           
 17758                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17759  106E  2872               	goto	l9584
 17760  106F                     l9582:	
 17761                           
 17762                           ;CC2500_B1.c: 255: Timeout_Counter();
 17763  106F  319D  2574  3190   	fcall	_Timeout_Counter
 17764  1072                     l9584:	
 17765  1072  0020               	movlb	0	; select bank0
 17766  1073  1D0E               	btfss	14,2	;volatile
 17767  1074  2878               	goto	l9588
 17768  1075  0021               	movlb	1	; select bank1
 17769  1076  1D2B               	btfss	(_myMain^(0+128)+11),2
 17770  1077  286F               	goto	l9582
 17771  1078                     l9588:	
 17772                           
 17773                           ;CC2500_B1.c: 256: };
 17774                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17775  1078  319A  22EC  3190   	fcall	_set_TimeoutCleared
 17776                           
 17777                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17778  107B  319D  25CB  3190   	fcall	_CC2500_WriteByte
 17779                           
 17780                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17781  107E  0020               	movlb	0	; select bank0
 17782  107F  0822               	movf	CC2500_WriteREG@value,w
 17783  1080  00A3               	movwf	??_CC2500_WriteREG
 17784  1081  0823               	movf	??_CC2500_WriteREG,w
 17785  1082  0021               	movlb	1	; select bank1
 17786  1083  00D0               	movwf	_SPI0Buffer^(0+128)
 17787                           
 17788                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17789  1084  319D  25CB         	fcall	_CC2500_WriteByte
 17790                           
 17791                           ;CC2500_B1.c: 262: RC4 = 1;
 17792  1086  0020               	movlb	0	; select bank0
 17793  1087  160E               	bsf	14,4	;volatile
 17794  1088  0008               	return
 17795  1089                     __end_of_CC2500_WriteREG:	
 17796                           
 17797                           	psect	text118
 17798  1B6A                     __ptext118:	
 17799 ;; *************** function _CC2500_FrequencyCabr *****************
 17800 ;; Defined at:
 17801 ;;		line 201 in file "../src/CC2500_B1.c"
 17802 ;; Parameters:    Size  Location     Type
 17803 ;;		None
 17804 ;; Auto vars:     Size  Location     Type
 17805 ;;		None
 17806 ;; Return value:  Size  Location     Type
 17807 ;;		None               void
 17808 ;; Registers used:
 17809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17810 ;; Tracked objects:
 17811 ;;		On entry : 0/0
 17812 ;;		On exit  : 0/0
 17813 ;;		Unchanged: 0/0
 17814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17819 ;;Total ram usage:        0 bytes
 17820 ;; Hardware stack levels used:    1
 17821 ;; Hardware stack levels required when called:    7
 17822 ;; This function calls:
 17823 ;;		_CC2500_WriteCommand
 17824 ;;		_DelayTime_1us
 17825 ;; This function is called by:
 17826 ;;		_CC2500_PowerOnInitial
 17827 ;; This function uses a non-reentrant model
 17828 ;;
 17829                           
 17830                           
 17831                           ;psect for function _CC2500_FrequencyCabr
 17832  1B6A                     _CC2500_FrequencyCabr:	
 17833                           
 17834                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17835                           
 17836                           ;incstack = 0
 17837                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17838  1B6A  3033               	movlw	51
 17839  1B6B  319D  25FD  319B   	fcall	_CC2500_WriteCommand
 17840                           
 17841                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17842  1B6E  30E8               	movlw	232
 17843  1B6F  0020               	movlb	0	; select bank0
 17844  1B70  00A0               	movwf	DelayTime_1us@count
 17845  1B71  3003               	movlw	3
 17846  1B72  00A1               	movwf	DelayTime_1us@count+1
 17847  1B73  319F  27B1         	fcall	_DelayTime_1us
 17848  1B75  0008               	return
 17849  1B76                     __end_of_CC2500_FrequencyCabr:	
 17850                           
 17851                           	psect	text119
 17852  1FB1                     __ptext119:	
 17853 ;; *************** function _DelayTime_1us *****************
 17854 ;; Defined at:
 17855 ;;		line 320 in file "../src/CC2500_B1.c"
 17856 ;; Parameters:    Size  Location     Type
 17857 ;;  count           2    0[BANK0 ] int 
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;  j               2    4[BANK0 ] unsigned int 
 17860 ;;  i               2    2[BANK0 ] unsigned int 
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, status,2
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;Total ram usage:        6 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    5
 17877 ;; This function calls:
 17878 ;;		Nothing
 17879 ;; This function is called by:
 17880 ;;		_CC2500_PowerRST
 17881 ;;		_CC2500_FrequencyCabr
 17882 ;; This function uses a non-reentrant model
 17883 ;;
 17884                           
 17885                           
 17886                           ;psect for function _DelayTime_1us
 17887  1FB1                     _DelayTime_1us:	
 17888                           
 17889                           ;CC2500_B1.c: 321: unsigned int i, j;
 17890                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17891                           
 17892                           ;incstack = 0
 17893                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17894  1FB1  3001               	movlw	1
 17895  1FB2  0020               	movlb	0	; select bank0
 17896  1FB3  00A2               	movwf	DelayTime_1us@i
 17897  1FB4  3000               	movlw	0
 17898  1FB5  00A3               	movwf	DelayTime_1us@i+1
 17899  1FB6                     l372:	
 17900  1FB6  0821               	movf	DelayTime_1us@count+1,w
 17901  1FB7  0223               	subwf	DelayTime_1us@i+1,w
 17902  1FB8  1D03               	skipz
 17903  1FB9  2FBC               	goto	u10725
 17904  1FBA  0820               	movf	DelayTime_1us@count,w
 17905  1FBB  0222               	subwf	DelayTime_1us@i,w
 17906  1FBC                     u10725:	
 17907  1FBC  1803               	btfsc	3,0
 17908  1FBD  0008               	return
 17909                           
 17910                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17911  1FBE  01A4               	clrf	DelayTime_1us@j
 17912  1FBF  01A5               	clrf	DelayTime_1us@j+1
 17913  1FC0  3000               	movlw	0
 17914  1FC1  0225               	subwf	DelayTime_1us@j+1,w
 17915  1FC2  3002               	movlw	2
 17916  1FC3  1903               	skipnz
 17917  1FC4  0224               	subwf	DelayTime_1us@j,w
 17918  1FC5  1803               	btfsc	3,0
 17919  1FC6  2FD2               	goto	l9576
 17920  1FC7                     l9574:	
 17921  1FC7  3001               	movlw	1
 17922  1FC8  07A4               	addwf	DelayTime_1us@j,f
 17923  1FC9  3000               	movlw	0
 17924  1FCA  3DA5               	addwfc	DelayTime_1us@j+1,f
 17925  1FCB  3000               	movlw	0
 17926  1FCC  0225               	subwf	DelayTime_1us@j+1,w
 17927  1FCD  3002               	movlw	2
 17928  1FCE  1903               	skipnz
 17929  1FCF  0224               	subwf	DelayTime_1us@j,w
 17930  1FD0  1C03               	skipc
 17931  1FD1  2FC7               	goto	l9574
 17932  1FD2                     l9576:	
 17933  1FD2  3001               	movlw	1
 17934  1FD3  07A2               	addwf	DelayTime_1us@i,f
 17935  1FD4  3000               	movlw	0
 17936  1FD5  3DA3               	addwfc	DelayTime_1us@i+1,f
 17937  1FD6  2FB6               	goto	l372
 17938  1FD7                     __end_of_DelayTime_1us:	
 17939                           
 17940                           	psect	text120
 17941  1AE0                     __ptext120:	
 17942 ;; *************** function _CC2500_ClearTXFIFO *****************
 17943 ;; Defined at:
 17944 ;;		line 187 in file "../src/CC2500_B1.c"
 17945 ;; Parameters:    Size  Location     Type
 17946 ;;		None
 17947 ;; Auto vars:     Size  Location     Type
 17948 ;;		None
 17949 ;; Return value:  Size  Location     Type
 17950 ;;		None               void
 17951 ;; Registers used:
 17952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17953 ;; Tracked objects:
 17954 ;;		On entry : 0/0
 17955 ;;		On exit  : 0/0
 17956 ;;		Unchanged: 0/0
 17957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;Total ram usage:        0 bytes
 17963 ;; Hardware stack levels used:    1
 17964 ;; Hardware stack levels required when called:    7
 17965 ;; This function calls:
 17966 ;;		_CC2500_WriteCommand
 17967 ;; This function is called by:
 17968 ;;		_CC2500_PowerOnInitial
 17969 ;; This function uses a non-reentrant model
 17970 ;;
 17971                           
 17972                           
 17973                           ;psect for function _CC2500_ClearTXFIFO
 17974  1AE0                     _CC2500_ClearTXFIFO:	
 17975                           
 17976                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17977                           
 17978                           ;incstack = 0
 17979                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17980  1AE0  303B               	movlw	59
 17981  1AE1  319D  25FD         	fcall	_CC2500_WriteCommand
 17982  1AE3  0008               	return
 17983  1AE4                     __end_of_CC2500_ClearTXFIFO:	
 17984                           
 17985                           	psect	text121
 17986  1ADC                     __ptext121:	
 17987 ;; *************** function _CC2500_ClearRXFIFO *****************
 17988 ;; Defined at:
 17989 ;;		line 194 in file "../src/CC2500_B1.c"
 17990 ;; Parameters:    Size  Location     Type
 17991 ;;		None
 17992 ;; Auto vars:     Size  Location     Type
 17993 ;;		None
 17994 ;; Return value:  Size  Location     Type
 17995 ;;		None               void
 17996 ;; Registers used:
 17997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17998 ;; Tracked objects:
 17999 ;;		On entry : 0/0
 18000 ;;		On exit  : 0/0
 18001 ;;		Unchanged: 0/0
 18002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;Total ram usage:        0 bytes
 18008 ;; Hardware stack levels used:    1
 18009 ;; Hardware stack levels required when called:    7
 18010 ;; This function calls:
 18011 ;;		_CC2500_WriteCommand
 18012 ;; This function is called by:
 18013 ;;		_CC2500_PowerOnInitial
 18014 ;; This function uses a non-reentrant model
 18015 ;;
 18016                           
 18017                           
 18018                           ;psect for function _CC2500_ClearRXFIFO
 18019  1ADC                     _CC2500_ClearRXFIFO:	
 18020                           
 18021                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 18022                           
 18023                           ;incstack = 0
 18024                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18025  1ADC  303A               	movlw	58
 18026  1ADD  319D  25FD         	fcall	_CC2500_WriteCommand
 18027  1ADF  0008               	return
 18028  1AE0                     __end_of_CC2500_ClearRXFIFO:	
 18029                           
 18030                           	psect	text122
 18031  1DFD                     __ptext122:	
 18032 ;; *************** function _CC2500_WriteCommand *****************
 18033 ;; Defined at:
 18034 ;;		line 285 in file "../src/CC2500_B1.c"
 18035 ;; Parameters:    Size  Location     Type
 18036 ;;  command         1    wreg     unsigned char 
 18037 ;; Auto vars:     Size  Location     Type
 18038 ;;  command         1    3[BANK0 ] unsigned char 
 18039 ;; Return value:  Size  Location     Type
 18040 ;;		None               void
 18041 ;; Registers used:
 18042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18043 ;; Tracked objects:
 18044 ;;		On entry : 0/0
 18045 ;;		On exit  : 0/0
 18046 ;;		Unchanged: 0/0
 18047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18052 ;;Total ram usage:        2 bytes
 18053 ;; Hardware stack levels used:    1
 18054 ;; Hardware stack levels required when called:    6
 18055 ;; This function calls:
 18056 ;;		_CC2500_WriteByte
 18057 ;;		_Timeout_Counter
 18058 ;;		_set_TimeoutCleared
 18059 ;; This function is called by:
 18060 ;;		_CC2500_TxData
 18061 ;;		_CC2500_ClearTXFIFO
 18062 ;;		_CC2500_ClearRXFIFO
 18063 ;;		_CC2500_FrequencyCabr
 18064 ;;		_CC2500_SIDLEMode
 18065 ;;		_setRF_Main
 18066 ;;		_RF_RxDisable
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           
 18071                           ;psect for function _CC2500_WriteCommand
 18072  1DFD                     _CC2500_WriteCommand:	
 18073                           
 18074                           ;incstack = 0
 18075                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18076                           ;CC2500_WriteCommand@command stored from wreg
 18077  1DFD  0020               	movlb	0	; select bank0
 18078  1DFE  00A3               	movwf	CC2500_WriteCommand@command
 18079                           
 18080                           ;CC2500_B1.c: 286: RC4 = 0;
 18081  1DFF  120E               	bcf	14,4	;volatile
 18082                           
 18083                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18084  1E00  0823               	movf	CC2500_WriteCommand@command,w
 18085  1E01  00A2               	movwf	??_CC2500_WriteCommand
 18086  1E02  0822               	movf	??_CC2500_WriteCommand,w
 18087  1E03  0021               	movlb	1	; select bank1
 18088  1E04  00D0               	movwf	_SPI0Buffer^(0+128)
 18089                           
 18090                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18091  1E05  2E09               	goto	l9258
 18092  1E06                     l9256:	
 18093                           
 18094                           ;CC2500_B1.c: 290: Timeout_Counter();
 18095  1E06  319D  2574  319D   	fcall	_Timeout_Counter
 18096  1E09                     l9258:	
 18097  1E09  0020               	movlb	0	; select bank0
 18098  1E0A  1D0E               	btfss	14,2	;volatile
 18099  1E0B  2E0F               	goto	l9262
 18100  1E0C  0021               	movlb	1	; select bank1
 18101  1E0D  1D2B               	btfss	(_myMain^(0+128)+11),2
 18102  1E0E  2E06               	goto	l9256
 18103  1E0F                     l9262:	
 18104                           
 18105                           ;CC2500_B1.c: 291: };
 18106                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18107  1E0F  319A  22EC  319D   	fcall	_set_TimeoutCleared
 18108                           
 18109                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18110  1E12  319D  25CB         	fcall	_CC2500_WriteByte
 18111                           
 18112                           ;CC2500_B1.c: 295: RC4 = 1;
 18113  1E14  0020               	movlb	0	; select bank0
 18114  1E15  160E               	bsf	14,4	;volatile
 18115  1E16  0008               	return
 18116  1E17                     __end_of_CC2500_WriteCommand:	
 18117                           
 18118                           	psect	text123
 18119  1AEC                     __ptext123:	
 18120 ;; *************** function _set_TimeoutCleared *****************
 18121 ;; Defined at:
 18122 ;;		line 283 in file "../src/Main_B1.c"
 18123 ;; Parameters:    Size  Location     Type
 18124 ;;		None
 18125 ;; Auto vars:     Size  Location     Type
 18126 ;;		None
 18127 ;; Return value:  Size  Location     Type
 18128 ;;		None               void
 18129 ;; Registers used:
 18130 ;;		status,2
 18131 ;; Tracked objects:
 18132 ;;		On entry : 0/0
 18133 ;;		On exit  : 0/0
 18134 ;;		Unchanged: 0/0
 18135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18140 ;;Total ram usage:        0 bytes
 18141 ;; Hardware stack levels used:    1
 18142 ;; Hardware stack levels required when called:    5
 18143 ;; This function calls:
 18144 ;;		Nothing
 18145 ;; This function is called by:
 18146 ;;		_CC2500_TxData
 18147 ;;		_CC2500_RxData
 18148 ;;		_CC2500_PowerRST
 18149 ;;		_CC2500_WriteREG
 18150 ;;		_CC2500_WriteCommand
 18151 ;;		_CC2500_ReadStatus
 18152 ;;		_getAD
 18153 ;;		_TouchPower
 18154 ;;		_CC2500_ReadREG
 18155 ;; This function uses a non-reentrant model
 18156 ;;
 18157                           
 18158                           
 18159                           ;psect for function _set_TimeoutCleared
 18160  1AEC                     _set_TimeoutCleared:	
 18161                           
 18162                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18163                           
 18164                           ;incstack = 0
 18165                           ; Regs used in _set_TimeoutCleared: [status,2]
 18166  1AEC  0021               	movlb	1	; select bank1
 18167  1AED  112B               	bcf	(_myMain^(0+128)+11),2
 18168                           
 18169                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18170  1AEE  01AC               	clrf	(_myMain^(0+128)+12)
 18171  1AEF  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18172  1AF0  0008               	return
 18173  1AF1                     __end_of_set_TimeoutCleared:	
 18174                           
 18175                           	psect	text124
 18176  1D74                     __ptext124:	
 18177 ;; *************** function _Timeout_Counter *****************
 18178 ;; Defined at:
 18179 ;;		line 274 in file "../src/Main_B1.c"
 18180 ;; Parameters:    Size  Location     Type
 18181 ;;		None
 18182 ;; Auto vars:     Size  Location     Type
 18183 ;;		None
 18184 ;; Return value:  Size  Location     Type
 18185 ;;		None               void
 18186 ;; Registers used:
 18187 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18188 ;; Tracked objects:
 18189 ;;		On entry : 0/0
 18190 ;;		On exit  : 0/0
 18191 ;;		Unchanged: 0/0
 18192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18197 ;;Total ram usage:        0 bytes
 18198 ;; Hardware stack levels used:    1
 18199 ;; Hardware stack levels required when called:    5
 18200 ;; This function calls:
 18201 ;;		Nothing
 18202 ;; This function is called by:
 18203 ;;		_CC2500_TxData
 18204 ;;		_CC2500_RxData
 18205 ;;		_CC2500_PowerRST
 18206 ;;		_CC2500_WriteREG
 18207 ;;		_CC2500_WriteCommand
 18208 ;;		_CC2500_ReadStatus
 18209 ;;		_getAD
 18210 ;;		_TouchPower
 18211 ;;		_CC2500_ReadREG
 18212 ;; This function uses a non-reentrant model
 18213 ;;
 18214                           
 18215                           
 18216                           ;psect for function _Timeout_Counter
 18217  1D74                     _Timeout_Counter:	
 18218                           
 18219                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18220                           
 18221                           ;incstack = 0
 18222                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18223  1D74  3001               	movlw	1
 18224  1D75  0021               	movlb	1	; select bank1
 18225  1D76  07AC               	addwf	(_myMain^(0+128)+12),f
 18226  1D77  3000               	movlw	0
 18227  1D78  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18228                           
 18229                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 7500) {
 18230  1D79  300C               	movlw	12
 18231  1D7A  3EA0               	addlw	_myMain& (0+255)
 18232  1D7B  0086               	movwf	6
 18233  1D7C  0187               	clrf	7
 18234  1D7D  3F40               	moviw [0]fsr1
 18235  1D7E  3A4C               	xorlw	76
 18236  1D7F  1D03               	skipz
 18237  1D80  2D83               	goto	u10015
 18238  1D81  3F41               	moviw [1]fsr1
 18239  1D82  3A1D               	xorlw	29
 18240  1D83                     u10015:	
 18241  1D83  1D03               	skipz
 18242  1D84  0008               	return
 18243                           
 18244                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18245  1D85  01AC               	clrf	(_myMain^(0+128)+12)
 18246  1D86  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18247                           
 18248                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18249  1D87  152B               	bsf	(_myMain^(0+128)+11),2
 18250  1D88  0008               	return
 18251  1D89                     __end_of_Timeout_Counter:	
 18252                           
 18253                           	psect	text125
 18254  1DCB                     __ptext125:	
 18255 ;; *************** function _CC2500_WriteByte *****************
 18256 ;; Defined at:
 18257 ;;		line 219 in file "../src/CC2500_B1.c"
 18258 ;; Parameters:    Size  Location     Type
 18259 ;;		None
 18260 ;; Auto vars:     Size  Location     Type
 18261 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18262 ;; Return value:  Size  Location     Type
 18263 ;;		None               void
 18264 ;; Registers used:
 18265 ;;		wreg, status,2, status,0
 18266 ;; Tracked objects:
 18267 ;;		On entry : 0/0
 18268 ;;		On exit  : 0/0
 18269 ;;		Unchanged: 0/0
 18270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18275 ;;Total ram usage:        2 bytes
 18276 ;; Hardware stack levels used:    1
 18277 ;; Hardware stack levels required when called:    5
 18278 ;; This function calls:
 18279 ;;		Nothing
 18280 ;; This function is called by:
 18281 ;;		_CC2500_TxData
 18282 ;;		_CC2500_RxData
 18283 ;;		_CC2500_PowerRST
 18284 ;;		_CC2500_WriteREG
 18285 ;;		_CC2500_WriteCommand
 18286 ;;		_CC2500_ReadStatus
 18287 ;;		_CC2500_ReadREG
 18288 ;; This function uses a non-reentrant model
 18289 ;;
 18290                           
 18291                           
 18292                           ;psect for function _CC2500_WriteByte
 18293  1DCB                     _CC2500_WriteByte:	
 18294                           
 18295                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18296                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18297                           
 18298                           ;incstack = 0
 18299                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18300  1DCB  0020               	movlb	0	; select bank0
 18301  1DCC  01A1               	clrf	CC2500_WriteByte@loop_a
 18302  1DCD                     L12:	
 18303  1DCD  3008               	movlw	8
 18304  1DCE  0221               	subwf	CC2500_WriteByte@loop_a,w
 18305  1DCF  1803               	btfsc	3,0
 18306  1DD0  0008               	return
 18307                           
 18308                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18309  1DD1  0021               	movlb	1	; select bank1
 18310  1DD2  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18311  1DD3  2DD7               	goto	l328
 18312                           
 18313                           ;CC2500_B1.c: 223: RC0 = 1;
 18314  1DD4  0020               	movlb	0	; select bank0
 18315  1DD5  140E               	bsf	14,0	;volatile
 18316  1DD6  2DD9               	goto	l329
 18317  1DD7                     l328:	
 18318                           
 18319                           ;CC2500_B1.c: 224: else
 18320                           ;CC2500_B1.c: 225: RC0 = 0;
 18321  1DD7  0020               	movlb	0	; select bank0
 18322  1DD8  100E               	bcf	14,0	;volatile
 18323  1DD9                     l329:	
 18324                           
 18325                           ;CC2500_B1.c: 226: RC1 = 1;
 18326  1DD9  148E               	bsf	14,1	;volatile
 18327                           
 18328                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18329  1DDA  1003               	clrc
 18330  1DDB  0021               	movlb	1	; select bank1
 18331  1DDC  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18332                           
 18333                           ;CC2500_B1.c: 228: RC1 = 0;
 18334  1DDD  0020               	movlb	0	; select bank0
 18335  1DDE  108E               	bcf	14,1	;volatile
 18336  1DDF  3001               	movlw	1
 18337  1DE0  00A0               	movwf	??_CC2500_WriteByte
 18338  1DE1  0820               	movf	??_CC2500_WriteByte,w
 18339  1DE2  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18340  1DE3  2DCD               	goto	L12
 18341  1DE4                     __end_of_CC2500_WriteByte:	
 18342                           
 18343                           	psect	text126
 18344  1424                     __ptext126:	
 18345 ;; *************** function _Buzzer_Main *****************
 18346 ;; Defined at:
 18347 ;;		line 46 in file "../src/Buzzer_B1.c"
 18348 ;; Parameters:    Size  Location     Type
 18349 ;;		None
 18350 ;; Auto vars:     Size  Location     Type
 18351 ;;		None
 18352 ;; Return value:  Size  Location     Type
 18353 ;;		None               void
 18354 ;; Registers used:
 18355 ;;		wreg, status,2, status,0
 18356 ;; Tracked objects:
 18357 ;;		On entry : 0/0
 18358 ;;		On exit  : 0/0
 18359 ;;		Unchanged: 0/0
 18360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;Total ram usage:        1 bytes
 18366 ;; Hardware stack levels used:    1
 18367 ;; Hardware stack levels required when called:    5
 18368 ;; This function calls:
 18369 ;;		Nothing
 18370 ;; This function is called by:
 18371 ;;		_main
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           
 18376                           ;psect for function _Buzzer_Main
 18377  1424                     _Buzzer_Main:	
 18378                           
 18379                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18380                           
 18381                           ;incstack = 0
 18382                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18383  1424  0021               	movlb	1	; select bank1
 18384  1425  1CAE               	btfss	_Buz1^(0+128),1
 18385  1426  0008               	return
 18386                           
 18387                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18388  1427  3001               	movlw	1
 18389  1428  07AF               	addwf	(_Buz1^(0+128)+1),f
 18390  1429  3000               	movlw	0
 18391  142A  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18392                           
 18393                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18394  142B  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18395  142C  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18396  142D  1D03               	skipz
 18397  142E  2C31               	goto	u12155
 18398  142F  0834               	movf	(_Buz1^(0+128)+6),w
 18399  1430  022F               	subwf	(_Buz1^(0+128)+1),w
 18400  1431                     u12155:	
 18401  1431  1C03               	skipc
 18402  1432  0008               	return
 18403                           
 18404                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18405  1433  01AF               	clrf	(_Buz1^(0+128)+1)
 18406  1434  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18407                           
 18408                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18409  1435  12AE               	bcf	_Buz1^(0+128),5
 18410  1436  0020               	movlb	0	; select bank0
 18411  1437  1D8D               	btfss	13,3	;volatile
 18412  1438  2C3B               	goto	l10456
 18413  1439  0021               	movlb	1	; select bank1
 18414  143A  16AE               	bsf	_Buz1^(0+128),5
 18415  143B                     l10456:	
 18416                           
 18417                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18418  143B  0021               	movlb	1	; select bank1
 18419  143C  1AAE               	btfsc	_Buz1^(0+128),5
 18420  143D  2C67               	goto	l106
 18421                           
 18422                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18423  143E  08B1               	movf	(_Buz1^(0+128)+3),f
 18424  143F  1D03               	skipz
 18425  1440  2C63               	goto	l107
 18426                           
 18427                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18428  1441  1DAE               	btfss	_Buz1^(0+128),3
 18429  1442  2C51               	goto	l108
 18430                           
 18431                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18432  1443  11AE               	bcf	_Buz1^(0+128),3
 18433                           
 18434                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18435  1444  0832               	movf	(_Buz1^(0+128)+4),w
 18436  1445  0020               	movlb	0	; select bank0
 18437  1446  00A0               	movwf	??_Buzzer_Main
 18438  1447  0820               	movf	??_Buzzer_Main,w
 18439  1448  0021               	movlb	1	; select bank1
 18440  1449  00B1               	movwf	(_Buz1^(0+128)+3)
 18441                           
 18442                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18443  144A  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18444  144B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18445  144C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18446  144D  0836               	movf	(_Buz1^(0+128)+8),w
 18447  144E  01B4               	clrf	(_Buz1^(0+128)+6)
 18448  144F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18449                           
 18450                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18451  1450  0008               	return
 18452  1451                     l108:	
 18453  1451  1E2E               	btfss	_Buz1^(0+128),4
 18454  1452  2C61               	goto	l110
 18455                           
 18456                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18457  1453  122E               	bcf	_Buz1^(0+128),4
 18458                           
 18459                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18460  1454  0833               	movf	(_Buz1^(0+128)+5),w
 18461  1455  0020               	movlb	0	; select bank0
 18462  1456  00A0               	movwf	??_Buzzer_Main
 18463  1457  0820               	movf	??_Buzzer_Main,w
 18464  1458  0021               	movlb	1	; select bank1
 18465  1459  00B1               	movwf	(_Buz1^(0+128)+3)
 18466                           
 18467                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18468  145A  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18469  145B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18470  145C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18471  145D  0838               	movf	(_Buz1^(0+128)+10),w
 18472  145E  01B4               	clrf	(_Buz1^(0+128)+6)
 18473  145F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18474                           
 18475                           ;Buzzer_B1.c: 62: } else {
 18476  1460  0008               	return
 18477  1461                     l110:	
 18478                           
 18479                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18480  1461  10AE               	bcf	_Buz1^(0+128),1
 18481                           
 18482                           ;Buzzer_B1.c: 64: }
 18483                           ;Buzzer_B1.c: 65: } else {
 18484  1462  0008               	return
 18485  1463                     l107:	
 18486                           
 18487                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18488  1463  16AE               	bsf	_Buz1^(0+128),5
 18489                           
 18490                           ;Buzzer_B1.c: 68: RB3 = 1;
 18491  1464  0020               	movlb	0	; select bank0
 18492  1465  158D               	bsf	13,3	;volatile
 18493                           
 18494                           ;Buzzer_B1.c: 69: }
 18495                           ;Buzzer_B1.c: 70: } else {
 18496  1466  0008               	return
 18497  1467                     l106:	
 18498                           
 18499                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18500  1467  12AE               	bcf	_Buz1^(0+128),5
 18501                           
 18502                           ;Buzzer_B1.c: 73: RB3 = 0;
 18503  1468  0020               	movlb	0	; select bank0
 18504  1469  118D               	bcf	13,3	;volatile
 18505                           
 18506                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18507  146A  3001               	movlw	1
 18508  146B  0021               	movlb	1	; select bank1
 18509  146C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18510  146D  0008               	return
 18511  146E                     __end_of_Buzzer_Main:	
 18512                           
 18513                           	psect	text127
 18514  1ACA                     __ptext127:	
 18515 ;; *************** function _Buzzer_Initialization *****************
 18516 ;; Defined at:
 18517 ;;		line 11 in file "../src/Buzzer_B1.c"
 18518 ;; Parameters:    Size  Location     Type
 18519 ;;		None
 18520 ;; Auto vars:     Size  Location     Type
 18521 ;;		None
 18522 ;; Return value:  Size  Location     Type
 18523 ;;		None               void
 18524 ;; Registers used:
 18525 ;;		None
 18526 ;; Tracked objects:
 18527 ;;		On entry : 0/0
 18528 ;;		On exit  : 0/0
 18529 ;;		Unchanged: 0/0
 18530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18535 ;;Total ram usage:        0 bytes
 18536 ;; Hardware stack levels used:    1
 18537 ;; Hardware stack levels required when called:    5
 18538 ;; This function calls:
 18539 ;;		Nothing
 18540 ;; This function is called by:
 18541 ;;		_main
 18542 ;; This function uses a non-reentrant model
 18543 ;;
 18544                           
 18545                           
 18546                           ;psect for function _Buzzer_Initialization
 18547  1ACA                     _Buzzer_Initialization:	
 18548                           
 18549                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18550                           
 18551                           ;incstack = 0
 18552                           ; Regs used in _Buzzer_Initialization: []
 18553  1ACA  0021               	movlb	1	; select bank1
 18554  1ACB  142E               	bsf	_Buz1^(0+128),0
 18555  1ACC  0008               	return
 18556  1ACD                     __end_of_Buzzer_Initialization:	
 18557                           
 18558                           	psect	intentry
 18559  0004                     __pintentry:	
 18560 ;; *************** function _ISR *****************
 18561 ;; Defined at:
 18562 ;;		line 107 in file "../src/MCU_B1.c"
 18563 ;; Parameters:    Size  Location     Type
 18564 ;;		None
 18565 ;; Auto vars:     Size  Location     Type
 18566 ;;		None
 18567 ;; Return value:  Size  Location     Type
 18568 ;;		None               void
 18569 ;; Registers used:
 18570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18571 ;; Tracked objects:
 18572 ;;		On entry : 0/0
 18573 ;;		On exit  : 0/0
 18574 ;;		Unchanged: 0/0
 18575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18579 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18580 ;;Total ram usage:        1 bytes
 18581 ;; Hardware stack levels used:    1
 18582 ;; Hardware stack levels required when called:    4
 18583 ;; This function calls:
 18584 ;;		_IOC_ISR
 18585 ;;		_TMR1_ISR
 18586 ;; This function is called by:
 18587 ;;		Interrupt level 1
 18588 ;; This function uses a non-reentrant model
 18589 ;;
 18590                           
 18591  0004                     _ISR:	
 18592                           
 18593                           ;incstack = 0
 18594                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18595  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18596  0005  3180               	pagesel	$
 18597  0006  0020               	movlb	0	; select bank0
 18598  0007  087F               	movf	127,w
 18599  0008  00F4               	movwf	??_ISR
 18600                           
 18601                           ;MCU_B1.c: 109: IOC_ISR();
 18602  0009  319B  23E5  3180   	fcall	_IOC_ISR
 18603                           
 18604                           ;MCU_B1.c: 111: ;;
 18605                           ;MCU_B1.c: 113: TMR1_ISR();
 18606  000C  319F  27D7         	fcall	_TMR1_ISR
 18607  000E  0874               	movf	??_ISR,w
 18608  000F  0020               	movlb	0	; select bank0
 18609  0010  00FF               	movwf	127
 18610  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18611  0012  0009               	retfie
 18612  0013                     __end_of_ISR:	
 18613                           
 18614                           	psect	text129
 18615  1FD7                     __ptext129:	
 18616 ;; *************** function _TMR1_ISR *****************
 18617 ;; Defined at:
 18618 ;;		line 209 in file "../src/MCU_B1.c"
 18619 ;; Parameters:    Size  Location     Type
 18620 ;;		None
 18621 ;; Auto vars:     Size  Location     Type
 18622 ;;		None
 18623 ;; Return value:  Size  Location     Type
 18624 ;;		None               void
 18625 ;; Registers used:
 18626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18627 ;; Tracked objects:
 18628 ;;		On entry : 0/0
 18629 ;;		On exit  : 0/0
 18630 ;;		Unchanged: 0/0
 18631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18636 ;;Total ram usage:        0 bytes
 18637 ;; Hardware stack levels used:    1
 18638 ;; Hardware stack levels required when called:    2
 18639 ;; This function calls:
 18640 ;;		_setDimmerLights_IntrControl
 18641 ;; This function is called by:
 18642 ;;		_ISR
 18643 ;; This function uses a non-reentrant model
 18644 ;;
 18645                           
 18646                           
 18647                           ;psect for function _TMR1_ISR
 18648  1FD7                     _TMR1_ISR:	
 18649                           
 18650                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18651                           
 18652                           ;incstack = 0
 18653                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18654  1FD7  0021               	movlb	1	; select bank1
 18655  1FD8  1C11               	btfss	17,0	;volatile
 18656  1FD9  0008               	return
 18657  1FDA  0020               	movlb	0	; select bank0
 18658  1FDB  1C11               	btfss	17,0	;volatile
 18659  1FDC  0008               	return
 18660                           
 18661                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18662  1FDD  30FA               	movlw	250
 18663  1FDE  0097               	movwf	23	;volatile
 18664                           
 18665                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18666  1FDF  3038               	movlw	56
 18667  1FE0  0096               	movwf	22	;volatile
 18668                           
 18669                           ;MCU_B1.c: 214: TMR1IF = 0;
 18670  1FE1  1011               	bcf	17,0	;volatile
 18671                           
 18672                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18673  1FE2  3001               	movlw	1
 18674  1FE3  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18675                           
 18676                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18677  1FE6  3002               	movlw	2
 18678  1FE7  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18679                           
 18680                           ;MCU_B1.c: 235: Timer1.Count++;
 18681  1FEA  3001               	movlw	1
 18682  1FEB  0022               	movlb	2	; select bank2
 18683  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18684  1FED  3000               	movlw	0
 18685  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18686                           
 18687                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18688  1FEF  3001               	movlw	1
 18689  1FF0  3E20               	addlw	_Timer1& (0+255)
 18690  1FF1  0086               	movwf	6
 18691  1FF2  3001               	movlw	1	; select bank2/3
 18692  1FF3  0087               	movwf	7
 18693  1FF4  3F40               	moviw [0]fsr1
 18694  1FF5  3A64               	xorlw	100
 18695  1FF6  1D03               	skipz
 18696  1FF7  2FFA               	goto	u811_25
 18697  1FF8  3F41               	moviw [1]fsr1
 18698  1FF9  3A00               	xorlw	0
 18699  1FFA                     u811_25:	
 18700  1FFA  1D03               	skipz
 18701  1FFB  0008               	return
 18702                           
 18703                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18704  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18705  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18706                           
 18707                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18708  1FFE  1420               	bsf	_Timer1^(0+256),0
 18709  1FFF  0008               	return
 18710  2000                     __end_of_TMR1_ISR:	
 18711                           
 18712                           	psect	text130
 18713  0368                     __ptext130:	
 18714 ;; *************** function _setDimmerLights_IntrControl *****************
 18715 ;; Defined at:
 18716 ;;		line 96 in file "../src/Dimmer_B1.c"
 18717 ;; Parameters:    Size  Location     Type
 18718 ;;  lights          1    wreg     unsigned char 
 18719 ;; Auto vars:     Size  Location     Type
 18720 ;;  lights          1    3[COMMON] unsigned char 
 18721 ;; Return value:  Size  Location     Type
 18722 ;;		None               void
 18723 ;; Registers used:
 18724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18725 ;; Tracked objects:
 18726 ;;		On entry : 0/0
 18727 ;;		On exit  : 0/0
 18728 ;;		Unchanged: 0/0
 18729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;Total ram usage:        2 bytes
 18735 ;; Hardware stack levels used:    1
 18736 ;; Hardware stack levels required when called:    1
 18737 ;; This function calls:
 18738 ;;		_DimmerIntrPointSelect
 18739 ;; This function is called by:
 18740 ;;		_TMR1_ISR
 18741 ;; This function uses a non-reentrant model
 18742 ;;
 18743                           
 18744                           
 18745                           ;psect for function _setDimmerLights_IntrControl
 18746  0368                     _setDimmerLights_IntrControl:	
 18747                           
 18748                           ;incstack = 0
 18749                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18750                           ;setDimmerLights_IntrControl@lights stored from wreg
 18751  0368  00F3               	movwf	setDimmerLights_IntrControl@lights
 18752                           
 18753                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18754  0369  0873               	movf	setDimmerLights_IntrControl@lights,w
 18755  036A  319C  2455  3183   	fcall	_DimmerIntrPointSelect
 18756                           
 18757                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18758  036D  0876               	movf	_DimmerLightsIntr,w
 18759  036E  3E02               	addlw	2
 18760  036F  0086               	movwf	6
 18761  0370  3001               	movlw	1	; select bank2/3
 18762  0371  0087               	movwf	7
 18763  0372  1D01               	btfss	1,2
 18764  0373  2B92               	goto	i1l7326
 18765                           
 18766                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18767  0374  3001               	movlw	1
 18768  0375  00F2               	movwf	??_setDimmerLights_IntrControl
 18769  0376  0876               	movf	_DimmerLightsIntr,w
 18770  0377  3E03               	addlw	3
 18771  0378  0086               	movwf	6
 18772  0379  3001               	movlw	1	; select bank2/3
 18773  037A  0087               	movwf	7
 18774  037B  0872               	movf	??_setDimmerLights_IntrControl,w
 18775  037C  0781               	addwf	1,f
 18776                           
 18777                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75*0.8)) + 1) {
 18778  037D  0876               	movf	_DimmerLightsIntr,w
 18779  037E  3E03               	addlw	3
 18780  037F  0086               	movwf	6
 18781  0380  3001               	movlw	1	; select bank2/3
 18782  0381  0087               	movwf	7
 18783  0382  303D               	movlw	61
 18784  0383  0201               	subwf	1,w
 18785  0384  1C03               	skipc
 18786  0385  2B92               	goto	i1l7326
 18787                           
 18788                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18789  0386  0876               	movf	_DimmerLightsIntr,w
 18790  0387  3E03               	addlw	3
 18791  0388  0086               	movwf	6
 18792  0389  3001               	movlw	1	; select bank2/3
 18793  038A  0087               	movwf	7
 18794  038B  0181               	clrf	1
 18795                           
 18796                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18797  038C  0876               	movf	_DimmerLightsIntr,w
 18798  038D  3E02               	addlw	2
 18799  038E  0086               	movwf	6
 18800  038F  3001               	movlw	1	; select bank2/3
 18801  0390  0087               	movwf	7
 18802  0391  1101               	bcf	1,2
 18803  0392                     i1l7326:	
 18804                           
 18805                           ;Dimmer_B1.c: 241: }
 18806                           ;Dimmer_B1.c: 242: }
 18807                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18808  0392  0A76               	incf	_DimmerLightsIntr,w
 18809  0393  0086               	movwf	6
 18810  0394  3001               	movlw	1	; select bank2/3
 18811  0395  0087               	movwf	7
 18812  0396  1C01               	btfss	1,0
 18813  0397  2BC9               	goto	i1l7342
 18814                           
 18815                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18816  0398  0876               	movf	_DimmerLightsIntr,w
 18817  0399  3E03               	addlw	3
 18818  039A  0086               	movwf	6
 18819  039B  3001               	movlw	1	; select bank2/3
 18820  039C  0087               	movwf	7
 18821  039D  0876               	movf	_DimmerLightsIntr,w
 18822  039E  3E04               	addlw	4
 18823  039F  0084               	movwf	4
 18824  03A0  3001               	movlw	1	; select bank2/3
 18825  03A1  0085               	movwf	5
 18826  03A2  0800               	movf	0,w
 18827  03A3  0201               	subwf	1,w
 18828  03A4  1C03               	skipc
 18829  03A5  0008               	return
 18830                           
 18831                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18832  03A6  0A76               	incf	_DimmerLightsIntr,w
 18833  03A7  0086               	movwf	6
 18834  03A8  3001               	movlw	1	; select bank2/3
 18835  03A9  0087               	movwf	7
 18836  03AA  1001               	bcf	1,0
 18837                           
 18838                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18839  03AB  0A76               	incf	_DimmerLightsIntr,w
 18840  03AC  0086               	movwf	6
 18841  03AD  3001               	movlw	1	; select bank2/3
 18842  03AE  0087               	movwf	7
 18843  03AF  1581               	bsf	1,3
 18844                           
 18845                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18846  03B0  0876               	movf	_DimmerLightsIntr,w
 18847  03B1  0086               	movwf	6
 18848  03B2  3001               	movlw	1	; select bank2/3
 18849  03B3  0087               	movwf	7
 18850  03B4  1C01               	btfss	1,0
 18851  03B5  0008               	return
 18852                           
 18853                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18854  03B6  0876               	movf	_DimmerLightsIntr,w
 18855  03B7  0086               	movwf	6
 18856  03B8  3001               	movlw	1	; select bank2/3
 18857  03B9  0087               	movwf	7
 18858  03BA  1001               	bcf	1,0
 18859                           
 18860                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18861  03BB  0873               	movf	setDimmerLights_IntrControl@lights,w
 18862  03BC  3A01               	xorlw	1
 18863  03BD  1D03               	skipz
 18864  03BE  2BC2               	goto	i1l7338
 18865                           
 18866                           ;Dimmer_B1.c: 253: RA7 = 0;
 18867  03BF  0020               	movlb	0	; select bank0
 18868  03C0  138C               	bcf	12,7	;volatile
 18869                           
 18870                           ;Dimmer_B1.c: 255: }
 18871  03C1  0008               	return
 18872  03C2                     i1l7338:	
 18873                           
 18874                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 18875  03C2  0873               	movf	setDimmerLights_IntrControl@lights,w
 18876  03C3  3A02               	xorlw	2
 18877  03C4  1D03               	skipz
 18878  03C5  0008               	return
 18879                           
 18880                           ;Dimmer_B1.c: 259: RB4 = 0;
 18881  03C6  0020               	movlb	0	; select bank0
 18882  03C7  120D               	bcf	13,4	;volatile
 18883                           
 18884                           ;Dimmer_B1.c: 260: }
 18885                           ;Dimmer_B1.c: 262: }
 18886                           ;Dimmer_B1.c: 263: }
 18887                           ;Dimmer_B1.c: 264: } else {
 18888  03C8  0008               	return
 18889  03C9                     i1l7342:	
 18890                           
 18891                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18892  03C9  0A76               	incf	_DimmerLightsIntr,w
 18893  03CA  0086               	movwf	6
 18894  03CB  3001               	movlw	1	; select bank2/3
 18895  03CC  0087               	movwf	7
 18896  03CD  1D81               	btfss	1,3
 18897  03CE  0008               	return
 18898                           
 18899                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18900  03CF  0A76               	incf	_DimmerLightsIntr,w
 18901  03D0  0086               	movwf	6
 18902  03D1  3001               	movlw	1	; select bank2/3
 18903  03D2  0087               	movwf	7
 18904  03D3  1181               	bcf	1,3
 18905                           
 18906                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18907  03D4  3001               	movlw	1
 18908  03D5  00F2               	movwf	??_setDimmerLights_IntrControl
 18909  03D6  0876               	movf	_DimmerLightsIntr,w
 18910  03D7  3E05               	addlw	5
 18911  03D8  0086               	movwf	6
 18912  03D9  3001               	movlw	1	; select bank2/3
 18913  03DA  0087               	movwf	7
 18914  03DB  0872               	movf	??_setDimmerLights_IntrControl,w
 18915  03DC  0781               	addwf	1,f
 18916                           
 18917                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18918  03DD  0876               	movf	_DimmerLightsIntr,w
 18919  03DE  3E05               	addlw	5
 18920  03DF  0086               	movwf	6
 18921  03E0  3001               	movlw	1	; select bank2/3
 18922  03E1  0087               	movwf	7
 18923  03E2  0876               	movf	_DimmerLightsIntr,w
 18924  03E3  3E08               	addlw	8
 18925  03E4  0084               	movwf	4
 18926  03E5  3001               	movlw	1	; select bank2/3
 18927  03E6  0085               	movwf	5
 18928  03E7  0800               	movf	0,w
 18929  03E8  0201               	subwf	1,w
 18930  03E9  1C03               	skipc
 18931  03EA  2C2D               	goto	i1l7368
 18932                           
 18933                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18934  03EB  0876               	movf	_DimmerLightsIntr,w
 18935  03EC  3E05               	addlw	5
 18936  03ED  0086               	movwf	6
 18937  03EE  3001               	movlw	1	; select bank2/3
 18938  03EF  0087               	movwf	7
 18939  03F0  0181               	clrf	1
 18940                           
 18941                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18942  03F1  0A76               	incf	_DimmerLightsIntr,w
 18943  03F2  0086               	movwf	6
 18944  03F3  3001               	movlw	1	; select bank2/3
 18945  03F4  0087               	movwf	7
 18946  03F5  1F01               	btfss	1,6
 18947  03F6  0008               	return
 18948                           
 18949                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18950  03F7  0A76               	incf	_DimmerLightsIntr,w
 18951  03F8  0086               	movwf	6
 18952  03F9  3001               	movlw	1	; select bank2/3
 18953  03FA  0087               	movwf	7
 18954  03FB  1B81               	btfsc	1,7
 18955  03FC  2C16               	goto	i1l7362
 18956                           
 18957                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 18958  03FD  0876               	movf	_DimmerLightsIntr,w
 18959  03FE  3E04               	addlw	4
 18960  03FF  0086               	movwf	6
 18961  0400  3001               	movlw	1	; select bank2/3
 18962  0401  0087               	movwf	7
 18963  0402  303C               	movlw	60
 18964  0403  0201               	subwf	1,w
 18965  0404  1803               	skipnc
 18966  0405  2C10               	goto	i1l7360
 18967                           
 18968                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18969  0406  3001               	movlw	1
 18970  0407  00F2               	movwf	??_setDimmerLights_IntrControl
 18971  0408  0876               	movf	_DimmerLightsIntr,w
 18972  0409  3E04               	addlw	4
 18973  040A  0086               	movwf	6
 18974  040B  3001               	movlw	1	; select bank2/3
 18975  040C  0087               	movwf	7
 18976  040D  0872               	movf	??_setDimmerLights_IntrControl,w
 18977  040E  0781               	addwf	1,f
 18978                           
 18979                           ;Dimmer_B1.c: 274: } else {
 18980  040F  0008               	return
 18981  0410                     i1l7360:	
 18982                           
 18983                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18984  0410  0A76               	incf	_DimmerLightsIntr,w
 18985  0411  0086               	movwf	6
 18986  0412  3001               	movlw	1	; select bank2/3
 18987  0413  0087               	movwf	7
 18988  0414  1781               	bsf	1,7
 18989                           
 18990                           ;Dimmer_B1.c: 276: }
 18991                           ;Dimmer_B1.c: 277: } else {
 18992  0415  0008               	return
 18993  0416                     i1l7362:	
 18994                           
 18995                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18996  0416  0876               	movf	_DimmerLightsIntr,w
 18997  0417  3E04               	addlw	4
 18998  0418  0086               	movwf	6
 18999  0419  3001               	movlw	1	; select bank2/3
 19000  041A  0087               	movwf	7
 19001  041B  300D               	movlw	13
 19002  041C  0201               	subwf	1,w
 19003  041D  1C03               	skipc
 19004  041E  2C27               	goto	i1l7366
 19005                           
 19006                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 19007  041F  0876               	movf	_DimmerLightsIntr,w
 19008  0420  3E04               	addlw	4
 19009  0421  0086               	movwf	6
 19010  0422  3001               	movlw	1	; select bank2/3
 19011  0423  0087               	movwf	7
 19012  0424  3001               	movlw	1
 19013  0425  0281               	subwf	1,f
 19014                           
 19015                           ;Dimmer_B1.c: 280: } else
 19016  0426  0008               	return
 19017  0427                     i1l7366:	
 19018                           
 19019                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 19020  0427  0A76               	incf	_DimmerLightsIntr,w
 19021  0428  0086               	movwf	6
 19022  0429  3001               	movlw	1	; select bank2/3
 19023  042A  0087               	movwf	7
 19024  042B  1381               	bcf	1,7
 19025                           
 19026                           ;Dimmer_B1.c: 282: }
 19027                           ;Dimmer_B1.c: 283: }
 19028                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 19029  042C  0008               	return
 19030  042D                     i1l7368:	
 19031  042D  0876               	movf	_DimmerLightsIntr,w
 19032  042E  3E02               	addlw	2
 19033  042F  0086               	movwf	6
 19034  0430  3001               	movlw	1	; select bank2/3
 19035  0431  0087               	movwf	7
 19036  0432  1C01               	btfss	1,0
 19037  0433  0008               	return
 19038                           
 19039                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19040  0434  0876               	movf	_DimmerLightsIntr,w
 19041  0435  3E04               	addlw	4
 19042  0436  0086               	movwf	6
 19043  0437  3001               	movlw	1	; select bank2/3
 19044  0438  0087               	movwf	7
 19045  0439  0876               	movf	_DimmerLightsIntr,w
 19046  043A  3E06               	addlw	6
 19047  043B  0084               	movwf	4
 19048  043C  3001               	movlw	1	; select bank2/3
 19049  043D  0085               	movwf	5
 19050  043E  0800               	movf	0,w
 19051  043F  0201               	subwf	1,w
 19052  0440  1803               	skipnc
 19053  0441  2C4C               	goto	i1l7374
 19054                           
 19055                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19056  0442  3001               	movlw	1
 19057  0443  00F2               	movwf	??_setDimmerLights_IntrControl
 19058  0444  0876               	movf	_DimmerLightsIntr,w
 19059  0445  3E04               	addlw	4
 19060  0446  0086               	movwf	6
 19061  0447  3001               	movlw	1	; select bank2/3
 19062  0448  0087               	movwf	7
 19063  0449  0872               	movf	??_setDimmerLights_IntrControl,w
 19064  044A  0781               	addwf	1,f
 19065                           
 19066                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19067  044B  0008               	return
 19068  044C                     i1l7374:	
 19069  044C  0876               	movf	_DimmerLightsIntr,w
 19070  044D  3E06               	addlw	6
 19071  044E  0086               	movwf	6
 19072  044F  3001               	movlw	1	; select bank2/3
 19073  0450  0087               	movwf	7
 19074  0451  0876               	movf	_DimmerLightsIntr,w
 19075  0452  3E04               	addlw	4
 19076  0453  0084               	movwf	4
 19077  0454  3001               	movlw	1	; select bank2/3
 19078  0455  0085               	movwf	5
 19079  0456  0800               	movf	0,w
 19080  0457  0201               	subwf	1,w
 19081  0458  1803               	skipnc
 19082  0459  2C62               	goto	i1l7378
 19083                           
 19084                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19085  045A  0876               	movf	_DimmerLightsIntr,w
 19086  045B  3E04               	addlw	4
 19087  045C  0086               	movwf	6
 19088  045D  3001               	movlw	1	; select bank2/3
 19089  045E  0087               	movwf	7
 19090  045F  3001               	movlw	1
 19091  0460  0281               	subwf	1,f
 19092                           
 19093                           ;Dimmer_B1.c: 289: } else {
 19094  0461  0008               	return
 19095  0462                     i1l7378:	
 19096                           
 19097                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19098  0462  0876               	movf	_DimmerLightsIntr,w
 19099  0463  3E02               	addlw	2
 19100  0464  0086               	movwf	6
 19101  0465  3001               	movlw	1	; select bank2/3
 19102  0466  0087               	movwf	7
 19103  0467  1001               	bcf	1,0
 19104  0468  0008               	return
 19105  0469                     __end_of_setDimmerLights_IntrControl:	
 19106                           
 19107                           	psect	text131
 19108  1C55                     __ptext131:	
 19109 ;; *************** function _DimmerIntrPointSelect *****************
 19110 ;; Defined at:
 19111 ;;		line 74 in file "../src/Dimmer_B1.c"
 19112 ;; Parameters:    Size  Location     Type
 19113 ;;  lights          1    wreg     unsigned char 
 19114 ;; Auto vars:     Size  Location     Type
 19115 ;;  lights          1    1[COMMON] unsigned char 
 19116 ;; Return value:  Size  Location     Type
 19117 ;;		None               void
 19118 ;; Registers used:
 19119 ;;		wreg
 19120 ;; Tracked objects:
 19121 ;;		On entry : 0/0
 19122 ;;		On exit  : 0/0
 19123 ;;		Unchanged: 0/0
 19124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19128 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19129 ;;Total ram usage:        2 bytes
 19130 ;; Hardware stack levels used:    1
 19131 ;; This function calls:
 19132 ;;		Nothing
 19133 ;; This function is called by:
 19134 ;;		_setDimmerLights_IntrControl
 19135 ;; This function uses a non-reentrant model
 19136 ;;
 19137                           
 19138                           
 19139                           ;psect for function _DimmerIntrPointSelect
 19140  1C55                     _DimmerIntrPointSelect:	
 19141                           
 19142                           ;incstack = 0
 19143                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19144                           ;DimmerIntrPointSelect@lights stored from wreg
 19145  1C55  00F1               	movwf	DimmerIntrPointSelect@lights
 19146                           
 19147                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19148  1C56  0871               	movf	DimmerIntrPointSelect@lights,w
 19149  1C57  3A01               	xorlw	1
 19150  1C58  1D03               	skipz
 19151  1C59  2C5E               	goto	i1l736
 19152                           
 19153                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19154  1C5A  3055               	movlw	_DimmerLights1& (0+255)
 19155  1C5B  00F0               	movwf	??_DimmerIntrPointSelect
 19156  1C5C  0870               	movf	??_DimmerIntrPointSelect,w
 19157  1C5D  00F6               	movwf	_DimmerLightsIntr
 19158  1C5E                     i1l736:	
 19159                           
 19160                           ;Dimmer_B1.c: 78: }
 19161                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19162  1C5E  0871               	movf	DimmerIntrPointSelect@lights,w
 19163  1C5F  3A02               	xorlw	2
 19164  1C60  1D03               	skipz
 19165  1C61  0008               	return
 19166                           
 19167                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19168  1C62  30BE               	movlw	_DimmerLights2& (0+255)
 19169  1C63  00F0               	movwf	??_DimmerIntrPointSelect
 19170  1C64  0870               	movf	??_DimmerIntrPointSelect,w
 19171  1C65  00F6               	movwf	_DimmerLightsIntr
 19172  1C66  0008               	return
 19173  1C67                     __end_of_DimmerIntrPointSelect:	
 19174                           
 19175                           	psect	text132
 19176  1BE5                     __ptext132:	
 19177 ;; *************** function _IOC_ISR *****************
 19178 ;; Defined at:
 19179 ;;		line 400 in file "../src/MCU_B1.c"
 19180 ;; Parameters:    Size  Location     Type
 19181 ;;		None
 19182 ;; Auto vars:     Size  Location     Type
 19183 ;;		None
 19184 ;; Return value:  Size  Location     Type
 19185 ;;		None               void
 19186 ;; Registers used:
 19187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : 0/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19197 ;;Total ram usage:        0 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    3
 19200 ;; This function calls:
 19201 ;;		_setDimmerReClock
 19202 ;; This function is called by:
 19203 ;;		_ISR
 19204 ;; This function uses a non-reentrant model
 19205 ;;
 19206                           
 19207                           
 19208                           ;psect for function _IOC_ISR
 19209  1BE5                     _IOC_ISR:	
 19210                           
 19211                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19212                           
 19213                           ;incstack = 0
 19214                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19215  1BE5  1D8B               	btfss	11,3	;volatile
 19216  1BE6  0008               	return
 19217  1BE7  1C0B               	btfss	11,0	;volatile
 19218  1BE8  0008               	return
 19219  1BE9  0027               	movlb	7	; select bank7
 19220  1BEA  1D16               	btfss	22,2	;volatile
 19221  1BEB  0008               	return
 19222                           
 19223                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19224  1BEC  1116               	bcf	22,2	;volatile
 19225                           
 19226                           ;MCU_B1.c: 403: IOCIF = 0;
 19227  1BED  100B               	bcf	11,0	;volatile
 19228                           
 19229                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19230  1BEE  0021               	movlb	1	; select bank1
 19231  1BEF  1C20               	btfss	_myMain^(0+128),0
 19232  1BF0  0008               	return
 19233                           
 19234                           ;MCU_B1.c: 407: setDimmerReClock();
 19235  1BF1  319B  230A         	fcall	_setDimmerReClock
 19236  1BF3  0008               	return
 19237  1BF4                     __end_of_IOC_ISR:	
 19238                           
 19239                           	psect	text133
 19240  1B0A                     __ptext133:	
 19241 ;; *************** function _setDimmerReClock *****************
 19242 ;; Defined at:
 19243 ;;		line 243 in file "../src/MCU_B1.c"
 19244 ;; Parameters:    Size  Location     Type
 19245 ;;		None
 19246 ;; Auto vars:     Size  Location     Type
 19247 ;;		None
 19248 ;; Return value:  Size  Location     Type
 19249 ;;		None               void
 19250 ;; Registers used:
 19251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19252 ;; Tracked objects:
 19253 ;;		On entry : 0/0
 19254 ;;		On exit  : 0/0
 19255 ;;		Unchanged: 0/0
 19256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19261 ;;Total ram usage:        0 bytes
 19262 ;; Hardware stack levels used:    1
 19263 ;; Hardware stack levels required when called:    2
 19264 ;; This function calls:
 19265 ;;		_setDimmerLights_IntrIOC_GO
 19266 ;; This function is called by:
 19267 ;;		_IOC_ISR
 19268 ;; This function uses a non-reentrant model
 19269 ;;
 19270                           
 19271                           
 19272                           ;psect for function _setDimmerReClock
 19273  1B0A                     _setDimmerReClock:	
 19274                           
 19275                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19276                           
 19277                           ;incstack = 0
 19278                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19279  1B0A  3001               	movlw	1
 19280  1B0B  3192  22AC  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19281                           
 19282                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19283  1B0E  3002               	movlw	2
 19284  1B0F  3192  22AC         	fcall	_setDimmerLights_IntrIOC_GO
 19285  1B11  0008               	return
 19286  1B12                     __end_of_setDimmerReClock:	
 19287                           
 19288                           	psect	text134
 19289  12AC                     __ptext134:	
 19290 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19291 ;; Defined at:
 19292 ;;		line 28 in file "../src/Dimmer_B1.c"
 19293 ;; Parameters:    Size  Location     Type
 19294 ;;  lights          1    wreg     unsigned char 
 19295 ;; Auto vars:     Size  Location     Type
 19296 ;;  lights          1    2[COMMON] unsigned char 
 19297 ;; Return value:  Size  Location     Type
 19298 ;;		None               void
 19299 ;; Registers used:
 19300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19301 ;; Tracked objects:
 19302 ;;		On entry : 0/0
 19303 ;;		On exit  : 0/0
 19304 ;;		Unchanged: 0/0
 19305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;Total ram usage:        1 bytes
 19311 ;; Hardware stack levels used:    1
 19312 ;; Hardware stack levels required when called:    1
 19313 ;; This function calls:
 19314 ;;		_DimmerIntrIOCPointSelect
 19315 ;; This function is called by:
 19316 ;;		_setDimmerReClock
 19317 ;; This function uses a non-reentrant model
 19318 ;;
 19319                           
 19320                           
 19321                           ;psect for function _setDimmerLights_IntrIOC_GO
 19322  12AC                     _setDimmerLights_IntrIOC_GO:	
 19323                           
 19324                           ;incstack = 0
 19325                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19326                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19327  12AC  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19328                           
 19329                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19330  12AD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19331  12AE  319C  24E8  3192   	fcall	_DimmerIntrIOCPointSelect
 19332                           
 19333                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 0) {
 19334  12B1  0021               	movlb	1	; select bank1
 19335  12B2  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19336  12B3  3E02               	addlw	2
 19337  12B4  0086               	movwf	6
 19338  12B5  3001               	movlw	1	; select bank2/3
 19339  12B6  0087               	movwf	7
 19340  12B7  1901               	btfsc	1,2
 19341  12B8  0008               	return
 19342  12B9  0020               	movlb	0	; select bank0
 19343  12BA  190D               	btfsc	13,2	;volatile
 19344  12BB  0008               	return
 19345                           
 19346                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19347  12BC  0021               	movlb	1	; select bank1
 19348  12BD  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19349  12BE  3E02               	addlw	2
 19350  12BF  0086               	movwf	6
 19351  12C0  3001               	movlw	1	; select bank2/3
 19352  12C1  0087               	movwf	7
 19353  12C2  1501               	bsf	1,2
 19354                           
 19355                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19356  12C3  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19357  12C4  0086               	movwf	6
 19358  12C5  3001               	movlw	1	; select bank2/3
 19359  12C6  0087               	movwf	7
 19360  12C7  1401               	bsf	1,0
 19361                           
 19362                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19363  12C8  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19364  12C9  0086               	movwf	6
 19365  12CA  3001               	movlw	1	; select bank2/3
 19366  12CB  0087               	movwf	7
 19367  12CC  1481               	bsf	1,1
 19368                           
 19369                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19370  12CD  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19371                           
 19372                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19373  12CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19374  12CF  0086               	movwf	6
 19375  12D0  3001               	movlw	1	; select bank2/3
 19376  12D1  0087               	movwf	7
 19377  12D2  1D01               	btfss	1,2
 19378  12D3  0008               	return
 19379                           
 19380                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19381  12D4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19382  12D5  0086               	movwf	6
 19383  12D6  3001               	movlw	1	; select bank2/3
 19384  12D7  0087               	movwf	7
 19385  12D8  1401               	bsf	1,0
 19386                           
 19387                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19388  12D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19389  12DA  3A01               	xorlw	1
 19390  12DB  1D03               	skipz
 19391  12DC  2AE0               	goto	i1l6962
 19392                           
 19393                           ;Dimmer_B1.c: 56: RA7 = 1;
 19394  12DD  0020               	movlb	0	; select bank0
 19395  12DE  178C               	bsf	12,7	;volatile
 19396                           
 19397                           ;Dimmer_B1.c: 58: }
 19398  12DF  0008               	return
 19399  12E0                     i1l6962:	
 19400                           
 19401                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19402  12E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19403  12E1  3A02               	xorlw	2
 19404  12E2  1D03               	skipz
 19405  12E3  0008               	return
 19406                           
 19407                           ;Dimmer_B1.c: 62: RB4 = 1;
 19408  12E4  0020               	movlb	0	; select bank0
 19409  12E5  160D               	bsf	13,4	;volatile
 19410  12E6  0008               	return
 19411  12E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19412                           
 19413                           	psect	text135
 19414  1CE8                     __ptext135:	
 19415 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19416 ;; Defined at:
 19417 ;;		line 8 in file "../src/Dimmer_B1.c"
 19418 ;; Parameters:    Size  Location     Type
 19419 ;;  lights          1    wreg     unsigned char 
 19420 ;; Auto vars:     Size  Location     Type
 19421 ;;  lights          1    1[COMMON] unsigned char 
 19422 ;; Return value:  Size  Location     Type
 19423 ;;		None               void
 19424 ;; Registers used:
 19425 ;;		wreg
 19426 ;; Tracked objects:
 19427 ;;		On entry : 0/0
 19428 ;;		On exit  : 0/0
 19429 ;;		Unchanged: 0/0
 19430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19433 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19434 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;Total ram usage:        2 bytes
 19436 ;; Hardware stack levels used:    1
 19437 ;; This function calls:
 19438 ;;		Nothing
 19439 ;; This function is called by:
 19440 ;;		_setDimmerLights_IntrIOC_GO
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           
 19445                           ;psect for function _DimmerIntrIOCPointSelect
 19446  1CE8                     _DimmerIntrIOCPointSelect:	
 19447                           
 19448                           ;incstack = 0
 19449                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19450                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19451  1CE8  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19452                           
 19453                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19454  1CE9  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19455  1CEA  3A01               	xorlw	1
 19456  1CEB  1D03               	skipz
 19457  1CEC  2CF2               	goto	i1l723
 19458                           
 19459                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19460  1CED  3055               	movlw	_DimmerLights1& (0+255)
 19461  1CEE  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19462  1CEF  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19463  1CF0  0021               	movlb	1	; select bank1
 19464  1CF1  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19465  1CF2                     i1l723:	
 19466                           
 19467                           ;Dimmer_B1.c: 12: }
 19468                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19469  1CF2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19470  1CF3  3A02               	xorlw	2
 19471  1CF4  1D03               	skipz
 19472  1CF5  0008               	return
 19473                           
 19474                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19475  1CF6  30BE               	movlw	_DimmerLights2& (0+255)
 19476  1CF7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19477  1CF8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19478  1CF9  0021               	movlb	1	; select bank1
 19479  1CFA  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19480  1CFB  0008               	return
 19481  1CFC                     __end_of_DimmerIntrIOCPointSelect:	
 19482  007E                     btemp	set	126	;btemp
 19483  007E                     pic14e$flags	set	126
 19484  007E                     wtemp	set	126
 19485  007E                     wtemp0	set	126
 19486  0080                     wtemp1	set	128
 19487  0082                     wtemp2	set	130
 19488  0084                     wtemp3	set	132
 19489  0086                     wtemp4	set	134
 19490  0088                     wtemp5	set	136
 19491  007F                     wtemp6	set	127
 19492  007E                     ttemp	set	126
 19493  007E                     ttemp0	set	126
 19494  0081                     ttemp1	set	129
 19495  0084                     ttemp2	set	132
 19496  0087                     ttemp3	set	135
 19497  007F                     ttemp4	set	127
 19498  007E                     ltemp	set	126
 19499  007E                     ltemp0	set	126
 19500  0082                     ltemp1	set	130
 19501  0086                     ltemp2	set	134
 19502  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      79
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  130241
                                              3 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8404
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8404
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     405
                                              7 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45972
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   45972
                                              5 BANK1      1     1      0
                                              0 BANK4      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35750
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35407
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 16 17:22:32 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 177F  
                                      l98 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1089                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1D24  
                  __end_of_setDelayOff_GO 164F                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 155A  
                    _setDimmerLights_Line 1DB3                              ___ftadd@sign 004B  
                                     l110 1461                                       l106 1467  
                                     l107 1463                                       l108 1451  
                    _setDimmerLights_SwOn 086E                                       l255 0A26  
                                     l328 1DD7                                       l329 1DD9  
                                     l372 1FB6                                       l809 1EFC  
                                     l768 1CB9                                       l858 1D2D  
                                     l859 1D35                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1DE4  
                   _Buzzer_Initialization 1ACA                           __end_of_ADC_Set 1B0A  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 15AA                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1F68                     _setDimmerLights_AdjOn 1205  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1BF4  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1030 1ED1                                      l1031 1EDB  
                                    l1065 13D9                                      l1333 11FF  
                                    l3030 095A                                      l2312 11CB  
                ?_DimmerLightsPointSelect 0070                                      l1347 1132  
                                    l3036 0971                                      l1356 14B4  
                                    l2260 0DCF                                      l2252 0DA4  
                                    l2326 0B7E                                      l1607 063E  
                                    l2263 0DF9                                      l2249 0E08  
                                    l1545 1321                                      l1730 007B  
                                    l2290 1BF9                                      l2338 134D  
                                    l2258 0DCD                                      l3059 0508  
                                    l1731 0076                                      l1572 117E  
                                    l1900 0FF6                                      l1573 1199  
                         __end_of_IOC_Set 1BB2                                      l1727 01EF  
                                    l1577 1195                                      l1737 01CB  
                                    l1729 007F                                      l1738 01C9  
                                    l2642 1DA5                                      l2664 035F  
                                    l2666 0238                                      l1895 0FFC  
                                    l2869 1E73                                      l9010 0888  
                                    l9020 0899                     _setDimmerLights_SwOff 14BC  
                                    l9040 14F1                                      l9008 0885  
                                    l9122 1146                                      l9026 08BC  
                                    l9018 0894                                      l9060 17F1  
                                    l9028 08C2                                      l9310 1296  
                                    l8600 1C6A                                      l9320 12A5  
                                    l9312 1299                                      l9232 153E  
                                    l9322 12AA                                      l9402 1693  
                                    l9170 1E5D                                      l9250 133C  
                                    l8604 1C70                                      l9172 1E63  
                                    l9236 154D                                      l9262 1E0F  
                                    l9190 09C5                                      l9406 1697  
                                    l8622 1F51                                      l8710 0ED4  
                                    l9502 0A42                                      l9256 1E06  
                                    l9192 0996                                      l9336 1179  
                                    l8704 0EBE                                      l9272 1F96  
                                    l9520 0B8C                                      l9258 1E09  
                                    l9194 09CB                                      l9346 1190  
                                    l9338 1182                                      l8634 0491  
                                    l9274 1F99                                      l9530 0B9F  
                                    l9514 0B83                                      l9522 0B8F  
                                    l9450 0B5F                                      l9442 0B3E  
                                    l9356 1DC3                                      l8580 0946  
                                    l8572 0930                                      l8644 04A7  
                                    l8732 0F2E                                      l8724 0F15  
                                    l8804 0D07                                      l9620 15DA  
                                    l9532 0BA2                                      l9516 0B86  
                                    l9444 0B53                     _myMain_Initialization 1C03  
                                    l9382 166F                                      l9390 1677  
                                    l8662 04D4                                      l8638 0498  
                                    l8830 0D52                                      l8822 0D37  
                                    l9630 15F0                                      l9278 1F9F  
                                    l9470 09FB                                      l9446 0B57  
                                    l9438 0B19                                      l9454 0B63  
                                    l9368 165E                                      l9376 1666  
                                    l8576 0937                                      l8680 051A  
                                    l8664 04DE                                      l8656 04C1  
                                    l8832 0D5B                                      l8824 0D45  
                                    l9640 170E                                      l9552 0BBA  
                                    l9536 0BA8                                      l9464 09F2  
                                    l8752 0748                                      l9448 0B5B  
                                    l8922 16EF                                      l8914 16DE  
                                    l8906 16C0                                      l9298 1282  
                                    l8586 095F                                      l8578 0941  
                                    l8674 04FA                                      l8666 04E3  
                                    l8834 0D5E                                      l9554 0BD3  
                                    l9490 0A2F                                      l9466 09F5  
                                    l8746 0732                                      l9802 0C63  
                                    l8908 16CC                                      l8588 0967  
                                    l8684 052C                                      l8676 0504  
                                    l8668 04E7                                      l9484 0A0D  
                                    l8780 07A7                                      l8764 0783  
                                    l9812 1D57                                      l9574 1FC7  
                                    l9582 106F                                      l8846 1D07  
                                    l8918 16E7                                      l8862 10DB  
                                    l9398 168F                                      l8694 0547  
                                    l8838 0D6C                                      l9494 0A35  
                                    l9576 1FD2                                      l9584 1072  
                                    l9496 0A39                                      l9488 0A2C  
                                    l8776 079F                                      l8768 078B  
                                    _CFGS 0CAE                                      l8890 16AD  
                                    l8970 1634                                      l9498 0A3C  
                                    l9826 1EB4                                      l9588 1078  
                                    l9860 140E                                      l8972 163A  
                                    l9748 1C4F                                      l9836 1EC0  
                                    l9828 1EB6                                      l9870 141E  
                                    l9854 1405                                      l8966 162E  
                                    l9766 0C12                                      l9838 1EC4  
                                    l9864 1415                                      l9856 1408  
                                    l8896 16B8                                      l9776 0C23  
                            __CFG_WDTE$ON 0000                                      l9866 1418  
                                    l9970 1583                                      l9698 111A  
                                    l9956 1CD3                                      l9972 1589  
                                    l9788 0C39                                      l9796 0C58  
                                    l9978 15A4                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9005 0978                                      u9205 04E8  
                                    u9145 04C2                                      u9305 0EE6  
                                    u9235 04FB                                      u9315 0EF6  
                                    u9325 0F16                                      u9175 04D5  
                                    u9335 0F25                                      u9415 078C  
                                    u9345 0F2F                                      u9505 0D0E  
                                    u9425 0792                                      u9535 0D38  
                                    u9455 07A8                                      u9705 16CD  
                                    u9625 10C7                                      u9465 07AE  
                                    u9385 0754                                      u9715 16D7  
                                    u9395 0764                                      u9725 16DF  
                                    u9565 0D53                                      u8935 093C  
                                    u8955 0955                                      _LWLO 0CAD  
                                    u9685 16C3                                      u8975 0962  
                                    u9960 17B1                                      u9965 17AF  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0127  
                                    _Temp 00D6                                      _main 0813  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0927  
                         __end_of_RF_Main 1AD6                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1BCA  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1B0A                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1361  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2330 0023  
    _getDimmerLights_Allow_Condition$2331 0024      _getDimmerLights_Allow_Condition$2329 0022  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 12AC  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1272  
                  _getDimmerLights_Status 1C22                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0012                          __end_of_LED_Main 1BA6  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1C67  
                   ?_getDimmerLights_Line 0070                                     l10010 10E5  
                                   l10012 1107                                     l10100 1F11  
                                   l10102 1F14                                     l10008 1102  
                                   l10202 0FCB                                     l10106 1F19  
                                   l10124 148A                                     l10204 0FCD  
                                   l10118 1475                                     l10310 1DAA  
                                   l10214 0FE2                                     l10216 0FE3  
                                   l10410 1E6D                                     l10314 1DB0  
                                   l10500 1EFE                                     l10252 0DA9  
                                   l10236 0D8E                                     l10404 035B  
                                   l10172 0F6C                                     l10430 1244  
                                   l10432 1250                                     l10248 0DA6  
                                   l10344 0266                                     l10328 0223  
                                   l10530 06B1                                     l10442 126B  
                                   l10354 0298                                     l10276 0DE0  
                                   l10620 0C8E                                     l10438 1262  
                                   l10286 0DEB                                     l10456 143B  
                                   l10368 02D6                                     l10632 0CBB  
                                   l10378 0308                                     l10900 060F  
                                   l10708 005D                                     l10628 0CB3  
                                   l10902 05E6                                     l10742 00A2  
                                   l10726 007E                                     l10662 1390  
                   ?_setDimmerLights_Main 0070                                     l10904 0617  
                                   l10912 0634                                     l10648 0CE8  
                                   l10680 1301                                     l10906 0621  
                                   l10836 01DE                                     l10780 016A  
                                   l10748 00D4                                     l10870 058D  
                                   l10774 015D                                     l10864 057E  
                                   l10784 0189                                     l10882 05C8  
                                   l10874 059C                                     l10884 059F  
                                   l10788 0195                                     l10886 05D0  
                                   l10798 01AB                                     l10982 0842  
                                   l10978 0837                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0268                           __end_of___awdiv 16F6  
                         __end_of___ftadd 055F                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1B4B                                     u10015 1D83  
                                   u10105 09A1                           __end_of___ftmul 07CF  
                                   u12105 1251                                     u12115 125B  
                         ___awdiv@divisor 0020                                     u12125 1263  
                                   u12045 1E74                                     u12055 1E79  
                                   _T1CON 0018                                     u12155 1431  
                                   u12315 11F6                                     u10725 1FBC  
                         __end_of___fttol 0D75                                     u12085 1247  
                                   u11365 10EE                                     u12425 0CD5  
                                   u11565 0FB3                                     u12525 1319  
                                   u12375 0CA1                                     u11665 0DA1  
                                   u11585 0FD3                                     u12475 1387  
                                   u12485 1396                                     u12920 0615  
                                   u12665 00A0                                     u12675 00D2  
                                   u12925 05F1                                     u12765 019C  
                                   u12685 0116                                     _IOCBF 0396  
                                   u12890 05CE                                     _IOCBN 0395  
                                   u12895 05AA                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1272                                     i1l723 1CF2  
                                   i1l736 1C5E                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1D89  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 12E7  
              _setDimmerLights_IntrIOC_GO 12AC                          __end_of_TMR1_ISR 2000  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 09EA                _setDimmerLights_ErrorClose 0988  
                        __end_of_TMR1_Set 1BBE                                     _getAD 1F06  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1CAF  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D4C                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
            __end_of_getMain_LightsStatus 1CD5             __end_of_setLED_Initialization 1C8B  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 17A7               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0AB3                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 086E  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1AEC  
                      ??_setMemory_Modify 0020                            _Exception_Main 055F  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 15FC                      _setSw_Initialization 1B3A  
                                  ??_main 006F                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0B18  
                          _setMemory_Data 1B76                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 0014                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1CC2                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08CA  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B32  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F68  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0988  
                _getMain_All_Error_Status 1168                                    _IOCBF2 1CB2  
                                  i1l7342 03C9                                    i1l7326 0392  
                                  i1l7360 0410                                    i1l7362 0416  
                                  i1l7338 03C2                                    i1l7374 044C  
                                  i1l7366 0427                                    i1l7368 042D  
                                  i1l7378 0462                                    i1l6962 12E0  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                                    _OSCCON 0099  
                                  u811_25 1FFA                        __size_of_Load_Main 01AC  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1DE4                                    _WDTCON 0097  
                    Exception_Main@i_3620 00EC                        DelayTime_1us@count 0020  
          __size_of_CC2500_PowerOnInitial 0015             __end_of_CC2500_PowerOnInitial 1D9E  
                                  _Dimmer 00C6                                    _DlySw1 01E1  
                                  _DlySw2 01E6                __end_of_Mcu_Initialization 1C9D  
                     __end_of_Buzzer_Main 146E                                    _Memory 0220  
                                  _Timer1 0120                                    ___bmul 1C67  
                  __end_of_Exception_Main 063F                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EE                                    ___wmul 1E6A  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D4                                    _s_data 00D5  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 164F  
                                  _myMain 00A0                    __end_of_setMemory_Data 1B82  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 174E                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1AD0          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 0469               _setDimmerLights_IntrControl 0368  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 0813               getMain_Lights_Count@status1 0021  
             getMain_Lights_Count@status2 0022                     __end_of_SwPointSelect 1D60  
            __size_of_Flash_Memory_Modify 004E         setDimmerLights_IntrControl@lights 0073  
                 __size_of_LedPointSelect 0020                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0020  
                              _TouchPower 1D9E               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025                ?_getAll_DimmerLights_AdjSw 0070  
                 __end_of_getPercentValue 0B18          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0045                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5260 0022                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2310 002E                 _setDimmerLights_SwOn$2311 002F  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070            DimmerIntrIOCPointSelect@lights 0071  
                         ?_Exception_Main 0070                              __pidataBANK4 1F26  
                           __end_of_getAD 1F26                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021              __size_of_setDimmerLights_Adj 0058  
                      _LED_Initialization 1B8E                           _getSw_KeyStatus 1EA7  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0021  
                        ??_DelayTimejudge 0024                           ?_setMemory_Data 0020  
           ??_Flash_Memory_Initialization 0062                          ?_setDimmerLights 006B  
                    _getMain_Lights_Count 1D38                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01F5                        __size_of_getBuz_GO 0011  
                    _getMain_LightsStatus 1CC2                __end_of_set_TimeoutCleared 1AF1  
                __end_of_setDimmerReClock 1B12                        __size_of_getRxData 007F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BD7                            _DimmerLights11 00CA  
                          _DimmerLights22 00CB                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1AD6                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1424                         ??_setRFSW_Control 006B  
                       __end_of_Temp_Main 1ADC                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B12  
                              __pnvCOMMON 0079                             ??_Switch_Main 006E  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 006F  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 0813  
                          _getDelayOff_GO 1C12                       _CC2500_WriteCommand 1DFD  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 0013                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                   ?___wmul 0020  
                              ??_TMR1_ISR 0074                             ?_setTemp_Main 0070  
                              _getLoad_AD 0C6D                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1B22                        __size_of_setTxData 009B  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B03  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 1361  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1B5F                        _setRFSW_AdjControl 1323  
                  __end_of_setProductData 1BE5                                   _IOC_ISR 1BE5  
                                 _IOC_Set 1BA6                      __size_of_setLog_Code 0034  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 11CF                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1E17                getAll_DimmerLights_AdjSw@i 0024  
             ?_setDimmerLights_IntrIOC_GO 0070                    __size_of_CC2500_RxData 006F  
                  __size_of_CC2500_TxData 0064               ?_setDimmerLights_ErrorClose 0070  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1AD3                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1BBE  
         __end_of_setControl_Lights_Table 0B7F                           setRF_Main@error 0267  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
                         _setPercentValue 0A4E                   ??_setLoad_AH_AL_Restore 0020  
                        ?_getPercentValue 0070              __end_of_CC2500_FrequencyCabr 1B76  
                         __size_of_IO_Set 0019                         __end_of_getBuz_GO 1C44  
                     ??_Flash_Memory_Main 0026                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1C22                                   _VarLED1 016A  
                                 _VarLED2 01EB            __end_of_getDimmerLights_Status 1C33  
                       __end_of_getRxData 0C6D                   __end_of_getSw_KeyStatus 1EC6  
                _CC2500_registers_address 1000          __end_of_DimmerIntrIOCPointSelect 1CFC  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0068  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 16A2  
                                 ___ftadd 0469                                   ___ftdiv 0EA7  
                                 ___ftneg 1B42                           __size_of___wmul 001E  
                                 ___ftmul 071B                                   ___fttol 0CEE  
                     __end_of_Switch_Main 1B6A                                   ___lwdiv 123B  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1C44  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 006B  
                         __size_of_setBuz 0059                                   __ptext1 12E7  
                                 __ptext2 1C03                                   __ptext3 1361  
                                 __ptext4 0C6D                                   __ptext5 1F06  
                                 __ptext6 1C9D                                   __ptext7 0002  
                                 __ptext8 1AD9                                   __ptext9 0F50  
                 ??_setDimmerLights_AdjRF 0062                   ??_setDimmerLights_AdjOn 0027  
               __size_of_CC2500_SIDLEMode 0004                     _DimmerIntrPointSelect 1C55  
                            __size_of_ISR 000F                ??_getMain_All_Error_Status 0020  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 1205  
               __end_of_Flash_Memory_Read 1E31                   ??_setDimmerLights_SwOff 006A  
                              _setRF_Main 0D75                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1B1A                         _DimmerLights_Main 1EE6  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1AF7  
              __end_of_CC2500_ClearRXFIFO 1AE0                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1AE4             DimmerLightsPointSelect@lights 0021  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 0079                            _LedPointSelect 1EC6  
                     _DelayOffPointSelect 1CFC                                   clrloop0 1AFE  
          __size_of_Switch_Initialization 000D             __end_of_Switch_Initialization 1BD7  
                    end_of_initialization 0045                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1089                             _DelayTime_1us 1FB1  
                       __end_of_setTxData 0EA7                __end_of_Flash_Memory_Write 1139  
                                 init_ram 1AF7                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006F                      Flash_Memory_Read@ret 0023  
                                 initloop 1AF8                                _setSw_Main 01F5  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0031  
                       _CC2500_ReadStatus 1F8C                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C79                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0B7F  
                           _CC2500_TxData 09EA                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 146E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1B4B  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0020  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1F06  
                      _Mcu_Initialization 1C8B                  __size_of_CC2500_PowerRST 0044  
                    __end_of_my_MainTimer 1323                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1EE6  
                 __end_of_setPercentValue 0AB3                  __size_of_CC2500_WriteREG 0023  
               __end_of_CC2500_InitSetREG 10B3                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0059  
                          ?_DelayTime_1us 0020                       _setDimmerLights_Adj 16F6  
                    ?_Flash_Memory_Unlock 0070                 __end_of_CC2500_ReadStatus 1FB1  
                           ?_RF_RxDisable 0070           getMain_All_Error_Status@command 0025  
             ??_getAll_DimmerLights_AdjSw 0022                               ___ftdiv@exp 003C  
                        ??_Exception_Main 006B                            __end_of_IO_Set 1DFD  
                    _setRF_Initialization 1B54                        _setMemory_LoopSave 0800  
                             _Switch_Main 1B5F                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   _DimmerLightsPointSelect 1CAF  
                 __end_of_getRF_KeyStatus 1C55                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1D89  
                    ??_Mcu_Initialization 0021                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                    ?_setDimmerLights_Adj 006B                            __end_of___bmul 1C79  
                    setRF_DimmerLights@on 0066                  _DimmerIntrIOCPointSelect 1CE8  
                          __end_of___wmul 1E88                         getSw_KeyStatus@sw 0024  
                       __size_of_TMR1_ISR 0029             __size_of_getDimmerLights_Line 0014  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0050                            __end_of_setLED 16A2  
           __size_of_setDimmerLights_Line 0018             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 17A7                      _CC2500_FrequencyCabr 1B6A  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 150B                         __size_of_WDT_Main 0012  
                       ?_setDimmerReClock 0070                       start_initialization 0015  
                       _setRF_DimmerValue 1139                           ?_LedPointSelect 0070  
                               _Load_Main 0049                               __end_of_ISR 0013  
                        _getDimmer_LoadGO 1B2A                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                        ??_setDimmerReClock 0073  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 1EA7  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 1000  
                          ??_RF_RxDisable 0024                       __size_of_getLoad_AD 0081  
                            ?_Buzzer_Main 0070                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1AEC                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0166  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0066  
                     __size_of_getTemp_AD 003E                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1AD9  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00CF                     setProductData@address 0065  
                     Exception_Main@count 00E8                   setRF_DimmerValue@lights 0067  
                     Exception_Main@error 00E9                                  ??___bmul 0021  
                   ??_setDimmerLights_Adj 006C                                  ??___wmul 0024  
                  __size_of_SwPointSelect 0014                                 _Tx_Length 00D2  
                             __pdataBANK4 0245                                  ??_setLED 0023  
               _getAll_DimmerLights_AdjSw 10DD                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 006F  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 119B  
                        _CC2500_SIDLEMode 1AE4                __size_of_DimmerLights_Main 0020  
               __end_of_setRF_DimmerValue 1168                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0075  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1CD5                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E8  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0155  
                           _DimmerLights2 01BE                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0066                 ??_DimmerLightsPointSelect 0020  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E4D                  setRFSW_AdjControl@status 006A  
                         ??_CC2500_TxData 0024                            getRxData@error 00EC  
             __size_of_LED_Initialization 000C                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 00EA                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 0097                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                                setBuz@time 0029  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1AC9                                 _getBuz_GO 1C33  
     __end_of_Flash_Memory_Initialization 071B               _Flash_Memory_Initialization 063F  
                                ?___awdiv 0020                                 __ptext100 15FC  
                               __ptext101 1BD7                                 __ptext110 1AF1  
                               __ptext102 10B3                                 __ptext111 1CFC  
                               __ptext103 1C67                                 __ptext120 1AE0  
                               __ptext112 1D89                                 __ptext104 1C12  
                               __ptext121 1ADC                                 __ptext113 1AE4  
                               __ptext105 1C22                                 __ptext130 0368  
                               __ptext122 1DFD                                 __ptext114 13E0  
                               __ptext106 1CAF                                 __ptext131 1C55  
                               __ptext123 1AEC                                 __ptext115 1089  
                               __ptext107 174E                                 __ptext132 1BE5  
                               __ptext124 1D74                                 __ptext116 1E88  
                               __ptext108 16A2                                 __ptext133 1B0A  
                               __ptext125 1DCB                                 __ptext117 1066  
                               __ptext109 1B12                                  ?___ftadd 0041  
                               __ptext134 12AC                                 __ptext126 1424  
                               __ptext118 1B6A                                 __ptext135 1CE8  
                               __ptext127 1ACA                                 __ptext119 1FB1  
                               __ptext129 1FD7                                 _getRxData 0BEE  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 155A                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1ACD                          getPercentValue@i 005F  
                        setPercentValue@i 005F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1DB3  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 0173  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 0036             __end_of_setDimmerLights_AdjRF 1F8C  
           __end_of_setDimmerLights_AdjOn 123B                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00D3            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 150B  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C12  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1D4C  
                     __end_of_setLED_Main 13E0                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00CC                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1AD9                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1B9A  
                         SwPointSelect@sw 0021                                 clear_ram0 1AFD  
                CC2500_InitPATable@loop_d 0027                              _my_MainTimer 12E7  
                               _setTxData 0E0C       __end_of_DimmerLights_Initialization 1D24  
             _DimmerLights_Initialization 1D10                        _CC2500_ClearRXFIFO 1ADC  
                      _CC2500_ClearTXFIFO 1AE0                  setRF_DimmerLights@lights 006A  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D74  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                __size_of_getPercentValue 0065                  setRF_DimmerLights@status 0069  
             __size_of_setRFSW_AdjControl 003E                        _Flash_Memory_Write 110A  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1FD7                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 1BB2                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                                  _RF_Count 0123  
                    __end_of_RF_RxDisable 1C03                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E17                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1C9D                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                __size_of_setRF_DimmerValue 002F  
                     ?_Flash_Memory_Write 0070                          setRF_Main@loop_f 0265  
                   __size_of_setTemp_Main 00B0                   __size_of_setDelayOff_GO 0053  
                                _DelayOff 0075                              setSw_Main@sw 006D  
        setDimmerLights_IntrIOC_GO@lights 0072                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 000F              ?_setDimmerLights_IntrControl 0070  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000C  
            __end_of_Flash_Memory_Erasing 1B8E                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 11CF                     _DlyOff_Initialization 1AF1  
                    ??_CC2500_ClearRXFIFO 0024                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                                _Fosc_Set 1AE8                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006C                        __end_of_getLoad_AD 0CEE  
                      __end_of_getLoad_OK 1B2A                     _Switch_Initialization 1BCA  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
                       ??_setDimmerLights 006C                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 139F  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
              ??_DimmerIntrIOCPointSelect 0070                          _CC2500_WriteByte 1DCB  
                       getLoad_AD@channel 0026              Flash_Memory_Initialization@i 0063  
                                _SwDetect 00D1                               ??_Temp_Main 0069  
                       setRFSW_Control@sw 006D             _getMain_All_Error_Status$3605 0021  
           _getMain_All_Error_Status$3606 0023                  __end_of_getDimmer_LoadGO 1B32  
                     _Load_Initialization 1ACD                                 setLED@led 0023  
                 ??_DimmerIntrPointSelect 0070                              _setTemp_Main 0F50  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0030                                  ___awtoft 1F46  
                        ??_LedPointSelect 0020                                  ___ftpack 0927  
           __size_of_getMain_Lights_Count 0014                    getDimmer_LoadGO@loadgo 0020  
           __size_of_getMain_LightsStatus 0013                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00ED                      CC2500_WriteREG@value 0022  
                             _setLED_Main 139F                __end_of_setRF_DimmerLights 1800  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1B3A                          setDelayOff_GO@sw 0069  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
      __size_of_getAll_DimmerLights_AdjSw 002D                           ___lwdiv@counter 0025  
                                __ptext10 1AD6                                  __ptext11 1AC9  
                                __ptext20 1D9E                                  __ptext12 1B5F  
                                __ptext21 1AD3                                  __ptext13 01F5  
                                __ptext30 1139                                  __ptext22 0D75  
                                __ptext14 1D60                                  __ptext31 1F68  
                                __ptext23 0BEE                                  __ptext15 1205  
                                __ptext40 1F8C                                  __ptext32 0AB3  
                                __ptext24 119B                                  __ptext16 1EA7  
                                __ptext41 1E4D                                  __ptext33 071B  
                                __ptext25 0800                                  __ptext17 1D4C  
                                __ptext50 1B03                                  __ptext42 1AD0  
                                __ptext34 1CD5                                  __ptext26 0B18  
                                __ptext18 1BCA                                  __ptext51 0049  
                                __ptext43 1B54                                  __ptext35 1C44  
                                __ptext27 150B                                  __ptext19 1B3A  
                                __ptext60 1B9A                                  __ptext52 1D38  
                                __ptext44 1C8B                                  __ptext36 1C33  
                                __ptext28 086E                                  __ptext61 139F  
                                __ptext53 1B32                                  __ptext45 1BBE  
                                __ptext37 1BF4                                  __ptext29 1323  
                                __ptext70 1B4B                                  __ptext62 1B8E  
                                __ptext54 1B2A                                  __ptext46 1BB2  
                                __ptext38 09EA                                  __ptext71 1E17  
                                __ptext63 1C79                                  __ptext55 10DD  
                                __ptext47 1DE4                                  __ptext39 0B7F  
                                __ptext80 0A4E                                  __ptext72 055F  
                                __ptext64 11CF                                  __ptext56 1E6A  
                                __ptext48 1BA6                                  __ptext81 0CEE  
                                __ptext73 1D24                                  __ptext65 146E  
                                __ptext57 123B                                  __ptext49 1AE8  
                                __ptext90 1272                                  __ptext82 1B42  
                                __ptext74 1EE6                                  __ptext66 1B82  
                                __ptext58 1ACD                                  __ptext91 1B22  
                                __ptext83 0EA7                                  __ptext75 155A  
                                __ptext67 063F                                  __ptext59 1E31  
                                __ptext92 1CC2                                  __ptext84 0469  
                                __ptext76 16F6                                  __ptext68 1B76  
                                __ptext93 1168                                  __ptext85 1F46  
                                __ptext77 15AA                                  __ptext69 110A  
                                __ptext94 1D10                                  __ptext86 0927  
                                __ptext78 0E0C                                  __ptext95 07CF  
                                __ptext87 164F                                  __ptext79 17A7  
                                __ptext96 1B1A                                  __ptext88 1EC6  
                                __ptext97 08CA                                  __ptext89 1DB3  
                                __ptext98 0988                                  __ptext99 14BC  
                                __product 0245             ??_setDimmerLights_IntrControl 0072  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1D38              __end_of_setDimmerLights_Main 15AA  
            __end_of_setDimmerLights_Line 1DCB              __end_of_setDimmerLights_SwOn 08CA  
                            ??_setSw_Main 006B                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1D60  
                __end_of_CC2500_SIDLEMode 1AE8                setDimmerLights_Main@lights 006E  
             __end_of_DelayOffPointSelect 1D10                CC2500_WriteCommand@command 0023  
                    setRF_Main@Receive_OK 0266                 __size_of_setDimmerReClock 0008  
                 setDimmerLights_AdjOn@sw 0027                           _CC2500_ReadByte 1E4D  
                      _CC2500_InitPATable 1E88                  __end_of_setMemory_Modify 1CE8  
                      __end_of_setRF_Main 0E0C                               ??_getBuz_GO 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 00EA  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                                  main@argc 0268  
                                main@argv 026A                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6246 0021                      _getSw_KeyStatus$6247 0022  
                         _CC2500_PowerRST 13E0                  __size_of_getSw_KeyStatus 001F  
             __end_of_Flash_Memory_Modify 14BC                         ??_getPercentValue 005C  
                             _setLog_Code 119B               __end_of_Flash_Memory_Unlock 1B54  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1066  
                      __end_of_setSw_Main 0368                     ??_Load_Initialization 0022  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 10B3                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0072                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006B                   setDimmerLights_SwOff@sw 006A  
             __size_of_setMemory_LoopSave 0013         __end_of_getAll_DimmerLights_AdjSw 110A  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 0800   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 07CF               __end_of_setDimmerLights_Adj 174E  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AD0      __size_of_setDimmerLights_IntrControl 0101  
                             getLoad_AD@i 0029                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B82  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D0  
                 __size_of_Exception_Main 00E0           __end_of_DelayOff_Initialization 1B1A  
     __size_of_setDimmerLights_IntrIOC_GO 003B       __size_of_setDimmerLights_ErrorClose 0062  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B22  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 15FC          __size_of_setControl_Lights_Table 0067  
                  __end_of_DelayTimejudge 10DD               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006C                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1FD7                   __end_of_CC2500_ReadByte 1E6A  
            __end_of_setSw_Initialization 1B42                           _Timeout_Counter 1D74  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1BF4                __end_of_LED_Initialization 1B9A  
          __end_of_setTemp_Initialization 1ACA                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1AD3                     __end_of_CC2500_RxData 0BEE  
                   __end_of_CC2500_TxData 0A4E                     _setLoad_AH_AL_Restore 1E31  
                 __end_of_CC2500_PowerRST 1424  
