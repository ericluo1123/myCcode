

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Feb 24 09:03:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	intentry,global,class=CODE,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0010                     	;# 
  2070  0011                     	;# 
  2071  0012                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  008C                     	;# 
  2082  008D                     	;# 
  2083  008E                     	;# 
  2084  0090                     	;# 
  2085  0091                     	;# 
  2086  0092                     	;# 
  2087  0095                     	;# 
  2088  0096                     	;# 
  2089  0097                     	;# 
  2090  0099                     	;# 
  2091  009A                     	;# 
  2092  009B                     	;# 
  2093  009B                     	;# 
  2094  009C                     	;# 
  2095  009D                     	;# 
  2096  009E                     	;# 
  2097  010C                     	;# 
  2098  010D                     	;# 
  2099  010E                     	;# 
  2100  0116                     	;# 
  2101  0117                     	;# 
  2102  011D                     	;# 
  2103  018C                     	;# 
  2104  018D                     	;# 
  2105  018E                     	;# 
  2106  0191                     	;# 
  2107  0191                     	;# 
  2108  0192                     	;# 
  2109  0193                     	;# 
  2110  0193                     	;# 
  2111  0194                     	;# 
  2112  0195                     	;# 
  2113  0196                     	;# 
  2114  0197                     	;# 
  2115  0199                     	;# 
  2116  019A                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019C                     	;# 
  2122  019C                     	;# 
  2123  019D                     	;# 
  2124  019E                     	;# 
  2125  019F                     	;# 
  2126  020D                     	;# 
  2127  0210                     	;# 
  2128  0211                     	;# 
  2129  0211                     	;# 
  2130  0212                     	;# 
  2131  0212                     	;# 
  2132  0213                     	;# 
  2133  0213                     	;# 
  2134  0214                     	;# 
  2135  0214                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0298                     	;# 
  2148  0298                     	;# 
  2149  0299                     	;# 
  2150  029A                     	;# 
  2151  0394                     	;# 
  2152  0395                     	;# 
  2153  0396                     	;# 
  2154  0FE4                     	;# 
  2155  0FE5                     	;# 
  2156  0FE6                     	;# 
  2157  0FE7                     	;# 
  2158  0FE8                     	;# 
  2159  0FE9                     	;# 
  2160  0FEA                     	;# 
  2161  0FEB                     	;# 
  2162  0FED                     	;# 
  2163  0FEE                     	;# 
  2164  0FEF                     	;# 
  2165                           
  2166                           	psect	idataBANK4
  2167  1EE8                     __pidataBANK4:	
  2168                           
  2169                           ;initializer for __product
  2170  1EE8  3463               	retlw	99
  2171  1EE9  3402               	retlw	2
  2172  1EEA  3400               	retlw	0
  2173  1EEB  3400               	retlw	0
  2174  1EEC  3400               	retlw	0
  2175  1EED  3400               	retlw	0
  2176  1EEE  3400               	retlw	0
  2177  1EEF  3400               	retlw	0
  2178  1EF0  3400               	retlw	0
  2179  1EF1  3400               	retlw	0
  2180  1EF2  3400               	retlw	0
  2181  1EF3  3400               	retlw	0
  2182  1EF4  34FF               	retlw	255
  2183  1EF5  34FF               	retlw	255
  2184  1EF6  34FF               	retlw	255
  2185  1EF7  3400               	retlw	0
  2186  1EF8  3400               	retlw	0
  2187  1EF9  3400               	retlw	0
  2188  1EFA  3400               	retlw	0
  2189  1EFB  3400               	retlw	0
  2190  1EFC  3400               	retlw	0
  2191  1EFD  3400               	retlw	0
  2192  1EFE  3400               	retlw	0
  2193  1EFF  3400               	retlw	0
  2194  1F00  3400               	retlw	0
  2195  1F01  3400               	retlw	0
  2196  1F02  3400               	retlw	0
  2197  1F03  3400               	retlw	0
  2198  1F04  3400               	retlw	0
  2199  1F05  3400               	retlw	0
  2200  1F06  3400               	retlw	0
  2201  1F07  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext
  2204  1000                     __pstringtext:	
  2205  1000                     _CC2500_registers_address:	
  2206  1000  3403               	retlw	3
  2207  1001  3416               	retlw	22
  2208  1002  3417               	retlw	23
  2209  1003  341E               	retlw	30
  2210  1004  341F               	retlw	31
  2211  1005  3420               	retlw	32
  2212  1006  342A               	retlw	42
  2213  1007  342B               	retlw	43
  2214  1008  340B               	retlw	11
  2215  1009  340C               	retlw	12
  2216  100A  340D               	retlw	13
  2217  100B  340E               	retlw	14
  2218  100C  340F               	retlw	15
  2219  100D  3410               	retlw	16
  2220  100E  3411               	retlw	17
  2221  100F  3412               	retlw	18
  2222  1010  3413               	retlw	19
  2223  1011  3414               	retlw	20
  2224  1012  340A               	retlw	10
  2225  1013  3415               	retlw	21
  2226  1014  3421               	retlw	33
  2227  1015  3422               	retlw	34
  2228  1016  3418               	retlw	24
  2229  1017  3419               	retlw	25
  2230  1018  341A               	retlw	26
  2231  1019  341B               	retlw	27
  2232  101A  341C               	retlw	28
  2233  101B  341D               	retlw	29
  2234  101C  3423               	retlw	35
  2235  101D  3424               	retlw	36
  2236  101E  3425               	retlw	37
  2237  101F  3426               	retlw	38
  2238  1020  3429               	retlw	41
  2239  1021  342C               	retlw	44
  2240  1022  342D               	retlw	45
  2241  1023  342E               	retlw	46
  2242  1024  3400               	retlw	0
  2243  1025  3401               	retlw	1
  2244  1026  3402               	retlw	2
  2245  1027  3407               	retlw	7
  2246  1028  3408               	retlw	8
  2247  1029  3409               	retlw	9
  2248  102A  3406               	retlw	6
  2249  102B  3404               	retlw	4
  2250  102C  3405               	retlw	5
  2251  102D  3427               	retlw	39
  2252  102E  3428               	retlw	40
  2253  102F                     __end_of_CC2500_registers_address:	
  2254  102F                     _CC2500_rfSettings:	
  2255  102F  3407               	retlw	7
  2256  1030  3407               	retlw	7
  2257  1031  3430               	retlw	48
  2258  1032  3487               	retlw	135
  2259  1033  346B               	retlw	107
  2260  1034  34F8               	retlw	248
  2261  1035  347F               	retlw	127
  2262  1036  343F               	retlw	63
  2263  1037  3409               	retlw	9
  2264  1038  3400               	retlw	0
  2265  1039  345C               	retlw	92
  2266  103A  34A7               	retlw	167
  2267  103B  3462               	retlw	98
  2268  103C  3486               	retlw	134
  2269  103D  3483               	retlw	131
  2270  103E  3403               	retlw	3
  2271  103F  3422               	retlw	34
  2272  1040  34F8               	retlw	248
  2273  1041  3400               	retlw	0
  2274  1042  3444               	retlw	68
  2275  1043  34B6               	retlw	182
  2276  1044  3410               	retlw	16
  2277  1045  3418               	retlw	24
  2278  1046  341D               	retlw	29
  2279  1047  341C               	retlw	28
  2280  1048  34C7               	retlw	199
  2281  1049  3400               	retlw	0
  2282  104A  34B2               	retlw	178
  2283  104B  34EA               	retlw	234
  2284  104C  340A               	retlw	10
  2285  104D  3400               	retlw	0
  2286  104E  3411               	retlw	17
  2287  104F  3459               	retlw	89
  2288  1050  3488               	retlw	136
  2289  1051  3431               	retlw	49
  2290  1052  340B               	retlw	11
  2291  1053  342F               	retlw	47
  2292  1054  342E               	retlw	46
  2293  1055  3406               	retlw	6
  2294  1056  3404               	retlw	4
  2295  1057  3405               	retlw	5
  2296  1058  3400               	retlw	0
  2297  1059  3430               	retlw	48
  2298  105A  34D3               	retlw	211
  2299  105B  3491               	retlw	145
  2300  105C  3441               	retlw	65
  2301  105D  3400               	retlw	0
  2302  105E                     __end_of_CC2500_rfSettings:	
  2303  105E                     _CC2500_patable_vaule:	
  2304  105E  34FE               	retlw	254
  2305  105F  34FE               	retlw	254
  2306  1060  34FE               	retlw	254
  2307  1061  34FE               	retlw	254
  2308  1062  34FE               	retlw	254
  2309  1063  34FE               	retlw	254
  2310  1064  34FE               	retlw	254
  2311  1065  34FE               	retlw	254
  2312  1066                     __end_of_CC2500_patable_vaule:	
  2313                           
  2314                           	psect	nvBANK0
  2315  006C                     __pnvBANK0:	
  2316  006C                     _product:	
  2317  006C                     	ds	1
  2318  000C                     _PORTA	set	12
  2319  000D                     _PORTB	set	13
  2320  000E                     _PORTC	set	14
  2321  0018                     _T1CON	set	24
  2322  0017                     _TMR1H	set	23
  2323  0016                     _TMR1L	set	22
  2324  005F                     _GIE	set	95
  2325  005B                     _IOCIE	set	91
  2326  0058                     _IOCIF	set	88
  2327  005E                     _PEIE	set	94
  2328  0060                     _RA0	set	96
  2329  0063                     _RA3	set	99
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006B                     _RB3	set	107
  2336  006C                     _RB4	set	108
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0072                     _RC2	set	114
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0077                     _RC7	set	119
  2344  0088                     _TMR1IF	set	136
  2345  009D                     _ADCON0	set	157
  2346  009E                     _ADCON1	set	158
  2347  009C                     _ADRESH	set	156
  2348  009B                     _ADRESL	set	155
  2349  0099                     _OSCCON	set	153
  2350  008C                     _TRISA	set	140
  2351  008D                     _TRISB	set	141
  2352  008E                     _TRISC	set	142
  2353  0097                     _WDTCON	set	151
  2354  04E9                     _GO_nDONE	set	1257
  2355  0488                     _TMR1IE	set	1160
  2356  0117                     _FVRCON	set	279
  2357  010C                     _LATA	set	268
  2358  010D                     _LATB	set	269
  2359  010E                     _LATC	set	270
  2360  018C                     _ANSELA	set	396
  2361  018D                     _ANSELB	set	397
  2362  018E                     _ANSELC	set	398
  2363  0192                     _PMADRH	set	402
  2364  0191                     _PMADRL	set	401
  2365  0196                     _PMCON2	set	406
  2366  0194                     _PMDATH	set	404
  2367  0193                     _PMDATL	set	403
  2368  0CAE                     _CFGS	set	3246
  2369  0CAC                     _FREE	set	3244
  2370  0CAD                     _LWLO	set	3245
  2371  0CA8                     _RD	set	3240
  2372  0CA9                     _WR	set	3241
  2373  0CAA                     _WREN	set	3242
  2374  020D                     _WPUB	set	525
  2375  0396                     _IOCBF	set	918
  2376  0395                     _IOCBN	set	917
  2377  0394                     _IOCBP	set	916
  2378  1CB2                     _IOCBF2	set	7346
  2379                           
  2380                           ; #config settings
  2381  0000                     
  2382                           	psect	cinit
  2383  0021                     start_initialization:	
  2384  0021                     __initialization:	
  2385                           
  2386                           ; Clear objects allocated to BITCOMMON
  2387  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2388                           
  2389                           ; Clear objects allocated to COMMON
  2390  0022  01FB               	clrf	__pbssCOMMON& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK0
  2393  0023  01ED               	clrf	__pbssBANK0& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0024  30A0               	movlw	low __pbssBANK1
  2397  0025  0084               	movwf	4
  2398  0026  3000               	movlw	high __pbssBANK1
  2399  0027  0085               	movwf	5
  2400  0028  3050               	movlw	80
  2401  0029  319A  2283  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002C  3020               	movlw	low __pbssBANK2
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK2
  2407  002F  0085               	movwf	5
  2408  0030  304F               	movlw	79
  2409  0031  319A  2283  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0034  30A0               	movlw	low __pbssBANK3
  2413  0035  0084               	movwf	4
  2414  0036  3001               	movlw	high __pbssBANK3
  2415  0037  0085               	movwf	5
  2416  0038  3042               	movlw	66
  2417  0039  319A  2283  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003C  3020               	movlw	low __pbssBANK4
  2421  003D  0084               	movwf	4
  2422  003E  3002               	movlw	high __pbssBANK4
  2423  003F  0085               	movwf	5
  2424  0040  3025               	movlw	37
  2425  0041  319A  2283  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK4
  2428  0044  30E8               	movlw	low __pidataBANK4
  2429  0045  0084               	movwf	4
  2430  0046  309E               	movlw	(high __pidataBANK4)| (0+128)
  2431  0047  0085               	movwf	5
  2432  0048  3045               	movlw	low __pdataBANK4
  2433  0049  0086               	movwf	6
  2434  004A  3002               	movlw	high __pdataBANK4
  2435  004B  0087               	movwf	7
  2436  004C  3020               	movlw	32
  2437  004D  319A  227D         	fcall	init_ram
  2438  004F                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  004F                     __end_of__initialization:	
  2442  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0050  0020               	movlb	0
  2444  0051  3195  2D02         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03D0                     __pbitbssCOMMON:	
  2448  03D0                     _Receive_OK:	
  2449  03D0                     	ds	1
  2450  03D1                     _Transceive_OK:	
  2451  03D1                     	ds	1
  2452                           
  2453                           	psect	bssCOMMON
  2454  007B                     __pbssCOMMON:	
  2455  007B                     _DimmerLights:	
  2456  007B                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006D                     __pbssBANK0:	
  2460  006D                     _Sw:	
  2461  006D                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _RF1:	
  2466  00A0                     	ds	14
  2467  00AE                     _myMain:	
  2468  00AE                     	ds	13
  2469  00BB                     _Buz1:	
  2470  00BB                     	ds	12
  2471  00C7                     _DimmerIntr1:	
  2472  00C7                     	ds	12
  2473  00D3                     _Timer1:	
  2474  00D3                     	ds	3
  2475  00D6                     _WDT:	
  2476  00D6                     	ds	2
  2477  00D8                     _CRC:	
  2478  00D8                     	ds	1
  2479  00D9                     _Cmd:	
  2480  00D9                     	ds	1
  2481  00DA                     _DelayOff:	
  2482  00DA                     	ds	1
  2483  00DB                     _DimmerIntr:	
  2484  00DB                     	ds	1
  2485  00DC                     _LED:	
  2486  00DC                     	ds	1
  2487  00DD                     _Light:	
  2488  00DD                     	ds	1
  2489  00DE                     _RSSI:	
  2490  00DE                     	ds	1
  2491  00DF                     _Rx_Length:	
  2492  00DF                     	ds	1
  2493  00E0                     _SPI0Buffer:	
  2494  00E0                     	ds	1
  2495  00E1                     _SwDetect:	
  2496  00E1                     	ds	1
  2497  00E2                     _Tx_Length:	
  2498  00E2                     	ds	1
  2499  00E3                     _r_address:	
  2500  00E3                     	ds	1
  2501  00E4                     _r_data:	
  2502  00E4                     	ds	1
  2503  00E5                     _s_data:	
  2504  00E5                     	ds	1
  2505  00E6                     _Temp:	
  2506  00E6                     	ds	10
  2507                           
  2508                           	psect	bssBANK2
  2509  0120                     __pbssBANK2:	
  2510  0120                     _DimmerIntr2:	
  2511  0120                     	ds	12
  2512  012C                     _Dimmer:	
  2513  012C                     	ds	5
  2514  0131                     _RF_Count:	
  2515  0131                     	ds	2
  2516  0133                     _Load:	
  2517  0133                     	ds	40
  2518  015B                     _DimmerLights1:	
  2519  015B                     	ds	8
  2520  0163                     _DimmerLights2:	
  2521  0163                     	ds	8
  2522  016B                     _VarErrLED:	
  2523  016B                     	ds	4
  2524                           
  2525                           	psect	bssBANK3
  2526  01A0                     __pbssBANK3:	
  2527  01A0                     _RF_Data:	
  2528  01A0                     	ds	30
  2529  01BE                     _Sw1:	
  2530  01BE                     	ds	9
  2531  01C7                     _Sw2:	
  2532  01C7                     	ds	9
  2533  01D0                     _DlySw1:	
  2534  01D0                     	ds	5
  2535  01D5                     _DlySw2:	
  2536  01D5                     	ds	5
  2537  01DA                     _VarLED1:	
  2538  01DA                     	ds	4
  2539  01DE                     _VarLED2:	
  2540  01DE                     	ds	4
  2541                           
  2542                           	psect	bssBANK4
  2543  0220                     __pbssBANK4:	
  2544  0220                     _Memory:	
  2545  0220                     	ds	37
  2546                           
  2547                           	psect	dataBANK4
  2548  0245                     __pdataBANK4:	
  2549  0245                     __product:	
  2550  0245                     	ds	32
  2551                           
  2552                           	psect	clrtext
  2553  1A83                     clear_ram0:	
  2554                           ;	Called with FSR0 containing the base address, and
  2555                           ;	WREG with the size to clear
  2556                           
  2557  1A83  0064               	clrwdt	;clear the watchdog before getting into this loop
  2558  1A84                     clrloop0:	
  2559  1A84  0180               	clrf	0	;clear RAM location pointed to by FSR
  2560  1A85  3101               	addfsr 0,1
  2561  1A86  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2562  1A87  2A84               	goto	clrloop0	;have we reached the end yet?
  2563  1A88  3400               	retlw	0	;all done for this memory range, return
  2564                           
  2565                           	psect	inittext
  2566  1A7D                     init_ram:	
  2567  1A7D  00FE               	movwf	126
  2568  1A7E                     initloop:	
  2569  1A7E  0012               	moviw fsr0++
  2570  1A7F  001E               	movwi fsr1++
  2571  1A80  0BFE               	decfsz	126,f
  2572  1A81  2A7E               	goto	initloop
  2573  1A82  3400               	retlw	0
  2574                           
  2575                           	psect	cstackBANK3
  2576  01E2                     __pcstackBANK3:	
  2577  01E2                     ?_main:	
  2578  01E2                     main@argc:	
  2579                           ; 2 bytes @ 0x0
  2580                           
  2581                           
  2582                           ; 2 bytes @ 0x0
  2583  01E2                     	ds	2
  2584  01E4                     main@argv:	
  2585                           
  2586                           ; 2 bytes @ 0x2
  2587  01E4                     	ds	2
  2588                           
  2589                           	psect	cstackCOMMON
  2590  0070                     __pcstackCOMMON:	
  2591  0070                     ?_CC2500_WriteCommand:	
  2592  0070                     ?_RF_Timeout_Counter:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_setRF_TimeoutCleared:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_CC2500_WriteByte:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_CC2500_ReadStatus:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_ReadByte:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_PowerRST:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_InitSetREG:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_InitPATable:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_ClearTXFIFO:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_ClearRXFIFO:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_FrequencyCabr:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_SIDLEMode:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_DlyOff_Initialization:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_DlyOff_Main:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_setDimmerLights_SwOn:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_setDimmerLights_SwOff:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setMemory_Modify:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_setDimmerLights_Initialization:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setDimmerLights_Main:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_Line:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setTxData:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setRF_TransceiveGO:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setLED_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setLED_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_Fosc_Set:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_IO_Set:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_TMR1_Set:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_ADC_Set:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_IOC_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_WDT_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_TMR1_ISR:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_IOC_ISR:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ??_IOC_ISR:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Timeout_Counter:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_set_TimeoutCleared:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_Flash_Memory_Write:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Flash_Memory_Modify:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_WDT_Clearing:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_myMain_Initialization:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Temp_Initialization:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Load_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Switch_Initialization:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_RF_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_getLoad_AD:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_getTemp_AD:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_my_MainTimer:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Temp_Main:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Load_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Switch_Main:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_RF_Main:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Exception_Main:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setLoad_AH_AL_Restore:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setTemp_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setTemp_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRF_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_setRF_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_RF_RxDisable:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_getRxData:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setLog_Code:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setControl_Lights_Table:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRFSW_Control:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setRFSW_AdjControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setSw_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setSw_Main:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_Buzzer_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_Buzzer_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_CC2500_TxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_CC2500_RxData:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_CC2500_PowerOnInitial:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_DelayOffPointSelect:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DelayOff_Initialization:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_DelayOff_Main:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DimmerIntr_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerLights_SelectPointer:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_DimmerLights_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_setDimmerLights_DimmingOn:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerLights_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DimmerLights_TMR_1:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ??_DimmerLights_TMR_1:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLights_IOC_1:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ??_DimmerLights_IOC_1:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DimmerLights_TMR_2:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ??_DimmerLights_TMR_2:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_DimmerLights_IOC_2:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ??_DimmerLights_IOC_2:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_LedPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_LED_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_LED_Main:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_Mcu_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_ISR:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_Flash_Memory_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Main:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Unlock:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Flash_Memory_Erasing:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setMemory_LoopSave:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_WDT_Main:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_setRF_Learn:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_TouchPower:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_SwPointSelect:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_getDimmerLights_Status:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDimmerLights_ValueToPercent:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0070                     ?_getDimmerLights_PercentToValue:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getLoad_OK:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getMain_All_Error_Status:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getMain_All_LightsStatus:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getDimmerLights_Allow_Condition:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getCmd_Status:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_Flash_Memory_Read:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_getAll_Sw_KeyStatus:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getRF_KeyStatus:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getSw_KeyStatus:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getDelayOff_GO:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerIntr_DimmingValue:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Line:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmer_LoadGO:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmer_Load_Status:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getMain_Lights_Count:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     setDimmerLights_Initialization@lights:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x0
  2951  0070                     	ds	1
  2952  0071                     ??_TMR1_ISR:	
  2953  0071                     ??_ISR:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956                           
  2957                           ; 0 bytes @ 0x1
  2958  0071                     	ds	1
  2959  0072                     ??_RF_Timeout_Counter:	
  2960  0072                     ??_setRF_TimeoutCleared:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0072                     ??_CC2500_WriteByte:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0072                     ??_CC2500_ReadByte:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0072                     ?_DelayTime_1us:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0072                     ??_setMemory_Modify:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0072                     ??_setDimmerLights_Initialization:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0072                     ??_getLoad_OK:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0072                     ??_getMain_All_Error_Status:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0072                     ??_getMain_All_LightsStatus:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0072                     ??_setDimmerLights_Line:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     ??_getCmd_Status:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0072                     ?_setCmd_Status:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0072                     ??_setTxData:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0072                     ??_setRF_TransceiveGO:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0072                     ??_Fosc_Set:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0072                     ??_IO_Set:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0072                     ??_TMR1_Set:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0072                     ??_ADC_Set:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0072                     ??_IOC_Set:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0072                     ??_WDT_Set:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0072                     ??_Timeout_Counter:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0072                     ??_set_TimeoutCleared:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0072                     ??_Flash_Memory_Read:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0072                     ?_setMemory_Data:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0072                     ??_Flash_Memory_Write:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0072                     ??_getAll_Sw_KeyStatus:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0072                     ??_WDT_Clearing:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0072                     ??_myMain_Initialization:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0072                     ??_Temp_Initialization:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0072                     ??_setLoad_AH_AL_Restore:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0072                     ??_setTemp_Initialization:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0072                     ??_setRF_Initialization:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0072                     ??_getRF_KeyStatus:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0072                     ??_getSw_KeyStatus:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0072                     ??_Buzzer_Initialization:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0072                     ??_Buzzer_Main:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0072                     ??_DelayOffPointSelect:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0072                     ?_setDimmerIntr_ControlStatus:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0072                     ??_getDimmerIntr_DimmingValue:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0072                     ?_setDimmerIntr_Dimming_RF:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0072                     ??_DimmerLights_SelectPointer:	
  3087                           ; 0 bytes @ 0x2
  3088                           
  3089  0072                     ??_getDimmerLights_Line:	
  3090                           ; 0 bytes @ 0x2
  3091                           
  3092  0072                     ??_getDimmer_LoadGO:	
  3093                           ; 0 bytes @ 0x2
  3094                           
  3095  0072                     ??_getDimmer_Load_Status:	
  3096                           ; 0 bytes @ 0x2
  3097                           
  3098  0072                     ??_LedPointSelect:	
  3099                           ; 0 bytes @ 0x2
  3100                           
  3101  0072                     ??_Flash_Memory_Unlock:	
  3102                           ; 0 bytes @ 0x2
  3103                           
  3104  0072                     ??_Flash_Memory_Erasing:	
  3105                           ; 0 bytes @ 0x2
  3106                           
  3107  0072                     ??_setMemory_LoopSave:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0072                     ??_WDT_Main:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0072                     ??_getMain_Lights_Count:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0072                     ??_setRF_Learn:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0072                     ??_TouchPower:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0072                     ??_SwPointSelect:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0072                     ?___bmul:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0072                     ?_getBuz_GO:	
  3129                           ; 1 bytes @ 0x2
  3130                           
  3131  0072                     ?_getAD:	
  3132                           ; 2 bytes @ 0x2
  3133                           
  3134  0072                     ?___wmul:	
  3135                           ; 2 bytes @ 0x2
  3136                           
  3137  0072                     ?___awdiv:	
  3138                           ; 2 bytes @ 0x2
  3139                           
  3140  0072                     ?___lwdiv:	
  3141                           ; 2 bytes @ 0x2
  3142                           
  3143  0072                     ?___ftpack:	
  3144                           ; 2 bytes @ 0x2
  3145                           
  3146  0072                     setDimmerIntr_ControlStatus@command:	
  3147                           ; 3 bytes @ 0x2
  3148                           
  3149  0072                     setDimmerIntr_Dimming_Sw@command:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152  0072                     setDimmerIntr_Dimming_RF@command:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0072                     setDimmerLights_Line@lights:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158  0072                     getDimmer_LoadGO@loadgo:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161  0072                     getDimmer_Load_Status@status:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164  0072                     getAD@adcon1:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167  0072                     setMemory_Data@data:	
  3168                           ; 1 bytes @ 0x2
  3169                           
  3170  0072                     getMain_All_LightsStatus@status:	
  3171                           ; 1 bytes @ 0x2
  3172                           
  3173  0072                     getMain_Lights_Count@count:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0072                     setCmd_Status@cmd:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0072                     getCmd_Status@number:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0072                     getLoad_OK@ok:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0072                     ___bmul@multiplicand:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0072                     DelayTime_1us@count:	
  3189                           ; 1 bytes @ 0x2
  3190                           
  3191  0072                     ___wmul@multiplier:	
  3192                           ; 2 bytes @ 0x2
  3193                           
  3194  0072                     ___awdiv@divisor:	
  3195                           ; 2 bytes @ 0x2
  3196                           
  3197  0072                     ___lwdiv@divisor:	
  3198                           ; 2 bytes @ 0x2
  3199                           
  3200  0072                     ___ftpack@arg:	
  3201                           ; 2 bytes @ 0x2
  3202                           
  3203                           
  3204                           ; 3 bytes @ 0x2
  3205  0072                     	ds	1
  3206  0073                     ??_getDimmerLights_Allow_Condition:	
  3207  0073                     ??_setCmd_Status:	
  3208                           ; 0 bytes @ 0x3
  3209                           
  3210  0073                     ??_setMemory_Data:	
  3211                           ; 0 bytes @ 0x3
  3212                           
  3213  0073                     ??_RF_Initialization:	
  3214                           ; 0 bytes @ 0x3
  3215                           
  3216  0073                     ??_setDimmerIntr_ControlStatus:	
  3217                           ; 0 bytes @ 0x3
  3218                           
  3219  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3220                           ; 0 bytes @ 0x3
  3221                           
  3222  0073                     ??_setDimmerIntr_Dimming_RF:	
  3223                           ; 0 bytes @ 0x3
  3224                           
  3225  0073                     ??_Mcu_Initialization:	
  3226                           ; 0 bytes @ 0x3
  3227                           
  3228  0073                     ??___bmul:	
  3229                           ; 0 bytes @ 0x3
  3230                           
  3231  0073                     CC2500_WriteByte@loop_a:	
  3232                           ; 0 bytes @ 0x3
  3233                           
  3234  0073                     CC2500_ReadByte@loop_b:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0073                     DelayOffPointSelect@sw:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0073                     getDimmerIntr_DimmingValue@value:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2292:	
  3244                           ; 1 bytes @ 0x3
  3245                           
  3246  0073                     DimmerLights_SelectPointer@lights:	
  3247                           ; 1 bytes @ 0x3
  3248                           
  3249  0073                     getDimmerLights_Line@line:	
  3250                           ; 1 bytes @ 0x3
  3251                           
  3252  0073                     LedPointSelect@led:	
  3253                           ; 1 bytes @ 0x3
  3254                           
  3255  0073                     Flash_Memory_Read@i:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258  0073                     Flash_Memory_Write@i:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     setMemory_Modify@command:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     setMemory_LoopSave@command:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0073                     getMain_Lights_Count@status1:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0073                     getCmd_Status@cmd:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0073                     setLoad_AH_AL_Restore@i:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0073                     setRF_Learn@command:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0073                     getRF_KeyStatus@key:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0073                     setRF_TransceiveGO@command:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     SwPointSelect@sw:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     _getSw_KeyStatus$6625:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     getAll_Sw_KeyStatus@status:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     _getMain_All_Error_Status$3768:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0x3
  3299  0073                     	ds	1
  3300  0074                     ??_CC2500_WriteCommand:	
  3301  0074                     ??_CC2500_ReadStatus:	
  3302                           ; 0 bytes @ 0x4
  3303                           
  3304  0074                     ??_DelayTime_1us:	
  3305                           ; 0 bytes @ 0x4
  3306                           
  3307  0074                     ?_CC2500_WriteREG:	
  3308                           ; 0 bytes @ 0x4
  3309                           
  3310  0074                     ??_DlyOff_Initialization:	
  3311                           ; 0 bytes @ 0x4
  3312                           
  3313  0074                     ??_getDimmerLights_Status:	
  3314                           ; 0 bytes @ 0x4
  3315                           
  3316  0074                     ??_setDimmerLights_SwOff:	
  3317                           ; 0 bytes @ 0x4
  3318                           
  3319  0074                     ?_setLED:	
  3320                           ; 0 bytes @ 0x4
  3321                           
  3322  0074                     ??_setLED_Main:	
  3323                           ; 0 bytes @ 0x4
  3324                           
  3325  0074                     ??_Load_Initialization:	
  3326                           ; 0 bytes @ 0x4
  3327                           
  3328  0074                     ??_getBuz_GO:	
  3329                           ; 0 bytes @ 0x4
  3330                           
  3331  0074                     ??_getDelayOff_GO:	
  3332                           ; 0 bytes @ 0x4
  3333                           
  3334  0074                     ??_setDimmerLights_DimmingOn:	
  3335                           ; 0 bytes @ 0x4
  3336                           
  3337  0074                     ?_setDimmerLights_DimmingRun:	
  3338                           ; 0 bytes @ 0x4
  3339                           
  3340  0074                     CC2500_WriteREG@value:	
  3341                           ; 0 bytes @ 0x4
  3342                           
  3343  0074                     DlyOff_Initialization@sw:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0074                     getDelayOff_GO@sw:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0074                     setDimmerIntr_ControlStatus@lights:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0074                     getDimmerIntr_DimmingValue@lights:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3356                           ; 1 bytes @ 0x4
  3357                           
  3358  0074                     setDimmerIntr_Dimming_RF@lights:	
  3359                           ; 1 bytes @ 0x4
  3360                           
  3361  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2293:	
  3362                           ; 1 bytes @ 0x4
  3363                           
  3364  0074                     setDimmerLights_SwOff@sw:	
  3365                           ; 1 bytes @ 0x4
  3366                           
  3367  0074                     setDimmerLights_DimmingOn@sw:	
  3368                           ; 1 bytes @ 0x4
  3369                           
  3370  0074                     _getDimmerLights_Allow_Condition$2415:	
  3371                           ; 1 bytes @ 0x4
  3372                           
  3373  0074                     getDimmerLights_Status@lights:	
  3374                           ; 1 bytes @ 0x4
  3375                           
  3376  0074                     setDimmerLights_DimmingRun@command:	
  3377                           ; 1 bytes @ 0x4
  3378                           
  3379  0074                     setLED@command:	
  3380                           ; 1 bytes @ 0x4
  3381                           
  3382  0074                     Flash_Memory_Read@address:	
  3383                           ; 1 bytes @ 0x4
  3384                           
  3385  0074                     setMemory_Data@address:	
  3386                           ; 1 bytes @ 0x4
  3387                           
  3388  0074                     getMain_Lights_Count@status2:	
  3389                           ; 1 bytes @ 0x4
  3390                           
  3391  0074                     setCmd_Status@number:	
  3392                           ; 1 bytes @ 0x4
  3393                           
  3394  0074                     _getRF_KeyStatus$5569:	
  3395                           ; 1 bytes @ 0x4
  3396                           
  3397  0074                     _getSw_KeyStatus$6626:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0074                     _getAll_Sw_KeyStatus$6629:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0074                     ___bmul@product:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0074                     DelayTime_1us@i:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0074                     ___wmul@multiplicand:	
  3410                           ; 2 bytes @ 0x4
  3411                           
  3412  0074                     ___awdiv@dividend:	
  3413                           ; 2 bytes @ 0x4
  3414                           
  3415  0074                     ___lwdiv@dividend:	
  3416                           ; 2 bytes @ 0x4
  3417                           
  3418                           
  3419                           ; 2 bytes @ 0x4
  3420  0074                     	ds	1
  3421  0075                     ??_CC2500_WriteREG:	
  3422  0075                     ??_setLED:	
  3423                           ; 0 bytes @ 0x5
  3424                           
  3425  0075                     ??_DelayOff_Initialization:	
  3426                           ; 0 bytes @ 0x5
  3427                           
  3428  0075                     ??_setDimmerLights_DimmingRun:	
  3429                           ; 0 bytes @ 0x5
  3430                           
  3431  0075                     ??_getAD:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0075                     CC2500_WriteCommand@command:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0075                     CC2500_ReadStatus@status_addr:	
  3438                           ; 1 bytes @ 0x5
  3439                           
  3440  0075                     getDelayOff_GO@go:	
  3441                           ; 1 bytes @ 0x5
  3442                           
  3443  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3444                           ; 1 bytes @ 0x5
  3445                           
  3446  0075                     _getDimmerLights_Allow_Condition$2416:	
  3447                           ; 1 bytes @ 0x5
  3448                           
  3449  0075                     getDimmerLights_Status@status:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0075                     setLED@led:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0075                     getAD@adcon0:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0075                     Flash_Memory_Read@ret:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0075                     getSw_KeyStatus@status:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0075                     ___bmul@multiplier:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0075                     ___ftpack@exp:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0075                     _getMain_All_Error_Status$3769:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473                           
  3474                           ; 2 bytes @ 0x5
  3475  0075                     	ds	1
  3476  0076                     ??_CC2500_ClearTXFIFO:	
  3477  0076                     ??_CC2500_ClearRXFIFO:	
  3478                           ; 0 bytes @ 0x6
  3479                           
  3480  0076                     ??_CC2500_SIDLEMode:	
  3481                           ; 0 bytes @ 0x6
  3482                           
  3483  0076                     ??_setLED_Initialization:	
  3484                           ; 0 bytes @ 0x6
  3485                           
  3486  0076                     ??_Flash_Memory_Modify:	
  3487                           ; 0 bytes @ 0x6
  3488                           
  3489  0076                     ??_getLoad_AD:	
  3490                           ; 0 bytes @ 0x6
  3491                           
  3492  0076                     ??_getTemp_AD:	
  3493                           ; 0 bytes @ 0x6
  3494                           
  3495  0076                     ??_RF_RxDisable:	
  3496                           ; 0 bytes @ 0x6
  3497                           
  3498  0076                     ??_setSw_Initialization:	
  3499                           ; 0 bytes @ 0x6
  3500                           
  3501  0076                     ??_CC2500_TxData:	
  3502                           ; 0 bytes @ 0x6
  3503                           
  3504  0076                     ??_CC2500_RxData:	
  3505                           ; 0 bytes @ 0x6
  3506                           
  3507  0076                     ??_Flash_Memory_Initialization:	
  3508                           ; 0 bytes @ 0x6
  3509                           
  3510  0076                     ??___wmul:	
  3511                           ; 0 bytes @ 0x6
  3512                           
  3513  0076                     ??___awdiv:	
  3514                           ; 0 bytes @ 0x6
  3515                           
  3516  0076                     ??___lwdiv:	
  3517                           ; 0 bytes @ 0x6
  3518                           
  3519  0076                     CC2500_WriteREG@w_addr:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0076                     _getDimmerLights_Allow_Condition$2417:	
  3523                           ; 1 bytes @ 0x6
  3524                           
  3525  0076                     setDimmerLights_DimmingRun@lights:	
  3526                           ; 1 bytes @ 0x6
  3527                           
  3528  0076                     setLED_Initialization@led:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0076                     setLED_Main@led:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0076                     setSw_Initialization@sw:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0076                     getSw_KeyStatus@sw:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0076                     ___ftpack@sign:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0076                     getBuz_GO@i:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0076                     DelayTime_1us@j:	
  3547                           ; 2 bytes @ 0x6
  3548                           
  3549  0076                     ___wmul@product:	
  3550                           ; 2 bytes @ 0x6
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0x6
  3554  0076                     	ds	1
  3555  0077                     ??_CC2500_InitSetREG:	
  3556  0077                     ??_CC2500_InitPATable:	
  3557                           ; 0 bytes @ 0x7
  3558                           
  3559  0077                     ??_Switch_Initialization:	
  3560                           ; 0 bytes @ 0x7
  3561                           
  3562  0077                     ??___ftpack:	
  3563                           ; 0 bytes @ 0x7
  3564                           
  3565  0077                     ??_setBuz:	
  3566                           ; 0 bytes @ 0x7
  3567                           
  3568  0077                     ??_LED_Initialization:	
  3569                           ; 0 bytes @ 0x7
  3570                           
  3571  0077                     ??_LED_Main:	
  3572                           ; 0 bytes @ 0x7
  3573                           
  3574  0077                     CC2500_TxData@loop_e:	
  3575                           ; 0 bytes @ 0x7
  3576                           
  3577  0077                     CC2500_RxData@loop_f:	
  3578                           ; 1 bytes @ 0x7
  3579                           
  3580  0077                     getDimmerLights_Allow_Condition@lights:	
  3581                           ; 1 bytes @ 0x7
  3582                           
  3583  0077                     Flash_Memory_Initialization@value:	
  3584                           ; 1 bytes @ 0x7
  3585                           
  3586  0077                     Flash_Memory_Modify@i:	
  3587                           ; 1 bytes @ 0x7
  3588                           
  3589  0077                     getMain_All_Error_Status@command:	
  3590                           ; 1 bytes @ 0x7
  3591                           
  3592  0077                     getTemp_AD@channel:	
  3593                           ; 1 bytes @ 0x7
  3594                           
  3595  0077                     ___lwdiv@quotient:	
  3596                           ; 1 bytes @ 0x7
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x7
  3600  0077                     	ds	1
  3601  0078                     ??_CC2500_PowerRST:	
  3602  0078                     ??_CC2500_FrequencyCabr:	
  3603                           ; 0 bytes @ 0x8
  3604                           
  3605  0078                     ??_Flash_Memory_Main:	
  3606                           ; 0 bytes @ 0x8
  3607                           
  3608  0078                     setBuz@count:	
  3609                           ; 0 bytes @ 0x8
  3610                           
  3611  0078                     CC2500_InitPATable@temp:	
  3612                           ; 1 bytes @ 0x8
  3613                           
  3614  0078                     getDimmerLights_Allow_Condition@allow:	
  3615                           ; 1 bytes @ 0x8
  3616                           
  3617  0078                     getMain_All_Error_Status@status:	
  3618                           ; 1 bytes @ 0x8
  3619                           
  3620  0078                     getTemp_AD@ADRES:	
  3621                           ; 1 bytes @ 0x8
  3622                           
  3623                           
  3624                           ; 2 bytes @ 0x8
  3625  0078                     	ds	1
  3626  0079                     ??_setDimmerLights_SwOn:	
  3627  0079                     ??_my_MainTimer:	
  3628                           ; 0 bytes @ 0x9
  3629                           
  3630  0079                     ??_Exception_Main:	
  3631                           ; 0 bytes @ 0x9
  3632                           
  3633  0079                     CC2500_InitPATable@loop_d:	
  3634                           ; 0 bytes @ 0x9
  3635                           
  3636  0079                     ___lwdiv@counter:	
  3637                           ; 1 bytes @ 0x9
  3638                           
  3639                           
  3640                           ; 1 bytes @ 0x9
  3641  0079                     	ds	1
  3642  007A                     ??_setDimmerLights_Main:	
  3643  007A                     ??_Temp_Main:	
  3644                           ; 0 bytes @ 0xA
  3645                           
  3646  007A                     ??_Switch_Main:	
  3647                           ; 0 bytes @ 0xA
  3648                           
  3649  007A                     ??_RF_Main:	
  3650                           ; 0 bytes @ 0xA
  3651                           
  3652  007A                     ??_setControl_Lights_Table:	
  3653                           ; 0 bytes @ 0xA
  3654                           
  3655  007A                     ??_CC2500_PowerOnInitial:	
  3656                           ; 0 bytes @ 0xA
  3657                           
  3658  007A                     ??_DelayOff_Main:	
  3659                           ; 0 bytes @ 0xA
  3660                           
  3661  007A                     ??_DimmerLights_Initialization:	
  3662                           ; 0 bytes @ 0xA
  3663                           
  3664  007A                     ??_DimmerLights_Main:	
  3665                           ; 0 bytes @ 0xA
  3666                           
  3667  007A                     ??_main:	
  3668                           ; 0 bytes @ 0xA
  3669                           
  3670  007A                     ??___ftneg:	
  3671                           ; 0 bytes @ 0xA
  3672                           
  3673                           
  3674                           	psect	cstackBANK0
  3675  0020                     __pcstackBANK0:	
  3676                           ; 0 bytes @ 0xA
  3677                           
  3678  0020                     ??_Load_Main:	
  3679  0020                     ?___awtoft:	
  3680                           ; 0 bytes @ 0x0
  3681                           
  3682  0020                     CC2500_InitSetREG@temp1:	
  3683                           ; 3 bytes @ 0x0
  3684                           
  3685  0020                     Flash_Memory_Main@key_Status:	
  3686                           ; 1 bytes @ 0x0
  3687                           
  3688  0020                     getLoad_AD@channel:	
  3689                           ; 1 bytes @ 0x0
  3690                           
  3691  0020                     ___awdiv@counter:	
  3692                           ; 1 bytes @ 0x0
  3693                           
  3694  0020                     ___awtoft@c:	
  3695                           ; 1 bytes @ 0x0
  3696                           
  3697                           
  3698                           ; 2 bytes @ 0x0
  3699  0020                     	ds	1
  3700  0021                     CC2500_InitSetREG@temp2:	
  3701  0021                     _Flash_Memory_Main$3305:	
  3702                           ; 1 bytes @ 0x1
  3703                           
  3704  0021                     getLoad_AD@k:	
  3705                           ; 1 bytes @ 0x1
  3706                           
  3707  0021                     ___awdiv@sign:	
  3708                           ; 1 bytes @ 0x1
  3709                           
  3710                           
  3711                           ; 1 bytes @ 0x1
  3712  0021                     	ds	1
  3713  0022                     CC2500_InitSetREG@loop_c:	
  3714  0022                     getLoad_AD@j:	
  3715                           ; 1 bytes @ 0x2
  3716                           
  3717  0022                     Load_Main@error:	
  3718                           ; 1 bytes @ 0x2
  3719                           
  3720  0022                     ___awdiv@quotient:	
  3721                           ; 1 bytes @ 0x2
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x2
  3725  0022                     	ds	1
  3726  0023                     ??___awtoft:	
  3727  0023                     getLoad_AD@ADRES:	
  3728                           ; 0 bytes @ 0x3
  3729                           
  3730  0023                     _Load_Main$4147:	
  3731                           ; 2 bytes @ 0x3
  3732                           
  3733                           
  3734                           ; 2 bytes @ 0x3
  3735  0023                     	ds	1
  3736  0024                     ?_setBuz:	
  3737  0024                     setBuz@time:	
  3738                           ; 0 bytes @ 0x4
  3739                           
  3740                           
  3741                           ; 2 bytes @ 0x4
  3742  0024                     	ds	1
  3743  0025                     getLoad_AD@i:	
  3744  0025                     Load_Main@ErrorCountValue:	
  3745                           ; 1 bytes @ 0x5
  3746                           
  3747  0025                     ___awtoft@sign:	
  3748                           ; 1 bytes @ 0x5
  3749                           
  3750                           
  3751                           ; 1 bytes @ 0x5
  3752  0025                     	ds	1
  3753  0026                     ?___ftdiv:	
  3754  0026                     ?___ftmul:	
  3755                           ; 3 bytes @ 0x6
  3756                           
  3757  0026                     _setDimmerLights_SwOn$2338:	
  3758                           ; 3 bytes @ 0x6
  3759                           
  3760  0026                     Exception_Main@status:	
  3761                           ; 1 bytes @ 0x6
  3762                           
  3763  0026                     Load_Main@Load_RunStatus:	
  3764                           ; 1 bytes @ 0x6
  3765                           
  3766  0026                     ___ftdiv@f2:	
  3767                           ; 1 bytes @ 0x6
  3768                           
  3769  0026                     ___ftmul@f1:	
  3770                           ; 3 bytes @ 0x6
  3771                           
  3772                           
  3773                           ; 3 bytes @ 0x6
  3774  0026                     	ds	1
  3775  0027                     _setDimmerLights_SwOn$2347:	
  3776  0027                     Exception_Main@count:	
  3777                           ; 1 bytes @ 0x7
  3778                           
  3779  0027                     Load_Main@LightsCount:	
  3780                           ; 1 bytes @ 0x7
  3781                           
  3782                           
  3783                           ; 1 bytes @ 0x7
  3784  0027                     	ds	1
  3785  0028                     setDimmerLights_SwOn@idle:	
  3786  0028                     Exception_Main@error:	
  3787                           ; 1 bytes @ 0x8
  3788                           
  3789  0028                     Load_Main@i:	
  3790                           ; 1 bytes @ 0x8
  3791                           
  3792                           
  3793                           ; 2 bytes @ 0x8
  3794  0028                     	ds	1
  3795  0029                     setDimmerLights_SwOn@sw:	
  3796  0029                     Exception_Main@i:	
  3797                           ; 1 bytes @ 0x9
  3798                           
  3799  0029                     ___ftdiv@f1:	
  3800                           ; 2 bytes @ 0x9
  3801                           
  3802  0029                     ___ftmul@f2:	
  3803                           ; 3 bytes @ 0x9
  3804                           
  3805                           
  3806                           ; 3 bytes @ 0x9
  3807  0029                     	ds	1
  3808  002A                     ??_setSw_Main:	
  3809                           
  3810                           ; 0 bytes @ 0xA
  3811  002A                     	ds	1
  3812  002B                     Exception_Main@i_3781:	
  3813                           
  3814                           ; 2 bytes @ 0xB
  3815  002B                     	ds	1
  3816  002C                     ??___ftdiv:	
  3817  002C                     ??___ftmul:	
  3818                           ; 0 bytes @ 0xC
  3819                           
  3820  002C                     setSw_Main@sw:	
  3821                           ; 0 bytes @ 0xC
  3822                           
  3823                           
  3824                           ; 1 bytes @ 0xC
  3825  002C                     	ds	1
  3826  002D                     Exception_Main@lights:	
  3827                           
  3828                           ; 1 bytes @ 0xD
  3829  002D                     	ds	3
  3830  0030                     ___ftdiv@cntr:	
  3831  0030                     ___ftmul@exp:	
  3832                           ; 1 bytes @ 0x10
  3833                           
  3834                           
  3835                           ; 1 bytes @ 0x10
  3836  0030                     	ds	1
  3837  0031                     ___ftdiv@f3:	
  3838  0031                     ___ftmul@f3_as_product:	
  3839                           ; 3 bytes @ 0x11
  3840                           
  3841                           
  3842                           ; 3 bytes @ 0x11
  3843  0031                     	ds	3
  3844  0034                     ___ftdiv@exp:	
  3845  0034                     ___ftmul@cntr:	
  3846                           ; 1 bytes @ 0x14
  3847                           
  3848                           
  3849                           ; 1 bytes @ 0x14
  3850  0034                     	ds	1
  3851  0035                     ___ftdiv@sign:	
  3852  0035                     ___ftmul@sign:	
  3853                           ; 1 bytes @ 0x15
  3854                           
  3855                           
  3856                           ; 1 bytes @ 0x15
  3857  0035                     	ds	1
  3858  0036                     ?___ftneg:	
  3859  0036                     ___ftneg@f1:	
  3860                           ; 3 bytes @ 0x16
  3861                           
  3862                           
  3863                           ; 3 bytes @ 0x16
  3864  0036                     	ds	3
  3865  0039                     ?___ftadd:	
  3866  0039                     ___ftadd@f1:	
  3867                           ; 3 bytes @ 0x19
  3868                           
  3869                           
  3870                           ; 3 bytes @ 0x19
  3871  0039                     	ds	3
  3872  003C                     ___ftadd@f2:	
  3873                           
  3874                           ; 3 bytes @ 0x1C
  3875  003C                     	ds	3
  3876  003F                     ??___ftadd:	
  3877                           
  3878                           ; 0 bytes @ 0x1F
  3879  003F                     	ds	4
  3880  0043                     ___ftadd@sign:	
  3881                           
  3882                           ; 1 bytes @ 0x23
  3883  0043                     	ds	1
  3884  0044                     ___ftadd@exp2:	
  3885                           
  3886                           ; 1 bytes @ 0x24
  3887  0044                     	ds	1
  3888  0045                     ___ftadd@exp1:	
  3889                           
  3890                           ; 1 bytes @ 0x25
  3891  0045                     	ds	1
  3892  0046                     ?___fttol:	
  3893  0046                     ___fttol@f1:	
  3894                           ; 4 bytes @ 0x26
  3895                           
  3896                           
  3897                           ; 3 bytes @ 0x26
  3898  0046                     	ds	4
  3899  004A                     ??___fttol:	
  3900                           
  3901                           ; 0 bytes @ 0x2A
  3902  004A                     	ds	4
  3903  004E                     ___fttol@sign1:	
  3904                           
  3905                           ; 1 bytes @ 0x2E
  3906  004E                     	ds	1
  3907  004F                     ___fttol@lval:	
  3908                           
  3909                           ; 4 bytes @ 0x2F
  3910  004F                     	ds	4
  3911  0053                     ___fttol@exp1:	
  3912                           
  3913                           ; 1 bytes @ 0x33
  3914  0053                     	ds	1
  3915  0054                     ??_getDimmerLights_ValueToPercent:	
  3916  0054                     ??_getDimmerLights_PercentToValue:	
  3917                           ; 0 bytes @ 0x34
  3918                           
  3919                           
  3920                           ; 0 bytes @ 0x34
  3921  0054                     	ds	2
  3922  0056                     getDimmerLights_PercentToValue@value:	
  3923  0056                     getDimmerLights_ValueToPercent@value:	
  3924                           ; 1 bytes @ 0x36
  3925                           
  3926                           
  3927                           ; 1 bytes @ 0x36
  3928  0056                     	ds	1
  3929  0057                     getDimmerLights_PercentToValue@i:	
  3930  0057                     getDimmerLights_ValueToPercent@i:	
  3931                           ; 3 bytes @ 0x37
  3932                           
  3933                           
  3934                           ; 3 bytes @ 0x37
  3935  0057                     	ds	3
  3936  005A                     ?_setProductData:	
  3937  005A                     ??_DimmerIntr_Initialization:	
  3938                           ; 0 bytes @ 0x3A
  3939                           
  3940  005A                     ?_setDimmerIntr_DimmingValue:	
  3941                           ; 0 bytes @ 0x3A
  3942                           
  3943  005A                     ?_setDimmerIntr_MaxmumValue:	
  3944                           ; 0 bytes @ 0x3A
  3945                           
  3946  005A                     setDimmerIntr_DimmingValue@value:	
  3947                           ; 0 bytes @ 0x3A
  3948                           
  3949  005A                     setDimmerIntr_MaxmumValue@value:	
  3950                           ; 1 bytes @ 0x3A
  3951                           
  3952  005A                     setProductData@value:	
  3953                           ; 1 bytes @ 0x3A
  3954                           
  3955                           
  3956                           ; 1 bytes @ 0x3A
  3957  005A                     	ds	1
  3958  005B                     ??_setProductData:	
  3959  005B                     ??_setDimmerIntr_DimmingValue:	
  3960                           ; 0 bytes @ 0x3B
  3961                           
  3962  005B                     ??_setDimmerIntr_MaxmumValue:	
  3963                           ; 0 bytes @ 0x3B
  3964                           
  3965                           
  3966                           ; 0 bytes @ 0x3B
  3967  005B                     	ds	1
  3968  005C                     setDimmerIntr_DimmingValue@lights:	
  3969  005C                     setDimmerIntr_MaxmumValue@lights:	
  3970                           ; 1 bytes @ 0x3C
  3971                           
  3972  005C                     setProductData@address:	
  3973                           ; 1 bytes @ 0x3C
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x3C
  3977  005C                     	ds	1
  3978  005D                     ??_DlyOff_Main:	
  3979  005D                     ?_setRF_DimmerLights:	
  3980                           ; 0 bytes @ 0x3D
  3981                           
  3982  005D                     ??_setTemp_Main:	
  3983                           ; 0 bytes @ 0x3D
  3984                           
  3985  005D                     ??_setLog_Code:	
  3986                           ; 0 bytes @ 0x3D
  3987                           
  3988  005D                     ??_setRFSW_AdjControl:	
  3989                           ; 0 bytes @ 0x3D
  3990                           
  3991  005D                     ?_setDelayOff_GO:	
  3992                           ; 0 bytes @ 0x3D
  3993                           
  3994  005D                     setDelayOff_GO@command:	
  3995                           ; 0 bytes @ 0x3D
  3996                           
  3997  005D                     setRF_DimmerLights@on:	
  3998                           ; 1 bytes @ 0x3D
  3999                           
  4000                           
  4001                           ; 1 bytes @ 0x3D
  4002  005D                     	ds	1
  4003  005E                     ??_setRF_DimmerLights:	
  4004  005E                     setDelayOff_GO@value:	
  4005                           ; 0 bytes @ 0x3E
  4006                           
  4007  005E                     setTemp_Main@error:	
  4008                           ; 1 bytes @ 0x3E
  4009                           
  4010                           
  4011                           ; 1 bytes @ 0x3E
  4012  005E                     	ds	1
  4013  005F                     ??_setDelayOff_GO:	
  4014  005F                     DlyOff_Main@sw:	
  4015                           ; 0 bytes @ 0x3F
  4016                           
  4017  005F                     setTemp_Main@TempGO:	
  4018                           ; 1 bytes @ 0x3F
  4019                           
  4020  005F                     setRFSW_AdjControl@status:	
  4021                           ; 1 bytes @ 0x3F
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x3F
  4025  005F                     	ds	1
  4026  0060                     setRFSW_AdjControl@sw:	
  4027  0060                     setRF_DimmerLights@status:	
  4028                           ; 1 bytes @ 0x40
  4029                           
  4030  0060                     setTemp_Main@SafeValue:	
  4031                           ; 1 bytes @ 0x40
  4032                           
  4033                           
  4034                           ; 2 bytes @ 0x40
  4035  0060                     	ds	1
  4036  0061                     setDelayOff_GO@i:	
  4037  0061                     setRF_DimmerLights@lights:	
  4038                           ; 1 bytes @ 0x41
  4039                           
  4040                           
  4041                           ; 1 bytes @ 0x41
  4042  0061                     	ds	1
  4043  0062                     ?_setDimmerLights_Dimming:	
  4044  0062                     setDelayOff_GO@j:	
  4045                           ; 0 bytes @ 0x42
  4046                           
  4047  0062                     setDimmerLights_Dimming@status:	
  4048                           ; 1 bytes @ 0x42
  4049                           
  4050  0062                     setTemp_Main@DangerValue:	
  4051                           ; 1 bytes @ 0x42
  4052                           
  4053                           
  4054                           ; 2 bytes @ 0x42
  4055  0062                     	ds	1
  4056  0063                     ??_setDimmerLights_Dimming:	
  4057  0063                     setDelayOff_GO@k:	
  4058                           ; 0 bytes @ 0x43
  4059                           
  4060                           
  4061                           ; 1 bytes @ 0x43
  4062  0063                     	ds	1
  4063  0064                     setDelayOff_GO@sw:	
  4064  0064                     setDimmerLights_Dimming@value:	
  4065                           ; 1 bytes @ 0x44
  4066                           
  4067  0064                     setTemp_Main@AD:	
  4068                           ; 1 bytes @ 0x44
  4069                           
  4070                           
  4071                           ; 2 bytes @ 0x44
  4072  0064                     	ds	1
  4073  0065                     ?_setDimmerLights_OnOff:	
  4074  0065                     ??_setRFSW_Control:	
  4075                           ; 0 bytes @ 0x45
  4076                           
  4077  0065                     setDimmerLights_OnOff@command:	
  4078                           ; 0 bytes @ 0x45
  4079                           
  4080  0065                     setDimmerLights_Dimming@lights:	
  4081                           ; 1 bytes @ 0x45
  4082                           
  4083                           
  4084                           ; 1 bytes @ 0x45
  4085  0065                     	ds	1
  4086  0066                     ??_setDimmerLights_OnOff:	
  4087  0066                     setRFSW_Control@status:	
  4088                           ; 0 bytes @ 0x46
  4089                           
  4090                           
  4091                           ; 1 bytes @ 0x46
  4092  0066                     	ds	1
  4093  0067                     setRFSW_Control@sw:	
  4094                           
  4095                           ; 1 bytes @ 0x47
  4096  0067                     	ds	1
  4097  0068                     ??_getRxData:	
  4098  0068                     setDimmerLights_OnOff@lights:	
  4099                           ; 0 bytes @ 0x48
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x48
  4103  0068                     	ds	1
  4104  0069                     setDimmerLights_Main@lights:	
  4105  0069                     getRxData@error:	
  4106                           ; 1 bytes @ 0x49
  4107                           
  4108                           
  4109                           ; 1 bytes @ 0x49
  4110  0069                     	ds	1
  4111  006A                     ??_setRF_Main:	
  4112                           
  4113                           ; 0 bytes @ 0x4A
  4114  006A                     	ds	1
  4115  006B                     setRF_Main@error:	
  4116                           
  4117                           ; 1 bytes @ 0x4B
  4118  006B                     	ds	1
  4119                           
  4120                           	psect	maintext
  4121  1502                     __pmaintext:	
  4122 ;;
  4123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4124 ;;
  4125 ;; *************** function _main *****************
  4126 ;; Defined at:
  4127 ;;		line 7 in file "../src/Main_B1.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  argc            2    0[BANK3 ] int 
  4130 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;		None
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  2    0[BANK3 ] int 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 17F/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4142 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4146 ;;Total ram usage:        4 bytes
  4147 ;; Hardware stack levels required when called:   11
  4148 ;; This function calls:
  4149 ;;		_Buzzer_Initialization
  4150 ;;		_Buzzer_Main
  4151 ;;		_CC2500_PowerOnInitial
  4152 ;;		_DelayOff_Initialization
  4153 ;;		_DelayOff_Main
  4154 ;;		_DimmerLights_Initialization
  4155 ;;		_DimmerLights_Main
  4156 ;;		_Exception_Main
  4157 ;;		_Flash_Memory_Initialization
  4158 ;;		_Flash_Memory_Main
  4159 ;;		_LED_Initialization
  4160 ;;		_LED_Main
  4161 ;;		_Load_Initialization
  4162 ;;		_Load_Main
  4163 ;;		_Mcu_Initialization
  4164 ;;		_RF_Initialization
  4165 ;;		_RF_Main
  4166 ;;		_Switch_Initialization
  4167 ;;		_Switch_Main
  4168 ;;		_Temp_Initialization
  4169 ;;		_Temp_Main
  4170 ;;		_WDT_Main
  4171 ;;		_getLoad_AD
  4172 ;;		_getTemp_AD
  4173 ;;		_myMain_Initialization
  4174 ;;		_my_MainTimer
  4175 ;; This function is called by:
  4176 ;;		Startup code after reset
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           
  4181                           ;psect for function _main
  4182  1502                     _main:	
  4183                           
  4184                           ;Main_B1.c: 8: myMain_Initialization();
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4188  1502  319B  23B2  3195   	fcall	_myMain_Initialization
  4189                           
  4190                           ;Main_B1.c: 9: Mcu_Initialization();
  4191  1505  319C  2475  3195   	fcall	_Mcu_Initialization
  4192                           
  4193                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4194  1508  3186  26AF  3195   	fcall	_Flash_Memory_Initialization
  4195                           
  4196                           ;Main_B1.c: 11: LED_Initialization();
  4197  150B  319B  2343  3195   	fcall	_LED_Initialization
  4198                           
  4199                           ;Main_B1.c: 12: Buzzer_Initialization();
  4200  150E  319A  2251  3195   	fcall	_Buzzer_Initialization
  4201                           
  4202                           ;Main_B1.c: 14: ;;
  4203                           ;Main_B1.c: 15: Temp_Initialization();
  4204  1511  319A  225D  3195   	fcall	_Temp_Initialization
  4205                           
  4206                           ;Main_B1.c: 16: Load_Initialization();
  4207  1514  319A  2254  3195   	fcall	_Load_Initialization
  4208                           
  4209                           ;Main_B1.c: 17: ;;
  4210                           ;Main_B1.c: 18: DelayOff_Initialization();
  4211  1517  319A  22AC  3195   	fcall	_DelayOff_Initialization
  4212                           
  4213                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4214  151A  319A  22F3  3195   	fcall	_DimmerLights_Initialization
  4215                           
  4216                           ;Main_B1.c: 21: ;;
  4217                           ;Main_B1.c: 22: ;;
  4218                           ;Main_B1.c: 23: ;;
  4219                           ;Main_B1.c: 24: Switch_Initialization();
  4220  151D  319A  22BC  3195   	fcall	_Switch_Initialization
  4221                           
  4222                           ;Main_B1.c: 25: RF_Initialization();
  4223  1520  319A  2257  3195   	fcall	_RF_Initialization
  4224                           
  4225                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4226  1523  319D  2501  3195   	fcall	_CC2500_PowerOnInitial
  4227  1526                     l10436:	
  4228                           ;Main_B1.c: 27: ;;
  4229                           ;Main_B1.c: 28: ;;
  4230                           ;Main_B1.c: 30: while (1) {
  4231                           
  4232                           
  4233                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4234  1526  0021               	movlb	1	; select bank1
  4235  1527  1C2E               	btfss	_myMain^(0+128),0
  4236  1528  2D31               	goto	l10440
  4237                           
  4238                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4239  1529  3005               	movlw	5
  4240  152A  318A  2249  3195   	fcall	_getLoad_AD
  4241                           
  4242                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4243  152D  3009               	movlw	9
  4244  152E  3191  21BF  3195   	fcall	_getTemp_AD
  4245  1531                     l10440:	
  4246                           
  4247                           ;Main_B1.c: 57: }
  4248                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4249  1531  0021               	movlb	1	; select bank1
  4250  1532  1C53               	btfss	_Timer1^(0+128),0
  4251  1533  2D26               	goto	l10436
  4252                           
  4253                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4254  1534  1053               	bcf	_Timer1^(0+128),0
  4255                           
  4256                           ;Main_B1.c: 96: my_MainTimer();
  4257  1535  3188  2004  3195   	fcall	_my_MainTimer
  4258                           
  4259                           ;Main_B1.c: 97: WDT_Main();
  4260  1538  319C  2421  3195   	fcall	_WDT_Main
  4261                           
  4262                           ;Main_B1.c: 98: ;;
  4263                           ;Main_B1.c: 99: ;;
  4264                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4265  153B  0021               	movlb	1	; select bank1
  4266  153C  1C2E               	btfss	_myMain^(0+128),0
  4267  153D  2D26               	goto	l10436
  4268                           
  4269                           ;Main_B1.c: 101: Flash_Memory_Main();
  4270  153E  3192  22A1  3195   	fcall	_Flash_Memory_Main
  4271                           
  4272                           ;Main_B1.c: 103: LED_Main();
  4273  1541  319B  234F  3195   	fcall	_LED_Main
  4274                           
  4275                           ;Main_B1.c: 104: Buzzer_Main();
  4276  1544  3193  2367  3195   	fcall	_Buzzer_Main
  4277                           
  4278                           ;Main_B1.c: 106: ;;
  4279                           ;Main_B1.c: 107: Temp_Main();
  4280  1547  319A  2260  3195   	fcall	_Temp_Main
  4281                           
  4282                           ;Main_B1.c: 108: Load_Main();
  4283  154A  3180  2053  3195   	fcall	_Load_Main
  4284                           
  4285                           ;Main_B1.c: 109: ;;
  4286                           ;Main_B1.c: 111: ;;
  4287                           ;Main_B1.c: 112: DimmerLights_Main();
  4288  154D  319E  2688  3195   	fcall	_DimmerLights_Main
  4289                           
  4290                           ;Main_B1.c: 113: Switch_Main();
  4291  1550  319B  2314  3195   	fcall	_Switch_Main
  4292                           
  4293                           ;Main_B1.c: 114: ;;
  4294                           ;Main_B1.c: 115: ;;
  4295                           ;Main_B1.c: 117: RF_Main();
  4296  1553  319A  225A  3195   	fcall	_RF_Main
  4297                           
  4298                           ;Main_B1.c: 118: DelayOff_Main();
  4299  1556  319A  22B4  3195   	fcall	_DelayOff_Main
  4300                           
  4301                           ;Main_B1.c: 119: ;;
  4302                           ;Main_B1.c: 120: ;;
  4303                           ;Main_B1.c: 121: Exception_Main();
  4304  1559  3184  245A  3195   	fcall	_Exception_Main
  4305  155C  2D26               	goto	l10436
  4306  155D                     __end_of_main:	
  4307                           ;Main_B1.c: 128: }
  4308                           ;Main_B1.c: 129: }
  4309                           ;Main_B1.c: 163: }
  4310                           ;Main_B1.c: 164: return (0);
  4311                           ;	Return value of _main is never used
  4312                           
  4313                           
  4314                           	psect	text1
  4315  0804                     __ptext1:	
  4316 ;; *************** function _my_MainTimer *****************
  4317 ;; Defined at:
  4318 ;;		line 185 in file "../src/Main_B1.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;		None
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;		None
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;Total ram usage:        1 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    5
  4339 ;; This function calls:
  4340 ;;		_setBuz
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           
  4347                           ;psect for function _my_MainTimer
  4348  0804                     _my_MainTimer:	
  4349                           
  4350                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4354  0804  0021               	movlb	1	; select bank1
  4355  0805  182E               	btfsc	_myMain^(0+128),0
  4356  0806  281C               	goto	l10152
  4357                           
  4358                           ;Main_B1.c: 188: myMain.PowerCount++;
  4359  0807  3001               	movlw	1
  4360  0808  00F9               	movwf	??_my_MainTimer
  4361  0809  0879               	movf	??_my_MainTimer,w
  4362  080A  07AF               	addwf	(_myMain^(0+128)+1),f
  4363                           
  4364                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4365  080B  082F               	movf	(_myMain^(0+128)+1),w
  4366  080C  3A4B               	xorlw	75
  4367  080D  1D03               	skipz
  4368  080E  0008               	return
  4369                           
  4370                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4371  080F  01AF               	clrf	(_myMain^(0+128)+1)
  4372                           
  4373                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4374  0810  142E               	bsf	_myMain^(0+128),0
  4375                           
  4376                           ;Main_B1.c: 196: setBuz(3, 50);
  4377  0811  3032               	movlw	50
  4378  0812  0020               	movlb	0	; select bank0
  4379  0813  00A4               	movwf	setBuz@time
  4380  0814  3000               	movlw	0
  4381  0815  00A5               	movwf	setBuz@time+1
  4382  0816  3003               	movlw	3
  4383  0817  3193  23AD         	fcall	_setBuz
  4384                           
  4385                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4386  0819  0021               	movlb	1	; select bank1
  4387  081A  162E               	bsf	_myMain^(0+128),4
  4388                           
  4389                           ;Main_B1.c: 206: }
  4390                           ;Main_B1.c: 207: } else {
  4391  081B  0008               	return
  4392  081C                     l10152:	
  4393                           
  4394                           ;Main_B1.c: 208: myMain.PowerCount++;
  4395  081C  3001               	movlw	1
  4396  081D  00F9               	movwf	??_my_MainTimer
  4397  081E  0879               	movf	??_my_MainTimer,w
  4398  081F  07AF               	addwf	(_myMain^(0+128)+1),f
  4399                           
  4400                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4401  0820  082F               	movf	(_myMain^(0+128)+1),w
  4402  0821  3A32               	xorlw	50
  4403  0822  1903               	btfsc	3,2
  4404                           
  4405                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4406  0823  01AF               	clrf	(_myMain^(0+128)+1)
  4407                           
  4408                           ;Main_B1.c: 226: }
  4409                           ;Main_B1.c: 228: myMain.Count1++;
  4410  0824  3001               	movlw	1
  4411  0825  07B2               	addwf	(_myMain^(0+128)+4),f
  4412  0826  3000               	movlw	0
  4413  0827  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4414                           
  4415                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4416  0828  3004               	movlw	4
  4417  0829  3EAE               	addlw	_myMain& (0+255)
  4418  082A  0086               	movwf	6
  4419  082B  0187               	clrf	7
  4420  082C  3F40               	moviw [0]fsr1
  4421  082D  3A32               	xorlw	50
  4422  082E  1D03               	skipz
  4423  082F  2832               	goto	u11575
  4424  0830  3F41               	moviw [1]fsr1
  4425  0831  3A00               	xorlw	0
  4426  0832                     u11575:	
  4427  0832  1D03               	skipz
  4428  0833  0008               	return
  4429                           
  4430                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4431  0834  01B2               	clrf	(_myMain^(0+128)+4)
  4432  0835  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4433                           
  4434                           ;Main_B1.c: 242: if (myMain.Flag) {
  4435  0836  1CAE               	btfss	_myMain^(0+128),1
  4436  0837  283A               	goto	l1633
  4437                           
  4438                           ;Main_B1.c: 243: myMain.Flag = 0;
  4439  0838  10AE               	bcf	_myMain^(0+128),1
  4440                           
  4441                           ;Main_B1.c: 252: } else {
  4442  0839  0008               	return
  4443  083A                     l1633:	
  4444                           
  4445                           ;Main_B1.c: 253: myMain.Flag = 1;
  4446  083A  14AE               	bsf	_myMain^(0+128),1
  4447  083B  0008               	return
  4448  083C                     __end_of_my_MainTimer:	
  4449                           
  4450                           	psect	text2
  4451  1BB2                     __ptext2:	
  4452 ;; *************** function _myMain_Initialization *****************
  4453 ;; Defined at:
  4454 ;;		line 170 in file "../src/Main_B1.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, fsr1l, fsr1h
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:        1 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    3
  4475 ;; This function calls:
  4476 ;;		Nothing
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _myMain_Initialization
  4484  1BB2                     _myMain_Initialization:	
  4485                           
  4486                           ;Main_B1.c: 173: product = &_product;
  4487                           
  4488                           ;incstack = 0
  4489                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4490  1BB2  3045               	movlw	__product& (0+255)
  4491  1BB3  00F2               	movwf	??_myMain_Initialization
  4492  1BB4  0872               	movf	??_myMain_Initialization,w
  4493  1BB5  0020               	movlb	0	; select bank0
  4494  1BB6  00EC               	movwf	_product
  4495                           
  4496                           ;Main_B1.c: 174: product->Data[20] = 210;
  4497  1BB7  30D2               	movlw	210
  4498  1BB8  00F2               	movwf	??_myMain_Initialization
  4499  1BB9  086C               	movf	_product,w
  4500  1BBA  3E14               	addlw	20
  4501  1BBB  0086               	movwf	6
  4502  1BBC  3002               	movlw	2	; select bank4/5
  4503  1BBD  0087               	movwf	7
  4504  1BBE  0872               	movf	??_myMain_Initialization,w
  4505  1BBF  0081               	movwf	1
  4506  1BC0  0008               	return
  4507  1BC1                     __end_of_myMain_Initialization:	
  4508                           
  4509                           	psect	text3
  4510  11BF                     __ptext3:	
  4511 ;; *************** function _getTemp_AD *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  channel         1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  channel         1    7[COMMON] unsigned char 
  4518 ;;  ADRES           2    8[COMMON] unsigned int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;		None               void
  4521 ;; Registers used:
  4522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;Total ram usage:        4 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    5
  4535 ;; This function calls:
  4536 ;;		_getAD
  4537 ;; This function is called by:
  4538 ;;		_main
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           
  4543                           ;psect for function _getTemp_AD
  4544  11BF                     _getTemp_AD:	
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4548                           ;getTemp_AD@channel stored from wreg
  4549  11BF  00F7               	movwf	getTemp_AD@channel
  4550                           
  4551                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4552  11C0  01F8               	clrf	getTemp_AD@ADRES
  4553  11C1  01F9               	clrf	getTemp_AD@ADRES+1
  4554                           
  4555                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4556  11C2  0021               	movlb	1	; select bank1
  4557  11C3  1D66               	btfss	_Temp^(0+128),2
  4558  11C4  29E6               	goto	l8550
  4559                           
  4560                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4561  11C5  30F0               	movlw	240
  4562  11C6  00F6               	movwf	??_getTemp_AD
  4563  11C7  0876               	movf	??_getTemp_AD,w
  4564  11C8  00F2               	movwf	getAD@adcon1
  4565  11C9  0877               	movf	getTemp_AD@channel,w
  4566  11CA  319D  25FC  3191   	fcall	_getAD
  4567  11CD  0873               	movf	?_getAD+1,w
  4568  11CE  01F9               	clrf	getTemp_AD@ADRES+1
  4569  11CF  07F9               	addwf	getTemp_AD@ADRES+1,f
  4570  11D0  0872               	movf	?_getAD,w
  4571  11D1  01F8               	clrf	getTemp_AD@ADRES
  4572  11D2  07F8               	addwf	getTemp_AD@ADRES,f
  4573                           
  4574                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4575  11D3  0879               	movf	getTemp_AD@ADRES+1,w
  4576  11D4  0478               	iorwf	getTemp_AD@ADRES,w
  4577  11D5  1903               	skipnz
  4578  11D6  29E6               	goto	l8550
  4579                           
  4580                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4581  11D7  0879               	movf	getTemp_AD@ADRES+1,w
  4582  11D8  0021               	movlb	1	; select bank1
  4583  11D9  026F               	subwf	((_Temp+1)^(0+128)+8),w
  4584  11DA  1D03               	skipz
  4585  11DB  29DE               	goto	u9045
  4586  11DC  0878               	movf	getTemp_AD@ADRES,w
  4587  11DD  026E               	subwf	(_Temp^(0+128)+8),w
  4588  11DE                     u9045:	
  4589  11DE  1803               	skipnc
  4590  11DF  29E6               	goto	l8550
  4591                           
  4592                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4593  11E0  0879               	movf	getTemp_AD@ADRES+1,w
  4594  11E1  01EF               	clrf	((_Temp+1)^(0+128)+8)
  4595  11E2  07EF               	addwf	((_Temp+1)^(0+128)+8),f
  4596  11E3  0878               	movf	getTemp_AD@ADRES,w
  4597  11E4  01EE               	clrf	(_Temp^(0+128)+8)
  4598  11E5  07EE               	addwf	(_Temp^(0+128)+8),f
  4599  11E6                     l8550:	
  4600                           
  4601                           ;OverTemperature_B1.c: 32: }
  4602                           ;OverTemperature_B1.c: 33: }
  4603                           ;OverTemperature_B1.c: 34: }
  4604                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4605  11E6  30F0               	movlw	240
  4606  11E7  00F6               	movwf	??_getTemp_AD
  4607  11E8  0876               	movf	??_getTemp_AD,w
  4608  11E9  00F2               	movwf	getAD@adcon1
  4609  11EA  0877               	movf	getTemp_AD@channel,w
  4610  11EB  319D  25FC         	fcall	_getAD
  4611  11ED  0873               	movf	?_getAD+1,w
  4612  11EE  01F9               	clrf	getTemp_AD@ADRES+1
  4613  11EF  07F9               	addwf	getTemp_AD@ADRES+1,f
  4614  11F0  0872               	movf	?_getAD,w
  4615  11F1  01F8               	clrf	getTemp_AD@ADRES
  4616  11F2  07F8               	addwf	getTemp_AD@ADRES,f
  4617  11F3  0008               	return
  4618  11F4                     __end_of_getTemp_AD:	
  4619                           
  4620                           	psect	text4
  4621  0A49                     __ptext4:	
  4622 ;; *************** function _getLoad_AD *****************
  4623 ;; Defined at:
  4624 ;;		line 15 in file "../src/OverLoad_B1.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  channel         1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  channel         1    0[BANK0 ] unsigned char 
  4629 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4630 ;;  i               1    5[BANK0 ] unsigned char 
  4631 ;;  j               1    2[BANK0 ] unsigned char 
  4632 ;;  k               1    1[BANK0 ] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;		None               void
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;Total ram usage:        8 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    5
  4649 ;; This function calls:
  4650 ;;		_getAD
  4651 ;; This function is called by:
  4652 ;;		_main
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _getLoad_AD
  4658  0A49                     _getLoad_AD:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4662                           ;getLoad_AD@channel stored from wreg
  4663  0A49  0020               	movlb	0	; select bank0
  4664  0A4A  00A0               	movwf	getLoad_AD@channel
  4665                           
  4666                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4667  0A4B  01A5               	clrf	getLoad_AD@i
  4668  0A4C  01A2               	clrf	getLoad_AD@j
  4669  0A4D  01A1               	clrf	getLoad_AD@k
  4670                           
  4671                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4672  0A4E  01A3               	clrf	getLoad_AD@ADRES
  4673  0A4F  01A4               	clrf	getLoad_AD@ADRES+1
  4674                           
  4675                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4676  0A50  0022               	movlb	2	; select bank2
  4677  0A51  1E33               	btfss	_Load^(0+256),4
  4678  0A52  0008               	return
  4679                           
  4680                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4681  0A53  30F3               	movlw	243
  4682  0A54  00F6               	movwf	??_getLoad_AD
  4683  0A55  0876               	movf	??_getLoad_AD,w
  4684  0A56  00F2               	movwf	getAD@adcon1
  4685  0A57  0020               	movlb	0	; select bank0
  4686  0A58  0820               	movf	getLoad_AD@channel,w
  4687  0A59  319D  25FC  318A   	fcall	_getAD
  4688  0A5C  0873               	movf	?_getAD+1,w
  4689  0A5D  0020               	movlb	0	; select bank0
  4690  0A5E  01A4               	clrf	getLoad_AD@ADRES+1
  4691  0A5F  07A4               	addwf	getLoad_AD@ADRES+1,f
  4692  0A60  0872               	movf	?_getAD,w
  4693  0A61  01A3               	clrf	getLoad_AD@ADRES
  4694  0A62  07A3               	addwf	getLoad_AD@ADRES,f
  4695                           
  4696                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4697  0A63  01A5               	clrf	getLoad_AD@i
  4698  0A64  3004               	movlw	4
  4699  0A65  0225               	subwf	getLoad_AD@i,w
  4700  0A66  1803               	btfsc	3,0
  4701  0A67  2A8F               	goto	l8518
  4702  0A68                     l8506:	
  4703                           
  4704                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4705  0A68  3525               	lslf	getLoad_AD@i,w
  4706  0A69  3E3E               	addlw	(_Load+11)& (0+255)
  4707  0A6A  0086               	movwf	6
  4708  0A6B  3001               	movlw	1	; select bank2/3
  4709  0A6C  0087               	movwf	7
  4710  0A6D  3F40               	moviw [0]fsr1
  4711  0A6E  00F6               	movwf	??_getLoad_AD
  4712  0A6F  3F41               	moviw [1]fsr1
  4713  0A70  00F7               	movwf	??_getLoad_AD+1
  4714  0A71  0824               	movf	getLoad_AD@ADRES+1,w
  4715  0A72  0277               	subwf	??_getLoad_AD+1,w
  4716  0A73  1D03               	skipz
  4717  0A74  2A77               	goto	u8945
  4718  0A75  0823               	movf	getLoad_AD@ADRES,w
  4719  0A76  0276               	subwf	??_getLoad_AD,w
  4720  0A77                     u8945:	
  4721  0A77  1803               	skipnc
  4722  0A78  2A87               	goto	l8514
  4723  0A79  08A2               	movf	getLoad_AD@j,f
  4724  0A7A  1D03               	skipz
  4725  0A7B  2A87               	goto	l8514
  4726                           
  4727                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4728  0A7C  3525               	lslf	getLoad_AD@i,w
  4729  0A7D  3E3E               	addlw	(_Load+11)& (0+255)
  4730  0A7E  0086               	movwf	6
  4731  0A7F  3001               	movlw	1	; select bank2/3
  4732  0A80  0087               	movwf	7
  4733  0A81  0823               	movf	getLoad_AD@ADRES,w
  4734  0A82  3FC0               	movwi [0]fsr1
  4735  0A83  0824               	movf	getLoad_AD@ADRES+1,w
  4736  0A84  3FC1               	movwi [1]fsr1
  4737                           
  4738                           ;OverLoad_B1.c: 24: j = 1;
  4739  0A85  01A2               	clrf	getLoad_AD@j
  4740  0A86  0AA2               	incf	getLoad_AD@j,f
  4741  0A87                     l8514:	
  4742  0A87  3001               	movlw	1
  4743  0A88  00F6               	movwf	??_getLoad_AD
  4744  0A89  0876               	movf	??_getLoad_AD,w
  4745  0A8A  07A5               	addwf	getLoad_AD@i,f
  4746  0A8B  3004               	movlw	4
  4747  0A8C  0225               	subwf	getLoad_AD@i,w
  4748  0A8D  1C03               	skipc
  4749  0A8E  2A68               	goto	l8506
  4750  0A8F                     l8518:	
  4751                           
  4752                           ;OverLoad_B1.c: 25: }
  4753                           ;OverLoad_B1.c: 26: }
  4754                           ;OverLoad_B1.c: 27: if (j == 0) {
  4755  0A8F  08A2               	movf	getLoad_AD@j,f
  4756  0A90  1D03               	skipz
  4757  0A91  0008               	return
  4758                           
  4759                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4760  0A92  01A5               	clrf	getLoad_AD@i
  4761  0A93                     L1:	
  4762  0A93  3004               	movlw	4
  4763  0A94  0225               	subwf	getLoad_AD@i,w
  4764  0A95  1803               	btfsc	3,0
  4765  0A96  0008               	return
  4766                           
  4767                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4768  0A97  3525               	lslf	getLoad_AD@i,w
  4769  0A98  3E48               	addlw	(_Load+21)& (0+255)
  4770  0A99  0086               	movwf	6
  4771  0A9A  3001               	movlw	1	; select bank2/3
  4772  0A9B  0087               	movwf	7
  4773  0A9C  3F40               	moviw [0]fsr1
  4774  0A9D  00F6               	movwf	??_getLoad_AD
  4775  0A9E  3F41               	moviw [1]fsr1
  4776  0A9F  00F7               	movwf	??_getLoad_AD+1
  4777  0AA0  0877               	movf	??_getLoad_AD+1,w
  4778  0AA1  0224               	subwf	getLoad_AD@ADRES+1,w
  4779  0AA2  1D03               	skipz
  4780  0AA3  2AA6               	goto	u8995
  4781  0AA4  0876               	movf	??_getLoad_AD,w
  4782  0AA5  0223               	subwf	getLoad_AD@ADRES,w
  4783  0AA6                     u8995:	
  4784  0AA6  1803               	skipnc
  4785  0AA7  2AB6               	goto	l8534
  4786  0AA8  08A1               	movf	getLoad_AD@k,f
  4787  0AA9  1D03               	skipz
  4788  0AAA  2AB6               	goto	l8534
  4789                           
  4790                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4791  0AAB  3525               	lslf	getLoad_AD@i,w
  4792  0AAC  3E48               	addlw	(_Load+21)& (0+255)
  4793  0AAD  0086               	movwf	6
  4794  0AAE  3001               	movlw	1	; select bank2/3
  4795  0AAF  0087               	movwf	7
  4796  0AB0  0823               	movf	getLoad_AD@ADRES,w
  4797  0AB1  3FC0               	movwi [0]fsr1
  4798  0AB2  0824               	movf	getLoad_AD@ADRES+1,w
  4799  0AB3  3FC1               	movwi [1]fsr1
  4800                           
  4801                           ;OverLoad_B1.c: 31: k = 1;
  4802  0AB4  01A1               	clrf	getLoad_AD@k
  4803  0AB5  0AA1               	incf	getLoad_AD@k,f
  4804  0AB6                     l8534:	
  4805  0AB6  3001               	movlw	1
  4806  0AB7  00F6               	movwf	??_getLoad_AD
  4807  0AB8  0876               	movf	??_getLoad_AD,w
  4808  0AB9  07A5               	addwf	getLoad_AD@i,f
  4809  0ABA  2A93               	goto	L1
  4810  0ABB                     __end_of_getLoad_AD:	
  4811                           
  4812                           	psect	text5
  4813  1DFC                     __ptext5:	
  4814 ;; *************** function _getAD *****************
  4815 ;; Defined at:
  4816 ;;		line 461 in file "../src/MCU_B1.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  adcon0          1    wreg     unsigned char 
  4819 ;;  adcon1          1    2[COMMON] unsigned char 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  adcon0          1    5[COMMON] unsigned char 
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  2    2[COMMON] int 
  4824 ;; Registers used:
  4825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;Total ram usage:        4 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    4
  4838 ;; This function calls:
  4839 ;;		_Timeout_Counter
  4840 ;;		_set_TimeoutCleared
  4841 ;; This function is called by:
  4842 ;;		_getLoad_AD
  4843 ;;		_getTemp_AD
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           
  4848                           ;psect for function _getAD
  4849  1DFC                     _getAD:	
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4853                           ;getAD@adcon0 stored from wreg
  4854  1DFC  00F5               	movwf	getAD@adcon0
  4855                           
  4856                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4857  1DFD  0875               	movf	getAD@adcon0,w
  4858  1DFE  0021               	movlb	1	; select bank1
  4859  1DFF  009D               	movwf	29	;volatile
  4860                           
  4861                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4862  1E00  0872               	movf	getAD@adcon1,w
  4863  1E01  009E               	movwf	30	;volatile
  4864                           
  4865                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4866  1E02  149D               	bsf	29,1	;volatile
  4867                           
  4868                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4869  1E03  2E07               	goto	l7984
  4870  1E04                     l7982:	
  4871                           
  4872                           ;MCU_B1.c: 466: Timeout_Counter();
  4873  1E04  319D  2516  319D   	fcall	_Timeout_Counter
  4874  1E07                     l7984:	
  4875  1E07  0021               	movlb	1	; select bank1
  4876  1E08  1C9D               	btfss	29,1	;volatile
  4877  1E09  2E0C               	goto	l7988
  4878  1E0A  1D38               	btfss	(_myMain^(0+128)+10),2
  4879  1E0B  2E04               	goto	l7982
  4880  1E0C                     l7988:	
  4881                           
  4882                           ;MCU_B1.c: 467: };
  4883                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4884  1E0C  319A  2278         	fcall	_set_TimeoutCleared
  4885                           
  4886                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4887  1E0E  0021               	movlb	1	; select bank1
  4888  1E0F  081C               	movf	28,w	;volatile
  4889  1E10  01F3               	clrf	?_getAD+1
  4890  1E11  07F3               	addwf	?_getAD+1,f
  4891  1E12  081B               	movf	27,w	;volatile
  4892  1E13  01F2               	clrf	?_getAD
  4893  1E14  07F2               	addwf	?_getAD,f
  4894  1E15  0008               	return
  4895  1E16                     __end_of_getAD:	
  4896                           
  4897                           	psect	text6
  4898  1C21                     __ptext6:	
  4899 ;; *************** function _WDT_Main *****************
  4900 ;; Defined at:
  4901 ;;		line 1116 in file "../src/MCU_B1.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, status,2, status,0, pclath, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        1 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    4
  4922 ;; This function calls:
  4923 ;;		_WDT_Clearing
  4924 ;; This function is called by:
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           
  4930                           ;psect for function _WDT_Main
  4931  1C21                     _WDT_Main:	
  4932                           
  4933                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4934                           
  4935                           ;incstack = 0
  4936                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4937  1C21  0021               	movlb	1	; select bank1
  4938  1C22  1C56               	btfss	_WDT^(0+128),0
  4939  1C23  0008               	return
  4940                           
  4941                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4942  1C24  3001               	movlw	1
  4943  1C25  02D7               	subwf	(_WDT^(0+128)+1),f
  4944  1C26  0857               	movf	(_WDT^(0+128)+1),w
  4945  1C27  3AFF               	xorlw	255
  4946  1C28  1903               	skipnz
  4947  1C29  0008               	return
  4948                           
  4949                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4950  1C2A  3064               	movlw	100
  4951  1C2B  00F2               	movwf	??_WDT_Main
  4952  1C2C  0872               	movf	??_WDT_Main,w
  4953  1C2D  00D7               	movwf	(_WDT^(0+128)+1)
  4954                           
  4955                           ;MCU_B1.c: 1120: WDT_Clearing();
  4956  1C2E  3180  2002         	fcall	_WDT_Clearing
  4957  1C30  0008               	return
  4958  1C31                     __end_of_WDT_Main:	
  4959                           
  4960                           	psect	text7
  4961  0002                     __ptext7:	
  4962 ;; *************** function _WDT_Clearing *****************
  4963 ;; Defined at:
  4964 ;;		line 1126 in file "../src/MCU_B1.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;		None
  4969 ;; Return value:  Size  Location     Type
  4970 ;;		None               void
  4971 ;; Registers used:
  4972 ;;		None
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4982 ;;Total ram usage:        0 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    3
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_WDT_Main
  4989 ;; This function uses a non-reentrant model
  4990 ;;
  4991                           
  4992                           
  4993                           ;psect for function _WDT_Clearing
  4994  0002                     _WDT_Clearing:	
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _WDT_Clearing: []
  4998  0002  0064               	clrwdt	;# 
  4999  0003  0008               	return
  5000  0004                     __end_of_WDT_Clearing:	
  5001                           
  5002                           	psect	text8
  5003  1A60                     __ptext8:	
  5004 ;; *************** function _Temp_Main *****************
  5005 ;; Defined at:
  5006 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;		None               void
  5013 ;; Registers used:
  5014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5015 ;; Tracked objects:
  5016 ;;		On entry : 0/0
  5017 ;;		On exit  : 0/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:    6
  5027 ;; This function calls:
  5028 ;;		_setTemp_Main
  5029 ;; This function is called by:
  5030 ;;		_main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _Temp_Main
  5036  1A60                     _Temp_Main:	
  5037                           
  5038                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5042  1A60  318D  25E5         	fcall	_setTemp_Main
  5043  1A62  0008               	return
  5044  1A63                     __end_of_Temp_Main:	
  5045                           
  5046                           	psect	text9
  5047  0DE5                     __ptext9:	
  5048 ;; *************** function _setTemp_Main *****************
  5049 ;; Defined at:
  5050 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  AD              2   68[BANK0 ] unsigned int 
  5055 ;;  DangerValue     2   66[BANK0 ] unsigned int 
  5056 ;;  SafeValue       2   64[BANK0 ] unsigned int 
  5057 ;;  TempGO          1   63[BANK0 ] unsigned char 
  5058 ;;  error           1   62[BANK0 ] unsigned char 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;		None               void
  5061 ;; Registers used:
  5062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5069 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5071 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5072 ;;Total ram usage:        9 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    5
  5075 ;; This function calls:
  5076 ;;		_getMain_All_Error_Status
  5077 ;;		_getMain_All_LightsStatus
  5078 ;;		_setBuz
  5079 ;;		_setProductData
  5080 ;; This function is called by:
  5081 ;;		_Temp_Main
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           
  5086                           ;psect for function _setTemp_Main
  5087  0DE5                     _setTemp_Main:	
  5088                           
  5089                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5090                           
  5091                           ;incstack = 0
  5092                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5093  0DE5  3000               	movlw	0
  5094  0DE6  3191  2128  318D   	fcall	_getMain_All_Error_Status
  5095  0DE9  0020               	movlb	0	; select bank0
  5096  0DEA  00DD               	movwf	??_setTemp_Main
  5097  0DEB  085D               	movf	??_setTemp_Main,w
  5098  0DEC  00DE               	movwf	setTemp_Main@error
  5099                           
  5100                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5101  0DED  01E0               	clrf	setTemp_Main@SafeValue
  5102  0DEE  01E1               	clrf	setTemp_Main@SafeValue+1
  5103  0DEF  01E2               	clrf	setTemp_Main@DangerValue
  5104  0DF0  01E3               	clrf	setTemp_Main@DangerValue+1
  5105                           
  5106                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5107  0DF1  319B  2376  318D   	fcall	_getMain_All_LightsStatus
  5108  0DF4  0020               	movlb	0	; select bank0
  5109  0DF5  00DD               	movwf	??_setTemp_Main
  5110  0DF6  085D               	movf	??_setTemp_Main,w
  5111  0DF7  00DF               	movwf	setTemp_Main@TempGO
  5112                           
  5113                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5114  0DF8  0021               	movlb	1	; select bank1
  5115  0DF9  1C66               	btfss	_Temp^(0+128),0
  5116  0DFA  2E92               	goto	l1997
  5117                           
  5118                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5119  0DFB  1966               	btfsc	_Temp^(0+128),2
  5120  0DFC  2E1A               	goto	l9846
  5121                           
  5122                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5123  0DFD  0020               	movlb	0	; select bank0
  5124  0DFE  085F               	movf	setTemp_Main@TempGO,w
  5125  0DFF  3A01               	xorlw	1
  5126  0E00  1D03               	skipz
  5127  0E01  2E05               	goto	l2003
  5128  0E02  0021               	movlb	1	; select bank1
  5129  0E03  1CE6               	btfss	_Temp^(0+128),1
  5130  0E04  2E08               	goto	l9838
  5131  0E05                     l2003:	
  5132  0E05  0021               	movlb	1	; select bank1
  5133  0E06  1CE6               	btfss	_Temp^(0+128),1
  5134  0E07  2E17               	goto	l9844
  5135  0E08                     l9838:	
  5136                           
  5137                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5138  0E08  3001               	movlw	1
  5139  0E09  07E7               	addwf	(_Temp^(0+128)+1),f
  5140  0E0A  3000               	movlw	0
  5141  0E0B  3DE8               	addwfc	((_Temp+1)^(0+128)+1),f
  5142                           
  5143                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5144  0E0C  3000               	movlw	0
  5145  0E0D  0268               	subwf	((_Temp+1)^(0+128)+1),w
  5146  0E0E  30FA               	movlw	250
  5147  0E0F  1903               	skipnz
  5148  0E10  0267               	subwf	(_Temp^(0+128)+1),w
  5149  0E11  1C03               	skipc
  5150  0E12  0008               	return
  5151                           
  5152                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5153  0E13  01E7               	clrf	(_Temp^(0+128)+1)
  5154  0E14  01E8               	clrf	((_Temp+1)^(0+128)+1)
  5155                           
  5156                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5157  0E15  1566               	bsf	_Temp^(0+128),2
  5158                           
  5159                           ;OverTemperature_B1.c: 83: }
  5160                           ;OverTemperature_B1.c: 84: } else {
  5161  0E16  0008               	return
  5162  0E17                     l9844:	
  5163                           
  5164                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5165  0E17  01E7               	clrf	(_Temp^(0+128)+1)
  5166  0E18  01E8               	clrf	((_Temp+1)^(0+128)+1)
  5167                           
  5168                           ;OverTemperature_B1.c: 86: }
  5169                           ;OverTemperature_B1.c: 87: } else {
  5170  0E19  0008               	return
  5171  0E1A                     l9846:	
  5172                           
  5173                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5174  0E1A  3001               	movlw	1
  5175  0E1B  07E7               	addwf	(_Temp^(0+128)+1),f
  5176  0E1C  3000               	movlw	0
  5177  0E1D  3DE8               	addwfc	((_Temp+1)^(0+128)+1),f
  5178                           
  5179                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5180  0E1E  3000               	movlw	0
  5181  0E1F  0268               	subwf	((_Temp+1)^(0+128)+1),w
  5182  0E20  3005               	movlw	5
  5183  0E21  1903               	skipnz
  5184  0E22  0267               	subwf	(_Temp^(0+128)+1),w
  5185  0E23  1C03               	skipc
  5186  0E24  0008               	return
  5187                           
  5188                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5189  0E25  01E7               	clrf	(_Temp^(0+128)+1)
  5190  0E26  01E8               	clrf	((_Temp+1)^(0+128)+1)
  5191                           
  5192                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5193  0E27  3008               	movlw	8
  5194  0E28  3EE6               	addlw	_Temp& (0+255)
  5195  0E29  0086               	movwf	6
  5196  0E2A  0187               	clrf	7
  5197  0E2B  0016               	moviw fsr1++
  5198  0E2C  0401               	iorwf	1,w
  5199  0E2D  1903               	skipnz
  5200  0E2E  2E8A               	goto	l2008
  5201                           
  5202                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5203  0E2F  1166               	bcf	_Temp^(0+128),2
  5204                           
  5205                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5206  0E30  086F               	movf	((_Temp+1)^(0+128)+8),w
  5207  0E31  0020               	movlb	0	; select bank0
  5208  0E32  01E5               	clrf	setTemp_Main@AD+1
  5209  0E33  07E5               	addwf	setTemp_Main@AD+1,f
  5210  0E34  0021               	movlb	1	; select bank1
  5211  0E35  086E               	movf	(_Temp^(0+128)+8),w
  5212  0E36  0020               	movlb	0	; select bank0
  5213  0E37  01E4               	clrf	setTemp_Main@AD
  5214  0E38  07E4               	addwf	setTemp_Main@AD,f
  5215                           
  5216                           ;OverTemperature_B1.c: 112: SafeValue = 455;
  5217  0E39  30C7               	movlw	199
  5218  0E3A  00E0               	movwf	setTemp_Main@SafeValue
  5219  0E3B  3001               	movlw	1
  5220  0E3C  00E1               	movwf	setTemp_Main@SafeValue+1
  5221                           
  5222                           ;OverTemperature_B1.c: 113: DangerValue = 415;
  5223  0E3D  309F               	movlw	159
  5224  0E3E  00E2               	movwf	setTemp_Main@DangerValue
  5225  0E3F  3001               	movlw	1
  5226  0E40  00E3               	movwf	setTemp_Main@DangerValue+1
  5227                           
  5228                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5229  0E41  0021               	movlb	1	; select bank1
  5230  0E42  1CE6               	btfss	_Temp^(0+128),1
  5231  0E43  2E62               	goto	l9876
  5232                           
  5233                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5234  0E44  0020               	movlb	0	; select bank0
  5235  0E45  0861               	movf	setTemp_Main@SafeValue+1,w
  5236  0E46  0265               	subwf	setTemp_Main@AD+1,w
  5237  0E47  1D03               	skipz
  5238  0E48  2E4B               	goto	u11065
  5239  0E49  0860               	movf	setTemp_Main@SafeValue,w
  5240  0E4A  0264               	subwf	setTemp_Main@AD,w
  5241  0E4B                     u11065:	
  5242  0E4B  1C03               	skipc
  5243  0E4C  2E77               	goto	l9886
  5244                           
  5245                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5246  0E4D  3001               	movlw	1
  5247  0E4E  00DD               	movwf	??_setTemp_Main
  5248  0E4F  085D               	movf	??_setTemp_Main,w
  5249  0E50  0021               	movlb	1	; select bank1
  5250  0E51  07E9               	addwf	(_Temp^(0+128)+3),f
  5251                           
  5252                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5253  0E52  3003               	movlw	3
  5254  0E53  0269               	subwf	(_Temp^(0+128)+3),w
  5255  0E54  1C03               	skipc
  5256  0E55  2E79               	goto	l9888
  5257                           
  5258                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5259  0E56  01E9               	clrf	(_Temp^(0+128)+3)
  5260                           
  5261                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5262  0E57  10E6               	bcf	_Temp^(0+128),1
  5263                           
  5264                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5265  0E58  3064               	movlw	100
  5266  0E59  0020               	movlb	0	; select bank0
  5267  0E5A  00A4               	movwf	setBuz@time
  5268  0E5B  3000               	movlw	0
  5269  0E5C  00A5               	movwf	setBuz@time+1
  5270  0E5D  3002               	movlw	2
  5271  0E5E  3193  23AD  318D   	fcall	_setBuz
  5272                           
  5273                           ;OverTemperature_B1.c: 126: }
  5274                           ;OverTemperature_B1.c: 127: } else {
  5275  0E61  2E79               	goto	l9888
  5276  0E62                     l9876:	
  5277                           ;OverTemperature_B1.c: 129: }
  5278                           ;OverTemperature_B1.c: 130: } else {
  5279                           
  5280                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5281                           
  5282                           
  5283                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5284  0E62  0020               	movlb	0	; select bank0
  5285  0E63  0865               	movf	setTemp_Main@AD+1,w
  5286  0E64  0263               	subwf	setTemp_Main@DangerValue+1,w
  5287  0E65  1D03               	skipz
  5288  0E66  2E69               	goto	u11085
  5289  0E67  0864               	movf	setTemp_Main@AD,w
  5290  0E68  0262               	subwf	setTemp_Main@DangerValue,w
  5291  0E69                     u11085:	
  5292  0E69  1C03               	skipc
  5293  0E6A  2E77               	goto	l9886
  5294                           
  5295                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5296  0E6B  3001               	movlw	1
  5297  0E6C  00DD               	movwf	??_setTemp_Main
  5298  0E6D  085D               	movf	??_setTemp_Main,w
  5299  0E6E  0021               	movlb	1	; select bank1
  5300  0E6F  07E9               	addwf	(_Temp^(0+128)+3),f
  5301                           
  5302                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5303  0E70  3003               	movlw	3
  5304  0E71  0269               	subwf	(_Temp^(0+128)+3),w
  5305  0E72  1C03               	skipc
  5306  0E73  2E79               	goto	l9888
  5307                           
  5308                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5309  0E74  01E9               	clrf	(_Temp^(0+128)+3)
  5310                           
  5311                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5312  0E75  14E6               	bsf	_Temp^(0+128),1
  5313                           
  5314                           ;OverTemperature_B1.c: 136: }
  5315                           ;OverTemperature_B1.c: 137: } else {
  5316  0E76  2E79               	goto	l9888
  5317  0E77                     l9886:	
  5318                           
  5319                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5320  0E77  0021               	movlb	1	; select bank1
  5321  0E78  01E9               	clrf	(_Temp^(0+128)+3)
  5322  0E79                     l9888:	
  5323                           
  5324                           ;OverTemperature_B1.c: 139: }
  5325                           ;OverTemperature_B1.c: 140: }
  5326                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5327  0E79  0020               	movlb	0	; select bank0
  5328  0E7A  0865               	movf	setTemp_Main@AD+1,w
  5329  0E7B  00DD               	movwf	??_setTemp_Main
  5330  0E7C  085D               	movf	??_setTemp_Main,w
  5331  0E7D  00DA               	movwf	setProductData@value
  5332  0E7E  3018               	movlw	24
  5333  0E7F  319B  232B  318D   	fcall	_setProductData
  5334                           
  5335                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5336  0E82  0020               	movlb	0	; select bank0
  5337  0E83  0864               	movf	setTemp_Main@AD,w
  5338  0E84  00DD               	movwf	??_setTemp_Main
  5339  0E85  085D               	movf	??_setTemp_Main,w
  5340  0E86  00DA               	movwf	setProductData@value
  5341  0E87  3019               	movlw	25
  5342  0E88  319B  232B         	fcall	_setProductData
  5343  0E8A                     l2008:	
  5344                           
  5345                           ;OverTemperature_B1.c: 158: }
  5346                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5347  0E8A  0021               	movlb	1	; select bank1
  5348  0E8B  01EA               	clrf	(_Temp^(0+128)+4)
  5349  0E8C  01EB               	clrf	((_Temp+1)^(0+128)+4)
  5350                           
  5351                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5352  0E8D  01EC               	clrf	(_Temp^(0+128)+6)
  5353  0E8E  01ED               	clrf	((_Temp+1)^(0+128)+6)
  5354                           
  5355                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5356  0E8F  01EE               	clrf	(_Temp^(0+128)+8)
  5357  0E90  01EF               	clrf	((_Temp+1)^(0+128)+8)
  5358                           
  5359                           ;OverTemperature_B1.c: 162: }
  5360                           ;OverTemperature_B1.c: 163: }
  5361                           ;OverTemperature_B1.c: 166: } else {
  5362  0E91  0008               	return
  5363  0E92                     l1997:	
  5364                           
  5365                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5366  0E92  1C2E               	btfss	_myMain^(0+128),0
  5367  0E93  0008               	return
  5368                           
  5369                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5370  0E94  1466               	bsf	_Temp^(0+128),0
  5371  0E95  0008               	return
  5372  0E96                     __end_of_setTemp_Main:	
  5373                           
  5374                           	psect	text10
  5375  1A5D                     __ptext10:	
  5376 ;; *************** function _Temp_Initialization *****************
  5377 ;; Defined at:
  5378 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		status,2, status,0, pclath, cstack
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        0 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    4
  5399 ;; This function calls:
  5400 ;;		_setTemp_Initialization
  5401 ;; This function is called by:
  5402 ;;		_main
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _Temp_Initialization
  5408  1A5D                     _Temp_Initialization:	
  5409                           
  5410                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5414  1A5D  319A  2250         	fcall	_setTemp_Initialization
  5415  1A5F  0008               	return
  5416  1A60                     __end_of_Temp_Initialization:	
  5417                           
  5418                           	psect	text11
  5419  1A50                     __ptext11:	
  5420 ;; *************** function _setTemp_Initialization *****************
  5421 ;; Defined at:
  5422 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		None
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    3
  5443 ;; This function calls:
  5444 ;;		Nothing
  5445 ;; This function is called by:
  5446 ;;		_Temp_Initialization
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _setTemp_Initialization
  5452  1A50                     _setTemp_Initialization:	
  5453                           
  5454                           ;incstack = 0
  5455                           ; Regs used in _setTemp_Initialization: []
  5456  1A50  0008               	return
  5457  1A51                     __end_of_setTemp_Initialization:	
  5458                           
  5459                           	psect	text12
  5460  1B14                     __ptext12:	
  5461 ;; *************** function _Switch_Main *****************
  5462 ;; Defined at:
  5463 ;;		line 76 in file "../src/Switch_B1.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;		None
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;		None
  5468 ;; Return value:  Size  Location     Type
  5469 ;;		None               void
  5470 ;; Registers used:
  5471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;Total ram usage:        0 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:    7
  5484 ;; This function calls:
  5485 ;;		_TouchPower
  5486 ;;		_setSw_Main
  5487 ;; This function is called by:
  5488 ;;		_main
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           
  5493                           ;psect for function _Switch_Main
  5494  1B14                     _Switch_Main:	
  5495                           
  5496                           ;Switch_B1.c: 79: setSw_Main(1);
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5500  1B14  3001               	movlw	1
  5501  1B15  3181  21F3  319B   	fcall	_setSw_Main
  5502                           
  5503                           ;Switch_B1.c: 83: setSw_Main(2);
  5504  1B18  3002               	movlw	2
  5505  1B19  3181  21F3  319B   	fcall	_setSw_Main
  5506                           
  5507                           ;Switch_B1.c: 91: TouchPower();
  5508  1B1C  319D  252B         	fcall	_TouchPower
  5509  1B1E  0008               	return
  5510  1B1F                     __end_of_Switch_Main:	
  5511                           
  5512                           	psect	text13
  5513  01F3                     __ptext13:	
  5514 ;; *************** function _setSw_Main *****************
  5515 ;; Defined at:
  5516 ;;		line 117 in file "../src/Switch_B1.c"
  5517 ;; Parameters:    Size  Location     Type
  5518 ;;  sw              1    wreg     unsigned char 
  5519 ;; Auto vars:     Size  Location     Type
  5520 ;;  sw              1   12[BANK0 ] unsigned char 
  5521 ;; Return value:  Size  Location     Type
  5522 ;;		None               void
  5523 ;; Registers used:
  5524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5525 ;; Tracked objects:
  5526 ;;		On entry : 0/0
  5527 ;;		On exit  : 0/0
  5528 ;;		Unchanged: 0/0
  5529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;Total ram usage:        3 bytes
  5535 ;; Hardware stack levels used:    1
  5536 ;; Hardware stack levels required when called:    6
  5537 ;; This function calls:
  5538 ;;		_SwPointSelect
  5539 ;;		_getMain_All_Error_Status
  5540 ;;		_getSw_KeyStatus
  5541 ;;		_setBuz
  5542 ;;		_setDimmerLights_DimmingOn
  5543 ;;		_setDimmerLights_SwOff
  5544 ;;		_setDimmerLights_SwOn
  5545 ;;		_setRF_Learn
  5546 ;; This function is called by:
  5547 ;;		_Switch_Main
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           
  5552                           ;psect for function _setSw_Main
  5553  01F3                     _setSw_Main:	
  5554                           
  5555                           ;incstack = 0
  5556                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5557                           ;setSw_Main@sw stored from wreg
  5558  01F3  0020               	movlb	0	; select bank0
  5559  01F4  00AC               	movwf	setSw_Main@sw
  5560                           
  5561                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5562  01F5  082C               	movf	setSw_Main@sw,w
  5563  01F6  319D  2540  3181   	fcall	_SwPointSelect
  5564                           
  5565                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5566  01F9  0020               	movlb	0	; select bank0
  5567  01FA  086D               	movf	_Sw,w
  5568  01FB  0086               	movwf	6
  5569  01FC  3001               	movlw	1	; select bank2/3
  5570  01FD  0087               	movwf	7
  5571  01FE  1C01               	btfss	1,0
  5572  01FF  2B5A               	goto	l2784
  5573                           
  5574                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5575  0200  3000               	movlw	0
  5576  0201  3191  2128  3181   	fcall	_getMain_All_Error_Status
  5577  0204  3800               	iorlw	0
  5578  0205  1D03               	skipz
  5579  0206  2A22               	goto	l9982
  5580                           
  5581                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5582  0207  0020               	movlb	0	; select bank0
  5583  0208  0A6D               	incf	_Sw,w
  5584  0209  0086               	movwf	6
  5585  020A  3001               	movlw	1	; select bank2/3
  5586  020B  0087               	movwf	7
  5587  020C  1081               	bcf	1,1
  5588                           
  5589                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5590  020D  082C               	movf	setSw_Main@sw,w
  5591  020E  319E  26C8  3181   	fcall	_getSw_KeyStatus
  5592  0211  3A01               	xorlw	1
  5593  0212  3000               	movlw	0
  5594  0213  1903               	skipnz
  5595  0214  3001               	movlw	1
  5596  0215  0020               	movlb	0	; select bank0
  5597  0216  00AA               	movwf	??_setSw_Main
  5598  0217  086D               	movf	_Sw,w
  5599  0218  0086               	movwf	6
  5600  0219  3001               	movlw	1	; select bank2/3
  5601  021A  0087               	movwf	7
  5602  021B  0DAA               	rlf	??_setSw_Main,f
  5603  021C  0801               	movf	1,w
  5604  021D  062A               	xorwf	??_setSw_Main,w
  5605  021E  39FD               	andlw	-3
  5606  021F  062A               	xorwf	??_setSw_Main,w
  5607  0220  0081               	movwf	1
  5608                           
  5609                           ;Switch_B1.c: 124: } else {
  5610  0221  2A38               	goto	l2786
  5611  0222                     l9982:	
  5612                           
  5613                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5614  0222  0020               	movlb	0	; select bank0
  5615  0223  0A6D               	incf	_Sw,w
  5616  0224  0086               	movwf	6
  5617  0225  3001               	movlw	1	; select bank2/3
  5618  0226  0087               	movwf	7
  5619  0227  1881               	btfsc	1,1
  5620  0228  2A38               	goto	l2786
  5621                           
  5622                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5623  0229  0A6D               	incf	_Sw,w
  5624  022A  0086               	movwf	6
  5625  022B  3001               	movlw	1	; select bank2/3
  5626  022C  0087               	movwf	7
  5627  022D  1481               	bsf	1,1
  5628                           
  5629                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5630  022E  086D               	movf	_Sw,w
  5631  022F  0086               	movwf	6
  5632  0230  3001               	movlw	1	; select bank2/3
  5633  0231  0087               	movwf	7
  5634  0232  1081               	bcf	1,1
  5635                           
  5636                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5637  0233  086D               	movf	_Sw,w
  5638  0234  0086               	movwf	6
  5639  0235  3001               	movlw	1	; select bank2/3
  5640  0236  0087               	movwf	7
  5641  0237  1501               	bsf	1,2
  5642  0238                     l2786:	
  5643                           
  5644                           ;Switch_B1.c: 130: }
  5645                           ;Switch_B1.c: 131: }
  5646                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5647  0238  086D               	movf	_Sw,w
  5648  0239  0086               	movwf	6
  5649  023A  3001               	movlw	1	; select bank2/3
  5650  023B  0087               	movwf	7
  5651  023C  1C81               	btfss	1,1
  5652  023D  2B07               	goto	l10032
  5653                           
  5654                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5655  023E  086D               	movf	_Sw,w
  5656  023F  0086               	movwf	6
  5657  0240  3001               	movlw	1	; select bank2/3
  5658  0241  0087               	movwf	7
  5659  0242  1901               	btfsc	1,2
  5660  0243  2A65               	goto	l9998
  5661                           
  5662                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5663  0244  3001               	movlw	1
  5664  0245  00AA               	movwf	??_setSw_Main
  5665  0246  086D               	movf	_Sw,w
  5666  0247  3E02               	addlw	2
  5667  0248  0086               	movwf	6
  5668  0249  3001               	movlw	1	; select bank2/3
  5669  024A  0087               	movwf	7
  5670  024B  082A               	movf	??_setSw_Main,w
  5671  024C  0781               	addwf	1,f
  5672                           
  5673                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5674  024D  086D               	movf	_Sw,w
  5675  024E  3E02               	addlw	2
  5676  024F  0086               	movwf	6
  5677  0250  3001               	movlw	1	; select bank2/3
  5678  0251  0087               	movwf	7
  5679  0252  3003               	movlw	3
  5680  0253  0201               	subwf	1,w
  5681  0254  1C03               	skipc
  5682  0255  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5685  0256  086D               	movf	_Sw,w
  5686  0257  3E02               	addlw	2
  5687  0258  0086               	movwf	6
  5688  0259  3001               	movlw	1	; select bank2/3
  5689  025A  0087               	movwf	7
  5690  025B  0181               	clrf	1
  5691                           
  5692                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5693  025C  086D               	movf	_Sw,w
  5694  025D  0086               	movwf	6
  5695  025E  3001               	movlw	1	; select bank2/3
  5696  025F  0087               	movwf	7
  5697  0260  1501               	bsf	1,2
  5698                           
  5699                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5700  0261  082C               	movf	setSw_Main@sw,w
  5701  0262  3194  24AA         	fcall	_setDimmerLights_SwOn
  5702                           
  5703                           ;Switch_B1.c: 146: }
  5704                           ;Switch_B1.c: 147: } else {
  5705  0264  0008               	return
  5706  0265                     l9998:	
  5707                           
  5708                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5709  0265  0020               	movlb	0	; select bank0
  5710  0266  086D               	movf	_Sw,w
  5711  0267  0086               	movwf	6
  5712  0268  3001               	movlw	1	; select bank2/3
  5713  0269  0087               	movwf	7
  5714  026A  1981               	btfsc	1,3
  5715  026B  2A97               	goto	l10008
  5716                           
  5717                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5718  026C  086D               	movf	_Sw,w
  5719  026D  3E03               	addlw	3
  5720  026E  0086               	movwf	6
  5721  026F  3001               	movlw	1	; select bank2/3
  5722  0270  0087               	movwf	7
  5723  0271  3001               	movlw	1
  5724  0272  0781               	addwf	1,f
  5725  0273  3141               	addfsr 1,1
  5726  0274  1803               	skipnc
  5727  0275  0A81               	incf	1,f
  5728                           
  5729                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5730  0276  086D               	movf	_Sw,w
  5731  0277  3E03               	addlw	3
  5732  0278  0086               	movwf	6
  5733  0279  3001               	movlw	1	; select bank2/3
  5734  027A  0087               	movwf	7
  5735  027B  3F40               	moviw [0]fsr1
  5736  027C  00AA               	movwf	??_setSw_Main
  5737  027D  3F41               	moviw [1]fsr1
  5738  027E  00AB               	movwf	??_setSw_Main+1
  5739  027F  3000               	movlw	0
  5740  0280  022B               	subwf	??_setSw_Main+1,w
  5741  0281  304B               	movlw	75
  5742  0282  1903               	skipnz
  5743  0283  022A               	subwf	??_setSw_Main,w
  5744  0284  1C03               	skipc
  5745  0285  0008               	return
  5746                           
  5747                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5748  0286  086D               	movf	_Sw,w
  5749  0287  3E03               	addlw	3
  5750  0288  0086               	movwf	6
  5751  0289  3001               	movlw	1	; select bank2/3
  5752  028A  0087               	movwf	7
  5753  028B  3000               	movlw	0
  5754  028C  3FC0               	movwi [0]fsr1
  5755  028D  3FC1               	movwi [1]fsr1
  5756                           
  5757                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5758  028E  086D               	movf	_Sw,w
  5759  028F  0086               	movwf	6
  5760  0290  3001               	movlw	1	; select bank2/3
  5761  0291  0087               	movwf	7
  5762  0292  1581               	bsf	1,3
  5763                           
  5764                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5765  0293  082C               	movf	setSw_Main@sw,w
  5766  0294  319F  27DA         	fcall	_setDimmerLights_DimmingOn
  5767                           
  5768                           ;Switch_B1.c: 161: }
  5769                           ;Switch_B1.c: 162: } else {
  5770  0296  0008               	return
  5771  0297                     l10008:	
  5772                           
  5773                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5774  0297  0020               	movlb	0	; select bank0
  5775  0298  086D               	movf	_Sw,w
  5776  0299  0086               	movwf	6
  5777  029A  3001               	movlw	1	; select bank2/3
  5778  029B  0087               	movwf	7
  5779  029C  1A01               	btfsc	1,4
  5780  029D  2AD5               	goto	l10022
  5781                           
  5782                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5783  029E  086D               	movf	_Sw,w
  5784  029F  3E05               	addlw	5
  5785  02A0  0086               	movwf	6
  5786  02A1  3001               	movlw	1	; select bank2/3
  5787  02A2  0087               	movwf	7
  5788  02A3  3001               	movlw	1
  5789  02A4  0781               	addwf	1,f
  5790  02A5  3141               	addfsr 1,1
  5791  02A6  1803               	skipnc
  5792  02A7  0A81               	incf	1,f
  5793                           
  5794                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5795  02A8  086D               	movf	_Sw,w
  5796  02A9  3E05               	addlw	5
  5797  02AA  0086               	movwf	6
  5798  02AB  3001               	movlw	1	; select bank2/3
  5799  02AC  0087               	movwf	7
  5800  02AD  3F40               	moviw [0]fsr1
  5801  02AE  00AA               	movwf	??_setSw_Main
  5802  02AF  3F41               	moviw [1]fsr1
  5803  02B0  00AB               	movwf	??_setSw_Main+1
  5804  02B1  3000               	movlw	0
  5805  02B2  022B               	subwf	??_setSw_Main+1,w
  5806  02B3  304B               	movlw	75
  5807  02B4  1903               	skipnz
  5808  02B5  022A               	subwf	??_setSw_Main,w
  5809  02B6  1C03               	skipc
  5810  02B7  0008               	return
  5811                           
  5812                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5813  02B8  086D               	movf	_Sw,w
  5814  02B9  3E05               	addlw	5
  5815  02BA  0086               	movwf	6
  5816  02BB  3001               	movlw	1	; select bank2/3
  5817  02BC  0087               	movwf	7
  5818  02BD  3000               	movlw	0
  5819  02BE  3FC0               	movwi [0]fsr1
  5820  02BF  3FC1               	movwi [1]fsr1
  5821                           
  5822                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5823  02C0  086D               	movf	_Sw,w
  5824  02C1  0086               	movwf	6
  5825  02C2  3001               	movlw	1	; select bank2/3
  5826  02C3  0087               	movwf	7
  5827  02C4  1601               	bsf	1,4
  5828                           
  5829                           ;Switch_B1.c: 171: setRF_Learn(1);
  5830  02C5  3001               	movlw	1
  5831  02C6  319C  2464  3181   	fcall	_setRF_Learn
  5832                           
  5833                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5834  02C9  0021               	movlb	1	; select bank1
  5835  02CA  1EAE               	btfss	_myMain^(0+128),5
  5836  02CB  0008               	return
  5837                           
  5838                           ;Switch_B1.c: 173: setBuz(2, 100);
  5839  02CC  3064               	movlw	100
  5840  02CD  0020               	movlb	0	; select bank0
  5841  02CE  00A4               	movwf	setBuz@time
  5842  02CF  3000               	movlw	0
  5843  02D0  00A5               	movwf	setBuz@time+1
  5844  02D1  3002               	movlw	2
  5845  02D2  3193  23AD         	fcall	_setBuz
  5846                           
  5847                           ;Switch_B1.c: 174: }
  5848                           ;Switch_B1.c: 178: }
  5849                           ;Switch_B1.c: 179: } else {
  5850  02D4  0008               	return
  5851  02D5                     l10022:	
  5852                           
  5853                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5854  02D5  0020               	movlb	0	; select bank0
  5855  02D6  086D               	movf	_Sw,w
  5856  02D7  0086               	movwf	6
  5857  02D8  3001               	movlw	1	; select bank2/3
  5858  02D9  0087               	movwf	7
  5859  02DA  1A81               	btfsc	1,5
  5860  02DB  0008               	return
  5861                           
  5862                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5863  02DC  086D               	movf	_Sw,w
  5864  02DD  3E07               	addlw	7
  5865  02DE  0086               	movwf	6
  5866  02DF  3001               	movlw	1	; select bank2/3
  5867  02E0  0087               	movwf	7
  5868  02E1  3001               	movlw	1
  5869  02E2  0781               	addwf	1,f
  5870  02E3  3141               	addfsr 1,1
  5871  02E4  1803               	skipnc
  5872  02E5  0A81               	incf	1,f
  5873                           
  5874                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5875  02E6  086D               	movf	_Sw,w
  5876  02E7  3E07               	addlw	7
  5877  02E8  0086               	movwf	6
  5878  02E9  3001               	movlw	1	; select bank2/3
  5879  02EA  0087               	movwf	7
  5880  02EB  3F40               	moviw [0]fsr1
  5881  02EC  00AA               	movwf	??_setSw_Main
  5882  02ED  3F41               	moviw [1]fsr1
  5883  02EE  00AB               	movwf	??_setSw_Main+1
  5884  02EF  3000               	movlw	0
  5885  02F0  022B               	subwf	??_setSw_Main+1,w
  5886  02F1  3096               	movlw	150
  5887  02F2  1903               	skipnz
  5888  02F3  022A               	subwf	??_setSw_Main,w
  5889  02F4  1C03               	skipc
  5890  02F5  0008               	return
  5891                           
  5892                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5893  02F6  086D               	movf	_Sw,w
  5894  02F7  3E07               	addlw	7
  5895  02F8  0086               	movwf	6
  5896  02F9  3001               	movlw	1	; select bank2/3
  5897  02FA  0087               	movwf	7
  5898  02FB  3000               	movlw	0
  5899  02FC  3FC0               	movwi [0]fsr1
  5900  02FD  3FC1               	movwi [1]fsr1
  5901                           
  5902                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5903  02FE  086D               	movf	_Sw,w
  5904  02FF  0086               	movwf	6
  5905  0300  3001               	movlw	1	; select bank2/3
  5906  0301  0087               	movwf	7
  5907  0302  1681               	bsf	1,5
  5908                           
  5909                           ;Switch_B1.c: 187: setRF_Learn(0);
  5910  0303  3000               	movlw	0
  5911  0304  319C  2464         	fcall	_setRF_Learn
  5912                           
  5913                           ;Switch_B1.c: 190: }
  5914                           ;Switch_B1.c: 191: }
  5915                           ;Switch_B1.c: 192: }
  5916                           ;Switch_B1.c: 194: }
  5917                           ;Switch_B1.c: 195: }
  5918                           ;Switch_B1.c: 196: } else {
  5919  0306  0008               	return
  5920  0307                     l10032:	
  5921                           
  5922                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5923  0307  0020               	movlb	0	; select bank0
  5924  0308  086D               	movf	_Sw,w
  5925  0309  0086               	movwf	6
  5926  030A  3001               	movlw	1	; select bank2/3
  5927  030B  0087               	movwf	7
  5928  030C  1D01               	btfss	1,2
  5929  030D  0008               	return
  5930                           
  5931                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5932  030E  3001               	movlw	1
  5933  030F  00AA               	movwf	??_setSw_Main
  5934  0310  086D               	movf	_Sw,w
  5935  0311  3E02               	addlw	2
  5936  0312  0086               	movwf	6
  5937  0313  3001               	movlw	1	; select bank2/3
  5938  0314  0087               	movwf	7
  5939  0315  082A               	movf	??_setSw_Main,w
  5940  0316  0781               	addwf	1,f
  5941                           
  5942                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5943  0317  086D               	movf	_Sw,w
  5944  0318  3E02               	addlw	2
  5945  0319  0086               	movwf	6
  5946  031A  3001               	movlw	1	; select bank2/3
  5947  031B  0087               	movwf	7
  5948  031C  3003               	movlw	3
  5949  031D  0201               	subwf	1,w
  5950  031E  1C03               	skipc
  5951  031F  0008               	return
  5952                           
  5953                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5954  0320  086D               	movf	_Sw,w
  5955  0321  3E02               	addlw	2
  5956  0322  0086               	movwf	6
  5957  0323  3001               	movlw	1	; select bank2/3
  5958  0324  0087               	movwf	7
  5959  0325  0181               	clrf	1
  5960                           
  5961                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5962  0326  086D               	movf	_Sw,w
  5963  0327  0086               	movwf	6
  5964  0328  3001               	movlw	1	; select bank2/3
  5965  0329  0087               	movwf	7
  5966  032A  1101               	bcf	1,2
  5967                           
  5968                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5969  032B  086D               	movf	_Sw,w
  5970  032C  3E03               	addlw	3
  5971  032D  0086               	movwf	6
  5972  032E  3001               	movlw	1	; select bank2/3
  5973  032F  0087               	movwf	7
  5974  0330  3000               	movlw	0
  5975  0331  3FC0               	movwi [0]fsr1
  5976  0332  3FC1               	movwi [1]fsr1
  5977                           
  5978                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5979  0333  086D               	movf	_Sw,w
  5980  0334  0086               	movwf	6
  5981  0335  3001               	movlw	1	; select bank2/3
  5982  0336  0087               	movwf	7
  5983  0337  1181               	bcf	1,3
  5984                           
  5985                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5986  0338  086D               	movf	_Sw,w
  5987  0339  0086               	movwf	6
  5988  033A  3001               	movlw	1	; select bank2/3
  5989  033B  0087               	movwf	7
  5990  033C  1201               	bcf	1,4
  5991                           
  5992                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  5993  033D  086D               	movf	_Sw,w
  5994  033E  0086               	movwf	6
  5995  033F  3001               	movlw	1	; select bank2/3
  5996  0340  0087               	movwf	7
  5997  0341  1281               	bcf	1,5
  5998                           
  5999                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6000  0342  086D               	movf	_Sw,w
  6001  0343  3E05               	addlw	5
  6002  0344  0086               	movwf	6
  6003  0345  3001               	movlw	1	; select bank2/3
  6004  0346  0087               	movwf	7
  6005  0347  3000               	movlw	0
  6006  0348  3FC0               	movwi [0]fsr1
  6007  0349  3FC1               	movwi [1]fsr1
  6008                           
  6009                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6010  034A  086D               	movf	_Sw,w
  6011  034B  3E07               	addlw	7
  6012  034C  0086               	movwf	6
  6013  034D  3001               	movlw	1	; select bank2/3
  6014  034E  0087               	movwf	7
  6015  034F  3000               	movlw	0
  6016  0350  3FC0               	movwi [0]fsr1
  6017  0351  3FC1               	movwi [1]fsr1
  6018                           
  6019                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6020  0352  082C               	movf	setSw_Main@sw,w
  6021  0353  3192  222A  3181   	fcall	_setDimmerLights_SwOff
  6022                           
  6023                           ;Switch_B1.c: 219: setRF_Learn(0);
  6024  0356  3000               	movlw	0
  6025  0357  319C  2464         	fcall	_setRF_Learn
  6026                           
  6027                           ;Switch_B1.c: 221: }
  6028                           ;Switch_B1.c: 222: }
  6029                           ;Switch_B1.c: 223: }
  6030                           ;Switch_B1.c: 224: } else {
  6031  0359  0008               	return
  6032  035A                     l2784:	
  6033                           
  6034                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6035  035A  0021               	movlb	1	; select bank1
  6036  035B  1C2E               	btfss	_myMain^(0+128),0
  6037  035C  0008               	return
  6038                           
  6039                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6040  035D  0020               	movlb	0	; select bank0
  6041  035E  086D               	movf	_Sw,w
  6042  035F  0086               	movwf	6
  6043  0360  3001               	movlw	1	; select bank2/3
  6044  0361  0087               	movwf	7
  6045  0362  1401               	bsf	1,0
  6046  0363  0008               	return
  6047  0364                     __end_of_setSw_Main:	
  6048                           
  6049                           	psect	text14
  6050  1C64                     __ptext14:	
  6051 ;; *************** function _setRF_Learn *****************
  6052 ;; Defined at:
  6053 ;;		line 33 in file "../src/RF_Control_B1.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;  command         1    wreg     unsigned char 
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;  command         1    3[COMMON] unsigned char 
  6058 ;; Return value:  Size  Location     Type
  6059 ;;		None               void
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, status,0
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;Total ram usage:        2 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    3
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_setSw_Main
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           
  6082                           ;psect for function _setRF_Learn
  6083  1C64                     _setRF_Learn:	
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6087                           ;setRF_Learn@command stored from wreg
  6088  1C64  00F3               	movwf	setRF_Learn@command
  6089                           
  6090                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6091  1C65  0873               	movf	setRF_Learn@command,w
  6092  1C66  3A01               	xorlw	1
  6093  1C67  3000               	movlw	0
  6094  1C68  1903               	skipnz
  6095  1C69  3001               	movlw	1
  6096  1C6A  00F2               	movwf	??_setRF_Learn
  6097  1C6B  0EF2               	swapf	??_setRF_Learn,f
  6098  1C6C  0DF2               	rlf	??_setRF_Learn,f
  6099  1C6D  0DF2               	rlf	??_setRF_Learn,f
  6100  1C6E  0021               	movlb	1	; select bank1
  6101  1C6F  0820               	movf	_RF1^(0+128),w
  6102  1C70  0672               	xorwf	??_setRF_Learn,w
  6103  1C71  39BF               	andlw	-65
  6104  1C72  0672               	xorwf	??_setRF_Learn,w
  6105  1C73  00A0               	movwf	_RF1^(0+128)
  6106  1C74  0008               	return
  6107  1C75                     __end_of_setRF_Learn:	
  6108                           
  6109                           	psect	text15
  6110  1FDA                     __ptext15:	
  6111 ;; *************** function _setDimmerLights_DimmingOn *****************
  6112 ;; Defined at:
  6113 ;;		line 753 in file "../src/Dimmer_B1.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;  sw              1    wreg     unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  sw              1    4[COMMON] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;		None               void
  6120 ;; Registers used:
  6121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        1 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    4
  6134 ;; This function calls:
  6135 ;;		_DimmerLights_SelectPointer
  6136 ;; This function is called by:
  6137 ;;		_setSw_Main
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _setDimmerLights_DimmingOn
  6143  1FDA                     _setDimmerLights_DimmingOn:	
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6147                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6148  1FDA  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6149                           
  6150                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(sw);
  6151  1FDB  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6152  1FDC  319C  2487  319F   	fcall	_DimmerLights_SelectPointer
  6153                           
  6154                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 0) {
  6155  1FDF  087B               	movf	_DimmerLights,w
  6156  1FE0  0086               	movwf	6
  6157  1FE1  3001               	movlw	1	; select bank2/3
  6158  1FE2  0087               	movwf	7
  6159  1FE3  1881               	btfsc	1,1
  6160  1FE4  0008               	return
  6161                           
  6162                           ;Dimmer_B1.c: 761: if (DimmerLights->SwFlag == 1) {
  6163  1FE5  087B               	movf	_DimmerLights,w
  6164  1FE6  0086               	movwf	6
  6165  1FE7  3001               	movlw	1	; select bank2/3
  6166  1FE8  0087               	movwf	7
  6167  1FE9  1C01               	btfss	1,0
  6168  1FEA  0008               	return
  6169                           
  6170                           ;Dimmer_B1.c: 762: DimmerLights->Status = 1;
  6171  1FEB  0A7B               	incf	_DimmerLights,w
  6172  1FEC  0086               	movwf	6
  6173  1FED  3001               	movlw	1	; select bank2/3
  6174  1FEE  0087               	movwf	7
  6175  1FEF  1401               	bsf	1,0
  6176                           
  6177                           ;Dimmer_B1.c: 764: DimmerLights->DimmingSwFlag = 1;
  6178  1FF0  087B               	movf	_DimmerLights,w
  6179  1FF1  0086               	movwf	6
  6180  1FF2  3001               	movlw	1	; select bank2/3
  6181  1FF3  0087               	movwf	7
  6182  1FF4  1581               	bsf	1,3
  6183                           
  6184                           ;Dimmer_B1.c: 765: DimmerLights->DimmingTrigger = 1;
  6185  1FF5  087B               	movf	_DimmerLights,w
  6186  1FF6  0086               	movwf	6
  6187  1FF7  3001               	movlw	1	; select bank2/3
  6188  1FF8  0087               	movwf	7
  6189  1FF9  1601               	bsf	1,4
  6190                           
  6191                           ;Dimmer_B1.c: 766: DimmerLights->DimmingSwitch = 1;
  6192  1FFA  087B               	movf	_DimmerLights,w
  6193  1FFB  0086               	movwf	6
  6194  1FFC  3001               	movlw	1	; select bank2/3
  6195  1FFD  0087               	movwf	7
  6196  1FFE  1681               	bsf	1,5
  6197  1FFF  0008               	return
  6198  2000                     __end_of_setDimmerLights_DimmingOn:	
  6199                           
  6200                           	psect	text16
  6201  1EC8                     __ptext16:	
  6202 ;; *************** function _getSw_KeyStatus *****************
  6203 ;; Defined at:
  6204 ;;		line 237 in file "../src/Switch_B1.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  sw              1    wreg     unsigned char 
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  sw              1    6[COMMON] unsigned char 
  6209 ;;  status          1    5[COMMON] unsigned char 
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      unsigned char 
  6212 ;; Registers used:
  6213 ;;		wreg, status,2
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;Total ram usage:        5 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    3
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_setSw_Main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function _getSw_KeyStatus
  6235  1EC8                     _getSw_KeyStatus:	
  6236                           
  6237                           ;incstack = 0
  6238                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6239                           ;getSw_KeyStatus@sw stored from wreg
  6240  1EC8  00F6               	movwf	getSw_KeyStatus@sw
  6241                           
  6242                           ;Switch_B1.c: 238: char status = 0;
  6243  1EC9  01F5               	clrf	getSw_KeyStatus@status
  6244                           
  6245                           ;Switch_B1.c: 258: if (sw == 1) {
  6246  1ECA  0876               	movf	getSw_KeyStatus@sw,w
  6247  1ECB  3A01               	xorlw	1
  6248  1ECC  1D03               	skipz
  6249  1ECD  2ED7               	goto	l7620
  6250                           
  6251                           ;Switch_B1.c: 259: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6252  1ECE  01F3               	clrf	_getSw_KeyStatus$6625
  6253  1ECF  0AF3               	incf	_getSw_KeyStatus$6625,f
  6254  1ED0  0020               	movlb	0	; select bank0
  6255  1ED1  1F0C               	btfss	12,6	;volatile
  6256  1ED2  1A0C               	btfsc	12,4	;volatile
  6257  1ED3  2ED5               	goto	l7618
  6258  1ED4  01F3               	clrf	_getSw_KeyStatus$6625
  6259  1ED5                     l7618:	
  6260  1ED5  0873               	movf	_getSw_KeyStatus$6625,w
  6261  1ED6  2EE3               	goto	L2
  6262  1ED7                     l7620:	
  6263                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6264                           
  6265  1ED7  0876               	movf	getSw_KeyStatus@sw,w
  6266  1ED8  3A02               	xorlw	2
  6267  1ED9  1D03               	skipz
  6268  1EDA  2EE6               	goto	l7630
  6269                           
  6270                           ;Switch_B1.c: 261: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6271  1EDB  01F4               	clrf	_getSw_KeyStatus$6626
  6272  1EDC  0AF4               	incf	_getSw_KeyStatus$6626,f
  6273  1EDD  0020               	movlb	0	; select bank0
  6274  1EDE  1C0C               	btfss	12,0	;volatile
  6275  1EDF  188D               	btfsc	13,1	;volatile
  6276  1EE0  2EE2               	goto	l7628
  6277  1EE1  01F4               	clrf	_getSw_KeyStatus$6626
  6278  1EE2                     l7628:	
  6279  1EE2  0874               	movf	_getSw_KeyStatus$6626,w
  6280  1EE3                     L2:	
  6281  1EE3  00F2               	movwf	??_getSw_KeyStatus
  6282  1EE4  0872               	movf	??_getSw_KeyStatus,w
  6283  1EE5  00F5               	movwf	getSw_KeyStatus@status
  6284  1EE6                     l7630:	
  6285                           
  6286                           ;Switch_B1.c: 262: }
  6287                           ;Switch_B1.c: 275: return status;
  6288  1EE6  0875               	movf	getSw_KeyStatus@status,w
  6289  1EE7  0008               	return
  6290  1EE8                     __end_of_getSw_KeyStatus:	
  6291                           
  6292                           	psect	text17
  6293  1D40                     __ptext17:	
  6294 ;; *************** function _SwPointSelect *****************
  6295 ;; Defined at:
  6296 ;;		line 25 in file "../src/Switch_B1.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;  sw              1    wreg     unsigned char 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  sw              1    3[COMMON] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;		None               void
  6303 ;; Registers used:
  6304 ;;		wreg
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;Total ram usage:        2 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    3
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_setSw_Main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _SwPointSelect
  6326  1D40                     _SwPointSelect:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in _SwPointSelect: [wreg]
  6330                           ;SwPointSelect@sw stored from wreg
  6331  1D40  00F3               	movwf	SwPointSelect@sw
  6332                           
  6333                           ;Switch_B1.c: 28: if (sw == 1) {
  6334  1D41  0873               	movf	SwPointSelect@sw,w
  6335  1D42  3A01               	xorlw	1
  6336  1D43  1D03               	skipz
  6337  1D44  2D4B               	goto	l7604
  6338                           
  6339                           ;Switch_B1.c: 29: Sw = &Sw1;
  6340  1D45  30BE               	movlw	_Sw1& (0+255)
  6341  1D46  00F2               	movwf	??_SwPointSelect
  6342  1D47  0872               	movf	??_SwPointSelect,w
  6343  1D48  0020               	movlb	0	; select bank0
  6344  1D49  00ED               	movwf	_Sw
  6345                           
  6346                           ;Switch_B1.c: 30: }
  6347  1D4A  0008               	return
  6348  1D4B                     l7604:	
  6349                           
  6350                           ;Switch_B1.c: 33: else if (sw == 2) {
  6351  1D4B  0873               	movf	SwPointSelect@sw,w
  6352  1D4C  3A02               	xorlw	2
  6353  1D4D  1D03               	skipz
  6354  1D4E  0008               	return
  6355                           
  6356                           ;Switch_B1.c: 34: Sw = &Sw2;
  6357  1D4F  30C7               	movlw	_Sw2& (0+255)
  6358  1D50  00F2               	movwf	??_SwPointSelect
  6359  1D51  0872               	movf	??_SwPointSelect,w
  6360  1D52  0020               	movlb	0	; select bank0
  6361  1D53  00ED               	movwf	_Sw
  6362  1D54  0008               	return
  6363  1D55                     __end_of_SwPointSelect:	
  6364                           
  6365                           	psect	text18
  6366  1D2B                     __ptext18:	
  6367 ;; *************** function _TouchPower *****************
  6368 ;; Defined at:
  6369 ;;		line 10 in file "../src/Switch_B1.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;		None
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;		None
  6374 ;; Return value:  Size  Location     Type
  6375 ;;		None               void
  6376 ;; Registers used:
  6377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;Total ram usage:        0 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    4
  6390 ;; This function calls:
  6391 ;;		_Timeout_Counter
  6392 ;;		_set_TimeoutCleared
  6393 ;; This function is called by:
  6394 ;;		_Switch_Main
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           
  6399                           ;psect for function _TouchPower
  6400  1D2B                     _TouchPower:	
  6401                           
  6402                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6406  1D2B  0021               	movlb	1	; select bank1
  6407  1D2C  1C2E               	btfss	_myMain^(0+128),0
  6408  1D2D  0008               	return
  6409                           
  6410                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6411  1D2E  0020               	movlb	0	; select bank0
  6412  1D2F  1A8E               	btfsc	14,5	;volatile
  6413  1D30  0008               	return
  6414  1D31  2D37               	goto	l8226
  6415  1D32                     l2762:	
  6416                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6417                           
  6418                           
  6419                           ;Switch_B1.c: 14: RC5 = 1;
  6420  1D32  0020               	movlb	0	; select bank0
  6421  1D33  168E               	bsf	14,5	;volatile
  6422                           
  6423                           ;Switch_B1.c: 15: Timeout_Counter();
  6424  1D34  319D  2516  319D   	fcall	_Timeout_Counter
  6425  1D37                     l8226:	
  6426  1D37  0020               	movlb	0	; select bank0
  6427  1D38  1A8E               	btfsc	14,5	;volatile
  6428  1D39  2D3D               	goto	l8230
  6429  1D3A  0021               	movlb	1	; select bank1
  6430  1D3B  1D38               	btfss	(_myMain^(0+128)+10),2
  6431  1D3C  2D32               	goto	l2762
  6432  1D3D                     l8230:	
  6433                           
  6434                           ;Switch_B1.c: 16: }
  6435                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6436  1D3D  319A  2278         	fcall	_set_TimeoutCleared
  6437  1D3F  0008               	return
  6438  1D40                     __end_of_TouchPower:	
  6439                           
  6440                           	psect	text19
  6441  1A78                     __ptext19:	
  6442 ;; *************** function _set_TimeoutCleared *****************
  6443 ;; Defined at:
  6444 ;;		line 281 in file "../src/Main_B1.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;		None
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;		None
  6449 ;; Return value:  Size  Location     Type
  6450 ;;		None               void
  6451 ;; Registers used:
  6452 ;;		status,2
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:        0 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    3
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_getAD
  6469 ;;		_TouchPower
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           
  6474                           ;psect for function _set_TimeoutCleared
  6475  1A78                     _set_TimeoutCleared:	
  6476                           
  6477                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6478                           
  6479                           ;incstack = 0
  6480                           ; Regs used in _set_TimeoutCleared: [status,2]
  6481  1A78  0021               	movlb	1	; select bank1
  6482  1A79  1138               	bcf	(_myMain^(0+128)+10),2
  6483                           
  6484                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6485  1A7A  01B9               	clrf	(_myMain^(0+128)+11)
  6486  1A7B  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6487  1A7C  0008               	return
  6488  1A7D                     __end_of_set_TimeoutCleared:	
  6489                           
  6490                           	psect	text20
  6491  1D16                     __ptext20:	
  6492 ;; *************** function _Timeout_Counter *****************
  6493 ;; Defined at:
  6494 ;;		line 272 in file "../src/Main_B1.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;		None
  6499 ;; Return value:  Size  Location     Type
  6500 ;;		None               void
  6501 ;; Registers used:
  6502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;Total ram usage:        0 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    3
  6515 ;; This function calls:
  6516 ;;		Nothing
  6517 ;; This function is called by:
  6518 ;;		_getAD
  6519 ;;		_TouchPower
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _Timeout_Counter
  6525  1D16                     _Timeout_Counter:	
  6526                           
  6527                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6531  1D16  3001               	movlw	1
  6532  1D17  0021               	movlb	1	; select bank1
  6533  1D18  07B9               	addwf	(_myMain^(0+128)+11),f
  6534  1D19  3000               	movlw	0
  6535  1D1A  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6536                           
  6537                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6538  1D1B  300B               	movlw	11
  6539  1D1C  3EAE               	addlw	_myMain& (0+255)
  6540  1D1D  0086               	movwf	6
  6541  1D1E  0187               	clrf	7
  6542  1D1F  3F40               	moviw [0]fsr1
  6543  1D20  3AA8               	xorlw	168
  6544  1D21  1D03               	skipz
  6545  1D22  2D25               	goto	u7055
  6546  1D23  3F41               	moviw [1]fsr1
  6547  1D24  3A61               	xorlw	97
  6548  1D25                     u7055:	
  6549  1D25  1D03               	skipz
  6550  1D26  0008               	return
  6551                           
  6552                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6553  1D27  01B9               	clrf	(_myMain^(0+128)+11)
  6554  1D28  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6555                           
  6556                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6557  1D29  1538               	bsf	(_myMain^(0+128)+10),2
  6558  1D2A  0008               	return
  6559  1D2B                     __end_of_Timeout_Counter:	
  6560                           
  6561                           	psect	text21
  6562  1ABC                     __ptext21:	
  6563 ;; *************** function _Switch_Initialization *****************
  6564 ;; Defined at:
  6565 ;;		line 46 in file "../src/Switch_B1.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;		None
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;		None
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        0 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    6
  6586 ;; This function calls:
  6587 ;;		_setSw_Initialization
  6588 ;; This function is called by:
  6589 ;;		_main
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function _Switch_Initialization
  6595  1ABC                     _Switch_Initialization:	
  6596                           
  6597                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6598                           
  6599                           ;incstack = 0
  6600                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6601  1ABC  3001               	movlw	1
  6602  1ABD  319A  22A5  319A   	fcall	_setSw_Initialization
  6603                           
  6604                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6605  1AC0  3002               	movlw	2
  6606  1AC1  319A  22A5         	fcall	_setSw_Initialization
  6607  1AC3  0008               	return
  6608  1AC4                     __end_of_Switch_Initialization:	
  6609                           
  6610                           	psect	text22
  6611  1AA5                     __ptext22:	
  6612 ;; *************** function _setSw_Initialization *****************
  6613 ;; Defined at:
  6614 ;;		line 66 in file "../src/Switch_B1.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  sw              1    wreg     unsigned char 
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  sw              1    6[COMMON] unsigned char 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;		None               void
  6621 ;; Registers used:
  6622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    5
  6635 ;; This function calls:
  6636 ;;		_setLED
  6637 ;; This function is called by:
  6638 ;;		_Switch_Initialization
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           
  6643                           ;psect for function _setSw_Initialization
  6644  1AA5                     _setSw_Initialization:	
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6648                           ;setSw_Initialization@sw stored from wreg
  6649  1AA5  00F6               	movwf	setSw_Initialization@sw
  6650                           
  6651                           ;Switch_B1.c: 68: setLED(sw, 1);
  6652  1AA6  01F4               	clrf	setLED@command
  6653  1AA7  0AF4               	incf	setLED@command,f
  6654  1AA8  0876               	movf	setSw_Initialization@sw,w
  6655  1AA9  3195  25BC         	fcall	_setLED
  6656  1AAB  0008               	return
  6657  1AAC                     __end_of_setSw_Initialization:	
  6658                           
  6659                           	psect	text23
  6660  1A5A                     __ptext23:	
  6661 ;; *************** function _RF_Main *****************
  6662 ;; Defined at:
  6663 ;;		line 26 in file "../src/RF_Control_B1.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;Total ram usage:        0 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:   10
  6684 ;; This function calls:
  6685 ;;		_setRF_Main
  6686 ;; This function is called by:
  6687 ;;		_main
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _RF_Main
  6693  1A5A                     _RF_Main:	
  6694                           
  6695                           ;RF_Control_B1.c: 28: setRF_Main();
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6699  1A5A  3185  25EF         	fcall	_setRF_Main
  6700  1A5C  0008               	return
  6701  1A5D                     __end_of_RF_Main:	
  6702                           
  6703                           	psect	text24
  6704  05EF                     __ptext24:	
  6705 ;; *************** function _setRF_Main *****************
  6706 ;; Defined at:
  6707 ;;		line 53 in file "../src/RF_Control_B1.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;		None
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  error           1   75[BANK0 ] unsigned char 
  6712 ;; Return value:  Size  Location     Type
  6713 ;;		None               void
  6714 ;; Registers used:
  6715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;Total ram usage:        2 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    9
  6728 ;; This function calls:
  6729 ;;		_CC2500_PowerOnInitial
  6730 ;;		_CC2500_RxData
  6731 ;;		_CC2500_TxData
  6732 ;;		_CC2500_WriteCommand
  6733 ;;		_RF_RxDisable
  6734 ;;		___lwdiv
  6735 ;;		_getBuz_GO
  6736 ;;		_getRF_KeyStatus
  6737 ;;		_getRxData
  6738 ;; This function is called by:
  6739 ;;		_RF_Main
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           
  6744                           ;psect for function _setRF_Main
  6745  05EF                     _setRF_Main:	
  6746                           
  6747                           ;RF_Control_B1.c: 54: char error = 0;
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6751  05EF  0020               	movlb	0	; select bank0
  6752  05F0  01EB               	clrf	setRF_Main@error
  6753                           
  6754                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6755  05F1  0021               	movlb	1	; select bank1
  6756  05F2  1C20               	btfss	_RF1^(0+128),0
  6757  05F3  2EAB               	goto	l2365
  6758                           
  6759                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6760  05F4  319C  2401  3185   	fcall	_getBuz_GO
  6761  05F7  0873               	movf	?_getBuz_GO+1,w
  6762  05F8  0472               	iorwf	?_getBuz_GO,w
  6763  05F9  1D03               	skipz
  6764  05FA  2E8C               	goto	l9950
  6765                           
  6766                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6767  05FB  319C  2453  3185   	fcall	_getRF_KeyStatus
  6768  05FE  3A01               	xorlw	1
  6769  05FF  3000               	movlw	0
  6770  0600  1903               	skipnz
  6771  0601  3001               	movlw	1
  6772  0602  0020               	movlb	0	; select bank0
  6773  0603  00EA               	movwf	??_setRF_Main
  6774  0604  0CEA               	rrf	??_setRF_Main,f
  6775  0605  0CEA               	rrf	??_setRF_Main,f
  6776  0606  0021               	movlb	1	; select bank1
  6777  0607  0820               	movf	_RF1^(0+128),w
  6778  0608  0020               	movlb	0	; select bank0
  6779  0609  066A               	xorwf	??_setRF_Main,w
  6780  060A  397F               	andlw	-129
  6781  060B  066A               	xorwf	??_setRF_Main,w
  6782  060C  0021               	movlb	1	; select bank1
  6783  060D  00A0               	movwf	_RF1^(0+128)
  6784                           
  6785                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6786  060E  1FA0               	btfss	_RF1^(0+128),7
  6787  060F  2E12               	goto	l2369
  6788  0610  1F20               	btfss	_RF1^(0+128),6
  6789  0611  2E8C               	goto	l9950
  6790  0612                     l2369:	
  6791                           
  6792                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6793  0612  1D20               	btfss	_RF1^(0+128),2
  6794  0613  2E53               	goto	l2370
  6795                           
  6796                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6797  0614  1B20               	btfsc	_RF1^(0+128),6
  6798  0615  2E4E               	goto	l9922
  6799                           
  6800                           ;RF_Control_B1.c: 68: RF1.Count++;
  6801  0616  3001               	movlw	1
  6802  0617  07A2               	addwf	(_RF1^(0+128)+2),f
  6803  0618  3000               	movlw	0
  6804  0619  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6805                           
  6806                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6807  061A  3014               	movlw	20
  6808  061B  00F2               	movwf	___lwdiv@divisor
  6809  061C  3000               	movlw	0
  6810  061D  00F3               	movwf	___lwdiv@divisor+1
  6811  061E  0828               	movf	((_RF1+1)^(0+128)+7),w
  6812  061F  01F5               	clrf	___lwdiv@dividend+1
  6813  0620  07F5               	addwf	___lwdiv@dividend+1,f
  6814  0621  0827               	movf	(_RF1^(0+128)+7),w
  6815  0622  01F4               	clrf	___lwdiv@dividend
  6816  0623  07F4               	addwf	___lwdiv@dividend,f
  6817  0624  3191  21F4  3185   	fcall	___lwdiv
  6818  0627  0873               	movf	?___lwdiv+1,w
  6819  0628  0021               	movlb	1	; select bank1
  6820  0629  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6821  062A  1D03               	skipz
  6822  062B  2E2E               	goto	u11175
  6823  062C  0872               	movf	?___lwdiv,w
  6824  062D  0222               	subwf	(_RF1^(0+128)+2),w
  6825  062E                     u11175:	
  6826  062E  1C03               	skipc
  6827  062F  2E8C               	goto	l9950
  6828                           
  6829                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6830  0630  3014               	movlw	20
  6831  0631  00F2               	movwf	___lwdiv@divisor
  6832  0632  3000               	movlw	0
  6833  0633  00F3               	movwf	___lwdiv@divisor+1
  6834  0634  0828               	movf	((_RF1+1)^(0+128)+7),w
  6835  0635  01F5               	clrf	___lwdiv@dividend+1
  6836  0636  07F5               	addwf	___lwdiv@dividend+1,f
  6837  0637  0827               	movf	(_RF1^(0+128)+7),w
  6838  0638  01F4               	clrf	___lwdiv@dividend
  6839  0639  07F4               	addwf	___lwdiv@dividend,f
  6840  063A  3191  21F4  3185   	fcall	___lwdiv
  6841  063D  0873               	movf	?___lwdiv+1,w
  6842  063E  0021               	movlb	1	; select bank1
  6843  063F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6844  0640  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6845  0641  0872               	movf	?___lwdiv,w
  6846  0642  01A2               	clrf	(_RF1^(0+128)+2)
  6847  0643  07A2               	addwf	(_RF1^(0+128)+2),f
  6848                           
  6849                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6850  0644  1120               	bcf	_RF1^(0+128),2
  6851                           
  6852                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6853  0645  01AA               	clrf	(_RF1^(0+128)+10)
  6854  0646  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6855                           
  6856                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6857  0647  319B  23A3  3185   	fcall	_RF_RxDisable
  6858                           
  6859                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6860  064A  3189  2106  3185   	fcall	_CC2500_TxData
  6861                           
  6862                           ;RF_Control_B1.c: 77: }
  6863                           ;RF_Control_B1.c: 78: } else {
  6864  064D  2E8C               	goto	l9950
  6865  064E                     l9922:	
  6866                           
  6867                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6868  064E  0021               	movlb	1	; select bank1
  6869  064F  01A2               	clrf	(_RF1^(0+128)+2)
  6870  0650  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6871                           
  6872                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6873  0651  1120               	bcf	_RF1^(0+128),2
  6874                           
  6875                           ;RF_Control_B1.c: 81: }
  6876                           ;RF_Control_B1.c: 82: } else {
  6877  0652  2E8C               	goto	l9950
  6878  0653                     l2370:	
  6879                           
  6880                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6881  0653  1DA0               	btfss	_RF1^(0+128),3
  6882  0654  2E62               	goto	l9936
  6883                           
  6884                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6885  0655  3197  273B  3185   	fcall	_CC2500_RxData
  6886                           
  6887                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6888  0658  0021               	movlb	1	; select bank1
  6889  0659  1CA0               	btfss	_RF1^(0+128),1
  6890  065A  2E8C               	goto	l9950
  6891                           
  6892                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6893  065B  10A0               	bcf	_RF1^(0+128),1
  6894                           
  6895                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6896  065C  01AA               	clrf	(_RF1^(0+128)+10)
  6897  065D  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6898                           
  6899                           ;RF_Control_B1.c: 97: getRxData();
  6900  065E  318A  22BB  3185   	fcall	_getRxData
  6901                           
  6902                           ;RF_Control_B1.c: 100: }
  6903                           ;RF_Control_B1.c: 101: } else {
  6904  0661  2E8C               	goto	l9950
  6905  0662                     l9936:	
  6906                           
  6907                           ;RF_Control_B1.c: 102: RF1.Count++;
  6908  0662  3001               	movlw	1
  6909  0663  0021               	movlb	1	; select bank1
  6910  0664  07A2               	addwf	(_RF1^(0+128)+2),f
  6911  0665  3000               	movlw	0
  6912  0666  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6913                           
  6914                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6915  0667  3014               	movlw	20
  6916  0668  00F2               	movwf	___lwdiv@divisor
  6917  0669  3000               	movlw	0
  6918  066A  00F3               	movwf	___lwdiv@divisor+1
  6919  066B  0828               	movf	((_RF1+1)^(0+128)+7),w
  6920  066C  01F5               	clrf	___lwdiv@dividend+1
  6921  066D  07F5               	addwf	___lwdiv@dividend+1,f
  6922  066E  0827               	movf	(_RF1^(0+128)+7),w
  6923  066F  01F4               	clrf	___lwdiv@dividend
  6924  0670  07F4               	addwf	___lwdiv@dividend,f
  6925  0671  3191  21F4  3185   	fcall	___lwdiv
  6926  0674  0873               	movf	?___lwdiv+1,w
  6927  0675  0021               	movlb	1	; select bank1
  6928  0676  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6929  0677  1D03               	skipz
  6930  0678  2E7B               	goto	u11205
  6931  0679  0872               	movf	?___lwdiv,w
  6932  067A  0222               	subwf	(_RF1^(0+128)+2),w
  6933  067B                     u11205:	
  6934  067B  1C03               	skipc
  6935  067C  2E8C               	goto	l9950
  6936                           
  6937                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6938  067D  01A2               	clrf	(_RF1^(0+128)+2)
  6939  067E  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6940                           
  6941                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6942  067F  15A0               	bsf	_RF1^(0+128),3
  6943                           
  6944                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6945  0680  3036               	movlw	54
  6946  0681  319D  25E2  3185   	fcall	_CC2500_WriteCommand
  6947                           
  6948                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6949  0684  303A               	movlw	58
  6950  0685  319D  25E2  3185   	fcall	_CC2500_WriteCommand
  6951                           
  6952                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6953  0688  3034               	movlw	52
  6954  0689  319D  25E2  3185   	fcall	_CC2500_WriteCommand
  6955  068C                     l9950:	
  6956                           
  6957                           ;RF_Control_B1.c: 111: }
  6958                           ;RF_Control_B1.c: 112: }
  6959                           ;RF_Control_B1.c: 113: }
  6960                           ;RF_Control_B1.c: 114: }
  6961                           ;RF_Control_B1.c: 115: }
  6962                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6963  068C  3001               	movlw	1
  6964  068D  0021               	movlb	1	; select bank1
  6965  068E  07AA               	addwf	(_RF1^(0+128)+10),f
  6966  068F  3000               	movlw	0
  6967  0690  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6968                           
  6969                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6970  0691  300B               	movlw	11
  6971  0692  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6972  0693  30B9               	movlw	185
  6973  0694  1903               	skipnz
  6974  0695  022A               	subwf	(_RF1^(0+128)+10),w
  6975  0696  1C03               	skipc
  6976  0697  2EA4               	goto	l9964
  6977                           
  6978                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6979  0698  01AA               	clrf	(_RF1^(0+128)+10)
  6980  0699  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6981                           
  6982                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6983  069A  11A0               	bcf	_RF1^(0+128),3
  6984                           
  6985                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6986  069B  10A0               	bcf	_RF1^(0+128),1
  6987                           
  6988                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6989  069C  3036               	movlw	54
  6990  069D  319D  25E2  3185   	fcall	_CC2500_WriteCommand
  6991                           
  6992                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6993  06A0  303A               	movlw	58
  6994  06A1  319D  25E2  3185   	fcall	_CC2500_WriteCommand
  6995  06A4                     l9964:	
  6996                           
  6997                           ;RF_Control_B1.c: 125: }
  6998                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6999  06A4  0021               	movlb	1	; select bank1
  7000  06A5  1F21               	btfss	(_RF1^(0+128)+1),6
  7001  06A6  0008               	return
  7002                           
  7003                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7004  06A7  1321               	bcf	(_RF1^(0+128)+1),6
  7005                           
  7006                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7007  06A8  319D  2501         	fcall	_CC2500_PowerOnInitial
  7008                           
  7009                           ;RF_Control_B1.c: 130: }
  7010                           ;RF_Control_B1.c: 132: } else {
  7011  06AA  0008               	return
  7012  06AB                     l2365:	
  7013                           
  7014                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7015  06AB  1C2E               	btfss	_myMain^(0+128),0
  7016  06AC  0008               	return
  7017                           
  7018                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7019  06AD  1420               	bsf	_RF1^(0+128),0
  7020  06AE  0008               	return
  7021  06AF                     __end_of_setRF_Main:	
  7022                           
  7023                           	psect	text25
  7024  0ABB                     __ptext25:	
  7025 ;; *************** function _getRxData *****************
  7026 ;; Defined at:
  7027 ;;		line 227 in file "../src/RF_Control_B1.c"
  7028 ;; Parameters:    Size  Location     Type
  7029 ;;		None
  7030 ;; Auto vars:     Size  Location     Type
  7031 ;;  error           1   73[BANK0 ] unsigned char 
  7032 ;; Return value:  Size  Location     Type
  7033 ;;		None               void
  7034 ;; Registers used:
  7035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7036 ;; Tracked objects:
  7037 ;;		On entry : 0/0
  7038 ;;		On exit  : 0/0
  7039 ;;		Unchanged: 0/0
  7040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;Total ram usage:        2 bytes
  7046 ;; Hardware stack levels used:    1
  7047 ;; Hardware stack levels required when called:    8
  7048 ;; This function calls:
  7049 ;;		_getMain_All_Error_Status
  7050 ;;		_setControl_Lights_Table
  7051 ;;		_setLog_Code
  7052 ;;		_setTxData
  7053 ;; This function is called by:
  7054 ;;		_setRF_Main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _getRxData
  7060  0ABB                     _getRxData:	
  7061                           
  7062                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7063                           
  7064                           ;incstack = 0
  7065                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7066  0ABB  0023               	movlb	3	; select bank3
  7067  0ABC  0820               	movf	_RF_Data^(0+384),w
  7068  0ABD  3AAA               	xorlw	170
  7069  0ABE  1D03               	skipz
  7070  0ABF  2AD1               	goto	l9662
  7071  0AC0  0821               	movf	(_RF_Data^(0+384)+1),w
  7072  0AC1  3A01               	xorlw	1
  7073  0AC2  1D03               	skipz
  7074  0AC3  2AD1               	goto	l9662
  7075                           
  7076                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7077  0AC4  3055               	movlw	85
  7078  0AC5  0020               	movlb	0	; select bank0
  7079  0AC6  00E8               	movwf	??_getRxData
  7080  0AC7  086C               	movf	_product,w
  7081  0AC8  3E02               	addlw	2
  7082  0AC9  0086               	movwf	6
  7083  0ACA  3002               	movlw	2	; select bank4/5
  7084  0ACB  0087               	movwf	7
  7085  0ACC  0868               	movf	??_getRxData,w
  7086  0ACD  0081               	movwf	1
  7087                           
  7088                           ;RF_Control_B1.c: 231: setTxData();
  7089  0ACE  318F  274A         	fcall	_setTxData
  7090                           
  7091                           ;RF_Control_B1.c: 235: } else {
  7092  0AD0  0008               	return
  7093  0AD1                     l9662:	
  7094                           
  7095                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7096  0AD1  3000               	movlw	0
  7097  0AD2  3191  2128  318A   	fcall	_getMain_All_Error_Status
  7098  0AD5  0020               	movlb	0	; select bank0
  7099  0AD6  00E8               	movwf	??_getRxData
  7100  0AD7  0868               	movf	??_getRxData,w
  7101  0AD8  00E9               	movwf	getRxData@error
  7102                           
  7103                           ;RF_Control_B1.c: 237: if (error == 0) {
  7104  0AD9  08E9               	movf	getRxData@error,f
  7105  0ADA  1D03               	skipz
  7106  0ADB  2B2C               	goto	l2410
  7107                           
  7108                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7109  0ADC  0021               	movlb	1	; select bank1
  7110  0ADD  1F20               	btfss	_RF1^(0+128),6
  7111  0ADE  2AEA               	goto	l9674
  7112                           
  7113                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7114  0ADF  0023               	movlb	3	; select bank3
  7115  0AE0  08A0               	movf	_RF_Data^(0+384),f
  7116  0AE1  1D03               	skipz
  7117  0AE2  0008               	return
  7118  0AE3  0821               	movf	(_RF_Data^(0+384)+1),w
  7119  0AE4  3A64               	xorlw	100
  7120  0AE5  1D03               	skipz
  7121  0AE6  0008               	return
  7122                           
  7123                           ;RF_Control_B1.c: 241: setLog_Code();
  7124  0AE7  3191  2156         	fcall	_setLog_Code
  7125                           
  7126                           ;RF_Control_B1.c: 242: }
  7127                           ;RF_Control_B1.c: 243: } else {
  7128  0AE9  0008               	return
  7129  0AEA                     l9674:	
  7130                           
  7131                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7132  0AEA  0023               	movlb	3	; select bank3
  7133  0AEB  0834               	movf	(_RF_Data^(0+384)+20),w
  7134  0AEC  3AD2               	xorlw	210
  7135  0AED  1903               	skipnz
  7136  0AEE  2AF3               	goto	l9678
  7137  0AEF  0834               	movf	(_RF_Data^(0+384)+20),w
  7138  0AF0  3A0A               	xorlw	10
  7139  0AF1  1D03               	skipz
  7140  0AF2  0008               	return
  7141  0AF3                     l9678:	
  7142                           
  7143                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7144  0AF3  08A0               	movf	_RF_Data^(0+384),f
  7145  0AF4  1D03               	skipz
  7146  0AF5  0008               	return
  7147  0AF6  0821               	movf	(_RF_Data^(0+384)+1),w
  7148  0AF7  3A02               	xorlw	2
  7149  0AF8  1D03               	skipz
  7150  0AF9  0008               	return
  7151                           
  7152                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7153  0AFA  082C               	movf	(_RF_Data^(0+384)+12),w
  7154  0AFB  3AFF               	xorlw	255
  7155  0AFC  1D03               	skipz
  7156  0AFD  2B08               	goto	l9690
  7157  0AFE  082D               	movf	(_RF_Data^(0+384)+13),w
  7158  0AFF  3AFF               	xorlw	255
  7159  0B00  1D03               	skipz
  7160  0B01  2B08               	goto	l9690
  7161  0B02  082E               	movf	(_RF_Data^(0+384)+14),w
  7162  0B03  3AFF               	xorlw	255
  7163  0B04  1D03               	skipz
  7164  0B05  2B08               	goto	l9690
  7165                           
  7166                           ;RF_Control_B1.c: 249: __nop();
  7167  0B06  0000               	nop
  7168                           
  7169                           ;RF_Control_B1.c: 250: } else {
  7170  0B07  0008               	return
  7171  0B08                     l9690:	
  7172                           
  7173                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7174  0B08  0020               	movlb	0	; select bank0
  7175  0B09  086C               	movf	_product,w
  7176  0B0A  3E0C               	addlw	12
  7177  0B0B  0086               	movwf	6
  7178  0B0C  3002               	movlw	2	; select bank4/5
  7179  0B0D  0087               	movwf	7
  7180  0B0E  0023               	movlb	3	; select bank3
  7181  0B0F  082C               	movf	(_RF_Data^(0+384)+12),w
  7182  0B10  0601               	xorwf	1,w
  7183  0B11  1D03               	skipz
  7184  0B12  0008               	return
  7185  0B13  0020               	movlb	0	; select bank0
  7186  0B14  086C               	movf	_product,w
  7187  0B15  3E0D               	addlw	13
  7188  0B16  0086               	movwf	6
  7189  0B17  3002               	movlw	2	; select bank4/5
  7190  0B18  0087               	movwf	7
  7191  0B19  0023               	movlb	3	; select bank3
  7192  0B1A  082D               	movf	(_RF_Data^(0+384)+13),w
  7193  0B1B  0601               	xorwf	1,w
  7194  0B1C  1D03               	skipz
  7195  0B1D  0008               	return
  7196  0B1E  0020               	movlb	0	; select bank0
  7197  0B1F  086C               	movf	_product,w
  7198  0B20  3E0E               	addlw	14
  7199  0B21  0086               	movwf	6
  7200  0B22  3002               	movlw	2	; select bank4/5
  7201  0B23  0087               	movwf	7
  7202  0B24  0023               	movlb	3	; select bank3
  7203  0B25  082E               	movf	(_RF_Data^(0+384)+14),w
  7204  0B26  0601               	xorwf	1,w
  7205  0B27  1D03               	skipz
  7206  0B28  0008               	return
  7207                           
  7208                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7209  0B29  3187  2765         	fcall	_setControl_Lights_Table
  7210                           
  7211                           ;RF_Control_B1.c: 253: }
  7212                           ;RF_Control_B1.c: 254: }
  7213                           ;RF_Control_B1.c: 256: }
  7214                           ;RF_Control_B1.c: 267: }
  7215                           ;RF_Control_B1.c: 268: }
  7216                           ;RF_Control_B1.c: 269: } else {
  7217  0B2B  0008               	return
  7218  0B2C                     l2410:	
  7219                           
  7220                           ;RF_Control_B1.c: 270: __nop();
  7221  0B2C  0000               	nop
  7222  0B2D  0008               	return
  7223  0B2E                     __end_of_getRxData:	
  7224                           
  7225                           	psect	text26
  7226  1156                     __ptext26:	
  7227 ;; *************** function _setLog_Code *****************
  7228 ;; Defined at:
  7229 ;;		line 276 in file "../src/RF_Control_B1.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;		None               void
  7236 ;; Registers used:
  7237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;Total ram usage:        1 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    5
  7250 ;; This function calls:
  7251 ;;		_setBuz
  7252 ;;		_setMemory_LoopSave
  7253 ;;		_setMemory_Modify
  7254 ;;		_setProductData
  7255 ;; This function is called by:
  7256 ;;		_getRxData
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function _setLog_Code
  7262  1156                     _setLog_Code:	
  7263                           
  7264                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7268  1156  0021               	movlb	1	; select bank1
  7269  1157  1320               	bcf	_RF1^(0+128),6
  7270                           
  7271                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7272  1158  0023               	movlb	3	; select bank3
  7273  1159  082C               	movf	(_RF_Data^(0+384)+12),w
  7274  115A  0020               	movlb	0	; select bank0
  7275  115B  00DD               	movwf	??_setLog_Code
  7276  115C  085D               	movf	??_setLog_Code,w
  7277  115D  00DA               	movwf	setProductData@value
  7278  115E  300C               	movlw	12
  7279  115F  319B  232B  3191   	fcall	_setProductData
  7280                           
  7281                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7282  1162  0023               	movlb	3	; select bank3
  7283  1163  082D               	movf	(_RF_Data^(0+384)+13),w
  7284  1164  0020               	movlb	0	; select bank0
  7285  1165  00DD               	movwf	??_setLog_Code
  7286  1166  085D               	movf	??_setLog_Code,w
  7287  1167  00DA               	movwf	setProductData@value
  7288  1168  300D               	movlw	13
  7289  1169  319B  232B  3191   	fcall	_setProductData
  7290                           
  7291                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7292  116C  0023               	movlb	3	; select bank3
  7293  116D  082E               	movf	(_RF_Data^(0+384)+14),w
  7294  116E  0020               	movlb	0	; select bank0
  7295  116F  00DD               	movwf	??_setLog_Code
  7296  1170  085D               	movf	??_setLog_Code,w
  7297  1171  00DA               	movwf	setProductData@value
  7298  1172  300E               	movlw	14
  7299  1173  319B  232B  3191   	fcall	_setProductData
  7300                           
  7301                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7302  1176  3064               	movlw	100
  7303  1177  0020               	movlb	0	; select bank0
  7304  1178  00A4               	movwf	setBuz@time
  7305  1179  3000               	movlw	0
  7306  117A  00A5               	movwf	setBuz@time+1
  7307  117B  3001               	movlw	1
  7308  117C  3193  23AD  3191   	fcall	_setBuz
  7309                           
  7310                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7311  117F  0021               	movlb	1	; select bank1
  7312  1180  1EAE               	btfss	_myMain^(0+128),5
  7313  1181  2986               	goto	l2425
  7314                           
  7315                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7316  1182  3001               	movlw	1
  7317  1183  319C  2411  3191   	fcall	_setMemory_LoopSave
  7318  1186                     l2425:	
  7319                           
  7320                           ;RF_Control_B1.c: 284: }
  7321                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7322  1186  3001               	movlw	1
  7323  1187  319B  23C1         	fcall	_setMemory_Modify
  7324  1189  0008               	return
  7325  118A                     __end_of_setLog_Code:	
  7326                           
  7327                           	psect	text27
  7328  1C11                     __ptext27:	
  7329 ;; *************** function _setMemory_LoopSave *****************
  7330 ;; Defined at:
  7331 ;;		line 1089 in file "../src/MCU_B1.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  command         1    wreg     unsigned char 
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;  command         1    3[COMMON] unsigned char 
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		wreg, status,2, status,0
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;Total ram usage:        2 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    3
  7352 ;; This function calls:
  7353 ;;		Nothing
  7354 ;; This function is called by:
  7355 ;;		_setLog_Code
  7356 ;; This function uses a non-reentrant model
  7357 ;;
  7358                           
  7359                           
  7360                           ;psect for function _setMemory_LoopSave
  7361  1C11                     _setMemory_LoopSave:	
  7362                           
  7363                           ;incstack = 0
  7364                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7365                           ;setMemory_LoopSave@command stored from wreg
  7366  1C11  00F3               	movwf	setMemory_LoopSave@command
  7367                           
  7368                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7369  1C12  0873               	movf	setMemory_LoopSave@command,w
  7370  1C13  3A01               	xorlw	1
  7371  1C14  3000               	movlw	0
  7372  1C15  1903               	skipnz
  7373  1C16  3001               	movlw	1
  7374  1C17  00F2               	movwf	??_setMemory_LoopSave
  7375  1C18  0DF2               	rlf	??_setMemory_LoopSave,f
  7376  1C19  0DF2               	rlf	??_setMemory_LoopSave,f
  7377  1C1A  0024               	movlb	4	; select bank4
  7378  1C1B  0844               	movf	(_Memory^(0+512)+36),w
  7379  1C1C  0672               	xorwf	??_setMemory_LoopSave,w
  7380  1C1D  39FB               	andlw	-5
  7381  1C1E  0672               	xorwf	??_setMemory_LoopSave,w
  7382  1C1F  00C4               	movwf	(_Memory^(0+512)+36)
  7383  1C20  0008               	return
  7384  1C21                     __end_of_setMemory_LoopSave:	
  7385                           
  7386                           	psect	text28
  7387  0765                     __ptext28:	
  7388 ;; *************** function _setControl_Lights_Table *****************
  7389 ;; Defined at:
  7390 ;;		line 289 in file "../src/RF_Control_B1.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;		None
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;		None
  7395 ;; Return value:  Size  Location     Type
  7396 ;;		None               void
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;Total ram usage:        0 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    7
  7411 ;; This function calls:
  7412 ;;		_getDimmerLights_Status
  7413 ;;		_getMain_All_LightsStatus
  7414 ;;		_setCmd_Status
  7415 ;;		_setDimmerLights_SwOff
  7416 ;;		_setDimmerLights_SwOn
  7417 ;;		_setProductData
  7418 ;;		_setRFSW_AdjControl
  7419 ;;		_setRFSW_Control
  7420 ;;		_setTxData
  7421 ;; This function is called by:
  7422 ;;		_getRxData
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           
  7427                           ;psect for function _setControl_Lights_Table
  7428  0765                     _setControl_Lights_Table:	
  7429                           
  7430                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7431                           
  7432                           ;incstack = 0
  7433                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7434  0765  2FDC               	goto	l9390
  7435  0766                     l9366:	
  7436                           ;RF_Control_B1.c: 292: case 0x00:
  7437                           
  7438                           
  7439                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7440  0766  319B  2376  3187   	fcall	_getMain_All_LightsStatus
  7441  0769  3A01               	xorlw	1
  7442  076A  1D03               	skipz
  7443  076B  2F90               	goto	l9376
  7444                           
  7445                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7446  076C  3001               	movlw	1
  7447  076D  3187  27F2  3187   	fcall	_getDimmerLights_Status
  7448  0770  3A01               	xorlw	1
  7449  0771  1D03               	skipz
  7450  0772  2F7B               	goto	l2432
  7451                           
  7452                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7453  0773  3001               	movlw	1
  7454  0774  3194  24AA  3187   	fcall	_setDimmerLights_SwOn
  7455                           
  7456                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7457  0777  3001               	movlw	1
  7458  0778  3192  222A  3187   	fcall	_setDimmerLights_SwOff
  7459  077B                     l2432:	
  7460                           
  7461                           ;RF_Control_B1.c: 299: }
  7462                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7463  077B  3002               	movlw	2
  7464  077C  3187  27F2  3187   	fcall	_getDimmerLights_Status
  7465  077F  3A01               	xorlw	1
  7466  0780  1D03               	skipz
  7467  0781  2F8A               	goto	l9374
  7468                           
  7469                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7470  0782  3002               	movlw	2
  7471  0783  3194  24AA  3187   	fcall	_setDimmerLights_SwOn
  7472                           
  7473                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7474  0786  3002               	movlw	2
  7475  0787  3192  222A  3187   	fcall	_setDimmerLights_SwOff
  7476  078A                     l9374:	
  7477                           
  7478                           ;RF_Control_B1.c: 305: }
  7479                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7480  078A  01F2               	clrf	setCmd_Status@cmd
  7481  078B  0AF2               	incf	setCmd_Status@cmd,f
  7482  078C  3001               	movlw	1
  7483  078D  319C  24D7         	fcall	_setCmd_Status
  7484                           
  7485                           ;RF_Control_B1.c: 315: } else {
  7486  078F  0008               	return
  7487  0790                     l9376:	
  7488                           
  7489                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7490  0790  0020               	movlb	0	; select bank0
  7491  0791  01DA               	clrf	setProductData@value
  7492  0792  3009               	movlw	9
  7493  0793  319B  232B  3187   	fcall	_setProductData
  7494                           
  7495                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7496  0796  0020               	movlb	0	; select bank0
  7497  0797  01DA               	clrf	setProductData@value
  7498  0798  300B               	movlw	11
  7499  0799  319B  232B  3187   	fcall	_setProductData
  7500                           
  7501                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7502  079C  0020               	movlb	0	; select bank0
  7503  079D  01DA               	clrf	setProductData@value
  7504  079E  300F               	movlw	15
  7505  079F  319B  232B  3187   	fcall	_setProductData
  7506                           
  7507                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7508  07A2  0020               	movlb	0	; select bank0
  7509  07A3  01DA               	clrf	setProductData@value
  7510  07A4  3011               	movlw	17
  7511  07A5  319B  232B  3187   	fcall	_setProductData
  7512                           
  7513                           ;RF_Control_B1.c: 320: setTxData();
  7514  07A8  318F  274A         	fcall	_setTxData
  7515                           
  7516                           ;RF_Control_B1.c: 321: }
  7517                           ;RF_Control_B1.c: 322: break;
  7518  07AA  0008               	return
  7519  07AB                     l9378:	
  7520                           ;RF_Control_B1.c: 324: case 0x20:
  7521                           
  7522                           
  7523                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7524  07AB  0020               	movlb	0	; select bank0
  7525  07AC  01DA               	clrf	setProductData@value
  7526  07AD  3009               	movlw	9
  7527  07AE  319B  232B  3187   	fcall	_setProductData
  7528                           
  7529                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7530  07B1  0020               	movlb	0	; select bank0
  7531  07B2  01DA               	clrf	setProductData@value
  7532  07B3  300B               	movlw	11
  7533  07B4  319B  232B  3187   	fcall	_setProductData
  7534                           
  7535                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7536  07B7  0020               	movlb	0	; select bank0
  7537  07B8  086C               	movf	_product,w
  7538  07B9  0086               	movwf	6
  7539  07BA  3002               	movlw	2	; select bank4/5
  7540  07BB  0087               	movwf	7
  7541  07BC  3002               	movlw	2	; select bank4/5
  7542  07BD  3F4F               	moviw [15]fsr1
  7543  07BE  00DA               	movwf	setProductData@value
  7544  07BF  300F               	movlw	15
  7545  07C0  319B  232B  3187   	fcall	_setProductData
  7546                           
  7547                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7548  07C3  0020               	movlb	0	; select bank0
  7549  07C4  01DA               	clrf	setProductData@value
  7550  07C5  3011               	movlw	17
  7551  07C6  319B  232B  3187   	fcall	_setProductData
  7552                           
  7553                           ;RF_Control_B1.c: 329: setTxData();
  7554  07C9  318F  274A         	fcall	_setTxData
  7555                           
  7556                           ;RF_Control_B1.c: 330: break;
  7557  07CB  0008               	return
  7558  07CC                     l9380:	
  7559                           ;RF_Control_B1.c: 333: case 0x01:
  7560                           
  7561                           
  7562                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7563  07CC  3001               	movlw	1
  7564  07CD  3192  2261         	fcall	_setRFSW_Control
  7565                           
  7566                           ;RF_Control_B1.c: 335: break;
  7567  07CF  0008               	return
  7568  07D0                     l9382:	
  7569                           ;RF_Control_B1.c: 339: case 0x11:
  7570                           
  7571                           
  7572                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7573  07D0  3001               	movlw	1
  7574  07D1  318B  23AB         	fcall	_setRFSW_AdjControl
  7575                           
  7576                           ;RF_Control_B1.c: 341: break;
  7577  07D3  0008               	return
  7578  07D4                     l9384:	
  7579                           ;RF_Control_B1.c: 346: case 0x02:
  7580                           
  7581                           
  7582                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7583  07D4  3002               	movlw	2
  7584  07D5  3192  2261         	fcall	_setRFSW_Control
  7585                           
  7586                           ;RF_Control_B1.c: 348: break;
  7587  07D7  0008               	return
  7588  07D8                     l9386:	
  7589                           ;RF_Control_B1.c: 351: case 0x21:
  7590                           
  7591                           
  7592                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7593  07D8  3002               	movlw	2
  7594  07D9  318B  23AB         	fcall	_setRFSW_AdjControl
  7595                           
  7596                           ;RF_Control_B1.c: 370: }
  7597                           
  7598                           ;RF_Control_B1.c: 353: break;
  7599  07DB  0008               	return
  7600  07DC                     l9390:	
  7601  07DC  0023               	movlb	3	; select bank3
  7602  07DD  082F               	movf	(_RF_Data^(0+384)+15),w
  7603                           
  7604                           ; Switch size 1, requested type "space"
  7605                           ; Number of cases is 6, Range of values is 0 to 33
  7606                           ; switch strategies available:
  7607                           ; Name         Instructions Cycles
  7608                           ; simple_byte           19    10 (average)
  7609                           ; direct_byte           74     6 (fixed)
  7610                           ; jumptable            260     6 (fixed)
  7611                           ;	Chosen strategy is simple_byte
  7612  07DE  3A00               	xorlw	0	; case 0
  7613  07DF  1903               	skipnz
  7614  07E0  2F66               	goto	l9366
  7615  07E1  3A01               	xorlw	1	; case 1
  7616  07E2  1903               	skipnz
  7617  07E3  2FCC               	goto	l9380
  7618  07E4  3A03               	xorlw	3	; case 2
  7619  07E5  1903               	skipnz
  7620  07E6  2FD4               	goto	l9384
  7621  07E7  3A13               	xorlw	19	; case 17
  7622  07E8  1903               	skipnz
  7623  07E9  2FD0               	goto	l9382
  7624  07EA  3A31               	xorlw	49	; case 32
  7625  07EB  1903               	skipnz
  7626  07EC  2FAB               	goto	l9378
  7627  07ED  3A01               	xorlw	1	; case 33
  7628  07EE  1903               	skipnz
  7629  07EF  2FD8               	goto	l9386
  7630  07F0  2FF1               	goto	l2441
  7631  07F1                     l2441:	
  7632  07F1  0008               	return
  7633  07F2                     __end_of_setControl_Lights_Table:	
  7634                           
  7635                           	psect	text29
  7636  1261                     __ptext29:	
  7637 ;; *************** function _setRFSW_Control *****************
  7638 ;; Defined at:
  7639 ;;		line 378 in file "../src/RF_Control_B1.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  sw              1    wreg     unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  sw              1   71[BANK0 ] unsigned char 
  7644 ;;  status          1   70[BANK0 ] unsigned char 
  7645 ;; Return value:  Size  Location     Type
  7646 ;;		None               void
  7647 ;; Registers used:
  7648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;Total ram usage:        3 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    6
  7661 ;; This function calls:
  7662 ;;		_getDimmerLights_Status
  7663 ;;		_setBuz
  7664 ;;		_setDelayOff_GO
  7665 ;;		_setDimmerLights_SwOff
  7666 ;;		_setDimmerLights_SwOn
  7667 ;;		_setRF_DimmerLights
  7668 ;;		_setTxData
  7669 ;; This function is called by:
  7670 ;;		_setControl_Lights_Table
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _setRFSW_Control
  7676  1261                     _setRFSW_Control:	
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7680                           ;setRFSW_Control@sw stored from wreg
  7681  1261  0020               	movlb	0	; select bank0
  7682  1262  00E7               	movwf	setRFSW_Control@sw
  7683                           
  7684                           ;RF_Control_B1.c: 379: char status = 0;
  7685  1263  01E6               	clrf	setRFSW_Control@status
  7686                           
  7687                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7688  1264  0023               	movlb	3	; select bank3
  7689  1265  0830               	movf	(_RF_Data^(0+384)+16),w
  7690  1266  3A80               	xorlw	128
  7691  1267  1D03               	skipz
  7692  1268  2A94               	goto	l9216
  7693                           
  7694                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7695  1269  0020               	movlb	0	; select bank0
  7696  126A  01DD               	clrf	setDelayOff_GO@command
  7697  126B  0ADD               	incf	setDelayOff_GO@command,f
  7698  126C  0023               	movlb	3	; select bank3
  7699  126D  0831               	movf	(_RF_Data^(0+384)+17),w
  7700  126E  0020               	movlb	0	; select bank0
  7701  126F  00E5               	movwf	??_setRFSW_Control
  7702  1270  0865               	movf	??_setRFSW_Control,w
  7703  1271  00DE               	movwf	setDelayOff_GO@value
  7704  1272  0867               	movf	setRFSW_Control@sw,w
  7705  1273  318C  24B0  3192   	fcall	_setDelayOff_GO
  7706                           
  7707                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7708  1276  0020               	movlb	0	; select bank0
  7709  1277  0867               	movf	setRFSW_Control@sw,w
  7710  1278  3187  27F2  3192   	fcall	_getDimmerLights_Status
  7711  127B  3A01               	xorlw	1
  7712  127C  1D03               	skipz
  7713  127D  2A94               	goto	l9216
  7714                           
  7715                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7716  127E  3064               	movlw	100
  7717  127F  0020               	movlb	0	; select bank0
  7718  1280  00A4               	movwf	setBuz@time
  7719  1281  3000               	movlw	0
  7720  1282  00A5               	movwf	setBuz@time+1
  7721  1283  3001               	movlw	1
  7722  1284  3193  23AD  3192   	fcall	_setBuz
  7723                           
  7724                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7725  1287  0020               	movlb	0	; select bank0
  7726  1288  01DD               	clrf	setRF_DimmerLights@on
  7727  1289  0ADD               	incf	setRF_DimmerLights@on,f
  7728  128A  0867               	movf	setRFSW_Control@sw,w
  7729  128B  3195  255D  3192   	fcall	_setRF_DimmerLights
  7730                           
  7731                           ;RF_Control_B1.c: 386: setTxData();
  7732  128E  318F  274A  3192   	fcall	_setTxData
  7733                           
  7734                           ;RF_Control_B1.c: 387: status = 1;
  7735  1291  0020               	movlb	0	; select bank0
  7736  1292  01E6               	clrf	setRFSW_Control@status
  7737  1293  0AE6               	incf	setRFSW_Control@status,f
  7738  1294                     l9216:	
  7739                           
  7740                           ;RF_Control_B1.c: 388: }
  7741                           ;RF_Control_B1.c: 389: }
  7742                           ;RF_Control_B1.c: 391: if (status == 0) {
  7743  1294  0020               	movlb	0	; select bank0
  7744  1295  08E6               	movf	setRFSW_Control@status,f
  7745  1296  1D03               	skipz
  7746  1297  0008               	return
  7747                           
  7748                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7749  1298  0867               	movf	setRFSW_Control@sw,w
  7750  1299  3194  24AA  3192   	fcall	_setDimmerLights_SwOn
  7751                           
  7752                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7753  129C  0020               	movlb	0	; select bank0
  7754  129D  0867               	movf	setRFSW_Control@sw,w
  7755  129E  3192  222A         	fcall	_setDimmerLights_SwOff
  7756  12A0  0008               	return
  7757  12A1                     __end_of_setRFSW_Control:	
  7758                           
  7759                           	psect	text30
  7760  0BAB                     __ptext30:	
  7761 ;; *************** function _setRFSW_AdjControl *****************
  7762 ;; Defined at:
  7763 ;;		line 400 in file "../src/RF_Control_B1.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  sw              1    wreg     unsigned char 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  sw              1   64[BANK0 ] unsigned char 
  7768 ;;  status          1   63[BANK0 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;		None               void
  7771 ;; Registers used:
  7772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:        4 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		_getDimmerLights_PercentToValue
  7787 ;;		_getDimmerLights_Status
  7788 ;;		_setDimmerIntr_Dimming_RF
  7789 ;;		_setDimmerIntr_MaxmumValue
  7790 ;;		_setDimmerLights_DimmingRun
  7791 ;;		_setDimmerLights_SwOff
  7792 ;;		_setDimmerLights_SwOn
  7793 ;;		_setMemory_Modify
  7794 ;;		_setProductData
  7795 ;;		_setTxData
  7796 ;; This function is called by:
  7797 ;;		_setControl_Lights_Table
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _setRFSW_AdjControl
  7803  0BAB                     _setRFSW_AdjControl:	
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7807                           ;setRFSW_AdjControl@sw stored from wreg
  7808  0BAB  0020               	movlb	0	; select bank0
  7809  0BAC  00E0               	movwf	setRFSW_AdjControl@sw
  7810                           
  7811                           ;RF_Control_B1.c: 401: char status = 0;
  7812  0BAD  01DF               	clrf	setRFSW_AdjControl@status
  7813                           
  7814                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7815  0BAE  0860               	movf	setRFSW_AdjControl@sw,w
  7816  0BAF  3187  27F2  318B   	fcall	_getDimmerLights_Status
  7817  0BB2  0020               	movlb	0	; select bank0
  7818  0BB3  00DD               	movwf	??_setRFSW_AdjControl
  7819  0BB4  085D               	movf	??_setRFSW_AdjControl,w
  7820  0BB5  00DF               	movwf	setRFSW_AdjControl@status
  7821                           
  7822                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7823  0BB6  3065               	movlw	101
  7824  0BB7  0023               	movlb	3	; select bank3
  7825  0BB8  0229               	subwf	(_RF_Data^(0+384)+9),w
  7826  0BB9  1C03               	skipc
  7827  0BBA  2BC2               	goto	l9228
  7828                           
  7829                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7830  0BBB  3064               	movlw	100
  7831  0BBC  0020               	movlb	0	; select bank0
  7832  0BBD  00DD               	movwf	??_setRFSW_AdjControl
  7833  0BBE  085D               	movf	??_setRFSW_AdjControl,w
  7834  0BBF  0023               	movlb	3	; select bank3
  7835  0BC0  00A9               	movwf	(_RF_Data^(0+384)+9)
  7836                           
  7837                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7838  0BC1  2BC7               	goto	l9232
  7839  0BC2                     l9228:	
  7840  0BC2  08A9               	movf	(_RF_Data^(0+384)+9),f
  7841  0BC3  1D03               	skipz
  7842  0BC4  2BC7               	goto	l9232
  7843                           
  7844                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7845  0BC5  01A9               	clrf	(_RF_Data^(0+384)+9)
  7846  0BC6  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7847  0BC7                     l9232:	
  7848                           
  7849                           ;RF_Control_B1.c: 409: }
  7850                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7851  0BC7  0829               	movf	(_RF_Data^(0+384)+9),w
  7852  0BC8  0020               	movlb	0	; select bank0
  7853  0BC9  00DD               	movwf	??_setRFSW_AdjControl
  7854  0BCA  085D               	movf	??_setRFSW_AdjControl,w
  7855  0BCB  00DA               	movwf	setProductData@value
  7856  0BCC  3009               	movlw	9
  7857  0BCD  319B  232B  318B   	fcall	_setProductData
  7858                           
  7859                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7860  0BD0  0020               	movlb	0	; select bank0
  7861  0BD1  0860               	movf	setRFSW_AdjControl@sw,w
  7862  0BD2  00DD               	movwf	??_setRFSW_AdjControl
  7863  0BD3  085D               	movf	??_setRFSW_AdjControl,w
  7864  0BD4  00DA               	movwf	setProductData@value
  7865  0BD5  300B               	movlw	11
  7866  0BD6  319B  232B  318B   	fcall	_setProductData
  7867                           
  7868                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7869  0BD9  0020               	movlb	0	; select bank0
  7870  0BDA  0860               	movf	setRFSW_AdjControl@sw,w
  7871  0BDB  3E1A               	addlw	26
  7872  0BDC  076C               	addwf	_product,w
  7873  0BDD  00DD               	movwf	??_setRFSW_AdjControl
  7874  0BDE  085D               	movf	??_setRFSW_AdjControl,w
  7875  0BDF  0086               	movwf	6
  7876  0BE0  3002               	movlw	2	; select bank4/5
  7877  0BE1  0087               	movwf	7
  7878  0BE2  0801               	movf	1,w
  7879  0BE3  00DE               	movwf	??_setRFSW_AdjControl+1
  7880  0BE4  085E               	movf	??_setRFSW_AdjControl+1,w
  7881  0BE5  00DA               	movwf	setProductData@value
  7882  0BE6  3011               	movlw	17
  7883  0BE7  319B  232B  318B   	fcall	_setProductData
  7884                           
  7885                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7886  0BEA  0023               	movlb	3	; select bank3
  7887  0BEB  0829               	movf	(_RF_Data^(0+384)+9),w
  7888  0BEC  0020               	movlb	0	; select bank0
  7889  0BED  00DD               	movwf	??_setRFSW_AdjControl
  7890  0BEE  085D               	movf	??_setRFSW_AdjControl,w
  7891  0BEF  00DA               	movwf	setProductData@value
  7892  0BF0  0860               	movf	setRFSW_AdjControl@sw,w
  7893  0BF1  3E14               	addlw	20
  7894  0BF2  319B  232B  318B   	fcall	_setProductData
  7895                           
  7896                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7897  0BF5  3001               	movlw	1
  7898  0BF6  319B  23C1  318B   	fcall	_setMemory_Modify
  7899                           
  7900                           ;RF_Control_B1.c: 425: if (status == 1) {
  7901  0BF9  0020               	movlb	0	; select bank0
  7902  0BFA  085F               	movf	setRFSW_AdjControl@status,w
  7903  0BFB  3A01               	xorlw	1
  7904  0BFC  1D03               	skipz
  7905  0BFD  2C15               	goto	l9242
  7906                           
  7907                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7908  0BFE  0023               	movlb	3	; select bank3
  7909  0BFF  0829               	movf	(_RF_Data^(0+384)+9),w
  7910  0C00  3188  203C  318B   	fcall	_getDimmerLights_PercentToValue
  7911  0C03  0020               	movlb	0	; select bank0
  7912  0C04  00DD               	movwf	??_setRFSW_AdjControl
  7913  0C05  085D               	movf	??_setRFSW_AdjControl,w
  7914  0C06  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7915  0C07  0860               	movf	setRFSW_AdjControl@sw,w
  7916  0C08  319D  256B  318B   	fcall	_setDimmerIntr_MaxmumValue
  7917                           
  7918                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7919  0C0B  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7920  0C0C  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7921  0C0D  0020               	movlb	0	; select bank0
  7922  0C0E  0860               	movf	setRFSW_AdjControl@sw,w
  7923  0C0F  3190  20AB  318B   	fcall	_setDimmerIntr_Dimming_RF
  7924                           
  7925                           ;RF_Control_B1.c: 428: setTxData();
  7926  0C12  318F  274A         	fcall	_setTxData
  7927                           
  7928                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7929  0C14  0008               	return
  7930  0C15                     l9242:	
  7931  0C15  0020               	movlb	0	; select bank0
  7932  0C16  08DF               	movf	setRFSW_AdjControl@status,f
  7933  0C17  1D03               	skipz
  7934  0C18  0008               	return
  7935                           
  7936                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7937  0C19  01F4               	clrf	setDimmerLights_DimmingRun@command
  7938  0C1A  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7939  0C1B  0860               	movf	setRFSW_AdjControl@sw,w
  7940  0C1C  319D  2599  318B   	fcall	_setDimmerLights_DimmingRun
  7941                           
  7942                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7943  0C1F  0020               	movlb	0	; select bank0
  7944  0C20  0860               	movf	setRFSW_AdjControl@sw,w
  7945  0C21  3194  24AA  318B   	fcall	_setDimmerLights_SwOn
  7946                           
  7947                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7948  0C24  0020               	movlb	0	; select bank0
  7949  0C25  0860               	movf	setRFSW_AdjControl@sw,w
  7950  0C26  3192  222A         	fcall	_setDimmerLights_SwOff
  7951  0C28  0008               	return
  7952  0C29                     __end_of_setRFSW_AdjControl:	
  7953                           
  7954                           	psect	text31
  7955  1D99                     __ptext31:	
  7956 ;; *************** function _setDimmerLights_DimmingRun *****************
  7957 ;; Defined at:
  7958 ;;		line 1079 in file "../src/Dimmer_B1.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  lights          1    wreg     unsigned char 
  7961 ;;  command         1    4[COMMON] unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  lights          1    6[COMMON] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;		None               void
  7966 ;; Registers used:
  7967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7973 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;Total ram usage:        3 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    4
  7980 ;; This function calls:
  7981 ;;		_DimmerLights_SelectPointer
  7982 ;; This function is called by:
  7983 ;;		_setRFSW_AdjControl
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           
  7988                           ;psect for function _setDimmerLights_DimmingRun
  7989  1D99                     _setDimmerLights_DimmingRun:	
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7993                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7994  1D99  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7995                           
  7996                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
  7997  1D9A  0876               	movf	setDimmerLights_DimmingRun@lights,w
  7998  1D9B  319C  2487         	fcall	_DimmerLights_SelectPointer
  7999                           
  8000                           ;Dimmer_B1.c: 1081: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8001  1D9D  0874               	movf	setDimmerLights_DimmingRun@command,w
  8002  1D9E  3A01               	xorlw	1
  8003  1D9F  3000               	movlw	0
  8004  1DA0  1903               	skipnz
  8005  1DA1  3001               	movlw	1
  8006  1DA2  00F5               	movwf	??_setDimmerLights_DimmingRun
  8007  1DA3  0A7B               	incf	_DimmerLights,w
  8008  1DA4  0086               	movwf	6
  8009  1DA5  3001               	movlw	1	; select bank2/3
  8010  1DA6  0087               	movwf	7
  8011  1DA7  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8012  1DA8  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8013  1DA9  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8014  1DAA  0801               	movf	1,w
  8015  1DAB  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8016  1DAC  39BF               	andlw	-65
  8017  1DAD  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8018  1DAE  0081               	movwf	1
  8019  1DAF  0008               	return
  8020  1DB0                     __end_of_setDimmerLights_DimmingRun:	
  8021                           
  8022                           	psect	text32
  8023  1C53                     __ptext32:	
  8024 ;; *************** function _getRF_KeyStatus *****************
  8025 ;; Defined at:
  8026 ;;		line 166 in file "../src/RF_Control_B1.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  key             1    3[COMMON] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      unsigned char 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;Total ram usage:        3 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    3
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_setRF_Main
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           
  8055                           ;psect for function _getRF_KeyStatus
  8056  1C53                     _getRF_KeyStatus:	
  8057                           
  8058                           ;RF_Control_B1.c: 167: char key = 0;
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8062  1C53  01F3               	clrf	getRF_KeyStatus@key
  8063                           
  8064                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8065  1C54  01F4               	clrf	_getRF_KeyStatus$5569
  8066  1C55  0AF4               	incf	_getRF_KeyStatus$5569,f
  8067  1C56  0020               	movlb	0	; select bank0
  8068  1C57  1F0C               	btfss	12,6	;volatile
  8069  1C58  1A0C               	btfsc	12,4	;volatile
  8070  1C59  2C5E               	goto	l7544
  8071  1C5A  1C0C               	btfss	12,0	;volatile
  8072  1C5B  188D               	btfsc	13,1	;volatile
  8073  1C5C  2C5E               	goto	l7544
  8074  1C5D  01F4               	clrf	_getRF_KeyStatus$5569
  8075  1C5E                     l7544:	
  8076  1C5E  0874               	movf	_getRF_KeyStatus$5569,w
  8077  1C5F  00F2               	movwf	??_getRF_KeyStatus
  8078  1C60  0872               	movf	??_getRF_KeyStatus,w
  8079  1C61  00F3               	movwf	getRF_KeyStatus@key
  8080                           
  8081                           ;RF_Control_B1.c: 179: return key;
  8082  1C62  0873               	movf	getRF_KeyStatus@key,w
  8083  1C63  0008               	return
  8084  1C64                     __end_of_getRF_KeyStatus:	
  8085                           
  8086                           	psect	text33
  8087  1C01                     __ptext33:	
  8088 ;; *************** function _getBuz_GO *****************
  8089 ;; Defined at:
  8090 ;;		line 82 in file "../src/Buzzer_B1.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;		None
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  i               2    6[COMMON] int 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  2    2[COMMON] int 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;Total ram usage:        6 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    3
  8111 ;; This function calls:
  8112 ;;		Nothing
  8113 ;; This function is called by:
  8114 ;;		_setRF_Main
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _getBuz_GO
  8120  1C01                     _getBuz_GO:	
  8121                           
  8122                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8126  1C01  0021               	movlb	1	; select bank1
  8127  1C02  0C3B               	rrf	_Buz1^(0+128),w
  8128  1C03  3901               	andlw	1
  8129  1C04  00F4               	movwf	??_getBuz_GO
  8130  1C05  01F5               	clrf	??_getBuz_GO+1
  8131  1C06  0874               	movf	??_getBuz_GO,w
  8132  1C07  00F6               	movwf	getBuz_GO@i
  8133  1C08  0875               	movf	??_getBuz_GO+1,w
  8134  1C09  00F7               	movwf	getBuz_GO@i+1
  8135                           
  8136                           ;Buzzer_B1.c: 84: return i;
  8137  1C0A  0877               	movf	getBuz_GO@i+1,w
  8138  1C0B  01F3               	clrf	?_getBuz_GO+1
  8139  1C0C  07F3               	addwf	?_getBuz_GO+1,f
  8140  1C0D  0876               	movf	getBuz_GO@i,w
  8141  1C0E  01F2               	clrf	?_getBuz_GO
  8142  1C0F  07F2               	addwf	?_getBuz_GO,f
  8143  1C10  0008               	return
  8144  1C11                     __end_of_getBuz_GO:	
  8145                           
  8146                           	psect	text34
  8147  1BA3                     __ptext34:	
  8148 ;; *************** function _RF_RxDisable *****************
  8149 ;; Defined at:
  8150 ;;		line 154 in file "../src/RF_Control_B1.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;		None
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;		None
  8155 ;; Return value:  Size  Location     Type
  8156 ;;		None               void
  8157 ;; Registers used:
  8158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;Total ram usage:        0 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    5
  8171 ;; This function calls:
  8172 ;;		_CC2500_WriteCommand
  8173 ;; This function is called by:
  8174 ;;		_setRF_Main
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _RF_RxDisable
  8180  1BA3                     _RF_RxDisable:	
  8181                           
  8182                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8186  1BA3  0021               	movlb	1	; select bank1
  8187  1BA4  18A0               	btfsc	_RF1^(0+128),1
  8188  1BA5  2BA8               	goto	l2395
  8189  1BA6  1DA0               	btfss	_RF1^(0+128),3
  8190  1BA7  0008               	return
  8191  1BA8                     l2395:	
  8192                           
  8193                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8194  1BA8  11A0               	bcf	_RF1^(0+128),3
  8195                           
  8196                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8197  1BA9  10A0               	bcf	_RF1^(0+128),1
  8198                           
  8199                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8200  1BAA  3036               	movlw	54
  8201  1BAB  319D  25E2  319B   	fcall	_CC2500_WriteCommand
  8202                           
  8203                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8204  1BAE  303A               	movlw	58
  8205  1BAF  319D  25E2         	fcall	_CC2500_WriteCommand
  8206  1BB1  0008               	return
  8207  1BB2                     __end_of_RF_RxDisable:	
  8208                           
  8209                           	psect	text35
  8210  0906                     __ptext35:	
  8211 ;; *************** function _CC2500_TxData *****************
  8212 ;; Defined at:
  8213 ;;		line 32 in file "../src/CC2500_B1.c"
  8214 ;; Parameters:    Size  Location     Type
  8215 ;;		None
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  loop_e          1    7[COMMON] unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;		None               void
  8220 ;; Registers used:
  8221 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;Total ram usage:        2 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; Hardware stack levels required when called:    5
  8234 ;; This function calls:
  8235 ;;		_CC2500_WriteByte
  8236 ;;		_CC2500_WriteCommand
  8237 ;;		_RF_Timeout_Counter
  8238 ;;		_setRF_TimeoutCleared
  8239 ;; This function is called by:
  8240 ;;		_setRF_Main
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           
  8245                           ;psect for function _CC2500_TxData
  8246  0906                     _CC2500_TxData:	
  8247                           
  8248                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8249                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8253  0906  3036               	movlw	54
  8254  0907  319D  25E2  3189   	fcall	_CC2500_WriteCommand
  8255                           
  8256                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8257  090A  303B               	movlw	59
  8258  090B  319D  25E2  3189   	fcall	_CC2500_WriteCommand
  8259                           
  8260                           ;CC2500_B1.c: 38: RC4 = 0;
  8261  090E  0020               	movlb	0	; select bank0
  8262  090F  120E               	bcf	14,4	;volatile
  8263                           
  8264                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8265  0910  307F               	movlw	127
  8266  0911  00F6               	movwf	??_CC2500_TxData
  8267  0912  0876               	movf	??_CC2500_TxData,w
  8268  0913  0021               	movlb	1	; select bank1
  8269  0914  00E0               	movwf	_SPI0Buffer^(0+128)
  8270                           
  8271                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8272  0915  2919               	goto	l9400
  8273  0916                     l9398:	
  8274                           
  8275                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8276  0916  319C  24EC  3189   	fcall	_RF_Timeout_Counter
  8277  0919                     l9400:	
  8278  0919  0020               	movlb	0	; select bank0
  8279  091A  1D0E               	btfss	14,2	;volatile
  8280  091B  291F               	goto	l9404
  8281  091C  0021               	movlb	1	; select bank1
  8282  091D  1F21               	btfss	(_RF1^(0+128)+1),6
  8283  091E  2916               	goto	l9398
  8284  091F                     l9404:	
  8285                           
  8286                           ;CC2500_B1.c: 42: };
  8287                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8288  091F  319A  2267  3189   	fcall	_setRF_TimeoutCleared
  8289                           
  8290                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8291  0922  319D  25B0  3189   	fcall	_CC2500_WriteByte
  8292                           
  8293                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8294  0925  0021               	movlb	1	; select bank1
  8295  0926  0862               	movf	_Tx_Length^(0+128),w
  8296  0927  00F6               	movwf	??_CC2500_TxData
  8297  0928  0876               	movf	??_CC2500_TxData,w
  8298  0929  00E0               	movwf	_SPI0Buffer^(0+128)
  8299                           
  8300                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8301  092A  319D  25B0  3189   	fcall	_CC2500_WriteByte
  8302                           
  8303                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8304  092D  01F7               	clrf	CC2500_TxData@loop_e
  8305  092E                     l9418:	
  8306  092E  0021               	movlb	1	; select bank1
  8307  092F  0862               	movf	_Tx_Length^(0+128),w
  8308  0930  0277               	subwf	CC2500_TxData@loop_e,w
  8309  0931  1803               	btfsc	3,0
  8310  0932  2945               	goto	l259
  8311                           
  8312                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8313  0933  0877               	movf	CC2500_TxData@loop_e,w
  8314  0934  3EA0               	addlw	_RF_Data& (0+255)
  8315  0935  0086               	movwf	6
  8316  0936  3001               	movlw	1	; select bank3/4
  8317  0937  0087               	movwf	7
  8318  0938  0801               	movf	1,w
  8319  0939  00F6               	movwf	??_CC2500_TxData
  8320  093A  0876               	movf	??_CC2500_TxData,w
  8321  093B  0021               	movlb	1	; select bank1
  8322  093C  00E0               	movwf	_SPI0Buffer^(0+128)
  8323                           
  8324                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8325  093D  319D  25B0  3189   	fcall	_CC2500_WriteByte
  8326  0940  3001               	movlw	1
  8327  0941  00F6               	movwf	??_CC2500_TxData
  8328  0942  0876               	movf	??_CC2500_TxData,w
  8329  0943  07F7               	addwf	CC2500_TxData@loop_e,f
  8330  0944  292E               	goto	l9418
  8331  0945                     l259:	
  8332                           
  8333                           ;CC2500_B1.c: 51: }
  8334                           ;CC2500_B1.c: 52: RC4 = 1;
  8335  0945  0020               	movlb	0	; select bank0
  8336  0946  160E               	bsf	14,4	;volatile
  8337                           
  8338                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8339  0947  3035               	movlw	53
  8340  0948  319D  25E2  3189   	fcall	_CC2500_WriteCommand
  8341                           
  8342                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8343  094B  294F               	goto	l9424
  8344  094C                     l9422:	
  8345                           
  8346                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8347  094C  319C  24EC  3189   	fcall	_RF_Timeout_Counter
  8348  094F                     l9424:	
  8349  094F  0020               	movlb	0	; select bank0
  8350  0950  180D               	btfsc	13,0	;volatile
  8351  0951  2955               	goto	l9428
  8352  0952  0021               	movlb	1	; select bank1
  8353  0953  1F21               	btfss	(_RF1^(0+128)+1),6
  8354  0954  294C               	goto	l9422
  8355  0955                     l9428:	
  8356                           
  8357                           ;CC2500_B1.c: 56: };
  8358                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8359  0955  319A  2267  3189   	fcall	_setRF_TimeoutCleared
  8360                           
  8361                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8362  0958  295C               	goto	l9432
  8363  0959                     l9430:	
  8364                           
  8365                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8366  0959  319C  24EC  3189   	fcall	_RF_Timeout_Counter
  8367  095C                     l9432:	
  8368  095C  0020               	movlb	0	; select bank0
  8369  095D  1C0D               	btfss	13,0	;volatile
  8370  095E  2962               	goto	l9436
  8371  095F  0021               	movlb	1	; select bank1
  8372  0960  1F21               	btfss	(_RF1^(0+128)+1),6
  8373  0961  2959               	goto	l9430
  8374  0962                     l9436:	
  8375                           
  8376                           ;CC2500_B1.c: 61: };
  8377                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8378  0962  319A  2267  3189   	fcall	_setRF_TimeoutCleared
  8379                           
  8380                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8381  0965  3036               	movlw	54
  8382  0966  319D  25E2  3189   	fcall	_CC2500_WriteCommand
  8383                           
  8384                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8385  0969  303B               	movlw	59
  8386  096A  319D  25E2         	fcall	_CC2500_WriteCommand
  8387                           
  8388                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8389  096C  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8390  096D  0008               	return
  8391  096E                     __end_of_CC2500_TxData:	
  8392                           
  8393                           	psect	text36
  8394  173B                     __ptext36:	
  8395 ;; *************** function _CC2500_RxData *****************
  8396 ;; Defined at:
  8397 ;;		line 73 in file "../src/CC2500_B1.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  loop_f          1    7[COMMON] unsigned char 
  8402 ;; Return value:  Size  Location     Type
  8403 ;;		None               void
  8404 ;; Registers used:
  8405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;Total ram usage:        2 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    5
  8418 ;; This function calls:
  8419 ;;		_CC2500_ReadByte
  8420 ;;		_CC2500_ReadStatus
  8421 ;;		_CC2500_WriteByte
  8422 ;;		_CC2500_WriteCommand
  8423 ;;		_RF_Timeout_Counter
  8424 ;;		_setRF_TimeoutCleared
  8425 ;; This function is called by:
  8426 ;;		_setRF_Main
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           
  8431                           ;psect for function _CC2500_RxData
  8432  173B                     _CC2500_RxData:	
  8433                           
  8434                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8435                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8439  173B  0020               	movlb	0	; select bank0
  8440  173C  180D               	btfsc	13,0	;volatile
  8441  173D  0008               	return
  8442                           
  8443                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8444  173E  303B               	movlw	59
  8445  173F  319F  276D  3197   	fcall	_CC2500_ReadStatus
  8446                           
  8447                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8448  1742  0021               	movlb	1	; select bank1
  8449  1743  0865               	movf	_s_data^(0+128),w
  8450  1744  1903               	btfsc	3,2
  8451  1745  0008               	return
  8452                           
  8453                           ;CC2500_B1.c: 90: RC4 = 0;
  8454  1746  0020               	movlb	0	; select bank0
  8455  1747  120E               	bcf	14,4	;volatile
  8456                           
  8457                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8458  1748  30FF               	movlw	255
  8459  1749  00F6               	movwf	??_CC2500_RxData
  8460  174A  0876               	movf	??_CC2500_RxData,w
  8461  174B  0021               	movlb	1	; select bank1
  8462  174C  00E0               	movwf	_SPI0Buffer^(0+128)
  8463                           
  8464                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8465  174D  2F51               	goto	l9456
  8466  174E                     l9454:	
  8467                           
  8468                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8469  174E  319C  24EC  3197   	fcall	_RF_Timeout_Counter
  8470  1751                     l9456:	
  8471  1751  0020               	movlb	0	; select bank0
  8472  1752  1D0E               	btfss	14,2	;volatile
  8473  1753  2F57               	goto	l9460
  8474  1754  0021               	movlb	1	; select bank1
  8475  1755  1F21               	btfss	(_RF1^(0+128)+1),6
  8476  1756  2F4E               	goto	l9454
  8477  1757                     l9460:	
  8478                           
  8479                           ;CC2500_B1.c: 95: };
  8480                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8481  1757  319A  2267  3197   	fcall	_setRF_TimeoutCleared
  8482                           
  8483                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8484  175A  319D  25B0  3197   	fcall	_CC2500_WriteByte
  8485                           
  8486                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8487  175D  3190  2066  3197   	fcall	_CC2500_ReadByte
  8488                           
  8489                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8490  1760  0021               	movlb	1	; select bank1
  8491  1761  0860               	movf	_SPI0Buffer^(0+128),w
  8492  1762  00F6               	movwf	??_CC2500_RxData
  8493  1763  0876               	movf	??_CC2500_RxData,w
  8494  1764  00DF               	movwf	_Rx_Length^(0+128)
  8495                           
  8496                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8497  1765  01F7               	clrf	CC2500_RxData@loop_f
  8498  1766                     l9476:	
  8499  1766  085F               	movf	_Rx_Length^(0+128),w
  8500  1767  0277               	subwf	CC2500_RxData@loop_f,w
  8501  1768  1803               	btfsc	3,0
  8502  1769  2F7C               	goto	l9478
  8503                           
  8504                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8505  176A  3190  2066  3197   	fcall	_CC2500_ReadByte
  8506                           
  8507                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8508  176D  0021               	movlb	1	; select bank1
  8509  176E  0860               	movf	_SPI0Buffer^(0+128),w
  8510  176F  00F6               	movwf	??_CC2500_RxData
  8511  1770  0877               	movf	CC2500_RxData@loop_f,w
  8512  1771  3EA0               	addlw	_RF_Data& (0+255)
  8513  1772  0086               	movwf	6
  8514  1773  3001               	movlw	1	; select bank3/4
  8515  1774  0087               	movwf	7
  8516  1775  0876               	movf	??_CC2500_RxData,w
  8517  1776  0081               	movwf	1
  8518  1777  3001               	movlw	1
  8519  1778  00F6               	movwf	??_CC2500_RxData
  8520  1779  0876               	movf	??_CC2500_RxData,w
  8521  177A  07F7               	addwf	CC2500_RxData@loop_f,f
  8522  177B  2F66               	goto	l9476
  8523  177C                     l9478:	
  8524                           
  8525                           ;CC2500_B1.c: 104: }
  8526                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8527  177C  3190  2066  3197   	fcall	_CC2500_ReadByte
  8528                           
  8529                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8530  177F  0021               	movlb	1	; select bank1
  8531  1780  0860               	movf	_SPI0Buffer^(0+128),w
  8532  1781  00F6               	movwf	??_CC2500_RxData
  8533  1782  0876               	movf	??_CC2500_RxData,w
  8534  1783  00DE               	movwf	_RSSI^(0+128)
  8535                           
  8536                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8537  1784  3190  2066  3197   	fcall	_CC2500_ReadByte
  8538                           
  8539                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8540  1787  0021               	movlb	1	; select bank1
  8541  1788  0860               	movf	_SPI0Buffer^(0+128),w
  8542  1789  00F6               	movwf	??_CC2500_RxData
  8543  178A  0876               	movf	??_CC2500_RxData,w
  8544  178B  00D8               	movwf	_CRC^(0+128)
  8545                           
  8546                           ;CC2500_B1.c: 109: RC4 = 1;
  8547  178C  0020               	movlb	0	; select bank0
  8548  178D  160E               	bsf	14,4	;volatile
  8549                           
  8550                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8551  178E  0021               	movlb	1	; select bank1
  8552  178F  1BD8               	btfsc	_CRC^(0+128),7
  8553                           
  8554                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8555  1790  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8556                           
  8557                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8558  1791  11A0               	bcf	_RF1^(0+128),3
  8559                           
  8560                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8561  1792  14A0               	bsf	_RF1^(0+128),1
  8562                           
  8563                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8564  1793  3036               	movlw	54
  8565  1794  319D  25E2  3197   	fcall	_CC2500_WriteCommand
  8566                           
  8567                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8568  1797  303A               	movlw	58
  8569  1798  319D  25E2         	fcall	_CC2500_WriteCommand
  8570  179A  0021               	movlb	1	; select bank1
  8571  179B  0008               	return
  8572  179C                     __end_of_CC2500_RxData:	
  8573                           
  8574                           	psect	text37
  8575  1F6D                     __ptext37:	
  8576 ;; *************** function _CC2500_ReadStatus *****************
  8577 ;; Defined at:
  8578 ;;		line 308 in file "../src/CC2500_B1.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  status_addr     1    wreg     unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  status_addr     1    5[COMMON] unsigned char 
  8583 ;; Return value:  Size  Location     Type
  8584 ;;		None               void
  8585 ;; Registers used:
  8586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8587 ;; Tracked objects:
  8588 ;;		On entry : 0/0
  8589 ;;		On exit  : 0/0
  8590 ;;		Unchanged: 0/0
  8591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;Total ram usage:        2 bytes
  8597 ;; Hardware stack levels used:    1
  8598 ;; Hardware stack levels required when called:    4
  8599 ;; This function calls:
  8600 ;;		_CC2500_ReadByte
  8601 ;;		_CC2500_WriteByte
  8602 ;;		_RF_Timeout_Counter
  8603 ;;		_setRF_TimeoutCleared
  8604 ;; This function is called by:
  8605 ;;		_CC2500_RxData
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _CC2500_ReadStatus
  8611  1F6D                     _CC2500_ReadStatus:	
  8612                           
  8613                           ;incstack = 0
  8614                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8615                           ;CC2500_ReadStatus@status_addr stored from wreg
  8616  1F6D  00F5               	movwf	CC2500_ReadStatus@status_addr
  8617                           
  8618                           ;CC2500_B1.c: 309: RC4 = 0;
  8619  1F6E  0020               	movlb	0	; select bank0
  8620  1F6F  120E               	bcf	14,4	;volatile
  8621                           
  8622                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8623  1F70  0875               	movf	CC2500_ReadStatus@status_addr,w
  8624  1F71  3EC0               	addlw	192
  8625  1F72  00F4               	movwf	??_CC2500_ReadStatus
  8626  1F73  0874               	movf	??_CC2500_ReadStatus,w
  8627  1F74  0021               	movlb	1	; select bank1
  8628  1F75  00E0               	movwf	_SPI0Buffer^(0+128)
  8629                           
  8630                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8631  1F76  2F7A               	goto	l9252
  8632  1F77                     l9250:	
  8633                           
  8634                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8635  1F77  319C  24EC  319F   	fcall	_RF_Timeout_Counter
  8636  1F7A                     l9252:	
  8637  1F7A  0020               	movlb	0	; select bank0
  8638  1F7B  1D0E               	btfss	14,2	;volatile
  8639  1F7C  2F80               	goto	l9256
  8640  1F7D  0021               	movlb	1	; select bank1
  8641  1F7E  1F21               	btfss	(_RF1^(0+128)+1),6
  8642  1F7F  2F77               	goto	l9250
  8643  1F80                     l9256:	
  8644                           
  8645                           ;CC2500_B1.c: 314: };
  8646                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8647  1F80  319A  2267  319F   	fcall	_setRF_TimeoutCleared
  8648                           
  8649                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8650  1F83  319D  25B0  319F   	fcall	_CC2500_WriteByte
  8651                           
  8652                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8653  1F86  3190  2066         	fcall	_CC2500_ReadByte
  8654                           
  8655                           ;CC2500_B1.c: 319: RC4 = 1;
  8656  1F88  0020               	movlb	0	; select bank0
  8657  1F89  160E               	bsf	14,4	;volatile
  8658                           
  8659                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8660  1F8A  0021               	movlb	1	; select bank1
  8661  1F8B  0860               	movf	_SPI0Buffer^(0+128),w
  8662  1F8C  00F4               	movwf	??_CC2500_ReadStatus
  8663  1F8D  0874               	movf	??_CC2500_ReadStatus,w
  8664  1F8E  00E5               	movwf	_s_data^(0+128)
  8665  1F8F  0008               	return
  8666  1F90                     __end_of_CC2500_ReadStatus:	
  8667                           
  8668                           	psect	text38
  8669  1066                     __ptext38:	
  8670 ;; *************** function _CC2500_ReadByte *****************
  8671 ;; Defined at:
  8672 ;;		line 242 in file "../src/CC2500_B1.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  loop_b          1    3[COMMON] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;		None               void
  8679 ;; Registers used:
  8680 ;;		wreg, status,2, status,0
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:        2 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    3
  8693 ;; This function calls:
  8694 ;;		Nothing
  8695 ;; This function is called by:
  8696 ;;		_CC2500_RxData
  8697 ;;		_CC2500_ReadStatus
  8698 ;;		_CC2500_ReadREG
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           
  8703                           ;psect for function _CC2500_ReadByte
  8704  1066                     _CC2500_ReadByte:	
  8705                           
  8706                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8707                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8708                           
  8709                           ;incstack = 0
  8710                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8711  1066  01F3               	clrf	CC2500_ReadByte@loop_b
  8712  1067                     L3:	
  8713  1067  3008               	movlw	8
  8714  1068  0273               	subwf	CC2500_ReadByte@loop_b,w
  8715  1069  1803               	btfsc	3,0
  8716  106A  0008               	return
  8717                           
  8718                           ;CC2500_B1.c: 245: RC1 = 1;
  8719  106B  0020               	movlb	0	; select bank0
  8720  106C  148E               	bsf	14,1	;volatile
  8721                           
  8722                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8723  106D  1003               	clrc
  8724  106E  0021               	movlb	1	; select bank1
  8725  106F  0DE0               	rlf	_SPI0Buffer^(0+128),f
  8726                           
  8727                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8728  1070  0020               	movlb	0	; select bank0
  8729  1071  1D0E               	btfss	14,2	;volatile
  8730  1072  2876               	goto	l6802
  8731                           
  8732                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8733  1073  0021               	movlb	1	; select bank1
  8734  1074  1460               	bsf	_SPI0Buffer^(0+128),0
  8735  1075  287B               	goto	l6804
  8736  1076                     l6802:	
  8737                           
  8738                           ;CC2500_B1.c: 249: else
  8739                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8740  1076  30FE               	movlw	254
  8741  1077  00F2               	movwf	??_CC2500_ReadByte
  8742  1078  0872               	movf	??_CC2500_ReadByte,w
  8743  1079  0021               	movlb	1	; select bank1
  8744  107A  05E0               	andwf	_SPI0Buffer^(0+128),f
  8745  107B                     l6804:	
  8746                           
  8747                           ;CC2500_B1.c: 251: RC1 = 0;
  8748  107B  0020               	movlb	0	; select bank0
  8749  107C  108E               	bcf	14,1	;volatile
  8750  107D  3001               	movlw	1
  8751  107E  00F2               	movwf	??_CC2500_ReadByte
  8752  107F  0872               	movf	??_CC2500_ReadByte,w
  8753  1080  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8754  1081  2867               	goto	L3
  8755  1082                     __end_of_CC2500_ReadByte:	
  8756                           
  8757                           	psect	text39
  8758  1D01                     __ptext39:	
  8759 ;; *************** function _CC2500_PowerOnInitial *****************
  8760 ;; Defined at:
  8761 ;;		line 126 in file "../src/CC2500_B1.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;		None
  8766 ;; Return value:  Size  Location     Type
  8767 ;;		None               void
  8768 ;; Registers used:
  8769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        0 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    6
  8782 ;; This function calls:
  8783 ;;		_CC2500_ClearRXFIFO
  8784 ;;		_CC2500_ClearTXFIFO
  8785 ;;		_CC2500_FrequencyCabr
  8786 ;;		_CC2500_InitPATable
  8787 ;;		_CC2500_InitSetREG
  8788 ;;		_CC2500_PowerRST
  8789 ;;		_CC2500_SIDLEMode
  8790 ;; This function is called by:
  8791 ;;		_main
  8792 ;;		_setRF_Main
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _CC2500_PowerOnInitial
  8798  1D01                     _CC2500_PowerOnInitial:	
  8799                           
  8800                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8804  1D01  3193  2323  319D   	fcall	_CC2500_PowerRST
  8805                           
  8806                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8807  1D04  3190  20FE  319D   	fcall	_CC2500_InitSetREG
  8808                           
  8809                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8810  1D07  319E  266B  319D   	fcall	_CC2500_InitPATable
  8811                           
  8812                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8813  1D0A  319A  226F  319D   	fcall	_CC2500_ClearTXFIFO
  8814                           
  8815                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8816  1D0D  319A  226B  319D   	fcall	_CC2500_ClearRXFIFO
  8817                           
  8818                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8819  1D10  319B  2309  319D   	fcall	_CC2500_FrequencyCabr
  8820                           
  8821                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8822  1D13  3188  2000         	fcall	_CC2500_SIDLEMode
  8823  1D15  0008               	return
  8824  1D16                     __end_of_CC2500_PowerOnInitial:	
  8825                           
  8826                           	psect	text40
  8827  0800                     __ptext40:	
  8828 ;; *************** function _CC2500_SIDLEMode *****************
  8829 ;; Defined at:
  8830 ;;		line 216 in file "../src/CC2500_B1.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;		None
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;Total ram usage:        0 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    5
  8851 ;; This function calls:
  8852 ;;		_CC2500_WriteCommand
  8853 ;; This function is called by:
  8854 ;;		_CC2500_PowerOnInitial
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _CC2500_SIDLEMode
  8860  0800                     _CC2500_SIDLEMode:	
  8861                           
  8862                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8866  0800  3036               	movlw	54
  8867  0801  319D  25E2         	fcall	_CC2500_WriteCommand
  8868  0803  0008               	return
  8869  0804                     __end_of_CC2500_SIDLEMode:	
  8870                           
  8871                           	psect	text41
  8872  1323                     __ptext41:	
  8873 ;; *************** function _CC2500_PowerRST *****************
  8874 ;; Defined at:
  8875 ;;		line 139 in file "../src/CC2500_B1.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        1 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    4
  8896 ;; This function calls:
  8897 ;;		_CC2500_WriteByte
  8898 ;;		_DelayTime_1us
  8899 ;;		_RF_Timeout_Counter
  8900 ;;		_setRF_TimeoutCleared
  8901 ;; This function is called by:
  8902 ;;		_CC2500_PowerOnInitial
  8903 ;; This function uses a non-reentrant model
  8904 ;;
  8905                           
  8906                           
  8907                           ;psect for function _CC2500_PowerRST
  8908  1323                     _CC2500_PowerRST:	
  8909                           
  8910                           ;CC2500_B1.c: 140: RC1 = 0;
  8911                           
  8912                           ;incstack = 0
  8913                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8914  1323  0020               	movlb	0	; select bank0
  8915  1324  108E               	bcf	14,1	;volatile
  8916                           
  8917                           ;CC2500_B1.c: 141: RC0 = 0;
  8918  1325  100E               	bcf	14,0	;volatile
  8919                           
  8920                           ;CC2500_B1.c: 142: RC4 = 1;
  8921  1326  160E               	bsf	14,4	;volatile
  8922                           
  8923                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8924  1327  300A               	movlw	10
  8925  1328  00F2               	movwf	DelayTime_1us@count
  8926  1329  3000               	movlw	0
  8927  132A  00F3               	movwf	DelayTime_1us@count+1
  8928  132B  319F  27B5  3193   	fcall	_DelayTime_1us
  8929                           
  8930                           ;CC2500_B1.c: 144: RC4 = 0;
  8931  132E  0020               	movlb	0	; select bank0
  8932  132F  120E               	bcf	14,4	;volatile
  8933                           
  8934                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8935  1330  300A               	movlw	10
  8936  1331  00F2               	movwf	DelayTime_1us@count
  8937  1332  3000               	movlw	0
  8938  1333  00F3               	movwf	DelayTime_1us@count+1
  8939  1334  319F  27B5  3193   	fcall	_DelayTime_1us
  8940                           
  8941                           ;CC2500_B1.c: 146: RC4 = 1;
  8942  1337  0020               	movlb	0	; select bank0
  8943  1338  160E               	bsf	14,4	;volatile
  8944                           
  8945                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8946  1339  3028               	movlw	40
  8947  133A  00F2               	movwf	DelayTime_1us@count
  8948  133B  3000               	movlw	0
  8949  133C  00F3               	movwf	DelayTime_1us@count+1
  8950  133D  319F  27B5  3193   	fcall	_DelayTime_1us
  8951                           
  8952                           ;CC2500_B1.c: 148: RC4 = 0;
  8953  1340  0020               	movlb	0	; select bank0
  8954  1341  120E               	bcf	14,4	;volatile
  8955                           
  8956                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8957  1342  3030               	movlw	48
  8958  1343  00F8               	movwf	??_CC2500_PowerRST
  8959  1344  0878               	movf	??_CC2500_PowerRST,w
  8960  1345  0021               	movlb	1	; select bank1
  8961  1346  00E0               	movwf	_SPI0Buffer^(0+128)
  8962                           
  8963                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8964  1347  2B4B               	goto	l9280
  8965  1348                     l9278:	
  8966                           
  8967                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8968  1348  319C  24EC  3193   	fcall	_RF_Timeout_Counter
  8969  134B                     l9280:	
  8970  134B  0020               	movlb	0	; select bank0
  8971  134C  1D0E               	btfss	14,2	;volatile
  8972  134D  2B51               	goto	l9284
  8973  134E  0021               	movlb	1	; select bank1
  8974  134F  1F21               	btfss	(_RF1^(0+128)+1),6
  8975  1350  2B48               	goto	l9278
  8976  1351                     l9284:	
  8977                           
  8978                           ;CC2500_B1.c: 152: };
  8979                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8980  1351  319A  2267  3193   	fcall	_setRF_TimeoutCleared
  8981                           
  8982                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8983  1354  319D  25B0  3193   	fcall	_CC2500_WriteByte
  8984                           
  8985                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8986  1357  2B5B               	goto	l9290
  8987  1358                     l9288:	
  8988                           
  8989                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8990  1358  319C  24EC  3193   	fcall	_RF_Timeout_Counter
  8991  135B                     l9290:	
  8992  135B  0020               	movlb	0	; select bank0
  8993  135C  1D0E               	btfss	14,2	;volatile
  8994  135D  2B61               	goto	l9294
  8995  135E  0021               	movlb	1	; select bank1
  8996  135F  1F21               	btfss	(_RF1^(0+128)+1),6
  8997  1360  2B58               	goto	l9288
  8998  1361                     l9294:	
  8999                           
  9000                           ;CC2500_B1.c: 157: };
  9001                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9002  1361  319A  2267         	fcall	_setRF_TimeoutCleared
  9003                           
  9004                           ;CC2500_B1.c: 159: RC0 = 0;
  9005  1363  0020               	movlb	0	; select bank0
  9006  1364  100E               	bcf	14,0	;volatile
  9007                           
  9008                           ;CC2500_B1.c: 160: RC4 = 1;
  9009  1365  160E               	bsf	14,4	;volatile
  9010  1366  0008               	return
  9011  1367                     __end_of_CC2500_PowerRST:	
  9012                           
  9013                           	psect	text42
  9014  10FE                     __ptext42:	
  9015 ;; *************** function _CC2500_InitSetREG *****************
  9016 ;; Defined at:
  9017 ;;		line 166 in file "../src/CC2500_B1.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9022 ;;  temp2           1    1[BANK0 ] unsigned char 
  9023 ;;  temp1           1    0[BANK0 ] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;		None               void
  9026 ;; Registers used:
  9027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;Total ram usage:        4 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    5
  9040 ;; This function calls:
  9041 ;;		_CC2500_WriteREG
  9042 ;; This function is called by:
  9043 ;;		_CC2500_PowerOnInitial
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           
  9048                           ;psect for function _CC2500_InitSetREG
  9049  10FE                     _CC2500_InitSetREG:	
  9050                           
  9051                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9052                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9053                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9057  10FE  0020               	movlb	0	; select bank0
  9058  10FF  01A2               	clrf	CC2500_InitSetREG@loop_c
  9059  1100                     L4:	
  9060  1100  302F               	movlw	47
  9061  1101  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9062  1102  1803               	btfsc	3,0
  9063  1103  0008               	return
  9064                           
  9065                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9066  1104  0822               	movf	CC2500_InitSetREG@loop_c,w
  9067  1105  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9068  1106  0084               	movwf	4
  9069  1107  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9070  1108  1803               	skipnc
  9071  1109  3E01               	addlw	1
  9072  110A  0085               	movwf	5
  9073  110B  0800               	movf	0,w	;code access
  9074  110C  00F7               	movwf	??_CC2500_InitSetREG
  9075  110D  0877               	movf	??_CC2500_InitSetREG,w
  9076  110E  00A0               	movwf	CC2500_InitSetREG@temp1
  9077                           
  9078                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9079  110F  0822               	movf	CC2500_InitSetREG@loop_c,w
  9080  1110  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9081  1111  0084               	movwf	4
  9082  1112  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9083  1113  1803               	skipnc
  9084  1114  3E01               	addlw	1
  9085  1115  0085               	movwf	5
  9086  1116  0800               	movf	0,w	;code access
  9087  1117  00F7               	movwf	??_CC2500_InitSetREG
  9088  1118  0877               	movf	??_CC2500_InitSetREG,w
  9089  1119  00A1               	movwf	CC2500_InitSetREG@temp2
  9090                           
  9091                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9092  111A  0821               	movf	CC2500_InitSetREG@temp2,w
  9093  111B  00F7               	movwf	??_CC2500_InitSetREG
  9094  111C  0877               	movf	??_CC2500_InitSetREG,w
  9095  111D  00F4               	movwf	CC2500_WriteREG@value
  9096  111E  0820               	movf	CC2500_InitSetREG@temp1,w
  9097  111F  319F  274B  3190   	fcall	_CC2500_WriteREG
  9098  1122  3001               	movlw	1
  9099  1123  00F7               	movwf	??_CC2500_InitSetREG
  9100  1124  0877               	movf	??_CC2500_InitSetREG,w
  9101  1125  0020               	movlb	0	; select bank0
  9102  1126  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9103  1127  2900               	goto	L4
  9104  1128                     __end_of_CC2500_InitSetREG:	
  9105                           
  9106                           	psect	text43
  9107  1E6B                     __ptext43:	
  9108 ;; *************** function _CC2500_InitPATable *****************
  9109 ;; Defined at:
  9110 ;;		line 181 in file "../src/CC2500_B1.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;		None
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;  loop_d          1    9[COMMON] unsigned char 
  9115 ;;  temp            1    8[COMMON] unsigned char 
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;Total ram usage:        3 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    5
  9132 ;; This function calls:
  9133 ;;		_CC2500_WriteREG
  9134 ;; This function is called by:
  9135 ;;		_CC2500_PowerOnInitial
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           
  9140                           ;psect for function _CC2500_InitPATable
  9141  1E6B                     _CC2500_InitPATable:	
  9142                           
  9143                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9144                           ;CC2500_B1.c: 183: unsigned char temp;
  9145                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9146                           
  9147                           ;incstack = 0
  9148                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9149  1E6B  01F9               	clrf	CC2500_InitPATable@loop_d
  9150  1E6C                     L5:	
  9151  1E6C  3008               	movlw	8
  9152  1E6D  0279               	subwf	CC2500_InitPATable@loop_d,w
  9153  1E6E  1803               	btfsc	3,0
  9154  1E6F  0008               	return
  9155                           
  9156                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9157  1E70  0879               	movf	CC2500_InitPATable@loop_d,w
  9158  1E71  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9159  1E72  0084               	movwf	4
  9160  1E73  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9161  1E74  1803               	skipnc
  9162  1E75  3E01               	addlw	1
  9163  1E76  0085               	movwf	5
  9164  1E77  0800               	movf	0,w	;code access
  9165  1E78  00F7               	movwf	??_CC2500_InitPATable
  9166  1E79  0877               	movf	??_CC2500_InitPATable,w
  9167  1E7A  00F8               	movwf	CC2500_InitPATable@temp
  9168                           
  9169                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9170  1E7B  0878               	movf	CC2500_InitPATable@temp,w
  9171  1E7C  00F7               	movwf	??_CC2500_InitPATable
  9172  1E7D  0877               	movf	??_CC2500_InitPATable,w
  9173  1E7E  00F4               	movwf	CC2500_WriteREG@value
  9174  1E7F  303E               	movlw	62
  9175  1E80  319F  274B  319E   	fcall	_CC2500_WriteREG
  9176  1E83  3001               	movlw	1
  9177  1E84  00F7               	movwf	??_CC2500_InitPATable
  9178  1E85  0877               	movf	??_CC2500_InitPATable,w
  9179  1E86  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9180  1E87  2E6C               	goto	L5
  9181  1E88                     __end_of_CC2500_InitPATable:	
  9182                           
  9183                           	psect	text44
  9184  1F4B                     __ptext44:	
  9185 ;; *************** function _CC2500_WriteREG *****************
  9186 ;; Defined at:
  9187 ;;		line 258 in file "../src/CC2500_B1.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  w_addr          1    wreg     unsigned char 
  9190 ;;  value           1    4[COMMON] unsigned char 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  w_addr          1    6[COMMON] unsigned char 
  9193 ;; Return value:  Size  Location     Type
  9194 ;;		None               void
  9195 ;; Registers used:
  9196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9202 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;Total ram usage:        3 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    4
  9209 ;; This function calls:
  9210 ;;		_CC2500_WriteByte
  9211 ;;		_RF_Timeout_Counter
  9212 ;;		_setRF_TimeoutCleared
  9213 ;; This function is called by:
  9214 ;;		_CC2500_InitSetREG
  9215 ;;		_CC2500_InitPATable
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _CC2500_WriteREG
  9221  1F4B                     _CC2500_WriteREG:	
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9225                           ;CC2500_WriteREG@w_addr stored from wreg
  9226  1F4B  00F6               	movwf	CC2500_WriteREG@w_addr
  9227                           
  9228                           ;CC2500_B1.c: 259: RC4 = 0;
  9229  1F4C  0020               	movlb	0	; select bank0
  9230  1F4D  120E               	bcf	14,4	;volatile
  9231                           
  9232                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9233  1F4E  0876               	movf	CC2500_WriteREG@w_addr,w
  9234  1F4F  00F5               	movwf	??_CC2500_WriteREG
  9235  1F50  0875               	movf	??_CC2500_WriteREG,w
  9236  1F51  0021               	movlb	1	; select bank1
  9237  1F52  00E0               	movwf	_SPI0Buffer^(0+128)
  9238                           
  9239                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9240  1F53  2F57               	goto	l9178
  9241  1F54                     l9176:	
  9242                           
  9243                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9244  1F54  319C  24EC  319F   	fcall	_RF_Timeout_Counter
  9245  1F57                     l9178:	
  9246  1F57  0020               	movlb	0	; select bank0
  9247  1F58  1D0E               	btfss	14,2	;volatile
  9248  1F59  2F5D               	goto	l9182
  9249  1F5A  0021               	movlb	1	; select bank1
  9250  1F5B  1F21               	btfss	(_RF1^(0+128)+1),6
  9251  1F5C  2F54               	goto	l9176
  9252  1F5D                     l9182:	
  9253                           
  9254                           ;CC2500_B1.c: 263: };
  9255                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9256  1F5D  319A  2267  319F   	fcall	_setRF_TimeoutCleared
  9257                           
  9258                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9259  1F60  319D  25B0  319F   	fcall	_CC2500_WriteByte
  9260                           
  9261                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9262  1F63  0874               	movf	CC2500_WriteREG@value,w
  9263  1F64  00F5               	movwf	??_CC2500_WriteREG
  9264  1F65  0875               	movf	??_CC2500_WriteREG,w
  9265  1F66  0021               	movlb	1	; select bank1
  9266  1F67  00E0               	movwf	_SPI0Buffer^(0+128)
  9267                           
  9268                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9269  1F68  319D  25B0         	fcall	_CC2500_WriteByte
  9270                           
  9271                           ;CC2500_B1.c: 269: RC4 = 1;
  9272  1F6A  0020               	movlb	0	; select bank0
  9273  1F6B  160E               	bsf	14,4	;volatile
  9274  1F6C  0008               	return
  9275  1F6D                     __end_of_CC2500_WriteREG:	
  9276                           
  9277                           	psect	text45
  9278  1B09                     __ptext45:	
  9279 ;; *************** function _CC2500_FrequencyCabr *****************
  9280 ;; Defined at:
  9281 ;;		line 208 in file "../src/CC2500_B1.c"
  9282 ;; Parameters:    Size  Location     Type
  9283 ;;		None
  9284 ;; Auto vars:     Size  Location     Type
  9285 ;;		None
  9286 ;; Return value:  Size  Location     Type
  9287 ;;		None               void
  9288 ;; Registers used:
  9289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9290 ;; Tracked objects:
  9291 ;;		On entry : 0/0
  9292 ;;		On exit  : 0/0
  9293 ;;		Unchanged: 0/0
  9294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;Total ram usage:        0 bytes
  9300 ;; Hardware stack levels used:    1
  9301 ;; Hardware stack levels required when called:    5
  9302 ;; This function calls:
  9303 ;;		_CC2500_WriteCommand
  9304 ;;		_DelayTime_1us
  9305 ;; This function is called by:
  9306 ;;		_CC2500_PowerOnInitial
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           
  9311                           ;psect for function _CC2500_FrequencyCabr
  9312  1B09                     _CC2500_FrequencyCabr:	
  9313                           
  9314                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9315                           
  9316                           ;incstack = 0
  9317                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9318  1B09  3033               	movlw	51
  9319  1B0A  319D  25E2  319B   	fcall	_CC2500_WriteCommand
  9320                           
  9321                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9322  1B0D  30E8               	movlw	232
  9323  1B0E  00F2               	movwf	DelayTime_1us@count
  9324  1B0F  3003               	movlw	3
  9325  1B10  00F3               	movwf	DelayTime_1us@count+1
  9326  1B11  319F  27B5         	fcall	_DelayTime_1us
  9327  1B13  0008               	return
  9328  1B14                     __end_of_CC2500_FrequencyCabr:	
  9329                           
  9330                           	psect	text46
  9331  1FB5                     __ptext46:	
  9332 ;; *************** function _DelayTime_1us *****************
  9333 ;; Defined at:
  9334 ;;		line 327 in file "../src/CC2500_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;  count           2    2[COMMON] int 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;  j               2    6[COMMON] unsigned int 
  9339 ;;  i               2    4[COMMON] unsigned int 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, status,2
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;Total ram usage:        6 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    3
  9356 ;; This function calls:
  9357 ;;		Nothing
  9358 ;; This function is called by:
  9359 ;;		_CC2500_PowerRST
  9360 ;;		_CC2500_FrequencyCabr
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _DelayTime_1us
  9366  1FB5                     _DelayTime_1us:	
  9367                           
  9368                           ;CC2500_B1.c: 328: unsigned int i, j;
  9369                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9370                           
  9371                           ;incstack = 0
  9372                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9373  1FB5  3001               	movlw	1
  9374  1FB6  00F4               	movwf	DelayTime_1us@i
  9375  1FB7  3000               	movlw	0
  9376  1FB8  00F5               	movwf	DelayTime_1us@i+1
  9377  1FB9                     l371:	
  9378  1FB9  0873               	movf	DelayTime_1us@count+1,w
  9379  1FBA  0275               	subwf	DelayTime_1us@i+1,w
  9380  1FBB  1D03               	skipz
  9381  1FBC  2FBF               	goto	u6105
  9382  1FBD  0872               	movf	DelayTime_1us@count,w
  9383  1FBE  0274               	subwf	DelayTime_1us@i,w
  9384  1FBF                     u6105:	
  9385  1FBF  1803               	btfsc	3,0
  9386  1FC0  0008               	return
  9387                           
  9388                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9389  1FC1  01F6               	clrf	DelayTime_1us@j
  9390  1FC2  01F7               	clrf	DelayTime_1us@j+1
  9391  1FC3  3000               	movlw	0
  9392  1FC4  0277               	subwf	DelayTime_1us@j+1,w
  9393  1FC5  3002               	movlw	2
  9394  1FC6  1903               	skipnz
  9395  1FC7  0276               	subwf	DelayTime_1us@j,w
  9396  1FC8  1803               	btfsc	3,0
  9397  1FC9  2FD5               	goto	l6818
  9398  1FCA                     l6816:	
  9399  1FCA  3001               	movlw	1
  9400  1FCB  07F6               	addwf	DelayTime_1us@j,f
  9401  1FCC  3000               	movlw	0
  9402  1FCD  3DF7               	addwfc	DelayTime_1us@j+1,f
  9403  1FCE  3000               	movlw	0
  9404  1FCF  0277               	subwf	DelayTime_1us@j+1,w
  9405  1FD0  3002               	movlw	2
  9406  1FD1  1903               	skipnz
  9407  1FD2  0276               	subwf	DelayTime_1us@j,w
  9408  1FD3  1C03               	skipc
  9409  1FD4  2FCA               	goto	l6816
  9410  1FD5                     l6818:	
  9411  1FD5  3001               	movlw	1
  9412  1FD6  07F4               	addwf	DelayTime_1us@i,f
  9413  1FD7  3000               	movlw	0
  9414  1FD8  3DF5               	addwfc	DelayTime_1us@i+1,f
  9415  1FD9  2FB9               	goto	l371
  9416  1FDA                     __end_of_DelayTime_1us:	
  9417                           
  9418                           	psect	text47
  9419  1A6F                     __ptext47:	
  9420 ;; *************** function _CC2500_ClearTXFIFO *****************
  9421 ;; Defined at:
  9422 ;;		line 194 in file "../src/CC2500_B1.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;		None
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;		None               void
  9429 ;; Registers used:
  9430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;Total ram usage:        0 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    5
  9443 ;; This function calls:
  9444 ;;		_CC2500_WriteCommand
  9445 ;; This function is called by:
  9446 ;;		_CC2500_PowerOnInitial
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _CC2500_ClearTXFIFO
  9452  1A6F                     _CC2500_ClearTXFIFO:	
  9453                           
  9454                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9458  1A6F  303B               	movlw	59
  9459  1A70  319D  25E2         	fcall	_CC2500_WriteCommand
  9460  1A72  0008               	return
  9461  1A73                     __end_of_CC2500_ClearTXFIFO:	
  9462                           
  9463                           	psect	text48
  9464  1A6B                     __ptext48:	
  9465 ;; *************** function _CC2500_ClearRXFIFO *****************
  9466 ;; Defined at:
  9467 ;;		line 201 in file "../src/CC2500_B1.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;		None               void
  9474 ;; Registers used:
  9475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    5
  9488 ;; This function calls:
  9489 ;;		_CC2500_WriteCommand
  9490 ;; This function is called by:
  9491 ;;		_CC2500_PowerOnInitial
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           
  9496                           ;psect for function _CC2500_ClearRXFIFO
  9497  1A6B                     _CC2500_ClearRXFIFO:	
  9498                           
  9499                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9500                           
  9501                           ;incstack = 0
  9502                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9503  1A6B  303A               	movlw	58
  9504  1A6C  319D  25E2         	fcall	_CC2500_WriteCommand
  9505  1A6E  0008               	return
  9506  1A6F                     __end_of_CC2500_ClearRXFIFO:	
  9507                           
  9508                           	psect	text49
  9509  1DE2                     __ptext49:	
  9510 ;; *************** function _CC2500_WriteCommand *****************
  9511 ;; Defined at:
  9512 ;;		line 292 in file "../src/CC2500_B1.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  command         1    wreg     unsigned char 
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  command         1    5[COMMON] unsigned char 
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        2 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; Hardware stack levels required when called:    4
  9533 ;; This function calls:
  9534 ;;		_CC2500_WriteByte
  9535 ;;		_RF_Timeout_Counter
  9536 ;;		_setRF_TimeoutCleared
  9537 ;; This function is called by:
  9538 ;;		_CC2500_TxData
  9539 ;;		_CC2500_RxData
  9540 ;;		_CC2500_ClearTXFIFO
  9541 ;;		_CC2500_ClearRXFIFO
  9542 ;;		_CC2500_FrequencyCabr
  9543 ;;		_CC2500_SIDLEMode
  9544 ;;		_setRF_Main
  9545 ;;		_RF_RxDisable
  9546 ;; This function uses a non-reentrant model
  9547 ;;
  9548                           
  9549                           
  9550                           ;psect for function _CC2500_WriteCommand
  9551  1DE2                     _CC2500_WriteCommand:	
  9552                           
  9553                           ;incstack = 0
  9554                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9555                           ;CC2500_WriteCommand@command stored from wreg
  9556  1DE2  00F5               	movwf	CC2500_WriteCommand@command
  9557                           
  9558                           ;CC2500_B1.c: 293: RC4 = 0;
  9559  1DE3  0020               	movlb	0	; select bank0
  9560  1DE4  120E               	bcf	14,4	;volatile
  9561                           
  9562                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9563  1DE5  0875               	movf	CC2500_WriteCommand@command,w
  9564  1DE6  00F4               	movwf	??_CC2500_WriteCommand
  9565  1DE7  0874               	movf	??_CC2500_WriteCommand,w
  9566  1DE8  0021               	movlb	1	; select bank1
  9567  1DE9  00E0               	movwf	_SPI0Buffer^(0+128)
  9568                           
  9569                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9570  1DEA  2DEE               	goto	l9162
  9571  1DEB                     l9160:	
  9572                           
  9573                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9574  1DEB  319C  24EC  319D   	fcall	_RF_Timeout_Counter
  9575  1DEE                     l9162:	
  9576  1DEE  0020               	movlb	0	; select bank0
  9577  1DEF  1D0E               	btfss	14,2	;volatile
  9578  1DF0  2DF4               	goto	l9166
  9579  1DF1  0021               	movlb	1	; select bank1
  9580  1DF2  1F21               	btfss	(_RF1^(0+128)+1),6
  9581  1DF3  2DEB               	goto	l9160
  9582  1DF4                     l9166:	
  9583                           
  9584                           ;CC2500_B1.c: 298: };
  9585                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9586  1DF4  319A  2267  319D   	fcall	_setRF_TimeoutCleared
  9587                           
  9588                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9589  1DF7  319D  25B0         	fcall	_CC2500_WriteByte
  9590                           
  9591                           ;CC2500_B1.c: 302: RC4 = 1;
  9592  1DF9  0020               	movlb	0	; select bank0
  9593  1DFA  160E               	bsf	14,4	;volatile
  9594  1DFB  0008               	return
  9595  1DFC                     __end_of_CC2500_WriteCommand:	
  9596                           
  9597                           	psect	text50
  9598  1A67                     __ptext50:	
  9599 ;; *************** function _setRF_TimeoutCleared *****************
  9600 ;; Defined at:
  9601 ;;		line 149 in file "../src/RF_Control_B1.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;		None               void
  9608 ;; Registers used:
  9609 ;;		status,2
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;Total ram usage:        0 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    3
  9622 ;; This function calls:
  9623 ;;		Nothing
  9624 ;; This function is called by:
  9625 ;;		_CC2500_TxData
  9626 ;;		_CC2500_RxData
  9627 ;;		_CC2500_PowerRST
  9628 ;;		_CC2500_WriteREG
  9629 ;;		_CC2500_WriteCommand
  9630 ;;		_CC2500_ReadStatus
  9631 ;;		_CC2500_ReadREG
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           
  9636                           ;psect for function _setRF_TimeoutCleared
  9637  1A67                     _setRF_TimeoutCleared:	
  9638                           
  9639                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9640                           
  9641                           ;incstack = 0
  9642                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9643  1A67  0021               	movlb	1	; select bank1
  9644  1A68  01AC               	clrf	(_RF1^(0+128)+12)
  9645  1A69  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9646  1A6A  0008               	return
  9647  1A6B                     __end_of_setRF_TimeoutCleared:	
  9648                           
  9649                           	psect	text51
  9650  1CEC                     __ptext51:	
  9651 ;; *************** function _RF_Timeout_Counter *****************
  9652 ;; Defined at:
  9653 ;;		line 141 in file "../src/RF_Control_B1.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;		None
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;		None
  9658 ;; Return value:  Size  Location     Type
  9659 ;;		None               void
  9660 ;; Registers used:
  9661 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9662 ;; Tracked objects:
  9663 ;;		On entry : 0/0
  9664 ;;		On exit  : 0/0
  9665 ;;		Unchanged: 0/0
  9666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;Total ram usage:        0 bytes
  9672 ;; Hardware stack levels used:    1
  9673 ;; Hardware stack levels required when called:    3
  9674 ;; This function calls:
  9675 ;;		Nothing
  9676 ;; This function is called by:
  9677 ;;		_CC2500_TxData
  9678 ;;		_CC2500_RxData
  9679 ;;		_CC2500_PowerRST
  9680 ;;		_CC2500_WriteREG
  9681 ;;		_CC2500_WriteCommand
  9682 ;;		_CC2500_ReadStatus
  9683 ;;		_CC2500_ReadREG
  9684 ;; This function uses a non-reentrant model
  9685 ;;
  9686                           
  9687                           
  9688                           ;psect for function _RF_Timeout_Counter
  9689  1CEC                     _RF_Timeout_Counter:	
  9690                           
  9691                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9692                           
  9693                           ;incstack = 0
  9694                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9695  1CEC  3001               	movlw	1
  9696  1CED  0021               	movlb	1	; select bank1
  9697  1CEE  07AC               	addwf	(_RF1^(0+128)+12),f
  9698  1CEF  3000               	movlw	0
  9699  1CF0  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9700                           
  9701                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9702  1CF1  300C               	movlw	12
  9703  1CF2  3EA0               	addlw	_RF1& (0+255)
  9704  1CF3  0086               	movwf	6
  9705  1CF4  0187               	clrf	7
  9706  1CF5  3F40               	moviw [0]fsr1
  9707  1CF6  3AA8               	xorlw	168
  9708  1CF7  1D03               	skipz
  9709  1CF8  2CFB               	goto	u9905
  9710  1CF9  3F41               	moviw [1]fsr1
  9711  1CFA  3A61               	xorlw	97
  9712  1CFB                     u9905:	
  9713  1CFB  1D03               	skipz
  9714  1CFC  0008               	return
  9715                           
  9716                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9717  1CFD  01AC               	clrf	(_RF1^(0+128)+12)
  9718  1CFE  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9719                           
  9720                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9721  1CFF  1721               	bsf	(_RF1^(0+128)+1),6
  9722  1D00  0008               	return
  9723  1D01                     __end_of_RF_Timeout_Counter:	
  9724                           
  9725                           	psect	text52
  9726  1DB0                     __ptext52:	
  9727 ;; *************** function _CC2500_WriteByte *****************
  9728 ;; Defined at:
  9729 ;;		line 226 in file "../src/CC2500_B1.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;		None
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  loop_a          1    3[COMMON] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, status,2, status,0
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        2 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    3
  9750 ;; This function calls:
  9751 ;;		Nothing
  9752 ;; This function is called by:
  9753 ;;		_CC2500_TxData
  9754 ;;		_CC2500_RxData
  9755 ;;		_CC2500_PowerRST
  9756 ;;		_CC2500_WriteREG
  9757 ;;		_CC2500_WriteCommand
  9758 ;;		_CC2500_ReadStatus
  9759 ;;		_CC2500_ReadREG
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _CC2500_WriteByte
  9765  1DB0                     _CC2500_WriteByte:	
  9766                           
  9767                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9768                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9769                           
  9770                           ;incstack = 0
  9771                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9772  1DB0  01F3               	clrf	CC2500_WriteByte@loop_a
  9773  1DB1                     L6:	
  9774  1DB1  3008               	movlw	8
  9775  1DB2  0273               	subwf	CC2500_WriteByte@loop_a,w
  9776  1DB3  1803               	btfsc	3,0
  9777  1DB4  0008               	return
  9778                           
  9779                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9780  1DB5  0021               	movlb	1	; select bank1
  9781  1DB6  1FE0               	btfss	_SPI0Buffer^(0+128),7
  9782  1DB7  2DBB               	goto	l327
  9783                           
  9784                           ;CC2500_B1.c: 230: RC0 = 1;
  9785  1DB8  0020               	movlb	0	; select bank0
  9786  1DB9  140E               	bsf	14,0	;volatile
  9787  1DBA  2DBD               	goto	l328
  9788  1DBB                     l327:	
  9789                           
  9790                           ;CC2500_B1.c: 231: else
  9791                           ;CC2500_B1.c: 232: RC0 = 0;
  9792  1DBB  0020               	movlb	0	; select bank0
  9793  1DBC  100E               	bcf	14,0	;volatile
  9794  1DBD                     l328:	
  9795                           
  9796                           ;CC2500_B1.c: 233: RC1 = 1;
  9797  1DBD  148E               	bsf	14,1	;volatile
  9798                           
  9799                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9800  1DBE  1003               	clrc
  9801  1DBF  0021               	movlb	1	; select bank1
  9802  1DC0  0DE0               	rlf	_SPI0Buffer^(0+128),f
  9803                           
  9804                           ;CC2500_B1.c: 235: RC1 = 0;
  9805  1DC1  0020               	movlb	0	; select bank0
  9806  1DC2  108E               	bcf	14,1	;volatile
  9807  1DC3  3001               	movlw	1
  9808  1DC4  00F2               	movwf	??_CC2500_WriteByte
  9809  1DC5  0872               	movf	??_CC2500_WriteByte,w
  9810  1DC6  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9811  1DC7  2DB1               	goto	L6
  9812  1DC8                     __end_of_CC2500_WriteByte:	
  9813                           
  9814                           	psect	text53
  9815  1A57                     __ptext53:	
  9816 ;; *************** function _RF_Initialization *****************
  9817 ;; Defined at:
  9818 ;;		line 9 in file "../src/RF_Control_B1.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;		None               void
  9825 ;; Registers used:
  9826 ;;		wreg, status,2, status,0, pclath, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    4
  9839 ;; This function calls:
  9840 ;;		_setRF_Initialization
  9841 ;; This function is called by:
  9842 ;;		_main
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _RF_Initialization
  9848  1A57                     _RF_Initialization:	
  9849                           
  9850                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9851                           
  9852                           ;incstack = 0
  9853                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9854  1A57  319A  22E9         	fcall	_setRF_Initialization
  9855  1A59  0008               	return
  9856  1A5A                     __end_of_RF_Initialization:	
  9857                           
  9858                           	psect	text54
  9859  1AE9                     __ptext54:	
  9860 ;; *************** function _setRF_Initialization *****************
  9861 ;; Defined at:
  9862 ;;		line 17 in file "../src/RF_Control_B1.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;		None
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;		None
  9867 ;; Return value:  Size  Location     Type
  9868 ;;		None               void
  9869 ;; Registers used:
  9870 ;;		wreg
  9871 ;; Tracked objects:
  9872 ;;		On entry : 0/0
  9873 ;;		On exit  : 0/0
  9874 ;;		Unchanged: 0/0
  9875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;Total ram usage:        1 bytes
  9881 ;; Hardware stack levels used:    1
  9882 ;; Hardware stack levels required when called:    3
  9883 ;; This function calls:
  9884 ;;		Nothing
  9885 ;; This function is called by:
  9886 ;;		_RF_Initialization
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function _setRF_Initialization
  9892  1AE9                     _setRF_Initialization:	
  9893                           
  9894                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9895                           
  9896                           ;incstack = 0
  9897                           ; Regs used in _setRF_Initialization: [wreg]
  9898  1AE9  3015               	movlw	21
  9899  1AEA  00F2               	movwf	??_setRF_Initialization
  9900  1AEB  0872               	movf	??_setRF_Initialization,w
  9901  1AEC  0021               	movlb	1	; select bank1
  9902  1AED  00E2               	movwf	_Tx_Length^(0+128)
  9903                           
  9904                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9905  1AEE  30C8               	movlw	200
  9906  1AEF  00A7               	movwf	(_RF1^(0+128)+7)
  9907  1AF0  3000               	movlw	0
  9908  1AF1  00A8               	movwf	(_RF1^(0+128)+8)
  9909  1AF2  0008               	return
  9910  1AF3                     __end_of_setRF_Initialization:	
  9911                           
  9912                           	psect	text55
  9913  1C75                     __ptext55:	
  9914 ;; *************** function _Mcu_Initialization *****************
  9915 ;; Defined at:
  9916 ;;		line 30 in file "../src/MCU_B1.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0, pclath, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        0 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    4
  9937 ;; This function calls:
  9938 ;;		_ADC_Set
  9939 ;;		_Fosc_Set
  9940 ;;		_IOC_Set
  9941 ;;		_IO_Set
  9942 ;;		_TMR1_Set
  9943 ;;		_WDT_Set
  9944 ;; This function is called by:
  9945 ;;		_main
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           
  9950                           ;psect for function _Mcu_Initialization
  9951  1C75                     _Mcu_Initialization:	
  9952                           
  9953                           ;MCU_B1.c: 32: Fosc_Set();
  9954                           
  9955                           ;incstack = 0
  9956                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9957  1C75  319A  2263  319C   	fcall	_Fosc_Set
  9958                           
  9959                           ;MCU_B1.c: 34: IO_Set();
  9960  1C78  319D  25C8  319C   	fcall	_IO_Set
  9961                           
  9962                           ;MCU_B1.c: 36: ;;
  9963                           ;MCU_B1.c: 38: TMR1_Set();
  9964  1C7B  319B  235B  319C   	fcall	_TMR1_Set
  9965                           
  9966                           ;MCU_B1.c: 40: ADC_Set();
  9967  1C7E  319A  229E  319C   	fcall	_ADC_Set
  9968                           
  9969                           ;MCU_B1.c: 42: ;;
  9970                           ;MCU_B1.c: 44: ;;
  9971                           ;MCU_B1.c: 46: IOC_Set();
  9972  1C81  319A  22DF  319C   	fcall	_IOC_Set
  9973                           
  9974                           ;MCU_B1.c: 48: ;;
  9975                           ;MCU_B1.c: 50: ;;
  9976                           ;MCU_B1.c: 52: WDT_Set();
  9977  1C84  319A  22D6         	fcall	_WDT_Set
  9978  1C86  0008               	return
  9979  1C87                     __end_of_Mcu_Initialization:	
  9980                           
  9981                           	psect	text56
  9982  1AD6                     __ptext56:	
  9983 ;; *************** function _WDT_Set *****************
  9984 ;; Defined at:
  9985 ;;		line 1102 in file "../src/MCU_B1.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;		None               void
  9992 ;; Registers used:
  9993 ;;		wreg
  9994 ;; Tracked objects:
  9995 ;;		On entry : 0/0
  9996 ;;		On exit  : 0/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        1 bytes
 10004 ;; Hardware stack levels used:    1
 10005 ;; Hardware stack levels required when called:    3
 10006 ;; This function calls:
 10007 ;;		Nothing
 10008 ;; This function is called by:
 10009 ;;		_Mcu_Initialization
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _WDT_Set
 10015  1AD6                     _WDT_Set:	
 10016                           
 10017                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _WDT_Set: [wreg]
 10021  1AD6  3017               	movlw	23
 10022  1AD7  0021               	movlb	1	; select bank1
 10023  1AD8  0097               	movwf	23	;volatile
 10024                           
 10025                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10026  1AD9  1456               	bsf	_WDT^(0+128),0
 10027                           
 10028                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10029  1ADA  300A               	movlw	10
 10030  1ADB  00F2               	movwf	??_WDT_Set
 10031  1ADC  0872               	movf	??_WDT_Set,w
 10032  1ADD  00D7               	movwf	(_WDT^(0+128)+1)
 10033  1ADE  0008               	return
 10034  1ADF                     __end_of_WDT_Set:	
 10035                           
 10036                           	psect	text57
 10037  1B5B                     __ptext57:	
 10038 ;; *************** function _TMR1_Set *****************
 10039 ;; Defined at:
 10040 ;;		line 226 in file "../src/MCU_B1.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;		None
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        0 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    3
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_Mcu_Initialization
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _TMR1_Set
 10070  1B5B                     _TMR1_Set:	
 10071                           
 10072                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _TMR1_Set: [wreg]
 10076  1B5B  3041               	movlw	65
 10077  1B5C  0020               	movlb	0	; select bank0
 10078  1B5D  0098               	movwf	24	;volatile
 10079                           
 10080                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10081  1B5E  30FA               	movlw	250
 10082  1B5F  0097               	movwf	23	;volatile
 10083                           
 10084                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10085  1B60  3038               	movlw	56
 10086  1B61  0096               	movwf	22	;volatile
 10087                           
 10088                           ;MCU_B1.c: 230: TMR1IE = 1;
 10089  1B62  0021               	movlb	1	; select bank1
 10090  1B63  1411               	bsf	17,0	;volatile
 10091                           
 10092                           ;MCU_B1.c: 231: PEIE = 1;
 10093  1B64  170B               	bsf	11,6	;volatile
 10094                           
 10095                           ;MCU_B1.c: 232: GIE = 1;
 10096  1B65  178B               	bsf	11,7	;volatile
 10097  1B66  0008               	return
 10098  1B67                     __end_of_TMR1_Set:	
 10099                           
 10100                           	psect	text58
 10101  1DC8                     __ptext58:	
 10102 ;; *************** function _IO_Set *****************
 10103 ;; Defined at:
 10104 ;;		line 60 in file "../src/MCU_B1.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;		None
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;		None
 10109 ;; Return value:  Size  Location     Type
 10110 ;;		None               void
 10111 ;; Registers used:
 10112 ;;		wreg, status,2
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;Total ram usage:        0 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    3
 10125 ;; This function calls:
 10126 ;;		Nothing
 10127 ;; This function is called by:
 10128 ;;		_Mcu_Initialization
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           
 10133                           ;psect for function _IO_Set
 10134  1DC8                     _IO_Set:	
 10135                           
 10136                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10137                           
 10138                           ;incstack = 0
 10139                           ; Regs used in _IO_Set: [wreg+status,2]
 10140  1DC8  3077               	movlw	119
 10141  1DC9  0021               	movlb	1	; select bank1
 10142  1DCA  008C               	movwf	12	;volatile
 10143                           
 10144                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10145  1DCB  3007               	movlw	7
 10146  1DCC  008D               	movwf	13	;volatile
 10147                           
 10148                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10149  1DCD  300C               	movlw	12
 10150  1DCE  008E               	movwf	14	;volatile
 10151                           
 10152                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10153  1DCF  0022               	movlb	2	; select bank2
 10154  1DD0  018C               	clrf	12	;volatile
 10155                           
 10156                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10157  1DD1  018D               	clrf	13	;volatile
 10158                           
 10159                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10160  1DD2  018E               	clrf	14	;volatile
 10161                           
 10162                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10163  1DD3  3022               	movlw	34
 10164  1DD4  0023               	movlb	3	; select bank3
 10165  1DD5  008C               	movwf	12	;volatile
 10166                           
 10167                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10168  1DD6  018D               	clrf	13	;volatile
 10169                           
 10170                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10171  1DD7  018E               	clrf	14	;volatile
 10172                           
 10173                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10174  1DD8  3077               	movlw	119
 10175  1DD9  0020               	movlb	0	; select bank0
 10176  1DDA  008C               	movwf	12	;volatile
 10177                           
 10178                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10179  1DDB  3007               	movlw	7
 10180  1DDC  008D               	movwf	13	;volatile
 10181                           
 10182                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10183  1DDD  300C               	movlw	12
 10184  1DDE  008E               	movwf	14	;volatile
 10185                           
 10186                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10187  1DDF  0024               	movlb	4	; select bank4
 10188  1DE0  018D               	clrf	13	;volatile
 10189  1DE1  0008               	return
 10190  1DE2                     __end_of_IO_Set:	
 10191                           
 10192                           	psect	text59
 10193  1ADF                     __ptext59:	
 10194 ;; *************** function _IOC_Set *****************
 10195 ;; Defined at:
 10196 ;;		line 380 in file "../src/MCU_B1.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;		None
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;		None
 10201 ;; Return value:  Size  Location     Type
 10202 ;;		None               void
 10203 ;; Registers used:
 10204 ;;		wreg, status,2
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        0 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    3
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_Mcu_Initialization
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           
 10225                           ;psect for function _IOC_Set
 10226  1ADF                     _IOC_Set:	
 10227                           
 10228                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _IOC_Set: [wreg+status,2]
 10232  1ADF  3004               	movlw	4
 10233  1AE0  0027               	movlb	7	; select bank7
 10234  1AE1  0094               	movwf	20	;volatile
 10235                           
 10236                           ;MCU_B1.c: 383: IOCBN = 0b00000000;;
 10237  1AE2  0195               	clrf	21	;volatile
 10238                           
 10239                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10240  1AE3  0196               	clrf	22	;volatile
 10241                           
 10242                           ;MCU_B1.c: 387: IOCIE = 1;
 10243  1AE4  158B               	bsf	11,3	;volatile
 10244                           
 10245                           ;MCU_B1.c: 388: IOCIF = 0;
 10246  1AE5  100B               	bcf	11,0	;volatile
 10247                           
 10248                           ;MCU_B1.c: 389: PEIE = 1;
 10249  1AE6  170B               	bsf	11,6	;volatile
 10250                           
 10251                           ;MCU_B1.c: 390: GIE = 1;
 10252  1AE7  178B               	bsf	11,7	;volatile
 10253  1AE8  0008               	return
 10254  1AE9                     __end_of_IOC_Set:	
 10255                           
 10256                           	psect	text60
 10257  1A63                     __ptext60:	
 10258 ;; *************** function _Fosc_Set *****************
 10259 ;; Defined at:
 10260 ;;		line 56 in file "../src/MCU_B1.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;		None
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;		None
 10265 ;; Return value:  Size  Location     Type
 10266 ;;		None               void
 10267 ;; Registers used:
 10268 ;;		wreg
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/0
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;Total ram usage:        0 bytes
 10279 ;; Hardware stack levels used:    1
 10280 ;; Hardware stack levels required when called:    3
 10281 ;; This function calls:
 10282 ;;		Nothing
 10283 ;; This function is called by:
 10284 ;;		_Mcu_Initialization
 10285 ;; This function uses a non-reentrant model
 10286 ;;
 10287                           
 10288                           
 10289                           ;psect for function _Fosc_Set
 10290  1A63                     _Fosc_Set:	
 10291                           
 10292                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10293                           
 10294                           ;incstack = 0
 10295                           ; Regs used in _Fosc_Set: [wreg]
 10296  1A63  3078               	movlw	120
 10297  1A64  0021               	movlb	1	; select bank1
 10298  1A65  0099               	movwf	25	;volatile
 10299  1A66  0008               	return
 10300  1A67                     __end_of_Fosc_Set:	
 10301                           
 10302                           	psect	text61
 10303  1A9E                     __ptext61:	
 10304 ;; *************** function _ADC_Set *****************
 10305 ;; Defined at:
 10306 ;;		line 427 in file "../src/MCU_B1.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;		None               void
 10313 ;; Registers used:
 10314 ;;		wreg
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        0 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    3
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_Mcu_Initialization
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           
 10335                           ;psect for function _ADC_Set
 10336  1A9E                     _ADC_Set:	
 10337                           
 10338                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10339                           
 10340                           ;incstack = 0
 10341                           ; Regs used in _ADC_Set: [wreg]
 10342  1A9E  30F3               	movlw	243
 10343  1A9F  0021               	movlb	1	; select bank1
 10344  1AA0  009E               	movwf	30	;volatile
 10345                           
 10346                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10347  1AA1  30C1               	movlw	193
 10348  1AA2  0022               	movlb	2	; select bank2
 10349  1AA3  0097               	movwf	23	;volatile
 10350  1AA4  0008               	return
 10351  1AA5                     __end_of_ADC_Set:	
 10352                           
 10353                           	psect	text62
 10354  0053                     __ptext62:	
 10355 ;; *************** function _Load_Main *****************
 10356 ;; Defined at:
 10357 ;;		line 39 in file "../src/OverLoad_B1.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;		None
 10360 ;; Auto vars:     Size  Location     Type
 10361 ;;  i               2    8[BANK0 ] int 
 10362 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10363 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10364 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10365 ;;  error           1    2[BANK0 ] unsigned char 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;		None               void
 10368 ;; Registers used:
 10369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;Total ram usage:       10 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    4
 10382 ;; This function calls:
 10383 ;;		___lwdiv
 10384 ;;		___wmul
 10385 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10386 ;;		_getDimmer_LoadGO
 10387 ;;		_getDimmer_Load_Status
 10388 ;;		_getMain_All_Error_Status
 10389 ;;		_getMain_All_LightsStatus
 10390 ;;		_getMain_Lights_Count
 10391 ;;		_setLoad_AH_AL_Restore
 10392 ;; This function is called by:
 10393 ;;		_main
 10394 ;; This function uses a non-reentrant model
 10395 ;;
 10396                           
 10397                           
 10398                           ;psect for function _Load_Main
 10399  0053                     _Load_Main:	
 10400                           
 10401                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10402                           
 10403                           ;incstack = 0
 10404                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10405  0053  3000               	movlw	0
 10406  0054  3191  2128  3180   	fcall	_getMain_All_Error_Status
 10407  0057  0020               	movlb	0	; select bank0
 10408  0058  00A0               	movwf	??_Load_Main
 10409  0059  0820               	movf	??_Load_Main,w
 10410  005A  00A2               	movwf	Load_Main@error
 10411                           
 10412                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10413  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10414  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10415  005D  01A7               	clrf	Load_Main@LightsCount
 10416                           
 10417                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10418  005E  0022               	movlb	2	; select bank2
 10419  005F  1C33               	btfss	_Load^(0+256),0
 10420  0060  29ED               	goto	l1823
 10421                           
 10422                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10423  0061  319B  2376  3180   	fcall	_getMain_All_LightsStatus
 10424  0064  3800               	iorlw	0
 10425  0065  1D03               	skipz
 10426  0066  2869               	goto	l10184
 10427                           
 10428                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10429  0067  0022               	movlb	2	; select bank2
 10430  0068  288A               	goto	l10202
 10431  0069                     l10184:	
 10432                           ;OverLoad_B1.c: 46: } else {
 10433                           
 10434                           
 10435                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10436  0069  0020               	movlb	0	; select bank0
 10437  006A  08A2               	movf	Load_Main@error,f
 10438  006B  1D03               	skipz
 10439  006C  2887               	goto	l1826
 10440  006D  319E  26A8  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10441  0070  3800               	iorlw	0
 10442  0071  1D03               	skipz
 10443  0072  2887               	goto	l1826
 10444                           
 10445                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10446  0073  0022               	movlb	2	; select bank2
 10447  0074  14B3               	bsf	_Load^(0+256),1
 10448                           
 10449                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10450  0075  319A  2290  3180   	fcall	_getDimmer_LoadGO
 10451  0078  3A01               	xorlw	1
 10452  0079  1D03               	skipz
 10453  007A  2882               	goto	l1827
 10454                           
 10455                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10456  007B  0022               	movlb	2	; select bank2
 10457  007C  1DB3               	btfss	_Load^(0+256),3
 10458  007D  1BB3               	btfsc	_Load^(0+256),7
 10459  007E  288B               	goto	l1825
 10460                           
 10461                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10462  007F  15B3               	bsf	_Load^(0+256),3
 10463                           
 10464                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10465  0080  01D8               	clrf	(_Load^(0+256)+37)
 10466                           
 10467                           ;OverLoad_B1.c: 56: }
 10468                           ;OverLoad_B1.c: 57: } else {
 10469  0081  288B               	goto	l1825
 10470  0082                     l1827:	
 10471                           
 10472                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10473  0082  0022               	movlb	2	; select bank2
 10474  0083  1FB3               	btfss	_Load^(0+256),7
 10475  0084  288B               	goto	l1825
 10476                           
 10477                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10478  0085  13B3               	bcf	_Load^(0+256),7
 10479                           
 10480                           ;OverLoad_B1.c: 60: }
 10481                           ;OverLoad_B1.c: 61: }
 10482                           ;OverLoad_B1.c: 62: } else {
 10483  0086  288B               	goto	l1825
 10484  0087                     l1826:	
 10485                           
 10486                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10487  0087  0022               	movlb	2	; select bank2
 10488  0088  1CB3               	btfss	_Load^(0+256),1
 10489  0089  288B               	goto	l1825
 10490  008A                     l10202:	
 10491                           
 10492                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10493  008A  10B3               	bcf	_Load^(0+256),1
 10494  008B                     l1825:	
 10495                           
 10496                           ;OverLoad_B1.c: 65: }
 10497                           ;OverLoad_B1.c: 66: }
 10498                           ;OverLoad_B1.c: 88: }
 10499                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10500  008B  1CB3               	btfss	_Load^(0+256),1
 10501  008C  29C9               	goto	l1833
 10502                           
 10503                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10504  008D  1533               	bsf	_Load^(0+256),2
 10505                           
 10506                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10507  008E  1E33               	btfss	_Load^(0+256),4
 10508  008F  29C7               	goto	l1834
 10509                           
 10510                           ;OverLoad_B1.c: 95: Load.Time++;
 10511  0090  3001               	movlw	1
 10512  0091  07B4               	addwf	(_Load^(0+256)+1),f
 10513  0092  3000               	movlw	0
 10514  0093  3DB5               	addwfc	((_Load+1)^(0+256)+1),f
 10515                           
 10516                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10517  0094  3000               	movlw	0
 10518  0095  0235               	subwf	((_Load+1)^(0+256)+1),w
 10519  0096  3002               	movlw	2
 10520  0097  1903               	skipnz
 10521  0098  0234               	subwf	(_Load^(0+256)+1),w
 10522  0099  1C03               	skipc
 10523  009A  0008               	return
 10524                           
 10525                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10526  009B  01B4               	clrf	(_Load^(0+256)+1)
 10527  009C  01B5               	clrf	((_Load+1)^(0+256)+1)
 10528                           
 10529                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10530  009D  1233               	bcf	_Load^(0+256),4
 10531                           
 10532                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10533  009E  3001               	movlw	1
 10534  009F  0020               	movlb	0	; select bank0
 10535  00A0  00A8               	movwf	Load_Main@i
 10536  00A1  3000               	movlw	0
 10537  00A2  00A9               	movwf	Load_Main@i+1
 10538  00A3  0829               	movf	Load_Main@i+1,w
 10539  00A4  3A80               	xorlw	128
 10540  00A5  00A0               	movwf	??_Load_Main
 10541  00A6  3080               	movlw	128
 10542  00A7  0220               	subwf	??_Load_Main,w
 10543  00A8  1D03               	skipz
 10544  00A9  28AC               	goto	u11715
 10545  00AA  3004               	movlw	4
 10546  00AB  0228               	subwf	Load_Main@i,w
 10547  00AC                     u11715:	
 10548  00AC  1803               	btfsc	3,0
 10549  00AD  28E0               	goto	l10224
 10550  00AE                     l10218:	
 10551                           
 10552                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10553  00AE  0020               	movlb	0	; select bank0
 10554  00AF  3528               	lslf	Load_Main@i,w
 10555  00B0  3E3E               	addlw	(_Load+11)& (0+255)
 10556  00B1  0086               	movwf	6
 10557  00B2  3001               	movlw	1	; select bank2/3
 10558  00B3  0087               	movwf	7
 10559  00B4  3F40               	moviw [0]fsr1
 10560  00B5  00A0               	movwf	??_Load_Main
 10561  00B6  3F41               	moviw [1]fsr1
 10562  00B7  00A1               	movwf	??_Load_Main+1
 10563  00B8  0820               	movf	??_Load_Main,w
 10564  00B9  0022               	movlb	2	; select bank2
 10565  00BA  07B8               	addwf	(_Load^(0+256)+5),f
 10566  00BB  0020               	movlb	0	; select bank0
 10567  00BC  0821               	movf	??_Load_Main+1,w
 10568  00BD  0022               	movlb	2	; select bank2
 10569  00BE  3DB9               	addwfc	((_Load+1)^(0+256)+5),f
 10570                           
 10571                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10572  00BF  0020               	movlb	0	; select bank0
 10573  00C0  3528               	lslf	Load_Main@i,w
 10574  00C1  3E48               	addlw	(_Load+21)& (0+255)
 10575  00C2  0086               	movwf	6
 10576  00C3  3001               	movlw	1	; select bank2/3
 10577  00C4  0087               	movwf	7
 10578  00C5  3F40               	moviw [0]fsr1
 10579  00C6  00A0               	movwf	??_Load_Main
 10580  00C7  3F41               	moviw [1]fsr1
 10581  00C8  00A1               	movwf	??_Load_Main+1
 10582  00C9  0820               	movf	??_Load_Main,w
 10583  00CA  0022               	movlb	2	; select bank2
 10584  00CB  07BA               	addwf	(_Load^(0+256)+7),f
 10585  00CC  0020               	movlb	0	; select bank0
 10586  00CD  0821               	movf	??_Load_Main+1,w
 10587  00CE  0022               	movlb	2	; select bank2
 10588  00CF  3DBB               	addwfc	((_Load+1)^(0+256)+7),f
 10589  00D0  3001               	movlw	1
 10590  00D1  0020               	movlb	0	; select bank0
 10591  00D2  07A8               	addwf	Load_Main@i,f
 10592  00D3  3000               	movlw	0
 10593  00D4  3DA9               	addwfc	Load_Main@i+1,f
 10594  00D5  0829               	movf	Load_Main@i+1,w
 10595  00D6  3A80               	xorlw	128
 10596  00D7  00A0               	movwf	??_Load_Main
 10597  00D8  3080               	movlw	128
 10598  00D9  0220               	subwf	??_Load_Main,w
 10599  00DA  1D03               	skipz
 10600  00DB  28DE               	goto	u11725
 10601  00DC  3004               	movlw	4
 10602  00DD  0228               	subwf	Load_Main@i,w
 10603  00DE                     u11725:	
 10604  00DE  1C03               	skipc
 10605  00DF  28AE               	goto	l10218
 10606  00E0                     l10224:	
 10607                           
 10608                           ;OverLoad_B1.c: 103: }
 10609                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10610  00E0  3003               	movlw	3
 10611  00E1  00F2               	movwf	___lwdiv@divisor
 10612  00E2  3000               	movlw	0
 10613  00E3  00F3               	movwf	___lwdiv@divisor+1
 10614  00E4  0022               	movlb	2	; select bank2
 10615  00E5  0839               	movf	((_Load+1)^(0+256)+5),w
 10616  00E6  01F5               	clrf	___lwdiv@dividend+1
 10617  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 10618  00E8  0838               	movf	(_Load^(0+256)+5),w
 10619  00E9  01F4               	clrf	___lwdiv@dividend
 10620  00EA  07F4               	addwf	___lwdiv@dividend,f
 10621  00EB  3191  21F4  3180   	fcall	___lwdiv
 10622  00EE  0873               	movf	?___lwdiv+1,w
 10623  00EF  0022               	movlb	2	; select bank2
 10624  00F0  01B9               	clrf	((_Load+1)^(0+256)+5)
 10625  00F1  07B9               	addwf	((_Load+1)^(0+256)+5),f
 10626  00F2  0872               	movf	?___lwdiv,w
 10627  00F3  01B8               	clrf	(_Load^(0+256)+5)
 10628  00F4  07B8               	addwf	(_Load^(0+256)+5),f
 10629                           
 10630                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10631  00F5  3003               	movlw	3
 10632  00F6  00F2               	movwf	___lwdiv@divisor
 10633  00F7  3000               	movlw	0
 10634  00F8  00F3               	movwf	___lwdiv@divisor+1
 10635  00F9  083B               	movf	((_Load+1)^(0+256)+7),w
 10636  00FA  01F5               	clrf	___lwdiv@dividend+1
 10637  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 10638  00FC  083A               	movf	(_Load^(0+256)+7),w
 10639  00FD  01F4               	clrf	___lwdiv@dividend
 10640  00FE  07F4               	addwf	___lwdiv@dividend,f
 10641  00FF  3191  21F4  3180   	fcall	___lwdiv
 10642  0102  0873               	movf	?___lwdiv+1,w
 10643  0103  0022               	movlb	2	; select bank2
 10644  0104  01BB               	clrf	((_Load+1)^(0+256)+7)
 10645  0105  07BB               	addwf	((_Load+1)^(0+256)+7),f
 10646  0106  0872               	movf	?___lwdiv,w
 10647  0107  01BA               	clrf	(_Load^(0+256)+7)
 10648  0108  07BA               	addwf	(_Load^(0+256)+7),f
 10649                           
 10650                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10651  0109  319E  2616  3180   	fcall	_setLoad_AH_AL_Restore
 10652                           
 10653                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10654  010C  0022               	movlb	2	; select bank2
 10655  010D  083B               	movf	((_Load+1)^(0+256)+7),w
 10656  010E  0239               	subwf	((_Load+1)^(0+256)+5),w
 10657  010F  1D03               	skipz
 10658  0110  2913               	goto	u11735
 10659  0111  083A               	movf	(_Load^(0+256)+7),w
 10660  0112  0238               	subwf	(_Load^(0+256)+5),w
 10661  0113                     u11735:	
 10662  0113  1C03               	skipc
 10663  0114  0008               	return
 10664                           
 10665                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10666  0115  3005               	movlw	5
 10667  0116  3E33               	addlw	_Load& (0+255)
 10668  0117  0086               	movwf	6
 10669  0118  3001               	movlw	1	; select bank2/3
 10670  0119  0087               	movwf	7
 10671  011A  093A               	comf	(_Load^(0+256)+7),w
 10672  011B  0020               	movlb	0	; select bank0
 10673  011C  00A0               	movwf	??_Load_Main
 10674  011D  0022               	movlb	2	; select bank2
 10675  011E  093B               	comf	((_Load+1)^(0+256)+7),w
 10676  011F  0020               	movlb	0	; select bank0
 10677  0120  00A1               	movwf	??_Load_Main+1
 10678  0121  0AA0               	incf	??_Load_Main,f
 10679  0122  1903               	skipnz
 10680  0123  0AA1               	incf	??_Load_Main+1,f
 10681  0124  3F40               	moviw [0]fsr1
 10682  0125  0720               	addwf	??_Load_Main,w
 10683  0126  0022               	movlb	2	; select bank2
 10684  0127  00D2               	movwf	(_Load^(0+256)+31)
 10685  0128  3F41               	moviw [1]fsr1
 10686  0129  0020               	movlb	0	; select bank0
 10687  012A  3D21               	addwfc	??_Load_Main+1,w
 10688  012B  0022               	movlb	2	; select bank2
 10689  012C  00D3               	movwf	(_Load^(0+256)+32)
 10690                           
 10691                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10692  012D  01B8               	clrf	(_Load^(0+256)+5)
 10693  012E  01B9               	clrf	((_Load+1)^(0+256)+5)
 10694                           
 10695                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10696  012F  01BA               	clrf	(_Load^(0+256)+7)
 10697  0130  01BB               	clrf	((_Load+1)^(0+256)+7)
 10698                           
 10699                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10700  0131  1DB3               	btfss	_Load^(0+256),3
 10701  0132  2989               	goto	l10264
 10702                           
 10703                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10704  0133  3002               	movlw	2
 10705  0134  0258               	subwf	(_Load^(0+256)+37),w
 10706  0135  1803               	skipnc
 10707  0136  2989               	goto	l10264
 10708                           
 10709                           ;OverLoad_B1.c: 115: Load.Count++;
 10710  0137  3001               	movlw	1
 10711  0138  0020               	movlb	0	; select bank0
 10712  0139  00A0               	movwf	??_Load_Main
 10713  013A  0820               	movf	??_Load_Main,w
 10714  013B  0022               	movlb	2	; select bank2
 10715  013C  07D8               	addwf	(_Load^(0+256)+37),f
 10716                           
 10717                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10718  013D  319A  2297  3180   	fcall	_getDimmer_Load_Status
 10719  0140  0020               	movlb	0	; select bank0
 10720  0141  00A0               	movwf	??_Load_Main
 10721  0142  0820               	movf	??_Load_Main,w
 10722  0143  00A6               	movwf	Load_Main@Load_RunStatus
 10723                           
 10724                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10725  0144  319B  2394  3180   	fcall	_getMain_Lights_Count
 10726  0147  0020               	movlb	0	; select bank0
 10727  0148  00A0               	movwf	??_Load_Main
 10728  0149  0820               	movf	??_Load_Main,w
 10729  014A  00A7               	movwf	Load_Main@LightsCount
 10730                           
 10731                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10732  014B  0022               	movlb	2	; select bank2
 10733  014C  0858               	movf	(_Load^(0+256)+37),w
 10734  014D  3A01               	xorlw	1
 10735  014E  1D03               	skipz
 10736  014F  2954               	goto	l10250
 10737                           
 10738                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*50);
 10739  0150  30E8               	movlw	232
 10740  0151  00D6               	movwf	(_Load^(0+256)+35)
 10741  0152  3003               	movlw	3
 10742  0153  2961               	goto	L7
 10743  0154                     l10250:	
 10744                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10745                           
 10746  0154  0858               	movf	(_Load^(0+256)+37),w
 10747  0155  3A02               	xorlw	2
 10748  0156  1D03               	skipz
 10749  0157  2989               	goto	l10264
 10750                           
 10751                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10752  0158  0020               	movlb	0	; select bank0
 10753  0159  0827               	movf	Load_Main@LightsCount,w
 10754  015A  3A01               	xorlw	1
 10755  015B  1D03               	skipz
 10756  015C  2963               	goto	l10256
 10757                           
 10758                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*50);
 10759  015D  3037               	movlw	55
 10760  015E  0022               	movlb	2	; select bank2
 10761  015F  00D6               	movwf	(_Load^(0+256)+35)
 10762  0160  3000               	movlw	0
 10763  0161                     L7:	
 10764  0161  00D7               	movwf	(_Load^(0+256)+36)
 10765                           
 10766                           ;OverLoad_B1.c: 130: } else {
 10767  0162  2989               	goto	l10264
 10768  0163                     l10256:	
 10769                           
 10770                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10771  0163  0020               	movlb	0	; select bank0
 10772  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 10773  0165  1D03               	skipz
 10774  0166  297D               	goto	l10260
 10775                           
 10776                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*50) * LightsCount;
 10777  0167  0827               	movf	Load_Main@LightsCount,w
 10778  0168  00A0               	movwf	??_Load_Main
 10779  0169  01A1               	clrf	??_Load_Main+1
 10780  016A  0820               	movf	??_Load_Main,w
 10781  016B  00F2               	movwf	___wmul@multiplier
 10782  016C  0821               	movf	??_Load_Main+1,w
 10783  016D  00F3               	movwf	___wmul@multiplier+1
 10784  016E  3037               	movlw	55
 10785  016F  00F4               	movwf	___wmul@multiplicand
 10786  0170  3000               	movlw	0
 10787  0171  00F5               	movwf	___wmul@multiplicand+1
 10788  0172  319E  264E  3180   	fcall	___wmul
 10789  0175  0873               	movf	?___wmul+1,w
 10790  0176  0022               	movlb	2	; select bank2
 10791  0177  01D7               	clrf	((_Load+1)^(0+256)+35)
 10792  0178  07D7               	addwf	((_Load+1)^(0+256)+35),f
 10793  0179  0872               	movf	?___wmul,w
 10794  017A  01D6               	clrf	(_Load^(0+256)+35)
 10795  017B  07D6               	addwf	(_Load^(0+256)+35),f
 10796                           
 10797                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10798  017C  2989               	goto	l10264
 10799  017D                     l10260:	
 10800  017D  0020               	movlb	0	; select bank0
 10801  017E  0826               	movf	Load_Main@Load_RunStatus,w
 10802  017F  3A01               	xorlw	1
 10803  0180  1D03               	skipz
 10804  0181  2989               	goto	l10264
 10805                           
 10806                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10807  0182  0022               	movlb	2	; select bank2
 10808  0183  083C               	movf	(_Load^(0+256)+9),w
 10809  0184  3E37               	addlw	55
 10810  0185  00D6               	movwf	(_Load^(0+256)+35)
 10811  0186  3000               	movlw	0
 10812  0187  3D3D               	addwfc	((_Load+1)^(0+256)+9),w
 10813  0188  00D7               	movwf	((_Load+1)^(0+256)+35)
 10814  0189                     l10264:	
 10815                           
 10816                           ;OverLoad_B1.c: 135: }
 10817                           ;OverLoad_B1.c: 136: }
 10818                           ;OverLoad_B1.c: 137: }
 10819                           ;OverLoad_B1.c: 138: }
 10820                           ;OverLoad_B1.c: 139: }
 10821                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10822  0189  0022               	movlb	2	; select bank2
 10823  018A  0857               	movf	((_Load+1)^(0+256)+35),w
 10824  018B  0253               	subwf	((_Load+1)^(0+256)+31),w
 10825  018C  1D03               	skipz
 10826  018D  2990               	goto	u11815
 10827  018E  0856               	movf	(_Load^(0+256)+35),w
 10828  018F  0252               	subwf	(_Load^(0+256)+31),w
 10829  0190                     u11815:	
 10830  0190  1C03               	skipc
 10831  0191  29AF               	goto	l10280
 10832                           
 10833                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10834  0192  0020               	movlb	0	; select bank0
 10835  0193  0827               	movf	Load_Main@LightsCount,w
 10836  0194  3A01               	xorlw	1
 10837  0195  1903               	skipnz
 10838  0196  2999               	goto	l10270
 10839  0197  3003               	movlw	3
 10840  0198  299A               	goto	L8
 10841  0199                     l10270:	
 10842  0199  3002               	movlw	2
 10843  019A                     L8:	
 10844  019A  00A3               	movwf	_Load_Main$4147
 10845  019B  3000               	movlw	0
 10846  019C  00A4               	movwf	_Load_Main$4147+1
 10847  019D  0823               	movf	_Load_Main$4147,w
 10848  019E  00A0               	movwf	??_Load_Main
 10849  019F  0820               	movf	??_Load_Main,w
 10850  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 10851                           
 10852                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10853  01A1  3001               	movlw	1
 10854  01A2  00A0               	movwf	??_Load_Main
 10855  01A3  0820               	movf	??_Load_Main,w
 10856  01A4  0022               	movlb	2	; select bank2
 10857  01A5  07D9               	addwf	(_Load^(0+256)+38),f
 10858                           
 10859                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10860  01A6  0859               	movf	(_Load^(0+256)+38),w
 10861  01A7  0020               	movlb	0	; select bank0
 10862  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 10863  01A9  1803               	skipnc
 10864  01AA  0008               	return
 10865                           
 10866                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10867  01AB  0022               	movlb	2	; select bank2
 10868  01AC  01D9               	clrf	(_Load^(0+256)+38)
 10869                           
 10870                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10871  01AD  16B3               	bsf	_Load^(0+256),5
 10872                           
 10873                           ;OverLoad_B1.c: 168: }
 10874                           ;OverLoad_B1.c: 169: } else {
 10875  01AE  0008               	return
 10876  01AF                     l10280:	
 10877                           
 10878                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10879  01AF  01D9               	clrf	(_Load^(0+256)+38)
 10880                           
 10881                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10882  01B0  1DB3               	btfss	_Load^(0+256),3
 10883  01B1  0008               	return
 10884                           
 10885                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10886  01B2  3001               	movlw	1
 10887  01B3  0020               	movlb	0	; select bank0
 10888  01B4  00A0               	movwf	??_Load_Main
 10889  01B5  0820               	movf	??_Load_Main,w
 10890  01B6  0022               	movlb	2	; select bank2
 10891  01B7  07DA               	addwf	(_Load^(0+256)+39),f
 10892                           
 10893                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10894  01B8  3003               	movlw	3
 10895  01B9  025A               	subwf	(_Load^(0+256)+39),w
 10896  01BA  1C03               	skipc
 10897  01BB  0008               	return
 10898                           
 10899                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10900  01BC  01DA               	clrf	(_Load^(0+256)+39)
 10901                           
 10902                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10903  01BD  17B3               	bsf	_Load^(0+256),7
 10904                           
 10905                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10906  01BE  11B3               	bcf	_Load^(0+256),3
 10907                           
 10908                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10909  01BF  01D8               	clrf	(_Load^(0+256)+37)
 10910                           
 10911                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10912  01C0  0853               	movf	((_Load+1)^(0+256)+31),w
 10913  01C1  01BD               	clrf	((_Load+1)^(0+256)+9)
 10914  01C2  07BD               	addwf	((_Load+1)^(0+256)+9),f
 10915  01C3  0852               	movf	(_Load^(0+256)+31),w
 10916  01C4  01BC               	clrf	(_Load^(0+256)+9)
 10917  01C5  07BC               	addwf	(_Load^(0+256)+9),f
 10918                           
 10919                           ;OverLoad_B1.c: 182: }
 10920                           ;OverLoad_B1.c: 183: }
 10921                           ;OverLoad_B1.c: 206: }
 10922                           ;OverLoad_B1.c: 207: }
 10923                           ;OverLoad_B1.c: 208: }
 10924                           ;OverLoad_B1.c: 209: } else {
 10925  01C6  0008               	return
 10926  01C7                     l1834:	
 10927                           
 10928                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10929  01C7  1633               	bsf	_Load^(0+256),4
 10930                           
 10931                           ;OverLoad_B1.c: 211: }
 10932                           ;OverLoad_B1.c: 212: } else {
 10933  01C8  0008               	return
 10934  01C9                     l1833:	
 10935                           
 10936                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10937  01C9  1D33               	btfss	_Load^(0+256),2
 10938  01CA  29DC               	goto	l10316
 10939                           
 10940                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10941  01CB  1133               	bcf	_Load^(0+256),2
 10942                           
 10943                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10944  01CC  1233               	bcf	_Load^(0+256),4
 10945                           
 10946                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10947  01CD  01B4               	clrf	(_Load^(0+256)+1)
 10948  01CE  01B5               	clrf	((_Load+1)^(0+256)+1)
 10949                           
 10950                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10951  01CF  319E  2616  3180   	fcall	_setLoad_AH_AL_Restore
 10952                           
 10953                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10954  01D2  0022               	movlb	2	; select bank2
 10955  01D3  01D9               	clrf	(_Load^(0+256)+38)
 10956                           
 10957                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10958  01D4  01DA               	clrf	(_Load^(0+256)+39)
 10959                           
 10960                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10961  01D5  01B8               	clrf	(_Load^(0+256)+5)
 10962  01D6  01B9               	clrf	((_Load+1)^(0+256)+5)
 10963                           
 10964                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 10965  01D7  01BA               	clrf	(_Load^(0+256)+7)
 10966  01D8  01BB               	clrf	((_Load+1)^(0+256)+7)
 10967                           
 10968                           ;OverLoad_B1.c: 231: Load.Run = 0;
 10969  01D9  11B3               	bcf	_Load^(0+256),3
 10970                           
 10971                           ;OverLoad_B1.c: 232: Load.Count = 0;
 10972  01DA  01D8               	clrf	(_Load^(0+256)+37)
 10973                           
 10974                           ;OverLoad_B1.c: 233: Load.OK = 0;
 10975  01DB  13B3               	bcf	_Load^(0+256),7
 10976  01DC                     l10316:	
 10977                           
 10978                           ;OverLoad_B1.c: 255: }
 10979                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 10980  01DC  1EB3               	btfss	_Load^(0+256),5
 10981  01DD  0008               	return
 10982                           
 10983                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 10984  01DE  3001               	movlw	1
 10985  01DF  07B6               	addwf	(_Load^(0+256)+3),f
 10986  01E0  3000               	movlw	0
 10987  01E1  3DB7               	addwfc	((_Load+1)^(0+256)+3),f
 10988                           
 10989                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 10990  01E2  3001               	movlw	1
 10991  01E3  0237               	subwf	((_Load+1)^(0+256)+3),w
 10992  01E4  30F4               	movlw	244
 10993  01E5  1903               	skipnz
 10994  01E6  0236               	subwf	(_Load^(0+256)+3),w
 10995  01E7  1C03               	skipc
 10996  01E8  0008               	return
 10997                           
 10998                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 10999  01E9  01B6               	clrf	(_Load^(0+256)+3)
 11000  01EA  01B7               	clrf	((_Load+1)^(0+256)+3)
 11001                           
 11002                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11003  01EB  12B3               	bcf	_Load^(0+256),5
 11004                           
 11005                           ;OverLoad_B1.c: 261: }
 11006                           ;OverLoad_B1.c: 262: }
 11007                           ;OverLoad_B1.c: 263: }
 11008                           ;OverLoad_B1.c: 264: } else {
 11009  01EC  0008               	return
 11010  01ED                     l1823:	
 11011                           
 11012                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11013  01ED  0021               	movlb	1	; select bank1
 11014  01EE  1C2E               	btfss	_myMain^(0+128),0
 11015  01EF  0008               	return
 11016                           
 11017                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11018  01F0  0022               	movlb	2	; select bank2
 11019  01F1  1433               	bsf	_Load^(0+256),0
 11020  01F2  0008               	return
 11021  01F3                     __end_of_Load_Main:	
 11022                           
 11023                           	psect	text63
 11024  1B94                     __ptext63:	
 11025 ;; *************** function _getMain_Lights_Count *****************
 11026 ;; Defined at:
 11027 ;;		line 459 in file "../src/Main_B1.c"
 11028 ;; Parameters:    Size  Location     Type
 11029 ;;		None
 11030 ;; Auto vars:     Size  Location     Type
 11031 ;;  status2         1    4[COMMON] unsigned char 
 11032 ;;  status1         1    3[COMMON] unsigned char 
 11033 ;;  count           1    2[COMMON] unsigned char 
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  1    wreg      unsigned char 
 11036 ;; Registers used:
 11037 ;;		wreg, status,2, status,0
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;Total ram usage:        3 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    3
 11050 ;; This function calls:
 11051 ;;		Nothing
 11052 ;; This function is called by:
 11053 ;;		_Load_Main
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function _getMain_Lights_Count
 11059  1B94                     _getMain_Lights_Count:	
 11060                           
 11061                           ;Main_B1.c: 460: char count = 0;
 11062                           
 11063                           ;incstack = 0
 11064                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11065  1B94  01F2               	clrf	getMain_Lights_Count@count
 11066                           
 11067                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11068  1B95  3000               	movlw	0
 11069  1B96  0021               	movlb	1	; select bank1
 11070  1B97  19C7               	btfsc	_DimmerIntr1^(0+128),3
 11071  1B98  3001               	movlw	1
 11072  1B99  00F3               	movwf	getMain_Lights_Count@status1
 11073                           
 11074                           ;Main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11075  1B9A  3000               	movlw	0
 11076  1B9B  0022               	movlb	2	; select bank2
 11077  1B9C  19A0               	btfsc	_DimmerIntr2^(0+256),3
 11078  1B9D  3001               	movlw	1
 11079  1B9E  00F4               	movwf	getMain_Lights_Count@status2
 11080                           
 11081                           ;Main_B1.c: 490: return count = (status1 + status2);
 11082  1B9F  0873               	movf	getMain_Lights_Count@status1,w
 11083  1BA0  0774               	addwf	getMain_Lights_Count@status2,w
 11084  1BA1  00F2               	movwf	getMain_Lights_Count@count
 11085  1BA2  0008               	return
 11086  1BA3                     __end_of_getMain_Lights_Count:	
 11087                           
 11088                           	psect	text64
 11089  1A97                     __ptext64:	
 11090 ;; *************** function _getDimmer_Load_Status *****************
 11091 ;; Defined at:
 11092 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;		None
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  status          1    2[COMMON] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  1    wreg      unsigned char 
 11099 ;; Registers used:
 11100 ;;		wreg, status,2
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;Total ram usage:        1 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    3
 11113 ;; This function calls:
 11114 ;;		Nothing
 11115 ;; This function is called by:
 11116 ;;		_Load_Main
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function _getDimmer_Load_Status
 11122  1A97                     _getDimmer_Load_Status:	
 11123                           
 11124                           ;Dimmer_B1.c: 1152: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11125                           
 11126                           ;incstack = 0
 11127                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11128  1A97  3000               	movlw	0
 11129  1A98  0022               	movlb	2	; select bank2
 11130  1A99  192C               	btfsc	_Dimmer^(0+256),2
 11131  1A9A  3001               	movlw	1
 11132  1A9B  00F2               	movwf	getDimmer_Load_Status@status
 11133                           
 11134                           ;Dimmer_B1.c: 1153: return status;
 11135  1A9C  0872               	movf	getDimmer_Load_Status@status,w
 11136  1A9D  0008               	return
 11137  1A9E                     __end_of_getDimmer_Load_Status:	
 11138                           
 11139                           	psect	text65
 11140  1A90                     __ptext65:	
 11141 ;; *************** function _getDimmer_LoadGO *****************
 11142 ;; Defined at:
 11143 ;;		line 1145 in file "../src/Dimmer_B1.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;		None
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  loadgo          1    2[COMMON] unsigned char 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      unsigned char 
 11150 ;; Registers used:
 11151 ;;		wreg, status,2
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;Total ram usage:        1 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    3
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_Load_Main
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _getDimmer_LoadGO
 11173  1A90                     _getDimmer_LoadGO:	
 11174                           
 11175                           ;Dimmer_B1.c: 1146: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11179  1A90  3000               	movlw	0
 11180  1A91  0022               	movlb	2	; select bank2
 11181  1A92  18AC               	btfsc	_Dimmer^(0+256),1
 11182  1A93  3001               	movlw	1
 11183  1A94  00F2               	movwf	getDimmer_LoadGO@loadgo
 11184                           
 11185                           ;Dimmer_B1.c: 1147: return loadgo;
 11186  1A95  0872               	movf	getDimmer_LoadGO@loadgo,w
 11187  1A96  0008               	return
 11188  1A97                     __end_of_getDimmer_LoadGO:	
 11189                           
 11190                           	psect	text66
 11191  1EA8                     __ptext66:	
 11192 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11193 ;; Defined at:
 11194 ;;		line 280 in file "../src/Dimmer_B1.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  status          1    5[COMMON] unsigned char 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      unsigned char 
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        4 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    3
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_Load_Main
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           
 11223                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11224  1EA8                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11225                           
 11226                           ;Dimmer_B1.c: 281: char status = 0;
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11230  1EA8  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11231                           
 11232                           ;Dimmer_B1.c: 288: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11233  1EA9  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2292
 11234  1EAA  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2292,f
 11235  1EAB  0021               	movlb	1	; select bank1
 11236  1EAC  1A47               	btfsc	_DimmerIntr1^(0+128),4
 11237  1EAD  2EB2               	goto	l7720
 11238  1EAE  0022               	movlb	2	; select bank2
 11239  1EAF  1A20               	btfsc	_DimmerIntr2^(0+256),4
 11240  1EB0  2EB2               	goto	l7720
 11241  1EB1  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2292
 11242  1EB2                     l7720:	
 11243  1EB2  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2292,w
 11244  1EB3  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11245  1EB4  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11246  1EB5  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11247                           
 11248                           ;Dimmer_B1.c: 296: if (status == 0) {
 11249  1EB6  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11250  1EB7  1D03               	skipz
 11251  1EB8  2EC6               	goto	l7732
 11252                           
 11253                           ;Dimmer_B1.c: 302: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11254  1EB9  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11255  1EBA  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,f
 11256  1EBB  0021               	movlb	1	; select bank1
 11257  1EBC  1B47               	btfsc	_DimmerIntr1^(0+128),6
 11258  1EBD  2EC2               	goto	l7730
 11259  1EBE  0022               	movlb	2	; select bank2
 11260  1EBF  1B20               	btfsc	_DimmerIntr2^(0+256),6
 11261  1EC0  2EC2               	goto	l7730
 11262  1EC1  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11263  1EC2                     l7730:	
 11264  1EC2  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,w
 11265  1EC3  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11266  1EC4  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11267  1EC5  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11268  1EC6                     l7732:	
 11269                           
 11270                           ;Dimmer_B1.c: 308: }
 11271                           ;Dimmer_B1.c: 310: return status;
 11272  1EC6  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11273  1EC7  0008               	return
 11274  1EC8                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11275                           
 11276                           	psect	text67
 11277  1E4E                     __ptext67:	
 11278 ;; *************** function ___wmul *****************
 11279 ;; Defined at:
 11280 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;  multiplier      2    2[COMMON] unsigned int 
 11283 ;;  multiplicand    2    4[COMMON] unsigned int 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;  product         2    6[COMMON] unsigned int 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2    2[COMMON] unsigned int 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;Total ram usage:        6 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    3
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_Load_Main
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function ___wmul
 11311  1E4E                     ___wmul:	
 11312                           
 11313                           ;incstack = 0
 11314                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11315  1E4E  01F6               	clrf	___wmul@product
 11316  1E4F  01F7               	clrf	___wmul@product+1
 11317  1E50                     l8324:	
 11318  1E50  1C72               	btfss	___wmul@multiplier,0
 11319  1E51  2E56               	goto	l2997
 11320  1E52  0874               	movf	___wmul@multiplicand,w
 11321  1E53  07F6               	addwf	___wmul@product,f
 11322  1E54  0875               	movf	___wmul@multiplicand+1,w
 11323  1E55  3DF7               	addwfc	___wmul@product+1,f
 11324  1E56                     l2997:	
 11325  1E56  3001               	movlw	1
 11326  1E57                     u8645:	
 11327  1E57  35F4               	lslf	___wmul@multiplicand,f
 11328  1E58  0DF5               	rlf	___wmul@multiplicand+1,f
 11329  1E59  0B89               	decfsz	9,f
 11330  1E5A  2E57               	goto	u8645
 11331  1E5B  3001               	movlw	1
 11332  1E5C                     u8655:	
 11333  1E5C  36F3               	lsrf	___wmul@multiplier+1,f
 11334  1E5D  0CF2               	rrf	___wmul@multiplier,f
 11335  1E5E  0B89               	decfsz	9,f
 11336  1E5F  2E5C               	goto	u8655
 11337  1E60  0873               	movf	___wmul@multiplier+1,w
 11338  1E61  0472               	iorwf	___wmul@multiplier,w
 11339  1E62  1D03               	skipz
 11340  1E63  2E50               	goto	l8324
 11341  1E64  0877               	movf	___wmul@product+1,w
 11342  1E65  01F3               	clrf	?___wmul+1
 11343  1E66  07F3               	addwf	?___wmul+1,f
 11344  1E67  0876               	movf	___wmul@product,w
 11345  1E68  01F2               	clrf	?___wmul
 11346  1E69  07F2               	addwf	?___wmul,f
 11347  1E6A  0008               	return
 11348  1E6B                     __end_of___wmul:	
 11349                           
 11350                           	psect	text68
 11351  11F4                     __ptext68:	
 11352 ;; *************** function ___lwdiv *****************
 11353 ;; Defined at:
 11354 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;  divisor         2    2[COMMON] unsigned int 
 11357 ;;  dividend        2    4[COMMON] unsigned int 
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;  quotient        2    7[COMMON] unsigned int 
 11360 ;;  counter         1    9[COMMON] unsigned char 
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  2    2[COMMON] unsigned int 
 11363 ;; Registers used:
 11364 ;;		wreg, status,2, status,0
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;Total ram usage:        8 bytes
 11375 ;; Hardware stack levels used:    1
 11376 ;; Hardware stack levels required when called:    3
 11377 ;; This function calls:
 11378 ;;		Nothing
 11379 ;; This function is called by:
 11380 ;;		_Load_Main
 11381 ;;		_setRF_Main
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function ___lwdiv
 11387  11F4                     ___lwdiv:	
 11388                           
 11389                           ;incstack = 0
 11390                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11391  11F4  01F7               	clrf	___lwdiv@quotient
 11392  11F5  01F8               	clrf	___lwdiv@quotient+1
 11393  11F6  0873               	movf	___lwdiv@divisor+1,w
 11394  11F7  0472               	iorwf	___lwdiv@divisor,w
 11395  11F8  1903               	skipnz
 11396  11F9  2A23               	goto	l7656
 11397  11FA  01F9               	clrf	___lwdiv@counter
 11398  11FB  0AF9               	incf	___lwdiv@counter,f
 11399  11FC                     l7644:	
 11400  11FC  1BF3               	btfsc	___lwdiv@divisor+1,7
 11401  11FD  2A08               	goto	l7646
 11402  11FE  3001               	movlw	1
 11403  11FF                     u7395:	
 11404  11FF  35F2               	lslf	___lwdiv@divisor,f
 11405  1200  0DF3               	rlf	___lwdiv@divisor+1,f
 11406  1201  0B89               	decfsz	9,f
 11407  1202  29FF               	goto	u7395
 11408  1203  3001               	movlw	1
 11409  1204  00F6               	movwf	??___lwdiv
 11410  1205  0876               	movf	??___lwdiv,w
 11411  1206  07F9               	addwf	___lwdiv@counter,f
 11412  1207  29FC               	goto	l7644
 11413  1208                     l7646:	
 11414  1208  3001               	movlw	1
 11415  1209                     u7415:	
 11416  1209  35F7               	lslf	___lwdiv@quotient,f
 11417  120A  0DF8               	rlf	___lwdiv@quotient+1,f
 11418  120B  0B89               	decfsz	9,f
 11419  120C  2A09               	goto	u7415
 11420  120D  0873               	movf	___lwdiv@divisor+1,w
 11421  120E  0275               	subwf	___lwdiv@dividend+1,w
 11422  120F  1D03               	skipz
 11423  1210  2A13               	goto	u7425
 11424  1211  0872               	movf	___lwdiv@divisor,w
 11425  1212  0274               	subwf	___lwdiv@dividend,w
 11426  1213                     u7425:	
 11427  1213  1C03               	skipc
 11428  1214  2A1A               	goto	l7652
 11429  1215  0872               	movf	___lwdiv@divisor,w
 11430  1216  02F4               	subwf	___lwdiv@dividend,f
 11431  1217  0873               	movf	___lwdiv@divisor+1,w
 11432  1218  3BF5               	subwfb	___lwdiv@dividend+1,f
 11433  1219  1477               	bsf	___lwdiv@quotient,0
 11434  121A                     l7652:	
 11435  121A  3001               	movlw	1
 11436  121B                     u7435:	
 11437  121B  36F3               	lsrf	___lwdiv@divisor+1,f
 11438  121C  0CF2               	rrf	___lwdiv@divisor,f
 11439  121D  0B89               	decfsz	9,f
 11440  121E  2A1B               	goto	u7435
 11441  121F  3001               	movlw	1
 11442  1220  02F9               	subwf	___lwdiv@counter,f
 11443  1221  1D03               	btfss	3,2
 11444  1222  2A08               	goto	l7646
 11445  1223                     l7656:	
 11446  1223  0878               	movf	___lwdiv@quotient+1,w
 11447  1224  01F3               	clrf	?___lwdiv+1
 11448  1225  07F3               	addwf	?___lwdiv+1,f
 11449  1226  0877               	movf	___lwdiv@quotient,w
 11450  1227  01F2               	clrf	?___lwdiv
 11451  1228  07F2               	addwf	?___lwdiv,f
 11452  1229  0008               	return
 11453  122A                     __end_of___lwdiv:	
 11454                           
 11455                           	psect	text69
 11456  1A54                     __ptext69:	
 11457 ;; *************** function _Load_Initialization *****************
 11458 ;; Defined at:
 11459 ;;		line 9 in file "../src/OverLoad_B1.c"
 11460 ;; Parameters:    Size  Location     Type
 11461 ;;		None
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;		None
 11464 ;; Return value:  Size  Location     Type
 11465 ;;		None               void
 11466 ;; Registers used:
 11467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;Total ram usage:        0 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    4
 11480 ;; This function calls:
 11481 ;;		_setLoad_AH_AL_Restore
 11482 ;; This function is called by:
 11483 ;;		_main
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _Load_Initialization
 11489  1A54                     _Load_Initialization:	
 11490                           
 11491                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11495  1A54  319E  2616         	fcall	_setLoad_AH_AL_Restore
 11496  1A56  0008               	return
 11497  1A57                     __end_of_Load_Initialization:	
 11498                           
 11499                           	psect	text70
 11500  1E16                     __ptext70:	
 11501 ;; *************** function _setLoad_AH_AL_Restore *****************
 11502 ;; Defined at:
 11503 ;;		line 292 in file "../src/OverLoad_B1.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;  i               1    3[COMMON] unsigned char 
 11508 ;; Return value:  Size  Location     Type
 11509 ;;		None               void
 11510 ;; Registers used:
 11511 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;Total ram usage:        2 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; Hardware stack levels required when called:    3
 11524 ;; This function calls:
 11525 ;;		Nothing
 11526 ;; This function is called by:
 11527 ;;		_Load_Initialization
 11528 ;;		_Load_Main
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           
 11533                           ;psect for function _setLoad_AH_AL_Restore
 11534  1E16                     _setLoad_AH_AL_Restore:	
 11535                           
 11536                           ;OverLoad_B1.c: 293: char i;
 11537                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11538                           
 11539                           ;incstack = 0
 11540                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11541  1E16  01F3               	clrf	setLoad_AH_AL_Restore@i
 11542  1E17                     L9:	
 11543  1E17  3005               	movlw	5
 11544  1E18  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11545  1E19  1803               	btfsc	3,0
 11546  1E1A  0008               	return
 11547                           
 11548                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11549  1E1B  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11550  1E1C  3E3E               	addlw	(_Load+11)& (0+255)
 11551  1E1D  0086               	movwf	6
 11552  1E1E  3001               	movlw	1	; select bank2/3
 11553  1E1F  0087               	movwf	7
 11554  1E20  3000               	movlw	0
 11555  1E21  3FC0               	movwi [0]fsr1
 11556  1E22  3FC1               	movwi [1]fsr1
 11557                           
 11558                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11559  1E23  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11560  1E24  3E48               	addlw	(_Load+21)& (0+255)
 11561  1E25  0086               	movwf	6
 11562  1E26  3001               	movlw	1	; select bank2/3
 11563  1E27  0087               	movwf	7
 11564  1E28  30FF               	movlw	255
 11565  1E29  3FC0               	movwi [0]fsr1
 11566  1E2A  30FF               	movlw	255
 11567  1E2B  3FC1               	movwi [1]fsr1
 11568  1E2C  3001               	movlw	1
 11569  1E2D  00F2               	movwf	??_setLoad_AH_AL_Restore
 11570  1E2E  0872               	movf	??_setLoad_AH_AL_Restore,w
 11571  1E2F  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11572  1E30  2E17               	goto	L9
 11573  1E31                     __end_of_setLoad_AH_AL_Restore:	
 11574                           
 11575                           	psect	text71
 11576  1B4F                     __ptext71:	
 11577 ;; *************** function _LED_Main *****************
 11578 ;; Defined at:
 11579 ;;		line 47 in file "../src/LED_B1.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;		None               void
 11586 ;; Registers used:
 11587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;Total ram usage:        0 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    5
 11600 ;; This function calls:
 11601 ;;		_setLED_Main
 11602 ;; This function is called by:
 11603 ;;		_main
 11604 ;; This function uses a non-reentrant model
 11605 ;;
 11606                           
 11607                           
 11608                           ;psect for function _LED_Main
 11609  1B4F                     _LED_Main:	
 11610                           
 11611                           ;LED_B1.c: 58: setLED_Main(1);
 11612                           
 11613                           ;incstack = 0
 11614                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11615  1B4F  3001               	movlw	1
 11616  1B50  3192  22E2  319B   	fcall	_setLED_Main
 11617                           
 11618                           ;LED_B1.c: 61: setLED_Main(2);
 11619  1B53  3002               	movlw	2
 11620  1B54  3192  22E2  319B   	fcall	_setLED_Main
 11621                           
 11622                           ;LED_B1.c: 67: setLED_Main(99);
 11623  1B57  3063               	movlw	99
 11624  1B58  3192  22E2         	fcall	_setLED_Main
 11625  1B5A  0008               	return
 11626  1B5B                     __end_of_LED_Main:	
 11627                           
 11628                           	psect	text72
 11629  12E2                     __ptext72:	
 11630 ;; *************** function _setLED_Main *****************
 11631 ;; Defined at:
 11632 ;;		line 229 in file "../src/LED_B1.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  led             1    wreg     unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  led             1    6[COMMON] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;		None               void
 11639 ;; Registers used:
 11640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;Total ram usage:        3 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    4
 11653 ;; This function calls:
 11654 ;;		_LedPointSelect
 11655 ;; This function is called by:
 11656 ;;		_LED_Main
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _setLED_Main
 11662  12E2                     _setLED_Main:	
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11666                           ;setLED_Main@led stored from wreg
 11667  12E2  00F6               	movwf	setLED_Main@led
 11668                           
 11669                           ;LED_B1.c: 230: LedPointSelect(led);
 11670  12E3  0876               	movf	setLED_Main@led,w
 11671  12E4  319E  2631  3192   	fcall	_LedPointSelect
 11672                           
 11673                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11674  12E7  0021               	movlb	1	; select bank1
 11675  12E8  085C               	movf	_LED^(0+128),w
 11676  12E9  0086               	movwf	6
 11677  12EA  3001               	movlw	1	; select bank2/3
 11678  12EB  0087               	movwf	7
 11679  12EC  1C81               	btfss	1,1
 11680  12ED  0008               	return
 11681                           
 11682                           ;LED_B1.c: 232: LED->Time++;
 11683  12EE  0A5C               	incf	_LED^(0+128),w
 11684  12EF  0086               	movwf	6
 11685  12F0  3001               	movlw	1	; select bank2/3
 11686  12F1  0087               	movwf	7
 11687  12F2  3001               	movlw	1
 11688  12F3  0781               	addwf	1,f
 11689  12F4  3141               	addfsr 1,1
 11690  12F5  1803               	skipnc
 11691  12F6  0A81               	incf	1,f
 11692                           
 11693                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11694  12F7  0A5C               	incf	_LED^(0+128),w
 11695  12F8  0086               	movwf	6
 11696  12F9  3001               	movlw	1	; select bank2/3
 11697  12FA  0087               	movwf	7
 11698  12FB  3F40               	moviw [0]fsr1
 11699  12FC  00F4               	movwf	??_setLED_Main
 11700  12FD  3F41               	moviw [1]fsr1
 11701  12FE  00F5               	movwf	??_setLED_Main+1
 11702  12FF  3000               	movlw	0
 11703  1300  0275               	subwf	??_setLED_Main+1,w
 11704  1301  3019               	movlw	25
 11705  1302  1903               	skipnz
 11706  1303  0274               	subwf	??_setLED_Main,w
 11707  1304  1C03               	skipc
 11708  1305  0008               	return
 11709                           
 11710                           ;LED_B1.c: 234: LED->Time = 0;
 11711  1306  0A5C               	incf	_LED^(0+128),w
 11712  1307  0086               	movwf	6
 11713  1308  3001               	movlw	1	; select bank2/3
 11714  1309  0087               	movwf	7
 11715  130A  3000               	movlw	0
 11716  130B  3FC0               	movwi [0]fsr1
 11717  130C  3FC1               	movwi [1]fsr1
 11718                           
 11719                           ;LED_B1.c: 237: if (led == 1) {
 11720  130D  0876               	movf	setLED_Main@led,w
 11721  130E  3A01               	xorlw	1
 11722  130F  1D03               	skipz
 11723  1310  2B14               	goto	l1146
 11724                           
 11725                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11726  1311  3008               	movlw	8
 11727  1312  0020               	movlb	0	; select bank0
 11728  1313  068C               	xorwf	12,f
 11729  1314                     l1146:	
 11730                           
 11731                           ;LED_B1.c: 239: }
 11732                           ;LED_B1.c: 242: if (led == 2) {
 11733  1314  0876               	movf	setLED_Main@led,w
 11734  1315  3A02               	xorlw	2
 11735  1316  1D03               	skipz
 11736  1317  2B1B               	goto	l1147
 11737                           
 11738                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11739  1318  3080               	movlw	128
 11740  1319  0020               	movlb	0	; select bank0
 11741  131A  068E               	xorwf	14,f
 11742  131B                     l1147:	
 11743                           
 11744                           ;LED_B1.c: 244: }
 11745                           ;LED_B1.c: 252: if (led == 99) {
 11746  131B  0876               	movf	setLED_Main@led,w
 11747  131C  3A63               	xorlw	99
 11748  131D  1D03               	skipz
 11749  131E  0008               	return
 11750                           
 11751                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11752  131F  3020               	movlw	32
 11753  1320  0020               	movlb	0	; select bank0
 11754  1321  068D               	xorwf	13,f
 11755  1322  0008               	return
 11756  1323                     __end_of_setLED_Main:	
 11757                           
 11758                           	psect	text73
 11759  1B43                     __ptext73:	
 11760 ;; *************** function _LED_Initialization *****************
 11761 ;; Defined at:
 11762 ;;		line 31 in file "../src/LED_B1.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;		None
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;		None
 11767 ;; Return value:  Size  Location     Type
 11768 ;;		None               void
 11769 ;; Registers used:
 11770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;Total ram usage:        0 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    6
 11783 ;; This function calls:
 11784 ;;		_setLED_Initialization
 11785 ;; This function is called by:
 11786 ;;		_main
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           
 11791                           ;psect for function _LED_Initialization
 11792  1B43                     _LED_Initialization:	
 11793                           
 11794                           ;LED_B1.c: 33: setLED_Initialization(1);
 11795                           
 11796                           ;incstack = 0
 11797                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11798  1B43  3001               	movlw	1
 11799  1B44  319B  23F1  319B   	fcall	_setLED_Initialization
 11800                           
 11801                           ;LED_B1.c: 36: setLED_Initialization(2);
 11802  1B47  3002               	movlw	2
 11803  1B48  319B  23F1  319B   	fcall	_setLED_Initialization
 11804                           
 11805                           ;LED_B1.c: 42: setLED_Initialization(99);
 11806  1B4B  3063               	movlw	99
 11807  1B4C  319B  23F1         	fcall	_setLED_Initialization
 11808  1B4E  0008               	return
 11809  1B4F                     __end_of_LED_Initialization:	
 11810                           
 11811                           	psect	text74
 11812  1BF1                     __ptext74:	
 11813 ;; *************** function _setLED_Initialization *****************
 11814 ;; Defined at:
 11815 ;;		line 74 in file "../src/LED_B1.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  led             1    wreg     unsigned char 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  led             1    6[COMMON] unsigned char 
 11820 ;; Return value:  Size  Location     Type
 11821 ;;		None               void
 11822 ;; Registers used:
 11823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11824 ;; Tracked objects:
 11825 ;;		On entry : 0/0
 11826 ;;		On exit  : 0/0
 11827 ;;		Unchanged: 0/0
 11828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;Total ram usage:        1 bytes
 11834 ;; Hardware stack levels used:    1
 11835 ;; Hardware stack levels required when called:    5
 11836 ;; This function calls:
 11837 ;;		_LedPointSelect
 11838 ;;		_setLED
 11839 ;; This function is called by:
 11840 ;;		_LED_Initialization
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           
 11845                           ;psect for function _setLED_Initialization
 11846  1BF1                     _setLED_Initialization:	
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11850                           ;setLED_Initialization@led stored from wreg
 11851  1BF1  00F6               	movwf	setLED_Initialization@led
 11852                           
 11853                           ;LED_B1.c: 75: LedPointSelect(led);
 11854  1BF2  0876               	movf	setLED_Initialization@led,w
 11855  1BF3  319E  2631  319B   	fcall	_LedPointSelect
 11856                           
 11857                           ;LED_B1.c: 76: LED->Enable = 1;
 11858  1BF6  0021               	movlb	1	; select bank1
 11859  1BF7  085C               	movf	_LED^(0+128),w
 11860  1BF8  0086               	movwf	6
 11861  1BF9  3001               	movlw	1	; select bank2/3
 11862  1BFA  0087               	movwf	7
 11863  1BFB  1401               	bsf	1,0
 11864                           
 11865                           ;LED_B1.c: 77: setLED(led, 0);
 11866  1BFC  01F4               	clrf	setLED@command
 11867  1BFD  0876               	movf	setLED_Initialization@led,w
 11868  1BFE  3195  25BC         	fcall	_setLED
 11869  1C00  0008               	return
 11870  1C01                     __end_of_setLED_Initialization:	
 11871                           
 11872                           	psect	text75
 11873  12A1                     __ptext75:	
 11874 ;; *************** function _Flash_Memory_Main *****************
 11875 ;; Defined at:
 11876 ;;		line 976 in file "../src/MCU_B1.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;		None
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;  key_Status      1    0[BANK0 ] unsigned char 
 11881 ;; Return value:  Size  Location     Type
 11882 ;;		None               void
 11883 ;; Registers used:
 11884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;Total ram usage:        3 bytes
 11895 ;; Hardware stack levels used:    1
 11896 ;; Hardware stack levels required when called:    6
 11897 ;; This function calls:
 11898 ;;		_Flash_Memory_Modify
 11899 ;;		_getAll_Sw_KeyStatus
 11900 ;;		_getMain_All_LightsStatus
 11901 ;; This function is called by:
 11902 ;;		_main
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           
 11907                           ;psect for function _Flash_Memory_Main
 11908  12A1                     _Flash_Memory_Main:	
 11909                           
 11910                           ;MCU_B1.c: 977: char key_Status = 0;
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11914  12A1  0020               	movlb	0	; select bank0
 11915  12A2  01A0               	clrf	Flash_Memory_Main@key_Status
 11916                           
 11917                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 11918  12A3  319C  2442  3192   	fcall	_getAll_Sw_KeyStatus
 11919  12A6  00F8               	movwf	??_Flash_Memory_Main
 11920  12A7  0878               	movf	??_Flash_Memory_Main,w
 11921  12A8  0020               	movlb	0	; select bank0
 11922  12A9  00A0               	movwf	Flash_Memory_Main@key_Status
 11923                           
 11924                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 11925  12AA  0024               	movlb	4	; select bank4
 11926  12AB  1C44               	btfss	(_Memory^(0+512)+36),0
 11927  12AC  0008               	return
 11928                           
 11929                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11930  12AD  0020               	movlb	0	; select bank0
 11931  12AE  01A1               	clrf	_Flash_Memory_Main$3305
 11932  12AF  319B  2376  3192   	fcall	_getMain_All_LightsStatus
 11933  12B2  3800               	iorlw	0
 11934  12B3  1D03               	skipz
 11935  12B4  2ABB               	goto	l10116
 11936  12B5  0020               	movlb	0	; select bank0
 11937  12B6  08A0               	movf	Flash_Memory_Main@key_Status,f
 11938  12B7  1D03               	skipz
 11939  12B8  2ABB               	goto	l10116
 11940  12B9  01A1               	clrf	_Flash_Memory_Main$3305
 11941  12BA  0AA1               	incf	_Flash_Memory_Main$3305,f
 11942  12BB                     l10116:	
 11943  12BB  0020               	movlb	0	; select bank0
 11944  12BC  0821               	movf	_Flash_Memory_Main$3305,w
 11945  12BD  0024               	movlb	4	; select bank4
 11946  12BE  10C4               	bcf	(_Memory^(0+512)+36),1
 11947  12BF  1D03               	skipz
 11948  12C0  14C4               	bsf	(_Memory^(0+512)+36),1
 11949                           
 11950                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 11951  12C1  1CC4               	btfss	(_Memory^(0+512)+36),1
 11952  12C2  2ADC               	goto	l1420
 11953                           
 11954                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 11955  12C3  15C4               	bsf	(_Memory^(0+512)+36),3
 11956                           
 11957                           ;MCU_B1.c: 985: Memory.Time++;
 11958  12C4  3001               	movlw	1
 11959  12C5  07C2               	addwf	(_Memory^(0+512)+34),f
 11960  12C6  3000               	movlw	0
 11961  12C7  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11962                           
 11963                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 11964  12C8  3022               	movlw	34
 11965  12C9  3E20               	addlw	_Memory& (0+255)
 11966  12CA  0086               	movwf	6
 11967  12CB  3002               	movlw	2	; select bank4/5
 11968  12CC  0087               	movwf	7
 11969  12CD  3F40               	moviw [0]fsr1
 11970  12CE  3A0A               	xorlw	10
 11971  12CF  1D03               	skipz
 11972  12D0  2AD3               	goto	u11525
 11973  12D1  3F41               	moviw [1]fsr1
 11974  12D2  3A00               	xorlw	0
 11975  12D3                     u11525:	
 11976  12D3  1D03               	skipz
 11977  12D4  0008               	return
 11978                           
 11979                           ;MCU_B1.c: 987: Memory.Time = 0;
 11980  12D5  01C2               	clrf	(_Memory^(0+512)+34)
 11981  12D6  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11982                           
 11983                           ;MCU_B1.c: 988: Memory.Modify = 0;
 11984  12D7  1044               	bcf	(_Memory^(0+512)+36),0
 11985                           
 11986                           ;MCU_B1.c: 989: Memory.GO = 0;
 11987  12D8  10C4               	bcf	(_Memory^(0+512)+36),1
 11988                           
 11989                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 11990  12D9  318B  232E         	fcall	_Flash_Memory_Modify
 11991                           
 11992                           ;MCU_B1.c: 991: }
 11993                           ;MCU_B1.c: 992: } else {
 11994  12DB  0008               	return
 11995  12DC                     l1420:	
 11996                           
 11997                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 11998  12DC  1DC4               	btfss	(_Memory^(0+512)+36),3
 11999  12DD  0008               	return
 12000                           
 12001                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12002  12DE  11C4               	bcf	(_Memory^(0+512)+36),3
 12003                           
 12004                           ;MCU_B1.c: 995: Memory.Time = 0;
 12005  12DF  01C2               	clrf	(_Memory^(0+512)+34)
 12006  12E0  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12007  12E1  0008               	return
 12008  12E2                     __end_of_Flash_Memory_Main:	
 12009                           
 12010                           	psect	text76
 12011  1C42                     __ptext76:	
 12012 ;; *************** function _getAll_Sw_KeyStatus *****************
 12013 ;; Defined at:
 12014 ;;		line 278 in file "../src/Switch_B1.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  status          1    3[COMMON] unsigned char 
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      unsigned char 
 12021 ;; Registers used:
 12022 ;;		wreg, status,2
 12023 ;; Tracked objects:
 12024 ;;		On entry : 0/0
 12025 ;;		On exit  : 0/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;Total ram usage:        3 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:    3
 12035 ;; This function calls:
 12036 ;;		Nothing
 12037 ;; This function is called by:
 12038 ;;		_Flash_Memory_Main
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           
 12043                           ;psect for function _getAll_Sw_KeyStatus
 12044  1C42                     _getAll_Sw_KeyStatus:	
 12045                           
 12046                           ;Switch_B1.c: 279: char status = 0;
 12047                           
 12048                           ;incstack = 0
 12049                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12050  1C42  01F3               	clrf	getAll_Sw_KeyStatus@status
 12051                           
 12052                           ;Switch_B1.c: 289: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
 12053  1C43  01F4               	clrf	_getAll_Sw_KeyStatus$6629
 12054  1C44  0AF4               	incf	_getAll_Sw_KeyStatus$6629,f
 12055  1C45  0020               	movlb	0	; select bank0
 12056  1C46  1F0C               	btfss	12,6	;volatile
 12057  1C47  1A0C               	btfsc	12,4	;volatile
 12058  1C48  2C4D               	goto	l9788
 12059  1C49  1C0C               	btfss	12,0	;volatile
 12060  1C4A  188D               	btfsc	13,1	;volatile
 12061  1C4B  2C4D               	goto	l9788
 12062  1C4C  01F4               	clrf	_getAll_Sw_KeyStatus$6629
 12063  1C4D                     l9788:	
 12064  1C4D  0874               	movf	_getAll_Sw_KeyStatus$6629,w
 12065  1C4E  00F2               	movwf	??_getAll_Sw_KeyStatus
 12066  1C4F  0872               	movf	??_getAll_Sw_KeyStatus,w
 12067  1C50  00F3               	movwf	getAll_Sw_KeyStatus@status
 12068                           
 12069                           ;Switch_B1.c: 302: return status;
 12070  1C51  0873               	movf	getAll_Sw_KeyStatus@status,w
 12071  1C52  0008               	return
 12072  1C53                     __end_of_getAll_Sw_KeyStatus:	
 12073                           
 12074                           	psect	text77
 12075  0B2E                     __ptext77:	
 12076 ;; *************** function _Flash_Memory_Modify *****************
 12077 ;; Defined at:
 12078 ;;		line 1053 in file "../src/MCU_B1.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;		None
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;  i               1    7[COMMON] unsigned char 
 12083 ;; Return value:  Size  Location     Type
 12084 ;;		None               void
 12085 ;; Registers used:
 12086 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;Total ram usage:        2 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    5
 12099 ;; This function calls:
 12100 ;;		_Flash_Memory_Erasing
 12101 ;;		_Flash_Memory_Read
 12102 ;;		_Flash_Memory_Write
 12103 ;;		_setMemory_Data
 12104 ;; This function is called by:
 12105 ;;		_Flash_Memory_Main
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109                           
 12110                           ;psect for function _Flash_Memory_Modify
 12111  0B2E                     _Flash_Memory_Modify:	
 12112                           
 12113                           ;MCU_B1.c: 1054: char i = 0;
 12114                           
 12115                           ;incstack = 0
 12116                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12117  0B2E  01F7               	clrf	Flash_Memory_Modify@i
 12118                           
 12119                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12120  0B2F  01F7               	clrf	Flash_Memory_Modify@i
 12121  0B30  3020               	movlw	32
 12122  0B31  0277               	subwf	Flash_Memory_Modify@i,w
 12123  0B32  1803               	btfsc	3,0
 12124  0B33  2B48               	goto	l9806
 12125  0B34                     l9800:	
 12126                           
 12127                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12128  0B34  0877               	movf	Flash_Memory_Modify@i,w
 12129  0B35  319C  24AE  318B   	fcall	_Flash_Memory_Read
 12130  0B38  00F6               	movwf	??_Flash_Memory_Modify
 12131  0B39  0877               	movf	Flash_Memory_Modify@i,w
 12132  0B3A  3E20               	addlw	_Memory& (0+255)
 12133  0B3B  0086               	movwf	6
 12134  0B3C  3002               	movlw	2	; select bank4/5
 12135  0B3D  0087               	movwf	7
 12136  0B3E  0876               	movf	??_Flash_Memory_Modify,w
 12137  0B3F  0081               	movwf	1
 12138  0B40  3001               	movlw	1
 12139  0B41  00F6               	movwf	??_Flash_Memory_Modify
 12140  0B42  0876               	movf	??_Flash_Memory_Modify,w
 12141  0B43  07F7               	addwf	Flash_Memory_Modify@i,f
 12142  0B44  3020               	movlw	32
 12143  0B45  0277               	subwf	Flash_Memory_Modify@i,w
 12144  0B46  1C03               	skipc
 12145  0B47  2B34               	goto	l9800
 12146  0B48                     l9806:	
 12147                           
 12148                           ;MCU_B1.c: 1057: }
 12149                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12150  0B48  0020               	movlb	0	; select bank0
 12151  0B49  086C               	movf	_product,w
 12152  0B4A  0086               	movwf	6
 12153  0B4B  3002               	movlw	2	; select bank4/5
 12154  0B4C  0087               	movwf	7
 12155  0B4D  3002               	movlw	2	; select bank4/5
 12156  0B4E  3F4C               	moviw [12]fsr1
 12157  0B4F  00F2               	movwf	setMemory_Data@data
 12158  0B50  3000               	movlw	0
 12159  0B51  319A  22FE  318B   	fcall	_setMemory_Data
 12160                           
 12161                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12162  0B54  0020               	movlb	0	; select bank0
 12163  0B55  086C               	movf	_product,w
 12164  0B56  0086               	movwf	6
 12165  0B57  3002               	movlw	2	; select bank4/5
 12166  0B58  0087               	movwf	7
 12167  0B59  3002               	movlw	2	; select bank4/5
 12168  0B5A  3F4D               	moviw [13]fsr1
 12169  0B5B  00F2               	movwf	setMemory_Data@data
 12170  0B5C  3001               	movlw	1
 12171  0B5D  319A  22FE  318B   	fcall	_setMemory_Data
 12172                           
 12173                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12174  0B60  0020               	movlb	0	; select bank0
 12175  0B61  086C               	movf	_product,w
 12176  0B62  0086               	movwf	6
 12177  0B63  3002               	movlw	2	; select bank4/5
 12178  0B64  0087               	movwf	7
 12179  0B65  3002               	movlw	2	; select bank4/5
 12180  0B66  3F4E               	moviw [14]fsr1
 12181  0B67  00F2               	movwf	setMemory_Data@data
 12182  0B68  3002               	movlw	2
 12183  0B69  319A  22FE  318B   	fcall	_setMemory_Data
 12184                           
 12185                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12186  0B6C  0020               	movlb	0	; select bank0
 12187  0B6D  086C               	movf	_product,w
 12188  0B6E  0086               	movwf	6
 12189  0B6F  3002               	movlw	2	; select bank4/5
 12190  0B70  0087               	movwf	7
 12191  0B71  3002               	movlw	2	; select bank4/5
 12192  0B72  3F55               	moviw [21]fsr1
 12193  0B73  00F2               	movwf	setMemory_Data@data
 12194  0B74  3003               	movlw	3
 12195  0B75  319A  22FE  318B   	fcall	_setMemory_Data
 12196                           
 12197                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12198  0B78  0020               	movlb	0	; select bank0
 12199  0B79  086C               	movf	_product,w
 12200  0B7A  0086               	movwf	6
 12201  0B7B  3002               	movlw	2	; select bank4/5
 12202  0B7C  0087               	movwf	7
 12203  0B7D  3002               	movlw	2	; select bank4/5
 12204  0B7E  3F56               	moviw [22]fsr1
 12205  0B7F  00F2               	movwf	setMemory_Data@data
 12206  0B80  3004               	movlw	4
 12207  0B81  319A  22FE  318B   	fcall	_setMemory_Data
 12208                           
 12209                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12210  0B84  0020               	movlb	0	; select bank0
 12211  0B85  086C               	movf	_product,w
 12212  0B86  0086               	movwf	6
 12213  0B87  3002               	movlw	2	; select bank4/5
 12214  0B88  0087               	movwf	7
 12215  0B89  3002               	movlw	2	; select bank4/5
 12216  0B8A  3F57               	moviw [23]fsr1
 12217  0B8B  00F2               	movwf	setMemory_Data@data
 12218  0B8C  3005               	movlw	5
 12219  0B8D  319A  22FE  318B   	fcall	_setMemory_Data
 12220                           
 12221                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12222  0B90  0021               	movlb	1	; select bank1
 12223  0B91  1EB8               	btfss	(_myMain^(0+128)+10),5
 12224  0B92  2B9C               	goto	l9814
 12225                           
 12226                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12227  0B93  12B8               	bcf	(_myMain^(0+128)+10),5
 12228                           
 12229                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12230  0B94  30AA               	movlw	170
 12231  0B95  00F6               	movwf	??_Flash_Memory_Modify
 12232  0B96  0876               	movf	??_Flash_Memory_Modify,w
 12233  0B97  00F2               	movwf	setMemory_Data@data
 12234  0B98  301E               	movlw	30
 12235  0B99  319A  22FE  318B   	fcall	_setMemory_Data
 12236  0B9C                     l9814:	
 12237                           
 12238                           ;MCU_B1.c: 1068: }
 12239                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12240  0B9C  0024               	movlb	4	; select bank4
 12241  0B9D  1D44               	btfss	(_Memory^(0+512)+36),2
 12242  0B9E  2BA3               	goto	l1444
 12243                           
 12244                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12245  0B9F  1144               	bcf	(_Memory^(0+512)+36),2
 12246                           
 12247                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12248  0BA0  0021               	movlb	1	; select bank1
 12249  0BA1  11AE               	bcf	_myMain^(0+128),3
 12250                           
 12251                           ;MCU_B1.c: 1073: myMain.First = 0;
 12252  0BA2  12AE               	bcf	_myMain^(0+128),5
 12253  0BA3                     l1444:	
 12254                           
 12255                           ;MCU_B1.c: 1075: }
 12256                           ;MCU_B1.c: 1076: GIE = 0;
 12257  0BA3  138B               	bcf	11,7	;volatile
 12258                           
 12259                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12260  0BA4  319B  2337  318B   	fcall	_Flash_Memory_Erasing
 12261                           
 12262                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12263  0BA7  3190  20D4         	fcall	_Flash_Memory_Write
 12264                           
 12265                           ;MCU_B1.c: 1079: GIE = 1;
 12266  0BA9  178B               	bsf	11,7	;volatile
 12267  0BAA  0008               	return
 12268  0BAB                     __end_of_Flash_Memory_Modify:	
 12269                           
 12270                           	psect	text78
 12271  1B37                     __ptext78:	
 12272 ;; *************** function _Flash_Memory_Erasing *****************
 12273 ;; Defined at:
 12274 ;;		line 1042 in file "../src/MCU_B1.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;		None
 12279 ;; Return value:  Size  Location     Type
 12280 ;;		None               void
 12281 ;; Registers used:
 12282 ;;		wreg, status,2, status,0, pclath, cstack
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;Total ram usage:        0 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    4
 12295 ;; This function calls:
 12296 ;;		_Flash_Memory_Unlock
 12297 ;; This function is called by:
 12298 ;;		_Flash_Memory_Modify
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           
 12303                           ;psect for function _Flash_Memory_Erasing
 12304  1B37                     _Flash_Memory_Erasing:	
 12305                           
 12306                           ;MCU_B1.c: 1043: CFGS = 0;
 12307                           
 12308                           ;incstack = 0
 12309                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12310  1B37  0023               	movlb	3	; select bank3
 12311  1B38  1315               	bcf	21,6	;volatile
 12312                           
 12313                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12314  1B39  3030               	movlw	48
 12315  1B3A  0092               	movwf	18	;volatile
 12316                           
 12317                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12318  1B3B  0191               	clrf	17	;volatile
 12319                           
 12320                           ;MCU_B1.c: 1046: FREE = 1;
 12321  1B3C  1615               	bsf	21,4	;volatile
 12322                           
 12323                           ;MCU_B1.c: 1047: WREN = 1;
 12324  1B3D  1515               	bsf	21,2	;volatile
 12325                           
 12326                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12327  1B3E  319A  22CD         	fcall	_Flash_Memory_Unlock
 12328                           
 12329                           ;MCU_B1.c: 1049: WREN = 0;
 12330  1B40  0023               	movlb	3	; select bank3
 12331  1B41  1115               	bcf	21,2	;volatile
 12332  1B42  0008               	return
 12333  1B43                     __end_of_Flash_Memory_Erasing:	
 12334                           
 12335                           	psect	text79
 12336  06AF                     __ptext79:	
 12337 ;; *************** function _Flash_Memory_Initialization *****************
 12338 ;; Defined at:
 12339 ;;		line 932 in file "../src/MCU_B1.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;		None
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  value           1    7[COMMON] unsigned char 
 12344 ;; Return value:  Size  Location     Type
 12345 ;;		None               void
 12346 ;; Registers used:
 12347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12348 ;; Tracked objects:
 12349 ;;		On entry : 0/0
 12350 ;;		On exit  : 0/0
 12351 ;;		Unchanged: 0/0
 12352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;Total ram usage:        2 bytes
 12358 ;; Hardware stack levels used:    1
 12359 ;; Hardware stack levels required when called:    5
 12360 ;; This function calls:
 12361 ;;		_Flash_Memory_Read
 12362 ;;		_Flash_Memory_Write
 12363 ;;		_setMemory_Data
 12364 ;; This function is called by:
 12365 ;;		_main
 12366 ;; This function uses a non-reentrant model
 12367 ;;
 12368                           
 12369                           
 12370                           ;psect for function _Flash_Memory_Initialization
 12371  06AF                     _Flash_Memory_Initialization:	
 12372                           
 12373                           ;MCU_B1.c: 933: char value = 0;
 12374                           
 12375                           ;incstack = 0
 12376                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12377  06AF  01F7               	clrf	Flash_Memory_Initialization@value
 12378                           
 12379                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12380  06B0  301F               	movlw	31
 12381  06B1  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12382  06B4  3AAA               	xorlw	170
 12383  06B5  1D03               	skipz
 12384  06B6  2F24               	goto	l10090
 12385                           
 12386                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12387  06B7  3000               	movlw	0
 12388  06B8  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12389  06BB  00F6               	movwf	??_Flash_Memory_Initialization
 12390  06BC  0020               	movlb	0	; select bank0
 12391  06BD  086C               	movf	_product,w
 12392  06BE  3E0C               	addlw	12
 12393  06BF  0086               	movwf	6
 12394  06C0  3002               	movlw	2	; select bank4/5
 12395  06C1  0087               	movwf	7
 12396  06C2  0876               	movf	??_Flash_Memory_Initialization,w
 12397  06C3  0081               	movwf	1
 12398                           
 12399                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12400  06C4  3001               	movlw	1
 12401  06C5  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12402  06C8  00F6               	movwf	??_Flash_Memory_Initialization
 12403  06C9  0020               	movlb	0	; select bank0
 12404  06CA  086C               	movf	_product,w
 12405  06CB  3E0D               	addlw	13
 12406  06CC  0086               	movwf	6
 12407  06CD  3002               	movlw	2	; select bank4/5
 12408  06CE  0087               	movwf	7
 12409  06CF  0876               	movf	??_Flash_Memory_Initialization,w
 12410  06D0  0081               	movwf	1
 12411                           
 12412                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12413  06D1  3002               	movlw	2
 12414  06D2  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12415  06D5  00F6               	movwf	??_Flash_Memory_Initialization
 12416  06D6  0020               	movlb	0	; select bank0
 12417  06D7  086C               	movf	_product,w
 12418  06D8  3E0E               	addlw	14
 12419  06D9  0086               	movwf	6
 12420  06DA  3002               	movlw	2	; select bank4/5
 12421  06DB  0087               	movwf	7
 12422  06DC  0876               	movf	??_Flash_Memory_Initialization,w
 12423  06DD  0081               	movwf	1
 12424                           
 12425                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12426  06DE  3003               	movlw	3
 12427  06DF  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12428  06E2  00F6               	movwf	??_Flash_Memory_Initialization
 12429  06E3  0020               	movlb	0	; select bank0
 12430  06E4  086C               	movf	_product,w
 12431  06E5  3E15               	addlw	21
 12432  06E6  0086               	movwf	6
 12433  06E7  3002               	movlw	2	; select bank4/5
 12434  06E8  0087               	movwf	7
 12435  06E9  0876               	movf	??_Flash_Memory_Initialization,w
 12436  06EA  0081               	movwf	1
 12437                           
 12438                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12439  06EB  3004               	movlw	4
 12440  06EC  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12441  06EF  00F6               	movwf	??_Flash_Memory_Initialization
 12442  06F0  0020               	movlb	0	; select bank0
 12443  06F1  086C               	movf	_product,w
 12444  06F2  3E16               	addlw	22
 12445  06F3  0086               	movwf	6
 12446  06F4  3002               	movlw	2	; select bank4/5
 12447  06F5  0087               	movwf	7
 12448  06F6  0876               	movf	??_Flash_Memory_Initialization,w
 12449  06F7  0081               	movwf	1
 12450                           
 12451                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12452  06F8  3005               	movlw	5
 12453  06F9  319C  24AE  3186   	fcall	_Flash_Memory_Read
 12454  06FC  00F6               	movwf	??_Flash_Memory_Initialization
 12455  06FD  0020               	movlb	0	; select bank0
 12456  06FE  086C               	movf	_product,w
 12457  06FF  3E17               	addlw	23
 12458  0700  0086               	movwf	6
 12459  0701  3002               	movlw	2	; select bank4/5
 12460  0702  0087               	movwf	7
 12461  0703  0876               	movf	??_Flash_Memory_Initialization,w
 12462  0704  0081               	movwf	1
 12463                           
 12464                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12465  0705  086C               	movf	_product,w
 12466  0706  3E0C               	addlw	12
 12467  0707  0086               	movwf	6
 12468  0708  3002               	movlw	2	; select bank4/5
 12469  0709  0087               	movwf	7
 12470  070A  0801               	movf	1,w
 12471  070B  3AFF               	xorlw	255
 12472  070C  1D03               	skipz
 12473  070D  0008               	return
 12474  070E  086C               	movf	_product,w
 12475  070F  3E0D               	addlw	13
 12476  0710  0086               	movwf	6
 12477  0711  3002               	movlw	2	; select bank4/5
 12478  0712  0087               	movwf	7
 12479  0713  0801               	movf	1,w
 12480  0714  3AFF               	xorlw	255
 12481  0715  1D03               	skipz
 12482  0716  0008               	return
 12483  0717  086C               	movf	_product,w
 12484  0718  3E0E               	addlw	14
 12485  0719  0086               	movwf	6
 12486  071A  3002               	movlw	2	; select bank4/5
 12487  071B  0087               	movwf	7
 12488  071C  0801               	movf	1,w
 12489  071D  3AFF               	xorlw	255
 12490  071E  1D03               	skipz
 12491  071F  0008               	return
 12492                           
 12493                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12494  0720  0021               	movlb	1	; select bank1
 12495  0721  15AE               	bsf	_myMain^(0+128),3
 12496                           
 12497                           ;MCU_B1.c: 951: myMain.First = 1;
 12498  0722  16AE               	bsf	_myMain^(0+128),5
 12499                           
 12500                           ;MCU_B1.c: 952: }
 12501                           ;MCU_B1.c: 953: } else {
 12502  0723  0008               	return
 12503  0724                     l10090:	
 12504                           
 12505                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12506  0724  30FF               	movlw	255
 12507  0725  00F6               	movwf	??_Flash_Memory_Initialization
 12508  0726  0876               	movf	??_Flash_Memory_Initialization,w
 12509  0727  00F2               	movwf	setMemory_Data@data
 12510  0728  3000               	movlw	0
 12511  0729  319A  22FE  3186   	fcall	_setMemory_Data
 12512                           
 12513                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12514  072C  30FF               	movlw	255
 12515  072D  00F6               	movwf	??_Flash_Memory_Initialization
 12516  072E  0876               	movf	??_Flash_Memory_Initialization,w
 12517  072F  00F2               	movwf	setMemory_Data@data
 12518  0730  3001               	movlw	1
 12519  0731  319A  22FE  3186   	fcall	_setMemory_Data
 12520                           
 12521                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12522  0734  30FF               	movlw	255
 12523  0735  00F6               	movwf	??_Flash_Memory_Initialization
 12524  0736  0876               	movf	??_Flash_Memory_Initialization,w
 12525  0737  00F2               	movwf	setMemory_Data@data
 12526  0738  3002               	movlw	2
 12527  0739  319A  22FE  3186   	fcall	_setMemory_Data
 12528                           
 12529                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12530  073C  30FF               	movlw	255
 12531  073D  00F6               	movwf	??_Flash_Memory_Initialization
 12532  073E  0876               	movf	??_Flash_Memory_Initialization,w
 12533  073F  00F2               	movwf	setMemory_Data@data
 12534  0740  3003               	movlw	3
 12535  0741  319A  22FE  3186   	fcall	_setMemory_Data
 12536                           
 12537                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12538  0744  30FF               	movlw	255
 12539  0745  00F6               	movwf	??_Flash_Memory_Initialization
 12540  0746  0876               	movf	??_Flash_Memory_Initialization,w
 12541  0747  00F2               	movwf	setMemory_Data@data
 12542  0748  3004               	movlw	4
 12543  0749  319A  22FE  3186   	fcall	_setMemory_Data
 12544                           
 12545                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12546  074C  30FF               	movlw	255
 12547  074D  00F6               	movwf	??_Flash_Memory_Initialization
 12548  074E  0876               	movf	??_Flash_Memory_Initialization,w
 12549  074F  00F2               	movwf	setMemory_Data@data
 12550  0750  3005               	movlw	5
 12551  0751  319A  22FE  3186   	fcall	_setMemory_Data
 12552                           
 12553                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12554  0754  30AA               	movlw	170
 12555  0755  00F6               	movwf	??_Flash_Memory_Initialization
 12556  0756  0876               	movf	??_Flash_Memory_Initialization,w
 12557  0757  00F2               	movwf	setMemory_Data@data
 12558  0758  301F               	movlw	31
 12559  0759  319A  22FE  3186   	fcall	_setMemory_Data
 12560                           
 12561                           ;MCU_B1.c: 966: GIE = 0;
 12562  075C  138B               	bcf	11,7	;volatile
 12563                           
 12564                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12565  075D  3190  20D4         	fcall	_Flash_Memory_Write
 12566                           
 12567                           ;MCU_B1.c: 968: GIE = 1;
 12568  075F  178B               	bsf	11,7	;volatile
 12569                           
 12570                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12571  0760  0021               	movlb	1	; select bank1
 12572  0761  15AE               	bsf	_myMain^(0+128),3
 12573                           
 12574                           ;MCU_B1.c: 970: myMain.First = 1;
 12575  0762  16AE               	bsf	_myMain^(0+128),5
 12576                           
 12577                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12578  0763  1638               	bsf	(_myMain^(0+128)+10),4
 12579  0764  0008               	return
 12580  0765                     __end_of_Flash_Memory_Initialization:	
 12581                           
 12582                           	psect	text80
 12583  1AFE                     __ptext80:	
 12584 ;; *************** function _setMemory_Data *****************
 12585 ;; Defined at:
 12586 ;;		line 1094 in file "../src/MCU_B1.c"
 12587 ;; Parameters:    Size  Location     Type
 12588 ;;  address         1    wreg     unsigned char 
 12589 ;;  data            1    2[COMMON] unsigned char 
 12590 ;; Auto vars:     Size  Location     Type
 12591 ;;  address         1    4[COMMON] unsigned char 
 12592 ;; Return value:  Size  Location     Type
 12593 ;;		None               void
 12594 ;; Registers used:
 12595 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;Total ram usage:        3 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; Hardware stack levels required when called:    3
 12608 ;; This function calls:
 12609 ;;		Nothing
 12610 ;; This function is called by:
 12611 ;;		_Flash_Memory_Initialization
 12612 ;;		_Flash_Memory_Modify
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           
 12617                           ;psect for function _setMemory_Data
 12618  1AFE                     _setMemory_Data:	
 12619                           
 12620                           ;incstack = 0
 12621                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12622                           ;setMemory_Data@address stored from wreg
 12623  1AFE  00F4               	movwf	setMemory_Data@address
 12624                           
 12625                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12626  1AFF  0872               	movf	setMemory_Data@data,w
 12627  1B00  00F3               	movwf	??_setMemory_Data
 12628  1B01  0874               	movf	setMemory_Data@address,w
 12629  1B02  3E20               	addlw	_Memory& (0+255)
 12630  1B03  0086               	movwf	6
 12631  1B04  3002               	movlw	2	; select bank4/5
 12632  1B05  0087               	movwf	7
 12633  1B06  0873               	movf	??_setMemory_Data,w
 12634  1B07  0081               	movwf	1
 12635  1B08  0008               	return
 12636  1B09                     __end_of_setMemory_Data:	
 12637                           
 12638                           	psect	text81
 12639  10D4                     __ptext81:	
 12640 ;; *************** function _Flash_Memory_Write *****************
 12641 ;; Defined at:
 12642 ;;		line 1023 in file "../src/MCU_B1.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;		None
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  i               1    3[COMMON] unsigned char 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;		None               void
 12649 ;; Registers used:
 12650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;Total ram usage:        2 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    4
 12663 ;; This function calls:
 12664 ;;		_Flash_Memory_Unlock
 12665 ;; This function is called by:
 12666 ;;		_Flash_Memory_Initialization
 12667 ;;		_Flash_Memory_Modify
 12668 ;; This function uses a non-reentrant model
 12669 ;;
 12670                           
 12671                           
 12672                           ;psect for function _Flash_Memory_Write
 12673  10D4                     _Flash_Memory_Write:	
 12674                           
 12675                           ;MCU_B1.c: 1024: char i = 0;
 12676                           
 12677                           ;incstack = 0
 12678                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12679  10D4  01F3               	clrf	Flash_Memory_Write@i
 12680                           
 12681                           ;MCU_B1.c: 1025: CFGS = 0;
 12682  10D5  0023               	movlb	3	; select bank3
 12683  10D6  1315               	bcf	21,6	;volatile
 12684                           
 12685                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12686  10D7  3030               	movlw	48
 12687  10D8  0092               	movwf	18	;volatile
 12688                           
 12689                           ;MCU_B1.c: 1027: PMDATH = 0;
 12690  10D9  0194               	clrf	20	;volatile
 12691                           
 12692                           ;MCU_B1.c: 1028: FREE = 0;
 12693  10DA  1215               	bcf	21,4	;volatile
 12694                           
 12695                           ;MCU_B1.c: 1029: LWLO = 1;
 12696  10DB  1695               	bsf	21,5	;volatile
 12697                           
 12698                           ;MCU_B1.c: 1030: WREN = 1;
 12699  10DC  1515               	bsf	21,2	;volatile
 12700                           
 12701                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12702  10DD  01F3               	clrf	Flash_Memory_Write@i
 12703  10DE  3020               	movlw	32
 12704  10DF  0273               	subwf	Flash_Memory_Write@i,w
 12705  10E0  1803               	btfsc	3,0
 12706  10E1  28F7               	goto	l1434
 12707  10E2                     l9620:	
 12708                           
 12709                           ;MCU_B1.c: 1032: PMADRL = i;
 12710  10E2  0873               	movf	Flash_Memory_Write@i,w
 12711  10E3  0023               	movlb	3	; select bank3
 12712  10E4  0091               	movwf	17	;volatile
 12713                           
 12714                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12715  10E5  0873               	movf	Flash_Memory_Write@i,w
 12716  10E6  3E20               	addlw	_Memory& (0+255)
 12717  10E7  0086               	movwf	6
 12718  10E8  3002               	movlw	2	; select bank4/5
 12719  10E9  0087               	movwf	7
 12720  10EA  0801               	movf	1,w
 12721  10EB  0093               	movwf	19	;volatile
 12722                           
 12723                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12724  10EC  319A  22CD  3190   	fcall	_Flash_Memory_Unlock
 12725  10EF  3001               	movlw	1
 12726  10F0  00F2               	movwf	??_Flash_Memory_Write
 12727  10F1  0872               	movf	??_Flash_Memory_Write,w
 12728  10F2  07F3               	addwf	Flash_Memory_Write@i,f
 12729  10F3  3020               	movlw	32
 12730  10F4  0273               	subwf	Flash_Memory_Write@i,w
 12731  10F5  1C03               	skipc
 12732  10F6  28E2               	goto	l9620
 12733  10F7                     l1434:	
 12734                           
 12735                           ;MCU_B1.c: 1035: }
 12736                           ;MCU_B1.c: 1036: LWLO = 0;
 12737  10F7  0023               	movlb	3	; select bank3
 12738  10F8  1295               	bcf	21,5	;volatile
 12739                           
 12740                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12741  10F9  319A  22CD         	fcall	_Flash_Memory_Unlock
 12742                           
 12743                           ;MCU_B1.c: 1038: WREN = 0;
 12744  10FB  0023               	movlb	3	; select bank3
 12745  10FC  1115               	bcf	21,2	;volatile
 12746  10FD  0008               	return
 12747  10FE                     __end_of_Flash_Memory_Write:	
 12748                           
 12749                           	psect	text82
 12750  1ACD                     __ptext82:	
 12751 ;; *************** function _Flash_Memory_Unlock *****************
 12752 ;; Defined at:
 12753 ;;		line 1002 in file "../src/MCU_B1.c"
 12754 ;; Parameters:    Size  Location     Type
 12755 ;;		None
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;		None
 12758 ;; Return value:  Size  Location     Type
 12759 ;;		None               void
 12760 ;; Registers used:
 12761 ;;		wreg
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;Total ram usage:        0 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    3
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_Flash_Memory_Write
 12778 ;;		_Flash_Memory_Erasing
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782                           
 12783                           ;psect for function _Flash_Memory_Unlock
 12784  1ACD                     _Flash_Memory_Unlock:	
 12785                           
 12786                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12787                           
 12788                           ;incstack = 0
 12789                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12790  1ACD  3055               	movlw	85
 12791  1ACE  0023               	movlb	3	; select bank3
 12792  1ACF  0096               	movwf	22	;volatile
 12793                           
 12794                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12795  1AD0  30AA               	movlw	170
 12796  1AD1  0096               	movwf	22	;volatile
 12797                           
 12798                           ;MCU_B1.c: 1005: WR = 1;
 12799  1AD2  1495               	bsf	21,1	;volatile
 12800                           
 12801                           ;MCU_B1.c: 1006: __nop();
 12802  1AD3  0000               	nop
 12803                           
 12804                           ;MCU_B1.c: 1007: __nop();
 12805  1AD4  0000               	nop
 12806  1AD5  0008               	return
 12807  1AD6                     __end_of_Flash_Memory_Unlock:	
 12808                           
 12809                           	psect	text83
 12810  1CAE                     __ptext83:	
 12811 ;; *************** function _Flash_Memory_Read *****************
 12812 ;; Defined at:
 12813 ;;		line 1011 in file "../src/MCU_B1.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;  address         1    wreg     unsigned char 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  address         1    4[COMMON] unsigned char 
 12818 ;;  ret             1    5[COMMON] unsigned char 
 12819 ;;  i               1    3[COMMON] unsigned char 
 12820 ;; Return value:  Size  Location     Type
 12821 ;;                  1    wreg      unsigned char 
 12822 ;; Registers used:
 12823 ;;		wreg, status,2
 12824 ;; Tracked objects:
 12825 ;;		On entry : 0/0
 12826 ;;		On exit  : 0/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12833 ;;Total ram usage:        4 bytes
 12834 ;; Hardware stack levels used:    1
 12835 ;; Hardware stack levels required when called:    3
 12836 ;; This function calls:
 12837 ;;		Nothing
 12838 ;; This function is called by:
 12839 ;;		_Flash_Memory_Initialization
 12840 ;;		_Flash_Memory_Modify
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           
 12845                           ;psect for function _Flash_Memory_Read
 12846  1CAE                     _Flash_Memory_Read:	
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12850                           ;Flash_Memory_Read@address stored from wreg
 12851  1CAE  00F4               	movwf	Flash_Memory_Read@address
 12852                           
 12853                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 12854  1CAF  01F3               	clrf	Flash_Memory_Read@i
 12855  1CB0  01F5               	clrf	Flash_Memory_Read@ret
 12856                           
 12857                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 12858  1CB1  3030               	movlw	48
 12859  1CB2  0023               	movlb	3	; select bank3
 12860  1CB3  0092               	movwf	18	;volatile
 12861                           
 12862                           ;MCU_B1.c: 1014: PMADRL = address;
 12863  1CB4  0874               	movf	Flash_Memory_Read@address,w
 12864  1CB5  0091               	movwf	17	;volatile
 12865                           
 12866                           ;MCU_B1.c: 1015: CFGS = 0;
 12867  1CB6  1315               	bcf	21,6	;volatile
 12868                           
 12869                           ;MCU_B1.c: 1016: RD = 1;
 12870  1CB7  1415               	bsf	21,0	;volatile
 12871                           
 12872                           ;MCU_B1.c: 1017: i = PMDATH;
 12873  1CB8  0814               	movf	20,w	;volatile
 12874  1CB9  00F2               	movwf	??_Flash_Memory_Read
 12875  1CBA  0872               	movf	??_Flash_Memory_Read,w
 12876  1CBB  00F3               	movwf	Flash_Memory_Read@i
 12877                           
 12878                           ;MCU_B1.c: 1018: ret = PMDATL;
 12879  1CBC  0813               	movf	19,w	;volatile
 12880  1CBD  00F2               	movwf	??_Flash_Memory_Read
 12881  1CBE  0872               	movf	??_Flash_Memory_Read,w
 12882  1CBF  00F5               	movwf	Flash_Memory_Read@ret
 12883                           
 12884                           ;MCU_B1.c: 1019: return ret;
 12885  1CC0  0875               	movf	Flash_Memory_Read@ret,w
 12886  1CC1  0008               	return
 12887  1CC2                     __end_of_Flash_Memory_Read:	
 12888                           
 12889                           	psect	text84
 12890  045A                     __ptext84:	
 12891 ;; *************** function _Exception_Main *****************
 12892 ;; Defined at:
 12893 ;;		line 499 in file "../src/Main_B1.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;		None
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  i               2   11[BANK0 ] int 
 12898 ;;  i               2    9[BANK0 ] int 
 12899 ;;  lights          1   13[BANK0 ] unsigned char 
 12900 ;;  error           1    8[BANK0 ] unsigned char 
 12901 ;;  count           1    7[BANK0 ] unsigned char 
 12902 ;;  status          1    6[BANK0 ] unsigned char 
 12903 ;; Return value:  Size  Location     Type
 12904 ;;		None               void
 12905 ;; Registers used:
 12906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;Total ram usage:        9 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    5
 12919 ;; This function calls:
 12920 ;;		_getDimmerLights_Line
 12921 ;;		_getDimmerLights_Status
 12922 ;;		_getMain_All_Error_Status
 12923 ;;		_getMain_All_LightsStatus
 12924 ;;		_setBuz
 12925 ;;		_setDimmerLights_SwOff
 12926 ;;		_setLED
 12927 ;; This function is called by:
 12928 ;;		_main
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function _Exception_Main
 12934  045A                     _Exception_Main:	
 12935                           
 12936                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12937                           
 12938                           ;incstack = 0
 12939                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12940  045A  3000               	movlw	0
 12941  045B  3191  2128  3184   	fcall	_getMain_All_Error_Status
 12942  045E  00F9               	movwf	??_Exception_Main
 12943  045F  0879               	movf	??_Exception_Main,w
 12944  0460  0020               	movlb	0	; select bank0
 12945  0461  00A8               	movwf	Exception_Main@error
 12946                           
 12947                           ;Main_B1.c: 501: char lights = 0, count = 2;
 12948  0462  01AD               	clrf	Exception_Main@lights
 12949  0463  3002               	movlw	2
 12950  0464  00F9               	movwf	??_Exception_Main
 12951  0465  0879               	movf	??_Exception_Main,w
 12952  0466  00A7               	movwf	Exception_Main@count
 12953                           
 12954                           ;Main_B1.c: 502: char status = 0;
 12955  0467  01A6               	clrf	Exception_Main@status
 12956                           
 12957                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12958  0468  0021               	movlb	1	; select bank1
 12959  0469  1DB8               	btfss	(_myMain^(0+128)+10),3
 12960  046A  2C79               	goto	l10346
 12961                           
 12962                           ;Main_B1.c: 505: if (error == 0) {
 12963  046B  0020               	movlb	0	; select bank0
 12964  046C  08A8               	movf	Exception_Main@error,f
 12965  046D  1D03               	skipz
 12966  046E  0008               	return
 12967                           
 12968                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12969  046F  0021               	movlb	1	; select bank1
 12970  0470  11B8               	bcf	(_myMain^(0+128)+10),3
 12971                           
 12972                           ;Main_B1.c: 509: setLED(99, 10);
 12973  0471  300A               	movlw	10
 12974  0472  00F9               	movwf	??_Exception_Main
 12975  0473  0879               	movf	??_Exception_Main,w
 12976  0474  00F4               	movwf	setLED@command
 12977  0475  3063               	movlw	99
 12978  0476  3195  25BC         	fcall	_setLED
 12979                           
 12980                           ;Main_B1.c: 522: }
 12981                           ;Main_B1.c: 523: } else {
 12982  0478  0008               	return
 12983  0479                     l10346:	
 12984                           
 12985                           ;Main_B1.c: 524: if (error != 0) {
 12986  0479  0020               	movlb	0	; select bank0
 12987  047A  0828               	movf	Exception_Main@error,w
 12988  047B  1903               	btfsc	3,2
 12989  047C  0008               	return
 12990                           
 12991                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12992  047D  0021               	movlb	1	; select bank1
 12993  047E  15B8               	bsf	(_myMain^(0+128)+10),3
 12994                           
 12995                           ;Main_B1.c: 527: setLED(99, 11);
 12996  047F  300B               	movlw	11
 12997  0480  00F9               	movwf	??_Exception_Main
 12998  0481  0879               	movf	??_Exception_Main,w
 12999  0482  00F4               	movwf	setLED@command
 13000  0483  3063               	movlw	99
 13001  0484  3195  25BC  3184   	fcall	_setLED
 13002                           
 13003                           ;Main_B1.c: 538: switch (error) {
 13004  0487  2D21               	goto	l10394
 13005  0488                     l10352:	
 13006                           ;Main_B1.c: 539: case 2:
 13007                           
 13008                           
 13009                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13010  0488  319B  2376  3184   	fcall	_getMain_All_LightsStatus
 13011  048B  3A01               	xorlw	1
 13012  048C  1D03               	skipz
 13013  048D  2C97               	goto	l10356
 13014                           
 13015                           ;Main_B1.c: 547: setBuz(10, 300);
 13016  048E  302C               	movlw	44
 13017  048F  0020               	movlb	0	; select bank0
 13018  0490  00A4               	movwf	setBuz@time
 13019  0491  3001               	movlw	1
 13020  0492  00A5               	movwf	setBuz@time+1
 13021  0493  300A               	movlw	10
 13022  0494  3193  23AD  3184   	fcall	_setBuz
 13023  0497                     l10356:	
 13024                           
 13025                           ;Main_B1.c: 548: }
 13026                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13027  0497  0020               	movlb	0	; select bank0
 13028  0498  01A9               	clrf	Exception_Main@i
 13029  0499  01AA               	clrf	Exception_Main@i+1
 13030  049A                     l10366:	
 13031  049A  082A               	movf	Exception_Main@i+1,w
 13032  049B  3A80               	xorlw	128
 13033  049C  00F9               	movwf	??_Exception_Main
 13034  049D  3080               	movlw	128
 13035  049E  0279               	subwf	??_Exception_Main,w
 13036  049F  1D03               	skipz
 13037  04A0  2CA3               	goto	u11955
 13038  04A1  0827               	movf	Exception_Main@count,w
 13039  04A2  0229               	subwf	Exception_Main@i,w
 13040  04A3                     u11955:	
 13041  04A3  1803               	btfsc	3,0
 13042  04A4  2CC4               	goto	u11950
 13043                           
 13044                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13045  04A5  0020               	movlb	0	; select bank0
 13046  04A6  0829               	movf	Exception_Main@i,w
 13047  04A7  3E01               	addlw	1
 13048  04A8  3187  27F2  3184   	fcall	_getDimmerLights_Status
 13049  04AB  3A01               	xorlw	1
 13050  04AC  1D03               	skipz
 13051  04AD  2CBE               	goto	l10364
 13052                           
 13053                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13054  04AE  087B               	movf	_DimmerLights,w
 13055  04AF  0086               	movwf	6
 13056  04B0  3001               	movlw	1	; select bank2/3
 13057  04B1  0087               	movwf	7
 13058  04B2  1401               	bsf	1,0
 13059                           
 13060                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13061  04B3  0A7B               	incf	_DimmerLights,w
 13062  04B4  0086               	movwf	6
 13063  04B5  3001               	movlw	1	; select bank2/3
 13064  04B6  0087               	movwf	7
 13065  04B7  1001               	bcf	1,0
 13066                           
 13067                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13068  04B8  0020               	movlb	0	; select bank0
 13069  04B9  0829               	movf	Exception_Main@i,w
 13070  04BA  3E01               	addlw	1
 13071  04BB  3192  222A  3184   	fcall	_setDimmerLights_SwOff
 13072  04BE                     l10364:	
 13073  04BE  3001               	movlw	1
 13074  04BF  0020               	movlb	0	; select bank0
 13075  04C0  07A9               	addwf	Exception_Main@i,f
 13076  04C1  3000               	movlw	0
 13077  04C2  3DAA               	addwfc	Exception_Main@i+1,f
 13078  04C3  2C9A               	goto	l10366
 13079  04C4                     u11950:	
 13080  04C4  0020               	movlb	0	; select bank0
 13081  04C5  0008               	return
 13082  04C6                     l10368:	
 13083                           ;Main_B1.c: 561: case 3:
 13084                           
 13085                           ;Main_B1.c: 556: }
 13086                           ;Main_B1.c: 557: }
 13087                           ;Main_B1.c: 560: break;
 13088                           
 13089                           
 13090                           ;Main_B1.c: 563: setBuz(5, 300);
 13091  04C6  302C               	movlw	44
 13092  04C7  0020               	movlb	0	; select bank0
 13093  04C8  00A4               	movwf	setBuz@time
 13094  04C9  3001               	movlw	1
 13095  04CA  00A5               	movwf	setBuz@time+1
 13096  04CB  3005               	movlw	5
 13097  04CC  3193  23AD  3184   	fcall	_setBuz
 13098                           
 13099                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13100  04CF  319B  2385  3184   	fcall	_getDimmerLights_Line
 13101  04D2  00F9               	movwf	??_Exception_Main
 13102  04D3  0879               	movf	??_Exception_Main,w
 13103  04D4  0020               	movlb	0	; select bank0
 13104  04D5  00AD               	movwf	Exception_Main@lights
 13105                           
 13106                           ;Main_B1.c: 565: if (lights == 0) {
 13107  04D6  08AD               	movf	Exception_Main@lights,f
 13108  04D7  1D03               	skipz
 13109  04D8  2D07               	goto	l10386
 13110                           
 13111                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13112  04D9  01AB               	clrf	Exception_Main@i_3781
 13113  04DA  01AC               	clrf	Exception_Main@i_3781+1
 13114  04DB                     l10384:	
 13115  04DB  082C               	movf	Exception_Main@i_3781+1,w
 13116  04DC  3A80               	xorlw	128
 13117  04DD  00F9               	movwf	??_Exception_Main
 13118  04DE  3080               	movlw	128
 13119  04DF  0279               	subwf	??_Exception_Main,w
 13120  04E0  1D03               	skipz
 13121  04E1  2CE4               	goto	u11985
 13122  04E2  0827               	movf	Exception_Main@count,w
 13123  04E3  022B               	subwf	Exception_Main@i_3781,w
 13124  04E4                     u11985:	
 13125  04E4  1803               	btfsc	3,0
 13126  04E5  2D05               	goto	u11980
 13127                           
 13128                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13129  04E6  0020               	movlb	0	; select bank0
 13130  04E7  082B               	movf	Exception_Main@i_3781,w
 13131  04E8  3E01               	addlw	1
 13132  04E9  3187  27F2  3184   	fcall	_getDimmerLights_Status
 13133  04EC  3A01               	xorlw	1
 13134  04ED  1D03               	skipz
 13135  04EE  2CFF               	goto	l10382
 13136                           
 13137                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13138  04EF  087B               	movf	_DimmerLights,w
 13139  04F0  0086               	movwf	6
 13140  04F1  3001               	movlw	1	; select bank2/3
 13141  04F2  0087               	movwf	7
 13142  04F3  1401               	bsf	1,0
 13143                           
 13144                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13145  04F4  0A7B               	incf	_DimmerLights,w
 13146  04F5  0086               	movwf	6
 13147  04F6  3001               	movlw	1	; select bank2/3
 13148  04F7  0087               	movwf	7
 13149  04F8  1001               	bcf	1,0
 13150                           
 13151                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13152  04F9  0020               	movlb	0	; select bank0
 13153  04FA  082B               	movf	Exception_Main@i_3781,w
 13154  04FB  3E01               	addlw	1
 13155  04FC  3192  222A  3184   	fcall	_setDimmerLights_SwOff
 13156  04FF                     l10382:	
 13157  04FF  3001               	movlw	1
 13158  0500  0020               	movlb	0	; select bank0
 13159  0501  07AB               	addwf	Exception_Main@i_3781,f
 13160  0502  3000               	movlw	0
 13161  0503  3DAC               	addwfc	Exception_Main@i_3781+1,f
 13162  0504  2CDB               	goto	l10384
 13163  0505                     u11980:	
 13164  0505  0020               	movlb	0	; select bank0
 13165  0506  0008               	return
 13166  0507                     l10386:	
 13167                           ;Main_B1.c: 573: }
 13168                           ;Main_B1.c: 574: }
 13169                           ;Main_B1.c: 575: } else {
 13170                           
 13171                           
 13172                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13173  0507  0020               	movlb	0	; select bank0
 13174  0508  082D               	movf	Exception_Main@lights,w
 13175  0509  3187  27F2  3184   	fcall	_getDimmerLights_Status
 13176  050C  3A01               	xorlw	1
 13177  050D  1903               	btfsc	3,2
 13178  050E  2D11               	goto	l10388
 13179  050F  0020               	movlb	0	; select bank0
 13180  0510  0008               	return
 13181  0511                     l10388:	
 13182                           
 13183                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13184  0511  087B               	movf	_DimmerLights,w
 13185  0512  0086               	movwf	6
 13186  0513  3001               	movlw	1	; select bank2/3
 13187  0514  0087               	movwf	7
 13188  0515  1401               	bsf	1,0
 13189                           
 13190                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13191  0516  0A7B               	incf	_DimmerLights,w
 13192  0517  0086               	movwf	6
 13193  0518  3001               	movlw	1	; select bank2/3
 13194  0519  0087               	movwf	7
 13195  051A  1001               	bcf	1,0
 13196                           
 13197                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13198  051B  0020               	movlb	0	; select bank0
 13199  051C  082D               	movf	Exception_Main@lights,w
 13200  051D  3192  222A         	fcall	_setDimmerLights_SwOff
 13201  051F  0020               	movlb	0	; select bank0
 13202  0520  0008               	return
 13203  0521                     l10394:	
 13204                           ;Main_B1.c: 586: }
 13205                           
 13206                           ;Main_B1.c: 582: }
 13207                           ;Main_B1.c: 583: }
 13208                           ;Main_B1.c: 585: break;
 13209                           
 13210  0521  0020               	movlb	0	; select bank0
 13211  0522  0828               	movf	Exception_Main@error,w
 13212                           
 13213                           ; Switch size 1, requested type "space"
 13214                           ; Number of cases is 2, Range of values is 2 to 3
 13215                           ; switch strategies available:
 13216                           ; Name         Instructions Cycles
 13217                           ; simple_byte            7     4 (average)
 13218                           ; direct_byte           13     9 (fixed)
 13219                           ; jumptable            263     9 (fixed)
 13220                           ;	Chosen strategy is simple_byte
 13221  0523  3A02               	xorlw	2	; case 2
 13222  0524  1903               	skipnz
 13223  0525  2C88               	goto	l10352
 13224  0526  3A01               	xorlw	1	; case 3
 13225  0527  1903               	skipnz
 13226  0528  2CC6               	goto	l10368
 13227  0529  2D2B               	goto	l1689
 13228  052A  0008               	return
 13229  052B                     l1689:	
 13230  052B  0008               	return
 13231  052C                     __end_of_Exception_Main:	
 13232                           
 13233                           	psect	text85
 13234  1B85                     __ptext85:	
 13235 ;; *************** function _getDimmerLights_Line *****************
 13236 ;; Defined at:
 13237 ;;		line 1045 in file "../src/Dimmer_B1.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;		None
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;  line            1    3[COMMON] unsigned char 
 13242 ;; Return value:  Size  Location     Type
 13243 ;;                  1    wreg      unsigned char 
 13244 ;; Registers used:
 13245 ;;		wreg, status,2
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;Total ram usage:        2 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:    3
 13258 ;; This function calls:
 13259 ;;		Nothing
 13260 ;; This function is called by:
 13261 ;;		_Exception_Main
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           
 13266                           ;psect for function _getDimmerLights_Line
 13267  1B85                     _getDimmerLights_Line:	
 13268                           
 13269                           ;Dimmer_B1.c: 1046: char line = 0;
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13273  1B85  01F3               	clrf	getDimmerLights_Line@line
 13274                           
 13275                           ;Dimmer_B1.c: 1048: if (DimmerLights1.Line == 1) {
 13276  1B86  0022               	movlb	2	; select bank2
 13277  1B87  1CDC               	btfss	(_DimmerLights1^(0+256)+1),1
 13278  1B88  2B8C               	goto	l918
 13279                           
 13280                           ;Dimmer_B1.c: 1049: line = 1;
 13281  1B89  01F3               	clrf	getDimmerLights_Line@line
 13282  1B8A  0AF3               	incf	getDimmerLights_Line@line,f
 13283                           
 13284                           ;Dimmer_B1.c: 1050: }
 13285  1B8B  2B92               	goto	l919
 13286  1B8C                     l918:	
 13287                           
 13288                           ;Dimmer_B1.c: 1053: else if (DimmerLights2.Line == 1) {
 13289  1B8C  1CE4               	btfss	(_DimmerLights2^(0+256)+1),1
 13290  1B8D  2B92               	goto	l919
 13291                           
 13292                           ;Dimmer_B1.c: 1054: line = 2;
 13293  1B8E  3002               	movlw	2
 13294  1B8F  00F2               	movwf	??_getDimmerLights_Line
 13295  1B90  0872               	movf	??_getDimmerLights_Line,w
 13296  1B91  00F3               	movwf	getDimmerLights_Line@line
 13297  1B92                     l919:	
 13298                           
 13299                           ;Dimmer_B1.c: 1055: }
 13300                           ;Dimmer_B1.c: 1062: return line;
 13301  1B92  0873               	movf	getDimmerLights_Line@line,w
 13302  1B93  0008               	return
 13303  1B94                     __end_of_getDimmerLights_Line:	
 13304                           
 13305                           	psect	text86
 13306  1E88                     __ptext86:	
 13307 ;; *************** function _DimmerLights_Main *****************
 13308 ;; Defined at:
 13309 ;;		line 774 in file "../src/Dimmer_B1.c"
 13310 ;; Parameters:    Size  Location     Type
 13311 ;;		None
 13312 ;; Auto vars:     Size  Location     Type
 13313 ;;		None
 13314 ;; Return value:  Size  Location     Type
 13315 ;;		None               void
 13316 ;; Registers used:
 13317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;Total ram usage:        0 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    8
 13330 ;; This function calls:
 13331 ;;		_getLoad_OK
 13332 ;;		_getMain_All_Error_Status
 13333 ;;		_getMain_All_LightsStatus
 13334 ;;		_setDimmerLights_Main
 13335 ;; This function is called by:
 13336 ;;		_main
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           
 13341                           ;psect for function _DimmerLights_Main
 13342  1E88                     _DimmerLights_Main:	
 13343                           
 13344                           ;Dimmer_B1.c: 777: if (Dimmer.LoadGO == 1) {
 13345                           
 13346                           ;incstack = 0
 13347                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13348  1E88  0022               	movlb	2	; select bank2
 13349  1E89  1CAC               	btfss	_Dimmer^(0+256),1
 13350  1E8A  2EA0               	goto	l10074
 13351                           
 13352                           ;Dimmer_B1.c: 778: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13353  1E8B  319A  2289  319E   	fcall	_getLoad_OK
 13354  1E8E  3A01               	xorlw	1
 13355  1E8F  1903               	skipnz
 13356  1E90  2E9E               	goto	l857
 13357  1E91  3000               	movlw	0
 13358  1E92  3191  2128  319E   	fcall	_getMain_All_Error_Status
 13359  1E95  3800               	iorlw	0
 13360  1E96  1D03               	skipz
 13361  1E97  2E9E               	goto	l857
 13362  1E98  319B  2376  319E   	fcall	_getMain_All_LightsStatus
 13363  1E9B  3800               	iorlw	0
 13364  1E9C  1D03               	skipz
 13365  1E9D  2EA0               	goto	l10074
 13366  1E9E                     l857:	
 13367                           
 13368                           ;Dimmer_B1.c: 779: Dimmer.LoadGO = 0;
 13369  1E9E  0022               	movlb	2	; select bank2
 13370  1E9F  10AC               	bcf	_Dimmer^(0+256),1
 13371  1EA0                     l10074:	
 13372                           
 13373                           ;Dimmer_B1.c: 780: }
 13374                           ;Dimmer_B1.c: 781: }
 13375                           ;Dimmer_B1.c: 785: setDimmerLights_Main(1);
 13376  1EA0  3001               	movlw	1
 13377  1EA1  3197  279C  319E   	fcall	_setDimmerLights_Main
 13378                           
 13379                           ;Dimmer_B1.c: 789: setDimmerLights_Main(2);
 13380  1EA4  3002               	movlw	2
 13381  1EA5  3197  279C         	fcall	_setDimmerLights_Main
 13382  1EA7  0008               	return
 13383  1EA8                     __end_of_DimmerLights_Main:	
 13384                           
 13385                           	psect	text87
 13386  179C                     __ptext87:	
 13387 ;; *************** function _setDimmerLights_Main *****************
 13388 ;; Defined at:
 13389 ;;		line 803 in file "../src/Dimmer_B1.c"
 13390 ;; Parameters:    Size  Location     Type
 13391 ;;  lights          1    wreg     unsigned char 
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;  lights          1   73[BANK0 ] unsigned char 
 13394 ;; Return value:  Size  Location     Type
 13395 ;;		None               void
 13396 ;; Registers used:
 13397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;Total ram usage:        1 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; Hardware stack levels required when called:    7
 13410 ;; This function calls:
 13411 ;;		_DimmerLights_SelectPointer
 13412 ;;		_getDimmerLights_Allow_Condition
 13413 ;;		_getMain_All_LightsStatus
 13414 ;;		_setDimmerLights_Dimming
 13415 ;;		_setDimmerLights_OnOff
 13416 ;; This function is called by:
 13417 ;;		_DimmerLights_Main
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           
 13422                           ;psect for function _setDimmerLights_Main
 13423  179C                     _setDimmerLights_Main:	
 13424                           
 13425                           ;incstack = 0
 13426                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13427                           ;setDimmerLights_Main@lights stored from wreg
 13428  179C  0020               	movlb	0	; select bank0
 13429  179D  00E9               	movwf	setDimmerLights_Main@lights
 13430                           
 13431                           ;Dimmer_B1.c: 805: DimmerLights_SelectPointer(lights);
 13432  179E  0869               	movf	setDimmerLights_Main@lights,w
 13433  179F  319C  2487  3197   	fcall	_DimmerLights_SelectPointer
 13434                           
 13435                           ;Dimmer_B1.c: 806: if (DimmerLights->Trigger == 1) {
 13436  17A2  087B               	movf	_DimmerLights,w
 13437  17A3  0086               	movwf	6
 13438  17A4  3001               	movlw	1	; select bank2/3
 13439  17A5  0087               	movwf	7
 13440  17A6  1C81               	btfss	1,1
 13441  17A7  2FC8               	goto	l9758
 13442                           
 13443                           ;Dimmer_B1.c: 807: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13444  17A8  0020               	movlb	0	; select bank0
 13445  17A9  0869               	movf	setDimmerLights_Main@lights,w
 13446  17AA  3191  218A  3197   	fcall	_getDimmerLights_Allow_Condition
 13447  17AD  3800               	iorlw	0
 13448  17AE  1D03               	skipz
 13449  17AF  0008               	return
 13450                           
 13451                           ;Dimmer_B1.c: 808: DimmerLights->Trigger = 0;
 13452  17B0  087B               	movf	_DimmerLights,w
 13453  17B1  0086               	movwf	6
 13454  17B2  3001               	movlw	1	; select bank2/3
 13455  17B3  0087               	movwf	7
 13456  17B4  1081               	bcf	1,1
 13457                           
 13458                           ;Dimmer_B1.c: 809: if (DimmerLights->Switch == 1) {
 13459  17B5  087B               	movf	_DimmerLights,w
 13460  17B6  0086               	movwf	6
 13461  17B7  3001               	movlw	1	; select bank2/3
 13462  17B8  0087               	movwf	7
 13463  17B9  1D01               	btfss	1,2
 13464  17BA  2FC2               	goto	l9756
 13465                           
 13466                           ;Dimmer_B1.c: 810: setDimmerLights_OnOff(lights, 1);
 13467  17BB  0020               	movlb	0	; select bank0
 13468  17BC  01E5               	clrf	setDimmerLights_OnOff@command
 13469  17BD  0AE5               	incf	setDimmerLights_OnOff@command,f
 13470  17BE  0869               	movf	setDimmerLights_Main@lights,w
 13471  17BF  3185  252C         	fcall	_setDimmerLights_OnOff
 13472                           
 13473                           ;Dimmer_B1.c: 811: } else {
 13474  17C1  0008               	return
 13475  17C2                     l9756:	
 13476                           
 13477                           ;Dimmer_B1.c: 812: setDimmerLights_OnOff(lights, 0);
 13478  17C2  0020               	movlb	0	; select bank0
 13479  17C3  01E5               	clrf	setDimmerLights_OnOff@command
 13480  17C4  0869               	movf	setDimmerLights_Main@lights,w
 13481  17C5  3185  252C         	fcall	_setDimmerLights_OnOff
 13482                           
 13483                           ;Dimmer_B1.c: 813: }
 13484                           ;Dimmer_B1.c: 814: }
 13485                           ;Dimmer_B1.c: 815: } else {
 13486  17C7  0008               	return
 13487  17C8                     l9758:	
 13488                           
 13489                           ;Dimmer_B1.c: 816: if (getMain_All_LightsStatus() == 1) {
 13490  17C8  319B  2376  3197   	fcall	_getMain_All_LightsStatus
 13491  17CB  3A01               	xorlw	1
 13492  17CC  1D03               	skipz
 13493  17CD  2FF4               	goto	l9770
 13494                           
 13495                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingTrigger == 1) {
 13496  17CE  087B               	movf	_DimmerLights,w
 13497  17CF  0086               	movwf	6
 13498  17D0  3001               	movlw	1	; select bank2/3
 13499  17D1  0087               	movwf	7
 13500  17D2  1E01               	btfss	1,4
 13501  17D3  0008               	return
 13502                           
 13503                           ;Dimmer_B1.c: 818: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13504  17D4  0020               	movlb	0	; select bank0
 13505  17D5  0869               	movf	setDimmerLights_Main@lights,w
 13506  17D6  3191  218A  3197   	fcall	_getDimmerLights_Allow_Condition
 13507  17D9  3800               	iorlw	0
 13508  17DA  1D03               	skipz
 13509  17DB  0008               	return
 13510                           
 13511                           ;Dimmer_B1.c: 819: DimmerLights->DimmingTrigger = 0;
 13512  17DC  087B               	movf	_DimmerLights,w
 13513  17DD  0086               	movwf	6
 13514  17DE  3001               	movlw	1	; select bank2/3
 13515  17DF  0087               	movwf	7
 13516  17E0  1201               	bcf	1,4
 13517                           
 13518                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingSwitch == 1) {
 13519  17E1  087B               	movf	_DimmerLights,w
 13520  17E2  0086               	movwf	6
 13521  17E3  3001               	movlw	1	; select bank2/3
 13522  17E4  0087               	movwf	7
 13523  17E5  1E81               	btfss	1,5
 13524  17E6  2FEE               	goto	l9768
 13525                           
 13526                           ;Dimmer_B1.c: 821: setDimmerLights_Dimming(lights, 1);
 13527  17E7  0020               	movlb	0	; select bank0
 13528  17E8  01E2               	clrf	setDimmerLights_Dimming@status
 13529  17E9  0AE2               	incf	setDimmerLights_Dimming@status,f
 13530  17EA  0869               	movf	setDimmerLights_Main@lights,w
 13531  17EB  3194  2454         	fcall	_setDimmerLights_Dimming
 13532                           
 13533                           ;Dimmer_B1.c: 822: } else {
 13534  17ED  0008               	return
 13535  17EE                     l9768:	
 13536                           
 13537                           ;Dimmer_B1.c: 823: setDimmerLights_Dimming(lights, 0);
 13538  17EE  0020               	movlb	0	; select bank0
 13539  17EF  01E2               	clrf	setDimmerLights_Dimming@status
 13540  17F0  0869               	movf	setDimmerLights_Main@lights,w
 13541  17F1  3194  2454         	fcall	_setDimmerLights_Dimming
 13542                           
 13543                           ;Dimmer_B1.c: 824: }
 13544                           ;Dimmer_B1.c: 825: }
 13545                           ;Dimmer_B1.c: 826: }
 13546                           ;Dimmer_B1.c: 827: } else {
 13547  17F3  0008               	return
 13548  17F4                     l9770:	
 13549                           
 13550                           ;Dimmer_B1.c: 828: if (DimmerLights->DimmingTrigger == 1) {
 13551  17F4  087B               	movf	_DimmerLights,w
 13552  17F5  0086               	movwf	6
 13553  17F6  3001               	movlw	1	; select bank2/3
 13554  17F7  0087               	movwf	7
 13555  17F8  1E01               	btfss	1,4
 13556  17F9  0008               	return
 13557                           
 13558                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 0;
 13559  17FA  087B               	movf	_DimmerLights,w
 13560  17FB  0086               	movwf	6
 13561  17FC  3001               	movlw	1	; select bank2/3
 13562  17FD  0087               	movwf	7
 13563  17FE  1201               	bcf	1,4
 13564  17FF  0008               	return
 13565  1800                     __end_of_setDimmerLights_Main:	
 13566                           
 13567                           	psect	text88
 13568  052C                     __ptext88:	
 13569 ;; *************** function _setDimmerLights_OnOff *****************
 13570 ;; Defined at:
 13571 ;;		line 837 in file "../src/Dimmer_B1.c"
 13572 ;; Parameters:    Size  Location     Type
 13573 ;;  lights          1    wreg     unsigned char 
 13574 ;;  command         1   69[BANK0 ] unsigned char 
 13575 ;; Auto vars:     Size  Location     Type
 13576 ;;  lights          1   72[BANK0 ] unsigned char 
 13577 ;; Return value:  Size  Location     Type
 13578 ;;		None               void
 13579 ;; Registers used:
 13580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13581 ;; Tracked objects:
 13582 ;;		On entry : 0/0
 13583 ;;		On exit  : 0/0
 13584 ;;		Unchanged: 0/0
 13585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13586 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;Total ram usage:        4 bytes
 13591 ;; Hardware stack levels used:    1
 13592 ;; Hardware stack levels required when called:    6
 13593 ;; This function calls:
 13594 ;;		_getCmd_Status
 13595 ;;		_getDelayOff_GO
 13596 ;;		_getDimmerLights_PercentToValue
 13597 ;;		_getMain_All_LightsStatus
 13598 ;;		_setCmd_Status
 13599 ;;		_setDelayOff_GO
 13600 ;;		_setDimmerIntr_ControlStatus
 13601 ;;		_setDimmerIntr_DimmingValue
 13602 ;;		_setDimmerIntr_Dimming_RF
 13603 ;;		_setDimmerIntr_MaxmumValue
 13604 ;;		_setDimmerLights_Line
 13605 ;;		_setLED
 13606 ;;		_setProductData
 13607 ;;		_setRF_DimmerLights
 13608 ;;		_setTxData
 13609 ;; This function is called by:
 13610 ;;		_setDimmerLights_Main
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _setDimmerLights_OnOff
 13616  052C                     _setDimmerLights_OnOff:	
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13620                           ;setDimmerLights_OnOff@lights stored from wreg
 13621  052C  0020               	movlb	0	; select bank0
 13622  052D  00E8               	movwf	setDimmerLights_OnOff@lights
 13623                           
 13624                           ;Dimmer_B1.c: 839: if (command == 1) {
 13625  052E  0865               	movf	setDimmerLights_OnOff@command,w
 13626  052F  3A01               	xorlw	1
 13627  0530  1D03               	skipz
 13628  0531  2D92               	goto	l9524
 13629                           
 13630                           ;Dimmer_B1.c: 840: setDimmerIntr_ControlStatus(lights, 1);
 13631  0532  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13632  0533  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13633  0534  0868               	movf	setDimmerLights_OnOff@lights,w
 13634  0535  3190  2082  3185   	fcall	_setDimmerIntr_ControlStatus
 13635                           
 13636                           ;Dimmer_B1.c: 843: Dimmer.Load_Status = 1;
 13637  0538  0022               	movlb	2	; select bank2
 13638  0539  152C               	bsf	_Dimmer^(0+256),2
 13639                           
 13640                           ;Dimmer_B1.c: 844: setDimmerLights_Line(lights);
 13641  053A  0020               	movlb	0	; select bank0
 13642  053B  0868               	movf	setDimmerLights_OnOff@lights,w
 13643  053C  319D  2555  3185   	fcall	_setDimmerLights_Line
 13644                           
 13645                           ;Dimmer_B1.c: 850: setLED(lights, 0);
 13646  053F  01F4               	clrf	setLED@command
 13647  0540  0020               	movlb	0	; select bank0
 13648  0541  0868               	movf	setDimmerLights_OnOff@lights,w
 13649  0542  3195  25BC  3185   	fcall	_setLED
 13650                           
 13651                           ;Dimmer_B1.c: 871: if (DimmerLights->DimmingRun == 1) {
 13652  0545  0A7B               	incf	_DimmerLights,w
 13653  0546  0086               	movwf	6
 13654  0547  3001               	movlw	1	; select bank2/3
 13655  0548  0087               	movwf	7
 13656  0549  1F01               	btfss	1,6
 13657  054A  2D6D               	goto	l9514
 13658                           
 13659                           ;Dimmer_B1.c: 872: DimmerLights->DimmingRun = 0;
 13660  054B  0A7B               	incf	_DimmerLights,w
 13661  054C  0086               	movwf	6
 13662  054D  3001               	movlw	1	; select bank2/3
 13663  054E  0087               	movwf	7
 13664  054F  1301               	bcf	1,6
 13665                           
 13666                           ;Dimmer_B1.c: 873: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13667  0550  0020               	movlb	0	; select bank0
 13668  0551  0868               	movf	setDimmerLights_OnOff@lights,w
 13669  0552  3E14               	addlw	20
 13670  0553  076C               	addwf	_product,w
 13671  0554  00E6               	movwf	??_setDimmerLights_OnOff
 13672  0555  0866               	movf	??_setDimmerLights_OnOff,w
 13673  0556  0086               	movwf	6
 13674  0557  3002               	movlw	2	; select bank4/5
 13675  0558  0087               	movwf	7
 13676  0559  0801               	movf	1,w
 13677  055A  3188  203C  3185   	fcall	_getDimmerLights_PercentToValue
 13678  055D  0020               	movlb	0	; select bank0
 13679  055E  00E7               	movwf	??_setDimmerLights_OnOff+1
 13680  055F  0867               	movf	??_setDimmerLights_OnOff+1,w
 13681  0560  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13682  0561  0868               	movf	setDimmerLights_OnOff@lights,w
 13683  0562  319D  256B  3185   	fcall	_setDimmerIntr_MaxmumValue
 13684                           
 13685                           ;Dimmer_B1.c: 874: setDimmerIntr_Dimming_RF(lights, 1);
 13686  0565  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13687  0566  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13688  0567  0020               	movlb	0	; select bank0
 13689  0568  0868               	movf	setDimmerLights_OnOff@lights,w
 13690  0569  3190  20AB  3185   	fcall	_setDimmerIntr_Dimming_RF
 13691                           
 13692                           ;Dimmer_B1.c: 875: } else {
 13693  056C  2D82               	goto	l9516
 13694  056D                     l9514:	
 13695                           
 13696                           ;Dimmer_B1.c: 876: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13697  056D  0020               	movlb	0	; select bank0
 13698  056E  0868               	movf	setDimmerLights_OnOff@lights,w
 13699  056F  3E14               	addlw	20
 13700  0570  076C               	addwf	_product,w
 13701  0571  00E6               	movwf	??_setDimmerLights_OnOff
 13702  0572  0866               	movf	??_setDimmerLights_OnOff,w
 13703  0573  0086               	movwf	6
 13704  0574  3002               	movlw	2	; select bank4/5
 13705  0575  0087               	movwf	7
 13706  0576  0801               	movf	1,w
 13707  0577  3188  203C  3185   	fcall	_getDimmerLights_PercentToValue
 13708  057A  0020               	movlb	0	; select bank0
 13709  057B  00E7               	movwf	??_setDimmerLights_OnOff+1
 13710  057C  0867               	movf	??_setDimmerLights_OnOff+1,w
 13711  057D  00DA               	movwf	setDimmerIntr_DimmingValue@value
 13712  057E  0868               	movf	setDimmerLights_OnOff@lights,w
 13713  057F  319D  2582  3185   	fcall	_setDimmerIntr_DimmingValue
 13714  0582                     l9516:	
 13715                           
 13716                           ;Dimmer_B1.c: 879: }
 13717                           ;Dimmer_B1.c: 881: if (lights == 1) {
 13718  0582  0020               	movlb	0	; select bank0
 13719  0583  0868               	movf	setDimmerLights_OnOff@lights,w
 13720  0584  3A01               	xorlw	1
 13721  0585  1D03               	skipz
 13722  0586  2D8A               	goto	l9520
 13723                           
 13724                           ;Dimmer_B1.c: 883: DimmerIntr1.TuneGO = 1;
 13725  0587  0021               	movlb	1	; select bank1
 13726  0588  1748               	bsf	(_DimmerIntr1^(0+128)+1),6
 13727                           
 13728                           ;Dimmer_B1.c: 885: } else if (lights == 2) {
 13729  0589  2DC2               	goto	l9542
 13730  058A                     l9520:	
 13731  058A  0020               	movlb	0	; select bank0
 13732  058B  0868               	movf	setDimmerLights_OnOff@lights,w
 13733  058C  3A02               	xorlw	2
 13734  058D  1D03               	skipz
 13735  058E  2DC2               	goto	l9542
 13736                           
 13737                           ;Dimmer_B1.c: 887: DimmerIntr2.TuneGO = 1;
 13738  058F  0022               	movlb	2	; select bank2
 13739  0590  1721               	bsf	(_DimmerIntr2^(0+256)+1),6
 13740                           
 13741                           ;Dimmer_B1.c: 889: }
 13742                           ;Dimmer_B1.c: 895: } else if (command == 0) {
 13743  0591  2DC2               	goto	l9542
 13744  0592                     l9524:	
 13745  0592  0020               	movlb	0	; select bank0
 13746  0593  08E5               	movf	setDimmerLights_OnOff@command,f
 13747  0594  1D03               	skipz
 13748  0595  2DC2               	goto	l9542
 13749                           
 13750                           ;Dimmer_B1.c: 896: setDimmerIntr_ControlStatus(lights, 0);
 13751  0596  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13752  0597  0868               	movf	setDimmerLights_OnOff@lights,w
 13753  0598  3190  2082  3185   	fcall	_setDimmerIntr_ControlStatus
 13754                           
 13755                           ;Dimmer_B1.c: 898: Dimmer.Load_Status = 0;
 13756  059B  0022               	movlb	2	; select bank2
 13757  059C  112C               	bcf	_Dimmer^(0+256),2
 13758                           
 13759                           ;Dimmer_B1.c: 899: setDimmerLights_Line(0);
 13760  059D  3000               	movlw	0
 13761  059E  319D  2555  3185   	fcall	_setDimmerLights_Line
 13762                           
 13763                           ;Dimmer_B1.c: 903: if (getDelayOff_GO(lights) == 1) {
 13764  05A1  0020               	movlb	0	; select bank0
 13765  05A2  0868               	movf	setDimmerLights_OnOff@lights,w
 13766  05A3  319B  2367  3185   	fcall	_getDelayOff_GO
 13767  05A6  3A01               	xorlw	1
 13768  05A7  1D03               	skipz
 13769  05A8  2DB0               	goto	l884
 13770                           
 13771                           ;Dimmer_B1.c: 904: setDelayOff_GO(lights, 0, 0);
 13772  05A9  0020               	movlb	0	; select bank0
 13773  05AA  01DD               	clrf	setDelayOff_GO@command
 13774  05AB  01DE               	clrf	setDelayOff_GO@value
 13775  05AC  0868               	movf	setDimmerLights_OnOff@lights,w
 13776  05AD  318C  24B0  3185   	fcall	_setDelayOff_GO
 13777  05B0                     l884:	
 13778                           
 13779                           ;Dimmer_B1.c: 905: }
 13780                           ;Dimmer_B1.c: 910: setLED(lights, 1);
 13781  05B0  01F4               	clrf	setLED@command
 13782  05B1  0AF4               	incf	setLED@command,f
 13783  05B2  0020               	movlb	0	; select bank0
 13784  05B3  0868               	movf	setDimmerLights_OnOff@lights,w
 13785  05B4  3195  25BC  3185   	fcall	_setLED
 13786                           
 13787                           ;Dimmer_B1.c: 915: if (lights == 1) {
 13788  05B7  0020               	movlb	0	; select bank0
 13789  05B8  0868               	movf	setDimmerLights_OnOff@lights,w
 13790  05B9  3A01               	xorlw	1
 13791  05BA  1D03               	skipz
 13792  05BB  2DBE               	goto	l9538
 13793                           
 13794                           ;Dimmer_B1.c: 916: RA7 = 0;
 13795  05BC  138C               	bcf	12,7	;volatile
 13796                           
 13797                           ;Dimmer_B1.c: 918: }
 13798  05BD  2DC2               	goto	l9542
 13799  05BE                     l9538:	
 13800                           
 13801                           ;Dimmer_B1.c: 921: else if (lights == 2) {
 13802  05BE  0868               	movf	setDimmerLights_OnOff@lights,w
 13803  05BF  3A02               	xorlw	2
 13804  05C0  1903               	btfsc	3,2
 13805                           
 13806                           ;Dimmer_B1.c: 922: RB4 = 0;
 13807  05C1  120D               	bcf	13,4	;volatile
 13808  05C2                     l9542:	
 13809                           
 13810                           ;Dimmer_B1.c: 923: }
 13811                           ;Dimmer_B1.c: 929: }
 13812                           ;Dimmer_B1.c: 932: setRF_DimmerLights(lights, command);
 13813  05C2  0020               	movlb	0	; select bank0
 13814  05C3  0865               	movf	setDimmerLights_OnOff@command,w
 13815  05C4  00E6               	movwf	??_setDimmerLights_OnOff
 13816  05C5  0866               	movf	??_setDimmerLights_OnOff,w
 13817  05C6  00DD               	movwf	setRF_DimmerLights@on
 13818  05C7  0868               	movf	setDimmerLights_OnOff@lights,w
 13819  05C8  3195  255D  3185   	fcall	_setRF_DimmerLights
 13820                           
 13821                           ;Dimmer_B1.c: 934: if (getCmd_Status(1) == 1) {
 13822  05CB  3001               	movlw	1
 13823  05CC  319B  23E1  3185   	fcall	_getCmd_Status
 13824  05CF  3A01               	xorlw	1
 13825  05D0  1D03               	skipz
 13826  05D1  2DEC               	goto	l9556
 13827                           
 13828                           ;Dimmer_B1.c: 935: if (getMain_All_LightsStatus() == 0) {
 13829  05D2  319B  2376  3185   	fcall	_getMain_All_LightsStatus
 13830  05D5  3800               	iorlw	0
 13831  05D6  1D03               	skipz
 13832  05D7  0008               	return
 13833                           
 13834                           ;Dimmer_B1.c: 936: setCmd_Status(1, 0);
 13835  05D8  01F2               	clrf	setCmd_Status@cmd
 13836  05D9  3001               	movlw	1
 13837  05DA  319C  24D7  3185   	fcall	_setCmd_Status
 13838                           
 13839                           ;Dimmer_B1.c: 937: setProductData(11, 0);
 13840  05DD  0020               	movlb	0	; select bank0
 13841  05DE  01DA               	clrf	setProductData@value
 13842  05DF  300B               	movlw	11
 13843  05E0  319B  232B  3185   	fcall	_setProductData
 13844                           
 13845                           ;Dimmer_B1.c: 938: setProductData(17, 0);
 13846  05E3  0020               	movlb	0	; select bank0
 13847  05E4  01DA               	clrf	setProductData@value
 13848  05E5  3011               	movlw	17
 13849  05E6  319B  232B  3185   	fcall	_setProductData
 13850                           
 13851                           ;Dimmer_B1.c: 939: setTxData();
 13852  05E9  318F  274A         	fcall	_setTxData
 13853                           
 13854                           ;Dimmer_B1.c: 940: }
 13855                           ;Dimmer_B1.c: 941: } else {
 13856  05EB  0008               	return
 13857  05EC                     l9556:	
 13858                           
 13859                           ;Dimmer_B1.c: 942: setTxData();
 13860  05EC  318F  274A         	fcall	_setTxData
 13861  05EE  0008               	return
 13862  05EF                     __end_of_setDimmerLights_OnOff:	
 13863                           
 13864                           	psect	text89
 13865  15BC                     __ptext89:	
 13866 ;; *************** function _setLED *****************
 13867 ;; Defined at:
 13868 ;;		line 81 in file "../src/LED_B1.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  led             1    wreg     unsigned char 
 13871 ;;  command         1    4[COMMON] unsigned char 
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;  led             1    5[COMMON] unsigned char 
 13874 ;; Return value:  Size  Location     Type
 13875 ;;		None               void
 13876 ;; Registers used:
 13877 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13878 ;; Tracked objects:
 13879 ;;		On entry : 0/0
 13880 ;;		On exit  : 0/0
 13881 ;;		Unchanged: 0/0
 13882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13883 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;Total ram usage:        2 bytes
 13888 ;; Hardware stack levels used:    1
 13889 ;; Hardware stack levels required when called:    4
 13890 ;; This function calls:
 13891 ;;		_LedPointSelect
 13892 ;; This function is called by:
 13893 ;;		_setDimmerLights_OnOff
 13894 ;;		_setLED_Initialization
 13895 ;;		_Exception_Main
 13896 ;;		_setSw_Initialization
 13897 ;; This function uses a non-reentrant model
 13898 ;;
 13899                           
 13900                           
 13901                           ;psect for function _setLED
 13902  15BC                     _setLED:	
 13903                           
 13904                           ;incstack = 0
 13905                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13906                           ;setLED@led stored from wreg
 13907  15BC  00F5               	movwf	setLED@led
 13908                           
 13909                           ;LED_B1.c: 82: LedPointSelect(led);
 13910  15BD  0875               	movf	setLED@led,w
 13911  15BE  319E  2631  3195   	fcall	_LedPointSelect
 13912                           
 13913                           ;LED_B1.c: 83: if (command == 0) {
 13914  15C1  08F4               	movf	setLED@command,f
 13915  15C2  1D03               	skipz
 13916  15C3  2DD6               	goto	l7116
 13917                           
 13918                           ;LED_B1.c: 85: if (led == 1) {
 13919  15C4  0875               	movf	setLED@led,w
 13920  15C5  3A01               	xorlw	1
 13921  15C6  1D03               	skipz
 13922  15C7  2DCA               	goto	l7108
 13923                           
 13924                           ;LED_B1.c: 89: RA3 = 1;
 13925  15C8  0020               	movlb	0	; select bank0
 13926  15C9  158C               	bsf	12,3	;volatile
 13927  15CA                     l7108:	
 13928                           
 13929                           ;LED_B1.c: 91: }
 13930                           ;LED_B1.c: 94: if (led == 2) {
 13931  15CA  0875               	movf	setLED@led,w
 13932  15CB  3A02               	xorlw	2
 13933  15CC  1D03               	skipz
 13934  15CD  2DD0               	goto	l7112
 13935                           
 13936                           ;LED_B1.c: 98: RC7 = 1;
 13937  15CE  0020               	movlb	0	; select bank0
 13938  15CF  178E               	bsf	14,7	;volatile
 13939  15D0                     l7112:	
 13940                           
 13941                           ;LED_B1.c: 100: }
 13942                           ;LED_B1.c: 112: if (led == 99) {
 13943  15D0  0875               	movf	setLED@led,w
 13944  15D1  3A63               	xorlw	99
 13945  15D2  1D03               	skipz
 13946  15D3  2DD6               	goto	l7116
 13947                           
 13948                           ;LED_B1.c: 116: RB5 = 1;
 13949  15D4  0020               	movlb	0	; select bank0
 13950  15D5  168D               	bsf	13,5	;volatile
 13951  15D6                     l7116:	
 13952                           
 13953                           ;LED_B1.c: 118: }
 13954                           ;LED_B1.c: 120: }
 13955                           ;LED_B1.c: 121: if (command == 1) {
 13956  15D6  0874               	movf	setLED@command,w
 13957  15D7  3A01               	xorlw	1
 13958  15D8  1D03               	skipz
 13959  15D9  2DEC               	goto	l7130
 13960                           
 13961                           ;LED_B1.c: 123: if (led == 1) {
 13962  15DA  0875               	movf	setLED@led,w
 13963  15DB  3A01               	xorlw	1
 13964  15DC  1D03               	skipz
 13965  15DD  2DE0               	goto	l7122
 13966                           
 13967                           ;LED_B1.c: 127: RA3 = 0;
 13968  15DE  0020               	movlb	0	; select bank0
 13969  15DF  118C               	bcf	12,3	;volatile
 13970  15E0                     l7122:	
 13971                           
 13972                           ;LED_B1.c: 129: }
 13973                           ;LED_B1.c: 132: if (led == 2) {
 13974  15E0  0875               	movf	setLED@led,w
 13975  15E1  3A02               	xorlw	2
 13976  15E2  1D03               	skipz
 13977  15E3  2DE6               	goto	l7126
 13978                           
 13979                           ;LED_B1.c: 136: RC7 = 0;
 13980  15E4  0020               	movlb	0	; select bank0
 13981  15E5  138E               	bcf	14,7	;volatile
 13982  15E6                     l7126:	
 13983                           
 13984                           ;LED_B1.c: 138: }
 13985                           ;LED_B1.c: 150: if (led == 99) {
 13986  15E6  0875               	movf	setLED@led,w
 13987  15E7  3A63               	xorlw	99
 13988  15E8  1D03               	skipz
 13989  15E9  2DEC               	goto	l7130
 13990                           
 13991                           ;LED_B1.c: 154: RB5 = 0;
 13992  15EA  0020               	movlb	0	; select bank0
 13993  15EB  128D               	bcf	13,5	;volatile
 13994  15EC                     l7130:	
 13995                           
 13996                           ;LED_B1.c: 156: }
 13997                           ;LED_B1.c: 158: }
 13998                           ;LED_B1.c: 159: if (command == 10) {
 13999  15EC  0874               	movf	setLED@command,w
 14000  15ED  3A0A               	xorlw	10
 14001  15EE  1D03               	skipz
 14002  15EF  2E10               	goto	l7146
 14003                           
 14004                           ;LED_B1.c: 160: LED->GO = 0;
 14005  15F0  0021               	movlb	1	; select bank1
 14006  15F1  085C               	movf	_LED^(0+128),w
 14007  15F2  0086               	movwf	6
 14008  15F3  3001               	movlw	1	; select bank2/3
 14009  15F4  0087               	movwf	7
 14010  15F5  1081               	bcf	1,1
 14011                           
 14012                           ;LED_B1.c: 161: LED->Time = 0;
 14013  15F6  0A5C               	incf	_LED^(0+128),w
 14014  15F7  0086               	movwf	6
 14015  15F8  3001               	movlw	1	; select bank2/3
 14016  15F9  0087               	movwf	7
 14017  15FA  3000               	movlw	0
 14018  15FB  3FC0               	movwi [0]fsr1
 14019  15FC  3FC1               	movwi [1]fsr1
 14020                           
 14021                           ;LED_B1.c: 163: if (led == 1) {
 14022  15FD  0875               	movf	setLED@led,w
 14023  15FE  3A01               	xorlw	1
 14024  15FF  1D03               	skipz
 14025  1600  2E04               	goto	l7138
 14026                           
 14027                           ;LED_B1.c: 167: RA3 = 1;
 14028  1601  0020               	movlb	0	; select bank0
 14029  1602  158C               	bsf	12,3	;volatile
 14030                           
 14031                           ;LED_B1.c: 169: }
 14032  1603  2E0A               	goto	l7142
 14033  1604                     l7138:	
 14034                           
 14035                           ;LED_B1.c: 172: else if (led == 2) {
 14036  1604  0875               	movf	setLED@led,w
 14037  1605  3A02               	xorlw	2
 14038  1606  1D03               	skipz
 14039  1607  2E0A               	goto	l7142
 14040                           
 14041                           ;LED_B1.c: 176: RC7 = 1;
 14042  1608  0020               	movlb	0	; select bank0
 14043  1609  178E               	bsf	14,7	;volatile
 14044  160A                     l7142:	
 14045                           
 14046                           ;LED_B1.c: 178: }
 14047                           ;LED_B1.c: 190: if (led == 99) {
 14048  160A  0875               	movf	setLED@led,w
 14049  160B  3A63               	xorlw	99
 14050  160C  1D03               	skipz
 14051  160D  2E10               	goto	l7146
 14052                           
 14053                           ;LED_B1.c: 194: RB5 = 1;
 14054  160E  0020               	movlb	0	; select bank0
 14055  160F  168D               	bsf	13,5	;volatile
 14056  1610                     l7146:	
 14057                           
 14058                           ;LED_B1.c: 196: }
 14059                           ;LED_B1.c: 198: }
 14060                           ;LED_B1.c: 199: if (command == 11) {
 14061  1610  0874               	movf	setLED@command,w
 14062  1611  3A0B               	xorlw	11
 14063  1612  1D03               	skipz
 14064  1613  0008               	return
 14065                           
 14066                           ;LED_B1.c: 200: LED->GO = 1;
 14067  1614  0021               	movlb	1	; select bank1
 14068  1615  085C               	movf	_LED^(0+128),w
 14069  1616  0086               	movwf	6
 14070  1617  3001               	movlw	1	; select bank2/3
 14071  1618  0087               	movwf	7
 14072  1619  1481               	bsf	1,1
 14073  161A  0008               	return
 14074  161B                     __end_of_setLED:	
 14075                           
 14076                           	psect	text90
 14077  1E31                     __ptext90:	
 14078 ;; *************** function _LedPointSelect *****************
 14079 ;; Defined at:
 14080 ;;		line 7 in file "../src/LED_B1.c"
 14081 ;; Parameters:    Size  Location     Type
 14082 ;;  led             1    wreg     unsigned char 
 14083 ;; Auto vars:     Size  Location     Type
 14084 ;;  led             1    3[COMMON] unsigned char 
 14085 ;; Return value:  Size  Location     Type
 14086 ;;		None               void
 14087 ;; Registers used:
 14088 ;;		wreg
 14089 ;; Tracked objects:
 14090 ;;		On entry : 0/0
 14091 ;;		On exit  : 0/0
 14092 ;;		Unchanged: 0/0
 14093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14098 ;;Total ram usage:        2 bytes
 14099 ;; Hardware stack levels used:    1
 14100 ;; Hardware stack levels required when called:    3
 14101 ;; This function calls:
 14102 ;;		Nothing
 14103 ;; This function is called by:
 14104 ;;		_setLED_Initialization
 14105 ;;		_setLED
 14106 ;;		_setLED_Main
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           
 14111                           ;psect for function _LedPointSelect
 14112  1E31                     _LedPointSelect:	
 14113                           
 14114                           ;incstack = 0
 14115                           ; Regs used in _LedPointSelect: [wreg]
 14116                           ;LedPointSelect@led stored from wreg
 14117  1E31  00F3               	movwf	LedPointSelect@led
 14118                           
 14119                           ;LED_B1.c: 9: if (led == 1) {
 14120  1E32  0873               	movf	LedPointSelect@led,w
 14121  1E33  3A01               	xorlw	1
 14122  1E34  1D03               	skipz
 14123  1E35  2E3B               	goto	l1112
 14124                           
 14125                           ;LED_B1.c: 10: LED = &VarLED1;
 14126  1E36  30DA               	movlw	_VarLED1& (0+255)
 14127  1E37  00F2               	movwf	??_LedPointSelect
 14128  1E38  0872               	movf	??_LedPointSelect,w
 14129  1E39  0021               	movlb	1	; select bank1
 14130  1E3A  00DC               	movwf	_LED^(0+128)
 14131  1E3B                     l1112:	
 14132                           
 14133                           ;LED_B1.c: 11: }
 14134                           ;LED_B1.c: 14: if (led == 2) {
 14135  1E3B  0873               	movf	LedPointSelect@led,w
 14136  1E3C  3A02               	xorlw	2
 14137  1E3D  1D03               	skipz
 14138  1E3E  2E44               	goto	l1113
 14139                           
 14140                           ;LED_B1.c: 15: LED = &VarLED2;
 14141  1E3F  30DE               	movlw	_VarLED2& (0+255)
 14142  1E40  00F2               	movwf	??_LedPointSelect
 14143  1E41  0872               	movf	??_LedPointSelect,w
 14144  1E42  0021               	movlb	1	; select bank1
 14145  1E43  00DC               	movwf	_LED^(0+128)
 14146  1E44                     l1113:	
 14147                           
 14148                           ;LED_B1.c: 16: }
 14149                           ;LED_B1.c: 24: if (led == 99) {
 14150  1E44  0873               	movf	LedPointSelect@led,w
 14151  1E45  3A63               	xorlw	99
 14152  1E46  1D03               	skipz
 14153  1E47  0008               	return
 14154                           
 14155                           ;LED_B1.c: 25: LED = &VarErrLED;
 14156  1E48  306B               	movlw	_VarErrLED& (0+255)
 14157  1E49  00F2               	movwf	??_LedPointSelect
 14158  1E4A  0872               	movf	??_LedPointSelect,w
 14159  1E4B  0021               	movlb	1	; select bank1
 14160  1E4C  00DC               	movwf	_LED^(0+128)
 14161  1E4D  0008               	return
 14162  1E4E                     __end_of_LedPointSelect:	
 14163                           
 14164                           	psect	text91
 14165  10AB                     __ptext91:	
 14166 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14167 ;; Defined at:
 14168 ;;		line 222 in file "../src/Dimmer_B1.c"
 14169 ;; Parameters:    Size  Location     Type
 14170 ;;  lights          1    wreg     unsigned char 
 14171 ;;  command         1    2[COMMON] unsigned char 
 14172 ;; Auto vars:     Size  Location     Type
 14173 ;;  lights          1    4[COMMON] unsigned char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;		None               void
 14176 ;; Registers used:
 14177 ;;		wreg, status,2, status,0
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14183 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14184 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;Total ram usage:        3 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    3
 14190 ;; This function calls:
 14191 ;;		Nothing
 14192 ;; This function is called by:
 14193 ;;		_setDimmerLights_OnOff
 14194 ;;		_setRFSW_AdjControl
 14195 ;; This function uses a non-reentrant model
 14196 ;;
 14197                           
 14198                           
 14199                           ;psect for function _setDimmerIntr_Dimming_RF
 14200  10AB                     _setDimmerIntr_Dimming_RF:	
 14201                           
 14202                           ;incstack = 0
 14203                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14204                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14205  10AB  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14206                           
 14207                           ;Dimmer_B1.c: 224: if (lights == 1) {
 14208  10AC  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14209  10AD  3A01               	xorlw	1
 14210  10AE  1D03               	skipz
 14211  10AF  28C0               	goto	l6704
 14212                           
 14213                           ;Dimmer_B1.c: 225: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14214  10B0  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14215  10B1  3A01               	xorlw	1
 14216  10B2  3000               	movlw	0
 14217  10B3  1903               	skipnz
 14218  10B4  3001               	movlw	1
 14219  10B5  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14220  10B6  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14221  10B7  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14222  10B8  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14223  10B9  0021               	movlb	1	; select bank1
 14224  10BA  0847               	movf	_DimmerIntr1^(0+128),w
 14225  10BB  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14226  10BC  39BF               	andlw	-65
 14227  10BD  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14228  10BE  00C7               	movwf	_DimmerIntr1^(0+128)
 14229                           
 14230                           ;Dimmer_B1.c: 226: }
 14231  10BF  0008               	return
 14232  10C0                     l6704:	
 14233                           
 14234                           ;Dimmer_B1.c: 229: else if (lights == 2) {
 14235  10C0  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14236  10C1  3A02               	xorlw	2
 14237  10C2  1D03               	skipz
 14238  10C3  0008               	return
 14239                           
 14240                           ;Dimmer_B1.c: 230: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14241  10C4  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14242  10C5  3A01               	xorlw	1
 14243  10C6  3000               	movlw	0
 14244  10C7  1903               	skipnz
 14245  10C8  3001               	movlw	1
 14246  10C9  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14247  10CA  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14248  10CB  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14249  10CC  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14250  10CD  0022               	movlb	2	; select bank2
 14251  10CE  0820               	movf	_DimmerIntr2^(0+256),w
 14252  10CF  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14253  10D0  39BF               	andlw	-65
 14254  10D1  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14255  10D2  00A0               	movwf	_DimmerIntr2^(0+256)
 14256  10D3  0008               	return
 14257  10D4                     __end_of_setDimmerIntr_Dimming_RF:	
 14258                           
 14259                           	psect	text92
 14260  1D82                     __ptext92:	
 14261 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14262 ;; Defined at:
 14263 ;;		line 87 in file "../src/Dimmer_B1.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;  lights          1    wreg     unsigned char 
 14266 ;;  value           1   58[BANK0 ] unsigned char 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  lights          1   60[BANK0 ] unsigned char 
 14269 ;; Return value:  Size  Location     Type
 14270 ;;		None               void
 14271 ;; Registers used:
 14272 ;;		wreg
 14273 ;; Tracked objects:
 14274 ;;		On entry : 0/0
 14275 ;;		On exit  : 0/0
 14276 ;;		Unchanged: 0/0
 14277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14278 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;Total ram usage:        3 bytes
 14283 ;; Hardware stack levels used:    1
 14284 ;; Hardware stack levels required when called:    3
 14285 ;; This function calls:
 14286 ;;		Nothing
 14287 ;; This function is called by:
 14288 ;;		_setDimmerLights_OnOff
 14289 ;; This function uses a non-reentrant model
 14290 ;;
 14291                           
 14292                           
 14293                           ;psect for function _setDimmerIntr_DimmingValue
 14294  1D82                     _setDimmerIntr_DimmingValue:	
 14295                           
 14296                           ;incstack = 0
 14297                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14298                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14299  1D82  0020               	movlb	0	; select bank0
 14300  1D83  00DC               	movwf	setDimmerIntr_DimmingValue@lights
 14301                           
 14302                           ;Dimmer_B1.c: 89: if (lights == 1) {
 14303  1D84  085C               	movf	setDimmerIntr_DimmingValue@lights,w
 14304  1D85  3A01               	xorlw	1
 14305  1D86  1D03               	skipz
 14306  1D87  2D8E               	goto	l7032
 14307                           
 14308                           ;Dimmer_B1.c: 90: DimmerIntr1.DimmingValue = value;
 14309  1D88  085A               	movf	setDimmerIntr_DimmingValue@value,w
 14310  1D89  00DB               	movwf	??_setDimmerIntr_DimmingValue
 14311  1D8A  085B               	movf	??_setDimmerIntr_DimmingValue,w
 14312  1D8B  0021               	movlb	1	; select bank1
 14313  1D8C  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 14314                           
 14315                           ;Dimmer_B1.c: 91: }
 14316  1D8D  0008               	return
 14317  1D8E                     l7032:	
 14318                           
 14319                           ;Dimmer_B1.c: 94: else if (lights == 2) {
 14320  1D8E  0020               	movlb	0	; select bank0
 14321  1D8F  085C               	movf	setDimmerIntr_DimmingValue@lights,w
 14322  1D90  3A02               	xorlw	2
 14323  1D91  1D03               	skipz
 14324  1D92  0008               	return
 14325                           
 14326                           ;Dimmer_B1.c: 95: DimmerIntr2.DimmingValue = value;
 14327  1D93  085A               	movf	setDimmerIntr_DimmingValue@value,w
 14328  1D94  00DB               	movwf	??_setDimmerIntr_DimmingValue
 14329  1D95  085B               	movf	??_setDimmerIntr_DimmingValue,w
 14330  1D96  0022               	movlb	2	; select bank2
 14331  1D97  00A5               	movwf	(_DimmerIntr2^(0+256)+5)
 14332  1D98  0008               	return
 14333  1D99                     __end_of_setDimmerIntr_DimmingValue:	
 14334                           
 14335                           	psect	text93
 14336  1082                     __ptext93:	
 14337 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14338 ;; Defined at:
 14339 ;;		line 69 in file "../src/Dimmer_B1.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;  lights          1    wreg     unsigned char 
 14342 ;;  command         1    2[COMMON] unsigned char 
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;  lights          1    4[COMMON] unsigned char 
 14345 ;; Return value:  Size  Location     Type
 14346 ;;		None               void
 14347 ;; Registers used:
 14348 ;;		wreg, status,2, status,0
 14349 ;; Tracked objects:
 14350 ;;		On entry : 0/0
 14351 ;;		On exit  : 0/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14354 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;Total ram usage:        3 bytes
 14359 ;; Hardware stack levels used:    1
 14360 ;; Hardware stack levels required when called:    3
 14361 ;; This function calls:
 14362 ;;		Nothing
 14363 ;; This function is called by:
 14364 ;;		_setDimmerLights_OnOff
 14365 ;; This function uses a non-reentrant model
 14366 ;;
 14367                           
 14368                           
 14369                           ;psect for function _setDimmerIntr_ControlStatus
 14370  1082                     _setDimmerIntr_ControlStatus:	
 14371                           
 14372                           ;incstack = 0
 14373                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14374                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14375  1082  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14376                           
 14377                           ;Dimmer_B1.c: 71: if (lights == 1) {
 14378  1083  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14379  1084  3A01               	xorlw	1
 14380  1085  1D03               	skipz
 14381  1086  2897               	goto	l7024
 14382                           
 14383                           ;Dimmer_B1.c: 72: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14384  1087  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14385  1088  3A01               	xorlw	1
 14386  1089  3000               	movlw	0
 14387  108A  1903               	skipnz
 14388  108B  3001               	movlw	1
 14389  108C  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14390  108D  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14391  108E  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14392  108F  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14393  1090  0021               	movlb	1	; select bank1
 14394  1091  0847               	movf	_DimmerIntr1^(0+128),w
 14395  1092  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14396  1093  39F7               	andlw	-9
 14397  1094  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14398  1095  00C7               	movwf	_DimmerIntr1^(0+128)
 14399                           
 14400                           ;Dimmer_B1.c: 73: }
 14401  1096  0008               	return
 14402  1097                     l7024:	
 14403                           
 14404                           ;Dimmer_B1.c: 76: else if (lights == 2) {
 14405  1097  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14406  1098  3A02               	xorlw	2
 14407  1099  1D03               	skipz
 14408  109A  0008               	return
 14409                           
 14410                           ;Dimmer_B1.c: 77: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14411  109B  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14412  109C  3A01               	xorlw	1
 14413  109D  3000               	movlw	0
 14414  109E  1903               	skipnz
 14415  109F  3001               	movlw	1
 14416  10A0  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14417  10A1  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14418  10A2  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14419  10A3  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14420  10A4  0022               	movlb	2	; select bank2
 14421  10A5  0820               	movf	_DimmerIntr2^(0+256),w
 14422  10A6  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14423  10A7  39F7               	andlw	-9
 14424  10A8  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14425  10A9  00A0               	movwf	_DimmerIntr2^(0+256)
 14426  10AA  0008               	return
 14427  10AB                     __end_of_setDimmerIntr_ControlStatus:	
 14428                           
 14429                           	psect	text94
 14430  0CB0                     __ptext94:	
 14431 ;; *************** function _setDelayOff_GO *****************
 14432 ;; Defined at:
 14433 ;;		line 87 in file "../src/DelayOff_B1.c"
 14434 ;; Parameters:    Size  Location     Type
 14435 ;;  sw              1    wreg     unsigned char 
 14436 ;;  command         1   61[BANK0 ] unsigned char 
 14437 ;;  value           1   62[BANK0 ] unsigned char 
 14438 ;; Auto vars:     Size  Location     Type
 14439 ;;  sw              1   68[BANK0 ] unsigned char 
 14440 ;;  k               1   67[BANK0 ] unsigned char 
 14441 ;;  j               1   66[BANK0 ] unsigned char 
 14442 ;;  i               1   65[BANK0 ] unsigned char 
 14443 ;; Return value:  Size  Location     Type
 14444 ;;		None               void
 14445 ;; Registers used:
 14446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14447 ;; Tracked objects:
 14448 ;;		On entry : 0/0
 14449 ;;		On exit  : 0/0
 14450 ;;		Unchanged: 0/0
 14451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;Total ram usage:        8 bytes
 14457 ;; Hardware stack levels used:    1
 14458 ;; Hardware stack levels required when called:    4
 14459 ;; This function calls:
 14460 ;;		_DelayOffPointSelect
 14461 ;;		___bmul
 14462 ;;		_setProductData
 14463 ;; This function is called by:
 14464 ;;		_setDimmerLights_OnOff
 14465 ;;		_setRFSW_Control
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           
 14470                           ;psect for function _setDelayOff_GO
 14471  0CB0                     _setDelayOff_GO:	
 14472                           
 14473                           ;incstack = 0
 14474                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14475                           ;setDelayOff_GO@sw stored from wreg
 14476  0CB0  0020               	movlb	0	; select bank0
 14477  0CB1  00E4               	movwf	setDelayOff_GO@sw
 14478                           
 14479                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14480  0CB2  0864               	movf	setDelayOff_GO@sw,w
 14481  0CB3  319C  24C2  318C   	fcall	_DelayOffPointSelect
 14482                           
 14483                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14484  0CB6  0020               	movlb	0	; select bank0
 14485  0CB7  085D               	movf	setDelayOff_GO@command,w
 14486  0CB8  3A01               	xorlw	1
 14487  0CB9  3000               	movlw	0
 14488  0CBA  1903               	skipnz
 14489  0CBB  3001               	movlw	1
 14490  0CBC  00DF               	movwf	??_setDelayOff_GO
 14491  0CBD  0021               	movlb	1	; select bank1
 14492  0CBE  085A               	movf	_DelayOff^(0+128),w
 14493  0CBF  0086               	movwf	6
 14494  0CC0  3001               	movlw	1	; select bank2/3
 14495  0CC1  0087               	movwf	7
 14496  0CC2  0020               	movlb	0	; select bank0
 14497  0CC3  0DDF               	rlf	??_setDelayOff_GO,f
 14498  0CC4  0801               	movf	1,w
 14499  0CC5  065F               	xorwf	??_setDelayOff_GO,w
 14500  0CC6  39FD               	andlw	-3
 14501  0CC7  065F               	xorwf	??_setDelayOff_GO,w
 14502  0CC8  0081               	movwf	1
 14503                           
 14504                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14505  0CC9  0021               	movlb	1	; select bank1
 14506  0CCA  085A               	movf	_DelayOff^(0+128),w
 14507  0CCB  3E02               	addlw	2
 14508  0CCC  0086               	movwf	6
 14509  0CCD  3001               	movlw	1	; select bank2/3
 14510  0CCE  0087               	movwf	7
 14511  0CCF  3000               	movlw	0
 14512  0CD0  3FC0               	movwi [0]fsr1
 14513  0CD1  3FC1               	movwi [1]fsr1
 14514                           
 14515                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14516  0CD2  085A               	movf	_DelayOff^(0+128),w
 14517  0CD3  3E04               	addlw	4
 14518  0CD4  0086               	movwf	6
 14519  0CD5  3001               	movlw	1	; select bank2/3
 14520  0CD6  0087               	movwf	7
 14521  0CD7  0181               	clrf	1
 14522                           
 14523                           ;DelayOff_B1.c: 94: if (command == 1) {
 14524  0CD8  0020               	movlb	0	; select bank0
 14525  0CD9  085D               	movf	setDelayOff_GO@command,w
 14526  0CDA  3A01               	xorlw	1
 14527  0CDB  1D03               	skipz
 14528  0CDC  2D32               	goto	l6676
 14529                           
 14530                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14531  0CDD  3005               	movlw	5
 14532  0CDE  00DF               	movwf	??_setDelayOff_GO
 14533  0CDF  085F               	movf	??_setDelayOff_GO,w
 14534  0CE0  00E1               	movwf	setDelayOff_GO@i
 14535  0CE1  01E2               	clrf	setDelayOff_GO@j
 14536  0CE2  01E3               	clrf	setDelayOff_GO@k
 14537                           
 14538                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14539  0CE3  300F               	movlw	15
 14540  0CE4  055E               	andwf	setDelayOff_GO@value,w
 14541  0CE5  00DF               	movwf	??_setDelayOff_GO
 14542  0CE6  085F               	movf	??_setDelayOff_GO,w
 14543  0CE7  3A05               	xorlw	5
 14544  0CE8  1903               	skipnz
 14545  0CE9  2CEE               	goto	l6662
 14546  0CEA  085E               	movf	setDelayOff_GO@value,w
 14547  0CEB  390F               	andlw	15
 14548  0CEC  1D03               	btfss	3,2
 14549  0CED  2D1E               	goto	l6672
 14550  0CEE                     l6662:	
 14551  0CEE  3031               	movlw	49
 14552  0CEF  025E               	subwf	setDelayOff_GO@value,w
 14553  0CF0  1803               	skipnc
 14554  0CF1  2D1E               	goto	l6672
 14555                           
 14556                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14557  0CF2  085E               	movf	setDelayOff_GO@value,w
 14558  0CF3  390F               	andlw	15
 14559  0CF4  00DF               	movwf	??_setDelayOff_GO
 14560  0CF5  085F               	movf	??_setDelayOff_GO,w
 14561  0CF6  00E2               	movwf	setDelayOff_GO@j
 14562                           
 14563                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14564  0CF7  085E               	movf	setDelayOff_GO@value,w
 14565  0CF8  00DF               	movwf	??_setDelayOff_GO
 14566  0CF9  3004               	movlw	4
 14567  0CFA                     u5945:	
 14568  0CFA  36DF               	lsrf	??_setDelayOff_GO,f
 14569  0CFB  0B89               	decfsz	9,f
 14570  0CFC  2CFA               	goto	u5945
 14571  0CFD  085F               	movf	??_setDelayOff_GO,w
 14572  0CFE  390F               	andlw	15
 14573  0CFF  00E0               	movwf	??_setDelayOff_GO+1
 14574  0D00  0860               	movf	??_setDelayOff_GO+1,w
 14575  0D01  00E3               	movwf	setDelayOff_GO@k
 14576                           
 14577                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14578  0D02  300A               	movlw	10
 14579  0D03  00DF               	movwf	??_setDelayOff_GO
 14580  0D04  085F               	movf	??_setDelayOff_GO,w
 14581  0D05  00F2               	movwf	___bmul@multiplicand
 14582  0D06  0863               	movf	setDelayOff_GO@k,w
 14583  0D07  319C  2431  318C   	fcall	___bmul
 14584  0D0A  0020               	movlb	0	; select bank0
 14585  0D0B  0762               	addwf	setDelayOff_GO@j,w
 14586  0D0C  00E0               	movwf	??_setDelayOff_GO+1
 14587  0D0D  0021               	movlb	1	; select bank1
 14588  0D0E  0A5A               	incf	_DelayOff^(0+128),w
 14589  0D0F  0086               	movwf	6
 14590  0D10  3001               	movlw	1	; select bank2/3
 14591  0D11  0087               	movwf	7
 14592  0D12  0020               	movlb	0	; select bank0
 14593  0D13  0860               	movf	??_setDelayOff_GO+1,w
 14594  0D14  0081               	movwf	1
 14595                           
 14596                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14597  0D15  085E               	movf	setDelayOff_GO@value,w
 14598  0D16  00DF               	movwf	??_setDelayOff_GO
 14599  0D17  085F               	movf	??_setDelayOff_GO,w
 14600  0D18  00DA               	movwf	setProductData@value
 14601  0D19  0864               	movf	setDelayOff_GO@sw,w
 14602  0D1A  3E1A               	addlw	26
 14603  0D1B  319B  232B         	fcall	_setProductData
 14604                           
 14605                           ;DelayOff_B1.c: 103: } else {
 14606  0D1D  0008               	return
 14607  0D1E                     l6672:	
 14608                           
 14609                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14610  0D1E  3005               	movlw	5
 14611  0D1F  0020               	movlb	0	; select bank0
 14612  0D20  00DF               	movwf	??_setDelayOff_GO
 14613  0D21  0021               	movlb	1	; select bank1
 14614  0D22  0A5A               	incf	_DelayOff^(0+128),w
 14615  0D23  0086               	movwf	6
 14616  0D24  3001               	movlw	1	; select bank2/3
 14617  0D25  0087               	movwf	7
 14618  0D26  0020               	movlb	0	; select bank0
 14619  0D27  085F               	movf	??_setDelayOff_GO,w
 14620  0D28  0081               	movwf	1
 14621                           
 14622                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14623  0D29  3005               	movlw	5
 14624  0D2A  00DF               	movwf	??_setDelayOff_GO
 14625  0D2B  085F               	movf	??_setDelayOff_GO,w
 14626  0D2C  00DA               	movwf	setProductData@value
 14627  0D2D  0864               	movf	setDelayOff_GO@sw,w
 14628  0D2E  3E1A               	addlw	26
 14629  0D2F  319B  232B         	fcall	_setProductData
 14630                           
 14631                           ;DelayOff_B1.c: 106: }
 14632                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14633  0D31  0008               	return
 14634  0D32                     l6676:	
 14635  0D32  0020               	movlb	0	; select bank0
 14636  0D33  08DD               	movf	setDelayOff_GO@command,f
 14637  0D34  1D03               	skipz
 14638  0D35  0008               	return
 14639                           
 14640                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14641  0D36  01DA               	clrf	setProductData@value
 14642  0D37  0864               	movf	setDelayOff_GO@sw,w
 14643  0D38  3E1A               	addlw	26
 14644  0D39  319B  232B         	fcall	_setProductData
 14645  0D3B  0008               	return
 14646  0D3C                     __end_of_setDelayOff_GO:	
 14647                           
 14648                           	psect	text95
 14649  1C31                     __ptext95:	
 14650 ;; *************** function ___bmul *****************
 14651 ;; Defined at:
 14652 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;  multiplier      1    wreg     unsigned char 
 14655 ;;  multiplicand    1    2[COMMON] unsigned char 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;  multiplier      1    5[COMMON] unsigned char 
 14658 ;;  product         1    4[COMMON] unsigned char 
 14659 ;; Return value:  Size  Location     Type
 14660 ;;                  1    wreg      unsigned char 
 14661 ;; Registers used:
 14662 ;;		wreg, status,2, status,0
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14668 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;Total ram usage:        4 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; Hardware stack levels required when called:    3
 14675 ;; This function calls:
 14676 ;;		Nothing
 14677 ;; This function is called by:
 14678 ;;		_setDelayOff_GO
 14679 ;;		_DelayTimejudge
 14680 ;; This function uses a non-reentrant model
 14681 ;;
 14682                           
 14683                           
 14684                           ;psect for function ___bmul
 14685  1C31                     ___bmul:	
 14686                           
 14687                           ;incstack = 0
 14688                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14689                           ;___bmul@multiplier stored from wreg
 14690  1C31  00F5               	movwf	___bmul@multiplier
 14691  1C32  01F4               	clrf	___bmul@product
 14692  1C33                     l6318:	
 14693  1C33  1C75               	btfss	___bmul@multiplier,0
 14694  1C34  2C39               	goto	l6322
 14695  1C35  0872               	movf	___bmul@multiplicand,w
 14696  1C36  00F3               	movwf	??___bmul
 14697  1C37  0873               	movf	??___bmul,w
 14698  1C38  07F4               	addwf	___bmul@product,f
 14699  1C39                     l6322:	
 14700  1C39  1003               	clrc
 14701  1C3A  0DF2               	rlf	___bmul@multiplicand,f
 14702  1C3B  1003               	clrc
 14703  1C3C  0CF5               	rrf	___bmul@multiplier,f
 14704  1C3D  08F5               	movf	___bmul@multiplier,f
 14705  1C3E  1D03               	skipz
 14706  1C3F  2C33               	goto	l6318
 14707  1C40  0874               	movf	___bmul@product,w
 14708  1C41  0008               	return
 14709  1C42                     __end_of___bmul:	
 14710                           
 14711                           	psect	text96
 14712  1CD7                     __ptext96:	
 14713 ;; *************** function _setCmd_Status *****************
 14714 ;; Defined at:
 14715 ;;		line 651 in file "../src/Main_B1.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;  number          1    wreg     unsigned char 
 14718 ;;  cmd             1    2[COMMON] unsigned char 
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;  number          1    4[COMMON] unsigned char 
 14721 ;; Return value:  Size  Location     Type
 14722 ;;		None               void
 14723 ;; Registers used:
 14724 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14730 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;Total ram usage:        3 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:    3
 14737 ;; This function calls:
 14738 ;;		Nothing
 14739 ;; This function is called by:
 14740 ;;		_setDimmerLights_OnOff
 14741 ;;		_setControl_Lights_Table
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _setCmd_Status
 14747  1CD7                     _setCmd_Status:	
 14748                           
 14749                           ;incstack = 0
 14750                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14751                           ;setCmd_Status@number stored from wreg
 14752  1CD7  00F4               	movwf	setCmd_Status@number
 14753                           
 14754                           ;Main_B1.c: 652: switch (number) {
 14755  1CD8  2CE6               	goto	l6856
 14756  1CD9                     l6852:	
 14757                           ;Main_B1.c: 653: case 1:
 14758                           
 14759                           
 14760                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14761  1CD9  0872               	movf	setCmd_Status@cmd,w
 14762  1CDA  3A01               	xorlw	1
 14763  1CDB  3000               	movlw	0
 14764  1CDC  1903               	skipnz
 14765  1CDD  3001               	movlw	1
 14766  1CDE  00F3               	movwf	??_setCmd_Status
 14767  1CDF  0021               	movlb	1	; select bank1
 14768  1CE0  0859               	movf	_Cmd^(0+128),w
 14769  1CE1  0673               	xorwf	??_setCmd_Status,w
 14770  1CE2  39FE               	andlw	-2
 14771  1CE3  0673               	xorwf	??_setCmd_Status,w
 14772  1CE4  00D9               	movwf	_Cmd^(0+128)
 14773                           
 14774                           ;Main_B1.c: 656: }
 14775                           
 14776                           ;Main_B1.c: 655: break;
 14777  1CE5  0008               	return
 14778  1CE6                     l6856:	
 14779  1CE6  0874               	movf	setCmd_Status@number,w
 14780                           
 14781                           ; Switch size 1, requested type "space"
 14782                           ; Number of cases is 1, Range of values is 1 to 1
 14783                           ; switch strategies available:
 14784                           ; Name         Instructions Cycles
 14785                           ; simple_byte            4     3 (average)
 14786                           ; direct_byte           11     9 (fixed)
 14787                           ; jumptable            263     9 (fixed)
 14788                           ;	Chosen strategy is simple_byte
 14789  1CE7  3A01               	xorlw	1	; case 1
 14790  1CE8  1903               	skipnz
 14791  1CE9  2CD9               	goto	l6852
 14792  1CEA  2CEB               	goto	l1698
 14793  1CEB                     l1698:	
 14794  1CEB  0008               	return
 14795  1CEC                     __end_of_setCmd_Status:	
 14796                           
 14797                           	psect	text97
 14798  1B76                     __ptext97:	
 14799 ;; *************** function _getMain_All_LightsStatus *****************
 14800 ;; Defined at:
 14801 ;;		line 373 in file "../src/Main_B1.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;  status          1    2[COMMON] unsigned char 
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  1    wreg      unsigned char 
 14808 ;; Registers used:
 14809 ;;		wreg, status,2, status,0
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;Total ram usage:        1 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    3
 14822 ;; This function calls:
 14823 ;;		Nothing
 14824 ;; This function is called by:
 14825 ;;		_DimmerLights_Main
 14826 ;;		_setDimmerLights_Main
 14827 ;;		_setDimmerLights_OnOff
 14828 ;;		_Flash_Memory_Main
 14829 ;;		_Exception_Main
 14830 ;;		_Load_Main
 14831 ;;		_setTemp_Main
 14832 ;;		_setControl_Lights_Table
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           
 14837                           ;psect for function _getMain_All_LightsStatus
 14838  1B76                     _getMain_All_LightsStatus:	
 14839                           
 14840                           ;Main_B1.c: 374: char status = 0;
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14844  1B76  01F2               	clrf	getMain_All_LightsStatus@status
 14845                           
 14846                           ;Main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 14847  1B77  3000               	movlw	0
 14848  1B78  0022               	movlb	2	; select bank2
 14849  1B79  185C               	btfsc	(_DimmerLights1^(0+256)+1),0
 14850  1B7A  3001               	movlw	1
 14851  1B7B  00F2               	movwf	getMain_All_LightsStatus@status
 14852                           
 14853                           ;Main_B1.c: 394: if (status == 0) {
 14854  1B7C  08F2               	movf	getMain_All_LightsStatus@status,f
 14855  1B7D  1D03               	skipz
 14856  1B7E  2B83               	goto	l9198
 14857                           
 14858                           ;Main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 14859  1B7F  3000               	movlw	0
 14860  1B80  1864               	btfsc	(_DimmerLights2^(0+256)+1),0
 14861  1B81  3001               	movlw	1
 14862  1B82  00F2               	movwf	getMain_All_LightsStatus@status
 14863  1B83                     l9198:	
 14864                           
 14865                           ;Main_B1.c: 396: }
 14866                           ;Main_B1.c: 420: return status;
 14867  1B83  0872               	movf	getMain_All_LightsStatus@status,w
 14868  1B84  0008               	return
 14869  1B85                     __end_of_getMain_All_LightsStatus:	
 14870                           
 14871                           	psect	text98
 14872  1B67                     __ptext98:	
 14873 ;; *************** function _getDelayOff_GO *****************
 14874 ;; Defined at:
 14875 ;;		line 114 in file "../src/DelayOff_B1.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  sw              1    wreg     unsigned char 
 14878 ;; Auto vars:     Size  Location     Type
 14879 ;;  sw              1    4[COMMON] unsigned char 
 14880 ;;  go              1    5[COMMON] unsigned char 
 14881 ;; Return value:  Size  Location     Type
 14882 ;;                  1    wreg      unsigned char 
 14883 ;; Registers used:
 14884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14885 ;; Tracked objects:
 14886 ;;		On entry : 0/0
 14887 ;;		On exit  : 0/0
 14888 ;;		Unchanged: 0/0
 14889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;Total ram usage:        2 bytes
 14895 ;; Hardware stack levels used:    1
 14896 ;; Hardware stack levels required when called:    4
 14897 ;; This function calls:
 14898 ;;		_DelayOffPointSelect
 14899 ;; This function is called by:
 14900 ;;		_setDimmerLights_OnOff
 14901 ;; This function uses a non-reentrant model
 14902 ;;
 14903                           
 14904                           
 14905                           ;psect for function _getDelayOff_GO
 14906  1B67                     _getDelayOff_GO:	
 14907                           
 14908                           ;incstack = 0
 14909                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14910                           ;getDelayOff_GO@sw stored from wreg
 14911  1B67  00F4               	movwf	getDelayOff_GO@sw
 14912                           
 14913                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14914  1B68  0874               	movf	getDelayOff_GO@sw,w
 14915  1B69  319C  24C2         	fcall	_DelayOffPointSelect
 14916                           
 14917                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14918  1B6B  0021               	movlb	1	; select bank1
 14919  1B6C  085A               	movf	_DelayOff^(0+128),w
 14920  1B6D  0086               	movwf	6
 14921  1B6E  3001               	movlw	1	; select bank2/3
 14922  1B6F  0087               	movwf	7
 14923  1B70  3000               	movlw	0
 14924  1B71  1881               	btfsc	1,1
 14925  1B72  3001               	movlw	1
 14926  1B73  00F5               	movwf	getDelayOff_GO@go
 14927                           
 14928                           ;DelayOff_B1.c: 117: return go;
 14929  1B74  0875               	movf	getDelayOff_GO@go,w
 14930  1B75  0008               	return
 14931  1B76                     __end_of_getDelayOff_GO:	
 14932                           
 14933                           	psect	text99
 14934  1BE1                     __ptext99:	
 14935 ;; *************** function _getCmd_Status *****************
 14936 ;; Defined at:
 14937 ;;		line 659 in file "../src/Main_B1.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;  number          1    wreg     unsigned char 
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;  number          1    2[COMMON] unsigned char 
 14942 ;;  cmd             1    3[COMMON] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      unsigned char 
 14945 ;; Registers used:
 14946 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:        2 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    3
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_setDimmerLights_OnOff
 14963 ;; This function uses a non-reentrant model
 14964 ;;
 14965                           
 14966                           
 14967                           ;psect for function _getCmd_Status
 14968  1BE1                     _getCmd_Status:	
 14969                           
 14970                           ;incstack = 0
 14971                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14972                           ;getCmd_Status@number stored from wreg
 14973  1BE1  00F2               	movwf	getCmd_Status@number
 14974                           
 14975                           ;Main_B1.c: 660: char cmd = 0;
 14976  1BE2  01F3               	clrf	getCmd_Status@cmd
 14977                           
 14978                           ;Main_B1.c: 661: switch (number) {
 14979  1BE3  2BEA               	goto	l7156
 14980  1BE4                     l7152:	
 14981                           ;Main_B1.c: 662: case 1:
 14982                           
 14983                           
 14984                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14985  1BE4  3000               	movlw	0
 14986  1BE5  0021               	movlb	1	; select bank1
 14987  1BE6  1859               	btfsc	_Cmd^(0+128),0
 14988  1BE7  3001               	movlw	1
 14989  1BE8  00F3               	movwf	getCmd_Status@cmd
 14990                           
 14991                           ;Main_B1.c: 665: }
 14992                           
 14993                           ;Main_B1.c: 664: break;
 14994  1BE9  2BEF               	goto	l7158
 14995  1BEA                     l7156:	
 14996  1BEA  0872               	movf	getCmd_Status@number,w
 14997                           
 14998                           ; Switch size 1, requested type "space"
 14999                           ; Number of cases is 1, Range of values is 1 to 1
 15000                           ; switch strategies available:
 15001                           ; Name         Instructions Cycles
 15002                           ; simple_byte            4     3 (average)
 15003                           ; direct_byte           11     9 (fixed)
 15004                           ; jumptable            263     9 (fixed)
 15005                           ;	Chosen strategy is simple_byte
 15006  1BEB  3A01               	xorlw	1	; case 1
 15007  1BEC  1903               	skipnz
 15008  1BED  2BE4               	goto	l7152
 15009  1BEE  2BEF               	goto	l7158
 15010  1BEF                     l7158:	
 15011                           
 15012                           ;Main_B1.c: 666: return cmd;
 15013  1BEF  0873               	movf	getCmd_Status@cmd,w
 15014  1BF0  0008               	return
 15015  1BF1                     __end_of_getCmd_Status:	
 15016                           
 15017                           	psect	text100
 15018  1454                     __ptext100:	
 15019 ;; *************** function _setDimmerLights_Dimming *****************
 15020 ;; Defined at:
 15021 ;;		line 948 in file "../src/Dimmer_B1.c"
 15022 ;; Parameters:    Size  Location     Type
 15023 ;;  lights          1    wreg     unsigned char 
 15024 ;;  status          1   66[BANK0 ] unsigned char 
 15025 ;; Auto vars:     Size  Location     Type
 15026 ;;  lights          1   69[BANK0 ] unsigned char 
 15027 ;;  value           1   68[BANK0 ] unsigned char 
 15028 ;; Return value:  Size  Location     Type
 15029 ;;		None               void
 15030 ;; Registers used:
 15031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15032 ;; Tracked objects:
 15033 ;;		On entry : 0/0
 15034 ;;		On exit  : 0/0
 15035 ;;		Unchanged: 0/0
 15036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15037 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;Total ram usage:        4 bytes
 15042 ;; Hardware stack levels used:    1
 15043 ;; Hardware stack levels required when called:    6
 15044 ;; This function calls:
 15045 ;;		_getDimmerIntr_DimmingValue
 15046 ;;		_getDimmerLights_ValueToPercent
 15047 ;;		_setBuz
 15048 ;;		_setDimmerIntr_Dimming_Sw
 15049 ;;		_setDimmerIntr_MaxmumValue
 15050 ;;		_setDimmerLights_Line
 15051 ;;		_setMemory_Modify
 15052 ;;		_setProductData
 15053 ;;		_setRF_DimmerLights
 15054 ;;		_setRF_TransceiveGO
 15055 ;;		_setTxData
 15056 ;; This function is called by:
 15057 ;;		_setDimmerLights_Main
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           
 15062                           ;psect for function _setDimmerLights_Dimming
 15063  1454                     _setDimmerLights_Dimming:	
 15064                           
 15065                           ;incstack = 0
 15066                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15067                           ;setDimmerLights_Dimming@lights stored from wreg
 15068  1454  0020               	movlb	0	; select bank0
 15069  1455  00E5               	movwf	setDimmerLights_Dimming@lights
 15070                           
 15071                           ;Dimmer_B1.c: 949: if (status == 1) {
 15072  1456  0862               	movf	setDimmerLights_Dimming@status,w
 15073  1457  3A01               	xorlw	1
 15074  1458  1D03               	skipz
 15075  1459  2C6D               	goto	l9562
 15076                           
 15077                           ;Dimmer_B1.c: 950: setDimmerIntr_Dimming_Sw(lights, 1);
 15078  145A  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15079  145B  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15080  145C  0865               	movf	setDimmerLights_Dimming@lights,w
 15081  145D  319F  2790  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15082                           
 15083                           ;Dimmer_B1.c: 953: setRF_TransceiveGO(0);
 15084  1460  3000               	movlw	0
 15085  1461  319B  23D1  3194   	fcall	_setRF_TransceiveGO
 15086                           
 15087                           ;Dimmer_B1.c: 955: setBuz(1, 100);
 15088  1464  3064               	movlw	100
 15089  1465  0020               	movlb	0	; select bank0
 15090  1466  00A4               	movwf	setBuz@time
 15091  1467  3000               	movlw	0
 15092  1468  00A5               	movwf	setBuz@time+1
 15093  1469  3001               	movlw	1
 15094  146A  3193  23AD         	fcall	_setBuz
 15095                           
 15096                           ;Dimmer_B1.c: 956: } else if (status == 0) {
 15097  146C  0008               	return
 15098  146D                     l9562:	
 15099  146D  0020               	movlb	0	; select bank0
 15100  146E  08E2               	movf	setDimmerLights_Dimming@status,f
 15101  146F  1D03               	skipz
 15102  1470  0008               	return
 15103                           
 15104                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 0);
 15105  1471  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15106  1472  0865               	movf	setDimmerLights_Dimming@lights,w
 15107  1473  319F  2790  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15108                           
 15109                           ;Dimmer_B1.c: 960: Dimmer.Load_Status = 0;
 15110  1476  0022               	movlb	2	; select bank2
 15111  1477  112C               	bcf	_Dimmer^(0+256),2
 15112                           
 15113                           ;Dimmer_B1.c: 961: setDimmerLights_Line(lights);
 15114  1478  0020               	movlb	0	; select bank0
 15115  1479  0865               	movf	setDimmerLights_Dimming@lights,w
 15116  147A  319D  2555  3194   	fcall	_setDimmerLights_Line
 15117                           
 15118                           ;Dimmer_B1.c: 963: char value = getDimmerIntr_DimmingValue(lights);
 15119  147D  0020               	movlb	0	; select bank0
 15120  147E  0865               	movf	setDimmerLights_Dimming@lights,w
 15121  147F  319C  249A  3194   	fcall	_getDimmerIntr_DimmingValue
 15122  1482  0020               	movlb	0	; select bank0
 15123  1483  00E3               	movwf	??_setDimmerLights_Dimming
 15124  1484  0863               	movf	??_setDimmerLights_Dimming,w
 15125  1485  00E4               	movwf	setDimmerLights_Dimming@value
 15126                           
 15127                           ;Dimmer_B1.c: 964: setDimmerIntr_MaxmumValue(lights, value);
 15128  1486  0864               	movf	setDimmerLights_Dimming@value,w
 15129  1487  00E3               	movwf	??_setDimmerLights_Dimming
 15130  1488  0863               	movf	??_setDimmerLights_Dimming,w
 15131  1489  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15132  148A  0865               	movf	setDimmerLights_Dimming@lights,w
 15133  148B  319D  256B  3194   	fcall	_setDimmerIntr_MaxmumValue
 15134                           
 15135                           ;Dimmer_B1.c: 965: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15136  148E  0020               	movlb	0	; select bank0
 15137  148F  0864               	movf	setDimmerLights_Dimming@value,w
 15138  1490  3188  20A1  3194   	fcall	_getDimmerLights_ValueToPercent
 15139  1493  0020               	movlb	0	; select bank0
 15140  1494  00E3               	movwf	??_setDimmerLights_Dimming
 15141  1495  0863               	movf	??_setDimmerLights_Dimming,w
 15142  1496  00DA               	movwf	setProductData@value
 15143  1497  0865               	movf	setDimmerLights_Dimming@lights,w
 15144  1498  3E14               	addlw	20
 15145  1499  319B  232B  3194   	fcall	_setProductData
 15146                           
 15147                           ;Dimmer_B1.c: 972: setMemory_Modify(1);
 15148  149C  3001               	movlw	1
 15149  149D  319B  23C1  3194   	fcall	_setMemory_Modify
 15150                           
 15151                           ;Dimmer_B1.c: 976: setRF_DimmerLights(lights, 1);
 15152  14A0  0020               	movlb	0	; select bank0
 15153  14A1  01DD               	clrf	setRF_DimmerLights@on
 15154  14A2  0ADD               	incf	setRF_DimmerLights@on,f
 15155  14A3  0865               	movf	setDimmerLights_Dimming@lights,w
 15156  14A4  3195  255D  3194   	fcall	_setRF_DimmerLights
 15157                           
 15158                           ;Dimmer_B1.c: 977: setTxData();
 15159  14A7  318F  274A         	fcall	_setTxData
 15160  14A9  0008               	return
 15161  14AA                     __end_of_setDimmerLights_Dimming:	
 15162                           
 15163                           	psect	text101
 15164  0F4A                     __ptext101:	
 15165 ;; *************** function _setTxData *****************
 15166 ;; Defined at:
 15167 ;;		line 183 in file "../src/RF_Control_B1.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  i               1    0        unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;		None               void
 15174 ;; Registers used:
 15175 ;;		wreg, fsr1l, fsr1h, status,2
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;Total ram usage:        1 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    3
 15188 ;; This function calls:
 15189 ;;		Nothing
 15190 ;; This function is called by:
 15191 ;;		_setDimmerLights_OnOff
 15192 ;;		_setDimmerLights_Dimming
 15193 ;;		_getRxData
 15194 ;;		_setControl_Lights_Table
 15195 ;;		_setRFSW_Control
 15196 ;;		_setRFSW_AdjControl
 15197 ;; This function uses a non-reentrant model
 15198 ;;
 15199                           
 15200                           
 15201                           ;psect for function _setTxData
 15202  0F4A                     _setTxData:	
 15203                           
 15204                           ;RF_Control_B1.c: 184: char i;
 15205                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15206                           
 15207                           ;incstack = 0
 15208                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15209  0F4A  0021               	movlb	1	; select bank1
 15210  0F4B  1C20               	btfss	_RF1^(0+128),0
 15211  0F4C  0008               	return
 15212                           
 15213                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15214  0F4D  1520               	bsf	_RF1^(0+128),2
 15215                           
 15216                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15217  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15218  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15219                           
 15220                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15221  0F50  3063               	movlw	99
 15222  0F51  00F2               	movwf	??_setTxData
 15223  0F52  0872               	movf	??_setTxData,w
 15224  0F53  0023               	movlb	3	; select bank3
 15225  0F54  00A0               	movwf	_RF_Data^(0+384)
 15226                           
 15227                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15228  0F55  3002               	movlw	2
 15229  0F56  00F2               	movwf	??_setTxData
 15230  0F57  0872               	movf	??_setTxData,w
 15231  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15232                           
 15233                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15234  0F59  0020               	movlb	0	; select bank0
 15235  0F5A  086C               	movf	_product,w
 15236  0F5B  0086               	movwf	6
 15237  0F5C  3002               	movlw	2	; select bank4/5
 15238  0F5D  0087               	movwf	7
 15239  0F5E  3002               	movlw	2	; select bank4/5
 15240  0F5F  3F42               	moviw [2]fsr1
 15241  0F60  0023               	movlb	3	; select bank3
 15242  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15243                           
 15244                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15245  0F62  0020               	movlb	0	; select bank0
 15246  0F63  086C               	movf	_product,w
 15247  0F64  0086               	movwf	6
 15248  0F65  3002               	movlw	2	; select bank4/5
 15249  0F66  0087               	movwf	7
 15250  0F67  3002               	movlw	2	; select bank4/5
 15251  0F68  3F43               	moviw [3]fsr1
 15252  0F69  0023               	movlb	3	; select bank3
 15253  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15254                           
 15255                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15256  0F6B  0020               	movlb	0	; select bank0
 15257  0F6C  086C               	movf	_product,w
 15258  0F6D  0086               	movwf	6
 15259  0F6E  3002               	movlw	2	; select bank4/5
 15260  0F6F  0087               	movwf	7
 15261  0F70  3002               	movlw	2	; select bank4/5
 15262  0F71  3F44               	moviw [4]fsr1
 15263  0F72  0023               	movlb	3	; select bank3
 15264  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15265                           
 15266                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15267  0F74  0020               	movlb	0	; select bank0
 15268  0F75  086C               	movf	_product,w
 15269  0F76  0086               	movwf	6
 15270  0F77  3002               	movlw	2	; select bank4/5
 15271  0F78  0087               	movwf	7
 15272  0F79  3002               	movlw	2	; select bank4/5
 15273  0F7A  3F45               	moviw [5]fsr1
 15274  0F7B  0023               	movlb	3	; select bank3
 15275  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15276                           
 15277                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15278  0F7D  0020               	movlb	0	; select bank0
 15279  0F7E  086C               	movf	_product,w
 15280  0F7F  0086               	movwf	6
 15281  0F80  3002               	movlw	2	; select bank4/5
 15282  0F81  0087               	movwf	7
 15283  0F82  3002               	movlw	2	; select bank4/5
 15284  0F83  3F46               	moviw [6]fsr1
 15285  0F84  0023               	movlb	3	; select bank3
 15286  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15287                           
 15288                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15289  0F86  0020               	movlb	0	; select bank0
 15290  0F87  086C               	movf	_product,w
 15291  0F88  0086               	movwf	6
 15292  0F89  3002               	movlw	2	; select bank4/5
 15293  0F8A  0087               	movwf	7
 15294  0F8B  3002               	movlw	2	; select bank4/5
 15295  0F8C  3F47               	moviw [7]fsr1
 15296  0F8D  0023               	movlb	3	; select bank3
 15297  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15298                           
 15299                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15300  0F8F  0020               	movlb	0	; select bank0
 15301  0F90  086C               	movf	_product,w
 15302  0F91  0086               	movwf	6
 15303  0F92  3002               	movlw	2	; select bank4/5
 15304  0F93  0087               	movwf	7
 15305  0F94  3002               	movlw	2	; select bank4/5
 15306  0F95  3F48               	moviw [8]fsr1
 15307  0F96  0023               	movlb	3	; select bank3
 15308  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15309                           
 15310                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15311  0F98  0020               	movlb	0	; select bank0
 15312  0F99  086C               	movf	_product,w
 15313  0F9A  0086               	movwf	6
 15314  0F9B  3002               	movlw	2	; select bank4/5
 15315  0F9C  0087               	movwf	7
 15316  0F9D  3002               	movlw	2	; select bank4/5
 15317  0F9E  3F49               	moviw [9]fsr1
 15318  0F9F  0023               	movlb	3	; select bank3
 15319  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15320                           
 15321                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15322  0FA1  0020               	movlb	0	; select bank0
 15323  0FA2  086C               	movf	_product,w
 15324  0FA3  0086               	movwf	6
 15325  0FA4  3002               	movlw	2	; select bank4/5
 15326  0FA5  0087               	movwf	7
 15327  0FA6  3002               	movlw	2	; select bank4/5
 15328  0FA7  3F4A               	moviw [10]fsr1
 15329  0FA8  0023               	movlb	3	; select bank3
 15330  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15331                           
 15332                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15333  0FAA  0020               	movlb	0	; select bank0
 15334  0FAB  086C               	movf	_product,w
 15335  0FAC  0086               	movwf	6
 15336  0FAD  3002               	movlw	2	; select bank4/5
 15337  0FAE  0087               	movwf	7
 15338  0FAF  3002               	movlw	2	; select bank4/5
 15339  0FB0  3F4B               	moviw [11]fsr1
 15340  0FB1  0023               	movlb	3	; select bank3
 15341  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15342                           
 15343                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15344  0FB3  0020               	movlb	0	; select bank0
 15345  0FB4  086C               	movf	_product,w
 15346  0FB5  0086               	movwf	6
 15347  0FB6  3002               	movlw	2	; select bank4/5
 15348  0FB7  0087               	movwf	7
 15349  0FB8  3002               	movlw	2	; select bank4/5
 15350  0FB9  3F4C               	moviw [12]fsr1
 15351  0FBA  0023               	movlb	3	; select bank3
 15352  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15353                           
 15354                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15355  0FBC  0020               	movlb	0	; select bank0
 15356  0FBD  086C               	movf	_product,w
 15357  0FBE  0086               	movwf	6
 15358  0FBF  3002               	movlw	2	; select bank4/5
 15359  0FC0  0087               	movwf	7
 15360  0FC1  3002               	movlw	2	; select bank4/5
 15361  0FC2  3F4D               	moviw [13]fsr1
 15362  0FC3  0023               	movlb	3	; select bank3
 15363  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15364                           
 15365                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15366  0FC5  0020               	movlb	0	; select bank0
 15367  0FC6  086C               	movf	_product,w
 15368  0FC7  0086               	movwf	6
 15369  0FC8  3002               	movlw	2	; select bank4/5
 15370  0FC9  0087               	movwf	7
 15371  0FCA  3002               	movlw	2	; select bank4/5
 15372  0FCB  3F4E               	moviw [14]fsr1
 15373  0FCC  0023               	movlb	3	; select bank3
 15374  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15375                           
 15376                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15377  0FCE  0020               	movlb	0	; select bank0
 15378  0FCF  086C               	movf	_product,w
 15379  0FD0  0086               	movwf	6
 15380  0FD1  3002               	movlw	2	; select bank4/5
 15381  0FD2  0087               	movwf	7
 15382  0FD3  3002               	movlw	2	; select bank4/5
 15383  0FD4  3F4F               	moviw [15]fsr1
 15384  0FD5  0023               	movlb	3	; select bank3
 15385  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15386                           
 15387                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15388  0FD7  0020               	movlb	0	; select bank0
 15389  0FD8  086C               	movf	_product,w
 15390  0FD9  0086               	movwf	6
 15391  0FDA  3002               	movlw	2	; select bank4/5
 15392  0FDB  0087               	movwf	7
 15393  0FDC  3002               	movlw	2	; select bank4/5
 15394  0FDD  3F50               	moviw [16]fsr1
 15395  0FDE  0023               	movlb	3	; select bank3
 15396  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15397                           
 15398                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15399  0FE0  0020               	movlb	0	; select bank0
 15400  0FE1  086C               	movf	_product,w
 15401  0FE2  0086               	movwf	6
 15402  0FE3  3002               	movlw	2	; select bank4/5
 15403  0FE4  0087               	movwf	7
 15404  0FE5  3002               	movlw	2	; select bank4/5
 15405  0FE6  3F51               	moviw [17]fsr1
 15406  0FE7  0023               	movlb	3	; select bank3
 15407  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15408                           
 15409                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15410  0FE9  0020               	movlb	0	; select bank0
 15411  0FEA  086C               	movf	_product,w
 15412  0FEB  0086               	movwf	6
 15413  0FEC  3002               	movlw	2	; select bank4/5
 15414  0FED  0087               	movwf	7
 15415  0FEE  3002               	movlw	2	; select bank4/5
 15416  0FEF  3F52               	moviw [18]fsr1
 15417  0FF0  0023               	movlb	3	; select bank3
 15418  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15419                           
 15420                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15421  0FF2  0020               	movlb	0	; select bank0
 15422  0FF3  086C               	movf	_product,w
 15423  0FF4  0086               	movwf	6
 15424  0FF5  3002               	movlw	2	; select bank4/5
 15425  0FF6  0087               	movwf	7
 15426  0FF7  3002               	movlw	2	; select bank4/5
 15427  0FF8  3F53               	moviw [19]fsr1
 15428  0FF9  0023               	movlb	3	; select bank3
 15429  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15430                           
 15431                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15432  0FFB  30D2               	movlw	210
 15433  0FFC  00F2               	movwf	??_setTxData
 15434  0FFD  0872               	movf	??_setTxData,w
 15435  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15436  0FFF  0008               	return
 15437  1000                     __end_of_setTxData:	
 15438                           
 15439                           	psect	text102
 15440  1BD1                     __ptext102:	
 15441 ;; *************** function _setRF_TransceiveGO *****************
 15442 ;; Defined at:
 15443 ;;		line 470 in file "../src/RF_Control_B1.c"
 15444 ;; Parameters:    Size  Location     Type
 15445 ;;  command         1    wreg     unsigned char 
 15446 ;; Auto vars:     Size  Location     Type
 15447 ;;  command         1    3[COMMON] unsigned char 
 15448 ;; Return value:  Size  Location     Type
 15449 ;;		None               void
 15450 ;; Registers used:
 15451 ;;		wreg, status,2, status,0
 15452 ;; Tracked objects:
 15453 ;;		On entry : 0/0
 15454 ;;		On exit  : 0/0
 15455 ;;		Unchanged: 0/0
 15456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;Total ram usage:        2 bytes
 15462 ;; Hardware stack levels used:    1
 15463 ;; Hardware stack levels required when called:    3
 15464 ;; This function calls:
 15465 ;;		Nothing
 15466 ;; This function is called by:
 15467 ;;		_setDimmerLights_Dimming
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           
 15472                           ;psect for function _setRF_TransceiveGO
 15473  1BD1                     _setRF_TransceiveGO:	
 15474                           
 15475                           ;incstack = 0
 15476                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15477                           ;setRF_TransceiveGO@command stored from wreg
 15478  1BD1  00F3               	movwf	setRF_TransceiveGO@command
 15479                           
 15480                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15481  1BD2  0873               	movf	setRF_TransceiveGO@command,w
 15482  1BD3  3A01               	xorlw	1
 15483  1BD4  3000               	movlw	0
 15484  1BD5  1903               	skipnz
 15485  1BD6  3001               	movlw	1
 15486  1BD7  00F2               	movwf	??_setRF_TransceiveGO
 15487  1BD8  0DF2               	rlf	??_setRF_TransceiveGO,f
 15488  1BD9  0DF2               	rlf	??_setRF_TransceiveGO,f
 15489  1BDA  0021               	movlb	1	; select bank1
 15490  1BDB  0820               	movf	_RF1^(0+128),w
 15491  1BDC  0672               	xorwf	??_setRF_TransceiveGO,w
 15492  1BDD  39FB               	andlw	-5
 15493  1BDE  0672               	xorwf	??_setRF_TransceiveGO,w
 15494  1BDF  00A0               	movwf	_RF1^(0+128)
 15495  1BE0  0008               	return
 15496  1BE1                     __end_of_setRF_TransceiveGO:	
 15497                           
 15498                           	psect	text103
 15499  155D                     __ptext103:	
 15500 ;; *************** function _setRF_DimmerLights *****************
 15501 ;; Defined at:
 15502 ;;		line 455 in file "../src/RF_Control_B1.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;  lights          1    wreg     unsigned char 
 15505 ;;  on              1   61[BANK0 ] unsigned char 
 15506 ;; Auto vars:     Size  Location     Type
 15507 ;;  lights          1   65[BANK0 ] unsigned char 
 15508 ;;  status          1   64[BANK0 ] unsigned char 
 15509 ;; Return value:  Size  Location     Type
 15510 ;;		None               void
 15511 ;; Registers used:
 15512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15513 ;; Tracked objects:
 15514 ;;		On entry : 0/0
 15515 ;;		On exit  : 0/0
 15516 ;;		Unchanged: 0/0
 15517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15518 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;Total ram usage:        5 bytes
 15523 ;; Hardware stack levels used:    1
 15524 ;; Hardware stack levels required when called:    4
 15525 ;; This function calls:
 15526 ;;		_setProductData
 15527 ;; This function is called by:
 15528 ;;		_setDimmerLights_OnOff
 15529 ;;		_setDimmerLights_Dimming
 15530 ;;		_setRFSW_Control
 15531 ;; This function uses a non-reentrant model
 15532 ;;
 15533                           
 15534                           
 15535                           ;psect for function _setRF_DimmerLights
 15536  155D                     _setRF_DimmerLights:	
 15537                           
 15538                           ;incstack = 0
 15539                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15540                           ;setRF_DimmerLights@lights stored from wreg
 15541  155D  0020               	movlb	0	; select bank0
 15542  155E  00E1               	movwf	setRF_DimmerLights@lights
 15543                           
 15544                           ;RF_Control_B1.c: 456: char status = 1;
 15545  155F  01E0               	clrf	setRF_DimmerLights@status
 15546  1560  0AE0               	incf	setRF_DimmerLights@status,f
 15547                           
 15548                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15549  1561  0861               	movf	setRF_DimmerLights@lights,w
 15550  1562  3EFF               	addlw	-1
 15551  1563  0A89               	incf	9,f
 15552  1564  2D67               	goto	u6000
 15553  1565                     u6005:	
 15554  1565  1003               	clrc
 15555  1566  0DE0               	rlf	setRF_DimmerLights@status,f
 15556  1567                     u6000:	
 15557  1567  3EFF               	addlw	-1
 15558  1568  1D03               	skipz
 15559  1569  2D65               	goto	u6005
 15560                           
 15561                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15562  156A  0861               	movf	setRF_DimmerLights@lights,w
 15563  156B  00DE               	movwf	??_setRF_DimmerLights
 15564  156C  085E               	movf	??_setRF_DimmerLights,w
 15565  156D  00DA               	movwf	setProductData@value
 15566  156E  300B               	movlw	11
 15567  156F  319B  232B  3195   	fcall	_setProductData
 15568                           
 15569                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15570  1572  0020               	movlb	0	; select bank0
 15571  1573  0861               	movf	setRF_DimmerLights@lights,w
 15572  1574  3E1A               	addlw	26
 15573  1575  076C               	addwf	_product,w
 15574  1576  00DE               	movwf	??_setRF_DimmerLights
 15575  1577  085E               	movf	??_setRF_DimmerLights,w
 15576  1578  0086               	movwf	6
 15577  1579  3002               	movlw	2	; select bank4/5
 15578  157A  0087               	movwf	7
 15579  157B  0801               	movf	1,w
 15580  157C  00DF               	movwf	??_setRF_DimmerLights+1
 15581  157D  085F               	movf	??_setRF_DimmerLights+1,w
 15582  157E  00DA               	movwf	setProductData@value
 15583  157F  3011               	movlw	17
 15584  1580  319B  232B  3195   	fcall	_setProductData
 15585                           
 15586                           ;RF_Control_B1.c: 460: if (on == 1) {
 15587  1583  0020               	movlb	0	; select bank0
 15588  1584  085D               	movf	setRF_DimmerLights@on,w
 15589  1585  3A01               	xorlw	1
 15590  1586  1D03               	skipz
 15591  1587  2DA7               	goto	l6720
 15592                           
 15593                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15594  1588  0861               	movf	setRF_DimmerLights@lights,w
 15595  1589  3E14               	addlw	20
 15596  158A  076C               	addwf	_product,w
 15597  158B  00DE               	movwf	??_setRF_DimmerLights
 15598  158C  085E               	movf	??_setRF_DimmerLights,w
 15599  158D  0086               	movwf	6
 15600  158E  3002               	movlw	2	; select bank4/5
 15601  158F  0087               	movwf	7
 15602  1590  0801               	movf	1,w
 15603  1591  00DF               	movwf	??_setRF_DimmerLights+1
 15604  1592  085F               	movf	??_setRF_DimmerLights+1,w
 15605  1593  00DA               	movwf	setProductData@value
 15606  1594  3009               	movlw	9
 15607  1595  319B  232B  3195   	fcall	_setProductData
 15608                           
 15609                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15610  1598  0020               	movlb	0	; select bank0
 15611  1599  086C               	movf	_product,w
 15612  159A  3E0F               	addlw	15
 15613  159B  0086               	movwf	6
 15614  159C  3002               	movlw	2	; select bank4/5
 15615  159D  0087               	movwf	7
 15616  159E  0801               	movf	1,w
 15617  159F  0460               	iorwf	setRF_DimmerLights@status,w
 15618  15A0  00DE               	movwf	??_setRF_DimmerLights
 15619  15A1  085E               	movf	??_setRF_DimmerLights,w
 15620  15A2  00DA               	movwf	setProductData@value
 15621  15A3  300F               	movlw	15
 15622  15A4  319B  232B         	fcall	_setProductData
 15623                           
 15624                           ;RF_Control_B1.c: 463: } else {
 15625  15A6  0008               	return
 15626  15A7                     l6720:	
 15627                           
 15628                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15629  15A7  0020               	movlb	0	; select bank0
 15630  15A8  01DA               	clrf	setProductData@value
 15631  15A9  3009               	movlw	9
 15632  15AA  319B  232B  3195   	fcall	_setProductData
 15633                           
 15634                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15635  15AD  0020               	movlb	0	; select bank0
 15636  15AE  086C               	movf	_product,w
 15637  15AF  3E0F               	addlw	15
 15638  15B0  0086               	movwf	6
 15639  15B1  3002               	movlw	2	; select bank4/5
 15640  15B2  0087               	movwf	7
 15641  15B3  0960               	comf	setRF_DimmerLights@status,w
 15642  15B4  0501               	andwf	1,w
 15643  15B5  00DE               	movwf	??_setRF_DimmerLights
 15644  15B6  085E               	movf	??_setRF_DimmerLights,w
 15645  15B7  00DA               	movwf	setProductData@value
 15646  15B8  300F               	movlw	15
 15647  15B9  319B  232B         	fcall	_setProductData
 15648  15BB  0008               	return
 15649  15BC                     __end_of_setRF_DimmerLights:	
 15650                           
 15651                           	psect	text104
 15652  1D55                     __ptext104:	
 15653 ;; *************** function _setDimmerLights_Line *****************
 15654 ;; Defined at:
 15655 ;;		line 1022 in file "../src/Dimmer_B1.c"
 15656 ;; Parameters:    Size  Location     Type
 15657 ;;  lights          1    wreg     unsigned char 
 15658 ;; Auto vars:     Size  Location     Type
 15659 ;;  lights          1    2[COMMON] unsigned char 
 15660 ;; Return value:  Size  Location     Type
 15661 ;;		None               void
 15662 ;; Registers used:
 15663 ;;		wreg
 15664 ;; Tracked objects:
 15665 ;;		On entry : 0/0
 15666 ;;		On exit  : 0/0
 15667 ;;		Unchanged: 0/0
 15668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15672 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15673 ;;Total ram usage:        1 bytes
 15674 ;; Hardware stack levels used:    1
 15675 ;; Hardware stack levels required when called:    3
 15676 ;; This function calls:
 15677 ;;		Nothing
 15678 ;; This function is called by:
 15679 ;;		_setDimmerLights_OnOff
 15680 ;;		_setDimmerLights_Dimming
 15681 ;; This function uses a non-reentrant model
 15682 ;;
 15683                           
 15684                           
 15685                           ;psect for function _setDimmerLights_Line
 15686  1D55                     _setDimmerLights_Line:	
 15687                           
 15688                           ;incstack = 0
 15689                           ; Regs used in _setDimmerLights_Line: [wreg]
 15690                           ;setDimmerLights_Line@lights stored from wreg
 15691  1D55  00F2               	movwf	setDimmerLights_Line@lights
 15692                           
 15693                           ;Dimmer_B1.c: 1023: Dimmer.LoadGO = 1;
 15694  1D56  0022               	movlb	2	; select bank2
 15695  1D57  14AC               	bsf	_Dimmer^(0+256),1
 15696                           
 15697                           ;Dimmer_B1.c: 1025: DimmerLights1.Line = 0;
 15698  1D58  10DC               	bcf	(_DimmerLights1^(0+256)+1),1
 15699                           
 15700                           ;Dimmer_B1.c: 1026: if (lights == 1 && lights != 0) {
 15701  1D59  0872               	movf	setDimmerLights_Line@lights,w
 15702  1D5A  3A01               	xorlw	1
 15703  1D5B  1D03               	skipz
 15704  1D5C  2D61               	goto	l913
 15705  1D5D  0872               	movf	setDimmerLights_Line@lights,w
 15706  1D5E  1903               	btfsc	3,2
 15707  1D5F  2D61               	goto	l913
 15708                           
 15709                           ;Dimmer_B1.c: 1027: DimmerLights1.Line = 1;
 15710  1D60  14DC               	bsf	(_DimmerLights1^(0+256)+1),1
 15711  1D61                     l913:	
 15712                           
 15713                           ;Dimmer_B1.c: 1028: }
 15714                           ;Dimmer_B1.c: 1031: DimmerLights2.Line = 0;
 15715  1D61  10E4               	bcf	(_DimmerLights2^(0+256)+1),1
 15716                           
 15717                           ;Dimmer_B1.c: 1032: if (lights == 2 && lights != 0) {
 15718  1D62  0872               	movf	setDimmerLights_Line@lights,w
 15719  1D63  3A02               	xorlw	2
 15720  1D64  1D03               	skipz
 15721  1D65  0008               	return
 15722  1D66  0872               	movf	setDimmerLights_Line@lights,w
 15723  1D67  1903               	btfsc	3,2
 15724  1D68  0008               	return
 15725                           
 15726                           ;Dimmer_B1.c: 1033: DimmerLights2.Line = 1;
 15727  1D69  14E4               	bsf	(_DimmerLights2^(0+256)+1),1
 15728  1D6A  0008               	return
 15729  1D6B                     __end_of_setDimmerLights_Line:	
 15730                           
 15731                           	psect	text105
 15732  1D6B                     __ptext105:	
 15733 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15734 ;; Defined at:
 15735 ;;		line 127 in file "../src/Dimmer_B1.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;  lights          1    wreg     unsigned char 
 15738 ;;  value           1   58[BANK0 ] unsigned char 
 15739 ;; Auto vars:     Size  Location     Type
 15740 ;;  lights          1   60[BANK0 ] unsigned char 
 15741 ;; Return value:  Size  Location     Type
 15742 ;;		None               void
 15743 ;; Registers used:
 15744 ;;		wreg
 15745 ;; Tracked objects:
 15746 ;;		On entry : 0/0
 15747 ;;		On exit  : 0/0
 15748 ;;		Unchanged: 0/0
 15749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15750 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15754 ;;Total ram usage:        3 bytes
 15755 ;; Hardware stack levels used:    1
 15756 ;; Hardware stack levels required when called:    3
 15757 ;; This function calls:
 15758 ;;		Nothing
 15759 ;; This function is called by:
 15760 ;;		_setDimmerLights_OnOff
 15761 ;;		_setDimmerLights_Dimming
 15762 ;;		_setRFSW_AdjControl
 15763 ;; This function uses a non-reentrant model
 15764 ;;
 15765                           
 15766                           
 15767                           ;psect for function _setDimmerIntr_MaxmumValue
 15768  1D6B                     _setDimmerIntr_MaxmumValue:	
 15769                           
 15770                           ;incstack = 0
 15771                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15772                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15773  1D6B  0020               	movlb	0	; select bank0
 15774  1D6C  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15775                           
 15776                           ;Dimmer_B1.c: 129: if (lights == 1) {
 15777  1D6D  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15778  1D6E  3A01               	xorlw	1
 15779  1D6F  1D03               	skipz
 15780  1D70  2D77               	goto	l6696
 15781                           
 15782                           ;Dimmer_B1.c: 130: DimmerIntr1.MaxmumValue = value;
 15783  1D71  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15784  1D72  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15785  1D73  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15786  1D74  0021               	movlb	1	; select bank1
 15787  1D75  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 15788                           
 15789                           ;Dimmer_B1.c: 131: }
 15790  1D76  0008               	return
 15791  1D77                     l6696:	
 15792                           
 15793                           ;Dimmer_B1.c: 134: else if (lights == 2) {
 15794  1D77  0020               	movlb	0	; select bank0
 15795  1D78  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15796  1D79  3A02               	xorlw	2
 15797  1D7A  1D03               	skipz
 15798  1D7B  0008               	return
 15799                           
 15800                           ;Dimmer_B1.c: 135: DimmerIntr2.MaxmumValue = value;
 15801  1D7C  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15802  1D7D  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15803  1D7E  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15804  1D7F  0022               	movlb	2	; select bank2
 15805  1D80  00A6               	movwf	(_DimmerIntr2^(0+256)+6)
 15806  1D81  0008               	return
 15807  1D82                     __end_of_setDimmerIntr_MaxmumValue:	
 15808                           
 15809                           	psect	text106
 15810  1F90                     __ptext106:	
 15811 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15812 ;; Defined at:
 15813 ;;		line 204 in file "../src/Dimmer_B1.c"
 15814 ;; Parameters:    Size  Location     Type
 15815 ;;  lights          1    wreg     unsigned char 
 15816 ;;  command         1    2[COMMON] unsigned char 
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;  lights          1    4[COMMON] unsigned char 
 15819 ;; Return value:  Size  Location     Type
 15820 ;;		None               void
 15821 ;; Registers used:
 15822 ;;		wreg, status,2, status,0
 15823 ;; Tracked objects:
 15824 ;;		On entry : 0/0
 15825 ;;		On exit  : 0/0
 15826 ;;		Unchanged: 0/0
 15827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15828 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;Total ram usage:        3 bytes
 15833 ;; Hardware stack levels used:    1
 15834 ;; Hardware stack levels required when called:    3
 15835 ;; This function calls:
 15836 ;;		Nothing
 15837 ;; This function is called by:
 15838 ;;		_setDimmerLights_Dimming
 15839 ;; This function uses a non-reentrant model
 15840 ;;
 15841                           
 15842                           
 15843                           ;psect for function _setDimmerIntr_Dimming_Sw
 15844  1F90                     _setDimmerIntr_Dimming_Sw:	
 15845                           
 15846                           ;incstack = 0
 15847                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15848                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15849  1F90  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15850                           
 15851                           ;Dimmer_B1.c: 206: if (lights == 1) {
 15852  1F91  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15853  1F92  3A01               	xorlw	1
 15854  1F93  1D03               	skipz
 15855  1F94  2FA3               	goto	l7052
 15856                           
 15857                           ;Dimmer_B1.c: 207: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15858  1F95  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15859  1F96  3A01               	xorlw	1
 15860  1F97  3000               	movlw	0
 15861  1F98  1903               	skipnz
 15862  1F99  3001               	movlw	1
 15863  1F9A  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15864  1F9B  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15865  1F9C  0021               	movlb	1	; select bank1
 15866  1F9D  0847               	movf	_DimmerIntr1^(0+128),w
 15867  1F9E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15868  1F9F  39EF               	andlw	-17
 15869  1FA0  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15870  1FA1  00C7               	movwf	_DimmerIntr1^(0+128)
 15871                           
 15872                           ;Dimmer_B1.c: 208: }
 15873  1FA2  0008               	return
 15874  1FA3                     l7052:	
 15875                           
 15876                           ;Dimmer_B1.c: 211: else if (lights == 2) {
 15877  1FA3  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15878  1FA4  3A02               	xorlw	2
 15879  1FA5  1D03               	skipz
 15880  1FA6  0008               	return
 15881                           
 15882                           ;Dimmer_B1.c: 212: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 15883  1FA7  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15884  1FA8  3A01               	xorlw	1
 15885  1FA9  3000               	movlw	0
 15886  1FAA  1903               	skipnz
 15887  1FAB  3001               	movlw	1
 15888  1FAC  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15889  1FAD  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15890  1FAE  0022               	movlb	2	; select bank2
 15891  1FAF  0820               	movf	_DimmerIntr2^(0+256),w
 15892  1FB0  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15893  1FB1  39EF               	andlw	-17
 15894  1FB2  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15895  1FB3  00A0               	movwf	_DimmerIntr2^(0+256)
 15896  1FB4  0008               	return
 15897  1FB5                     __end_of_setDimmerIntr_Dimming_Sw:	
 15898                           
 15899                           	psect	text107
 15900  1C9A                     __ptext107:	
 15901 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15902 ;; Defined at:
 15903 ;;		line 105 in file "../src/Dimmer_B1.c"
 15904 ;; Parameters:    Size  Location     Type
 15905 ;;  lights          1    wreg     unsigned char 
 15906 ;; Auto vars:     Size  Location     Type
 15907 ;;  lights          1    4[COMMON] unsigned char 
 15908 ;;  value           1    3[COMMON] unsigned char 
 15909 ;; Return value:  Size  Location     Type
 15910 ;;                  1    wreg      unsigned char 
 15911 ;; Registers used:
 15912 ;;		wreg, status,2
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;Total ram usage:        3 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    3
 15925 ;; This function calls:
 15926 ;;		Nothing
 15927 ;; This function is called by:
 15928 ;;		_setDimmerLights_Dimming
 15929 ;; This function uses a non-reentrant model
 15930 ;;
 15931                           
 15932                           
 15933                           ;psect for function _getDimmerIntr_DimmingValue
 15934  1C9A                     _getDimmerIntr_DimmingValue:	
 15935                           
 15936                           ;incstack = 0
 15937                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15938                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15939  1C9A  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 15940                           
 15941                           ;Dimmer_B1.c: 106: char value = 0;
 15942  1C9B  01F3               	clrf	getDimmerIntr_DimmingValue@value
 15943                           
 15944                           ;Dimmer_B1.c: 108: if (lights == 1) {
 15945  1C9C  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 15946  1C9D  3A01               	xorlw	1
 15947  1C9E  1D03               	skipz
 15948  1C9F  2CA3               	goto	l7042
 15949                           
 15950                           ;Dimmer_B1.c: 109: value = DimmerIntr1.DimmingValue;
 15951  1CA0  0021               	movlb	1	; select bank1
 15952  1CA1  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 15953  1CA2  2CA9               	goto	L10
 15954  1CA3                     l7042:	
 15955                           ;Dimmer_B1.c: 110: }
 15956                           
 15957                           
 15958                           ;Dimmer_B1.c: 113: else if (lights == 2) {
 15959  1CA3  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 15960  1CA4  3A02               	xorlw	2
 15961  1CA5  1D03               	skipz
 15962  1CA6  2CAC               	goto	l757
 15963                           
 15964                           ;Dimmer_B1.c: 114: value = DimmerIntr2.DimmingValue;
 15965  1CA7  0022               	movlb	2	; select bank2
 15966  1CA8  0825               	movf	(_DimmerIntr2^(0+256)+5),w
 15967  1CA9                     L10:	
 15968  1CA9  00F2               	movwf	??_getDimmerIntr_DimmingValue
 15969  1CAA  0872               	movf	??_getDimmerIntr_DimmingValue,w
 15970  1CAB  00F3               	movwf	getDimmerIntr_DimmingValue@value
 15971  1CAC                     l757:	
 15972                           
 15973                           ;Dimmer_B1.c: 115: }
 15974                           ;Dimmer_B1.c: 122: return value;
 15975  1CAC  0873               	movf	getDimmerIntr_DimmingValue@value,w
 15976  1CAD  0008               	return
 15977  1CAE                     __end_of_getDimmerIntr_DimmingValue:	
 15978                           
 15979                           	psect	text108
 15980  118A                     __ptext108:	
 15981 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15982 ;; Defined at:
 15983 ;;		line 983 in file "../src/Dimmer_B1.c"
 15984 ;; Parameters:    Size  Location     Type
 15985 ;;  lights          1    wreg     unsigned char 
 15986 ;; Auto vars:     Size  Location     Type
 15987 ;;  lights          1    7[COMMON] unsigned char 
 15988 ;;  allow           1    8[COMMON] unsigned char 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  1    wreg      unsigned char 
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0, pclath, cstack
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16001 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;Total ram usage:        6 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    4
 16005 ;; This function calls:
 16006 ;;		_getLoad_OK
 16007 ;; This function is called by:
 16008 ;;		_setDimmerLights_Main
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           
 16013                           ;psect for function _getDimmerLights_Allow_Condition
 16014  118A                     _getDimmerLights_Allow_Condition:	
 16015                           
 16016                           ;incstack = 0
 16017                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16018                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16019  118A  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16020                           
 16021                           ;Dimmer_B1.c: 984: char allow = 0;
 16022  118B  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16023                           
 16024                           ;Dimmer_B1.c: 990: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16025  118C  01F4               	clrf	_getDimmerLights_Allow_Condition$2415
 16026  118D  0AF4               	incf	_getDimmerLights_Allow_Condition$2415,f
 16027  118E  319A  2289  3191   	fcall	_getLoad_OK
 16028  1191  3800               	iorlw	0
 16029  1192  1D03               	skipz
 16030  1193  2998               	goto	l7338
 16031  1194  0022               	movlb	2	; select bank2
 16032  1195  18AC               	btfsc	_Dimmer^(0+256),1
 16033  1196  2998               	goto	l7338
 16034  1197  01F4               	clrf	_getDimmerLights_Allow_Condition$2415
 16035  1198                     l7338:	
 16036  1198  0874               	movf	_getDimmerLights_Allow_Condition$2415,w
 16037  1199  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16038  119A  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16039  119B  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16040                           
 16041                           ;Dimmer_B1.c: 994: if (allow == 0) {
 16042  119C  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16043  119D  1D03               	skipz
 16044  119E  29BD               	goto	l7362
 16045                           
 16046                           ;Dimmer_B1.c: 995: if (lights == 1) {
 16047  119F  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16048  11A0  3A01               	xorlw	1
 16049  11A1  1D03               	skipz
 16050  11A2  29AC               	goto	l7352
 16051                           
 16052                           ;Dimmer_B1.c: 996: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16053  11A3  01F5               	clrf	_getDimmerLights_Allow_Condition$2416
 16054  11A4  0AF5               	incf	_getDimmerLights_Allow_Condition$2416,f
 16055  11A5  0022               	movlb	2	; select bank2
 16056  11A6  1E63               	btfss	_DimmerLights2^(0+256),4
 16057  11A7  1A20               	btfsc	_DimmerIntr2^(0+256),4
 16058  11A8  29AA               	goto	l7350
 16059  11A9  01F5               	clrf	_getDimmerLights_Allow_Condition$2416
 16060  11AA                     l7350:	
 16061  11AA  0875               	movf	_getDimmerLights_Allow_Condition$2416,w
 16062  11AB  29BA               	goto	L11
 16063  11AC                     l7352:	
 16064                           ;Dimmer_B1.c: 997: } else if (lights == 2) {
 16065                           
 16066  11AC  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16067  11AD  3A02               	xorlw	2
 16068  11AE  1D03               	skipz
 16069  11AF  29BD               	goto	l7362
 16070                           
 16071                           ;Dimmer_B1.c: 998: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16072  11B0  01F6               	clrf	_getDimmerLights_Allow_Condition$2417
 16073  11B1  0AF6               	incf	_getDimmerLights_Allow_Condition$2417,f
 16074  11B2  0022               	movlb	2	; select bank2
 16075  11B3  1A5B               	btfsc	_DimmerLights1^(0+256),4
 16076  11B4  29B9               	goto	l7360
 16077  11B5  0021               	movlb	1	; select bank1
 16078  11B6  1A47               	btfsc	_DimmerIntr1^(0+128),4
 16079  11B7  29B9               	goto	l7360
 16080  11B8  01F6               	clrf	_getDimmerLights_Allow_Condition$2417
 16081  11B9                     l7360:	
 16082  11B9  0876               	movf	_getDimmerLights_Allow_Condition$2417,w
 16083  11BA                     L11:	
 16084  11BA  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16085  11BB  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16086  11BC  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16087  11BD                     l7362:	
 16088                           
 16089                           ;Dimmer_B1.c: 999: }
 16090                           ;Dimmer_B1.c: 1000: }
 16091                           ;Dimmer_B1.c: 1017: return allow;
 16092  11BD  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16093  11BE  0008               	return
 16094  11BF                     __end_of_getDimmerLights_Allow_Condition:	
 16095                           
 16096                           	psect	text109
 16097  1A89                     __ptext109:	
 16098 ;; *************** function _getLoad_OK *****************
 16099 ;; Defined at:
 16100 ;;		line 272 in file "../src/OverLoad_B1.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;		None
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  ok              1    2[COMMON] unsigned char 
 16105 ;; Return value:  Size  Location     Type
 16106 ;;                  1    wreg      unsigned char 
 16107 ;; Registers used:
 16108 ;;		wreg, status,2
 16109 ;; Tracked objects:
 16110 ;;		On entry : 0/0
 16111 ;;		On exit  : 0/0
 16112 ;;		Unchanged: 0/0
 16113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;Total ram usage:        1 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; Hardware stack levels required when called:    3
 16121 ;; This function calls:
 16122 ;;		Nothing
 16123 ;; This function is called by:
 16124 ;;		_DimmerLights_Main
 16125 ;;		_getDimmerLights_Allow_Condition
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           
 16130                           ;psect for function _getLoad_OK
 16131  1A89                     _getLoad_OK:	
 16132                           
 16133                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 16134                           
 16135                           ;incstack = 0
 16136                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16137  1A89  3000               	movlw	0
 16138  1A8A  0022               	movlb	2	; select bank2
 16139  1A8B  1BB3               	btfsc	_Load^(0+256),7
 16140  1A8C  3001               	movlw	1
 16141  1A8D  00F2               	movwf	getLoad_OK@ok
 16142                           
 16143                           ;OverLoad_B1.c: 274: return ok;
 16144  1A8E  0872               	movf	getLoad_OK@ok,w
 16145  1A8F  0008               	return
 16146  1A90                     __end_of_getLoad_OK:	
 16147                           
 16148                           	psect	text110
 16149  1128                     __ptext110:	
 16150 ;; *************** function _getMain_All_Error_Status *****************
 16151 ;; Defined at:
 16152 ;;		line 424 in file "../src/Main_B1.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;  command         1    wreg     unsigned char 
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;  command         1    7[COMMON] unsigned char 
 16157 ;;  status          1    8[COMMON] unsigned char 
 16158 ;; Return value:  Size  Location     Type
 16159 ;;                  1    wreg      unsigned char 
 16160 ;; Registers used:
 16161 ;;		wreg, status,2, status,0
 16162 ;; Tracked objects:
 16163 ;;		On entry : 0/0
 16164 ;;		On exit  : 0/0
 16165 ;;		Unchanged: 0/0
 16166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;Total ram usage:        7 bytes
 16172 ;; Hardware stack levels used:    1
 16173 ;; Hardware stack levels required when called:    3
 16174 ;; This function calls:
 16175 ;;		Nothing
 16176 ;; This function is called by:
 16177 ;;		_DimmerLights_Main
 16178 ;;		_Exception_Main
 16179 ;;		_Load_Main
 16180 ;;		_setTemp_Main
 16181 ;;		_getRxData
 16182 ;;		_setSw_Main
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           
 16187                           ;psect for function _getMain_All_Error_Status
 16188  1128                     _getMain_All_Error_Status:	
 16189                           
 16190                           ;incstack = 0
 16191                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16192                           ;getMain_All_Error_Status@command stored from wreg
 16193  1128  00F7               	movwf	getMain_All_Error_Status@command
 16194                           
 16195                           ;Main_B1.c: 425: char status = 0;
 16196  1129  01F8               	clrf	getMain_All_Error_Status@status
 16197                           
 16198                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16199  112A  08F8               	movf	getMain_All_Error_Status@status,f
 16200  112B  1D03               	skipz
 16201  112C  293F               	goto	l7074
 16202  112D  0877               	movf	getMain_All_Error_Status@command,w
 16203  112E  3A02               	xorlw	2
 16204  112F  1903               	skipnz
 16205  1130  293F               	goto	l7074
 16206                           
 16207                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16208  1131  0021               	movlb	1	; select bank1
 16209  1132  18E6               	btfsc	_Temp^(0+128),1
 16210  1133  2937               	goto	l7072
 16211  1134  01F3               	clrf	_getMain_All_Error_Status$3768
 16212  1135  01F4               	clrf	_getMain_All_Error_Status$3768+1
 16213  1136  293B               	goto	l1657
 16214  1137                     l7072:	
 16215  1137  3002               	movlw	2
 16216  1138  00F3               	movwf	_getMain_All_Error_Status$3768
 16217  1139  3000               	movlw	0
 16218  113A  00F4               	movwf	_getMain_All_Error_Status$3768+1
 16219  113B                     l1657:	
 16220  113B  0873               	movf	_getMain_All_Error_Status$3768,w
 16221  113C  00F2               	movwf	??_getMain_All_Error_Status
 16222  113D  0872               	movf	??_getMain_All_Error_Status,w
 16223  113E  00F8               	movwf	getMain_All_Error_Status@status
 16224  113F                     l7074:	
 16225                           
 16226                           ;Main_B1.c: 438: }
 16227                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16228  113F  08F8               	movf	getMain_All_Error_Status@status,f
 16229  1140  1D03               	skipz
 16230  1141  2954               	goto	l1658
 16231  1142  0877               	movf	getMain_All_Error_Status@command,w
 16232  1143  3A03               	xorlw	3
 16233  1144  1903               	skipnz
 16234  1145  2954               	goto	l1658
 16235                           
 16236                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16237  1146  0022               	movlb	2	; select bank2
 16238  1147  1AB3               	btfsc	_Load^(0+256),5
 16239  1148  294C               	goto	l7082
 16240  1149  01F5               	clrf	_getMain_All_Error_Status$3769
 16241  114A  01F6               	clrf	_getMain_All_Error_Status$3769+1
 16242  114B  2950               	goto	l1662
 16243  114C                     l7082:	
 16244  114C  3003               	movlw	3
 16245  114D  00F5               	movwf	_getMain_All_Error_Status$3769
 16246  114E  3000               	movlw	0
 16247  114F  00F6               	movwf	_getMain_All_Error_Status$3769+1
 16248  1150                     l1662:	
 16249  1150  0875               	movf	_getMain_All_Error_Status$3769,w
 16250  1151  00F2               	movwf	??_getMain_All_Error_Status
 16251  1152  0872               	movf	??_getMain_All_Error_Status,w
 16252  1153  00F8               	movwf	getMain_All_Error_Status@status
 16253  1154                     l1658:	
 16254                           
 16255                           ;Main_B1.c: 445: }
 16256                           ;Main_B1.c: 455: return status;
 16257  1154  0878               	movf	getMain_All_Error_Status@status,w
 16258  1155  0008               	return
 16259  1156                     __end_of_getMain_All_Error_Status:	
 16260                           
 16261                           	psect	text111
 16262  1AF3                     __ptext111:	
 16263 ;; *************** function _DimmerLights_Initialization *****************
 16264 ;; Defined at:
 16265 ;;		line 635 in file "../src/Dimmer_B1.c"
 16266 ;; Parameters:    Size  Location     Type
 16267 ;;		None
 16268 ;; Auto vars:     Size  Location     Type
 16269 ;;		None
 16270 ;; Return value:  Size  Location     Type
 16271 ;;		None               void
 16272 ;; Registers used:
 16273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16274 ;; Tracked objects:
 16275 ;;		On entry : 0/0
 16276 ;;		On exit  : 0/0
 16277 ;;		Unchanged: 0/0
 16278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;Total ram usage:        0 bytes
 16284 ;; Hardware stack levels used:    1
 16285 ;; Hardware stack levels required when called:    7
 16286 ;; This function calls:
 16287 ;;		_DimmerIntr_Initialization
 16288 ;;		_setDimmerLights_Initialization
 16289 ;; This function is called by:
 16290 ;;		_main
 16291 ;; This function uses a non-reentrant model
 16292 ;;
 16293                           
 16294                           
 16295                           ;psect for function _DimmerLights_Initialization
 16296  1AF3                     _DimmerLights_Initialization:	
 16297                           
 16298                           ;Dimmer_B1.c: 637: setDimmerLights_Initialization(1);
 16299                           
 16300                           ;incstack = 0
 16301                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16302  1AF3  3001               	movlw	1
 16303  1AF4  319A  224F  319A   	fcall	_setDimmerLights_Initialization
 16304                           
 16305                           ;Dimmer_B1.c: 641: setDimmerLights_Initialization(2);
 16306  1AF7  3002               	movlw	2
 16307  1AF8  319A  224F  319A   	fcall	_setDimmerLights_Initialization
 16308                           
 16309                           ;Dimmer_B1.c: 647: DimmerIntr_Initialization();
 16310  1AFB  3189  216E         	fcall	_DimmerIntr_Initialization
 16311  1AFD  0008               	return
 16312  1AFE                     __end_of_DimmerLights_Initialization:	
 16313                           
 16314                           	psect	text112
 16315  1A4F                     __ptext112:	
 16316 ;; *************** function _setDimmerLights_Initialization *****************
 16317 ;; Defined at:
 16318 ;;		line 651 in file "../src/Dimmer_B1.c"
 16319 ;; Parameters:    Size  Location     Type
 16320 ;;  lights          1    wreg     unsigned char 
 16321 ;; Auto vars:     Size  Location     Type
 16322 ;;  lights          1    0[COMMON] unsigned char 
 16323 ;; Return value:  Size  Location     Type
 16324 ;;		None               void
 16325 ;; Registers used:
 16326 ;;		wreg
 16327 ;; Tracked objects:
 16328 ;;		On entry : 0/0
 16329 ;;		On exit  : 0/0
 16330 ;;		Unchanged: 0/0
 16331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;Total ram usage:        0 bytes
 16337 ;; Hardware stack levels used:    1
 16338 ;; Hardware stack levels required when called:    3
 16339 ;; This function calls:
 16340 ;;		Nothing
 16341 ;; This function is called by:
 16342 ;;		_DimmerLights_Initialization
 16343 ;; This function uses a non-reentrant model
 16344 ;;
 16345                           
 16346                           
 16347                           ;psect for function _setDimmerLights_Initialization
 16348  1A4F                     _setDimmerLights_Initialization:	
 16349                           
 16350                           ;incstack = 0
 16351                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16352  1A4F  0008               	return
 16353  1A50                     __end_of_setDimmerLights_Initialization:	
 16354                           
 16355                           	psect	text113
 16356  096E                     __ptext113:	
 16357 ;; *************** function _DimmerIntr_Initialization *****************
 16358 ;; Defined at:
 16359 ;;		line 7 in file "../src/Dimmer_B1.c"
 16360 ;; Parameters:    Size  Location     Type
 16361 ;;		None
 16362 ;; Auto vars:     Size  Location     Type
 16363 ;;		None
 16364 ;; Return value:  Size  Location     Type
 16365 ;;		None               void
 16366 ;; Registers used:
 16367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16368 ;; Tracked objects:
 16369 ;;		On entry : 0/0
 16370 ;;		On exit  : 0/0
 16371 ;;		Unchanged: 0/0
 16372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;Total ram usage:        1 bytes
 16378 ;; Hardware stack levels used:    1
 16379 ;; Hardware stack levels required when called:    6
 16380 ;; This function calls:
 16381 ;;		_getDimmerLights_PercentToValue
 16382 ;;		_getDimmerLights_ValueToPercent
 16383 ;;		_setMemory_Modify
 16384 ;; This function is called by:
 16385 ;;		_DimmerLights_Initialization
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function _DimmerIntr_Initialization
 16391  096E                     _DimmerIntr_Initialization:	
 16392                           
 16393                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16394                           
 16395                           ;incstack = 0
 16396                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16397  096E  3007               	movlw	7
 16398  096F  0020               	movlb	0	; select bank0
 16399  0970  00DA               	movwf	??_DimmerIntr_Initialization
 16400  0971  085A               	movf	??_DimmerIntr_Initialization,w
 16401  0972  0021               	movlb	1	; select bank1
 16402  0973  00CB               	movwf	(_DimmerIntr1^(0+128)+4)
 16403                           
 16404                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(75*0.55));
 16405  0974  3029               	movlw	41
 16406  0975  0020               	movlb	0	; select bank0
 16407  0976  00DA               	movwf	??_DimmerIntr_Initialization
 16408  0977  085A               	movf	??_DimmerIntr_Initialization,w
 16409  0978  0021               	movlb	1	; select bank1
 16410  0979  00CD               	movwf	(_DimmerIntr1^(0+128)+6)
 16411                           
 16412                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 16413  097A  3002               	movlw	2
 16414  097B  0020               	movlb	0	; select bank0
 16415  097C  00DA               	movwf	??_DimmerIntr_Initialization
 16416  097D  085A               	movf	??_DimmerIntr_Initialization,w
 16417  097E  0021               	movlb	1	; select bank1
 16418  097F  00CE               	movwf	(_DimmerIntr1^(0+128)+7)
 16419                           
 16420                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16421  0980  1E38               	btfss	(_myMain^(0+128)+10),4
 16422  0981  2990               	goto	l9726
 16423                           
 16424                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16425  0982  3029               	movlw	41
 16426  0983  3188  20A1  3189   	fcall	_getDimmerLights_ValueToPercent
 16427  0986  0020               	movlb	0	; select bank0
 16428  0987  00DA               	movwf	??_DimmerIntr_Initialization
 16429  0988  086C               	movf	_product,w
 16430  0989  3E15               	addlw	21
 16431  098A  0086               	movwf	6
 16432  098B  3002               	movlw	2	; select bank4/5
 16433  098C  0087               	movwf	7
 16434  098D  085A               	movf	??_DimmerIntr_Initialization,w
 16435  098E  0081               	movwf	1
 16436                           
 16437                           ;Dimmer_B1.c: 18: } else {
 16438  098F  299F               	goto	l9728
 16439  0990                     l9726:	
 16440                           
 16441                           ;Dimmer_B1.c: 19: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16442  0990  0020               	movlb	0	; select bank0
 16443  0991  086C               	movf	_product,w
 16444  0992  3E15               	addlw	21
 16445  0993  0086               	movwf	6
 16446  0994  3002               	movlw	2	; select bank4/5
 16447  0995  0087               	movwf	7
 16448  0996  0801               	movf	1,w
 16449  0997  3188  203C  3189   	fcall	_getDimmerLights_PercentToValue
 16450  099A  0020               	movlb	0	; select bank0
 16451  099B  00DA               	movwf	??_DimmerIntr_Initialization
 16452  099C  085A               	movf	??_DimmerIntr_Initialization,w
 16453  099D  0021               	movlb	1	; select bank1
 16454  099E  00CC               	movwf	(_DimmerIntr1^(0+128)+5)
 16455  099F                     l9728:	
 16456                           
 16457                           ;Dimmer_B1.c: 20: }
 16458                           ;Dimmer_B1.c: 32: DimmerIntr2.TuneTimeValue = 7;
 16459  099F  3007               	movlw	7
 16460  09A0  0020               	movlb	0	; select bank0
 16461  09A1  00DA               	movwf	??_DimmerIntr_Initialization
 16462  09A2  085A               	movf	??_DimmerIntr_Initialization,w
 16463  09A3  0022               	movlb	2	; select bank2
 16464  09A4  00A4               	movwf	(_DimmerIntr2^(0+256)+4)
 16465                           
 16466                           ;Dimmer_B1.c: 33: DimmerIntr2.MaxmumValue = ((char)(75*0.55));
 16467  09A5  3029               	movlw	41
 16468  09A6  0020               	movlb	0	; select bank0
 16469  09A7  00DA               	movwf	??_DimmerIntr_Initialization
 16470  09A8  085A               	movf	??_DimmerIntr_Initialization,w
 16471  09A9  0022               	movlb	2	; select bank2
 16472  09AA  00A6               	movwf	(_DimmerIntr2^(0+256)+6)
 16473                           
 16474                           ;Dimmer_B1.c: 34: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 16475  09AB  3002               	movlw	2
 16476  09AC  0020               	movlb	0	; select bank0
 16477  09AD  00DA               	movwf	??_DimmerIntr_Initialization
 16478  09AE  085A               	movf	??_DimmerIntr_Initialization,w
 16479  09AF  0022               	movlb	2	; select bank2
 16480  09B0  00A7               	movwf	(_DimmerIntr2^(0+256)+7)
 16481                           
 16482                           ;Dimmer_B1.c: 36: if (myMain.InitDimmer == 1) {
 16483  09B1  0021               	movlb	1	; select bank1
 16484  09B2  1E38               	btfss	(_myMain^(0+128)+10),4
 16485  09B3  29C2               	goto	l9738
 16486                           
 16487                           ;Dimmer_B1.c: 37: product->Data[22] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16488  09B4  3029               	movlw	41
 16489  09B5  3188  20A1  3189   	fcall	_getDimmerLights_ValueToPercent
 16490  09B8  0020               	movlb	0	; select bank0
 16491  09B9  00DA               	movwf	??_DimmerIntr_Initialization
 16492  09BA  086C               	movf	_product,w
 16493  09BB  3E16               	addlw	22
 16494  09BC  0086               	movwf	6
 16495  09BD  3002               	movlw	2	; select bank4/5
 16496  09BE  0087               	movwf	7
 16497  09BF  085A               	movf	??_DimmerIntr_Initialization,w
 16498  09C0  0081               	movwf	1
 16499                           
 16500                           ;Dimmer_B1.c: 38: } else {
 16501  09C1  29D1               	goto	l9740
 16502  09C2                     l9738:	
 16503                           
 16504                           ;Dimmer_B1.c: 39: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 16505  09C2  0020               	movlb	0	; select bank0
 16506  09C3  086C               	movf	_product,w
 16507  09C4  3E16               	addlw	22
 16508  09C5  0086               	movwf	6
 16509  09C6  3002               	movlw	2	; select bank4/5
 16510  09C7  0087               	movwf	7
 16511  09C8  0801               	movf	1,w
 16512  09C9  3188  203C  3189   	fcall	_getDimmerLights_PercentToValue
 16513  09CC  0020               	movlb	0	; select bank0
 16514  09CD  00DA               	movwf	??_DimmerIntr_Initialization
 16515  09CE  085A               	movf	??_DimmerIntr_Initialization,w
 16516  09CF  0022               	movlb	2	; select bank2
 16517  09D0  00A5               	movwf	(_DimmerIntr2^(0+256)+5)
 16518  09D1                     l9740:	
 16519                           
 16520                           ;Dimmer_B1.c: 40: }
 16521                           ;Dimmer_B1.c: 61: if (myMain.InitDimmer == 1) {
 16522  09D1  0021               	movlb	1	; select bank1
 16523  09D2  1E38               	btfss	(_myMain^(0+128)+10),4
 16524  09D3  0008               	return
 16525                           
 16526                           ;Dimmer_B1.c: 62: myMain.InitDimmer = 0;
 16527  09D4  1238               	bcf	(_myMain^(0+128)+10),4
 16528                           
 16529                           ;Dimmer_B1.c: 63: myMain.SaveDimmer = 1;
 16530  09D5  16B8               	bsf	(_myMain^(0+128)+10),5
 16531                           
 16532                           ;Dimmer_B1.c: 64: setMemory_Modify(1);
 16533  09D6  3001               	movlw	1
 16534  09D7  319B  23C1         	fcall	_setMemory_Modify
 16535  09D9  0008               	return
 16536  09DA                     __end_of_DimmerIntr_Initialization:	
 16537                           
 16538                           	psect	text114
 16539  1BC1                     __ptext114:	
 16540 ;; *************** function _setMemory_Modify *****************
 16541 ;; Defined at:
 16542 ;;		line 1083 in file "../src/MCU_B1.c"
 16543 ;; Parameters:    Size  Location     Type
 16544 ;;  command         1    wreg     unsigned char 
 16545 ;; Auto vars:     Size  Location     Type
 16546 ;;  command         1    3[COMMON] unsigned char 
 16547 ;; Return value:  Size  Location     Type
 16548 ;;		None               void
 16549 ;; Registers used:
 16550 ;;		wreg, status,2, status,0
 16551 ;; Tracked objects:
 16552 ;;		On entry : 0/0
 16553 ;;		On exit  : 0/0
 16554 ;;		Unchanged: 0/0
 16555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;Total ram usage:        2 bytes
 16561 ;; Hardware stack levels used:    1
 16562 ;; Hardware stack levels required when called:    3
 16563 ;; This function calls:
 16564 ;;		Nothing
 16565 ;; This function is called by:
 16566 ;;		_DimmerIntr_Initialization
 16567 ;;		_setDimmerLights_Dimming
 16568 ;;		_setLog_Code
 16569 ;;		_setRFSW_AdjControl
 16570 ;; This function uses a non-reentrant model
 16571 ;;
 16572                           
 16573                           
 16574                           ;psect for function _setMemory_Modify
 16575  1BC1                     _setMemory_Modify:	
 16576                           
 16577                           ;incstack = 0
 16578                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16579                           ;setMemory_Modify@command stored from wreg
 16580  1BC1  00F3               	movwf	setMemory_Modify@command
 16581                           
 16582                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16583  1BC2  0873               	movf	setMemory_Modify@command,w
 16584  1BC3  3A01               	xorlw	1
 16585  1BC4  3000               	movlw	0
 16586  1BC5  1903               	skipnz
 16587  1BC6  3001               	movlw	1
 16588  1BC7  00F2               	movwf	??_setMemory_Modify
 16589  1BC8  0024               	movlb	4	; select bank4
 16590  1BC9  0844               	movf	(_Memory^(0+512)+36),w
 16591  1BCA  0672               	xorwf	??_setMemory_Modify,w
 16592  1BCB  39FE               	andlw	-2
 16593  1BCC  0672               	xorwf	??_setMemory_Modify,w
 16594  1BCD  00C4               	movwf	(_Memory^(0+512)+36)
 16595                           
 16596                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16597  1BCE  01C2               	clrf	(_Memory^(0+512)+34)
 16598  1BCF  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16599  1BD0  0008               	return
 16600  1BD1                     __end_of_setMemory_Modify:	
 16601                           
 16602                           	psect	text115
 16603  08A1                     __ptext115:	
 16604 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16605 ;; Defined at:
 16606 ;;		line 1122 in file "../src/Dimmer_B1.c"
 16607 ;; Parameters:    Size  Location     Type
 16608 ;;  value           1    wreg     unsigned char 
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;  value           1   54[BANK0 ] unsigned char 
 16611 ;;  i               3   55[BANK0 ] float 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;                  1    wreg      unsigned char 
 16614 ;; Registers used:
 16615 ;;		wreg, status,2, status,0, pclath, cstack
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;Total ram usage:        6 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; Hardware stack levels required when called:    5
 16628 ;; This function calls:
 16629 ;;		___awtoft
 16630 ;;		___ftadd
 16631 ;;		___ftdiv
 16632 ;;		___ftneg
 16633 ;;		___fttol
 16634 ;; This function is called by:
 16635 ;;		_DimmerIntr_Initialization
 16636 ;;		_setDimmerLights_Dimming
 16637 ;; This function uses a non-reentrant model
 16638 ;;
 16639                           
 16640                           
 16641                           ;psect for function _getDimmerLights_ValueToPercent
 16642  08A1                     _getDimmerLights_ValueToPercent:	
 16643                           
 16644                           ;incstack = 0
 16645                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16646                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16647  08A1  0020               	movlb	0	; select bank0
 16648  08A2  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16649                           
 16650                           ;Dimmer_B1.c: 1130: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 16651  08A3  3000               	movlw	0
 16652  08A4  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16653  08A5  301C               	movlw	28
 16654  08A6  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16655  08A7  3042               	movlw	66
 16656  08A8  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16657                           
 16658                           ;Dimmer_B1.c: 1131: i /= 100;
 16659  08A9  3000               	movlw	0
 16660  08AA  00A6               	movwf	___ftdiv@f2
 16661  08AB  30C8               	movlw	200
 16662  08AC  00A7               	movwf	___ftdiv@f2+1
 16663  08AD  3042               	movlw	66
 16664  08AE  00A8               	movwf	___ftdiv@f2+2
 16665  08AF  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16666  08B0  00A9               	movwf	___ftdiv@f1
 16667  08B1  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16668  08B2  00AA               	movwf	___ftdiv@f1+1
 16669  08B3  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16670  08B4  00AB               	movwf	___ftdiv@f1+2
 16671  08B5  318D  253C  3188   	fcall	___ftdiv
 16672  08B8  0020               	movlb	0	; select bank0
 16673  08B9  0826               	movf	?___ftdiv,w
 16674  08BA  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16675  08BB  0827               	movf	?___ftdiv+1,w
 16676  08BC  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16677  08BD  0828               	movf	?___ftdiv+2,w
 16678  08BE  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16679                           
 16680                           ;Dimmer_B1.c: 1133: return (char) (100 - ((((char)(75*0.55)) - value) / i));
 16681  08BF  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16682  08C0  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16683  08C1  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16684  08C2  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16685  08C3  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16686  08C4  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16687  08C5  1903               	skipnz
 16688  08C6  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16689  08C7  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16690  08C8  3E29               	addlw	41
 16691  08C9  00A0               	movwf	___awtoft@c
 16692  08CA  3000               	movlw	0
 16693  08CB  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16694  08CC  00A1               	movwf	___awtoft@c+1
 16695  08CD  319F  2729  3188   	fcall	___awtoft
 16696  08D0  0020               	movlb	0	; select bank0
 16697  08D1  0820               	movf	?___awtoft,w
 16698  08D2  00A9               	movwf	___ftdiv@f1
 16699  08D3  0821               	movf	?___awtoft+1,w
 16700  08D4  00AA               	movwf	___ftdiv@f1+1
 16701  08D5  0822               	movf	?___awtoft+2,w
 16702  08D6  00AB               	movwf	___ftdiv@f1+2
 16703  08D7  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16704  08D8  00A6               	movwf	___ftdiv@f2
 16705  08D9  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16706  08DA  00A7               	movwf	___ftdiv@f2+1
 16707  08DB  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16708  08DC  00A8               	movwf	___ftdiv@f2+2
 16709  08DD  318D  253C  3188   	fcall	___ftdiv
 16710  08E0  0020               	movlb	0	; select bank0
 16711  08E1  0826               	movf	?___ftdiv,w
 16712  08E2  00B6               	movwf	___ftneg@f1
 16713  08E3  0827               	movf	?___ftdiv+1,w
 16714  08E4  00B7               	movwf	___ftneg@f1+1
 16715  08E5  0828               	movf	?___ftdiv+2,w
 16716  08E6  00B8               	movwf	___ftneg@f1+2
 16717  08E7  319A  22C4  3188   	fcall	___ftneg
 16718  08EA  0020               	movlb	0	; select bank0
 16719  08EB  0836               	movf	?___ftneg,w
 16720  08EC  00BC               	movwf	___ftadd@f2
 16721  08ED  0837               	movf	?___ftneg+1,w
 16722  08EE  00BD               	movwf	___ftadd@f2+1
 16723  08EF  0838               	movf	?___ftneg+2,w
 16724  08F0  00BE               	movwf	___ftadd@f2+2
 16725  08F1  3000               	movlw	0
 16726  08F2  00B9               	movwf	___ftadd@f1
 16727  08F3  30C8               	movlw	200
 16728  08F4  00BA               	movwf	___ftadd@f1+1
 16729  08F5  3042               	movlw	66
 16730  08F6  00BB               	movwf	___ftadd@f1+2
 16731  08F7  3183  2364  3188   	fcall	___ftadd
 16732  08FA  0020               	movlb	0	; select bank0
 16733  08FB  0839               	movf	?___ftadd,w
 16734  08FC  00C6               	movwf	___fttol@f1
 16735  08FD  083A               	movf	?___ftadd+1,w
 16736  08FE  00C7               	movwf	___fttol@f1+1
 16737  08FF  083B               	movf	?___ftadd+2,w
 16738  0900  00C8               	movwf	___fttol@f1+2
 16739  0901  318C  2429         	fcall	___fttol
 16740  0903  0020               	movlb	0	; select bank0
 16741  0904  0846               	movf	?___fttol,w
 16742  0905  0008               	return
 16743  0906                     __end_of_getDimmerLights_ValueToPercent:	
 16744                           
 16745                           	psect	text116
 16746  083C                     __ptext116:	
 16747 ;; *************** function _getDimmerLights_PercentToValue *****************
 16748 ;; Defined at:
 16749 ;;		line 1106 in file "../src/Dimmer_B1.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;  value           1    wreg     unsigned char 
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;  value           1   54[BANK0 ] unsigned char 
 16754 ;;  i               3   55[BANK0 ] float 
 16755 ;; Return value:  Size  Location     Type
 16756 ;;                  1    wreg      unsigned char 
 16757 ;; Registers used:
 16758 ;;		wreg, status,2, status,0, pclath, cstack
 16759 ;; Tracked objects:
 16760 ;;		On entry : 0/0
 16761 ;;		On exit  : 0/0
 16762 ;;		Unchanged: 0/0
 16763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;Total ram usage:        6 bytes
 16769 ;; Hardware stack levels used:    1
 16770 ;; Hardware stack levels required when called:    5
 16771 ;; This function calls:
 16772 ;;		___awtoft
 16773 ;;		___ftadd
 16774 ;;		___ftdiv
 16775 ;;		___ftmul
 16776 ;;		___ftneg
 16777 ;;		___fttol
 16778 ;; This function is called by:
 16779 ;;		_DimmerIntr_Initialization
 16780 ;;		_setDimmerLights_OnOff
 16781 ;;		_setRFSW_AdjControl
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           
 16786                           ;psect for function _getDimmerLights_PercentToValue
 16787  083C                     _getDimmerLights_PercentToValue:	
 16788                           
 16789                           ;incstack = 0
 16790                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16791                           ;getDimmerLights_PercentToValue@value stored from wreg
 16792  083C  0020               	movlb	0	; select bank0
 16793  083D  00D6               	movwf	getDimmerLights_PercentToValue@value
 16794                           
 16795                           ;Dimmer_B1.c: 1114: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 16796  083E  3000               	movlw	0
 16797  083F  00D7               	movwf	getDimmerLights_PercentToValue@i
 16798  0840  301C               	movlw	28
 16799  0841  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 16800  0842  3042               	movlw	66
 16801  0843  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 16802                           
 16803                           ;Dimmer_B1.c: 1115: i /= 100;
 16804  0844  3000               	movlw	0
 16805  0845  00A6               	movwf	___ftdiv@f2
 16806  0846  30C8               	movlw	200
 16807  0847  00A7               	movwf	___ftdiv@f2+1
 16808  0848  3042               	movlw	66
 16809  0849  00A8               	movwf	___ftdiv@f2+2
 16810  084A  0857               	movf	getDimmerLights_PercentToValue@i,w
 16811  084B  00A9               	movwf	___ftdiv@f1
 16812  084C  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 16813  084D  00AA               	movwf	___ftdiv@f1+1
 16814  084E  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 16815  084F  00AB               	movwf	___ftdiv@f1+2
 16816  0850  318D  253C  3188   	fcall	___ftdiv
 16817  0853  0020               	movlb	0	; select bank0
 16818  0854  0826               	movf	?___ftdiv,w
 16819  0855  00D7               	movwf	getDimmerLights_PercentToValue@i
 16820  0856  0827               	movf	?___ftdiv+1,w
 16821  0857  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 16822  0858  0828               	movf	?___ftdiv+2,w
 16823  0859  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 16824                           
 16825                           ;Dimmer_B1.c: 1117: return (char) (((char)(75*0.55)) - ((100 - value) * i));
 16826  085A  0856               	movf	getDimmerLights_PercentToValue@value,w
 16827  085B  00D4               	movwf	??_getDimmerLights_PercentToValue
 16828  085C  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 16829  085D  09D4               	comf	??_getDimmerLights_PercentToValue,f
 16830  085E  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 16831  085F  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 16832  0860  1903               	skipnz
 16833  0861  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 16834  0862  0854               	movf	??_getDimmerLights_PercentToValue,w
 16835  0863  3E64               	addlw	100
 16836  0864  00A0               	movwf	___awtoft@c
 16837  0865  3000               	movlw	0
 16838  0866  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16839  0867  00A1               	movwf	___awtoft@c+1
 16840  0868  319F  2729  3188   	fcall	___awtoft
 16841  086B  0020               	movlb	0	; select bank0
 16842  086C  0820               	movf	?___awtoft,w
 16843  086D  00A9               	movwf	___ftmul@f2
 16844  086E  0821               	movf	?___awtoft+1,w
 16845  086F  00AA               	movwf	___ftmul@f2+1
 16846  0870  0822               	movf	?___awtoft+2,w
 16847  0871  00AB               	movwf	___ftmul@f2+2
 16848  0872  0857               	movf	getDimmerLights_PercentToValue@i,w
 16849  0873  00A6               	movwf	___ftmul@f1
 16850  0874  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 16851  0875  00A7               	movwf	___ftmul@f1+1
 16852  0876  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 16853  0877  00A8               	movwf	___ftmul@f1+2
 16854  0878  318E  2696  3188   	fcall	___ftmul
 16855  087B  0020               	movlb	0	; select bank0
 16856  087C  0826               	movf	?___ftmul,w
 16857  087D  00B6               	movwf	___ftneg@f1
 16858  087E  0827               	movf	?___ftmul+1,w
 16859  087F  00B7               	movwf	___ftneg@f1+1
 16860  0880  0828               	movf	?___ftmul+2,w
 16861  0881  00B8               	movwf	___ftneg@f1+2
 16862  0882  319A  22C4  3188   	fcall	___ftneg
 16863  0885  0020               	movlb	0	; select bank0
 16864  0886  0836               	movf	?___ftneg,w
 16865  0887  00BC               	movwf	___ftadd@f2
 16866  0888  0837               	movf	?___ftneg+1,w
 16867  0889  00BD               	movwf	___ftadd@f2+1
 16868  088A  0838               	movf	?___ftneg+2,w
 16869  088B  00BE               	movwf	___ftadd@f2+2
 16870  088C  3000               	movlw	0
 16871  088D  00B9               	movwf	___ftadd@f1
 16872  088E  3024               	movlw	36
 16873  088F  00BA               	movwf	___ftadd@f1+1
 16874  0890  3042               	movlw	66
 16875  0891  00BB               	movwf	___ftadd@f1+2
 16876  0892  3183  2364  3188   	fcall	___ftadd
 16877  0895  0020               	movlb	0	; select bank0
 16878  0896  0839               	movf	?___ftadd,w
 16879  0897  00C6               	movwf	___fttol@f1
 16880  0898  083A               	movf	?___ftadd+1,w
 16881  0899  00C7               	movwf	___fttol@f1+1
 16882  089A  083B               	movf	?___ftadd+2,w
 16883  089B  00C8               	movwf	___fttol@f1+2
 16884  089C  318C  2429         	fcall	___fttol
 16885  089E  0020               	movlb	0	; select bank0
 16886  089F  0846               	movf	?___fttol,w
 16887  08A0  0008               	return
 16888  08A1                     __end_of_getDimmerLights_PercentToValue:	
 16889                           
 16890                           	psect	text117
 16891  0C29                     __ptext117:	
 16892 ;; *************** function ___fttol *****************
 16893 ;; Defined at:
 16894 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16895 ;; Parameters:    Size  Location     Type
 16896 ;;  f1              3   38[BANK0 ] float 
 16897 ;; Auto vars:     Size  Location     Type
 16898 ;;  lval            4   47[BANK0 ] unsigned long 
 16899 ;;  exp1            1   51[BANK0 ] unsigned char 
 16900 ;;  sign1           1   46[BANK0 ] unsigned char 
 16901 ;; Return value:  Size  Location     Type
 16902 ;;                  4   38[BANK0 ] long 
 16903 ;; Registers used:
 16904 ;;		wreg, status,2, status,0
 16905 ;; Tracked objects:
 16906 ;;		On entry : 0/0
 16907 ;;		On exit  : 0/0
 16908 ;;		Unchanged: 0/0
 16909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;Total ram usage:       14 bytes
 16915 ;; Hardware stack levels used:    1
 16916 ;; Hardware stack levels required when called:    3
 16917 ;; This function calls:
 16918 ;;		Nothing
 16919 ;; This function is called by:
 16920 ;;		_getDimmerLights_PercentToValue
 16921 ;;		_getDimmerLights_ValueToPercent
 16922 ;; This function uses a non-reentrant model
 16923 ;;
 16924                           
 16925                           
 16926                           ;psect for function ___fttol
 16927  0C29                     ___fttol:	
 16928                           
 16929                           ;incstack = 0
 16930                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16931  0C29  0020               	movlb	0	; select bank0
 16932  0C2A  0846               	movf	___fttol@f1,w
 16933  0C2B  00CA               	movwf	??___fttol
 16934  0C2C  0847               	movf	___fttol@f1+1,w
 16935  0C2D  00CB               	movwf	??___fttol+1
 16936  0C2E  0848               	movf	___fttol@f1+2,w
 16937  0C2F  00CC               	movwf	??___fttol+2
 16938  0C30  1003               	clrc
 16939  0C31  0D4B               	rlf	??___fttol+1,w
 16940  0C32  0D4C               	rlf	??___fttol+2,w
 16941  0C33  00CD               	movwf	??___fttol+3
 16942  0C34  084D               	movf	??___fttol+3,w
 16943  0C35  00D3               	movwf	___fttol@exp1
 16944  0C36  08D3               	movf	___fttol@exp1,f
 16945  0C37  1D03               	skipz
 16946  0C38  2C42               	goto	l6522
 16947  0C39  3000               	movlw	0
 16948  0C3A  00C9               	movwf	?___fttol+3
 16949  0C3B  3000               	movlw	0
 16950  0C3C  00C8               	movwf	?___fttol+2
 16951  0C3D  3000               	movlw	0
 16952  0C3E  00C7               	movwf	?___fttol+1
 16953  0C3F  3000               	movlw	0
 16954  0C40  00C6               	movwf	?___fttol
 16955  0C41  0008               	return
 16956  0C42                     l6522:	
 16957  0C42  0846               	movf	___fttol@f1,w
 16958  0C43  00CA               	movwf	??___fttol
 16959  0C44  0847               	movf	___fttol@f1+1,w
 16960  0C45  00CB               	movwf	??___fttol+1
 16961  0C46  0848               	movf	___fttol@f1+2,w
 16962  0C47  00CC               	movwf	??___fttol+2
 16963  0C48  3017               	movlw	23
 16964  0C49                     u5655:	
 16965  0C49  36CC               	lsrf	??___fttol+2,f
 16966  0C4A  0CCB               	rrf	??___fttol+1,f
 16967  0C4B  0CCA               	rrf	??___fttol,f
 16968  0C4C  0B89               	decfsz	9,f
 16969  0C4D  2C49               	goto	u5655
 16970  0C4E  084A               	movf	??___fttol,w
 16971  0C4F  00CD               	movwf	??___fttol+3
 16972  0C50  084D               	movf	??___fttol+3,w
 16973  0C51  00CE               	movwf	___fttol@sign1
 16974  0C52  17C7               	bsf	___fttol@f1+1,7
 16975  0C53  30FF               	movlw	255
 16976  0C54  05C6               	andwf	___fttol@f1,f
 16977  0C55  30FF               	movlw	255
 16978  0C56  05C7               	andwf	___fttol@f1+1,f
 16979  0C57  3000               	movlw	0
 16980  0C58  05C8               	andwf	___fttol@f1+2,f
 16981  0C59  0846               	movf	___fttol@f1,w
 16982  0C5A  00CF               	movwf	___fttol@lval
 16983  0C5B  0847               	movf	___fttol@f1+1,w
 16984  0C5C  00D0               	movwf	___fttol@lval+1
 16985  0C5D  0848               	movf	___fttol@f1+2,w
 16986  0C5E  00D1               	movwf	___fttol@lval+2
 16987  0C5F  01D2               	clrf	___fttol@lval+3
 16988  0C60  308E               	movlw	142
 16989  0C61  02D3               	subwf	___fttol@exp1,f
 16990  0C62  1FD3               	btfss	___fttol@exp1,7
 16991  0C63  2C80               	goto	l6542
 16992  0C64  0853               	movf	___fttol@exp1,w
 16993  0C65  3A80               	xorlw	128
 16994  0C66  3E8F               	addlw	143
 16995  0C67  1803               	skipnc
 16996  0C68  2C72               	goto	l6540
 16997  0C69  3000               	movlw	0
 16998  0C6A  00C9               	movwf	?___fttol+3
 16999  0C6B  3000               	movlw	0
 17000  0C6C  00C8               	movwf	?___fttol+2
 17001  0C6D  3000               	movlw	0
 17002  0C6E  00C7               	movwf	?___fttol+1
 17003  0C6F  3000               	movlw	0
 17004  0C70  00C6               	movwf	?___fttol
 17005  0C71  0008               	return
 17006  0C72                     l6540:	
 17007  0C72  3001               	movlw	1
 17008  0C73                     u5685:	
 17009  0C73  36D2               	lsrf	___fttol@lval+3,f
 17010  0C74  0CD1               	rrf	___fttol@lval+2,f
 17011  0C75  0CD0               	rrf	___fttol@lval+1,f
 17012  0C76  0CCF               	rrf	___fttol@lval,f
 17013  0C77  0B89               	decfsz	9,f
 17014  0C78  2C73               	goto	u5685
 17015  0C79  3001               	movlw	1
 17016  0C7A  00CA               	movwf	??___fttol
 17017  0C7B  084A               	movf	??___fttol,w
 17018  0C7C  07D3               	addwf	___fttol@exp1,f
 17019  0C7D  1903               	btfsc	3,2
 17020  0C7E  2C99               	goto	l6552
 17021  0C7F  2C72               	goto	l6540
 17022  0C80                     l6542:	
 17023  0C80  3018               	movlw	24
 17024  0C81  0253               	subwf	___fttol@exp1,w
 17025  0C82  1C03               	skipc
 17026  0C83  2C96               	goto	l6550
 17027  0C84  3000               	movlw	0
 17028  0C85  00C9               	movwf	?___fttol+3
 17029  0C86  3000               	movlw	0
 17030  0C87  00C8               	movwf	?___fttol+2
 17031  0C88  3000               	movlw	0
 17032  0C89  00C7               	movwf	?___fttol+1
 17033  0C8A  3000               	movlw	0
 17034  0C8B  00C6               	movwf	?___fttol
 17035  0C8C  0008               	return
 17036  0C8D                     l6548:	
 17037  0C8D  3001               	movlw	1
 17038  0C8E                     u5715:	
 17039  0C8E  35CF               	lslf	___fttol@lval,f
 17040  0C8F  0DD0               	rlf	___fttol@lval+1,f
 17041  0C90  0DD1               	rlf	___fttol@lval+2,f
 17042  0C91  0DD2               	rlf	___fttol@lval+3,f
 17043  0C92  0B89               	decfsz	9,f
 17044  0C93  2C8E               	goto	u5715
 17045  0C94  3001               	movlw	1
 17046  0C95  02D3               	subwf	___fttol@exp1,f
 17047  0C96                     l6550:	
 17048  0C96  08D3               	movf	___fttol@exp1,f
 17049  0C97  1D03               	skipz
 17050  0C98  2C8D               	goto	l6548
 17051  0C99                     l6552:	
 17052  0C99  084E               	movf	___fttol@sign1,w
 17053  0C9A  1903               	btfsc	3,2
 17054  0C9B  2CA7               	goto	l6556
 17055  0C9C  09CF               	comf	___fttol@lval,f
 17056  0C9D  09D0               	comf	___fttol@lval+1,f
 17057  0C9E  09D1               	comf	___fttol@lval+2,f
 17058  0C9F  09D2               	comf	___fttol@lval+3,f
 17059  0CA0  0ACF               	incf	___fttol@lval,f
 17060  0CA1  1903               	skipnz
 17061  0CA2  0AD0               	incf	___fttol@lval+1,f
 17062  0CA3  1903               	skipnz
 17063  0CA4  0AD1               	incf	___fttol@lval+2,f
 17064  0CA5  1903               	skipnz
 17065  0CA6  0AD2               	incf	___fttol@lval+3,f
 17066  0CA7                     l6556:	
 17067  0CA7  0852               	movf	___fttol@lval+3,w
 17068  0CA8  00C9               	movwf	?___fttol+3
 17069  0CA9  0851               	movf	___fttol@lval+2,w
 17070  0CAA  00C8               	movwf	?___fttol+2
 17071  0CAB  0850               	movf	___fttol@lval+1,w
 17072  0CAC  00C7               	movwf	?___fttol+1
 17073  0CAD  084F               	movf	___fttol@lval,w
 17074  0CAE  00C6               	movwf	?___fttol
 17075  0CAF  0008               	return
 17076  0CB0                     __end_of___fttol:	
 17077                           
 17078                           	psect	text118
 17079  1AC4                     __ptext118:	
 17080 ;; *************** function ___ftneg *****************
 17081 ;; Defined at:
 17082 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17083 ;; Parameters:    Size  Location     Type
 17084 ;;  f1              3   22[BANK0 ] float 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;		None
 17087 ;; Return value:  Size  Location     Type
 17088 ;;                  3   22[BANK0 ] float 
 17089 ;; Registers used:
 17090 ;;		wreg
 17091 ;; Tracked objects:
 17092 ;;		On entry : 0/0
 17093 ;;		On exit  : 0/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17096 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;Total ram usage:        3 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    3
 17103 ;; This function calls:
 17104 ;;		Nothing
 17105 ;; This function is called by:
 17106 ;;		_getDimmerLights_PercentToValue
 17107 ;;		_getDimmerLights_ValueToPercent
 17108 ;; This function uses a non-reentrant model
 17109 ;;
 17110                           
 17111                           
 17112                           ;psect for function ___ftneg
 17113  1AC4                     ___ftneg:	
 17114                           
 17115                           ;incstack = 0
 17116                           ; Regs used in ___ftneg: [wreg]
 17117  1AC4  0020               	movlb	0	; select bank0
 17118  1AC5  0838               	movf	___ftneg@f1+2,w
 17119  1AC6  0437               	iorwf	___ftneg@f1+1,w
 17120  1AC7  0436               	iorwf	___ftneg@f1,w
 17121  1AC8  1903               	skipnz
 17122  1AC9  0008               	return
 17123  1ACA  3080               	movlw	128
 17124  1ACB  06B8               	xorwf	___ftneg@f1+2,f
 17125  1ACC  0008               	return
 17126  1ACD                     __end_of___ftneg:	
 17127                           
 17128                           	psect	text119
 17129  0E96                     __ptext119:	
 17130 ;; *************** function ___ftmul *****************
 17131 ;; Defined at:
 17132 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17133 ;; Parameters:    Size  Location     Type
 17134 ;;  f1              3    6[BANK0 ] float 
 17135 ;;  f2              3    9[BANK0 ] float 
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 17138 ;;  sign            1   21[BANK0 ] unsigned char 
 17139 ;;  cntr            1   20[BANK0 ] unsigned char 
 17140 ;;  exp             1   16[BANK0 ] unsigned char 
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  3    6[BANK0 ] float 
 17143 ;; Registers used:
 17144 ;;		wreg, status,2, status,0, pclath, cstack
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17150 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17151 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;Total ram usage:       16 bytes
 17155 ;; Hardware stack levels used:    1
 17156 ;; Hardware stack levels required when called:    4
 17157 ;; This function calls:
 17158 ;;		___ftpack
 17159 ;; This function is called by:
 17160 ;;		_getDimmerLights_PercentToValue
 17161 ;; This function uses a non-reentrant model
 17162 ;;
 17163                           
 17164                           
 17165                           ;psect for function ___ftmul
 17166  0E96                     ___ftmul:	
 17167                           
 17168                           ;incstack = 0
 17169                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17170  0E96  0020               	movlb	0	; select bank0
 17171  0E97  0826               	movf	___ftmul@f1,w
 17172  0E98  00AC               	movwf	??___ftmul
 17173  0E99  0827               	movf	___ftmul@f1+1,w
 17174  0E9A  00AD               	movwf	??___ftmul+1
 17175  0E9B  0828               	movf	___ftmul@f1+2,w
 17176  0E9C  00AE               	movwf	??___ftmul+2
 17177  0E9D  1003               	clrc
 17178  0E9E  0D2D               	rlf	??___ftmul+1,w
 17179  0E9F  0D2E               	rlf	??___ftmul+2,w
 17180  0EA0  00AF               	movwf	??___ftmul+3
 17181  0EA1  082F               	movf	??___ftmul+3,w
 17182  0EA2  00B0               	movwf	___ftmul@exp
 17183  0EA3  08B0               	movf	___ftmul@exp,f
 17184  0EA4  1D03               	skipz
 17185  0EA5  2EAD               	goto	l6464
 17186  0EA6  3000               	movlw	0
 17187  0EA7  00A6               	movwf	?___ftmul
 17188  0EA8  3000               	movlw	0
 17189  0EA9  00A7               	movwf	?___ftmul+1
 17190  0EAA  3000               	movlw	0
 17191  0EAB  00A8               	movwf	?___ftmul+2
 17192  0EAC  0008               	return
 17193  0EAD                     l6464:	
 17194  0EAD  0829               	movf	___ftmul@f2,w
 17195  0EAE  00AC               	movwf	??___ftmul
 17196  0EAF  082A               	movf	___ftmul@f2+1,w
 17197  0EB0  00AD               	movwf	??___ftmul+1
 17198  0EB1  082B               	movf	___ftmul@f2+2,w
 17199  0EB2  00AE               	movwf	??___ftmul+2
 17200  0EB3  1003               	clrc
 17201  0EB4  0D2D               	rlf	??___ftmul+1,w
 17202  0EB5  0D2E               	rlf	??___ftmul+2,w
 17203  0EB6  00AF               	movwf	??___ftmul+3
 17204  0EB7  082F               	movf	??___ftmul+3,w
 17205  0EB8  00B5               	movwf	___ftmul@sign
 17206  0EB9  08B5               	movf	___ftmul@sign,f
 17207  0EBA  1D03               	skipz
 17208  0EBB  2EC3               	goto	l6470
 17209  0EBC  3000               	movlw	0
 17210  0EBD  00A6               	movwf	?___ftmul
 17211  0EBE  3000               	movlw	0
 17212  0EBF  00A7               	movwf	?___ftmul+1
 17213  0EC0  3000               	movlw	0
 17214  0EC1  00A8               	movwf	?___ftmul+2
 17215  0EC2  0008               	return
 17216  0EC3                     l6470:	
 17217  0EC3  0835               	movf	___ftmul@sign,w
 17218  0EC4  3E7B               	addlw	123
 17219  0EC5  00AC               	movwf	??___ftmul
 17220  0EC6  082C               	movf	??___ftmul,w
 17221  0EC7  07B0               	addwf	___ftmul@exp,f
 17222  0EC8  0826               	movf	___ftmul@f1,w
 17223  0EC9  00AC               	movwf	??___ftmul
 17224  0ECA  0827               	movf	___ftmul@f1+1,w
 17225  0ECB  00AD               	movwf	??___ftmul+1
 17226  0ECC  0828               	movf	___ftmul@f1+2,w
 17227  0ECD  00AE               	movwf	??___ftmul+2
 17228  0ECE  3010               	movlw	16
 17229  0ECF                     u5535:	
 17230  0ECF  36AE               	lsrf	??___ftmul+2,f
 17231  0ED0  0CAD               	rrf	??___ftmul+1,f
 17232  0ED1  0CAC               	rrf	??___ftmul,f
 17233  0ED2  0B89               	decfsz	9,f
 17234  0ED3  2ECF               	goto	u5535
 17235  0ED4  082C               	movf	??___ftmul,w
 17236  0ED5  00AF               	movwf	??___ftmul+3
 17237  0ED6  082F               	movf	??___ftmul+3,w
 17238  0ED7  00B5               	movwf	___ftmul@sign
 17239  0ED8  0829               	movf	___ftmul@f2,w
 17240  0ED9  00AC               	movwf	??___ftmul
 17241  0EDA  082A               	movf	___ftmul@f2+1,w
 17242  0EDB  00AD               	movwf	??___ftmul+1
 17243  0EDC  082B               	movf	___ftmul@f2+2,w
 17244  0EDD  00AE               	movwf	??___ftmul+2
 17245  0EDE  3010               	movlw	16
 17246  0EDF                     u5545:	
 17247  0EDF  36AE               	lsrf	??___ftmul+2,f
 17248  0EE0  0CAD               	rrf	??___ftmul+1,f
 17249  0EE1  0CAC               	rrf	??___ftmul,f
 17250  0EE2  0B89               	decfsz	9,f
 17251  0EE3  2EDF               	goto	u5545
 17252  0EE4  082C               	movf	??___ftmul,w
 17253  0EE5  00AF               	movwf	??___ftmul+3
 17254  0EE6  082F               	movf	??___ftmul+3,w
 17255  0EE7  06B5               	xorwf	___ftmul@sign,f
 17256  0EE8  3080               	movlw	128
 17257  0EE9  00AC               	movwf	??___ftmul
 17258  0EEA  082C               	movf	??___ftmul,w
 17259  0EEB  05B5               	andwf	___ftmul@sign,f
 17260  0EEC  17A7               	bsf	___ftmul@f1+1,7
 17261  0EED  17AA               	bsf	___ftmul@f2+1,7
 17262  0EEE  30FF               	movlw	255
 17263  0EEF  05A9               	andwf	___ftmul@f2,f
 17264  0EF0  30FF               	movlw	255
 17265  0EF1  05AA               	andwf	___ftmul@f2+1,f
 17266  0EF2  3000               	movlw	0
 17267  0EF3  05AB               	andwf	___ftmul@f2+2,f
 17268  0EF4  3000               	movlw	0
 17269  0EF5  00B1               	movwf	___ftmul@f3_as_product
 17270  0EF6  3000               	movlw	0
 17271  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 17272  0EF8  3000               	movlw	0
 17273  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 17274  0EFA  3007               	movlw	7
 17275  0EFB  00AC               	movwf	??___ftmul
 17276  0EFC  082C               	movf	??___ftmul,w
 17277  0EFD  00B4               	movwf	___ftmul@cntr
 17278  0EFE                     l6482:	
 17279  0EFE  1C26               	btfss	___ftmul@f1,0
 17280  0EFF  2F06               	goto	l6486
 17281  0F00  0829               	movf	___ftmul@f2,w
 17282  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 17283  0F02  082A               	movf	___ftmul@f2+1,w
 17284  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 17285  0F04  082B               	movf	___ftmul@f2+2,w
 17286  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 17287  0F06                     l6486:	
 17288  0F06  3001               	movlw	1
 17289  0F07                     u5565:	
 17290  0F07  36A8               	lsrf	___ftmul@f1+2,f
 17291  0F08  0CA7               	rrf	___ftmul@f1+1,f
 17292  0F09  0CA6               	rrf	___ftmul@f1,f
 17293  0F0A  0B89               	decfsz	9,f
 17294  0F0B  2F07               	goto	u5565
 17295  0F0C  3001               	movlw	1
 17296  0F0D                     u5575:	
 17297  0F0D  35A9               	lslf	___ftmul@f2,f
 17298  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 17299  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 17300  0F10  0B89               	decfsz	9,f
 17301  0F11  2F0D               	goto	u5575
 17302  0F12  3001               	movlw	1
 17303  0F13  02B4               	subwf	___ftmul@cntr,f
 17304  0F14  1D03               	btfss	3,2
 17305  0F15  2EFE               	goto	l6482
 17306  0F16  3009               	movlw	9
 17307  0F17  00AC               	movwf	??___ftmul
 17308  0F18  082C               	movf	??___ftmul,w
 17309  0F19  00B4               	movwf	___ftmul@cntr
 17310  0F1A                     l6494:	
 17311  0F1A  1C26               	btfss	___ftmul@f1,0
 17312  0F1B  2F22               	goto	l6498
 17313  0F1C  0829               	movf	___ftmul@f2,w
 17314  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 17315  0F1E  082A               	movf	___ftmul@f2+1,w
 17316  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 17317  0F20  082B               	movf	___ftmul@f2+2,w
 17318  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 17319  0F22                     l6498:	
 17320  0F22  3001               	movlw	1
 17321  0F23                     u5605:	
 17322  0F23  36A8               	lsrf	___ftmul@f1+2,f
 17323  0F24  0CA7               	rrf	___ftmul@f1+1,f
 17324  0F25  0CA6               	rrf	___ftmul@f1,f
 17325  0F26  0B89               	decfsz	9,f
 17326  0F27  2F23               	goto	u5605
 17327  0F28  3001               	movlw	1
 17328  0F29                     u5615:	
 17329  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 17330  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 17331  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 17332  0F2C  0B89               	decfsz	9,f
 17333  0F2D  2F29               	goto	u5615
 17334  0F2E  3001               	movlw	1
 17335  0F2F  02B4               	subwf	___ftmul@cntr,f
 17336  0F30  1D03               	btfss	3,2
 17337  0F31  2F1A               	goto	l6494
 17338  0F32  0831               	movf	___ftmul@f3_as_product,w
 17339  0F33  00F2               	movwf	___ftpack@arg
 17340  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 17341  0F35  00F3               	movwf	___ftpack@arg+1
 17342  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 17343  0F37  00F4               	movwf	___ftpack@arg+2
 17344  0F38  0830               	movf	___ftmul@exp,w
 17345  0F39  00AC               	movwf	??___ftmul
 17346  0F3A  082C               	movf	??___ftmul,w
 17347  0F3B  00F5               	movwf	___ftpack@exp
 17348  0F3C  0835               	movf	___ftmul@sign,w
 17349  0F3D  00AD               	movwf	??___ftmul+1
 17350  0F3E  082D               	movf	??___ftmul+1,w
 17351  0F3F  00F6               	movwf	___ftpack@sign
 17352  0F40  3196  26DB         	fcall	___ftpack
 17353  0F42  0872               	movf	?___ftpack,w
 17354  0F43  0020               	movlb	0	; select bank0
 17355  0F44  00A6               	movwf	?___ftmul
 17356  0F45  0873               	movf	?___ftpack+1,w
 17357  0F46  00A7               	movwf	?___ftmul+1
 17358  0F47  0874               	movf	?___ftpack+2,w
 17359  0F48  00A8               	movwf	?___ftmul+2
 17360  0F49  0008               	return
 17361  0F4A                     __end_of___ftmul:	
 17362                           
 17363                           	psect	text120
 17364  0D3C                     __ptext120:	
 17365 ;; *************** function ___ftdiv *****************
 17366 ;; Defined at:
 17367 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17368 ;; Parameters:    Size  Location     Type
 17369 ;;  f2              3    6[BANK0 ] float 
 17370 ;;  f1              3    9[BANK0 ] float 
 17371 ;; Auto vars:     Size  Location     Type
 17372 ;;  f3              3   17[BANK0 ] float 
 17373 ;;  sign            1   21[BANK0 ] unsigned char 
 17374 ;;  exp             1   20[BANK0 ] unsigned char 
 17375 ;;  cntr            1   16[BANK0 ] unsigned char 
 17376 ;; Return value:  Size  Location     Type
 17377 ;;                  3    6[BANK0 ] float 
 17378 ;; Registers used:
 17379 ;;		wreg, status,2, status,0, pclath, cstack
 17380 ;; Tracked objects:
 17381 ;;		On entry : 0/0
 17382 ;;		On exit  : 0/0
 17383 ;;		Unchanged: 0/0
 17384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17385 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17386 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17387 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17388 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;Total ram usage:       16 bytes
 17390 ;; Hardware stack levels used:    1
 17391 ;; Hardware stack levels required when called:    4
 17392 ;; This function calls:
 17393 ;;		___ftpack
 17394 ;; This function is called by:
 17395 ;;		_getDimmerLights_PercentToValue
 17396 ;;		_getDimmerLights_ValueToPercent
 17397 ;; This function uses a non-reentrant model
 17398 ;;
 17399                           
 17400                           
 17401                           ;psect for function ___ftdiv
 17402  0D3C                     ___ftdiv:	
 17403                           
 17404                           ;incstack = 0
 17405                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17406  0D3C  0020               	movlb	0	; select bank0
 17407  0D3D  0829               	movf	___ftdiv@f1,w
 17408  0D3E  00AC               	movwf	??___ftdiv
 17409  0D3F  082A               	movf	___ftdiv@f1+1,w
 17410  0D40  00AD               	movwf	??___ftdiv+1
 17411  0D41  082B               	movf	___ftdiv@f1+2,w
 17412  0D42  00AE               	movwf	??___ftdiv+2
 17413  0D43  1003               	clrc
 17414  0D44  0D2D               	rlf	??___ftdiv+1,w
 17415  0D45  0D2E               	rlf	??___ftdiv+2,w
 17416  0D46  00AF               	movwf	??___ftdiv+3
 17417  0D47  082F               	movf	??___ftdiv+3,w
 17418  0D48  00B4               	movwf	___ftdiv@exp
 17419  0D49  08B4               	movf	___ftdiv@exp,f
 17420  0D4A  1D03               	skipz
 17421  0D4B  2D53               	goto	l6422
 17422  0D4C  3000               	movlw	0
 17423  0D4D  00A6               	movwf	?___ftdiv
 17424  0D4E  3000               	movlw	0
 17425  0D4F  00A7               	movwf	?___ftdiv+1
 17426  0D50  3000               	movlw	0
 17427  0D51  00A8               	movwf	?___ftdiv+2
 17428  0D52  0008               	return
 17429  0D53                     l6422:	
 17430  0D53  0826               	movf	___ftdiv@f2,w
 17431  0D54  00AC               	movwf	??___ftdiv
 17432  0D55  0827               	movf	___ftdiv@f2+1,w
 17433  0D56  00AD               	movwf	??___ftdiv+1
 17434  0D57  0828               	movf	___ftdiv@f2+2,w
 17435  0D58  00AE               	movwf	??___ftdiv+2
 17436  0D59  1003               	clrc
 17437  0D5A  0D2D               	rlf	??___ftdiv+1,w
 17438  0D5B  0D2E               	rlf	??___ftdiv+2,w
 17439  0D5C  00AF               	movwf	??___ftdiv+3
 17440  0D5D  082F               	movf	??___ftdiv+3,w
 17441  0D5E  00B5               	movwf	___ftdiv@sign
 17442  0D5F  08B5               	movf	___ftdiv@sign,f
 17443  0D60  1D03               	skipz
 17444  0D61  2D69               	goto	l6428
 17445  0D62  3000               	movlw	0
 17446  0D63  00A6               	movwf	?___ftdiv
 17447  0D64  3000               	movlw	0
 17448  0D65  00A7               	movwf	?___ftdiv+1
 17449  0D66  3000               	movlw	0
 17450  0D67  00A8               	movwf	?___ftdiv+2
 17451  0D68  0008               	return
 17452  0D69                     l6428:	
 17453  0D69  3000               	movlw	0
 17454  0D6A  00B1               	movwf	___ftdiv@f3
 17455  0D6B  3000               	movlw	0
 17456  0D6C  00B2               	movwf	___ftdiv@f3+1
 17457  0D6D  3000               	movlw	0
 17458  0D6E  00B3               	movwf	___ftdiv@f3+2
 17459  0D6F  3089               	movlw	137
 17460  0D70  0735               	addwf	___ftdiv@sign,w
 17461  0D71  00AC               	movwf	??___ftdiv
 17462  0D72  082C               	movf	??___ftdiv,w
 17463  0D73  02B4               	subwf	___ftdiv@exp,f
 17464  0D74  0829               	movf	___ftdiv@f1,w
 17465  0D75  00AC               	movwf	??___ftdiv
 17466  0D76  082A               	movf	___ftdiv@f1+1,w
 17467  0D77  00AD               	movwf	??___ftdiv+1
 17468  0D78  082B               	movf	___ftdiv@f1+2,w
 17469  0D79  00AE               	movwf	??___ftdiv+2
 17470  0D7A  3010               	movlw	16
 17471  0D7B                     u5455:	
 17472  0D7B  36AE               	lsrf	??___ftdiv+2,f
 17473  0D7C  0CAD               	rrf	??___ftdiv+1,f
 17474  0D7D  0CAC               	rrf	??___ftdiv,f
 17475  0D7E  0B89               	decfsz	9,f
 17476  0D7F  2D7B               	goto	u5455
 17477  0D80  082C               	movf	??___ftdiv,w
 17478  0D81  00AF               	movwf	??___ftdiv+3
 17479  0D82  082F               	movf	??___ftdiv+3,w
 17480  0D83  00B5               	movwf	___ftdiv@sign
 17481  0D84  0826               	movf	___ftdiv@f2,w
 17482  0D85  00AC               	movwf	??___ftdiv
 17483  0D86  0827               	movf	___ftdiv@f2+1,w
 17484  0D87  00AD               	movwf	??___ftdiv+1
 17485  0D88  0828               	movf	___ftdiv@f2+2,w
 17486  0D89  00AE               	movwf	??___ftdiv+2
 17487  0D8A  3010               	movlw	16
 17488  0D8B                     u5465:	
 17489  0D8B  36AE               	lsrf	??___ftdiv+2,f
 17490  0D8C  0CAD               	rrf	??___ftdiv+1,f
 17491  0D8D  0CAC               	rrf	??___ftdiv,f
 17492  0D8E  0B89               	decfsz	9,f
 17493  0D8F  2D8B               	goto	u5465
 17494  0D90  082C               	movf	??___ftdiv,w
 17495  0D91  00AF               	movwf	??___ftdiv+3
 17496  0D92  082F               	movf	??___ftdiv+3,w
 17497  0D93  06B5               	xorwf	___ftdiv@sign,f
 17498  0D94  3080               	movlw	128
 17499  0D95  00AC               	movwf	??___ftdiv
 17500  0D96  082C               	movf	??___ftdiv,w
 17501  0D97  05B5               	andwf	___ftdiv@sign,f
 17502  0D98  17AA               	bsf	___ftdiv@f1+1,7
 17503  0D99  30FF               	movlw	255
 17504  0D9A  05A9               	andwf	___ftdiv@f1,f
 17505  0D9B  30FF               	movlw	255
 17506  0D9C  05AA               	andwf	___ftdiv@f1+1,f
 17507  0D9D  3000               	movlw	0
 17508  0D9E  05AB               	andwf	___ftdiv@f1+2,f
 17509  0D9F  17A7               	bsf	___ftdiv@f2+1,7
 17510  0DA0  30FF               	movlw	255
 17511  0DA1  05A6               	andwf	___ftdiv@f2,f
 17512  0DA2  30FF               	movlw	255
 17513  0DA3  05A7               	andwf	___ftdiv@f2+1,f
 17514  0DA4  3000               	movlw	0
 17515  0DA5  05A8               	andwf	___ftdiv@f2+2,f
 17516  0DA6  3018               	movlw	24
 17517  0DA7  00AC               	movwf	??___ftdiv
 17518  0DA8  082C               	movf	??___ftdiv,w
 17519  0DA9  00B0               	movwf	___ftdiv@cntr
 17520  0DAA                     l6442:	
 17521  0DAA  3001               	movlw	1
 17522  0DAB                     u5475:	
 17523  0DAB  35B1               	lslf	___ftdiv@f3,f
 17524  0DAC  0DB2               	rlf	___ftdiv@f3+1,f
 17525  0DAD  0DB3               	rlf	___ftdiv@f3+2,f
 17526  0DAE  0B89               	decfsz	9,f
 17527  0DAF  2DAB               	goto	u5475
 17528  0DB0  0828               	movf	___ftdiv@f2+2,w
 17529  0DB1  022B               	subwf	___ftdiv@f1+2,w
 17530  0DB2  1D03               	skipz
 17531  0DB3  2DBA               	goto	u5485
 17532  0DB4  0827               	movf	___ftdiv@f2+1,w
 17533  0DB5  022A               	subwf	___ftdiv@f1+1,w
 17534  0DB6  1D03               	skipz
 17535  0DB7  2DBA               	goto	u5485
 17536  0DB8  0826               	movf	___ftdiv@f2,w
 17537  0DB9  0229               	subwf	___ftdiv@f1,w
 17538  0DBA                     u5485:	
 17539  0DBA  1C03               	skipc
 17540  0DBB  2DC3               	goto	l6450
 17541  0DBC  0826               	movf	___ftdiv@f2,w
 17542  0DBD  02A9               	subwf	___ftdiv@f1,f
 17543  0DBE  0827               	movf	___ftdiv@f2+1,w
 17544  0DBF  3BAA               	subwfb	___ftdiv@f1+1,f
 17545  0DC0  0828               	movf	___ftdiv@f2+2,w
 17546  0DC1  3BAB               	subwfb	___ftdiv@f1+2,f
 17547  0DC2  1431               	bsf	___ftdiv@f3,0
 17548  0DC3                     l6450:	
 17549  0DC3  3001               	movlw	1
 17550  0DC4                     u5495:	
 17551  0DC4  35A9               	lslf	___ftdiv@f1,f
 17552  0DC5  0DAA               	rlf	___ftdiv@f1+1,f
 17553  0DC6  0DAB               	rlf	___ftdiv@f1+2,f
 17554  0DC7  0B89               	decfsz	9,f
 17555  0DC8  2DC4               	goto	u5495
 17556  0DC9  3001               	movlw	1
 17557  0DCA  02B0               	subwf	___ftdiv@cntr,f
 17558  0DCB  1D03               	btfss	3,2
 17559  0DCC  2DAA               	goto	l6442
 17560  0DCD  0831               	movf	___ftdiv@f3,w
 17561  0DCE  00F2               	movwf	___ftpack@arg
 17562  0DCF  0832               	movf	___ftdiv@f3+1,w
 17563  0DD0  00F3               	movwf	___ftpack@arg+1
 17564  0DD1  0833               	movf	___ftdiv@f3+2,w
 17565  0DD2  00F4               	movwf	___ftpack@arg+2
 17566  0DD3  0834               	movf	___ftdiv@exp,w
 17567  0DD4  00AC               	movwf	??___ftdiv
 17568  0DD5  082C               	movf	??___ftdiv,w
 17569  0DD6  00F5               	movwf	___ftpack@exp
 17570  0DD7  0835               	movf	___ftdiv@sign,w
 17571  0DD8  00AD               	movwf	??___ftdiv+1
 17572  0DD9  082D               	movf	??___ftdiv+1,w
 17573  0DDA  00F6               	movwf	___ftpack@sign
 17574  0DDB  3196  26DB         	fcall	___ftpack
 17575  0DDD  0872               	movf	?___ftpack,w
 17576  0DDE  0020               	movlb	0	; select bank0
 17577  0DDF  00A6               	movwf	?___ftdiv
 17578  0DE0  0873               	movf	?___ftpack+1,w
 17579  0DE1  00A7               	movwf	?___ftdiv+1
 17580  0DE2  0874               	movf	?___ftpack+2,w
 17581  0DE3  00A8               	movwf	?___ftdiv+2
 17582  0DE4  0008               	return
 17583  0DE5                     __end_of___ftdiv:	
 17584                           
 17585                           	psect	text121
 17586  0364                     __ptext121:	
 17587 ;; *************** function ___ftadd *****************
 17588 ;; Defined at:
 17589 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17590 ;; Parameters:    Size  Location     Type
 17591 ;;  f1              3   25[BANK0 ] float 
 17592 ;;  f2              3   28[BANK0 ] float 
 17593 ;; Auto vars:     Size  Location     Type
 17594 ;;  exp1            1   37[BANK0 ] unsigned char 
 17595 ;;  exp2            1   36[BANK0 ] unsigned char 
 17596 ;;  sign            1   35[BANK0 ] unsigned char 
 17597 ;; Return value:  Size  Location     Type
 17598 ;;                  3   25[BANK0 ] float 
 17599 ;; Registers used:
 17600 ;;		wreg, status,2, status,0, pclath, cstack
 17601 ;; Tracked objects:
 17602 ;;		On entry : 0/0
 17603 ;;		On exit  : 0/0
 17604 ;;		Unchanged: 0/0
 17605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17606 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17610 ;;Total ram usage:       13 bytes
 17611 ;; Hardware stack levels used:    1
 17612 ;; Hardware stack levels required when called:    4
 17613 ;; This function calls:
 17614 ;;		___ftpack
 17615 ;; This function is called by:
 17616 ;;		_getDimmerLights_PercentToValue
 17617 ;;		_getDimmerLights_ValueToPercent
 17618 ;; This function uses a non-reentrant model
 17619 ;;
 17620                           
 17621                           
 17622                           ;psect for function ___ftadd
 17623  0364                     ___ftadd:	
 17624                           
 17625                           ;incstack = 0
 17626                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17627  0364  0020               	movlb	0	; select bank0
 17628  0365  0839               	movf	___ftadd@f1,w
 17629  0366  00BF               	movwf	??___ftadd
 17630  0367  083A               	movf	___ftadd@f1+1,w
 17631  0368  00C0               	movwf	??___ftadd+1
 17632  0369  083B               	movf	___ftadd@f1+2,w
 17633  036A  00C1               	movwf	??___ftadd+2
 17634  036B  1003               	clrc
 17635  036C  0D40               	rlf	??___ftadd+1,w
 17636  036D  0D41               	rlf	??___ftadd+2,w
 17637  036E  00C2               	movwf	??___ftadd+3
 17638  036F  0842               	movf	??___ftadd+3,w
 17639  0370  00C5               	movwf	___ftadd@exp1
 17640  0371  083C               	movf	___ftadd@f2,w
 17641  0372  00BF               	movwf	??___ftadd
 17642  0373  083D               	movf	___ftadd@f2+1,w
 17643  0374  00C0               	movwf	??___ftadd+1
 17644  0375  083E               	movf	___ftadd@f2+2,w
 17645  0376  00C1               	movwf	??___ftadd+2
 17646  0377  1003               	clrc
 17647  0378  0D40               	rlf	??___ftadd+1,w
 17648  0379  0D41               	rlf	??___ftadd+2,w
 17649  037A  00C2               	movwf	??___ftadd+3
 17650  037B  0842               	movf	??___ftadd+3,w
 17651  037C  00C4               	movwf	___ftadd@exp2
 17652  037D  0845               	movf	___ftadd@exp1,w
 17653  037E  1903               	btfsc	3,2
 17654  037F  2B8C               	goto	l6352
 17655  0380  0844               	movf	___ftadd@exp2,w
 17656  0381  0245               	subwf	___ftadd@exp1,w
 17657  0382  1803               	skipnc
 17658  0383  2B93               	goto	l6356
 17659  0384  0345               	decf	___ftadd@exp1,w
 17660  0385  3AFF               	xorlw	255
 17661  0386  0744               	addwf	___ftadd@exp2,w
 17662  0387  00BF               	movwf	??___ftadd
 17663  0388  3019               	movlw	25
 17664  0389  023F               	subwf	??___ftadd,w
 17665  038A  1C03               	skipc
 17666  038B  2B93               	goto	l6356
 17667  038C                     l6352:	
 17668  038C  083C               	movf	___ftadd@f2,w
 17669  038D  00B9               	movwf	?___ftadd
 17670  038E  083D               	movf	___ftadd@f2+1,w
 17671  038F  00BA               	movwf	?___ftadd+1
 17672  0390  083E               	movf	___ftadd@f2+2,w
 17673  0391  00BB               	movwf	?___ftadd+2
 17674  0392  0008               	return
 17675  0393                     l6356:	
 17676  0393  0844               	movf	___ftadd@exp2,w
 17677  0394  1903               	btfsc	3,2
 17678  0395  0008               	return
 17679  0396  0845               	movf	___ftadd@exp1,w
 17680  0397  0244               	subwf	___ftadd@exp2,w
 17681  0398  1803               	skipnc
 17682  0399  2BA2               	goto	l6362
 17683  039A  0344               	decf	___ftadd@exp2,w
 17684  039B  3AFF               	xorlw	255
 17685  039C  0745               	addwf	___ftadd@exp1,w
 17686  039D  00BF               	movwf	??___ftadd
 17687  039E  3019               	movlw	25
 17688  039F  023F               	subwf	??___ftadd,w
 17689  03A0  1803               	btfsc	3,0
 17690  03A1  0008               	return
 17691  03A2                     l6362:	
 17692  03A2  3006               	movlw	6
 17693  03A3  00BF               	movwf	??___ftadd
 17694  03A4  083F               	movf	??___ftadd,w
 17695  03A5  00C3               	movwf	___ftadd@sign
 17696  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 17697  03A7  17C3               	bsf	___ftadd@sign,7
 17698  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 17699  03A9  1743               	bsf	___ftadd@sign,6
 17700  03AA  17BA               	bsf	___ftadd@f1+1,7
 17701  03AB  30FF               	movlw	255
 17702  03AC  05B9               	andwf	___ftadd@f1,f
 17703  03AD  30FF               	movlw	255
 17704  03AE  05BA               	andwf	___ftadd@f1+1,f
 17705  03AF  3000               	movlw	0
 17706  03B0  05BB               	andwf	___ftadd@f1+2,f
 17707  03B1  17BD               	bsf	___ftadd@f2+1,7
 17708  03B2  30FF               	movlw	255
 17709  03B3  05BC               	andwf	___ftadd@f2,f
 17710  03B4  30FF               	movlw	255
 17711  03B5  05BD               	andwf	___ftadd@f2+1,f
 17712  03B6  3000               	movlw	0
 17713  03B7  05BE               	andwf	___ftadd@f2+2,f
 17714  03B8  0844               	movf	___ftadd@exp2,w
 17715  03B9  0245               	subwf	___ftadd@exp1,w
 17716  03BA  1803               	skipnc
 17717  03BB  2BDE               	goto	l6384
 17718  03BC                     l6374:	
 17719  03BC  3001               	movlw	1
 17720  03BD                     u5295:	
 17721  03BD  35BC               	lslf	___ftadd@f2,f
 17722  03BE  0DBD               	rlf	___ftadd@f2+1,f
 17723  03BF  0DBE               	rlf	___ftadd@f2+2,f
 17724  03C0  0B89               	decfsz	9,f
 17725  03C1  2BBD               	goto	u5295
 17726  03C2  3001               	movlw	1
 17727  03C3  02C4               	subwf	___ftadd@exp2,f
 17728  03C4  0844               	movf	___ftadd@exp2,w
 17729  03C5  0645               	xorwf	___ftadd@exp1,w
 17730  03C6  1903               	skipnz
 17731  03C7  2BD9               	goto	l6382
 17732  03C8  3001               	movlw	1
 17733  03C9  02C3               	subwf	___ftadd@sign,f
 17734  03CA  0843               	movf	___ftadd@sign,w
 17735  03CB  3907               	andlw	7
 17736  03CC  1903               	btfsc	3,2
 17737  03CD  2BD9               	goto	l6382
 17738  03CE  2BBC               	goto	l6374
 17739  03CF                     l6380:	
 17740  03CF  3001               	movlw	1
 17741  03D0                     u5325:	
 17742  03D0  36BB               	lsrf	___ftadd@f1+2,f
 17743  03D1  0CBA               	rrf	___ftadd@f1+1,f
 17744  03D2  0CB9               	rrf	___ftadd@f1,f
 17745  03D3  0B89               	decfsz	9,f
 17746  03D4  2BD0               	goto	u5325
 17747  03D5  3001               	movlw	1
 17748  03D6  00BF               	movwf	??___ftadd
 17749  03D7  083F               	movf	??___ftadd,w
 17750  03D8  07C5               	addwf	___ftadd@exp1,f
 17751  03D9                     l6382:	
 17752  03D9  0845               	movf	___ftadd@exp1,w
 17753  03DA  0644               	xorwf	___ftadd@exp2,w
 17754  03DB  1903               	btfsc	3,2
 17755  03DC  2C03               	goto	l3187
 17756  03DD  2BCF               	goto	l6380
 17757  03DE                     l6384:	
 17758  03DE  0845               	movf	___ftadd@exp1,w
 17759  03DF  0244               	subwf	___ftadd@exp2,w
 17760  03E0  1803               	skipnc
 17761  03E1  2C03               	goto	l3187
 17762  03E2                     l6386:	
 17763  03E2  3001               	movlw	1
 17764  03E3                     u5355:	
 17765  03E3  35B9               	lslf	___ftadd@f1,f
 17766  03E4  0DBA               	rlf	___ftadd@f1+1,f
 17767  03E5  0DBB               	rlf	___ftadd@f1+2,f
 17768  03E6  0B89               	decfsz	9,f
 17769  03E7  2BE3               	goto	u5355
 17770  03E8  3001               	movlw	1
 17771  03E9  02C5               	subwf	___ftadd@exp1,f
 17772  03EA  0844               	movf	___ftadd@exp2,w
 17773  03EB  0645               	xorwf	___ftadd@exp1,w
 17774  03EC  1903               	skipnz
 17775  03ED  2BFF               	goto	l6394
 17776  03EE  3001               	movlw	1
 17777  03EF  02C3               	subwf	___ftadd@sign,f
 17778  03F0  0843               	movf	___ftadd@sign,w
 17779  03F1  3907               	andlw	7
 17780  03F2  1903               	btfsc	3,2
 17781  03F3  2BFF               	goto	l6394
 17782  03F4  2BE2               	goto	l6386
 17783  03F5                     l6392:	
 17784  03F5  3001               	movlw	1
 17785  03F6                     u5385:	
 17786  03F6  36BE               	lsrf	___ftadd@f2+2,f
 17787  03F7  0CBD               	rrf	___ftadd@f2+1,f
 17788  03F8  0CBC               	rrf	___ftadd@f2,f
 17789  03F9  0B89               	decfsz	9,f
 17790  03FA  2BF6               	goto	u5385
 17791  03FB  3001               	movlw	1
 17792  03FC  00BF               	movwf	??___ftadd
 17793  03FD  083F               	movf	??___ftadd,w
 17794  03FE  07C4               	addwf	___ftadd@exp2,f
 17795  03FF                     l6394:	
 17796  03FF  0845               	movf	___ftadd@exp1,w
 17797  0400  0644               	xorwf	___ftadd@exp2,w
 17798  0401  1D03               	skipz
 17799  0402  2BF5               	goto	l6392
 17800  0403                     l3187:	
 17801  0403  1FC3               	btfss	___ftadd@sign,7
 17802  0404  2C15               	goto	l6398
 17803  0405  30FF               	movlw	255
 17804  0406  06B9               	xorwf	___ftadd@f1,f
 17805  0407  30FF               	movlw	255
 17806  0408  06BA               	xorwf	___ftadd@f1+1,f
 17807  0409  30FF               	movlw	255
 17808  040A  06BB               	xorwf	___ftadd@f1+2,f
 17809  040B  3001               	movlw	1
 17810  040C  07B9               	addwf	___ftadd@f1,f
 17811  040D  3000               	movlw	0
 17812  040E  1803               	skipnc
 17813  040F  3001               	movlw	1
 17814  0410  07BA               	addwf	___ftadd@f1+1,f
 17815  0411  3000               	movlw	0
 17816  0412  1803               	skipnc
 17817  0413  3001               	movlw	1
 17818  0414  07BB               	addwf	___ftadd@f1+2,f
 17819  0415                     l6398:	
 17820  0415  1F43               	btfss	___ftadd@sign,6
 17821  0416  2C27               	goto	l6402
 17822  0417  30FF               	movlw	255
 17823  0418  06BC               	xorwf	___ftadd@f2,f
 17824  0419  30FF               	movlw	255
 17825  041A  06BD               	xorwf	___ftadd@f2+1,f
 17826  041B  30FF               	movlw	255
 17827  041C  06BE               	xorwf	___ftadd@f2+2,f
 17828  041D  3001               	movlw	1
 17829  041E  07BC               	addwf	___ftadd@f2,f
 17830  041F  3000               	movlw	0
 17831  0420  1803               	skipnc
 17832  0421  3001               	movlw	1
 17833  0422  07BD               	addwf	___ftadd@f2+1,f
 17834  0423  3000               	movlw	0
 17835  0424  1803               	skipnc
 17836  0425  3001               	movlw	1
 17837  0426  07BE               	addwf	___ftadd@f2+2,f
 17838  0427                     l6402:	
 17839  0427  01C3               	clrf	___ftadd@sign
 17840  0428  0839               	movf	___ftadd@f1,w
 17841  0429  07BC               	addwf	___ftadd@f2,f
 17842  042A  083A               	movf	___ftadd@f1+1,w
 17843  042B  3DBD               	addwfc	___ftadd@f2+1,f
 17844  042C  083B               	movf	___ftadd@f1+2,w
 17845  042D  3DBE               	addwfc	___ftadd@f2+2,f
 17846  042E  1FBE               	btfss	___ftadd@f2+2,7
 17847  042F  2C42               	goto	l6412
 17848  0430  30FF               	movlw	255
 17849  0431  06BC               	xorwf	___ftadd@f2,f
 17850  0432  30FF               	movlw	255
 17851  0433  06BD               	xorwf	___ftadd@f2+1,f
 17852  0434  30FF               	movlw	255
 17853  0435  06BE               	xorwf	___ftadd@f2+2,f
 17854  0436  3001               	movlw	1
 17855  0437  07BC               	addwf	___ftadd@f2,f
 17856  0438  3000               	movlw	0
 17857  0439  1803               	skipnc
 17858  043A  3001               	movlw	1
 17859  043B  07BD               	addwf	___ftadd@f2+1,f
 17860  043C  3000               	movlw	0
 17861  043D  1803               	skipnc
 17862  043E  3001               	movlw	1
 17863  043F  07BE               	addwf	___ftadd@f2+2,f
 17864  0440  01C3               	clrf	___ftadd@sign
 17865  0441  0AC3               	incf	___ftadd@sign,f
 17866  0442                     l6412:	
 17867  0442  083C               	movf	___ftadd@f2,w
 17868  0443  00F2               	movwf	___ftpack@arg
 17869  0444  083D               	movf	___ftadd@f2+1,w
 17870  0445  00F3               	movwf	___ftpack@arg+1
 17871  0446  083E               	movf	___ftadd@f2+2,w
 17872  0447  00F4               	movwf	___ftpack@arg+2
 17873  0448  0845               	movf	___ftadd@exp1,w
 17874  0449  00BF               	movwf	??___ftadd
 17875  044A  083F               	movf	??___ftadd,w
 17876  044B  00F5               	movwf	___ftpack@exp
 17877  044C  0843               	movf	___ftadd@sign,w
 17878  044D  00C0               	movwf	??___ftadd+1
 17879  044E  0840               	movf	??___ftadd+1,w
 17880  044F  00F6               	movwf	___ftpack@sign
 17881  0450  3196  26DB         	fcall	___ftpack
 17882  0452  0872               	movf	?___ftpack,w
 17883  0453  0020               	movlb	0	; select bank0
 17884  0454  00B9               	movwf	?___ftadd
 17885  0455  0873               	movf	?___ftpack+1,w
 17886  0456  00BA               	movwf	?___ftadd+1
 17887  0457  0874               	movf	?___ftpack+2,w
 17888  0458  00BB               	movwf	?___ftadd+2
 17889  0459  0008               	return
 17890  045A                     __end_of___ftadd:	
 17891                           
 17892                           	psect	text122
 17893  1F29                     __ptext122:	
 17894 ;; *************** function ___awtoft *****************
 17895 ;; Defined at:
 17896 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17897 ;; Parameters:    Size  Location     Type
 17898 ;;  c               2    0[BANK0 ] int 
 17899 ;; Auto vars:     Size  Location     Type
 17900 ;;  sign            1    5[BANK0 ] unsigned char 
 17901 ;; Return value:  Size  Location     Type
 17902 ;;                  3    0[BANK0 ] float 
 17903 ;; Registers used:
 17904 ;;		wreg, status,2, status,0, pclath, cstack
 17905 ;; Tracked objects:
 17906 ;;		On entry : 0/0
 17907 ;;		On exit  : 0/0
 17908 ;;		Unchanged: 0/0
 17909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17910 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17913 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17914 ;;Total ram usage:        6 bytes
 17915 ;; Hardware stack levels used:    1
 17916 ;; Hardware stack levels required when called:    4
 17917 ;; This function calls:
 17918 ;;		___ftpack
 17919 ;; This function is called by:
 17920 ;;		_getDimmerLights_PercentToValue
 17921 ;;		_getDimmerLights_ValueToPercent
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           
 17926                           ;psect for function ___awtoft
 17927  1F29                     ___awtoft:	
 17928                           
 17929                           ;incstack = 0
 17930                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17931  1F29  0020               	movlb	0	; select bank0
 17932  1F2A  01A5               	clrf	___awtoft@sign
 17933  1F2B  1FA1               	btfss	___awtoft@c+1,7
 17934  1F2C  2F34               	goto	l9082
 17935  1F2D  09A0               	comf	___awtoft@c,f
 17936  1F2E  09A1               	comf	___awtoft@c+1,f
 17937  1F2F  0AA0               	incf	___awtoft@c,f
 17938  1F30  1903               	skipnz
 17939  1F31  0AA1               	incf	___awtoft@c+1,f
 17940  1F32  01A5               	clrf	___awtoft@sign
 17941  1F33  0AA5               	incf	___awtoft@sign,f
 17942  1F34                     l9082:	
 17943  1F34  0820               	movf	___awtoft@c,w
 17944  1F35  00F2               	movwf	___ftpack@arg
 17945  1F36  0821               	movf	___awtoft@c+1,w
 17946  1F37  00F3               	movwf	___ftpack@arg+1
 17947  1F38  01F4               	clrf	___ftpack@arg+2
 17948  1F39  308E               	movlw	142
 17949  1F3A  00A3               	movwf	??___awtoft
 17950  1F3B  0823               	movf	??___awtoft,w
 17951  1F3C  00F5               	movwf	___ftpack@exp
 17952  1F3D  0825               	movf	___awtoft@sign,w
 17953  1F3E  00A4               	movwf	??___awtoft+1
 17954  1F3F  0824               	movf	??___awtoft+1,w
 17955  1F40  00F6               	movwf	___ftpack@sign
 17956  1F41  3196  26DB         	fcall	___ftpack
 17957  1F43  0872               	movf	?___ftpack,w
 17958  1F44  0020               	movlb	0	; select bank0
 17959  1F45  00A0               	movwf	?___awtoft
 17960  1F46  0873               	movf	?___ftpack+1,w
 17961  1F47  00A1               	movwf	?___awtoft+1
 17962  1F48  0874               	movf	?___ftpack+2,w
 17963  1F49  00A2               	movwf	?___awtoft+2
 17964  1F4A  0008               	return
 17965  1F4B                     __end_of___awtoft:	
 17966                           
 17967                           	psect	text123
 17968  16DB                     __ptext123:	
 17969 ;; *************** function ___ftpack *****************
 17970 ;; Defined at:
 17971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;  arg             3    2[COMMON] unsigned um
 17974 ;;  exp             1    5[COMMON] unsigned char 
 17975 ;;  sign            1    6[COMMON] unsigned char 
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;		None
 17978 ;; Return value:  Size  Location     Type
 17979 ;;                  3    2[COMMON] float 
 17980 ;; Registers used:
 17981 ;;		wreg, status,2, status,0
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17987 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17990 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;Total ram usage:        8 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; Hardware stack levels required when called:    3
 17994 ;; This function calls:
 17995 ;;		Nothing
 17996 ;; This function is called by:
 17997 ;;		___awtoft
 17998 ;;		___ftadd
 17999 ;;		___ftdiv
 18000 ;;		___ftmul
 18001 ;; This function uses a non-reentrant model
 18002 ;;
 18003                           
 18004                           
 18005                           ;psect for function ___ftpack
 18006  16DB                     ___ftpack:	
 18007                           
 18008                           ;incstack = 0
 18009                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18010  16DB  0875               	movf	___ftpack@exp,w
 18011  16DC  1903               	btfsc	3,2
 18012  16DD  2EE3               	goto	l6200
 18013  16DE  0874               	movf	___ftpack@arg+2,w
 18014  16DF  0473               	iorwf	___ftpack@arg+1,w
 18015  16E0  0472               	iorwf	___ftpack@arg,w
 18016  16E1  1D03               	skipz
 18017  16E2  2EF4               	goto	l6206
 18018  16E3                     l6200:	
 18019  16E3  3000               	movlw	0
 18020  16E4  00F2               	movwf	?___ftpack
 18021  16E5  3000               	movlw	0
 18022  16E6  00F3               	movwf	?___ftpack+1
 18023  16E7  3000               	movlw	0
 18024  16E8  00F4               	movwf	?___ftpack+2
 18025  16E9  0008               	return
 18026  16EA                     l6204:	
 18027  16EA  3001               	movlw	1
 18028  16EB  00F7               	movwf	??___ftpack
 18029  16EC  0877               	movf	??___ftpack,w
 18030  16ED  07F5               	addwf	___ftpack@exp,f
 18031  16EE  3001               	movlw	1
 18032  16EF                     u4905:	
 18033  16EF  36F4               	lsrf	___ftpack@arg+2,f
 18034  16F0  0CF3               	rrf	___ftpack@arg+1,f
 18035  16F1  0CF2               	rrf	___ftpack@arg,f
 18036  16F2  0B89               	decfsz	9,f
 18037  16F3  2EEF               	goto	u4905
 18038  16F4                     l6206:	
 18039  16F4  30FE               	movlw	254
 18040  16F5  0574               	andwf	___ftpack@arg+2,w
 18041  16F6  1903               	btfsc	3,2
 18042  16F7  2F0D               	goto	l3158
 18043  16F8  2EEA               	goto	l6204
 18044  16F9                     l6208:	
 18045  16F9  3001               	movlw	1
 18046  16FA  00F7               	movwf	??___ftpack
 18047  16FB  0877               	movf	??___ftpack,w
 18048  16FC  07F5               	addwf	___ftpack@exp,f
 18049  16FD  3001               	movlw	1
 18050  16FE  07F2               	addwf	___ftpack@arg,f
 18051  16FF  3000               	movlw	0
 18052  1700  1803               	skipnc
 18053  1701  3001               	movlw	1
 18054  1702  07F3               	addwf	___ftpack@arg+1,f
 18055  1703  3000               	movlw	0
 18056  1704  1803               	skipnc
 18057  1705  3001               	movlw	1
 18058  1706  07F4               	addwf	___ftpack@arg+2,f
 18059  1707  3001               	movlw	1
 18060  1708                     u4925:	
 18061  1708  36F4               	lsrf	___ftpack@arg+2,f
 18062  1709  0CF3               	rrf	___ftpack@arg+1,f
 18063  170A  0CF2               	rrf	___ftpack@arg,f
 18064  170B  0B89               	decfsz	9,f
 18065  170C  2F08               	goto	u4925
 18066  170D                     l3158:	
 18067  170D  30FF               	movlw	255
 18068  170E  0574               	andwf	___ftpack@arg+2,w
 18069  170F  1903               	btfsc	3,2
 18070  1710  2F1A               	goto	l6216
 18071  1711  2EF9               	goto	l6208
 18072  1712                     l6214:	
 18073  1712  3001               	movlw	1
 18074  1713  02F5               	subwf	___ftpack@exp,f
 18075  1714  3001               	movlw	1
 18076  1715                     u4945:	
 18077  1715  35F2               	lslf	___ftpack@arg,f
 18078  1716  0DF3               	rlf	___ftpack@arg+1,f
 18079  1717  0DF4               	rlf	___ftpack@arg+2,f
 18080  1718  0B89               	decfsz	9,f
 18081  1719  2F15               	goto	u4945
 18082  171A                     l6216:	
 18083  171A  1FF3               	btfss	___ftpack@arg+1,7
 18084  171B  2F12               	goto	l6214
 18085  171C  1875               	btfsc	___ftpack@exp,0
 18086  171D  2F24               	goto	l3164
 18087  171E  30FF               	movlw	255
 18088  171F  05F2               	andwf	___ftpack@arg,f
 18089  1720  307F               	movlw	127
 18090  1721  05F3               	andwf	___ftpack@arg+1,f
 18091  1722  30FF               	movlw	255
 18092  1723  05F4               	andwf	___ftpack@arg+2,f
 18093  1724                     l3164:	
 18094  1724  1003               	clrc
 18095  1725  0CF5               	rrf	___ftpack@exp,f
 18096  1726  0875               	movf	___ftpack@exp,w
 18097  1727  00F7               	movwf	??___ftpack
 18098  1728  01F8               	clrf	??___ftpack+1
 18099  1729  01F9               	clrf	??___ftpack+2
 18100  172A  3010               	movlw	16
 18101  172B                     u4975:	
 18102  172B  35F7               	lslf	??___ftpack,f
 18103  172C  0DF8               	rlf	??___ftpack+1,f
 18104  172D  0DF9               	rlf	??___ftpack+2,f
 18105  172E  0B89               	decfsz	9,f
 18106  172F  2F2B               	goto	u4975
 18107  1730  0877               	movf	??___ftpack,w
 18108  1731  04F2               	iorwf	___ftpack@arg,f
 18109  1732  0878               	movf	??___ftpack+1,w
 18110  1733  04F3               	iorwf	___ftpack@arg+1,f
 18111  1734  0879               	movf	??___ftpack+2,w
 18112  1735  04F4               	iorwf	___ftpack@arg+2,f
 18113  1736  0876               	movf	___ftpack@sign,w
 18114  1737  1903               	btfsc	3,2
 18115  1738  0008               	return
 18116  1739  17F4               	bsf	___ftpack@arg+2,7
 18117  173A  0008               	return
 18118  173B                     __end_of___ftpack:	
 18119                           
 18120                           	psect	text124
 18121  1AB4                     __ptext124:	
 18122 ;; *************** function _DelayOff_Main *****************
 18123 ;; Defined at:
 18124 ;;		line 41 in file "../src/DelayOff_B1.c"
 18125 ;; Parameters:    Size  Location     Type
 18126 ;;		None
 18127 ;; Auto vars:     Size  Location     Type
 18128 ;;		None
 18129 ;; Return value:  Size  Location     Type
 18130 ;;		None               void
 18131 ;; Registers used:
 18132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18133 ;; Tracked objects:
 18134 ;;		On entry : 0/0
 18135 ;;		On exit  : 0/0
 18136 ;;		Unchanged: 0/0
 18137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18142 ;;Total ram usage:        0 bytes
 18143 ;; Hardware stack levels used:    1
 18144 ;; Hardware stack levels required when called:    7
 18145 ;; This function calls:
 18146 ;;		_DlyOff_Main
 18147 ;; This function is called by:
 18148 ;;		_main
 18149 ;; This function uses a non-reentrant model
 18150 ;;
 18151                           
 18152                           
 18153                           ;psect for function _DelayOff_Main
 18154  1AB4                     _DelayOff_Main:	
 18155                           
 18156                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18157                           
 18158                           ;incstack = 0
 18159                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18160  1AB4  3001               	movlw	1
 18161  1AB5  3189  21DA  319A   	fcall	_DlyOff_Main
 18162                           
 18163                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18164  1AB8  3002               	movlw	2
 18165  1AB9  3189  21DA         	fcall	_DlyOff_Main
 18166  1ABB  0008               	return
 18167  1ABC                     __end_of_DelayOff_Main:	
 18168                           
 18169                           	psect	text125
 18170  09DA                     __ptext125:	
 18171 ;; *************** function _DlyOff_Main *****************
 18172 ;; Defined at:
 18173 ;;		line 61 in file "../src/DelayOff_B1.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;  sw              1    wreg     unsigned char 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  sw              1   63[BANK0 ] unsigned char 
 18178 ;; Return value:  Size  Location     Type
 18179 ;;		None               void
 18180 ;; Registers used:
 18181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18182 ;; Tracked objects:
 18183 ;;		On entry : 0/0
 18184 ;;		On exit  : 0/0
 18185 ;;		Unchanged: 0/0
 18186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18188 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18189 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;Total ram usage:        3 bytes
 18192 ;; Hardware stack levels used:    1
 18193 ;; Hardware stack levels required when called:    6
 18194 ;; This function calls:
 18195 ;;		_DelayOffPointSelect
 18196 ;;		_getDimmerLights_Status
 18197 ;;		_setDimmerLights_SwOff
 18198 ;;		_setDimmerLights_SwOn
 18199 ;;		_setProductData
 18200 ;; This function is called by:
 18201 ;;		_DelayOff_Main
 18202 ;; This function uses a non-reentrant model
 18203 ;;
 18204                           
 18205                           
 18206                           ;psect for function _DlyOff_Main
 18207  09DA                     _DlyOff_Main:	
 18208                           
 18209                           ;incstack = 0
 18210                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18211                           ;DlyOff_Main@sw stored from wreg
 18212  09DA  0020               	movlb	0	; select bank0
 18213  09DB  00DF               	movwf	DlyOff_Main@sw
 18214                           
 18215                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18216  09DC  085F               	movf	DlyOff_Main@sw,w
 18217  09DD  319C  24C2  3189   	fcall	_DelayOffPointSelect
 18218                           
 18219                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18220  09E0  0021               	movlb	1	; select bank1
 18221  09E1  085A               	movf	_DelayOff^(0+128),w
 18222  09E2  0086               	movwf	6
 18223  09E3  3001               	movlw	1	; select bank2/3
 18224  09E4  0087               	movwf	7
 18225  09E5  1C81               	btfss	1,1
 18226  09E6  0008               	return
 18227                           
 18228                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18229  09E7  085A               	movf	_DelayOff^(0+128),w
 18230  09E8  3E02               	addlw	2
 18231  09E9  0086               	movwf	6
 18232  09EA  3001               	movlw	1	; select bank2/3
 18233  09EB  0087               	movwf	7
 18234  09EC  3001               	movlw	1
 18235  09ED  0781               	addwf	1,f
 18236  09EE  3141               	addfsr 1,1
 18237  09EF  1803               	skipnc
 18238  09F0  0A81               	incf	1,f
 18239                           
 18240                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18241  09F1  085A               	movf	_DelayOff^(0+128),w
 18242  09F2  3E02               	addlw	2
 18243  09F3  0086               	movwf	6
 18244  09F4  3001               	movlw	1	; select bank2/3
 18245  09F5  0087               	movwf	7
 18246  09F6  3F40               	moviw [0]fsr1
 18247  09F7  0020               	movlb	0	; select bank0
 18248  09F8  00DD               	movwf	??_DlyOff_Main
 18249  09F9  3F41               	moviw [1]fsr1
 18250  09FA  00DE               	movwf	??_DlyOff_Main+1
 18251  09FB  300B               	movlw	11
 18252  09FC  025E               	subwf	??_DlyOff_Main+1,w
 18253  09FD  30B8               	movlw	184
 18254  09FE  1903               	skipnz
 18255  09FF  025D               	subwf	??_DlyOff_Main,w
 18256  0A00  1C03               	skipc
 18257  0A01  0008               	return
 18258                           
 18259                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18260  0A02  0021               	movlb	1	; select bank1
 18261  0A03  085A               	movf	_DelayOff^(0+128),w
 18262  0A04  3E02               	addlw	2
 18263  0A05  0086               	movwf	6
 18264  0A06  3001               	movlw	1	; select bank2/3
 18265  0A07  0087               	movwf	7
 18266  0A08  3000               	movlw	0
 18267  0A09  3FC0               	movwi [0]fsr1
 18268  0A0A  3FC1               	movwi [1]fsr1
 18269                           
 18270                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18271  0A0B  3001               	movlw	1
 18272  0A0C  0020               	movlb	0	; select bank0
 18273  0A0D  00DD               	movwf	??_DlyOff_Main
 18274  0A0E  0021               	movlb	1	; select bank1
 18275  0A0F  085A               	movf	_DelayOff^(0+128),w
 18276  0A10  3E04               	addlw	4
 18277  0A11  0086               	movwf	6
 18278  0A12  3001               	movlw	1	; select bank2/3
 18279  0A13  0087               	movwf	7
 18280  0A14  0020               	movlb	0	; select bank0
 18281  0A15  085D               	movf	??_DlyOff_Main,w
 18282  0A16  0781               	addwf	1,f
 18283                           
 18284                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18285  0A17  0021               	movlb	1	; select bank1
 18286  0A18  085A               	movf	_DelayOff^(0+128),w
 18287  0A19  3E04               	addlw	4
 18288  0A1A  0086               	movwf	6
 18289  0A1B  3001               	movlw	1	; select bank2/3
 18290  0A1C  0087               	movwf	7
 18291  0A1D  0A5A               	incf	_DelayOff^(0+128),w
 18292  0A1E  0084               	movwf	4
 18293  0A1F  3001               	movlw	1	; select bank2/3
 18294  0A20  0085               	movwf	5
 18295  0A21  0800               	movf	0,w
 18296  0A22  0201               	subwf	1,w
 18297  0A23  1C03               	skipc
 18298  0A24  0008               	return
 18299                           
 18300                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18301  0A25  085A               	movf	_DelayOff^(0+128),w
 18302  0A26  3E04               	addlw	4
 18303  0A27  0086               	movwf	6
 18304  0A28  3001               	movlw	1	; select bank2/3
 18305  0A29  0087               	movwf	7
 18306  0A2A  0181               	clrf	1
 18307                           
 18308                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18309  0A2B  085A               	movf	_DelayOff^(0+128),w
 18310  0A2C  0086               	movwf	6
 18311  0A2D  3001               	movlw	1	; select bank2/3
 18312  0A2E  0087               	movwf	7
 18313  0A2F  1081               	bcf	1,1
 18314                           
 18315                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18316  0A30  0020               	movlb	0	; select bank0
 18317  0A31  085F               	movf	DlyOff_Main@sw,w
 18318  0A32  3187  27F2  3189   	fcall	_getDimmerLights_Status
 18319  0A35  3A01               	xorlw	1
 18320  0A36  1D03               	skipz
 18321  0A37  2A42               	goto	l581
 18322                           
 18323                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18324  0A38  0020               	movlb	0	; select bank0
 18325  0A39  085F               	movf	DlyOff_Main@sw,w
 18326  0A3A  3194  24AA  3189   	fcall	_setDimmerLights_SwOn
 18327                           
 18328                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18329  0A3D  0020               	movlb	0	; select bank0
 18330  0A3E  085F               	movf	DlyOff_Main@sw,w
 18331  0A3F  3192  222A  3189   	fcall	_setDimmerLights_SwOff
 18332  0A42                     l581:	
 18333                           
 18334                           ;DelayOff_B1.c: 78: }
 18335                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18336  0A42  0020               	movlb	0	; select bank0
 18337  0A43  01DA               	clrf	setProductData@value
 18338  0A44  085F               	movf	DlyOff_Main@sw,w
 18339  0A45  3E1A               	addlw	26
 18340  0A46  319B  232B         	fcall	_setProductData
 18341  0A48  0008               	return
 18342  0A49                     __end_of_DlyOff_Main:	
 18343                           
 18344                           	psect	text126
 18345  1B2B                     __ptext126:	
 18346 ;; *************** function _setProductData *****************
 18347 ;; Defined at:
 18348 ;;		line 645 in file "../src/Main_B1.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;  address         1    wreg     unsigned char 
 18351 ;;  value           1   58[BANK0 ] unsigned char 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;  address         1   60[BANK0 ] unsigned char 
 18354 ;; Return value:  Size  Location     Type
 18355 ;;		None               void
 18356 ;; Registers used:
 18357 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18358 ;; Tracked objects:
 18359 ;;		On entry : 0/0
 18360 ;;		On exit  : 0/0
 18361 ;;		Unchanged: 0/0
 18362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18363 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18367 ;;Total ram usage:        3 bytes
 18368 ;; Hardware stack levels used:    1
 18369 ;; Hardware stack levels required when called:    3
 18370 ;; This function calls:
 18371 ;;		Nothing
 18372 ;; This function is called by:
 18373 ;;		_DlyOff_Main
 18374 ;;		_setDelayOff_GO
 18375 ;;		_setDimmerLights_OnOff
 18376 ;;		_setDimmerLights_Dimming
 18377 ;;		_setTemp_Main
 18378 ;;		_setLog_Code
 18379 ;;		_setControl_Lights_Table
 18380 ;;		_setRFSW_AdjControl
 18381 ;;		_setRF_DimmerLights
 18382 ;; This function uses a non-reentrant model
 18383 ;;
 18384                           
 18385                           
 18386                           ;psect for function _setProductData
 18387  1B2B                     _setProductData:	
 18388                           
 18389                           ;incstack = 0
 18390                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18391                           ;setProductData@address stored from wreg
 18392  1B2B  0020               	movlb	0	; select bank0
 18393  1B2C  00DC               	movwf	setProductData@address
 18394                           
 18395                           ;Main_B1.c: 646: _product.Data[address] = value;
 18396  1B2D  085A               	movf	setProductData@value,w
 18397  1B2E  00DB               	movwf	??_setProductData
 18398  1B2F  085C               	movf	setProductData@address,w
 18399  1B30  3E45               	addlw	__product& (0+255)
 18400  1B31  0086               	movwf	6
 18401  1B32  3002               	movlw	2	; select bank4/5
 18402  1B33  0087               	movwf	7
 18403  1B34  085B               	movf	??_setProductData,w
 18404  1B35  0081               	movwf	1
 18405  1B36  0008               	return
 18406  1B37                     __end_of_setProductData:	
 18407                           
 18408                           	psect	text127
 18409  14AA                     __ptext127:	
 18410 ;; *************** function _setDimmerLights_SwOn *****************
 18411 ;; Defined at:
 18412 ;;		line 691 in file "../src/Dimmer_B1.c"
 18413 ;; Parameters:    Size  Location     Type
 18414 ;;  sw              1    wreg     unsigned char 
 18415 ;; Auto vars:     Size  Location     Type
 18416 ;;  sw              1    9[BANK0 ] unsigned char 
 18417 ;;  idle            1    8[BANK0 ] unsigned char 
 18418 ;; Return value:  Size  Location     Type
 18419 ;;		None               void
 18420 ;; Registers used:
 18421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18422 ;; Tracked objects:
 18423 ;;		On entry : 0/0
 18424 ;;		On exit  : 0/0
 18425 ;;		Unchanged: 0/0
 18426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18428 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18430 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18431 ;;Total ram usage:        5 bytes
 18432 ;; Hardware stack levels used:    1
 18433 ;; Hardware stack levels required when called:    5
 18434 ;; This function calls:
 18435 ;;		_DimmerLights_SelectPointer
 18436 ;;		_setBuz
 18437 ;; This function is called by:
 18438 ;;		_DlyOff_Main
 18439 ;;		_setControl_Lights_Table
 18440 ;;		_setRFSW_Control
 18441 ;;		_setRFSW_AdjControl
 18442 ;;		_setSw_Main
 18443 ;; This function uses a non-reentrant model
 18444 ;;
 18445                           
 18446                           
 18447                           ;psect for function _setDimmerLights_SwOn
 18448  14AA                     _setDimmerLights_SwOn:	
 18449                           
 18450                           ;incstack = 0
 18451                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18452                           ;setDimmerLights_SwOn@sw stored from wreg
 18453  14AA  0020               	movlb	0	; select bank0
 18454  14AB  00A9               	movwf	setDimmerLights_SwOn@sw
 18455                           
 18456                           ;Dimmer_B1.c: 692: char idle = 0;
 18457  14AC  01A8               	clrf	setDimmerLights_SwOn@idle
 18458                           
 18459                           ;Dimmer_B1.c: 694: if (idle == 0) {
 18460  14AD  08A8               	movf	setDimmerLights_SwOn@idle,f
 18461  14AE  1D03               	skipz
 18462  14AF  2CD2               	goto	l9136
 18463                           
 18464                           ;Dimmer_B1.c: 695: if (sw == 1) {
 18465  14B0  0829               	movf	setDimmerLights_SwOn@sw,w
 18466  14B1  3A01               	xorlw	1
 18467  14B2  1D03               	skipz
 18468  14B3  2CBF               	goto	l9126
 18469                           
 18470                           ;Dimmer_B1.c: 696: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18471  14B4  01A6               	clrf	_setDimmerLights_SwOn$2338
 18472  14B5  0AA6               	incf	_setDimmerLights_SwOn$2338,f
 18473  14B6  0022               	movlb	2	; select bank2
 18474  14B7  1E63               	btfss	_DimmerLights2^(0+256),4
 18475  14B8  1A20               	btfsc	_DimmerIntr2^(0+256),4
 18476  14B9  2CBC               	goto	l9124
 18477  14BA  0020               	movlb	0	; select bank0
 18478  14BB  01A6               	clrf	_setDimmerLights_SwOn$2338
 18479  14BC                     l9124:	
 18480  14BC  0020               	movlb	0	; select bank0
 18481  14BD  0826               	movf	_setDimmerLights_SwOn$2338,w
 18482  14BE  2CCF               	goto	L12
 18483  14BF                     l9126:	
 18484                           ;Dimmer_B1.c: 697: } else if (sw == 2) {
 18485                           
 18486  14BF  0829               	movf	setDimmerLights_SwOn@sw,w
 18487  14C0  3A02               	xorlw	2
 18488  14C1  1D03               	skipz
 18489  14C2  2CD2               	goto	l9136
 18490                           
 18491                           ;Dimmer_B1.c: 698: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18492  14C3  01A7               	clrf	_setDimmerLights_SwOn$2347
 18493  14C4  0AA7               	incf	_setDimmerLights_SwOn$2347,f
 18494  14C5  0022               	movlb	2	; select bank2
 18495  14C6  1A5B               	btfsc	_DimmerLights1^(0+256),4
 18496  14C7  2CCD               	goto	l9134
 18497  14C8  0021               	movlb	1	; select bank1
 18498  14C9  1A47               	btfsc	_DimmerIntr1^(0+128),4
 18499  14CA  2CCD               	goto	l9134
 18500  14CB  0020               	movlb	0	; select bank0
 18501  14CC  01A7               	clrf	_setDimmerLights_SwOn$2347
 18502  14CD                     l9134:	
 18503  14CD  0020               	movlb	0	; select bank0
 18504  14CE  0827               	movf	_setDimmerLights_SwOn$2347,w
 18505  14CF                     L12:	
 18506  14CF  00F9               	movwf	??_setDimmerLights_SwOn
 18507  14D0  0879               	movf	??_setDimmerLights_SwOn,w
 18508  14D1  00A8               	movwf	setDimmerLights_SwOn@idle
 18509  14D2                     l9136:	
 18510                           
 18511                           ;Dimmer_B1.c: 699: }
 18512                           ;Dimmer_B1.c: 700: }
 18513                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
 18514  14D2  0829               	movf	setDimmerLights_SwOn@sw,w
 18515  14D3  319C  2487  3194   	fcall	_DimmerLights_SelectPointer
 18516                           
 18517                           ;Dimmer_B1.c: 718: if (idle == 0) {
 18518  14D6  0020               	movlb	0	; select bank0
 18519  14D7  08A8               	movf	setDimmerLights_SwOn@idle,f
 18520  14D8  1D03               	skipz
 18521  14D9  0008               	return
 18522                           
 18523                           ;Dimmer_B1.c: 719: DimmerLights->SwFlag = 1;
 18524  14DA  087B               	movf	_DimmerLights,w
 18525  14DB  0086               	movwf	6
 18526  14DC  3001               	movlw	1	; select bank2/3
 18527  14DD  0087               	movwf	7
 18528  14DE  1401               	bsf	1,0
 18529                           
 18530                           ;Dimmer_B1.c: 720: if (DimmerLights->Status == 0) {
 18531  14DF  0A7B               	incf	_DimmerLights,w
 18532  14E0  0086               	movwf	6
 18533  14E1  3001               	movlw	1	; select bank2/3
 18534  14E2  0087               	movwf	7
 18535  14E3  1801               	btfsc	1,0
 18536  14E4  2CF5               	goto	l9144
 18537                           
 18538                           ;Dimmer_B1.c: 721: DimmerLights->Status = 1;
 18539  14E5  0A7B               	incf	_DimmerLights,w
 18540  14E6  0086               	movwf	6
 18541  14E7  3001               	movlw	1	; select bank2/3
 18542  14E8  0087               	movwf	7
 18543  14E9  1401               	bsf	1,0
 18544                           
 18545                           ;Dimmer_B1.c: 722: DimmerLights->Trigger = 1;
 18546  14EA  087B               	movf	_DimmerLights,w
 18547  14EB  0086               	movwf	6
 18548  14EC  3001               	movlw	1	; select bank2/3
 18549  14ED  0087               	movwf	7
 18550  14EE  1481               	bsf	1,1
 18551                           
 18552                           ;Dimmer_B1.c: 723: DimmerLights->Switch = 1;
 18553  14EF  087B               	movf	_DimmerLights,w
 18554  14F0  0086               	movwf	6
 18555  14F1  3001               	movlw	1	; select bank2/3
 18556  14F2  0087               	movwf	7
 18557  14F3  1501               	bsf	1,2
 18558                           
 18559                           ;Dimmer_B1.c: 724: } else {
 18560  14F4  2CFA               	goto	l9146
 18561  14F5                     l9144:	
 18562                           
 18563                           ;Dimmer_B1.c: 725: DimmerLights->Status = 0;
 18564  14F5  0A7B               	incf	_DimmerLights,w
 18565  14F6  0086               	movwf	6
 18566  14F7  3001               	movlw	1	; select bank2/3
 18567  14F8  0087               	movwf	7
 18568  14F9  1001               	bcf	1,0
 18569  14FA                     l9146:	
 18570                           
 18571                           ;Dimmer_B1.c: 726: }
 18572                           ;Dimmer_B1.c: 727: setBuz(1, 100);
 18573  14FA  3064               	movlw	100
 18574  14FB  00A4               	movwf	setBuz@time
 18575  14FC  3000               	movlw	0
 18576  14FD  00A5               	movwf	setBuz@time+1
 18577  14FE  3001               	movlw	1
 18578  14FF  3193  23AD         	fcall	_setBuz
 18579  1501  0008               	return
 18580  1502                     __end_of_setDimmerLights_SwOn:	
 18581                           
 18582                           	psect	text128
 18583  13AD                     __ptext128:	
 18584 ;; *************** function _setBuz *****************
 18585 ;; Defined at:
 18586 ;;		line 22 in file "../src/Buzzer_B1.c"
 18587 ;; Parameters:    Size  Location     Type
 18588 ;;  count           1    wreg     unsigned char 
 18589 ;;  time            2    4[BANK0 ] int 
 18590 ;; Auto vars:     Size  Location     Type
 18591 ;;  count           1    8[COMMON] unsigned char 
 18592 ;; Return value:  Size  Location     Type
 18593 ;;		None               void
 18594 ;; Registers used:
 18595 ;;		wreg, status,2, status,0, pclath, cstack
 18596 ;; Tracked objects:
 18597 ;;		On entry : 0/0
 18598 ;;		On exit  : 0/0
 18599 ;;		Unchanged: 0/0
 18600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18601 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18602 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18604 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18605 ;;Total ram usage:        4 bytes
 18606 ;; Hardware stack levels used:    1
 18607 ;; Hardware stack levels required when called:    4
 18608 ;; This function calls:
 18609 ;;		___awdiv
 18610 ;; This function is called by:
 18611 ;;		_setDimmerLights_SwOn
 18612 ;;		_setDimmerLights_Dimming
 18613 ;;		_my_MainTimer
 18614 ;;		_Exception_Main
 18615 ;;		_setTemp_Main
 18616 ;;		_setLog_Code
 18617 ;;		_setRFSW_Control
 18618 ;;		_setSw_Main
 18619 ;; This function uses a non-reentrant model
 18620 ;;
 18621                           
 18622                           
 18623                           ;psect for function _setBuz
 18624  13AD                     _setBuz:	
 18625                           
 18626                           ;incstack = 0
 18627                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18628                           ;setBuz@count stored from wreg
 18629  13AD  00F8               	movwf	setBuz@count
 18630                           
 18631                           ;Buzzer_B1.c: 23: time /= 20;
 18632  13AE  3014               	movlw	20
 18633  13AF  00F2               	movwf	___awdiv@divisor
 18634  13B0  3000               	movlw	0
 18635  13B1  00F3               	movwf	___awdiv@divisor+1
 18636  13B2  0020               	movlb	0	; select bank0
 18637  13B3  0825               	movf	setBuz@time+1,w
 18638  13B4  01F5               	clrf	___awdiv@dividend+1
 18639  13B5  07F5               	addwf	___awdiv@dividend+1,f
 18640  13B6  0824               	movf	setBuz@time,w
 18641  13B7  01F4               	clrf	___awdiv@dividend
 18642  13B8  07F4               	addwf	___awdiv@dividend,f
 18643  13B9  3194  2400  3193   	fcall	___awdiv
 18644  13BC  0873               	movf	?___awdiv+1,w
 18645  13BD  0020               	movlb	0	; select bank0
 18646  13BE  01A5               	clrf	setBuz@time+1
 18647  13BF  07A5               	addwf	setBuz@time+1,f
 18648  13C0  0872               	movf	?___awdiv,w
 18649  13C1  01A4               	clrf	setBuz@time
 18650  13C2  07A4               	addwf	setBuz@time,f
 18651                           
 18652                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18653  13C3  0021               	movlb	1	; select bank1
 18654  13C4  1C3B               	btfss	_Buz1^(0+128),0
 18655  13C5  0008               	return
 18656                           
 18657                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18658  13C6  18BB               	btfsc	_Buz1^(0+128),1
 18659  13C7  2BDC               	goto	l98
 18660                           
 18661                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18662  13C8  14BB               	bsf	_Buz1^(0+128),1
 18663                           
 18664                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18665  13C9  01BC               	clrf	(_Buz1^(0+128)+1)
 18666  13CA  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 18667                           
 18668                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18669  13CB  0878               	movf	setBuz@count,w
 18670  13CC  00F7               	movwf	??_setBuz
 18671  13CD  0877               	movf	??_setBuz,w
 18672  13CE  00BE               	movwf	(_Buz1^(0+128)+3)
 18673                           
 18674                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18675  13CF  0020               	movlb	0	; select bank0
 18676  13D0  0825               	movf	setBuz@time+1,w
 18677  13D1  0021               	movlb	1	; select bank1
 18678  13D2  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 18679  13D3  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 18680  13D4  0020               	movlb	0	; select bank0
 18681  13D5  0824               	movf	setBuz@time,w
 18682  13D6  0021               	movlb	1	; select bank1
 18683  13D7  01C1               	clrf	(_Buz1^(0+128)+6)
 18684  13D8  07C1               	addwf	(_Buz1^(0+128)+6),f
 18685                           
 18686                           ;Buzzer_B1.c: 30: RB3 = 1;
 18687  13D9  0020               	movlb	0	; select bank0
 18688  13DA  158D               	bsf	13,3	;volatile
 18689                           
 18690                           ;Buzzer_B1.c: 31: } else {
 18691  13DB  0008               	return
 18692  13DC                     l98:	
 18693                           
 18694                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18695  13DC  19BB               	btfsc	_Buz1^(0+128),3
 18696  13DD  2BEE               	goto	l100
 18697                           
 18698                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18699  13DE  15BB               	bsf	_Buz1^(0+128),3
 18700                           
 18701                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18702  13DF  0878               	movf	setBuz@count,w
 18703  13E0  00F7               	movwf	??_setBuz
 18704  13E1  0877               	movf	??_setBuz,w
 18705  13E2  00BF               	movwf	(_Buz1^(0+128)+4)
 18706                           
 18707                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18708  13E3  0020               	movlb	0	; select bank0
 18709  13E4  0825               	movf	setBuz@time+1,w
 18710  13E5  0021               	movlb	1	; select bank1
 18711  13E6  01C4               	clrf	((_Buz1+1)^(0+128)+8)
 18712  13E7  07C4               	addwf	((_Buz1+1)^(0+128)+8),f
 18713  13E8  0020               	movlb	0	; select bank0
 18714  13E9  0824               	movf	setBuz@time,w
 18715  13EA  0021               	movlb	1	; select bank1
 18716  13EB  01C3               	clrf	(_Buz1^(0+128)+8)
 18717  13EC  07C3               	addwf	(_Buz1^(0+128)+8),f
 18718                           
 18719                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18720  13ED  0008               	return
 18721  13EE                     l100:	
 18722  13EE  1A3B               	btfsc	_Buz1^(0+128),4
 18723  13EF  0008               	return
 18724                           
 18725                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18726  13F0  163B               	bsf	_Buz1^(0+128),4
 18727                           
 18728                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18729  13F1  0878               	movf	setBuz@count,w
 18730  13F2  00F7               	movwf	??_setBuz
 18731  13F3  0877               	movf	??_setBuz,w
 18732  13F4  00C0               	movwf	(_Buz1^(0+128)+5)
 18733                           
 18734                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18735  13F5  0020               	movlb	0	; select bank0
 18736  13F6  0825               	movf	setBuz@time+1,w
 18737  13F7  0021               	movlb	1	; select bank1
 18738  13F8  01C6               	clrf	((_Buz1+1)^(0+128)+10)
 18739  13F9  07C6               	addwf	((_Buz1+1)^(0+128)+10),f
 18740  13FA  0020               	movlb	0	; select bank0
 18741  13FB  0824               	movf	setBuz@time,w
 18742  13FC  0021               	movlb	1	; select bank1
 18743  13FD  01C5               	clrf	(_Buz1^(0+128)+10)
 18744  13FE  07C5               	addwf	(_Buz1^(0+128)+10),f
 18745  13FF  0008               	return
 18746  1400                     __end_of_setBuz:	
 18747                           
 18748                           	psect	text129
 18749  1400                     __ptext129:	
 18750 ;; *************** function ___awdiv *****************
 18751 ;; Defined at:
 18752 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18753 ;; Parameters:    Size  Location     Type
 18754 ;;  divisor         2    2[COMMON] int 
 18755 ;;  dividend        2    4[COMMON] int 
 18756 ;; Auto vars:     Size  Location     Type
 18757 ;;  quotient        2    2[BANK0 ] int 
 18758 ;;  sign            1    1[BANK0 ] unsigned char 
 18759 ;;  counter         1    0[BANK0 ] unsigned char 
 18760 ;; Return value:  Size  Location     Type
 18761 ;;                  2    2[COMMON] int 
 18762 ;; Registers used:
 18763 ;;		wreg, status,2, status,0
 18764 ;; Tracked objects:
 18765 ;;		On entry : 0/0
 18766 ;;		On exit  : 0/0
 18767 ;;		Unchanged: 0/0
 18768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18769 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18770 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;Total ram usage:        9 bytes
 18774 ;; Hardware stack levels used:    1
 18775 ;; Hardware stack levels required when called:    3
 18776 ;; This function calls:
 18777 ;;		Nothing
 18778 ;; This function is called by:
 18779 ;;		_setBuz
 18780 ;; This function uses a non-reentrant model
 18781 ;;
 18782                           
 18783                           
 18784                           ;psect for function ___awdiv
 18785  1400                     ___awdiv:	
 18786                           
 18787                           ;incstack = 0
 18788                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18789  1400  0020               	movlb	0	; select bank0
 18790  1401  01A1               	clrf	___awdiv@sign
 18791  1402  1FF3               	btfss	___awdiv@divisor+1,7
 18792  1403  2C0B               	goto	l9010
 18793  1404  09F2               	comf	___awdiv@divisor,f
 18794  1405  09F3               	comf	___awdiv@divisor+1,f
 18795  1406  0AF2               	incf	___awdiv@divisor,f
 18796  1407  1903               	skipnz
 18797  1408  0AF3               	incf	___awdiv@divisor+1,f
 18798  1409  01A1               	clrf	___awdiv@sign
 18799  140A  0AA1               	incf	___awdiv@sign,f
 18800  140B                     l9010:	
 18801  140B  1FF5               	btfss	___awdiv@dividend+1,7
 18802  140C  2C16               	goto	l9016
 18803  140D  09F4               	comf	___awdiv@dividend,f
 18804  140E  09F5               	comf	___awdiv@dividend+1,f
 18805  140F  0AF4               	incf	___awdiv@dividend,f
 18806  1410  1903               	skipnz
 18807  1411  0AF5               	incf	___awdiv@dividend+1,f
 18808  1412  3001               	movlw	1
 18809  1413  00F6               	movwf	??___awdiv
 18810  1414  0876               	movf	??___awdiv,w
 18811  1415  06A1               	xorwf	___awdiv@sign,f
 18812  1416                     l9016:	
 18813  1416  01A2               	clrf	___awdiv@quotient
 18814  1417  01A3               	clrf	___awdiv@quotient+1
 18815  1418  0873               	movf	___awdiv@divisor+1,w
 18816  1419  0472               	iorwf	___awdiv@divisor,w
 18817  141A  1903               	skipnz
 18818  141B  2C45               	goto	l9038
 18819  141C  01A0               	clrf	___awdiv@counter
 18820  141D  0AA0               	incf	___awdiv@counter,f
 18821  141E                     l9026:	
 18822  141E  1BF3               	btfsc	___awdiv@divisor+1,7
 18823  141F  2C2A               	goto	l9028
 18824  1420  3001               	movlw	1
 18825  1421                     u9785:	
 18826  1421  35F2               	lslf	___awdiv@divisor,f
 18827  1422  0DF3               	rlf	___awdiv@divisor+1,f
 18828  1423  0B89               	decfsz	9,f
 18829  1424  2C21               	goto	u9785
 18830  1425  3001               	movlw	1
 18831  1426  00F6               	movwf	??___awdiv
 18832  1427  0876               	movf	??___awdiv,w
 18833  1428  07A0               	addwf	___awdiv@counter,f
 18834  1429  2C1E               	goto	l9026
 18835  142A                     l9028:	
 18836  142A  3001               	movlw	1
 18837  142B                     u9805:	
 18838  142B  35A2               	lslf	___awdiv@quotient,f
 18839  142C  0DA3               	rlf	___awdiv@quotient+1,f
 18840  142D  0B89               	decfsz	9,f
 18841  142E  2C2B               	goto	u9805
 18842  142F  0873               	movf	___awdiv@divisor+1,w
 18843  1430  0275               	subwf	___awdiv@dividend+1,w
 18844  1431  1D03               	skipz
 18845  1432  2C35               	goto	u9815
 18846  1433  0872               	movf	___awdiv@divisor,w
 18847  1434  0274               	subwf	___awdiv@dividend,w
 18848  1435                     u9815:	
 18849  1435  1C03               	skipc
 18850  1436  2C3C               	goto	l9034
 18851  1437  0872               	movf	___awdiv@divisor,w
 18852  1438  02F4               	subwf	___awdiv@dividend,f
 18853  1439  0873               	movf	___awdiv@divisor+1,w
 18854  143A  3BF5               	subwfb	___awdiv@dividend+1,f
 18855  143B  1422               	bsf	___awdiv@quotient,0
 18856  143C                     l9034:	
 18857  143C  3001               	movlw	1
 18858  143D                     u9825:	
 18859  143D  36F3               	lsrf	___awdiv@divisor+1,f
 18860  143E  0CF2               	rrf	___awdiv@divisor,f
 18861  143F  0B89               	decfsz	9,f
 18862  1440  2C3D               	goto	u9825
 18863  1441  3001               	movlw	1
 18864  1442  02A0               	subwf	___awdiv@counter,f
 18865  1443  1D03               	btfss	3,2
 18866  1444  2C2A               	goto	l9028
 18867  1445                     l9038:	
 18868  1445  0821               	movf	___awdiv@sign,w
 18869  1446  1903               	btfsc	3,2
 18870  1447  2C4D               	goto	l9042
 18871  1448  09A2               	comf	___awdiv@quotient,f
 18872  1449  09A3               	comf	___awdiv@quotient+1,f
 18873  144A  0AA2               	incf	___awdiv@quotient,f
 18874  144B  1903               	skipnz
 18875  144C  0AA3               	incf	___awdiv@quotient+1,f
 18876  144D                     l9042:	
 18877  144D  0823               	movf	___awdiv@quotient+1,w
 18878  144E  01F3               	clrf	?___awdiv+1
 18879  144F  07F3               	addwf	?___awdiv+1,f
 18880  1450  0822               	movf	___awdiv@quotient,w
 18881  1451  01F2               	clrf	?___awdiv
 18882  1452  07F2               	addwf	?___awdiv,f
 18883  1453  0008               	return
 18884  1454                     __end_of___awdiv:	
 18885                           
 18886                           	psect	text130
 18887  122A                     __ptext130:	
 18888 ;; *************** function _setDimmerLights_SwOff *****************
 18889 ;; Defined at:
 18890 ;;		line 732 in file "../src/Dimmer_B1.c"
 18891 ;; Parameters:    Size  Location     Type
 18892 ;;  sw              1    wreg     unsigned char 
 18893 ;; Auto vars:     Size  Location     Type
 18894 ;;  sw              1    4[COMMON] unsigned char 
 18895 ;; Return value:  Size  Location     Type
 18896 ;;		None               void
 18897 ;; Registers used:
 18898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18899 ;; Tracked objects:
 18900 ;;		On entry : 0/0
 18901 ;;		On exit  : 0/0
 18902 ;;		Unchanged: 0/0
 18903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18907 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;Total ram usage:        1 bytes
 18909 ;; Hardware stack levels used:    1
 18910 ;; Hardware stack levels required when called:    4
 18911 ;; This function calls:
 18912 ;;		_DimmerLights_SelectPointer
 18913 ;; This function is called by:
 18914 ;;		_DlyOff_Main
 18915 ;;		_Exception_Main
 18916 ;;		_setControl_Lights_Table
 18917 ;;		_setRFSW_Control
 18918 ;;		_setRFSW_AdjControl
 18919 ;;		_setSw_Main
 18920 ;; This function uses a non-reentrant model
 18921 ;;
 18922                           
 18923                           
 18924                           ;psect for function _setDimmerLights_SwOff
 18925  122A                     _setDimmerLights_SwOff:	
 18926                           
 18927                           ;incstack = 0
 18928                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18929                           ;setDimmerLights_SwOff@sw stored from wreg
 18930  122A  00F4               	movwf	setDimmerLights_SwOff@sw
 18931                           
 18932                           ;Dimmer_B1.c: 733: DimmerLights_SelectPointer(sw);
 18933  122B  0874               	movf	setDimmerLights_SwOff@sw,w
 18934  122C  319C  2487  3192   	fcall	_DimmerLights_SelectPointer
 18935                           
 18936                           ;Dimmer_B1.c: 735: if (DimmerLights->SwFlag == 1) {
 18937  122F  087B               	movf	_DimmerLights,w
 18938  1230  0086               	movwf	6
 18939  1231  3001               	movlw	1	; select bank2/3
 18940  1232  0087               	movwf	7
 18941  1233  1C01               	btfss	1,0
 18942  1234  0008               	return
 18943                           
 18944                           ;Dimmer_B1.c: 736: DimmerLights->SwFlag = 0;
 18945  1235  087B               	movf	_DimmerLights,w
 18946  1236  0086               	movwf	6
 18947  1237  3001               	movlw	1	; select bank2/3
 18948  1238  0087               	movwf	7
 18949  1239  1001               	bcf	1,0
 18950                           
 18951                           ;Dimmer_B1.c: 737: if (DimmerLights->Status == 1) {
 18952  123A  0A7B               	incf	_DimmerLights,w
 18953  123B  0086               	movwf	6
 18954  123C  3001               	movlw	1	; select bank2/3
 18955  123D  0087               	movwf	7
 18956  123E  1C01               	btfss	1,0
 18957  123F  2A56               	goto	l6640
 18958                           
 18959                           ;Dimmer_B1.c: 738: if (DimmerLights->DimmingSwFlag == 1) {
 18960  1240  087B               	movf	_DimmerLights,w
 18961  1241  0086               	movwf	6
 18962  1242  3001               	movlw	1	; select bank2/3
 18963  1243  0087               	movwf	7
 18964  1244  1D81               	btfss	1,3
 18965  1245  0008               	return
 18966                           
 18967                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwFlag = 0;
 18968  1246  087B               	movf	_DimmerLights,w
 18969  1247  0086               	movwf	6
 18970  1248  3001               	movlw	1	; select bank2/3
 18971  1249  0087               	movwf	7
 18972  124A  1181               	bcf	1,3
 18973                           
 18974                           ;Dimmer_B1.c: 741: DimmerLights->DimmingTrigger = 1;
 18975  124B  087B               	movf	_DimmerLights,w
 18976  124C  0086               	movwf	6
 18977  124D  3001               	movlw	1	; select bank2/3
 18978  124E  0087               	movwf	7
 18979  124F  1601               	bsf	1,4
 18980                           
 18981                           ;Dimmer_B1.c: 742: DimmerLights->DimmingSwitch = 0;
 18982  1250  087B               	movf	_DimmerLights,w
 18983  1251  0086               	movwf	6
 18984  1252  3001               	movlw	1	; select bank2/3
 18985  1253  0087               	movwf	7
 18986  1254  1281               	bcf	1,5
 18987                           
 18988                           ;Dimmer_B1.c: 743: }
 18989                           ;Dimmer_B1.c: 744: } else {
 18990  1255  0008               	return
 18991  1256                     l6640:	
 18992                           
 18993                           ;Dimmer_B1.c: 746: DimmerLights->Trigger = 1;
 18994  1256  087B               	movf	_DimmerLights,w
 18995  1257  0086               	movwf	6
 18996  1258  3001               	movlw	1	; select bank2/3
 18997  1259  0087               	movwf	7
 18998  125A  1481               	bsf	1,1
 18999                           
 19000                           ;Dimmer_B1.c: 747: DimmerLights->Switch = 0;
 19001  125B  087B               	movf	_DimmerLights,w
 19002  125C  0086               	movwf	6
 19003  125D  3001               	movlw	1	; select bank2/3
 19004  125E  0087               	movwf	7
 19005  125F  1101               	bcf	1,2
 19006  1260  0008               	return
 19007  1261                     __end_of_setDimmerLights_SwOff:	
 19008                           
 19009                           	psect	text131
 19010  07F2                     __ptext131:	
 19011 ;; *************** function _getDimmerLights_Status *****************
 19012 ;; Defined at:
 19013 ;;		line 1073 in file "../src/Dimmer_B1.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;  lights          1    wreg     unsigned char 
 19016 ;; Auto vars:     Size  Location     Type
 19017 ;;  lights          1    4[COMMON] unsigned char 
 19018 ;;  status          1    5[COMMON] unsigned char 
 19019 ;; Return value:  Size  Location     Type
 19020 ;;                  1    wreg      unsigned char 
 19021 ;; Registers used:
 19022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19023 ;; Tracked objects:
 19024 ;;		On entry : 0/0
 19025 ;;		On exit  : 0/0
 19026 ;;		Unchanged: 0/0
 19027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;Total ram usage:        2 bytes
 19033 ;; Hardware stack levels used:    1
 19034 ;; Hardware stack levels required when called:    4
 19035 ;; This function calls:
 19036 ;;		_DimmerLights_SelectPointer
 19037 ;; This function is called by:
 19038 ;;		_DlyOff_Main
 19039 ;;		_Exception_Main
 19040 ;;		_setControl_Lights_Table
 19041 ;;		_setRFSW_Control
 19042 ;;		_setRFSW_AdjControl
 19043 ;; This function uses a non-reentrant model
 19044 ;;
 19045                           
 19046                           
 19047                           ;psect for function _getDimmerLights_Status
 19048  07F2                     _getDimmerLights_Status:	
 19049                           
 19050                           ;incstack = 0
 19051                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19052                           ;getDimmerLights_Status@lights stored from wreg
 19053  07F2  00F4               	movwf	getDimmerLights_Status@lights
 19054                           
 19055                           ;Dimmer_B1.c: 1074: DimmerLights_SelectPointer(lights);
 19056  07F3  0874               	movf	getDimmerLights_Status@lights,w
 19057  07F4  319C  2487         	fcall	_DimmerLights_SelectPointer
 19058                           
 19059                           ;Dimmer_B1.c: 1075: char status = DimmerLights->Status == 1 ? 1 : 0;
 19060  07F6  0A7B               	incf	_DimmerLights,w
 19061  07F7  0086               	movwf	6
 19062  07F8  3001               	movlw	1	; select bank2/3
 19063  07F9  0087               	movwf	7
 19064  07FA  3000               	movlw	0
 19065  07FB  1801               	btfsc	1,0
 19066  07FC  3001               	movlw	1
 19067  07FD  00F5               	movwf	getDimmerLights_Status@status
 19068                           
 19069                           ;Dimmer_B1.c: 1076: return status;
 19070  07FE  0875               	movf	getDimmerLights_Status@status,w
 19071  07FF  0008               	return
 19072  0800                     __end_of_getDimmerLights_Status:	
 19073                           
 19074                           	psect	text132
 19075  1C87                     __ptext132:	
 19076 ;; *************** function _DimmerLights_SelectPointer *****************
 19077 ;; Defined at:
 19078 ;;		line 614 in file "../src/Dimmer_B1.c"
 19079 ;; Parameters:    Size  Location     Type
 19080 ;;  lights          1    wreg     unsigned char 
 19081 ;; Auto vars:     Size  Location     Type
 19082 ;;  lights          1    3[COMMON] unsigned char 
 19083 ;; Return value:  Size  Location     Type
 19084 ;;		None               void
 19085 ;; Registers used:
 19086 ;;		wreg
 19087 ;; Tracked objects:
 19088 ;;		On entry : 0/0
 19089 ;;		On exit  : 0/0
 19090 ;;		Unchanged: 0/0
 19091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19095 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;Total ram usage:        2 bytes
 19097 ;; Hardware stack levels used:    1
 19098 ;; Hardware stack levels required when called:    3
 19099 ;; This function calls:
 19100 ;;		Nothing
 19101 ;; This function is called by:
 19102 ;;		_setDimmerLights_SwOn
 19103 ;;		_setDimmerLights_SwOff
 19104 ;;		_setDimmerLights_DimmingOn
 19105 ;;		_setDimmerLights_Main
 19106 ;;		_getDimmerLights_Status
 19107 ;;		_setDimmerLights_DimmingRun
 19108 ;;		_setDimmerLights_Status
 19109 ;; This function uses a non-reentrant model
 19110 ;;
 19111                           
 19112                           
 19113                           ;psect for function _DimmerLights_SelectPointer
 19114  1C87                     _DimmerLights_SelectPointer:	
 19115                           
 19116                           ;incstack = 0
 19117                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19118                           ;DimmerLights_SelectPointer@lights stored from wreg
 19119  1C87  00F3               	movwf	DimmerLights_SelectPointer@lights
 19120                           
 19121                           ;Dimmer_B1.c: 616: if (lights == 1) {
 19122  1C88  0873               	movf	DimmerLights_SelectPointer@lights,w
 19123  1C89  3A01               	xorlw	1
 19124  1C8A  1D03               	skipz
 19125  1C8B  2C91               	goto	l6312
 19126                           
 19127                           ;Dimmer_B1.c: 617: DimmerLights = &DimmerLights1;
 19128  1C8C  305B               	movlw	_DimmerLights1& (0+255)
 19129  1C8D  00F2               	movwf	??_DimmerLights_SelectPointer
 19130  1C8E  0872               	movf	??_DimmerLights_SelectPointer,w
 19131  1C8F  00FB               	movwf	_DimmerLights
 19132                           
 19133                           ;Dimmer_B1.c: 618: }
 19134  1C90  0008               	return
 19135  1C91                     l6312:	
 19136                           
 19137                           ;Dimmer_B1.c: 621: else if (lights == 2) {
 19138  1C91  0873               	movf	DimmerLights_SelectPointer@lights,w
 19139  1C92  3A02               	xorlw	2
 19140  1C93  1D03               	skipz
 19141  1C94  0008               	return
 19142                           
 19143                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights2;
 19144  1C95  3063               	movlw	_DimmerLights2& (0+255)
 19145  1C96  00F2               	movwf	??_DimmerLights_SelectPointer
 19146  1C97  0872               	movf	??_DimmerLights_SelectPointer,w
 19147  1C98  00FB               	movwf	_DimmerLights
 19148  1C99  0008               	return
 19149  1C9A                     __end_of_DimmerLights_SelectPointer:	
 19150                           
 19151                           	psect	text133
 19152  1AAC                     __ptext133:	
 19153 ;; *************** function _DelayOff_Initialization *****************
 19154 ;; Defined at:
 19155 ;;		line 26 in file "../src/DelayOff_B1.c"
 19156 ;; Parameters:    Size  Location     Type
 19157 ;;		None
 19158 ;; Auto vars:     Size  Location     Type
 19159 ;;		None
 19160 ;; Return value:  Size  Location     Type
 19161 ;;		None               void
 19162 ;; Registers used:
 19163 ;;		wreg, status,2, status,0, pclath, cstack
 19164 ;; Tracked objects:
 19165 ;;		On entry : 0/0
 19166 ;;		On exit  : 0/0
 19167 ;;		Unchanged: 0/0
 19168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19173 ;;Total ram usage:        0 bytes
 19174 ;; Hardware stack levels used:    1
 19175 ;; Hardware stack levels required when called:    5
 19176 ;; This function calls:
 19177 ;;		_DlyOff_Initialization
 19178 ;; This function is called by:
 19179 ;;		_main
 19180 ;; This function uses a non-reentrant model
 19181 ;;
 19182                           
 19183                           
 19184                           ;psect for function _DelayOff_Initialization
 19185  1AAC                     _DelayOff_Initialization:	
 19186                           
 19187                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19188                           
 19189                           ;incstack = 0
 19190                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19191  1AAC  3001               	movlw	1
 19192  1AAD  319A  2273  319A   	fcall	_DlyOff_Initialization
 19193                           
 19194                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19195  1AB0  3002               	movlw	2
 19196  1AB1  319A  2273         	fcall	_DlyOff_Initialization
 19197  1AB3  0008               	return
 19198  1AB4                     __end_of_DelayOff_Initialization:	
 19199                           
 19200                           	psect	text134
 19201  1A73                     __ptext134:	
 19202 ;; *************** function _DlyOff_Initialization *****************
 19203 ;; Defined at:
 19204 ;;		line 56 in file "../src/DelayOff_B1.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  sw              1    wreg     unsigned char 
 19207 ;; Auto vars:     Size  Location     Type
 19208 ;;  sw              1    4[COMMON] unsigned char 
 19209 ;; Return value:  Size  Location     Type
 19210 ;;		None               void
 19211 ;; Registers used:
 19212 ;;		wreg, status,2, status,0, pclath, cstack
 19213 ;; Tracked objects:
 19214 ;;		On entry : 0/0
 19215 ;;		On exit  : 0/0
 19216 ;;		Unchanged: 0/0
 19217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19221 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19222 ;;Total ram usage:        1 bytes
 19223 ;; Hardware stack levels used:    1
 19224 ;; Hardware stack levels required when called:    4
 19225 ;; This function calls:
 19226 ;;		_DelayOffPointSelect
 19227 ;; This function is called by:
 19228 ;;		_DelayOff_Initialization
 19229 ;; This function uses a non-reentrant model
 19230 ;;
 19231                           
 19232                           
 19233                           ;psect for function _DlyOff_Initialization
 19234  1A73                     _DlyOff_Initialization:	
 19235                           
 19236                           ;incstack = 0
 19237                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19238                           ;DlyOff_Initialization@sw stored from wreg
 19239  1A73  00F4               	movwf	DlyOff_Initialization@sw
 19240                           
 19241                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19242  1A74  0874               	movf	DlyOff_Initialization@sw,w
 19243  1A75  319C  24C2         	fcall	_DelayOffPointSelect
 19244  1A77  0008               	return
 19245  1A78                     __end_of_DlyOff_Initialization:	
 19246                           
 19247                           	psect	text135
 19248  1CC2                     __ptext135:	
 19249 ;; *************** function _DelayOffPointSelect *****************
 19250 ;; Defined at:
 19251 ;;		line 7 in file "../src/DelayOff_B1.c"
 19252 ;; Parameters:    Size  Location     Type
 19253 ;;  sw              1    wreg     unsigned char 
 19254 ;; Auto vars:     Size  Location     Type
 19255 ;;  sw              1    3[COMMON] unsigned char 
 19256 ;; Return value:  Size  Location     Type
 19257 ;;		None               void
 19258 ;; Registers used:
 19259 ;;		wreg
 19260 ;; Tracked objects:
 19261 ;;		On entry : 0/0
 19262 ;;		On exit  : 0/0
 19263 ;;		Unchanged: 0/0
 19264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19267 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19268 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19269 ;;Total ram usage:        2 bytes
 19270 ;; Hardware stack levels used:    1
 19271 ;; Hardware stack levels required when called:    3
 19272 ;; This function calls:
 19273 ;;		Nothing
 19274 ;; This function is called by:
 19275 ;;		_DlyOff_Initialization
 19276 ;;		_DlyOff_Main
 19277 ;;		_setDelayOff_GO
 19278 ;;		_getDelayOff_GO
 19279 ;; This function uses a non-reentrant model
 19280 ;;
 19281                           
 19282                           
 19283                           ;psect for function _DelayOffPointSelect
 19284  1CC2                     _DelayOffPointSelect:	
 19285                           
 19286                           ;incstack = 0
 19287                           ; Regs used in _DelayOffPointSelect: [wreg]
 19288                           ;DelayOffPointSelect@sw stored from wreg
 19289  1CC2  00F3               	movwf	DelayOffPointSelect@sw
 19290                           
 19291                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19292  1CC3  0873               	movf	DelayOffPointSelect@sw,w
 19293  1CC4  3A01               	xorlw	1
 19294  1CC5  1D03               	skipz
 19295  1CC6  2CCD               	goto	l6302
 19296                           
 19297                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19298  1CC7  30D0               	movlw	_DlySw1& (0+255)
 19299  1CC8  00F2               	movwf	??_DelayOffPointSelect
 19300  1CC9  0872               	movf	??_DelayOffPointSelect,w
 19301  1CCA  0021               	movlb	1	; select bank1
 19302  1CCB  00DA               	movwf	_DelayOff^(0+128)
 19303                           
 19304                           ;DelayOff_B1.c: 11: }
 19305  1CCC  0008               	return
 19306  1CCD                     l6302:	
 19307                           
 19308                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19309  1CCD  0873               	movf	DelayOffPointSelect@sw,w
 19310  1CCE  3A02               	xorlw	2
 19311  1CCF  1D03               	skipz
 19312  1CD0  0008               	return
 19313                           
 19314                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19315  1CD1  30D5               	movlw	_DlySw2& (0+255)
 19316  1CD2  00F2               	movwf	??_DelayOffPointSelect
 19317  1CD3  0872               	movf	??_DelayOffPointSelect,w
 19318  1CD4  0021               	movlb	1	; select bank1
 19319  1CD5  00DA               	movwf	_DelayOff^(0+128)
 19320  1CD6  0008               	return
 19321  1CD7                     __end_of_DelayOffPointSelect:	
 19322                           
 19323                           	psect	text136
 19324  1367                     __ptext136:	
 19325 ;; *************** function _Buzzer_Main *****************
 19326 ;; Defined at:
 19327 ;;		line 46 in file "../src/Buzzer_B1.c"
 19328 ;; Parameters:    Size  Location     Type
 19329 ;;		None
 19330 ;; Auto vars:     Size  Location     Type
 19331 ;;		None
 19332 ;; Return value:  Size  Location     Type
 19333 ;;		None               void
 19334 ;; Registers used:
 19335 ;;		wreg, status,2, status,0
 19336 ;; Tracked objects:
 19337 ;;		On entry : 0/0
 19338 ;;		On exit  : 0/0
 19339 ;;		Unchanged: 0/0
 19340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19345 ;;Total ram usage:        1 bytes
 19346 ;; Hardware stack levels used:    1
 19347 ;; Hardware stack levels required when called:    3
 19348 ;; This function calls:
 19349 ;;		Nothing
 19350 ;; This function is called by:
 19351 ;;		_main
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           
 19356                           ;psect for function _Buzzer_Main
 19357  1367                     _Buzzer_Main:	
 19358                           
 19359                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19360                           
 19361                           ;incstack = 0
 19362                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19363  1367  0021               	movlb	1	; select bank1
 19364  1368  1CBB               	btfss	_Buz1^(0+128),1
 19365  1369  0008               	return
 19366                           
 19367                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19368  136A  3001               	movlw	1
 19369  136B  07BC               	addwf	(_Buz1^(0+128)+1),f
 19370  136C  3000               	movlw	0
 19371  136D  3DBD               	addwfc	((_Buz1+1)^(0+128)+1),f
 19372                           
 19373                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19374  136E  0842               	movf	((_Buz1+1)^(0+128)+6),w
 19375  136F  023D               	subwf	((_Buz1+1)^(0+128)+1),w
 19376  1370  1D03               	skipz
 19377  1371  2B74               	goto	u8685
 19378  1372  0841               	movf	(_Buz1^(0+128)+6),w
 19379  1373  023C               	subwf	(_Buz1^(0+128)+1),w
 19380  1374                     u8685:	
 19381  1374  1C03               	skipc
 19382  1375  0008               	return
 19383                           
 19384                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19385  1376  01BC               	clrf	(_Buz1^(0+128)+1)
 19386  1377  01BD               	clrf	((_Buz1+1)^(0+128)+1)
 19387                           
 19388                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19389  1378  12BB               	bcf	_Buz1^(0+128),5
 19390  1379  0020               	movlb	0	; select bank0
 19391  137A  1D8D               	btfss	13,3	;volatile
 19392  137B  2B7E               	goto	l8344
 19393  137C  0021               	movlb	1	; select bank1
 19394  137D  16BB               	bsf	_Buz1^(0+128),5
 19395  137E                     l8344:	
 19396                           
 19397                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19398  137E  0021               	movlb	1	; select bank1
 19399  137F  1ABB               	btfsc	_Buz1^(0+128),5
 19400  1380  2BA6               	goto	l108
 19401                           
 19402                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19403  1381  08BE               	movf	(_Buz1^(0+128)+3),f
 19404  1382  1D03               	skipz
 19405  1383  2BA2               	goto	l109
 19406                           
 19407                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19408  1384  1DBB               	btfss	_Buz1^(0+128),3
 19409  1385  2B92               	goto	l110
 19410                           
 19411                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19412  1386  11BB               	bcf	_Buz1^(0+128),3
 19413                           
 19414                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19415  1387  083F               	movf	(_Buz1^(0+128)+4),w
 19416  1388  00F2               	movwf	??_Buzzer_Main
 19417  1389  0872               	movf	??_Buzzer_Main,w
 19418  138A  00BE               	movwf	(_Buz1^(0+128)+3)
 19419                           
 19420                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19421  138B  0844               	movf	((_Buz1+1)^(0+128)+8),w
 19422  138C  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 19423  138D  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 19424  138E  0843               	movf	(_Buz1^(0+128)+8),w
 19425  138F  01C1               	clrf	(_Buz1^(0+128)+6)
 19426  1390  07C1               	addwf	(_Buz1^(0+128)+6),f
 19427                           
 19428                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19429  1391  0008               	return
 19430  1392                     l110:	
 19431  1392  1E3B               	btfss	_Buz1^(0+128),4
 19432  1393  2BA0               	goto	l112
 19433                           
 19434                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19435  1394  123B               	bcf	_Buz1^(0+128),4
 19436                           
 19437                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19438  1395  0840               	movf	(_Buz1^(0+128)+5),w
 19439  1396  00F2               	movwf	??_Buzzer_Main
 19440  1397  0872               	movf	??_Buzzer_Main,w
 19441  1398  00BE               	movwf	(_Buz1^(0+128)+3)
 19442                           
 19443                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19444  1399  0846               	movf	((_Buz1+1)^(0+128)+10),w
 19445  139A  01C2               	clrf	((_Buz1+1)^(0+128)+6)
 19446  139B  07C2               	addwf	((_Buz1+1)^(0+128)+6),f
 19447  139C  0845               	movf	(_Buz1^(0+128)+10),w
 19448  139D  01C1               	clrf	(_Buz1^(0+128)+6)
 19449  139E  07C1               	addwf	(_Buz1^(0+128)+6),f
 19450                           
 19451                           ;Buzzer_B1.c: 62: } else {
 19452  139F  0008               	return
 19453  13A0                     l112:	
 19454                           
 19455                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19456  13A0  10BB               	bcf	_Buz1^(0+128),1
 19457                           
 19458                           ;Buzzer_B1.c: 64: }
 19459                           ;Buzzer_B1.c: 65: } else {
 19460  13A1  0008               	return
 19461  13A2                     l109:	
 19462                           
 19463                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19464  13A2  16BB               	bsf	_Buz1^(0+128),5
 19465                           
 19466                           ;Buzzer_B1.c: 68: RB3 = 1;
 19467  13A3  0020               	movlb	0	; select bank0
 19468  13A4  158D               	bsf	13,3	;volatile
 19469                           
 19470                           ;Buzzer_B1.c: 69: }
 19471                           ;Buzzer_B1.c: 70: } else {
 19472  13A5  0008               	return
 19473  13A6                     l108:	
 19474                           
 19475                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19476  13A6  12BB               	bcf	_Buz1^(0+128),5
 19477                           
 19478                           ;Buzzer_B1.c: 73: RB3 = 0;
 19479  13A7  0020               	movlb	0	; select bank0
 19480  13A8  118D               	bcf	13,3	;volatile
 19481                           
 19482                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19483  13A9  3001               	movlw	1
 19484  13AA  0021               	movlb	1	; select bank1
 19485  13AB  02BE               	subwf	(_Buz1^(0+128)+3),f
 19486  13AC  0008               	return
 19487  13AD                     __end_of_Buzzer_Main:	
 19488                           
 19489                           	psect	text137
 19490  1A51                     __ptext137:	
 19491 ;; *************** function _Buzzer_Initialization *****************
 19492 ;; Defined at:
 19493 ;;		line 11 in file "../src/Buzzer_B1.c"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;		None
 19496 ;; Auto vars:     Size  Location     Type
 19497 ;;		None
 19498 ;; Return value:  Size  Location     Type
 19499 ;;		None               void
 19500 ;; Registers used:
 19501 ;;		None
 19502 ;; Tracked objects:
 19503 ;;		On entry : 0/0
 19504 ;;		On exit  : 0/0
 19505 ;;		Unchanged: 0/0
 19506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19511 ;;Total ram usage:        0 bytes
 19512 ;; Hardware stack levels used:    1
 19513 ;; Hardware stack levels required when called:    3
 19514 ;; This function calls:
 19515 ;;		Nothing
 19516 ;; This function is called by:
 19517 ;;		_main
 19518 ;; This function uses a non-reentrant model
 19519 ;;
 19520                           
 19521                           
 19522                           ;psect for function _Buzzer_Initialization
 19523  1A51                     _Buzzer_Initialization:	
 19524                           
 19525                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19526                           
 19527                           ;incstack = 0
 19528                           ; Regs used in _Buzzer_Initialization: []
 19529  1A51  0021               	movlb	1	; select bank1
 19530  1A52  143B               	bsf	_Buz1^(0+128),0
 19531  1A53  0008               	return
 19532  1A54                     __end_of_Buzzer_Initialization:	
 19533                           
 19534                           	psect	intentry
 19535  0004                     __pintentry:	
 19536 ;; *************** function _ISR *****************
 19537 ;; Defined at:
 19538 ;;		line 116 in file "../src/MCU_B1.c"
 19539 ;; Parameters:    Size  Location     Type
 19540 ;;		None
 19541 ;; Auto vars:     Size  Location     Type
 19542 ;;		None
 19543 ;; Return value:  Size  Location     Type
 19544 ;;		None               void
 19545 ;; Registers used:
 19546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19547 ;; Tracked objects:
 19548 ;;		On entry : 0/0
 19549 ;;		On exit  : 0/0
 19550 ;;		Unchanged: 0/0
 19551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19555 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;Total ram usage:        1 bytes
 19557 ;; Hardware stack levels used:    1
 19558 ;; Hardware stack levels required when called:    2
 19559 ;; This function calls:
 19560 ;;		_IOC_ISR
 19561 ;;		_TMR1_ISR
 19562 ;; This function is called by:
 19563 ;;		Interrupt level 1
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567  0004                     _ISR:	
 19568                           
 19569                           ;incstack = 0
 19570                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19571  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19572  0005  3180               	pagesel	$
 19573  0006  0020               	movlb	0	; select bank0
 19574  0007  087F               	movf	127,w
 19575  0008  00F1               	movwf	??_ISR
 19576                           
 19577                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19578  0009  0021               	movlb	1	; select bank1
 19579  000A  1C11               	btfss	17,0	;volatile
 19580  000B  2812               	goto	i1l8930
 19581  000C  0020               	movlb	0	; select bank0
 19582  000D  1C11               	btfss	17,0	;volatile
 19583  000E  2812               	goto	i1l8930
 19584                           
 19585                           ;MCU_B1.c: 126: TMR1_ISR();
 19586  000F  319F  2708  3180   	fcall	_TMR1_ISR
 19587  0012                     i1l8930:	
 19588                           
 19589                           ;MCU_B1.c: 127: }
 19590                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19591  0012  198B               	btfsc	11,3	;volatile
 19592  0013  1C0B               	btfss	11,0	;volatile
 19593  0014  281A               	goto	i1l1383
 19594  0015  0027               	movlb	7	; select bank7
 19595  0016  1D16               	btfss	22,2	;volatile
 19596  0017  281A               	goto	i1l1383
 19597                           
 19598                           ;MCU_B1.c: 139: IOC_ISR();
 19599  0018  319B  231F         	fcall	_IOC_ISR
 19600  001A                     i1l1383:	
 19601                           ;MCU_B1.c: 140: }
 19602                           ;MCU_B1.c: 148: return;
 19603                           
 19604  001A  0871               	movf	??_ISR,w
 19605  001B  0020               	movlb	0	; select bank0
 19606  001C  00FF               	movwf	127
 19607  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19608  001E  0009               	retfie
 19609  001F                     __end_of_ISR:	
 19610                           
 19611                           	psect	text139
 19612  1F08                     __ptext139:	
 19613 ;; *************** function _TMR1_ISR *****************
 19614 ;; Defined at:
 19615 ;;		line 236 in file "../src/MCU_B1.c"
 19616 ;; Parameters:    Size  Location     Type
 19617 ;;		None
 19618 ;; Auto vars:     Size  Location     Type
 19619 ;;		None
 19620 ;; Return value:  Size  Location     Type
 19621 ;;		None               void
 19622 ;; Registers used:
 19623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19624 ;; Tracked objects:
 19625 ;;		On entry : 0/0
 19626 ;;		On exit  : 0/0
 19627 ;;		Unchanged: 0/0
 19628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19633 ;;Total ram usage:        0 bytes
 19634 ;; Hardware stack levels used:    1
 19635 ;; Hardware stack levels required when called:    1
 19636 ;; This function calls:
 19637 ;;		_DimmerLights_TMR_1
 19638 ;;		_DimmerLights_TMR_2
 19639 ;; This function is called by:
 19640 ;;		_ISR
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           
 19645                           ;psect for function _TMR1_ISR
 19646  1F08                     _TMR1_ISR:	
 19647                           
 19648                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19649                           
 19650                           ;incstack = 0
 19651                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19652  1F08  3196  261B  319F   	fcall	_DimmerLights_TMR_1
 19653                           
 19654                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 19655  1F0B  3196  267B  319F   	fcall	_DimmerLights_TMR_2
 19656                           
 19657                           ;MCU_B1.c: 268: Timer1.Count++;
 19658  1F0E  3001               	movlw	1
 19659  1F0F  0021               	movlb	1	; select bank1
 19660  1F10  07D4               	addwf	(_Timer1^(0+128)+1),f
 19661  1F11  3000               	movlw	0
 19662  1F12  3DD5               	addwfc	((_Timer1+1)^(0+128)+1),f
 19663                           
 19664                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19665  1F13  3001               	movlw	1
 19666  1F14  3ED3               	addlw	_Timer1& (0+255)
 19667  1F15  0086               	movwf	6
 19668  1F16  0187               	clrf	7
 19669  1F17  3F40               	moviw [0]fsr1
 19670  1F18  3AC8               	xorlw	200
 19671  1F19  1D03               	skipz
 19672  1F1A  2F1D               	goto	u878_25
 19673  1F1B  3F41               	moviw [1]fsr1
 19674  1F1C  3A00               	xorlw	0
 19675  1F1D                     u878_25:	
 19676  1F1D  1D03               	skipz
 19677  1F1E  2F22               	goto	i1l8398
 19678                           
 19679                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19680  1F1F  01D4               	clrf	(_Timer1^(0+128)+1)
 19681  1F20  01D5               	clrf	((_Timer1+1)^(0+128)+1)
 19682                           
 19683                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19684  1F21  1453               	bsf	_Timer1^(0+128),0
 19685  1F22                     i1l8398:	
 19686                           
 19687                           ;MCU_B1.c: 272: }
 19688                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19689  1F22  30FA               	movlw	250
 19690  1F23  0020               	movlb	0	; select bank0
 19691  1F24  0097               	movwf	23	;volatile
 19692                           
 19693                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19694  1F25  3038               	movlw	56
 19695  1F26  0096               	movwf	22	;volatile
 19696                           
 19697                           ;MCU_B1.c: 276: TMR1IF = 0;
 19698  1F27  1011               	bcf	17,0	;volatile
 19699  1F28  0008               	return
 19700  1F29                     __end_of_TMR1_ISR:	
 19701                           
 19702                           	psect	text140
 19703  167B                     __ptext140:	
 19704 ;; *************** function _DimmerLights_TMR_2 *****************
 19705 ;; Defined at:
 19706 ;;		line 1545 in file "../src/Dimmer_B1.c"
 19707 ;; Parameters:    Size  Location     Type
 19708 ;;		None
 19709 ;; Auto vars:     Size  Location     Type
 19710 ;;		None
 19711 ;; Return value:  Size  Location     Type
 19712 ;;		None               void
 19713 ;; Registers used:
 19714 ;;		wreg, status,2, status,0
 19715 ;; Tracked objects:
 19716 ;;		On entry : 0/0
 19717 ;;		On exit  : 0/0
 19718 ;;		Unchanged: 0/0
 19719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19724 ;;Total ram usage:        1 bytes
 19725 ;; Hardware stack levels used:    1
 19726 ;; This function calls:
 19727 ;;		Nothing
 19728 ;; This function is called by:
 19729 ;;		_TMR1_ISR
 19730 ;; This function uses a non-reentrant model
 19731 ;;
 19732                           
 19733                           
 19734                           ;psect for function _DimmerLights_TMR_2
 19735  167B                     _DimmerLights_TMR_2:	
 19736                           
 19737                           ;Dimmer_B1.c: 1547: if (DimmerIntr2.Start == 1) {
 19738                           
 19739                           ;incstack = 0
 19740                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 19741  167B  0022               	movlb	2	; select bank2
 19742  167C  1D20               	btfss	_DimmerIntr2^(0+256),2
 19743  167D  2E90               	goto	i1l985
 19744                           
 19745                           ;Dimmer_B1.c: 1548: DimmerIntr2.Count++;
 19746  167E  3001               	movlw	1
 19747  167F  00F0               	movwf	??_DimmerLights_TMR_2
 19748  1680  0870               	movf	??_DimmerLights_TMR_2,w
 19749  1681  07A2               	addwf	(_DimmerIntr2^(0+256)+2),f
 19750                           
 19751                           ;Dimmer_B1.c: 1550: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 19752  1682  0822               	movf	(_DimmerIntr2^(0+256)+2),w
 19753  1683  062B               	xorwf	(_DimmerIntr2^(0+256)+11),w
 19754  1684  1D03               	skipz
 19755  1685  2E88               	goto	i1l7856
 19756                           
 19757                           ;Dimmer_B1.c: 1551: DimmerIntr2.Count = 0;
 19758  1686  01A2               	clrf	(_DimmerIntr2^(0+256)+2)
 19759                           
 19760                           ;Dimmer_B1.c: 1552: DimmerIntr2.Start = 0;
 19761  1687  1120               	bcf	_DimmerIntr2^(0+256),2
 19762  1688                     i1l7856:	
 19763                           
 19764                           ;Dimmer_B1.c: 1553: }
 19765                           ;Dimmer_B1.c: 1601: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 19766  1688  0822               	movf	(_DimmerIntr2^(0+256)+2),w
 19767  1689  062A               	xorwf	(_DimmerIntr2^(0+256)+10),w
 19768  168A  1903               	btfsc	3,2
 19769                           
 19770                           ;Dimmer_B1.c: 1603: if (DimmerIntr2.ControlStatus == 1) {
 19771  168B  1DA0               	btfss	_DimmerIntr2^(0+256),3
 19772  168C  2EA1               	goto	i1l989
 19773                           
 19774                           ;Dimmer_B1.c: 1604: RB4 = 0;
 19775  168D  0020               	movlb	0	; select bank0
 19776  168E  120D               	bcf	13,4	;volatile
 19777                           
 19778                           ;Dimmer_B1.c: 1605: }
 19779                           ;Dimmer_B1.c: 1608: }
 19780                           ;Dimmer_B1.c: 1621: } else {
 19781  168F  2EA1               	goto	i1l989
 19782  1690                     i1l985:	
 19783                           
 19784                           ;Dimmer_B1.c: 1622: if (DimmerIntr2.GO == 1) {
 19785  1690  1C20               	btfss	_DimmerIntr2^(0+256),0
 19786  1691  2EA1               	goto	i1l989
 19787                           
 19788                           ;Dimmer_B1.c: 1623: DimmerIntr2.Count++;
 19789  1692  3001               	movlw	1
 19790  1693  00F0               	movwf	??_DimmerLights_TMR_2
 19791  1694  0870               	movf	??_DimmerLights_TMR_2,w
 19792  1695  07A2               	addwf	(_DimmerIntr2^(0+256)+2),f
 19793                           
 19794                           ;Dimmer_B1.c: 1624: if (DimmerIntr2.Count == 1) {
 19795  1696  0822               	movf	(_DimmerIntr2^(0+256)+2),w
 19796  1697  3A01               	xorlw	1
 19797  1698  1D03               	skipz
 19798  1699  2EA1               	goto	i1l989
 19799                           
 19800                           ;Dimmer_B1.c: 1625: DimmerIntr2.Count = 0;
 19801  169A  01A2               	clrf	(_DimmerIntr2^(0+256)+2)
 19802                           
 19803                           ;Dimmer_B1.c: 1626: DimmerIntr2.Start = 1;
 19804  169B  1520               	bsf	_DimmerIntr2^(0+256),2
 19805                           
 19806                           ;Dimmer_B1.c: 1627: DimmerIntr2.GO = 0;
 19807  169C  1020               	bcf	_DimmerIntr2^(0+256),0
 19808                           
 19809                           ;Dimmer_B1.c: 1628: if (DimmerIntr2.ControlStatus == 1) {
 19810  169D  1DA0               	btfss	_DimmerIntr2^(0+256),3
 19811  169E  2EA1               	goto	i1l989
 19812                           
 19813                           ;Dimmer_B1.c: 1629: RB4 = 1;
 19814  169F  0020               	movlb	0	; select bank0
 19815  16A0  160D               	bsf	13,4	;volatile
 19816  16A1                     i1l989:	
 19817                           
 19818                           ;Dimmer_B1.c: 1630: }
 19819                           ;Dimmer_B1.c: 1631: }
 19820                           ;Dimmer_B1.c: 1632: }
 19821                           ;Dimmer_B1.c: 1633: }
 19822                           ;Dimmer_B1.c: 1636: if (DimmerIntr2.Tune == 1) {
 19823  16A1  0022               	movlb	2	; select bank2
 19824  16A2  1CA0               	btfss	_DimmerIntr2^(0+256),1
 19825  16A3  0008               	return
 19826                           
 19827                           ;Dimmer_B1.c: 1637: DimmerIntr2.Tune = 0;
 19828  16A4  10A0               	bcf	_DimmerIntr2^(0+256),1
 19829                           
 19830                           ;Dimmer_B1.c: 1638: DimmerIntr2.TuneTime++;
 19831  16A5  3001               	movlw	1
 19832  16A6  00F0               	movwf	??_DimmerLights_TMR_2
 19833  16A7  0870               	movf	??_DimmerLights_TMR_2,w
 19834  16A8  07A3               	addwf	(_DimmerIntr2^(0+256)+3),f
 19835                           
 19836                           ;Dimmer_B1.c: 1639: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19837  16A9  0824               	movf	(_DimmerIntr2^(0+256)+4),w
 19838  16AA  0223               	subwf	(_DimmerIntr2^(0+256)+3),w
 19839  16AB  1C03               	skipc
 19840  16AC  0008               	return
 19841                           
 19842                           ;Dimmer_B1.c: 1640: DimmerIntr2.TuneTime = 0;
 19843  16AD  01A3               	clrf	(_DimmerIntr2^(0+256)+3)
 19844                           
 19845                           ;Dimmer_B1.c: 1641: DimmerIntr2.TuneGO = 1;
 19846  16AE  1721               	bsf	(_DimmerIntr2^(0+256)+1),6
 19847                           
 19848                           ;Dimmer_B1.c: 1642: if (DimmerIntr2.Dimming_Sw == 1) {
 19849  16AF  1E20               	btfss	_DimmerIntr2^(0+256),4
 19850  16B0  2EC7               	goto	i1l995
 19851                           
 19852                           ;Dimmer_B1.c: 1643: if (DimmerIntr2.Dimming_Status == 0) {
 19853  16B1  1AA0               	btfsc	_DimmerIntr2^(0+256),5
 19854  16B2  2EBE               	goto	i1l7894
 19855                           
 19856                           ;Dimmer_B1.c: 1644: if (DimmerIntr2.DimmingValue < ((char)(75*0.55))) {
 19857  16B3  3029               	movlw	41
 19858  16B4  0225               	subwf	(_DimmerIntr2^(0+256)+5),w
 19859  16B5  1803               	skipnc
 19860  16B6  2EBC               	goto	i1l997
 19861                           
 19862                           ;Dimmer_B1.c: 1645: DimmerIntr2.DimmingValue++;
 19863  16B7  3001               	movlw	1
 19864  16B8  00F0               	movwf	??_DimmerLights_TMR_2
 19865  16B9  0870               	movf	??_DimmerLights_TMR_2,w
 19866  16BA  07A5               	addwf	(_DimmerIntr2^(0+256)+5),f
 19867                           
 19868                           ;Dimmer_B1.c: 1646: } else {
 19869  16BB  0008               	return
 19870  16BC                     i1l997:	
 19871                           
 19872                           ;Dimmer_B1.c: 1647: DimmerIntr2.Dimming_Status = 1;
 19873  16BC  16A0               	bsf	_DimmerIntr2^(0+256),5
 19874                           
 19875                           ;Dimmer_B1.c: 1648: }
 19876                           ;Dimmer_B1.c: 1649: } else {
 19877  16BD  0008               	return
 19878  16BE                     i1l7894:	
 19879                           
 19880                           ;Dimmer_B1.c: 1650: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 19881  16BE  3003               	movlw	3
 19882  16BF  0225               	subwf	(_DimmerIntr2^(0+256)+5),w
 19883  16C0  1C03               	skipc
 19884  16C1  2EC5               	goto	i1l1000
 19885                           
 19886                           ;Dimmer_B1.c: 1651: DimmerIntr2.DimmingValue--;
 19887  16C2  3001               	movlw	1
 19888  16C3  02A5               	subwf	(_DimmerIntr2^(0+256)+5),f
 19889                           
 19890                           ;Dimmer_B1.c: 1652: } else {
 19891  16C4  0008               	return
 19892  16C5                     i1l1000:	
 19893                           
 19894                           ;Dimmer_B1.c: 1653: DimmerIntr2.Dimming_Status = 0;
 19895  16C5  12A0               	bcf	_DimmerIntr2^(0+256),5
 19896                           
 19897                           ;Dimmer_B1.c: 1654: }
 19898                           ;Dimmer_B1.c: 1655: }
 19899                           ;Dimmer_B1.c: 1656: } else if (DimmerIntr2.Dimming_RF == 1) {
 19900  16C6  0008               	return
 19901  16C7                     i1l995:	
 19902  16C7  1F20               	btfss	_DimmerIntr2^(0+256),6
 19903  16C8  0008               	return
 19904                           
 19905                           ;Dimmer_B1.c: 1657: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19906  16C9  0826               	movf	(_DimmerIntr2^(0+256)+6),w
 19907  16CA  0225               	subwf	(_DimmerIntr2^(0+256)+5),w
 19908  16CB  1803               	skipnc
 19909  16CC  2ED2               	goto	i1l7902
 19910                           
 19911                           ;Dimmer_B1.c: 1658: DimmerIntr2.DimmingValue++;
 19912  16CD  3001               	movlw	1
 19913  16CE  00F0               	movwf	??_DimmerLights_TMR_2
 19914  16CF  0870               	movf	??_DimmerLights_TMR_2,w
 19915  16D0  07A5               	addwf	(_DimmerIntr2^(0+256)+5),f
 19916                           
 19917                           ;Dimmer_B1.c: 1659: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19918  16D1  0008               	return
 19919  16D2                     i1l7902:	
 19920  16D2  0825               	movf	(_DimmerIntr2^(0+256)+5),w
 19921  16D3  0226               	subwf	(_DimmerIntr2^(0+256)+6),w
 19922  16D4  1803               	skipnc
 19923  16D5  2ED9               	goto	i1l1006
 19924                           
 19925                           ;Dimmer_B1.c: 1660: DimmerIntr2.DimmingValue--;
 19926  16D6  3001               	movlw	1
 19927  16D7  02A5               	subwf	(_DimmerIntr2^(0+256)+5),f
 19928                           
 19929                           ;Dimmer_B1.c: 1661: } else {
 19930  16D8  0008               	return
 19931  16D9                     i1l1006:	
 19932                           
 19933                           ;Dimmer_B1.c: 1662: DimmerIntr2.Dimming_RF = 0;
 19934  16D9  1320               	bcf	_DimmerIntr2^(0+256),6
 19935  16DA  0008               	return
 19936  16DB                     __end_of_DimmerLights_TMR_2:	
 19937                           
 19938                           	psect	text141
 19939  161B                     __ptext141:	
 19940 ;; *************** function _DimmerLights_TMR_1 *****************
 19941 ;; Defined at:
 19942 ;;		line 1380 in file "../src/Dimmer_B1.c"
 19943 ;; Parameters:    Size  Location     Type
 19944 ;;		None
 19945 ;; Auto vars:     Size  Location     Type
 19946 ;;		None
 19947 ;; Return value:  Size  Location     Type
 19948 ;;		None               void
 19949 ;; Registers used:
 19950 ;;		wreg, status,2, status,0
 19951 ;; Tracked objects:
 19952 ;;		On entry : 0/0
 19953 ;;		On exit  : 0/0
 19954 ;;		Unchanged: 0/0
 19955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19960 ;;Total ram usage:        1 bytes
 19961 ;; Hardware stack levels used:    1
 19962 ;; This function calls:
 19963 ;;		Nothing
 19964 ;; This function is called by:
 19965 ;;		_TMR1_ISR
 19966 ;; This function uses a non-reentrant model
 19967 ;;
 19968                           
 19969                           
 19970                           ;psect for function _DimmerLights_TMR_1
 19971  161B                     _DimmerLights_TMR_1:	
 19972                           
 19973                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Start == 1) {
 19974                           
 19975                           ;incstack = 0
 19976                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19977  161B  0021               	movlb	1	; select bank1
 19978  161C  1D47               	btfss	_DimmerIntr1^(0+128),2
 19979  161D  2E30               	goto	i1l956
 19980                           
 19981                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count++;
 19982  161E  3001               	movlw	1
 19983  161F  00F0               	movwf	??_DimmerLights_TMR_1
 19984  1620  0870               	movf	??_DimmerLights_TMR_1,w
 19985  1621  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 19986                           
 19987                           ;Dimmer_B1.c: 1385: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19988  1622  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 19989  1623  0652               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19990  1624  1D03               	skipz
 19991  1625  2E28               	goto	i1l7796
 19992                           
 19993                           ;Dimmer_B1.c: 1386: DimmerIntr1.Count = 0;
 19994  1626  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 19995                           
 19996                           ;Dimmer_B1.c: 1387: DimmerIntr1.Start = 0;
 19997  1627  1147               	bcf	_DimmerIntr1^(0+128),2
 19998  1628                     i1l7796:	
 19999                           
 20000                           ;Dimmer_B1.c: 1388: }
 20001                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20002  1628  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 20003  1629  0651               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20004  162A  1903               	btfsc	3,2
 20005                           
 20006                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 20007  162B  1DC7               	btfss	_DimmerIntr1^(0+128),3
 20008  162C  2E41               	goto	i1l960
 20009                           
 20010                           ;Dimmer_B1.c: 1418: RA7 = 0;
 20011  162D  0020               	movlb	0	; select bank0
 20012  162E  138C               	bcf	12,7	;volatile
 20013                           
 20014                           ;Dimmer_B1.c: 1419: }
 20015                           ;Dimmer_B1.c: 1422: }
 20016                           ;Dimmer_B1.c: 1424: } else {
 20017  162F  2E41               	goto	i1l960
 20018  1630                     i1l956:	
 20019                           
 20020                           ;Dimmer_B1.c: 1425: if (DimmerIntr1.GO == 1) {
 20021  1630  1C47               	btfss	_DimmerIntr1^(0+128),0
 20022  1631  2E41               	goto	i1l960
 20023                           
 20024                           ;Dimmer_B1.c: 1426: DimmerIntr1.Count++;
 20025  1632  3001               	movlw	1
 20026  1633  00F0               	movwf	??_DimmerLights_TMR_1
 20027  1634  0870               	movf	??_DimmerLights_TMR_1,w
 20028  1635  07C9               	addwf	(_DimmerIntr1^(0+128)+2),f
 20029                           
 20030                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Count == 1) {
 20031  1636  0849               	movf	(_DimmerIntr1^(0+128)+2),w
 20032  1637  3A01               	xorlw	1
 20033  1638  1D03               	skipz
 20034  1639  2E41               	goto	i1l960
 20035                           
 20036                           ;Dimmer_B1.c: 1428: DimmerIntr1.Count = 0;
 20037  163A  01C9               	clrf	(_DimmerIntr1^(0+128)+2)
 20038                           
 20039                           ;Dimmer_B1.c: 1429: DimmerIntr1.GO = 0;
 20040  163B  1047               	bcf	_DimmerIntr1^(0+128),0
 20041                           
 20042                           ;Dimmer_B1.c: 1430: DimmerIntr1.Start = 1;
 20043  163C  1547               	bsf	_DimmerIntr1^(0+128),2
 20044                           
 20045                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.ControlStatus == 1) {
 20046  163D  1DC7               	btfss	_DimmerIntr1^(0+128),3
 20047  163E  2E41               	goto	i1l960
 20048                           
 20049                           ;Dimmer_B1.c: 1433: RA7 = 1;
 20050  163F  0020               	movlb	0	; select bank0
 20051  1640  178C               	bsf	12,7	;volatile
 20052  1641                     i1l960:	
 20053                           
 20054                           ;Dimmer_B1.c: 1434: }
 20055                           ;Dimmer_B1.c: 1435: }
 20056                           ;Dimmer_B1.c: 1436: }
 20057                           ;Dimmer_B1.c: 1437: }
 20058                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Tune == 1) {
 20059  1641  0021               	movlb	1	; select bank1
 20060  1642  1CC7               	btfss	_DimmerIntr1^(0+128),1
 20061  1643  0008               	return
 20062                           
 20063                           ;Dimmer_B1.c: 1440: DimmerIntr1.Tune = 0;
 20064  1644  10C7               	bcf	_DimmerIntr1^(0+128),1
 20065                           
 20066                           ;Dimmer_B1.c: 1441: DimmerIntr1.TuneTime++;
 20067  1645  3001               	movlw	1
 20068  1646  00F0               	movwf	??_DimmerLights_TMR_1
 20069  1647  0870               	movf	??_DimmerLights_TMR_1,w
 20070  1648  07CA               	addwf	(_DimmerIntr1^(0+128)+3),f
 20071                           
 20072                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20073  1649  084B               	movf	(_DimmerIntr1^(0+128)+4),w
 20074  164A  024A               	subwf	(_DimmerIntr1^(0+128)+3),w
 20075  164B  1C03               	skipc
 20076  164C  0008               	return
 20077                           
 20078                           ;Dimmer_B1.c: 1443: DimmerIntr1.TuneTime = 0;
 20079  164D  01CA               	clrf	(_DimmerIntr1^(0+128)+3)
 20080                           
 20081                           ;Dimmer_B1.c: 1444: DimmerIntr1.TuneGO = 1;
 20082  164E  1748               	bsf	(_DimmerIntr1^(0+128)+1),6
 20083                           
 20084                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Dimming_Sw == 1) {
 20085  164F  1E47               	btfss	_DimmerIntr1^(0+128),4
 20086  1650  2E67               	goto	i1l966
 20087                           
 20088                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Dimming_Status == 0) {
 20089  1651  1AC7               	btfsc	_DimmerIntr1^(0+128),5
 20090  1652  2E5E               	goto	i1l7834
 20091                           
 20092                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.DimmingValue < ((char)(75*0.55))) {
 20093  1653  3029               	movlw	41
 20094  1654  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 20095  1655  1803               	skipnc
 20096  1656  2E5C               	goto	i1l968
 20097                           
 20098                           ;Dimmer_B1.c: 1448: DimmerIntr1.DimmingValue++;
 20099  1657  3001               	movlw	1
 20100  1658  00F0               	movwf	??_DimmerLights_TMR_1
 20101  1659  0870               	movf	??_DimmerLights_TMR_1,w
 20102  165A  07CC               	addwf	(_DimmerIntr1^(0+128)+5),f
 20103                           
 20104                           ;Dimmer_B1.c: 1449: } else {
 20105  165B  0008               	return
 20106  165C                     i1l968:	
 20107                           
 20108                           ;Dimmer_B1.c: 1450: DimmerIntr1.Dimming_Status = 1;
 20109  165C  16C7               	bsf	_DimmerIntr1^(0+128),5
 20110                           
 20111                           ;Dimmer_B1.c: 1451: }
 20112                           ;Dimmer_B1.c: 1452: } else {
 20113  165D  0008               	return
 20114  165E                     i1l7834:	
 20115                           
 20116                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 20117  165E  3003               	movlw	3
 20118  165F  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 20119  1660  1C03               	skipc
 20120  1661  2E65               	goto	i1l971
 20121                           
 20122                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue--;
 20123  1662  3001               	movlw	1
 20124  1663  02CC               	subwf	(_DimmerIntr1^(0+128)+5),f
 20125                           
 20126                           ;Dimmer_B1.c: 1455: } else {
 20127  1664  0008               	return
 20128  1665                     i1l971:	
 20129                           
 20130                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 0;
 20131  1665  12C7               	bcf	_DimmerIntr1^(0+128),5
 20132                           
 20133                           ;Dimmer_B1.c: 1457: }
 20134                           ;Dimmer_B1.c: 1458: }
 20135                           ;Dimmer_B1.c: 1459: } else if (DimmerIntr1.Dimming_RF == 1) {
 20136  1666  0008               	return
 20137  1667                     i1l966:	
 20138  1667  1F47               	btfss	_DimmerIntr1^(0+128),6
 20139  1668  0008               	return
 20140                           
 20141                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20142  1669  084D               	movf	(_DimmerIntr1^(0+128)+6),w
 20143  166A  024C               	subwf	(_DimmerIntr1^(0+128)+5),w
 20144  166B  1803               	skipnc
 20145  166C  2E72               	goto	i1l7842
 20146                           
 20147                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue++;
 20148  166D  3001               	movlw	1
 20149  166E  00F0               	movwf	??_DimmerLights_TMR_1
 20150  166F  0870               	movf	??_DimmerLights_TMR_1,w
 20151  1670  07CC               	addwf	(_DimmerIntr1^(0+128)+5),f
 20152                           
 20153                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20154  1671  0008               	return
 20155  1672                     i1l7842:	
 20156  1672  084C               	movf	(_DimmerIntr1^(0+128)+5),w
 20157  1673  024D               	subwf	(_DimmerIntr1^(0+128)+6),w
 20158  1674  1803               	skipnc
 20159  1675  2E79               	goto	i1l977
 20160                           
 20161                           ;Dimmer_B1.c: 1463: DimmerIntr1.DimmingValue--;
 20162  1676  3001               	movlw	1
 20163  1677  02CC               	subwf	(_DimmerIntr1^(0+128)+5),f
 20164                           
 20165                           ;Dimmer_B1.c: 1464: } else {
 20166  1678  0008               	return
 20167  1679                     i1l977:	
 20168                           
 20169                           ;Dimmer_B1.c: 1465: DimmerIntr1.Dimming_RF = 0;
 20170  1679  1347               	bcf	_DimmerIntr1^(0+128),6
 20171  167A  0008               	return
 20172  167B                     __end_of_DimmerLights_TMR_1:	
 20173                           
 20174                           	psect	text142
 20175  1B1F                     __ptext142:	
 20176 ;; *************** function _IOC_ISR *****************
 20177 ;; Defined at:
 20178 ;;		line 395 in file "../src/MCU_B1.c"
 20179 ;; Parameters:    Size  Location     Type
 20180 ;;		None
 20181 ;; Auto vars:     Size  Location     Type
 20182 ;;		None
 20183 ;; Return value:  Size  Location     Type
 20184 ;;		None               void
 20185 ;; Registers used:
 20186 ;;		status,2, status,0, pclath, cstack
 20187 ;; Tracked objects:
 20188 ;;		On entry : 0/0
 20189 ;;		On exit  : 0/0
 20190 ;;		Unchanged: 0/0
 20191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20196 ;;Total ram usage:        0 bytes
 20197 ;; Hardware stack levels used:    1
 20198 ;; Hardware stack levels required when called:    1
 20199 ;; This function calls:
 20200 ;;		_DimmerLights_IOC_1
 20201 ;;		_DimmerLights_IOC_2
 20202 ;; This function is called by:
 20203 ;;		_ISR
 20204 ;; This function uses a non-reentrant model
 20205 ;;
 20206                           
 20207                           
 20208                           ;psect for function _IOC_ISR
 20209  1B1F                     _IOC_ISR:	
 20210                           
 20211                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20212                           
 20213                           ;incstack = 0
 20214                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 20215  1B1F  0021               	movlb	1	; select bank1
 20216  1B20  1C2E               	btfss	_myMain^(0+128),0
 20217  1B21  2B27               	goto	i1l8408
 20218                           
 20219                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20220  1B22  319A  224D  319B   	fcall	_DimmerLights_IOC_1
 20221                           
 20222                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 20223  1B25  319A  224E         	fcall	_DimmerLights_IOC_2
 20224  1B27                     i1l8408:	
 20225                           
 20226                           ;MCU_B1.c: 416: }
 20227                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20228  1B27  0027               	movlb	7	; select bank7
 20229  1B28  1116               	bcf	22,2	;volatile
 20230                           
 20231                           ;MCU_B1.c: 419: IOCIF = 0;
 20232  1B29  100B               	bcf	11,0	;volatile
 20233  1B2A  0008               	return
 20234  1B2B                     __end_of_IOC_ISR:	
 20235                           
 20236                           	psect	text143
 20237  1A4E                     __ptext143:	
 20238 ;; *************** function _DimmerLights_IOC_2 *****************
 20239 ;; Defined at:
 20240 ;;		line 1669 in file "../src/Dimmer_B1.c"
 20241 ;; Parameters:    Size  Location     Type
 20242 ;;		None
 20243 ;; Auto vars:     Size  Location     Type
 20244 ;;		None
 20245 ;; Return value:  Size  Location     Type
 20246 ;;		None               void
 20247 ;; Registers used:
 20248 ;;		None
 20249 ;; Tracked objects:
 20250 ;;		On entry : 0/0
 20251 ;;		On exit  : 0/0
 20252 ;;		Unchanged: 0/0
 20253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20258 ;;Total ram usage:        0 bytes
 20259 ;; Hardware stack levels used:    1
 20260 ;; This function calls:
 20261 ;;		Nothing
 20262 ;; This function is called by:
 20263 ;;		_IOC_ISR
 20264 ;; This function uses a non-reentrant model
 20265 ;;
 20266                           
 20267                           
 20268                           ;psect for function _DimmerLights_IOC_2
 20269  1A4E                     _DimmerLights_IOC_2:	
 20270                           
 20271                           ;incstack = 0
 20272                           ; Regs used in _DimmerLights_IOC_2: []
 20273  1A4E  0008               	return
 20274  1A4F                     __end_of_DimmerLights_IOC_2:	
 20275                           
 20276                           	psect	text144
 20277  1A4D                     __ptext144:	
 20278 ;; *************** function _DimmerLights_IOC_1 *****************
 20279 ;; Defined at:
 20280 ;;		line 1472 in file "../src/Dimmer_B1.c"
 20281 ;; Parameters:    Size  Location     Type
 20282 ;;		None
 20283 ;; Auto vars:     Size  Location     Type
 20284 ;;		None
 20285 ;; Return value:  Size  Location     Type
 20286 ;;		None               void
 20287 ;; Registers used:
 20288 ;;		None
 20289 ;; Tracked objects:
 20290 ;;		On entry : 0/0
 20291 ;;		On exit  : 0/0
 20292 ;;		Unchanged: 0/0
 20293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20298 ;;Total ram usage:        0 bytes
 20299 ;; Hardware stack levels used:    1
 20300 ;; This function calls:
 20301 ;;		Nothing
 20302 ;; This function is called by:
 20303 ;;		_IOC_ISR
 20304 ;; This function uses a non-reentrant model
 20305 ;;
 20306                           
 20307                           
 20308                           ;psect for function _DimmerLights_IOC_1
 20309  1A4D                     _DimmerLights_IOC_1:	
 20310                           
 20311                           ;incstack = 0
 20312                           ; Regs used in _DimmerLights_IOC_1: []
 20313  1A4D  0008               	return
 20314  1A4E                     __end_of_DimmerLights_IOC_1:	
 20315  007E                     btemp	set	126	;btemp
 20316  007E                     pic14e$flags	set	126
 20317  007E                     wtemp	set	126
 20318  007E                     wtemp0	set	126
 20319  0080                     wtemp1	set	128
 20320  0082                     wtemp2	set	130
 20321  0084                     wtemp3	set	132
 20322  0086                     wtemp4	set	134
 20323  0088                     wtemp5	set	136
 20324  007F                     wtemp6	set	127
 20325  007E                     ttemp	set	126
 20326  007E                     ttemp0	set	126
 20327  0081                     ttemp1	set	129
 20328  0084                     ttemp2	set	132
 20329  0087                     ttemp3	set	135
 20330  007F                     ttemp4	set	127
 20331  007E                     ltemp	set	126
 20332  007E                     ltemp0	set	126
 20333  0082                     ltemp1	set	130
 20334  0086                     ltemp2	set	134
 20335  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      79
    BANK3            80      4      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK2[8]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  155662
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4993
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4993
                                             61 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4531
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4531
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46848
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   46848
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   42496
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4567
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   37734
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11103
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21378
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2238
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2077
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3590
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   49819
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   49564
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   28137
                                             69 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20908
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     355
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27147
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   27147
                                             58 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5159
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5159
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
     _DimmerLights_IOC_2
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     184      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     184      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Feb 24 09:03:14 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1CEC  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l98 13DC                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F6D                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006D  
                          setTemp_Main@AD 0064                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1B85                    __end_of_setDelayOff_GO 0D3C  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 179C  
                    _setDimmerLights_Line 1D55                              ___ftadd@sign 0043  
                                     l100 13EE                                       l110 1392  
                                     l112 13A0                                       l108 13A6  
                                     l109 13A2                      _setDimmerLights_SwOn 14AA  
                                     l327 1DBB                                       l328 1DBD  
                                     l371 1FB9                                       l259 0945  
                                     l581 0A42                                       l913 1D61  
                                     l757 1CAC                                       l918 1B8C  
                                     l919 1B92                                       l857 1E9E  
                                     l884 05B0                                       _GIE 005F  
                                     _CRC 00D8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RA4 0064  
                                     _LED 00DC                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00D6  
                                     _Cmd 00D9              getDimmerLights_Status@lights 0074  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1DC8  
                   _Buzzer_Initialization 1A51                           __end_of_ADC_Set 1AA5  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 10AB  
             _setDimmerIntr_ControlStatus 1082                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1B2B                     _setDimmerLights_OnOff 052C  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0028  
                            ___ftdiv@sign 0035                                      l1112 1E3B  
                                    l1113 1E44                                      l2003 0E05  
                                    l2008 0E8A                                      l1146 1314  
                                    l1147 131B                                      l1420 12DC  
                                    l1434 10F7                                      l2410 0B2C  
                                    l1444 0BA3                                      l2432 077B  
                                    l2441 07F1                                      l2425 1186  
                                    l1633 083A                            _Load_Main$4147 0023  
                                    l2370 0653                                      l3164 1724  
                         __end_of_IOC_Set 1AE9                                      l2365 06AB  
                                    l3158 170D                                      l1662 1150  
                                    l1823 01ED                                      l1657 113B  
                                    l1833 01C9                                      l1825 008B  
                                    l2369 0612                                      l1658 1154  
                                    l1834 01C7                                      l1826 0087  
                                    l3187 0403                                      l1827 0082  
                                    l2395 1BA8                                      l6200 16E3  
                                    l1689 052B                                      l1698 1CEB  
                                    l2762 1D32                                      l6204 16EA  
                                    l6302 1CCD                                      l6214 1712  
                                    l6206 16F4                                      l6312 1C91  
                                    l6216 171A                                      l6208 16F9  
                                    l7024 1097                                      l7032 1D8E  
                                    l7112 15D0                                      l2784 035A  
                                    l6402 0427                                      l7042 1CA3  
                                    l6322 1C39                                      l7122 15E0  
                                    l7130 15EC                                      l2786 0238  
                                    l6412 0442                                      l7052 1FA3  
                                    l7108 15CA                                      l7116 15D6  
                                    l1997 0E92                                      l6422 0D53  
                                    l6318 1C33                                      l7142 160A  
                                    l7126 15E6                                      l6352 038C  
                                    l7072 1137                                      l7152 1BE4  
                                    l9010 140B                                      l6362 03A2  
                                    l6450 0DC3                                      l6442 0DAA  
                                    l6522 0C42                                      l7082 114C  
                                    l7074 113F                                      l7138 1604  
                                    l7146 1610                                      l6380 03CF  
                                    l6356 0393                                      l6428 0D69  
                                    l6540 0C72                                      l7156 1BEA  
                   _setDimmerLights_SwOff 122A                                      l2997 1E56  
                                    l6382 03D9                                      l6374 03BC  
                                    l6470 0EC3                                      l6550 0C96  
                                    l6542 0C80                                      l7350 11AA  
                                    l7158 1BEF                                      l8230 1D3D  
                                    l6640 1256                                      l9016 1416  
                                    l6392 03F5                                      l6384 03DE  
                                    l6464 0EAD                                      l6552 0C99  
                                    l7360 11B9                                      l7352 11AC  
                                    l6720 15A7                                      l6704 10C0  
                                    l9042 144D                                      l9034 143C  
                                    l9026 141E                                      l6394 03FF  
                                    l6386 03E2                                      l6482 0EFE  
                                    l7362 11BD                                      l7338 1198  
                                    l6802 1076                                      l8226 1D37  
                                    l9028 142A                                      l9124 14BC  
                                    l6556 0CA7                                      l6548 0C8D  
                                    l8324 1E50                                      l6804 107B  
                                    l7604 1D4B                                      l7620 1ED7  
                                    l9038 1445                                      l9134 14CD  
                                    l9126 14BF                                      l6398 0415  
                                    l6494 0F1A                                      l6486 0F06  
                                    l6662 0CEE                                      l7630 1EE6  
                                    l8344 137E                                      l9144 14F5  
                                    l9136 14D2                                      l6672 0D1E  
                                    l7720 1EB2                                      l9160 1DEB  
                                    l6816 1FCA                                      l9400 0919  
                                    l7544 1C5E                                      l9232 0BC7  
                                    l9216 1294                                      l9146 14FA  
                                    l9082 1F34                                      l6498 0F22  
                                    l7730 1EC2                                      l9162 1DEE  
                                    l6818 1FD5                                      l9250 1F77  
                                    l9242 0C15                                      l7618 1ED5  
                                    l8514 0A87                                      l8506 0A68  
                                    l6852 1CD9                                      l6676 0D32  
                                    l7652 121A                                      l7644 11FC  
                                    l7732 1EC6                                      l9252 1F7A  
                                    l9404 091F                                      l9228 0BC2  
                                    l7628 1EE2                                      l7646 1208  
                                    l9166 1DF4                                      l9182 1F5D  
                                    l9430 0959                                      l9422 094C  
                                    l8534 0AB6                                      l8518 0A8F  
                                    l8550 11E6                                      l6696 1D77  
                                    l6856 1CE6                                      l9520 058A  
                                    l7656 1223                                      l9176 1F54  
                                    l9280 134B                                      l9256 1F80  
                                    l9432 095C                                      l9424 094F  
                                    l9514 056D                                      l9178 1F57  
                                    l9290 135B                                      l9418 092E  
                                    l9516 0582                                      l9524 0592  
                                    l9620 10E2                                      l9284 1351  
                                    l9460 1757                                      l9436 0962  
                                    l9428 0955                                      l9380 07CC  
                   _myMain_Initialization 1BB2                                      l9198 1B83  
                                    l9542 05C2                                      l9294 1361  
                                    l9278 1348                                      l9454 174E  
                                    l9382 07D0                                      l9374 078A  
                                    l9366 0766                                      l9390 07DC  
                                    l9800 0B34                                      l9288 1358  
                                    l9456 1751                                      l9384 07D4  
                                    l9376 0790                                      l9562 146D  
                                    l9538 05BE                                      l9386 07D8  
                                    l9378 07AB                                      l9740 09D1  
                                    l9556 05EC                                      l9476 1766  
                                    l9726 0990                                      l9814 0B9C  
                                    l9806 0B48                                      l9478 177C  
                                    l9398 0916                                      l9662 0AD1  
                                    l7982 1E04                                      l9728 099F  
                                    l7984 1E07                                      _CFGS 0CAE  
                                    l9738 09C2                                      l9770 17F4  
                                    l9690 0B08                                      l9674 0AEA  
                                    l9922 064E                                      l9756 17C2  
                                    l9844 0E17                                      l7988 1E0C  
                                    l9758 17C8                                      l9678 0AF3  
                                    l9950 068C                                      l9838 0E08  
                                    l9846 0E1A                                      l9768 17EE  
                                    l9936 0662                              __CFG_WDTE$ON 0000  
                                    l9788 1C4D                                      l9964 06A4  
                                    l9876 0E62                                      l9982 0222  
                                    l9886 0E77                                      l9888 0E79  
                                    l9998 0265                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u6000 1567  
                                    u6005 1565                                      u6105 1FBF  
                                    _PEIE 005E                                      u5325 03D0  
                                    u5355 03E3                                      u5605 0F23  
                                    u5295 03BD                                      u5455 0D7B  
                                    u5615 0F29                                      u5535 0ECF  
                                    u7055 1D25                                      u4905 16EF  
                                    u5385 03F6                                      u5465 0D8B  
                                    u5545 0EDF                                      u5475 0DAB  
                                    u5715 0C8E                                      u4925 1708  
                                    u5485 0DBA                                      u5565 0F07  
                                    u5495 0DC4                                      u5575 0F0D  
                                    u5655 0C49                                      u7415 1209  
                                    u4945 1715                                      u7425 1213  
                                    u7435 121B                                      u5685 0C73  
                                    u9045 11DE                                      u4975 172B  
                                    u5945 0CFA                                      u7395 11FF  
                                    u8645 1E57                                      u8655 1E5C  
                                    u8685 1374                                      u9805 142B  
                                    u9815 1435                                      u9825 143D  
                                    u9905 1CFB                                      u8945 0A77  
                                    _LWLO 0CAD                                      u9785 1421  
                                    u8995 0AA6                                      _RSSI 00DE  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1DB0                _setDimmerLights_DimmingRun 1D99  
                                    _Buz1 00BB                                      _Load 0133  
                                    _Temp 00E6                                      _main 1502  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0A49  
                         __end_of_RF_Main 1A5D                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1ADF  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0C29  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2415 0074      _getDimmerLights_Allow_Condition$2416 0075  
    _getDimmerLights_Allow_Condition$2417 0076                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 11BF  __size_of_getDimmerLights_Allow_Condition 0035  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 118A                    _getDimmerLights_Status 07F2  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1B5B  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00DB  
                                   l10022 02D5                                     l10008 0297  
                                   l10032 0307                                     l10202 008A  
                                   l10116 12BB                                     l10224 00E0  
                                   l10152 081C                                     l10074 1EA0  
                                   l10090 0724                                     l10250 0154  
                                   l10218 00AE                                     l10316 01DC  
                                   l10260 017D                                     l10270 0199  
                                   l10352 0488                                     l10280 01AF  
                                   l10256 0163                                     l10264 0189  
                                   l10184 0069                                     l10440 1531  
                                   l10346 0479                                     l10364 04BE  
                                   l10356 0497                                     l10436 1526  
                                   l10382 04FF                                     l10366 049A  
                                   l10384 04DB                                     l10368 04C6  
                                   l10386 0507                                     l10394 0521  
                                   l10388 0511                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005D  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E2  
                         __end_of___awdiv 1454                           __end_of___ftadd 045A  
                         __end_of___ftdiv 0DE5                           __end_of___ftneg 1ACD  
                         __end_of___ftmul 0F4A                                     u11205 067B  
                                   u11065 0E4B                           ___awdiv@divisor 0072  
                                   u11085 0E69                                     u11175 062E  
                                   _T1CON 0018                           __end_of___fttol 0CB0  
                                   u11525 12D3                                     u11715 00AC  
                                   u11725 00DE                                     u11815 0190  
                                   u11735 0113                                     u11575 0832  
                                   u11950 04C4                                     u11955 04A3  
                                   u11980 0505                                     _IOCBF 0396  
                                   u11985 04E4                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 122A  
                                   i1l960 1641                                     i1l971 1665  
                                   i1l956 1630                                     i1l966 1667  
                                   i1l968 165C                                     i1l977 1679  
                                   i1l985 1690                                     i1l995 16C7  
                                   i1l997 16BC                                     i1l989 16A1  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1D2B                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 0906   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 08A1                                     _Light 00DD  
                        __end_of_TMR1_ISR 1F29                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1B67  
                                   _getAD 1DFC                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1C31  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BA3                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 1C01                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1C42  
                      _setRF_DimmerLights 155D               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 005E               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 155D  
                     ?_setRF_DimmerLights 005D                          __end_of_Fosc_Set 1A67  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0065                            _Exception_Main 045A  
                        ?_CC2500_WriteREG 0074                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1AA5                                    ??_main 007A  
                           ___fttol@sign1 004E                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 005A  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0765  
                          _setMemory_Data 1AFE                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 1454  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00C7                               _DimmerIntr2 0120  
                _getMain_All_LightsStatus 1B76                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1CEC                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09DA  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1A97  
                               ??_WDT_Set 0072                          __end_of___awtoft 1F4B  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 173B  
                _getMain_All_Error_Status 1128                                    _IOCBF2 1CB2  
                                  i1l1000 16C5                                    i1l1006 16D9  
                                  i1l1383 001A                                    i1l8408 1B27  
                                  i1l7902 16D2                                    i1l7842 1672  
                                  i1l7834 165E                                    i1l8398 1F22  
                                  i1l7856 1688                                    i1l8930 0012  
                                  i1l7796 1628                                    i1l7894 16BE  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0078  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01A0  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1DC8                                    _WDTCON 0097  
                                  u878_25 1F1D                        DelayTime_1us@count 0072  
                    Exception_Main@i_3781 002B            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 1D16  
                                  _Dimmer 012C                                    _DlySw1 01D0  
                                  _DlySw2 01D5             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1BF1                __end_of_Mcu_Initialization 1C87  
                     __end_of_Buzzer_Main 13AD                                    _Memory 0220  
                                  _Timer1 00D3                                    ___bmul 1C31  
                  __end_of_Exception_Main 052C                      Exception_Main@lights 002D  
                                  ___wmul 1E4E                                 ??___awdiv 0076  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00E4  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1EC8  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0020         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1EA8  
                                  _s_data 00E5                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 15BC                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1B09  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 13AD                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 1A57  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 10D4  
        __end_of_setDimmerIntr_Dimming_Sw 1FB5                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1FDA                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1C21  
             getMain_Lights_Count@status1 0073               getMain_Lights_Count@status2 0074  
             __size_of_DimmerLights_IOC_1 0001               __size_of_DimmerLights_IOC_2 0001  
                   __end_of_SwPointSelect 1D55               __size_of_DimmerLights_TMR_1 0060  
             __size_of_DimmerLights_TMR_2 0060              __size_of_Flash_Memory_Modify 007D  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0072  
                      setTemp_Main@TempGO 005F                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1D2B  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 005A           getDimmerIntr_DimmingValue@value 0073  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$5569 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2338 0026  
               _setDimmerLights_SwOn$2347 0027                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1EE8                             __end_of_getAD 1E16  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1B43                           _getSw_KeyStatus 1EC8  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0063  
           ??_Flash_Memory_Initialization 0076                      _getMain_Lights_Count 1B94  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F3  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1D6B                __end_of_set_TimeoutCleared 1A7D  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0073  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1B2B                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1A5D                        ??_CC2500_WriteByte 0072  
                              __pbssBANK0 006D                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1367                         ??_setRFSW_Control 0065  
             ?_setDimmerLights_DimmingRun 0074                         __end_of_Temp_Main 1A63  
                                 ?_IO_Set 0070                            ??_my_MainTimer 0079  
                              ??_LED_Main 0077                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1AAC                             ??_Switch_Main 007A  
                          DelayTime_1us@i 0074                            DelayTime_1us@j 0076  
                    ??_LED_Initialization 0077                              _DimmerLights 007B  
                       LedPointSelect@led 0073     getAll_DimmerIntr_Dimming_Sw_RF@status 0075  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1502                            _getDelayOff_GO 1B67  
                     _CC2500_WriteCommand 1DE2                      ?_Temp_Initialization 0070  
                                 ?___bmul 0072                          ??_setDelayOff_GO 005F  
       __end_of_DimmerIntr_Initialization 09DA             ??_DimmerLights_Initialization 007A  
                                 ?___wmul 0072                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0A49  
                              ??_TMR1_Set 0072                                __pintentry 0004  
                  ??_setSw_Initialization 0076                                _getLoad_OK 1A89  
                      __size_of_setTxData 00B6                                   ?_setLED 0074  
                  __size_of_DelayTime_1us 0025                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1A9E                                   ?_setBuz 0024  
                               ?___awtoft 0020                                 ?___ftpack 0072  
                              _getTemp_AD 11BF        __end_of_DimmerLights_SelectPointer 1C9A  
              _DimmerLights_SelectPointer 1C87                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 1AF3                        _setRFSW_AdjControl 0BAB  
                  __end_of_setProductData 1B37             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 1B1F                                   _IOC_Set 1ADF  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0062  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 12A1                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1CAE                    __size_of_CC2500_RxData 0061  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1A5A  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1AD6           __end_of_setControl_Lights_Table 07F2  
                         setRF_Main@error 006B                    __size_of_setCmd_Status 0015  
                              ??_Fosc_Set 0072                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 14AA                   ??_setLoad_AH_AL_Restore 0072  
                     getCmd_Status@number 0072              __end_of_CC2500_FrequencyCabr 1B14  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0074  
       __size_of_setDimmerIntr_Dimming_RF 0029         __size_of_setDimmerIntr_Dimming_Sw 0025  
                       __end_of_getBuz_GO 1C11                 ?_setDimmerIntr_Dimming_RF 0072  
                     ??_Flash_Memory_Main 0078                 ?_setDimmerIntr_Dimming_Sw 0072  
                     ??_Flash_Memory_Read 0072                    __end_of_getDelayOff_GO 1B76  
                                 _VarLED1 01DA                                   _VarLED2 01DE  
          __end_of_getDimmerLights_Status 0800                         __end_of_getRxData 0B2E  
                 __end_of_getSw_KeyStatus 1EE8                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0072                      ??_setRFSW_AdjControl 005D  
                          ??_setTemp_Main 005D                           __size_of___bmul 0011  
                     setProductData@value 005A                                   ___awdiv 1400  
                                 ___ftadd 0364                                   ___ftdiv 0D3C  
                                 ___ftneg 1AC4                           __size_of___wmul 001D  
                                 ___ftmul 0E96                                   ___fttol 0C29  
                     __end_of_Switch_Main 1B1F                                   ___lwdiv 11F4  
              ??_getMain_All_LightsStatus 0072                   ??_Buzzer_Initialization 0072  
                         _getRF_KeyStatus 1C53                                ??___awtoft 0023  
                              ??___ftpack 0077                           __size_of_setLED 005F  
                    setRFSW_AdjControl@sw 0060                           __size_of_setBuz 0053  
                                 __ptext1 0804                                   __ptext2 1BB2  
                                 __ptext3 11BF                                   __ptext4 0A49  
                                 __ptext5 1DFC                                   __ptext6 1C21  
                                 __ptext7 0002                                   __ptext8 1A60  
                                 __ptext9 0DE5                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0066                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 12E2                 __end_of_Flash_Memory_Read 1CC2  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 05EF  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 1AB4  
                       _DimmerLights_Main 1E88            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 1A78                __end_of_CC2500_ClearRXFIFO 1A6F  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 1A73  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 006C                            _LedPointSelect 1E31  
               getAll_Sw_KeyStatus@status 0073                           getTemp_AD@ADRES 0078  
                     _DelayOffPointSelect 1CC2                                   clrloop0 1A84  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 1AC4  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0075  
                       _CC2500_InitSetREG 10FE                             _DelayTime_1us 1FB5  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 10FE  
      __size_of_setDimmerLights_DimmingOn 0026                                   init_ram 1A7D  
              __end_of_setRF_TransceiveGO 1BE1                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 007A                      Flash_Memory_Read@ret 0075  
                                 initloop 1A7E                                _setSw_Main 01F3  
                   CC2500_ReadByte@loop_b 0073                    setDimmerLights_SwOn@sw 0029  
                       _CC2500_ReadStatus 1F6D                      Flash_Memory_Modify@i 0077  
                   _setLED_Initialization 1BF1                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0076                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001C                             _CC2500_RxData 173B  
                           _CC2500_TxData 0906                       ??_CC2500_InitSetREG 0077  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B2E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0072  
                            __pstringtext 1000                             _setCmd_Status 1CD7  
                     _Flash_Memory_Unlock 1ACD                       ??_CC2500_ReadStatus 0074  
                 CC2500_InitSetREG@loop_c 0022                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0076  
                 setTemp_Main@DangerValue 0062                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1EA8                        _Mcu_Initialization 1C75  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1A6B  
                    __end_of_my_MainTimer 083C                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1E4E  
                __size_of_CC2500_WriteREG 0022                  Load_Main@ErrorCountValue 0025  
        setDimmerIntr_DimmingValue@lights 005C          getDimmerIntr_DimmingValue@lights 0074  
               __end_of_CC2500_InitSetREG 1128                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 005F  
                          ?_DelayTime_1us 0072                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1F90  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0074  
         getMain_All_Error_Status@command 0077                               ___ftdiv@exp 0034  
       __end_of_setDimmerLights_DimmingOn 2000                          ??_Exception_Main 0079  
                          __end_of_IO_Set 1DE2                      _setRF_Initialization 1AE9  
                      _setMemory_LoopSave 1C11                               _Switch_Main 1B14  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1C64                          ??_setMemory_Data 0073  
                             ___ftmul@exp 0030                     _CC2500_PowerOnInitial 1D01  
             ??_DimmerIntr_Initialization 005A                      ??_Mcu_Initialization 0073  
             __end_of_getAll_Sw_KeyStatus 1C53                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1C42  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1E6B                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0064  
                          __end_of_setLED 161B             __size_of_setDimmerLights_Line 0016  
           __size_of_setDimmerLights_SwOn 0058                            __end_of_setBuz 1400  
              __end_of_DimmerLights_IOC_1 1A4E                __end_of_DimmerLights_IOC_2 1A4F  
                    _CC2500_FrequencyCabr 1B09                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 1261  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 167B  
              __end_of_DimmerLights_TMR_2 16DB                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1A90                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1E88           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 08A1   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 083C                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1A78  
       __end_of_setDimmerIntr_MaxmumValue 1D82                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 016B  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0035  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1A60                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00DF  
                   setProductData@address 005C                       Exception_Main@count 0027  
                     Exception_Main@error 0028                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1B85                                 _Tx_Length 00E2  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1156  
                        _CC2500_SIDLEMode 0800                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 0026  
                               ___latbits 0003                          _setMemory_Modify 1BC1  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
               setRF_TransceiveGO@command 0073                             __pcstackBANK3 01E2  
                    ??_set_TimeoutCleared 0072                 _DimmerIntr_Initialization 096E  
                         ??_DelayTime_1us 0074                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 005F                         ??_CC2500_PowerRST 0078  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0073                              ??_TouchPower 0072  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0023  
          setDimmerIntr_MaxmumValue@value 005A               setDimmerLights_DimmingOn@sw 0074  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 015B                             _DimmerLights2 0163  
                   CC2500_WriteREG@w_addr 0076                     setDelayOff_GO@command 005D  
          __size_of_setLoad_AH_AL_Restore 001B                           ??_CC2500_RxData 0076  
           __end_of_setLoad_AH_AL_Restore 1E31                  setRFSW_AdjControl@status 005F  
                         ??_CC2500_TxData 0076                                 __pnvBANK0 006C  
                          getRxData@error 0069               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 1A67                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00C0                          ___lwdiv@dividend 0074  
                   DelayOffPointSelect@sw 0073                             _getCmd_Status 1BE1  
                              setBuz@time 0024                           ??_setCmd_Status 0073  
                     setDelayOff_GO@value 005E                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0022  
                  _setTemp_Initialization 1A50                                 _getBuz_GO 1C01  
                ?_setDimmerLights_Dimming 0062       __end_of_Flash_Memory_Initialization 0765  
             _Flash_Memory_Initialization 06AF                                  ?___awdiv 0072  
                               __ptext100 1454                                 __ptext101 0F4A  
                               __ptext110 1128                                 __ptext102 1BD1  
                               __ptext111 1AF3                                 __ptext103 155D  
                               __ptext120 0D3C                                 __ptext112 1A4F  
                               __ptext104 1D55                                 __ptext121 0364  
                               __ptext113 096E                                 __ptext105 1D6B  
                               __ptext130 122A                                 __ptext122 1F29  
                               __ptext114 1BC1                                 __ptext106 1F90  
                               __ptext131 07F2                                 __ptext123 16DB  
                               __ptext115 08A1                                 __ptext107 1C9A  
                               __ptext140 167B                                 __ptext132 1C87  
                               __ptext124 1AB4                                 __ptext116 083C  
                               __ptext108 118A                                 __ptext141 161B  
                               __ptext133 1AAC                                 __ptext125 09DA  
                               __ptext117 0C29                                 __ptext109 1A89  
                                ?___ftadd 0039                                 __ptext142 1B1F  
                               __ptext134 1A73                                 __ptext126 1B2B  
                               __ptext118 1AC4                                 __ptext143 1A4E  
                               __ptext135 1CC2                                 __ptext127 14AA  
                               __ptext119 0E96                                 __ptext144 1A4D  
                               __ptext136 1367                                 __ptext128 13AD  
                               __ptext137 1A51                                 __ptext129 1400  
                               __ptext139 1F08                                 _getRxData 0ABB  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0038                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 12A1                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A54                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1D40  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1CAE              ??_setDimmerIntr_DimmingValue 005B  
              _getDimmerIntr_DimmingValue 1C9A                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00C3                                 _r_address 00E3  
           __end_of_setDimmerLights_OnOff 05EF            __size_of_setDimmerLights_SwOff 0037  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1261  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1BC1  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                           _SwPointSelect 1D40                       __end_of_setLED_Main 1323  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1A60                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1B4F  
                         SwPointSelect@sw 0073                                 clear_ram0 1A83  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 0804                                 _setTxData 0F4A  
     __end_of_DimmerLights_Initialization 1AFE               _DimmerLights_Initialization 1AF3  
                  _Flash_Memory_Main$3305 0021                        _CC2500_ClearRXFIFO 1A6B  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1A6F  
                setRF_DimmerLights@lights 0061                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1C75                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0060  
    __size_of_setDimmerIntr_ControlStatus 0029               __size_of_setRFSW_AdjControl 007E  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 10D4  
                              ?_getRxData 0070                              ??_getLoad_AD 0076  
                                _TMR1_ISR 1F08                    CC2500_InitSetREG@temp1 0020  
                  CC2500_InitSetREG@temp2 0021                              ??_getLoad_OK 0072  
                                _TMR1_Set 1B5B                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1BD1  
                                _RF_Count 0131                      __end_of_RF_RxDisable 1BB2  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 1DFC  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1C21  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0075  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B1  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00DA                              setSw_Main@sw 002C  
                             ??_Load_Main 0020                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0078                          __size_of_IOC_Set 000A  
            __end_of_Flash_Memory_Erasing 1B43                            ?_SwPointSelect 0070  
                             getAD@adcon0 0075                               getAD@adcon1 0072  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 118A                     _DlyOff_Initialization 1A73  
       __size_of_getMain_All_LightsStatus 000F                      ??_CC2500_ClearRXFIFO 0076  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 10AB               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1F90                                  _Fosc_Set 1A63  
                        __size_of_WDT_Set 0009                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 0ABB                        __end_of_getLoad_OK 1A90  
                   _Switch_Initialization 1ABC         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 11F4  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1DB0                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0013                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 00E1                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$3768 0073  
           _getMain_All_Error_Status$3769 0075                  __end_of_getDimmer_LoadGO 1A97  
                     _Load_Initialization 1A54          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0DE5                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1F29                          ??_LedPointSelect 0072  
                                ___ftpack 16DB             __size_of_getMain_Lights_Count 000F  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 12E2                __end_of_setRF_DimmerLights 15BC  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1A9E                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1A5D  
                                __ptext11 1A50                                  __ptext20 1D16  
                                __ptext12 1B14                                  __ptext21 1ABC  
                                __ptext13 01F3                                  __ptext30 0BAB  
                                __ptext22 1AA5                                  __ptext14 1C64  
                                __ptext31 1D99                                  __ptext23 1A5A  
                                __ptext15 1FDA                                  __ptext40 0800  
                                __ptext32 1C53                                  __ptext24 05EF  
                                __ptext16 1EC8                                  __ptext41 1323  
                                __ptext33 1C01                                  __ptext25 0ABB  
                                __ptext17 1D40                                  __ptext50 1A67  
                                __ptext42 10FE                                  __ptext34 1BA3  
                                __ptext26 1156                                  __ptext18 1D2B  
                                __ptext51 1CEC                                  __ptext43 1E6B  
                                __ptext35 0906                                  __ptext27 1C11  
                                __ptext19 1A78                                  __ptext60 1A63  
                                __ptext52 1DB0                                  __ptext44 1F4B  
                                __ptext36 173B                                  __ptext28 0765  
                                __ptext61 1A9E                                  __ptext53 1A57  
                                __ptext45 1B09                                  __ptext37 1F6D  
                                __ptext29 1261                                  __ptext70 1E16  
                                __ptext62 0053                                  __ptext54 1AE9  
                                __ptext46 1FB5                                  __ptext38 1066  
                                __ptext71 1B4F                                  __ptext63 1B94  
                                __ptext55 1C75                                  __ptext47 1A6F  
                                __ptext39 1D01                                  __ptext80 1AFE  
                                __ptext72 12E2                                  __ptext64 1A97  
                                __ptext56 1AD6                                  __ptext48 1A6B  
                                __ptext81 10D4                                  __ptext73 1B43  
                                __ptext65 1A90                                  __ptext57 1B5B  
                                __ptext49 1DE2                                  __ptext90 1E31  
                                __ptext82 1ACD                                  __ptext74 1BF1  
                                __ptext66 1EA8                                  __ptext58 1DC8  
                                __ptext91 10AB                                  __ptext83 1CAE  
                                __ptext75 12A1                                  __ptext67 1E4E  
                                __ptext59 1ADF                                  __ptext92 1D82  
                                __ptext84 045A                                  __ptext76 1C42  
                                __ptext68 11F4                                  __ptext93 1082  
                                __ptext85 1B85                                  __ptext77 0B2E  
                                __ptext69 1A54                                  __ptext94 0CB0  
                                __ptext86 1E88                                  __ptext78 1B37  
                                __ptext95 1C31                                  __ptext87 179C  
                                __ptext79 06AF                                  __ptext96 1CD7  
                                __ptext88 052C                                  __ptext97 1B76  
                                __ptext89 15BC                                  __ptext98 1B67  
                                __ptext99 1BE1                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1B94              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1D6B                        _DimmerLights_IOC_1 1A4D  
                      _DimmerLights_IOC_2 1A4E              __end_of_setDimmerLights_SwOn 1502  
                            ??_setSw_Main 002A                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1C64  
      __size_of_DimmerIntr_Initialization 006C                           ??_getCmd_Status 0072  
                      _DimmerLights_TMR_1 161B                        _DimmerLights_TMR_2 167B  
                __end_of_CC2500_SIDLEMode 0804                setDimmerLights_Main@lights 0069  
             __end_of_DelayOffPointSelect 1CD7                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1066                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1E6B                  __end_of_setMemory_Modify 1BD1  
    _getAll_DimmerIntr_Dimming_Sw_RF$2292 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2293 0074  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 06AF                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1D01               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$6629 0074                                  main@argc 01E2  
                                main@argv 01E4                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6625 0073                      _getSw_KeyStatus$6626 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1323  
                __size_of_getSw_KeyStatus 0020              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1D99                _setDimmerIntr_DimmingValue 1D82  
             __end_of_Flash_Memory_Modify 0BAB              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1156               __end_of_Flash_Memory_Unlock 1AD6  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1F4B  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070                      ??_DimmerLights_IOC_2 0070  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0017  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0060    __end_of_setDimmerLights_Initialization 1A50  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1A4F  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1A57                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1B37                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00E0                   __size_of_Exception_Main 00D2  
         __end_of_DelayOff_Initialization 1AB4                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1ABC                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0CB0  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008D  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00B6               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1FDA                   __end_of_CC2500_ReadByte 1082  
            __end_of_setSw_Initialization 1AAC                           _Timeout_Counter 1D16  
         __size_of_getDimmerLights_Status 000E           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1BA3          Flash_Memory_Initialization@value 0077  
              __end_of_LED_Initialization 1B4F            __end_of_setTemp_Initialization 1A51  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 1A5A  
                   __end_of_CC2500_RxData 179C                     __end_of_CC2500_TxData 096E  
                   _setLoad_AH_AL_Restore 1E16                   __end_of_CC2500_PowerRST 1367  
