

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 30 13:56:21 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK5,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	intentry,global,class=CODE,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   174                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   175                           	psect	text155,local,class=CODE,merge=1,inline,delta=2
   176                           	dabs	1,0x7E,2
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  008C                     	;# 
   205  008D                     	;# 
   206  008E                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0099                     	;# 
   214  009A                     	;# 
   215  009B                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  0116                     	;# 
   224  0117                     	;# 
   225  011D                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0197                     	;# 
   238  0199                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  020D                     	;# 
   250  0210                     	;# 
   251  0211                     	;# 
   252  0211                     	;# 
   253  0212                     	;# 
   254  0212                     	;# 
   255  0213                     	;# 
   256  0213                     	;# 
   257  0214                     	;# 
   258  0214                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0216                     	;# 
   263  0216                     	;# 
   264  0217                     	;# 
   265  0217                     	;# 
   266  0291                     	;# 
   267  0291                     	;# 
   268  0292                     	;# 
   269  0293                     	;# 
   270  0298                     	;# 
   271  0298                     	;# 
   272  0299                     	;# 
   273  029A                     	;# 
   274  0394                     	;# 
   275  0395                     	;# 
   276  0396                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  008C                     	;# 
   316  008D                     	;# 
   317  008E                     	;# 
   318  0090                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0095                     	;# 
   322  0096                     	;# 
   323  0097                     	;# 
   324  0099                     	;# 
   325  009A                     	;# 
   326  009B                     	;# 
   327  009B                     	;# 
   328  009C                     	;# 
   329  009D                     	;# 
   330  009E                     	;# 
   331  010C                     	;# 
   332  010D                     	;# 
   333  010E                     	;# 
   334  0116                     	;# 
   335  0117                     	;# 
   336  011D                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  018E                     	;# 
   340  0191                     	;# 
   341  0191                     	;# 
   342  0192                     	;# 
   343  0193                     	;# 
   344  0193                     	;# 
   345  0194                     	;# 
   346  0195                     	;# 
   347  0196                     	;# 
   348  0197                     	;# 
   349  0199                     	;# 
   350  019A                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019B                     	;# 
   355  019C                     	;# 
   356  019C                     	;# 
   357  019D                     	;# 
   358  019E                     	;# 
   359  019F                     	;# 
   360  020D                     	;# 
   361  0210                     	;# 
   362  0211                     	;# 
   363  0211                     	;# 
   364  0212                     	;# 
   365  0212                     	;# 
   366  0213                     	;# 
   367  0213                     	;# 
   368  0214                     	;# 
   369  0214                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0215                     	;# 
   373  0216                     	;# 
   374  0216                     	;# 
   375  0217                     	;# 
   376  0217                     	;# 
   377  0291                     	;# 
   378  0291                     	;# 
   379  0292                     	;# 
   380  0293                     	;# 
   381  0298                     	;# 
   382  0298                     	;# 
   383  0299                     	;# 
   384  029A                     	;# 
   385  0394                     	;# 
   386  0395                     	;# 
   387  0396                     	;# 
   388  0FE4                     	;# 
   389  0FE5                     	;# 
   390  0FE6                     	;# 
   391  0FE7                     	;# 
   392  0FE8                     	;# 
   393  0FE9                     	;# 
   394  0FEA                     	;# 
   395  0FEB                     	;# 
   396  0FED                     	;# 
   397  0FEE                     	;# 
   398  0FEF                     	;# 
   399  0000                     	;# 
   400  0001                     	;# 
   401  0002                     	;# 
   402  0003                     	;# 
   403  0004                     	;# 
   404  0005                     	;# 
   405  0006                     	;# 
   406  0007                     	;# 
   407  0008                     	;# 
   408  0009                     	;# 
   409  000A                     	;# 
   410  000B                     	;# 
   411  000C                     	;# 
   412  000D                     	;# 
   413  000E                     	;# 
   414  0010                     	;# 
   415  0011                     	;# 
   416  0012                     	;# 
   417  0015                     	;# 
   418  0016                     	;# 
   419  0016                     	;# 
   420  0017                     	;# 
   421  0018                     	;# 
   422  0019                     	;# 
   423  001A                     	;# 
   424  001B                     	;# 
   425  001C                     	;# 
   426  008C                     	;# 
   427  008D                     	;# 
   428  008E                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  0116                     	;# 
   446  0117                     	;# 
   447  011D                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450  018E                     	;# 
   451  0191                     	;# 
   452  0191                     	;# 
   453  0192                     	;# 
   454  0193                     	;# 
   455  0193                     	;# 
   456  0194                     	;# 
   457  0195                     	;# 
   458  0196                     	;# 
   459  0197                     	;# 
   460  0199                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019C                     	;# 
   467  019C                     	;# 
   468  019D                     	;# 
   469  019E                     	;# 
   470  019F                     	;# 
   471  020D                     	;# 
   472  0210                     	;# 
   473  0211                     	;# 
   474  0211                     	;# 
   475  0212                     	;# 
   476  0212                     	;# 
   477  0213                     	;# 
   478  0213                     	;# 
   479  0214                     	;# 
   480  0214                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0215                     	;# 
   484  0216                     	;# 
   485  0216                     	;# 
   486  0217                     	;# 
   487  0217                     	;# 
   488  0291                     	;# 
   489  0291                     	;# 
   490  0292                     	;# 
   491  0293                     	;# 
   492  0298                     	;# 
   493  0298                     	;# 
   494  0299                     	;# 
   495  029A                     	;# 
   496  0394                     	;# 
   497  0395                     	;# 
   498  0396                     	;# 
   499  0FE4                     	;# 
   500  0FE5                     	;# 
   501  0FE6                     	;# 
   502  0FE7                     	;# 
   503  0FE8                     	;# 
   504  0FE9                     	;# 
   505  0FEA                     	;# 
   506  0FEB                     	;# 
   507  0FED                     	;# 
   508  0FEE                     	;# 
   509  0FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0011                     	;# 
   527  0012                     	;# 
   528  0015                     	;# 
   529  0016                     	;# 
   530  0016                     	;# 
   531  0017                     	;# 
   532  0018                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  008C                     	;# 
   538  008D                     	;# 
   539  008E                     	;# 
   540  0090                     	;# 
   541  0091                     	;# 
   542  0092                     	;# 
   543  0095                     	;# 
   544  0096                     	;# 
   545  0097                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  010C                     	;# 
   554  010D                     	;# 
   555  010E                     	;# 
   556  0116                     	;# 
   557  0117                     	;# 
   558  011D                     	;# 
   559  018C                     	;# 
   560  018D                     	;# 
   561  018E                     	;# 
   562  0191                     	;# 
   563  0191                     	;# 
   564  0192                     	;# 
   565  0193                     	;# 
   566  0193                     	;# 
   567  0194                     	;# 
   568  0195                     	;# 
   569  0196                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  019A                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  019C                     	;# 
   579  019D                     	;# 
   580  019E                     	;# 
   581  019F                     	;# 
   582  020D                     	;# 
   583  0210                     	;# 
   584  0211                     	;# 
   585  0211                     	;# 
   586  0212                     	;# 
   587  0212                     	;# 
   588  0213                     	;# 
   589  0213                     	;# 
   590  0214                     	;# 
   591  0214                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0215                     	;# 
   595  0216                     	;# 
   596  0216                     	;# 
   597  0217                     	;# 
   598  0217                     	;# 
   599  0291                     	;# 
   600  0291                     	;# 
   601  0292                     	;# 
   602  0293                     	;# 
   603  0298                     	;# 
   604  0298                     	;# 
   605  0299                     	;# 
   606  029A                     	;# 
   607  0394                     	;# 
   608  0395                     	;# 
   609  0396                     	;# 
   610  0FE4                     	;# 
   611  0FE5                     	;# 
   612  0FE6                     	;# 
   613  0FE7                     	;# 
   614  0FE8                     	;# 
   615  0FE9                     	;# 
   616  0FEA                     	;# 
   617  0FEB                     	;# 
   618  0FED                     	;# 
   619  0FEE                     	;# 
   620  0FEF                     	;# 
   621  0000                     	;# 
   622  0001                     	;# 
   623  0002                     	;# 
   624  0003                     	;# 
   625  0004                     	;# 
   626  0005                     	;# 
   627  0006                     	;# 
   628  0007                     	;# 
   629  0008                     	;# 
   630  0009                     	;# 
   631  000A                     	;# 
   632  000B                     	;# 
   633  000C                     	;# 
   634  000D                     	;# 
   635  000E                     	;# 
   636  0010                     	;# 
   637  0011                     	;# 
   638  0012                     	;# 
   639  0015                     	;# 
   640  0016                     	;# 
   641  0016                     	;# 
   642  0017                     	;# 
   643  0018                     	;# 
   644  0019                     	;# 
   645  001A                     	;# 
   646  001B                     	;# 
   647  001C                     	;# 
   648  008C                     	;# 
   649  008D                     	;# 
   650  008E                     	;# 
   651  0090                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0116                     	;# 
   668  0117                     	;# 
   669  011D                     	;# 
   670  018C                     	;# 
   671  018D                     	;# 
   672  018E                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0194                     	;# 
   679  0195                     	;# 
   680  0196                     	;# 
   681  0197                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020D                     	;# 
   694  0210                     	;# 
   695  0211                     	;# 
   696  0211                     	;# 
   697  0212                     	;# 
   698  0212                     	;# 
   699  0213                     	;# 
   700  0213                     	;# 
   701  0214                     	;# 
   702  0214                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0215                     	;# 
   706  0216                     	;# 
   707  0216                     	;# 
   708  0217                     	;# 
   709  0217                     	;# 
   710  0291                     	;# 
   711  0291                     	;# 
   712  0292                     	;# 
   713  0293                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  008C                     	;# 
   760  008D                     	;# 
   761  008E                     	;# 
   762  0090                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0099                     	;# 
   769  009A                     	;# 
   770  009B                     	;# 
   771  009B                     	;# 
   772  009C                     	;# 
   773  009D                     	;# 
   774  009E                     	;# 
   775  010C                     	;# 
   776  010D                     	;# 
   777  010E                     	;# 
   778  0116                     	;# 
   779  0117                     	;# 
   780  011D                     	;# 
   781  018C                     	;# 
   782  018D                     	;# 
   783  018E                     	;# 
   784  0191                     	;# 
   785  0191                     	;# 
   786  0192                     	;# 
   787  0193                     	;# 
   788  0193                     	;# 
   789  0194                     	;# 
   790  0195                     	;# 
   791  0196                     	;# 
   792  0197                     	;# 
   793  0199                     	;# 
   794  019A                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019B                     	;# 
   799  019C                     	;# 
   800  019C                     	;# 
   801  019D                     	;# 
   802  019E                     	;# 
   803  019F                     	;# 
   804  020D                     	;# 
   805  0210                     	;# 
   806  0211                     	;# 
   807  0211                     	;# 
   808  0212                     	;# 
   809  0212                     	;# 
   810  0213                     	;# 
   811  0213                     	;# 
   812  0214                     	;# 
   813  0214                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0215                     	;# 
   817  0216                     	;# 
   818  0216                     	;# 
   819  0217                     	;# 
   820  0217                     	;# 
   821  0291                     	;# 
   822  0291                     	;# 
   823  0292                     	;# 
   824  0293                     	;# 
   825  0298                     	;# 
   826  0298                     	;# 
   827  0299                     	;# 
   828  029A                     	;# 
   829  0394                     	;# 
   830  0395                     	;# 
   831  0396                     	;# 
   832  0FE4                     	;# 
   833  0FE5                     	;# 
   834  0FE6                     	;# 
   835  0FE7                     	;# 
   836  0FE8                     	;# 
   837  0FE9                     	;# 
   838  0FEA                     	;# 
   839  0FEB                     	;# 
   840  0FED                     	;# 
   841  0FEE                     	;# 
   842  0FEF                     	;# 
   843  0000                     	;# 
   844  0001                     	;# 
   845  0002                     	;# 
   846  0003                     	;# 
   847  0004                     	;# 
   848  0005                     	;# 
   849  0006                     	;# 
   850  0007                     	;# 
   851  0008                     	;# 
   852  0009                     	;# 
   853  000A                     	;# 
   854  000B                     	;# 
   855  000C                     	;# 
   856  000D                     	;# 
   857  000E                     	;# 
   858  0010                     	;# 
   859  0011                     	;# 
   860  0012                     	;# 
   861  0015                     	;# 
   862  0016                     	;# 
   863  0016                     	;# 
   864  0017                     	;# 
   865  0018                     	;# 
   866  0019                     	;# 
   867  001A                     	;# 
   868  001B                     	;# 
   869  001C                     	;# 
   870  008C                     	;# 
   871  008D                     	;# 
   872  008E                     	;# 
   873  0090                     	;# 
   874  0091                     	;# 
   875  0092                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0116                     	;# 
   890  0117                     	;# 
   891  011D                     	;# 
   892  018C                     	;# 
   893  018D                     	;# 
   894  018E                     	;# 
   895  0191                     	;# 
   896  0191                     	;# 
   897  0192                     	;# 
   898  0193                     	;# 
   899  0193                     	;# 
   900  0194                     	;# 
   901  0195                     	;# 
   902  0196                     	;# 
   903  0197                     	;# 
   904  0199                     	;# 
   905  019A                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019B                     	;# 
   910  019C                     	;# 
   911  019C                     	;# 
   912  019D                     	;# 
   913  019E                     	;# 
   914  019F                     	;# 
   915  020D                     	;# 
   916  0210                     	;# 
   917  0211                     	;# 
   918  0211                     	;# 
   919  0212                     	;# 
   920  0212                     	;# 
   921  0213                     	;# 
   922  0213                     	;# 
   923  0214                     	;# 
   924  0214                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0216                     	;# 
   929  0216                     	;# 
   930  0217                     	;# 
   931  0217                     	;# 
   932  0291                     	;# 
   933  0291                     	;# 
   934  0292                     	;# 
   935  0293                     	;# 
   936  0298                     	;# 
   937  0298                     	;# 
   938  0299                     	;# 
   939  029A                     	;# 
   940  0394                     	;# 
   941  0395                     	;# 
   942  0396                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000D                     	;# 
   968  000E                     	;# 
   969  0010                     	;# 
   970  0011                     	;# 
   971  0012                     	;# 
   972  0015                     	;# 
   973  0016                     	;# 
   974  0016                     	;# 
   975  0017                     	;# 
   976  0018                     	;# 
   977  0019                     	;# 
   978  001A                     	;# 
   979  001B                     	;# 
   980  001C                     	;# 
   981  008C                     	;# 
   982  008D                     	;# 
   983  008E                     	;# 
   984  0090                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0099                     	;# 
   991  009A                     	;# 
   992  009B                     	;# 
   993  009B                     	;# 
   994  009C                     	;# 
   995  009D                     	;# 
   996  009E                     	;# 
   997  010C                     	;# 
   998  010D                     	;# 
   999  010E                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  011D                     	;# 
  1003  018C                     	;# 
  1004  018D                     	;# 
  1005  018E                     	;# 
  1006  0191                     	;# 
  1007  0191                     	;# 
  1008  0192                     	;# 
  1009  0193                     	;# 
  1010  0193                     	;# 
  1011  0194                     	;# 
  1012  0195                     	;# 
  1013  0196                     	;# 
  1014  0197                     	;# 
  1015  0199                     	;# 
  1016  019A                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019B                     	;# 
  1021  019C                     	;# 
  1022  019C                     	;# 
  1023  019D                     	;# 
  1024  019E                     	;# 
  1025  019F                     	;# 
  1026  020D                     	;# 
  1027  0210                     	;# 
  1028  0211                     	;# 
  1029  0211                     	;# 
  1030  0212                     	;# 
  1031  0212                     	;# 
  1032  0213                     	;# 
  1033  0213                     	;# 
  1034  0214                     	;# 
  1035  0214                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0215                     	;# 
  1039  0216                     	;# 
  1040  0216                     	;# 
  1041  0217                     	;# 
  1042  0217                     	;# 
  1043  0291                     	;# 
  1044  0291                     	;# 
  1045  0292                     	;# 
  1046  0293                     	;# 
  1047  0298                     	;# 
  1048  0298                     	;# 
  1049  0299                     	;# 
  1050  029A                     	;# 
  1051  0394                     	;# 
  1052  0395                     	;# 
  1053  0396                     	;# 
  1054  0FE4                     	;# 
  1055  0FE5                     	;# 
  1056  0FE6                     	;# 
  1057  0FE7                     	;# 
  1058  0FE8                     	;# 
  1059  0FE9                     	;# 
  1060  0FEA                     	;# 
  1061  0FEB                     	;# 
  1062  0FED                     	;# 
  1063  0FEE                     	;# 
  1064  0FEF                     	;# 
  1065  0000                     	;# 
  1066  0001                     	;# 
  1067  0002                     	;# 
  1068  0003                     	;# 
  1069  0004                     	;# 
  1070  0005                     	;# 
  1071  0006                     	;# 
  1072  0007                     	;# 
  1073  0008                     	;# 
  1074  0009                     	;# 
  1075  000A                     	;# 
  1076  000B                     	;# 
  1077  000C                     	;# 
  1078  000D                     	;# 
  1079  000E                     	;# 
  1080  0010                     	;# 
  1081  0011                     	;# 
  1082  0012                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0095                     	;# 
  1099  0096                     	;# 
  1100  0097                     	;# 
  1101  0099                     	;# 
  1102  009A                     	;# 
  1103  009B                     	;# 
  1104  009B                     	;# 
  1105  009C                     	;# 
  1106  009D                     	;# 
  1107  009E                     	;# 
  1108  010C                     	;# 
  1109  010D                     	;# 
  1110  010E                     	;# 
  1111  0116                     	;# 
  1112  0117                     	;# 
  1113  011D                     	;# 
  1114  018C                     	;# 
  1115  018D                     	;# 
  1116  018E                     	;# 
  1117  0191                     	;# 
  1118  0191                     	;# 
  1119  0192                     	;# 
  1120  0193                     	;# 
  1121  0193                     	;# 
  1122  0194                     	;# 
  1123  0195                     	;# 
  1124  0196                     	;# 
  1125  0197                     	;# 
  1126  0199                     	;# 
  1127  019A                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019B                     	;# 
  1132  019C                     	;# 
  1133  019C                     	;# 
  1134  019D                     	;# 
  1135  019E                     	;# 
  1136  019F                     	;# 
  1137  020D                     	;# 
  1138  0210                     	;# 
  1139  0211                     	;# 
  1140  0211                     	;# 
  1141  0212                     	;# 
  1142  0212                     	;# 
  1143  0213                     	;# 
  1144  0213                     	;# 
  1145  0214                     	;# 
  1146  0214                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0215                     	;# 
  1150  0216                     	;# 
  1151  0216                     	;# 
  1152  0217                     	;# 
  1153  0217                     	;# 
  1154  0291                     	;# 
  1155  0291                     	;# 
  1156  0292                     	;# 
  1157  0293                     	;# 
  1158  0298                     	;# 
  1159  0298                     	;# 
  1160  0299                     	;# 
  1161  029A                     	;# 
  1162  0394                     	;# 
  1163  0395                     	;# 
  1164  0396                     	;# 
  1165  0FE4                     	;# 
  1166  0FE5                     	;# 
  1167  0FE6                     	;# 
  1168  0FE7                     	;# 
  1169  0FE8                     	;# 
  1170  0FE9                     	;# 
  1171  0FEA                     	;# 
  1172  0FEB                     	;# 
  1173  0FED                     	;# 
  1174  0FEE                     	;# 
  1175  0FEF                     	;# 
  1176  0000                     	;# 
  1177  0001                     	;# 
  1178  0002                     	;# 
  1179  0003                     	;# 
  1180  0004                     	;# 
  1181  0005                     	;# 
  1182  0006                     	;# 
  1183  0007                     	;# 
  1184  0008                     	;# 
  1185  0009                     	;# 
  1186  000A                     	;# 
  1187  000B                     	;# 
  1188  000C                     	;# 
  1189  000D                     	;# 
  1190  000E                     	;# 
  1191  0010                     	;# 
  1192  0011                     	;# 
  1193  0012                     	;# 
  1194  0015                     	;# 
  1195  0016                     	;# 
  1196  0016                     	;# 
  1197  0017                     	;# 
  1198  0018                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  008C                     	;# 
  1204  008D                     	;# 
  1205  008E                     	;# 
  1206  0090                     	;# 
  1207  0091                     	;# 
  1208  0092                     	;# 
  1209  0095                     	;# 
  1210  0096                     	;# 
  1211  0097                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0116                     	;# 
  1223  0117                     	;# 
  1224  011D                     	;# 
  1225  018C                     	;# 
  1226  018D                     	;# 
  1227  018E                     	;# 
  1228  0191                     	;# 
  1229  0191                     	;# 
  1230  0192                     	;# 
  1231  0193                     	;# 
  1232  0193                     	;# 
  1233  0194                     	;# 
  1234  0195                     	;# 
  1235  0196                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  019A                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019B                     	;# 
  1243  019C                     	;# 
  1244  019C                     	;# 
  1245  019D                     	;# 
  1246  019E                     	;# 
  1247  019F                     	;# 
  1248  020D                     	;# 
  1249  0210                     	;# 
  1250  0211                     	;# 
  1251  0211                     	;# 
  1252  0212                     	;# 
  1253  0212                     	;# 
  1254  0213                     	;# 
  1255  0213                     	;# 
  1256  0214                     	;# 
  1257  0214                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0291                     	;# 
  1266  0291                     	;# 
  1267  0292                     	;# 
  1268  0293                     	;# 
  1269  0298                     	;# 
  1270  0298                     	;# 
  1271  0299                     	;# 
  1272  029A                     	;# 
  1273  0394                     	;# 
  1274  0395                     	;# 
  1275  0396                     	;# 
  1276  0FE4                     	;# 
  1277  0FE5                     	;# 
  1278  0FE6                     	;# 
  1279  0FE7                     	;# 
  1280  0FE8                     	;# 
  1281  0FE9                     	;# 
  1282  0FEA                     	;# 
  1283  0FEB                     	;# 
  1284  0FED                     	;# 
  1285  0FEE                     	;# 
  1286  0FEF                     	;# 
  1287  0000                     	;# 
  1288  0001                     	;# 
  1289  0002                     	;# 
  1290  0003                     	;# 
  1291  0004                     	;# 
  1292  0005                     	;# 
  1293  0006                     	;# 
  1294  0007                     	;# 
  1295  0008                     	;# 
  1296  0009                     	;# 
  1297  000A                     	;# 
  1298  000B                     	;# 
  1299  000C                     	;# 
  1300  000D                     	;# 
  1301  000E                     	;# 
  1302  0010                     	;# 
  1303  0011                     	;# 
  1304  0012                     	;# 
  1305  0015                     	;# 
  1306  0016                     	;# 
  1307  0016                     	;# 
  1308  0017                     	;# 
  1309  0018                     	;# 
  1310  0019                     	;# 
  1311  001A                     	;# 
  1312  001B                     	;# 
  1313  001C                     	;# 
  1314  008C                     	;# 
  1315  008D                     	;# 
  1316  008E                     	;# 
  1317  0090                     	;# 
  1318  0091                     	;# 
  1319  0092                     	;# 
  1320  0095                     	;# 
  1321  0096                     	;# 
  1322  0097                     	;# 
  1323  0099                     	;# 
  1324  009A                     	;# 
  1325  009B                     	;# 
  1326  009B                     	;# 
  1327  009C                     	;# 
  1328  009D                     	;# 
  1329  009E                     	;# 
  1330  010C                     	;# 
  1331  010D                     	;# 
  1332  010E                     	;# 
  1333  0116                     	;# 
  1334  0117                     	;# 
  1335  011D                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0197                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019B                     	;# 
  1354  019C                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020D                     	;# 
  1360  0210                     	;# 
  1361  0211                     	;# 
  1362  0211                     	;# 
  1363  0212                     	;# 
  1364  0212                     	;# 
  1365  0213                     	;# 
  1366  0213                     	;# 
  1367  0214                     	;# 
  1368  0214                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0216                     	;# 
  1373  0216                     	;# 
  1374  0217                     	;# 
  1375  0217                     	;# 
  1376  0291                     	;# 
  1377  0291                     	;# 
  1378  0292                     	;# 
  1379  0293                     	;# 
  1380  0298                     	;# 
  1381  0298                     	;# 
  1382  0299                     	;# 
  1383  029A                     	;# 
  1384  0394                     	;# 
  1385  0395                     	;# 
  1386  0396                     	;# 
  1387  0FE4                     	;# 
  1388  0FE5                     	;# 
  1389  0FE6                     	;# 
  1390  0FE7                     	;# 
  1391  0FE8                     	;# 
  1392  0FE9                     	;# 
  1393  0FEA                     	;# 
  1394  0FEB                     	;# 
  1395  0FED                     	;# 
  1396  0FEE                     	;# 
  1397  0FEF                     	;# 
  1398  0000                     	;# 
  1399  0001                     	;# 
  1400  0002                     	;# 
  1401  0003                     	;# 
  1402  0004                     	;# 
  1403  0005                     	;# 
  1404  0006                     	;# 
  1405  0007                     	;# 
  1406  0008                     	;# 
  1407  0009                     	;# 
  1408  000A                     	;# 
  1409  000B                     	;# 
  1410  000C                     	;# 
  1411  000D                     	;# 
  1412  000E                     	;# 
  1413  0010                     	;# 
  1414  0011                     	;# 
  1415  0012                     	;# 
  1416  0015                     	;# 
  1417  0016                     	;# 
  1418  0016                     	;# 
  1419  0017                     	;# 
  1420  0018                     	;# 
  1421  0019                     	;# 
  1422  001A                     	;# 
  1423  001B                     	;# 
  1424  001C                     	;# 
  1425  008C                     	;# 
  1426  008D                     	;# 
  1427  008E                     	;# 
  1428  0090                     	;# 
  1429  0091                     	;# 
  1430  0092                     	;# 
  1431  0095                     	;# 
  1432  0096                     	;# 
  1433  0097                     	;# 
  1434  0099                     	;# 
  1435  009A                     	;# 
  1436  009B                     	;# 
  1437  009B                     	;# 
  1438  009C                     	;# 
  1439  009D                     	;# 
  1440  009E                     	;# 
  1441  010C                     	;# 
  1442  010D                     	;# 
  1443  010E                     	;# 
  1444  0116                     	;# 
  1445  0117                     	;# 
  1446  011D                     	;# 
  1447  018C                     	;# 
  1448  018D                     	;# 
  1449  018E                     	;# 
  1450  0191                     	;# 
  1451  0191                     	;# 
  1452  0192                     	;# 
  1453  0193                     	;# 
  1454  0193                     	;# 
  1455  0194                     	;# 
  1456  0195                     	;# 
  1457  0196                     	;# 
  1458  0197                     	;# 
  1459  0199                     	;# 
  1460  019A                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019B                     	;# 
  1465  019C                     	;# 
  1466  019C                     	;# 
  1467  019D                     	;# 
  1468  019E                     	;# 
  1469  019F                     	;# 
  1470  020D                     	;# 
  1471  0210                     	;# 
  1472  0211                     	;# 
  1473  0211                     	;# 
  1474  0212                     	;# 
  1475  0212                     	;# 
  1476  0213                     	;# 
  1477  0213                     	;# 
  1478  0214                     	;# 
  1479  0214                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0215                     	;# 
  1483  0216                     	;# 
  1484  0216                     	;# 
  1485  0217                     	;# 
  1486  0217                     	;# 
  1487  0291                     	;# 
  1488  0291                     	;# 
  1489  0292                     	;# 
  1490  0293                     	;# 
  1491  0298                     	;# 
  1492  0298                     	;# 
  1493  0299                     	;# 
  1494  029A                     	;# 
  1495  0394                     	;# 
  1496  0395                     	;# 
  1497  0396                     	;# 
  1498  0FE4                     	;# 
  1499  0FE5                     	;# 
  1500  0FE6                     	;# 
  1501  0FE7                     	;# 
  1502  0FE8                     	;# 
  1503  0FE9                     	;# 
  1504  0FEA                     	;# 
  1505  0FEB                     	;# 
  1506  0FED                     	;# 
  1507  0FEE                     	;# 
  1508  0FEF                     	;# 
  1509  0000                     	;# 
  1510  0001                     	;# 
  1511  0002                     	;# 
  1512  0003                     	;# 
  1513  0004                     	;# 
  1514  0005                     	;# 
  1515  0006                     	;# 
  1516  0007                     	;# 
  1517  0008                     	;# 
  1518  0009                     	;# 
  1519  000A                     	;# 
  1520  000B                     	;# 
  1521  000C                     	;# 
  1522  000D                     	;# 
  1523  000E                     	;# 
  1524  0010                     	;# 
  1525  0011                     	;# 
  1526  0012                     	;# 
  1527  0015                     	;# 
  1528  0016                     	;# 
  1529  0016                     	;# 
  1530  0017                     	;# 
  1531  0018                     	;# 
  1532  0019                     	;# 
  1533  001A                     	;# 
  1534  001B                     	;# 
  1535  001C                     	;# 
  1536  008C                     	;# 
  1537  008D                     	;# 
  1538  008E                     	;# 
  1539  0090                     	;# 
  1540  0091                     	;# 
  1541  0092                     	;# 
  1542  0095                     	;# 
  1543  0096                     	;# 
  1544  0097                     	;# 
  1545  0099                     	;# 
  1546  009A                     	;# 
  1547  009B                     	;# 
  1548  009B                     	;# 
  1549  009C                     	;# 
  1550  009D                     	;# 
  1551  009E                     	;# 
  1552  010C                     	;# 
  1553  010D                     	;# 
  1554  010E                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  011D                     	;# 
  1558  018C                     	;# 
  1559  018D                     	;# 
  1560  018E                     	;# 
  1561  0191                     	;# 
  1562  0191                     	;# 
  1563  0192                     	;# 
  1564  0193                     	;# 
  1565  0193                     	;# 
  1566  0194                     	;# 
  1567  0195                     	;# 
  1568  0196                     	;# 
  1569  0197                     	;# 
  1570  0199                     	;# 
  1571  019A                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019B                     	;# 
  1576  019C                     	;# 
  1577  019C                     	;# 
  1578  019D                     	;# 
  1579  019E                     	;# 
  1580  019F                     	;# 
  1581  020D                     	;# 
  1582  0210                     	;# 
  1583  0211                     	;# 
  1584  0211                     	;# 
  1585  0212                     	;# 
  1586  0212                     	;# 
  1587  0213                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0214                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0291                     	;# 
  1599  0291                     	;# 
  1600  0292                     	;# 
  1601  0293                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  0394                     	;# 
  1607  0395                     	;# 
  1608  0396                     	;# 
  1609  0FE4                     	;# 
  1610  0FE5                     	;# 
  1611  0FE6                     	;# 
  1612  0FE7                     	;# 
  1613  0FE8                     	;# 
  1614  0FE9                     	;# 
  1615  0FEA                     	;# 
  1616  0FEB                     	;# 
  1617  0FED                     	;# 
  1618  0FEE                     	;# 
  1619  0FEF                     	;# 
  1620  0000                     	;# 
  1621  0001                     	;# 
  1622  0002                     	;# 
  1623  0003                     	;# 
  1624  0004                     	;# 
  1625  0005                     	;# 
  1626  0006                     	;# 
  1627  0007                     	;# 
  1628  0008                     	;# 
  1629  0009                     	;# 
  1630  000A                     	;# 
  1631  000B                     	;# 
  1632  000C                     	;# 
  1633  000D                     	;# 
  1634  000E                     	;# 
  1635  0010                     	;# 
  1636  0011                     	;# 
  1637  0012                     	;# 
  1638  0015                     	;# 
  1639  0016                     	;# 
  1640  0016                     	;# 
  1641  0017                     	;# 
  1642  0018                     	;# 
  1643  0019                     	;# 
  1644  001A                     	;# 
  1645  001B                     	;# 
  1646  001C                     	;# 
  1647  008C                     	;# 
  1648  008D                     	;# 
  1649  008E                     	;# 
  1650  0090                     	;# 
  1651  0091                     	;# 
  1652  0092                     	;# 
  1653  0095                     	;# 
  1654  0096                     	;# 
  1655  0097                     	;# 
  1656  0099                     	;# 
  1657  009A                     	;# 
  1658  009B                     	;# 
  1659  009B                     	;# 
  1660  009C                     	;# 
  1661  009D                     	;# 
  1662  009E                     	;# 
  1663  010C                     	;# 
  1664  010D                     	;# 
  1665  010E                     	;# 
  1666  0116                     	;# 
  1667  0117                     	;# 
  1668  011D                     	;# 
  1669  018C                     	;# 
  1670  018D                     	;# 
  1671  018E                     	;# 
  1672  0191                     	;# 
  1673  0191                     	;# 
  1674  0192                     	;# 
  1675  0193                     	;# 
  1676  0193                     	;# 
  1677  0194                     	;# 
  1678  0195                     	;# 
  1679  0196                     	;# 
  1680  0197                     	;# 
  1681  0199                     	;# 
  1682  019A                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019B                     	;# 
  1687  019C                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020D                     	;# 
  1693  0210                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0216                     	;# 
  1706  0216                     	;# 
  1707  0217                     	;# 
  1708  0217                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0298                     	;# 
  1714  0298                     	;# 
  1715  0299                     	;# 
  1716  029A                     	;# 
  1717  0394                     	;# 
  1718  0395                     	;# 
  1719  0396                     	;# 
  1720  0FE4                     	;# 
  1721  0FE5                     	;# 
  1722  0FE6                     	;# 
  1723  0FE7                     	;# 
  1724  0FE8                     	;# 
  1725  0FE9                     	;# 
  1726  0FEA                     	;# 
  1727  0FEB                     	;# 
  1728  0FED                     	;# 
  1729  0FEE                     	;# 
  1730  0FEF                     	;# 
  1731  0000                     	;# 
  1732  0001                     	;# 
  1733  0002                     	;# 
  1734  0003                     	;# 
  1735  0004                     	;# 
  1736  0005                     	;# 
  1737  0006                     	;# 
  1738  0007                     	;# 
  1739  0008                     	;# 
  1740  0009                     	;# 
  1741  000A                     	;# 
  1742  000B                     	;# 
  1743  000C                     	;# 
  1744  000D                     	;# 
  1745  000E                     	;# 
  1746  0010                     	;# 
  1747  0011                     	;# 
  1748  0012                     	;# 
  1749  0015                     	;# 
  1750  0016                     	;# 
  1751  0016                     	;# 
  1752  0017                     	;# 
  1753  0018                     	;# 
  1754  0019                     	;# 
  1755  001A                     	;# 
  1756  001B                     	;# 
  1757  001C                     	;# 
  1758  008C                     	;# 
  1759  008D                     	;# 
  1760  008E                     	;# 
  1761  0090                     	;# 
  1762  0091                     	;# 
  1763  0092                     	;# 
  1764  0095                     	;# 
  1765  0096                     	;# 
  1766  0097                     	;# 
  1767  0099                     	;# 
  1768  009A                     	;# 
  1769  009B                     	;# 
  1770  009B                     	;# 
  1771  009C                     	;# 
  1772  009D                     	;# 
  1773  009E                     	;# 
  1774  010C                     	;# 
  1775  010D                     	;# 
  1776  010E                     	;# 
  1777  0116                     	;# 
  1778  0117                     	;# 
  1779  011D                     	;# 
  1780  018C                     	;# 
  1781  018D                     	;# 
  1782  018E                     	;# 
  1783  0191                     	;# 
  1784  0191                     	;# 
  1785  0192                     	;# 
  1786  0193                     	;# 
  1787  0193                     	;# 
  1788  0194                     	;# 
  1789  0195                     	;# 
  1790  0196                     	;# 
  1791  0197                     	;# 
  1792  0199                     	;# 
  1793  019A                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019B                     	;# 
  1798  019C                     	;# 
  1799  019C                     	;# 
  1800  019D                     	;# 
  1801  019E                     	;# 
  1802  019F                     	;# 
  1803  020D                     	;# 
  1804  0210                     	;# 
  1805  0211                     	;# 
  1806  0211                     	;# 
  1807  0212                     	;# 
  1808  0212                     	;# 
  1809  0213                     	;# 
  1810  0213                     	;# 
  1811  0214                     	;# 
  1812  0214                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0215                     	;# 
  1816  0216                     	;# 
  1817  0216                     	;# 
  1818  0217                     	;# 
  1819  0217                     	;# 
  1820  0291                     	;# 
  1821  0291                     	;# 
  1822  0292                     	;# 
  1823  0293                     	;# 
  1824  0298                     	;# 
  1825  0298                     	;# 
  1826  0299                     	;# 
  1827  029A                     	;# 
  1828  0394                     	;# 
  1829  0395                     	;# 
  1830  0396                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0015                     	;# 
  1861  0016                     	;# 
  1862  0016                     	;# 
  1863  0017                     	;# 
  1864  0018                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  008C                     	;# 
  1870  008D                     	;# 
  1871  008E                     	;# 
  1872  0090                     	;# 
  1873  0091                     	;# 
  1874  0092                     	;# 
  1875  0095                     	;# 
  1876  0096                     	;# 
  1877  0097                     	;# 
  1878  0099                     	;# 
  1879  009A                     	;# 
  1880  009B                     	;# 
  1881  009B                     	;# 
  1882  009C                     	;# 
  1883  009D                     	;# 
  1884  009E                     	;# 
  1885  010C                     	;# 
  1886  010D                     	;# 
  1887  010E                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  011D                     	;# 
  1891  018C                     	;# 
  1892  018D                     	;# 
  1893  018E                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0194                     	;# 
  1900  0195                     	;# 
  1901  0196                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0211                     	;# 
  1918  0212                     	;# 
  1919  0212                     	;# 
  1920  0213                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0214                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0215                     	;# 
  1927  0216                     	;# 
  1928  0216                     	;# 
  1929  0217                     	;# 
  1930  0217                     	;# 
  1931  0291                     	;# 
  1932  0291                     	;# 
  1933  0292                     	;# 
  1934  0293                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  0394                     	;# 
  1940  0395                     	;# 
  1941  0396                     	;# 
  1942  0FE4                     	;# 
  1943  0FE5                     	;# 
  1944  0FE6                     	;# 
  1945  0FE7                     	;# 
  1946  0FE8                     	;# 
  1947  0FE9                     	;# 
  1948  0FEA                     	;# 
  1949  0FEB                     	;# 
  1950  0FED                     	;# 
  1951  0FEE                     	;# 
  1952  0FEF                     	;# 
  1953  0000                     	;# 
  1954  0001                     	;# 
  1955  0002                     	;# 
  1956  0003                     	;# 
  1957  0004                     	;# 
  1958  0005                     	;# 
  1959  0006                     	;# 
  1960  0007                     	;# 
  1961  0008                     	;# 
  1962  0009                     	;# 
  1963  000A                     	;# 
  1964  000B                     	;# 
  1965  000C                     	;# 
  1966  000D                     	;# 
  1967  000E                     	;# 
  1968  0010                     	;# 
  1969  0011                     	;# 
  1970  0012                     	;# 
  1971  0015                     	;# 
  1972  0016                     	;# 
  1973  0016                     	;# 
  1974  0017                     	;# 
  1975  0018                     	;# 
  1976  0019                     	;# 
  1977  001A                     	;# 
  1978  001B                     	;# 
  1979  001C                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0095                     	;# 
  1987  0096                     	;# 
  1988  0097                     	;# 
  1989  0099                     	;# 
  1990  009A                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0116                     	;# 
  2000  0117                     	;# 
  2001  011D                     	;# 
  2002  018C                     	;# 
  2003  018D                     	;# 
  2004  018E                     	;# 
  2005  0191                     	;# 
  2006  0191                     	;# 
  2007  0192                     	;# 
  2008  0193                     	;# 
  2009  0193                     	;# 
  2010  0194                     	;# 
  2011  0195                     	;# 
  2012  0196                     	;# 
  2013  0197                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019E                     	;# 
  2024  019F                     	;# 
  2025  020D                     	;# 
  2026  0210                     	;# 
  2027  0211                     	;# 
  2028  0211                     	;# 
  2029  0212                     	;# 
  2030  0212                     	;# 
  2031  0213                     	;# 
  2032  0213                     	;# 
  2033  0214                     	;# 
  2034  0214                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0215                     	;# 
  2038  0216                     	;# 
  2039  0216                     	;# 
  2040  0217                     	;# 
  2041  0217                     	;# 
  2042  0291                     	;# 
  2043  0291                     	;# 
  2044  0292                     	;# 
  2045  0293                     	;# 
  2046  0298                     	;# 
  2047  0298                     	;# 
  2048  0299                     	;# 
  2049  029A                     	;# 
  2050  0394                     	;# 
  2051  0395                     	;# 
  2052  0396                     	;# 
  2053  0FE4                     	;# 
  2054  0FE5                     	;# 
  2055  0FE6                     	;# 
  2056  0FE7                     	;# 
  2057  0FE8                     	;# 
  2058  0FE9                     	;# 
  2059  0FEA                     	;# 
  2060  0FEB                     	;# 
  2061  0FED                     	;# 
  2062  0FEE                     	;# 
  2063  0FEF                     	;# 
  2064  0000                     	;# 
  2065  0001                     	;# 
  2066  0002                     	;# 
  2067  0003                     	;# 
  2068  0004                     	;# 
  2069  0005                     	;# 
  2070  0006                     	;# 
  2071  0007                     	;# 
  2072  0008                     	;# 
  2073  0009                     	;# 
  2074  000A                     	;# 
  2075  000B                     	;# 
  2076  000C                     	;# 
  2077  000D                     	;# 
  2078  000E                     	;# 
  2079  0010                     	;# 
  2080  0011                     	;# 
  2081  0012                     	;# 
  2082  0015                     	;# 
  2083  0016                     	;# 
  2084  0016                     	;# 
  2085  0017                     	;# 
  2086  0018                     	;# 
  2087  0019                     	;# 
  2088  001A                     	;# 
  2089  001B                     	;# 
  2090  001C                     	;# 
  2091  008C                     	;# 
  2092  008D                     	;# 
  2093  008E                     	;# 
  2094  0090                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  010C                     	;# 
  2108  010D                     	;# 
  2109  010E                     	;# 
  2110  0116                     	;# 
  2111  0117                     	;# 
  2112  011D                     	;# 
  2113  018C                     	;# 
  2114  018D                     	;# 
  2115  018E                     	;# 
  2116  0191                     	;# 
  2117  0191                     	;# 
  2118  0192                     	;# 
  2119  0193                     	;# 
  2120  0193                     	;# 
  2121  0194                     	;# 
  2122  0195                     	;# 
  2123  0196                     	;# 
  2124  0197                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019B                     	;# 
  2130  019B                     	;# 
  2131  019C                     	;# 
  2132  019C                     	;# 
  2133  019D                     	;# 
  2134  019E                     	;# 
  2135  019F                     	;# 
  2136  020D                     	;# 
  2137  0210                     	;# 
  2138  0211                     	;# 
  2139  0211                     	;# 
  2140  0212                     	;# 
  2141  0212                     	;# 
  2142  0213                     	;# 
  2143  0213                     	;# 
  2144  0214                     	;# 
  2145  0214                     	;# 
  2146  0215                     	;# 
  2147  0215                     	;# 
  2148  0215                     	;# 
  2149  0216                     	;# 
  2150  0216                     	;# 
  2151  0217                     	;# 
  2152  0217                     	;# 
  2153  0291                     	;# 
  2154  0291                     	;# 
  2155  0292                     	;# 
  2156  0293                     	;# 
  2157  0298                     	;# 
  2158  0298                     	;# 
  2159  0299                     	;# 
  2160  029A                     	;# 
  2161  0394                     	;# 
  2162  0395                     	;# 
  2163  0396                     	;# 
  2164  0FE4                     	;# 
  2165  0FE5                     	;# 
  2166  0FE6                     	;# 
  2167  0FE7                     	;# 
  2168  0FE8                     	;# 
  2169  0FE9                     	;# 
  2170  0FEA                     	;# 
  2171  0FEB                     	;# 
  2172  0FED                     	;# 
  2173  0FEE                     	;# 
  2174  0FEF                     	;# 
  2175                           
  2176                           	psect	idataBANK5
  2177  1C85                     __pidataBANK5:	
  2178                           
  2179                           ;initializer for __product
  2180  1C85  3463               	retlw	99
  2181  1C86  3402               	retlw	2
  2182  1C87  3400               	retlw	0
  2183  1C88  3400               	retlw	0
  2184  1C89  3400               	retlw	0
  2185  1C8A  3400               	retlw	0
  2186  1C8B  3400               	retlw	0
  2187  1C8C  3400               	retlw	0
  2188  1C8D  3400               	retlw	0
  2189  1C8E  3400               	retlw	0
  2190  1C8F  3400               	retlw	0
  2191  1C90  3400               	retlw	0
  2192  1C91  34FF               	retlw	255
  2193  1C92  34FF               	retlw	255
  2194  1C93  34FF               	retlw	255
  2195  1C94  3400               	retlw	0
  2196  1C95  3400               	retlw	0
  2197  1C96  3400               	retlw	0
  2198  1C97  3400               	retlw	0
  2199  1C98  3400               	retlw	0
  2200  1C99  3400               	retlw	0
  2201  1C9A  3400               	retlw	0
  2202  1C9B  3400               	retlw	0
  2203  1C9C  3400               	retlw	0
  2204  1C9D  3400               	retlw	0
  2205  1C9E  3400               	retlw	0
  2206  1C9F  3400               	retlw	0
  2207  1CA0  3400               	retlw	0
  2208  1CA1  3400               	retlw	0
  2209  1CA2  3400               	retlw	0
  2210  1CA3  3400               	retlw	0
  2211  1CA4  3400               	retlw	0
  2212                           
  2213                           	psect	stringtext
  2214  1000                     __pstringtext:	
  2215  1000                     _CC2500_registers_address:	
  2216  1000  3403               	retlw	3
  2217  1001  3416               	retlw	22
  2218  1002  3417               	retlw	23
  2219  1003  341E               	retlw	30
  2220  1004  341F               	retlw	31
  2221  1005  3420               	retlw	32
  2222  1006  342A               	retlw	42
  2223  1007  342B               	retlw	43
  2224  1008  340B               	retlw	11
  2225  1009  340C               	retlw	12
  2226  100A  340D               	retlw	13
  2227  100B  340E               	retlw	14
  2228  100C  340F               	retlw	15
  2229  100D  3410               	retlw	16
  2230  100E  3411               	retlw	17
  2231  100F  3412               	retlw	18
  2232  1010  3413               	retlw	19
  2233  1011  3414               	retlw	20
  2234  1012  340A               	retlw	10
  2235  1013  3415               	retlw	21
  2236  1014  3421               	retlw	33
  2237  1015  3422               	retlw	34
  2238  1016  3418               	retlw	24
  2239  1017  3419               	retlw	25
  2240  1018  341A               	retlw	26
  2241  1019  341B               	retlw	27
  2242  101A  341C               	retlw	28
  2243  101B  341D               	retlw	29
  2244  101C  3423               	retlw	35
  2245  101D  3424               	retlw	36
  2246  101E  3425               	retlw	37
  2247  101F  3426               	retlw	38
  2248  1020  3429               	retlw	41
  2249  1021  342C               	retlw	44
  2250  1022  342D               	retlw	45
  2251  1023  342E               	retlw	46
  2252  1024  3400               	retlw	0
  2253  1025  3401               	retlw	1
  2254  1026  3402               	retlw	2
  2255  1027  3407               	retlw	7
  2256  1028  3408               	retlw	8
  2257  1029  3409               	retlw	9
  2258  102A  3406               	retlw	6
  2259  102B  3404               	retlw	4
  2260  102C  3405               	retlw	5
  2261  102D  3427               	retlw	39
  2262  102E  3428               	retlw	40
  2263  102F                     __end_of_CC2500_registers_address:	
  2264  102F                     _CC2500_rfSettings:	
  2265  102F  3407               	retlw	7
  2266  1030  3407               	retlw	7
  2267  1031  3430               	retlw	48
  2268  1032  3487               	retlw	135
  2269  1033  346B               	retlw	107
  2270  1034  34F8               	retlw	248
  2271  1035  347F               	retlw	127
  2272  1036  343F               	retlw	63
  2273  1037  3409               	retlw	9
  2274  1038  3400               	retlw	0
  2275  1039  345C               	retlw	92
  2276  103A  34A7               	retlw	167
  2277  103B  3462               	retlw	98
  2278  103C  3486               	retlw	134
  2279  103D  3483               	retlw	131
  2280  103E  3403               	retlw	3
  2281  103F  3422               	retlw	34
  2282  1040  34F8               	retlw	248
  2283  1041  3400               	retlw	0
  2284  1042  3444               	retlw	68
  2285  1043  34B6               	retlw	182
  2286  1044  3410               	retlw	16
  2287  1045  3418               	retlw	24
  2288  1046  341D               	retlw	29
  2289  1047  341C               	retlw	28
  2290  1048  34C7               	retlw	199
  2291  1049  3400               	retlw	0
  2292  104A  34B2               	retlw	178
  2293  104B  34EA               	retlw	234
  2294  104C  340A               	retlw	10
  2295  104D  3400               	retlw	0
  2296  104E  3411               	retlw	17
  2297  104F  3459               	retlw	89
  2298  1050  3488               	retlw	136
  2299  1051  3431               	retlw	49
  2300  1052  340B               	retlw	11
  2301  1053  342F               	retlw	47
  2302  1054  342E               	retlw	46
  2303  1055  3406               	retlw	6
  2304  1056  3404               	retlw	4
  2305  1057  3405               	retlw	5
  2306  1058  3400               	retlw	0
  2307  1059  3430               	retlw	48
  2308  105A  34D3               	retlw	211
  2309  105B  3491               	retlw	145
  2310  105C  3441               	retlw	65
  2311  105D  3400               	retlw	0
  2312  105E                     __end_of_CC2500_rfSettings:	
  2313  105E                     _CC2500_patable_vaule:	
  2314  105E  34FE               	retlw	254
  2315  105F  34FE               	retlw	254
  2316  1060  34FE               	retlw	254
  2317  1061  34FE               	retlw	254
  2318  1062  34FE               	retlw	254
  2319  1063  34FE               	retlw	254
  2320  1064  34FE               	retlw	254
  2321  1065  34FE               	retlw	254
  2322  1066                     __end_of_CC2500_patable_vaule:	
  2323                           
  2324                           	psect	nvCOMMON
  2325  007B                     __pnvCOMMON:	
  2326  007B                     _product:	
  2327  007B                     	ds	1
  2328  000C                     _PORTA	set	12
  2329  000D                     _PORTB	set	13
  2330  000E                     _PORTC	set	14
  2331  0018                     _T1CON	set	24
  2332  0017                     _TMR1H	set	23
  2333  0016                     _TMR1L	set	22
  2334  005F                     _GIE	set	95
  2335  005B                     _IOCIE	set	91
  2336  0058                     _IOCIF	set	88
  2337  005E                     _PEIE	set	94
  2338  0060                     _RA0	set	96
  2339  0063                     _RA3	set	99
  2340  0064                     _RA4	set	100
  2341  0066                     _RA6	set	102
  2342  0067                     _RA7	set	103
  2343  0068                     _RB0	set	104
  2344  0069                     _RB1	set	105
  2345  006A                     _RB2	set	106
  2346  006B                     _RB3	set	107
  2347  006C                     _RB4	set	108
  2348  006D                     _RB5	set	109
  2349  0070                     _RC0	set	112
  2350  0071                     _RC1	set	113
  2351  0072                     _RC2	set	114
  2352  0074                     _RC4	set	116
  2353  0075                     _RC5	set	117
  2354  0077                     _RC7	set	119
  2355  0088                     _TMR1IF	set	136
  2356  009D                     _ADCON0	set	157
  2357  009E                     _ADCON1	set	158
  2358  009C                     _ADRESH	set	156
  2359  009B                     _ADRESL	set	155
  2360  0099                     _OSCCON	set	153
  2361  008C                     _TRISA	set	140
  2362  008D                     _TRISB	set	141
  2363  008E                     _TRISC	set	142
  2364  0097                     _WDTCON	set	151
  2365  04E9                     _GO_nDONE	set	1257
  2366  0488                     _TMR1IE	set	1160
  2367  0117                     _FVRCON	set	279
  2368  010C                     _LATA	set	268
  2369  010D                     _LATB	set	269
  2370  010E                     _LATC	set	270
  2371  018C                     _ANSELA	set	396
  2372  018D                     _ANSELB	set	397
  2373  018E                     _ANSELC	set	398
  2374  0192                     _PMADRH	set	402
  2375  0191                     _PMADRL	set	401
  2376  0196                     _PMCON2	set	406
  2377  0194                     _PMDATH	set	404
  2378  0193                     _PMDATL	set	403
  2379  0CAE                     _CFGS	set	3246
  2380  0CAC                     _FREE	set	3244
  2381  0CAD                     _LWLO	set	3245
  2382  0CA8                     _RD	set	3240
  2383  0CA9                     _WR	set	3241
  2384  0CAA                     _WREN	set	3242
  2385  020D                     _WPUB	set	525
  2386  0396                     _IOCBF	set	918
  2387  0395                     _IOCBN	set	917
  2388  0394                     _IOCBP	set	916
  2389  1CB2                     _IOCBF2	set	7346
  2390                           
  2391                           ; #config settings
  2392  0000                     
  2393                           	psect	cinit
  2394  0021                     start_initialization:	
  2395  0021                     __initialization:	
  2396                           
  2397                           ; Clear objects allocated to BITCOMMON
  2398  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BANK0
  2401  0022  01EC               	clrf	__pbssBANK0& (0+127)
  2402  0023  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2403                           
  2404                           ; Clear objects allocated to BANK1
  2405  0024  30A0               	movlw	low __pbssBANK1
  2406  0025  0084               	movwf	4
  2407  0026  3000               	movlw	high __pbssBANK1
  2408  0027  0085               	movwf	5
  2409  0028  3050               	movlw	80
  2410  0029  31A7  27E5  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK2
  2413  002C  3020               	movlw	low __pbssBANK2
  2414  002D  0084               	movwf	4
  2415  002E  3001               	movlw	high __pbssBANK2
  2416  002F  0085               	movwf	5
  2417  0030  3050               	movlw	80
  2418  0031  31A7  27E5  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Clear objects allocated to BANK3
  2421  0034  30A0               	movlw	low __pbssBANK3
  2422  0035  0084               	movwf	4
  2423  0036  3001               	movlw	high __pbssBANK3
  2424  0037  0085               	movwf	5
  2425  0038  3050               	movlw	80
  2426  0039  31A7  27E5  3180   	fcall	clear_ram0
  2427                           
  2428                           ; Clear objects allocated to BANK4
  2429  003C  3020               	movlw	low __pbssBANK4
  2430  003D  0084               	movwf	4
  2431  003E  3002               	movlw	high __pbssBANK4
  2432  003F  0085               	movwf	5
  2433  0040  3035               	movlw	53
  2434  0041  31A7  27E5  3180   	fcall	clear_ram0
  2435                           
  2436                           ; Initialize objects allocated to BANK5
  2437  0044  3085               	movlw	low __pidataBANK5
  2438  0045  0084               	movwf	4
  2439  0046  309C               	movlw	(high __pidataBANK5)| (0+128)
  2440  0047  0085               	movwf	5
  2441  0048  30A0               	movlw	low __pdataBANK5
  2442  0049  0086               	movwf	6
  2443  004A  3002               	movlw	high __pdataBANK5
  2444  004B  0087               	movwf	7
  2445  004C  3020               	movlw	32
  2446  004D  31A7  27DF         	fcall	init_ram
  2447  004F                     end_of_initialization:	
  2448                           ;End of C runtime variable initialization code
  2449                           
  2450  004F                     __end_of__initialization:	
  2451  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2452  0050  0020               	movlb	0
  2453  0051  3194  2C92         	ljmp	_main	;jump to C main() function
  2454                           
  2455                           	psect	bitbssCOMMON
  2456  03D0                     __pbitbssCOMMON:	
  2457  03D0                     _Receive_OK:	
  2458  03D0                     	ds	1
  2459  03D1                     _Transceive_OK:	
  2460  03D1                     	ds	1
  2461                           
  2462                           	psect	bssBANK0
  2463  006C                     __pbssBANK0:	
  2464  006C                     _DimmerLights:	
  2465  006C                     	ds	1
  2466  006D                     _Sw:	
  2467  006D                     	ds	1
  2468                           
  2469                           	psect	bssBANK1
  2470  00A0                     __pbssBANK1:	
  2471  00A0                     _DimmerIntr1:	
  2472  00A0                     	ds	16
  2473  00B0                     _DimmerIntr2:	
  2474  00B0                     	ds	16
  2475  00C0                     _RF1:	
  2476  00C0                     	ds	15
  2477  00CF                     _myMain:	
  2478  00CF                     	ds	13
  2479  00DC                     _Buz1:	
  2480  00DC                     	ds	12
  2481  00E8                     _CRC:	
  2482  00E8                     	ds	1
  2483  00E9                     _Cmd:	
  2484  00E9                     	ds	1
  2485  00EA                     _DelayOff:	
  2486  00EA                     	ds	1
  2487  00EB                     _LED:	
  2488  00EB                     	ds	1
  2489  00EC                     _Rx_Length:	
  2490  00EC                     	ds	1
  2491  00ED                     _SPI0Buffer:	
  2492  00ED                     	ds	1
  2493  00EE                     _Tx_Length:	
  2494  00EE                     	ds	1
  2495  00EF                     _s_data:	
  2496  00EF                     	ds	1
  2497                           
  2498                           	psect	bssBANK2
  2499  0120                     __pbssBANK2:	
  2500  0120                     _Dimmer:	
  2501  0120                     	ds	5
  2502  0125                     _Timer1:	
  2503  0125                     	ds	3
  2504  0128                     _RF_Count:	
  2505  0128                     	ds	2
  2506  012A                     _WDT:	
  2507  012A                     	ds	2
  2508  012C                     _DimmerIntr:	
  2509  012C                     	ds	1
  2510  012D                     _Light:	
  2511  012D                     	ds	1
  2512  012E                     _RSSI:	
  2513  012E                     	ds	1
  2514  012F                     _SwDetect:	
  2515  012F                     	ds	1
  2516  0130                     _r_address:	
  2517  0130                     	ds	1
  2518  0131                     _r_data:	
  2519  0131                     	ds	1
  2520  0132                     _Load:	
  2521  0132                     	ds	40
  2522  015A                     _Temp:	
  2523  015A                     	ds	14
  2524  0168                     _VarErrLED:	
  2525  0168                     	ds	4
  2526  016C                     _VarLED1:	
  2527  016C                     	ds	4
  2528                           
  2529                           	psect	bssBANK3
  2530  01A0                     __pbssBANK3:	
  2531  01A0                     _RF_Data:	
  2532  01A0                     	ds	30
  2533  01BE                     _DimmerLights1:	
  2534  01BE                     	ds	9
  2535  01C7                     _DimmerLights2:	
  2536  01C7                     	ds	9
  2537  01D0                     _Sw1:	
  2538  01D0                     	ds	9
  2539  01D9                     _Sw2:	
  2540  01D9                     	ds	9
  2541  01E2                     _DlySw1:	
  2542  01E2                     	ds	5
  2543  01E7                     _DlySw2:	
  2544  01E7                     	ds	5
  2545  01EC                     _VarLED2:	
  2546  01EC                     	ds	4
  2547                           
  2548                           	psect	bssBANK4
  2549  0220                     __pbssBANK4:	
  2550  0220                     _u1:	
  2551  0220                     	ds	16
  2552  0230                     _Memory:	
  2553  0230                     	ds	37
  2554                           
  2555                           	psect	dataBANK5
  2556  02A0                     __pdataBANK5:	
  2557  02A0                     __product:	
  2558  02A0                     	ds	32
  2559                           
  2560                           	psect	clrtext
  2561  27E5                     clear_ram0:	
  2562                           ;	Called with FSR0 containing the base address, and
  2563                           ;	WREG with the size to clear
  2564                           
  2565  27E5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2566  27E6                     clrloop0:	
  2567  27E6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2568  27E7  3101               	addfsr 0,1
  2569  27E8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2570  27E9  2FE6               	goto	clrloop0	;have we reached the end yet?
  2571  27EA  3400               	retlw	0	;all done for this memory range, return
  2572                           
  2573                           	psect	inittext
  2574  27DF                     init_ram:	
  2575  27DF  00FE               	movwf	126
  2576  27E0                     initloop:	
  2577  27E0  0012               	moviw fsr0++
  2578  27E1  001E               	movwi fsr1++
  2579  27E2  0BFE               	decfsz	126,f
  2580  27E3  2FE0               	goto	initloop
  2581  27E4  3400               	retlw	0
  2582                           
  2583                           	psect	cstackBANK4
  2584  0255                     __pcstackBANK4:	
  2585  0255                     ?_main:	
  2586  0255                     main@argc:	
  2587                           ; 2 bytes @ 0x0
  2588                           
  2589                           
  2590                           ; 2 bytes @ 0x0
  2591  0255                     	ds	2
  2592  0257                     main@argv:	
  2593                           
  2594                           ; 2 bytes @ 0x2
  2595  0257                     	ds	2
  2596                           
  2597                           	psect	cstackCOMMON
  2598  0070                     __pcstackCOMMON:	
  2599  0070                     ?_CC2500_WriteCommand:	
  2600  0070                     ?_RF_Timeout_Counter:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setRF_TimeoutCleared:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_WriteByte:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ReadStatus:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ReadByte:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_PowerRST:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_InitSetREG:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_InitPATable:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_ClearTXFIFO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_ClearRXFIFO:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_FrequencyCabr:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_SIDLEMode:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DlyOff_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DlyOff_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_SwOn:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_SwOff:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setMemory_Modify:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setDimmerLights_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_DimmingFunction:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_DimmerLights_TwoPhase_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLights_AssignationDimming:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_setDimmerLights_Line:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_DimmerIntr_ValueCalculate:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_setDimmerLights_DimmingClose:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setTxData:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setRF_TransceiveGO:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setLED_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setLED_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Fosc_Set:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_IO_Set:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_TMR1_Set:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_ADC_Set:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_IOC_Set:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Set:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TMR1_ISR:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_IOC_ISR:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Timeout_Counter:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_set_TimeoutCleared:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Write:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Flash_Memory_Modify:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_WDT_Clearing:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_myMain_Initialization:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Temp_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Load_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Switch_Initialization:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_RF_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_getLoad_AD:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_getTemp_AD:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_my_MainTimer:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Temp_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Load_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Switch_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_RF_Main:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_Exception_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setLoad_AH_AL_Restore:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setTemp_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setTemp_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setOverTemp_ADV_Restore:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setRF_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setRF_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_RF_RxDisable:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_getRxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setLog_Code:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setControl_Lights_Table:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setRFSW_Control:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setRFSW_AdjControl:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setRF_AdjControl:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setSw_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setSw_Main:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_Buzzer_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_Buzzer_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_CC2500_TxData:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_CC2500_RxData:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_CC2500_PowerOnInitial:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DelayOffPointSelect:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_DelayOff_Initialization:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DelayOff_Main:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_DimmerIntr_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_DimmerLights_SelectPointer:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerLights_Initialization:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_setDimmerLights_DimmingOn:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_DimmerLights_Main:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DimmerLights_TMR_1:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ??_DimmerLights_TMR_1:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_DimmerLights_IOC_1:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ??_DimmerLights_IOC_1:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_DimmerLights_TMR_2:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ??_DimmerLights_TMR_2:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_DimmerLights_IOC_2:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ??_DimmerLights_IOC_2:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_LedPointSelect:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_LED_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_LED_Main:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_Mcu_Initialization:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_ISR:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_Flash_Memory_Initialization:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_Flash_Memory_Main:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_Flash_Memory_Unlock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_Flash_Memory_Erasing:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_setMemory_LoopSave:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_WDT_Main:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_setRF_Learn:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_TouchPower:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_SwPointSelect:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmerLights_Status:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDimmerLights_ValueToPercent:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmerLights_PercentToValue:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getLoad_OK:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getMain_All_Error_Status:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getMain_All_LightsStatus:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getDimmerLights_Allow_Condition:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getCmd_Status:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_Flash_Memory_Read:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getAll_Sw_KeyStatus:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getRF_KeyStatus:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getSw_KeyStatus:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_getDelayOff_GO:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getDimmerIntr_DimmingValue:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getDimmerLights_Line:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getDimmer_LoadGO:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getDimmer_Load_Status:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getMain_Lights_Count:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     setDimmerLights_Initialization@lights:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x0
  2983  0070                     	ds	1
  2984  0071                     ??_TMR1_ISR:	
  2985  0071                     ??_IOC_ISR:	
  2986                           ; 0 bytes @ 0x1
  2987                           
  2988  0071                     ??_ISR:	
  2989                           ; 0 bytes @ 0x1
  2990                           
  2991                           
  2992                           ; 0 bytes @ 0x1
  2993  0071                     	ds	1
  2994  0072                     ??_RF_Timeout_Counter:	
  2995  0072                     ??_setRF_TimeoutCleared:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_CC2500_WriteByte:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_CC2500_ReadByte:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ?_DelayTime_1us:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_setMemory_Modify:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_setDimmerLights_Initialization:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_getLoad_OK:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ??_getMain_All_Error_Status:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_getMain_All_LightsStatus:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_setDimmerLights_Line:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_getCmd_Status:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ?_setCmd_Status:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ??_setTxData:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ??_setRF_TransceiveGO:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_Fosc_Set:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_IO_Set:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_TMR1_Set:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_ADC_Set:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_IOC_Set:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_WDT_Set:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ??_Timeout_Counter:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ??_set_TimeoutCleared:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ??_Flash_Memory_Read:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ?_setMemory_Data:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ??_Flash_Memory_Write:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ??_getAll_Sw_KeyStatus:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_WDT_Clearing:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_myMain_Initialization:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_Temp_Initialization:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ??_setLoad_AH_AL_Restore:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ??_setTemp_Initialization:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0072                     ??_setOverTemp_ADV_Restore:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0072                     ??_setRF_Initialization:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0072                     ??_getRF_KeyStatus:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0072                     ??_RF_RxDisable:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0072                     ??_setData:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0072                     ??_getSw_KeyStatus:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0072                     ??_Buzzer_Initialization:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0072                     ??_Buzzer_Main:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0072                     ??_DelayOffPointSelect:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0072                     ?_setDimmerIntr_ControlStatus:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0072                     ?_setDimmerIntr_DimmingValue:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0072                     ??_getDimmerIntr_DimmingValue:	
  3122                           ; 0 bytes @ 0x2
  3123                           
  3124  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3125                           ; 0 bytes @ 0x2
  3126                           
  3127  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3128                           ; 0 bytes @ 0x2
  3129                           
  3130  0072                     ?_setDimmerIntr_Dimming_RF:	
  3131                           ; 0 bytes @ 0x2
  3132                           
  3133  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3134                           ; 0 bytes @ 0x2
  3135                           
  3136  0072                     ??_DimmerLights_SelectPointer:	
  3137                           ; 0 bytes @ 0x2
  3138                           
  3139  0072                     ??_getDimmerLights_Line:	
  3140                           ; 0 bytes @ 0x2
  3141                           
  3142  0072                     ??_getDimmer_LoadGO:	
  3143                           ; 0 bytes @ 0x2
  3144                           
  3145  0072                     ??_getDimmer_Load_Status:	
  3146                           ; 0 bytes @ 0x2
  3147                           
  3148  0072                     ??_LedPointSelect:	
  3149                           ; 0 bytes @ 0x2
  3150                           
  3151  0072                     ??_Flash_Memory_Unlock:	
  3152                           ; 0 bytes @ 0x2
  3153                           
  3154  0072                     ??_Flash_Memory_Erasing:	
  3155                           ; 0 bytes @ 0x2
  3156                           
  3157  0072                     ??_setMemory_LoopSave:	
  3158                           ; 0 bytes @ 0x2
  3159                           
  3160  0072                     ??_WDT_Main:	
  3161                           ; 0 bytes @ 0x2
  3162                           
  3163  0072                     ??_getMain_Lights_Count:	
  3164                           ; 0 bytes @ 0x2
  3165                           
  3166  0072                     ??_setRF_Learn:	
  3167                           ; 0 bytes @ 0x2
  3168                           
  3169  0072                     ??_TouchPower:	
  3170                           ; 0 bytes @ 0x2
  3171                           
  3172  0072                     ??_SwPointSelect:	
  3173                           ; 0 bytes @ 0x2
  3174                           
  3175  0072                     ?___bmul:	
  3176                           ; 0 bytes @ 0x2
  3177                           
  3178  0072                     ?___lbdiv:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0072                     ?_getBuz_GO:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0072                     ?_getAD:	
  3185                           ; 2 bytes @ 0x2
  3186                           
  3187  0072                     ?___wmul:	
  3188                           ; 2 bytes @ 0x2
  3189                           
  3190  0072                     ?___awdiv:	
  3191                           ; 2 bytes @ 0x2
  3192                           
  3193  0072                     ?___lwdiv:	
  3194                           ; 2 bytes @ 0x2
  3195                           
  3196  0072                     ?___ftpack:	
  3197                           ; 2 bytes @ 0x2
  3198                           
  3199  0072                     setDimmerIntr_ControlStatus@command:	
  3200                           ; 3 bytes @ 0x2
  3201                           
  3202  0072                     setDimmerIntr_DimmingValue@value:	
  3203                           ; 1 bytes @ 0x2
  3204                           
  3205  0072                     setDimmerIntr_Dimming_Sw@command:	
  3206                           ; 1 bytes @ 0x2
  3207                           
  3208  0072                     getDimmerIntr_Dimming_Sw@status:	
  3209                           ; 1 bytes @ 0x2
  3210                           
  3211  0072                     setDimmerIntr_Dimming_RF@command:	
  3212                           ; 1 bytes @ 0x2
  3213                           
  3214  0072                     setDimmerLights_Line@lights:	
  3215                           ; 1 bytes @ 0x2
  3216                           
  3217  0072                     getDimmer_LoadGO@loadgo:	
  3218                           ; 1 bytes @ 0x2
  3219                           
  3220  0072                     getDimmer_Load_Status@status:	
  3221                           ; 1 bytes @ 0x2
  3222                           
  3223  0072                     getAD@adcon1:	
  3224                           ; 1 bytes @ 0x2
  3225                           
  3226  0072                     setMemory_Data@data:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229  0072                     getMain_All_LightsStatus@status:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0072                     setCmd_Status@cmd:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0072                     getCmd_Status@number:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0072                     getLoad_OK@ok:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0072                     ___bmul@multiplicand:	
  3242                           ; 1 bytes @ 0x2
  3243                           
  3244  0072                     ___lbdiv@divisor:	
  3245                           ; 1 bytes @ 0x2
  3246                           
  3247  0072                     DelayTime_1us@count:	
  3248                           ; 1 bytes @ 0x2
  3249                           
  3250  0072                     ___wmul@multiplier:	
  3251                           ; 2 bytes @ 0x2
  3252                           
  3253  0072                     ___awdiv@divisor:	
  3254                           ; 2 bytes @ 0x2
  3255                           
  3256  0072                     ___lwdiv@divisor:	
  3257                           ; 2 bytes @ 0x2
  3258                           
  3259  0072                     ___ftpack@arg:	
  3260                           ; 2 bytes @ 0x2
  3261                           
  3262                           
  3263                           ; 3 bytes @ 0x2
  3264  0072                     	ds	1
  3265  0073                     ??_getDimmerLights_Allow_Condition:	
  3266  0073                     ??_setCmd_Status:	
  3267                           ; 0 bytes @ 0x3
  3268                           
  3269  0073                     ??_setMemory_Data:	
  3270                           ; 0 bytes @ 0x3
  3271                           
  3272  0073                     ??_RF_Initialization:	
  3273                           ; 0 bytes @ 0x3
  3274                           
  3275  0073                     ??_setDimmerIntr_ControlStatus:	
  3276                           ; 0 bytes @ 0x3
  3277                           
  3278  0073                     ??_setDimmerIntr_DimmingValue:	
  3279                           ; 0 bytes @ 0x3
  3280                           
  3281  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3282                           ; 0 bytes @ 0x3
  3283                           
  3284  0073                     ??_setDimmerIntr_Dimming_RF:	
  3285                           ; 0 bytes @ 0x3
  3286                           
  3287  0073                     ??_Mcu_Initialization:	
  3288                           ; 0 bytes @ 0x3
  3289                           
  3290  0073                     ??___bmul:	
  3291                           ; 0 bytes @ 0x3
  3292                           
  3293  0073                     ??___lbdiv:	
  3294                           ; 0 bytes @ 0x3
  3295                           
  3296  0073                     CC2500_WriteByte@loop_a:	
  3297                           ; 0 bytes @ 0x3
  3298                           
  3299  0073                     CC2500_ReadByte@loop_b:	
  3300                           ; 1 bytes @ 0x3
  3301                           
  3302  0073                     DelayOffPointSelect@sw:	
  3303                           ; 1 bytes @ 0x3
  3304                           
  3305  0073                     getDimmerIntr_DimmingValue@value:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0073                     getDimmerIntr_Dimming_Sw@lights:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2605:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0073                     DimmerLights_SelectPointer@lights:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317  0073                     getDimmerLights_Line@line:	
  3318                           ; 1 bytes @ 0x3
  3319                           
  3320  0073                     LedPointSelect@led:	
  3321                           ; 1 bytes @ 0x3
  3322                           
  3323  0073                     Flash_Memory_Read@i:	
  3324                           ; 1 bytes @ 0x3
  3325                           
  3326  0073                     Flash_Memory_Write@i:	
  3327                           ; 1 bytes @ 0x3
  3328                           
  3329  0073                     setMemory_Modify@command:	
  3330                           ; 1 bytes @ 0x3
  3331                           
  3332  0073                     setMemory_LoopSave@command:	
  3333                           ; 1 bytes @ 0x3
  3334                           
  3335  0073                     getMain_Lights_Count@status1:	
  3336                           ; 1 bytes @ 0x3
  3337                           
  3338  0073                     getCmd_Status@cmd:	
  3339                           ; 1 bytes @ 0x3
  3340                           
  3341  0073                     setLoad_AH_AL_Restore@i:	
  3342                           ; 1 bytes @ 0x3
  3343                           
  3344  0073                     setRF_Learn@command:	
  3345                           ; 1 bytes @ 0x3
  3346                           
  3347  0073                     getRF_KeyStatus@key:	
  3348                           ; 1 bytes @ 0x3
  3349                           
  3350  0073                     setRF_TransceiveGO@command:	
  3351                           ; 1 bytes @ 0x3
  3352                           
  3353  0073                     SwPointSelect@sw:	
  3354                           ; 1 bytes @ 0x3
  3355                           
  3356  0073                     _getSw_KeyStatus$7443:	
  3357                           ; 1 bytes @ 0x3
  3358                           
  3359  0073                     getAll_Sw_KeyStatus@status:	
  3360                           ; 1 bytes @ 0x3
  3361                           
  3362  0073                     _getMain_All_Error_Status$4214:	
  3363                           ; 1 bytes @ 0x3
  3364                           
  3365  0073                     setOverTemp_ADV_Restore@i:	
  3366                           ; 2 bytes @ 0x3
  3367                           
  3368                           
  3369                           ; 2 bytes @ 0x3
  3370  0073                     	ds	1
  3371  0074                     ??_CC2500_WriteCommand:	
  3372  0074                     ??_CC2500_ReadStatus:	
  3373                           ; 0 bytes @ 0x4
  3374                           
  3375  0074                     ??_DelayTime_1us:	
  3376                           ; 0 bytes @ 0x4
  3377                           
  3378  0074                     ?_CC2500_WriteREG:	
  3379                           ; 0 bytes @ 0x4
  3380                           
  3381  0074                     ??_DlyOff_Initialization:	
  3382                           ; 0 bytes @ 0x4
  3383                           
  3384  0074                     ??_getDimmerLights_Status:	
  3385                           ; 0 bytes @ 0x4
  3386                           
  3387  0074                     ??_setDimmerLights_SwOff:	
  3388                           ; 0 bytes @ 0x4
  3389                           
  3390  0074                     ?_setLED:	
  3391                           ; 0 bytes @ 0x4
  3392                           
  3393  0074                     ??_setLED_Main:	
  3394                           ; 0 bytes @ 0x4
  3395                           
  3396  0074                     ??_Load_Initialization:	
  3397                           ; 0 bytes @ 0x4
  3398                           
  3399  0074                     ??_getBuz_GO:	
  3400                           ; 0 bytes @ 0x4
  3401                           
  3402  0074                     ??_getDelayOff_GO:	
  3403                           ; 0 bytes @ 0x4
  3404                           
  3405  0074                     ??_setDimmerLights_DimmingOn:	
  3406                           ; 0 bytes @ 0x4
  3407                           
  3408  0074                     ?_setDimmerLights_DimmingRun:	
  3409                           ; 0 bytes @ 0x4
  3410                           
  3411  0074                     CC2500_WriteREG@value:	
  3412                           ; 0 bytes @ 0x4
  3413                           
  3414  0074                     DlyOff_Initialization@sw:	
  3415                           ; 1 bytes @ 0x4
  3416                           
  3417  0074                     getDelayOff_GO@sw:	
  3418                           ; 1 bytes @ 0x4
  3419                           
  3420  0074                     setDimmerIntr_ControlStatus@lights:	
  3421                           ; 1 bytes @ 0x4
  3422                           
  3423  0074                     setDimmerIntr_DimmingValue@lights:	
  3424                           ; 1 bytes @ 0x4
  3425                           
  3426  0074                     getDimmerIntr_DimmingValue@lights:	
  3427                           ; 1 bytes @ 0x4
  3428                           
  3429  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3430                           ; 1 bytes @ 0x4
  3431                           
  3432  0074                     setDimmerIntr_Dimming_RF@lights:	
  3433                           ; 1 bytes @ 0x4
  3434                           
  3435  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2606:	
  3436                           ; 1 bytes @ 0x4
  3437                           
  3438  0074                     setDimmerLights_SwOff@sw:	
  3439                           ; 1 bytes @ 0x4
  3440                           
  3441  0074                     setDimmerLights_DimmingOn@sw:	
  3442                           ; 1 bytes @ 0x4
  3443                           
  3444  0074                     _getDimmerLights_Allow_Condition$2729:	
  3445                           ; 1 bytes @ 0x4
  3446                           
  3447  0074                     getDimmerLights_Status@lights:	
  3448                           ; 1 bytes @ 0x4
  3449                           
  3450  0074                     setDimmerLights_DimmingRun@command:	
  3451                           ; 1 bytes @ 0x4
  3452                           
  3453  0074                     setLED@command:	
  3454                           ; 1 bytes @ 0x4
  3455                           
  3456  0074                     Flash_Memory_Read@address:	
  3457                           ; 1 bytes @ 0x4
  3458                           
  3459  0074                     setMemory_Data@address:	
  3460                           ; 1 bytes @ 0x4
  3461                           
  3462  0074                     getMain_Lights_Count@status2:	
  3463                           ; 1 bytes @ 0x4
  3464                           
  3465  0074                     setCmd_Status@number:	
  3466                           ; 1 bytes @ 0x4
  3467                           
  3468  0074                     _getRF_KeyStatus$6249:	
  3469                           ; 1 bytes @ 0x4
  3470                           
  3471  0074                     _getSw_KeyStatus$7444:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0074                     _getAll_Sw_KeyStatus$7447:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0074                     ___bmul@product:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0074                     ___lbdiv@dividend:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0074                     DelayTime_1us@i:	
  3484                           ; 1 bytes @ 0x4
  3485                           
  3486  0074                     ___wmul@multiplicand:	
  3487                           ; 2 bytes @ 0x4
  3488                           
  3489  0074                     ___awdiv@dividend:	
  3490                           ; 2 bytes @ 0x4
  3491                           
  3492  0074                     ___lwdiv@dividend:	
  3493                           ; 2 bytes @ 0x4
  3494                           
  3495                           
  3496                           ; 2 bytes @ 0x4
  3497  0074                     	ds	1
  3498  0075                     ??_CC2500_WriteREG:	
  3499  0075                     ??_setLED:	
  3500                           ; 0 bytes @ 0x5
  3501                           
  3502  0075                     ??_setDimmerLights_DimmingClose:	
  3503                           ; 0 bytes @ 0x5
  3504                           
  3505  0075                     ??_DelayOff_Initialization:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0075                     ??_setDimmerLights_DimmingRun:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0075                     ??_getAD:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0075                     CC2500_WriteCommand@command:	
  3515                           ; 0 bytes @ 0x5
  3516                           
  3517  0075                     CC2500_ReadStatus@status_addr:	
  3518                           ; 1 bytes @ 0x5
  3519                           
  3520  0075                     getDelayOff_GO@go:	
  3521                           ; 1 bytes @ 0x5
  3522                           
  3523  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0075                     _getDimmerLights_Allow_Condition$2730:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0075                     getDimmerLights_Status@status:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532  0075                     setLED@led:	
  3533                           ; 1 bytes @ 0x5
  3534                           
  3535  0075                     getAD@adcon0:	
  3536                           ; 1 bytes @ 0x5
  3537                           
  3538  0075                     Flash_Memory_Read@ret:	
  3539                           ; 1 bytes @ 0x5
  3540                           
  3541  0075                     getMain_Lights_Count@count:	
  3542                           ; 1 bytes @ 0x5
  3543                           
  3544  0075                     getSw_KeyStatus@status:	
  3545                           ; 1 bytes @ 0x5
  3546                           
  3547  0075                     ___bmul@multiplier:	
  3548                           ; 1 bytes @ 0x5
  3549                           
  3550  0075                     ___ftpack@exp:	
  3551                           ; 1 bytes @ 0x5
  3552                           
  3553  0075                     ___lbdiv@counter:	
  3554                           ; 1 bytes @ 0x5
  3555                           
  3556  0075                     _getMain_All_Error_Status$4215:	
  3557                           ; 1 bytes @ 0x5
  3558                           
  3559                           
  3560                           ; 2 bytes @ 0x5
  3561  0075                     	ds	1
  3562  0076                     ??_CC2500_ClearTXFIFO:	
  3563  0076                     ??_CC2500_ClearRXFIFO:	
  3564                           ; 0 bytes @ 0x6
  3565                           
  3566  0076                     ??_CC2500_SIDLEMode:	
  3567                           ; 0 bytes @ 0x6
  3568                           
  3569  0076                     ??_setLED_Initialization:	
  3570                           ; 0 bytes @ 0x6
  3571                           
  3572  0076                     ??_Flash_Memory_Modify:	
  3573                           ; 0 bytes @ 0x6
  3574                           
  3575  0076                     ??_getLoad_AD:	
  3576                           ; 0 bytes @ 0x6
  3577                           
  3578  0076                     ??_getTemp_AD:	
  3579                           ; 0 bytes @ 0x6
  3580                           
  3581  0076                     ??_setRF_AdjControl:	
  3582                           ; 0 bytes @ 0x6
  3583                           
  3584  0076                     ??_setSw_Initialization:	
  3585                           ; 0 bytes @ 0x6
  3586                           
  3587  0076                     ??_CC2500_TxData:	
  3588                           ; 0 bytes @ 0x6
  3589                           
  3590  0076                     ??_CC2500_RxData:	
  3591                           ; 0 bytes @ 0x6
  3592                           
  3593  0076                     ??_Flash_Memory_Initialization:	
  3594                           ; 0 bytes @ 0x6
  3595                           
  3596  0076                     ??___wmul:	
  3597                           ; 0 bytes @ 0x6
  3598                           
  3599  0076                     ??___awdiv:	
  3600                           ; 0 bytes @ 0x6
  3601                           
  3602  0076                     ??___lwdiv:	
  3603                           ; 0 bytes @ 0x6
  3604                           
  3605  0076                     CC2500_WriteREG@w_addr:	
  3606                           ; 0 bytes @ 0x6
  3607                           
  3608  0076                     _getDimmerLights_Allow_Condition$2731:	
  3609                           ; 1 bytes @ 0x6
  3610                           
  3611  0076                     setDimmerLights_DimmingRun@lights:	
  3612                           ; 1 bytes @ 0x6
  3613                           
  3614  0076                     setLED_Initialization@led:	
  3615                           ; 1 bytes @ 0x6
  3616                           
  3617  0076                     setLED_Main@led:	
  3618                           ; 1 bytes @ 0x6
  3619                           
  3620  0076                     setSw_Initialization@sw:	
  3621                           ; 1 bytes @ 0x6
  3622                           
  3623  0076                     getSw_KeyStatus@sw:	
  3624                           ; 1 bytes @ 0x6
  3625                           
  3626  0076                     ___ftpack@sign:	
  3627                           ; 1 bytes @ 0x6
  3628                           
  3629  0076                     ___lbdiv@quotient:	
  3630                           ; 1 bytes @ 0x6
  3631                           
  3632  0076                     getBuz_GO@i:	
  3633                           ; 1 bytes @ 0x6
  3634                           
  3635  0076                     DelayTime_1us@j:	
  3636                           ; 2 bytes @ 0x6
  3637                           
  3638  0076                     ___wmul@product:	
  3639                           ; 2 bytes @ 0x6
  3640                           
  3641                           
  3642                           ; 2 bytes @ 0x6
  3643  0076                     	ds	1
  3644  0077                     ??_CC2500_InitSetREG:	
  3645  0077                     ??_CC2500_InitPATable:	
  3646                           ; 0 bytes @ 0x7
  3647                           
  3648  0077                     ??_Switch_Initialization:	
  3649                           ; 0 bytes @ 0x7
  3650                           
  3651  0077                     ??___ftpack:	
  3652                           ; 0 bytes @ 0x7
  3653                           
  3654  0077                     ??_setBuz:	
  3655                           ; 0 bytes @ 0x7
  3656                           
  3657  0077                     ??_LED_Initialization:	
  3658                           ; 0 bytes @ 0x7
  3659                           
  3660  0077                     ??_LED_Main:	
  3661                           ; 0 bytes @ 0x7
  3662                           
  3663  0077                     ?_Division:	
  3664                           ; 0 bytes @ 0x7
  3665                           
  3666  0077                     CC2500_TxData@loop_e:	
  3667                           ; 1 bytes @ 0x7
  3668                           
  3669  0077                     CC2500_RxData@loop_f:	
  3670                           ; 1 bytes @ 0x7
  3671                           
  3672  0077                     getDimmerLights_Allow_Condition@lights:	
  3673                           ; 1 bytes @ 0x7
  3674                           
  3675  0077                     Division@num:	
  3676                           ; 1 bytes @ 0x7
  3677                           
  3678  0077                     Flash_Memory_Initialization@value:	
  3679                           ; 1 bytes @ 0x7
  3680                           
  3681  0077                     Flash_Memory_Modify@i:	
  3682                           ; 1 bytes @ 0x7
  3683                           
  3684  0077                     getMain_All_Error_Status@command:	
  3685                           ; 1 bytes @ 0x7
  3686                           
  3687  0077                     getTemp_AD@channel:	
  3688                           ; 1 bytes @ 0x7
  3689                           
  3690  0077                     setRF_AdjControl@status:	
  3691                           ; 1 bytes @ 0x7
  3692                           
  3693  0077                     ___lwdiv@quotient:	
  3694                           ; 1 bytes @ 0x7
  3695                           
  3696                           
  3697                           ; 2 bytes @ 0x7
  3698  0077                     	ds	1
  3699  0078                     ??_CC2500_PowerRST:	
  3700  0078                     ??_CC2500_FrequencyCabr:	
  3701                           ; 0 bytes @ 0x8
  3702                           
  3703  0078                     ??_Division:	
  3704                           ; 0 bytes @ 0x8
  3705                           
  3706  0078                     ??_Flash_Memory_Main:	
  3707                           ; 0 bytes @ 0x8
  3708                           
  3709  0078                     setBuz@count:	
  3710                           ; 0 bytes @ 0x8
  3711                           
  3712  0078                     CC2500_InitPATable@temp:	
  3713                           ; 1 bytes @ 0x8
  3714                           
  3715  0078                     getDimmerLights_Allow_Condition@allow:	
  3716                           ; 1 bytes @ 0x8
  3717                           
  3718  0078                     getMain_All_Error_Status@status:	
  3719                           ; 1 bytes @ 0x8
  3720                           
  3721  0078                     setRF_AdjControl@dimmingStatus:	
  3722                           ; 1 bytes @ 0x8
  3723                           
  3724  0078                     getTemp_AD@ADRES:	
  3725                           ; 1 bytes @ 0x8
  3726                           
  3727                           
  3728                           ; 2 bytes @ 0x8
  3729  0078                     	ds	1
  3730  0079                     ??_setDimmerLights_SwOn:	
  3731  0079                     ??_my_MainTimer:	
  3732                           ; 0 bytes @ 0x9
  3733                           
  3734  0079                     ??_Exception_Main:	
  3735                           ; 0 bytes @ 0x9
  3736                           
  3737  0079                     CC2500_InitPATable@loop_d:	
  3738                           ; 0 bytes @ 0x9
  3739                           
  3740  0079                     setRF_AdjControl@sw:	
  3741                           ; 1 bytes @ 0x9
  3742                           
  3743  0079                     ___lwdiv@counter:	
  3744                           ; 1 bytes @ 0x9
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x9
  3748  0079                     	ds	1
  3749  007A                     ??_setDimmerLights_Main:	
  3750  007A                     ??_DimmerLights_TwoPhase_Main:	
  3751                           ; 0 bytes @ 0xA
  3752                           
  3753  007A                     ??_Temp_Main:	
  3754                           ; 0 bytes @ 0xA
  3755                           
  3756  007A                     ??_Switch_Main:	
  3757                           ; 0 bytes @ 0xA
  3758                           
  3759  007A                     ??_RF_Main:	
  3760                           ; 0 bytes @ 0xA
  3761                           
  3762  007A                     ??_setControl_Lights_Table:	
  3763                           ; 0 bytes @ 0xA
  3764                           
  3765  007A                     ??_CC2500_PowerOnInitial:	
  3766                           ; 0 bytes @ 0xA
  3767                           
  3768  007A                     ??_DelayOff_Main:	
  3769                           ; 0 bytes @ 0xA
  3770                           
  3771  007A                     ??_DimmerLights_Initialization:	
  3772                           ; 0 bytes @ 0xA
  3773                           
  3774  007A                     ??_DimmerLights_Main:	
  3775                           ; 0 bytes @ 0xA
  3776                           
  3777  007A                     ??_main:	
  3778                           ; 0 bytes @ 0xA
  3779                           
  3780  007A                     ??___ftneg:	
  3781                           ; 0 bytes @ 0xA
  3782                           
  3783                           
  3784                           	psect	cstackBANK0
  3785  0020                     __pcstackBANK0:	
  3786                           ; 0 bytes @ 0xA
  3787                           
  3788  0020                     ??_Load_Main:	
  3789  0020                     ?___awtoft:	
  3790                           ; 0 bytes @ 0x0
  3791                           
  3792  0020                     CC2500_InitSetREG@temp1:	
  3793                           ; 3 bytes @ 0x0
  3794                           
  3795  0020                     Division@value:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798  0020                     Flash_Memory_Main@key_Status:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801  0020                     getLoad_AD@channel:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804  0020                     ___awdiv@counter:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807  0020                     ___awtoft@c:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810                           
  3811                           ; 2 bytes @ 0x0
  3812  0020                     	ds	1
  3813  0021                     CC2500_InitSetREG@temp2:	
  3814  0021                     Division@result:	
  3815                           ; 1 bytes @ 0x1
  3816                           
  3817  0021                     _Flash_Memory_Main$3708:	
  3818                           ; 1 bytes @ 0x1
  3819                           
  3820  0021                     getLoad_AD@k:	
  3821                           ; 1 bytes @ 0x1
  3822                           
  3823  0021                     ___awdiv@sign:	
  3824                           ; 1 bytes @ 0x1
  3825                           
  3826                           
  3827                           ; 1 bytes @ 0x1
  3828  0021                     	ds	1
  3829  0022                     ??_DimmerIntr_ValueCalculate:	
  3830  0022                     CC2500_InitSetREG@loop_c:	
  3831                           ; 0 bytes @ 0x2
  3832                           
  3833  0022                     getLoad_AD@j:	
  3834                           ; 1 bytes @ 0x2
  3835                           
  3836  0022                     Load_Main@error:	
  3837                           ; 1 bytes @ 0x2
  3838                           
  3839  0022                     ___awdiv@quotient:	
  3840                           ; 1 bytes @ 0x2
  3841                           
  3842                           
  3843                           ; 2 bytes @ 0x2
  3844  0022                     	ds	1
  3845  0023                     ??___awtoft:	
  3846  0023                     getLoad_AD@ADRES:	
  3847                           ; 0 bytes @ 0x3
  3848                           
  3849  0023                     _Load_Main$4636:	
  3850                           ; 2 bytes @ 0x3
  3851                           
  3852                           
  3853                           ; 2 bytes @ 0x3
  3854  0023                     	ds	1
  3855  0024                     ?_setBuz:	
  3856  0024                     DimmerIntr_ValueCalculate@lights:	
  3857                           ; 0 bytes @ 0x4
  3858                           
  3859  0024                     setBuz@time:	
  3860                           ; 1 bytes @ 0x4
  3861                           
  3862                           
  3863                           ; 2 bytes @ 0x4
  3864  0024                     	ds	1
  3865  0025                     ??_DimmerLights_DimmingFunction:	
  3866  0025                     getLoad_AD@i:	
  3867                           ; 0 bytes @ 0x5
  3868                           
  3869  0025                     Load_Main@ErrorCountValue:	
  3870                           ; 1 bytes @ 0x5
  3871                           
  3872  0025                     ___awtoft@sign:	
  3873                           ; 1 bytes @ 0x5
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x5
  3877  0025                     	ds	1
  3878  0026                     ?___ftdiv:	
  3879  0026                     ?___ftmul:	
  3880                           ; 3 bytes @ 0x6
  3881                           
  3882  0026                     setDimmerLights_SwOn@dimmingStatus:	
  3883                           ; 3 bytes @ 0x6
  3884                           
  3885  0026                     DimmerLights_DimmingFunction@lights:	
  3886                           ; 1 bytes @ 0x6
  3887                           
  3888  0026                     Exception_Main@status:	
  3889                           ; 1 bytes @ 0x6
  3890                           
  3891  0026                     Load_Main@Load_RunStatus:	
  3892                           ; 1 bytes @ 0x6
  3893                           
  3894  0026                     ___ftdiv@f2:	
  3895                           ; 1 bytes @ 0x6
  3896                           
  3897  0026                     ___ftmul@f1:	
  3898                           ; 3 bytes @ 0x6
  3899                           
  3900                           
  3901                           ; 3 bytes @ 0x6
  3902  0026                     	ds	1
  3903  0027                     _setDimmerLights_SwOn$2659:	
  3904  0027                     Exception_Main@count:	
  3905                           ; 1 bytes @ 0x7
  3906                           
  3907  0027                     Load_Main@LightsCount:	
  3908                           ; 1 bytes @ 0x7
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x7
  3912  0027                     	ds	1
  3913  0028                     _setDimmerLights_SwOn$2668:	
  3914  0028                     Exception_Main@error:	
  3915                           ; 1 bytes @ 0x8
  3916                           
  3917  0028                     Load_Main@i:	
  3918                           ; 1 bytes @ 0x8
  3919                           
  3920                           
  3921                           ; 2 bytes @ 0x8
  3922  0028                     	ds	1
  3923  0029                     setDimmerLights_SwOn@idle:	
  3924  0029                     Exception_Main@i:	
  3925                           ; 1 bytes @ 0x9
  3926                           
  3927  0029                     ___ftdiv@f1:	
  3928                           ; 2 bytes @ 0x9
  3929                           
  3930  0029                     ___ftmul@f2:	
  3931                           ; 3 bytes @ 0x9
  3932                           
  3933                           
  3934                           ; 3 bytes @ 0x9
  3935  0029                     	ds	1
  3936  002A                     setDimmerLights_SwOn@sw:	
  3937                           
  3938                           ; 1 bytes @ 0xA
  3939  002A                     	ds	1
  3940  002B                     ??_setSw_Main:	
  3941  002B                     Exception_Main@i_4227:	
  3942                           ; 0 bytes @ 0xB
  3943                           
  3944                           
  3945                           ; 2 bytes @ 0xB
  3946  002B                     	ds	1
  3947  002C                     ??___ftdiv:	
  3948  002C                     ??___ftmul:	
  3949                           ; 0 bytes @ 0xC
  3950                           
  3951                           
  3952                           ; 0 bytes @ 0xC
  3953  002C                     	ds	1
  3954  002D                     Exception_Main@lights:	
  3955  002D                     setSw_Main@sw:	
  3956                           ; 1 bytes @ 0xD
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0xD
  3960  002D                     	ds	3
  3961  0030                     ___ftdiv@cntr:	
  3962  0030                     ___ftmul@exp:	
  3963                           ; 1 bytes @ 0x10
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x10
  3967  0030                     	ds	1
  3968  0031                     ___ftdiv@f3:	
  3969  0031                     ___ftmul@f3_as_product:	
  3970                           ; 3 bytes @ 0x11
  3971                           
  3972                           
  3973                           ; 3 bytes @ 0x11
  3974  0031                     	ds	3
  3975  0034                     ___ftdiv@exp:	
  3976  0034                     ___ftmul@cntr:	
  3977                           ; 1 bytes @ 0x14
  3978                           
  3979                           
  3980                           ; 1 bytes @ 0x14
  3981  0034                     	ds	1
  3982  0035                     ___ftdiv@sign:	
  3983  0035                     ___ftmul@sign:	
  3984                           ; 1 bytes @ 0x15
  3985                           
  3986                           
  3987                           ; 1 bytes @ 0x15
  3988  0035                     	ds	1
  3989  0036                     ?___ftneg:	
  3990  0036                     ___ftneg@f1:	
  3991                           ; 3 bytes @ 0x16
  3992                           
  3993                           
  3994                           ; 3 bytes @ 0x16
  3995  0036                     	ds	3
  3996  0039                     ?___ftadd:	
  3997  0039                     ___ftadd@f1:	
  3998                           ; 3 bytes @ 0x19
  3999                           
  4000                           
  4001                           ; 3 bytes @ 0x19
  4002  0039                     	ds	3
  4003  003C                     ___ftadd@f2:	
  4004                           
  4005                           ; 3 bytes @ 0x1C
  4006  003C                     	ds	3
  4007  003F                     ??___ftadd:	
  4008                           
  4009                           ; 0 bytes @ 0x1F
  4010  003F                     	ds	4
  4011  0043                     ___ftadd@sign:	
  4012                           
  4013                           ; 1 bytes @ 0x23
  4014  0043                     	ds	1
  4015  0044                     ___ftadd@exp2:	
  4016                           
  4017                           ; 1 bytes @ 0x24
  4018  0044                     	ds	1
  4019  0045                     ___ftadd@exp1:	
  4020                           
  4021                           ; 1 bytes @ 0x25
  4022  0045                     	ds	1
  4023  0046                     ?___fttol:	
  4024  0046                     ___fttol@f1:	
  4025                           ; 4 bytes @ 0x26
  4026                           
  4027                           
  4028                           ; 3 bytes @ 0x26
  4029  0046                     	ds	4
  4030  004A                     ??___fttol:	
  4031                           
  4032                           ; 0 bytes @ 0x2A
  4033  004A                     	ds	4
  4034  004E                     ___fttol@sign1:	
  4035                           
  4036                           ; 1 bytes @ 0x2E
  4037  004E                     	ds	1
  4038  004F                     ___fttol@lval:	
  4039                           
  4040                           ; 4 bytes @ 0x2F
  4041  004F                     	ds	4
  4042  0053                     ___fttol@exp1:	
  4043                           
  4044                           ; 1 bytes @ 0x33
  4045  0053                     	ds	1
  4046  0054                     ??_getDimmerLights_ValueToPercent:	
  4047  0054                     ??_getDimmerLights_PercentToValue:	
  4048                           ; 0 bytes @ 0x34
  4049                           
  4050                           
  4051                           ; 0 bytes @ 0x34
  4052  0054                     	ds	2
  4053  0056                     getDimmerLights_PercentToValue@value:	
  4054  0056                     getDimmerLights_ValueToPercent@value:	
  4055                           ; 1 bytes @ 0x36
  4056                           
  4057                           
  4058                           ; 1 bytes @ 0x36
  4059  0056                     	ds	1
  4060  0057                     getDimmerLights_PercentToValue@i:	
  4061  0057                     getDimmerLights_ValueToPercent@i:	
  4062                           ; 3 bytes @ 0x37
  4063                           
  4064                           
  4065                           ; 3 bytes @ 0x37
  4066  0057                     	ds	3
  4067  005A                     ?_setProductData:	
  4068  005A                     ??_DimmerIntr_Initialization:	
  4069                           ; 0 bytes @ 0x3A
  4070                           
  4071  005A                     ?_setDimmerIntr_MaxmumValue:	
  4072                           ; 0 bytes @ 0x3A
  4073                           
  4074  005A                     setDimmerIntr_MaxmumValue@value:	
  4075                           ; 0 bytes @ 0x3A
  4076                           
  4077  005A                     setProductData@value:	
  4078                           ; 1 bytes @ 0x3A
  4079                           
  4080                           
  4081                           ; 1 bytes @ 0x3A
  4082  005A                     	ds	1
  4083  005B                     ??_setProductData:	
  4084  005B                     ??_setDimmerIntr_MaxmumValue:	
  4085                           ; 0 bytes @ 0x3B
  4086                           
  4087                           
  4088                           ; 0 bytes @ 0x3B
  4089  005B                     	ds	1
  4090  005C                     setDimmerIntr_MaxmumValue@lights:	
  4091  005C                     setProductData@address:	
  4092                           ; 1 bytes @ 0x3C
  4093                           
  4094                           
  4095                           ; 1 bytes @ 0x3C
  4096  005C                     	ds	1
  4097  005D                     ??_DlyOff_Main:	
  4098  005D                     ??_DimmerLights_AssignationDimming:	
  4099                           ; 0 bytes @ 0x3D
  4100                           
  4101  005D                     ?_setRF_DimmerLights:	
  4102                           ; 0 bytes @ 0x3D
  4103                           
  4104  005D                     ??_setTemp_Main:	
  4105                           ; 0 bytes @ 0x3D
  4106                           
  4107  005D                     ??_setLog_Code:	
  4108                           ; 0 bytes @ 0x3D
  4109                           
  4110  005D                     ??_setRFSW_AdjControl:	
  4111                           ; 0 bytes @ 0x3D
  4112                           
  4113  005D                     ?_setDelayOff_GO:	
  4114                           ; 0 bytes @ 0x3D
  4115                           
  4116  005D                     setDelayOff_GO@command:	
  4117                           ; 0 bytes @ 0x3D
  4118                           
  4119  005D                     setRF_DimmerLights@on:	
  4120                           ; 1 bytes @ 0x3D
  4121                           
  4122                           
  4123                           ; 1 bytes @ 0x3D
  4124  005D                     	ds	1
  4125  005E                     ??_setRF_DimmerLights:	
  4126  005E                     setDelayOff_GO@value:	
  4127                           ; 0 bytes @ 0x3E
  4128                           
  4129                           
  4130                           ; 1 bytes @ 0x3E
  4131  005E                     	ds	1
  4132  005F                     ??_setDelayOff_GO:	
  4133  005F                     DlyOff_Main@sw:	
  4134                           ; 0 bytes @ 0x3F
  4135                           
  4136  005F                     DimmerLights_AssignationDimming@status:	
  4137                           ; 1 bytes @ 0x3F
  4138                           
  4139  005F                     setTemp_Main@error:	
  4140                           ; 1 bytes @ 0x3F
  4141                           
  4142  005F                     setRFSW_AdjControl@status:	
  4143                           ; 1 bytes @ 0x3F
  4144                           
  4145                           
  4146                           ; 1 bytes @ 0x3F
  4147  005F                     	ds	1
  4148  0060                     DimmerLights_AssignationDimming@sw:	
  4149  0060                     setTemp_Main@TempGO:	
  4150                           ; 1 bytes @ 0x40
  4151                           
  4152  0060                     setRFSW_AdjControl@sw:	
  4153                           ; 1 bytes @ 0x40
  4154                           
  4155  0060                     setRF_DimmerLights@status:	
  4156                           ; 1 bytes @ 0x40
  4157                           
  4158                           
  4159                           ; 1 bytes @ 0x40
  4160  0060                     	ds	1
  4161  0061                     setDelayOff_GO@i:	
  4162  0061                     DimmerLights_TwoPhase_Main@lights:	
  4163                           ; 1 bytes @ 0x41
  4164                           
  4165  0061                     setRF_DimmerLights@lights:	
  4166                           ; 1 bytes @ 0x41
  4167                           
  4168  0061                     setTemp_Main@SafeValue:	
  4169                           ; 1 bytes @ 0x41
  4170                           
  4171                           
  4172                           ; 2 bytes @ 0x41
  4173  0061                     	ds	1
  4174  0062                     ?_setDimmerLights_Dimming:	
  4175  0062                     setDelayOff_GO@j:	
  4176                           ; 0 bytes @ 0x42
  4177                           
  4178  0062                     setDimmerLights_Dimming@status:	
  4179                           ; 1 bytes @ 0x42
  4180                           
  4181                           
  4182                           ; 1 bytes @ 0x42
  4183  0062                     	ds	1
  4184  0063                     ??_setDimmerLights_Dimming:	
  4185  0063                     setDelayOff_GO@k:	
  4186                           ; 0 bytes @ 0x43
  4187                           
  4188  0063                     setTemp_Main@DangerValue:	
  4189                           ; 1 bytes @ 0x43
  4190                           
  4191                           
  4192                           ; 2 bytes @ 0x43
  4193  0063                     	ds	1
  4194  0064                     setDelayOff_GO@sw:	
  4195  0064                     setDimmerLights_Dimming@value:	
  4196                           ; 1 bytes @ 0x44
  4197                           
  4198                           
  4199                           ; 1 bytes @ 0x44
  4200  0064                     	ds	1
  4201  0065                     ?_setDimmerLights_OnOff:	
  4202  0065                     ??_setRFSW_Control:	
  4203                           ; 0 bytes @ 0x45
  4204                           
  4205  0065                     setDimmerLights_OnOff@command:	
  4206                           ; 0 bytes @ 0x45
  4207                           
  4208  0065                     setDimmerLights_Dimming@lights:	
  4209                           ; 1 bytes @ 0x45
  4210                           
  4211  0065                     setTemp_Main@AD:	
  4212                           ; 1 bytes @ 0x45
  4213                           
  4214                           
  4215                           ; 2 bytes @ 0x45
  4216  0065                     	ds	1
  4217  0066                     ??_setDimmerLights_OnOff:	
  4218  0066                     setRFSW_Control@status:	
  4219                           ; 0 bytes @ 0x46
  4220                           
  4221                           
  4222                           ; 1 bytes @ 0x46
  4223  0066                     	ds	1
  4224  0067                     setRFSW_Control@sw:	
  4225                           
  4226                           ; 1 bytes @ 0x47
  4227  0067                     	ds	1
  4228  0068                     ??_getRxData:	
  4229  0068                     setDimmerLights_OnOff@lights:	
  4230                           ; 0 bytes @ 0x48
  4231                           
  4232                           
  4233                           ; 1 bytes @ 0x48
  4234  0068                     	ds	1
  4235  0069                     setDimmerLights_Main@lights:	
  4236  0069                     getRxData@error:	
  4237                           ; 1 bytes @ 0x49
  4238                           
  4239                           
  4240                           ; 1 bytes @ 0x49
  4241  0069                     	ds	1
  4242  006A                     ??_setRF_Main:	
  4243                           
  4244                           ; 0 bytes @ 0x4A
  4245  006A                     	ds	1
  4246  006B                     setRF_Main@error:	
  4247                           
  4248                           ; 1 bytes @ 0x4B
  4249  006B                     	ds	1
  4250                           
  4251                           	psect	maintext
  4252  1492                     __pmaintext:	
  4253 ;;
  4254 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4255 ;;
  4256 ;; *************** function _main *****************
  4257 ;; Defined at:
  4258 ;;		line 6 in file "../src/Main_B1.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;  argc            2    0[BANK4 ] int 
  4261 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  2    0[BANK4 ] int 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 17F/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4273 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4277 ;;Total ram usage:        4 bytes
  4278 ;; Hardware stack levels required when called:   11
  4279 ;; This function calls:
  4280 ;;		_Buzzer_Initialization
  4281 ;;		_Buzzer_Main
  4282 ;;		_CC2500_PowerOnInitial
  4283 ;;		_DelayOff_Initialization
  4284 ;;		_DelayOff_Main
  4285 ;;		_DimmerLights_Initialization
  4286 ;;		_DimmerLights_Main
  4287 ;;		_Exception_Main
  4288 ;;		_Flash_Memory_Initialization
  4289 ;;		_Flash_Memory_Main
  4290 ;;		_LED_Initialization
  4291 ;;		_LED_Main
  4292 ;;		_Load_Initialization
  4293 ;;		_Load_Main
  4294 ;;		_Mcu_Initialization
  4295 ;;		_RF_Initialization
  4296 ;;		_RF_Main
  4297 ;;		_Switch_Initialization
  4298 ;;		_Switch_Main
  4299 ;;		_Temp_Initialization
  4300 ;;		_Temp_Main
  4301 ;;		_WDT_Main
  4302 ;;		_getLoad_AD
  4303 ;;		_getTemp_AD
  4304 ;;		_myMain_Initialization
  4305 ;;		_my_MainTimer
  4306 ;; This function is called by:
  4307 ;;		Startup code after reset
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function _main
  4313  1492                     _main:	
  4314                           
  4315                           ;Main_B1.c: 7: myMain_Initialization();
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4319  1492  3198  20DF  3194   	fcall	_myMain_Initialization
  4320                           
  4321                           ;Main_B1.c: 8: Mcu_Initialization();
  4322  1495  3199  21FD  3194   	fcall	_Mcu_Initialization
  4323                           
  4324                           ;Main_B1.c: 9: Flash_Memory_Initialization();
  4325  1498  3186  2601  3194   	fcall	_Flash_Memory_Initialization
  4326                           
  4327                           ;Main_B1.c: 10: LED_Initialization();
  4328  149B  3198  20BB  3194   	fcall	_LED_Initialization
  4329                           
  4330                           ;Main_B1.c: 11: Buzzer_Initialization();
  4331  149E  31A7  27B3  3194   	fcall	_Buzzer_Initialization
  4332                           
  4333                           ;Main_B1.c: 13: ;;
  4334                           ;Main_B1.c: 14: Temp_Initialization();
  4335  14A1  31A7  27BF  3194   	fcall	_Temp_Initialization
  4336                           
  4337                           ;Main_B1.c: 15: Load_Initialization();
  4338  14A4  31A7  27B6  3194   	fcall	_Load_Initialization
  4339                           
  4340                           ;Main_B1.c: 16: ;;
  4341                           ;Main_B1.c: 17: DelayOff_Initialization();
  4342  14A7  3198  2019  3194   	fcall	_DelayOff_Initialization
  4343                           
  4344                           ;Main_B1.c: 19: DimmerLights_Initialization();
  4345  14AA  3198  2060  3194   	fcall	_DimmerLights_Initialization
  4346                           
  4347                           ;Main_B1.c: 20: ;;
  4348                           ;Main_B1.c: 21: ;;
  4349                           ;Main_B1.c: 22: ;;
  4350                           ;Main_B1.c: 23: Switch_Initialization();
  4351  14AD  3198  2031  3194   	fcall	_Switch_Initialization
  4352                           
  4353                           ;Main_B1.c: 24: RF_Initialization();
  4354  14B0  31A7  27B9  3194   	fcall	_RF_Initialization
  4355                           
  4356                           ;Main_B1.c: 25: CC2500_PowerOnInitial();
  4357  14B3  319A  228C  3194   	fcall	_CC2500_PowerOnInitial
  4358  14B6                     l11341:	
  4359                           ;Main_B1.c: 26: ;;
  4360                           ;Main_B1.c: 27: ;;
  4361                           ;Main_B1.c: 29: while (1) {
  4362                           
  4363                           
  4364                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  4365  14B6  0021               	movlb	1	; select bank1
  4366  14B7  1C4F               	btfss	_myMain^(0+128),0
  4367  14B8  2CC1               	goto	l11345
  4368                           
  4369                           ;Main_B1.c: 37: getLoad_AD(0x05);
  4370  14B9  3005               	movlw	5
  4371  14BA  3189  2168  3194   	fcall	_getLoad_AD
  4372                           
  4373                           ;Main_B1.c: 41: getTemp_AD(0x09);
  4374  14BD  3009               	movlw	9
  4375  14BE  3196  266D  3194   	fcall	_getTemp_AD
  4376  14C1                     l11345:	
  4377                           
  4378                           ;Main_B1.c: 56: }
  4379                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  4380  14C1  0022               	movlb	2	; select bank2
  4381  14C2  1C25               	btfss	_Timer1^(0+256),0
  4382  14C3  2CB6               	goto	l11341
  4383                           
  4384                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  4385  14C4  1025               	bcf	_Timer1^(0+256),0
  4386                           
  4387                           ;Main_B1.c: 95: my_MainTimer();
  4388  14C5  3190  20EA  3194   	fcall	_my_MainTimer
  4389                           
  4390                           ;Main_B1.c: 96: WDT_Main();
  4391  14C8  3199  2198  3194   	fcall	_WDT_Main
  4392                           
  4393                           ;Main_B1.c: 97: ;;
  4394                           ;Main_B1.c: 98: ;;
  4395                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4396  14CB  0021               	movlb	1	; select bank1
  4397  14CC  1C4F               	btfss	_myMain^(0+128),0
  4398  14CD  2CB6               	goto	l11341
  4399                           
  4400                           ;Main_B1.c: 100: Flash_Memory_Main();
  4401  14CE  3191  219C  3194   	fcall	_Flash_Memory_Main
  4402                           
  4403                           ;Main_B1.c: 102: LED_Main();
  4404  14D1  3198  20C7  3194   	fcall	_LED_Main
  4405                           
  4406                           ;Main_B1.c: 103: Buzzer_Main();
  4407  14D4  3192  22A6  3194   	fcall	_Buzzer_Main
  4408                           
  4409                           ;Main_B1.c: 105: ;;
  4410                           ;Main_B1.c: 106: Temp_Main();
  4411  14D7  31A7  27C2  3194   	fcall	_Temp_Main
  4412                           
  4413                           ;Main_B1.c: 107: Load_Main();
  4414  14DA  3180  2053  3194   	fcall	_Load_Main
  4415                           
  4416                           ;Main_B1.c: 108: ;;
  4417                           ;Main_B1.c: 110: ;;
  4418                           ;Main_B1.c: 111: DimmerLights_Main();
  4419  14DD  319E  26F9  3194   	fcall	_DimmerLights_Main
  4420                           
  4421                           ;Main_B1.c: 112: Switch_Main();
  4422  14E0  3198  208C  3194   	fcall	_Switch_Main
  4423                           
  4424                           ;Main_B1.c: 113: ;;
  4425                           ;Main_B1.c: 114: ;;
  4426                           ;Main_B1.c: 116: RF_Main();
  4427  14E3  31A7  27BC  3194   	fcall	_RF_Main
  4428                           
  4429                           ;Main_B1.c: 117: DelayOff_Main();
  4430  14E6  3198  2021  3194   	fcall	_DelayOff_Main
  4431                           
  4432                           ;Main_B1.c: 118: ;;
  4433                           ;Main_B1.c: 119: ;;
  4434                           ;Main_B1.c: 120: Exception_Main();
  4435  14E9  3185  252F  3194   	fcall	_Exception_Main
  4436  14EC  2CB6               	goto	l11341
  4437  14ED                     __end_of_main:	
  4438                           ;Main_B1.c: 127: }
  4439                           ;Main_B1.c: 128: }
  4440                           ;Main_B1.c: 162: }
  4441                           ;Main_B1.c: 163: return (0);
  4442                           ;	Return value of _main is never used
  4443                           
  4444                           
  4445                           	psect	text1
  4446  10EA                     __ptext1:	
  4447 ;; *************** function _my_MainTimer *****************
  4448 ;; Defined at:
  4449 ;;		line 184 in file "../src/Main_B1.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;Total ram usage:        1 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    5
  4470 ;; This function calls:
  4471 ;;		_setBuz
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _my_MainTimer
  4479  10EA                     _my_MainTimer:	
  4480                           
  4481                           ;Main_B1.c: 186: if (myMain.PowerON == 0) {
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4485  10EA  0021               	movlb	1	; select bank1
  4486  10EB  184F               	btfsc	_myMain^(0+128),0
  4487  10EC  2902               	goto	l11057
  4488                           
  4489                           ;Main_B1.c: 187: myMain.PowerCount++;
  4490  10ED  3001               	movlw	1
  4491  10EE  00F9               	movwf	??_my_MainTimer
  4492  10EF  0879               	movf	??_my_MainTimer,w
  4493  10F0  07D0               	addwf	(_myMain^(0+128)+1),f
  4494                           
  4495                           ;Main_B1.c: 188: if (myMain.PowerCount == (1500 / 20)) {
  4496  10F1  0850               	movf	(_myMain^(0+128)+1),w
  4497  10F2  3A4B               	xorlw	75
  4498  10F3  1D03               	skipz
  4499  10F4  0008               	return
  4500                           
  4501                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  4502  10F5  01D0               	clrf	(_myMain^(0+128)+1)
  4503                           
  4504                           ;Main_B1.c: 190: myMain.PowerON = 1;
  4505  10F6  144F               	bsf	_myMain^(0+128),0
  4506                           
  4507                           ;Main_B1.c: 195: setBuz(3, 50);
  4508  10F7  3032               	movlw	50
  4509  10F8  0020               	movlb	0	; select bank0
  4510  10F9  00A4               	movwf	setBuz@time
  4511  10FA  3000               	movlw	0
  4512  10FB  00A5               	movwf	setBuz@time+1
  4513  10FC  3003               	movlw	3
  4514  10FD  3192  22EC         	fcall	_setBuz
  4515                           
  4516                           ;Main_B1.c: 196: myMain.SelfTest = 1;
  4517  10FF  0021               	movlb	1	; select bank1
  4518  1100  164F               	bsf	_myMain^(0+128),4
  4519                           
  4520                           ;Main_B1.c: 205: }
  4521                           ;Main_B1.c: 206: } else {
  4522  1101  0008               	return
  4523  1102                     l11057:	
  4524                           
  4525                           ;Main_B1.c: 207: myMain.PowerCount++;
  4526  1102  3001               	movlw	1
  4527  1103  00F9               	movwf	??_my_MainTimer
  4528  1104  0879               	movf	??_my_MainTimer,w
  4529  1105  07D0               	addwf	(_myMain^(0+128)+1),f
  4530                           
  4531                           ;Main_B1.c: 208: if (myMain.PowerCount == (1000 / 20)) {
  4532  1106  0850               	movf	(_myMain^(0+128)+1),w
  4533  1107  3A32               	xorlw	50
  4534  1108  1903               	btfsc	3,2
  4535                           
  4536                           ;Main_B1.c: 209: myMain.PowerCount = 0;
  4537  1109  01D0               	clrf	(_myMain^(0+128)+1)
  4538                           
  4539                           ;Main_B1.c: 231: }
  4540                           ;Main_B1.c: 233: myMain.Count1++;
  4541  110A  3001               	movlw	1
  4542  110B  07D3               	addwf	(_myMain^(0+128)+4),f
  4543  110C  3000               	movlw	0
  4544  110D  3DD4               	addwfc	((_myMain+1)^(0+128)+4),f
  4545                           
  4546                           ;Main_B1.c: 234: if (myMain.Count1 == (1000 / 20)) {
  4547  110E  3004               	movlw	4
  4548  110F  3ECF               	addlw	_myMain& (0+255)
  4549  1110  0086               	movwf	6
  4550  1111  0187               	clrf	7
  4551  1112  3F40               	moviw [0]fsr1
  4552  1113  3A32               	xorlw	50
  4553  1114  1D03               	skipz
  4554  1115  2918               	goto	u12625
  4555  1116  3F41               	moviw [1]fsr1
  4556  1117  3A00               	xorlw	0
  4557  1118                     u12625:	
  4558  1118  1D03               	skipz
  4559  1119  0008               	return
  4560                           
  4561                           ;Main_B1.c: 235: myMain.Count1 = 0;
  4562  111A  01D3               	clrf	(_myMain^(0+128)+4)
  4563  111B  01D4               	clrf	((_myMain+1)^(0+128)+4)
  4564                           
  4565                           ;Main_B1.c: 247: if (myMain.Flag) {
  4566  111C  1CCF               	btfss	_myMain^(0+128),1
  4567  111D  2920               	goto	l1714
  4568                           
  4569                           ;Main_B1.c: 248: myMain.Flag = 0;
  4570  111E  10CF               	bcf	_myMain^(0+128),1
  4571                           
  4572                           ;Main_B1.c: 257: } else {
  4573  111F  0008               	return
  4574  1120                     l1714:	
  4575                           
  4576                           ;Main_B1.c: 258: myMain.Flag = 1;
  4577  1120  14CF               	bsf	_myMain^(0+128),1
  4578  1121  0008               	return
  4579  1122                     __end_of_my_MainTimer:	
  4580                           
  4581                           	psect	text2
  4582  18DF                     __ptext2:	
  4583 ;; *************** function _myMain_Initialization *****************
  4584 ;; Defined at:
  4585 ;;		line 169 in file "../src/Main_B1.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;		None               void
  4592 ;; Registers used:
  4593 ;;		wreg, fsr1l, fsr1h
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4601 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4603 ;;Total ram usage:        1 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    3
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           
  4614                           ;psect for function _myMain_Initialization
  4615  18DF                     _myMain_Initialization:	
  4616                           
  4617                           ;Main_B1.c: 172: product = &_product;
  4618                           
  4619                           ;incstack = 0
  4620                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4621  18DF  30A0               	movlw	__product& (0+255)
  4622  18E0  00F2               	movwf	??_myMain_Initialization
  4623  18E1  0872               	movf	??_myMain_Initialization,w
  4624  18E2  00FB               	movwf	_product
  4625                           
  4626                           ;Main_B1.c: 173: product->Data[20] = 210;
  4627  18E3  30D2               	movlw	210
  4628  18E4  00F2               	movwf	??_myMain_Initialization
  4629  18E5  087B               	movf	_product,w
  4630  18E6  3E14               	addlw	20
  4631  18E7  0086               	movwf	6
  4632  18E8  3002               	movlw	2	; select bank4/5
  4633  18E9  0087               	movwf	7
  4634  18EA  0872               	movf	??_myMain_Initialization,w
  4635  18EB  0081               	movwf	1
  4636  18EC  0008               	return
  4637  18ED                     __end_of_myMain_Initialization:	
  4638                           
  4639                           	psect	text3
  4640  166D                     __ptext3:	
  4641 ;; *************** function _getTemp_AD *****************
  4642 ;; Defined at:
  4643 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  channel         1    wreg     unsigned char 
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  channel         1    7[COMMON] unsigned char 
  4648 ;;  ADRES           2    8[COMMON] unsigned int 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;		None               void
  4651 ;; Registers used:
  4652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4653 ;; Tracked objects:
  4654 ;;		On entry : 0/0
  4655 ;;		On exit  : 0/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;Total ram usage:        4 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    5
  4665 ;; This function calls:
  4666 ;;		_getAD
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _getTemp_AD
  4674  166D                     _getTemp_AD:	
  4675                           
  4676                           ;incstack = 0
  4677                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4678                           ;getTemp_AD@channel stored from wreg
  4679  166D  00F7               	movwf	getTemp_AD@channel
  4680                           
  4681                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4682  166E  01F8               	clrf	getTemp_AD@ADRES
  4683  166F  01F9               	clrf	getTemp_AD@ADRES+1
  4684                           
  4685                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4686  1670  0022               	movlb	2	; select bank2
  4687  1671  1D5A               	btfss	_Temp^(0+256),2
  4688  1672  0008               	return
  4689                           
  4690                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4691  1673  30F0               	movlw	240
  4692  1674  00F6               	movwf	??_getTemp_AD
  4693  1675  0876               	movf	??_getTemp_AD,w
  4694  1676  00F2               	movwf	getAD@adcon1
  4695  1677  0877               	movf	getTemp_AD@channel,w
  4696  1678  319B  23A2  3196   	fcall	_getAD
  4697  167B  0873               	movf	?_getAD+1,w
  4698  167C  01F9               	clrf	getTemp_AD@ADRES+1
  4699  167D  07F9               	addwf	getTemp_AD@ADRES+1,f
  4700  167E  0872               	movf	?_getAD,w
  4701  167F  01F8               	clrf	getTemp_AD@ADRES
  4702  1680  07F8               	addwf	getTemp_AD@ADRES,f
  4703                           
  4704                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4705  1681  0879               	movf	getTemp_AD@ADRES+1,w
  4706  1682  0478               	iorwf	getTemp_AD@ADRES,w
  4707  1683  1903               	skipnz
  4708  1684  0008               	return
  4709                           
  4710                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4711  1685  0879               	movf	getTemp_AD@ADRES+1,w
  4712  1686  0022               	movlb	2	; select bank2
  4713  1687  025F               	subwf	((_Temp+1)^(0+256)+4),w
  4714  1688  1D03               	skipz
  4715  1689  2E8C               	goto	u9805
  4716  168A  0878               	movf	getTemp_AD@ADRES,w
  4717  168B  025E               	subwf	(_Temp^(0+256)+4),w
  4718  168C                     u9805:	
  4719  168C  1803               	skipnc
  4720  168D  2E95               	goto	l9233
  4721                           
  4722                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4723  168E  0879               	movf	getTemp_AD@ADRES+1,w
  4724  168F  01DF               	clrf	((_Temp+1)^(0+256)+4)
  4725  1690  07DF               	addwf	((_Temp+1)^(0+256)+4),f
  4726  1691  0878               	movf	getTemp_AD@ADRES,w
  4727  1692  01DE               	clrf	(_Temp^(0+256)+4)
  4728  1693  07DE               	addwf	(_Temp^(0+256)+4),f
  4729                           
  4730                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4731  1694  0008               	return
  4732  1695                     l9233:	
  4733  1695  0879               	movf	getTemp_AD@ADRES+1,w
  4734  1696  0261               	subwf	((_Temp+1)^(0+256)+6),w
  4735  1697  1D03               	skipz
  4736  1698  2E9B               	goto	u9815
  4737  1699  0878               	movf	getTemp_AD@ADRES,w
  4738  169A  0260               	subwf	(_Temp^(0+256)+6),w
  4739  169B                     u9815:	
  4740  169B  1803               	skipnc
  4741  169C  2EA4               	goto	l9237
  4742                           
  4743                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4744  169D  0879               	movf	getTemp_AD@ADRES+1,w
  4745  169E  01E1               	clrf	((_Temp+1)^(0+256)+6)
  4746  169F  07E1               	addwf	((_Temp+1)^(0+256)+6),f
  4747  16A0  0878               	movf	getTemp_AD@ADRES,w
  4748  16A1  01E0               	clrf	(_Temp^(0+256)+6)
  4749  16A2  07E0               	addwf	(_Temp^(0+256)+6),f
  4750                           
  4751                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4752  16A3  0008               	return
  4753  16A4                     l9237:	
  4754  16A4  0879               	movf	getTemp_AD@ADRES+1,w
  4755  16A5  0263               	subwf	((_Temp+1)^(0+256)+8),w
  4756  16A6  1D03               	skipz
  4757  16A7  2EAA               	goto	u9825
  4758  16A8  0878               	movf	getTemp_AD@ADRES,w
  4759  16A9  0262               	subwf	(_Temp^(0+256)+8),w
  4760  16AA                     u9825:	
  4761  16AA  1803               	skipnc
  4762  16AB  2EB3               	goto	l9241
  4763                           
  4764                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4765  16AC  0879               	movf	getTemp_AD@ADRES+1,w
  4766  16AD  01E3               	clrf	((_Temp+1)^(0+256)+8)
  4767  16AE  07E3               	addwf	((_Temp+1)^(0+256)+8),f
  4768  16AF  0878               	movf	getTemp_AD@ADRES,w
  4769  16B0  01E2               	clrf	(_Temp^(0+256)+8)
  4770  16B1  07E2               	addwf	(_Temp^(0+256)+8),f
  4771                           
  4772                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4773  16B2  0008               	return
  4774  16B3                     l9241:	
  4775  16B3  0879               	movf	getTemp_AD@ADRES+1,w
  4776  16B4  0265               	subwf	((_Temp+1)^(0+256)+10),w
  4777  16B5  1D03               	skipz
  4778  16B6  2EB9               	goto	u9835
  4779  16B7  0878               	movf	getTemp_AD@ADRES,w
  4780  16B8  0264               	subwf	(_Temp^(0+256)+10),w
  4781  16B9                     u9835:	
  4782  16B9  1803               	skipnc
  4783  16BA  2EC2               	goto	l9245
  4784                           
  4785                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4786  16BB  0879               	movf	getTemp_AD@ADRES+1,w
  4787  16BC  01E5               	clrf	((_Temp+1)^(0+256)+10)
  4788  16BD  07E5               	addwf	((_Temp+1)^(0+256)+10),f
  4789  16BE  0878               	movf	getTemp_AD@ADRES,w
  4790  16BF  01E4               	clrf	(_Temp^(0+256)+10)
  4791  16C0  07E4               	addwf	(_Temp^(0+256)+10),f
  4792                           
  4793                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4794  16C1  0008               	return
  4795  16C2                     l9245:	
  4796  16C2  0879               	movf	getTemp_AD@ADRES+1,w
  4797  16C3  0267               	subwf	((_Temp+1)^(0+256)+12),w
  4798  16C4  1D03               	skipz
  4799  16C5  2EC8               	goto	u9845
  4800  16C6  0878               	movf	getTemp_AD@ADRES,w
  4801  16C7  0266               	subwf	(_Temp^(0+256)+12),w
  4802  16C8                     u9845:	
  4803  16C8  1803               	skipnc
  4804  16C9  0008               	return
  4805                           
  4806                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4807  16CA  0879               	movf	getTemp_AD@ADRES+1,w
  4808  16CB  01E7               	clrf	((_Temp+1)^(0+256)+12)
  4809  16CC  07E7               	addwf	((_Temp+1)^(0+256)+12),f
  4810  16CD  0878               	movf	getTemp_AD@ADRES,w
  4811  16CE  01E6               	clrf	(_Temp^(0+256)+12)
  4812  16CF  07E6               	addwf	(_Temp^(0+256)+12),f
  4813  16D0  0008               	return
  4814  16D1                     __end_of_getTemp_AD:	
  4815                           
  4816                           	psect	text4
  4817  0968                     __ptext4:	
  4818 ;; *************** function _getLoad_AD *****************
  4819 ;; Defined at:
  4820 ;;		line 16 in file "../src/OverLoad_B1.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;  channel         1    wreg     unsigned char 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;  channel         1    0[BANK0 ] unsigned char 
  4825 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4826 ;;  i               1    5[BANK0 ] unsigned char 
  4827 ;;  j               1    2[BANK0 ] unsigned char 
  4828 ;;  k               1    1[BANK0 ] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;		None               void
  4831 ;; Registers used:
  4832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;Total ram usage:        8 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    5
  4845 ;; This function calls:
  4846 ;;		_getAD
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           
  4853                           ;psect for function _getLoad_AD
  4854  0968                     _getLoad_AD:	
  4855                           
  4856                           ;incstack = 0
  4857                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4858                           ;getLoad_AD@channel stored from wreg
  4859  0968  0020               	movlb	0	; select bank0
  4860  0969  00A0               	movwf	getLoad_AD@channel
  4861                           
  4862                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4863  096A  01A5               	clrf	getLoad_AD@i
  4864  096B  01A2               	clrf	getLoad_AD@j
  4865  096C  01A1               	clrf	getLoad_AD@k
  4866                           
  4867                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4868  096D  01A3               	clrf	getLoad_AD@ADRES
  4869  096E  01A4               	clrf	getLoad_AD@ADRES+1
  4870                           
  4871                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4872  096F  0022               	movlb	2	; select bank2
  4873  0970  1E32               	btfss	_Load^(0+256),4
  4874  0971  0008               	return
  4875                           
  4876                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4877  0972  30F3               	movlw	243
  4878  0973  00F6               	movwf	??_getLoad_AD
  4879  0974  0876               	movf	??_getLoad_AD,w
  4880  0975  00F2               	movwf	getAD@adcon1
  4881  0976  0020               	movlb	0	; select bank0
  4882  0977  0820               	movf	getLoad_AD@channel,w
  4883  0978  319B  23A2  3189   	fcall	_getAD
  4884  097B  0873               	movf	?_getAD+1,w
  4885  097C  0020               	movlb	0	; select bank0
  4886  097D  01A4               	clrf	getLoad_AD@ADRES+1
  4887  097E  07A4               	addwf	getLoad_AD@ADRES+1,f
  4888  097F  0872               	movf	?_getAD,w
  4889  0980  01A3               	clrf	getLoad_AD@ADRES
  4890  0981  07A3               	addwf	getLoad_AD@ADRES,f
  4891                           
  4892                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4893  0982  01A5               	clrf	getLoad_AD@i
  4894  0983  3004               	movlw	4
  4895  0984  0225               	subwf	getLoad_AD@i,w
  4896  0985  1803               	btfsc	3,0
  4897  0986  29AE               	goto	l9201
  4898  0987                     l9189:	
  4899                           
  4900                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4901  0987  3525               	lslf	getLoad_AD@i,w
  4902  0988  3E3D               	addlw	(_Load+11)& (0+255)
  4903  0989  0086               	movwf	6
  4904  098A  3001               	movlw	1	; select bank2/3
  4905  098B  0087               	movwf	7
  4906  098C  3F40               	moviw [0]fsr1
  4907  098D  00F6               	movwf	??_getLoad_AD
  4908  098E  3F41               	moviw [1]fsr1
  4909  098F  00F7               	movwf	??_getLoad_AD+1
  4910  0990  0824               	movf	getLoad_AD@ADRES+1,w
  4911  0991  0277               	subwf	??_getLoad_AD+1,w
  4912  0992  1D03               	skipz
  4913  0993  2996               	goto	u9705
  4914  0994  0823               	movf	getLoad_AD@ADRES,w
  4915  0995  0276               	subwf	??_getLoad_AD,w
  4916  0996                     u9705:	
  4917  0996  1803               	skipnc
  4918  0997  29A6               	goto	l9197
  4919  0998  08A2               	movf	getLoad_AD@j,f
  4920  0999  1D03               	skipz
  4921  099A  29A6               	goto	l9197
  4922                           
  4923                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4924  099B  3525               	lslf	getLoad_AD@i,w
  4925  099C  3E3D               	addlw	(_Load+11)& (0+255)
  4926  099D  0086               	movwf	6
  4927  099E  3001               	movlw	1	; select bank2/3
  4928  099F  0087               	movwf	7
  4929  09A0  0823               	movf	getLoad_AD@ADRES,w
  4930  09A1  3FC0               	movwi [0]fsr1
  4931  09A2  0824               	movf	getLoad_AD@ADRES+1,w
  4932  09A3  3FC1               	movwi [1]fsr1
  4933                           
  4934                           ;OverLoad_B1.c: 25: j = 1;
  4935  09A4  01A2               	clrf	getLoad_AD@j
  4936  09A5  0AA2               	incf	getLoad_AD@j,f
  4937  09A6                     l9197:	
  4938  09A6  3001               	movlw	1
  4939  09A7  00F6               	movwf	??_getLoad_AD
  4940  09A8  0876               	movf	??_getLoad_AD,w
  4941  09A9  07A5               	addwf	getLoad_AD@i,f
  4942  09AA  3004               	movlw	4
  4943  09AB  0225               	subwf	getLoad_AD@i,w
  4944  09AC  1C03               	skipc
  4945  09AD  2987               	goto	l9189
  4946  09AE                     l9201:	
  4947                           
  4948                           ;OverLoad_B1.c: 26: }
  4949                           ;OverLoad_B1.c: 27: }
  4950                           ;OverLoad_B1.c: 28: if (j == 0) {
  4951  09AE  08A2               	movf	getLoad_AD@j,f
  4952  09AF  1D03               	skipz
  4953  09B0  0008               	return
  4954                           
  4955                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4956  09B1  01A5               	clrf	getLoad_AD@i
  4957  09B2                     L1:	
  4958  09B2  3004               	movlw	4
  4959  09B3  0225               	subwf	getLoad_AD@i,w
  4960  09B4  1803               	btfsc	3,0
  4961  09B5  0008               	return
  4962                           
  4963                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4964  09B6  3525               	lslf	getLoad_AD@i,w
  4965  09B7  3E47               	addlw	(_Load+21)& (0+255)
  4966  09B8  0086               	movwf	6
  4967  09B9  3001               	movlw	1	; select bank2/3
  4968  09BA  0087               	movwf	7
  4969  09BB  3F40               	moviw [0]fsr1
  4970  09BC  00F6               	movwf	??_getLoad_AD
  4971  09BD  3F41               	moviw [1]fsr1
  4972  09BE  00F7               	movwf	??_getLoad_AD+1
  4973  09BF  0877               	movf	??_getLoad_AD+1,w
  4974  09C0  0224               	subwf	getLoad_AD@ADRES+1,w
  4975  09C1  1D03               	skipz
  4976  09C2  29C5               	goto	u9755
  4977  09C3  0876               	movf	??_getLoad_AD,w
  4978  09C4  0223               	subwf	getLoad_AD@ADRES,w
  4979  09C5                     u9755:	
  4980  09C5  1803               	skipnc
  4981  09C6  29D5               	goto	l9217
  4982  09C7  08A1               	movf	getLoad_AD@k,f
  4983  09C8  1D03               	skipz
  4984  09C9  29D5               	goto	l9217
  4985                           
  4986                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4987  09CA  3525               	lslf	getLoad_AD@i,w
  4988  09CB  3E47               	addlw	(_Load+21)& (0+255)
  4989  09CC  0086               	movwf	6
  4990  09CD  3001               	movlw	1	; select bank2/3
  4991  09CE  0087               	movwf	7
  4992  09CF  0823               	movf	getLoad_AD@ADRES,w
  4993  09D0  3FC0               	movwi [0]fsr1
  4994  09D1  0824               	movf	getLoad_AD@ADRES+1,w
  4995  09D2  3FC1               	movwi [1]fsr1
  4996                           
  4997                           ;OverLoad_B1.c: 32: k = 1;
  4998  09D3  01A1               	clrf	getLoad_AD@k
  4999  09D4  0AA1               	incf	getLoad_AD@k,f
  5000  09D5                     l9217:	
  5001  09D5  3001               	movlw	1
  5002  09D6  00F6               	movwf	??_getLoad_AD
  5003  09D7  0876               	movf	??_getLoad_AD,w
  5004  09D8  07A5               	addwf	getLoad_AD@i,f
  5005  09D9  29B2               	goto	L1
  5006  09DA                     __end_of_getLoad_AD:	
  5007                           
  5008                           	psect	text5
  5009  1BA2                     __ptext5:	
  5010 ;; *************** function _getAD *****************
  5011 ;; Defined at:
  5012 ;;		line 463 in file "../src/MCU_B1.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  adcon0          1    wreg     unsigned char 
  5015 ;;  adcon1          1    2[COMMON] unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  adcon0          1    5[COMMON] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  2    2[COMMON] int 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;Total ram usage:        4 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    4
  5034 ;; This function calls:
  5035 ;;		_Timeout_Counter
  5036 ;;		_set_TimeoutCleared
  5037 ;; This function is called by:
  5038 ;;		_getLoad_AD
  5039 ;;		_getTemp_AD
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           
  5044                           ;psect for function _getAD
  5045  1BA2                     _getAD:	
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5049                           ;getAD@adcon0 stored from wreg
  5050  1BA2  00F5               	movwf	getAD@adcon0
  5051                           
  5052                           ;MCU_B1.c: 464: ADCON0 = adcon0;
  5053  1BA3  0875               	movf	getAD@adcon0,w
  5054  1BA4  0021               	movlb	1	; select bank1
  5055  1BA5  009D               	movwf	29	;volatile
  5056                           
  5057                           ;MCU_B1.c: 465: ADCON1 = adcon1;
  5058  1BA6  0872               	movf	getAD@adcon1,w
  5059  1BA7  009E               	movwf	30	;volatile
  5060                           
  5061                           ;MCU_B1.c: 466: GO_nDONE = 1;
  5062  1BA8  149D               	bsf	29,1	;volatile
  5063                           
  5064                           ;MCU_B1.c: 467: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5065  1BA9  2BAD               	goto	l8653
  5066  1BAA                     l8651:	
  5067                           
  5068                           ;MCU_B1.c: 468: Timeout_Counter();
  5069  1BAA  319A  22A1  319B   	fcall	_Timeout_Counter
  5070  1BAD                     l8653:	
  5071  1BAD  0021               	movlb	1	; select bank1
  5072  1BAE  1C9D               	btfss	29,1	;volatile
  5073  1BAF  2BB2               	goto	l8657
  5074  1BB0  1D59               	btfss	(_myMain^(0+128)+10),2
  5075  1BB1  2BAA               	goto	l8651
  5076  1BB2                     l8657:	
  5077                           
  5078                           ;MCU_B1.c: 469: };
  5079                           ;MCU_B1.c: 470: set_TimeoutCleared();
  5080  1BB2  31A7  27DA         	fcall	_set_TimeoutCleared
  5081                           
  5082                           ;MCU_B1.c: 471: return ((ADRESH*256)+ADRESL);
  5083  1BB4  0021               	movlb	1	; select bank1
  5084  1BB5  081C               	movf	28,w	;volatile
  5085  1BB6  01F3               	clrf	?_getAD+1
  5086  1BB7  07F3               	addwf	?_getAD+1,f
  5087  1BB8  081B               	movf	27,w	;volatile
  5088  1BB9  01F2               	clrf	?_getAD
  5089  1BBA  07F2               	addwf	?_getAD,f
  5090  1BBB  0008               	return
  5091  1BBC                     __end_of_getAD:	
  5092                           
  5093                           	psect	text6
  5094  1998                     __ptext6:	
  5095 ;; *************** function _WDT_Main *****************
  5096 ;; Defined at:
  5097 ;;		line 1121 in file "../src/MCU_B1.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;		None
  5102 ;; Return value:  Size  Location     Type
  5103 ;;		None               void
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0, pclath, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : 0/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;Total ram usage:        1 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    4
  5118 ;; This function calls:
  5119 ;;		_WDT_Clearing
  5120 ;; This function is called by:
  5121 ;;		_main
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           
  5126                           ;psect for function _WDT_Main
  5127  1998                     _WDT_Main:	
  5128                           
  5129                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  5130                           
  5131                           ;incstack = 0
  5132                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5133  1998  0022               	movlb	2	; select bank2
  5134  1999  1C2A               	btfss	_WDT^(0+256),0
  5135  199A  0008               	return
  5136                           
  5137                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  5138  199B  3001               	movlw	1
  5139  199C  02AB               	subwf	(_WDT^(0+256)+1),f
  5140  199D  082B               	movf	(_WDT^(0+256)+1),w
  5141  199E  3AFF               	xorlw	255
  5142  199F  1903               	skipnz
  5143  19A0  0008               	return
  5144                           
  5145                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  5146  19A1  3064               	movlw	100
  5147  19A2  00F2               	movwf	??_WDT_Main
  5148  19A3  0872               	movf	??_WDT_Main,w
  5149  19A4  00AB               	movwf	(_WDT^(0+256)+1)
  5150                           
  5151                           ;MCU_B1.c: 1125: WDT_Clearing();
  5152  19A5  3180  2002         	fcall	_WDT_Clearing
  5153  19A7  0008               	return
  5154  19A8                     __end_of_WDT_Main:	
  5155                           
  5156                           	psect	text7
  5157  0002                     __ptext7:	
  5158 ;; *************** function _WDT_Clearing *****************
  5159 ;; Defined at:
  5160 ;;		line 1131 in file "../src/MCU_B1.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		None
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/0
  5171 ;;		On exit  : 0/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    3
  5181 ;; This function calls:
  5182 ;;		Nothing
  5183 ;; This function is called by:
  5184 ;;		_WDT_Main
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _WDT_Clearing
  5190  0002                     _WDT_Clearing:	
  5191                           
  5192                           ;incstack = 0
  5193                           ; Regs used in _WDT_Clearing: []
  5194  0002  0064               	clrwdt	;# 
  5195  0003  0008               	return
  5196  0004                     __end_of_WDT_Clearing:	
  5197                           
  5198                           	psect	text8
  5199  27C2                     __ptext8:	
  5200 ;; *************** function _Temp_Main *****************
  5201 ;; Defined at:
  5202 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;		None
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;		None
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5220 ;;Total ram usage:        0 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    6
  5223 ;; This function calls:
  5224 ;;		_setTemp_Main
  5225 ;; This function is called by:
  5226 ;;		_main
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           
  5231                           ;psect for function _Temp_Main
  5232  27C2                     _Temp_Main:	
  5233                           
  5234                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5235                           
  5236                           ;incstack = 0
  5237                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5238  27C2  3184  245A         	fcall	_setTemp_Main
  5239  27C4  0008               	return
  5240  27C5                     __end_of_Temp_Main:	
  5241                           
  5242                           	psect	text9
  5243  045A                     __ptext9:	
  5244 ;; *************** function _setTemp_Main *****************
  5245 ;; Defined at:
  5246 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  AD              2   69[BANK0 ] int 
  5251 ;;  DangerValue     2   67[BANK0 ] unsigned int 
  5252 ;;  SafeValue       2   65[BANK0 ] unsigned int 
  5253 ;;  TempGO          1   64[BANK0 ] unsigned char 
  5254 ;;  error           1   63[BANK0 ] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5265 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;Total ram usage:       10 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    5
  5271 ;; This function calls:
  5272 ;;		___lwdiv
  5273 ;;		_getMain_All_Error_Status
  5274 ;;		_getMain_All_LightsStatus
  5275 ;;		_setBuz
  5276 ;;		_setOverTemp_ADV_Restore
  5277 ;;		_setProductData
  5278 ;; This function is called by:
  5279 ;;		_Temp_Main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _setTemp_Main
  5285  045A                     _setTemp_Main:	
  5286                           
  5287                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5291  045A  3000               	movlw	0
  5292  045B  319E  263C  3184   	fcall	_getMain_All_Error_Status
  5293  045E  0020               	movlb	0	; select bank0
  5294  045F  00DD               	movwf	??_setTemp_Main
  5295  0460  085D               	movf	??_setTemp_Main,w
  5296  0461  00DF               	movwf	setTemp_Main@error
  5297                           
  5298                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5299  0462  01E1               	clrf	setTemp_Main@SafeValue
  5300  0463  01E2               	clrf	setTemp_Main@SafeValue+1
  5301  0464  01E3               	clrf	setTemp_Main@DangerValue
  5302  0465  01E4               	clrf	setTemp_Main@DangerValue+1
  5303                           
  5304                           ;OverTemperature_B1.c: 75: int AD = 0;
  5305  0466  01E5               	clrf	setTemp_Main@AD
  5306  0467  01E6               	clrf	setTemp_Main@AD+1
  5307                           
  5308                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5309  0468  3199  211A  3184   	fcall	_getMain_All_LightsStatus
  5310  046B  0020               	movlb	0	; select bank0
  5311  046C  00DD               	movwf	??_setTemp_Main
  5312  046D  085D               	movf	??_setTemp_Main,w
  5313  046E  00E0               	movwf	setTemp_Main@TempGO
  5314                           
  5315                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5316  046F  0022               	movlb	2	; select bank2
  5317  0470  1C5A               	btfss	_Temp^(0+256),0
  5318  0471  2D29               	goto	l2092
  5319                           
  5320                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5321  0472  195A               	btfsc	_Temp^(0+256),2
  5322  0473  2C91               	goto	l10743
  5323                           
  5324                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5325  0474  0020               	movlb	0	; select bank0
  5326  0475  0860               	movf	setTemp_Main@TempGO,w
  5327  0476  3A01               	xorlw	1
  5328  0477  1D03               	skipz
  5329  0478  2C7C               	goto	l2098
  5330  0479  0022               	movlb	2	; select bank2
  5331  047A  1CDA               	btfss	_Temp^(0+256),1
  5332  047B  2C7F               	goto	l10735
  5333  047C                     l2098:	
  5334  047C  0022               	movlb	2	; select bank2
  5335  047D  1CDA               	btfss	_Temp^(0+256),1
  5336  047E  2C8E               	goto	l10741
  5337  047F                     l10735:	
  5338                           
  5339                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5340  047F  3001               	movlw	1
  5341  0480  07DB               	addwf	(_Temp^(0+256)+1),f
  5342  0481  3000               	movlw	0
  5343  0482  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5344                           
  5345                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5346  0483  3000               	movlw	0
  5347  0484  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5348  0485  30FA               	movlw	250
  5349  0486  1903               	skipnz
  5350  0487  025B               	subwf	(_Temp^(0+256)+1),w
  5351  0488  1C03               	skipc
  5352  0489  0008               	return
  5353                           
  5354                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5355  048A  01DB               	clrf	(_Temp^(0+256)+1)
  5356  048B  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5357                           
  5358                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5359  048C  155A               	bsf	_Temp^(0+256),2
  5360                           
  5361                           ;OverTemperature_B1.c: 92: }
  5362                           ;OverTemperature_B1.c: 93: } else {
  5363  048D  0008               	return
  5364  048E                     l10741:	
  5365                           
  5366                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5367  048E  01DB               	clrf	(_Temp^(0+256)+1)
  5368  048F  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5369                           
  5370                           ;OverTemperature_B1.c: 95: }
  5371                           ;OverTemperature_B1.c: 96: } else {
  5372  0490  0008               	return
  5373  0491                     l10743:	
  5374                           
  5375                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5376  0491  3001               	movlw	1
  5377  0492  07DB               	addwf	(_Temp^(0+256)+1),f
  5378  0493  3000               	movlw	0
  5379  0494  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5380                           
  5381                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5382  0495  3000               	movlw	0
  5383  0496  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5384  0497  3005               	movlw	5
  5385  0498  1903               	skipnz
  5386  0499  025B               	subwf	(_Temp^(0+256)+1),w
  5387  049A  1C03               	skipc
  5388  049B  0008               	return
  5389                           
  5390                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5391  049C  01DB               	clrf	(_Temp^(0+256)+1)
  5392  049D  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5393                           
  5394                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5395  049E  3003               	movlw	3
  5396  049F  00F2               	movwf	___lwdiv@divisor
  5397  04A0  3000               	movlw	0
  5398  04A1  00F3               	movwf	___lwdiv@divisor+1
  5399  04A2  300A               	movlw	10
  5400  04A3  3E5A               	addlw	_Temp& (0+255)
  5401  04A4  0086               	movwf	6
  5402  04A5  3001               	movlw	1	; select bank2/3
  5403  04A6  0087               	movwf	7
  5404  04A7  3008               	movlw	8
  5405  04A8  3E5A               	addlw	_Temp& (0+255)
  5406  04A9  0084               	movwf	4
  5407  04AA  3001               	movlw	1	; select bank2/3
  5408  04AB  0085               	movwf	5
  5409  04AC  3F00               	moviw [0]fsr0
  5410  04AD  0760               	addwf	(_Temp^(0+256)+6),w
  5411  04AE  0020               	movlb	0	; select bank0
  5412  04AF  00DD               	movwf	??_setTemp_Main
  5413  04B0  3F01               	moviw [1]fsr0
  5414  04B1  0022               	movlb	2	; select bank2
  5415  04B2  3D61               	addwfc	((_Temp+1)^(0+256)+6),w
  5416  04B3  0020               	movlb	0	; select bank0
  5417  04B4  00DE               	movwf	??_setTemp_Main+1
  5418  04B5  3F40               	moviw [0]fsr1
  5419  04B6  075D               	addwf	??_setTemp_Main,w
  5420  04B7  00F4               	movwf	___lwdiv@dividend
  5421  04B8  3F41               	moviw [1]fsr1
  5422  04B9  3D5E               	addwfc	??_setTemp_Main+1,w
  5423  04BA  00F5               	movwf	___lwdiv@dividend+1
  5424  04BB  319F  275D  3184   	fcall	___lwdiv
  5425  04BE  0873               	movf	?___lwdiv+1,w
  5426  04BF  0020               	movlb	0	; select bank0
  5427  04C0  01E6               	clrf	setTemp_Main@AD+1
  5428  04C1  07E6               	addwf	setTemp_Main@AD+1,f
  5429  04C2  0872               	movf	?___lwdiv,w
  5430  04C3  01E5               	clrf	setTemp_Main@AD
  5431  04C4  07E5               	addwf	setTemp_Main@AD,f
  5432                           
  5433                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5434  04C5  319B  2388  3184   	fcall	_setOverTemp_ADV_Restore
  5435                           
  5436                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5437  04C8  0020               	movlb	0	; select bank0
  5438  04C9  0866               	movf	setTemp_Main@AD+1,w
  5439  04CA  3A80               	xorlw	128
  5440  04CB  00DD               	movwf	??_setTemp_Main
  5441  04CC  3080               	movlw	128
  5442  04CD  025D               	subwf	??_setTemp_Main,w
  5443  04CE  1D03               	skipz
  5444  04CF  2CD2               	goto	u12095
  5445  04D0  3001               	movlw	1
  5446  04D1  0265               	subwf	setTemp_Main@AD,w
  5447  04D2                     u12095:	
  5448  04D2  1C03               	skipc
  5449  04D3  0008               	return
  5450                           
  5451                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5452  04D4  0022               	movlb	2	; select bank2
  5453  04D5  115A               	bcf	_Temp^(0+256),2
  5454                           
  5455                           ;OverTemperature_B1.c: 123: SafeValue = 455;
  5456  04D6  30C7               	movlw	199
  5457  04D7  0020               	movlb	0	; select bank0
  5458  04D8  00E1               	movwf	setTemp_Main@SafeValue
  5459  04D9  3001               	movlw	1
  5460  04DA  00E2               	movwf	setTemp_Main@SafeValue+1
  5461                           
  5462                           ;OverTemperature_B1.c: 124: DangerValue = 415;
  5463  04DB  309F               	movlw	159
  5464  04DC  00E3               	movwf	setTemp_Main@DangerValue
  5465  04DD  3001               	movlw	1
  5466  04DE  00E4               	movwf	setTemp_Main@DangerValue+1
  5467                           
  5468                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5469  04DF  0022               	movlb	2	; select bank2
  5470  04E0  1CDA               	btfss	_Temp^(0+256),1
  5471  04E1  2D00               	goto	l10773
  5472                           
  5473                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5474  04E2  0020               	movlb	0	; select bank0
  5475  04E3  0862               	movf	setTemp_Main@SafeValue+1,w
  5476  04E4  0266               	subwf	setTemp_Main@AD+1,w
  5477  04E5  1D03               	skipz
  5478  04E6  2CE9               	goto	u12115
  5479  04E7  0861               	movf	setTemp_Main@SafeValue,w
  5480  04E8  0265               	subwf	setTemp_Main@AD,w
  5481  04E9                     u12115:	
  5482  04E9  1C03               	skipc
  5483  04EA  2D15               	goto	l10783
  5484                           
  5485                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5486  04EB  3001               	movlw	1
  5487  04EC  00DD               	movwf	??_setTemp_Main
  5488  04ED  085D               	movf	??_setTemp_Main,w
  5489  04EE  0022               	movlb	2	; select bank2
  5490  04EF  07DD               	addwf	(_Temp^(0+256)+3),f
  5491                           
  5492                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5493  04F0  3003               	movlw	3
  5494  04F1  025D               	subwf	(_Temp^(0+256)+3),w
  5495  04F2  1C03               	skipc
  5496  04F3  2D17               	goto	l10785
  5497                           
  5498                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5499  04F4  01DD               	clrf	(_Temp^(0+256)+3)
  5500                           
  5501                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5502  04F5  10DA               	bcf	_Temp^(0+256),1
  5503                           
  5504                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5505  04F6  3064               	movlw	100
  5506  04F7  0020               	movlb	0	; select bank0
  5507  04F8  00A4               	movwf	setBuz@time
  5508  04F9  3000               	movlw	0
  5509  04FA  00A5               	movwf	setBuz@time+1
  5510  04FB  3002               	movlw	2
  5511  04FC  3192  22EC  3184   	fcall	_setBuz
  5512                           
  5513                           ;OverTemperature_B1.c: 137: }
  5514                           ;OverTemperature_B1.c: 138: } else {
  5515  04FF  2D17               	goto	l10785
  5516  0500                     l10773:	
  5517                           ;OverTemperature_B1.c: 140: }
  5518                           ;OverTemperature_B1.c: 141: } else {
  5519                           
  5520                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5521                           
  5522                           
  5523                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5524  0500  0020               	movlb	0	; select bank0
  5525  0501  0866               	movf	setTemp_Main@AD+1,w
  5526  0502  0264               	subwf	setTemp_Main@DangerValue+1,w
  5527  0503  1D03               	skipz
  5528  0504  2D07               	goto	u12135
  5529  0505  0865               	movf	setTemp_Main@AD,w
  5530  0506  0263               	subwf	setTemp_Main@DangerValue,w
  5531  0507                     u12135:	
  5532  0507  1C03               	skipc
  5533  0508  2D15               	goto	l10783
  5534                           
  5535                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5536  0509  3001               	movlw	1
  5537  050A  00DD               	movwf	??_setTemp_Main
  5538  050B  085D               	movf	??_setTemp_Main,w
  5539  050C  0022               	movlb	2	; select bank2
  5540  050D  07DD               	addwf	(_Temp^(0+256)+3),f
  5541                           
  5542                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5543  050E  3003               	movlw	3
  5544  050F  025D               	subwf	(_Temp^(0+256)+3),w
  5545  0510  1C03               	skipc
  5546  0511  2D17               	goto	l10785
  5547                           
  5548                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5549  0512  01DD               	clrf	(_Temp^(0+256)+3)
  5550                           
  5551                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5552  0513  14DA               	bsf	_Temp^(0+256),1
  5553                           
  5554                           ;OverTemperature_B1.c: 147: }
  5555                           ;OverTemperature_B1.c: 148: } else {
  5556  0514  2D17               	goto	l10785
  5557  0515                     l10783:	
  5558                           
  5559                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5560  0515  0022               	movlb	2	; select bank2
  5561  0516  01DD               	clrf	(_Temp^(0+256)+3)
  5562  0517                     l10785:	
  5563                           
  5564                           ;OverTemperature_B1.c: 150: }
  5565                           ;OverTemperature_B1.c: 151: }
  5566                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5567  0517  0020               	movlb	0	; select bank0
  5568  0518  0866               	movf	setTemp_Main@AD+1,w
  5569  0519  00DD               	movwf	??_setTemp_Main
  5570  051A  085D               	movf	??_setTemp_Main,w
  5571  051B  00DA               	movwf	setProductData@value
  5572  051C  3018               	movlw	24
  5573  051D  3198  20A3  3184   	fcall	_setProductData
  5574                           
  5575                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5576  0520  0020               	movlb	0	; select bank0
  5577  0521  0865               	movf	setTemp_Main@AD,w
  5578  0522  00DD               	movwf	??_setTemp_Main
  5579  0523  085D               	movf	??_setTemp_Main,w
  5580  0524  00DA               	movwf	setProductData@value
  5581  0525  3019               	movlw	25
  5582  0526  3198  20A3         	fcall	_setProductData
  5583                           
  5584                           ;OverTemperature_B1.c: 169: }
  5585                           ;OverTemperature_B1.c: 170: }
  5586                           ;OverTemperature_B1.c: 171: }
  5587                           ;OverTemperature_B1.c: 174: } else {
  5588  0528  0008               	return
  5589  0529                     l2092:	
  5590                           
  5591                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5592  0529  0021               	movlb	1	; select bank1
  5593  052A  1C4F               	btfss	_myMain^(0+128),0
  5594  052B  0008               	return
  5595                           
  5596                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5597  052C  0022               	movlb	2	; select bank2
  5598  052D  145A               	bsf	_Temp^(0+256),0
  5599  052E  0008               	return
  5600  052F                     __end_of_setTemp_Main:	
  5601                           
  5602                           	psect	text10
  5603  1B88                     __ptext10:	
  5604 ;; *************** function _setOverTemp_ADV_Restore *****************
  5605 ;; Defined at:
  5606 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  i               2    3[COMMON] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;Total ram usage:        3 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    3
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_setTemp_Main
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _setOverTemp_ADV_Restore
  5636  1B88                     _setOverTemp_ADV_Restore:	
  5637                           
  5638                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5639                           
  5640                           ;incstack = 0
  5641                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5642  1B88  01F3               	clrf	setOverTemp_ADV_Restore@i
  5643  1B89  01F4               	clrf	setOverTemp_ADV_Restore@i+1
  5644  1B8A                     L2:	
  5645  1B8A  0874               	movf	setOverTemp_ADV_Restore@i+1,w
  5646  1B8B  3A80               	xorlw	128
  5647  1B8C  00F2               	movwf	??_setOverTemp_ADV_Restore
  5648  1B8D  3080               	movlw	128
  5649  1B8E  0272               	subwf	??_setOverTemp_ADV_Restore,w
  5650  1B8F  1D03               	skipz
  5651  1B90  2B93               	goto	u7595
  5652  1B91  3005               	movlw	5
  5653  1B92  0273               	subwf	setOverTemp_ADV_Restore@i,w
  5654  1B93                     u7595:	
  5655  1B93  1803               	btfsc	3,0
  5656  1B94  0008               	return
  5657                           
  5658                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5659  1B95  3573               	lslf	setOverTemp_ADV_Restore@i,w
  5660  1B96  3E5E               	addlw	(_Temp+4)& (0+255)
  5661  1B97  0086               	movwf	6
  5662  1B98  3001               	movlw	1	; select bank2/3
  5663  1B99  0087               	movwf	7
  5664  1B9A  3000               	movlw	0
  5665  1B9B  3FC0               	movwi [0]fsr1
  5666  1B9C  3FC1               	movwi [1]fsr1
  5667  1B9D  3001               	movlw	1
  5668  1B9E  07F3               	addwf	setOverTemp_ADV_Restore@i,f
  5669  1B9F  3000               	movlw	0
  5670  1BA0  3DF4               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5671  1BA1  2B8A               	goto	L2
  5672  1BA2                     __end_of_setOverTemp_ADV_Restore:	
  5673                           
  5674                           	psect	text11
  5675  27BF                     __ptext11:	
  5676 ;; *************** function _Temp_Initialization *****************
  5677 ;; Defined at:
  5678 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		status,2, status,0, pclath, cstack
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    4
  5699 ;; This function calls:
  5700 ;;		_setTemp_Initialization
  5701 ;; This function is called by:
  5702 ;;		_main
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _Temp_Initialization
  5708  27BF                     _Temp_Initialization:	
  5709                           
  5710                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5714  27BF  3188  2000         	fcall	_setTemp_Initialization
  5715  27C1  0008               	return
  5716  27C2                     __end_of_Temp_Initialization:	
  5717                           
  5718                           	psect	text12
  5719  0800                     __ptext12:	
  5720 ;; *************** function _setTemp_Initialization *****************
  5721 ;; Defined at:
  5722 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;		None
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		None
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;Total ram usage:        0 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    3
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_Temp_Initialization
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           
  5751                           ;psect for function _setTemp_Initialization
  5752  0800                     _setTemp_Initialization:	
  5753                           
  5754                           ;incstack = 0
  5755                           ; Regs used in _setTemp_Initialization: []
  5756  0800  0008               	return
  5757  0801                     __end_of_setTemp_Initialization:	
  5758                           
  5759                           	psect	text13
  5760  188C                     __ptext13:	
  5761 ;; *************** function _Switch_Main *****************
  5762 ;; Defined at:
  5763 ;;		line 76 in file "../src/Switch_B1.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;		None
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;Total ram usage:        0 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    7
  5784 ;; This function calls:
  5785 ;;		_TouchPower
  5786 ;;		_setSw_Main
  5787 ;; This function is called by:
  5788 ;;		_main
  5789 ;; This function uses a non-reentrant model
  5790 ;;
  5791                           
  5792                           
  5793                           ;psect for function _Switch_Main
  5794  188C                     _Switch_Main:	
  5795                           
  5796                           ;Switch_B1.c: 79: setSw_Main(1);
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5800  188C  3001               	movlw	1
  5801  188D  3181  21F3  3198   	fcall	_setSw_Main
  5802                           
  5803                           ;Switch_B1.c: 83: setSw_Main(2);
  5804  1890  3002               	movlw	2
  5805  1891  3181  21F3  3198   	fcall	_setSw_Main
  5806                           
  5807                           ;Switch_B1.c: 91: TouchPower();
  5808  1894  319A  22B6         	fcall	_TouchPower
  5809  1896  0008               	return
  5810  1897                     __end_of_Switch_Main:	
  5811                           
  5812                           	psect	text14
  5813  01F3                     __ptext14:	
  5814 ;; *************** function _setSw_Main *****************
  5815 ;; Defined at:
  5816 ;;		line 117 in file "../src/Switch_B1.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;  sw              1    wreg     unsigned char 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  sw              1   13[BANK0 ] unsigned char 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:        3 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    6
  5837 ;; This function calls:
  5838 ;;		_SwPointSelect
  5839 ;;		_getMain_All_Error_Status
  5840 ;;		_getSw_KeyStatus
  5841 ;;		_setBuz
  5842 ;;		_setDimmerLights_DimmingOn
  5843 ;;		_setDimmerLights_SwOff
  5844 ;;		_setDimmerLights_SwOn
  5845 ;;		_setRF_Learn
  5846 ;; This function is called by:
  5847 ;;		_Switch_Main
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           
  5852                           ;psect for function _setSw_Main
  5853  01F3                     _setSw_Main:	
  5854                           
  5855                           ;incstack = 0
  5856                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5857                           ;setSw_Main@sw stored from wreg
  5858  01F3  0020               	movlb	0	; select bank0
  5859  01F4  00AD               	movwf	setSw_Main@sw
  5860                           
  5861                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5862  01F5  082D               	movf	setSw_Main@sw,w
  5863  01F6  319A  22CB  3181   	fcall	_SwPointSelect
  5864                           
  5865                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5866  01F9  0020               	movlb	0	; select bank0
  5867  01FA  086D               	movf	_Sw,w
  5868  01FB  0086               	movwf	6
  5869  01FC  3001               	movlw	1	; select bank2/3
  5870  01FD  0087               	movwf	7
  5871  01FE  1C01               	btfss	1,0
  5872  01FF  2B5A               	goto	l2923
  5873                           
  5874                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5875  0200  3000               	movlw	0
  5876  0201  319E  263C  3181   	fcall	_getMain_All_Error_Status
  5877  0204  3800               	iorlw	0
  5878  0205  1D03               	skipz
  5879  0206  2A22               	goto	l10879
  5880                           
  5881                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5882  0207  0020               	movlb	0	; select bank0
  5883  0208  0A6D               	incf	_Sw,w
  5884  0209  0086               	movwf	6
  5885  020A  3001               	movlw	1	; select bank2/3
  5886  020B  0087               	movwf	7
  5887  020C  1081               	bcf	1,1
  5888                           
  5889                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5890  020D  082D               	movf	setSw_Main@sw,w
  5891  020E  319C  2465  3181   	fcall	_getSw_KeyStatus
  5892  0211  3A01               	xorlw	1
  5893  0212  3000               	movlw	0
  5894  0213  1903               	skipnz
  5895  0214  3001               	movlw	1
  5896  0215  0020               	movlb	0	; select bank0
  5897  0216  00AB               	movwf	??_setSw_Main
  5898  0217  086D               	movf	_Sw,w
  5899  0218  0086               	movwf	6
  5900  0219  3001               	movlw	1	; select bank2/3
  5901  021A  0087               	movwf	7
  5902  021B  0DAB               	rlf	??_setSw_Main,f
  5903  021C  0801               	movf	1,w
  5904  021D  062B               	xorwf	??_setSw_Main,w
  5905  021E  39FD               	andlw	-3
  5906  021F  062B               	xorwf	??_setSw_Main,w
  5907  0220  0081               	movwf	1
  5908                           
  5909                           ;Switch_B1.c: 124: } else {
  5910  0221  2A38               	goto	l2925
  5911  0222                     l10879:	
  5912                           
  5913                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5914  0222  0020               	movlb	0	; select bank0
  5915  0223  0A6D               	incf	_Sw,w
  5916  0224  0086               	movwf	6
  5917  0225  3001               	movlw	1	; select bank2/3
  5918  0226  0087               	movwf	7
  5919  0227  1881               	btfsc	1,1
  5920  0228  2A38               	goto	l2925
  5921                           
  5922                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5923  0229  0A6D               	incf	_Sw,w
  5924  022A  0086               	movwf	6
  5925  022B  3001               	movlw	1	; select bank2/3
  5926  022C  0087               	movwf	7
  5927  022D  1481               	bsf	1,1
  5928                           
  5929                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5930  022E  086D               	movf	_Sw,w
  5931  022F  0086               	movwf	6
  5932  0230  3001               	movlw	1	; select bank2/3
  5933  0231  0087               	movwf	7
  5934  0232  1081               	bcf	1,1
  5935                           
  5936                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5937  0233  086D               	movf	_Sw,w
  5938  0234  0086               	movwf	6
  5939  0235  3001               	movlw	1	; select bank2/3
  5940  0236  0087               	movwf	7
  5941  0237  1501               	bsf	1,2
  5942  0238                     l2925:	
  5943                           
  5944                           ;Switch_B1.c: 130: }
  5945                           ;Switch_B1.c: 131: }
  5946                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5947  0238  086D               	movf	_Sw,w
  5948  0239  0086               	movwf	6
  5949  023A  3001               	movlw	1	; select bank2/3
  5950  023B  0087               	movwf	7
  5951  023C  1C81               	btfss	1,1
  5952  023D  2B07               	goto	l10929
  5953                           
  5954                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5955  023E  086D               	movf	_Sw,w
  5956  023F  0086               	movwf	6
  5957  0240  3001               	movlw	1	; select bank2/3
  5958  0241  0087               	movwf	7
  5959  0242  1901               	btfsc	1,2
  5960  0243  2A65               	goto	l10895
  5961                           
  5962                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5963  0244  3001               	movlw	1
  5964  0245  00AB               	movwf	??_setSw_Main
  5965  0246  086D               	movf	_Sw,w
  5966  0247  3E02               	addlw	2
  5967  0248  0086               	movwf	6
  5968  0249  3001               	movlw	1	; select bank2/3
  5969  024A  0087               	movwf	7
  5970  024B  082B               	movf	??_setSw_Main,w
  5971  024C  0781               	addwf	1,f
  5972                           
  5973                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  5974  024D  086D               	movf	_Sw,w
  5975  024E  3E02               	addlw	2
  5976  024F  0086               	movwf	6
  5977  0250  3001               	movlw	1	; select bank2/3
  5978  0251  0087               	movwf	7
  5979  0252  3005               	movlw	5
  5980  0253  0201               	subwf	1,w
  5981  0254  1C03               	skipc
  5982  0255  0008               	return
  5983                           
  5984                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5985  0256  086D               	movf	_Sw,w
  5986  0257  3E02               	addlw	2
  5987  0258  0086               	movwf	6
  5988  0259  3001               	movlw	1	; select bank2/3
  5989  025A  0087               	movwf	7
  5990  025B  0181               	clrf	1
  5991                           
  5992                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5993  025C  086D               	movf	_Sw,w
  5994  025D  0086               	movwf	6
  5995  025E  3001               	movlw	1	; select bank2/3
  5996  025F  0087               	movwf	7
  5997  0260  1501               	bsf	1,2
  5998                           
  5999                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6000  0261  082D               	movf	setSw_Main@sw,w
  6001  0262  3187  2784         	fcall	_setDimmerLights_SwOn
  6002                           
  6003                           ;Switch_B1.c: 147: }
  6004                           ;Switch_B1.c: 148: } else {
  6005  0264  0008               	return
  6006  0265                     l10895:	
  6007                           
  6008                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6009  0265  0020               	movlb	0	; select bank0
  6010  0266  086D               	movf	_Sw,w
  6011  0267  0086               	movwf	6
  6012  0268  3001               	movlw	1	; select bank2/3
  6013  0269  0087               	movwf	7
  6014  026A  1981               	btfsc	1,3
  6015  026B  2A97               	goto	l10905
  6016                           
  6017                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6018  026C  086D               	movf	_Sw,w
  6019  026D  3E03               	addlw	3
  6020  026E  0086               	movwf	6
  6021  026F  3001               	movlw	1	; select bank2/3
  6022  0270  0087               	movwf	7
  6023  0271  3001               	movlw	1
  6024  0272  0781               	addwf	1,f
  6025  0273  3141               	addfsr 1,1
  6026  0274  1803               	skipnc
  6027  0275  0A81               	incf	1,f
  6028                           
  6029                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6030  0276  086D               	movf	_Sw,w
  6031  0277  3E03               	addlw	3
  6032  0278  0086               	movwf	6
  6033  0279  3001               	movlw	1	; select bank2/3
  6034  027A  0087               	movwf	7
  6035  027B  3F40               	moviw [0]fsr1
  6036  027C  00AB               	movwf	??_setSw_Main
  6037  027D  3F41               	moviw [1]fsr1
  6038  027E  00AC               	movwf	??_setSw_Main+1
  6039  027F  3000               	movlw	0
  6040  0280  022C               	subwf	??_setSw_Main+1,w
  6041  0281  304B               	movlw	75
  6042  0282  1903               	skipnz
  6043  0283  022B               	subwf	??_setSw_Main,w
  6044  0284  1C03               	skipc
  6045  0285  0008               	return
  6046                           
  6047                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6048  0286  086D               	movf	_Sw,w
  6049  0287  3E03               	addlw	3
  6050  0288  0086               	movwf	6
  6051  0289  3001               	movlw	1	; select bank2/3
  6052  028A  0087               	movwf	7
  6053  028B  3000               	movlw	0
  6054  028C  3FC0               	movwi [0]fsr1
  6055  028D  3FC1               	movwi [1]fsr1
  6056                           
  6057                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6058  028E  086D               	movf	_Sw,w
  6059  028F  0086               	movwf	6
  6060  0290  3001               	movlw	1	; select bank2/3
  6061  0291  0087               	movwf	7
  6062  0292  1581               	bsf	1,3
  6063                           
  6064                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6065  0293  082D               	movf	setSw_Main@sw,w
  6066  0294  319D  2599         	fcall	_setDimmerLights_DimmingOn
  6067                           
  6068                           ;Switch_B1.c: 162: }
  6069                           ;Switch_B1.c: 163: } else {
  6070  0296  0008               	return
  6071  0297                     l10905:	
  6072                           
  6073                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6074  0297  0020               	movlb	0	; select bank0
  6075  0298  086D               	movf	_Sw,w
  6076  0299  0086               	movwf	6
  6077  029A  3001               	movlw	1	; select bank2/3
  6078  029B  0087               	movwf	7
  6079  029C  1A01               	btfsc	1,4
  6080  029D  2AD5               	goto	l10919
  6081                           
  6082                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6083  029E  086D               	movf	_Sw,w
  6084  029F  3E05               	addlw	5
  6085  02A0  0086               	movwf	6
  6086  02A1  3001               	movlw	1	; select bank2/3
  6087  02A2  0087               	movwf	7
  6088  02A3  3001               	movlw	1
  6089  02A4  0781               	addwf	1,f
  6090  02A5  3141               	addfsr 1,1
  6091  02A6  1803               	skipnc
  6092  02A7  0A81               	incf	1,f
  6093                           
  6094                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6095  02A8  086D               	movf	_Sw,w
  6096  02A9  3E05               	addlw	5
  6097  02AA  0086               	movwf	6
  6098  02AB  3001               	movlw	1	; select bank2/3
  6099  02AC  0087               	movwf	7
  6100  02AD  3F40               	moviw [0]fsr1
  6101  02AE  00AB               	movwf	??_setSw_Main
  6102  02AF  3F41               	moviw [1]fsr1
  6103  02B0  00AC               	movwf	??_setSw_Main+1
  6104  02B1  3000               	movlw	0
  6105  02B2  022C               	subwf	??_setSw_Main+1,w
  6106  02B3  304B               	movlw	75
  6107  02B4  1903               	skipnz
  6108  02B5  022B               	subwf	??_setSw_Main,w
  6109  02B6  1C03               	skipc
  6110  02B7  0008               	return
  6111                           
  6112                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6113  02B8  086D               	movf	_Sw,w
  6114  02B9  3E05               	addlw	5
  6115  02BA  0086               	movwf	6
  6116  02BB  3001               	movlw	1	; select bank2/3
  6117  02BC  0087               	movwf	7
  6118  02BD  3000               	movlw	0
  6119  02BE  3FC0               	movwi [0]fsr1
  6120  02BF  3FC1               	movwi [1]fsr1
  6121                           
  6122                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6123  02C0  086D               	movf	_Sw,w
  6124  02C1  0086               	movwf	6
  6125  02C2  3001               	movlw	1	; select bank2/3
  6126  02C3  0087               	movwf	7
  6127  02C4  1601               	bsf	1,4
  6128                           
  6129                           ;Switch_B1.c: 172: setRF_Learn(1);
  6130  02C5  3001               	movlw	1
  6131  02C6  3199  21EC  3181   	fcall	_setRF_Learn
  6132                           
  6133                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6134  02C9  0021               	movlb	1	; select bank1
  6135  02CA  1ECF               	btfss	_myMain^(0+128),5
  6136  02CB  0008               	return
  6137                           
  6138                           ;Switch_B1.c: 174: setBuz(2, 100);
  6139  02CC  3064               	movlw	100
  6140  02CD  0020               	movlb	0	; select bank0
  6141  02CE  00A4               	movwf	setBuz@time
  6142  02CF  3000               	movlw	0
  6143  02D0  00A5               	movwf	setBuz@time+1
  6144  02D1  3002               	movlw	2
  6145  02D2  3192  22EC         	fcall	_setBuz
  6146                           
  6147                           ;Switch_B1.c: 175: }
  6148                           ;Switch_B1.c: 179: }
  6149                           ;Switch_B1.c: 180: } else {
  6150  02D4  0008               	return
  6151  02D5                     l10919:	
  6152                           
  6153                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6154  02D5  0020               	movlb	0	; select bank0
  6155  02D6  086D               	movf	_Sw,w
  6156  02D7  0086               	movwf	6
  6157  02D8  3001               	movlw	1	; select bank2/3
  6158  02D9  0087               	movwf	7
  6159  02DA  1A81               	btfsc	1,5
  6160  02DB  0008               	return
  6161                           
  6162                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6163  02DC  086D               	movf	_Sw,w
  6164  02DD  3E07               	addlw	7
  6165  02DE  0086               	movwf	6
  6166  02DF  3001               	movlw	1	; select bank2/3
  6167  02E0  0087               	movwf	7
  6168  02E1  3001               	movlw	1
  6169  02E2  0781               	addwf	1,f
  6170  02E3  3141               	addfsr 1,1
  6171  02E4  1803               	skipnc
  6172  02E5  0A81               	incf	1,f
  6173                           
  6174                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6175  02E6  086D               	movf	_Sw,w
  6176  02E7  3E07               	addlw	7
  6177  02E8  0086               	movwf	6
  6178  02E9  3001               	movlw	1	; select bank2/3
  6179  02EA  0087               	movwf	7
  6180  02EB  3F40               	moviw [0]fsr1
  6181  02EC  00AB               	movwf	??_setSw_Main
  6182  02ED  3F41               	moviw [1]fsr1
  6183  02EE  00AC               	movwf	??_setSw_Main+1
  6184  02EF  3000               	movlw	0
  6185  02F0  022C               	subwf	??_setSw_Main+1,w
  6186  02F1  3096               	movlw	150
  6187  02F2  1903               	skipnz
  6188  02F3  022B               	subwf	??_setSw_Main,w
  6189  02F4  1C03               	skipc
  6190  02F5  0008               	return
  6191                           
  6192                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6193  02F6  086D               	movf	_Sw,w
  6194  02F7  3E07               	addlw	7
  6195  02F8  0086               	movwf	6
  6196  02F9  3001               	movlw	1	; select bank2/3
  6197  02FA  0087               	movwf	7
  6198  02FB  3000               	movlw	0
  6199  02FC  3FC0               	movwi [0]fsr1
  6200  02FD  3FC1               	movwi [1]fsr1
  6201                           
  6202                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6203  02FE  086D               	movf	_Sw,w
  6204  02FF  0086               	movwf	6
  6205  0300  3001               	movlw	1	; select bank2/3
  6206  0301  0087               	movwf	7
  6207  0302  1681               	bsf	1,5
  6208                           
  6209                           ;Switch_B1.c: 188: setRF_Learn(0);
  6210  0303  3000               	movlw	0
  6211  0304  3199  21EC         	fcall	_setRF_Learn
  6212                           
  6213                           ;Switch_B1.c: 191: }
  6214                           ;Switch_B1.c: 192: }
  6215                           ;Switch_B1.c: 193: }
  6216                           ;Switch_B1.c: 195: }
  6217                           ;Switch_B1.c: 196: }
  6218                           ;Switch_B1.c: 197: } else {
  6219  0306  0008               	return
  6220  0307                     l10929:	
  6221                           
  6222                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6223  0307  0020               	movlb	0	; select bank0
  6224  0308  086D               	movf	_Sw,w
  6225  0309  0086               	movwf	6
  6226  030A  3001               	movlw	1	; select bank2/3
  6227  030B  0087               	movwf	7
  6228  030C  1D01               	btfss	1,2
  6229  030D  0008               	return
  6230                           
  6231                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6232  030E  3001               	movlw	1
  6233  030F  00AB               	movwf	??_setSw_Main
  6234  0310  086D               	movf	_Sw,w
  6235  0311  3E02               	addlw	2
  6236  0312  0086               	movwf	6
  6237  0313  3001               	movlw	1	; select bank2/3
  6238  0314  0087               	movwf	7
  6239  0315  082B               	movf	??_setSw_Main,w
  6240  0316  0781               	addwf	1,f
  6241                           
  6242                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6243  0317  086D               	movf	_Sw,w
  6244  0318  3E02               	addlw	2
  6245  0319  0086               	movwf	6
  6246  031A  3001               	movlw	1	; select bank2/3
  6247  031B  0087               	movwf	7
  6248  031C  3005               	movlw	5
  6249  031D  0201               	subwf	1,w
  6250  031E  1C03               	skipc
  6251  031F  0008               	return
  6252                           
  6253                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6254  0320  086D               	movf	_Sw,w
  6255  0321  3E02               	addlw	2
  6256  0322  0086               	movwf	6
  6257  0323  3001               	movlw	1	; select bank2/3
  6258  0324  0087               	movwf	7
  6259  0325  0181               	clrf	1
  6260                           
  6261                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6262  0326  086D               	movf	_Sw,w
  6263  0327  0086               	movwf	6
  6264  0328  3001               	movlw	1	; select bank2/3
  6265  0329  0087               	movwf	7
  6266  032A  1101               	bcf	1,2
  6267                           
  6268                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6269  032B  086D               	movf	_Sw,w
  6270  032C  3E03               	addlw	3
  6271  032D  0086               	movwf	6
  6272  032E  3001               	movlw	1	; select bank2/3
  6273  032F  0087               	movwf	7
  6274  0330  3000               	movlw	0
  6275  0331  3FC0               	movwi [0]fsr1
  6276  0332  3FC1               	movwi [1]fsr1
  6277                           
  6278                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6279  0333  086D               	movf	_Sw,w
  6280  0334  0086               	movwf	6
  6281  0335  3001               	movlw	1	; select bank2/3
  6282  0336  0087               	movwf	7
  6283  0337  1181               	bcf	1,3
  6284                           
  6285                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6286  0338  086D               	movf	_Sw,w
  6287  0339  0086               	movwf	6
  6288  033A  3001               	movlw	1	; select bank2/3
  6289  033B  0087               	movwf	7
  6290  033C  1201               	bcf	1,4
  6291                           
  6292                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6293  033D  086D               	movf	_Sw,w
  6294  033E  0086               	movwf	6
  6295  033F  3001               	movlw	1	; select bank2/3
  6296  0340  0087               	movwf	7
  6297  0341  1281               	bcf	1,5
  6298                           
  6299                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6300  0342  086D               	movf	_Sw,w
  6301  0343  3E05               	addlw	5
  6302  0344  0086               	movwf	6
  6303  0345  3001               	movlw	1	; select bank2/3
  6304  0346  0087               	movwf	7
  6305  0347  3000               	movlw	0
  6306  0348  3FC0               	movwi [0]fsr1
  6307  0349  3FC1               	movwi [1]fsr1
  6308                           
  6309                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6310  034A  086D               	movf	_Sw,w
  6311  034B  3E07               	addlw	7
  6312  034C  0086               	movwf	6
  6313  034D  3001               	movlw	1	; select bank2/3
  6314  034E  0087               	movwf	7
  6315  034F  3000               	movlw	0
  6316  0350  3FC0               	movwi [0]fsr1
  6317  0351  3FC1               	movwi [1]fsr1
  6318                           
  6319                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6320  0352  082D               	movf	setSw_Main@sw,w
  6321  0353  3191  2122  3181   	fcall	_setDimmerLights_SwOff
  6322                           
  6323                           ;Switch_B1.c: 220: setRF_Learn(0);
  6324  0356  3000               	movlw	0
  6325  0357  3199  21EC         	fcall	_setRF_Learn
  6326                           
  6327                           ;Switch_B1.c: 222: }
  6328                           ;Switch_B1.c: 223: }
  6329                           ;Switch_B1.c: 224: }
  6330                           ;Switch_B1.c: 225: } else {
  6331  0359  0008               	return
  6332  035A                     l2923:	
  6333                           
  6334                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6335  035A  0021               	movlb	1	; select bank1
  6336  035B  1C4F               	btfss	_myMain^(0+128),0
  6337  035C  0008               	return
  6338                           
  6339                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6340  035D  0020               	movlb	0	; select bank0
  6341  035E  086D               	movf	_Sw,w
  6342  035F  0086               	movwf	6
  6343  0360  3001               	movlw	1	; select bank2/3
  6344  0361  0087               	movwf	7
  6345  0362  1401               	bsf	1,0
  6346  0363  0008               	return
  6347  0364                     __end_of_setSw_Main:	
  6348                           
  6349                           	psect	text15
  6350  19EC                     __ptext15:	
  6351 ;; *************** function _setRF_Learn *****************
  6352 ;; Defined at:
  6353 ;;		line 33 in file "../src/RF_Control_B1.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  command         1    wreg     unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  command         1    3[COMMON] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;		None               void
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        2 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    3
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_setSw_Main
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _setRF_Learn
  6383  19EC                     _setRF_Learn:	
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6387                           ;setRF_Learn@command stored from wreg
  6388  19EC  00F3               	movwf	setRF_Learn@command
  6389                           
  6390                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6391  19ED  0873               	movf	setRF_Learn@command,w
  6392  19EE  3A01               	xorlw	1
  6393  19EF  3000               	movlw	0
  6394  19F0  1903               	skipnz
  6395  19F1  3001               	movlw	1
  6396  19F2  00F2               	movwf	??_setRF_Learn
  6397  19F3  0EF2               	swapf	??_setRF_Learn,f
  6398  19F4  0DF2               	rlf	??_setRF_Learn,f
  6399  19F5  0DF2               	rlf	??_setRF_Learn,f
  6400  19F6  0021               	movlb	1	; select bank1
  6401  19F7  0840               	movf	_RF1^(0+128),w
  6402  19F8  0672               	xorwf	??_setRF_Learn,w
  6403  19F9  39BF               	andlw	-65
  6404  19FA  0672               	xorwf	??_setRF_Learn,w
  6405  19FB  00C0               	movwf	_RF1^(0+128)
  6406  19FC  0008               	return
  6407  19FD                     __end_of_setRF_Learn:	
  6408                           
  6409                           	psect	text16
  6410  1D99                     __ptext16:	
  6411 ;; *************** function _setDimmerLights_DimmingOn *****************
  6412 ;; Defined at:
  6413 ;;		line 846 in file "../src/Dimmer_B1.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  sw              1    wreg     unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  sw              1    4[COMMON] unsigned char 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;		None               void
  6420 ;; Registers used:
  6421 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;Total ram usage:        1 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    4
  6434 ;; This function calls:
  6435 ;;		_DimmerLights_SelectPointer
  6436 ;; This function is called by:
  6437 ;;		_setSw_Main
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function _setDimmerLights_DimmingOn
  6443  1D99                     _setDimmerLights_DimmingOn:	
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6447                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6448  1D99  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6449                           
  6450                           ;Dimmer_B1.c: 852: DimmerLights_SelectPointer(sw);
  6451  1D9A  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6452  1D9B  319A  2238  319D   	fcall	_DimmerLights_SelectPointer
  6453                           
  6454                           ;Dimmer_B1.c: 853: if (DimmerLights->Trigger == 0) {
  6455  1D9E  0020               	movlb	0	; select bank0
  6456  1D9F  086C               	movf	_DimmerLights,w
  6457  1DA0  0086               	movwf	6
  6458  1DA1  3001               	movlw	1	; select bank2/3
  6459  1DA2  0087               	movwf	7
  6460  1DA3  1881               	btfsc	1,1
  6461  1DA4  0008               	return
  6462                           
  6463                           ;Dimmer_B1.c: 854: if (DimmerLights->SwFlag == 1) {
  6464  1DA5  086C               	movf	_DimmerLights,w
  6465  1DA6  0086               	movwf	6
  6466  1DA7  3001               	movlw	1	; select bank2/3
  6467  1DA8  0087               	movwf	7
  6468  1DA9  1C01               	btfss	1,0
  6469  1DAA  0008               	return
  6470                           
  6471                           ;Dimmer_B1.c: 855: DimmerLights->Status = 1;
  6472  1DAB  0A6C               	incf	_DimmerLights,w
  6473  1DAC  0086               	movwf	6
  6474  1DAD  3001               	movlw	1	; select bank2/3
  6475  1DAE  0087               	movwf	7
  6476  1DAF  1401               	bsf	1,0
  6477                           
  6478                           ;Dimmer_B1.c: 857: DimmerLights->DimmingSwFlag = 1;
  6479  1DB0  086C               	movf	_DimmerLights,w
  6480  1DB1  0086               	movwf	6
  6481  1DB2  3001               	movlw	1	; select bank2/3
  6482  1DB3  0087               	movwf	7
  6483  1DB4  1581               	bsf	1,3
  6484                           
  6485                           ;Dimmer_B1.c: 858: DimmerLights->DimmingTrigger = 1;
  6486  1DB5  086C               	movf	_DimmerLights,w
  6487  1DB6  0086               	movwf	6
  6488  1DB7  3001               	movlw	1	; select bank2/3
  6489  1DB8  0087               	movwf	7
  6490  1DB9  1601               	bsf	1,4
  6491                           
  6492                           ;Dimmer_B1.c: 859: DimmerLights->DimmingSwitch = 1;
  6493  1DBA  086C               	movf	_DimmerLights,w
  6494  1DBB  0086               	movwf	6
  6495  1DBC  3001               	movlw	1	; select bank2/3
  6496  1DBD  0087               	movwf	7
  6497  1DBE  1681               	bsf	1,5
  6498  1DBF  0008               	return
  6499  1DC0                     __end_of_setDimmerLights_DimmingOn:	
  6500                           
  6501                           	psect	text17
  6502  1C65                     __ptext17:	
  6503 ;; *************** function _getSw_KeyStatus *****************
  6504 ;; Defined at:
  6505 ;;		line 238 in file "../src/Switch_B1.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  sw              1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  sw              1    6[COMMON] unsigned char 
  6510 ;;  status          1    5[COMMON] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      unsigned char 
  6513 ;; Registers used:
  6514 ;;		wreg, status,2
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;Total ram usage:        5 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    3
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_setSw_Main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _getSw_KeyStatus
  6536  1C65                     _getSw_KeyStatus:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6540                           ;getSw_KeyStatus@sw stored from wreg
  6541  1C65  00F6               	movwf	getSw_KeyStatus@sw
  6542                           
  6543                           ;Switch_B1.c: 239: char status = 0;
  6544  1C66  01F5               	clrf	getSw_KeyStatus@status
  6545                           
  6546                           ;Switch_B1.c: 266: if (sw == 1) {
  6547  1C67  0876               	movf	getSw_KeyStatus@sw,w
  6548  1C68  3A01               	xorlw	1
  6549  1C69  1D03               	skipz
  6550  1C6A  2C74               	goto	l8171
  6551                           
  6552                           ;Switch_B1.c: 267: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6553  1C6B  01F3               	clrf	_getSw_KeyStatus$7443
  6554  1C6C  0AF3               	incf	_getSw_KeyStatus$7443,f
  6555  1C6D  0020               	movlb	0	; select bank0
  6556  1C6E  1F0C               	btfss	12,6	;volatile
  6557  1C6F  1A0C               	btfsc	12,4	;volatile
  6558  1C70  2C72               	goto	l8169
  6559  1C71  01F3               	clrf	_getSw_KeyStatus$7443
  6560  1C72                     l8169:	
  6561  1C72  0873               	movf	_getSw_KeyStatus$7443,w
  6562  1C73  2C80               	goto	L3
  6563  1C74                     l8171:	
  6564                           ;Switch_B1.c: 268: } else if (sw == 2) {
  6565                           
  6566  1C74  0876               	movf	getSw_KeyStatus@sw,w
  6567  1C75  3A02               	xorlw	2
  6568  1C76  1D03               	skipz
  6569  1C77  2C83               	goto	l8181
  6570                           
  6571                           ;Switch_B1.c: 269: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6572  1C78  01F4               	clrf	_getSw_KeyStatus$7444
  6573  1C79  0AF4               	incf	_getSw_KeyStatus$7444,f
  6574  1C7A  0020               	movlb	0	; select bank0
  6575  1C7B  1C0C               	btfss	12,0	;volatile
  6576  1C7C  188D               	btfsc	13,1	;volatile
  6577  1C7D  2C7F               	goto	l8179
  6578  1C7E  01F4               	clrf	_getSw_KeyStatus$7444
  6579  1C7F                     l8179:	
  6580  1C7F  0874               	movf	_getSw_KeyStatus$7444,w
  6581  1C80                     L3:	
  6582  1C80  00F2               	movwf	??_getSw_KeyStatus
  6583  1C81  0872               	movf	??_getSw_KeyStatus,w
  6584  1C82  00F5               	movwf	getSw_KeyStatus@status
  6585  1C83                     l8181:	
  6586                           
  6587                           ;Switch_B1.c: 270: }
  6588                           ;Switch_B1.c: 283: return status;
  6589  1C83  0875               	movf	getSw_KeyStatus@status,w
  6590  1C84  0008               	return
  6591  1C85                     __end_of_getSw_KeyStatus:	
  6592                           
  6593                           	psect	text18
  6594  1ACB                     __ptext18:	
  6595 ;; *************** function _SwPointSelect *****************
  6596 ;; Defined at:
  6597 ;;		line 25 in file "../src/Switch_B1.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;  sw              1    wreg     unsigned char 
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  sw              1    3[COMMON] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;		None               void
  6604 ;; Registers used:
  6605 ;;		wreg
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:        2 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    3
  6618 ;; This function calls:
  6619 ;;		Nothing
  6620 ;; This function is called by:
  6621 ;;		_setSw_Main
  6622 ;; This function uses a non-reentrant model
  6623 ;;
  6624                           
  6625                           
  6626                           ;psect for function _SwPointSelect
  6627  1ACB                     _SwPointSelect:	
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _SwPointSelect: [wreg]
  6631                           ;SwPointSelect@sw stored from wreg
  6632  1ACB  00F3               	movwf	SwPointSelect@sw
  6633                           
  6634                           ;Switch_B1.c: 28: if (sw == 1) {
  6635  1ACC  0873               	movf	SwPointSelect@sw,w
  6636  1ACD  3A01               	xorlw	1
  6637  1ACE  1D03               	skipz
  6638  1ACF  2AD6               	goto	l8155
  6639                           
  6640                           ;Switch_B1.c: 29: Sw = &Sw1;
  6641  1AD0  30D0               	movlw	_Sw1& (0+255)
  6642  1AD1  00F2               	movwf	??_SwPointSelect
  6643  1AD2  0872               	movf	??_SwPointSelect,w
  6644  1AD3  0020               	movlb	0	; select bank0
  6645  1AD4  00ED               	movwf	_Sw
  6646                           
  6647                           ;Switch_B1.c: 30: }
  6648  1AD5  0008               	return
  6649  1AD6                     l8155:	
  6650                           
  6651                           ;Switch_B1.c: 33: else if (sw == 2) {
  6652  1AD6  0873               	movf	SwPointSelect@sw,w
  6653  1AD7  3A02               	xorlw	2
  6654  1AD8  1D03               	skipz
  6655  1AD9  0008               	return
  6656                           
  6657                           ;Switch_B1.c: 34: Sw = &Sw2;
  6658  1ADA  30D9               	movlw	_Sw2& (0+255)
  6659  1ADB  00F2               	movwf	??_SwPointSelect
  6660  1ADC  0872               	movf	??_SwPointSelect,w
  6661  1ADD  0020               	movlb	0	; select bank0
  6662  1ADE  00ED               	movwf	_Sw
  6663  1ADF  0008               	return
  6664  1AE0                     __end_of_SwPointSelect:	
  6665                           
  6666                           	psect	text19
  6667  1AB6                     __ptext19:	
  6668 ;; *************** function _TouchPower *****************
  6669 ;; Defined at:
  6670 ;;		line 10 in file "../src/Switch_B1.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;		None
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;		None               void
  6677 ;; Registers used:
  6678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;Total ram usage:        0 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		_Timeout_Counter
  6693 ;;		_set_TimeoutCleared
  6694 ;; This function is called by:
  6695 ;;		_Switch_Main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _TouchPower
  6701  1AB6                     _TouchPower:	
  6702                           
  6703                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6704                           
  6705                           ;incstack = 0
  6706                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6707  1AB6  0021               	movlb	1	; select bank1
  6708  1AB7  1C4F               	btfss	_myMain^(0+128),0
  6709  1AB8  0008               	return
  6710                           
  6711                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6712  1AB9  0020               	movlb	0	; select bank0
  6713  1ABA  1A8E               	btfsc	14,5	;volatile
  6714  1ABB  0008               	return
  6715  1ABC  2AC2               	goto	l8901
  6716  1ABD                     l2901:	
  6717                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6718                           
  6719                           
  6720                           ;Switch_B1.c: 14: RC5 = 1;
  6721  1ABD  0020               	movlb	0	; select bank0
  6722  1ABE  168E               	bsf	14,5	;volatile
  6723                           
  6724                           ;Switch_B1.c: 15: Timeout_Counter();
  6725  1ABF  319A  22A1  319A   	fcall	_Timeout_Counter
  6726  1AC2                     l8901:	
  6727  1AC2  0020               	movlb	0	; select bank0
  6728  1AC3  1A8E               	btfsc	14,5	;volatile
  6729  1AC4  2AC8               	goto	l8905
  6730  1AC5  0021               	movlb	1	; select bank1
  6731  1AC6  1D59               	btfss	(_myMain^(0+128)+10),2
  6732  1AC7  2ABD               	goto	l2901
  6733  1AC8                     l8905:	
  6734                           
  6735                           ;Switch_B1.c: 16: }
  6736                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6737  1AC8  31A7  27DA         	fcall	_set_TimeoutCleared
  6738  1ACA  0008               	return
  6739  1ACB                     __end_of_TouchPower:	
  6740                           
  6741                           	psect	text20
  6742  27DA                     __ptext20:	
  6743 ;; *************** function _set_TimeoutCleared *****************
  6744 ;; Defined at:
  6745 ;;		line 286 in file "../src/Main_B1.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		status,2
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    3
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_getAD
  6770 ;;		_TouchPower
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           
  6775                           ;psect for function _set_TimeoutCleared
  6776  27DA                     _set_TimeoutCleared:	
  6777                           
  6778                           ;Main_B1.c: 287: myMain.Timeout = 0;
  6779                           
  6780                           ;incstack = 0
  6781                           ; Regs used in _set_TimeoutCleared: [status,2]
  6782  27DA  0021               	movlb	1	; select bank1
  6783  27DB  1159               	bcf	(_myMain^(0+128)+10),2
  6784                           
  6785                           ;Main_B1.c: 288: myMain.Timeout_Counter = 0;
  6786  27DC  01DA               	clrf	(_myMain^(0+128)+11)
  6787  27DD  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6788  27DE  0008               	return
  6789  27DF                     __end_of_set_TimeoutCleared:	
  6790                           
  6791                           	psect	text21
  6792  1AA1                     __ptext21:	
  6793 ;; *************** function _Timeout_Counter *****************
  6794 ;; Defined at:
  6795 ;;		line 277 in file "../src/Main_B1.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;		None
  6800 ;; Return value:  Size  Location     Type
  6801 ;;		None               void
  6802 ;; Registers used:
  6803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:        0 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    3
  6816 ;; This function calls:
  6817 ;;		Nothing
  6818 ;; This function is called by:
  6819 ;;		_getAD
  6820 ;;		_TouchPower
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _Timeout_Counter
  6826  1AA1                     _Timeout_Counter:	
  6827                           
  6828                           ;Main_B1.c: 278: myMain.Timeout_Counter++;
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6832  1AA1  3001               	movlw	1
  6833  1AA2  0021               	movlb	1	; select bank1
  6834  1AA3  07DA               	addwf	(_myMain^(0+128)+11),f
  6835  1AA4  3000               	movlw	0
  6836  1AA5  3DDB               	addwfc	((_myMain+1)^(0+128)+11),f
  6837                           
  6838                           ;Main_B1.c: 279: if (myMain.Timeout_Counter == 25000) {
  6839  1AA6  300B               	movlw	11
  6840  1AA7  3ECF               	addlw	_myMain& (0+255)
  6841  1AA8  0086               	movwf	6
  6842  1AA9  0187               	clrf	7
  6843  1AAA  3F40               	moviw [0]fsr1
  6844  1AAB  3AA8               	xorlw	168
  6845  1AAC  1D03               	skipz
  6846  1AAD  2AB0               	goto	u7565
  6847  1AAE  3F41               	moviw [1]fsr1
  6848  1AAF  3A61               	xorlw	97
  6849  1AB0                     u7565:	
  6850  1AB0  1D03               	skipz
  6851  1AB1  0008               	return
  6852                           
  6853                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
  6854  1AB2  01DA               	clrf	(_myMain^(0+128)+11)
  6855  1AB3  01DB               	clrf	((_myMain+1)^(0+128)+11)
  6856                           
  6857                           ;Main_B1.c: 281: myMain.Timeout = 1;
  6858  1AB4  1559               	bsf	(_myMain^(0+128)+10),2
  6859  1AB5  0008               	return
  6860  1AB6                     __end_of_Timeout_Counter:	
  6861                           
  6862                           	psect	text22
  6863  1831                     __ptext22:	
  6864 ;; *************** function _Switch_Initialization *****************
  6865 ;; Defined at:
  6866 ;;		line 46 in file "../src/Switch_B1.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    6
  6887 ;; This function calls:
  6888 ;;		_setSw_Initialization
  6889 ;; This function is called by:
  6890 ;;		_main
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           
  6895                           ;psect for function _Switch_Initialization
  6896  1831                     _Switch_Initialization:	
  6897                           
  6898                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6902  1831  3001               	movlw	1
  6903  1832  3198  2012  3198   	fcall	_setSw_Initialization
  6904                           
  6905                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6906  1835  3002               	movlw	2
  6907  1836  3198  2012         	fcall	_setSw_Initialization
  6908  1838  0008               	return
  6909  1839                     __end_of_Switch_Initialization:	
  6910                           
  6911                           	psect	text23
  6912  1812                     __ptext23:	
  6913 ;; *************** function _setSw_Initialization *****************
  6914 ;; Defined at:
  6915 ;;		line 66 in file "../src/Switch_B1.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  sw              1    wreg     unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;  sw              1    6[COMMON] unsigned char 
  6920 ;; Return value:  Size  Location     Type
  6921 ;;		None               void
  6922 ;; Registers used:
  6923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;Total ram usage:        1 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    5
  6936 ;; This function calls:
  6937 ;;		_setLED
  6938 ;; This function is called by:
  6939 ;;		_Switch_Initialization
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           
  6944                           ;psect for function _setSw_Initialization
  6945  1812                     _setSw_Initialization:	
  6946                           
  6947                           ;incstack = 0
  6948                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6949                           ;setSw_Initialization@sw stored from wreg
  6950  1812  00F6               	movwf	setSw_Initialization@sw
  6951                           
  6952                           ;Switch_B1.c: 68: setLED(sw, 1);
  6953  1813  01F4               	clrf	setLED@command
  6954  1814  0AF4               	incf	setLED@command,f
  6955  1815  0876               	movf	setSw_Initialization@sw,w
  6956  1816  3194  24ED         	fcall	_setLED
  6957  1818  0008               	return
  6958  1819                     __end_of_setSw_Initialization:	
  6959                           
  6960                           	psect	text24
  6961  27BC                     __ptext24:	
  6962 ;; *************** function _RF_Main *****************
  6963 ;; Defined at:
  6964 ;;		line 26 in file "../src/RF_Control_B1.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:   10
  6985 ;; This function calls:
  6986 ;;		_setRF_Main
  6987 ;; This function is called by:
  6988 ;;		_main
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           
  6993                           ;psect for function _RF_Main
  6994  27BC                     _RF_Main:	
  6995                           
  6996                           ;RF_Control_B1.c: 28: setRF_Main();
  6997                           
  6998                           ;incstack = 0
  6999                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7000  27BC  3186  26C5         	fcall	_setRF_Main
  7001  27BE  0008               	return
  7002  27BF                     __end_of_RF_Main:	
  7003                           
  7004                           	psect	text25
  7005  06C5                     __ptext25:	
  7006 ;; *************** function _setRF_Main *****************
  7007 ;; Defined at:
  7008 ;;		line 53 in file "../src/RF_Control_B1.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  error           1   75[BANK0 ] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;		None               void
  7015 ;; Registers used:
  7016 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        2 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    9
  7029 ;; This function calls:
  7030 ;;		_CC2500_PowerOnInitial
  7031 ;;		_CC2500_RxData
  7032 ;;		_CC2500_TxData
  7033 ;;		_CC2500_WriteCommand
  7034 ;;		_RF_RxDisable
  7035 ;;		___lwdiv
  7036 ;;		_getBuz_GO
  7037 ;;		_getRF_KeyStatus
  7038 ;;		_getRxData
  7039 ;;		_setData
  7040 ;; This function is called by:
  7041 ;;		_RF_Main
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _setRF_Main
  7047  06C5                     _setRF_Main:	
  7048                           
  7049                           ;RF_Control_B1.c: 54: char error = 0;
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7053  06C5  0020               	movlb	0	; select bank0
  7054  06C6  01EB               	clrf	setRF_Main@error
  7055                           
  7056                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7057  06C7  0021               	movlb	1	; select bank1
  7058  06C8  1C40               	btfss	_RF1^(0+128),0
  7059  06C9  2F80               	goto	l2479
  7060                           
  7061                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7062  06CA  3199  2178  3186   	fcall	_getBuz_GO
  7063  06CD  0873               	movf	?_getBuz_GO+1,w
  7064  06CE  0472               	iorwf	?_getBuz_GO,w
  7065  06CF  1D03               	skipz
  7066  06D0  2F65               	goto	l10849
  7067                           
  7068                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7069  06D1  3199  21DB  3186   	fcall	_getRF_KeyStatus
  7070  06D4  3A01               	xorlw	1
  7071  06D5  3000               	movlw	0
  7072  06D6  1903               	skipnz
  7073  06D7  3001               	movlw	1
  7074  06D8  0020               	movlb	0	; select bank0
  7075  06D9  00EA               	movwf	??_setRF_Main
  7076  06DA  0CEA               	rrf	??_setRF_Main,f
  7077  06DB  0CEA               	rrf	??_setRF_Main,f
  7078  06DC  0021               	movlb	1	; select bank1
  7079  06DD  0840               	movf	_RF1^(0+128),w
  7080  06DE  0020               	movlb	0	; select bank0
  7081  06DF  066A               	xorwf	??_setRF_Main,w
  7082  06E0  397F               	andlw	-129
  7083  06E1  066A               	xorwf	??_setRF_Main,w
  7084  06E2  0021               	movlb	1	; select bank1
  7085  06E3  00C0               	movwf	_RF1^(0+128)
  7086                           
  7087                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7088  06E4  1FC0               	btfss	_RF1^(0+128),7
  7089  06E5  2EE8               	goto	l2483
  7090  06E6  1F40               	btfss	_RF1^(0+128),6
  7091  06E7  2F65               	goto	l10849
  7092  06E8                     l2483:	
  7093                           
  7094                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7095  06E8  1D40               	btfss	_RF1^(0+128),2
  7096  06E9  2F2C               	goto	l2484
  7097                           
  7098                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7099  06EA  1B40               	btfsc	_RF1^(0+128),6
  7100  06EB  2F27               	goto	l10821
  7101                           
  7102                           ;RF_Control_B1.c: 68: RF1.Count++;
  7103  06EC  3001               	movlw	1
  7104  06ED  07C3               	addwf	(_RF1^(0+128)+3),f
  7105  06EE  3000               	movlw	0
  7106  06EF  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7107                           
  7108                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7109  06F0  3014               	movlw	20
  7110  06F1  00F2               	movwf	___lwdiv@divisor
  7111  06F2  3000               	movlw	0
  7112  06F3  00F3               	movwf	___lwdiv@divisor+1
  7113  06F4  0849               	movf	((_RF1+1)^(0+128)+8),w
  7114  06F5  01F5               	clrf	___lwdiv@dividend+1
  7115  06F6  07F5               	addwf	___lwdiv@dividend+1,f
  7116  06F7  0848               	movf	(_RF1^(0+128)+8),w
  7117  06F8  01F4               	clrf	___lwdiv@dividend
  7118  06F9  07F4               	addwf	___lwdiv@dividend,f
  7119  06FA  319F  275D  3186   	fcall	___lwdiv
  7120  06FD  0873               	movf	?___lwdiv+1,w
  7121  06FE  0021               	movlb	1	; select bank1
  7122  06FF  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7123  0700  1D03               	skipz
  7124  0701  2F04               	goto	u12225
  7125  0702  0872               	movf	?___lwdiv,w
  7126  0703  0243               	subwf	(_RF1^(0+128)+3),w
  7127  0704                     u12225:	
  7128  0704  1C03               	skipc
  7129  0705  2F65               	goto	l10849
  7130                           
  7131                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7132  0706  3014               	movlw	20
  7133  0707  00F2               	movwf	___lwdiv@divisor
  7134  0708  3000               	movlw	0
  7135  0709  00F3               	movwf	___lwdiv@divisor+1
  7136  070A  0849               	movf	((_RF1+1)^(0+128)+8),w
  7137  070B  01F5               	clrf	___lwdiv@dividend+1
  7138  070C  07F5               	addwf	___lwdiv@dividend+1,f
  7139  070D  0848               	movf	(_RF1^(0+128)+8),w
  7140  070E  01F4               	clrf	___lwdiv@dividend
  7141  070F  07F4               	addwf	___lwdiv@dividend,f
  7142  0710  319F  275D  3186   	fcall	___lwdiv
  7143  0713  0873               	movf	?___lwdiv+1,w
  7144  0714  0021               	movlb	1	; select bank1
  7145  0715  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7146  0716  07C4               	addwf	((_RF1+1)^(0+128)+3),f
  7147  0717  0872               	movf	?___lwdiv,w
  7148  0718  01C3               	clrf	(_RF1^(0+128)+3)
  7149  0719  07C3               	addwf	(_RF1^(0+128)+3),f
  7150                           
  7151                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7152  071A  1140               	bcf	_RF1^(0+128),2
  7153                           
  7154                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7155  071B  01CB               	clrf	(_RF1^(0+128)+11)
  7156  071C  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7157                           
  7158                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7159  071D  3198  2029  3186   	fcall	_RF_RxDisable
  7160                           
  7161                           ;RF_Control_B1.c: 75: setData();
  7162  0720  3192  2262  3186   	fcall	_setData
  7163                           
  7164                           ;RF_Control_B1.c: 76: CC2500_TxData();
  7165  0723  3188  2091  3186   	fcall	_CC2500_TxData
  7166                           
  7167                           ;RF_Control_B1.c: 78: }
  7168                           ;RF_Control_B1.c: 79: } else {
  7169  0726  2F65               	goto	l10849
  7170  0727                     l10821:	
  7171                           
  7172                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7173  0727  0021               	movlb	1	; select bank1
  7174  0728  01C3               	clrf	(_RF1^(0+128)+3)
  7175  0729  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7176                           
  7177                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  7178  072A  1140               	bcf	_RF1^(0+128),2
  7179                           
  7180                           ;RF_Control_B1.c: 82: }
  7181                           ;RF_Control_B1.c: 83: } else {
  7182  072B  2F65               	goto	l10849
  7183  072C                     l2484:	
  7184                           
  7185                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  7186  072C  1DC0               	btfss	_RF1^(0+128),3
  7187  072D  2F3B               	goto	l10835
  7188                           
  7189                           ;RF_Control_B1.c: 86: CC2500_RxData();
  7190  072E  3196  260B  3186   	fcall	_CC2500_RxData
  7191                           
  7192                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  7193  0731  0021               	movlb	1	; select bank1
  7194  0732  1CC0               	btfss	_RF1^(0+128),1
  7195  0733  2F65               	goto	l10849
  7196                           
  7197                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7198  0734  10C0               	bcf	_RF1^(0+128),1
  7199                           
  7200                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  7201  0735  01CB               	clrf	(_RF1^(0+128)+11)
  7202  0736  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7203                           
  7204                           ;RF_Control_B1.c: 98: getRxData();
  7205  0737  3195  254C  3186   	fcall	_getRxData
  7206                           
  7207                           ;RF_Control_B1.c: 101: }
  7208                           ;RF_Control_B1.c: 102: } else {
  7209  073A  2F65               	goto	l10849
  7210  073B                     l10835:	
  7211                           
  7212                           ;RF_Control_B1.c: 103: RF1.Count++;
  7213  073B  3001               	movlw	1
  7214  073C  0021               	movlb	1	; select bank1
  7215  073D  07C3               	addwf	(_RF1^(0+128)+3),f
  7216  073E  3000               	movlw	0
  7217  073F  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7218                           
  7219                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  7220  0740  3014               	movlw	20
  7221  0741  00F2               	movwf	___lwdiv@divisor
  7222  0742  3000               	movlw	0
  7223  0743  00F3               	movwf	___lwdiv@divisor+1
  7224  0744  0849               	movf	((_RF1+1)^(0+128)+8),w
  7225  0745  01F5               	clrf	___lwdiv@dividend+1
  7226  0746  07F5               	addwf	___lwdiv@dividend+1,f
  7227  0747  0848               	movf	(_RF1^(0+128)+8),w
  7228  0748  01F4               	clrf	___lwdiv@dividend
  7229  0749  07F4               	addwf	___lwdiv@dividend,f
  7230  074A  319F  275D  3186   	fcall	___lwdiv
  7231  074D  0873               	movf	?___lwdiv+1,w
  7232  074E  0021               	movlb	1	; select bank1
  7233  074F  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7234  0750  1D03               	skipz
  7235  0751  2F54               	goto	u12255
  7236  0752  0872               	movf	?___lwdiv,w
  7237  0753  0243               	subwf	(_RF1^(0+128)+3),w
  7238  0754                     u12255:	
  7239  0754  1C03               	skipc
  7240  0755  2F65               	goto	l10849
  7241                           
  7242                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  7243  0756  01C3               	clrf	(_RF1^(0+128)+3)
  7244  0757  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7245                           
  7246                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  7247  0758  15C0               	bsf	_RF1^(0+128),3
  7248                           
  7249                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  7250  0759  3036               	movlw	54
  7251  075A  319B  236E  3186   	fcall	_CC2500_WriteCommand
  7252                           
  7253                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  7254  075D  303A               	movlw	58
  7255  075E  319B  236E  3186   	fcall	_CC2500_WriteCommand
  7256                           
  7257                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  7258  0761  3034               	movlw	52
  7259  0762  319B  236E  3186   	fcall	_CC2500_WriteCommand
  7260  0765                     l10849:	
  7261                           
  7262                           ;RF_Control_B1.c: 112: }
  7263                           ;RF_Control_B1.c: 113: }
  7264                           ;RF_Control_B1.c: 114: }
  7265                           ;RF_Control_B1.c: 115: }
  7266                           ;RF_Control_B1.c: 116: }
  7267                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  7268  0765  3001               	movlw	1
  7269  0766  0021               	movlb	1	; select bank1
  7270  0767  07CB               	addwf	(_RF1^(0+128)+11),f
  7271  0768  3000               	movlw	0
  7272  0769  3DCC               	addwfc	((_RF1+1)^(0+128)+11),f
  7273                           
  7274                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  7275  076A  300B               	movlw	11
  7276  076B  024C               	subwf	((_RF1+1)^(0+128)+11),w
  7277  076C  30B9               	movlw	185
  7278  076D  1903               	skipnz
  7279  076E  024B               	subwf	(_RF1^(0+128)+11),w
  7280  076F  1C03               	skipc
  7281  0770  2F79               	goto	l10861
  7282                           
  7283                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  7284  0771  01CB               	clrf	(_RF1^(0+128)+11)
  7285  0772  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7286                           
  7287                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  7288  0773  11C0               	bcf	_RF1^(0+128),3
  7289                           
  7290                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  7291  0774  10C0               	bcf	_RF1^(0+128),1
  7292                           
  7293                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  7294  0775  3036               	movlw	54
  7295  0776  319B  236E  3186   	fcall	_CC2500_WriteCommand
  7296  0779                     l10861:	
  7297                           
  7298                           ;RF_Control_B1.c: 126: }
  7299                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  7300  0779  0021               	movlb	1	; select bank1
  7301  077A  1F41               	btfss	(_RF1^(0+128)+1),6
  7302  077B  0008               	return
  7303                           
  7304                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  7305  077C  1341               	bcf	(_RF1^(0+128)+1),6
  7306                           
  7307                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  7308  077D  319A  228C         	fcall	_CC2500_PowerOnInitial
  7309                           
  7310                           ;RF_Control_B1.c: 131: }
  7311                           ;RF_Control_B1.c: 133: } else {
  7312  077F  0008               	return
  7313  0780                     l2479:	
  7314                           
  7315                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  7316  0780  1C4F               	btfss	_myMain^(0+128),0
  7317  0781  0008               	return
  7318                           
  7319                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  7320  0782  1440               	bsf	_RF1^(0+128),0
  7321  0783  0008               	return
  7322  0784                     __end_of_setRF_Main:	
  7323                           
  7324                           	psect	text26
  7325  1262                     __ptext26:	
  7326 ;; *************** function _setData *****************
  7327 ;; Defined at:
  7328 ;;		line 188 in file "../src/RF_Control_B1.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;		None
  7331 ;; Auto vars:     Size  Location     Type
  7332 ;;		None
  7333 ;; Return value:  Size  Location     Type
  7334 ;;		None               void
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;Total ram usage:        1 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    3
  7349 ;; This function calls:
  7350 ;;		Nothing
  7351 ;; This function is called by:
  7352 ;;		_setRF_Main
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           
  7357                           ;psect for function _setData
  7358  1262                     _setData:	
  7359                           
  7360                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  7364  1262  3063               	movlw	99
  7365  1263  00F2               	movwf	??_setData
  7366  1264  0872               	movf	??_setData,w
  7367  1265  0023               	movlb	3	; select bank3
  7368  1266  00A0               	movwf	_RF_Data^(0+384)
  7369                           
  7370                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  7371  1267  3002               	movlw	2
  7372  1268  00F2               	movwf	??_setData
  7373  1269  0872               	movf	??_setData,w
  7374  126A  00A1               	movwf	(_RF_Data^(0+384)+1)
  7375                           
  7376                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  7377  126B  01A2               	clrf	(_RF_Data^(0+384)+2)
  7378                           
  7379                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  7380  126C  01A3               	clrf	(_RF_Data^(0+384)+3)
  7381                           
  7382                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  7383  126D  01A4               	clrf	(_RF_Data^(0+384)+4)
  7384                           
  7385                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  7386  126E  01A5               	clrf	(_RF_Data^(0+384)+5)
  7387                           
  7388                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  7389  126F  01A6               	clrf	(_RF_Data^(0+384)+6)
  7390                           
  7391                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  7392  1270  01A7               	clrf	(_RF_Data^(0+384)+7)
  7393                           
  7394                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  7395  1271  01A8               	clrf	(_RF_Data^(0+384)+8)
  7396                           
  7397                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  7398  1272  087B               	movf	_product,w
  7399  1273  0086               	movwf	6
  7400  1274  3002               	movlw	2	; select bank4/5
  7401  1275  0087               	movwf	7
  7402  1276  3002               	movlw	2	; select bank4/5
  7403  1277  3F49               	moviw [9]fsr1
  7404  1278  00A9               	movwf	(_RF_Data^(0+384)+9)
  7405                           
  7406                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  7407  1279  01AA               	clrf	(_RF_Data^(0+384)+10)
  7408                           
  7409                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  7410  127A  087B               	movf	_product,w
  7411  127B  0086               	movwf	6
  7412  127C  3002               	movlw	2	; select bank4/5
  7413  127D  0087               	movwf	7
  7414  127E  3002               	movlw	2	; select bank4/5
  7415  127F  3F4B               	moviw [11]fsr1
  7416  1280  00AB               	movwf	(_RF_Data^(0+384)+11)
  7417                           
  7418                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  7419  1281  087B               	movf	_product,w
  7420  1282  0086               	movwf	6
  7421  1283  3002               	movlw	2	; select bank4/5
  7422  1284  0087               	movwf	7
  7423  1285  3002               	movlw	2	; select bank4/5
  7424  1286  3F4C               	moviw [12]fsr1
  7425  1287  00AC               	movwf	(_RF_Data^(0+384)+12)
  7426                           
  7427                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  7428  1288  087B               	movf	_product,w
  7429  1289  0086               	movwf	6
  7430  128A  3002               	movlw	2	; select bank4/5
  7431  128B  0087               	movwf	7
  7432  128C  3002               	movlw	2	; select bank4/5
  7433  128D  3F4D               	moviw [13]fsr1
  7434  128E  00AD               	movwf	(_RF_Data^(0+384)+13)
  7435                           
  7436                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  7437  128F  087B               	movf	_product,w
  7438  1290  0086               	movwf	6
  7439  1291  3002               	movlw	2	; select bank4/5
  7440  1292  0087               	movwf	7
  7441  1293  3002               	movlw	2	; select bank4/5
  7442  1294  3F4E               	moviw [14]fsr1
  7443  1295  00AE               	movwf	(_RF_Data^(0+384)+14)
  7444                           
  7445                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  7446  1296  087B               	movf	_product,w
  7447  1297  0086               	movwf	6
  7448  1298  3002               	movlw	2	; select bank4/5
  7449  1299  0087               	movwf	7
  7450  129A  3002               	movlw	2	; select bank4/5
  7451  129B  3F4F               	moviw [15]fsr1
  7452  129C  00AF               	movwf	(_RF_Data^(0+384)+15)
  7453                           
  7454                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  7455  129D  01B0               	clrf	(_RF_Data^(0+384)+16)
  7456                           
  7457                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  7458  129E  01B1               	clrf	(_RF_Data^(0+384)+17)
  7459                           
  7460                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  7461  129F  01B2               	clrf	(_RF_Data^(0+384)+18)
  7462                           
  7463                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  7464  12A0  01B3               	clrf	(_RF_Data^(0+384)+19)
  7465                           
  7466                           ;RF_Control_B1.c: 233: RF_Data[20] = 210;
  7467  12A1  30D2               	movlw	210
  7468  12A2  00F2               	movwf	??_setData
  7469  12A3  0872               	movf	??_setData,w
  7470  12A4  00B4               	movwf	(_RF_Data^(0+384)+20)
  7471  12A5  0008               	return
  7472  12A6                     __end_of_setData:	
  7473                           
  7474                           	psect	text27
  7475  154C                     __ptext27:	
  7476 ;; *************** function _getRxData *****************
  7477 ;; Defined at:
  7478 ;;		line 256 in file "../src/RF_Control_B1.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;		None
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  error           1   73[BANK0 ] unsigned char 
  7483 ;; Return value:  Size  Location     Type
  7484 ;;		None               void
  7485 ;; Registers used:
  7486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;Total ram usage:        2 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    8
  7499 ;; This function calls:
  7500 ;;		_getMain_All_Error_Status
  7501 ;;		_setControl_Lights_Table
  7502 ;;		_setLog_Code
  7503 ;;		_setTxData
  7504 ;; This function is called by:
  7505 ;;		_setRF_Main
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function _getRxData
  7511  154C                     _getRxData:	
  7512                           
  7513                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7517  154C  0023               	movlb	3	; select bank3
  7518  154D  0820               	movf	_RF_Data^(0+384),w
  7519  154E  3AAA               	xorlw	170
  7520  154F  1D03               	skipz
  7521  1550  2D62               	goto	l10447
  7522  1551  0821               	movf	(_RF_Data^(0+384)+1),w
  7523  1552  3A01               	xorlw	1
  7524  1553  1D03               	skipz
  7525  1554  2D62               	goto	l10447
  7526                           
  7527                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  7528  1555  3055               	movlw	85
  7529  1556  0020               	movlb	0	; select bank0
  7530  1557  00E8               	movwf	??_getRxData
  7531  1558  087B               	movf	_product,w
  7532  1559  3E02               	addlw	2
  7533  155A  0086               	movwf	6
  7534  155B  3002               	movlw	2	; select bank4/5
  7535  155C  0087               	movwf	7
  7536  155D  0868               	movf	??_getRxData,w
  7537  155E  0081               	movwf	1
  7538                           
  7539                           ;RF_Control_B1.c: 260: setTxData();
  7540  155F  31A7  27F2         	fcall	_setTxData
  7541                           
  7542                           ;RF_Control_B1.c: 264: } else {
  7543  1561  0008               	return
  7544  1562                     l10447:	
  7545                           
  7546                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  7547  1562  3000               	movlw	0
  7548  1563  319E  263C  3195   	fcall	_getMain_All_Error_Status
  7549  1566  0020               	movlb	0	; select bank0
  7550  1567  00E8               	movwf	??_getRxData
  7551  1568  0868               	movf	??_getRxData,w
  7552  1569  00E9               	movwf	getRxData@error
  7553                           
  7554                           ;RF_Control_B1.c: 266: if (error == 0) {
  7555  156A  08E9               	movf	getRxData@error,f
  7556  156B  1D03               	skipz
  7557  156C  2DA9               	goto	l2527
  7558                           
  7559                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  7560  156D  0021               	movlb	1	; select bank1
  7561  156E  1F40               	btfss	_RF1^(0+128),6
  7562  156F  2D7B               	goto	l10459
  7563                           
  7564                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7565  1570  0023               	movlb	3	; select bank3
  7566  1571  08A0               	movf	_RF_Data^(0+384),f
  7567  1572  1D03               	skipz
  7568  1573  0008               	return
  7569  1574  0821               	movf	(_RF_Data^(0+384)+1),w
  7570  1575  3A64               	xorlw	100
  7571  1576  1D03               	skipz
  7572  1577  0008               	return
  7573                           
  7574                           ;RF_Control_B1.c: 270: setLog_Code();
  7575  1578  319F  2729         	fcall	_setLog_Code
  7576                           
  7577                           ;RF_Control_B1.c: 271: }
  7578                           ;RF_Control_B1.c: 289: } else {
  7579  157A  0008               	return
  7580  157B                     l10459:	
  7581                           
  7582                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7583  157B  0023               	movlb	3	; select bank3
  7584  157C  0834               	movf	(_RF_Data^(0+384)+20),w
  7585  157D  3AD2               	xorlw	210
  7586  157E  1903               	skipnz
  7587  157F  2D84               	goto	l10463
  7588  1580  0834               	movf	(_RF_Data^(0+384)+20),w
  7589  1581  3A0A               	xorlw	10
  7590  1582  1D03               	skipz
  7591  1583  0008               	return
  7592  1584                     l10463:	
  7593                           
  7594                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7595  1584  08A0               	movf	_RF_Data^(0+384),f
  7596  1585  1D03               	skipz
  7597  1586  0008               	return
  7598  1587  0821               	movf	(_RF_Data^(0+384)+1),w
  7599  1588  3A02               	xorlw	2
  7600  1589  1D03               	skipz
  7601  158A  0008               	return
  7602                           
  7603                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7604  158B  087B               	movf	_product,w
  7605  158C  3E0C               	addlw	12
  7606  158D  0086               	movwf	6
  7607  158E  3002               	movlw	2	; select bank4/5
  7608  158F  0087               	movwf	7
  7609  1590  082C               	movf	(_RF_Data^(0+384)+12),w
  7610  1591  0601               	xorwf	1,w
  7611  1592  1D03               	skipz
  7612  1593  0008               	return
  7613  1594  087B               	movf	_product,w
  7614  1595  3E0D               	addlw	13
  7615  1596  0086               	movwf	6
  7616  1597  3002               	movlw	2	; select bank4/5
  7617  1598  0087               	movwf	7
  7618  1599  082D               	movf	(_RF_Data^(0+384)+13),w
  7619  159A  0601               	xorwf	1,w
  7620  159B  1D03               	skipz
  7621  159C  0008               	return
  7622  159D  087B               	movf	_product,w
  7623  159E  3E0E               	addlw	14
  7624  159F  0086               	movwf	6
  7625  15A0  3002               	movlw	2	; select bank4/5
  7626  15A1  0087               	movwf	7
  7627  15A2  082E               	movf	(_RF_Data^(0+384)+14),w
  7628  15A3  0601               	xorwf	1,w
  7629  15A4  1D03               	skipz
  7630  15A5  0008               	return
  7631                           
  7632                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  7633  15A6  318B  23F6         	fcall	_setControl_Lights_Table
  7634                           
  7635                           ;RF_Control_B1.c: 296: }
  7636                           ;RF_Control_B1.c: 299: }
  7637                           ;RF_Control_B1.c: 310: }
  7638                           ;RF_Control_B1.c: 311: }
  7639                           ;RF_Control_B1.c: 312: } else {
  7640  15A8  0008               	return
  7641  15A9                     l2527:	
  7642                           
  7643                           ;RF_Control_B1.c: 313: __nop();
  7644  15A9  0000               	nop
  7645  15AA  0008               	return
  7646  15AB                     __end_of_getRxData:	
  7647                           
  7648                           	psect	text28
  7649  1F29                     __ptext28:	
  7650 ;; *************** function _setLog_Code *****************
  7651 ;; Defined at:
  7652 ;;		line 319 in file "../src/RF_Control_B1.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;		None               void
  7659 ;; Registers used:
  7660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/0
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        1 bytes
  7671 ;; Hardware stack levels used:    1
  7672 ;; Hardware stack levels required when called:    5
  7673 ;; This function calls:
  7674 ;;		_setBuz
  7675 ;;		_setMemory_LoopSave
  7676 ;;		_setMemory_Modify
  7677 ;;		_setProductData
  7678 ;; This function is called by:
  7679 ;;		_getRxData
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _setLog_Code
  7685  1F29                     _setLog_Code:	
  7686                           
  7687                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7691  1F29  0021               	movlb	1	; select bank1
  7692  1F2A  1340               	bcf	_RF1^(0+128),6
  7693                           
  7694                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  7695  1F2B  0023               	movlb	3	; select bank3
  7696  1F2C  082C               	movf	(_RF_Data^(0+384)+12),w
  7697  1F2D  0020               	movlb	0	; select bank0
  7698  1F2E  00DD               	movwf	??_setLog_Code
  7699  1F2F  085D               	movf	??_setLog_Code,w
  7700  1F30  00DA               	movwf	setProductData@value
  7701  1F31  300C               	movlw	12
  7702  1F32  3198  20A3  319F   	fcall	_setProductData
  7703                           
  7704                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  7705  1F35  0023               	movlb	3	; select bank3
  7706  1F36  082D               	movf	(_RF_Data^(0+384)+13),w
  7707  1F37  0020               	movlb	0	; select bank0
  7708  1F38  00DD               	movwf	??_setLog_Code
  7709  1F39  085D               	movf	??_setLog_Code,w
  7710  1F3A  00DA               	movwf	setProductData@value
  7711  1F3B  300D               	movlw	13
  7712  1F3C  3198  20A3  319F   	fcall	_setProductData
  7713                           
  7714                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  7715  1F3F  0023               	movlb	3	; select bank3
  7716  1F40  082E               	movf	(_RF_Data^(0+384)+14),w
  7717  1F41  0020               	movlb	0	; select bank0
  7718  1F42  00DD               	movwf	??_setLog_Code
  7719  1F43  085D               	movf	??_setLog_Code,w
  7720  1F44  00DA               	movwf	setProductData@value
  7721  1F45  300E               	movlw	14
  7722  1F46  3198  20A3  319F   	fcall	_setProductData
  7723                           
  7724                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  7725  1F49  3064               	movlw	100
  7726  1F4A  0020               	movlb	0	; select bank0
  7727  1F4B  00A4               	movwf	setBuz@time
  7728  1F4C  3000               	movlw	0
  7729  1F4D  00A5               	movwf	setBuz@time+1
  7730  1F4E  3001               	movlw	1
  7731  1F4F  3192  22EC  319F   	fcall	_setBuz
  7732                           
  7733                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  7734  1F52  0021               	movlb	1	; select bank1
  7735  1F53  1ECF               	btfss	_myMain^(0+128),5
  7736  1F54  2F59               	goto	l2540
  7737                           
  7738                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  7739  1F55  3001               	movlw	1
  7740  1F56  3199  2188  319F   	fcall	_setMemory_LoopSave
  7741  1F59                     l2540:	
  7742                           
  7743                           ;RF_Control_B1.c: 327: }
  7744                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  7745  1F59  3001               	movlw	1
  7746  1F5A  3199  2138         	fcall	_setMemory_Modify
  7747  1F5C  0008               	return
  7748  1F5D                     __end_of_setLog_Code:	
  7749                           
  7750                           	psect	text29
  7751  1988                     __ptext29:	
  7752 ;; *************** function _setMemory_LoopSave *****************
  7753 ;; Defined at:
  7754 ;;		line 1094 in file "../src/MCU_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  command         1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  command         1    3[COMMON] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;		None               void
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    3
  7775 ;; This function calls:
  7776 ;;		Nothing
  7777 ;; This function is called by:
  7778 ;;		_setLog_Code
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           
  7783                           ;psect for function _setMemory_LoopSave
  7784  1988                     _setMemory_LoopSave:	
  7785                           
  7786                           ;incstack = 0
  7787                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7788                           ;setMemory_LoopSave@command stored from wreg
  7789  1988  00F3               	movwf	setMemory_LoopSave@command
  7790                           
  7791                           ;MCU_B1.c: 1095: Memory.LoopSave = command == 1 ? 1 : 0;
  7792  1989  0873               	movf	setMemory_LoopSave@command,w
  7793  198A  3A01               	xorlw	1
  7794  198B  3000               	movlw	0
  7795  198C  1903               	skipnz
  7796  198D  3001               	movlw	1
  7797  198E  00F2               	movwf	??_setMemory_LoopSave
  7798  198F  0DF2               	rlf	??_setMemory_LoopSave,f
  7799  1990  0DF2               	rlf	??_setMemory_LoopSave,f
  7800  1991  0024               	movlb	4	; select bank4
  7801  1992  0854               	movf	(_Memory^(0+512)+36),w
  7802  1993  0672               	xorwf	??_setMemory_LoopSave,w
  7803  1994  39FB               	andlw	-5
  7804  1995  0672               	xorwf	??_setMemory_LoopSave,w
  7805  1996  00D4               	movwf	(_Memory^(0+512)+36)
  7806  1997  0008               	return
  7807  1998                     __end_of_setMemory_LoopSave:	
  7808                           
  7809                           	psect	text30
  7810  0BF6                     __ptext30:	
  7811 ;; *************** function _setControl_Lights_Table *****************
  7812 ;; Defined at:
  7813 ;;		line 332 in file "../src/RF_Control_B1.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    7
  7834 ;; This function calls:
  7835 ;;		_getDimmerLights_Status
  7836 ;;		_getMain_All_LightsStatus
  7837 ;;		_setCmd_Status
  7838 ;;		_setDimmerLights_SwOff
  7839 ;;		_setDimmerLights_SwOn
  7840 ;;		_setProductData
  7841 ;;		_setRFSW_AdjControl
  7842 ;;		_setRFSW_Control
  7843 ;;		_setRF_AdjControl
  7844 ;;		_setTxData
  7845 ;; This function is called by:
  7846 ;;		_getRxData
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _setControl_Lights_Table
  7852  0BF6                     _setControl_Lights_Table:	
  7853                           
  7854                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7858  0BF6  2C75               	goto	l10165
  7859  0BF7                     l10133:	
  7860                           ;RF_Control_B1.c: 336: case 0x00:
  7861                           
  7862                           
  7863                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  7864  0BF7  3199  211A  318B   	fcall	_getMain_All_LightsStatus
  7865  0BFA  3A01               	xorlw	1
  7866  0BFB  1D03               	skipz
  7867  0BFC  2C21               	goto	l10143
  7868                           
  7869                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  7870  0BFD  3001               	movlw	1
  7871  0BFE  3198  20ED  318B   	fcall	_getDimmerLights_Status
  7872  0C01  3A01               	xorlw	1
  7873  0C02  1D03               	skipz
  7874  0C03  2C0C               	goto	l2547
  7875                           
  7876                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  7877  0C04  3001               	movlw	1
  7878  0C05  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7879                           
  7880                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  7881  0C08  3001               	movlw	1
  7882  0C09  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7883  0C0C                     l2547:	
  7884                           
  7885                           ;RF_Control_B1.c: 343: }
  7886                           ;RF_Control_B1.c: 346: if (getDimmerLights_Status(2) == 1) {
  7887  0C0C  3002               	movlw	2
  7888  0C0D  3198  20ED  318B   	fcall	_getDimmerLights_Status
  7889  0C10  3A01               	xorlw	1
  7890  0C11  1D03               	skipz
  7891  0C12  2C1B               	goto	l10141
  7892                           
  7893                           ;RF_Control_B1.c: 347: setDimmerLights_SwOn(2);
  7894  0C13  3002               	movlw	2
  7895  0C14  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7896                           
  7897                           ;RF_Control_B1.c: 348: setDimmerLights_SwOff(2);
  7898  0C17  3002               	movlw	2
  7899  0C18  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7900  0C1B                     l10141:	
  7901                           
  7902                           ;RF_Control_B1.c: 349: }
  7903                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  7904  0C1B  01F2               	clrf	setCmd_Status@cmd
  7905  0C1C  0AF2               	incf	setCmd_Status@cmd,f
  7906  0C1D  3001               	movlw	1
  7907  0C1E  319A  224D         	fcall	_setCmd_Status
  7908                           
  7909                           ;RF_Control_B1.c: 359: } else {
  7910  0C20  0008               	return
  7911  0C21                     l10143:	
  7912                           
  7913                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  7914  0C21  0020               	movlb	0	; select bank0
  7915  0C22  01DA               	clrf	setProductData@value
  7916  0C23  3009               	movlw	9
  7917  0C24  3198  20A3  318B   	fcall	_setProductData
  7918                           
  7919                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  7920  0C27  0020               	movlb	0	; select bank0
  7921  0C28  01DA               	clrf	setProductData@value
  7922  0C29  300B               	movlw	11
  7923  0C2A  3198  20A3  318B   	fcall	_setProductData
  7924                           
  7925                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  7926  0C2D  0020               	movlb	0	; select bank0
  7927  0C2E  01DA               	clrf	setProductData@value
  7928  0C2F  300F               	movlw	15
  7929  0C30  3198  20A3  318B   	fcall	_setProductData
  7930                           
  7931                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  7932  0C33  0020               	movlb	0	; select bank0
  7933  0C34  01DA               	clrf	setProductData@value
  7934  0C35  3011               	movlw	17
  7935  0C36  3198  20A3  318B   	fcall	_setProductData
  7936                           
  7937                           ;RF_Control_B1.c: 364: setTxData();
  7938  0C39  31A7  27F2         	fcall	_setTxData
  7939                           
  7940                           ;RF_Control_B1.c: 365: }
  7941                           ;RF_Control_B1.c: 366: break;
  7942  0C3B  0008               	return
  7943  0C3C                     l10147:	
  7944                           ;RF_Control_B1.c: 368: case 0x20:
  7945                           
  7946                           
  7947                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  7948  0C3C  0020               	movlb	0	; select bank0
  7949  0C3D  01DA               	clrf	setProductData@value
  7950  0C3E  3009               	movlw	9
  7951  0C3F  3198  20A3  318B   	fcall	_setProductData
  7952                           
  7953                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  7954  0C42  0020               	movlb	0	; select bank0
  7955  0C43  01DA               	clrf	setProductData@value
  7956  0C44  300B               	movlw	11
  7957  0C45  3198  20A3  318B   	fcall	_setProductData
  7958                           
  7959                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  7960  0C48  087B               	movf	_product,w
  7961  0C49  0086               	movwf	6
  7962  0C4A  3002               	movlw	2	; select bank4/5
  7963  0C4B  0087               	movwf	7
  7964  0C4C  3002               	movlw	2	; select bank4/5
  7965  0C4D  3F4F               	moviw [15]fsr1
  7966  0C4E  0020               	movlb	0	; select bank0
  7967  0C4F  00DA               	movwf	setProductData@value
  7968  0C50  300F               	movlw	15
  7969  0C51  3198  20A3  318B   	fcall	_setProductData
  7970                           
  7971                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  7972  0C54  0020               	movlb	0	; select bank0
  7973  0C55  01DA               	clrf	setProductData@value
  7974  0C56  3011               	movlw	17
  7975  0C57  3198  20A3  318B   	fcall	_setProductData
  7976                           
  7977                           ;RF_Control_B1.c: 373: setTxData();
  7978  0C5A  31A7  27F2         	fcall	_setTxData
  7979                           
  7980                           ;RF_Control_B1.c: 374: break;
  7981  0C5C  0008               	return
  7982  0C5D                     l10151:	
  7983                           ;RF_Control_B1.c: 377: case 0x01:
  7984                           
  7985                           
  7986                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  7987  0C5D  3001               	movlw	1
  7988  0C5E  3191  215C         	fcall	_setRFSW_Control
  7989                           
  7990                           ;RF_Control_B1.c: 379: break;
  7991  0C60  0008               	return
  7992  0C61                     l10153:	
  7993                           ;RF_Control_B1.c: 383: case 0x11:
  7994                           
  7995                           
  7996                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7997  0C61  3001               	movlw	1
  7998  0C62  318A  22E3         	fcall	_setRFSW_AdjControl
  7999                           
  8000                           ;RF_Control_B1.c: 385: break;
  8001  0C64  0008               	return
  8002  0C65                     l10155:	
  8003                           ;RF_Control_B1.c: 387: case 0xd1:
  8004                           
  8005                           
  8006                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  8007  0C65  3001               	movlw	1
  8008  0C66  319F  2793         	fcall	_setRF_AdjControl
  8009                           
  8010                           ;RF_Control_B1.c: 389: break;
  8011  0C68  0008               	return
  8012  0C69                     l10157:	
  8013                           ;RF_Control_B1.c: 394: case 0x02:
  8014                           
  8015                           
  8016                           ;RF_Control_B1.c: 395: setRFSW_Control(2);
  8017  0C69  3002               	movlw	2
  8018  0C6A  3191  215C         	fcall	_setRFSW_Control
  8019                           
  8020                           ;RF_Control_B1.c: 396: break;
  8021  0C6C  0008               	return
  8022  0C6D                     l10159:	
  8023                           ;RF_Control_B1.c: 399: case 0x21:
  8024                           
  8025                           
  8026                           ;RF_Control_B1.c: 400: setRFSW_AdjControl(2);
  8027  0C6D  3002               	movlw	2
  8028  0C6E  318A  22E3         	fcall	_setRFSW_AdjControl
  8029                           
  8030                           ;RF_Control_B1.c: 401: break;
  8031  0C70  0008               	return
  8032  0C71                     l10161:	
  8033                           ;RF_Control_B1.c: 403: case 0xd2:
  8034                           
  8035                           
  8036                           ;RF_Control_B1.c: 404: setRF_AdjControl(2);
  8037  0C71  3002               	movlw	2
  8038  0C72  319F  2793         	fcall	_setRF_AdjControl
  8039                           
  8040                           ;RF_Control_B1.c: 422: }
  8041                           
  8042                           ;RF_Control_B1.c: 405: break;
  8043  0C74  0008               	return
  8044  0C75                     l10165:	
  8045  0C75  0023               	movlb	3	; select bank3
  8046  0C76  082F               	movf	(_RF_Data^(0+384)+15),w
  8047                           
  8048                           ; Switch size 1, requested type "space"
  8049                           ; Number of cases is 8, Range of values is 0 to 210
  8050                           ; switch strategies available:
  8051                           ; Name         Instructions Cycles
  8052                           ; simple_byte           25    13 (average)
  8053                           ; jumptable            260     6 (fixed)
  8054                           ;	Chosen strategy is simple_byte
  8055  0C77  3A00               	xorlw	0	; case 0
  8056  0C78  1903               	skipnz
  8057  0C79  2BF7               	goto	l10133
  8058  0C7A  3A01               	xorlw	1	; case 1
  8059  0C7B  1903               	skipnz
  8060  0C7C  2C5D               	goto	l10151
  8061  0C7D  3A03               	xorlw	3	; case 2
  8062  0C7E  1903               	skipnz
  8063  0C7F  2C69               	goto	l10157
  8064  0C80  3A13               	xorlw	19	; case 17
  8065  0C81  1903               	skipnz
  8066  0C82  2C61               	goto	l10153
  8067  0C83  3A31               	xorlw	49	; case 32
  8068  0C84  1903               	skipnz
  8069  0C85  2C3C               	goto	l10147
  8070  0C86  3A01               	xorlw	1	; case 33
  8071  0C87  1903               	skipnz
  8072  0C88  2C6D               	goto	l10159
  8073  0C89  3AF0               	xorlw	240	; case 209
  8074  0C8A  1903               	skipnz
  8075  0C8B  2C65               	goto	l10155
  8076  0C8C  3A03               	xorlw	3	; case 210
  8077  0C8D  1903               	skipnz
  8078  0C8E  2C71               	goto	l10161
  8079  0C8F  2C90               	goto	l2558
  8080  0C90                     l2558:	
  8081  0C90  0008               	return
  8082  0C91                     __end_of_setControl_Lights_Table:	
  8083                           
  8084                           	psect	text31
  8085  1F93                     __ptext31:	
  8086 ;; *************** function _setRF_AdjControl *****************
  8087 ;; Defined at:
  8088 ;;		line 501 in file "../src/RF_Control_B1.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;  sw              1    wreg     unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  sw              1    9[COMMON] unsigned char 
  8093 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  8094 ;;  status          1    7[COMMON] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;		None               void
  8097 ;; Registers used:
  8098 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;Total ram usage:        4 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    5
  8111 ;; This function calls:
  8112 ;;		_DimmerLights_SelectPointer
  8113 ;;		_getDimmerIntr_Dimming_Sw
  8114 ;;		_getDimmerLights_Status
  8115 ;; This function is called by:
  8116 ;;		_setControl_Lights_Table
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _setRF_AdjControl
  8122  1F93                     _setRF_AdjControl:	
  8123                           
  8124                           ;incstack = 0
  8125                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8126                           ;setRF_AdjControl@sw stored from wreg
  8127  1F93  00F9               	movwf	setRF_AdjControl@sw
  8128                           
  8129                           ;RF_Control_B1.c: 502: char status = 0;
  8130  1F94  01F7               	clrf	setRF_AdjControl@status
  8131                           
  8132                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  8133  1F95  0879               	movf	setRF_AdjControl@sw,w
  8134  1F96  3198  20ED  319F   	fcall	_getDimmerLights_Status
  8135  1F99  00F6               	movwf	??_setRF_AdjControl
  8136  1F9A  0876               	movf	??_setRF_AdjControl,w
  8137  1F9B  00F7               	movwf	setRF_AdjControl@status
  8138                           
  8139                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  8140  1F9C  01F8               	clrf	setRF_AdjControl@dimmingStatus
  8141                           
  8142                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8143  1F9D  0879               	movf	setRF_AdjControl@sw,w
  8144  1F9E  319A  22E0  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8145  1FA1  00F6               	movwf	??_setRF_AdjControl
  8146  1FA2  0876               	movf	??_setRF_AdjControl,w
  8147  1FA3  00F8               	movwf	setRF_AdjControl@dimmingStatus
  8148                           
  8149                           ;RF_Control_B1.c: 508: if (status == 1) {
  8150  1FA4  0877               	movf	setRF_AdjControl@status,w
  8151  1FA5  3A01               	xorlw	1
  8152  1FA6  1D03               	skipz
  8153  1FA7  0008               	return
  8154                           
  8155                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  8156  1FA8  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  8157  1FA9  1D03               	skipz
  8158  1FAA  2FBA               	goto	l7375
  8159                           
  8160                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  8161  1FAB  0879               	movf	setRF_AdjControl@sw,w
  8162  1FAC  319A  2238         	fcall	_DimmerLights_SelectPointer
  8163                           
  8164                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  8165  1FAE  0020               	movlb	0	; select bank0
  8166  1FAF  086C               	movf	_DimmerLights,w
  8167  1FB0  0086               	movwf	6
  8168  1FB1  3001               	movlw	1	; select bank2/3
  8169  1FB2  0087               	movwf	7
  8170  1FB3  1601               	bsf	1,4
  8171                           
  8172                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  8173  1FB4  086C               	movf	_DimmerLights,w
  8174  1FB5  0086               	movwf	6
  8175  1FB6  3001               	movlw	1	; select bank2/3
  8176  1FB7  0087               	movwf	7
  8177  1FB8  1681               	bsf	1,5
  8178                           
  8179                           ;RF_Control_B1.c: 514: } else {
  8180  1FB9  0008               	return
  8181  1FBA                     l7375:	
  8182                           
  8183                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  8184  1FBA  0879               	movf	setRF_AdjControl@sw,w
  8185  1FBB  319A  2238         	fcall	_DimmerLights_SelectPointer
  8186                           
  8187                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  8188  1FBD  0020               	movlb	0	; select bank0
  8189  1FBE  086C               	movf	_DimmerLights,w
  8190  1FBF  0086               	movwf	6
  8191  1FC0  3001               	movlw	1	; select bank2/3
  8192  1FC1  0087               	movwf	7
  8193  1FC2  1601               	bsf	1,4
  8194                           
  8195                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  8196  1FC3  086C               	movf	_DimmerLights,w
  8197  1FC4  0086               	movwf	6
  8198  1FC5  3001               	movlw	1	; select bank2/3
  8199  1FC6  0087               	movwf	7
  8200  1FC7  1281               	bcf	1,5
  8201  1FC8  0008               	return
  8202  1FC9                     __end_of_setRF_AdjControl:	
  8203                           
  8204                           	psect	text32
  8205  115C                     __ptext32:	
  8206 ;; *************** function _setRFSW_Control *****************
  8207 ;; Defined at:
  8208 ;;		line 430 in file "../src/RF_Control_B1.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  sw              1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  sw              1   71[BANK0 ] unsigned char 
  8213 ;;  status          1   70[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;		None               void
  8216 ;; Registers used:
  8217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;Total ram usage:        3 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    6
  8230 ;; This function calls:
  8231 ;;		_getDimmerLights_Status
  8232 ;;		_setBuz
  8233 ;;		_setDelayOff_GO
  8234 ;;		_setDimmerLights_SwOff
  8235 ;;		_setDimmerLights_SwOn
  8236 ;;		_setRF_DimmerLights
  8237 ;;		_setTxData
  8238 ;; This function is called by:
  8239 ;;		_setControl_Lights_Table
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _setRFSW_Control
  8245  115C                     _setRFSW_Control:	
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;setRFSW_Control@sw stored from wreg
  8250  115C  0020               	movlb	0	; select bank0
  8251  115D  00E7               	movwf	setRFSW_Control@sw
  8252                           
  8253                           ;RF_Control_B1.c: 431: char status = 0;
  8254  115E  01E6               	clrf	setRFSW_Control@status
  8255                           
  8256                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  8257  115F  0023               	movlb	3	; select bank3
  8258  1160  0830               	movf	(_RF_Data^(0+384)+16),w
  8259  1161  3A80               	xorlw	128
  8260  1162  1D03               	skipz
  8261  1163  298F               	goto	l9957
  8262                           
  8263                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  8264  1164  0020               	movlb	0	; select bank0
  8265  1165  01DD               	clrf	setDelayOff_GO@command
  8266  1166  0ADD               	incf	setDelayOff_GO@command,f
  8267  1167  0023               	movlb	3	; select bank3
  8268  1168  0831               	movf	(_RF_Data^(0+384)+17),w
  8269  1169  0020               	movlb	0	; select bank0
  8270  116A  00E5               	movwf	??_setRFSW_Control
  8271  116B  0865               	movf	??_setRFSW_Control,w
  8272  116C  00DE               	movwf	setDelayOff_GO@value
  8273  116D  0867               	movf	setRFSW_Control@sw,w
  8274  116E  318B  236A  3191   	fcall	_setDelayOff_GO
  8275                           
  8276                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  8277  1171  0020               	movlb	0	; select bank0
  8278  1172  0867               	movf	setRFSW_Control@sw,w
  8279  1173  3198  20ED  3191   	fcall	_getDimmerLights_Status
  8280  1176  3A01               	xorlw	1
  8281  1177  1D03               	skipz
  8282  1178  298F               	goto	l9957
  8283                           
  8284                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  8285  1179  3064               	movlw	100
  8286  117A  0020               	movlb	0	; select bank0
  8287  117B  00A4               	movwf	setBuz@time
  8288  117C  3000               	movlw	0
  8289  117D  00A5               	movwf	setBuz@time+1
  8290  117E  3001               	movlw	1
  8291  117F  3192  22EC  3191   	fcall	_setBuz
  8292                           
  8293                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  8294  1182  0020               	movlb	0	; select bank0
  8295  1183  01DD               	clrf	setRF_DimmerLights@on
  8296  1184  0ADD               	incf	setRF_DimmerLights@on,f
  8297  1185  0867               	movf	setRFSW_Control@sw,w
  8298  1186  3188  202B  3191   	fcall	_setRF_DimmerLights
  8299                           
  8300                           ;RF_Control_B1.c: 438: setTxData();
  8301  1189  31A7  27F2  3191   	fcall	_setTxData
  8302                           
  8303                           ;RF_Control_B1.c: 439: status = 1;
  8304  118C  0020               	movlb	0	; select bank0
  8305  118D  01E6               	clrf	setRFSW_Control@status
  8306  118E  0AE6               	incf	setRFSW_Control@status,f
  8307  118F                     l9957:	
  8308                           
  8309                           ;RF_Control_B1.c: 440: }
  8310                           ;RF_Control_B1.c: 441: }
  8311                           ;RF_Control_B1.c: 443: if (status == 0) {
  8312  118F  0020               	movlb	0	; select bank0
  8313  1190  08E6               	movf	setRFSW_Control@status,f
  8314  1191  1D03               	skipz
  8315  1192  0008               	return
  8316                           
  8317                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  8318  1193  0867               	movf	setRFSW_Control@sw,w
  8319  1194  3187  2784  3191   	fcall	_setDimmerLights_SwOn
  8320                           
  8321                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  8322  1197  0020               	movlb	0	; select bank0
  8323  1198  0867               	movf	setRFSW_Control@sw,w
  8324  1199  3191  2122         	fcall	_setDimmerLights_SwOff
  8325  119B  0008               	return
  8326  119C                     __end_of_setRFSW_Control:	
  8327                           
  8328                           	psect	text33
  8329  0AE3                     __ptext33:	
  8330 ;; *************** function _setRFSW_AdjControl *****************
  8331 ;; Defined at:
  8332 ;;		line 453 in file "../src/RF_Control_B1.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  sw              1    wreg     unsigned char 
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  sw              1   64[BANK0 ] unsigned char 
  8337 ;;  status          1   63[BANK0 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        4 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    6
  8354 ;; This function calls:
  8355 ;;		_getDimmerLights_PercentToValue
  8356 ;;		_getDimmerLights_Status
  8357 ;;		_setBuz
  8358 ;;		_setDimmerIntr_Dimming_RF
  8359 ;;		_setDimmerIntr_MaxmumValue
  8360 ;;		_setDimmerLights_DimmingRun
  8361 ;;		_setDimmerLights_SwOff
  8362 ;;		_setDimmerLights_SwOn
  8363 ;;		_setMemory_Modify
  8364 ;;		_setProductData
  8365 ;;		_setTxData
  8366 ;; This function is called by:
  8367 ;;		_setControl_Lights_Table
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           
  8372                           ;psect for function _setRFSW_AdjControl
  8373  0AE3                     _setRFSW_AdjControl:	
  8374                           
  8375                           ;incstack = 0
  8376                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8377                           ;setRFSW_AdjControl@sw stored from wreg
  8378  0AE3  0020               	movlb	0	; select bank0
  8379  0AE4  00E0               	movwf	setRFSW_AdjControl@sw
  8380                           
  8381                           ;RF_Control_B1.c: 454: char status = 0;
  8382  0AE5  01DF               	clrf	setRFSW_AdjControl@status
  8383                           
  8384                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  8385  0AE6  0860               	movf	setRFSW_AdjControl@sw,w
  8386  0AE7  3198  20ED  318A   	fcall	_getDimmerLights_Status
  8387  0AEA  0020               	movlb	0	; select bank0
  8388  0AEB  00DD               	movwf	??_setRFSW_AdjControl
  8389  0AEC  085D               	movf	??_setRFSW_AdjControl,w
  8390  0AED  00DF               	movwf	setRFSW_AdjControl@status
  8391                           
  8392                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  8393  0AEE  3065               	movlw	101
  8394  0AEF  0023               	movlb	3	; select bank3
  8395  0AF0  0229               	subwf	(_RF_Data^(0+384)+9),w
  8396  0AF1  1C03               	skipc
  8397  0AF2  2AFA               	goto	l9969
  8398                           
  8399                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  8400  0AF3  3064               	movlw	100
  8401  0AF4  0020               	movlb	0	; select bank0
  8402  0AF5  00DD               	movwf	??_setRFSW_AdjControl
  8403  0AF6  085D               	movf	??_setRFSW_AdjControl,w
  8404  0AF7  0023               	movlb	3	; select bank3
  8405  0AF8  00A9               	movwf	(_RF_Data^(0+384)+9)
  8406                           
  8407                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  8408  0AF9  2AFF               	goto	l9973
  8409  0AFA                     l9969:	
  8410  0AFA  08A9               	movf	(_RF_Data^(0+384)+9),f
  8411  0AFB  1D03               	skipz
  8412  0AFC  2AFF               	goto	l9973
  8413                           
  8414                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  8415  0AFD  01A9               	clrf	(_RF_Data^(0+384)+9)
  8416  0AFE  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8417  0AFF                     l9973:	
  8418                           
  8419                           ;RF_Control_B1.c: 462: }
  8420                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  8421  0AFF  0829               	movf	(_RF_Data^(0+384)+9),w
  8422  0B00  0020               	movlb	0	; select bank0
  8423  0B01  00DD               	movwf	??_setRFSW_AdjControl
  8424  0B02  085D               	movf	??_setRFSW_AdjControl,w
  8425  0B03  00DA               	movwf	setProductData@value
  8426  0B04  3009               	movlw	9
  8427  0B05  3198  20A3  318A   	fcall	_setProductData
  8428                           
  8429                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  8430  0B08  0020               	movlb	0	; select bank0
  8431  0B09  0860               	movf	setRFSW_AdjControl@sw,w
  8432  0B0A  00DD               	movwf	??_setRFSW_AdjControl
  8433  0B0B  085D               	movf	??_setRFSW_AdjControl,w
  8434  0B0C  00DA               	movwf	setProductData@value
  8435  0B0D  300B               	movlw	11
  8436  0B0E  3198  20A3  318A   	fcall	_setProductData
  8437                           
  8438                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  8439  0B11  0020               	movlb	0	; select bank0
  8440  0B12  0860               	movf	setRFSW_AdjControl@sw,w
  8441  0B13  3E1A               	addlw	26
  8442  0B14  077B               	addwf	_product,w
  8443  0B15  00DD               	movwf	??_setRFSW_AdjControl
  8444  0B16  085D               	movf	??_setRFSW_AdjControl,w
  8445  0B17  0086               	movwf	6
  8446  0B18  3002               	movlw	2	; select bank4/5
  8447  0B19  0087               	movwf	7
  8448  0B1A  0801               	movf	1,w
  8449  0B1B  00DE               	movwf	??_setRFSW_AdjControl+1
  8450  0B1C  085E               	movf	??_setRFSW_AdjControl+1,w
  8451  0B1D  00DA               	movwf	setProductData@value
  8452  0B1E  3011               	movlw	17
  8453  0B1F  3198  20A3  318A   	fcall	_setProductData
  8454                           
  8455                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  8456  0B22  0023               	movlb	3	; select bank3
  8457  0B23  0829               	movf	(_RF_Data^(0+384)+9),w
  8458  0B24  0020               	movlb	0	; select bank0
  8459  0B25  00DD               	movwf	??_setRFSW_AdjControl
  8460  0B26  085D               	movf	??_setRFSW_AdjControl,w
  8461  0B27  00DA               	movwf	setProductData@value
  8462  0B28  0860               	movf	setRFSW_AdjControl@sw,w
  8463  0B29  3E14               	addlw	20
  8464  0B2A  3198  20A3  318A   	fcall	_setProductData
  8465                           
  8466                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  8467  0B2D  3001               	movlw	1
  8468  0B2E  3199  2138  318A   	fcall	_setMemory_Modify
  8469                           
  8470                           ;RF_Control_B1.c: 478: if (status == 1) {
  8471  0B31  0020               	movlb	0	; select bank0
  8472  0B32  085F               	movf	setRFSW_AdjControl@status,w
  8473  0B33  3A01               	xorlw	1
  8474  0B34  1D03               	skipz
  8475  0B35  2B56               	goto	l9985
  8476                           
  8477                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8478  0B36  0023               	movlb	3	; select bank3
  8479  0B37  0829               	movf	(_RF_Data^(0+384)+9),w
  8480  0B38  3196  26D1  318A   	fcall	_getDimmerLights_PercentToValue
  8481  0B3B  0020               	movlb	0	; select bank0
  8482  0B3C  00DD               	movwf	??_setRFSW_AdjControl
  8483  0B3D  085D               	movf	??_setRFSW_AdjControl,w
  8484  0B3E  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  8485  0B3F  0860               	movf	setRFSW_AdjControl@sw,w
  8486  0B40  319A  22F6  318A   	fcall	_setDimmerIntr_MaxmumValue
  8487                           
  8488                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  8489  0B43  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  8490  0B44  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  8491  0B45  0020               	movlb	0	; select bank0
  8492  0B46  0860               	movf	setRFSW_AdjControl@sw,w
  8493  0B47  319D  25C0  318A   	fcall	_setDimmerIntr_Dimming_RF
  8494                           
  8495                           ;RF_Control_B1.c: 483: setTxData();
  8496  0B4A  31A7  27F2  318A   	fcall	_setTxData
  8497                           
  8498                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  8499  0B4D  3064               	movlw	100
  8500  0B4E  0020               	movlb	0	; select bank0
  8501  0B4F  00A4               	movwf	setBuz@time
  8502  0B50  3000               	movlw	0
  8503  0B51  00A5               	movwf	setBuz@time+1
  8504  0B52  3001               	movlw	1
  8505  0B53  3192  22EC         	fcall	_setBuz
  8506                           
  8507                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  8508  0B55  0008               	return
  8509  0B56                     l9985:	
  8510  0B56  0020               	movlb	0	; select bank0
  8511  0B57  08DF               	movf	setRFSW_AdjControl@status,f
  8512  0B58  1D03               	skipz
  8513  0B59  0008               	return
  8514                           
  8515                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  8516  0B5A  01F4               	clrf	setDimmerLights_DimmingRun@command
  8517  0B5B  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  8518  0B5C  0860               	movf	setRFSW_AdjControl@sw,w
  8519  0B5D  319B  233C  318A   	fcall	_setDimmerLights_DimmingRun
  8520                           
  8521                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  8522  0B60  0020               	movlb	0	; select bank0
  8523  0B61  0860               	movf	setRFSW_AdjControl@sw,w
  8524  0B62  3187  2784  318A   	fcall	_setDimmerLights_SwOn
  8525                           
  8526                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  8527  0B65  0020               	movlb	0	; select bank0
  8528  0B66  0860               	movf	setRFSW_AdjControl@sw,w
  8529  0B67  3191  2122         	fcall	_setDimmerLights_SwOff
  8530  0B69  0008               	return
  8531  0B6A                     __end_of_setRFSW_AdjControl:	
  8532                           
  8533                           	psect	text34
  8534  1B3C                     __ptext34:	
  8535 ;; *************** function _setDimmerLights_DimmingRun *****************
  8536 ;; Defined at:
  8537 ;;		line 1272 in file "../src/Dimmer_B1.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  lights          1    wreg     unsigned char 
  8540 ;;  command         1    4[COMMON] unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  lights          1    6[COMMON] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;		None               void
  8545 ;; Registers used:
  8546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:        3 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    4
  8559 ;; This function calls:
  8560 ;;		_DimmerLights_SelectPointer
  8561 ;; This function is called by:
  8562 ;;		_setRFSW_AdjControl
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _setDimmerLights_DimmingRun
  8568  1B3C                     _setDimmerLights_DimmingRun:	
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8572                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8573  1B3C  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8574                           
  8575                           ;Dimmer_B1.c: 1273: DimmerLights_SelectPointer(lights);
  8576  1B3D  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8577  1B3E  319A  2238         	fcall	_DimmerLights_SelectPointer
  8578                           
  8579                           ;Dimmer_B1.c: 1274: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8580  1B40  0874               	movf	setDimmerLights_DimmingRun@command,w
  8581  1B41  3A01               	xorlw	1
  8582  1B42  3000               	movlw	0
  8583  1B43  1903               	skipnz
  8584  1B44  3001               	movlw	1
  8585  1B45  00F5               	movwf	??_setDimmerLights_DimmingRun
  8586  1B46  0020               	movlb	0	; select bank0
  8587  1B47  0A6C               	incf	_DimmerLights,w
  8588  1B48  0086               	movwf	6
  8589  1B49  3001               	movlw	1	; select bank2/3
  8590  1B4A  0087               	movwf	7
  8591  1B4B  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8592  1B4C  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8593  1B4D  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8594  1B4E  0801               	movf	1,w
  8595  1B4F  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8596  1B50  39BF               	andlw	-65
  8597  1B51  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8598  1B52  0081               	movwf	1
  8599  1B53  0008               	return
  8600  1B54                     __end_of_setDimmerLights_DimmingRun:	
  8601                           
  8602                           	psect	text35
  8603  19DB                     __ptext35:	
  8604 ;; *************** function _getRF_KeyStatus *****************
  8605 ;; Defined at:
  8606 ;;		line 167 in file "../src/RF_Control_B1.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  key             1    3[COMMON] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      unsigned char 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        3 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    3
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_setRF_Main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function _getRF_KeyStatus
  8636  19DB                     _getRF_KeyStatus:	
  8637                           
  8638                           ;RF_Control_B1.c: 168: char key = 0;
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8642  19DB  01F3               	clrf	getRF_KeyStatus@key
  8643                           
  8644                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8645  19DC  01F4               	clrf	_getRF_KeyStatus$6249
  8646  19DD  0AF4               	incf	_getRF_KeyStatus$6249,f
  8647  19DE  0020               	movlb	0	; select bank0
  8648  19DF  1F0C               	btfss	12,6	;volatile
  8649  19E0  1A0C               	btfsc	12,4	;volatile
  8650  19E1  29E6               	goto	l8067
  8651  19E2  1C0C               	btfss	12,0	;volatile
  8652  19E3  188D               	btfsc	13,1	;volatile
  8653  19E4  29E6               	goto	l8067
  8654  19E5  01F4               	clrf	_getRF_KeyStatus$6249
  8655  19E6                     l8067:	
  8656  19E6  0874               	movf	_getRF_KeyStatus$6249,w
  8657  19E7  00F2               	movwf	??_getRF_KeyStatus
  8658  19E8  0872               	movf	??_getRF_KeyStatus,w
  8659  19E9  00F3               	movwf	getRF_KeyStatus@key
  8660                           
  8661                           ;RF_Control_B1.c: 184: return key;
  8662  19EA  0873               	movf	getRF_KeyStatus@key,w
  8663  19EB  0008               	return
  8664  19EC                     __end_of_getRF_KeyStatus:	
  8665                           
  8666                           	psect	text36
  8667  1978                     __ptext36:	
  8668 ;; *************** function _getBuz_GO *****************
  8669 ;; Defined at:
  8670 ;;		line 82 in file "../src/Buzzer_B1.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;		None
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  i               2    6[COMMON] int 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  2    2[COMMON] int 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:        6 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    3
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_setRF_Main
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           
  8699                           ;psect for function _getBuz_GO
  8700  1978                     _getBuz_GO:	
  8701                           
  8702                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8706  1978  0021               	movlb	1	; select bank1
  8707  1979  0C5C               	rrf	_Buz1^(0+128),w
  8708  197A  3901               	andlw	1
  8709  197B  00F4               	movwf	??_getBuz_GO
  8710  197C  01F5               	clrf	??_getBuz_GO+1
  8711  197D  0874               	movf	??_getBuz_GO,w
  8712  197E  00F6               	movwf	getBuz_GO@i
  8713  197F  0875               	movf	??_getBuz_GO+1,w
  8714  1980  00F7               	movwf	getBuz_GO@i+1
  8715                           
  8716                           ;Buzzer_B1.c: 84: return i;
  8717  1981  0877               	movf	getBuz_GO@i+1,w
  8718  1982  01F3               	clrf	?_getBuz_GO+1
  8719  1983  07F3               	addwf	?_getBuz_GO+1,f
  8720  1984  0876               	movf	getBuz_GO@i,w
  8721  1985  01F2               	clrf	?_getBuz_GO
  8722  1986  07F2               	addwf	?_getBuz_GO,f
  8723  1987  0008               	return
  8724  1988                     __end_of_getBuz_GO:	
  8725                           
  8726                           	psect	text37
  8727  1829                     __ptext37:	
  8728 ;; *************** function _RF_RxDisable *****************
  8729 ;; Defined at:
  8730 ;;		line 155 in file "../src/RF_Control_B1.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;		None
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;		None
  8735 ;; Return value:  Size  Location     Type
  8736 ;;		None               void
  8737 ;; Registers used:
  8738 ;;		None
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;Total ram usage:        0 bytes
  8749 ;; Hardware stack levels used:    1
  8750 ;; Hardware stack levels required when called:    3
  8751 ;; This function calls:
  8752 ;;		Nothing
  8753 ;; This function is called by:
  8754 ;;		_setRF_Main
  8755 ;; This function uses a non-reentrant model
  8756 ;;
  8757                           
  8758                           
  8759                           ;psect for function _RF_RxDisable
  8760  1829                     _RF_RxDisable:	
  8761                           
  8762                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8763                           
  8764                           ;incstack = 0
  8765                           ; Regs used in _RF_RxDisable: []
  8766  1829  0021               	movlb	1	; select bank1
  8767  182A  18C0               	btfsc	_RF1^(0+128),1
  8768  182B  282E               	goto	l2509
  8769  182C  1DC0               	btfss	_RF1^(0+128),3
  8770  182D  0008               	return
  8771  182E                     l2509:	
  8772                           
  8773                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  8774  182E  11C0               	bcf	_RF1^(0+128),3
  8775                           
  8776                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  8777  182F  10C0               	bcf	_RF1^(0+128),1
  8778  1830  0008               	return
  8779  1831                     __end_of_RF_RxDisable:	
  8780                           
  8781                           	psect	text38
  8782  0891                     __ptext38:	
  8783 ;; *************** function _CC2500_TxData *****************
  8784 ;; Defined at:
  8785 ;;		line 32 in file "../src/CC2500_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  loop_e          1    7[COMMON] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;		None               void
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        2 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    5
  8806 ;; This function calls:
  8807 ;;		_CC2500_WriteByte
  8808 ;;		_CC2500_WriteCommand
  8809 ;;		_RF_Timeout_Counter
  8810 ;;		_setRF_TimeoutCleared
  8811 ;; This function is called by:
  8812 ;;		_setRF_Main
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _CC2500_TxData
  8818  0891                     _CC2500_TxData:	
  8819                           
  8820                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8821                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8825  0891  3036               	movlw	54
  8826  0892  319B  236E  3188   	fcall	_CC2500_WriteCommand
  8827                           
  8828                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8829  0895  303B               	movlw	59
  8830  0896  319B  236E  3188   	fcall	_CC2500_WriteCommand
  8831                           
  8832                           ;CC2500_B1.c: 38: RC4 = 0;
  8833  0899  0020               	movlb	0	; select bank0
  8834  089A  120E               	bcf	14,4	;volatile
  8835                           
  8836                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8837  089B  307F               	movlw	127
  8838  089C  00F6               	movwf	??_CC2500_TxData
  8839  089D  0876               	movf	??_CC2500_TxData,w
  8840  089E  0021               	movlb	1	; select bank1
  8841  089F  00ED               	movwf	_SPI0Buffer^(0+128)
  8842                           
  8843                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8844  08A0  28A4               	goto	l10175
  8845  08A1                     l10173:	
  8846                           
  8847                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8848  08A1  319A  2277  3188   	fcall	_RF_Timeout_Counter
  8849  08A4                     l10175:	
  8850  08A4  0020               	movlb	0	; select bank0
  8851  08A5  1D0E               	btfss	14,2	;volatile
  8852  08A6  28AA               	goto	l10179
  8853  08A7  0021               	movlb	1	; select bank1
  8854  08A8  1F41               	btfss	(_RF1^(0+128)+1),6
  8855  08A9  28A1               	goto	l10173
  8856  08AA                     l10179:	
  8857                           
  8858                           ;CC2500_B1.c: 42: };
  8859                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8860  08AA  31A7  27C9  3188   	fcall	_setRF_TimeoutCleared
  8861                           
  8862                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8863  08AD  319B  2324  3188   	fcall	_CC2500_WriteByte
  8864                           
  8865                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8866  08B0  0021               	movlb	1	; select bank1
  8867  08B1  086E               	movf	_Tx_Length^(0+128),w
  8868  08B2  00F6               	movwf	??_CC2500_TxData
  8869  08B3  0876               	movf	??_CC2500_TxData,w
  8870  08B4  00ED               	movwf	_SPI0Buffer^(0+128)
  8871                           
  8872                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8873  08B5  319B  2324  3188   	fcall	_CC2500_WriteByte
  8874                           
  8875                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8876  08B8  01F7               	clrf	CC2500_TxData@loop_e
  8877  08B9                     l10193:	
  8878  08B9  0021               	movlb	1	; select bank1
  8879  08BA  086E               	movf	_Tx_Length^(0+128),w
  8880  08BB  0277               	subwf	CC2500_TxData@loop_e,w
  8881  08BC  1803               	btfsc	3,0
  8882  08BD  28D0               	goto	l263
  8883                           
  8884                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8885  08BE  0877               	movf	CC2500_TxData@loop_e,w
  8886  08BF  3EA0               	addlw	_RF_Data& (0+255)
  8887  08C0  0086               	movwf	6
  8888  08C1  3001               	movlw	1	; select bank3/4
  8889  08C2  0087               	movwf	7
  8890  08C3  0801               	movf	1,w
  8891  08C4  00F6               	movwf	??_CC2500_TxData
  8892  08C5  0876               	movf	??_CC2500_TxData,w
  8893  08C6  0021               	movlb	1	; select bank1
  8894  08C7  00ED               	movwf	_SPI0Buffer^(0+128)
  8895                           
  8896                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8897  08C8  319B  2324  3188   	fcall	_CC2500_WriteByte
  8898  08CB  3001               	movlw	1
  8899  08CC  00F6               	movwf	??_CC2500_TxData
  8900  08CD  0876               	movf	??_CC2500_TxData,w
  8901  08CE  07F7               	addwf	CC2500_TxData@loop_e,f
  8902  08CF  28B9               	goto	l10193
  8903  08D0                     l263:	
  8904                           
  8905                           ;CC2500_B1.c: 51: }
  8906                           ;CC2500_B1.c: 52: RC4 = 1;
  8907  08D0  0020               	movlb	0	; select bank0
  8908  08D1  160E               	bsf	14,4	;volatile
  8909                           
  8910                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8911  08D2  3035               	movlw	53
  8912  08D3  319B  236E  3188   	fcall	_CC2500_WriteCommand
  8913                           
  8914                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8915  08D6  28DA               	goto	l10199
  8916  08D7                     l10197:	
  8917                           
  8918                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8919  08D7  319A  2277  3188   	fcall	_RF_Timeout_Counter
  8920  08DA                     l10199:	
  8921  08DA  0020               	movlb	0	; select bank0
  8922  08DB  180D               	btfsc	13,0	;volatile
  8923  08DC  28E0               	goto	l10203
  8924  08DD  0021               	movlb	1	; select bank1
  8925  08DE  1F41               	btfss	(_RF1^(0+128)+1),6
  8926  08DF  28D7               	goto	l10197
  8927  08E0                     l10203:	
  8928                           
  8929                           ;CC2500_B1.c: 56: };
  8930                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8931  08E0  31A7  27C9  3188   	fcall	_setRF_TimeoutCleared
  8932                           
  8933                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8934  08E3  28E7               	goto	l10207
  8935  08E4                     l10205:	
  8936                           
  8937                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8938  08E4  319A  2277  3188   	fcall	_RF_Timeout_Counter
  8939  08E7                     l10207:	
  8940  08E7  0020               	movlb	0	; select bank0
  8941  08E8  1C0D               	btfss	13,0	;volatile
  8942  08E9  28ED               	goto	l10211
  8943  08EA  0021               	movlb	1	; select bank1
  8944  08EB  1F41               	btfss	(_RF1^(0+128)+1),6
  8945  08EC  28E4               	goto	l10205
  8946  08ED                     l10211:	
  8947                           
  8948                           ;CC2500_B1.c: 61: };
  8949                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8950  08ED  31A7  27C9  3188   	fcall	_setRF_TimeoutCleared
  8951                           
  8952                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8953  08F0  3036               	movlw	54
  8954  08F1  319B  236E  3188   	fcall	_CC2500_WriteCommand
  8955                           
  8956                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8957  08F4  303B               	movlw	59
  8958  08F5  319B  236E         	fcall	_CC2500_WriteCommand
  8959                           
  8960                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8961  08F7  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8962  08F8  0008               	return
  8963  08F9                     __end_of_CC2500_TxData:	
  8964                           
  8965                           	psect	text39
  8966  160B                     __ptext39:	
  8967 ;; *************** function _CC2500_RxData *****************
  8968 ;; Defined at:
  8969 ;;		line 73 in file "../src/CC2500_B1.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  loop_f          1    7[COMMON] unsigned char 
  8974 ;; Return value:  Size  Location     Type
  8975 ;;		None               void
  8976 ;; Registers used:
  8977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        2 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    5
  8990 ;; This function calls:
  8991 ;;		_CC2500_ReadByte
  8992 ;;		_CC2500_ReadStatus
  8993 ;;		_CC2500_WriteByte
  8994 ;;		_CC2500_WriteCommand
  8995 ;;		_RF_Timeout_Counter
  8996 ;;		_setRF_TimeoutCleared
  8997 ;; This function is called by:
  8998 ;;		_setRF_Main
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function _CC2500_RxData
  9004  160B                     _CC2500_RxData:	
  9005                           
  9006                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9007                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9011  160B  0020               	movlb	0	; select bank0
  9012  160C  180D               	btfsc	13,0	;volatile
  9013  160D  0008               	return
  9014                           
  9015                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  9016  160E  303B               	movlw	59
  9017  160F  319D  252C  3196   	fcall	_CC2500_ReadStatus
  9018                           
  9019                           ;CC2500_B1.c: 89: if (s_data != 0) {
  9020  1612  0021               	movlb	1	; select bank1
  9021  1613  086F               	movf	_s_data^(0+128),w
  9022  1614  1903               	btfsc	3,2
  9023  1615  0008               	return
  9024                           
  9025                           ;CC2500_B1.c: 90: RC4 = 0;
  9026  1616  0020               	movlb	0	; select bank0
  9027  1617  120E               	bcf	14,4	;volatile
  9028                           
  9029                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9030  1618  30FF               	movlw	255
  9031  1619  00F6               	movwf	??_CC2500_RxData
  9032  161A  0876               	movf	??_CC2500_RxData,w
  9033  161B  0021               	movlb	1	; select bank1
  9034  161C  00ED               	movwf	_SPI0Buffer^(0+128)
  9035                           
  9036                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9037  161D  2E21               	goto	l10231
  9038  161E                     l10229:	
  9039                           
  9040                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9041  161E  319A  2277  3196   	fcall	_RF_Timeout_Counter
  9042  1621                     l10231:	
  9043  1621  0020               	movlb	0	; select bank0
  9044  1622  1D0E               	btfss	14,2	;volatile
  9045  1623  2E27               	goto	l10235
  9046  1624  0021               	movlb	1	; select bank1
  9047  1625  1F41               	btfss	(_RF1^(0+128)+1),6
  9048  1626  2E1E               	goto	l10229
  9049  1627                     l10235:	
  9050                           
  9051                           ;CC2500_B1.c: 95: };
  9052                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9053  1627  31A7  27C9  3196   	fcall	_setRF_TimeoutCleared
  9054                           
  9055                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9056  162A  319B  2324  3196   	fcall	_CC2500_WriteByte
  9057                           
  9058                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9059  162D  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9060                           
  9061                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9062  1630  0021               	movlb	1	; select bank1
  9063  1631  086D               	movf	_SPI0Buffer^(0+128),w
  9064  1632  00F6               	movwf	??_CC2500_RxData
  9065  1633  0876               	movf	??_CC2500_RxData,w
  9066  1634  00EC               	movwf	_Rx_Length^(0+128)
  9067                           
  9068                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9069  1635  01F7               	clrf	CC2500_RxData@loop_f
  9070  1636                     l10251:	
  9071  1636  086C               	movf	_Rx_Length^(0+128),w
  9072  1637  0277               	subwf	CC2500_RxData@loop_f,w
  9073  1638  1803               	btfsc	3,0
  9074  1639  2E4C               	goto	l10253
  9075                           
  9076                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9077  163A  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9078                           
  9079                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9080  163D  0021               	movlb	1	; select bank1
  9081  163E  086D               	movf	_SPI0Buffer^(0+128),w
  9082  163F  00F6               	movwf	??_CC2500_RxData
  9083  1640  0877               	movf	CC2500_RxData@loop_f,w
  9084  1641  3EA0               	addlw	_RF_Data& (0+255)
  9085  1642  0086               	movwf	6
  9086  1643  3001               	movlw	1	; select bank3/4
  9087  1644  0087               	movwf	7
  9088  1645  0876               	movf	??_CC2500_RxData,w
  9089  1646  0081               	movwf	1
  9090  1647  3001               	movlw	1
  9091  1648  00F6               	movwf	??_CC2500_RxData
  9092  1649  0876               	movf	??_CC2500_RxData,w
  9093  164A  07F7               	addwf	CC2500_RxData@loop_f,f
  9094  164B  2E36               	goto	l10251
  9095  164C                     l10253:	
  9096                           
  9097                           ;CC2500_B1.c: 104: }
  9098                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9099  164C  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9100                           
  9101                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9102  164F  0021               	movlb	1	; select bank1
  9103  1650  086D               	movf	_SPI0Buffer^(0+128),w
  9104  1651  00F6               	movwf	??_CC2500_RxData
  9105  1652  0876               	movf	??_CC2500_RxData,w
  9106  1653  0022               	movlb	2	; select bank2
  9107  1654  00AE               	movwf	_RSSI^(0+256)
  9108                           
  9109                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9110  1655  319B  23F2  3196   	fcall	_CC2500_ReadByte
  9111                           
  9112                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9113  1658  0021               	movlb	1	; select bank1
  9114  1659  086D               	movf	_SPI0Buffer^(0+128),w
  9115  165A  00F6               	movwf	??_CC2500_RxData
  9116  165B  0876               	movf	??_CC2500_RxData,w
  9117  165C  00E8               	movwf	_CRC^(0+128)
  9118                           
  9119                           ;CC2500_B1.c: 109: RC4 = 1;
  9120  165D  0020               	movlb	0	; select bank0
  9121  165E  160E               	bsf	14,4	;volatile
  9122                           
  9123                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9124  165F  0021               	movlb	1	; select bank1
  9125  1660  1BE8               	btfsc	_CRC^(0+128),7
  9126                           
  9127                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9128  1661  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9129                           
  9130                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9131  1662  11C0               	bcf	_RF1^(0+128),3
  9132                           
  9133                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9134  1663  14C0               	bsf	_RF1^(0+128),1
  9135                           
  9136                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9137  1664  3036               	movlw	54
  9138  1665  319B  236E  3196   	fcall	_CC2500_WriteCommand
  9139                           
  9140                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9141  1668  303A               	movlw	58
  9142  1669  319B  236E         	fcall	_CC2500_WriteCommand
  9143  166B  0021               	movlb	1	; select bank1
  9144  166C  0008               	return
  9145  166D                     __end_of_CC2500_RxData:	
  9146                           
  9147                           	psect	text40
  9148  1D2C                     __ptext40:	
  9149 ;; *************** function _CC2500_ReadStatus *****************
  9150 ;; Defined at:
  9151 ;;		line 308 in file "../src/CC2500_B1.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  status_addr     1    wreg     unsigned char 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  status_addr     1    5[COMMON] unsigned char 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;		None               void
  9158 ;; Registers used:
  9159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    4
  9172 ;; This function calls:
  9173 ;;		_CC2500_ReadByte
  9174 ;;		_CC2500_WriteByte
  9175 ;;		_RF_Timeout_Counter
  9176 ;;		_setRF_TimeoutCleared
  9177 ;; This function is called by:
  9178 ;;		_CC2500_RxData
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _CC2500_ReadStatus
  9184  1D2C                     _CC2500_ReadStatus:	
  9185                           
  9186                           ;incstack = 0
  9187                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9188                           ;CC2500_ReadStatus@status_addr stored from wreg
  9189  1D2C  00F5               	movwf	CC2500_ReadStatus@status_addr
  9190                           
  9191                           ;CC2500_B1.c: 309: RC4 = 0;
  9192  1D2D  0020               	movlb	0	; select bank0
  9193  1D2E  120E               	bcf	14,4	;volatile
  9194                           
  9195                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9196  1D2F  0875               	movf	CC2500_ReadStatus@status_addr,w
  9197  1D30  3EC0               	addlw	192
  9198  1D31  00F4               	movwf	??_CC2500_ReadStatus
  9199  1D32  0874               	movf	??_CC2500_ReadStatus,w
  9200  1D33  0021               	movlb	1	; select bank1
  9201  1D34  00ED               	movwf	_SPI0Buffer^(0+128)
  9202                           
  9203                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9204  1D35  2D39               	goto	l9995
  9205  1D36                     l9993:	
  9206                           
  9207                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9208  1D36  319A  2277  319D   	fcall	_RF_Timeout_Counter
  9209  1D39                     l9995:	
  9210  1D39  0020               	movlb	0	; select bank0
  9211  1D3A  1D0E               	btfss	14,2	;volatile
  9212  1D3B  2D3F               	goto	l9999
  9213  1D3C  0021               	movlb	1	; select bank1
  9214  1D3D  1F41               	btfss	(_RF1^(0+128)+1),6
  9215  1D3E  2D36               	goto	l9993
  9216  1D3F                     l9999:	
  9217                           
  9218                           ;CC2500_B1.c: 314: };
  9219                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9220  1D3F  31A7  27C9  319D   	fcall	_setRF_TimeoutCleared
  9221                           
  9222                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9223  1D42  319B  2324  319D   	fcall	_CC2500_WriteByte
  9224                           
  9225                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9226  1D45  319B  23F2         	fcall	_CC2500_ReadByte
  9227                           
  9228                           ;CC2500_B1.c: 319: RC4 = 1;
  9229  1D47  0020               	movlb	0	; select bank0
  9230  1D48  160E               	bsf	14,4	;volatile
  9231                           
  9232                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9233  1D49  0021               	movlb	1	; select bank1
  9234  1D4A  086D               	movf	_SPI0Buffer^(0+128),w
  9235  1D4B  00F4               	movwf	??_CC2500_ReadStatus
  9236  1D4C  0874               	movf	??_CC2500_ReadStatus,w
  9237  1D4D  00EF               	movwf	_s_data^(0+128)
  9238  1D4E  0008               	return
  9239  1D4F                     __end_of_CC2500_ReadStatus:	
  9240                           
  9241                           	psect	text41
  9242  1BF2                     __ptext41:	
  9243 ;; *************** function _CC2500_ReadByte *****************
  9244 ;; Defined at:
  9245 ;;		line 242 in file "../src/CC2500_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  loop_b          1    3[COMMON] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        2 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    3
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_CC2500_RxData
  9270 ;;		_CC2500_ReadStatus
  9271 ;;		_CC2500_ReadREG
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function _CC2500_ReadByte
  9277  1BF2                     _CC2500_ReadByte:	
  9278                           
  9279                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9280                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9284  1BF2  01F3               	clrf	CC2500_ReadByte@loop_b
  9285  1BF3                     L4:	
  9286  1BF3  3008               	movlw	8
  9287  1BF4  0273               	subwf	CC2500_ReadByte@loop_b,w
  9288  1BF5  1803               	btfsc	3,0
  9289  1BF6  0008               	return
  9290                           
  9291                           ;CC2500_B1.c: 245: RC1 = 1;
  9292  1BF7  0020               	movlb	0	; select bank0
  9293  1BF8  148E               	bsf	14,1	;volatile
  9294                           
  9295                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9296  1BF9  1003               	clrc
  9297  1BFA  0021               	movlb	1	; select bank1
  9298  1BFB  0DED               	rlf	_SPI0Buffer^(0+128),f
  9299                           
  9300                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9301  1BFC  0020               	movlb	0	; select bank0
  9302  1BFD  1D0E               	btfss	14,2	;volatile
  9303  1BFE  2C02               	goto	l7231
  9304                           
  9305                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9306  1BFF  0021               	movlb	1	; select bank1
  9307  1C00  146D               	bsf	_SPI0Buffer^(0+128),0
  9308  1C01  2C07               	goto	l7233
  9309  1C02                     l7231:	
  9310                           
  9311                           ;CC2500_B1.c: 249: else
  9312                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9313  1C02  30FE               	movlw	254
  9314  1C03  00F2               	movwf	??_CC2500_ReadByte
  9315  1C04  0872               	movf	??_CC2500_ReadByte,w
  9316  1C05  0021               	movlb	1	; select bank1
  9317  1C06  05ED               	andwf	_SPI0Buffer^(0+128),f
  9318  1C07                     l7233:	
  9319                           
  9320                           ;CC2500_B1.c: 251: RC1 = 0;
  9321  1C07  0020               	movlb	0	; select bank0
  9322  1C08  108E               	bcf	14,1	;volatile
  9323  1C09  3001               	movlw	1
  9324  1C0A  00F2               	movwf	??_CC2500_ReadByte
  9325  1C0B  0872               	movf	??_CC2500_ReadByte,w
  9326  1C0C  07F3               	addwf	CC2500_ReadByte@loop_b,f
  9327  1C0D  2BF3               	goto	L4
  9328  1C0E                     __end_of_CC2500_ReadByte:	
  9329                           
  9330                           	psect	text42
  9331  1A8C                     __ptext42:	
  9332 ;; *************** function _CC2500_PowerOnInitial *****************
  9333 ;; Defined at:
  9334 ;;		line 126 in file "../src/CC2500_B1.c"
  9335 ;; Parameters:    Size  Location     Type
  9336 ;;		None
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;		None               void
  9341 ;; Registers used:
  9342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;Total ram usage:        0 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    6
  9355 ;; This function calls:
  9356 ;;		_CC2500_ClearRXFIFO
  9357 ;;		_CC2500_ClearTXFIFO
  9358 ;;		_CC2500_FrequencyCabr
  9359 ;;		_CC2500_InitPATable
  9360 ;;		_CC2500_InitSetREG
  9361 ;;		_CC2500_PowerRST
  9362 ;;		_CC2500_SIDLEMode
  9363 ;; This function is called by:
  9364 ;;		_main
  9365 ;;		_setRF_Main
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _CC2500_PowerOnInitial
  9371  1A8C                     _CC2500_PowerOnInitial:	
  9372                           
  9373                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9377  1A8C  3192  221E  319A   	fcall	_CC2500_PowerRST
  9378                           
  9379                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9380  1A8F  3188  2001  319A   	fcall	_CC2500_InitSetREG
  9381                           
  9382                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9383  1A92  319C  2448  319A   	fcall	_CC2500_InitPATable
  9384                           
  9385                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9386  1A95  31A7  27D1  319A   	fcall	_CC2500_ClearTXFIFO
  9387                           
  9388                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9389  1A98  31A7  27CD  319A   	fcall	_CC2500_ClearRXFIFO
  9390                           
  9391                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9392  1A9B  3198  2081  319A   	fcall	_CC2500_FrequencyCabr
  9393                           
  9394                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9395  1A9E  3198  2000         	fcall	_CC2500_SIDLEMode
  9396  1AA0  0008               	return
  9397  1AA1                     __end_of_CC2500_PowerOnInitial:	
  9398                           
  9399                           	psect	text43
  9400  1800                     __ptext43:	
  9401 ;; *************** function _CC2500_SIDLEMode *****************
  9402 ;; Defined at:
  9403 ;;		line 216 in file "../src/CC2500_B1.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    5
  9424 ;; This function calls:
  9425 ;;		_CC2500_WriteCommand
  9426 ;; This function is called by:
  9427 ;;		_CC2500_PowerOnInitial
  9428 ;; This function uses a non-reentrant model
  9429 ;;
  9430                           
  9431                           
  9432                           ;psect for function _CC2500_SIDLEMode
  9433  1800                     _CC2500_SIDLEMode:	
  9434                           
  9435                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9439  1800  3036               	movlw	54
  9440  1801  319B  236E         	fcall	_CC2500_WriteCommand
  9441  1803  0008               	return
  9442  1804                     __end_of_CC2500_SIDLEMode:	
  9443                           
  9444                           	psect	text44
  9445  121E                     __ptext44:	
  9446 ;; *************** function _CC2500_PowerRST *****************
  9447 ;; Defined at:
  9448 ;;		line 139 in file "../src/CC2500_B1.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;		None               void
  9455 ;; Registers used:
  9456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;Total ram usage:        1 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    4
  9469 ;; This function calls:
  9470 ;;		_CC2500_WriteByte
  9471 ;;		_DelayTime_1us
  9472 ;;		_RF_Timeout_Counter
  9473 ;;		_setRF_TimeoutCleared
  9474 ;; This function is called by:
  9475 ;;		_CC2500_PowerOnInitial
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _CC2500_PowerRST
  9481  121E                     _CC2500_PowerRST:	
  9482                           
  9483                           ;CC2500_B1.c: 140: RC1 = 0;
  9484                           
  9485                           ;incstack = 0
  9486                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9487  121E  0020               	movlb	0	; select bank0
  9488  121F  108E               	bcf	14,1	;volatile
  9489                           
  9490                           ;CC2500_B1.c: 141: RC0 = 0;
  9491  1220  100E               	bcf	14,0	;volatile
  9492                           
  9493                           ;CC2500_B1.c: 142: RC4 = 1;
  9494  1221  160E               	bsf	14,4	;volatile
  9495                           
  9496                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9497  1222  300A               	movlw	10
  9498  1223  00F2               	movwf	DelayTime_1us@count
  9499  1224  3000               	movlw	0
  9500  1225  00F3               	movwf	DelayTime_1us@count+1
  9501  1226  319D  2574  3192   	fcall	_DelayTime_1us
  9502                           
  9503                           ;CC2500_B1.c: 144: RC4 = 0;
  9504  1229  0020               	movlb	0	; select bank0
  9505  122A  120E               	bcf	14,4	;volatile
  9506                           
  9507                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9508  122B  300A               	movlw	10
  9509  122C  00F2               	movwf	DelayTime_1us@count
  9510  122D  3000               	movlw	0
  9511  122E  00F3               	movwf	DelayTime_1us@count+1
  9512  122F  319D  2574  3192   	fcall	_DelayTime_1us
  9513                           
  9514                           ;CC2500_B1.c: 146: RC4 = 1;
  9515  1232  0020               	movlb	0	; select bank0
  9516  1233  160E               	bsf	14,4	;volatile
  9517                           
  9518                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9519  1234  3028               	movlw	40
  9520  1235  00F2               	movwf	DelayTime_1us@count
  9521  1236  3000               	movlw	0
  9522  1237  00F3               	movwf	DelayTime_1us@count+1
  9523  1238  319D  2574  3192   	fcall	_DelayTime_1us
  9524                           
  9525                           ;CC2500_B1.c: 148: RC4 = 0;
  9526  123B  0020               	movlb	0	; select bank0
  9527  123C  120E               	bcf	14,4	;volatile
  9528                           
  9529                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9530  123D  3030               	movlw	48
  9531  123E  00F8               	movwf	??_CC2500_PowerRST
  9532  123F  0878               	movf	??_CC2500_PowerRST,w
  9533  1240  0021               	movlb	1	; select bank1
  9534  1241  00ED               	movwf	_SPI0Buffer^(0+128)
  9535                           
  9536                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9537  1242  2A46               	goto	l10023
  9538  1243                     l10021:	
  9539                           
  9540                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9541  1243  319A  2277  3192   	fcall	_RF_Timeout_Counter
  9542  1246                     l10023:	
  9543  1246  0020               	movlb	0	; select bank0
  9544  1247  1D0E               	btfss	14,2	;volatile
  9545  1248  2A4C               	goto	l10027
  9546  1249  0021               	movlb	1	; select bank1
  9547  124A  1F41               	btfss	(_RF1^(0+128)+1),6
  9548  124B  2A43               	goto	l10021
  9549  124C                     l10027:	
  9550                           
  9551                           ;CC2500_B1.c: 152: };
  9552                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9553  124C  31A7  27C9  3192   	fcall	_setRF_TimeoutCleared
  9554                           
  9555                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9556  124F  319B  2324  3192   	fcall	_CC2500_WriteByte
  9557                           
  9558                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9559  1252  2A56               	goto	l10033
  9560  1253                     l10031:	
  9561                           
  9562                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9563  1253  319A  2277  3192   	fcall	_RF_Timeout_Counter
  9564  1256                     l10033:	
  9565  1256  0020               	movlb	0	; select bank0
  9566  1257  1D0E               	btfss	14,2	;volatile
  9567  1258  2A5C               	goto	l10037
  9568  1259  0021               	movlb	1	; select bank1
  9569  125A  1F41               	btfss	(_RF1^(0+128)+1),6
  9570  125B  2A53               	goto	l10031
  9571  125C                     l10037:	
  9572                           
  9573                           ;CC2500_B1.c: 157: };
  9574                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9575  125C  31A7  27C9         	fcall	_setRF_TimeoutCleared
  9576                           
  9577                           ;CC2500_B1.c: 159: RC0 = 0;
  9578  125E  0020               	movlb	0	; select bank0
  9579  125F  100E               	bcf	14,0	;volatile
  9580                           
  9581                           ;CC2500_B1.c: 160: RC4 = 1;
  9582  1260  160E               	bsf	14,4	;volatile
  9583  1261  0008               	return
  9584  1262                     __end_of_CC2500_PowerRST:	
  9585                           
  9586                           	psect	text45
  9587  0801                     __ptext45:	
  9588 ;; *************** function _CC2500_InitSetREG *****************
  9589 ;; Defined at:
  9590 ;;		line 166 in file "../src/CC2500_B1.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;		None
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9595 ;;  temp2           1    1[BANK0 ] unsigned char 
  9596 ;;  temp1           1    0[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        4 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    5
  9613 ;; This function calls:
  9614 ;;		_CC2500_WriteREG
  9615 ;; This function is called by:
  9616 ;;		_CC2500_PowerOnInitial
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _CC2500_InitSetREG
  9622  0801                     _CC2500_InitSetREG:	
  9623                           
  9624                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9625                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9626                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9627                           
  9628                           ;incstack = 0
  9629                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9630  0801  0020               	movlb	0	; select bank0
  9631  0802  01A2               	clrf	CC2500_InitSetREG@loop_c
  9632  0803                     L5:	
  9633  0803  302F               	movlw	47
  9634  0804  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9635  0805  1803               	btfsc	3,0
  9636  0806  0008               	return
  9637                           
  9638                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9639  0807  0822               	movf	CC2500_InitSetREG@loop_c,w
  9640  0808  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9641  0809  0084               	movwf	4
  9642  080A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9643  080B  1803               	skipnc
  9644  080C  3E01               	addlw	1
  9645  080D  0085               	movwf	5
  9646  080E  0800               	movf	0,w	;code access
  9647  080F  00F7               	movwf	??_CC2500_InitSetREG
  9648  0810  0877               	movf	??_CC2500_InitSetREG,w
  9649  0811  00A0               	movwf	CC2500_InitSetREG@temp1
  9650                           
  9651                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9652  0812  0822               	movf	CC2500_InitSetREG@loop_c,w
  9653  0813  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9654  0814  0084               	movwf	4
  9655  0815  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9656  0816  1803               	skipnc
  9657  0817  3E01               	addlw	1
  9658  0818  0085               	movwf	5
  9659  0819  0800               	movf	0,w	;code access
  9660  081A  00F7               	movwf	??_CC2500_InitSetREG
  9661  081B  0877               	movf	??_CC2500_InitSetREG,w
  9662  081C  00A1               	movwf	CC2500_InitSetREG@temp2
  9663                           
  9664                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9665  081D  0821               	movf	CC2500_InitSetREG@temp2,w
  9666  081E  00F7               	movwf	??_CC2500_InitSetREG
  9667  081F  0877               	movf	??_CC2500_InitSetREG,w
  9668  0820  00F4               	movwf	CC2500_WriteREG@value
  9669  0821  0820               	movf	CC2500_InitSetREG@temp1,w
  9670  0822  319D  250A  3188   	fcall	_CC2500_WriteREG
  9671  0825  3001               	movlw	1
  9672  0826  00F7               	movwf	??_CC2500_InitSetREG
  9673  0827  0877               	movf	??_CC2500_InitSetREG,w
  9674  0828  0020               	movlb	0	; select bank0
  9675  0829  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9676  082A  2803               	goto	L5
  9677  082B                     __end_of_CC2500_InitSetREG:	
  9678                           
  9679                           	psect	text46
  9680  1C48                     __ptext46:	
  9681 ;; *************** function _CC2500_InitPATable *****************
  9682 ;; Defined at:
  9683 ;;		line 181 in file "../src/CC2500_B1.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  loop_d          1    9[COMMON] unsigned char 
  9688 ;;  temp            1    8[COMMON] unsigned char 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;		None               void
  9691 ;; Registers used:
  9692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        3 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    5
  9705 ;; This function calls:
  9706 ;;		_CC2500_WriteREG
  9707 ;; This function is called by:
  9708 ;;		_CC2500_PowerOnInitial
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _CC2500_InitPATable
  9714  1C48                     _CC2500_InitPATable:	
  9715                           
  9716                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9717                           ;CC2500_B1.c: 183: unsigned char temp;
  9718                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9722  1C48  01F9               	clrf	CC2500_InitPATable@loop_d
  9723  1C49                     L6:	
  9724  1C49  3008               	movlw	8
  9725  1C4A  0279               	subwf	CC2500_InitPATable@loop_d,w
  9726  1C4B  1803               	btfsc	3,0
  9727  1C4C  0008               	return
  9728                           
  9729                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9730  1C4D  0879               	movf	CC2500_InitPATable@loop_d,w
  9731  1C4E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9732  1C4F  0084               	movwf	4
  9733  1C50  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9734  1C51  1803               	skipnc
  9735  1C52  3E01               	addlw	1
  9736  1C53  0085               	movwf	5
  9737  1C54  0800               	movf	0,w	;code access
  9738  1C55  00F7               	movwf	??_CC2500_InitPATable
  9739  1C56  0877               	movf	??_CC2500_InitPATable,w
  9740  1C57  00F8               	movwf	CC2500_InitPATable@temp
  9741                           
  9742                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9743  1C58  0878               	movf	CC2500_InitPATable@temp,w
  9744  1C59  00F7               	movwf	??_CC2500_InitPATable
  9745  1C5A  0877               	movf	??_CC2500_InitPATable,w
  9746  1C5B  00F4               	movwf	CC2500_WriteREG@value
  9747  1C5C  303E               	movlw	62
  9748  1C5D  319D  250A  319C   	fcall	_CC2500_WriteREG
  9749  1C60  3001               	movlw	1
  9750  1C61  00F7               	movwf	??_CC2500_InitPATable
  9751  1C62  0877               	movf	??_CC2500_InitPATable,w
  9752  1C63  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9753  1C64  2C49               	goto	L6
  9754  1C65                     __end_of_CC2500_InitPATable:	
  9755                           
  9756                           	psect	text47
  9757  1D0A                     __ptext47:	
  9758 ;; *************** function _CC2500_WriteREG *****************
  9759 ;; Defined at:
  9760 ;;		line 258 in file "../src/CC2500_B1.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;  w_addr          1    wreg     unsigned char 
  9763 ;;  value           1    4[COMMON] unsigned char 
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;  w_addr          1    6[COMMON] unsigned char 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;		None               void
  9768 ;; Registers used:
  9769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9775 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;Total ram usage:        3 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    4
  9782 ;; This function calls:
  9783 ;;		_CC2500_WriteByte
  9784 ;;		_RF_Timeout_Counter
  9785 ;;		_setRF_TimeoutCleared
  9786 ;; This function is called by:
  9787 ;;		_CC2500_InitSetREG
  9788 ;;		_CC2500_InitPATable
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           
  9793                           ;psect for function _CC2500_WriteREG
  9794  1D0A                     _CC2500_WriteREG:	
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9798                           ;CC2500_WriteREG@w_addr stored from wreg
  9799  1D0A  00F6               	movwf	CC2500_WriteREG@w_addr
  9800                           
  9801                           ;CC2500_B1.c: 259: RC4 = 0;
  9802  1D0B  0020               	movlb	0	; select bank0
  9803  1D0C  120E               	bcf	14,4	;volatile
  9804                           
  9805                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9806  1D0D  0876               	movf	CC2500_WriteREG@w_addr,w
  9807  1D0E  00F5               	movwf	??_CC2500_WriteREG
  9808  1D0F  0875               	movf	??_CC2500_WriteREG,w
  9809  1D10  0021               	movlb	1	; select bank1
  9810  1D11  00ED               	movwf	_SPI0Buffer^(0+128)
  9811                           
  9812                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9813  1D12  2D16               	goto	l9913
  9814  1D13                     l9911:	
  9815                           
  9816                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9817  1D13  319A  2277  319D   	fcall	_RF_Timeout_Counter
  9818  1D16                     l9913:	
  9819  1D16  0020               	movlb	0	; select bank0
  9820  1D17  1D0E               	btfss	14,2	;volatile
  9821  1D18  2D1C               	goto	l9917
  9822  1D19  0021               	movlb	1	; select bank1
  9823  1D1A  1F41               	btfss	(_RF1^(0+128)+1),6
  9824  1D1B  2D13               	goto	l9911
  9825  1D1C                     l9917:	
  9826                           
  9827                           ;CC2500_B1.c: 263: };
  9828                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9829  1D1C  31A7  27C9  319D   	fcall	_setRF_TimeoutCleared
  9830                           
  9831                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9832  1D1F  319B  2324  319D   	fcall	_CC2500_WriteByte
  9833                           
  9834                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9835  1D22  0874               	movf	CC2500_WriteREG@value,w
  9836  1D23  00F5               	movwf	??_CC2500_WriteREG
  9837  1D24  0875               	movf	??_CC2500_WriteREG,w
  9838  1D25  0021               	movlb	1	; select bank1
  9839  1D26  00ED               	movwf	_SPI0Buffer^(0+128)
  9840                           
  9841                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9842  1D27  319B  2324         	fcall	_CC2500_WriteByte
  9843                           
  9844                           ;CC2500_B1.c: 269: RC4 = 1;
  9845  1D29  0020               	movlb	0	; select bank0
  9846  1D2A  160E               	bsf	14,4	;volatile
  9847  1D2B  0008               	return
  9848  1D2C                     __end_of_CC2500_WriteREG:	
  9849                           
  9850                           	psect	text48
  9851  1881                     __ptext48:	
  9852 ;; *************** function _CC2500_FrequencyCabr *****************
  9853 ;; Defined at:
  9854 ;;		line 208 in file "../src/CC2500_B1.c"
  9855 ;; Parameters:    Size  Location     Type
  9856 ;;		None
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;		None
  9859 ;; Return value:  Size  Location     Type
  9860 ;;		None               void
  9861 ;; Registers used:
  9862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9863 ;; Tracked objects:
  9864 ;;		On entry : 0/0
  9865 ;;		On exit  : 0/0
  9866 ;;		Unchanged: 0/0
  9867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;Total ram usage:        0 bytes
  9873 ;; Hardware stack levels used:    1
  9874 ;; Hardware stack levels required when called:    5
  9875 ;; This function calls:
  9876 ;;		_CC2500_WriteCommand
  9877 ;;		_DelayTime_1us
  9878 ;; This function is called by:
  9879 ;;		_CC2500_PowerOnInitial
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           
  9884                           ;psect for function _CC2500_FrequencyCabr
  9885  1881                     _CC2500_FrequencyCabr:	
  9886                           
  9887                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9888                           
  9889                           ;incstack = 0
  9890                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9891  1881  3033               	movlw	51
  9892  1882  319B  236E  3198   	fcall	_CC2500_WriteCommand
  9893                           
  9894                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9895  1885  30E8               	movlw	232
  9896  1886  00F2               	movwf	DelayTime_1us@count
  9897  1887  3003               	movlw	3
  9898  1888  00F3               	movwf	DelayTime_1us@count+1
  9899  1889  319D  2574         	fcall	_DelayTime_1us
  9900  188B  0008               	return
  9901  188C                     __end_of_CC2500_FrequencyCabr:	
  9902                           
  9903                           	psect	text49
  9904  1D74                     __ptext49:	
  9905 ;; *************** function _DelayTime_1us *****************
  9906 ;; Defined at:
  9907 ;;		line 327 in file "../src/CC2500_B1.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  count           2    2[COMMON] int 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  j               2    6[COMMON] unsigned int 
  9912 ;;  i               2    4[COMMON] unsigned int 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		wreg, status,2
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        6 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    3
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_CC2500_PowerRST
  9933 ;;		_CC2500_FrequencyCabr
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _DelayTime_1us
  9939  1D74                     _DelayTime_1us:	
  9940                           
  9941                           ;CC2500_B1.c: 328: unsigned int i, j;
  9942                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9946  1D74  3001               	movlw	1
  9947  1D75  00F4               	movwf	DelayTime_1us@i
  9948  1D76  3000               	movlw	0
  9949  1D77  00F5               	movwf	DelayTime_1us@i+1
  9950  1D78                     l375:	
  9951  1D78  0873               	movf	DelayTime_1us@count+1,w
  9952  1D79  0275               	subwf	DelayTime_1us@i+1,w
  9953  1D7A  1D03               	skipz
  9954  1D7B  2D7E               	goto	u6565
  9955  1D7C  0872               	movf	DelayTime_1us@count,w
  9956  1D7D  0274               	subwf	DelayTime_1us@i,w
  9957  1D7E                     u6565:	
  9958  1D7E  1803               	btfsc	3,0
  9959  1D7F  0008               	return
  9960                           
  9961                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9962  1D80  01F6               	clrf	DelayTime_1us@j
  9963  1D81  01F7               	clrf	DelayTime_1us@j+1
  9964  1D82  3000               	movlw	0
  9965  1D83  0277               	subwf	DelayTime_1us@j+1,w
  9966  1D84  3002               	movlw	2
  9967  1D85  1903               	skipnz
  9968  1D86  0276               	subwf	DelayTime_1us@j,w
  9969  1D87  1803               	btfsc	3,0
  9970  1D88  2D94               	goto	l7247
  9971  1D89                     l7245:	
  9972  1D89  3001               	movlw	1
  9973  1D8A  07F6               	addwf	DelayTime_1us@j,f
  9974  1D8B  3000               	movlw	0
  9975  1D8C  3DF7               	addwfc	DelayTime_1us@j+1,f
  9976  1D8D  3000               	movlw	0
  9977  1D8E  0277               	subwf	DelayTime_1us@j+1,w
  9978  1D8F  3002               	movlw	2
  9979  1D90  1903               	skipnz
  9980  1D91  0276               	subwf	DelayTime_1us@j,w
  9981  1D92  1C03               	skipc
  9982  1D93  2D89               	goto	l7245
  9983  1D94                     l7247:	
  9984  1D94  3001               	movlw	1
  9985  1D95  07F4               	addwf	DelayTime_1us@i,f
  9986  1D96  3000               	movlw	0
  9987  1D97  3DF5               	addwfc	DelayTime_1us@i+1,f
  9988  1D98  2D78               	goto	l375
  9989  1D99                     __end_of_DelayTime_1us:	
  9990                           
  9991                           	psect	text50
  9992  27D1                     __ptext50:	
  9993 ;; *************** function _CC2500_ClearTXFIFO *****************
  9994 ;; Defined at:
  9995 ;;		line 194 in file "../src/CC2500_B1.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;		None               void
 10002 ;; Registers used:
 10003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10004 ;; Tracked objects:
 10005 ;;		On entry : 0/0
 10006 ;;		On exit  : 0/0
 10007 ;;		Unchanged: 0/0
 10008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    5
 10016 ;; This function calls:
 10017 ;;		_CC2500_WriteCommand
 10018 ;; This function is called by:
 10019 ;;		_CC2500_PowerOnInitial
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _CC2500_ClearTXFIFO
 10025  27D1                     _CC2500_ClearTXFIFO:	
 10026                           
 10027                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10031  27D1  303B               	movlw	59
 10032  27D2  319B  236E         	fcall	_CC2500_WriteCommand
 10033  27D4  0008               	return
 10034  27D5                     __end_of_CC2500_ClearTXFIFO:	
 10035                           
 10036                           	psect	text51
 10037  27CD                     __ptext51:	
 10038 ;; *************** function _CC2500_ClearRXFIFO *****************
 10039 ;; Defined at:
 10040 ;;		line 201 in file "../src/CC2500_B1.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;		None
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;		None               void
 10047 ;; Registers used:
 10048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        0 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		_CC2500_WriteCommand
 10063 ;; This function is called by:
 10064 ;;		_CC2500_PowerOnInitial
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _CC2500_ClearRXFIFO
 10070  27CD                     _CC2500_ClearRXFIFO:	
 10071                           
 10072                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10076  27CD  303A               	movlw	58
 10077  27CE  319B  236E         	fcall	_CC2500_WriteCommand
 10078  27D0  0008               	return
 10079  27D1                     __end_of_CC2500_ClearRXFIFO:	
 10080                           
 10081                           	psect	text52
 10082  1B6E                     __ptext52:	
 10083 ;; *************** function _CC2500_WriteCommand *****************
 10084 ;; Defined at:
 10085 ;;		line 292 in file "../src/CC2500_B1.c"
 10086 ;; Parameters:    Size  Location     Type
 10087 ;;  command         1    wreg     unsigned char 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  command         1    5[COMMON] unsigned char 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;		None               void
 10092 ;; Registers used:
 10093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;Total ram usage:        2 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    4
 10106 ;; This function calls:
 10107 ;;		_CC2500_WriteByte
 10108 ;;		_RF_Timeout_Counter
 10109 ;;		_setRF_TimeoutCleared
 10110 ;; This function is called by:
 10111 ;;		_CC2500_TxData
 10112 ;;		_CC2500_RxData
 10113 ;;		_CC2500_ClearTXFIFO
 10114 ;;		_CC2500_ClearRXFIFO
 10115 ;;		_CC2500_FrequencyCabr
 10116 ;;		_CC2500_SIDLEMode
 10117 ;;		_setRF_Main
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           
 10122                           ;psect for function _CC2500_WriteCommand
 10123  1B6E                     _CC2500_WriteCommand:	
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10127                           ;CC2500_WriteCommand@command stored from wreg
 10128  1B6E  00F5               	movwf	CC2500_WriteCommand@command
 10129                           
 10130                           ;CC2500_B1.c: 293: RC4 = 0;
 10131  1B6F  0020               	movlb	0	; select bank0
 10132  1B70  120E               	bcf	14,4	;volatile
 10133                           
 10134                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10135  1B71  0875               	movf	CC2500_WriteCommand@command,w
 10136  1B72  00F4               	movwf	??_CC2500_WriteCommand
 10137  1B73  0874               	movf	??_CC2500_WriteCommand,w
 10138  1B74  0021               	movlb	1	; select bank1
 10139  1B75  00ED               	movwf	_SPI0Buffer^(0+128)
 10140                           
 10141                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10142  1B76  2B7A               	goto	l9897
 10143  1B77                     l9895:	
 10144                           
 10145                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10146  1B77  319A  2277  319B   	fcall	_RF_Timeout_Counter
 10147  1B7A                     l9897:	
 10148  1B7A  0020               	movlb	0	; select bank0
 10149  1B7B  1D0E               	btfss	14,2	;volatile
 10150  1B7C  2B80               	goto	l9901
 10151  1B7D  0021               	movlb	1	; select bank1
 10152  1B7E  1F41               	btfss	(_RF1^(0+128)+1),6
 10153  1B7F  2B77               	goto	l9895
 10154  1B80                     l9901:	
 10155                           
 10156                           ;CC2500_B1.c: 298: };
 10157                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10158  1B80  31A7  27C9  319B   	fcall	_setRF_TimeoutCleared
 10159                           
 10160                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10161  1B83  319B  2324         	fcall	_CC2500_WriteByte
 10162                           
 10163                           ;CC2500_B1.c: 302: RC4 = 1;
 10164  1B85  0020               	movlb	0	; select bank0
 10165  1B86  160E               	bsf	14,4	;volatile
 10166  1B87  0008               	return
 10167  1B88                     __end_of_CC2500_WriteCommand:	
 10168                           
 10169                           	psect	text53
 10170  27C9                     __ptext53:	
 10171 ;; *************** function _setRF_TimeoutCleared *****************
 10172 ;; Defined at:
 10173 ;;		line 150 in file "../src/RF_Control_B1.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;		None
 10176 ;; Auto vars:     Size  Location     Type
 10177 ;;		None
 10178 ;; Return value:  Size  Location     Type
 10179 ;;		None               void
 10180 ;; Registers used:
 10181 ;;		status,2
 10182 ;; Tracked objects:
 10183 ;;		On entry : 0/0
 10184 ;;		On exit  : 0/0
 10185 ;;		Unchanged: 0/0
 10186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;Total ram usage:        0 bytes
 10192 ;; Hardware stack levels used:    1
 10193 ;; Hardware stack levels required when called:    3
 10194 ;; This function calls:
 10195 ;;		Nothing
 10196 ;; This function is called by:
 10197 ;;		_CC2500_TxData
 10198 ;;		_CC2500_RxData
 10199 ;;		_CC2500_PowerRST
 10200 ;;		_CC2500_WriteREG
 10201 ;;		_CC2500_WriteCommand
 10202 ;;		_CC2500_ReadStatus
 10203 ;;		_CC2500_ReadREG
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           
 10208                           ;psect for function _setRF_TimeoutCleared
 10209  27C9                     _setRF_TimeoutCleared:	
 10210                           
 10211                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
 10212                           
 10213                           ;incstack = 0
 10214                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10215  27C9  0021               	movlb	1	; select bank1
 10216  27CA  01CD               	clrf	(_RF1^(0+128)+13)
 10217  27CB  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10218  27CC  0008               	return
 10219  27CD                     __end_of_setRF_TimeoutCleared:	
 10220                           
 10221                           	psect	text54
 10222  1A77                     __ptext54:	
 10223 ;; *************** function _RF_Timeout_Counter *****************
 10224 ;; Defined at:
 10225 ;;		line 142 in file "../src/RF_Control_B1.c"
 10226 ;; Parameters:    Size  Location     Type
 10227 ;;		None
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;		None
 10230 ;; Return value:  Size  Location     Type
 10231 ;;		None               void
 10232 ;; Registers used:
 10233 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;Total ram usage:        0 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    3
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_CC2500_TxData
 10250 ;;		_CC2500_RxData
 10251 ;;		_CC2500_PowerRST
 10252 ;;		_CC2500_WriteREG
 10253 ;;		_CC2500_WriteCommand
 10254 ;;		_CC2500_ReadStatus
 10255 ;;		_CC2500_ReadREG
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           
 10260                           ;psect for function _RF_Timeout_Counter
 10261  1A77                     _RF_Timeout_Counter:	
 10262                           
 10263                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
 10264                           
 10265                           ;incstack = 0
 10266                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10267  1A77  3001               	movlw	1
 10268  1A78  0021               	movlb	1	; select bank1
 10269  1A79  07CD               	addwf	(_RF1^(0+128)+13),f
 10270  1A7A  3000               	movlw	0
 10271  1A7B  3DCE               	addwfc	((_RF1+1)^(0+128)+13),f
 10272                           
 10273                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
 10274  1A7C  300D               	movlw	13
 10275  1A7D  3EC0               	addlw	_RF1& (0+255)
 10276  1A7E  0086               	movwf	6
 10277  1A7F  0187               	clrf	7
 10278  1A80  3F40               	moviw [0]fsr1
 10279  1A81  3AA8               	xorlw	168
 10280  1A82  1D03               	skipz
 10281  1A83  2A86               	goto	u10705
 10282  1A84  3F41               	moviw [1]fsr1
 10283  1A85  3A61               	xorlw	97
 10284  1A86                     u10705:	
 10285  1A86  1D03               	skipz
 10286  1A87  0008               	return
 10287                           
 10288                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10289  1A88  01CD               	clrf	(_RF1^(0+128)+13)
 10290  1A89  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10291                           
 10292                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
 10293  1A8A  1741               	bsf	(_RF1^(0+128)+1),6
 10294  1A8B  0008               	return
 10295  1A8C                     __end_of_RF_Timeout_Counter:	
 10296                           
 10297                           	psect	text55
 10298  1B24                     __ptext55:	
 10299 ;; *************** function _CC2500_WriteByte *****************
 10300 ;; Defined at:
 10301 ;;		line 226 in file "../src/CC2500_B1.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;  loop_a          1    3[COMMON] unsigned char 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;		None               void
 10308 ;; Registers used:
 10309 ;;		wreg, status,2, status,0
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:        2 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:    3
 10322 ;; This function calls:
 10323 ;;		Nothing
 10324 ;; This function is called by:
 10325 ;;		_CC2500_TxData
 10326 ;;		_CC2500_RxData
 10327 ;;		_CC2500_PowerRST
 10328 ;;		_CC2500_WriteREG
 10329 ;;		_CC2500_WriteCommand
 10330 ;;		_CC2500_ReadStatus
 10331 ;;		_CC2500_ReadREG
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _CC2500_WriteByte
 10337  1B24                     _CC2500_WriteByte:	
 10338                           
 10339                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10340                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10344  1B24  01F3               	clrf	CC2500_WriteByte@loop_a
 10345  1B25                     L7:	
 10346  1B25  3008               	movlw	8
 10347  1B26  0273               	subwf	CC2500_WriteByte@loop_a,w
 10348  1B27  1803               	btfsc	3,0
 10349  1B28  0008               	return
 10350                           
 10351                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10352  1B29  0021               	movlb	1	; select bank1
 10353  1B2A  1FED               	btfss	_SPI0Buffer^(0+128),7
 10354  1B2B  2B2F               	goto	l331
 10355                           
 10356                           ;CC2500_B1.c: 230: RC0 = 1;
 10357  1B2C  0020               	movlb	0	; select bank0
 10358  1B2D  140E               	bsf	14,0	;volatile
 10359  1B2E  2B31               	goto	l332
 10360  1B2F                     l331:	
 10361                           
 10362                           ;CC2500_B1.c: 231: else
 10363                           ;CC2500_B1.c: 232: RC0 = 0;
 10364  1B2F  0020               	movlb	0	; select bank0
 10365  1B30  100E               	bcf	14,0	;volatile
 10366  1B31                     l332:	
 10367                           
 10368                           ;CC2500_B1.c: 233: RC1 = 1;
 10369  1B31  148E               	bsf	14,1	;volatile
 10370                           
 10371                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10372  1B32  1003               	clrc
 10373  1B33  0021               	movlb	1	; select bank1
 10374  1B34  0DED               	rlf	_SPI0Buffer^(0+128),f
 10375                           
 10376                           ;CC2500_B1.c: 235: RC1 = 0;
 10377  1B35  0020               	movlb	0	; select bank0
 10378  1B36  108E               	bcf	14,1	;volatile
 10379  1B37  3001               	movlw	1
 10380  1B38  00F2               	movwf	??_CC2500_WriteByte
 10381  1B39  0872               	movf	??_CC2500_WriteByte,w
 10382  1B3A  07F3               	addwf	CC2500_WriteByte@loop_a,f
 10383  1B3B  2B25               	goto	L7
 10384  1B3C                     __end_of_CC2500_WriteByte:	
 10385                           
 10386                           	psect	text56
 10387  27B9                     __ptext56:	
 10388 ;; *************** function _RF_Initialization *****************
 10389 ;; Defined at:
 10390 ;;		line 9 in file "../src/RF_Control_B1.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;		None
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;		None
 10395 ;; Return value:  Size  Location     Type
 10396 ;;		None               void
 10397 ;; Registers used:
 10398 ;;		wreg, status,2, status,0, pclath, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;Total ram usage:        0 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    4
 10411 ;; This function calls:
 10412 ;;		_setRF_Initialization
 10413 ;; This function is called by:
 10414 ;;		_main
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           
 10419                           ;psect for function _RF_Initialization
 10420  27B9                     _RF_Initialization:	
 10421                           
 10422                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10423                           
 10424                           ;incstack = 0
 10425                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10426  27B9  3198  2056         	fcall	_setRF_Initialization
 10427  27BB  0008               	return
 10428  27BC                     __end_of_RF_Initialization:	
 10429                           
 10430                           	psect	text57
 10431  1856                     __ptext57:	
 10432 ;; *************** function _setRF_Initialization *****************
 10433 ;; Defined at:
 10434 ;;		line 17 in file "../src/RF_Control_B1.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;		None               void
 10441 ;; Registers used:
 10442 ;;		wreg
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;Total ram usage:        1 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    3
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_RF_Initialization
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _setRF_Initialization
 10464  1856                     _setRF_Initialization:	
 10465                           
 10466                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _setRF_Initialization: [wreg]
 10470  1856  3015               	movlw	21
 10471  1857  00F2               	movwf	??_setRF_Initialization
 10472  1858  0872               	movf	??_setRF_Initialization,w
 10473  1859  0021               	movlb	1	; select bank1
 10474  185A  00EE               	movwf	_Tx_Length^(0+128)
 10475                           
 10476                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10477  185B  30C8               	movlw	200
 10478  185C  00C8               	movwf	(_RF1^(0+128)+8)
 10479  185D  3000               	movlw	0
 10480  185E  00C9               	movwf	(_RF1^(0+128)+9)
 10481  185F  0008               	return
 10482  1860                     __end_of_setRF_Initialization:	
 10483                           
 10484                           	psect	text58
 10485  19FD                     __ptext58:	
 10486 ;; *************** function _Mcu_Initialization *****************
 10487 ;; Defined at:
 10488 ;;		line 30 in file "../src/MCU_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg, status,2, status,0, pclath, cstack
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        0 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    4
 10509 ;; This function calls:
 10510 ;;		_ADC_Set
 10511 ;;		_Fosc_Set
 10512 ;;		_IOC_Set
 10513 ;;		_IO_Set
 10514 ;;		_TMR1_Set
 10515 ;;		_WDT_Set
 10516 ;; This function is called by:
 10517 ;;		_main
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _Mcu_Initialization
 10523  19FD                     _Mcu_Initialization:	
 10524                           
 10525                           ;MCU_B1.c: 32: Fosc_Set();
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10529  19FD  31A7  27C5  3199   	fcall	_Fosc_Set
 10530                           
 10531                           ;MCU_B1.c: 34: IO_Set();
 10532  1A00  319B  2354  3199   	fcall	_IO_Set
 10533                           
 10534                           ;MCU_B1.c: 36: ;;
 10535                           ;MCU_B1.c: 38: TMR1_Set();
 10536  1A03  3198  20D3  3199   	fcall	_TMR1_Set
 10537                           
 10538                           ;MCU_B1.c: 40: ADC_Set();
 10539  1A06  3198  200B  3199   	fcall	_ADC_Set
 10540                           
 10541                           ;MCU_B1.c: 42: ;;
 10542                           ;MCU_B1.c: 44: ;;
 10543                           ;MCU_B1.c: 46: IOC_Set();
 10544  1A09  3198  2076  3199   	fcall	_IOC_Set
 10545                           
 10546                           ;MCU_B1.c: 48: ;;
 10547                           ;MCU_B1.c: 50: ;;
 10548                           ;MCU_B1.c: 52: WDT_Set();
 10549  1A0C  3198  204C         	fcall	_WDT_Set
 10550  1A0E  0008               	return
 10551  1A0F                     __end_of_Mcu_Initialization:	
 10552                           
 10553                           	psect	text59
 10554  184C                     __ptext59:	
 10555 ;; *************** function _WDT_Set *****************
 10556 ;; Defined at:
 10557 ;;		line 1107 in file "../src/MCU_B1.c"
 10558 ;; Parameters:    Size  Location     Type
 10559 ;;		None
 10560 ;; Auto vars:     Size  Location     Type
 10561 ;;		None
 10562 ;; Return value:  Size  Location     Type
 10563 ;;		None               void
 10564 ;; Registers used:
 10565 ;;		wreg
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;Total ram usage:        1 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    3
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_Mcu_Initialization
 10582 ;; This function uses a non-reentrant model
 10583 ;;
 10584                           
 10585                           
 10586                           ;psect for function _WDT_Set
 10587  184C                     _WDT_Set:	
 10588                           
 10589                           ;MCU_B1.c: 1114: WDTCON = 0b00010111;;
 10590                           
 10591                           ;incstack = 0
 10592                           ; Regs used in _WDT_Set: [wreg]
 10593  184C  3017               	movlw	23
 10594  184D  0021               	movlb	1	; select bank1
 10595  184E  0097               	movwf	23	;volatile
 10596                           
 10597                           ;MCU_B1.c: 1116: WDT.Enable = 1;
 10598  184F  0022               	movlb	2	; select bank2
 10599  1850  142A               	bsf	_WDT^(0+256),0
 10600                           
 10601                           ;MCU_B1.c: 1117: WDT.Timer = 10;
 10602  1851  300A               	movlw	10
 10603  1852  00F2               	movwf	??_WDT_Set
 10604  1853  0872               	movf	??_WDT_Set,w
 10605  1854  00AB               	movwf	(_WDT^(0+256)+1)
 10606  1855  0008               	return
 10607  1856                     __end_of_WDT_Set:	
 10608                           
 10609                           	psect	text60
 10610  18D3                     __ptext60:	
 10611 ;; *************** function _TMR1_Set *****************
 10612 ;; Defined at:
 10613 ;;		line 226 in file "../src/MCU_B1.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;		None               void
 10620 ;; Registers used:
 10621 ;;		wreg
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;Total ram usage:        0 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:    3
 10634 ;; This function calls:
 10635 ;;		Nothing
 10636 ;; This function is called by:
 10637 ;;		_Mcu_Initialization
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           
 10642                           ;psect for function _TMR1_Set
 10643  18D3                     _TMR1_Set:	
 10644                           
 10645                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10646                           
 10647                           ;incstack = 0
 10648                           ; Regs used in _TMR1_Set: [wreg]
 10649  18D3  3041               	movlw	65
 10650  18D4  0020               	movlb	0	; select bank0
 10651  18D5  0098               	movwf	24	;volatile
 10652                           
 10653                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10654  18D6  30FA               	movlw	250
 10655  18D7  0097               	movwf	23	;volatile
 10656                           
 10657                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10658  18D8  3038               	movlw	56
 10659  18D9  0096               	movwf	22	;volatile
 10660                           
 10661                           ;MCU_B1.c: 230: TMR1IE = 1;
 10662  18DA  0021               	movlb	1	; select bank1
 10663  18DB  1411               	bsf	17,0	;volatile
 10664                           
 10665                           ;MCU_B1.c: 231: PEIE = 1;
 10666  18DC  170B               	bsf	11,6	;volatile
 10667                           
 10668                           ;MCU_B1.c: 232: GIE = 1;
 10669  18DD  178B               	bsf	11,7	;volatile
 10670  18DE  0008               	return
 10671  18DF                     __end_of_TMR1_Set:	
 10672                           
 10673                           	psect	text61
 10674  1B54                     __ptext61:	
 10675 ;; *************** function _IO_Set *****************
 10676 ;; Defined at:
 10677 ;;		line 60 in file "../src/MCU_B1.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;		None               void
 10684 ;; Registers used:
 10685 ;;		wreg, status,2
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    3
 10698 ;; This function calls:
 10699 ;;		Nothing
 10700 ;; This function is called by:
 10701 ;;		_Mcu_Initialization
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           
 10706                           ;psect for function _IO_Set
 10707  1B54                     _IO_Set:	
 10708                           
 10709                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10710                           
 10711                           ;incstack = 0
 10712                           ; Regs used in _IO_Set: [wreg+status,2]
 10713  1B54  3077               	movlw	119
 10714  1B55  0021               	movlb	1	; select bank1
 10715  1B56  008C               	movwf	12	;volatile
 10716                           
 10717                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10718  1B57  3007               	movlw	7
 10719  1B58  008D               	movwf	13	;volatile
 10720                           
 10721                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10722  1B59  300C               	movlw	12
 10723  1B5A  008E               	movwf	14	;volatile
 10724                           
 10725                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10726  1B5B  0022               	movlb	2	; select bank2
 10727  1B5C  018C               	clrf	12	;volatile
 10728                           
 10729                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10730  1B5D  018D               	clrf	13	;volatile
 10731                           
 10732                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10733  1B5E  018E               	clrf	14	;volatile
 10734                           
 10735                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10736  1B5F  3022               	movlw	34
 10737  1B60  0023               	movlb	3	; select bank3
 10738  1B61  008C               	movwf	12	;volatile
 10739                           
 10740                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10741  1B62  018D               	clrf	13	;volatile
 10742                           
 10743                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10744  1B63  018E               	clrf	14	;volatile
 10745                           
 10746                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10747  1B64  3077               	movlw	119
 10748  1B65  0020               	movlb	0	; select bank0
 10749  1B66  008C               	movwf	12	;volatile
 10750                           
 10751                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10752  1B67  3007               	movlw	7
 10753  1B68  008D               	movwf	13	;volatile
 10754                           
 10755                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10756  1B69  300C               	movlw	12
 10757  1B6A  008E               	movwf	14	;volatile
 10758                           
 10759                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10760  1B6B  0024               	movlb	4	; select bank4
 10761  1B6C  018D               	clrf	13	;volatile
 10762  1B6D  0008               	return
 10763  1B6E                     __end_of_IO_Set:	
 10764                           
 10765                           	psect	text62
 10766  1876                     __ptext62:	
 10767 ;; *************** function _IOC_Set *****************
 10768 ;; Defined at:
 10769 ;;		line 381 in file "../src/MCU_B1.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;		None
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;		None
 10774 ;; Return value:  Size  Location     Type
 10775 ;;		None               void
 10776 ;; Registers used:
 10777 ;;		wreg, status,2
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;Total ram usage:        0 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    3
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_Mcu_Initialization
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           
 10798                           ;psect for function _IOC_Set
 10799  1876                     _IOC_Set:	
 10800                           
 10801                           ;MCU_B1.c: 383: IOCBP = 0b00000100;;
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _IOC_Set: [wreg+status,2]
 10805  1876  3004               	movlw	4
 10806  1877  0027               	movlb	7	; select bank7
 10807  1878  0094               	movwf	20	;volatile
 10808                           
 10809                           ;MCU_B1.c: 384: IOCBN = 0b00000100;;
 10810  1879  3004               	movlw	4
 10811  187A  0095               	movwf	21	;volatile
 10812                           
 10813                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
 10814  187B  0196               	clrf	22	;volatile
 10815                           
 10816                           ;MCU_B1.c: 388: IOCIE = 1;
 10817  187C  158B               	bsf	11,3	;volatile
 10818                           
 10819                           ;MCU_B1.c: 389: IOCIF = 0;
 10820  187D  100B               	bcf	11,0	;volatile
 10821                           
 10822                           ;MCU_B1.c: 390: PEIE = 1;
 10823  187E  170B               	bsf	11,6	;volatile
 10824                           
 10825                           ;MCU_B1.c: 391: GIE = 1;
 10826  187F  178B               	bsf	11,7	;volatile
 10827  1880  0008               	return
 10828  1881                     __end_of_IOC_Set:	
 10829                           
 10830                           	psect	text63
 10831  27C5                     __ptext63:	
 10832 ;; *************** function _Fosc_Set *****************
 10833 ;; Defined at:
 10834 ;;		line 56 in file "../src/MCU_B1.c"
 10835 ;; Parameters:    Size  Location     Type
 10836 ;;		None
 10837 ;; Auto vars:     Size  Location     Type
 10838 ;;		None
 10839 ;; Return value:  Size  Location     Type
 10840 ;;		None               void
 10841 ;; Registers used:
 10842 ;;		wreg
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        0 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    3
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_Mcu_Initialization
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _Fosc_Set
 10864  27C5                     _Fosc_Set:	
 10865                           
 10866                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10867                           
 10868                           ;incstack = 0
 10869                           ; Regs used in _Fosc_Set: [wreg]
 10870  27C5  3078               	movlw	120
 10871  27C6  0021               	movlb	1	; select bank1
 10872  27C7  0099               	movwf	25	;volatile
 10873  27C8  0008               	return
 10874  27C9                     __end_of_Fosc_Set:	
 10875                           
 10876                           	psect	text64
 10877  180B                     __ptext64:	
 10878 ;; *************** function _ADC_Set *****************
 10879 ;; Defined at:
 10880 ;;		line 429 in file "../src/MCU_B1.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;		None               void
 10887 ;; Registers used:
 10888 ;;		wreg
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;Total ram usage:        0 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; Hardware stack levels required when called:    3
 10901 ;; This function calls:
 10902 ;;		Nothing
 10903 ;; This function is called by:
 10904 ;;		_Mcu_Initialization
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           
 10909                           ;psect for function _ADC_Set
 10910  180B                     _ADC_Set:	
 10911                           
 10912                           ;MCU_B1.c: 430: ADCON1 = 0xf3;
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in _ADC_Set: [wreg]
 10916  180B  30F3               	movlw	243
 10917  180C  0021               	movlb	1	; select bank1
 10918  180D  009E               	movwf	30	;volatile
 10919                           
 10920                           ;MCU_B1.c: 431: FVRCON = 0xc1;
 10921  180E  30C1               	movlw	193
 10922  180F  0022               	movlb	2	; select bank2
 10923  1810  0097               	movwf	23	;volatile
 10924  1811  0008               	return
 10925  1812                     __end_of_ADC_Set:	
 10926                           
 10927                           	psect	text65
 10928  0053                     __ptext65:	
 10929 ;; *************** function _Load_Main *****************
 10930 ;; Defined at:
 10931 ;;		line 40 in file "../src/OverLoad_B1.c"
 10932 ;; Parameters:    Size  Location     Type
 10933 ;;		None
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  i               2    8[BANK0 ] int 
 10936 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10937 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10938 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10939 ;;  error           1    2[BANK0 ] unsigned char 
 10940 ;; Return value:  Size  Location     Type
 10941 ;;		None               void
 10942 ;; Registers used:
 10943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;Total ram usage:       10 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    4
 10956 ;; This function calls:
 10957 ;;		___lwdiv
 10958 ;;		___wmul
 10959 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10960 ;;		_getDimmer_LoadGO
 10961 ;;		_getDimmer_Load_Status
 10962 ;;		_getMain_All_Error_Status
 10963 ;;		_getMain_All_LightsStatus
 10964 ;;		_getMain_Lights_Count
 10965 ;;		_setLoad_AH_AL_Restore
 10966 ;; This function is called by:
 10967 ;;		_main
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function _Load_Main
 10973  0053                     _Load_Main:	
 10974                           
 10975                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10976                           
 10977                           ;incstack = 0
 10978                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10979  0053  3000               	movlw	0
 10980  0054  319E  263C  3180   	fcall	_getMain_All_Error_Status
 10981  0057  0020               	movlb	0	; select bank0
 10982  0058  00A0               	movwf	??_Load_Main
 10983  0059  0820               	movf	??_Load_Main,w
 10984  005A  00A2               	movwf	Load_Main@error
 10985                           
 10986                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10987  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10988  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10989  005D  01A7               	clrf	Load_Main@LightsCount
 10990                           
 10991                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10992  005E  0022               	movlb	2	; select bank2
 10993  005F  1C32               	btfss	_Load^(0+256),0
 10994  0060  29ED               	goto	l1906
 10995                           
 10996                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10997  0061  3199  211A  3180   	fcall	_getMain_All_LightsStatus
 10998  0064  3800               	iorlw	0
 10999  0065  1D03               	skipz
 11000  0066  2869               	goto	l11089
 11001                           
 11002                           ;OverLoad_B1.c: 46: Load.GO = 0;
 11003  0067  0022               	movlb	2	; select bank2
 11004  0068  288A               	goto	l11107
 11005  0069                     l11089:	
 11006                           ;OverLoad_B1.c: 47: } else {
 11007                           
 11008                           
 11009                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 11010  0069  0020               	movlb	0	; select bank0
 11011  006A  08A2               	movf	Load_Main@error,f
 11012  006B  1D03               	skipz
 11013  006C  2887               	goto	l1909
 11014  006D  319B  23D7  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 11015  0070  3800               	iorlw	0
 11016  0071  1D03               	skipz
 11017  0072  2887               	goto	l1909
 11018                           
 11019                           ;OverLoad_B1.c: 51: Load.GO = 1;
 11020  0073  0022               	movlb	2	; select bank2
 11021  0074  14B2               	bsf	_Load^(0+256),1
 11022                           
 11023                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11024  0075  31A7  27F9  3180   	fcall	_getDimmer_LoadGO
 11025  0078  3A01               	xorlw	1
 11026  0079  1D03               	skipz
 11027  007A  2882               	goto	l1910
 11028                           
 11029                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11030  007B  0022               	movlb	2	; select bank2
 11031  007C  1DB2               	btfss	_Load^(0+256),3
 11032  007D  1BB2               	btfsc	_Load^(0+256),7
 11033  007E  288B               	goto	l1908
 11034                           
 11035                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11036  007F  15B2               	bsf	_Load^(0+256),3
 11037                           
 11038                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11039  0080  01D7               	clrf	(_Load^(0+256)+37)
 11040                           
 11041                           ;OverLoad_B1.c: 57: }
 11042                           ;OverLoad_B1.c: 58: } else {
 11043  0081  288B               	goto	l1908
 11044  0082                     l1910:	
 11045                           
 11046                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11047  0082  0022               	movlb	2	; select bank2
 11048  0083  1FB2               	btfss	_Load^(0+256),7
 11049  0084  288B               	goto	l1908
 11050                           
 11051                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11052  0085  13B2               	bcf	_Load^(0+256),7
 11053                           
 11054                           ;OverLoad_B1.c: 61: }
 11055                           ;OverLoad_B1.c: 62: }
 11056                           ;OverLoad_B1.c: 63: } else {
 11057  0086  288B               	goto	l1908
 11058  0087                     l1909:	
 11059                           
 11060                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11061  0087  0022               	movlb	2	; select bank2
 11062  0088  1CB2               	btfss	_Load^(0+256),1
 11063  0089  288B               	goto	l1908
 11064  008A                     l11107:	
 11065                           
 11066                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11067  008A  10B2               	bcf	_Load^(0+256),1
 11068  008B                     l1908:	
 11069                           
 11070                           ;OverLoad_B1.c: 66: }
 11071                           ;OverLoad_B1.c: 67: }
 11072                           ;OverLoad_B1.c: 89: }
 11073                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11074  008B  1CB2               	btfss	_Load^(0+256),1
 11075  008C  29C9               	goto	l1916
 11076                           
 11077                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11078  008D  1532               	bsf	_Load^(0+256),2
 11079                           
 11080                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11081  008E  1E32               	btfss	_Load^(0+256),4
 11082  008F  29C7               	goto	l1917
 11083                           
 11084                           ;OverLoad_B1.c: 96: Load.Time++;
 11085  0090  3001               	movlw	1
 11086  0091  07B3               	addwf	(_Load^(0+256)+1),f
 11087  0092  3000               	movlw	0
 11088  0093  3DB4               	addwfc	((_Load+1)^(0+256)+1),f
 11089                           
 11090                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11091  0094  3000               	movlw	0
 11092  0095  0234               	subwf	((_Load+1)^(0+256)+1),w
 11093  0096  3002               	movlw	2
 11094  0097  1903               	skipnz
 11095  0098  0233               	subwf	(_Load^(0+256)+1),w
 11096  0099  1C03               	skipc
 11097  009A  0008               	return
 11098                           
 11099                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11100  009B  01B3               	clrf	(_Load^(0+256)+1)
 11101  009C  01B4               	clrf	((_Load+1)^(0+256)+1)
 11102                           
 11103                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11104  009D  1232               	bcf	_Load^(0+256),4
 11105                           
 11106                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11107  009E  3001               	movlw	1
 11108  009F  0020               	movlb	0	; select bank0
 11109  00A0  00A8               	movwf	Load_Main@i
 11110  00A1  3000               	movlw	0
 11111  00A2  00A9               	movwf	Load_Main@i+1
 11112  00A3  0829               	movf	Load_Main@i+1,w
 11113  00A4  3A80               	xorlw	128
 11114  00A5  00A0               	movwf	??_Load_Main
 11115  00A6  3080               	movlw	128
 11116  00A7  0220               	subwf	??_Load_Main,w
 11117  00A8  1D03               	skipz
 11118  00A9  28AC               	goto	u12765
 11119  00AA  3004               	movlw	4
 11120  00AB  0228               	subwf	Load_Main@i,w
 11121  00AC                     u12765:	
 11122  00AC  1803               	btfsc	3,0
 11123  00AD  28E0               	goto	l11129
 11124  00AE                     l11123:	
 11125                           
 11126                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11127  00AE  0020               	movlb	0	; select bank0
 11128  00AF  3528               	lslf	Load_Main@i,w
 11129  00B0  3E3D               	addlw	(_Load+11)& (0+255)
 11130  00B1  0086               	movwf	6
 11131  00B2  3001               	movlw	1	; select bank2/3
 11132  00B3  0087               	movwf	7
 11133  00B4  3F40               	moviw [0]fsr1
 11134  00B5  00A0               	movwf	??_Load_Main
 11135  00B6  3F41               	moviw [1]fsr1
 11136  00B7  00A1               	movwf	??_Load_Main+1
 11137  00B8  0820               	movf	??_Load_Main,w
 11138  00B9  0022               	movlb	2	; select bank2
 11139  00BA  07B7               	addwf	(_Load^(0+256)+5),f
 11140  00BB  0020               	movlb	0	; select bank0
 11141  00BC  0821               	movf	??_Load_Main+1,w
 11142  00BD  0022               	movlb	2	; select bank2
 11143  00BE  3DB8               	addwfc	((_Load+1)^(0+256)+5),f
 11144                           
 11145                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11146  00BF  0020               	movlb	0	; select bank0
 11147  00C0  3528               	lslf	Load_Main@i,w
 11148  00C1  3E47               	addlw	(_Load+21)& (0+255)
 11149  00C2  0086               	movwf	6
 11150  00C3  3001               	movlw	1	; select bank2/3
 11151  00C4  0087               	movwf	7
 11152  00C5  3F40               	moviw [0]fsr1
 11153  00C6  00A0               	movwf	??_Load_Main
 11154  00C7  3F41               	moviw [1]fsr1
 11155  00C8  00A1               	movwf	??_Load_Main+1
 11156  00C9  0820               	movf	??_Load_Main,w
 11157  00CA  0022               	movlb	2	; select bank2
 11158  00CB  07B9               	addwf	(_Load^(0+256)+7),f
 11159  00CC  0020               	movlb	0	; select bank0
 11160  00CD  0821               	movf	??_Load_Main+1,w
 11161  00CE  0022               	movlb	2	; select bank2
 11162  00CF  3DBA               	addwfc	((_Load+1)^(0+256)+7),f
 11163  00D0  3001               	movlw	1
 11164  00D1  0020               	movlb	0	; select bank0
 11165  00D2  07A8               	addwf	Load_Main@i,f
 11166  00D3  3000               	movlw	0
 11167  00D4  3DA9               	addwfc	Load_Main@i+1,f
 11168  00D5  0829               	movf	Load_Main@i+1,w
 11169  00D6  3A80               	xorlw	128
 11170  00D7  00A0               	movwf	??_Load_Main
 11171  00D8  3080               	movlw	128
 11172  00D9  0220               	subwf	??_Load_Main,w
 11173  00DA  1D03               	skipz
 11174  00DB  28DE               	goto	u12775
 11175  00DC  3004               	movlw	4
 11176  00DD  0228               	subwf	Load_Main@i,w
 11177  00DE                     u12775:	
 11178  00DE  1C03               	skipc
 11179  00DF  28AE               	goto	l11123
 11180  00E0                     l11129:	
 11181                           
 11182                           ;OverLoad_B1.c: 104: }
 11183                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11184  00E0  3003               	movlw	3
 11185  00E1  00F2               	movwf	___lwdiv@divisor
 11186  00E2  3000               	movlw	0
 11187  00E3  00F3               	movwf	___lwdiv@divisor+1
 11188  00E4  0022               	movlb	2	; select bank2
 11189  00E5  0838               	movf	((_Load+1)^(0+256)+5),w
 11190  00E6  01F5               	clrf	___lwdiv@dividend+1
 11191  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 11192  00E8  0837               	movf	(_Load^(0+256)+5),w
 11193  00E9  01F4               	clrf	___lwdiv@dividend
 11194  00EA  07F4               	addwf	___lwdiv@dividend,f
 11195  00EB  319F  275D  3180   	fcall	___lwdiv
 11196  00EE  0873               	movf	?___lwdiv+1,w
 11197  00EF  0022               	movlb	2	; select bank2
 11198  00F0  01B8               	clrf	((_Load+1)^(0+256)+5)
 11199  00F1  07B8               	addwf	((_Load+1)^(0+256)+5),f
 11200  00F2  0872               	movf	?___lwdiv,w
 11201  00F3  01B7               	clrf	(_Load^(0+256)+5)
 11202  00F4  07B7               	addwf	(_Load^(0+256)+5),f
 11203                           
 11204                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11205  00F5  3003               	movlw	3
 11206  00F6  00F2               	movwf	___lwdiv@divisor
 11207  00F7  3000               	movlw	0
 11208  00F8  00F3               	movwf	___lwdiv@divisor+1
 11209  00F9  083A               	movf	((_Load+1)^(0+256)+7),w
 11210  00FA  01F5               	clrf	___lwdiv@dividend+1
 11211  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 11212  00FC  0839               	movf	(_Load^(0+256)+7),w
 11213  00FD  01F4               	clrf	___lwdiv@dividend
 11214  00FE  07F4               	addwf	___lwdiv@dividend,f
 11215  00FF  319F  275D  3180   	fcall	___lwdiv
 11216  0102  0873               	movf	?___lwdiv+1,w
 11217  0103  0022               	movlb	2	; select bank2
 11218  0104  01BA               	clrf	((_Load+1)^(0+256)+7)
 11219  0105  07BA               	addwf	((_Load+1)^(0+256)+7),f
 11220  0106  0872               	movf	?___lwdiv,w
 11221  0107  01B9               	clrf	(_Load^(0+256)+7)
 11222  0108  07B9               	addwf	(_Load^(0+256)+7),f
 11223                           
 11224                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11225  0109  319B  23BC  3180   	fcall	_setLoad_AH_AL_Restore
 11226                           
 11227                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11228  010C  0022               	movlb	2	; select bank2
 11229  010D  083A               	movf	((_Load+1)^(0+256)+7),w
 11230  010E  0238               	subwf	((_Load+1)^(0+256)+5),w
 11231  010F  1D03               	skipz
 11232  0110  2913               	goto	u12785
 11233  0111  0839               	movf	(_Load^(0+256)+7),w
 11234  0112  0237               	subwf	(_Load^(0+256)+5),w
 11235  0113                     u12785:	
 11236  0113  1C03               	skipc
 11237  0114  0008               	return
 11238                           
 11239                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11240  0115  3005               	movlw	5
 11241  0116  3E32               	addlw	_Load& (0+255)
 11242  0117  0086               	movwf	6
 11243  0118  3001               	movlw	1	; select bank2/3
 11244  0119  0087               	movwf	7
 11245  011A  0939               	comf	(_Load^(0+256)+7),w
 11246  011B  0020               	movlb	0	; select bank0
 11247  011C  00A0               	movwf	??_Load_Main
 11248  011D  0022               	movlb	2	; select bank2
 11249  011E  093A               	comf	((_Load+1)^(0+256)+7),w
 11250  011F  0020               	movlb	0	; select bank0
 11251  0120  00A1               	movwf	??_Load_Main+1
 11252  0121  0AA0               	incf	??_Load_Main,f
 11253  0122  1903               	skipnz
 11254  0123  0AA1               	incf	??_Load_Main+1,f
 11255  0124  3F40               	moviw [0]fsr1
 11256  0125  0720               	addwf	??_Load_Main,w
 11257  0126  0022               	movlb	2	; select bank2
 11258  0127  00D1               	movwf	(_Load^(0+256)+31)
 11259  0128  3F41               	moviw [1]fsr1
 11260  0129  0020               	movlb	0	; select bank0
 11261  012A  3D21               	addwfc	??_Load_Main+1,w
 11262  012B  0022               	movlb	2	; select bank2
 11263  012C  00D2               	movwf	(_Load^(0+256)+32)
 11264                           
 11265                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11266  012D  01B7               	clrf	(_Load^(0+256)+5)
 11267  012E  01B8               	clrf	((_Load+1)^(0+256)+5)
 11268                           
 11269                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11270  012F  01B9               	clrf	(_Load^(0+256)+7)
 11271  0130  01BA               	clrf	((_Load+1)^(0+256)+7)
 11272                           
 11273                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11274  0131  1DB2               	btfss	_Load^(0+256),3
 11275  0132  2989               	goto	l11169
 11276                           
 11277                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11278  0133  3002               	movlw	2
 11279  0134  0257               	subwf	(_Load^(0+256)+37),w
 11280  0135  1803               	skipnc
 11281  0136  2989               	goto	l11169
 11282                           
 11283                           ;OverLoad_B1.c: 117: Load.Count++;
 11284  0137  3001               	movlw	1
 11285  0138  0020               	movlb	0	; select bank0
 11286  0139  00A0               	movwf	??_Load_Main
 11287  013A  0820               	movf	??_Load_Main,w
 11288  013B  0022               	movlb	2	; select bank2
 11289  013C  07D7               	addwf	(_Load^(0+256)+37),f
 11290                           
 11291                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11292  013D  3198  2004  3180   	fcall	_getDimmer_Load_Status
 11293  0140  0020               	movlb	0	; select bank0
 11294  0141  00A0               	movwf	??_Load_Main
 11295  0142  0820               	movf	??_Load_Main,w
 11296  0143  00A6               	movwf	Load_Main@Load_RunStatus
 11297                           
 11298                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11299  0144  3199  21CA  3180   	fcall	_getMain_Lights_Count
 11300  0147  0020               	movlb	0	; select bank0
 11301  0148  00A0               	movwf	??_Load_Main
 11302  0149  0820               	movf	??_Load_Main,w
 11303  014A  00A7               	movwf	Load_Main@LightsCount
 11304                           
 11305                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11306  014B  0022               	movlb	2	; select bank2
 11307  014C  0857               	movf	(_Load^(0+256)+37),w
 11308  014D  3A01               	xorlw	1
 11309  014E  1D03               	skipz
 11310  014F  2954               	goto	l11155
 11311                           
 11312                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11313  0150  3060               	movlw	96
 11314  0151  00D5               	movwf	(_Load^(0+256)+35)
 11315  0152  3004               	movlw	4
 11316  0153  2961               	goto	L8
 11317  0154                     l11155:	
 11318                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11319                           
 11320  0154  0857               	movf	(_Load^(0+256)+37),w
 11321  0155  3A02               	xorlw	2
 11322  0156  1D03               	skipz
 11323  0157  2989               	goto	l11169
 11324                           
 11325                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11326  0158  0020               	movlb	0	; select bank0
 11327  0159  0827               	movf	Load_Main@LightsCount,w
 11328  015A  3A01               	xorlw	1
 11329  015B  1D03               	skipz
 11330  015C  2963               	goto	l11161
 11331                           
 11332                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11333  015D  3043               	movlw	67
 11334  015E  0022               	movlb	2	; select bank2
 11335  015F  00D5               	movwf	(_Load^(0+256)+35)
 11336  0160  3000               	movlw	0
 11337  0161                     L8:	
 11338  0161  00D6               	movwf	(_Load^(0+256)+36)
 11339                           
 11340                           ;OverLoad_B1.c: 132: } else {
 11341  0162  2989               	goto	l11169
 11342  0163                     l11161:	
 11343                           
 11344                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11345  0163  0020               	movlb	0	; select bank0
 11346  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 11347  0165  1D03               	skipz
 11348  0166  297D               	goto	l11165
 11349                           
 11350                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11351  0167  0827               	movf	Load_Main@LightsCount,w
 11352  0168  00A0               	movwf	??_Load_Main
 11353  0169  01A1               	clrf	??_Load_Main+1
 11354  016A  0820               	movf	??_Load_Main,w
 11355  016B  00F2               	movwf	___wmul@multiplier
 11356  016C  0821               	movf	??_Load_Main+1,w
 11357  016D  00F3               	movwf	___wmul@multiplier+1
 11358  016E  3043               	movlw	67
 11359  016F  00F4               	movwf	___wmul@multiplicand
 11360  0170  3000               	movlw	0
 11361  0171  00F5               	movwf	___wmul@multiplicand+1
 11362  0172  319C  242B  3180   	fcall	___wmul
 11363  0175  0873               	movf	?___wmul+1,w
 11364  0176  0022               	movlb	2	; select bank2
 11365  0177  01D6               	clrf	((_Load+1)^(0+256)+35)
 11366  0178  07D6               	addwf	((_Load+1)^(0+256)+35),f
 11367  0179  0872               	movf	?___wmul,w
 11368  017A  01D5               	clrf	(_Load^(0+256)+35)
 11369  017B  07D5               	addwf	(_Load^(0+256)+35),f
 11370                           
 11371                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11372  017C  2989               	goto	l11169
 11373  017D                     l11165:	
 11374  017D  0020               	movlb	0	; select bank0
 11375  017E  0826               	movf	Load_Main@Load_RunStatus,w
 11376  017F  3A01               	xorlw	1
 11377  0180  1D03               	skipz
 11378  0181  2989               	goto	l11169
 11379                           
 11380                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11381  0182  0022               	movlb	2	; select bank2
 11382  0183  083B               	movf	(_Load^(0+256)+9),w
 11383  0184  3E43               	addlw	67
 11384  0185  00D5               	movwf	(_Load^(0+256)+35)
 11385  0186  3000               	movlw	0
 11386  0187  3D3C               	addwfc	((_Load+1)^(0+256)+9),w
 11387  0188  00D6               	movwf	((_Load+1)^(0+256)+35)
 11388  0189                     l11169:	
 11389                           
 11390                           ;OverLoad_B1.c: 137: }
 11391                           ;OverLoad_B1.c: 138: }
 11392                           ;OverLoad_B1.c: 139: }
 11393                           ;OverLoad_B1.c: 140: }
 11394                           ;OverLoad_B1.c: 141: }
 11395                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11396  0189  0022               	movlb	2	; select bank2
 11397  018A  0856               	movf	((_Load+1)^(0+256)+35),w
 11398  018B  0252               	subwf	((_Load+1)^(0+256)+31),w
 11399  018C  1D03               	skipz
 11400  018D  2990               	goto	u12865
 11401  018E  0855               	movf	(_Load^(0+256)+35),w
 11402  018F  0251               	subwf	(_Load^(0+256)+31),w
 11403  0190                     u12865:	
 11404  0190  1C03               	skipc
 11405  0191  29AF               	goto	l11185
 11406                           
 11407                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11408  0192  0020               	movlb	0	; select bank0
 11409  0193  0827               	movf	Load_Main@LightsCount,w
 11410  0194  3A01               	xorlw	1
 11411  0195  1903               	skipnz
 11412  0196  2999               	goto	l11175
 11413  0197  3003               	movlw	3
 11414  0198  299A               	goto	L9
 11415  0199                     l11175:	
 11416  0199  3002               	movlw	2
 11417  019A                     L9:	
 11418  019A  00A3               	movwf	_Load_Main$4636
 11419  019B  3000               	movlw	0
 11420  019C  00A4               	movwf	_Load_Main$4636+1
 11421  019D  0823               	movf	_Load_Main$4636,w
 11422  019E  00A0               	movwf	??_Load_Main
 11423  019F  0820               	movf	??_Load_Main,w
 11424  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 11425                           
 11426                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11427  01A1  3001               	movlw	1
 11428  01A2  00A0               	movwf	??_Load_Main
 11429  01A3  0820               	movf	??_Load_Main,w
 11430  01A4  0022               	movlb	2	; select bank2
 11431  01A5  07D8               	addwf	(_Load^(0+256)+38),f
 11432                           
 11433                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11434  01A6  0858               	movf	(_Load^(0+256)+38),w
 11435  01A7  0020               	movlb	0	; select bank0
 11436  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 11437  01A9  1803               	skipnc
 11438  01AA  0008               	return
 11439                           
 11440                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11441  01AB  0022               	movlb	2	; select bank2
 11442  01AC  01D8               	clrf	(_Load^(0+256)+38)
 11443                           
 11444                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11445  01AD  16B2               	bsf	_Load^(0+256),5
 11446                           
 11447                           ;OverLoad_B1.c: 170: }
 11448                           ;OverLoad_B1.c: 171: } else {
 11449  01AE  0008               	return
 11450  01AF                     l11185:	
 11451                           
 11452                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11453  01AF  01D8               	clrf	(_Load^(0+256)+38)
 11454                           
 11455                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11456  01B0  1DB2               	btfss	_Load^(0+256),3
 11457  01B1  0008               	return
 11458                           
 11459                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11460  01B2  3001               	movlw	1
 11461  01B3  0020               	movlb	0	; select bank0
 11462  01B4  00A0               	movwf	??_Load_Main
 11463  01B5  0820               	movf	??_Load_Main,w
 11464  01B6  0022               	movlb	2	; select bank2
 11465  01B7  07D9               	addwf	(_Load^(0+256)+39),f
 11466                           
 11467                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11468  01B8  3003               	movlw	3
 11469  01B9  0259               	subwf	(_Load^(0+256)+39),w
 11470  01BA  1C03               	skipc
 11471  01BB  0008               	return
 11472                           
 11473                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11474  01BC  01D9               	clrf	(_Load^(0+256)+39)
 11475                           
 11476                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11477  01BD  17B2               	bsf	_Load^(0+256),7
 11478                           
 11479                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11480  01BE  11B2               	bcf	_Load^(0+256),3
 11481                           
 11482                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11483  01BF  01D7               	clrf	(_Load^(0+256)+37)
 11484                           
 11485                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11486  01C0  0852               	movf	((_Load+1)^(0+256)+31),w
 11487  01C1  01BC               	clrf	((_Load+1)^(0+256)+9)
 11488  01C2  07BC               	addwf	((_Load+1)^(0+256)+9),f
 11489  01C3  0851               	movf	(_Load^(0+256)+31),w
 11490  01C4  01BB               	clrf	(_Load^(0+256)+9)
 11491  01C5  07BB               	addwf	(_Load^(0+256)+9),f
 11492                           
 11493                           ;OverLoad_B1.c: 184: }
 11494                           ;OverLoad_B1.c: 185: }
 11495                           ;OverLoad_B1.c: 208: }
 11496                           ;OverLoad_B1.c: 209: }
 11497                           ;OverLoad_B1.c: 210: }
 11498                           ;OverLoad_B1.c: 211: } else {
 11499  01C6  0008               	return
 11500  01C7                     l1917:	
 11501                           
 11502                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11503  01C7  1632               	bsf	_Load^(0+256),4
 11504                           
 11505                           ;OverLoad_B1.c: 213: }
 11506                           ;OverLoad_B1.c: 214: } else {
 11507  01C8  0008               	return
 11508  01C9                     l1916:	
 11509                           
 11510                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11511  01C9  1D32               	btfss	_Load^(0+256),2
 11512  01CA  29DC               	goto	l11221
 11513                           
 11514                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11515  01CB  1132               	bcf	_Load^(0+256),2
 11516                           
 11517                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11518  01CC  1232               	bcf	_Load^(0+256),4
 11519                           
 11520                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11521  01CD  01B3               	clrf	(_Load^(0+256)+1)
 11522  01CE  01B4               	clrf	((_Load+1)^(0+256)+1)
 11523                           
 11524                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11525  01CF  319B  23BC  3180   	fcall	_setLoad_AH_AL_Restore
 11526                           
 11527                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11528  01D2  0022               	movlb	2	; select bank2
 11529  01D3  01D8               	clrf	(_Load^(0+256)+38)
 11530                           
 11531                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11532  01D4  01D9               	clrf	(_Load^(0+256)+39)
 11533                           
 11534                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11535  01D5  01B7               	clrf	(_Load^(0+256)+5)
 11536  01D6  01B8               	clrf	((_Load+1)^(0+256)+5)
 11537                           
 11538                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11539  01D7  01B9               	clrf	(_Load^(0+256)+7)
 11540  01D8  01BA               	clrf	((_Load+1)^(0+256)+7)
 11541                           
 11542                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11543  01D9  11B2               	bcf	_Load^(0+256),3
 11544                           
 11545                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11546  01DA  01D7               	clrf	(_Load^(0+256)+37)
 11547                           
 11548                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11549  01DB  13B2               	bcf	_Load^(0+256),7
 11550  01DC                     l11221:	
 11551                           
 11552                           ;OverLoad_B1.c: 257: }
 11553                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11554  01DC  1EB2               	btfss	_Load^(0+256),5
 11555  01DD  0008               	return
 11556                           
 11557                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11558  01DE  3001               	movlw	1
 11559  01DF  07B5               	addwf	(_Load^(0+256)+3),f
 11560  01E0  3000               	movlw	0
 11561  01E1  3DB6               	addwfc	((_Load+1)^(0+256)+3),f
 11562                           
 11563                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11564  01E2  3001               	movlw	1
 11565  01E3  0236               	subwf	((_Load+1)^(0+256)+3),w
 11566  01E4  30F4               	movlw	244
 11567  01E5  1903               	skipnz
 11568  01E6  0235               	subwf	(_Load^(0+256)+3),w
 11569  01E7  1C03               	skipc
 11570  01E8  0008               	return
 11571                           
 11572                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11573  01E9  01B5               	clrf	(_Load^(0+256)+3)
 11574  01EA  01B6               	clrf	((_Load+1)^(0+256)+3)
 11575                           
 11576                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11577  01EB  12B2               	bcf	_Load^(0+256),5
 11578                           
 11579                           ;OverLoad_B1.c: 263: }
 11580                           ;OverLoad_B1.c: 264: }
 11581                           ;OverLoad_B1.c: 265: }
 11582                           ;OverLoad_B1.c: 266: } else {
 11583  01EC  0008               	return
 11584  01ED                     l1906:	
 11585                           
 11586                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11587  01ED  0021               	movlb	1	; select bank1
 11588  01EE  1C4F               	btfss	_myMain^(0+128),0
 11589  01EF  0008               	return
 11590                           
 11591                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11592  01F0  0022               	movlb	2	; select bank2
 11593  01F1  1432               	bsf	_Load^(0+256),0
 11594  01F2  0008               	return
 11595  01F3                     __end_of_Load_Main:	
 11596                           
 11597                           	psect	text66
 11598  19CA                     __ptext66:	
 11599 ;; *************** function _getMain_Lights_Count *****************
 11600 ;; Defined at:
 11601 ;;		line 464 in file "../src/Main_B1.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;		None
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;  count           1    5[COMMON] unsigned char 
 11606 ;;  status2         1    4[COMMON] unsigned char 
 11607 ;;  status1         1    3[COMMON] unsigned char 
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1    wreg      unsigned char 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;Total ram usage:        4 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    3
 11624 ;; This function calls:
 11625 ;;		Nothing
 11626 ;; This function is called by:
 11627 ;;		_Load_Main
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           
 11632                           ;psect for function _getMain_Lights_Count
 11633  19CA                     _getMain_Lights_Count:	
 11634                           
 11635                           ;Main_B1.c: 465: char count = 0;
 11636                           
 11637                           ;incstack = 0
 11638                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11639  19CA  01F5               	clrf	getMain_Lights_Count@count
 11640                           
 11641                           ;Main_B1.c: 469: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11642  19CB  3000               	movlw	0
 11643  19CC  0021               	movlb	1	; select bank1
 11644  19CD  19A0               	btfsc	_DimmerIntr1^(0+128),3
 11645  19CE  3001               	movlw	1
 11646  19CF  00F3               	movwf	getMain_Lights_Count@status1
 11647                           
 11648                           ;Main_B1.c: 472: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11649  19D0  3000               	movlw	0
 11650  19D1  19B0               	btfsc	_DimmerIntr2^(0+128),3
 11651  19D2  3001               	movlw	1
 11652  19D3  00F4               	movwf	getMain_Lights_Count@status2
 11653                           
 11654                           ;Main_B1.c: 495: count = (status1 + status2);
 11655  19D4  0873               	movf	getMain_Lights_Count@status1,w
 11656  19D5  0774               	addwf	getMain_Lights_Count@status2,w
 11657  19D6  00F2               	movwf	??_getMain_Lights_Count
 11658  19D7  0872               	movf	??_getMain_Lights_Count,w
 11659  19D8  00F5               	movwf	getMain_Lights_Count@count
 11660                           
 11661                           ;Main_B1.c: 500: return count;
 11662  19D9  0875               	movf	getMain_Lights_Count@count,w
 11663  19DA  0008               	return
 11664  19DB                     __end_of_getMain_Lights_Count:	
 11665                           
 11666                           	psect	text67
 11667  1804                     __ptext67:	
 11668 ;; *************** function _getDimmer_Load_Status *****************
 11669 ;; Defined at:
 11670 ;;		line 1344 in file "../src/Dimmer_B1.c"
 11671 ;; Parameters:    Size  Location     Type
 11672 ;;		None
 11673 ;; Auto vars:     Size  Location     Type
 11674 ;;  status          1    2[COMMON] unsigned char 
 11675 ;; Return value:  Size  Location     Type
 11676 ;;                  1    wreg      unsigned char 
 11677 ;; Registers used:
 11678 ;;		wreg, status,2
 11679 ;; Tracked objects:
 11680 ;;		On entry : 0/0
 11681 ;;		On exit  : 0/0
 11682 ;;		Unchanged: 0/0
 11683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;Total ram usage:        1 bytes
 11689 ;; Hardware stack levels used:    1
 11690 ;; Hardware stack levels required when called:    3
 11691 ;; This function calls:
 11692 ;;		Nothing
 11693 ;; This function is called by:
 11694 ;;		_Load_Main
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           
 11699                           ;psect for function _getDimmer_Load_Status
 11700  1804                     _getDimmer_Load_Status:	
 11701                           
 11702                           ;Dimmer_B1.c: 1345: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11706  1804  3000               	movlw	0
 11707  1805  0022               	movlb	2	; select bank2
 11708  1806  1920               	btfsc	_Dimmer^(0+256),2
 11709  1807  3001               	movlw	1
 11710  1808  00F2               	movwf	getDimmer_Load_Status@status
 11711                           
 11712                           ;Dimmer_B1.c: 1346: return status;
 11713  1809  0872               	movf	getDimmer_Load_Status@status,w
 11714  180A  0008               	return
 11715  180B                     __end_of_getDimmer_Load_Status:	
 11716                           
 11717                           	psect	text68
 11718  27F9                     __ptext68:	
 11719 ;; *************** function _getDimmer_LoadGO *****************
 11720 ;; Defined at:
 11721 ;;		line 1338 in file "../src/Dimmer_B1.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;		None
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;  loadgo          1    2[COMMON] unsigned char 
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  1    wreg      unsigned char 
 11728 ;; Registers used:
 11729 ;;		wreg, status,2
 11730 ;; Tracked objects:
 11731 ;;		On entry : 0/0
 11732 ;;		On exit  : 0/0
 11733 ;;		Unchanged: 0/0
 11734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;Total ram usage:        1 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:    3
 11742 ;; This function calls:
 11743 ;;		Nothing
 11744 ;; This function is called by:
 11745 ;;		_Load_Main
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           
 11750                           ;psect for function _getDimmer_LoadGO
 11751  27F9                     _getDimmer_LoadGO:	
 11752                           
 11753                           ;Dimmer_B1.c: 1339: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11754                           
 11755                           ;incstack = 0
 11756                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11757  27F9  3000               	movlw	0
 11758  27FA  0022               	movlb	2	; select bank2
 11759  27FB  18A0               	btfsc	_Dimmer^(0+256),1
 11760  27FC  3001               	movlw	1
 11761  27FD  00F2               	movwf	getDimmer_LoadGO@loadgo
 11762                           
 11763                           ;Dimmer_B1.c: 1340: return loadgo;
 11764  27FE  0872               	movf	getDimmer_LoadGO@loadgo,w
 11765  27FF  0008               	return
 11766  2800                     __end_of_getDimmer_LoadGO:	
 11767                           
 11768                           	psect	text69
 11769  1BD7                     __ptext69:	
 11770 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11771 ;; Defined at:
 11772 ;;		line 348 in file "../src/Dimmer_B1.c"
 11773 ;; Parameters:    Size  Location     Type
 11774 ;;		None
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  status          1    5[COMMON] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  1    wreg      unsigned char 
 11779 ;; Registers used:
 11780 ;;		wreg, status,2, status,0
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;Total ram usage:        4 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    3
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_Load_Main
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           
 11801                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11802  1BD7                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11803                           
 11804                           ;Dimmer_B1.c: 349: char status = 0;
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11808  1BD7  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11809                           
 11810                           ;Dimmer_B1.c: 356: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11811  1BD8  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11812  1BD9  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,f
 11813  1BDA  0021               	movlb	1	; select bank1
 11814  1BDB  1E20               	btfss	_DimmerIntr1^(0+128),4
 11815  1BDC  1A30               	btfsc	_DimmerIntr2^(0+128),4
 11816  1BDD  2BDF               	goto	l8285
 11817  1BDE  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11818  1BDF                     l8285:	
 11819  1BDF  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,w
 11820  1BE0  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11821  1BE1  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11822  1BE2  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11823                           
 11824                           ;Dimmer_B1.c: 364: if (status == 0) {
 11825  1BE3  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11826  1BE4  1D03               	skipz
 11827  1BE5  2BF0               	goto	l8297
 11828                           
 11829                           ;Dimmer_B1.c: 370: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11830  1BE6  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11831  1BE7  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,f
 11832  1BE8  1F20               	btfss	_DimmerIntr1^(0+128),6
 11833  1BE9  1B30               	btfsc	_DimmerIntr2^(0+128),6
 11834  1BEA  2BEC               	goto	l8295
 11835  1BEB  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11836  1BEC                     l8295:	
 11837  1BEC  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,w
 11838  1BED  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11839  1BEE  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11840  1BEF  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11841  1BF0                     l8297:	
 11842                           
 11843                           ;Dimmer_B1.c: 376: }
 11844                           ;Dimmer_B1.c: 378: return status;
 11845  1BF0  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11846  1BF1  0008               	return
 11847  1BF2                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11848                           
 11849                           	psect	text70
 11850  1C2B                     __ptext70:	
 11851 ;; *************** function ___wmul *****************
 11852 ;; Defined at:
 11853 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  multiplier      2    2[COMMON] unsigned int 
 11856 ;;  multiplicand    2    4[COMMON] unsigned int 
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  product         2    6[COMMON] unsigned int 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  2    2[COMMON] unsigned int 
 11861 ;; Registers used:
 11862 ;;		wreg, status,2, status,0
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:        6 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    3
 11875 ;; This function calls:
 11876 ;;		Nothing
 11877 ;; This function is called by:
 11878 ;;		_Load_Main
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           
 11883                           ;psect for function ___wmul
 11884  1C2B                     ___wmul:	
 11885                           
 11886                           ;incstack = 0
 11887                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11888  1C2B  01F6               	clrf	___wmul@product
 11889  1C2C  01F7               	clrf	___wmul@product+1
 11890  1C2D                     l8999:	
 11891  1C2D  1C72               	btfss	___wmul@multiplier,0
 11892  1C2E  2C33               	goto	l3140
 11893  1C2F  0874               	movf	___wmul@multiplicand,w
 11894  1C30  07F6               	addwf	___wmul@product,f
 11895  1C31  0875               	movf	___wmul@multiplicand+1,w
 11896  1C32  3DF7               	addwfc	___wmul@product+1,f
 11897  1C33                     l3140:	
 11898  1C33  3001               	movlw	1
 11899  1C34                     u9405:	
 11900  1C34  35F4               	lslf	___wmul@multiplicand,f
 11901  1C35  0DF5               	rlf	___wmul@multiplicand+1,f
 11902  1C36  0B89               	decfsz	9,f
 11903  1C37  2C34               	goto	u9405
 11904  1C38  3001               	movlw	1
 11905  1C39                     u9415:	
 11906  1C39  36F3               	lsrf	___wmul@multiplier+1,f
 11907  1C3A  0CF2               	rrf	___wmul@multiplier,f
 11908  1C3B  0B89               	decfsz	9,f
 11909  1C3C  2C39               	goto	u9415
 11910  1C3D  0873               	movf	___wmul@multiplier+1,w
 11911  1C3E  0472               	iorwf	___wmul@multiplier,w
 11912  1C3F  1D03               	skipz
 11913  1C40  2C2D               	goto	l8999
 11914  1C41  0877               	movf	___wmul@product+1,w
 11915  1C42  01F3               	clrf	?___wmul+1
 11916  1C43  07F3               	addwf	?___wmul+1,f
 11917  1C44  0876               	movf	___wmul@product,w
 11918  1C45  01F2               	clrf	?___wmul
 11919  1C46  07F2               	addwf	?___wmul,f
 11920  1C47  0008               	return
 11921  1C48                     __end_of___wmul:	
 11922                           
 11923                           	psect	text71
 11924  1F5D                     __ptext71:	
 11925 ;; *************** function ___lwdiv *****************
 11926 ;; Defined at:
 11927 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  divisor         2    2[COMMON] unsigned int 
 11930 ;;  dividend        2    4[COMMON] unsigned int 
 11931 ;; Auto vars:     Size  Location     Type
 11932 ;;  quotient        2    7[COMMON] unsigned int 
 11933 ;;  counter         1    9[COMMON] unsigned char 
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  2    2[COMMON] unsigned int 
 11936 ;; Registers used:
 11937 ;;		wreg, status,2, status,0
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11943 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;Total ram usage:        8 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    3
 11950 ;; This function calls:
 11951 ;;		Nothing
 11952 ;; This function is called by:
 11953 ;;		_Load_Main
 11954 ;;		_setTemp_Main
 11955 ;;		_setRF_Main
 11956 ;; This function uses a non-reentrant model
 11957 ;;
 11958                           
 11959                           
 11960                           ;psect for function ___lwdiv
 11961  1F5D                     ___lwdiv:	
 11962                           
 11963                           ;incstack = 0
 11964                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11965  1F5D  01F7               	clrf	___lwdiv@quotient
 11966  1F5E  01F8               	clrf	___lwdiv@quotient+1
 11967  1F5F  0873               	movf	___lwdiv@divisor+1,w
 11968  1F60  0472               	iorwf	___lwdiv@divisor,w
 11969  1F61  1903               	skipnz
 11970  1F62  2F8C               	goto	l8207
 11971  1F63  01F9               	clrf	___lwdiv@counter
 11972  1F64  0AF9               	incf	___lwdiv@counter,f
 11973  1F65                     l8195:	
 11974  1F65  1BF3               	btfsc	___lwdiv@divisor+1,7
 11975  1F66  2F71               	goto	l8197
 11976  1F67  3001               	movlw	1
 11977  1F68                     u7895:	
 11978  1F68  35F2               	lslf	___lwdiv@divisor,f
 11979  1F69  0DF3               	rlf	___lwdiv@divisor+1,f
 11980  1F6A  0B89               	decfsz	9,f
 11981  1F6B  2F68               	goto	u7895
 11982  1F6C  3001               	movlw	1
 11983  1F6D  00F6               	movwf	??___lwdiv
 11984  1F6E  0876               	movf	??___lwdiv,w
 11985  1F6F  07F9               	addwf	___lwdiv@counter,f
 11986  1F70  2F65               	goto	l8195
 11987  1F71                     l8197:	
 11988  1F71  3001               	movlw	1
 11989  1F72                     u7915:	
 11990  1F72  35F7               	lslf	___lwdiv@quotient,f
 11991  1F73  0DF8               	rlf	___lwdiv@quotient+1,f
 11992  1F74  0B89               	decfsz	9,f
 11993  1F75  2F72               	goto	u7915
 11994  1F76  0873               	movf	___lwdiv@divisor+1,w
 11995  1F77  0275               	subwf	___lwdiv@dividend+1,w
 11996  1F78  1D03               	skipz
 11997  1F79  2F7C               	goto	u7925
 11998  1F7A  0872               	movf	___lwdiv@divisor,w
 11999  1F7B  0274               	subwf	___lwdiv@dividend,w
 12000  1F7C                     u7925:	
 12001  1F7C  1C03               	skipc
 12002  1F7D  2F83               	goto	l8203
 12003  1F7E  0872               	movf	___lwdiv@divisor,w
 12004  1F7F  02F4               	subwf	___lwdiv@dividend,f
 12005  1F80  0873               	movf	___lwdiv@divisor+1,w
 12006  1F81  3BF5               	subwfb	___lwdiv@dividend+1,f
 12007  1F82  1477               	bsf	___lwdiv@quotient,0
 12008  1F83                     l8203:	
 12009  1F83  3001               	movlw	1
 12010  1F84                     u7935:	
 12011  1F84  36F3               	lsrf	___lwdiv@divisor+1,f
 12012  1F85  0CF2               	rrf	___lwdiv@divisor,f
 12013  1F86  0B89               	decfsz	9,f
 12014  1F87  2F84               	goto	u7935
 12015  1F88  3001               	movlw	1
 12016  1F89  02F9               	subwf	___lwdiv@counter,f
 12017  1F8A  1D03               	btfss	3,2
 12018  1F8B  2F71               	goto	l8197
 12019  1F8C                     l8207:	
 12020  1F8C  0878               	movf	___lwdiv@quotient+1,w
 12021  1F8D  01F3               	clrf	?___lwdiv+1
 12022  1F8E  07F3               	addwf	?___lwdiv+1,f
 12023  1F8F  0877               	movf	___lwdiv@quotient,w
 12024  1F90  01F2               	clrf	?___lwdiv
 12025  1F91  07F2               	addwf	?___lwdiv,f
 12026  1F92  0008               	return
 12027  1F93                     __end_of___lwdiv:	
 12028                           
 12029                           	psect	text72
 12030  27B6                     __ptext72:	
 12031 ;; *************** function _Load_Initialization *****************
 12032 ;; Defined at:
 12033 ;;		line 9 in file "../src/OverLoad_B1.c"
 12034 ;; Parameters:    Size  Location     Type
 12035 ;;		None
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;		None
 12038 ;; Return value:  Size  Location     Type
 12039 ;;		None               void
 12040 ;; Registers used:
 12041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;Total ram usage:        0 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    4
 12054 ;; This function calls:
 12055 ;;		_setLoad_AH_AL_Restore
 12056 ;; This function is called by:
 12057 ;;		_main
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           
 12062                           ;psect for function _Load_Initialization
 12063  27B6                     _Load_Initialization:	
 12064                           
 12065                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12066                           
 12067                           ;incstack = 0
 12068                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12069  27B6  319B  23BC         	fcall	_setLoad_AH_AL_Restore
 12070  27B8  0008               	return
 12071  27B9                     __end_of_Load_Initialization:	
 12072                           
 12073                           	psect	text73
 12074  1BBC                     __ptext73:	
 12075 ;; *************** function _setLoad_AH_AL_Restore *****************
 12076 ;; Defined at:
 12077 ;;		line 294 in file "../src/OverLoad_B1.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;		None
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  i               1    3[COMMON] unsigned char 
 12082 ;; Return value:  Size  Location     Type
 12083 ;;		None               void
 12084 ;; Registers used:
 12085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12094 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;Total ram usage:        2 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:    3
 12098 ;; This function calls:
 12099 ;;		Nothing
 12100 ;; This function is called by:
 12101 ;;		_Load_Initialization
 12102 ;;		_Load_Main
 12103 ;; This function uses a non-reentrant model
 12104 ;;
 12105                           
 12106                           
 12107                           ;psect for function _setLoad_AH_AL_Restore
 12108  1BBC                     _setLoad_AH_AL_Restore:	
 12109                           
 12110                           ;OverLoad_B1.c: 295: char i;
 12111                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12112                           
 12113                           ;incstack = 0
 12114                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12115  1BBC  01F3               	clrf	setLoad_AH_AL_Restore@i
 12116  1BBD                     L10:	
 12117  1BBD  3005               	movlw	5
 12118  1BBE  0273               	subwf	setLoad_AH_AL_Restore@i,w
 12119  1BBF  1803               	btfsc	3,0
 12120  1BC0  0008               	return
 12121                           
 12122                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12123  1BC1  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12124  1BC2  3E3D               	addlw	(_Load+11)& (0+255)
 12125  1BC3  0086               	movwf	6
 12126  1BC4  3001               	movlw	1	; select bank2/3
 12127  1BC5  0087               	movwf	7
 12128  1BC6  3000               	movlw	0
 12129  1BC7  3FC0               	movwi [0]fsr1
 12130  1BC8  3FC1               	movwi [1]fsr1
 12131                           
 12132                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12133  1BC9  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12134  1BCA  3E47               	addlw	(_Load+21)& (0+255)
 12135  1BCB  0086               	movwf	6
 12136  1BCC  3001               	movlw	1	; select bank2/3
 12137  1BCD  0087               	movwf	7
 12138  1BCE  30FF               	movlw	255
 12139  1BCF  3FC0               	movwi [0]fsr1
 12140  1BD0  30FF               	movlw	255
 12141  1BD1  3FC1               	movwi [1]fsr1
 12142  1BD2  3001               	movlw	1
 12143  1BD3  00F2               	movwf	??_setLoad_AH_AL_Restore
 12144  1BD4  0872               	movf	??_setLoad_AH_AL_Restore,w
 12145  1BD5  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 12146  1BD6  2BBD               	goto	L10
 12147  1BD7                     __end_of_setLoad_AH_AL_Restore:	
 12148                           
 12149                           	psect	text74
 12150  18C7                     __ptext74:	
 12151 ;; *************** function _LED_Main *****************
 12152 ;; Defined at:
 12153 ;;		line 47 in file "../src/LED_B1.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;		None
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;		None
 12158 ;; Return value:  Size  Location     Type
 12159 ;;		None               void
 12160 ;; Registers used:
 12161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 0/0
 12164 ;;		On exit  : 0/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;Total ram usage:        0 bytes
 12172 ;; Hardware stack levels used:    1
 12173 ;; Hardware stack levels required when called:    5
 12174 ;; This function calls:
 12175 ;;		_setLED_Main
 12176 ;; This function is called by:
 12177 ;;		_main
 12178 ;; This function uses a non-reentrant model
 12179 ;;
 12180                           
 12181                           
 12182                           ;psect for function _LED_Main
 12183  18C7                     _LED_Main:	
 12184                           
 12185                           ;LED_B1.c: 58: setLED_Main(1);
 12186                           
 12187                           ;incstack = 0
 12188                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12189  18C7  3001               	movlw	1
 12190  18C8  3191  21DD  3198   	fcall	_setLED_Main
 12191                           
 12192                           ;LED_B1.c: 61: setLED_Main(2);
 12193  18CB  3002               	movlw	2
 12194  18CC  3191  21DD  3198   	fcall	_setLED_Main
 12195                           
 12196                           ;LED_B1.c: 67: setLED_Main(99);
 12197  18CF  3063               	movlw	99
 12198  18D0  3191  21DD         	fcall	_setLED_Main
 12199  18D2  0008               	return
 12200  18D3                     __end_of_LED_Main:	
 12201                           
 12202                           	psect	text75
 12203  11DD                     __ptext75:	
 12204 ;; *************** function _setLED_Main *****************
 12205 ;; Defined at:
 12206 ;;		line 229 in file "../src/LED_B1.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  led             1    wreg     unsigned char 
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  led             1    6[COMMON] unsigned char 
 12211 ;; Return value:  Size  Location     Type
 12212 ;;		None               void
 12213 ;; Registers used:
 12214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12215 ;; Tracked objects:
 12216 ;;		On entry : 0/0
 12217 ;;		On exit  : 0/0
 12218 ;;		Unchanged: 0/0
 12219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;Total ram usage:        3 bytes
 12225 ;; Hardware stack levels used:    1
 12226 ;; Hardware stack levels required when called:    4
 12227 ;; This function calls:
 12228 ;;		_LedPointSelect
 12229 ;; This function is called by:
 12230 ;;		_LED_Main
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function _setLED_Main
 12236  11DD                     _setLED_Main:	
 12237                           
 12238                           ;incstack = 0
 12239                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12240                           ;setLED_Main@led stored from wreg
 12241  11DD  00F6               	movwf	setLED_Main@led
 12242                           
 12243                           ;LED_B1.c: 230: LedPointSelect(led);
 12244  11DE  0876               	movf	setLED_Main@led,w
 12245  11DF  319C  240E  3191   	fcall	_LedPointSelect
 12246                           
 12247                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12248  11E2  0021               	movlb	1	; select bank1
 12249  11E3  086B               	movf	_LED^(0+128),w
 12250  11E4  0086               	movwf	6
 12251  11E5  3001               	movlw	1	; select bank2/3
 12252  11E6  0087               	movwf	7
 12253  11E7  1C81               	btfss	1,1
 12254  11E8  0008               	return
 12255                           
 12256                           ;LED_B1.c: 232: LED->Time++;
 12257  11E9  0A6B               	incf	_LED^(0+128),w
 12258  11EA  0086               	movwf	6
 12259  11EB  3001               	movlw	1	; select bank2/3
 12260  11EC  0087               	movwf	7
 12261  11ED  3001               	movlw	1
 12262  11EE  0781               	addwf	1,f
 12263  11EF  3141               	addfsr 1,1
 12264  11F0  1803               	skipnc
 12265  11F1  0A81               	incf	1,f
 12266                           
 12267                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12268  11F2  0A6B               	incf	_LED^(0+128),w
 12269  11F3  0086               	movwf	6
 12270  11F4  3001               	movlw	1	; select bank2/3
 12271  11F5  0087               	movwf	7
 12272  11F6  3F40               	moviw [0]fsr1
 12273  11F7  00F4               	movwf	??_setLED_Main
 12274  11F8  3F41               	moviw [1]fsr1
 12275  11F9  00F5               	movwf	??_setLED_Main+1
 12276  11FA  3000               	movlw	0
 12277  11FB  0275               	subwf	??_setLED_Main+1,w
 12278  11FC  3019               	movlw	25
 12279  11FD  1903               	skipnz
 12280  11FE  0274               	subwf	??_setLED_Main,w
 12281  11FF  1C03               	skipc
 12282  1200  0008               	return
 12283                           
 12284                           ;LED_B1.c: 234: LED->Time = 0;
 12285  1201  0A6B               	incf	_LED^(0+128),w
 12286  1202  0086               	movwf	6
 12287  1203  3001               	movlw	1	; select bank2/3
 12288  1204  0087               	movwf	7
 12289  1205  3000               	movlw	0
 12290  1206  3FC0               	movwi [0]fsr1
 12291  1207  3FC1               	movwi [1]fsr1
 12292                           
 12293                           ;LED_B1.c: 237: if (led == 1) {
 12294  1208  0876               	movf	setLED_Main@led,w
 12295  1209  3A01               	xorlw	1
 12296  120A  1D03               	skipz
 12297  120B  2A0F               	goto	l1223
 12298                           
 12299                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 12300  120C  3008               	movlw	8
 12301  120D  0020               	movlb	0	; select bank0
 12302  120E  068C               	xorwf	12,f
 12303  120F                     l1223:	
 12304                           
 12305                           ;LED_B1.c: 239: }
 12306                           ;LED_B1.c: 242: if (led == 2) {
 12307  120F  0876               	movf	setLED_Main@led,w
 12308  1210  3A02               	xorlw	2
 12309  1211  1D03               	skipz
 12310  1212  2A16               	goto	l1224
 12311                           
 12312                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 12313  1213  3080               	movlw	128
 12314  1214  0020               	movlb	0	; select bank0
 12315  1215  068E               	xorwf	14,f
 12316  1216                     l1224:	
 12317                           
 12318                           ;LED_B1.c: 244: }
 12319                           ;LED_B1.c: 252: if (led == 99) {
 12320  1216  0876               	movf	setLED_Main@led,w
 12321  1217  3A63               	xorlw	99
 12322  1218  1D03               	skipz
 12323  1219  0008               	return
 12324                           
 12325                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12326  121A  3020               	movlw	32
 12327  121B  0020               	movlb	0	; select bank0
 12328  121C  068D               	xorwf	13,f
 12329  121D  0008               	return
 12330  121E                     __end_of_setLED_Main:	
 12331                           
 12332                           	psect	text76
 12333  18BB                     __ptext76:	
 12334 ;; *************** function _LED_Initialization *****************
 12335 ;; Defined at:
 12336 ;;		line 31 in file "../src/LED_B1.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;		None
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;		None
 12341 ;; Return value:  Size  Location     Type
 12342 ;;		None               void
 12343 ;; Registers used:
 12344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;Total ram usage:        0 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    6
 12357 ;; This function calls:
 12358 ;;		_setLED_Initialization
 12359 ;; This function is called by:
 12360 ;;		_main
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           
 12365                           ;psect for function _LED_Initialization
 12366  18BB                     _LED_Initialization:	
 12367                           
 12368                           ;LED_B1.c: 33: setLED_Initialization(1);
 12369                           
 12370                           ;incstack = 0
 12371                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12372  18BB  3001               	movlw	1
 12373  18BC  3199  2168  3198   	fcall	_setLED_Initialization
 12374                           
 12375                           ;LED_B1.c: 36: setLED_Initialization(2);
 12376  18BF  3002               	movlw	2
 12377  18C0  3199  2168  3198   	fcall	_setLED_Initialization
 12378                           
 12379                           ;LED_B1.c: 42: setLED_Initialization(99);
 12380  18C3  3063               	movlw	99
 12381  18C4  3199  2168         	fcall	_setLED_Initialization
 12382  18C6  0008               	return
 12383  18C7                     __end_of_LED_Initialization:	
 12384                           
 12385                           	psect	text77
 12386  1968                     __ptext77:	
 12387 ;; *************** function _setLED_Initialization *****************
 12388 ;; Defined at:
 12389 ;;		line 74 in file "../src/LED_B1.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  led             1    wreg     unsigned char 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  led             1    6[COMMON] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;		None               void
 12396 ;; Registers used:
 12397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        1 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    5
 12410 ;; This function calls:
 12411 ;;		_LedPointSelect
 12412 ;;		_setLED
 12413 ;; This function is called by:
 12414 ;;		_LED_Initialization
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           
 12419                           ;psect for function _setLED_Initialization
 12420  1968                     _setLED_Initialization:	
 12421                           
 12422                           ;incstack = 0
 12423                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12424                           ;setLED_Initialization@led stored from wreg
 12425  1968  00F6               	movwf	setLED_Initialization@led
 12426                           
 12427                           ;LED_B1.c: 75: LedPointSelect(led);
 12428  1969  0876               	movf	setLED_Initialization@led,w
 12429  196A  319C  240E  3199   	fcall	_LedPointSelect
 12430                           
 12431                           ;LED_B1.c: 76: LED->Enable = 1;
 12432  196D  0021               	movlb	1	; select bank1
 12433  196E  086B               	movf	_LED^(0+128),w
 12434  196F  0086               	movwf	6
 12435  1970  3001               	movlw	1	; select bank2/3
 12436  1971  0087               	movwf	7
 12437  1972  1401               	bsf	1,0
 12438                           
 12439                           ;LED_B1.c: 77: setLED(led, 0);
 12440  1973  01F4               	clrf	setLED@command
 12441  1974  0876               	movf	setLED_Initialization@led,w
 12442  1975  3194  24ED         	fcall	_setLED
 12443  1977  0008               	return
 12444  1978                     __end_of_setLED_Initialization:	
 12445                           
 12446                           	psect	text78
 12447  119C                     __ptext78:	
 12448 ;; *************** function _Flash_Memory_Main *****************
 12449 ;; Defined at:
 12450 ;;		line 980 in file "../src/MCU_B1.c"
 12451 ;; Parameters:    Size  Location     Type
 12452 ;;		None
 12453 ;; Auto vars:     Size  Location     Type
 12454 ;;  key_Status      1    0[BANK0 ] unsigned char 
 12455 ;; Return value:  Size  Location     Type
 12456 ;;		None               void
 12457 ;; Registers used:
 12458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12459 ;; Tracked objects:
 12460 ;;		On entry : 0/0
 12461 ;;		On exit  : 0/0
 12462 ;;		Unchanged: 0/0
 12463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;Total ram usage:        3 bytes
 12469 ;; Hardware stack levels used:    1
 12470 ;; Hardware stack levels required when called:    6
 12471 ;; This function calls:
 12472 ;;		_Flash_Memory_Modify
 12473 ;;		_getAll_Sw_KeyStatus
 12474 ;;		_getMain_All_LightsStatus
 12475 ;; This function is called by:
 12476 ;;		_main
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           
 12481                           ;psect for function _Flash_Memory_Main
 12482  119C                     _Flash_Memory_Main:	
 12483                           
 12484                           ;MCU_B1.c: 981: char key_Status = 0;
 12485                           
 12486                           ;incstack = 0
 12487                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12488  119C  0020               	movlb	0	; select bank0
 12489  119D  01A0               	clrf	Flash_Memory_Main@key_Status
 12490                           
 12491                           ;MCU_B1.c: 983: key_Status = getAll_Sw_KeyStatus();
 12492  119E  3199  21B9  3191   	fcall	_getAll_Sw_KeyStatus
 12493  11A1  00F8               	movwf	??_Flash_Memory_Main
 12494  11A2  0878               	movf	??_Flash_Memory_Main,w
 12495  11A3  0020               	movlb	0	; select bank0
 12496  11A4  00A0               	movwf	Flash_Memory_Main@key_Status
 12497                           
 12498                           ;MCU_B1.c: 985: if (Memory.Modify == 1) {
 12499  11A5  0024               	movlb	4	; select bank4
 12500  11A6  1C54               	btfss	(_Memory^(0+512)+36),0
 12501  11A7  0008               	return
 12502                           
 12503                           ;MCU_B1.c: 986: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12504  11A8  0020               	movlb	0	; select bank0
 12505  11A9  01A1               	clrf	_Flash_Memory_Main$3708
 12506  11AA  3199  211A  3191   	fcall	_getMain_All_LightsStatus
 12507  11AD  3800               	iorlw	0
 12508  11AE  1D03               	skipz
 12509  11AF  29B6               	goto	l11021
 12510  11B0  0020               	movlb	0	; select bank0
 12511  11B1  08A0               	movf	Flash_Memory_Main@key_Status,f
 12512  11B2  1D03               	skipz
 12513  11B3  29B6               	goto	l11021
 12514  11B4  01A1               	clrf	_Flash_Memory_Main$3708
 12515  11B5  0AA1               	incf	_Flash_Memory_Main$3708,f
 12516  11B6                     l11021:	
 12517  11B6  0020               	movlb	0	; select bank0
 12518  11B7  0821               	movf	_Flash_Memory_Main$3708,w
 12519  11B8  0024               	movlb	4	; select bank4
 12520  11B9  10D4               	bcf	(_Memory^(0+512)+36),1
 12521  11BA  1D03               	skipz
 12522  11BB  14D4               	bsf	(_Memory^(0+512)+36),1
 12523                           
 12524                           ;MCU_B1.c: 987: if (Memory.GO == 1) {
 12525  11BC  1CD4               	btfss	(_Memory^(0+512)+36),1
 12526  11BD  29D7               	goto	l1499
 12527                           
 12528                           ;MCU_B1.c: 988: Memory.Runtime = 1;
 12529  11BE  15D4               	bsf	(_Memory^(0+512)+36),3
 12530                           
 12531                           ;MCU_B1.c: 989: Memory.Time++;
 12532  11BF  3001               	movlw	1
 12533  11C0  07D2               	addwf	(_Memory^(0+512)+34),f
 12534  11C1  3000               	movlw	0
 12535  11C2  3DD3               	addwfc	((_Memory+1)^(0+512)+34),f
 12536                           
 12537                           ;MCU_B1.c: 990: if (Memory.Time == (200 / 20)) {
 12538  11C3  3022               	movlw	34
 12539  11C4  3E30               	addlw	_Memory& (0+255)
 12540  11C5  0086               	movwf	6
 12541  11C6  3002               	movlw	2	; select bank4/5
 12542  11C7  0087               	movwf	7
 12543  11C8  3F40               	moviw [0]fsr1
 12544  11C9  3A0A               	xorlw	10
 12545  11CA  1D03               	skipz
 12546  11CB  29CE               	goto	u12575
 12547  11CC  3F41               	moviw [1]fsr1
 12548  11CD  3A00               	xorlw	0
 12549  11CE                     u12575:	
 12550  11CE  1D03               	skipz
 12551  11CF  0008               	return
 12552                           
 12553                           ;MCU_B1.c: 991: Memory.Time = 0;
 12554  11D0  01D2               	clrf	(_Memory^(0+512)+34)
 12555  11D1  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12556                           
 12557                           ;MCU_B1.c: 992: Memory.Modify = 0;
 12558  11D2  1054               	bcf	(_Memory^(0+512)+36),0
 12559                           
 12560                           ;MCU_B1.c: 993: Memory.GO = 0;
 12561  11D3  10D4               	bcf	(_Memory^(0+512)+36),1
 12562                           
 12563                           ;MCU_B1.c: 994: Flash_Memory_Modify();
 12564  11D4  3189  21DA         	fcall	_Flash_Memory_Modify
 12565                           
 12566                           ;MCU_B1.c: 995: }
 12567                           ;MCU_B1.c: 996: } else {
 12568  11D6  0008               	return
 12569  11D7                     l1499:	
 12570                           
 12571                           ;MCU_B1.c: 997: if (Memory.Runtime == 1) {
 12572  11D7  1DD4               	btfss	(_Memory^(0+512)+36),3
 12573  11D8  0008               	return
 12574                           
 12575                           ;MCU_B1.c: 998: Memory.Runtime = 0;
 12576  11D9  11D4               	bcf	(_Memory^(0+512)+36),3
 12577                           
 12578                           ;MCU_B1.c: 999: Memory.Time = 0;
 12579  11DA  01D2               	clrf	(_Memory^(0+512)+34)
 12580  11DB  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12581  11DC  0008               	return
 12582  11DD                     __end_of_Flash_Memory_Main:	
 12583                           
 12584                           	psect	text79
 12585  19B9                     __ptext79:	
 12586 ;; *************** function _getAll_Sw_KeyStatus *****************
 12587 ;; Defined at:
 12588 ;;		line 286 in file "../src/Switch_B1.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;		None
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;  status          1    3[COMMON] unsigned char 
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  1    wreg      unsigned char 
 12595 ;; Registers used:
 12596 ;;		wreg, status,2
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;Total ram usage:        3 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    3
 12609 ;; This function calls:
 12610 ;;		Nothing
 12611 ;; This function is called by:
 12612 ;;		_Flash_Memory_Main
 12613 ;; This function uses a non-reentrant model
 12614 ;;
 12615                           
 12616                           
 12617                           ;psect for function _getAll_Sw_KeyStatus
 12618  19B9                     _getAll_Sw_KeyStatus:	
 12619                           
 12620                           ;Switch_B1.c: 287: char status = 0;
 12621                           
 12622                           ;incstack = 0
 12623                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12624  19B9  01F3               	clrf	getAll_Sw_KeyStatus@status
 12625                           
 12626                           ;Switch_B1.c: 301: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
 12627  19BA  01F4               	clrf	_getAll_Sw_KeyStatus$7447
 12628  19BB  0AF4               	incf	_getAll_Sw_KeyStatus$7447,f
 12629  19BC  0020               	movlb	0	; select bank0
 12630  19BD  1F0C               	btfss	12,6	;volatile
 12631  19BE  1A0C               	btfsc	12,4	;volatile
 12632  19BF  29C4               	goto	l10681
 12633  19C0  1C0C               	btfss	12,0	;volatile
 12634  19C1  188D               	btfsc	13,1	;volatile
 12635  19C2  29C4               	goto	l10681
 12636  19C3  01F4               	clrf	_getAll_Sw_KeyStatus$7447
 12637  19C4                     l10681:	
 12638  19C4  0874               	movf	_getAll_Sw_KeyStatus$7447,w
 12639  19C5  00F2               	movwf	??_getAll_Sw_KeyStatus
 12640  19C6  0872               	movf	??_getAll_Sw_KeyStatus,w
 12641  19C7  00F3               	movwf	getAll_Sw_KeyStatus@status
 12642                           
 12643                           ;Switch_B1.c: 315: return status;
 12644  19C8  0873               	movf	getAll_Sw_KeyStatus@status,w
 12645  19C9  0008               	return
 12646  19CA                     __end_of_getAll_Sw_KeyStatus:	
 12647                           
 12648                           	psect	text80
 12649  09DA                     __ptext80:	
 12650 ;; *************** function _Flash_Memory_Modify *****************
 12651 ;; Defined at:
 12652 ;;		line 1057 in file "../src/MCU_B1.c"
 12653 ;; Parameters:    Size  Location     Type
 12654 ;;		None
 12655 ;; Auto vars:     Size  Location     Type
 12656 ;;  i               1    7[COMMON] unsigned char 
 12657 ;; Return value:  Size  Location     Type
 12658 ;;		None               void
 12659 ;; Registers used:
 12660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12661 ;; Tracked objects:
 12662 ;;		On entry : 0/0
 12663 ;;		On exit  : 0/0
 12664 ;;		Unchanged: 0/0
 12665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;Total ram usage:        2 bytes
 12671 ;; Hardware stack levels used:    1
 12672 ;; Hardware stack levels required when called:    5
 12673 ;; This function calls:
 12674 ;;		_Flash_Memory_Erasing
 12675 ;;		_Flash_Memory_Read
 12676 ;;		_Flash_Memory_Write
 12677 ;;		_setMemory_Data
 12678 ;; This function is called by:
 12679 ;;		_Flash_Memory_Main
 12680 ;; This function uses a non-reentrant model
 12681 ;;
 12682                           
 12683                           
 12684                           ;psect for function _Flash_Memory_Modify
 12685  09DA                     _Flash_Memory_Modify:	
 12686                           
 12687                           ;MCU_B1.c: 1058: char i = 0;
 12688                           
 12689                           ;incstack = 0
 12690                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12691  09DA  01F7               	clrf	Flash_Memory_Modify@i
 12692                           
 12693                           ;MCU_B1.c: 1059: for (i = 0; i < 32; i++) {
 12694  09DB  01F7               	clrf	Flash_Memory_Modify@i
 12695  09DC  3020               	movlw	32
 12696  09DD  0277               	subwf	Flash_Memory_Modify@i,w
 12697  09DE  1803               	btfsc	3,0
 12698  09DF  29F4               	goto	l10699
 12699  09E0                     l10693:	
 12700                           
 12701                           ;MCU_B1.c: 1060: Memory.Data[i] = Flash_Memory_Read(i);
 12702  09E0  0877               	movf	Flash_Memory_Modify@i,w
 12703  09E1  3190  2066  3189   	fcall	_Flash_Memory_Read
 12704  09E4  00F6               	movwf	??_Flash_Memory_Modify
 12705  09E5  0877               	movf	Flash_Memory_Modify@i,w
 12706  09E6  3E30               	addlw	_Memory& (0+255)
 12707  09E7  0086               	movwf	6
 12708  09E8  3002               	movlw	2	; select bank4/5
 12709  09E9  0087               	movwf	7
 12710  09EA  0876               	movf	??_Flash_Memory_Modify,w
 12711  09EB  0081               	movwf	1
 12712  09EC  3001               	movlw	1
 12713  09ED  00F6               	movwf	??_Flash_Memory_Modify
 12714  09EE  0876               	movf	??_Flash_Memory_Modify,w
 12715  09EF  07F7               	addwf	Flash_Memory_Modify@i,f
 12716  09F0  3020               	movlw	32
 12717  09F1  0277               	subwf	Flash_Memory_Modify@i,w
 12718  09F2  1C03               	skipc
 12719  09F3  29E0               	goto	l10693
 12720  09F4                     l10699:	
 12721                           
 12722                           ;MCU_B1.c: 1061: }
 12723                           ;MCU_B1.c: 1062: setMemory_Data(6, product->Data[11]);
 12724  09F4  087B               	movf	_product,w
 12725  09F5  0086               	movwf	6
 12726  09F6  3002               	movlw	2	; select bank4/5
 12727  09F7  0087               	movwf	7
 12728  09F8  3002               	movlw	2	; select bank4/5
 12729  09F9  3F4B               	moviw [11]fsr1
 12730  09FA  00F2               	movwf	setMemory_Data@data
 12731  09FB  3006               	movlw	6
 12732  09FC  3198  206B  3189   	fcall	_setMemory_Data
 12733                           
 12734                           ;MCU_B1.c: 1063: setMemory_Data(0, product->Data[12]);
 12735  09FF  087B               	movf	_product,w
 12736  0A00  0086               	movwf	6
 12737  0A01  3002               	movlw	2	; select bank4/5
 12738  0A02  0087               	movwf	7
 12739  0A03  3002               	movlw	2	; select bank4/5
 12740  0A04  3F4C               	moviw [12]fsr1
 12741  0A05  00F2               	movwf	setMemory_Data@data
 12742  0A06  3000               	movlw	0
 12743  0A07  3198  206B  3189   	fcall	_setMemory_Data
 12744                           
 12745                           ;MCU_B1.c: 1064: setMemory_Data(1, product->Data[13]);
 12746  0A0A  087B               	movf	_product,w
 12747  0A0B  0086               	movwf	6
 12748  0A0C  3002               	movlw	2	; select bank4/5
 12749  0A0D  0087               	movwf	7
 12750  0A0E  3002               	movlw	2	; select bank4/5
 12751  0A0F  3F4D               	moviw [13]fsr1
 12752  0A10  00F2               	movwf	setMemory_Data@data
 12753  0A11  3001               	movlw	1
 12754  0A12  3198  206B  3189   	fcall	_setMemory_Data
 12755                           
 12756                           ;MCU_B1.c: 1065: setMemory_Data(2, product->Data[14]);
 12757  0A15  087B               	movf	_product,w
 12758  0A16  0086               	movwf	6
 12759  0A17  3002               	movlw	2	; select bank4/5
 12760  0A18  0087               	movwf	7
 12761  0A19  3002               	movlw	2	; select bank4/5
 12762  0A1A  3F4E               	moviw [14]fsr1
 12763  0A1B  00F2               	movwf	setMemory_Data@data
 12764  0A1C  3002               	movlw	2
 12765  0A1D  3198  206B  3189   	fcall	_setMemory_Data
 12766                           
 12767                           ;MCU_B1.c: 1067: setMemory_Data(3, product->Data[21]);
 12768  0A20  087B               	movf	_product,w
 12769  0A21  0086               	movwf	6
 12770  0A22  3002               	movlw	2	; select bank4/5
 12771  0A23  0087               	movwf	7
 12772  0A24  3002               	movlw	2	; select bank4/5
 12773  0A25  3F55               	moviw [21]fsr1
 12774  0A26  00F2               	movwf	setMemory_Data@data
 12775  0A27  3003               	movlw	3
 12776  0A28  3198  206B  3189   	fcall	_setMemory_Data
 12777                           
 12778                           ;MCU_B1.c: 1068: setMemory_Data(4, product->Data[22]);
 12779  0A2B  087B               	movf	_product,w
 12780  0A2C  0086               	movwf	6
 12781  0A2D  3002               	movlw	2	; select bank4/5
 12782  0A2E  0087               	movwf	7
 12783  0A2F  3002               	movlw	2	; select bank4/5
 12784  0A30  3F56               	moviw [22]fsr1
 12785  0A31  00F2               	movwf	setMemory_Data@data
 12786  0A32  3004               	movlw	4
 12787  0A33  3198  206B  3189   	fcall	_setMemory_Data
 12788                           
 12789                           ;MCU_B1.c: 1069: setMemory_Data(5, product->Data[23]);
 12790  0A36  087B               	movf	_product,w
 12791  0A37  0086               	movwf	6
 12792  0A38  3002               	movlw	2	; select bank4/5
 12793  0A39  0087               	movwf	7
 12794  0A3A  3002               	movlw	2	; select bank4/5
 12795  0A3B  3F57               	moviw [23]fsr1
 12796  0A3C  00F2               	movwf	setMemory_Data@data
 12797  0A3D  3005               	movlw	5
 12798  0A3E  3198  206B  3189   	fcall	_setMemory_Data
 12799                           
 12800                           ;MCU_B1.c: 1070: if (myMain.SaveDimmer == 1) {
 12801  0A41  0021               	movlb	1	; select bank1
 12802  0A42  1ED9               	btfss	(_myMain^(0+128)+10),5
 12803  0A43  2A4D               	goto	l10707
 12804                           
 12805                           ;MCU_B1.c: 1071: myMain.SaveDimmer = 0;
 12806  0A44  12D9               	bcf	(_myMain^(0+128)+10),5
 12807                           
 12808                           ;MCU_B1.c: 1072: setMemory_Data(30, 0xaa);
 12809  0A45  30AA               	movlw	170
 12810  0A46  00F6               	movwf	??_Flash_Memory_Modify
 12811  0A47  0876               	movf	??_Flash_Memory_Modify,w
 12812  0A48  00F2               	movwf	setMemory_Data@data
 12813  0A49  301E               	movlw	30
 12814  0A4A  3198  206B  3189   	fcall	_setMemory_Data
 12815  0A4D                     l10707:	
 12816                           
 12817                           ;MCU_B1.c: 1073: }
 12818                           ;MCU_B1.c: 1075: if (Memory.LoopSave == 1) {
 12819  0A4D  0024               	movlb	4	; select bank4
 12820  0A4E  1D54               	btfss	(_Memory^(0+512)+36),2
 12821  0A4F  2A54               	goto	l1523
 12822                           
 12823                           ;MCU_B1.c: 1076: Memory.LoopSave = 0;
 12824  0A50  1154               	bcf	(_Memory^(0+512)+36),2
 12825                           
 12826                           ;MCU_B1.c: 1077: myMain.FirstOpen = 0;
 12827  0A51  0021               	movlb	1	; select bank1
 12828  0A52  11CF               	bcf	_myMain^(0+128),3
 12829                           
 12830                           ;MCU_B1.c: 1078: myMain.First = 0;
 12831  0A53  12CF               	bcf	_myMain^(0+128),5
 12832  0A54                     l1523:	
 12833                           
 12834                           ;MCU_B1.c: 1080: }
 12835                           ;MCU_B1.c: 1081: GIE = 0;
 12836  0A54  138B               	bcf	11,7	;volatile
 12837                           
 12838                           ;MCU_B1.c: 1082: Flash_Memory_Erasing();
 12839  0A55  3198  20AF  3189   	fcall	_Flash_Memory_Erasing
 12840                           
 12841                           ;MCU_B1.c: 1083: Flash_Memory_Write();
 12842  0A58  319E  2612         	fcall	_Flash_Memory_Write
 12843                           
 12844                           ;MCU_B1.c: 1084: GIE = 1;
 12845  0A5A  178B               	bsf	11,7	;volatile
 12846  0A5B  0008               	return
 12847  0A5C                     __end_of_Flash_Memory_Modify:	
 12848                           
 12849                           	psect	text81
 12850  18AF                     __ptext81:	
 12851 ;; *************** function _Flash_Memory_Erasing *****************
 12852 ;; Defined at:
 12853 ;;		line 1046 in file "../src/MCU_B1.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;		None
 12858 ;; Return value:  Size  Location     Type
 12859 ;;		None               void
 12860 ;; Registers used:
 12861 ;;		wreg, status,2, status,0, pclath, cstack
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;Total ram usage:        0 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    4
 12874 ;; This function calls:
 12875 ;;		_Flash_Memory_Unlock
 12876 ;; This function is called by:
 12877 ;;		_Flash_Memory_Modify
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           
 12882                           ;psect for function _Flash_Memory_Erasing
 12883  18AF                     _Flash_Memory_Erasing:	
 12884                           
 12885                           ;MCU_B1.c: 1047: CFGS = 0;
 12886                           
 12887                           ;incstack = 0
 12888                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12889  18AF  0023               	movlb	3	; select bank3
 12890  18B0  1315               	bcf	21,6	;volatile
 12891                           
 12892                           ;MCU_B1.c: 1048: PMADRH = 0x30;
 12893  18B1  3030               	movlw	48
 12894  18B2  0092               	movwf	18	;volatile
 12895                           
 12896                           ;MCU_B1.c: 1049: PMADRL = 0x00;
 12897  18B3  0191               	clrf	17	;volatile
 12898                           
 12899                           ;MCU_B1.c: 1050: FREE = 1;
 12900  18B4  1615               	bsf	21,4	;volatile
 12901                           
 12902                           ;MCU_B1.c: 1051: WREN = 1;
 12903  18B5  1515               	bsf	21,2	;volatile
 12904                           
 12905                           ;MCU_B1.c: 1052: Flash_Memory_Unlock();
 12906  18B6  3187  27F7         	fcall	_Flash_Memory_Unlock
 12907                           
 12908                           ;MCU_B1.c: 1053: WREN = 0;
 12909  18B8  0023               	movlb	3	; select bank3
 12910  18B9  1115               	bcf	21,2	;volatile
 12911  18BA  0008               	return
 12912  18BB                     __end_of_Flash_Memory_Erasing:	
 12913                           
 12914                           	psect	text82
 12915  0601                     __ptext82:	
 12916 ;; *************** function _Flash_Memory_Initialization *****************
 12917 ;; Defined at:
 12918 ;;		line 934 in file "../src/MCU_B1.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;		None
 12921 ;; Auto vars:     Size  Location     Type
 12922 ;;  value           1    7[COMMON] unsigned char 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;		None               void
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        2 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    5
 12939 ;; This function calls:
 12940 ;;		_Flash_Memory_Read
 12941 ;;		_Flash_Memory_Write
 12942 ;;		_setMemory_Data
 12943 ;; This function is called by:
 12944 ;;		_main
 12945 ;; This function uses a non-reentrant model
 12946 ;;
 12947                           
 12948                           
 12949                           ;psect for function _Flash_Memory_Initialization
 12950  0601                     _Flash_Memory_Initialization:	
 12951                           
 12952                           ;MCU_B1.c: 935: char value = 0;
 12953                           
 12954                           ;incstack = 0
 12955                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12956  0601  01F7               	clrf	Flash_Memory_Initialization@value
 12957                           
 12958                           ;MCU_B1.c: 936: if (Flash_Memory_Read(31) == 0xaa) {
 12959  0602  301F               	movlw	31
 12960  0603  3190  2066  3186   	fcall	_Flash_Memory_Read
 12961  0606  3AAA               	xorlw	170
 12962  0607  1D03               	skipz
 12963  0608  2E7C               	goto	l10995
 12964                           
 12965                           ;MCU_B1.c: 937: product->Data[11] = Flash_Memory_Read(6);
 12966  0609  3006               	movlw	6
 12967  060A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12968  060D  00F6               	movwf	??_Flash_Memory_Initialization
 12969  060E  087B               	movf	_product,w
 12970  060F  3E0B               	addlw	11
 12971  0610  0086               	movwf	6
 12972  0611  3002               	movlw	2	; select bank4/5
 12973  0612  0087               	movwf	7
 12974  0613  0876               	movf	??_Flash_Memory_Initialization,w
 12975  0614  0081               	movwf	1
 12976                           
 12977                           ;MCU_B1.c: 938: product->Data[12] = Flash_Memory_Read(0);
 12978  0615  3000               	movlw	0
 12979  0616  3190  2066  3186   	fcall	_Flash_Memory_Read
 12980  0619  00F6               	movwf	??_Flash_Memory_Initialization
 12981  061A  087B               	movf	_product,w
 12982  061B  3E0C               	addlw	12
 12983  061C  0086               	movwf	6
 12984  061D  3002               	movlw	2	; select bank4/5
 12985  061E  0087               	movwf	7
 12986  061F  0876               	movf	??_Flash_Memory_Initialization,w
 12987  0620  0081               	movwf	1
 12988                           
 12989                           ;MCU_B1.c: 939: product->Data[13] = Flash_Memory_Read(1);
 12990  0621  3001               	movlw	1
 12991  0622  3190  2066  3186   	fcall	_Flash_Memory_Read
 12992  0625  00F6               	movwf	??_Flash_Memory_Initialization
 12993  0626  087B               	movf	_product,w
 12994  0627  3E0D               	addlw	13
 12995  0628  0086               	movwf	6
 12996  0629  3002               	movlw	2	; select bank4/5
 12997  062A  0087               	movwf	7
 12998  062B  0876               	movf	??_Flash_Memory_Initialization,w
 12999  062C  0081               	movwf	1
 13000                           
 13001                           ;MCU_B1.c: 940: product->Data[14] = Flash_Memory_Read(2);
 13002  062D  3002               	movlw	2
 13003  062E  3190  2066  3186   	fcall	_Flash_Memory_Read
 13004  0631  00F6               	movwf	??_Flash_Memory_Initialization
 13005  0632  087B               	movf	_product,w
 13006  0633  3E0E               	addlw	14
 13007  0634  0086               	movwf	6
 13008  0635  3002               	movlw	2	; select bank4/5
 13009  0636  0087               	movwf	7
 13010  0637  0876               	movf	??_Flash_Memory_Initialization,w
 13011  0638  0081               	movwf	1
 13012                           
 13013                           ;MCU_B1.c: 943: product->Data[21] = Flash_Memory_Read(3);
 13014  0639  3003               	movlw	3
 13015  063A  3190  2066  3186   	fcall	_Flash_Memory_Read
 13016  063D  00F6               	movwf	??_Flash_Memory_Initialization
 13017  063E  087B               	movf	_product,w
 13018  063F  3E15               	addlw	21
 13019  0640  0086               	movwf	6
 13020  0641  3002               	movlw	2	; select bank4/5
 13021  0642  0087               	movwf	7
 13022  0643  0876               	movf	??_Flash_Memory_Initialization,w
 13023  0644  0081               	movwf	1
 13024                           
 13025                           ;MCU_B1.c: 944: product->Data[22] = Flash_Memory_Read(4);
 13026  0645  3004               	movlw	4
 13027  0646  3190  2066  3186   	fcall	_Flash_Memory_Read
 13028  0649  00F6               	movwf	??_Flash_Memory_Initialization
 13029  064A  087B               	movf	_product,w
 13030  064B  3E16               	addlw	22
 13031  064C  0086               	movwf	6
 13032  064D  3002               	movlw	2	; select bank4/5
 13033  064E  0087               	movwf	7
 13034  064F  0876               	movf	??_Flash_Memory_Initialization,w
 13035  0650  0081               	movwf	1
 13036                           
 13037                           ;MCU_B1.c: 945: product->Data[23] = Flash_Memory_Read(5);
 13038  0651  3005               	movlw	5
 13039  0652  3190  2066  3186   	fcall	_Flash_Memory_Read
 13040  0655  00F6               	movwf	??_Flash_Memory_Initialization
 13041  0656  087B               	movf	_product,w
 13042  0657  3E17               	addlw	23
 13043  0658  0086               	movwf	6
 13044  0659  3002               	movlw	2	; select bank4/5
 13045  065A  0087               	movwf	7
 13046  065B  0876               	movf	??_Flash_Memory_Initialization,w
 13047  065C  0081               	movwf	1
 13048                           
 13049                           ;MCU_B1.c: 952: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13050  065D  087B               	movf	_product,w
 13051  065E  3E0C               	addlw	12
 13052  065F  0086               	movwf	6
 13053  0660  3002               	movlw	2	; select bank4/5
 13054  0661  0087               	movwf	7
 13055  0662  0801               	movf	1,w
 13056  0663  3AFF               	xorlw	255
 13057  0664  1D03               	skipz
 13058  0665  0008               	return
 13059  0666  087B               	movf	_product,w
 13060  0667  3E0D               	addlw	13
 13061  0668  0086               	movwf	6
 13062  0669  3002               	movlw	2	; select bank4/5
 13063  066A  0087               	movwf	7
 13064  066B  0801               	movf	1,w
 13065  066C  3AFF               	xorlw	255
 13066  066D  1D03               	skipz
 13067  066E  0008               	return
 13068  066F  087B               	movf	_product,w
 13069  0670  3E0E               	addlw	14
 13070  0671  0086               	movwf	6
 13071  0672  3002               	movlw	2	; select bank4/5
 13072  0673  0087               	movwf	7
 13073  0674  0801               	movf	1,w
 13074  0675  3AFF               	xorlw	255
 13075  0676  1D03               	skipz
 13076  0677  0008               	return
 13077                           
 13078                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 13079  0678  0021               	movlb	1	; select bank1
 13080  0679  15CF               	bsf	_myMain^(0+128),3
 13081                           
 13082                           ;MCU_B1.c: 954: myMain.First = 1;
 13083  067A  16CF               	bsf	_myMain^(0+128),5
 13084                           
 13085                           ;MCU_B1.c: 955: }
 13086                           ;MCU_B1.c: 956: } else {
 13087  067B  0008               	return
 13088  067C                     l10995:	
 13089                           
 13090                           ;MCU_B1.c: 958: setMemory_Data(0, 0xff);
 13091  067C  30FF               	movlw	255
 13092  067D  00F6               	movwf	??_Flash_Memory_Initialization
 13093  067E  0876               	movf	??_Flash_Memory_Initialization,w
 13094  067F  00F2               	movwf	setMemory_Data@data
 13095  0680  3000               	movlw	0
 13096  0681  3198  206B  3186   	fcall	_setMemory_Data
 13097                           
 13098                           ;MCU_B1.c: 959: setMemory_Data(1, 0xff);
 13099  0684  30FF               	movlw	255
 13100  0685  00F6               	movwf	??_Flash_Memory_Initialization
 13101  0686  0876               	movf	??_Flash_Memory_Initialization,w
 13102  0687  00F2               	movwf	setMemory_Data@data
 13103  0688  3001               	movlw	1
 13104  0689  3198  206B  3186   	fcall	_setMemory_Data
 13105                           
 13106                           ;MCU_B1.c: 960: setMemory_Data(2, 0xff);
 13107  068C  30FF               	movlw	255
 13108  068D  00F6               	movwf	??_Flash_Memory_Initialization
 13109  068E  0876               	movf	??_Flash_Memory_Initialization,w
 13110  068F  00F2               	movwf	setMemory_Data@data
 13111  0690  3002               	movlw	2
 13112  0691  3198  206B  3186   	fcall	_setMemory_Data
 13113                           
 13114                           ;MCU_B1.c: 961: setMemory_Data(3, 0xff);
 13115  0694  30FF               	movlw	255
 13116  0695  00F6               	movwf	??_Flash_Memory_Initialization
 13117  0696  0876               	movf	??_Flash_Memory_Initialization,w
 13118  0697  00F2               	movwf	setMemory_Data@data
 13119  0698  3003               	movlw	3
 13120  0699  3198  206B  3186   	fcall	_setMemory_Data
 13121                           
 13122                           ;MCU_B1.c: 962: setMemory_Data(4, 0xff);
 13123  069C  30FF               	movlw	255
 13124  069D  00F6               	movwf	??_Flash_Memory_Initialization
 13125  069E  0876               	movf	??_Flash_Memory_Initialization,w
 13126  069F  00F2               	movwf	setMemory_Data@data
 13127  06A0  3004               	movlw	4
 13128  06A1  3198  206B  3186   	fcall	_setMemory_Data
 13129                           
 13130                           ;MCU_B1.c: 963: setMemory_Data(5, 0xff);
 13131  06A4  30FF               	movlw	255
 13132  06A5  00F6               	movwf	??_Flash_Memory_Initialization
 13133  06A6  0876               	movf	??_Flash_Memory_Initialization,w
 13134  06A7  00F2               	movwf	setMemory_Data@data
 13135  06A8  3005               	movlw	5
 13136  06A9  3198  206B  3186   	fcall	_setMemory_Data
 13137                           
 13138                           ;MCU_B1.c: 964: setMemory_Data(6, 0xff);
 13139  06AC  30FF               	movlw	255
 13140  06AD  00F6               	movwf	??_Flash_Memory_Initialization
 13141  06AE  0876               	movf	??_Flash_Memory_Initialization,w
 13142  06AF  00F2               	movwf	setMemory_Data@data
 13143  06B0  3006               	movlw	6
 13144  06B1  3198  206B  3186   	fcall	_setMemory_Data
 13145                           
 13146                           ;MCU_B1.c: 965: setMemory_Data(31, 0xaa);
 13147  06B4  30AA               	movlw	170
 13148  06B5  00F6               	movwf	??_Flash_Memory_Initialization
 13149  06B6  0876               	movf	??_Flash_Memory_Initialization,w
 13150  06B7  00F2               	movwf	setMemory_Data@data
 13151  06B8  301F               	movlw	31
 13152  06B9  3198  206B  3186   	fcall	_setMemory_Data
 13153                           
 13154                           ;MCU_B1.c: 970: GIE = 0;
 13155  06BC  138B               	bcf	11,7	;volatile
 13156                           
 13157                           ;MCU_B1.c: 971: Flash_Memory_Write();
 13158  06BD  319E  2612         	fcall	_Flash_Memory_Write
 13159                           
 13160                           ;MCU_B1.c: 972: GIE = 1;
 13161  06BF  178B               	bsf	11,7	;volatile
 13162                           
 13163                           ;MCU_B1.c: 973: myMain.FirstOpen = 1;
 13164  06C0  0021               	movlb	1	; select bank1
 13165  06C1  15CF               	bsf	_myMain^(0+128),3
 13166                           
 13167                           ;MCU_B1.c: 974: myMain.First = 1;
 13168  06C2  16CF               	bsf	_myMain^(0+128),5
 13169                           
 13170                           ;MCU_B1.c: 975: myMain.InitDimmer = 1;
 13171  06C3  1659               	bsf	(_myMain^(0+128)+10),4
 13172  06C4  0008               	return
 13173  06C5                     __end_of_Flash_Memory_Initialization:	
 13174                           
 13175                           	psect	text83
 13176  186B                     __ptext83:	
 13177 ;; *************** function _setMemory_Data *****************
 13178 ;; Defined at:
 13179 ;;		line 1099 in file "../src/MCU_B1.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  address         1    wreg     unsigned char 
 13182 ;;  data            1    2[COMMON] unsigned char 
 13183 ;; Auto vars:     Size  Location     Type
 13184 ;;  address         1    4[COMMON] unsigned char 
 13185 ;; Return value:  Size  Location     Type
 13186 ;;		None               void
 13187 ;; Registers used:
 13188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13189 ;; Tracked objects:
 13190 ;;		On entry : 0/0
 13191 ;;		On exit  : 0/0
 13192 ;;		Unchanged: 0/0
 13193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13194 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;Total ram usage:        3 bytes
 13199 ;; Hardware stack levels used:    1
 13200 ;; Hardware stack levels required when called:    3
 13201 ;; This function calls:
 13202 ;;		Nothing
 13203 ;; This function is called by:
 13204 ;;		_Flash_Memory_Initialization
 13205 ;;		_Flash_Memory_Modify
 13206 ;; This function uses a non-reentrant model
 13207 ;;
 13208                           
 13209                           
 13210                           ;psect for function _setMemory_Data
 13211  186B                     _setMemory_Data:	
 13212                           
 13213                           ;incstack = 0
 13214                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13215                           ;setMemory_Data@address stored from wreg
 13216  186B  00F4               	movwf	setMemory_Data@address
 13217                           
 13218                           ;MCU_B1.c: 1100: Memory.Data[address] = data;
 13219  186C  0872               	movf	setMemory_Data@data,w
 13220  186D  00F3               	movwf	??_setMemory_Data
 13221  186E  0874               	movf	setMemory_Data@address,w
 13222  186F  3E30               	addlw	_Memory& (0+255)
 13223  1870  0086               	movwf	6
 13224  1871  3002               	movlw	2	; select bank4/5
 13225  1872  0087               	movwf	7
 13226  1873  0873               	movf	??_setMemory_Data,w
 13227  1874  0081               	movwf	1
 13228  1875  0008               	return
 13229  1876                     __end_of_setMemory_Data:	
 13230                           
 13231                           	psect	text84
 13232  1E12                     __ptext84:	
 13233 ;; *************** function _Flash_Memory_Write *****************
 13234 ;; Defined at:
 13235 ;;		line 1027 in file "../src/MCU_B1.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;  i               1    3[COMMON] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;		None               void
 13242 ;; Registers used:
 13243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;Total ram usage:        2 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    4
 13256 ;; This function calls:
 13257 ;;		_Flash_Memory_Unlock
 13258 ;; This function is called by:
 13259 ;;		_Flash_Memory_Initialization
 13260 ;;		_Flash_Memory_Modify
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _Flash_Memory_Write
 13266  1E12                     _Flash_Memory_Write:	
 13267                           
 13268                           ;MCU_B1.c: 1028: char i = 0;
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13272  1E12  01F3               	clrf	Flash_Memory_Write@i
 13273                           
 13274                           ;MCU_B1.c: 1029: CFGS = 0;
 13275  1E13  0023               	movlb	3	; select bank3
 13276  1E14  1315               	bcf	21,6	;volatile
 13277                           
 13278                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 13279  1E15  3030               	movlw	48
 13280  1E16  0092               	movwf	18	;volatile
 13281                           
 13282                           ;MCU_B1.c: 1031: PMDATH = 0;
 13283  1E17  0194               	clrf	20	;volatile
 13284                           
 13285                           ;MCU_B1.c: 1032: FREE = 0;
 13286  1E18  1215               	bcf	21,4	;volatile
 13287                           
 13288                           ;MCU_B1.c: 1033: LWLO = 1;
 13289  1E19  1695               	bsf	21,5	;volatile
 13290                           
 13291                           ;MCU_B1.c: 1034: WREN = 1;
 13292  1E1A  1515               	bsf	21,2	;volatile
 13293                           
 13294                           ;MCU_B1.c: 1035: for (i = 0; i < 32; i++) {
 13295  1E1B  01F3               	clrf	Flash_Memory_Write@i
 13296  1E1C  3020               	movlw	32
 13297  1E1D  0273               	subwf	Flash_Memory_Write@i,w
 13298  1E1E  1803               	btfsc	3,0
 13299  1E1F  2E35               	goto	l1513
 13300  1E20                     l10411:	
 13301                           
 13302                           ;MCU_B1.c: 1036: PMADRL = i;
 13303  1E20  0873               	movf	Flash_Memory_Write@i,w
 13304  1E21  0023               	movlb	3	; select bank3
 13305  1E22  0091               	movwf	17	;volatile
 13306                           
 13307                           ;MCU_B1.c: 1037: PMDATL = Memory.Data[i];
 13308  1E23  0873               	movf	Flash_Memory_Write@i,w
 13309  1E24  3E30               	addlw	_Memory& (0+255)
 13310  1E25  0086               	movwf	6
 13311  1E26  3002               	movlw	2	; select bank4/5
 13312  1E27  0087               	movwf	7
 13313  1E28  0801               	movf	1,w
 13314  1E29  0093               	movwf	19	;volatile
 13315                           
 13316                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 13317  1E2A  3187  27F7  319E   	fcall	_Flash_Memory_Unlock
 13318  1E2D  3001               	movlw	1
 13319  1E2E  00F2               	movwf	??_Flash_Memory_Write
 13320  1E2F  0872               	movf	??_Flash_Memory_Write,w
 13321  1E30  07F3               	addwf	Flash_Memory_Write@i,f
 13322  1E31  3020               	movlw	32
 13323  1E32  0273               	subwf	Flash_Memory_Write@i,w
 13324  1E33  1C03               	skipc
 13325  1E34  2E20               	goto	l10411
 13326  1E35                     l1513:	
 13327                           
 13328                           ;MCU_B1.c: 1039: }
 13329                           ;MCU_B1.c: 1040: LWLO = 0;
 13330  1E35  0023               	movlb	3	; select bank3
 13331  1E36  1295               	bcf	21,5	;volatile
 13332                           
 13333                           ;MCU_B1.c: 1041: Flash_Memory_Unlock();
 13334  1E37  3187  27F7         	fcall	_Flash_Memory_Unlock
 13335                           
 13336                           ;MCU_B1.c: 1042: WREN = 0;
 13337  1E39  0023               	movlb	3	; select bank3
 13338  1E3A  1115               	bcf	21,2	;volatile
 13339  1E3B  0008               	return
 13340  1E3C                     __end_of_Flash_Memory_Write:	
 13341                           
 13342                           	psect	text85
 13343  07F7                     __ptext85:	
 13344 ;; *************** function _Flash_Memory_Unlock *****************
 13345 ;; Defined at:
 13346 ;;		line 1006 in file "../src/MCU_B1.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;		None
 13349 ;; Auto vars:     Size  Location     Type
 13350 ;;		None
 13351 ;; Return value:  Size  Location     Type
 13352 ;;		None               void
 13353 ;; Registers used:
 13354 ;;		wreg
 13355 ;; Tracked objects:
 13356 ;;		On entry : 0/0
 13357 ;;		On exit  : 0/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;Total ram usage:        0 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; Hardware stack levels required when called:    3
 13367 ;; This function calls:
 13368 ;;		Nothing
 13369 ;; This function is called by:
 13370 ;;		_Flash_Memory_Write
 13371 ;;		_Flash_Memory_Erasing
 13372 ;; This function uses a non-reentrant model
 13373 ;;
 13374                           
 13375                           
 13376                           ;psect for function _Flash_Memory_Unlock
 13377  07F7                     _Flash_Memory_Unlock:	
 13378                           
 13379                           ;MCU_B1.c: 1007: PMCON2 = 0x55;
 13380                           
 13381                           ;incstack = 0
 13382                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13383  07F7  3055               	movlw	85
 13384  07F8  0023               	movlb	3	; select bank3
 13385  07F9  0096               	movwf	22	;volatile
 13386                           
 13387                           ;MCU_B1.c: 1008: PMCON2 = 0xaa;
 13388  07FA  30AA               	movlw	170
 13389  07FB  0096               	movwf	22	;volatile
 13390                           
 13391                           ;MCU_B1.c: 1009: WR = 1;
 13392  07FC  1495               	bsf	21,1	;volatile
 13393                           
 13394                           ;MCU_B1.c: 1010: __nop();
 13395  07FD  0000               	nop
 13396                           
 13397                           ;MCU_B1.c: 1011: __nop();
 13398  07FE  0000               	nop
 13399  07FF  0008               	return
 13400  0800                     __end_of_Flash_Memory_Unlock:	
 13401                           
 13402                           	psect	text86
 13403  1066                     __ptext86:	
 13404 ;; *************** function _Flash_Memory_Read *****************
 13405 ;; Defined at:
 13406 ;;		line 1015 in file "../src/MCU_B1.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  address         1    wreg     unsigned char 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  address         1    4[COMMON] unsigned char 
 13411 ;;  ret             1    5[COMMON] unsigned char 
 13412 ;;  i               1    3[COMMON] unsigned char 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  1    wreg      unsigned char 
 13415 ;; Registers used:
 13416 ;;		wreg, status,2
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;Total ram usage:        4 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    3
 13429 ;; This function calls:
 13430 ;;		Nothing
 13431 ;; This function is called by:
 13432 ;;		_Flash_Memory_Initialization
 13433 ;;		_Flash_Memory_Modify
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437                           
 13438                           ;psect for function _Flash_Memory_Read
 13439  1066                     _Flash_Memory_Read:	
 13440                           
 13441                           ;incstack = 0
 13442                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13443                           ;Flash_Memory_Read@address stored from wreg
 13444  1066  00F4               	movwf	Flash_Memory_Read@address
 13445                           
 13446                           ;MCU_B1.c: 1016: char i = 0, ret = 0;
 13447  1067  01F3               	clrf	Flash_Memory_Read@i
 13448  1068  01F5               	clrf	Flash_Memory_Read@ret
 13449                           
 13450                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 13451  1069  3030               	movlw	48
 13452  106A  0023               	movlb	3	; select bank3
 13453  106B  0092               	movwf	18	;volatile
 13454                           
 13455                           ;MCU_B1.c: 1018: PMADRL = address;
 13456  106C  0874               	movf	Flash_Memory_Read@address,w
 13457  106D  0091               	movwf	17	;volatile
 13458                           
 13459                           ;MCU_B1.c: 1019: CFGS = 0;
 13460  106E  1315               	bcf	21,6	;volatile
 13461                           
 13462                           ;MCU_B1.c: 1020: RD = 1;
 13463  106F  1415               	bsf	21,0	;volatile
 13464                           
 13465                           ;MCU_B1.c: 1021: i = PMDATH;
 13466  1070  0814               	movf	20,w	;volatile
 13467  1071  00F2               	movwf	??_Flash_Memory_Read
 13468  1072  0872               	movf	??_Flash_Memory_Read,w
 13469  1073  00F3               	movwf	Flash_Memory_Read@i
 13470                           
 13471                           ;MCU_B1.c: 1022: ret = PMDATL;
 13472  1074  0813               	movf	19,w	;volatile
 13473  1075  00F2               	movwf	??_Flash_Memory_Read
 13474  1076  0872               	movf	??_Flash_Memory_Read,w
 13475  1077  00F5               	movwf	Flash_Memory_Read@ret
 13476                           
 13477                           ;MCU_B1.c: 1023: return ret;
 13478  1078  0875               	movf	Flash_Memory_Read@ret,w
 13479  1079  0008               	return
 13480  107A                     __end_of_Flash_Memory_Read:	
 13481                           
 13482                           	psect	text87
 13483  052F                     __ptext87:	
 13484 ;; *************** function _Exception_Main *****************
 13485 ;; Defined at:
 13486 ;;		line 504 in file "../src/Main_B1.c"
 13487 ;; Parameters:    Size  Location     Type
 13488 ;;		None
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;  i               2   11[BANK0 ] int 
 13491 ;;  i               2    9[BANK0 ] int 
 13492 ;;  lights          1   13[BANK0 ] unsigned char 
 13493 ;;  error           1    8[BANK0 ] unsigned char 
 13494 ;;  count           1    7[BANK0 ] unsigned char 
 13495 ;;  status          1    6[BANK0 ] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;		None               void
 13498 ;; Registers used:
 13499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;Total ram usage:        9 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    5
 13512 ;; This function calls:
 13513 ;;		_getDimmerLights_Line
 13514 ;;		_getDimmerLights_Status
 13515 ;;		_getMain_All_Error_Status
 13516 ;;		_getMain_All_LightsStatus
 13517 ;;		_setBuz
 13518 ;;		_setDimmerLights_SwOff
 13519 ;;		_setLED
 13520 ;; This function is called by:
 13521 ;;		_main
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _Exception_Main
 13527  052F                     _Exception_Main:	
 13528                           
 13529                           ;Main_B1.c: 505: char error = getMain_All_Error_Status(0);
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13533  052F  3000               	movlw	0
 13534  0530  319E  263C  3185   	fcall	_getMain_All_Error_Status
 13535  0533  00F9               	movwf	??_Exception_Main
 13536  0534  0879               	movf	??_Exception_Main,w
 13537  0535  0020               	movlb	0	; select bank0
 13538  0536  00A8               	movwf	Exception_Main@error
 13539                           
 13540                           ;Main_B1.c: 506: char lights = 0, count = 2;
 13541  0537  01AD               	clrf	Exception_Main@lights
 13542  0538  3002               	movlw	2
 13543  0539  00F9               	movwf	??_Exception_Main
 13544  053A  0879               	movf	??_Exception_Main,w
 13545  053B  00A7               	movwf	Exception_Main@count
 13546                           
 13547                           ;Main_B1.c: 507: char status = 0;
 13548  053C  01A6               	clrf	Exception_Main@status
 13549                           
 13550                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
 13551  053D  0021               	movlb	1	; select bank1
 13552  053E  1DD9               	btfss	(_myMain^(0+128)+10),3
 13553  053F  2D4E               	goto	l11251
 13554                           
 13555                           ;Main_B1.c: 510: if (error == 0) {
 13556  0540  0020               	movlb	0	; select bank0
 13557  0541  08A8               	movf	Exception_Main@error,f
 13558  0542  1D03               	skipz
 13559  0543  0008               	return
 13560                           
 13561                           ;Main_B1.c: 511: myMain.Error_Run = 0;
 13562  0544  0021               	movlb	1	; select bank1
 13563  0545  11D9               	bcf	(_myMain^(0+128)+10),3
 13564                           
 13565                           ;Main_B1.c: 514: setLED(99, 10);
 13566  0546  300A               	movlw	10
 13567  0547  00F9               	movwf	??_Exception_Main
 13568  0548  0879               	movf	??_Exception_Main,w
 13569  0549  00F4               	movwf	setLED@command
 13570  054A  3063               	movlw	99
 13571  054B  3194  24ED         	fcall	_setLED
 13572                           
 13573                           ;Main_B1.c: 527: }
 13574                           ;Main_B1.c: 528: } else {
 13575  054D  0008               	return
 13576  054E                     l11251:	
 13577                           
 13578                           ;Main_B1.c: 529: if (error != 0) {
 13579  054E  0020               	movlb	0	; select bank0
 13580  054F  0828               	movf	Exception_Main@error,w
 13581  0550  1903               	btfsc	3,2
 13582  0551  0008               	return
 13583                           
 13584                           ;Main_B1.c: 530: myMain.Error_Run = 1;
 13585  0552  0021               	movlb	1	; select bank1
 13586  0553  15D9               	bsf	(_myMain^(0+128)+10),3
 13587                           
 13588                           ;Main_B1.c: 532: setLED(99, 11);
 13589  0554  300B               	movlw	11
 13590  0555  00F9               	movwf	??_Exception_Main
 13591  0556  0879               	movf	??_Exception_Main,w
 13592  0557  00F4               	movwf	setLED@command
 13593  0558  3063               	movlw	99
 13594  0559  3194  24ED  3185   	fcall	_setLED
 13595                           
 13596                           ;Main_B1.c: 543: switch (error) {
 13597  055C  2DF6               	goto	l11299
 13598  055D                     l11257:	
 13599                           ;Main_B1.c: 544: case 2:
 13600                           
 13601                           
 13602                           ;Main_B1.c: 551: if (getMain_All_LightsStatus() == 1) {
 13603  055D  3199  211A  3185   	fcall	_getMain_All_LightsStatus
 13604  0560  3A01               	xorlw	1
 13605  0561  1D03               	skipz
 13606  0562  2D6C               	goto	l11261
 13607                           
 13608                           ;Main_B1.c: 552: setBuz(10, 300);
 13609  0563  302C               	movlw	44
 13610  0564  0020               	movlb	0	; select bank0
 13611  0565  00A4               	movwf	setBuz@time
 13612  0566  3001               	movlw	1
 13613  0567  00A5               	movwf	setBuz@time+1
 13614  0568  300A               	movlw	10
 13615  0569  3192  22EC  3185   	fcall	_setBuz
 13616  056C                     l11261:	
 13617                           
 13618                           ;Main_B1.c: 553: }
 13619                           ;Main_B1.c: 555: for (int i = 0; i < count; i++) {
 13620  056C  0020               	movlb	0	; select bank0
 13621  056D  01A9               	clrf	Exception_Main@i
 13622  056E  01AA               	clrf	Exception_Main@i+1
 13623  056F                     l11271:	
 13624  056F  082A               	movf	Exception_Main@i+1,w
 13625  0570  3A80               	xorlw	128
 13626  0571  00F9               	movwf	??_Exception_Main
 13627  0572  3080               	movlw	128
 13628  0573  0279               	subwf	??_Exception_Main,w
 13629  0574  1D03               	skipz
 13630  0575  2D78               	goto	u13005
 13631  0576  0827               	movf	Exception_Main@count,w
 13632  0577  0229               	subwf	Exception_Main@i,w
 13633  0578                     u13005:	
 13634  0578  1803               	btfsc	3,0
 13635  0579  2D99               	goto	u13000
 13636                           
 13637                           ;Main_B1.c: 557: if (getDimmerLights_Status(i + 1) == 1) {
 13638  057A  0020               	movlb	0	; select bank0
 13639  057B  0829               	movf	Exception_Main@i,w
 13640  057C  3E01               	addlw	1
 13641  057D  3198  20ED  3185   	fcall	_getDimmerLights_Status
 13642  0580  3A01               	xorlw	1
 13643  0581  1D03               	skipz
 13644  0582  2D93               	goto	l11269
 13645                           
 13646                           ;Main_B1.c: 558: DimmerLights->SwFlag = 1;
 13647  0583  0020               	movlb	0	; select bank0
 13648  0584  086C               	movf	_DimmerLights,w
 13649  0585  0086               	movwf	6
 13650  0586  3001               	movlw	1	; select bank2/3
 13651  0587  0087               	movwf	7
 13652  0588  1401               	bsf	1,0
 13653                           
 13654                           ;Main_B1.c: 559: DimmerLights->Status = 0;
 13655  0589  0A6C               	incf	_DimmerLights,w
 13656  058A  0086               	movwf	6
 13657  058B  3001               	movlw	1	; select bank2/3
 13658  058C  0087               	movwf	7
 13659  058D  1001               	bcf	1,0
 13660                           
 13661                           ;Main_B1.c: 560: setDimmerLights_SwOff(i + 1);
 13662  058E  0829               	movf	Exception_Main@i,w
 13663  058F  3E01               	addlw	1
 13664  0590  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13665  0593                     l11269:	
 13666  0593  3001               	movlw	1
 13667  0594  0020               	movlb	0	; select bank0
 13668  0595  07A9               	addwf	Exception_Main@i,f
 13669  0596  3000               	movlw	0
 13670  0597  3DAA               	addwfc	Exception_Main@i+1,f
 13671  0598  2D6F               	goto	l11271
 13672  0599                     u13000:	
 13673  0599  0020               	movlb	0	; select bank0
 13674  059A  0008               	return
 13675  059B                     l11273:	
 13676                           ;Main_B1.c: 566: case 3:
 13677                           
 13678                           ;Main_B1.c: 561: }
 13679                           ;Main_B1.c: 562: }
 13680                           ;Main_B1.c: 565: break;
 13681                           
 13682                           
 13683                           ;Main_B1.c: 568: setBuz(5, 300);
 13684  059B  302C               	movlw	44
 13685  059C  0020               	movlb	0	; select bank0
 13686  059D  00A4               	movwf	setBuz@time
 13687  059E  3001               	movlw	1
 13688  059F  00A5               	movwf	setBuz@time+1
 13689  05A0  3005               	movlw	5
 13690  05A1  3192  22EC  3185   	fcall	_setBuz
 13691                           
 13692                           ;Main_B1.c: 569: lights = getDimmerLights_Line();
 13693  05A4  3199  2129  3185   	fcall	_getDimmerLights_Line
 13694  05A7  00F9               	movwf	??_Exception_Main
 13695  05A8  0879               	movf	??_Exception_Main,w
 13696  05A9  0020               	movlb	0	; select bank0
 13697  05AA  00AD               	movwf	Exception_Main@lights
 13698                           
 13699                           ;Main_B1.c: 570: if (lights == 0) {
 13700  05AB  08AD               	movf	Exception_Main@lights,f
 13701  05AC  1D03               	skipz
 13702  05AD  2DDC               	goto	l11291
 13703                           
 13704                           ;Main_B1.c: 572: for (int i = 0; i < count; i++) {
 13705  05AE  01AB               	clrf	Exception_Main@i_4227
 13706  05AF  01AC               	clrf	Exception_Main@i_4227+1
 13707  05B0                     l11289:	
 13708  05B0  082C               	movf	Exception_Main@i_4227+1,w
 13709  05B1  3A80               	xorlw	128
 13710  05B2  00F9               	movwf	??_Exception_Main
 13711  05B3  3080               	movlw	128
 13712  05B4  0279               	subwf	??_Exception_Main,w
 13713  05B5  1D03               	skipz
 13714  05B6  2DB9               	goto	u13035
 13715  05B7  0827               	movf	Exception_Main@count,w
 13716  05B8  022B               	subwf	Exception_Main@i_4227,w
 13717  05B9                     u13035:	
 13718  05B9  1803               	btfsc	3,0
 13719  05BA  2DDA               	goto	u13030
 13720                           
 13721                           ;Main_B1.c: 574: if (getDimmerLights_Status(i + 1) == 1) {
 13722  05BB  0020               	movlb	0	; select bank0
 13723  05BC  082B               	movf	Exception_Main@i_4227,w
 13724  05BD  3E01               	addlw	1
 13725  05BE  3198  20ED  3185   	fcall	_getDimmerLights_Status
 13726  05C1  3A01               	xorlw	1
 13727  05C2  1D03               	skipz
 13728  05C3  2DD4               	goto	l11287
 13729                           
 13730                           ;Main_B1.c: 575: DimmerLights->SwFlag = 1;
 13731  05C4  0020               	movlb	0	; select bank0
 13732  05C5  086C               	movf	_DimmerLights,w
 13733  05C6  0086               	movwf	6
 13734  05C7  3001               	movlw	1	; select bank2/3
 13735  05C8  0087               	movwf	7
 13736  05C9  1401               	bsf	1,0
 13737                           
 13738                           ;Main_B1.c: 576: DimmerLights->Status = 0;
 13739  05CA  0A6C               	incf	_DimmerLights,w
 13740  05CB  0086               	movwf	6
 13741  05CC  3001               	movlw	1	; select bank2/3
 13742  05CD  0087               	movwf	7
 13743  05CE  1001               	bcf	1,0
 13744                           
 13745                           ;Main_B1.c: 577: setDimmerLights_SwOff(i + 1);
 13746  05CF  082B               	movf	Exception_Main@i_4227,w
 13747  05D0  3E01               	addlw	1
 13748  05D1  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13749  05D4                     l11287:	
 13750  05D4  3001               	movlw	1
 13751  05D5  0020               	movlb	0	; select bank0
 13752  05D6  07AB               	addwf	Exception_Main@i_4227,f
 13753  05D7  3000               	movlw	0
 13754  05D8  3DAC               	addwfc	Exception_Main@i_4227+1,f
 13755  05D9  2DB0               	goto	l11289
 13756  05DA                     u13030:	
 13757  05DA  0020               	movlb	0	; select bank0
 13758  05DB  0008               	return
 13759  05DC                     l11291:	
 13760                           ;Main_B1.c: 578: }
 13761                           ;Main_B1.c: 579: }
 13762                           ;Main_B1.c: 580: } else {
 13763                           
 13764                           
 13765                           ;Main_B1.c: 582: if (getDimmerLights_Status(lights) == 1) {
 13766  05DC  0020               	movlb	0	; select bank0
 13767  05DD  082D               	movf	Exception_Main@lights,w
 13768  05DE  3198  20ED  3185   	fcall	_getDimmerLights_Status
 13769  05E1  3A01               	xorlw	1
 13770  05E2  1903               	btfsc	3,2
 13771  05E3  2DE6               	goto	l11293
 13772  05E4  0020               	movlb	0	; select bank0
 13773  05E5  0008               	return
 13774  05E6                     l11293:	
 13775                           
 13776                           ;Main_B1.c: 584: DimmerLights->SwFlag = 1;
 13777  05E6  0020               	movlb	0	; select bank0
 13778  05E7  086C               	movf	_DimmerLights,w
 13779  05E8  0086               	movwf	6
 13780  05E9  3001               	movlw	1	; select bank2/3
 13781  05EA  0087               	movwf	7
 13782  05EB  1401               	bsf	1,0
 13783                           
 13784                           ;Main_B1.c: 585: DimmerLights->Status = 0;
 13785  05EC  0A6C               	incf	_DimmerLights,w
 13786  05ED  0086               	movwf	6
 13787  05EE  3001               	movlw	1	; select bank2/3
 13788  05EF  0087               	movwf	7
 13789  05F0  1001               	bcf	1,0
 13790                           
 13791                           ;Main_B1.c: 586: setDimmerLights_SwOff(lights);
 13792  05F1  082D               	movf	Exception_Main@lights,w
 13793  05F2  3191  2122         	fcall	_setDimmerLights_SwOff
 13794  05F4  0020               	movlb	0	; select bank0
 13795  05F5  0008               	return
 13796  05F6                     l11299:	
 13797                           ;Main_B1.c: 591: }
 13798                           
 13799                           ;Main_B1.c: 587: }
 13800                           ;Main_B1.c: 588: }
 13801                           ;Main_B1.c: 590: break;
 13802                           
 13803  05F6  0020               	movlb	0	; select bank0
 13804  05F7  0828               	movf	Exception_Main@error,w
 13805                           
 13806                           ; Switch size 1, requested type "space"
 13807                           ; Number of cases is 2, Range of values is 2 to 3
 13808                           ; switch strategies available:
 13809                           ; Name         Instructions Cycles
 13810                           ; simple_byte            7     4 (average)
 13811                           ; direct_byte           13     9 (fixed)
 13812                           ; jumptable            263     9 (fixed)
 13813                           ;	Chosen strategy is simple_byte
 13814  05F8  3A02               	xorlw	2	; case 2
 13815  05F9  1903               	skipnz
 13816  05FA  2D5D               	goto	l11257
 13817  05FB  3A01               	xorlw	1	; case 3
 13818  05FC  1903               	skipnz
 13819  05FD  2D9B               	goto	l11273
 13820  05FE  2E00               	goto	l1770
 13821  05FF  0008               	return
 13822  0600                     l1770:	
 13823  0600  0008               	return
 13824  0601                     __end_of_Exception_Main:	
 13825                           
 13826                           	psect	text88
 13827  1929                     __ptext88:	
 13828 ;; *************** function _getDimmerLights_Line *****************
 13829 ;; Defined at:
 13830 ;;		line 1238 in file "../src/Dimmer_B1.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;		None
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;  line            1    3[COMMON] unsigned char 
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  1    wreg      unsigned char 
 13837 ;; Registers used:
 13838 ;;		wreg, status,2
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;Total ram usage:        2 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    3
 13851 ;; This function calls:
 13852 ;;		Nothing
 13853 ;; This function is called by:
 13854 ;;		_Exception_Main
 13855 ;; This function uses a non-reentrant model
 13856 ;;
 13857                           
 13858                           
 13859                           ;psect for function _getDimmerLights_Line
 13860  1929                     _getDimmerLights_Line:	
 13861                           
 13862                           ;Dimmer_B1.c: 1239: char line = 0;
 13863                           
 13864                           ;incstack = 0
 13865                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13866  1929  01F3               	clrf	getDimmerLights_Line@line
 13867                           
 13868                           ;Dimmer_B1.c: 1241: if (DimmerLights1.Line == 1) {
 13869  192A  0023               	movlb	3	; select bank3
 13870  192B  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13871  192C  2930               	goto	l960
 13872                           
 13873                           ;Dimmer_B1.c: 1242: line = 1;
 13874  192D  01F3               	clrf	getDimmerLights_Line@line
 13875  192E  0AF3               	incf	getDimmerLights_Line@line,f
 13876                           
 13877                           ;Dimmer_B1.c: 1243: }
 13878  192F  2936               	goto	l961
 13879  1930                     l960:	
 13880                           
 13881                           ;Dimmer_B1.c: 1246: else if (DimmerLights2.Line == 1) {
 13882  1930  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13883  1931  2936               	goto	l961
 13884                           
 13885                           ;Dimmer_B1.c: 1247: line = 2;
 13886  1932  3002               	movlw	2
 13887  1933  00F2               	movwf	??_getDimmerLights_Line
 13888  1934  0872               	movf	??_getDimmerLights_Line,w
 13889  1935  00F3               	movwf	getDimmerLights_Line@line
 13890  1936                     l961:	
 13891                           
 13892                           ;Dimmer_B1.c: 1248: }
 13893                           ;Dimmer_B1.c: 1255: return line;
 13894  1936  0873               	movf	getDimmerLights_Line@line,w
 13895  1937  0008               	return
 13896  1938                     __end_of_getDimmerLights_Line:	
 13897                           
 13898                           	psect	text89
 13899  1EF9                     __ptext89:	
 13900 ;; *************** function _DimmerLights_Main *****************
 13901 ;; Defined at:
 13902 ;;		line 867 in file "../src/Dimmer_B1.c"
 13903 ;; Parameters:    Size  Location     Type
 13904 ;;		None
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;		None
 13907 ;; Return value:  Size  Location     Type
 13908 ;;		None               void
 13909 ;; Registers used:
 13910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;Total ram usage:        0 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; Hardware stack levels required when called:    8
 13923 ;; This function calls:
 13924 ;;		_DimmerLights_DimmingFunction
 13925 ;;		_DimmerLights_TwoPhase_Main
 13926 ;;		_getLoad_OK
 13927 ;;		_getMain_All_Error_Status
 13928 ;;		_getMain_All_LightsStatus
 13929 ;;		_setDimmerLights_Main
 13930 ;; This function is called by:
 13931 ;;		_main
 13932 ;; This function uses a non-reentrant model
 13933 ;;
 13934                           
 13935                           
 13936                           ;psect for function _DimmerLights_Main
 13937  1EF9                     _DimmerLights_Main:	
 13938                           
 13939                           ;Dimmer_B1.c: 870: if (Dimmer.LoadGO == 1) {
 13940                           
 13941                           ;incstack = 0
 13942                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13943  1EF9  0022               	movlb	2	; select bank2
 13944  1EFA  1CA0               	btfss	_Dimmer^(0+256),1
 13945  1EFB  2F11               	goto	l10971
 13946                           
 13947                           ;Dimmer_B1.c: 871: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13948  1EFC  31A7  27EB  319E   	fcall	_getLoad_OK
 13949  1EFF  3A01               	xorlw	1
 13950  1F00  1903               	skipnz
 13951  1F01  2F0F               	goto	l886
 13952  1F02  3000               	movlw	0
 13953  1F03  319E  263C  319E   	fcall	_getMain_All_Error_Status
 13954  1F06  3800               	iorlw	0
 13955  1F07  1D03               	skipz
 13956  1F08  2F0F               	goto	l886
 13957  1F09  3199  211A  319E   	fcall	_getMain_All_LightsStatus
 13958  1F0C  3800               	iorlw	0
 13959  1F0D  1D03               	skipz
 13960  1F0E  2F11               	goto	l10971
 13961  1F0F                     l886:	
 13962                           
 13963                           ;Dimmer_B1.c: 872: Dimmer.LoadGO = 0;
 13964  1F0F  0022               	movlb	2	; select bank2
 13965  1F10  10A0               	bcf	_Dimmer^(0+256),1
 13966  1F11                     l10971:	
 13967                           
 13968                           ;Dimmer_B1.c: 873: }
 13969                           ;Dimmer_B1.c: 874: }
 13970                           ;Dimmer_B1.c: 879: setDimmerLights_Main(1);
 13971  1F11  3001               	movlw	1
 13972  1F12  3197  279B  319E   	fcall	_setDimmerLights_Main
 13973                           
 13974                           ;Dimmer_B1.c: 882: DimmerLights_DimmingFunction(1);
 13975  1F15  3001               	movlw	1
 13976  1F16  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13977                           
 13978                           ;Dimmer_B1.c: 886: DimmerLights_TwoPhase_Main(1);
 13979  1F19  3001               	movlw	1
 13980  1F1A  3193  2393  319E   	fcall	_DimmerLights_TwoPhase_Main
 13981                           
 13982                           ;Dimmer_B1.c: 892: setDimmerLights_Main(2);
 13983  1F1D  3002               	movlw	2
 13984  1F1E  3197  279B  319E   	fcall	_setDimmerLights_Main
 13985                           
 13986                           ;Dimmer_B1.c: 894: DimmerLights_DimmingFunction(2);
 13987  1F21  3002               	movlw	2
 13988  1F22  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13989                           
 13990                           ;Dimmer_B1.c: 898: DimmerLights_TwoPhase_Main(2);
 13991  1F25  3002               	movlw	2
 13992  1F26  3193  2393         	fcall	_DimmerLights_TwoPhase_Main
 13993  1F28  0008               	return
 13994  1F29                     __end_of_DimmerLights_Main:	
 13995                           
 13996                           	psect	text90
 13997  179B                     __ptext90:	
 13998 ;; *************** function _setDimmerLights_Main *****************
 13999 ;; Defined at:
 14000 ;;		line 924 in file "../src/Dimmer_B1.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;  lights          1    wreg     unsigned char 
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  lights          1   73[BANK0 ] unsigned char 
 14005 ;; Return value:  Size  Location     Type
 14006 ;;		None               void
 14007 ;; Registers used:
 14008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;Total ram usage:        1 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    7
 14021 ;; This function calls:
 14022 ;;		_DimmerLights_SelectPointer
 14023 ;;		_getDimmerLights_Allow_Condition
 14024 ;;		_getMain_All_LightsStatus
 14025 ;;		_setDimmerLights_Dimming
 14026 ;;		_setDimmerLights_OnOff
 14027 ;; This function is called by:
 14028 ;;		_DimmerLights_Main
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           
 14033                           ;psect for function _setDimmerLights_Main
 14034  179B                     _setDimmerLights_Main:	
 14035                           
 14036                           ;incstack = 0
 14037                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14038                           ;setDimmerLights_Main@lights stored from wreg
 14039  179B  0020               	movlb	0	; select bank0
 14040  179C  00E9               	movwf	setDimmerLights_Main@lights
 14041                           
 14042                           ;Dimmer_B1.c: 926: DimmerLights_SelectPointer(lights);
 14043  179D  0869               	movf	setDimmerLights_Main@lights,w
 14044  179E  319A  2238  3197   	fcall	_DimmerLights_SelectPointer
 14045                           
 14046                           ;Dimmer_B1.c: 927: if (DimmerLights->Trigger == 1) {
 14047  17A1  0020               	movlb	0	; select bank0
 14048  17A2  086C               	movf	_DimmerLights,w
 14049  17A3  0086               	movwf	6
 14050  17A4  3001               	movlw	1	; select bank2/3
 14051  17A5  0087               	movwf	7
 14052  17A6  1C81               	btfss	1,1
 14053  17A7  2FC7               	goto	l10549
 14054                           
 14055                           ;Dimmer_B1.c: 928: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14056  17A8  0869               	movf	setDimmerLights_Main@lights,w
 14057  17A9  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14058  17AC  3800               	iorlw	0
 14059  17AD  1D03               	skipz
 14060  17AE  0008               	return
 14061                           
 14062                           ;Dimmer_B1.c: 929: DimmerLights->Trigger = 0;
 14063  17AF  0020               	movlb	0	; select bank0
 14064  17B0  086C               	movf	_DimmerLights,w
 14065  17B1  0086               	movwf	6
 14066  17B2  3001               	movlw	1	; select bank2/3
 14067  17B3  0087               	movwf	7
 14068  17B4  1081               	bcf	1,1
 14069                           
 14070                           ;Dimmer_B1.c: 930: if (DimmerLights->Switch == 1) {
 14071  17B5  086C               	movf	_DimmerLights,w
 14072  17B6  0086               	movwf	6
 14073  17B7  3001               	movlw	1	; select bank2/3
 14074  17B8  0087               	movwf	7
 14075  17B9  1D01               	btfss	1,2
 14076  17BA  2FC1               	goto	l10547
 14077                           
 14078                           ;Dimmer_B1.c: 931: setDimmerLights_OnOff(lights, 1);
 14079  17BB  01E5               	clrf	setDimmerLights_OnOff@command
 14080  17BC  0AE5               	incf	setDimmerLights_OnOff@command,f
 14081  17BD  0869               	movf	setDimmerLights_Main@lights,w
 14082  17BE  318F  2742         	fcall	_setDimmerLights_OnOff
 14083                           
 14084                           ;Dimmer_B1.c: 932: } else {
 14085  17C0  0008               	return
 14086  17C1                     l10547:	
 14087                           
 14088                           ;Dimmer_B1.c: 933: setDimmerLights_OnOff(lights, 0);
 14089  17C1  0020               	movlb	0	; select bank0
 14090  17C2  01E5               	clrf	setDimmerLights_OnOff@command
 14091  17C3  0869               	movf	setDimmerLights_Main@lights,w
 14092  17C4  318F  2742         	fcall	_setDimmerLights_OnOff
 14093                           
 14094                           ;Dimmer_B1.c: 934: }
 14095                           ;Dimmer_B1.c: 935: }
 14096                           ;Dimmer_B1.c: 936: } else {
 14097  17C6  0008               	return
 14098  17C7                     l10549:	
 14099                           
 14100                           ;Dimmer_B1.c: 937: if (getMain_All_LightsStatus() == 1) {
 14101  17C7  3199  211A  3197   	fcall	_getMain_All_LightsStatus
 14102  17CA  3A01               	xorlw	1
 14103  17CB  1D03               	skipz
 14104  17CC  2FF3               	goto	l10561
 14105                           
 14106                           ;Dimmer_B1.c: 938: if (DimmerLights->DimmingTrigger == 1) {
 14107  17CD  0020               	movlb	0	; select bank0
 14108  17CE  086C               	movf	_DimmerLights,w
 14109  17CF  0086               	movwf	6
 14110  17D0  3001               	movlw	1	; select bank2/3
 14111  17D1  0087               	movwf	7
 14112  17D2  1E01               	btfss	1,4
 14113  17D3  0008               	return
 14114                           
 14115                           ;Dimmer_B1.c: 939: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14116  17D4  0869               	movf	setDimmerLights_Main@lights,w
 14117  17D5  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14118  17D8  3800               	iorlw	0
 14119  17D9  1D03               	skipz
 14120  17DA  0008               	return
 14121                           
 14122                           ;Dimmer_B1.c: 940: DimmerLights->DimmingTrigger = 0;
 14123  17DB  0020               	movlb	0	; select bank0
 14124  17DC  086C               	movf	_DimmerLights,w
 14125  17DD  0086               	movwf	6
 14126  17DE  3001               	movlw	1	; select bank2/3
 14127  17DF  0087               	movwf	7
 14128  17E0  1201               	bcf	1,4
 14129                           
 14130                           ;Dimmer_B1.c: 941: if (DimmerLights->DimmingSwitch == 1) {
 14131  17E1  086C               	movf	_DimmerLights,w
 14132  17E2  0086               	movwf	6
 14133  17E3  3001               	movlw	1	; select bank2/3
 14134  17E4  0087               	movwf	7
 14135  17E5  1E81               	btfss	1,5
 14136  17E6  2FED               	goto	l10559
 14137                           
 14138                           ;Dimmer_B1.c: 942: setDimmerLights_Dimming(lights, 1);
 14139  17E7  01E2               	clrf	setDimmerLights_Dimming@status
 14140  17E8  0AE2               	incf	setDimmerLights_Dimming@status,f
 14141  17E9  0869               	movf	setDimmerLights_Main@lights,w
 14142  17EA  3193  23E7         	fcall	_setDimmerLights_Dimming
 14143                           
 14144                           ;Dimmer_B1.c: 943: } else {
 14145  17EC  0008               	return
 14146  17ED                     l10559:	
 14147                           
 14148                           ;Dimmer_B1.c: 944: setDimmerLights_Dimming(lights, 0);
 14149  17ED  0020               	movlb	0	; select bank0
 14150  17EE  01E2               	clrf	setDimmerLights_Dimming@status
 14151  17EF  0869               	movf	setDimmerLights_Main@lights,w
 14152  17F0  3193  23E7         	fcall	_setDimmerLights_Dimming
 14153                           
 14154                           ;Dimmer_B1.c: 945: }
 14155                           ;Dimmer_B1.c: 946: }
 14156                           ;Dimmer_B1.c: 947: }
 14157                           ;Dimmer_B1.c: 948: } else {
 14158  17F2  0008               	return
 14159  17F3                     l10561:	
 14160                           
 14161                           ;Dimmer_B1.c: 949: if (DimmerLights->DimmingTrigger == 1) {
 14162  17F3  0020               	movlb	0	; select bank0
 14163  17F4  086C               	movf	_DimmerLights,w
 14164  17F5  0086               	movwf	6
 14165  17F6  3001               	movlw	1	; select bank2/3
 14166  17F7  0087               	movwf	7
 14167  17F8  1E01               	btfss	1,4
 14168  17F9  0008               	return
 14169                           
 14170                           ;Dimmer_B1.c: 950: DimmerLights->DimmingTrigger = 0;
 14171  17FA  086C               	movf	_DimmerLights,w
 14172  17FB  0086               	movwf	6
 14173  17FC  3001               	movlw	1	; select bank2/3
 14174  17FD  0087               	movwf	7
 14175  17FE  1201               	bcf	1,4
 14176  17FF  0008               	return
 14177  1800                     __end_of_setDimmerLights_Main:	
 14178                           
 14179                           	psect	text91
 14180  0F42                     __ptext91:	
 14181 ;; *************** function _setDimmerLights_OnOff *****************
 14182 ;; Defined at:
 14183 ;;		line 1001 in file "../src/Dimmer_B1.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  lights          1    wreg     unsigned char 
 14186 ;;  command         1   69[BANK0 ] unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  lights          1   72[BANK0 ] unsigned char 
 14189 ;; Return value:  Size  Location     Type
 14190 ;;		None               void
 14191 ;; Registers used:
 14192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14198 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;Total ram usage:        4 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    6
 14205 ;; This function calls:
 14206 ;;		_DimmerIntr_ValueCalculate
 14207 ;;		_getCmd_Status
 14208 ;;		_getDelayOff_GO
 14209 ;;		_getDimmerLights_PercentToValue
 14210 ;;		_getMain_All_LightsStatus
 14211 ;;		_setCmd_Status
 14212 ;;		_setDelayOff_GO
 14213 ;;		_setDimmerIntr_ControlStatus
 14214 ;;		_setDimmerIntr_DimmingValue
 14215 ;;		_setDimmerIntr_Dimming_RF
 14216 ;;		_setDimmerIntr_MaxmumValue
 14217 ;;		_setDimmerLights_DimmingClose
 14218 ;;		_setDimmerLights_Line
 14219 ;;		_setLED
 14220 ;;		_setProductData
 14221 ;;		_setRF_DimmerLights
 14222 ;;		_setTxData
 14223 ;; This function is called by:
 14224 ;;		_setDimmerLights_Main
 14225 ;; This function uses a non-reentrant model
 14226 ;;
 14227                           
 14228                           
 14229                           ;psect for function _setDimmerLights_OnOff
 14230  0F42                     _setDimmerLights_OnOff:	
 14231                           
 14232                           ;incstack = 0
 14233                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14234                           ;setDimmerLights_OnOff@lights stored from wreg
 14235  0F42  0020               	movlb	0	; select bank0
 14236  0F43  00E8               	movwf	setDimmerLights_OnOff@lights
 14237                           
 14238                           ;Dimmer_B1.c: 1003: if (command == 1) {
 14239  0F44  0865               	movf	setDimmerLights_OnOff@command,w
 14240  0F45  3A01               	xorlw	1
 14241  0F46  1D03               	skipz
 14242  0F47  2FA0               	goto	l10299
 14243                           
 14244                           ;Dimmer_B1.c: 1005: setDimmerIntr_ControlStatus(lights, 1);
 14245  0F48  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14246  0F49  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 14247  0F4A  0868               	movf	setDimmerLights_OnOff@lights,w
 14248  0F4B  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14249                           
 14250                           ;Dimmer_B1.c: 1008: Dimmer.Load_Status = 1;
 14251  0F4E  0022               	movlb	2	; select bank2
 14252  0F4F  1520               	bsf	_Dimmer^(0+256),2
 14253                           
 14254                           ;Dimmer_B1.c: 1009: setDimmerLights_Line(lights);
 14255  0F50  0020               	movlb	0	; select bank0
 14256  0F51  0868               	movf	setDimmerLights_OnOff@lights,w
 14257  0F52  319B  230D  318F   	fcall	_setDimmerLights_Line
 14258                           
 14259                           ;Dimmer_B1.c: 1015: setLED(lights, 0);
 14260  0F55  01F4               	clrf	setLED@command
 14261  0F56  0020               	movlb	0	; select bank0
 14262  0F57  0868               	movf	setDimmerLights_OnOff@lights,w
 14263  0F58  3194  24ED  318F   	fcall	_setLED
 14264                           
 14265                           ;Dimmer_B1.c: 1036: if (DimmerLights->DimmingRun == 1) {
 14266  0F5B  0020               	movlb	0	; select bank0
 14267  0F5C  0A6C               	incf	_DimmerLights,w
 14268  0F5D  0086               	movwf	6
 14269  0F5E  3001               	movlw	1	; select bank2/3
 14270  0F5F  0087               	movwf	7
 14271  0F60  1F01               	btfss	1,6
 14272  0F61  2F83               	goto	l10289
 14273                           
 14274                           ;Dimmer_B1.c: 1037: DimmerLights->DimmingRun = 0;
 14275  0F62  0A6C               	incf	_DimmerLights,w
 14276  0F63  0086               	movwf	6
 14277  0F64  3001               	movlw	1	; select bank2/3
 14278  0F65  0087               	movwf	7
 14279  0F66  1301               	bcf	1,6
 14280                           
 14281                           ;Dimmer_B1.c: 1038: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14282  0F67  0868               	movf	setDimmerLights_OnOff@lights,w
 14283  0F68  3E14               	addlw	20
 14284  0F69  077B               	addwf	_product,w
 14285  0F6A  00E6               	movwf	??_setDimmerLights_OnOff
 14286  0F6B  0866               	movf	??_setDimmerLights_OnOff,w
 14287  0F6C  0086               	movwf	6
 14288  0F6D  3002               	movlw	2	; select bank4/5
 14289  0F6E  0087               	movwf	7
 14290  0F6F  0801               	movf	1,w
 14291  0F70  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 14292  0F73  0020               	movlb	0	; select bank0
 14293  0F74  00E7               	movwf	??_setDimmerLights_OnOff+1
 14294  0F75  0867               	movf	??_setDimmerLights_OnOff+1,w
 14295  0F76  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14296  0F77  0868               	movf	setDimmerLights_OnOff@lights,w
 14297  0F78  319A  22F6  318F   	fcall	_setDimmerIntr_MaxmumValue
 14298                           
 14299                           ;Dimmer_B1.c: 1039: setDimmerIntr_Dimming_RF(lights, 1);
 14300  0F7B  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 14301  0F7C  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 14302  0F7D  0020               	movlb	0	; select bank0
 14303  0F7E  0868               	movf	setDimmerLights_OnOff@lights,w
 14304  0F7F  319D  25C0  318F   	fcall	_setDimmerIntr_Dimming_RF
 14305                           
 14306                           ;Dimmer_B1.c: 1040: } else {
 14307  0F82  2F8C               	goto	l10291
 14308  0F83                     l10289:	
 14309                           
 14310                           ;Dimmer_B1.c: 1045: setDimmerIntr_DimmingValue(lights, ((char)(5*0.55))+((((char)(77*0.5
      +                          5))-((char)(5*0.55)))/2));
 14311  0F83  3016               	movlw	22
 14312  0F84  0020               	movlb	0	; select bank0
 14313  0F85  00E6               	movwf	??_setDimmerLights_OnOff
 14314  0F86  0866               	movf	??_setDimmerLights_OnOff,w
 14315  0F87  00F2               	movwf	setDimmerIntr_DimmingValue@value
 14316  0F88  0868               	movf	setDimmerLights_OnOff@lights,w
 14317  0F89  319A  2262  318F   	fcall	_setDimmerIntr_DimmingValue
 14318  0F8C                     l10291:	
 14319                           
 14320                           ;Dimmer_B1.c: 1049: }
 14321                           ;Dimmer_B1.c: 1051: if (lights == 1) {
 14322  0F8C  0020               	movlb	0	; select bank0
 14323  0F8D  0868               	movf	setDimmerLights_OnOff@lights,w
 14324  0F8E  3A01               	xorlw	1
 14325  0F8F  1D03               	skipz
 14326  0F90  2F96               	goto	l10295
 14327                           
 14328                           ;Dimmer_B1.c: 1054: DimmerIntr_ValueCalculate(1);
 14329  0F91  3001               	movlw	1
 14330  0F92  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14331                           
 14332                           ;Dimmer_B1.c: 1056: } else if (lights == 2) {
 14333  0F95  2FD0               	goto	l10317
 14334  0F96                     l10295:	
 14335  0F96  0020               	movlb	0	; select bank0
 14336  0F97  0868               	movf	setDimmerLights_OnOff@lights,w
 14337  0F98  3A02               	xorlw	2
 14338  0F99  1D03               	skipz
 14339  0F9A  2FD0               	goto	l10317
 14340                           
 14341                           ;Dimmer_B1.c: 1059: DimmerIntr_ValueCalculate(2);
 14342  0F9B  3002               	movlw	2
 14343  0F9C  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14344                           
 14345                           ;Dimmer_B1.c: 1061: }
 14346                           ;Dimmer_B1.c: 1067: } else if (command == 0) {
 14347  0F9F  2FD0               	goto	l10317
 14348  0FA0                     l10299:	
 14349  0FA0  0020               	movlb	0	; select bank0
 14350  0FA1  08E5               	movf	setDimmerLights_OnOff@command,f
 14351  0FA2  1D03               	skipz
 14352  0FA3  2FD0               	goto	l10317
 14353                           
 14354                           ;Dimmer_B1.c: 1069: setDimmerIntr_ControlStatus(lights, 0);
 14355  0FA4  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14356  0FA5  0868               	movf	setDimmerLights_OnOff@lights,w
 14357  0FA6  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14358                           
 14359                           ;Dimmer_B1.c: 1071: Dimmer.Load_Status = 0;
 14360  0FA9  0022               	movlb	2	; select bank2
 14361  0FAA  1120               	bcf	_Dimmer^(0+256),2
 14362                           
 14363                           ;Dimmer_B1.c: 1072: setDimmerLights_Line(0);
 14364  0FAB  3000               	movlw	0
 14365  0FAC  319B  230D  318F   	fcall	_setDimmerLights_Line
 14366                           
 14367                           ;Dimmer_B1.c: 1076: if (getDelayOff_GO(lights) == 1) {
 14368  0FAF  0020               	movlb	0	; select bank0
 14369  0FB0  0868               	movf	setDimmerLights_OnOff@lights,w
 14370  0FB1  3199  210B  318F   	fcall	_getDelayOff_GO
 14371  0FB4  3A01               	xorlw	1
 14372  0FB5  1D03               	skipz
 14373  0FB6  2FBE               	goto	l926
 14374                           
 14375                           ;Dimmer_B1.c: 1077: setDelayOff_GO(lights, 0, 0);
 14376  0FB7  0020               	movlb	0	; select bank0
 14377  0FB8  01DD               	clrf	setDelayOff_GO@command
 14378  0FB9  01DE               	clrf	setDelayOff_GO@value
 14379  0FBA  0868               	movf	setDimmerLights_OnOff@lights,w
 14380  0FBB  318B  236A  318F   	fcall	_setDelayOff_GO
 14381  0FBE                     l926:	
 14382                           
 14383                           ;Dimmer_B1.c: 1078: }
 14384                           ;Dimmer_B1.c: 1083: setLED(lights, 1);
 14385  0FBE  01F4               	clrf	setLED@command
 14386  0FBF  0AF4               	incf	setLED@command,f
 14387  0FC0  0020               	movlb	0	; select bank0
 14388  0FC1  0868               	movf	setDimmerLights_OnOff@lights,w
 14389  0FC2  3194  24ED  318F   	fcall	_setLED
 14390                           
 14391                           ;Dimmer_B1.c: 1088: if (lights == 1) {
 14392  0FC5  0020               	movlb	0	; select bank0
 14393  0FC6  0868               	movf	setDimmerLights_OnOff@lights,w
 14394  0FC7  3A01               	xorlw	1
 14395  0FC8  1D03               	skipz
 14396  0FC9  2FCC               	goto	l10313
 14397                           
 14398                           ;Dimmer_B1.c: 1090: RA7 = 0;
 14399  0FCA  138C               	bcf	12,7	;volatile
 14400                           
 14401                           ;Dimmer_B1.c: 1096: }
 14402  0FCB  2FD0               	goto	l10317
 14403  0FCC                     l10313:	
 14404                           
 14405                           ;Dimmer_B1.c: 1099: else if (lights == 2) {
 14406  0FCC  0868               	movf	setDimmerLights_OnOff@lights,w
 14407  0FCD  3A02               	xorlw	2
 14408  0FCE  1903               	btfsc	3,2
 14409                           
 14410                           ;Dimmer_B1.c: 1101: RB4 = 0;
 14411  0FCF  120D               	bcf	13,4	;volatile
 14412  0FD0                     l10317:	
 14413                           
 14414                           ;Dimmer_B1.c: 1106: }
 14415                           ;Dimmer_B1.c: 1122: }
 14416                           ;Dimmer_B1.c: 1124: setDimmerLights_DimmingClose();
 14417  0FD0  3198  2042  318F   	fcall	_setDimmerLights_DimmingClose
 14418                           
 14419                           ;Dimmer_B1.c: 1126: setRF_DimmerLights(lights, command);
 14420  0FD3  0020               	movlb	0	; select bank0
 14421  0FD4  0865               	movf	setDimmerLights_OnOff@command,w
 14422  0FD5  00E6               	movwf	??_setDimmerLights_OnOff
 14423  0FD6  0866               	movf	??_setDimmerLights_OnOff,w
 14424  0FD7  00DD               	movwf	setRF_DimmerLights@on
 14425  0FD8  0868               	movf	setDimmerLights_OnOff@lights,w
 14426  0FD9  3188  202B  318F   	fcall	_setRF_DimmerLights
 14427                           
 14428                           ;Dimmer_B1.c: 1128: if (getCmd_Status(1) == 1) {
 14429  0FDC  3001               	movlw	1
 14430  0FDD  3199  2158  318F   	fcall	_getCmd_Status
 14431  0FE0  3A01               	xorlw	1
 14432  0FE1  1D03               	skipz
 14433  0FE2  2FFD               	goto	l10333
 14434                           
 14435                           ;Dimmer_B1.c: 1129: if (getMain_All_LightsStatus() == 0) {
 14436  0FE3  3199  211A  318F   	fcall	_getMain_All_LightsStatus
 14437  0FE6  3800               	iorlw	0
 14438  0FE7  1D03               	skipz
 14439  0FE8  0008               	return
 14440                           
 14441                           ;Dimmer_B1.c: 1130: setCmd_Status(1, 0);
 14442  0FE9  01F2               	clrf	setCmd_Status@cmd
 14443  0FEA  3001               	movlw	1
 14444  0FEB  319A  224D  318F   	fcall	_setCmd_Status
 14445                           
 14446                           ;Dimmer_B1.c: 1131: setProductData(11, 0);
 14447  0FEE  0020               	movlb	0	; select bank0
 14448  0FEF  01DA               	clrf	setProductData@value
 14449  0FF0  300B               	movlw	11
 14450  0FF1  3198  20A3  318F   	fcall	_setProductData
 14451                           
 14452                           ;Dimmer_B1.c: 1132: setProductData(17, 0);
 14453  0FF4  0020               	movlb	0	; select bank0
 14454  0FF5  01DA               	clrf	setProductData@value
 14455  0FF6  3011               	movlw	17
 14456  0FF7  3198  20A3  318F   	fcall	_setProductData
 14457                           
 14458                           ;Dimmer_B1.c: 1133: setTxData();
 14459  0FFA  31A7  27F2         	fcall	_setTxData
 14460                           
 14461                           ;Dimmer_B1.c: 1134: }
 14462                           ;Dimmer_B1.c: 1135: } else {
 14463  0FFC  0008               	return
 14464  0FFD                     l10333:	
 14465                           
 14466                           ;Dimmer_B1.c: 1136: setTxData();
 14467  0FFD  31A7  27F2         	fcall	_setTxData
 14468  0FFF  0008               	return
 14469  1000                     __end_of_setDimmerLights_OnOff:	
 14470                           
 14471                           	psect	text92
 14472  14ED                     __ptext92:	
 14473 ;; *************** function _setLED *****************
 14474 ;; Defined at:
 14475 ;;		line 81 in file "../src/LED_B1.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  led             1    wreg     unsigned char 
 14478 ;;  command         1    4[COMMON] unsigned char 
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;  led             1    5[COMMON] unsigned char 
 14481 ;; Return value:  Size  Location     Type
 14482 ;;		None               void
 14483 ;; Registers used:
 14484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14485 ;; Tracked objects:
 14486 ;;		On entry : 0/0
 14487 ;;		On exit  : 0/0
 14488 ;;		Unchanged: 0/0
 14489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14490 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14494 ;;Total ram usage:        2 bytes
 14495 ;; Hardware stack levels used:    1
 14496 ;; Hardware stack levels required when called:    4
 14497 ;; This function calls:
 14498 ;;		_LedPointSelect
 14499 ;; This function is called by:
 14500 ;;		_setDimmerLights_OnOff
 14501 ;;		_setLED_Initialization
 14502 ;;		_Exception_Main
 14503 ;;		_setSw_Initialization
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           
 14508                           ;psect for function _setLED
 14509  14ED                     _setLED:	
 14510                           
 14511                           ;incstack = 0
 14512                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14513                           ;setLED@led stored from wreg
 14514  14ED  00F5               	movwf	setLED@led
 14515                           
 14516                           ;LED_B1.c: 82: LedPointSelect(led);
 14517  14EE  0875               	movf	setLED@led,w
 14518  14EF  319C  240E  3194   	fcall	_LedPointSelect
 14519                           
 14520                           ;LED_B1.c: 83: if (command == 0) {
 14521  14F2  08F4               	movf	setLED@command,f
 14522  14F3  1D03               	skipz
 14523  14F4  2D07               	goto	l7577
 14524                           
 14525                           ;LED_B1.c: 85: if (led == 1) {
 14526  14F5  0875               	movf	setLED@led,w
 14527  14F6  3A01               	xorlw	1
 14528  14F7  1D03               	skipz
 14529  14F8  2CFB               	goto	l7569
 14530                           
 14531                           ;LED_B1.c: 89: RA3 = 1;
 14532  14F9  0020               	movlb	0	; select bank0
 14533  14FA  158C               	bsf	12,3	;volatile
 14534  14FB                     l7569:	
 14535                           
 14536                           ;LED_B1.c: 91: }
 14537                           ;LED_B1.c: 94: if (led == 2) {
 14538  14FB  0875               	movf	setLED@led,w
 14539  14FC  3A02               	xorlw	2
 14540  14FD  1D03               	skipz
 14541  14FE  2D01               	goto	l7573
 14542                           
 14543                           ;LED_B1.c: 98: RC7 = 1;
 14544  14FF  0020               	movlb	0	; select bank0
 14545  1500  178E               	bsf	14,7	;volatile
 14546  1501                     l7573:	
 14547                           
 14548                           ;LED_B1.c: 100: }
 14549                           ;LED_B1.c: 112: if (led == 99) {
 14550  1501  0875               	movf	setLED@led,w
 14551  1502  3A63               	xorlw	99
 14552  1503  1D03               	skipz
 14553  1504  2D07               	goto	l7577
 14554                           
 14555                           ;LED_B1.c: 116: RB5 = 1;
 14556  1505  0020               	movlb	0	; select bank0
 14557  1506  168D               	bsf	13,5	;volatile
 14558  1507                     l7577:	
 14559                           
 14560                           ;LED_B1.c: 118: }
 14561                           ;LED_B1.c: 120: }
 14562                           ;LED_B1.c: 121: if (command == 1) {
 14563  1507  0874               	movf	setLED@command,w
 14564  1508  3A01               	xorlw	1
 14565  1509  1D03               	skipz
 14566  150A  2D1D               	goto	l7591
 14567                           
 14568                           ;LED_B1.c: 123: if (led == 1) {
 14569  150B  0875               	movf	setLED@led,w
 14570  150C  3A01               	xorlw	1
 14571  150D  1D03               	skipz
 14572  150E  2D11               	goto	l7583
 14573                           
 14574                           ;LED_B1.c: 127: RA3 = 0;
 14575  150F  0020               	movlb	0	; select bank0
 14576  1510  118C               	bcf	12,3	;volatile
 14577  1511                     l7583:	
 14578                           
 14579                           ;LED_B1.c: 129: }
 14580                           ;LED_B1.c: 132: if (led == 2) {
 14581  1511  0875               	movf	setLED@led,w
 14582  1512  3A02               	xorlw	2
 14583  1513  1D03               	skipz
 14584  1514  2D17               	goto	l7587
 14585                           
 14586                           ;LED_B1.c: 136: RC7 = 0;
 14587  1515  0020               	movlb	0	; select bank0
 14588  1516  138E               	bcf	14,7	;volatile
 14589  1517                     l7587:	
 14590                           
 14591                           ;LED_B1.c: 138: }
 14592                           ;LED_B1.c: 150: if (led == 99) {
 14593  1517  0875               	movf	setLED@led,w
 14594  1518  3A63               	xorlw	99
 14595  1519  1D03               	skipz
 14596  151A  2D1D               	goto	l7591
 14597                           
 14598                           ;LED_B1.c: 154: RB5 = 0;
 14599  151B  0020               	movlb	0	; select bank0
 14600  151C  128D               	bcf	13,5	;volatile
 14601  151D                     l7591:	
 14602                           
 14603                           ;LED_B1.c: 156: }
 14604                           ;LED_B1.c: 158: }
 14605                           ;LED_B1.c: 159: if (command == 10) {
 14606  151D  0874               	movf	setLED@command,w
 14607  151E  3A0A               	xorlw	10
 14608  151F  1D03               	skipz
 14609  1520  2D41               	goto	l7607
 14610                           
 14611                           ;LED_B1.c: 160: LED->GO = 0;
 14612  1521  0021               	movlb	1	; select bank1
 14613  1522  086B               	movf	_LED^(0+128),w
 14614  1523  0086               	movwf	6
 14615  1524  3001               	movlw	1	; select bank2/3
 14616  1525  0087               	movwf	7
 14617  1526  1081               	bcf	1,1
 14618                           
 14619                           ;LED_B1.c: 161: LED->Time = 0;
 14620  1527  0A6B               	incf	_LED^(0+128),w
 14621  1528  0086               	movwf	6
 14622  1529  3001               	movlw	1	; select bank2/3
 14623  152A  0087               	movwf	7
 14624  152B  3000               	movlw	0
 14625  152C  3FC0               	movwi [0]fsr1
 14626  152D  3FC1               	movwi [1]fsr1
 14627                           
 14628                           ;LED_B1.c: 163: if (led == 1) {
 14629  152E  0875               	movf	setLED@led,w
 14630  152F  3A01               	xorlw	1
 14631  1530  1D03               	skipz
 14632  1531  2D35               	goto	l7599
 14633                           
 14634                           ;LED_B1.c: 167: RA3 = 1;
 14635  1532  0020               	movlb	0	; select bank0
 14636  1533  158C               	bsf	12,3	;volatile
 14637                           
 14638                           ;LED_B1.c: 169: }
 14639  1534  2D3B               	goto	l7603
 14640  1535                     l7599:	
 14641                           
 14642                           ;LED_B1.c: 172: else if (led == 2) {
 14643  1535  0875               	movf	setLED@led,w
 14644  1536  3A02               	xorlw	2
 14645  1537  1D03               	skipz
 14646  1538  2D3B               	goto	l7603
 14647                           
 14648                           ;LED_B1.c: 176: RC7 = 1;
 14649  1539  0020               	movlb	0	; select bank0
 14650  153A  178E               	bsf	14,7	;volatile
 14651  153B                     l7603:	
 14652                           
 14653                           ;LED_B1.c: 178: }
 14654                           ;LED_B1.c: 190: if (led == 99) {
 14655  153B  0875               	movf	setLED@led,w
 14656  153C  3A63               	xorlw	99
 14657  153D  1D03               	skipz
 14658  153E  2D41               	goto	l7607
 14659                           
 14660                           ;LED_B1.c: 194: RB5 = 1;
 14661  153F  0020               	movlb	0	; select bank0
 14662  1540  168D               	bsf	13,5	;volatile
 14663  1541                     l7607:	
 14664                           
 14665                           ;LED_B1.c: 196: }
 14666                           ;LED_B1.c: 198: }
 14667                           ;LED_B1.c: 199: if (command == 11) {
 14668  1541  0874               	movf	setLED@command,w
 14669  1542  3A0B               	xorlw	11
 14670  1543  1D03               	skipz
 14671  1544  0008               	return
 14672                           
 14673                           ;LED_B1.c: 200: LED->GO = 1;
 14674  1545  0021               	movlb	1	; select bank1
 14675  1546  086B               	movf	_LED^(0+128),w
 14676  1547  0086               	movwf	6
 14677  1548  3001               	movlw	1	; select bank2/3
 14678  1549  0087               	movwf	7
 14679  154A  1481               	bsf	1,1
 14680  154B  0008               	return
 14681  154C                     __end_of_setLED:	
 14682                           
 14683                           	psect	text93
 14684  1C0E                     __ptext93:	
 14685 ;; *************** function _LedPointSelect *****************
 14686 ;; Defined at:
 14687 ;;		line 7 in file "../src/LED_B1.c"
 14688 ;; Parameters:    Size  Location     Type
 14689 ;;  led             1    wreg     unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  led             1    3[COMMON] unsigned char 
 14692 ;; Return value:  Size  Location     Type
 14693 ;;		None               void
 14694 ;; Registers used:
 14695 ;;		wreg
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;Total ram usage:        2 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:    3
 14708 ;; This function calls:
 14709 ;;		Nothing
 14710 ;; This function is called by:
 14711 ;;		_setLED_Initialization
 14712 ;;		_setLED
 14713 ;;		_setLED_Main
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           
 14718                           ;psect for function _LedPointSelect
 14719  1C0E                     _LedPointSelect:	
 14720                           
 14721                           ;incstack = 0
 14722                           ; Regs used in _LedPointSelect: [wreg]
 14723                           ;LedPointSelect@led stored from wreg
 14724  1C0E  00F3               	movwf	LedPointSelect@led
 14725                           
 14726                           ;LED_B1.c: 9: if (led == 1) {
 14727  1C0F  0873               	movf	LedPointSelect@led,w
 14728  1C10  3A01               	xorlw	1
 14729  1C11  1D03               	skipz
 14730  1C12  2C18               	goto	l1189
 14731                           
 14732                           ;LED_B1.c: 10: LED = &VarLED1;
 14733  1C13  306C               	movlw	_VarLED1& (0+255)
 14734  1C14  00F2               	movwf	??_LedPointSelect
 14735  1C15  0872               	movf	??_LedPointSelect,w
 14736  1C16  0021               	movlb	1	; select bank1
 14737  1C17  00EB               	movwf	_LED^(0+128)
 14738  1C18                     l1189:	
 14739                           
 14740                           ;LED_B1.c: 11: }
 14741                           ;LED_B1.c: 14: if (led == 2) {
 14742  1C18  0873               	movf	LedPointSelect@led,w
 14743  1C19  3A02               	xorlw	2
 14744  1C1A  1D03               	skipz
 14745  1C1B  2C21               	goto	l1190
 14746                           
 14747                           ;LED_B1.c: 15: LED = &VarLED2;
 14748  1C1C  30EC               	movlw	_VarLED2& (0+255)
 14749  1C1D  00F2               	movwf	??_LedPointSelect
 14750  1C1E  0872               	movf	??_LedPointSelect,w
 14751  1C1F  0021               	movlb	1	; select bank1
 14752  1C20  00EB               	movwf	_LED^(0+128)
 14753  1C21                     l1190:	
 14754                           
 14755                           ;LED_B1.c: 16: }
 14756                           ;LED_B1.c: 24: if (led == 99) {
 14757  1C21  0873               	movf	LedPointSelect@led,w
 14758  1C22  3A63               	xorlw	99
 14759  1C23  1D03               	skipz
 14760  1C24  0008               	return
 14761                           
 14762                           ;LED_B1.c: 25: LED = &VarErrLED;
 14763  1C25  3068               	movlw	_VarErrLED& (0+255)
 14764  1C26  00F2               	movwf	??_LedPointSelect
 14765  1C27  0872               	movf	??_LedPointSelect,w
 14766  1C28  0021               	movlb	1	; select bank1
 14767  1C29  00EB               	movwf	_LED^(0+128)
 14768  1C2A  0008               	return
 14769  1C2B                     __end_of_LedPointSelect:	
 14770                           
 14771                           	psect	text94
 14772  1842                     __ptext94:	
 14773 ;; *************** function _setDimmerLights_DimmingClose *****************
 14774 ;; Defined at:
 14775 ;;		line 2043 in file "../src/Dimmer_B1.c"
 14776 ;; Parameters:    Size  Location     Type
 14777 ;;		None
 14778 ;; Auto vars:     Size  Location     Type
 14779 ;;		None
 14780 ;; Return value:  Size  Location     Type
 14781 ;;		None               void
 14782 ;; Registers used:
 14783 ;;		wreg, status,2, status,0, pclath, cstack
 14784 ;; Tracked objects:
 14785 ;;		On entry : 0/0
 14786 ;;		On exit  : 0/0
 14787 ;;		Unchanged: 0/0
 14788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;Total ram usage:        0 bytes
 14794 ;; Hardware stack levels used:    1
 14795 ;; Hardware stack levels required when called:    4
 14796 ;; This function calls:
 14797 ;;		_setDimmerIntr_Dimming_Sw
 14798 ;; This function is called by:
 14799 ;;		_setDimmerLights_OnOff
 14800 ;; This function uses a non-reentrant model
 14801 ;;
 14802                           
 14803                           
 14804                           ;psect for function _setDimmerLights_DimmingClose
 14805  1842                     _setDimmerLights_DimmingClose:	
 14806                           
 14807                           ;Dimmer_B1.c: 2045: setDimmerIntr_Dimming_Sw(1, 0);
 14808                           
 14809                           ;incstack = 0
 14810                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14811  1842  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14812  1843  3001               	movlw	1
 14813  1844  319D  254F  3198   	fcall	_setDimmerIntr_Dimming_Sw
 14814                           
 14815                           ;Dimmer_B1.c: 2049: setDimmerIntr_Dimming_Sw(2, 0);
 14816  1847  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14817  1848  3002               	movlw	2
 14818  1849  319D  254F         	fcall	_setDimmerIntr_Dimming_Sw
 14819  184B  0008               	return
 14820  184C                     __end_of_setDimmerLights_DimmingClose:	
 14821                           
 14822                           	psect	text95
 14823  1A62                     __ptext95:	
 14824 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14825 ;; Defined at:
 14826 ;;		line 137 in file "../src/Dimmer_B1.c"
 14827 ;; Parameters:    Size  Location     Type
 14828 ;;  lights          1    wreg     unsigned char 
 14829 ;;  value           1    2[COMMON] unsigned char 
 14830 ;; Auto vars:     Size  Location     Type
 14831 ;;  lights          1    4[COMMON] unsigned char 
 14832 ;; Return value:  Size  Location     Type
 14833 ;;		None               void
 14834 ;; Registers used:
 14835 ;;		wreg
 14836 ;; Tracked objects:
 14837 ;;		On entry : 0/0
 14838 ;;		On exit  : 0/0
 14839 ;;		Unchanged: 0/0
 14840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14841 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14843 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;Total ram usage:        3 bytes
 14846 ;; Hardware stack levels used:    1
 14847 ;; Hardware stack levels required when called:    3
 14848 ;; This function calls:
 14849 ;;		Nothing
 14850 ;; This function is called by:
 14851 ;;		_setDimmerLights_OnOff
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           
 14856                           ;psect for function _setDimmerIntr_DimmingValue
 14857  1A62                     _setDimmerIntr_DimmingValue:	
 14858                           
 14859                           ;incstack = 0
 14860                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14861                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14862  1A62  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14863                           
 14864                           ;Dimmer_B1.c: 139: if (lights == 1) {
 14865  1A63  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14866  1A64  3A01               	xorlw	1
 14867  1A65  1D03               	skipz
 14868  1A66  2A6D               	goto	l7501
 14869                           
 14870                           ;Dimmer_B1.c: 140: DimmerIntr1.DimmingValue = value;
 14871  1A67  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14872  1A68  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14873  1A69  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14874  1A6A  0021               	movlb	1	; select bank1
 14875  1A6B  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 14876                           
 14877                           ;Dimmer_B1.c: 141: }
 14878  1A6C  0008               	return
 14879  1A6D                     l7501:	
 14880                           
 14881                           ;Dimmer_B1.c: 144: else if (lights == 2) {
 14882  1A6D  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14883  1A6E  3A02               	xorlw	2
 14884  1A6F  1D03               	skipz
 14885  1A70  0008               	return
 14886                           
 14887                           ;Dimmer_B1.c: 145: DimmerIntr2.DimmingValue = value;
 14888  1A71  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14889  1A72  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14890  1A73  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14891  1A74  0021               	movlb	1	; select bank1
 14892  1A75  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 14893  1A76  0008               	return
 14894  1A77                     __end_of_setDimmerIntr_DimmingValue:	
 14895                           
 14896                           	psect	text96
 14897  1DE9                     __ptext96:	
 14898 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14899 ;; Defined at:
 14900 ;;		line 119 in file "../src/Dimmer_B1.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;  lights          1    wreg     unsigned char 
 14903 ;;  command         1    2[COMMON] unsigned char 
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;  lights          1    4[COMMON] unsigned char 
 14906 ;; Return value:  Size  Location     Type
 14907 ;;		None               void
 14908 ;; Registers used:
 14909 ;;		wreg, status,2, status,0
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14915 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;Total ram usage:        3 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:    3
 14922 ;; This function calls:
 14923 ;;		Nothing
 14924 ;; This function is called by:
 14925 ;;		_setDimmerLights_OnOff
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           
 14930                           ;psect for function _setDimmerIntr_ControlStatus
 14931  1DE9                     _setDimmerIntr_ControlStatus:	
 14932                           
 14933                           ;incstack = 0
 14934                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14935                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14936  1DE9  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14937                           
 14938                           ;Dimmer_B1.c: 121: if (lights == 1) {
 14939  1DEA  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14940  1DEB  3A01               	xorlw	1
 14941  1DEC  1D03               	skipz
 14942  1DED  2DFE               	goto	l7493
 14943                           
 14944                           ;Dimmer_B1.c: 122: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14945  1DEE  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14946  1DEF  3A01               	xorlw	1
 14947  1DF0  3000               	movlw	0
 14948  1DF1  1903               	skipnz
 14949  1DF2  3001               	movlw	1
 14950  1DF3  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14951  1DF4  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14952  1DF5  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14953  1DF6  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14954  1DF7  0021               	movlb	1	; select bank1
 14955  1DF8  0820               	movf	_DimmerIntr1^(0+128),w
 14956  1DF9  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14957  1DFA  39F7               	andlw	-9
 14958  1DFB  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14959  1DFC  00A0               	movwf	_DimmerIntr1^(0+128)
 14960                           
 14961                           ;Dimmer_B1.c: 123: }
 14962  1DFD  0008               	return
 14963  1DFE                     l7493:	
 14964                           
 14965                           ;Dimmer_B1.c: 126: else if (lights == 2) {
 14966  1DFE  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14967  1DFF  3A02               	xorlw	2
 14968  1E00  1D03               	skipz
 14969  1E01  0008               	return
 14970                           
 14971                           ;Dimmer_B1.c: 127: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14972  1E02  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14973  1E03  3A01               	xorlw	1
 14974  1E04  3000               	movlw	0
 14975  1E05  1903               	skipnz
 14976  1E06  3001               	movlw	1
 14977  1E07  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14978  1E08  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14979  1E09  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14980  1E0A  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14981  1E0B  0021               	movlb	1	; select bank1
 14982  1E0C  0830               	movf	_DimmerIntr2^(0+128),w
 14983  1E0D  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14984  1E0E  39F7               	andlw	-9
 14985  1E0F  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14986  1E10  00B0               	movwf	_DimmerIntr2^(0+128)
 14987  1E11  0008               	return
 14988  1E12                     __end_of_setDimmerIntr_ControlStatus:	
 14989                           
 14990                           	psect	text97
 14991  0B6A                     __ptext97:	
 14992 ;; *************** function _setDelayOff_GO *****************
 14993 ;; Defined at:
 14994 ;;		line 87 in file "../src/DelayOff_B1.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;  sw              1    wreg     unsigned char 
 14997 ;;  command         1   61[BANK0 ] unsigned char 
 14998 ;;  value           1   62[BANK0 ] unsigned char 
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;  sw              1   68[BANK0 ] unsigned char 
 15001 ;;  k               1   67[BANK0 ] unsigned char 
 15002 ;;  j               1   66[BANK0 ] unsigned char 
 15003 ;;  i               1   65[BANK0 ] unsigned char 
 15004 ;; Return value:  Size  Location     Type
 15005 ;;		None               void
 15006 ;; Registers used:
 15007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15013 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;Total ram usage:        8 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    4
 15020 ;; This function calls:
 15021 ;;		_DelayOffPointSelect
 15022 ;;		___bmul
 15023 ;;		_setProductData
 15024 ;; This function is called by:
 15025 ;;		_setDimmerLights_OnOff
 15026 ;;		_setRFSW_Control
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _setDelayOff_GO
 15032  0B6A                     _setDelayOff_GO:	
 15033                           
 15034                           ;incstack = 0
 15035                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15036                           ;setDelayOff_GO@sw stored from wreg
 15037  0B6A  0020               	movlb	0	; select bank0
 15038  0B6B  00E4               	movwf	setDelayOff_GO@sw
 15039                           
 15040                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15041  0B6C  0864               	movf	setDelayOff_GO@sw,w
 15042  0B6D  319A  2223  318B   	fcall	_DelayOffPointSelect
 15043                           
 15044                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15045  0B70  0020               	movlb	0	; select bank0
 15046  0B71  085D               	movf	setDelayOff_GO@command,w
 15047  0B72  3A01               	xorlw	1
 15048  0B73  3000               	movlw	0
 15049  0B74  1903               	skipnz
 15050  0B75  3001               	movlw	1
 15051  0B76  00DF               	movwf	??_setDelayOff_GO
 15052  0B77  0021               	movlb	1	; select bank1
 15053  0B78  086A               	movf	_DelayOff^(0+128),w
 15054  0B79  0086               	movwf	6
 15055  0B7A  3001               	movlw	1	; select bank2/3
 15056  0B7B  0087               	movwf	7
 15057  0B7C  0020               	movlb	0	; select bank0
 15058  0B7D  0DDF               	rlf	??_setDelayOff_GO,f
 15059  0B7E  0801               	movf	1,w
 15060  0B7F  065F               	xorwf	??_setDelayOff_GO,w
 15061  0B80  39FD               	andlw	-3
 15062  0B81  065F               	xorwf	??_setDelayOff_GO,w
 15063  0B82  0081               	movwf	1
 15064                           
 15065                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15066  0B83  0021               	movlb	1	; select bank1
 15067  0B84  086A               	movf	_DelayOff^(0+128),w
 15068  0B85  3E02               	addlw	2
 15069  0B86  0086               	movwf	6
 15070  0B87  3001               	movlw	1	; select bank2/3
 15071  0B88  0087               	movwf	7
 15072  0B89  3000               	movlw	0
 15073  0B8A  3FC0               	movwi [0]fsr1
 15074  0B8B  3FC1               	movwi [1]fsr1
 15075                           
 15076                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15077  0B8C  086A               	movf	_DelayOff^(0+128),w
 15078  0B8D  3E04               	addlw	4
 15079  0B8E  0086               	movwf	6
 15080  0B8F  3001               	movlw	1	; select bank2/3
 15081  0B90  0087               	movwf	7
 15082  0B91  0181               	clrf	1
 15083                           
 15084                           ;DelayOff_B1.c: 94: if (command == 1) {
 15085  0B92  0020               	movlb	0	; select bank0
 15086  0B93  085D               	movf	setDelayOff_GO@command,w
 15087  0B94  3A01               	xorlw	1
 15088  0B95  1D03               	skipz
 15089  0B96  2BEC               	goto	l7117
 15090                           
 15091                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15092  0B97  3005               	movlw	5
 15093  0B98  00DF               	movwf	??_setDelayOff_GO
 15094  0B99  085F               	movf	??_setDelayOff_GO,w
 15095  0B9A  00E1               	movwf	setDelayOff_GO@i
 15096  0B9B  01E2               	clrf	setDelayOff_GO@j
 15097  0B9C  01E3               	clrf	setDelayOff_GO@k
 15098                           
 15099                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15100  0B9D  300F               	movlw	15
 15101  0B9E  055E               	andwf	setDelayOff_GO@value,w
 15102  0B9F  00DF               	movwf	??_setDelayOff_GO
 15103  0BA0  085F               	movf	??_setDelayOff_GO,w
 15104  0BA1  3A05               	xorlw	5
 15105  0BA2  1903               	skipnz
 15106  0BA3  2BA8               	goto	l7103
 15107  0BA4  085E               	movf	setDelayOff_GO@value,w
 15108  0BA5  390F               	andlw	15
 15109  0BA6  1D03               	btfss	3,2
 15110  0BA7  2BD8               	goto	l7113
 15111  0BA8                     l7103:	
 15112  0BA8  3031               	movlw	49
 15113  0BA9  025E               	subwf	setDelayOff_GO@value,w
 15114  0BAA  1803               	skipnc
 15115  0BAB  2BD8               	goto	l7113
 15116                           
 15117                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15118  0BAC  085E               	movf	setDelayOff_GO@value,w
 15119  0BAD  390F               	andlw	15
 15120  0BAE  00DF               	movwf	??_setDelayOff_GO
 15121  0BAF  085F               	movf	??_setDelayOff_GO,w
 15122  0BB0  00E2               	movwf	setDelayOff_GO@j
 15123                           
 15124                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15125  0BB1  085E               	movf	setDelayOff_GO@value,w
 15126  0BB2  00DF               	movwf	??_setDelayOff_GO
 15127  0BB3  3004               	movlw	4
 15128  0BB4                     u6375:	
 15129  0BB4  36DF               	lsrf	??_setDelayOff_GO,f
 15130  0BB5  0B89               	decfsz	9,f
 15131  0BB6  2BB4               	goto	u6375
 15132  0BB7  085F               	movf	??_setDelayOff_GO,w
 15133  0BB8  390F               	andlw	15
 15134  0BB9  00E0               	movwf	??_setDelayOff_GO+1
 15135  0BBA  0860               	movf	??_setDelayOff_GO+1,w
 15136  0BBB  00E3               	movwf	setDelayOff_GO@k
 15137                           
 15138                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15139  0BBC  300A               	movlw	10
 15140  0BBD  00DF               	movwf	??_setDelayOff_GO
 15141  0BBE  085F               	movf	??_setDelayOff_GO,w
 15142  0BBF  00F2               	movwf	___bmul@multiplicand
 15143  0BC0  0863               	movf	setDelayOff_GO@k,w
 15144  0BC1  3199  21A8  318B   	fcall	___bmul
 15145  0BC4  0020               	movlb	0	; select bank0
 15146  0BC5  0762               	addwf	setDelayOff_GO@j,w
 15147  0BC6  00E0               	movwf	??_setDelayOff_GO+1
 15148  0BC7  0021               	movlb	1	; select bank1
 15149  0BC8  0A6A               	incf	_DelayOff^(0+128),w
 15150  0BC9  0086               	movwf	6
 15151  0BCA  3001               	movlw	1	; select bank2/3
 15152  0BCB  0087               	movwf	7
 15153  0BCC  0020               	movlb	0	; select bank0
 15154  0BCD  0860               	movf	??_setDelayOff_GO+1,w
 15155  0BCE  0081               	movwf	1
 15156                           
 15157                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15158  0BCF  085E               	movf	setDelayOff_GO@value,w
 15159  0BD0  00DF               	movwf	??_setDelayOff_GO
 15160  0BD1  085F               	movf	??_setDelayOff_GO,w
 15161  0BD2  00DA               	movwf	setProductData@value
 15162  0BD3  0864               	movf	setDelayOff_GO@sw,w
 15163  0BD4  3E1A               	addlw	26
 15164  0BD5  3198  20A3         	fcall	_setProductData
 15165                           
 15166                           ;DelayOff_B1.c: 103: } else {
 15167  0BD7  0008               	return
 15168  0BD8                     l7113:	
 15169                           
 15170                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15171  0BD8  3005               	movlw	5
 15172  0BD9  0020               	movlb	0	; select bank0
 15173  0BDA  00DF               	movwf	??_setDelayOff_GO
 15174  0BDB  0021               	movlb	1	; select bank1
 15175  0BDC  0A6A               	incf	_DelayOff^(0+128),w
 15176  0BDD  0086               	movwf	6
 15177  0BDE  3001               	movlw	1	; select bank2/3
 15178  0BDF  0087               	movwf	7
 15179  0BE0  0020               	movlb	0	; select bank0
 15180  0BE1  085F               	movf	??_setDelayOff_GO,w
 15181  0BE2  0081               	movwf	1
 15182                           
 15183                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15184  0BE3  3005               	movlw	5
 15185  0BE4  00DF               	movwf	??_setDelayOff_GO
 15186  0BE5  085F               	movf	??_setDelayOff_GO,w
 15187  0BE6  00DA               	movwf	setProductData@value
 15188  0BE7  0864               	movf	setDelayOff_GO@sw,w
 15189  0BE8  3E1A               	addlw	26
 15190  0BE9  3198  20A3         	fcall	_setProductData
 15191                           
 15192                           ;DelayOff_B1.c: 106: }
 15193                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15194  0BEB  0008               	return
 15195  0BEC                     l7117:	
 15196  0BEC  0020               	movlb	0	; select bank0
 15197  0BED  08DD               	movf	setDelayOff_GO@command,f
 15198  0BEE  1D03               	skipz
 15199  0BEF  0008               	return
 15200                           
 15201                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15202  0BF0  01DA               	clrf	setProductData@value
 15203  0BF1  0864               	movf	setDelayOff_GO@sw,w
 15204  0BF2  3E1A               	addlw	26
 15205  0BF3  3198  20A3         	fcall	_setProductData
 15206  0BF5  0008               	return
 15207  0BF6                     __end_of_setDelayOff_GO:	
 15208                           
 15209                           	psect	text98
 15210  19A8                     __ptext98:	
 15211 ;; *************** function ___bmul *****************
 15212 ;; Defined at:
 15213 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;  multiplier      1    wreg     unsigned char 
 15216 ;;  multiplicand    1    2[COMMON] unsigned char 
 15217 ;; Auto vars:     Size  Location     Type
 15218 ;;  multiplier      1    5[COMMON] unsigned char 
 15219 ;;  product         1    4[COMMON] unsigned char 
 15220 ;; Return value:  Size  Location     Type
 15221 ;;                  1    wreg      unsigned char 
 15222 ;; Registers used:
 15223 ;;		wreg, status,2, status,0
 15224 ;; Tracked objects:
 15225 ;;		On entry : 0/0
 15226 ;;		On exit  : 0/0
 15227 ;;		Unchanged: 0/0
 15228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15229 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;Total ram usage:        4 bytes
 15234 ;; Hardware stack levels used:    1
 15235 ;; Hardware stack levels required when called:    3
 15236 ;; This function calls:
 15237 ;;		Nothing
 15238 ;; This function is called by:
 15239 ;;		_setDelayOff_GO
 15240 ;;		_DelayTimejudge
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           
 15245                           ;psect for function ___bmul
 15246  19A8                     ___bmul:	
 15247                           
 15248                           ;incstack = 0
 15249                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15250                           ;___bmul@multiplier stored from wreg
 15251  19A8  00F5               	movwf	___bmul@multiplier
 15252  19A9  01F4               	clrf	___bmul@product
 15253  19AA                     l6753:	
 15254  19AA  1C75               	btfss	___bmul@multiplier,0
 15255  19AB  29B0               	goto	l6757
 15256  19AC  0872               	movf	___bmul@multiplicand,w
 15257  19AD  00F3               	movwf	??___bmul
 15258  19AE  0873               	movf	??___bmul,w
 15259  19AF  07F4               	addwf	___bmul@product,f
 15260  19B0                     l6757:	
 15261  19B0  1003               	clrc
 15262  19B1  0DF2               	rlf	___bmul@multiplicand,f
 15263  19B2  1003               	clrc
 15264  19B3  0CF5               	rrf	___bmul@multiplier,f
 15265  19B4  08F5               	movf	___bmul@multiplier,f
 15266  19B5  1D03               	skipz
 15267  19B6  29AA               	goto	l6753
 15268  19B7  0874               	movf	___bmul@product,w
 15269  19B8  0008               	return
 15270  19B9                     __end_of___bmul:	
 15271                           
 15272                           	psect	text99
 15273  1A4D                     __ptext99:	
 15274 ;; *************** function _setCmd_Status *****************
 15275 ;; Defined at:
 15276 ;;		line 656 in file "../src/Main_B1.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  number          1    wreg     unsigned char 
 15279 ;;  cmd             1    2[COMMON] unsigned char 
 15280 ;; Auto vars:     Size  Location     Type
 15281 ;;  number          1    4[COMMON] unsigned char 
 15282 ;; Return value:  Size  Location     Type
 15283 ;;		None               void
 15284 ;; Registers used:
 15285 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15286 ;; Tracked objects:
 15287 ;;		On entry : 0/0
 15288 ;;		On exit  : 0/0
 15289 ;;		Unchanged: 0/0
 15290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15291 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;Total ram usage:        3 bytes
 15296 ;; Hardware stack levels used:    1
 15297 ;; Hardware stack levels required when called:    3
 15298 ;; This function calls:
 15299 ;;		Nothing
 15300 ;; This function is called by:
 15301 ;;		_setDimmerLights_OnOff
 15302 ;;		_setControl_Lights_Table
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           
 15307                           ;psect for function _setCmd_Status
 15308  1A4D                     _setCmd_Status:	
 15309                           
 15310                           ;incstack = 0
 15311                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15312                           ;setCmd_Status@number stored from wreg
 15313  1A4D  00F4               	movwf	setCmd_Status@number
 15314                           
 15315                           ;Main_B1.c: 657: switch (number) {
 15316  1A4E  2A5C               	goto	l7299
 15317  1A4F                     l7295:	
 15318                           ;Main_B1.c: 658: case 1:
 15319                           
 15320                           
 15321                           ;Main_B1.c: 659: Cmd.all_off = cmd == 1 ? 1 : 0;
 15322  1A4F  0872               	movf	setCmd_Status@cmd,w
 15323  1A50  3A01               	xorlw	1
 15324  1A51  3000               	movlw	0
 15325  1A52  1903               	skipnz
 15326  1A53  3001               	movlw	1
 15327  1A54  00F3               	movwf	??_setCmd_Status
 15328  1A55  0021               	movlb	1	; select bank1
 15329  1A56  0869               	movf	_Cmd^(0+128),w
 15330  1A57  0673               	xorwf	??_setCmd_Status,w
 15331  1A58  39FE               	andlw	-2
 15332  1A59  0673               	xorwf	??_setCmd_Status,w
 15333  1A5A  00E9               	movwf	_Cmd^(0+128)
 15334                           
 15335                           ;Main_B1.c: 661: }
 15336                           
 15337                           ;Main_B1.c: 660: break;
 15338  1A5B  0008               	return
 15339  1A5C                     l7299:	
 15340  1A5C  0874               	movf	setCmd_Status@number,w
 15341                           
 15342                           ; Switch size 1, requested type "space"
 15343                           ; Number of cases is 1, Range of values is 1 to 1
 15344                           ; switch strategies available:
 15345                           ; Name         Instructions Cycles
 15346                           ; simple_byte            4     3 (average)
 15347                           ; direct_byte           11     9 (fixed)
 15348                           ; jumptable            263     9 (fixed)
 15349                           ;	Chosen strategy is simple_byte
 15350  1A5D  3A01               	xorlw	1	; case 1
 15351  1A5E  1903               	skipnz
 15352  1A5F  2A4F               	goto	l7295
 15353  1A60  2A61               	goto	l1779
 15354  1A61                     l1779:	
 15355  1A61  0008               	return
 15356  1A62                     __end_of_setCmd_Status:	
 15357                           
 15358                           	psect	text100
 15359  191A                     __ptext100:	
 15360 ;; *************** function _getMain_All_LightsStatus *****************
 15361 ;; Defined at:
 15362 ;;		line 378 in file "../src/Main_B1.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;		None
 15365 ;; Auto vars:     Size  Location     Type
 15366 ;;  status          1    2[COMMON] unsigned char 
 15367 ;; Return value:  Size  Location     Type
 15368 ;;                  1    wreg      unsigned char 
 15369 ;; Registers used:
 15370 ;;		wreg, status,2, status,0
 15371 ;; Tracked objects:
 15372 ;;		On entry : 0/0
 15373 ;;		On exit  : 0/0
 15374 ;;		Unchanged: 0/0
 15375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;Total ram usage:        1 bytes
 15381 ;; Hardware stack levels used:    1
 15382 ;; Hardware stack levels required when called:    3
 15383 ;; This function calls:
 15384 ;;		Nothing
 15385 ;; This function is called by:
 15386 ;;		_DimmerLights_Main
 15387 ;;		_setDimmerLights_Main
 15388 ;;		_setDimmerLights_OnOff
 15389 ;;		_Flash_Memory_Main
 15390 ;;		_Exception_Main
 15391 ;;		_Load_Main
 15392 ;;		_setTemp_Main
 15393 ;;		_setControl_Lights_Table
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           
 15398                           ;psect for function _getMain_All_LightsStatus
 15399  191A                     _getMain_All_LightsStatus:	
 15400                           
 15401                           ;Main_B1.c: 379: char status = 0;
 15402                           
 15403                           ;incstack = 0
 15404                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15405  191A  01F2               	clrf	getMain_All_LightsStatus@status
 15406                           
 15407                           ;Main_B1.c: 398: status = DimmerLights1.Status == 1 ? 1 : 0;
 15408  191B  3000               	movlw	0
 15409  191C  0023               	movlb	3	; select bank3
 15410  191D  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15411  191E  3001               	movlw	1
 15412  191F  00F2               	movwf	getMain_All_LightsStatus@status
 15413                           
 15414                           ;Main_B1.c: 399: if (status == 0) {
 15415  1920  08F2               	movf	getMain_All_LightsStatus@status,f
 15416  1921  1D03               	skipz
 15417  1922  2927               	goto	l9939
 15418                           
 15419                           ;Main_B1.c: 400: status = DimmerLights2.Status == 1 ? 1 : 0;
 15420  1923  3000               	movlw	0
 15421  1924  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15422  1925  3001               	movlw	1
 15423  1926  00F2               	movwf	getMain_All_LightsStatus@status
 15424  1927                     l9939:	
 15425                           
 15426                           ;Main_B1.c: 401: }
 15427                           ;Main_B1.c: 425: return status;
 15428  1927  0872               	movf	getMain_All_LightsStatus@status,w
 15429  1928  0008               	return
 15430  1929                     __end_of_getMain_All_LightsStatus:	
 15431                           
 15432                           	psect	text101
 15433  190B                     __ptext101:	
 15434 ;; *************** function _getDelayOff_GO *****************
 15435 ;; Defined at:
 15436 ;;		line 114 in file "../src/DelayOff_B1.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  sw              1    wreg     unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  sw              1    4[COMMON] unsigned char 
 15441 ;;  go              1    5[COMMON] unsigned char 
 15442 ;; Return value:  Size  Location     Type
 15443 ;;                  1    wreg      unsigned char 
 15444 ;; Registers used:
 15445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15446 ;; Tracked objects:
 15447 ;;		On entry : 0/0
 15448 ;;		On exit  : 0/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;Total ram usage:        2 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:    4
 15458 ;; This function calls:
 15459 ;;		_DelayOffPointSelect
 15460 ;; This function is called by:
 15461 ;;		_setDimmerLights_OnOff
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           
 15466                           ;psect for function _getDelayOff_GO
 15467  190B                     _getDelayOff_GO:	
 15468                           
 15469                           ;incstack = 0
 15470                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15471                           ;getDelayOff_GO@sw stored from wreg
 15472  190B  00F4               	movwf	getDelayOff_GO@sw
 15473                           
 15474                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15475  190C  0874               	movf	getDelayOff_GO@sw,w
 15476  190D  319A  2223         	fcall	_DelayOffPointSelect
 15477                           
 15478                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15479  190F  0021               	movlb	1	; select bank1
 15480  1910  086A               	movf	_DelayOff^(0+128),w
 15481  1911  0086               	movwf	6
 15482  1912  3001               	movlw	1	; select bank2/3
 15483  1913  0087               	movwf	7
 15484  1914  3000               	movlw	0
 15485  1915  1881               	btfsc	1,1
 15486  1916  3001               	movlw	1
 15487  1917  00F5               	movwf	getDelayOff_GO@go
 15488                           
 15489                           ;DelayOff_B1.c: 117: return go;
 15490  1918  0875               	movf	getDelayOff_GO@go,w
 15491  1919  0008               	return
 15492  191A                     __end_of_getDelayOff_GO:	
 15493                           
 15494                           	psect	text102
 15495  1958                     __ptext102:	
 15496 ;; *************** function _getCmd_Status *****************
 15497 ;; Defined at:
 15498 ;;		line 664 in file "../src/Main_B1.c"
 15499 ;; Parameters:    Size  Location     Type
 15500 ;;  number          1    wreg     unsigned char 
 15501 ;; Auto vars:     Size  Location     Type
 15502 ;;  number          1    2[COMMON] unsigned char 
 15503 ;;  cmd             1    3[COMMON] unsigned char 
 15504 ;; Return value:  Size  Location     Type
 15505 ;;                  1    wreg      unsigned char 
 15506 ;; Registers used:
 15507 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15508 ;; Tracked objects:
 15509 ;;		On entry : 0/0
 15510 ;;		On exit  : 0/0
 15511 ;;		Unchanged: 0/0
 15512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;Total ram usage:        2 bytes
 15518 ;; Hardware stack levels used:    1
 15519 ;; Hardware stack levels required when called:    3
 15520 ;; This function calls:
 15521 ;;		Nothing
 15522 ;; This function is called by:
 15523 ;;		_setDimmerLights_OnOff
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           
 15528                           ;psect for function _getCmd_Status
 15529  1958                     _getCmd_Status:	
 15530                           
 15531                           ;incstack = 0
 15532                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15533                           ;getCmd_Status@number stored from wreg
 15534  1958  00F2               	movwf	getCmd_Status@number
 15535                           
 15536                           ;Main_B1.c: 665: char cmd = 0;
 15537  1959  01F3               	clrf	getCmd_Status@cmd
 15538                           
 15539                           ;Main_B1.c: 666: switch (number) {
 15540  195A  2961               	goto	l7643
 15541  195B                     l7639:	
 15542                           ;Main_B1.c: 667: case 1:
 15543                           
 15544                           
 15545                           ;Main_B1.c: 668: cmd = Cmd.all_off == 1 ? 1 : 0;
 15546  195B  3000               	movlw	0
 15547  195C  0021               	movlb	1	; select bank1
 15548  195D  1869               	btfsc	_Cmd^(0+128),0
 15549  195E  3001               	movlw	1
 15550  195F  00F3               	movwf	getCmd_Status@cmd
 15551                           
 15552                           ;Main_B1.c: 670: }
 15553                           
 15554                           ;Main_B1.c: 669: break;
 15555  1960  2966               	goto	l7645
 15556  1961                     l7643:	
 15557  1961  0872               	movf	getCmd_Status@number,w
 15558                           
 15559                           ; Switch size 1, requested type "space"
 15560                           ; Number of cases is 1, Range of values is 1 to 1
 15561                           ; switch strategies available:
 15562                           ; Name         Instructions Cycles
 15563                           ; simple_byte            4     3 (average)
 15564                           ; direct_byte           11     9 (fixed)
 15565                           ; jumptable            263     9 (fixed)
 15566                           ;	Chosen strategy is simple_byte
 15567  1962  3A01               	xorlw	1	; case 1
 15568  1963  1903               	skipnz
 15569  1964  295B               	goto	l7639
 15570  1965  2966               	goto	l7645
 15571  1966                     l7645:	
 15572                           
 15573                           ;Main_B1.c: 671: return cmd;
 15574  1966  0873               	movf	getCmd_Status@cmd,w
 15575  1967  0008               	return
 15576  1968                     __end_of_getCmd_Status:	
 15577                           
 15578                           	psect	text103
 15579  13E7                     __ptext103:	
 15580 ;; *************** function _setDimmerLights_Dimming *****************
 15581 ;; Defined at:
 15582 ;;		line 1142 in file "../src/Dimmer_B1.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  lights          1    wreg     unsigned char 
 15585 ;;  status          1   66[BANK0 ] unsigned char 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  lights          1   69[BANK0 ] unsigned char 
 15588 ;;  value           1   68[BANK0 ] unsigned char 
 15589 ;; Return value:  Size  Location     Type
 15590 ;;		None               void
 15591 ;; Registers used:
 15592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15598 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;Total ram usage:        4 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    6
 15605 ;; This function calls:
 15606 ;;		_getDimmerIntr_DimmingValue
 15607 ;;		_getDimmerLights_ValueToPercent
 15608 ;;		_setBuz
 15609 ;;		_setDimmerIntr_Dimming_Sw
 15610 ;;		_setDimmerIntr_MaxmumValue
 15611 ;;		_setDimmerLights_Line
 15612 ;;		_setMemory_Modify
 15613 ;;		_setProductData
 15614 ;;		_setRF_DimmerLights
 15615 ;;		_setRF_TransceiveGO
 15616 ;;		_setTxData
 15617 ;; This function is called by:
 15618 ;;		_setDimmerLights_Main
 15619 ;; This function uses a non-reentrant model
 15620 ;;
 15621                           
 15622                           
 15623                           ;psect for function _setDimmerLights_Dimming
 15624  13E7                     _setDimmerLights_Dimming:	
 15625                           
 15626                           ;incstack = 0
 15627                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15628                           ;setDimmerLights_Dimming@lights stored from wreg
 15629  13E7  0020               	movlb	0	; select bank0
 15630  13E8  00E5               	movwf	setDimmerLights_Dimming@lights
 15631                           
 15632                           ;Dimmer_B1.c: 1143: setDimmerIntr_Dimming_Sw(lights, status);
 15633  13E9  0862               	movf	setDimmerLights_Dimming@status,w
 15634  13EA  00E3               	movwf	??_setDimmerLights_Dimming
 15635  13EB  0863               	movf	??_setDimmerLights_Dimming,w
 15636  13EC  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 15637  13ED  0865               	movf	setDimmerLights_Dimming@lights,w
 15638  13EE  319D  254F  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15639                           
 15640                           ;Dimmer_B1.c: 1144: if (status == 1) {
 15641  13F1  0020               	movlb	0	; select bank0
 15642  13F2  0862               	movf	setDimmerLights_Dimming@status,w
 15643  13F3  3A01               	xorlw	1
 15644  13F4  1D03               	skipz
 15645  13F5  2C03               	goto	l10341
 15646                           
 15647                           ;Dimmer_B1.c: 1146: setRF_TransceiveGO(0);
 15648  13F6  3000               	movlw	0
 15649  13F7  3199  2148  3193   	fcall	_setRF_TransceiveGO
 15650                           
 15651                           ;Dimmer_B1.c: 1148: setBuz(1, 100);
 15652  13FA  3064               	movlw	100
 15653  13FB  0020               	movlb	0	; select bank0
 15654  13FC  00A4               	movwf	setBuz@time
 15655  13FD  3000               	movlw	0
 15656  13FE  00A5               	movwf	setBuz@time+1
 15657  13FF  3001               	movlw	1
 15658  1400  3192  22EC         	fcall	_setBuz
 15659                           
 15660                           ;Dimmer_B1.c: 1149: } else if (status == 0) {
 15661  1402  0008               	return
 15662  1403                     l10341:	
 15663  1403  0020               	movlb	0	; select bank0
 15664  1404  08E2               	movf	setDimmerLights_Dimming@status,f
 15665  1405  1D03               	skipz
 15666  1406  0008               	return
 15667                           
 15668                           ;Dimmer_B1.c: 1152: Dimmer.Load_Status = 0;
 15669  1407  0022               	movlb	2	; select bank2
 15670  1408  1120               	bcf	_Dimmer^(0+256),2
 15671                           
 15672                           ;Dimmer_B1.c: 1153: setDimmerLights_Line(lights);
 15673  1409  0020               	movlb	0	; select bank0
 15674  140A  0865               	movf	setDimmerLights_Dimming@lights,w
 15675  140B  319B  230D  3193   	fcall	_setDimmerLights_Line
 15676                           
 15677                           ;Dimmer_B1.c: 1155: char value = getDimmerIntr_DimmingValue(lights);
 15678  140E  0020               	movlb	0	; select bank0
 15679  140F  0865               	movf	setDimmerLights_Dimming@lights,w
 15680  1410  319A  220F  3193   	fcall	_getDimmerIntr_DimmingValue
 15681  1413  0020               	movlb	0	; select bank0
 15682  1414  00E3               	movwf	??_setDimmerLights_Dimming
 15683  1415  0863               	movf	??_setDimmerLights_Dimming,w
 15684  1416  00E4               	movwf	setDimmerLights_Dimming@value
 15685                           
 15686                           ;Dimmer_B1.c: 1156: setDimmerIntr_MaxmumValue(lights, value);
 15687  1417  0864               	movf	setDimmerLights_Dimming@value,w
 15688  1418  00E3               	movwf	??_setDimmerLights_Dimming
 15689  1419  0863               	movf	??_setDimmerLights_Dimming,w
 15690  141A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15691  141B  0865               	movf	setDimmerLights_Dimming@lights,w
 15692  141C  319A  22F6  3193   	fcall	_setDimmerIntr_MaxmumValue
 15693                           
 15694                           ;Dimmer_B1.c: 1157: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15695  141F  0020               	movlb	0	; select bank0
 15696  1420  0864               	movf	setDimmerLights_Dimming@value,w
 15697  1421  3197  2736  3193   	fcall	_getDimmerLights_ValueToPercent
 15698  1424  0020               	movlb	0	; select bank0
 15699  1425  00E3               	movwf	??_setDimmerLights_Dimming
 15700  1426  0863               	movf	??_setDimmerLights_Dimming,w
 15701  1427  00DA               	movwf	setProductData@value
 15702  1428  0865               	movf	setDimmerLights_Dimming@lights,w
 15703  1429  3E14               	addlw	20
 15704  142A  3198  20A3  3193   	fcall	_setProductData
 15705                           
 15706                           ;Dimmer_B1.c: 1164: setMemory_Modify(1);
 15707  142D  3001               	movlw	1
 15708  142E  3199  2138  3193   	fcall	_setMemory_Modify
 15709                           
 15710                           ;Dimmer_B1.c: 1168: setRF_DimmerLights(lights, 1);
 15711  1431  0020               	movlb	0	; select bank0
 15712  1432  01DD               	clrf	setRF_DimmerLights@on
 15713  1433  0ADD               	incf	setRF_DimmerLights@on,f
 15714  1434  0865               	movf	setDimmerLights_Dimming@lights,w
 15715  1435  3188  202B  3193   	fcall	_setRF_DimmerLights
 15716                           
 15717                           ;Dimmer_B1.c: 1169: setTxData();
 15718  1438  31A7  27F2         	fcall	_setTxData
 15719  143A  0008               	return
 15720  143B                     __end_of_setDimmerLights_Dimming:	
 15721                           
 15722                           	psect	text104
 15723  27F2                     __ptext104:	
 15724 ;; *************** function _setTxData *****************
 15725 ;; Defined at:
 15726 ;;		line 237 in file "../src/RF_Control_B1.c"
 15727 ;; Parameters:    Size  Location     Type
 15728 ;;		None
 15729 ;; Auto vars:     Size  Location     Type
 15730 ;;  i               1    0        unsigned char 
 15731 ;; Return value:  Size  Location     Type
 15732 ;;		None               void
 15733 ;; Registers used:
 15734 ;;		status,2
 15735 ;; Tracked objects:
 15736 ;;		On entry : 0/0
 15737 ;;		On exit  : 0/0
 15738 ;;		Unchanged: 0/0
 15739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15744 ;;Total ram usage:        0 bytes
 15745 ;; Hardware stack levels used:    1
 15746 ;; Hardware stack levels required when called:    3
 15747 ;; This function calls:
 15748 ;;		Nothing
 15749 ;; This function is called by:
 15750 ;;		_setDimmerLights_OnOff
 15751 ;;		_setDimmerLights_Dimming
 15752 ;;		_getRxData
 15753 ;;		_setControl_Lights_Table
 15754 ;;		_setRFSW_Control
 15755 ;;		_setRFSW_AdjControl
 15756 ;; This function uses a non-reentrant model
 15757 ;;
 15758                           
 15759                           
 15760                           ;psect for function _setTxData
 15761  27F2                     _setTxData:	
 15762                           
 15763                           ;RF_Control_B1.c: 238: char i;
 15764                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 15765                           
 15766                           ;incstack = 0
 15767                           ; Regs used in _setTxData: [status,2]
 15768  27F2  0021               	movlb	1	; select bank1
 15769  27F3  1C40               	btfss	_RF1^(0+128),0
 15770  27F4  0008               	return
 15771                           
 15772                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 15773  27F5  1540               	bsf	_RF1^(0+128),2
 15774                           
 15775                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 15776  27F6  01C3               	clrf	(_RF1^(0+128)+3)
 15777  27F7  01C4               	clrf	((_RF1+1)^(0+128)+3)
 15778  27F8  0008               	return
 15779  27F9                     __end_of_setTxData:	
 15780                           
 15781                           	psect	text105
 15782  1948                     __ptext105:	
 15783 ;; *************** function _setRF_TransceiveGO *****************
 15784 ;; Defined at:
 15785 ;;		line 575 in file "../src/RF_Control_B1.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;  command         1    wreg     unsigned char 
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;  command         1    3[COMMON] unsigned char 
 15790 ;; Return value:  Size  Location     Type
 15791 ;;		None               void
 15792 ;; Registers used:
 15793 ;;		wreg, status,2, status,0
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;Total ram usage:        2 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    3
 15806 ;; This function calls:
 15807 ;;		Nothing
 15808 ;; This function is called by:
 15809 ;;		_setDimmerLights_Dimming
 15810 ;; This function uses a non-reentrant model
 15811 ;;
 15812                           
 15813                           
 15814                           ;psect for function _setRF_TransceiveGO
 15815  1948                     _setRF_TransceiveGO:	
 15816                           
 15817                           ;incstack = 0
 15818                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15819                           ;setRF_TransceiveGO@command stored from wreg
 15820  1948  00F3               	movwf	setRF_TransceiveGO@command
 15821                           
 15822                           ;RF_Control_B1.c: 576: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15823  1949  0873               	movf	setRF_TransceiveGO@command,w
 15824  194A  3A01               	xorlw	1
 15825  194B  3000               	movlw	0
 15826  194C  1903               	skipnz
 15827  194D  3001               	movlw	1
 15828  194E  00F2               	movwf	??_setRF_TransceiveGO
 15829  194F  0DF2               	rlf	??_setRF_TransceiveGO,f
 15830  1950  0DF2               	rlf	??_setRF_TransceiveGO,f
 15831  1951  0021               	movlb	1	; select bank1
 15832  1952  0840               	movf	_RF1^(0+128),w
 15833  1953  0672               	xorwf	??_setRF_TransceiveGO,w
 15834  1954  39FB               	andlw	-5
 15835  1955  0672               	xorwf	??_setRF_TransceiveGO,w
 15836  1956  00C0               	movwf	_RF1^(0+128)
 15837  1957  0008               	return
 15838  1958                     __end_of_setRF_TransceiveGO:	
 15839                           
 15840                           	psect	text106
 15841  082B                     __ptext106:	
 15842 ;; *************** function _setRF_DimmerLights *****************
 15843 ;; Defined at:
 15844 ;;		line 550 in file "../src/RF_Control_B1.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;  lights          1    wreg     unsigned char 
 15847 ;;  on              1   61[BANK0 ] unsigned char 
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;  lights          1   65[BANK0 ] unsigned char 
 15850 ;;  status          1   64[BANK0 ] unsigned char 
 15851 ;; Return value:  Size  Location     Type
 15852 ;;		None               void
 15853 ;; Registers used:
 15854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15855 ;; Tracked objects:
 15856 ;;		On entry : 0/0
 15857 ;;		On exit  : 0/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15860 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;Total ram usage:        5 bytes
 15865 ;; Hardware stack levels used:    1
 15866 ;; Hardware stack levels required when called:    4
 15867 ;; This function calls:
 15868 ;;		_setProductData
 15869 ;; This function is called by:
 15870 ;;		_setDimmerLights_OnOff
 15871 ;;		_setDimmerLights_Dimming
 15872 ;;		_setRFSW_Control
 15873 ;; This function uses a non-reentrant model
 15874 ;;
 15875                           
 15876                           
 15877                           ;psect for function _setRF_DimmerLights
 15878  082B                     _setRF_DimmerLights:	
 15879                           
 15880                           ;incstack = 0
 15881                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15882                           ;setRF_DimmerLights@lights stored from wreg
 15883  082B  0020               	movlb	0	; select bank0
 15884  082C  00E1               	movwf	setRF_DimmerLights@lights
 15885                           
 15886                           ;RF_Control_B1.c: 551: char status = 1;
 15887  082D  01E0               	clrf	setRF_DimmerLights@status
 15888  082E  0AE0               	incf	setRF_DimmerLights@status,f
 15889                           
 15890                           ;RF_Control_B1.c: 552: switch (lights) {
 15891  082F  2836               	goto	l7157
 15892  0830                     l7151:	
 15893                           ;RF_Control_B1.c: 553: case 2:
 15894                           
 15895  0830  2833               	goto	L11
 15896  0831                     l7153:	
 15897                           ;RF_Control_B1.c: 556: case 3:
 15898                           
 15899                           ;RF_Control_B1.c: 555: break;
 15900                           
 15901                           ;RF_Control_B1.c: 554: status <<= 1;
 15902                           
 15903                           
 15904                           ;RF_Control_B1.c: 557: status <<= 2;
 15905  0831  1003               	clrc
 15906  0832  0DE0               	rlf	setRF_DimmerLights@status,f
 15907  0833                     L11:	
 15908  0833  1003               	clrc
 15909  0834  0DE0               	rlf	setRF_DimmerLights@status,f
 15910                           
 15911                           ;RF_Control_B1.c: 559: }
 15912                           
 15913                           ;RF_Control_B1.c: 558: break;
 15914  0835  283E               	goto	l2590
 15915  0836                     l7157:	
 15916  0836  0861               	movf	setRF_DimmerLights@lights,w
 15917                           
 15918                           ; Switch size 1, requested type "space"
 15919                           ; Number of cases is 2, Range of values is 2 to 3
 15920                           ; switch strategies available:
 15921                           ; Name         Instructions Cycles
 15922                           ; simple_byte            7     4 (average)
 15923                           ; direct_byte           13     9 (fixed)
 15924                           ; jumptable            263     9 (fixed)
 15925                           ;	Chosen strategy is simple_byte
 15926  0837  3A02               	xorlw	2	; case 2
 15927  0838  1903               	skipnz
 15928  0839  2830               	goto	l7151
 15929  083A  3A01               	xorlw	1	; case 3
 15930  083B  1903               	skipnz
 15931  083C  2831               	goto	l7153
 15932  083D  283E               	goto	l2590
 15933  083E                     l2590:	
 15934                           
 15935                           ;RF_Control_B1.c: 560: status = ~status;
 15936  083E  09E0               	comf	setRF_DimmerLights@status,f
 15937                           
 15938                           ;RF_Control_B1.c: 562: setProductData(11, lights);
 15939  083F  0861               	movf	setRF_DimmerLights@lights,w
 15940  0840  00DE               	movwf	??_setRF_DimmerLights
 15941  0841  085E               	movf	??_setRF_DimmerLights,w
 15942  0842  00DA               	movwf	setProductData@value
 15943  0843  300B               	movlw	11
 15944  0844  3198  20A3  3188   	fcall	_setProductData
 15945                           
 15946                           ;RF_Control_B1.c: 563: setProductData(17, product->Data[26 + lights]);
 15947  0847  0020               	movlb	0	; select bank0
 15948  0848  0861               	movf	setRF_DimmerLights@lights,w
 15949  0849  3E1A               	addlw	26
 15950  084A  077B               	addwf	_product,w
 15951  084B  00DE               	movwf	??_setRF_DimmerLights
 15952  084C  085E               	movf	??_setRF_DimmerLights,w
 15953  084D  0086               	movwf	6
 15954  084E  3002               	movlw	2	; select bank4/5
 15955  084F  0087               	movwf	7
 15956  0850  0801               	movf	1,w
 15957  0851  00DF               	movwf	??_setRF_DimmerLights+1
 15958  0852  085F               	movf	??_setRF_DimmerLights+1,w
 15959  0853  00DA               	movwf	setProductData@value
 15960  0854  3011               	movlw	17
 15961  0855  3198  20A3  3188   	fcall	_setProductData
 15962                           
 15963                           ;RF_Control_B1.c: 564: if (on == 1) {
 15964  0858  0020               	movlb	0	; select bank0
 15965  0859  085D               	movf	setRF_DimmerLights@on,w
 15966  085A  3A01               	xorlw	1
 15967  085B  1D03               	skipz
 15968  085C  287C               	goto	l7165
 15969                           
 15970                           ;RF_Control_B1.c: 565: setProductData(9, product->Data[20 + lights]);
 15971  085D  0861               	movf	setRF_DimmerLights@lights,w
 15972  085E  3E14               	addlw	20
 15973  085F  077B               	addwf	_product,w
 15974  0860  00DE               	movwf	??_setRF_DimmerLights
 15975  0861  085E               	movf	??_setRF_DimmerLights,w
 15976  0862  0086               	movwf	6
 15977  0863  3002               	movlw	2	; select bank4/5
 15978  0864  0087               	movwf	7
 15979  0865  0801               	movf	1,w
 15980  0866  00DF               	movwf	??_setRF_DimmerLights+1
 15981  0867  085F               	movf	??_setRF_DimmerLights+1,w
 15982  0868  00DA               	movwf	setProductData@value
 15983  0869  3009               	movlw	9
 15984  086A  3198  20A3  3188   	fcall	_setProductData
 15985                           
 15986                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] | lights));
 15987  086D  087B               	movf	_product,w
 15988  086E  3E0F               	addlw	15
 15989  086F  0086               	movwf	6
 15990  0870  3002               	movlw	2	; select bank4/5
 15991  0871  0087               	movwf	7
 15992  0872  0801               	movf	1,w
 15993  0873  0020               	movlb	0	; select bank0
 15994  0874  0461               	iorwf	setRF_DimmerLights@lights,w
 15995  0875  00DE               	movwf	??_setRF_DimmerLights
 15996  0876  085E               	movf	??_setRF_DimmerLights,w
 15997  0877  00DA               	movwf	setProductData@value
 15998  0878  300F               	movlw	15
 15999  0879  3198  20A3         	fcall	_setProductData
 16000                           
 16001                           ;RF_Control_B1.c: 567: } else {
 16002  087B  0008               	return
 16003  087C                     l7165:	
 16004                           
 16005                           ;RF_Control_B1.c: 568: setProductData(9, 0x00);
 16006  087C  0020               	movlb	0	; select bank0
 16007  087D  01DA               	clrf	setProductData@value
 16008  087E  3009               	movlw	9
 16009  087F  3198  20A3  3188   	fcall	_setProductData
 16010                           
 16011                           ;RF_Control_B1.c: 569: setProductData(15, (product->Data[15] & status));
 16012  0882  087B               	movf	_product,w
 16013  0883  3E0F               	addlw	15
 16014  0884  0086               	movwf	6
 16015  0885  3002               	movlw	2	; select bank4/5
 16016  0886  0087               	movwf	7
 16017  0887  0801               	movf	1,w
 16018  0888  0020               	movlb	0	; select bank0
 16019  0889  0560               	andwf	setRF_DimmerLights@status,w
 16020  088A  00DE               	movwf	??_setRF_DimmerLights
 16021  088B  085E               	movf	??_setRF_DimmerLights,w
 16022  088C  00DA               	movwf	setProductData@value
 16023  088D  300F               	movlw	15
 16024  088E  3198  20A3         	fcall	_setProductData
 16025  0890  0008               	return
 16026  0891                     __end_of_setRF_DimmerLights:	
 16027                           
 16028                           	psect	text107
 16029  1B0D                     __ptext107:	
 16030 ;; *************** function _setDimmerLights_Line *****************
 16031 ;; Defined at:
 16032 ;;		line 1215 in file "../src/Dimmer_B1.c"
 16033 ;; Parameters:    Size  Location     Type
 16034 ;;  lights          1    wreg     unsigned char 
 16035 ;; Auto vars:     Size  Location     Type
 16036 ;;  lights          1    2[COMMON] unsigned char 
 16037 ;; Return value:  Size  Location     Type
 16038 ;;		None               void
 16039 ;; Registers used:
 16040 ;;		wreg
 16041 ;; Tracked objects:
 16042 ;;		On entry : 0/0
 16043 ;;		On exit  : 0/0
 16044 ;;		Unchanged: 0/0
 16045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;Total ram usage:        1 bytes
 16051 ;; Hardware stack levels used:    1
 16052 ;; Hardware stack levels required when called:    3
 16053 ;; This function calls:
 16054 ;;		Nothing
 16055 ;; This function is called by:
 16056 ;;		_setDimmerLights_OnOff
 16057 ;;		_setDimmerLights_Dimming
 16058 ;; This function uses a non-reentrant model
 16059 ;;
 16060                           
 16061                           
 16062                           ;psect for function _setDimmerLights_Line
 16063  1B0D                     _setDimmerLights_Line:	
 16064                           
 16065                           ;incstack = 0
 16066                           ; Regs used in _setDimmerLights_Line: [wreg]
 16067                           ;setDimmerLights_Line@lights stored from wreg
 16068  1B0D  00F2               	movwf	setDimmerLights_Line@lights
 16069                           
 16070                           ;Dimmer_B1.c: 1216: Dimmer.LoadGO = 1;
 16071  1B0E  0022               	movlb	2	; select bank2
 16072  1B0F  14A0               	bsf	_Dimmer^(0+256),1
 16073                           
 16074                           ;Dimmer_B1.c: 1218: DimmerLights1.Line = 0;
 16075  1B10  0023               	movlb	3	; select bank3
 16076  1B11  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 16077                           
 16078                           ;Dimmer_B1.c: 1219: if (lights == 1 && lights != 0) {
 16079  1B12  0872               	movf	setDimmerLights_Line@lights,w
 16080  1B13  3A01               	xorlw	1
 16081  1B14  1D03               	skipz
 16082  1B15  2B1A               	goto	l955
 16083  1B16  0872               	movf	setDimmerLights_Line@lights,w
 16084  1B17  1903               	btfsc	3,2
 16085  1B18  2B1A               	goto	l955
 16086                           
 16087                           ;Dimmer_B1.c: 1220: DimmerLights1.Line = 1;
 16088  1B19  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 16089  1B1A                     l955:	
 16090                           
 16091                           ;Dimmer_B1.c: 1221: }
 16092                           ;Dimmer_B1.c: 1224: DimmerLights2.Line = 0;
 16093  1B1A  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 16094                           
 16095                           ;Dimmer_B1.c: 1225: if (lights == 2 && lights != 0) {
 16096  1B1B  0872               	movf	setDimmerLights_Line@lights,w
 16097  1B1C  3A02               	xorlw	2
 16098  1B1D  1D03               	skipz
 16099  1B1E  0008               	return
 16100  1B1F  0872               	movf	setDimmerLights_Line@lights,w
 16101  1B20  1903               	btfsc	3,2
 16102  1B21  0008               	return
 16103                           
 16104                           ;Dimmer_B1.c: 1226: DimmerLights2.Line = 1;
 16105  1B22  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 16106  1B23  0008               	return
 16107  1B24                     __end_of_setDimmerLights_Line:	
 16108                           
 16109                           	psect	text108
 16110  1D4F                     __ptext108:	
 16111 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16112 ;; Defined at:
 16113 ;;		line 251 in file "../src/Dimmer_B1.c"
 16114 ;; Parameters:    Size  Location     Type
 16115 ;;  lights          1    wreg     unsigned char 
 16116 ;;  command         1    2[COMMON] unsigned char 
 16117 ;; Auto vars:     Size  Location     Type
 16118 ;;  lights          1    4[COMMON] unsigned char 
 16119 ;; Return value:  Size  Location     Type
 16120 ;;		None               void
 16121 ;; Registers used:
 16122 ;;		wreg, status,2, status,0
 16123 ;; Tracked objects:
 16124 ;;		On entry : 0/0
 16125 ;;		On exit  : 0/0
 16126 ;;		Unchanged: 0/0
 16127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16128 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16130 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;Total ram usage:        3 bytes
 16133 ;; Hardware stack levels used:    1
 16134 ;; Hardware stack levels required when called:    3
 16135 ;; This function calls:
 16136 ;;		Nothing
 16137 ;; This function is called by:
 16138 ;;		_setDimmerLights_Dimming
 16139 ;;		_setDimmerLights_DimmingClose
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143                           
 16144                           ;psect for function _setDimmerIntr_Dimming_Sw
 16145  1D4F                     _setDimmerIntr_Dimming_Sw:	
 16146                           
 16147                           ;incstack = 0
 16148                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16149                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16150  1D4F  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16151                           
 16152                           ;Dimmer_B1.c: 253: if (lights == 1) {
 16153  1D50  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16154  1D51  3A01               	xorlw	1
 16155  1D52  1D03               	skipz
 16156  1D53  2D62               	goto	l7277
 16157                           
 16158                           ;Dimmer_B1.c: 254: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16159  1D54  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16160  1D55  3A01               	xorlw	1
 16161  1D56  3000               	movlw	0
 16162  1D57  1903               	skipnz
 16163  1D58  3001               	movlw	1
 16164  1D59  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16165  1D5A  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16166  1D5B  0021               	movlb	1	; select bank1
 16167  1D5C  0820               	movf	_DimmerIntr1^(0+128),w
 16168  1D5D  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16169  1D5E  39EF               	andlw	-17
 16170  1D5F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16171  1D60  00A0               	movwf	_DimmerIntr1^(0+128)
 16172                           
 16173                           ;Dimmer_B1.c: 255: }
 16174  1D61  0008               	return
 16175  1D62                     l7277:	
 16176                           
 16177                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 16178  1D62  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16179  1D63  3A02               	xorlw	2
 16180  1D64  1D03               	skipz
 16181  1D65  0008               	return
 16182                           
 16183                           ;Dimmer_B1.c: 259: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16184  1D66  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16185  1D67  3A01               	xorlw	1
 16186  1D68  3000               	movlw	0
 16187  1D69  1903               	skipnz
 16188  1D6A  3001               	movlw	1
 16189  1D6B  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16190  1D6C  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16191  1D6D  0021               	movlb	1	; select bank1
 16192  1D6E  0830               	movf	_DimmerIntr2^(0+128),w
 16193  1D6F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16194  1D70  39EF               	andlw	-17
 16195  1D71  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16196  1D72  00B0               	movwf	_DimmerIntr2^(0+128)
 16197  1D73  0008               	return
 16198  1D74                     __end_of_setDimmerIntr_Dimming_Sw:	
 16199                           
 16200                           	psect	text109
 16201  1A0F                     __ptext109:	
 16202 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16203 ;; Defined at:
 16204 ;;		line 155 in file "../src/Dimmer_B1.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;  lights          1    wreg     unsigned char 
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;  lights          1    4[COMMON] unsigned char 
 16209 ;;  value           1    3[COMMON] unsigned char 
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      unsigned char 
 16212 ;; Registers used:
 16213 ;;		wreg, status,2
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;Total ram usage:        3 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:    3
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_setDimmerLights_Dimming
 16230 ;; This function uses a non-reentrant model
 16231 ;;
 16232                           
 16233                           
 16234                           ;psect for function _getDimmerIntr_DimmingValue
 16235  1A0F                     _getDimmerIntr_DimmingValue:	
 16236                           
 16237                           ;incstack = 0
 16238                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16239                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16240  1A0F  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16241                           
 16242                           ;Dimmer_B1.c: 156: char value = 0;
 16243  1A10  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16244                           
 16245                           ;Dimmer_B1.c: 158: if (lights == 1) {
 16246  1A11  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16247  1A12  3A01               	xorlw	1
 16248  1A13  1D03               	skipz
 16249  1A14  2A18               	goto	l7511
 16250                           
 16251                           ;Dimmer_B1.c: 159: value = DimmerIntr1.DimmingValue;
 16252  1A15  0021               	movlb	1	; select bank1
 16253  1A16  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16254  1A17  2A1E               	goto	L12
 16255  1A18                     l7511:	
 16256                           ;Dimmer_B1.c: 160: }
 16257                           
 16258                           
 16259                           ;Dimmer_B1.c: 163: else if (lights == 2) {
 16260  1A18  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16261  1A19  3A02               	xorlw	2
 16262  1A1A  1D03               	skipz
 16263  1A1B  2A21               	goto	l779
 16264                           
 16265                           ;Dimmer_B1.c: 164: value = DimmerIntr2.DimmingValue;
 16266  1A1C  0021               	movlb	1	; select bank1
 16267  1A1D  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 16268  1A1E                     L12:	
 16269  1A1E  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16270  1A1F  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16271  1A20  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16272  1A21                     l779:	
 16273                           
 16274                           ;Dimmer_B1.c: 165: }
 16275                           ;Dimmer_B1.c: 172: return value;
 16276  1A21  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16277  1A22  0008               	return
 16278  1A23                     __end_of_getDimmerIntr_DimmingValue:	
 16279                           
 16280                           	psect	text110
 16281  1FC9                     __ptext110:	
 16282 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16283 ;; Defined at:
 16284 ;;		line 1175 in file "../src/Dimmer_B1.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;  lights          1    wreg     unsigned char 
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;  lights          1    7[COMMON] unsigned char 
 16289 ;;  allow           1    8[COMMON] unsigned char 
 16290 ;; Return value:  Size  Location     Type
 16291 ;;                  1    wreg      unsigned char 
 16292 ;; Registers used:
 16293 ;;		wreg, status,2, status,0, pclath, cstack
 16294 ;; Tracked objects:
 16295 ;;		On entry : 0/0
 16296 ;;		On exit  : 0/0
 16297 ;;		Unchanged: 0/0
 16298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;Total ram usage:        6 bytes
 16304 ;; Hardware stack levels used:    1
 16305 ;; Hardware stack levels required when called:    4
 16306 ;; This function calls:
 16307 ;;		_getLoad_OK
 16308 ;; This function is called by:
 16309 ;;		_setDimmerLights_Main
 16310 ;; This function uses a non-reentrant model
 16311 ;;
 16312                           
 16313                           
 16314                           ;psect for function _getDimmerLights_Allow_Condition
 16315  1FC9                     _getDimmerLights_Allow_Condition:	
 16316                           
 16317                           ;incstack = 0
 16318                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16319                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16320  1FC9  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16321                           
 16322                           ;Dimmer_B1.c: 1176: char allow = 0;
 16323  1FCA  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16324                           
 16325                           ;Dimmer_B1.c: 1182: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16326  1FCB  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16327  1FCC  0AF4               	incf	_getDimmerLights_Allow_Condition$2729,f
 16328  1FCD  31A7  27EB  319F   	fcall	_getLoad_OK
 16329  1FD0  3800               	iorlw	0
 16330  1FD1  1D03               	skipz
 16331  1FD2  2FD7               	goto	l7833
 16332  1FD3  0022               	movlb	2	; select bank2
 16333  1FD4  18A0               	btfsc	_Dimmer^(0+256),1
 16334  1FD5  2FD7               	goto	l7833
 16335  1FD6  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16336  1FD7                     l7833:	
 16337  1FD7  0874               	movf	_getDimmerLights_Allow_Condition$2729,w
 16338  1FD8  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16339  1FD9  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16340  1FDA  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16341                           
 16342                           ;Dimmer_B1.c: 1186: if (allow == 0) {
 16343  1FDB  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16344  1FDC  1D03               	skipz
 16345  1FDD  2FFE               	goto	l7857
 16346                           
 16347                           ;Dimmer_B1.c: 1187: if (lights == 1) {
 16348  1FDE  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16349  1FDF  3A01               	xorlw	1
 16350  1FE0  1D03               	skipz
 16351  1FE1  2FED               	goto	l7847
 16352                           
 16353                           ;Dimmer_B1.c: 1188: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16354  1FE2  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16355  1FE3  0AF5               	incf	_getDimmerLights_Allow_Condition$2730,f
 16356  1FE4  0023               	movlb	3	; select bank3
 16357  1FE5  1A47               	btfsc	_DimmerLights2^(0+384),4
 16358  1FE6  2FEB               	goto	l7845
 16359  1FE7  0021               	movlb	1	; select bank1
 16360  1FE8  1A30               	btfsc	_DimmerIntr2^(0+128),4
 16361  1FE9  2FEB               	goto	l7845
 16362  1FEA  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16363  1FEB                     l7845:	
 16364  1FEB  0875               	movf	_getDimmerLights_Allow_Condition$2730,w
 16365  1FEC  2FFB               	goto	L13
 16366  1FED                     l7847:	
 16367                           ;Dimmer_B1.c: 1189: } else if (lights == 2) {
 16368                           
 16369  1FED  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16370  1FEE  3A02               	xorlw	2
 16371  1FEF  1D03               	skipz
 16372  1FF0  2FFE               	goto	l7857
 16373                           
 16374                           ;Dimmer_B1.c: 1190: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16375  1FF1  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16376  1FF2  0AF6               	incf	_getDimmerLights_Allow_Condition$2731,f
 16377  1FF3  0023               	movlb	3	; select bank3
 16378  1FF4  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16379  1FF5  2FFA               	goto	l7855
 16380  1FF6  0021               	movlb	1	; select bank1
 16381  1FF7  1A20               	btfsc	_DimmerIntr1^(0+128),4
 16382  1FF8  2FFA               	goto	l7855
 16383  1FF9  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16384  1FFA                     l7855:	
 16385  1FFA  0876               	movf	_getDimmerLights_Allow_Condition$2731,w
 16386  1FFB                     L13:	
 16387  1FFB  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16388  1FFC  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16389  1FFD  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16390  1FFE                     l7857:	
 16391                           
 16392                           ;Dimmer_B1.c: 1191: }
 16393                           ;Dimmer_B1.c: 1192: }
 16394                           ;Dimmer_B1.c: 1210: return allow;
 16395  1FFE  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16396  1FFF  0008               	return
 16397  2000                     __end_of_getDimmerLights_Allow_Condition:	
 16398                           
 16399                           	psect	text111
 16400  27EB                     __ptext111:	
 16401 ;; *************** function _getLoad_OK *****************
 16402 ;; Defined at:
 16403 ;;		line 274 in file "../src/OverLoad_B1.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;		None
 16406 ;; Auto vars:     Size  Location     Type
 16407 ;;  ok              1    2[COMMON] unsigned char 
 16408 ;; Return value:  Size  Location     Type
 16409 ;;                  1    wreg      unsigned char 
 16410 ;; Registers used:
 16411 ;;		wreg, status,2
 16412 ;; Tracked objects:
 16413 ;;		On entry : 0/0
 16414 ;;		On exit  : 0/0
 16415 ;;		Unchanged: 0/0
 16416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;Total ram usage:        1 bytes
 16422 ;; Hardware stack levels used:    1
 16423 ;; Hardware stack levels required when called:    3
 16424 ;; This function calls:
 16425 ;;		Nothing
 16426 ;; This function is called by:
 16427 ;;		_DimmerLights_Main
 16428 ;;		_getDimmerLights_Allow_Condition
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function _getLoad_OK
 16434  27EB                     _getLoad_OK:	
 16435                           
 16436                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16437                           
 16438                           ;incstack = 0
 16439                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16440  27EB  3000               	movlw	0
 16441  27EC  0022               	movlb	2	; select bank2
 16442  27ED  1BB2               	btfsc	_Load^(0+256),7
 16443  27EE  3001               	movlw	1
 16444  27EF  00F2               	movwf	getLoad_OK@ok
 16445                           
 16446                           ;OverLoad_B1.c: 276: return ok;
 16447  27F0  0872               	movf	getLoad_OK@ok,w
 16448  27F1  0008               	return
 16449  27F2                     __end_of_getLoad_OK:	
 16450                           
 16451                           	psect	text112
 16452  1E3C                     __ptext112:	
 16453 ;; *************** function _getMain_All_Error_Status *****************
 16454 ;; Defined at:
 16455 ;;		line 429 in file "../src/Main_B1.c"
 16456 ;; Parameters:    Size  Location     Type
 16457 ;;  command         1    wreg     unsigned char 
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;  command         1    7[COMMON] unsigned char 
 16460 ;;  status          1    8[COMMON] unsigned char 
 16461 ;; Return value:  Size  Location     Type
 16462 ;;                  1    wreg      unsigned char 
 16463 ;; Registers used:
 16464 ;;		wreg, status,2, status,0
 16465 ;; Tracked objects:
 16466 ;;		On entry : 0/0
 16467 ;;		On exit  : 0/0
 16468 ;;		Unchanged: 0/0
 16469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;Total ram usage:        7 bytes
 16475 ;; Hardware stack levels used:    1
 16476 ;; Hardware stack levels required when called:    3
 16477 ;; This function calls:
 16478 ;;		Nothing
 16479 ;; This function is called by:
 16480 ;;		_DimmerLights_Main
 16481 ;;		_Exception_Main
 16482 ;;		_Load_Main
 16483 ;;		_setTemp_Main
 16484 ;;		_getRxData
 16485 ;;		_setSw_Main
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489                           
 16490                           ;psect for function _getMain_All_Error_Status
 16491  1E3C                     _getMain_All_Error_Status:	
 16492                           
 16493                           ;incstack = 0
 16494                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16495                           ;getMain_All_Error_Status@command stored from wreg
 16496  1E3C  00F7               	movwf	getMain_All_Error_Status@command
 16497                           
 16498                           ;Main_B1.c: 430: char status = 0;
 16499  1E3D  01F8               	clrf	getMain_All_Error_Status@status
 16500                           
 16501                           ;Main_B1.c: 441: if (status == 0 && command != 2) {
 16502  1E3E  08F8               	movf	getMain_All_Error_Status@status,f
 16503  1E3F  1D03               	skipz
 16504  1E40  2E53               	goto	l7535
 16505  1E41  0877               	movf	getMain_All_Error_Status@command,w
 16506  1E42  3A02               	xorlw	2
 16507  1E43  1903               	skipnz
 16508  1E44  2E53               	goto	l7535
 16509                           
 16510                           ;Main_B1.c: 442: status = Temp.ERROR == 1 ? 2 : 0;
 16511  1E45  0022               	movlb	2	; select bank2
 16512  1E46  18DA               	btfsc	_Temp^(0+256),1
 16513  1E47  2E4B               	goto	l7533
 16514  1E48  01F3               	clrf	_getMain_All_Error_Status$4214
 16515  1E49  01F4               	clrf	_getMain_All_Error_Status$4214+1
 16516  1E4A  2E4F               	goto	l1738
 16517  1E4B                     l7533:	
 16518  1E4B  3002               	movlw	2
 16519  1E4C  00F3               	movwf	_getMain_All_Error_Status$4214
 16520  1E4D  3000               	movlw	0
 16521  1E4E  00F4               	movwf	_getMain_All_Error_Status$4214+1
 16522  1E4F                     l1738:	
 16523  1E4F  0873               	movf	_getMain_All_Error_Status$4214,w
 16524  1E50  00F2               	movwf	??_getMain_All_Error_Status
 16525  1E51  0872               	movf	??_getMain_All_Error_Status,w
 16526  1E52  00F8               	movwf	getMain_All_Error_Status@status
 16527  1E53                     l7535:	
 16528                           
 16529                           ;Main_B1.c: 443: }
 16530                           ;Main_B1.c: 448: if (status == 0 && command != 3) {
 16531  1E53  08F8               	movf	getMain_All_Error_Status@status,f
 16532  1E54  1D03               	skipz
 16533  1E55  2E68               	goto	l1739
 16534  1E56  0877               	movf	getMain_All_Error_Status@command,w
 16535  1E57  3A03               	xorlw	3
 16536  1E58  1903               	skipnz
 16537  1E59  2E68               	goto	l1739
 16538                           
 16539                           ;Main_B1.c: 449: status = Load.ERROR == 1 ? 3 : 0;
 16540  1E5A  0022               	movlb	2	; select bank2
 16541  1E5B  1AB2               	btfsc	_Load^(0+256),5
 16542  1E5C  2E60               	goto	l7543
 16543  1E5D  01F5               	clrf	_getMain_All_Error_Status$4215
 16544  1E5E  01F6               	clrf	_getMain_All_Error_Status$4215+1
 16545  1E5F  2E64               	goto	l1743
 16546  1E60                     l7543:	
 16547  1E60  3003               	movlw	3
 16548  1E61  00F5               	movwf	_getMain_All_Error_Status$4215
 16549  1E62  3000               	movlw	0
 16550  1E63  00F6               	movwf	_getMain_All_Error_Status$4215+1
 16551  1E64                     l1743:	
 16552  1E64  0875               	movf	_getMain_All_Error_Status$4215,w
 16553  1E65  00F2               	movwf	??_getMain_All_Error_Status
 16554  1E66  0872               	movf	??_getMain_All_Error_Status,w
 16555  1E67  00F8               	movwf	getMain_All_Error_Status@status
 16556  1E68                     l1739:	
 16557                           
 16558                           ;Main_B1.c: 450: }
 16559                           ;Main_B1.c: 460: return status;
 16560  1E68  0878               	movf	getMain_All_Error_Status@status,w
 16561  1E69  0008               	return
 16562  1E6A                     __end_of_getMain_All_Error_Status:	
 16563                           
 16564                           	psect	text113
 16565  1393                     __ptext113:	
 16566 ;; *************** function _DimmerLights_TwoPhase_Main *****************
 16567 ;; Defined at:
 16568 ;;		line 957 in file "../src/Dimmer_B1.c"
 16569 ;; Parameters:    Size  Location     Type
 16570 ;;  lights          1    wreg     unsigned char 
 16571 ;; Auto vars:     Size  Location     Type
 16572 ;;  lights          1   65[BANK0 ] unsigned char 
 16573 ;; Return value:  Size  Location     Type
 16574 ;;		None               void
 16575 ;; Registers used:
 16576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16577 ;; Tracked objects:
 16578 ;;		On entry : 0/0
 16579 ;;		On exit  : 0/0
 16580 ;;		Unchanged: 0/0
 16581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;Total ram usage:        1 bytes
 16587 ;; Hardware stack levels used:    1
 16588 ;; Hardware stack levels required when called:    7
 16589 ;; This function calls:
 16590 ;;		_DimmerLights_AssignationDimming
 16591 ;;		_DimmerLights_SelectPointer
 16592 ;; This function is called by:
 16593 ;;		_DimmerLights_Main
 16594 ;; This function uses a non-reentrant model
 16595 ;;
 16596                           
 16597                           
 16598                           ;psect for function _DimmerLights_TwoPhase_Main
 16599  1393                     _DimmerLights_TwoPhase_Main:	
 16600                           
 16601                           ;incstack = 0
 16602                           ; Regs used in _DimmerLights_TwoPhase_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16603                           ;DimmerLights_TwoPhase_Main@lights stored from wreg
 16604  1393  0020               	movlb	0	; select bank0
 16605  1394  00E1               	movwf	DimmerLights_TwoPhase_Main@lights
 16606                           
 16607                           ;Dimmer_B1.c: 959: DimmerLights_SelectPointer(lights);
 16608  1395  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16609  1396  319A  2238  3193   	fcall	_DimmerLights_SelectPointer
 16610                           
 16611                           ;Dimmer_B1.c: 960: if (DimmerLights->Phase == 1) {
 16612  1399  0020               	movlb	0	; select bank0
 16613  139A  086C               	movf	_DimmerLights,w
 16614  139B  3E02               	addlw	2
 16615  139C  0086               	movwf	6
 16616  139D  3001               	movlw	1	; select bank2/3
 16617  139E  0087               	movwf	7
 16618  139F  1C01               	btfss	1,0
 16619  13A0  0008               	return
 16620                           
 16621                           ;Dimmer_B1.c: 961: if (DimmerLights->PhaseFirst == 0) {
 16622  13A1  086C               	movf	_DimmerLights,w
 16623  13A2  3E02               	addlw	2
 16624  13A3  0086               	movwf	6
 16625  13A4  3001               	movlw	1	; select bank2/3
 16626  13A5  0087               	movwf	7
 16627  13A6  1881               	btfsc	1,1
 16628  13A7  2BD1               	goto	l10661
 16629                           
 16630                           ;Dimmer_B1.c: 963: if (DimmerLights->PhaseSwitch == 1) {
 16631  13A8  086C               	movf	_DimmerLights,w
 16632  13A9  3E02               	addlw	2
 16633  13AA  0086               	movwf	6
 16634  13AB  3001               	movlw	1	; select bank2/3
 16635  13AC  0087               	movwf	7
 16636  13AD  1D01               	btfss	1,2
 16637  13AE  2BC0               	goto	l10659
 16638                           
 16639                           ;Dimmer_B1.c: 964: DimmerLights->PhaseFirst = 1;
 16640  13AF  086C               	movf	_DimmerLights,w
 16641  13B0  3E02               	addlw	2
 16642  13B1  0086               	movwf	6
 16643  13B2  3001               	movlw	1	; select bank2/3
 16644  13B3  0087               	movwf	7
 16645  13B4  1481               	bsf	1,1
 16646                           
 16647                           ;Dimmer_B1.c: 965: DimmerLights->Trigger = 1;
 16648  13B5  086C               	movf	_DimmerLights,w
 16649  13B6  0086               	movwf	6
 16650  13B7  3001               	movlw	1	; select bank2/3
 16651  13B8  0087               	movwf	7
 16652  13B9  1481               	bsf	1,1
 16653                           
 16654                           ;Dimmer_B1.c: 966: DimmerLights->Switch = 1;
 16655  13BA  086C               	movf	_DimmerLights,w
 16656  13BB  0086               	movwf	6
 16657  13BC  3001               	movlw	1	; select bank2/3
 16658  13BD  0087               	movwf	7
 16659  13BE  1501               	bsf	1,2
 16660                           
 16661                           ;Dimmer_B1.c: 967: } else {
 16662  13BF  0008               	return
 16663  13C0                     l10659:	
 16664                           
 16665                           ;Dimmer_B1.c: 968: DimmerLights->Phase = 0;
 16666  13C0  086C               	movf	_DimmerLights,w
 16667  13C1  3E02               	addlw	2
 16668  13C2  0086               	movwf	6
 16669  13C3  3001               	movlw	1	; select bank2/3
 16670  13C4  0087               	movwf	7
 16671  13C5  1001               	bcf	1,0
 16672                           
 16673                           ;Dimmer_B1.c: 969: DimmerLights->Trigger = 1;
 16674  13C6  086C               	movf	_DimmerLights,w
 16675  13C7  0086               	movwf	6
 16676  13C8  3001               	movlw	1	; select bank2/3
 16677  13C9  0087               	movwf	7
 16678  13CA  1481               	bsf	1,1
 16679                           
 16680                           ;Dimmer_B1.c: 970: DimmerLights->Switch = 0;
 16681  13CB  086C               	movf	_DimmerLights,w
 16682  13CC  0086               	movwf	6
 16683  13CD  3001               	movlw	1	; select bank2/3
 16684  13CE  0087               	movwf	7
 16685  13CF  1101               	bcf	1,2
 16686                           
 16687                           ;Dimmer_B1.c: 971: }
 16688                           ;Dimmer_B1.c: 972: } else {
 16689  13D0  0008               	return
 16690  13D1                     l10661:	
 16691                           
 16692                           ;Dimmer_B1.c: 973: if (DimmerLights->Trigger == 0) {
 16693  13D1  086C               	movf	_DimmerLights,w
 16694  13D2  0086               	movwf	6
 16695  13D3  3001               	movlw	1	; select bank2/3
 16696  13D4  0087               	movwf	7
 16697  13D5  1881               	btfsc	1,1
 16698  13D6  0008               	return
 16699                           
 16700                           ;Dimmer_B1.c: 974: DimmerLights->PhaseFirst = 0;
 16701  13D7  086C               	movf	_DimmerLights,w
 16702  13D8  3E02               	addlw	2
 16703  13D9  0086               	movwf	6
 16704  13DA  3001               	movlw	1	; select bank2/3
 16705  13DB  0087               	movwf	7
 16706  13DC  1081               	bcf	1,1
 16707                           
 16708                           ;Dimmer_B1.c: 975: DimmerLights->Phase = 0;
 16709  13DD  086C               	movf	_DimmerLights,w
 16710  13DE  3E02               	addlw	2
 16711  13DF  0086               	movwf	6
 16712  13E0  3001               	movlw	1	; select bank2/3
 16713  13E1  0087               	movwf	7
 16714  13E2  1001               	bcf	1,0
 16715                           
 16716                           ;Dimmer_B1.c: 976: DimmerLights_AssignationDimming(lights);
 16717  13E3  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16718  13E4  319E  266A         	fcall	_DimmerLights_AssignationDimming
 16719  13E6  0008               	return
 16720  13E7                     __end_of_DimmerLights_TwoPhase_Main:	
 16721                           
 16722                           	psect	text114
 16723  1E6A                     __ptext114:	
 16724 ;; *************** function _DimmerLights_AssignationDimming *****************
 16725 ;; Defined at:
 16726 ;;		line 983 in file "../src/Dimmer_B1.c"
 16727 ;; Parameters:    Size  Location     Type
 16728 ;;  sw              1    wreg     unsigned char 
 16729 ;; Auto vars:     Size  Location     Type
 16730 ;;  sw              1   64[BANK0 ] unsigned char 
 16731 ;;  status          1   63[BANK0 ] unsigned char 
 16732 ;; Return value:  Size  Location     Type
 16733 ;;		None               void
 16734 ;; Registers used:
 16735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16736 ;; Tracked objects:
 16737 ;;		On entry : 0/0
 16738 ;;		On exit  : 0/0
 16739 ;;		Unchanged: 0/0
 16740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16744 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16745 ;;Total ram usage:        4 bytes
 16746 ;; Hardware stack levels used:    1
 16747 ;; Hardware stack levels required when called:    6
 16748 ;; This function calls:
 16749 ;;		_getDimmerLights_PercentToValue
 16750 ;;		_getDimmerLights_Status
 16751 ;;		_setDimmerIntr_Dimming_RF
 16752 ;;		_setDimmerIntr_MaxmumValue
 16753 ;;		_setMemory_Modify
 16754 ;; This function is called by:
 16755 ;;		_DimmerLights_TwoPhase_Main
 16756 ;; This function uses a non-reentrant model
 16757 ;;
 16758                           
 16759                           
 16760                           ;psect for function _DimmerLights_AssignationDimming
 16761  1E6A                     _DimmerLights_AssignationDimming:	
 16762                           
 16763                           ;incstack = 0
 16764                           ; Regs used in _DimmerLights_AssignationDimming: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 16765                           ;DimmerLights_AssignationDimming@sw stored from wreg
 16766  1E6A  0020               	movlb	0	; select bank0
 16767  1E6B  00E0               	movwf	DimmerLights_AssignationDimming@sw
 16768                           
 16769                           ;Dimmer_B1.c: 984: char status = 0;
 16770  1E6C  01DF               	clrf	DimmerLights_AssignationDimming@status
 16771                           
 16772                           ;Dimmer_B1.c: 986: status = getDimmerLights_Status(sw);
 16773  1E6D  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16774  1E6E  3198  20ED  319E   	fcall	_getDimmerLights_Status
 16775  1E71  0020               	movlb	0	; select bank0
 16776  1E72  00DD               	movwf	??_DimmerLights_AssignationDimming
 16777  1E73  085D               	movf	??_DimmerLights_AssignationDimming,w
 16778  1E74  00DF               	movwf	DimmerLights_AssignationDimming@status
 16779                           
 16780                           ;Dimmer_B1.c: 990: setMemory_Modify(1);
 16781  1E75  3001               	movlw	1
 16782  1E76  3199  2138  319E   	fcall	_setMemory_Modify
 16783                           
 16784                           ;Dimmer_B1.c: 994: if (status == 1) {
 16785  1E79  0020               	movlb	0	; select bank0
 16786  1E7A  085F               	movf	DimmerLights_AssignationDimming@status,w
 16787  1E7B  3A01               	xorlw	1
 16788  1E7C  1D03               	skipz
 16789  1E7D  0008               	return
 16790                           
 16791                           ;Dimmer_B1.c: 995: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(product-
      +                          >Data[20 + sw]));
 16792  1E7E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16793  1E7F  3E14               	addlw	20
 16794  1E80  077B               	addwf	_product,w
 16795  1E81  00DD               	movwf	??_DimmerLights_AssignationDimming
 16796  1E82  085D               	movf	??_DimmerLights_AssignationDimming,w
 16797  1E83  0086               	movwf	6
 16798  1E84  3002               	movlw	2	; select bank4/5
 16799  1E85  0087               	movwf	7
 16800  1E86  0801               	movf	1,w
 16801  1E87  3196  26D1  319E   	fcall	_getDimmerLights_PercentToValue
 16802  1E8A  0020               	movlb	0	; select bank0
 16803  1E8B  00DE               	movwf	??_DimmerLights_AssignationDimming+1
 16804  1E8C  085E               	movf	??_DimmerLights_AssignationDimming+1,w
 16805  1E8D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 16806  1E8E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16807  1E8F  319A  22F6  319E   	fcall	_setDimmerIntr_MaxmumValue
 16808                           
 16809                           ;Dimmer_B1.c: 996: setDimmerIntr_Dimming_RF(sw, 1);
 16810  1E92  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 16811  1E93  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 16812  1E94  0020               	movlb	0	; select bank0
 16813  1E95  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16814  1E96  319D  25C0         	fcall	_setDimmerIntr_Dimming_RF
 16815  1E98  0008               	return
 16816  1E99                     __end_of_DimmerLights_AssignationDimming:	
 16817                           
 16818                           	psect	text115
 16819  1AF6                     __ptext115:	
 16820 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16821 ;; Defined at:
 16822 ;;		line 175 in file "../src/Dimmer_B1.c"
 16823 ;; Parameters:    Size  Location     Type
 16824 ;;  lights          1    wreg     unsigned char 
 16825 ;;  value           1   58[BANK0 ] unsigned char 
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;  lights          1   60[BANK0 ] unsigned char 
 16828 ;; Return value:  Size  Location     Type
 16829 ;;		None               void
 16830 ;; Registers used:
 16831 ;;		wreg
 16832 ;; Tracked objects:
 16833 ;;		On entry : 0/0
 16834 ;;		On exit  : 0/0
 16835 ;;		Unchanged: 0/0
 16836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16837 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;Total ram usage:        3 bytes
 16842 ;; Hardware stack levels used:    1
 16843 ;; Hardware stack levels required when called:    3
 16844 ;; This function calls:
 16845 ;;		Nothing
 16846 ;; This function is called by:
 16847 ;;		_DimmerLights_AssignationDimming
 16848 ;;		_setDimmerLights_OnOff
 16849 ;;		_setDimmerLights_Dimming
 16850 ;;		_setRFSW_AdjControl
 16851 ;; This function uses a non-reentrant model
 16852 ;;
 16853                           
 16854                           
 16855                           ;psect for function _setDimmerIntr_MaxmumValue
 16856  1AF6                     _setDimmerIntr_MaxmumValue:	
 16857                           
 16858                           ;incstack = 0
 16859                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16860                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16861  1AF6  0020               	movlb	0	; select bank0
 16862  1AF7  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16863                           
 16864                           ;Dimmer_B1.c: 177: if (lights == 1) {
 16865  1AF8  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16866  1AF9  3A01               	xorlw	1
 16867  1AFA  1D03               	skipz
 16868  1AFB  2B02               	goto	l7137
 16869                           
 16870                           ;Dimmer_B1.c: 178: DimmerIntr1.MaxmumValue = value;
 16871  1AFC  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16872  1AFD  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16873  1AFE  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16874  1AFF  0021               	movlb	1	; select bank1
 16875  1B00  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 16876                           
 16877                           ;Dimmer_B1.c: 179: }
 16878  1B01  0008               	return
 16879  1B02                     l7137:	
 16880                           
 16881                           ;Dimmer_B1.c: 182: else if (lights == 2) {
 16882  1B02  0020               	movlb	0	; select bank0
 16883  1B03  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16884  1B04  3A02               	xorlw	2
 16885  1B05  1D03               	skipz
 16886  1B06  0008               	return
 16887                           
 16888                           ;Dimmer_B1.c: 183: DimmerIntr2.MaxmumValue = value;
 16889  1B07  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16890  1B08  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16891  1B09  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16892  1B0A  0021               	movlb	1	; select bank1
 16893  1B0B  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 16894  1B0C  0008               	return
 16895  1B0D                     __end_of_setDimmerIntr_MaxmumValue:	
 16896                           
 16897                           	psect	text116
 16898  1DC0                     __ptext116:	
 16899 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 16900 ;; Defined at:
 16901 ;;		line 290 in file "../src/Dimmer_B1.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;  lights          1    wreg     unsigned char 
 16904 ;;  command         1    2[COMMON] unsigned char 
 16905 ;; Auto vars:     Size  Location     Type
 16906 ;;  lights          1    4[COMMON] unsigned char 
 16907 ;; Return value:  Size  Location     Type
 16908 ;;		None               void
 16909 ;; Registers used:
 16910 ;;		wreg, status,2, status,0
 16911 ;; Tracked objects:
 16912 ;;		On entry : 0/0
 16913 ;;		On exit  : 0/0
 16914 ;;		Unchanged: 0/0
 16915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16916 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;Total ram usage:        3 bytes
 16921 ;; Hardware stack levels used:    1
 16922 ;; Hardware stack levels required when called:    3
 16923 ;; This function calls:
 16924 ;;		Nothing
 16925 ;; This function is called by:
 16926 ;;		_DimmerLights_AssignationDimming
 16927 ;;		_setDimmerLights_OnOff
 16928 ;;		_setRFSW_AdjControl
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           
 16933                           ;psect for function _setDimmerIntr_Dimming_RF
 16934  1DC0                     _setDimmerIntr_Dimming_RF:	
 16935                           
 16936                           ;incstack = 0
 16937                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 16938                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 16939  1DC0  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 16940                           
 16941                           ;Dimmer_B1.c: 292: if (lights == 1) {
 16942  1DC1  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16943  1DC2  3A01               	xorlw	1
 16944  1DC3  1D03               	skipz
 16945  1DC4  2DD5               	goto	l7145
 16946                           
 16947                           ;Dimmer_B1.c: 293: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 16948  1DC5  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16949  1DC6  3A01               	xorlw	1
 16950  1DC7  3000               	movlw	0
 16951  1DC8  1903               	skipnz
 16952  1DC9  3001               	movlw	1
 16953  1DCA  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16954  1DCB  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16955  1DCC  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16956  1DCD  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16957  1DCE  0021               	movlb	1	; select bank1
 16958  1DCF  0820               	movf	_DimmerIntr1^(0+128),w
 16959  1DD0  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16960  1DD1  39BF               	andlw	-65
 16961  1DD2  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16962  1DD3  00A0               	movwf	_DimmerIntr1^(0+128)
 16963                           
 16964                           ;Dimmer_B1.c: 294: }
 16965  1DD4  0008               	return
 16966  1DD5                     l7145:	
 16967                           
 16968                           ;Dimmer_B1.c: 297: else if (lights == 2) {
 16969  1DD5  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16970  1DD6  3A02               	xorlw	2
 16971  1DD7  1D03               	skipz
 16972  1DD8  0008               	return
 16973                           
 16974                           ;Dimmer_B1.c: 298: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 16975  1DD9  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16976  1DDA  3A01               	xorlw	1
 16977  1DDB  3000               	movlw	0
 16978  1DDC  1903               	skipnz
 16979  1DDD  3001               	movlw	1
 16980  1DDE  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16981  1DDF  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16982  1DE0  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16983  1DE1  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16984  1DE2  0021               	movlb	1	; select bank1
 16985  1DE3  0830               	movf	_DimmerIntr2^(0+128),w
 16986  1DE4  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16987  1DE5  39BF               	andlw	-65
 16988  1DE6  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16989  1DE7  00B0               	movwf	_DimmerIntr2^(0+128)
 16990  1DE8  0008               	return
 16991  1DE9                     __end_of_setDimmerIntr_Dimming_RF:	
 16992                           
 16993                           	psect	text117
 16994  0C91                     __ptext117:	
 16995 ;; *************** function _DimmerLights_DimmingFunction *****************
 16996 ;; Defined at:
 16997 ;;		line 2127 in file "../src/Dimmer_B1.c"
 16998 ;; Parameters:    Size  Location     Type
 16999 ;;  lights          1    wreg     unsigned char 
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  lights          1    6[BANK0 ] unsigned char 
 17002 ;; Return value:  Size  Location     Type
 17003 ;;		None               void
 17004 ;; Registers used:
 17005 ;;		wreg, status,2, status,0, pclath, cstack
 17006 ;; Tracked objects:
 17007 ;;		On entry : 0/0
 17008 ;;		On exit  : 0/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17015 ;;Total ram usage:        2 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; Hardware stack levels required when called:    6
 17018 ;; This function calls:
 17019 ;;		_DimmerIntr_ValueCalculate
 17020 ;; This function is called by:
 17021 ;;		_DimmerLights_Main
 17022 ;; This function uses a non-reentrant model
 17023 ;;
 17024                           
 17025                           
 17026                           ;psect for function _DimmerLights_DimmingFunction
 17027  0C91                     _DimmerLights_DimmingFunction:	
 17028                           
 17029                           ;incstack = 0
 17030                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 17031                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17032  0C91  0020               	movlb	0	; select bank0
 17033  0C92  00A6               	movwf	DimmerLights_DimmingFunction@lights
 17034                           
 17035                           ;Dimmer_B1.c: 2129: if (lights == 1) {
 17036  0C93  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17037  0C94  3A01               	xorlw	1
 17038  0C95  1D03               	skipz
 17039  0C96  2CE7               	goto	l10607
 17040                           
 17041                           ;Dimmer_B1.c: 2130: if (DimmerIntr1.Tune == 1) {
 17042  0C97  0021               	movlb	1	; select bank1
 17043  0C98  1CA0               	btfss	_DimmerIntr1^(0+128),1
 17044  0C99  2CE7               	goto	l10607
 17045                           
 17046                           ;Dimmer_B1.c: 2131: DimmerIntr1.Tune = 0;
 17047  0C9A  10A0               	bcf	_DimmerIntr1^(0+128),1
 17048                           
 17049                           ;Dimmer_B1.c: 2132: DimmerIntr1.TuneTime++;
 17050  0C9B  3001               	movlw	1
 17051  0C9C  0020               	movlb	0	; select bank0
 17052  0C9D  00A5               	movwf	??_DimmerLights_DimmingFunction
 17053  0C9E  0825               	movf	??_DimmerLights_DimmingFunction,w
 17054  0C9F  0021               	movlb	1	; select bank1
 17055  0CA0  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 17056                           
 17057                           ;Dimmer_B1.c: 2133: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17058  0CA1  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 17059  0CA2  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 17060  0CA3  1C03               	skipc
 17061  0CA4  2CE7               	goto	l10607
 17062                           
 17063                           ;Dimmer_B1.c: 2134: DimmerIntr1.TuneTime = 0;
 17064  0CA5  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 17065                           
 17066                           ;Dimmer_B1.c: 2135: DimmerIntr1.TuneGO = 1;
 17067  0CA6  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 17068                           
 17069                           ;Dimmer_B1.c: 2136: if (DimmerIntr1.Dimming_Sw == 1) {
 17070  0CA7  1E20               	btfss	_DimmerIntr1^(0+128),4
 17071  0CA8  2CC9               	goto	l1054
 17072                           
 17073                           ;Dimmer_B1.c: 2138: if (DimmerIntr1.Dimming_Status == 0) {
 17074  0CA9  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 17075  0CAA  2CBC               	goto	l10589
 17076                           
 17077                           ;Dimmer_B1.c: 2139: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17078  0CAB  302A               	movlw	42
 17079  0CAC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17080  0CAD  1803               	skipnc
 17081  0CAE  2CBA               	goto	l1056
 17082                           
 17083                           ;Dimmer_B1.c: 2140: DimmerIntr1.DimmingValue++;
 17084  0CAF  3001               	movlw	1
 17085  0CB0  0020               	movlb	0	; select bank0
 17086  0CB1  00A5               	movwf	??_DimmerLights_DimmingFunction
 17087  0CB2  0825               	movf	??_DimmerLights_DimmingFunction,w
 17088  0CB3  0021               	movlb	1	; select bank1
 17089  0CB4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17090                           
 17091                           ;Dimmer_B1.c: 2141: DimmerIntr_ValueCalculate(1);
 17092  0CB5  3001               	movlw	1
 17093  0CB6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17094                           
 17095                           ;Dimmer_B1.c: 2142: } else {
 17096  0CB9  2CE7               	goto	l10607
 17097  0CBA                     l1056:	
 17098                           
 17099                           ;Dimmer_B1.c: 2143: DimmerIntr1.Dimming_Status = 1;
 17100  0CBA  16A0               	bsf	_DimmerIntr1^(0+128),5
 17101                           
 17102                           ;Dimmer_B1.c: 2144: }
 17103                           ;Dimmer_B1.c: 2145: } else {
 17104  0CBB  2CE7               	goto	l10607
 17105  0CBC                     l10589:	
 17106                           
 17107                           ;Dimmer_B1.c: 2146: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17108  0CBC  3003               	movlw	3
 17109  0CBD  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17110  0CBE  1C03               	skipc
 17111  0CBF  2CC7               	goto	l1059
 17112                           
 17113                           ;Dimmer_B1.c: 2147: DimmerIntr1.DimmingValue--;
 17114  0CC0  3001               	movlw	1
 17115  0CC1  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17116                           
 17117                           ;Dimmer_B1.c: 2148: DimmerIntr_ValueCalculate(1);
 17118  0CC2  3001               	movlw	1
 17119  0CC3  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17120                           
 17121                           ;Dimmer_B1.c: 2149: } else {
 17122  0CC6  2CE7               	goto	l10607
 17123  0CC7                     l1059:	
 17124                           
 17125                           ;Dimmer_B1.c: 2150: DimmerIntr1.Dimming_Status = 0;
 17126  0CC7  12A0               	bcf	_DimmerIntr1^(0+128),5
 17127                           
 17128                           ;Dimmer_B1.c: 2151: }
 17129                           ;Dimmer_B1.c: 2152: }
 17130                           ;Dimmer_B1.c: 2171: } else if (DimmerIntr1.Dimming_RF == 1) {
 17131  0CC8  2CE7               	goto	l10607
 17132  0CC9                     l1054:	
 17133  0CC9  1F20               	btfss	_DimmerIntr1^(0+128),6
 17134  0CCA  2CE7               	goto	l10607
 17135                           
 17136                           ;Dimmer_B1.c: 2173: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17137  0CCB  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 17138  0CCC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17139  0CCD  1803               	skipnc
 17140  0CCE  2CDA               	goto	l10601
 17141                           
 17142                           ;Dimmer_B1.c: 2174: DimmerIntr1.DimmingValue++;
 17143  0CCF  3001               	movlw	1
 17144  0CD0  0020               	movlb	0	; select bank0
 17145  0CD1  00A5               	movwf	??_DimmerLights_DimmingFunction
 17146  0CD2  0825               	movf	??_DimmerLights_DimmingFunction,w
 17147  0CD3  0021               	movlb	1	; select bank1
 17148  0CD4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17149                           
 17150                           ;Dimmer_B1.c: 2175: DimmerIntr_ValueCalculate(1);
 17151  0CD5  3001               	movlw	1
 17152  0CD6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17153                           
 17154                           ;Dimmer_B1.c: 2176: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17155  0CD9  2CE7               	goto	l10607
 17156  0CDA                     l10601:	
 17157  0CDA  0021               	movlb	1	; select bank1
 17158  0CDB  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17159  0CDC  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 17160  0CDD  1803               	skipnc
 17161  0CDE  2CE6               	goto	l1065
 17162                           
 17163                           ;Dimmer_B1.c: 2177: DimmerIntr1.DimmingValue--;
 17164  0CDF  3001               	movlw	1
 17165  0CE0  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17166                           
 17167                           ;Dimmer_B1.c: 2178: DimmerIntr_ValueCalculate(1);
 17168  0CE1  3001               	movlw	1
 17169  0CE2  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17170                           
 17171                           ;Dimmer_B1.c: 2179: } else {
 17172  0CE5  2CE7               	goto	l10607
 17173  0CE6                     l1065:	
 17174                           
 17175                           ;Dimmer_B1.c: 2180: DimmerIntr1.Dimming_RF = 0;
 17176  0CE6  1320               	bcf	_DimmerIntr1^(0+128),6
 17177  0CE7                     l10607:	
 17178                           
 17179                           ;Dimmer_B1.c: 2181: }
 17180                           ;Dimmer_B1.c: 2194: }
 17181                           ;Dimmer_B1.c: 2195: }
 17182                           ;Dimmer_B1.c: 2196: }
 17183                           ;Dimmer_B1.c: 2197: }
 17184                           ;Dimmer_B1.c: 2201: if (lights == 2) {
 17185  0CE7  0020               	movlb	0	; select bank0
 17186  0CE8  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17187  0CE9  3A02               	xorlw	2
 17188  0CEA  1D03               	skipz
 17189  0CEB  0008               	return
 17190                           
 17191                           ;Dimmer_B1.c: 2202: if (DimmerIntr2.Tune == 1) {
 17192  0CEC  0021               	movlb	1	; select bank1
 17193  0CED  1CB0               	btfss	_DimmerIntr2^(0+128),1
 17194  0CEE  0008               	return
 17195                           
 17196                           ;Dimmer_B1.c: 2203: DimmerIntr2.Tune = 0;
 17197  0CEF  10B0               	bcf	_DimmerIntr2^(0+128),1
 17198                           
 17199                           ;Dimmer_B1.c: 2204: DimmerIntr2.TuneTime++;
 17200  0CF0  3001               	movlw	1
 17201  0CF1  0020               	movlb	0	; select bank0
 17202  0CF2  00A5               	movwf	??_DimmerLights_DimmingFunction
 17203  0CF3  0825               	movf	??_DimmerLights_DimmingFunction,w
 17204  0CF4  0021               	movlb	1	; select bank1
 17205  0CF5  07B3               	addwf	(_DimmerIntr2^(0+128)+3),f
 17206                           
 17207                           ;Dimmer_B1.c: 2205: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17208  0CF6  0834               	movf	(_DimmerIntr2^(0+128)+4),w
 17209  0CF7  0233               	subwf	(_DimmerIntr2^(0+128)+3),w
 17210  0CF8  1C03               	skipc
 17211  0CF9  0008               	return
 17212                           
 17213                           ;Dimmer_B1.c: 2206: DimmerIntr2.TuneTime = 0;
 17214  0CFA  01B3               	clrf	(_DimmerIntr2^(0+128)+3)
 17215                           
 17216                           ;Dimmer_B1.c: 2207: DimmerIntr2.TuneGO = 1;
 17217  0CFB  1731               	bsf	(_DimmerIntr2^(0+128)+1),6
 17218                           
 17219                           ;Dimmer_B1.c: 2208: if (DimmerIntr2.Dimming_Sw == 1) {
 17220  0CFC  1E30               	btfss	_DimmerIntr2^(0+128),4
 17221  0CFD  2D1C               	goto	l1070
 17222                           
 17223                           ;Dimmer_B1.c: 2210: if (DimmerIntr2.Dimming_Status == 0) {
 17224  0CFE  1AB0               	btfsc	_DimmerIntr2^(0+128),5
 17225  0CFF  2D10               	goto	l10631
 17226                           
 17227                           ;Dimmer_B1.c: 2211: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17228  0D00  302A               	movlw	42
 17229  0D01  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17230  0D02  1803               	skipnc
 17231  0D03  2D0E               	goto	l1072
 17232                           
 17233                           ;Dimmer_B1.c: 2212: DimmerIntr2.DimmingValue++;
 17234  0D04  3001               	movlw	1
 17235  0D05  0020               	movlb	0	; select bank0
 17236  0D06  00A5               	movwf	??_DimmerLights_DimmingFunction
 17237  0D07  0825               	movf	??_DimmerLights_DimmingFunction,w
 17238  0D08  0021               	movlb	1	; select bank1
 17239  0D09  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17240                           
 17241                           ;Dimmer_B1.c: 2213: DimmerIntr_ValueCalculate(2);
 17242  0D0A  3002               	movlw	2
 17243  0D0B  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17244                           
 17245                           ;Dimmer_B1.c: 2214: } else {
 17246  0D0D  0008               	return
 17247  0D0E                     l1072:	
 17248                           
 17249                           ;Dimmer_B1.c: 2215: DimmerIntr2.Dimming_Status = 1;
 17250  0D0E  16B0               	bsf	_DimmerIntr2^(0+128),5
 17251                           
 17252                           ;Dimmer_B1.c: 2216: }
 17253                           ;Dimmer_B1.c: 2217: } else {
 17254  0D0F  0008               	return
 17255  0D10                     l10631:	
 17256                           
 17257                           ;Dimmer_B1.c: 2218: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17258  0D10  3003               	movlw	3
 17259  0D11  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17260  0D12  1C03               	skipc
 17261  0D13  2D1A               	goto	l1075
 17262                           
 17263                           ;Dimmer_B1.c: 2219: DimmerIntr2.DimmingValue--;
 17264  0D14  3001               	movlw	1
 17265  0D15  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17266                           
 17267                           ;Dimmer_B1.c: 2220: DimmerIntr_ValueCalculate(2);
 17268  0D16  3002               	movlw	2
 17269  0D17  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17270                           
 17271                           ;Dimmer_B1.c: 2221: } else {
 17272  0D19  0008               	return
 17273  0D1A                     l1075:	
 17274                           
 17275                           ;Dimmer_B1.c: 2222: DimmerIntr2.Dimming_Status = 0;
 17276  0D1A  12B0               	bcf	_DimmerIntr2^(0+128),5
 17277                           
 17278                           ;Dimmer_B1.c: 2223: }
 17279                           ;Dimmer_B1.c: 2224: }
 17280                           ;Dimmer_B1.c: 2243: } else if (DimmerIntr2.Dimming_RF == 1) {
 17281  0D1B  0008               	return
 17282  0D1C                     l1070:	
 17283  0D1C  1F30               	btfss	_DimmerIntr2^(0+128),6
 17284  0D1D  0008               	return
 17285                           
 17286                           ;Dimmer_B1.c: 2245: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17287  0D1E  0836               	movf	(_DimmerIntr2^(0+128)+6),w
 17288  0D1F  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17289  0D20  1803               	skipnc
 17290  0D21  2D2C               	goto	l10643
 17291                           
 17292                           ;Dimmer_B1.c: 2246: DimmerIntr2.DimmingValue++;
 17293  0D22  3001               	movlw	1
 17294  0D23  0020               	movlb	0	; select bank0
 17295  0D24  00A5               	movwf	??_DimmerLights_DimmingFunction
 17296  0D25  0825               	movf	??_DimmerLights_DimmingFunction,w
 17297  0D26  0021               	movlb	1	; select bank1
 17298  0D27  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17299                           
 17300                           ;Dimmer_B1.c: 2247: DimmerIntr_ValueCalculate(2);
 17301  0D28  3002               	movlw	2
 17302  0D29  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17303                           
 17304                           ;Dimmer_B1.c: 2248: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17305  0D2B  0008               	return
 17306  0D2C                     l10643:	
 17307  0D2C  0021               	movlb	1	; select bank1
 17308  0D2D  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17309  0D2E  0236               	subwf	(_DimmerIntr2^(0+128)+6),w
 17310  0D2F  1803               	skipnc
 17311  0D30  2D37               	goto	l1081
 17312                           
 17313                           ;Dimmer_B1.c: 2249: DimmerIntr2.DimmingValue--;
 17314  0D31  3001               	movlw	1
 17315  0D32  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17316                           
 17317                           ;Dimmer_B1.c: 2250: DimmerIntr_ValueCalculate(2);
 17318  0D33  3002               	movlw	2
 17319  0D34  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17320                           
 17321                           ;Dimmer_B1.c: 2251: } else {
 17322  0D36  0008               	return
 17323  0D37                     l1081:	
 17324                           
 17325                           ;Dimmer_B1.c: 2252: DimmerIntr2.Dimming_RF = 0;
 17326  0D37  1330               	bcf	_DimmerIntr2^(0+128),6
 17327  0D38  0008               	return
 17328  0D39                     __end_of_DimmerLights_DimmingFunction:	
 17329                           
 17330                           	psect	text118
 17331  143B                     __ptext118:	
 17332 ;; *************** function _DimmerIntr_ValueCalculate *****************
 17333 ;; Defined at:
 17334 ;;		line 2058 in file "../src/Dimmer_B1.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;  lights          1    wreg     unsigned char 
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;  lights          1    4[BANK0 ] unsigned char 
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg, status,2, status,0, pclath, cstack
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;Total ram usage:        3 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    5
 17355 ;; This function calls:
 17356 ;;		_Division
 17357 ;; This function is called by:
 17358 ;;		_setDimmerLights_OnOff
 17359 ;;		_DimmerLights_DimmingFunction
 17360 ;; This function uses a non-reentrant model
 17361 ;;
 17362                           
 17363                           
 17364                           ;psect for function _DimmerIntr_ValueCalculate
 17365  143B                     _DimmerIntr_ValueCalculate:	
 17366                           
 17367                           ;incstack = 0
 17368                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 17369                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 17370  143B  0020               	movlb	0	; select bank0
 17371  143C  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 17372                           
 17373                           ;Dimmer_B1.c: 2060: if (lights == 1) {
 17374  143D  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17375  143E  3A01               	xorlw	1
 17376  143F  1D03               	skipz
 17377  1440  2C67               	goto	l10101
 17378                           
 17379                           ;Dimmer_B1.c: 2071: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 17380  1441  3002               	movlw	2
 17381  1442  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17382  1443  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17383  1444  00F7               	movwf	Division@num
 17384  1445  0021               	movlb	1	; select bank1
 17385  1446  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17386  1447  3198  20FC  3194   	fcall	_Division
 17387  144A  0020               	movlb	0	; select bank0
 17388  144B  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17389  144C  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17390  144D  0021               	movlb	1	; select bank1
 17391  144E  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17392                           
 17393                           ;Dimmer_B1.c: 2072: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 17394  144F  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 17395  1450  3AFF               	xorlw	255
 17396  1451  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17397  1452  3E37               	addlw	55
 17398  1453  0020               	movlb	0	; select bank0
 17399  1454  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17400  1455  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17401  1456  0021               	movlb	1	; select bank1
 17402  1457  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17403                           
 17404                           ;Dimmer_B1.c: 2073: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 17405  1458  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17406  1459  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17407  145A  0020               	movlb	0	; select bank0
 17408  145B  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17409  145C  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17410  145D  0021               	movlb	1	; select bank1
 17411  145E  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17412                           
 17413                           ;Dimmer_B1.c: 2074: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 17414  145F  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17415  1460  3E05               	addlw	5
 17416  1461  0020               	movlb	0	; select bank0
 17417  1462  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17418  1463  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17419  1464  0021               	movlb	1	; select bank1
 17420  1465  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17421                           
 17422                           ;Dimmer_B1.c: 2076: DimmerIntr1.Calculate = 1;
 17423  1466  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17424  1467                     l10101:	
 17425                           
 17426                           ;Dimmer_B1.c: 2078: }
 17427                           ;Dimmer_B1.c: 2083: if (lights == 2) {
 17428  1467  0020               	movlb	0	; select bank0
 17429  1468  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17430  1469  3A02               	xorlw	2
 17431  146A  1D03               	skipz
 17432  146B  0008               	return
 17433                           
 17434                           ;Dimmer_B1.c: 2094: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 17435  146C  3002               	movlw	2
 17436  146D  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17437  146E  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17438  146F  00F7               	movwf	Division@num
 17439  1470  0021               	movlb	1	; select bank1
 17440  1471  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17441  1472  3198  20FC         	fcall	_Division
 17442  1474  0020               	movlb	0	; select bank0
 17443  1475  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17444  1476  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17445  1477  0021               	movlb	1	; select bank1
 17446  1478  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17447                           
 17448                           ;Dimmer_B1.c: 2095: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 17449  1479  0335               	decf	(_DimmerIntr2^(0+128)+5),w
 17450  147A  3AFF               	xorlw	255
 17451  147B  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17452  147C  3E37               	addlw	55
 17453  147D  0020               	movlb	0	; select bank0
 17454  147E  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17455  147F  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17456  1480  0021               	movlb	1	; select bank1
 17457  1481  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17458                           
 17459                           ;Dimmer_B1.c: 2096: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 17460  1482  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17461  1483  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17462  1484  0020               	movlb	0	; select bank0
 17463  1485  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17464  1486  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17465  1487  0021               	movlb	1	; select bank1
 17466  1488  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17467                           
 17468                           ;Dimmer_B1.c: 2097: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 17469  1489  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17470  148A  3E05               	addlw	5
 17471  148B  0020               	movlb	0	; select bank0
 17472  148C  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17473  148D  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17474  148E  0021               	movlb	1	; select bank1
 17475  148F  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17476                           
 17477                           ;Dimmer_B1.c: 2099: DimmerIntr2.Calculate = 1;
 17478  1490  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17479  1491  0008               	return
 17480  1492                     __end_of_DimmerIntr_ValueCalculate:	
 17481                           
 17482                           	psect	text119
 17483  1860                     __ptext119:	
 17484 ;; *************** function _DimmerLights_Initialization *****************
 17485 ;; Defined at:
 17486 ;;		line 703 in file "../src/Dimmer_B1.c"
 17487 ;; Parameters:    Size  Location     Type
 17488 ;;		None
 17489 ;; Auto vars:     Size  Location     Type
 17490 ;;		None
 17491 ;; Return value:  Size  Location     Type
 17492 ;;		None               void
 17493 ;; Registers used:
 17494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17495 ;; Tracked objects:
 17496 ;;		On entry : 0/0
 17497 ;;		On exit  : 0/0
 17498 ;;		Unchanged: 0/0
 17499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17504 ;;Total ram usage:        0 bytes
 17505 ;; Hardware stack levels used:    1
 17506 ;; Hardware stack levels required when called:    7
 17507 ;; This function calls:
 17508 ;;		_DimmerIntr_Initialization
 17509 ;;		_setDimmerLights_Initialization
 17510 ;; This function is called by:
 17511 ;;		_main
 17512 ;; This function uses a non-reentrant model
 17513 ;;
 17514                           
 17515                           
 17516                           ;psect for function _DimmerLights_Initialization
 17517  1860                     _DimmerLights_Initialization:	
 17518                           
 17519                           ;Dimmer_B1.c: 705: setDimmerLights_Initialization(1);
 17520                           
 17521                           ;incstack = 0
 17522                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17523  1860  3001               	movlw	1
 17524  1861  31A7  27B2  3198   	fcall	_setDimmerLights_Initialization
 17525                           
 17526                           ;Dimmer_B1.c: 709: setDimmerLights_Initialization(2);
 17527  1864  3002               	movlw	2
 17528  1865  31A7  27B2  3198   	fcall	_setDimmerLights_Initialization
 17529                           
 17530                           ;Dimmer_B1.c: 715: DimmerIntr_Initialization();
 17531  1868  318D  25E2         	fcall	_DimmerIntr_Initialization
 17532  186A  0008               	return
 17533  186B                     __end_of_DimmerLights_Initialization:	
 17534                           
 17535                           	psect	text120
 17536  27B2                     __ptext120:	
 17537 ;; *************** function _setDimmerLights_Initialization *****************
 17538 ;; Defined at:
 17539 ;;		line 719 in file "../src/Dimmer_B1.c"
 17540 ;; Parameters:    Size  Location     Type
 17541 ;;  lights          1    wreg     unsigned char 
 17542 ;; Auto vars:     Size  Location     Type
 17543 ;;  lights          1    0[COMMON] unsigned char 
 17544 ;; Return value:  Size  Location     Type
 17545 ;;		None               void
 17546 ;; Registers used:
 17547 ;;		wreg
 17548 ;; Tracked objects:
 17549 ;;		On entry : 0/0
 17550 ;;		On exit  : 0/0
 17551 ;;		Unchanged: 0/0
 17552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;Total ram usage:        0 bytes
 17558 ;; Hardware stack levels used:    1
 17559 ;; Hardware stack levels required when called:    3
 17560 ;; This function calls:
 17561 ;;		Nothing
 17562 ;; This function is called by:
 17563 ;;		_DimmerLights_Initialization
 17564 ;; This function uses a non-reentrant model
 17565 ;;
 17566                           
 17567                           
 17568                           ;psect for function _setDimmerLights_Initialization
 17569  27B2                     _setDimmerLights_Initialization:	
 17570                           
 17571                           ;incstack = 0
 17572                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17573  27B2  0008               	return
 17574  27B3                     __end_of_setDimmerLights_Initialization:	
 17575                           
 17576                           	psect	text121
 17577  0DE2                     __ptext121:	
 17578 ;; *************** function _DimmerIntr_Initialization *****************
 17579 ;; Defined at:
 17580 ;;		line 7 in file "../src/Dimmer_B1.c"
 17581 ;; Parameters:    Size  Location     Type
 17582 ;;		None
 17583 ;; Auto vars:     Size  Location     Type
 17584 ;;		None
 17585 ;; Return value:  Size  Location     Type
 17586 ;;		None               void
 17587 ;; Registers used:
 17588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17589 ;; Tracked objects:
 17590 ;;		On entry : 0/0
 17591 ;;		On exit  : 0/0
 17592 ;;		Unchanged: 0/0
 17593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17598 ;;Total ram usage:        2 bytes
 17599 ;; Hardware stack levels used:    1
 17600 ;; Hardware stack levels required when called:    6
 17601 ;; This function calls:
 17602 ;;		_Division
 17603 ;;		_getDimmerLights_PercentToValue
 17604 ;;		_getDimmerLights_ValueToPercent
 17605 ;;		_setMemory_Modify
 17606 ;; This function is called by:
 17607 ;;		_DimmerLights_Initialization
 17608 ;; This function uses a non-reentrant model
 17609 ;;
 17610                           
 17611                           
 17612                           ;psect for function _DimmerIntr_Initialization
 17613  0DE2                     _DimmerIntr_Initialization:	
 17614                           
 17615                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17616                           
 17617                           ;incstack = 0
 17618                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17619  0DE2  3003               	movlw	3
 17620  0DE3  0020               	movlb	0	; select bank0
 17621  0DE4  00DA               	movwf	??_DimmerIntr_Initialization
 17622  0DE5  085A               	movf	??_DimmerIntr_Initialization,w
 17623  0DE6  0021               	movlb	1	; select bank1
 17624  0DE7  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 17625                           
 17626                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17627  0DE8  302A               	movlw	42
 17628  0DE9  0020               	movlb	0	; select bank0
 17629  0DEA  00DA               	movwf	??_DimmerIntr_Initialization
 17630  0DEB  085A               	movf	??_DimmerIntr_Initialization,w
 17631  0DEC  0021               	movlb	1	; select bank1
 17632  0DED  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 17633                           
 17634                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17635  0DEE  3002               	movlw	2
 17636  0DEF  0020               	movlb	0	; select bank0
 17637  0DF0  00DA               	movwf	??_DimmerIntr_Initialization
 17638  0DF1  085A               	movf	??_DimmerIntr_Initialization,w
 17639  0DF2  0021               	movlb	1	; select bank1
 17640  0DF3  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 17641                           
 17642                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17643  0DF4  10A0               	bcf	_DimmerIntr1^(0+128),1
 17644                           
 17645                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17646  0DF5  302A               	movlw	42
 17647  0DF6  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17648  0DF9  0020               	movlb	0	; select bank0
 17649  0DFA  00DA               	movwf	??_DimmerIntr_Initialization
 17650  0DFB  087B               	movf	_product,w
 17651  0DFC  3E15               	addlw	21
 17652  0DFD  0086               	movwf	6
 17653  0DFE  3002               	movlw	2	; select bank4/5
 17654  0DFF  0087               	movwf	7
 17655  0E00  085A               	movf	??_DimmerIntr_Initialization,w
 17656  0E01  0081               	movwf	1
 17657                           
 17658                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17659  0E02  087B               	movf	_product,w
 17660  0E03  3E15               	addlw	21
 17661  0E04  0086               	movwf	6
 17662  0E05  3002               	movlw	2	; select bank4/5
 17663  0E06  0087               	movwf	7
 17664  0E07  0801               	movf	1,w
 17665  0E08  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17666  0E0B  0020               	movlb	0	; select bank0
 17667  0E0C  00DA               	movwf	??_DimmerIntr_Initialization
 17668  0E0D  085A               	movf	??_DimmerIntr_Initialization,w
 17669  0E0E  0021               	movlb	1	; select bank1
 17670  0E0F  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 17671                           
 17672                           ;Dimmer_B1.c: 38: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17673  0E10  3002               	movlw	2
 17674  0E11  0020               	movlb	0	; select bank0
 17675  0E12  00DA               	movwf	??_DimmerIntr_Initialization
 17676  0E13  085A               	movf	??_DimmerIntr_Initialization,w
 17677  0E14  00F7               	movwf	Division@num
 17678  0E15  302A               	movlw	42
 17679  0E16  3198  20FC  318D   	fcall	_Division
 17680  0E19  0020               	movlb	0	; select bank0
 17681  0E1A  00DB               	movwf	??_DimmerIntr_Initialization+1
 17682  0E1B  085B               	movf	??_DimmerIntr_Initialization+1,w
 17683  0E1C  0021               	movlb	1	; select bank1
 17684  0E1D  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17685                           
 17686                           ;Dimmer_B1.c: 39: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17687  0E1E  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17688  0E1F  3E0D               	addlw	13
 17689  0E20  0020               	movlb	0	; select bank0
 17690  0E21  00DA               	movwf	??_DimmerIntr_Initialization
 17691  0E22  085A               	movf	??_DimmerIntr_Initialization,w
 17692  0E23  0021               	movlb	1	; select bank1
 17693  0E24  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17694                           
 17695                           ;Dimmer_B1.c: 40: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17696  0E25  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17697  0E26  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17698  0E27  0020               	movlb	0	; select bank0
 17699  0E28  00DA               	movwf	??_DimmerIntr_Initialization
 17700  0E29  085A               	movf	??_DimmerIntr_Initialization,w
 17701  0E2A  0021               	movlb	1	; select bank1
 17702  0E2B  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17703                           
 17704                           ;Dimmer_B1.c: 41: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17705  0E2C  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17706  0E2D  3E01               	addlw	1
 17707  0E2E  0020               	movlb	0	; select bank0
 17708  0E2F  00DA               	movwf	??_DimmerIntr_Initialization
 17709  0E30  085A               	movf	??_DimmerIntr_Initialization,w
 17710  0E31  0021               	movlb	1	; select bank1
 17711  0E32  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17712                           
 17713                           ;Dimmer_B1.c: 42: DimmerIntr1.Calculate = 1;
 17714  0E33  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17715                           
 17716                           ;Dimmer_B1.c: 51: DimmerIntr2.TuneTimeValue = 3;
 17717  0E34  3003               	movlw	3
 17718  0E35  0020               	movlb	0	; select bank0
 17719  0E36  00DA               	movwf	??_DimmerIntr_Initialization
 17720  0E37  085A               	movf	??_DimmerIntr_Initialization,w
 17721  0E38  0021               	movlb	1	; select bank1
 17722  0E39  00B4               	movwf	(_DimmerIntr2^(0+128)+4)
 17723                           
 17724                           ;Dimmer_B1.c: 52: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17725  0E3A  302A               	movlw	42
 17726  0E3B  0020               	movlb	0	; select bank0
 17727  0E3C  00DA               	movwf	??_DimmerIntr_Initialization
 17728  0E3D  085A               	movf	??_DimmerIntr_Initialization,w
 17729  0E3E  0021               	movlb	1	; select bank1
 17730  0E3F  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 17731                           
 17732                           ;Dimmer_B1.c: 53: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17733  0E40  3002               	movlw	2
 17734  0E41  0020               	movlb	0	; select bank0
 17735  0E42  00DA               	movwf	??_DimmerIntr_Initialization
 17736  0E43  085A               	movf	??_DimmerIntr_Initialization,w
 17737  0E44  0021               	movlb	1	; select bank1
 17738  0E45  00B7               	movwf	(_DimmerIntr2^(0+128)+7)
 17739                           
 17740                           ;Dimmer_B1.c: 54: DimmerIntr2.Tune = 0;
 17741  0E46  10B0               	bcf	_DimmerIntr2^(0+128),1
 17742                           
 17743                           ;Dimmer_B1.c: 59: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17744  0E47  302A               	movlw	42
 17745  0E48  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17746  0E4B  0020               	movlb	0	; select bank0
 17747  0E4C  00DA               	movwf	??_DimmerIntr_Initialization
 17748  0E4D  087B               	movf	_product,w
 17749  0E4E  3E16               	addlw	22
 17750  0E4F  0086               	movwf	6
 17751  0E50  3002               	movlw	2	; select bank4/5
 17752  0E51  0087               	movwf	7
 17753  0E52  085A               	movf	??_DimmerIntr_Initialization,w
 17754  0E53  0081               	movwf	1
 17755                           
 17756                           ;Dimmer_B1.c: 62: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17757  0E54  087B               	movf	_product,w
 17758  0E55  3E16               	addlw	22
 17759  0E56  0086               	movwf	6
 17760  0E57  3002               	movlw	2	; select bank4/5
 17761  0E58  0087               	movwf	7
 17762  0E59  0801               	movf	1,w
 17763  0E5A  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17764  0E5D  0020               	movlb	0	; select bank0
 17765  0E5E  00DA               	movwf	??_DimmerIntr_Initialization
 17766  0E5F  085A               	movf	??_DimmerIntr_Initialization,w
 17767  0E60  0021               	movlb	1	; select bank1
 17768  0E61  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 17769                           
 17770                           ;Dimmer_B1.c: 77: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17771  0E62  3002               	movlw	2
 17772  0E63  0020               	movlb	0	; select bank0
 17773  0E64  00DA               	movwf	??_DimmerIntr_Initialization
 17774  0E65  085A               	movf	??_DimmerIntr_Initialization,w
 17775  0E66  00F7               	movwf	Division@num
 17776  0E67  302A               	movlw	42
 17777  0E68  3198  20FC  318D   	fcall	_Division
 17778  0E6B  0020               	movlb	0	; select bank0
 17779  0E6C  00DB               	movwf	??_DimmerIntr_Initialization+1
 17780  0E6D  085B               	movf	??_DimmerIntr_Initialization+1,w
 17781  0E6E  0021               	movlb	1	; select bank1
 17782  0E6F  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17783                           
 17784                           ;Dimmer_B1.c: 78: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17785  0E70  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 17786  0E71  3E0D               	addlw	13
 17787  0E72  0020               	movlb	0	; select bank0
 17788  0E73  00DA               	movwf	??_DimmerIntr_Initialization
 17789  0E74  085A               	movf	??_DimmerIntr_Initialization,w
 17790  0E75  0021               	movlb	1	; select bank1
 17791  0E76  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17792                           
 17793                           ;Dimmer_B1.c: 79: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17794  0E77  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17795  0E78  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17796  0E79  0020               	movlb	0	; select bank0
 17797  0E7A  00DA               	movwf	??_DimmerIntr_Initialization
 17798  0E7B  085A               	movf	??_DimmerIntr_Initialization,w
 17799  0E7C  0021               	movlb	1	; select bank1
 17800  0E7D  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17801                           
 17802                           ;Dimmer_B1.c: 80: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17803  0E7E  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17804  0E7F  3E01               	addlw	1
 17805  0E80  0020               	movlb	0	; select bank0
 17806  0E81  00DA               	movwf	??_DimmerIntr_Initialization
 17807  0E82  085A               	movf	??_DimmerIntr_Initialization,w
 17808  0E83  0021               	movlb	1	; select bank1
 17809  0E84  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17810                           
 17811                           ;Dimmer_B1.c: 81: DimmerIntr2.Calculate = 1;
 17812  0E85  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17813                           
 17814                           ;Dimmer_B1.c: 111: if (myMain.InitDimmer == 1) {
 17815  0E86  1E59               	btfss	(_myMain^(0+128)+10),4
 17816  0E87  0008               	return
 17817                           
 17818                           ;Dimmer_B1.c: 112: myMain.InitDimmer = 0;
 17819  0E88  1259               	bcf	(_myMain^(0+128)+10),4
 17820                           
 17821                           ;Dimmer_B1.c: 113: myMain.SaveDimmer = 1;
 17822  0E89  16D9               	bsf	(_myMain^(0+128)+10),5
 17823                           
 17824                           ;Dimmer_B1.c: 114: setMemory_Modify(1);
 17825  0E8A  3001               	movlw	1
 17826  0E8B  3199  2138         	fcall	_setMemory_Modify
 17827  0E8D  0008               	return
 17828  0E8E                     __end_of_DimmerIntr_Initialization:	
 17829                           
 17830                           	psect	text122
 17831  1938                     __ptext122:	
 17832 ;; *************** function _setMemory_Modify *****************
 17833 ;; Defined at:
 17834 ;;		line 1088 in file "../src/MCU_B1.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  command         1    wreg     unsigned char 
 17837 ;; Auto vars:     Size  Location     Type
 17838 ;;  command         1    3[COMMON] unsigned char 
 17839 ;; Return value:  Size  Location     Type
 17840 ;;		None               void
 17841 ;; Registers used:
 17842 ;;		wreg, status,2, status,0
 17843 ;; Tracked objects:
 17844 ;;		On entry : 0/0
 17845 ;;		On exit  : 0/0
 17846 ;;		Unchanged: 0/0
 17847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;Total ram usage:        2 bytes
 17853 ;; Hardware stack levels used:    1
 17854 ;; Hardware stack levels required when called:    3
 17855 ;; This function calls:
 17856 ;;		Nothing
 17857 ;; This function is called by:
 17858 ;;		_DimmerIntr_Initialization
 17859 ;;		_DimmerLights_AssignationDimming
 17860 ;;		_setDimmerLights_Dimming
 17861 ;;		_setLog_Code
 17862 ;;		_setRFSW_AdjControl
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function _setMemory_Modify
 17868  1938                     _setMemory_Modify:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 17872                           ;setMemory_Modify@command stored from wreg
 17873  1938  00F3               	movwf	setMemory_Modify@command
 17874                           
 17875                           ;MCU_B1.c: 1089: Memory.Modify = command == 1 ? 1 : 0;
 17876  1939  0873               	movf	setMemory_Modify@command,w
 17877  193A  3A01               	xorlw	1
 17878  193B  3000               	movlw	0
 17879  193C  1903               	skipnz
 17880  193D  3001               	movlw	1
 17881  193E  00F2               	movwf	??_setMemory_Modify
 17882  193F  0024               	movlb	4	; select bank4
 17883  1940  0854               	movf	(_Memory^(0+512)+36),w
 17884  1941  0672               	xorwf	??_setMemory_Modify,w
 17885  1942  39FE               	andlw	-2
 17886  1943  0672               	xorwf	??_setMemory_Modify,w
 17887  1944  00D4               	movwf	(_Memory^(0+512)+36)
 17888                           
 17889                           ;MCU_B1.c: 1090: Memory.Time = 0;
 17890  1945  01D2               	clrf	(_Memory^(0+512)+34)
 17891  1946  01D3               	clrf	((_Memory+1)^(0+512)+34)
 17892  1947  0008               	return
 17893  1948                     __end_of_setMemory_Modify:	
 17894                           
 17895                           	psect	text123
 17896  1736                     __ptext123:	
 17897 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17898 ;; Defined at:
 17899 ;;		line 1315 in file "../src/Dimmer_B1.c"
 17900 ;; Parameters:    Size  Location     Type
 17901 ;;  value           1    wreg     unsigned char 
 17902 ;; Auto vars:     Size  Location     Type
 17903 ;;  value           1   54[BANK0 ] unsigned char 
 17904 ;;  i               3   55[BANK0 ] float 
 17905 ;; Return value:  Size  Location     Type
 17906 ;;                  1    wreg      unsigned char 
 17907 ;; Registers used:
 17908 ;;		wreg, status,2, status,0, pclath, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;Total ram usage:        6 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    5
 17921 ;; This function calls:
 17922 ;;		___awtoft
 17923 ;;		___ftadd
 17924 ;;		___ftdiv
 17925 ;;		___ftneg
 17926 ;;		___fttol
 17927 ;; This function is called by:
 17928 ;;		_DimmerIntr_Initialization
 17929 ;;		_setDimmerLights_Dimming
 17930 ;; This function uses a non-reentrant model
 17931 ;;
 17932                           
 17933                           
 17934                           ;psect for function _getDimmerLights_ValueToPercent
 17935  1736                     _getDimmerLights_ValueToPercent:	
 17936                           
 17937                           ;incstack = 0
 17938                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17939                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17940  1736  0020               	movlb	0	; select bank0
 17941  1737  00D6               	movwf	getDimmerLights_ValueToPercent@value
 17942                           
 17943                           ;Dimmer_B1.c: 1323: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17944  1738  3000               	movlw	0
 17945  1739  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17946  173A  3020               	movlw	32
 17947  173B  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17948  173C  3042               	movlw	66
 17949  173D  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17950                           
 17951                           ;Dimmer_B1.c: 1324: i /= 100;
 17952  173E  3000               	movlw	0
 17953  173F  00A6               	movwf	___ftdiv@f2
 17954  1740  30C8               	movlw	200
 17955  1741  00A7               	movwf	___ftdiv@f2+1
 17956  1742  3042               	movlw	66
 17957  1743  00A8               	movwf	___ftdiv@f2+2
 17958  1744  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17959  1745  00A9               	movwf	___ftdiv@f1
 17960  1746  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17961  1747  00AA               	movwf	___ftdiv@f1+1
 17962  1748  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17963  1749  00AB               	movwf	___ftdiv@f1+2
 17964  174A  318D  2539  3197   	fcall	___ftdiv
 17965  174D  0020               	movlb	0	; select bank0
 17966  174E  0826               	movf	?___ftdiv,w
 17967  174F  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17968  1750  0827               	movf	?___ftdiv+1,w
 17969  1751  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17970  1752  0828               	movf	?___ftdiv+2,w
 17971  1753  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17972                           
 17973                           ;Dimmer_B1.c: 1326: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 17974  1754  0856               	movf	getDimmerLights_ValueToPercent@value,w
 17975  1755  00D4               	movwf	??_getDimmerLights_ValueToPercent
 17976  1756  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 17977  1757  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 17978  1758  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 17979  1759  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 17980  175A  1903               	skipnz
 17981  175B  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 17982  175C  0854               	movf	??_getDimmerLights_ValueToPercent,w
 17983  175D  3E2A               	addlw	42
 17984  175E  00A0               	movwf	___awtoft@c
 17985  175F  3000               	movlw	0
 17986  1760  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17987  1761  00A1               	movwf	___awtoft@c+1
 17988  1762  319C  24E8  3197   	fcall	___awtoft
 17989  1765  0020               	movlb	0	; select bank0
 17990  1766  0820               	movf	?___awtoft,w
 17991  1767  00A9               	movwf	___ftdiv@f1
 17992  1768  0821               	movf	?___awtoft+1,w
 17993  1769  00AA               	movwf	___ftdiv@f1+1
 17994  176A  0822               	movf	?___awtoft+2,w
 17995  176B  00AB               	movwf	___ftdiv@f1+2
 17996  176C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17997  176D  00A6               	movwf	___ftdiv@f2
 17998  176E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17999  176F  00A7               	movwf	___ftdiv@f2+1
 18000  1770  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 18001  1771  00A8               	movwf	___ftdiv@f2+2
 18002  1772  318D  2539  3197   	fcall	___ftdiv
 18003  1775  0020               	movlb	0	; select bank0
 18004  1776  0826               	movf	?___ftdiv,w
 18005  1777  00B6               	movwf	___ftneg@f1
 18006  1778  0827               	movf	?___ftdiv+1,w
 18007  1779  00B7               	movwf	___ftneg@f1+1
 18008  177A  0828               	movf	?___ftdiv+2,w
 18009  177B  00B8               	movwf	___ftneg@f1+2
 18010  177C  3198  2039  3197   	fcall	___ftneg
 18011  177F  0020               	movlb	0	; select bank0
 18012  1780  0836               	movf	?___ftneg,w
 18013  1781  00BC               	movwf	___ftadd@f2
 18014  1782  0837               	movf	?___ftneg+1,w
 18015  1783  00BD               	movwf	___ftadd@f2+1
 18016  1784  0838               	movf	?___ftneg+2,w
 18017  1785  00BE               	movwf	___ftadd@f2+2
 18018  1786  3000               	movlw	0
 18019  1787  00B9               	movwf	___ftadd@f1
 18020  1788  30C8               	movlw	200
 18021  1789  00BA               	movwf	___ftadd@f1+1
 18022  178A  3042               	movlw	66
 18023  178B  00BB               	movwf	___ftadd@f1+2
 18024  178C  3183  2364  3197   	fcall	___ftadd
 18025  178F  0020               	movlb	0	; select bank0
 18026  1790  0839               	movf	?___ftadd,w
 18027  1791  00C6               	movwf	___fttol@f1
 18028  1792  083A               	movf	?___ftadd+1,w
 18029  1793  00C7               	movwf	___fttol@f1+1
 18030  1794  083B               	movf	?___ftadd+2,w
 18031  1795  00C8               	movwf	___fttol@f1+2
 18032  1796  318A  225C         	fcall	___fttol
 18033  1798  0020               	movlb	0	; select bank0
 18034  1799  0846               	movf	?___fttol,w
 18035  179A  0008               	return
 18036  179B                     __end_of_getDimmerLights_ValueToPercent:	
 18037                           
 18038                           	psect	text124
 18039  16D1                     __ptext124:	
 18040 ;; *************** function _getDimmerLights_PercentToValue *****************
 18041 ;; Defined at:
 18042 ;;		line 1299 in file "../src/Dimmer_B1.c"
 18043 ;; Parameters:    Size  Location     Type
 18044 ;;  value           1    wreg     unsigned char 
 18045 ;; Auto vars:     Size  Location     Type
 18046 ;;  value           1   54[BANK0 ] unsigned char 
 18047 ;;  i               3   55[BANK0 ] float 
 18048 ;; Return value:  Size  Location     Type
 18049 ;;                  1    wreg      unsigned char 
 18050 ;; Registers used:
 18051 ;;		wreg, status,2, status,0, pclath, cstack
 18052 ;; Tracked objects:
 18053 ;;		On entry : 0/0
 18054 ;;		On exit  : 0/0
 18055 ;;		Unchanged: 0/0
 18056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18061 ;;Total ram usage:        6 bytes
 18062 ;; Hardware stack levels used:    1
 18063 ;; Hardware stack levels required when called:    5
 18064 ;; This function calls:
 18065 ;;		___awtoft
 18066 ;;		___ftadd
 18067 ;;		___ftdiv
 18068 ;;		___ftmul
 18069 ;;		___ftneg
 18070 ;;		___fttol
 18071 ;; This function is called by:
 18072 ;;		_DimmerIntr_Initialization
 18073 ;;		_DimmerLights_AssignationDimming
 18074 ;;		_setDimmerLights_OnOff
 18075 ;;		_setRFSW_AdjControl
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function _getDimmerLights_PercentToValue
 18081  16D1                     _getDimmerLights_PercentToValue:	
 18082                           
 18083                           ;incstack = 0
 18084                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18085                           ;getDimmerLights_PercentToValue@value stored from wreg
 18086  16D1  0020               	movlb	0	; select bank0
 18087  16D2  00D6               	movwf	getDimmerLights_PercentToValue@value
 18088                           
 18089                           ;Dimmer_B1.c: 1307: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18090  16D3  3000               	movlw	0
 18091  16D4  00D7               	movwf	getDimmerLights_PercentToValue@i
 18092  16D5  3020               	movlw	32
 18093  16D6  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18094  16D7  3042               	movlw	66
 18095  16D8  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18096                           
 18097                           ;Dimmer_B1.c: 1308: i /= 100;
 18098  16D9  3000               	movlw	0
 18099  16DA  00A6               	movwf	___ftdiv@f2
 18100  16DB  30C8               	movlw	200
 18101  16DC  00A7               	movwf	___ftdiv@f2+1
 18102  16DD  3042               	movlw	66
 18103  16DE  00A8               	movwf	___ftdiv@f2+2
 18104  16DF  0857               	movf	getDimmerLights_PercentToValue@i,w
 18105  16E0  00A9               	movwf	___ftdiv@f1
 18106  16E1  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18107  16E2  00AA               	movwf	___ftdiv@f1+1
 18108  16E3  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18109  16E4  00AB               	movwf	___ftdiv@f1+2
 18110  16E5  318D  2539  3196   	fcall	___ftdiv
 18111  16E8  0020               	movlb	0	; select bank0
 18112  16E9  0826               	movf	?___ftdiv,w
 18113  16EA  00D7               	movwf	getDimmerLights_PercentToValue@i
 18114  16EB  0827               	movf	?___ftdiv+1,w
 18115  16EC  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18116  16ED  0828               	movf	?___ftdiv+2,w
 18117  16EE  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18118                           
 18119                           ;Dimmer_B1.c: 1310: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18120  16EF  0856               	movf	getDimmerLights_PercentToValue@value,w
 18121  16F0  00D4               	movwf	??_getDimmerLights_PercentToValue
 18122  16F1  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 18123  16F2  09D4               	comf	??_getDimmerLights_PercentToValue,f
 18124  16F3  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 18125  16F4  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 18126  16F5  1903               	skipnz
 18127  16F6  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 18128  16F7  0854               	movf	??_getDimmerLights_PercentToValue,w
 18129  16F8  3E64               	addlw	100
 18130  16F9  00A0               	movwf	___awtoft@c
 18131  16FA  3000               	movlw	0
 18132  16FB  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18133  16FC  00A1               	movwf	___awtoft@c+1
 18134  16FD  319C  24E8  3196   	fcall	___awtoft
 18135  1700  0020               	movlb	0	; select bank0
 18136  1701  0820               	movf	?___awtoft,w
 18137  1702  00A9               	movwf	___ftmul@f2
 18138  1703  0821               	movf	?___awtoft+1,w
 18139  1704  00AA               	movwf	___ftmul@f2+1
 18140  1705  0822               	movf	?___awtoft+2,w
 18141  1706  00AB               	movwf	___ftmul@f2+2
 18142  1707  0857               	movf	getDimmerLights_PercentToValue@i,w
 18143  1708  00A6               	movwf	___ftmul@f1
 18144  1709  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18145  170A  00A7               	movwf	___ftmul@f1+1
 18146  170B  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18147  170C  00A8               	movwf	___ftmul@f1+2
 18148  170D  318E  268E  3196   	fcall	___ftmul
 18149  1710  0020               	movlb	0	; select bank0
 18150  1711  0826               	movf	?___ftmul,w
 18151  1712  00B6               	movwf	___ftneg@f1
 18152  1713  0827               	movf	?___ftmul+1,w
 18153  1714  00B7               	movwf	___ftneg@f1+1
 18154  1715  0828               	movf	?___ftmul+2,w
 18155  1716  00B8               	movwf	___ftneg@f1+2
 18156  1717  3198  2039  3196   	fcall	___ftneg
 18157  171A  0020               	movlb	0	; select bank0
 18158  171B  0836               	movf	?___ftneg,w
 18159  171C  00BC               	movwf	___ftadd@f2
 18160  171D  0837               	movf	?___ftneg+1,w
 18161  171E  00BD               	movwf	___ftadd@f2+1
 18162  171F  0838               	movf	?___ftneg+2,w
 18163  1720  00BE               	movwf	___ftadd@f2+2
 18164  1721  3000               	movlw	0
 18165  1722  00B9               	movwf	___ftadd@f1
 18166  1723  3028               	movlw	40
 18167  1724  00BA               	movwf	___ftadd@f1+1
 18168  1725  3042               	movlw	66
 18169  1726  00BB               	movwf	___ftadd@f1+2
 18170  1727  3183  2364  3196   	fcall	___ftadd
 18171  172A  0020               	movlb	0	; select bank0
 18172  172B  0839               	movf	?___ftadd,w
 18173  172C  00C6               	movwf	___fttol@f1
 18174  172D  083A               	movf	?___ftadd+1,w
 18175  172E  00C7               	movwf	___fttol@f1+1
 18176  172F  083B               	movf	?___ftadd+2,w
 18177  1730  00C8               	movwf	___fttol@f1+2
 18178  1731  318A  225C         	fcall	___fttol
 18179  1733  0020               	movlb	0	; select bank0
 18180  1734  0846               	movf	?___fttol,w
 18181  1735  0008               	return
 18182  1736                     __end_of_getDimmerLights_PercentToValue:	
 18183                           
 18184                           	psect	text125
 18185  0A5C                     __ptext125:	
 18186 ;; *************** function ___fttol *****************
 18187 ;; Defined at:
 18188 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18189 ;; Parameters:    Size  Location     Type
 18190 ;;  f1              3   38[BANK0 ] float 
 18191 ;; Auto vars:     Size  Location     Type
 18192 ;;  lval            4   47[BANK0 ] unsigned long 
 18193 ;;  exp1            1   51[BANK0 ] unsigned char 
 18194 ;;  sign1           1   46[BANK0 ] unsigned char 
 18195 ;; Return value:  Size  Location     Type
 18196 ;;                  4   38[BANK0 ] long 
 18197 ;; Registers used:
 18198 ;;		wreg, status,2, status,0
 18199 ;; Tracked objects:
 18200 ;;		On entry : 0/0
 18201 ;;		On exit  : 0/0
 18202 ;;		Unchanged: 0/0
 18203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;Total ram usage:       14 bytes
 18209 ;; Hardware stack levels used:    1
 18210 ;; Hardware stack levels required when called:    3
 18211 ;; This function calls:
 18212 ;;		Nothing
 18213 ;; This function is called by:
 18214 ;;		_getDimmerLights_PercentToValue
 18215 ;;		_getDimmerLights_ValueToPercent
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           
 18220                           ;psect for function ___fttol
 18221  0A5C                     ___fttol:	
 18222                           
 18223                           ;incstack = 0
 18224                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18225  0A5C  0020               	movlb	0	; select bank0
 18226  0A5D  0846               	movf	___fttol@f1,w
 18227  0A5E  00CA               	movwf	??___fttol
 18228  0A5F  0847               	movf	___fttol@f1+1,w
 18229  0A60  00CB               	movwf	??___fttol+1
 18230  0A61  0848               	movf	___fttol@f1+2,w
 18231  0A62  00CC               	movwf	??___fttol+2
 18232  0A63  1003               	clrc
 18233  0A64  0D4B               	rlf	??___fttol+1,w
 18234  0A65  0D4C               	rlf	??___fttol+2,w
 18235  0A66  00CD               	movwf	??___fttol+3
 18236  0A67  084D               	movf	??___fttol+3,w
 18237  0A68  00D3               	movwf	___fttol@exp1
 18238  0A69  08D3               	movf	___fttol@exp1,f
 18239  0A6A  1D03               	skipz
 18240  0A6B  2A75               	goto	l6957
 18241  0A6C  3000               	movlw	0
 18242  0A6D  00C9               	movwf	?___fttol+3
 18243  0A6E  3000               	movlw	0
 18244  0A6F  00C8               	movwf	?___fttol+2
 18245  0A70  3000               	movlw	0
 18246  0A71  00C7               	movwf	?___fttol+1
 18247  0A72  3000               	movlw	0
 18248  0A73  00C6               	movwf	?___fttol
 18249  0A74  0008               	return
 18250  0A75                     l6957:	
 18251  0A75  0846               	movf	___fttol@f1,w
 18252  0A76  00CA               	movwf	??___fttol
 18253  0A77  0847               	movf	___fttol@f1+1,w
 18254  0A78  00CB               	movwf	??___fttol+1
 18255  0A79  0848               	movf	___fttol@f1+2,w
 18256  0A7A  00CC               	movwf	??___fttol+2
 18257  0A7B  3017               	movlw	23
 18258  0A7C                     u6075:	
 18259  0A7C  36CC               	lsrf	??___fttol+2,f
 18260  0A7D  0CCB               	rrf	??___fttol+1,f
 18261  0A7E  0CCA               	rrf	??___fttol,f
 18262  0A7F  0B89               	decfsz	9,f
 18263  0A80  2A7C               	goto	u6075
 18264  0A81  084A               	movf	??___fttol,w
 18265  0A82  00CD               	movwf	??___fttol+3
 18266  0A83  084D               	movf	??___fttol+3,w
 18267  0A84  00CE               	movwf	___fttol@sign1
 18268  0A85  17C7               	bsf	___fttol@f1+1,7
 18269  0A86  30FF               	movlw	255
 18270  0A87  05C6               	andwf	___fttol@f1,f
 18271  0A88  30FF               	movlw	255
 18272  0A89  05C7               	andwf	___fttol@f1+1,f
 18273  0A8A  3000               	movlw	0
 18274  0A8B  05C8               	andwf	___fttol@f1+2,f
 18275  0A8C  0846               	movf	___fttol@f1,w
 18276  0A8D  00CF               	movwf	___fttol@lval
 18277  0A8E  0847               	movf	___fttol@f1+1,w
 18278  0A8F  00D0               	movwf	___fttol@lval+1
 18279  0A90  0848               	movf	___fttol@f1+2,w
 18280  0A91  00D1               	movwf	___fttol@lval+2
 18281  0A92  01D2               	clrf	___fttol@lval+3
 18282  0A93  308E               	movlw	142
 18283  0A94  02D3               	subwf	___fttol@exp1,f
 18284  0A95  1FD3               	btfss	___fttol@exp1,7
 18285  0A96  2AB3               	goto	l6977
 18286  0A97  0853               	movf	___fttol@exp1,w
 18287  0A98  3A80               	xorlw	128
 18288  0A99  3E8F               	addlw	143
 18289  0A9A  1803               	skipnc
 18290  0A9B  2AA5               	goto	l6975
 18291  0A9C  3000               	movlw	0
 18292  0A9D  00C9               	movwf	?___fttol+3
 18293  0A9E  3000               	movlw	0
 18294  0A9F  00C8               	movwf	?___fttol+2
 18295  0AA0  3000               	movlw	0
 18296  0AA1  00C7               	movwf	?___fttol+1
 18297  0AA2  3000               	movlw	0
 18298  0AA3  00C6               	movwf	?___fttol
 18299  0AA4  0008               	return
 18300  0AA5                     l6975:	
 18301  0AA5  3001               	movlw	1
 18302  0AA6                     u6105:	
 18303  0AA6  36D2               	lsrf	___fttol@lval+3,f
 18304  0AA7  0CD1               	rrf	___fttol@lval+2,f
 18305  0AA8  0CD0               	rrf	___fttol@lval+1,f
 18306  0AA9  0CCF               	rrf	___fttol@lval,f
 18307  0AAA  0B89               	decfsz	9,f
 18308  0AAB  2AA6               	goto	u6105
 18309  0AAC  3001               	movlw	1
 18310  0AAD  00CA               	movwf	??___fttol
 18311  0AAE  084A               	movf	??___fttol,w
 18312  0AAF  07D3               	addwf	___fttol@exp1,f
 18313  0AB0  1903               	btfsc	3,2
 18314  0AB1  2ACC               	goto	l6987
 18315  0AB2  2AA5               	goto	l6975
 18316  0AB3                     l6977:	
 18317  0AB3  3018               	movlw	24
 18318  0AB4  0253               	subwf	___fttol@exp1,w
 18319  0AB5  1C03               	skipc
 18320  0AB6  2AC9               	goto	l6985
 18321  0AB7  3000               	movlw	0
 18322  0AB8  00C9               	movwf	?___fttol+3
 18323  0AB9  3000               	movlw	0
 18324  0ABA  00C8               	movwf	?___fttol+2
 18325  0ABB  3000               	movlw	0
 18326  0ABC  00C7               	movwf	?___fttol+1
 18327  0ABD  3000               	movlw	0
 18328  0ABE  00C6               	movwf	?___fttol
 18329  0ABF  0008               	return
 18330  0AC0                     l6983:	
 18331  0AC0  3001               	movlw	1
 18332  0AC1                     u6135:	
 18333  0AC1  35CF               	lslf	___fttol@lval,f
 18334  0AC2  0DD0               	rlf	___fttol@lval+1,f
 18335  0AC3  0DD1               	rlf	___fttol@lval+2,f
 18336  0AC4  0DD2               	rlf	___fttol@lval+3,f
 18337  0AC5  0B89               	decfsz	9,f
 18338  0AC6  2AC1               	goto	u6135
 18339  0AC7  3001               	movlw	1
 18340  0AC8  02D3               	subwf	___fttol@exp1,f
 18341  0AC9                     l6985:	
 18342  0AC9  08D3               	movf	___fttol@exp1,f
 18343  0ACA  1D03               	skipz
 18344  0ACB  2AC0               	goto	l6983
 18345  0ACC                     l6987:	
 18346  0ACC  084E               	movf	___fttol@sign1,w
 18347  0ACD  1903               	btfsc	3,2
 18348  0ACE  2ADA               	goto	l6991
 18349  0ACF  09CF               	comf	___fttol@lval,f
 18350  0AD0  09D0               	comf	___fttol@lval+1,f
 18351  0AD1  09D1               	comf	___fttol@lval+2,f
 18352  0AD2  09D2               	comf	___fttol@lval+3,f
 18353  0AD3  0ACF               	incf	___fttol@lval,f
 18354  0AD4  1903               	skipnz
 18355  0AD5  0AD0               	incf	___fttol@lval+1,f
 18356  0AD6  1903               	skipnz
 18357  0AD7  0AD1               	incf	___fttol@lval+2,f
 18358  0AD8  1903               	skipnz
 18359  0AD9  0AD2               	incf	___fttol@lval+3,f
 18360  0ADA                     l6991:	
 18361  0ADA  0852               	movf	___fttol@lval+3,w
 18362  0ADB  00C9               	movwf	?___fttol+3
 18363  0ADC  0851               	movf	___fttol@lval+2,w
 18364  0ADD  00C8               	movwf	?___fttol+2
 18365  0ADE  0850               	movf	___fttol@lval+1,w
 18366  0ADF  00C7               	movwf	?___fttol+1
 18367  0AE0  084F               	movf	___fttol@lval,w
 18368  0AE1  00C6               	movwf	?___fttol
 18369  0AE2  0008               	return
 18370  0AE3                     __end_of___fttol:	
 18371                           
 18372                           	psect	text126
 18373  1839                     __ptext126:	
 18374 ;; *************** function ___ftneg *****************
 18375 ;; Defined at:
 18376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18377 ;; Parameters:    Size  Location     Type
 18378 ;;  f1              3   22[BANK0 ] float 
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;		None
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  3   22[BANK0 ] float 
 18383 ;; Registers used:
 18384 ;;		wreg
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18390 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;Total ram usage:        3 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    3
 18397 ;; This function calls:
 18398 ;;		Nothing
 18399 ;; This function is called by:
 18400 ;;		_getDimmerLights_PercentToValue
 18401 ;;		_getDimmerLights_ValueToPercent
 18402 ;; This function uses a non-reentrant model
 18403 ;;
 18404                           
 18405                           
 18406                           ;psect for function ___ftneg
 18407  1839                     ___ftneg:	
 18408                           
 18409                           ;incstack = 0
 18410                           ; Regs used in ___ftneg: [wreg]
 18411  1839  0020               	movlb	0	; select bank0
 18412  183A  0838               	movf	___ftneg@f1+2,w
 18413  183B  0437               	iorwf	___ftneg@f1+1,w
 18414  183C  0436               	iorwf	___ftneg@f1,w
 18415  183D  1903               	skipnz
 18416  183E  0008               	return
 18417  183F  3080               	movlw	128
 18418  1840  06B8               	xorwf	___ftneg@f1+2,f
 18419  1841  0008               	return
 18420  1842                     __end_of___ftneg:	
 18421                           
 18422                           	psect	text127
 18423  0E8E                     __ptext127:	
 18424 ;; *************** function ___ftmul *****************
 18425 ;; Defined at:
 18426 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18427 ;; Parameters:    Size  Location     Type
 18428 ;;  f1              3    6[BANK0 ] float 
 18429 ;;  f2              3    9[BANK0 ] float 
 18430 ;; Auto vars:     Size  Location     Type
 18431 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 18432 ;;  sign            1   21[BANK0 ] unsigned char 
 18433 ;;  cntr            1   20[BANK0 ] unsigned char 
 18434 ;;  exp             1   16[BANK0 ] unsigned char 
 18435 ;; Return value:  Size  Location     Type
 18436 ;;                  3    6[BANK0 ] float 
 18437 ;; Registers used:
 18438 ;;		wreg, status,2, status,0, pclath, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18444 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18445 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18446 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18447 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18448 ;;Total ram usage:       16 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:    4
 18451 ;; This function calls:
 18452 ;;		___ftpack
 18453 ;; This function is called by:
 18454 ;;		_getDimmerLights_PercentToValue
 18455 ;; This function uses a non-reentrant model
 18456 ;;
 18457                           
 18458                           
 18459                           ;psect for function ___ftmul
 18460  0E8E                     ___ftmul:	
 18461                           
 18462                           ;incstack = 0
 18463                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18464  0E8E  0020               	movlb	0	; select bank0
 18465  0E8F  0826               	movf	___ftmul@f1,w
 18466  0E90  00AC               	movwf	??___ftmul
 18467  0E91  0827               	movf	___ftmul@f1+1,w
 18468  0E92  00AD               	movwf	??___ftmul+1
 18469  0E93  0828               	movf	___ftmul@f1+2,w
 18470  0E94  00AE               	movwf	??___ftmul+2
 18471  0E95  1003               	clrc
 18472  0E96  0D2D               	rlf	??___ftmul+1,w
 18473  0E97  0D2E               	rlf	??___ftmul+2,w
 18474  0E98  00AF               	movwf	??___ftmul+3
 18475  0E99  082F               	movf	??___ftmul+3,w
 18476  0E9A  00B0               	movwf	___ftmul@exp
 18477  0E9B  08B0               	movf	___ftmul@exp,f
 18478  0E9C  1D03               	skipz
 18479  0E9D  2EA5               	goto	l6899
 18480  0E9E  3000               	movlw	0
 18481  0E9F  00A6               	movwf	?___ftmul
 18482  0EA0  3000               	movlw	0
 18483  0EA1  00A7               	movwf	?___ftmul+1
 18484  0EA2  3000               	movlw	0
 18485  0EA3  00A8               	movwf	?___ftmul+2
 18486  0EA4  0008               	return
 18487  0EA5                     l6899:	
 18488  0EA5  0829               	movf	___ftmul@f2,w
 18489  0EA6  00AC               	movwf	??___ftmul
 18490  0EA7  082A               	movf	___ftmul@f2+1,w
 18491  0EA8  00AD               	movwf	??___ftmul+1
 18492  0EA9  082B               	movf	___ftmul@f2+2,w
 18493  0EAA  00AE               	movwf	??___ftmul+2
 18494  0EAB  1003               	clrc
 18495  0EAC  0D2D               	rlf	??___ftmul+1,w
 18496  0EAD  0D2E               	rlf	??___ftmul+2,w
 18497  0EAE  00AF               	movwf	??___ftmul+3
 18498  0EAF  082F               	movf	??___ftmul+3,w
 18499  0EB0  00B5               	movwf	___ftmul@sign
 18500  0EB1  08B5               	movf	___ftmul@sign,f
 18501  0EB2  1D03               	skipz
 18502  0EB3  2EBB               	goto	l6905
 18503  0EB4  3000               	movlw	0
 18504  0EB5  00A6               	movwf	?___ftmul
 18505  0EB6  3000               	movlw	0
 18506  0EB7  00A7               	movwf	?___ftmul+1
 18507  0EB8  3000               	movlw	0
 18508  0EB9  00A8               	movwf	?___ftmul+2
 18509  0EBA  0008               	return
 18510  0EBB                     l6905:	
 18511  0EBB  0835               	movf	___ftmul@sign,w
 18512  0EBC  3E7B               	addlw	123
 18513  0EBD  00AC               	movwf	??___ftmul
 18514  0EBE  082C               	movf	??___ftmul,w
 18515  0EBF  07B0               	addwf	___ftmul@exp,f
 18516  0EC0  0826               	movf	___ftmul@f1,w
 18517  0EC1  00AC               	movwf	??___ftmul
 18518  0EC2  0827               	movf	___ftmul@f1+1,w
 18519  0EC3  00AD               	movwf	??___ftmul+1
 18520  0EC4  0828               	movf	___ftmul@f1+2,w
 18521  0EC5  00AE               	movwf	??___ftmul+2
 18522  0EC6  3010               	movlw	16
 18523  0EC7                     u5955:	
 18524  0EC7  36AE               	lsrf	??___ftmul+2,f
 18525  0EC8  0CAD               	rrf	??___ftmul+1,f
 18526  0EC9  0CAC               	rrf	??___ftmul,f
 18527  0ECA  0B89               	decfsz	9,f
 18528  0ECB  2EC7               	goto	u5955
 18529  0ECC  082C               	movf	??___ftmul,w
 18530  0ECD  00AF               	movwf	??___ftmul+3
 18531  0ECE  082F               	movf	??___ftmul+3,w
 18532  0ECF  00B5               	movwf	___ftmul@sign
 18533  0ED0  0829               	movf	___ftmul@f2,w
 18534  0ED1  00AC               	movwf	??___ftmul
 18535  0ED2  082A               	movf	___ftmul@f2+1,w
 18536  0ED3  00AD               	movwf	??___ftmul+1
 18537  0ED4  082B               	movf	___ftmul@f2+2,w
 18538  0ED5  00AE               	movwf	??___ftmul+2
 18539  0ED6  3010               	movlw	16
 18540  0ED7                     u5965:	
 18541  0ED7  36AE               	lsrf	??___ftmul+2,f
 18542  0ED8  0CAD               	rrf	??___ftmul+1,f
 18543  0ED9  0CAC               	rrf	??___ftmul,f
 18544  0EDA  0B89               	decfsz	9,f
 18545  0EDB  2ED7               	goto	u5965
 18546  0EDC  082C               	movf	??___ftmul,w
 18547  0EDD  00AF               	movwf	??___ftmul+3
 18548  0EDE  082F               	movf	??___ftmul+3,w
 18549  0EDF  06B5               	xorwf	___ftmul@sign,f
 18550  0EE0  3080               	movlw	128
 18551  0EE1  00AC               	movwf	??___ftmul
 18552  0EE2  082C               	movf	??___ftmul,w
 18553  0EE3  05B5               	andwf	___ftmul@sign,f
 18554  0EE4  17A7               	bsf	___ftmul@f1+1,7
 18555  0EE5  17AA               	bsf	___ftmul@f2+1,7
 18556  0EE6  30FF               	movlw	255
 18557  0EE7  05A9               	andwf	___ftmul@f2,f
 18558  0EE8  30FF               	movlw	255
 18559  0EE9  05AA               	andwf	___ftmul@f2+1,f
 18560  0EEA  3000               	movlw	0
 18561  0EEB  05AB               	andwf	___ftmul@f2+2,f
 18562  0EEC  3000               	movlw	0
 18563  0EED  00B1               	movwf	___ftmul@f3_as_product
 18564  0EEE  3000               	movlw	0
 18565  0EEF  00B2               	movwf	___ftmul@f3_as_product+1
 18566  0EF0  3000               	movlw	0
 18567  0EF1  00B3               	movwf	___ftmul@f3_as_product+2
 18568  0EF2  3007               	movlw	7
 18569  0EF3  00AC               	movwf	??___ftmul
 18570  0EF4  082C               	movf	??___ftmul,w
 18571  0EF5  00B4               	movwf	___ftmul@cntr
 18572  0EF6                     l6917:	
 18573  0EF6  1C26               	btfss	___ftmul@f1,0
 18574  0EF7  2EFE               	goto	l6921
 18575  0EF8  0829               	movf	___ftmul@f2,w
 18576  0EF9  07B1               	addwf	___ftmul@f3_as_product,f
 18577  0EFA  082A               	movf	___ftmul@f2+1,w
 18578  0EFB  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18579  0EFC  082B               	movf	___ftmul@f2+2,w
 18580  0EFD  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18581  0EFE                     l6921:	
 18582  0EFE  3001               	movlw	1
 18583  0EFF                     u5985:	
 18584  0EFF  36A8               	lsrf	___ftmul@f1+2,f
 18585  0F00  0CA7               	rrf	___ftmul@f1+1,f
 18586  0F01  0CA6               	rrf	___ftmul@f1,f
 18587  0F02  0B89               	decfsz	9,f
 18588  0F03  2EFF               	goto	u5985
 18589  0F04  3001               	movlw	1
 18590  0F05                     u5995:	
 18591  0F05  35A9               	lslf	___ftmul@f2,f
 18592  0F06  0DAA               	rlf	___ftmul@f2+1,f
 18593  0F07  0DAB               	rlf	___ftmul@f2+2,f
 18594  0F08  0B89               	decfsz	9,f
 18595  0F09  2F05               	goto	u5995
 18596  0F0A  3001               	movlw	1
 18597  0F0B  02B4               	subwf	___ftmul@cntr,f
 18598  0F0C  1D03               	btfss	3,2
 18599  0F0D  2EF6               	goto	l6917
 18600  0F0E  3009               	movlw	9
 18601  0F0F  00AC               	movwf	??___ftmul
 18602  0F10  082C               	movf	??___ftmul,w
 18603  0F11  00B4               	movwf	___ftmul@cntr
 18604  0F12                     l6929:	
 18605  0F12  1C26               	btfss	___ftmul@f1,0
 18606  0F13  2F1A               	goto	l6933
 18607  0F14  0829               	movf	___ftmul@f2,w
 18608  0F15  07B1               	addwf	___ftmul@f3_as_product,f
 18609  0F16  082A               	movf	___ftmul@f2+1,w
 18610  0F17  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18611  0F18  082B               	movf	___ftmul@f2+2,w
 18612  0F19  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18613  0F1A                     l6933:	
 18614  0F1A  3001               	movlw	1
 18615  0F1B                     u6025:	
 18616  0F1B  36A8               	lsrf	___ftmul@f1+2,f
 18617  0F1C  0CA7               	rrf	___ftmul@f1+1,f
 18618  0F1D  0CA6               	rrf	___ftmul@f1,f
 18619  0F1E  0B89               	decfsz	9,f
 18620  0F1F  2F1B               	goto	u6025
 18621  0F20  3001               	movlw	1
 18622  0F21                     u6035:	
 18623  0F21  36B3               	lsrf	___ftmul@f3_as_product+2,f
 18624  0F22  0CB2               	rrf	___ftmul@f3_as_product+1,f
 18625  0F23  0CB1               	rrf	___ftmul@f3_as_product,f
 18626  0F24  0B89               	decfsz	9,f
 18627  0F25  2F21               	goto	u6035
 18628  0F26  3001               	movlw	1
 18629  0F27  02B4               	subwf	___ftmul@cntr,f
 18630  0F28  1D03               	btfss	3,2
 18631  0F29  2F12               	goto	l6929
 18632  0F2A  0831               	movf	___ftmul@f3_as_product,w
 18633  0F2B  00F2               	movwf	___ftpack@arg
 18634  0F2C  0832               	movf	___ftmul@f3_as_product+1,w
 18635  0F2D  00F3               	movwf	___ftpack@arg+1
 18636  0F2E  0833               	movf	___ftmul@f3_as_product+2,w
 18637  0F2F  00F4               	movwf	___ftpack@arg+2
 18638  0F30  0830               	movf	___ftmul@exp,w
 18639  0F31  00AC               	movwf	??___ftmul
 18640  0F32  082C               	movf	??___ftmul,w
 18641  0F33  00F5               	movwf	___ftpack@exp
 18642  0F34  0835               	movf	___ftmul@sign,w
 18643  0F35  00AD               	movwf	??___ftmul+1
 18644  0F36  082D               	movf	??___ftmul+1,w
 18645  0F37  00F6               	movwf	___ftpack@sign
 18646  0F38  3195  25AB         	fcall	___ftpack
 18647  0F3A  0872               	movf	?___ftpack,w
 18648  0F3B  0020               	movlb	0	; select bank0
 18649  0F3C  00A6               	movwf	?___ftmul
 18650  0F3D  0873               	movf	?___ftpack+1,w
 18651  0F3E  00A7               	movwf	?___ftmul+1
 18652  0F3F  0874               	movf	?___ftpack+2,w
 18653  0F40  00A8               	movwf	?___ftmul+2
 18654  0F41  0008               	return
 18655  0F42                     __end_of___ftmul:	
 18656                           
 18657                           	psect	text128
 18658  0D39                     __ptext128:	
 18659 ;; *************** function ___ftdiv *****************
 18660 ;; Defined at:
 18661 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18662 ;; Parameters:    Size  Location     Type
 18663 ;;  f2              3    6[BANK0 ] float 
 18664 ;;  f1              3    9[BANK0 ] float 
 18665 ;; Auto vars:     Size  Location     Type
 18666 ;;  f3              3   17[BANK0 ] float 
 18667 ;;  sign            1   21[BANK0 ] unsigned char 
 18668 ;;  exp             1   20[BANK0 ] unsigned char 
 18669 ;;  cntr            1   16[BANK0 ] unsigned char 
 18670 ;; Return value:  Size  Location     Type
 18671 ;;                  3    6[BANK0 ] float 
 18672 ;; Registers used:
 18673 ;;		wreg, status,2, status,0, pclath, cstack
 18674 ;; Tracked objects:
 18675 ;;		On entry : 0/0
 18676 ;;		On exit  : 0/0
 18677 ;;		Unchanged: 0/0
 18678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18679 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18680 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;Total ram usage:       16 bytes
 18684 ;; Hardware stack levels used:    1
 18685 ;; Hardware stack levels required when called:    4
 18686 ;; This function calls:
 18687 ;;		___ftpack
 18688 ;; This function is called by:
 18689 ;;		_getDimmerLights_PercentToValue
 18690 ;;		_getDimmerLights_ValueToPercent
 18691 ;; This function uses a non-reentrant model
 18692 ;;
 18693                           
 18694                           
 18695                           ;psect for function ___ftdiv
 18696  0D39                     ___ftdiv:	
 18697                           
 18698                           ;incstack = 0
 18699                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18700  0D39  0020               	movlb	0	; select bank0
 18701  0D3A  0829               	movf	___ftdiv@f1,w
 18702  0D3B  00AC               	movwf	??___ftdiv
 18703  0D3C  082A               	movf	___ftdiv@f1+1,w
 18704  0D3D  00AD               	movwf	??___ftdiv+1
 18705  0D3E  082B               	movf	___ftdiv@f1+2,w
 18706  0D3F  00AE               	movwf	??___ftdiv+2
 18707  0D40  1003               	clrc
 18708  0D41  0D2D               	rlf	??___ftdiv+1,w
 18709  0D42  0D2E               	rlf	??___ftdiv+2,w
 18710  0D43  00AF               	movwf	??___ftdiv+3
 18711  0D44  082F               	movf	??___ftdiv+3,w
 18712  0D45  00B4               	movwf	___ftdiv@exp
 18713  0D46  08B4               	movf	___ftdiv@exp,f
 18714  0D47  1D03               	skipz
 18715  0D48  2D50               	goto	l6857
 18716  0D49  3000               	movlw	0
 18717  0D4A  00A6               	movwf	?___ftdiv
 18718  0D4B  3000               	movlw	0
 18719  0D4C  00A7               	movwf	?___ftdiv+1
 18720  0D4D  3000               	movlw	0
 18721  0D4E  00A8               	movwf	?___ftdiv+2
 18722  0D4F  0008               	return
 18723  0D50                     l6857:	
 18724  0D50  0826               	movf	___ftdiv@f2,w
 18725  0D51  00AC               	movwf	??___ftdiv
 18726  0D52  0827               	movf	___ftdiv@f2+1,w
 18727  0D53  00AD               	movwf	??___ftdiv+1
 18728  0D54  0828               	movf	___ftdiv@f2+2,w
 18729  0D55  00AE               	movwf	??___ftdiv+2
 18730  0D56  1003               	clrc
 18731  0D57  0D2D               	rlf	??___ftdiv+1,w
 18732  0D58  0D2E               	rlf	??___ftdiv+2,w
 18733  0D59  00AF               	movwf	??___ftdiv+3
 18734  0D5A  082F               	movf	??___ftdiv+3,w
 18735  0D5B  00B5               	movwf	___ftdiv@sign
 18736  0D5C  08B5               	movf	___ftdiv@sign,f
 18737  0D5D  1D03               	skipz
 18738  0D5E  2D66               	goto	l6863
 18739  0D5F  3000               	movlw	0
 18740  0D60  00A6               	movwf	?___ftdiv
 18741  0D61  3000               	movlw	0
 18742  0D62  00A7               	movwf	?___ftdiv+1
 18743  0D63  3000               	movlw	0
 18744  0D64  00A8               	movwf	?___ftdiv+2
 18745  0D65  0008               	return
 18746  0D66                     l6863:	
 18747  0D66  3000               	movlw	0
 18748  0D67  00B1               	movwf	___ftdiv@f3
 18749  0D68  3000               	movlw	0
 18750  0D69  00B2               	movwf	___ftdiv@f3+1
 18751  0D6A  3000               	movlw	0
 18752  0D6B  00B3               	movwf	___ftdiv@f3+2
 18753  0D6C  3089               	movlw	137
 18754  0D6D  0735               	addwf	___ftdiv@sign,w
 18755  0D6E  00AC               	movwf	??___ftdiv
 18756  0D6F  082C               	movf	??___ftdiv,w
 18757  0D70  02B4               	subwf	___ftdiv@exp,f
 18758  0D71  0829               	movf	___ftdiv@f1,w
 18759  0D72  00AC               	movwf	??___ftdiv
 18760  0D73  082A               	movf	___ftdiv@f1+1,w
 18761  0D74  00AD               	movwf	??___ftdiv+1
 18762  0D75  082B               	movf	___ftdiv@f1+2,w
 18763  0D76  00AE               	movwf	??___ftdiv+2
 18764  0D77  3010               	movlw	16
 18765  0D78                     u5875:	
 18766  0D78  36AE               	lsrf	??___ftdiv+2,f
 18767  0D79  0CAD               	rrf	??___ftdiv+1,f
 18768  0D7A  0CAC               	rrf	??___ftdiv,f
 18769  0D7B  0B89               	decfsz	9,f
 18770  0D7C  2D78               	goto	u5875
 18771  0D7D  082C               	movf	??___ftdiv,w
 18772  0D7E  00AF               	movwf	??___ftdiv+3
 18773  0D7F  082F               	movf	??___ftdiv+3,w
 18774  0D80  00B5               	movwf	___ftdiv@sign
 18775  0D81  0826               	movf	___ftdiv@f2,w
 18776  0D82  00AC               	movwf	??___ftdiv
 18777  0D83  0827               	movf	___ftdiv@f2+1,w
 18778  0D84  00AD               	movwf	??___ftdiv+1
 18779  0D85  0828               	movf	___ftdiv@f2+2,w
 18780  0D86  00AE               	movwf	??___ftdiv+2
 18781  0D87  3010               	movlw	16
 18782  0D88                     u5885:	
 18783  0D88  36AE               	lsrf	??___ftdiv+2,f
 18784  0D89  0CAD               	rrf	??___ftdiv+1,f
 18785  0D8A  0CAC               	rrf	??___ftdiv,f
 18786  0D8B  0B89               	decfsz	9,f
 18787  0D8C  2D88               	goto	u5885
 18788  0D8D  082C               	movf	??___ftdiv,w
 18789  0D8E  00AF               	movwf	??___ftdiv+3
 18790  0D8F  082F               	movf	??___ftdiv+3,w
 18791  0D90  06B5               	xorwf	___ftdiv@sign,f
 18792  0D91  3080               	movlw	128
 18793  0D92  00AC               	movwf	??___ftdiv
 18794  0D93  082C               	movf	??___ftdiv,w
 18795  0D94  05B5               	andwf	___ftdiv@sign,f
 18796  0D95  17AA               	bsf	___ftdiv@f1+1,7
 18797  0D96  30FF               	movlw	255
 18798  0D97  05A9               	andwf	___ftdiv@f1,f
 18799  0D98  30FF               	movlw	255
 18800  0D99  05AA               	andwf	___ftdiv@f1+1,f
 18801  0D9A  3000               	movlw	0
 18802  0D9B  05AB               	andwf	___ftdiv@f1+2,f
 18803  0D9C  17A7               	bsf	___ftdiv@f2+1,7
 18804  0D9D  30FF               	movlw	255
 18805  0D9E  05A6               	andwf	___ftdiv@f2,f
 18806  0D9F  30FF               	movlw	255
 18807  0DA0  05A7               	andwf	___ftdiv@f2+1,f
 18808  0DA1  3000               	movlw	0
 18809  0DA2  05A8               	andwf	___ftdiv@f2+2,f
 18810  0DA3  3018               	movlw	24
 18811  0DA4  00AC               	movwf	??___ftdiv
 18812  0DA5  082C               	movf	??___ftdiv,w
 18813  0DA6  00B0               	movwf	___ftdiv@cntr
 18814  0DA7                     l6877:	
 18815  0DA7  3001               	movlw	1
 18816  0DA8                     u5895:	
 18817  0DA8  35B1               	lslf	___ftdiv@f3,f
 18818  0DA9  0DB2               	rlf	___ftdiv@f3+1,f
 18819  0DAA  0DB3               	rlf	___ftdiv@f3+2,f
 18820  0DAB  0B89               	decfsz	9,f
 18821  0DAC  2DA8               	goto	u5895
 18822  0DAD  0828               	movf	___ftdiv@f2+2,w
 18823  0DAE  022B               	subwf	___ftdiv@f1+2,w
 18824  0DAF  1D03               	skipz
 18825  0DB0  2DB7               	goto	u5905
 18826  0DB1  0827               	movf	___ftdiv@f2+1,w
 18827  0DB2  022A               	subwf	___ftdiv@f1+1,w
 18828  0DB3  1D03               	skipz
 18829  0DB4  2DB7               	goto	u5905
 18830  0DB5  0826               	movf	___ftdiv@f2,w
 18831  0DB6  0229               	subwf	___ftdiv@f1,w
 18832  0DB7                     u5905:	
 18833  0DB7  1C03               	skipc
 18834  0DB8  2DC0               	goto	l6885
 18835  0DB9  0826               	movf	___ftdiv@f2,w
 18836  0DBA  02A9               	subwf	___ftdiv@f1,f
 18837  0DBB  0827               	movf	___ftdiv@f2+1,w
 18838  0DBC  3BAA               	subwfb	___ftdiv@f1+1,f
 18839  0DBD  0828               	movf	___ftdiv@f2+2,w
 18840  0DBE  3BAB               	subwfb	___ftdiv@f1+2,f
 18841  0DBF  1431               	bsf	___ftdiv@f3,0
 18842  0DC0                     l6885:	
 18843  0DC0  3001               	movlw	1
 18844  0DC1                     u5915:	
 18845  0DC1  35A9               	lslf	___ftdiv@f1,f
 18846  0DC2  0DAA               	rlf	___ftdiv@f1+1,f
 18847  0DC3  0DAB               	rlf	___ftdiv@f1+2,f
 18848  0DC4  0B89               	decfsz	9,f
 18849  0DC5  2DC1               	goto	u5915
 18850  0DC6  3001               	movlw	1
 18851  0DC7  02B0               	subwf	___ftdiv@cntr,f
 18852  0DC8  1D03               	btfss	3,2
 18853  0DC9  2DA7               	goto	l6877
 18854  0DCA  0831               	movf	___ftdiv@f3,w
 18855  0DCB  00F2               	movwf	___ftpack@arg
 18856  0DCC  0832               	movf	___ftdiv@f3+1,w
 18857  0DCD  00F3               	movwf	___ftpack@arg+1
 18858  0DCE  0833               	movf	___ftdiv@f3+2,w
 18859  0DCF  00F4               	movwf	___ftpack@arg+2
 18860  0DD0  0834               	movf	___ftdiv@exp,w
 18861  0DD1  00AC               	movwf	??___ftdiv
 18862  0DD2  082C               	movf	??___ftdiv,w
 18863  0DD3  00F5               	movwf	___ftpack@exp
 18864  0DD4  0835               	movf	___ftdiv@sign,w
 18865  0DD5  00AD               	movwf	??___ftdiv+1
 18866  0DD6  082D               	movf	??___ftdiv+1,w
 18867  0DD7  00F6               	movwf	___ftpack@sign
 18868  0DD8  3195  25AB         	fcall	___ftpack
 18869  0DDA  0872               	movf	?___ftpack,w
 18870  0DDB  0020               	movlb	0	; select bank0
 18871  0DDC  00A6               	movwf	?___ftdiv
 18872  0DDD  0873               	movf	?___ftpack+1,w
 18873  0DDE  00A7               	movwf	?___ftdiv+1
 18874  0DDF  0874               	movf	?___ftpack+2,w
 18875  0DE0  00A8               	movwf	?___ftdiv+2
 18876  0DE1  0008               	return
 18877  0DE2                     __end_of___ftdiv:	
 18878                           
 18879                           	psect	text129
 18880  0364                     __ptext129:	
 18881 ;; *************** function ___ftadd *****************
 18882 ;; Defined at:
 18883 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;  f1              3   25[BANK0 ] float 
 18886 ;;  f2              3   28[BANK0 ] float 
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;  exp1            1   37[BANK0 ] unsigned char 
 18889 ;;  exp2            1   36[BANK0 ] unsigned char 
 18890 ;;  sign            1   35[BANK0 ] unsigned char 
 18891 ;; Return value:  Size  Location     Type
 18892 ;;                  3   25[BANK0 ] float 
 18893 ;; Registers used:
 18894 ;;		wreg, status,2, status,0, pclath, cstack
 18895 ;; Tracked objects:
 18896 ;;		On entry : 0/0
 18897 ;;		On exit  : 0/0
 18898 ;;		Unchanged: 0/0
 18899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18900 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18901 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;Total ram usage:       13 bytes
 18905 ;; Hardware stack levels used:    1
 18906 ;; Hardware stack levels required when called:    4
 18907 ;; This function calls:
 18908 ;;		___ftpack
 18909 ;; This function is called by:
 18910 ;;		_getDimmerLights_PercentToValue
 18911 ;;		_getDimmerLights_ValueToPercent
 18912 ;; This function uses a non-reentrant model
 18913 ;;
 18914                           
 18915                           
 18916                           ;psect for function ___ftadd
 18917  0364                     ___ftadd:	
 18918                           
 18919                           ;incstack = 0
 18920                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18921  0364  0020               	movlb	0	; select bank0
 18922  0365  0839               	movf	___ftadd@f1,w
 18923  0366  00BF               	movwf	??___ftadd
 18924  0367  083A               	movf	___ftadd@f1+1,w
 18925  0368  00C0               	movwf	??___ftadd+1
 18926  0369  083B               	movf	___ftadd@f1+2,w
 18927  036A  00C1               	movwf	??___ftadd+2
 18928  036B  1003               	clrc
 18929  036C  0D40               	rlf	??___ftadd+1,w
 18930  036D  0D41               	rlf	??___ftadd+2,w
 18931  036E  00C2               	movwf	??___ftadd+3
 18932  036F  0842               	movf	??___ftadd+3,w
 18933  0370  00C5               	movwf	___ftadd@exp1
 18934  0371  083C               	movf	___ftadd@f2,w
 18935  0372  00BF               	movwf	??___ftadd
 18936  0373  083D               	movf	___ftadd@f2+1,w
 18937  0374  00C0               	movwf	??___ftadd+1
 18938  0375  083E               	movf	___ftadd@f2+2,w
 18939  0376  00C1               	movwf	??___ftadd+2
 18940  0377  1003               	clrc
 18941  0378  0D40               	rlf	??___ftadd+1,w
 18942  0379  0D41               	rlf	??___ftadd+2,w
 18943  037A  00C2               	movwf	??___ftadd+3
 18944  037B  0842               	movf	??___ftadd+3,w
 18945  037C  00C4               	movwf	___ftadd@exp2
 18946  037D  0845               	movf	___ftadd@exp1,w
 18947  037E  1903               	btfsc	3,2
 18948  037F  2B8C               	goto	l6787
 18949  0380  0844               	movf	___ftadd@exp2,w
 18950  0381  0245               	subwf	___ftadd@exp1,w
 18951  0382  1803               	skipnc
 18952  0383  2B93               	goto	l6791
 18953  0384  0345               	decf	___ftadd@exp1,w
 18954  0385  3AFF               	xorlw	255
 18955  0386  0744               	addwf	___ftadd@exp2,w
 18956  0387  00BF               	movwf	??___ftadd
 18957  0388  3019               	movlw	25
 18958  0389  023F               	subwf	??___ftadd,w
 18959  038A  1C03               	skipc
 18960  038B  2B93               	goto	l6791
 18961  038C                     l6787:	
 18962  038C  083C               	movf	___ftadd@f2,w
 18963  038D  00B9               	movwf	?___ftadd
 18964  038E  083D               	movf	___ftadd@f2+1,w
 18965  038F  00BA               	movwf	?___ftadd+1
 18966  0390  083E               	movf	___ftadd@f2+2,w
 18967  0391  00BB               	movwf	?___ftadd+2
 18968  0392  0008               	return
 18969  0393                     l6791:	
 18970  0393  0844               	movf	___ftadd@exp2,w
 18971  0394  1903               	btfsc	3,2
 18972  0395  0008               	return
 18973  0396  0845               	movf	___ftadd@exp1,w
 18974  0397  0244               	subwf	___ftadd@exp2,w
 18975  0398  1803               	skipnc
 18976  0399  2BA2               	goto	l6797
 18977  039A  0344               	decf	___ftadd@exp2,w
 18978  039B  3AFF               	xorlw	255
 18979  039C  0745               	addwf	___ftadd@exp1,w
 18980  039D  00BF               	movwf	??___ftadd
 18981  039E  3019               	movlw	25
 18982  039F  023F               	subwf	??___ftadd,w
 18983  03A0  1803               	btfsc	3,0
 18984  03A1  0008               	return
 18985  03A2                     l6797:	
 18986  03A2  3006               	movlw	6
 18987  03A3  00BF               	movwf	??___ftadd
 18988  03A4  083F               	movf	??___ftadd,w
 18989  03A5  00C3               	movwf	___ftadd@sign
 18990  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 18991  03A7  17C3               	bsf	___ftadd@sign,7
 18992  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 18993  03A9  1743               	bsf	___ftadd@sign,6
 18994  03AA  17BA               	bsf	___ftadd@f1+1,7
 18995  03AB  30FF               	movlw	255
 18996  03AC  05B9               	andwf	___ftadd@f1,f
 18997  03AD  30FF               	movlw	255
 18998  03AE  05BA               	andwf	___ftadd@f1+1,f
 18999  03AF  3000               	movlw	0
 19000  03B0  05BB               	andwf	___ftadd@f1+2,f
 19001  03B1  17BD               	bsf	___ftadd@f2+1,7
 19002  03B2  30FF               	movlw	255
 19003  03B3  05BC               	andwf	___ftadd@f2,f
 19004  03B4  30FF               	movlw	255
 19005  03B5  05BD               	andwf	___ftadd@f2+1,f
 19006  03B6  3000               	movlw	0
 19007  03B7  05BE               	andwf	___ftadd@f2+2,f
 19008  03B8  0844               	movf	___ftadd@exp2,w
 19009  03B9  0245               	subwf	___ftadd@exp1,w
 19010  03BA  1803               	skipnc
 19011  03BB  2BDE               	goto	l6819
 19012  03BC                     l6809:	
 19013  03BC  3001               	movlw	1
 19014  03BD                     u5715:	
 19015  03BD  35BC               	lslf	___ftadd@f2,f
 19016  03BE  0DBD               	rlf	___ftadd@f2+1,f
 19017  03BF  0DBE               	rlf	___ftadd@f2+2,f
 19018  03C0  0B89               	decfsz	9,f
 19019  03C1  2BBD               	goto	u5715
 19020  03C2  3001               	movlw	1
 19021  03C3  02C4               	subwf	___ftadd@exp2,f
 19022  03C4  0844               	movf	___ftadd@exp2,w
 19023  03C5  0645               	xorwf	___ftadd@exp1,w
 19024  03C6  1903               	skipnz
 19025  03C7  2BD9               	goto	l6817
 19026  03C8  3001               	movlw	1
 19027  03C9  02C3               	subwf	___ftadd@sign,f
 19028  03CA  0843               	movf	___ftadd@sign,w
 19029  03CB  3907               	andlw	7
 19030  03CC  1903               	btfsc	3,2
 19031  03CD  2BD9               	goto	l6817
 19032  03CE  2BBC               	goto	l6809
 19033  03CF                     l6815:	
 19034  03CF  3001               	movlw	1
 19035  03D0                     u5745:	
 19036  03D0  36BB               	lsrf	___ftadd@f1+2,f
 19037  03D1  0CBA               	rrf	___ftadd@f1+1,f
 19038  03D2  0CB9               	rrf	___ftadd@f1,f
 19039  03D3  0B89               	decfsz	9,f
 19040  03D4  2BD0               	goto	u5745
 19041  03D5  3001               	movlw	1
 19042  03D6  00BF               	movwf	??___ftadd
 19043  03D7  083F               	movf	??___ftadd,w
 19044  03D8  07C5               	addwf	___ftadd@exp1,f
 19045  03D9                     l6817:	
 19046  03D9  0845               	movf	___ftadd@exp1,w
 19047  03DA  0644               	xorwf	___ftadd@exp2,w
 19048  03DB  1903               	btfsc	3,2
 19049  03DC  2C03               	goto	l3330
 19050  03DD  2BCF               	goto	l6815
 19051  03DE                     l6819:	
 19052  03DE  0845               	movf	___ftadd@exp1,w
 19053  03DF  0244               	subwf	___ftadd@exp2,w
 19054  03E0  1803               	skipnc
 19055  03E1  2C03               	goto	l3330
 19056  03E2                     l6821:	
 19057  03E2  3001               	movlw	1
 19058  03E3                     u5775:	
 19059  03E3  35B9               	lslf	___ftadd@f1,f
 19060  03E4  0DBA               	rlf	___ftadd@f1+1,f
 19061  03E5  0DBB               	rlf	___ftadd@f1+2,f
 19062  03E6  0B89               	decfsz	9,f
 19063  03E7  2BE3               	goto	u5775
 19064  03E8  3001               	movlw	1
 19065  03E9  02C5               	subwf	___ftadd@exp1,f
 19066  03EA  0844               	movf	___ftadd@exp2,w
 19067  03EB  0645               	xorwf	___ftadd@exp1,w
 19068  03EC  1903               	skipnz
 19069  03ED  2BFF               	goto	l6829
 19070  03EE  3001               	movlw	1
 19071  03EF  02C3               	subwf	___ftadd@sign,f
 19072  03F0  0843               	movf	___ftadd@sign,w
 19073  03F1  3907               	andlw	7
 19074  03F2  1903               	btfsc	3,2
 19075  03F3  2BFF               	goto	l6829
 19076  03F4  2BE2               	goto	l6821
 19077  03F5                     l6827:	
 19078  03F5  3001               	movlw	1
 19079  03F6                     u5805:	
 19080  03F6  36BE               	lsrf	___ftadd@f2+2,f
 19081  03F7  0CBD               	rrf	___ftadd@f2+1,f
 19082  03F8  0CBC               	rrf	___ftadd@f2,f
 19083  03F9  0B89               	decfsz	9,f
 19084  03FA  2BF6               	goto	u5805
 19085  03FB  3001               	movlw	1
 19086  03FC  00BF               	movwf	??___ftadd
 19087  03FD  083F               	movf	??___ftadd,w
 19088  03FE  07C4               	addwf	___ftadd@exp2,f
 19089  03FF                     l6829:	
 19090  03FF  0845               	movf	___ftadd@exp1,w
 19091  0400  0644               	xorwf	___ftadd@exp2,w
 19092  0401  1D03               	skipz
 19093  0402  2BF5               	goto	l6827
 19094  0403                     l3330:	
 19095  0403  1FC3               	btfss	___ftadd@sign,7
 19096  0404  2C15               	goto	l6833
 19097  0405  30FF               	movlw	255
 19098  0406  06B9               	xorwf	___ftadd@f1,f
 19099  0407  30FF               	movlw	255
 19100  0408  06BA               	xorwf	___ftadd@f1+1,f
 19101  0409  30FF               	movlw	255
 19102  040A  06BB               	xorwf	___ftadd@f1+2,f
 19103  040B  3001               	movlw	1
 19104  040C  07B9               	addwf	___ftadd@f1,f
 19105  040D  3000               	movlw	0
 19106  040E  1803               	skipnc
 19107  040F  3001               	movlw	1
 19108  0410  07BA               	addwf	___ftadd@f1+1,f
 19109  0411  3000               	movlw	0
 19110  0412  1803               	skipnc
 19111  0413  3001               	movlw	1
 19112  0414  07BB               	addwf	___ftadd@f1+2,f
 19113  0415                     l6833:	
 19114  0415  1F43               	btfss	___ftadd@sign,6
 19115  0416  2C27               	goto	l6837
 19116  0417  30FF               	movlw	255
 19117  0418  06BC               	xorwf	___ftadd@f2,f
 19118  0419  30FF               	movlw	255
 19119  041A  06BD               	xorwf	___ftadd@f2+1,f
 19120  041B  30FF               	movlw	255
 19121  041C  06BE               	xorwf	___ftadd@f2+2,f
 19122  041D  3001               	movlw	1
 19123  041E  07BC               	addwf	___ftadd@f2,f
 19124  041F  3000               	movlw	0
 19125  0420  1803               	skipnc
 19126  0421  3001               	movlw	1
 19127  0422  07BD               	addwf	___ftadd@f2+1,f
 19128  0423  3000               	movlw	0
 19129  0424  1803               	skipnc
 19130  0425  3001               	movlw	1
 19131  0426  07BE               	addwf	___ftadd@f2+2,f
 19132  0427                     l6837:	
 19133  0427  01C3               	clrf	___ftadd@sign
 19134  0428  0839               	movf	___ftadd@f1,w
 19135  0429  07BC               	addwf	___ftadd@f2,f
 19136  042A  083A               	movf	___ftadd@f1+1,w
 19137  042B  3DBD               	addwfc	___ftadd@f2+1,f
 19138  042C  083B               	movf	___ftadd@f1+2,w
 19139  042D  3DBE               	addwfc	___ftadd@f2+2,f
 19140  042E  1FBE               	btfss	___ftadd@f2+2,7
 19141  042F  2C42               	goto	l6847
 19142  0430  30FF               	movlw	255
 19143  0431  06BC               	xorwf	___ftadd@f2,f
 19144  0432  30FF               	movlw	255
 19145  0433  06BD               	xorwf	___ftadd@f2+1,f
 19146  0434  30FF               	movlw	255
 19147  0435  06BE               	xorwf	___ftadd@f2+2,f
 19148  0436  3001               	movlw	1
 19149  0437  07BC               	addwf	___ftadd@f2,f
 19150  0438  3000               	movlw	0
 19151  0439  1803               	skipnc
 19152  043A  3001               	movlw	1
 19153  043B  07BD               	addwf	___ftadd@f2+1,f
 19154  043C  3000               	movlw	0
 19155  043D  1803               	skipnc
 19156  043E  3001               	movlw	1
 19157  043F  07BE               	addwf	___ftadd@f2+2,f
 19158  0440  01C3               	clrf	___ftadd@sign
 19159  0441  0AC3               	incf	___ftadd@sign,f
 19160  0442                     l6847:	
 19161  0442  083C               	movf	___ftadd@f2,w
 19162  0443  00F2               	movwf	___ftpack@arg
 19163  0444  083D               	movf	___ftadd@f2+1,w
 19164  0445  00F3               	movwf	___ftpack@arg+1
 19165  0446  083E               	movf	___ftadd@f2+2,w
 19166  0447  00F4               	movwf	___ftpack@arg+2
 19167  0448  0845               	movf	___ftadd@exp1,w
 19168  0449  00BF               	movwf	??___ftadd
 19169  044A  083F               	movf	??___ftadd,w
 19170  044B  00F5               	movwf	___ftpack@exp
 19171  044C  0843               	movf	___ftadd@sign,w
 19172  044D  00C0               	movwf	??___ftadd+1
 19173  044E  0840               	movf	??___ftadd+1,w
 19174  044F  00F6               	movwf	___ftpack@sign
 19175  0450  3195  25AB         	fcall	___ftpack
 19176  0452  0872               	movf	?___ftpack,w
 19177  0453  0020               	movlb	0	; select bank0
 19178  0454  00B9               	movwf	?___ftadd
 19179  0455  0873               	movf	?___ftpack+1,w
 19180  0456  00BA               	movwf	?___ftadd+1
 19181  0457  0874               	movf	?___ftpack+2,w
 19182  0458  00BB               	movwf	?___ftadd+2
 19183  0459  0008               	return
 19184  045A                     __end_of___ftadd:	
 19185                           
 19186                           	psect	text130
 19187  1CE8                     __ptext130:	
 19188 ;; *************** function ___awtoft *****************
 19189 ;; Defined at:
 19190 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19191 ;; Parameters:    Size  Location     Type
 19192 ;;  c               2    0[BANK0 ] int 
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;  sign            1    5[BANK0 ] unsigned char 
 19195 ;; Return value:  Size  Location     Type
 19196 ;;                  3    0[BANK0 ] float 
 19197 ;; Registers used:
 19198 ;;		wreg, status,2, status,0, pclath, cstack
 19199 ;; Tracked objects:
 19200 ;;		On entry : 0/0
 19201 ;;		On exit  : 0/0
 19202 ;;		Unchanged: 0/0
 19203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19204 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19208 ;;Total ram usage:        6 bytes
 19209 ;; Hardware stack levels used:    1
 19210 ;; Hardware stack levels required when called:    4
 19211 ;; This function calls:
 19212 ;;		___ftpack
 19213 ;; This function is called by:
 19214 ;;		_getDimmerLights_PercentToValue
 19215 ;;		_getDimmerLights_ValueToPercent
 19216 ;; This function uses a non-reentrant model
 19217 ;;
 19218                           
 19219                           
 19220                           ;psect for function ___awtoft
 19221  1CE8                     ___awtoft:	
 19222                           
 19223                           ;incstack = 0
 19224                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19225  1CE8  0020               	movlb	0	; select bank0
 19226  1CE9  01A5               	clrf	___awtoft@sign
 19227  1CEA  1FA1               	btfss	___awtoft@c+1,7
 19228  1CEB  2CF3               	goto	l9785
 19229  1CEC  09A0               	comf	___awtoft@c,f
 19230  1CED  09A1               	comf	___awtoft@c+1,f
 19231  1CEE  0AA0               	incf	___awtoft@c,f
 19232  1CEF  1903               	skipnz
 19233  1CF0  0AA1               	incf	___awtoft@c+1,f
 19234  1CF1  01A5               	clrf	___awtoft@sign
 19235  1CF2  0AA5               	incf	___awtoft@sign,f
 19236  1CF3                     l9785:	
 19237  1CF3  0820               	movf	___awtoft@c,w
 19238  1CF4  00F2               	movwf	___ftpack@arg
 19239  1CF5  0821               	movf	___awtoft@c+1,w
 19240  1CF6  00F3               	movwf	___ftpack@arg+1
 19241  1CF7  01F4               	clrf	___ftpack@arg+2
 19242  1CF8  308E               	movlw	142
 19243  1CF9  00A3               	movwf	??___awtoft
 19244  1CFA  0823               	movf	??___awtoft,w
 19245  1CFB  00F5               	movwf	___ftpack@exp
 19246  1CFC  0825               	movf	___awtoft@sign,w
 19247  1CFD  00A4               	movwf	??___awtoft+1
 19248  1CFE  0824               	movf	??___awtoft+1,w
 19249  1CFF  00F6               	movwf	___ftpack@sign
 19250  1D00  3195  25AB         	fcall	___ftpack
 19251  1D02  0872               	movf	?___ftpack,w
 19252  1D03  0020               	movlb	0	; select bank0
 19253  1D04  00A0               	movwf	?___awtoft
 19254  1D05  0873               	movf	?___ftpack+1,w
 19255  1D06  00A1               	movwf	?___awtoft+1
 19256  1D07  0874               	movf	?___ftpack+2,w
 19257  1D08  00A2               	movwf	?___awtoft+2
 19258  1D09  0008               	return
 19259  1D0A                     __end_of___awtoft:	
 19260                           
 19261                           	psect	text131
 19262  15AB                     __ptext131:	
 19263 ;; *************** function ___ftpack *****************
 19264 ;; Defined at:
 19265 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19266 ;; Parameters:    Size  Location     Type
 19267 ;;  arg             3    2[COMMON] unsigned um
 19268 ;;  exp             1    5[COMMON] unsigned char 
 19269 ;;  sign            1    6[COMMON] unsigned char 
 19270 ;; Auto vars:     Size  Location     Type
 19271 ;;		None
 19272 ;; Return value:  Size  Location     Type
 19273 ;;                  3    2[COMMON] float 
 19274 ;; Registers used:
 19275 ;;		wreg, status,2, status,0
 19276 ;; Tracked objects:
 19277 ;;		On entry : 0/0
 19278 ;;		On exit  : 0/0
 19279 ;;		Unchanged: 0/0
 19280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19281 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19283 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19284 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19285 ;;Total ram usage:        8 bytes
 19286 ;; Hardware stack levels used:    1
 19287 ;; Hardware stack levels required when called:    3
 19288 ;; This function calls:
 19289 ;;		Nothing
 19290 ;; This function is called by:
 19291 ;;		___awtoft
 19292 ;;		___ftadd
 19293 ;;		___ftdiv
 19294 ;;		___ftmul
 19295 ;; This function uses a non-reentrant model
 19296 ;;
 19297                           
 19298                           
 19299                           ;psect for function ___ftpack
 19300  15AB                     ___ftpack:	
 19301                           
 19302                           ;incstack = 0
 19303                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19304  15AB  0875               	movf	___ftpack@exp,w
 19305  15AC  1903               	btfsc	3,2
 19306  15AD  2DB3               	goto	l6621
 19307  15AE  0874               	movf	___ftpack@arg+2,w
 19308  15AF  0473               	iorwf	___ftpack@arg+1,w
 19309  15B0  0472               	iorwf	___ftpack@arg,w
 19310  15B1  1D03               	skipz
 19311  15B2  2DC4               	goto	l6627
 19312  15B3                     l6621:	
 19313  15B3  3000               	movlw	0
 19314  15B4  00F2               	movwf	?___ftpack
 19315  15B5  3000               	movlw	0
 19316  15B6  00F3               	movwf	?___ftpack+1
 19317  15B7  3000               	movlw	0
 19318  15B8  00F4               	movwf	?___ftpack+2
 19319  15B9  0008               	return
 19320  15BA                     l6625:	
 19321  15BA  3001               	movlw	1
 19322  15BB  00F7               	movwf	??___ftpack
 19323  15BC  0877               	movf	??___ftpack,w
 19324  15BD  07F5               	addwf	___ftpack@exp,f
 19325  15BE  3001               	movlw	1
 19326  15BF                     u5305:	
 19327  15BF  36F4               	lsrf	___ftpack@arg+2,f
 19328  15C0  0CF3               	rrf	___ftpack@arg+1,f
 19329  15C1  0CF2               	rrf	___ftpack@arg,f
 19330  15C2  0B89               	decfsz	9,f
 19331  15C3  2DBF               	goto	u5305
 19332  15C4                     l6627:	
 19333  15C4  30FE               	movlw	254
 19334  15C5  0574               	andwf	___ftpack@arg+2,w
 19335  15C6  1903               	btfsc	3,2
 19336  15C7  2DDD               	goto	l3301
 19337  15C8  2DBA               	goto	l6625
 19338  15C9                     l6629:	
 19339  15C9  3001               	movlw	1
 19340  15CA  00F7               	movwf	??___ftpack
 19341  15CB  0877               	movf	??___ftpack,w
 19342  15CC  07F5               	addwf	___ftpack@exp,f
 19343  15CD  3001               	movlw	1
 19344  15CE  07F2               	addwf	___ftpack@arg,f
 19345  15CF  3000               	movlw	0
 19346  15D0  1803               	skipnc
 19347  15D1  3001               	movlw	1
 19348  15D2  07F3               	addwf	___ftpack@arg+1,f
 19349  15D3  3000               	movlw	0
 19350  15D4  1803               	skipnc
 19351  15D5  3001               	movlw	1
 19352  15D6  07F4               	addwf	___ftpack@arg+2,f
 19353  15D7  3001               	movlw	1
 19354  15D8                     u5325:	
 19355  15D8  36F4               	lsrf	___ftpack@arg+2,f
 19356  15D9  0CF3               	rrf	___ftpack@arg+1,f
 19357  15DA  0CF2               	rrf	___ftpack@arg,f
 19358  15DB  0B89               	decfsz	9,f
 19359  15DC  2DD8               	goto	u5325
 19360  15DD                     l3301:	
 19361  15DD  30FF               	movlw	255
 19362  15DE  0574               	andwf	___ftpack@arg+2,w
 19363  15DF  1903               	btfsc	3,2
 19364  15E0  2DEA               	goto	l6637
 19365  15E1  2DC9               	goto	l6629
 19366  15E2                     l6635:	
 19367  15E2  3001               	movlw	1
 19368  15E3  02F5               	subwf	___ftpack@exp,f
 19369  15E4  3001               	movlw	1
 19370  15E5                     u5345:	
 19371  15E5  35F2               	lslf	___ftpack@arg,f
 19372  15E6  0DF3               	rlf	___ftpack@arg+1,f
 19373  15E7  0DF4               	rlf	___ftpack@arg+2,f
 19374  15E8  0B89               	decfsz	9,f
 19375  15E9  2DE5               	goto	u5345
 19376  15EA                     l6637:	
 19377  15EA  1FF3               	btfss	___ftpack@arg+1,7
 19378  15EB  2DE2               	goto	l6635
 19379  15EC  1875               	btfsc	___ftpack@exp,0
 19380  15ED  2DF4               	goto	l3307
 19381  15EE  30FF               	movlw	255
 19382  15EF  05F2               	andwf	___ftpack@arg,f
 19383  15F0  307F               	movlw	127
 19384  15F1  05F3               	andwf	___ftpack@arg+1,f
 19385  15F2  30FF               	movlw	255
 19386  15F3  05F4               	andwf	___ftpack@arg+2,f
 19387  15F4                     l3307:	
 19388  15F4  1003               	clrc
 19389  15F5  0CF5               	rrf	___ftpack@exp,f
 19390  15F6  0875               	movf	___ftpack@exp,w
 19391  15F7  00F7               	movwf	??___ftpack
 19392  15F8  01F8               	clrf	??___ftpack+1
 19393  15F9  01F9               	clrf	??___ftpack+2
 19394  15FA  3010               	movlw	16
 19395  15FB                     u5375:	
 19396  15FB  35F7               	lslf	??___ftpack,f
 19397  15FC  0DF8               	rlf	??___ftpack+1,f
 19398  15FD  0DF9               	rlf	??___ftpack+2,f
 19399  15FE  0B89               	decfsz	9,f
 19400  15FF  2DFB               	goto	u5375
 19401  1600  0877               	movf	??___ftpack,w
 19402  1601  04F2               	iorwf	___ftpack@arg,f
 19403  1602  0878               	movf	??___ftpack+1,w
 19404  1603  04F3               	iorwf	___ftpack@arg+1,f
 19405  1604  0879               	movf	??___ftpack+2,w
 19406  1605  04F4               	iorwf	___ftpack@arg+2,f
 19407  1606  0876               	movf	___ftpack@sign,w
 19408  1607  1903               	btfsc	3,2
 19409  1608  0008               	return
 19410  1609  17F4               	bsf	___ftpack@arg+2,7
 19411  160A  0008               	return
 19412  160B                     __end_of___ftpack:	
 19413                           
 19414                           	psect	text132
 19415  18FC                     __ptext132:	
 19416 ;; *************** function _Division *****************
 19417 ;; Defined at:
 19418 ;;		line 2398 in file "../src/Dimmer_B1.c"
 19419 ;; Parameters:    Size  Location     Type
 19420 ;;  value           1    wreg     unsigned char 
 19421 ;;  num             1    7[COMMON] unsigned char 
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;  value           1    0[BANK0 ] unsigned char 
 19424 ;;  result          1    1[BANK0 ] unsigned char 
 19425 ;; Return value:  Size  Location     Type
 19426 ;;                  1    wreg      unsigned char 
 19427 ;; Registers used:
 19428 ;;		wreg, status,2, status,0, pclath, cstack
 19429 ;; Tracked objects:
 19430 ;;		On entry : 0/0
 19431 ;;		On exit  : 0/0
 19432 ;;		Unchanged: 0/0
 19433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19434 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19438 ;;Total ram usage:        5 bytes
 19439 ;; Hardware stack levels used:    1
 19440 ;; Hardware stack levels required when called:    4
 19441 ;; This function calls:
 19442 ;;		___lbdiv
 19443 ;; This function is called by:
 19444 ;;		_DimmerIntr_Initialization
 19445 ;;		_DimmerIntr_ValueCalculate
 19446 ;; This function uses a non-reentrant model
 19447 ;;
 19448                           
 19449                           
 19450                           ;psect for function _Division
 19451  18FC                     _Division:	
 19452                           
 19453                           ;incstack = 0
 19454                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19455                           ;Division@value stored from wreg
 19456  18FC  0020               	movlb	0	; select bank0
 19457  18FD  00A0               	movwf	Division@value
 19458                           
 19459                           ;Dimmer_B1.c: 2399: char result = (char) (value / num);
 19460  18FE  0877               	movf	Division@num,w
 19461  18FF  00F8               	movwf	??_Division
 19462  1900  0878               	movf	??_Division,w
 19463  1901  00F2               	movwf	___lbdiv@divisor
 19464  1902  0820               	movf	Division@value,w
 19465  1903  319C  24A5         	fcall	___lbdiv
 19466  1905  00F9               	movwf	??_Division+1
 19467  1906  0879               	movf	??_Division+1,w
 19468  1907  0020               	movlb	0	; select bank0
 19469  1908  00A1               	movwf	Division@result
 19470                           
 19471                           ;Dimmer_B1.c: 2400: return result;
 19472  1909  0821               	movf	Division@result,w
 19473  190A  0008               	return
 19474  190B                     __end_of_Division:	
 19475                           
 19476                           	psect	text133
 19477  1CA5                     __ptext133:	
 19478 ;; *************** function ___lbdiv *****************
 19479 ;; Defined at:
 19480 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;  dividend        1    wreg     unsigned char 
 19483 ;;  divisor         1    2[COMMON] unsigned char 
 19484 ;; Auto vars:     Size  Location     Type
 19485 ;;  dividend        1    4[COMMON] unsigned char 
 19486 ;;  quotient        1    6[COMMON] unsigned char 
 19487 ;;  counter         1    5[COMMON] unsigned char 
 19488 ;; Return value:  Size  Location     Type
 19489 ;;                  1    wreg      unsigned char 
 19490 ;; Registers used:
 19491 ;;		wreg, status,2, status,0
 19492 ;; Tracked objects:
 19493 ;;		On entry : 0/0
 19494 ;;		On exit  : 0/0
 19495 ;;		Unchanged: 0/0
 19496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19497 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19498 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19500 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19501 ;;Total ram usage:        5 bytes
 19502 ;; Hardware stack levels used:    1
 19503 ;; Hardware stack levels required when called:    3
 19504 ;; This function calls:
 19505 ;;		Nothing
 19506 ;; This function is called by:
 19507 ;;		_Division
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           
 19512                           ;psect for function ___lbdiv
 19513  1CA5                     ___lbdiv:	
 19514                           
 19515                           ;incstack = 0
 19516                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19517                           ;___lbdiv@dividend stored from wreg
 19518  1CA5  00F4               	movwf	___lbdiv@dividend
 19519  1CA6  01F6               	clrf	___lbdiv@quotient
 19520  1CA7  0872               	movf	___lbdiv@divisor,w
 19521  1CA8  1903               	btfsc	3,2
 19522  1CA9  2CC4               	goto	l9887
 19523  1CAA  01F5               	clrf	___lbdiv@counter
 19524  1CAB  0AF5               	incf	___lbdiv@counter,f
 19525  1CAC                     l9875:	
 19526  1CAC  1BF2               	btfsc	___lbdiv@divisor,7
 19527  1CAD  2CB5               	goto	l9877
 19528  1CAE  1003               	clrc
 19529  1CAF  0DF2               	rlf	___lbdiv@divisor,f
 19530  1CB0  3001               	movlw	1
 19531  1CB1  00F3               	movwf	??___lbdiv
 19532  1CB2  0873               	movf	??___lbdiv,w
 19533  1CB3  07F5               	addwf	___lbdiv@counter,f
 19534  1CB4  2CAC               	goto	l9875
 19535  1CB5                     l9877:	
 19536  1CB5  1003               	clrc
 19537  1CB6  0DF6               	rlf	___lbdiv@quotient,f
 19538  1CB7  0872               	movf	___lbdiv@divisor,w
 19539  1CB8  0274               	subwf	___lbdiv@dividend,w
 19540  1CB9  1C03               	skipc
 19541  1CBA  2CBF               	goto	L14
 19542  1CBB  0872               	movf	___lbdiv@divisor,w
 19543  1CBC  02F4               	subwf	___lbdiv@dividend,f
 19544  1CBD  1476               	bsf	___lbdiv@quotient,0
 19545  1CBE  1003               	clrc
 19546  1CBF                     L14:	
 19547  1CBF  0CF2               	rrf	___lbdiv@divisor,f
 19548  1CC0  3001               	movlw	1
 19549  1CC1  02F5               	subwf	___lbdiv@counter,f
 19550  1CC2  1D03               	btfss	3,2
 19551  1CC3  2CB5               	goto	l9877
 19552  1CC4                     l9887:	
 19553  1CC4  0876               	movf	___lbdiv@quotient,w
 19554  1CC5  0008               	return
 19555  1CC6                     __end_of___lbdiv:	
 19556                           
 19557                           	psect	text134
 19558  1821                     __ptext134:	
 19559 ;; *************** function _DelayOff_Main *****************
 19560 ;; Defined at:
 19561 ;;		line 41 in file "../src/DelayOff_B1.c"
 19562 ;; Parameters:    Size  Location     Type
 19563 ;;		None
 19564 ;; Auto vars:     Size  Location     Type
 19565 ;;		None
 19566 ;; Return value:  Size  Location     Type
 19567 ;;		None               void
 19568 ;; Registers used:
 19569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19570 ;; Tracked objects:
 19571 ;;		On entry : 0/0
 19572 ;;		On exit  : 0/0
 19573 ;;		Unchanged: 0/0
 19574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19579 ;;Total ram usage:        0 bytes
 19580 ;; Hardware stack levels used:    1
 19581 ;; Hardware stack levels required when called:    7
 19582 ;; This function calls:
 19583 ;;		_DlyOff_Main
 19584 ;; This function is called by:
 19585 ;;		_main
 19586 ;; This function uses a non-reentrant model
 19587 ;;
 19588                           
 19589                           
 19590                           ;psect for function _DelayOff_Main
 19591  1821                     _DelayOff_Main:	
 19592                           
 19593                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19594                           
 19595                           ;incstack = 0
 19596                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19597  1821  3001               	movlw	1
 19598  1822  3188  20F9  3198   	fcall	_DlyOff_Main
 19599                           
 19600                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19601  1825  3002               	movlw	2
 19602  1826  3188  20F9         	fcall	_DlyOff_Main
 19603  1828  0008               	return
 19604  1829                     __end_of_DelayOff_Main:	
 19605                           
 19606                           	psect	text135
 19607  08F9                     __ptext135:	
 19608 ;; *************** function _DlyOff_Main *****************
 19609 ;; Defined at:
 19610 ;;		line 61 in file "../src/DelayOff_B1.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;  sw              1    wreg     unsigned char 
 19613 ;; Auto vars:     Size  Location     Type
 19614 ;;  sw              1   63[BANK0 ] unsigned char 
 19615 ;; Return value:  Size  Location     Type
 19616 ;;		None               void
 19617 ;; Registers used:
 19618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/0
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;Total ram usage:        3 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:    6
 19631 ;; This function calls:
 19632 ;;		_DelayOffPointSelect
 19633 ;;		_getDimmerLights_Status
 19634 ;;		_setDimmerLights_SwOff
 19635 ;;		_setDimmerLights_SwOn
 19636 ;;		_setProductData
 19637 ;; This function is called by:
 19638 ;;		_DelayOff_Main
 19639 ;; This function uses a non-reentrant model
 19640 ;;
 19641                           
 19642                           
 19643                           ;psect for function _DlyOff_Main
 19644  08F9                     _DlyOff_Main:	
 19645                           
 19646                           ;incstack = 0
 19647                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19648                           ;DlyOff_Main@sw stored from wreg
 19649  08F9  0020               	movlb	0	; select bank0
 19650  08FA  00DF               	movwf	DlyOff_Main@sw
 19651                           
 19652                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19653  08FB  085F               	movf	DlyOff_Main@sw,w
 19654  08FC  319A  2223  3188   	fcall	_DelayOffPointSelect
 19655                           
 19656                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19657  08FF  0021               	movlb	1	; select bank1
 19658  0900  086A               	movf	_DelayOff^(0+128),w
 19659  0901  0086               	movwf	6
 19660  0902  3001               	movlw	1	; select bank2/3
 19661  0903  0087               	movwf	7
 19662  0904  1C81               	btfss	1,1
 19663  0905  0008               	return
 19664                           
 19665                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19666  0906  086A               	movf	_DelayOff^(0+128),w
 19667  0907  3E02               	addlw	2
 19668  0908  0086               	movwf	6
 19669  0909  3001               	movlw	1	; select bank2/3
 19670  090A  0087               	movwf	7
 19671  090B  3001               	movlw	1
 19672  090C  0781               	addwf	1,f
 19673  090D  3141               	addfsr 1,1
 19674  090E  1803               	skipnc
 19675  090F  0A81               	incf	1,f
 19676                           
 19677                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 19678  0910  086A               	movf	_DelayOff^(0+128),w
 19679  0911  3E02               	addlw	2
 19680  0912  0086               	movwf	6
 19681  0913  3001               	movlw	1	; select bank2/3
 19682  0914  0087               	movwf	7
 19683  0915  3F40               	moviw [0]fsr1
 19684  0916  0020               	movlb	0	; select bank0
 19685  0917  00DD               	movwf	??_DlyOff_Main
 19686  0918  3F41               	moviw [1]fsr1
 19687  0919  00DE               	movwf	??_DlyOff_Main+1
 19688  091A  3009               	movlw	9
 19689  091B  025E               	subwf	??_DlyOff_Main+1,w
 19690  091C  30C4               	movlw	196
 19691  091D  1903               	skipnz
 19692  091E  025D               	subwf	??_DlyOff_Main,w
 19693  091F  1C03               	skipc
 19694  0920  0008               	return
 19695                           
 19696                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19697  0921  0021               	movlb	1	; select bank1
 19698  0922  086A               	movf	_DelayOff^(0+128),w
 19699  0923  3E02               	addlw	2
 19700  0924  0086               	movwf	6
 19701  0925  3001               	movlw	1	; select bank2/3
 19702  0926  0087               	movwf	7
 19703  0927  3000               	movlw	0
 19704  0928  3FC0               	movwi [0]fsr1
 19705  0929  3FC1               	movwi [1]fsr1
 19706                           
 19707                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19708  092A  3001               	movlw	1
 19709  092B  0020               	movlb	0	; select bank0
 19710  092C  00DD               	movwf	??_DlyOff_Main
 19711  092D  0021               	movlb	1	; select bank1
 19712  092E  086A               	movf	_DelayOff^(0+128),w
 19713  092F  3E04               	addlw	4
 19714  0930  0086               	movwf	6
 19715  0931  3001               	movlw	1	; select bank2/3
 19716  0932  0087               	movwf	7
 19717  0933  0020               	movlb	0	; select bank0
 19718  0934  085D               	movf	??_DlyOff_Main,w
 19719  0935  0781               	addwf	1,f
 19720                           
 19721                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19722  0936  0021               	movlb	1	; select bank1
 19723  0937  086A               	movf	_DelayOff^(0+128),w
 19724  0938  3E04               	addlw	4
 19725  0939  0086               	movwf	6
 19726  093A  3001               	movlw	1	; select bank2/3
 19727  093B  0087               	movwf	7
 19728  093C  0A6A               	incf	_DelayOff^(0+128),w
 19729  093D  0084               	movwf	4
 19730  093E  3001               	movlw	1	; select bank2/3
 19731  093F  0085               	movwf	5
 19732  0940  0800               	movf	0,w
 19733  0941  0201               	subwf	1,w
 19734  0942  1C03               	skipc
 19735  0943  0008               	return
 19736                           
 19737                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19738  0944  086A               	movf	_DelayOff^(0+128),w
 19739  0945  3E04               	addlw	4
 19740  0946  0086               	movwf	6
 19741  0947  3001               	movlw	1	; select bank2/3
 19742  0948  0087               	movwf	7
 19743  0949  0181               	clrf	1
 19744                           
 19745                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19746  094A  086A               	movf	_DelayOff^(0+128),w
 19747  094B  0086               	movwf	6
 19748  094C  3001               	movlw	1	; select bank2/3
 19749  094D  0087               	movwf	7
 19750  094E  1081               	bcf	1,1
 19751                           
 19752                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19753  094F  0020               	movlb	0	; select bank0
 19754  0950  085F               	movf	DlyOff_Main@sw,w
 19755  0951  3198  20ED  3188   	fcall	_getDimmerLights_Status
 19756  0954  3A01               	xorlw	1
 19757  0955  1D03               	skipz
 19758  0956  2961               	goto	l589
 19759                           
 19760                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19761  0957  0020               	movlb	0	; select bank0
 19762  0958  085F               	movf	DlyOff_Main@sw,w
 19763  0959  3187  2784  3188   	fcall	_setDimmerLights_SwOn
 19764                           
 19765                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19766  095C  0020               	movlb	0	; select bank0
 19767  095D  085F               	movf	DlyOff_Main@sw,w
 19768  095E  3191  2122  3188   	fcall	_setDimmerLights_SwOff
 19769  0961                     l589:	
 19770                           
 19771                           ;DelayOff_B1.c: 78: }
 19772                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19773  0961  0020               	movlb	0	; select bank0
 19774  0962  01DA               	clrf	setProductData@value
 19775  0963  085F               	movf	DlyOff_Main@sw,w
 19776  0964  3E1A               	addlw	26
 19777  0965  3198  20A3         	fcall	_setProductData
 19778  0967  0008               	return
 19779  0968                     __end_of_DlyOff_Main:	
 19780                           
 19781                           	psect	text136
 19782  18A3                     __ptext136:	
 19783 ;; *************** function _setProductData *****************
 19784 ;; Defined at:
 19785 ;;		line 650 in file "../src/Main_B1.c"
 19786 ;; Parameters:    Size  Location     Type
 19787 ;;  address         1    wreg     unsigned char 
 19788 ;;  value           1   58[BANK0 ] unsigned char 
 19789 ;; Auto vars:     Size  Location     Type
 19790 ;;  address         1   60[BANK0 ] unsigned char 
 19791 ;; Return value:  Size  Location     Type
 19792 ;;		None               void
 19793 ;; Registers used:
 19794 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19795 ;; Tracked objects:
 19796 ;;		On entry : 0/0
 19797 ;;		On exit  : 0/0
 19798 ;;		Unchanged: 0/0
 19799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19800 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19803 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19804 ;;Total ram usage:        3 bytes
 19805 ;; Hardware stack levels used:    1
 19806 ;; Hardware stack levels required when called:    3
 19807 ;; This function calls:
 19808 ;;		Nothing
 19809 ;; This function is called by:
 19810 ;;		_DlyOff_Main
 19811 ;;		_setDelayOff_GO
 19812 ;;		_setDimmerLights_OnOff
 19813 ;;		_setDimmerLights_Dimming
 19814 ;;		_setTemp_Main
 19815 ;;		_setLog_Code
 19816 ;;		_setControl_Lights_Table
 19817 ;;		_setRFSW_AdjControl
 19818 ;;		_setRF_DimmerLights
 19819 ;; This function uses a non-reentrant model
 19820 ;;
 19821                           
 19822                           
 19823                           ;psect for function _setProductData
 19824  18A3                     _setProductData:	
 19825                           
 19826                           ;incstack = 0
 19827                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19828                           ;setProductData@address stored from wreg
 19829  18A3  0020               	movlb	0	; select bank0
 19830  18A4  00DC               	movwf	setProductData@address
 19831                           
 19832                           ;Main_B1.c: 651: _product.Data[address] = value;
 19833  18A5  085A               	movf	setProductData@value,w
 19834  18A6  00DB               	movwf	??_setProductData
 19835  18A7  085C               	movf	setProductData@address,w
 19836  18A8  3EA0               	addlw	__product& (0+255)
 19837  18A9  0086               	movwf	6
 19838  18AA  3002               	movlw	2	; select bank5/6
 19839  18AB  0087               	movwf	7
 19840  18AC  085B               	movf	??_setProductData,w
 19841  18AD  0081               	movwf	1
 19842  18AE  0008               	return
 19843  18AF                     __end_of_setProductData:	
 19844                           
 19845                           	psect	text137
 19846  0784                     __ptext137:	
 19847 ;; *************** function _setDimmerLights_SwOn *****************
 19848 ;; Defined at:
 19849 ;;		line 759 in file "../src/Dimmer_B1.c"
 19850 ;; Parameters:    Size  Location     Type
 19851 ;;  sw              1    wreg     unsigned char 
 19852 ;; Auto vars:     Size  Location     Type
 19853 ;;  sw              1   10[BANK0 ] unsigned char 
 19854 ;;  idle            1    9[BANK0 ] unsigned char 
 19855 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
 19856 ;; Return value:  Size  Location     Type
 19857 ;;		None               void
 19858 ;; Registers used:
 19859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19860 ;; Tracked objects:
 19861 ;;		On entry : 0/0
 19862 ;;		On exit  : 0/0
 19863 ;;		Unchanged: 0/0
 19864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19866 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19868 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19869 ;;Total ram usage:        6 bytes
 19870 ;; Hardware stack levels used:    1
 19871 ;; Hardware stack levels required when called:    5
 19872 ;; This function calls:
 19873 ;;		_DimmerLights_SelectPointer
 19874 ;;		_getDimmerIntr_Dimming_Sw
 19875 ;;		_setBuz
 19876 ;; This function is called by:
 19877 ;;		_DlyOff_Main
 19878 ;;		_setControl_Lights_Table
 19879 ;;		_setRFSW_Control
 19880 ;;		_setRFSW_AdjControl
 19881 ;;		_setSw_Main
 19882 ;; This function uses a non-reentrant model
 19883 ;;
 19884                           
 19885                           
 19886                           ;psect for function _setDimmerLights_SwOn
 19887  0784                     _setDimmerLights_SwOn:	
 19888                           
 19889                           ;incstack = 0
 19890                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19891                           ;setDimmerLights_SwOn@sw stored from wreg
 19892  0784  0020               	movlb	0	; select bank0
 19893  0785  00AA               	movwf	setDimmerLights_SwOn@sw
 19894                           
 19895                           ;Dimmer_B1.c: 760: char idle = 0;
 19896  0786  01A9               	clrf	setDimmerLights_SwOn@idle
 19897                           
 19898                           ;Dimmer_B1.c: 762: char dimmingStatus = 0;
 19899  0787  01A6               	clrf	setDimmerLights_SwOn@dimmingStatus
 19900                           
 19901                           ;Dimmer_B1.c: 763: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19902  0788  082A               	movf	setDimmerLights_SwOn@sw,w
 19903  0789  319A  22E0  3187   	fcall	_getDimmerIntr_Dimming_Sw
 19904  078C  00F9               	movwf	??_setDimmerLights_SwOn
 19905  078D  0879               	movf	??_setDimmerLights_SwOn,w
 19906  078E  0020               	movlb	0	; select bank0
 19907  078F  00A6               	movwf	setDimmerLights_SwOn@dimmingStatus
 19908                           
 19909                           ;Dimmer_B1.c: 767: if (idle == 0) {
 19910  0790  08A9               	movf	setDimmerLights_SwOn@idle,f
 19911  0791  1D03               	skipz
 19912  0792  2FB7               	goto	l9841
 19913                           
 19914                           ;Dimmer_B1.c: 768: if (sw == 1) {
 19915  0793  082A               	movf	setDimmerLights_SwOn@sw,w
 19916  0794  3A01               	xorlw	1
 19917  0795  1D03               	skipz
 19918  0796  2FA4               	goto	l9831
 19919                           
 19920                           ;Dimmer_B1.c: 769: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19921  0797  01A7               	clrf	_setDimmerLights_SwOn$2659
 19922  0798  0AA7               	incf	_setDimmerLights_SwOn$2659,f
 19923  0799  0023               	movlb	3	; select bank3
 19924  079A  1A47               	btfsc	_DimmerLights2^(0+384),4
 19925  079B  2FA1               	goto	l9829
 19926  079C  0021               	movlb	1	; select bank1
 19927  079D  1A30               	btfsc	_DimmerIntr2^(0+128),4
 19928  079E  2FA1               	goto	l9829
 19929  079F  0020               	movlb	0	; select bank0
 19930  07A0  01A7               	clrf	_setDimmerLights_SwOn$2659
 19931  07A1                     l9829:	
 19932  07A1  0020               	movlb	0	; select bank0
 19933  07A2  0827               	movf	_setDimmerLights_SwOn$2659,w
 19934  07A3  2FB4               	goto	L15
 19935  07A4                     l9831:	
 19936                           ;Dimmer_B1.c: 770: } else if (sw == 2) {
 19937                           
 19938  07A4  082A               	movf	setDimmerLights_SwOn@sw,w
 19939  07A5  3A02               	xorlw	2
 19940  07A6  1D03               	skipz
 19941  07A7  2FB7               	goto	l9841
 19942                           
 19943                           ;Dimmer_B1.c: 771: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19944  07A8  01A8               	clrf	_setDimmerLights_SwOn$2668
 19945  07A9  0AA8               	incf	_setDimmerLights_SwOn$2668,f
 19946  07AA  0023               	movlb	3	; select bank3
 19947  07AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 19948  07AC  2FB2               	goto	l9839
 19949  07AD  0021               	movlb	1	; select bank1
 19950  07AE  1A20               	btfsc	_DimmerIntr1^(0+128),4
 19951  07AF  2FB2               	goto	l9839
 19952  07B0  0020               	movlb	0	; select bank0
 19953  07B1  01A8               	clrf	_setDimmerLights_SwOn$2668
 19954  07B2                     l9839:	
 19955  07B2  0020               	movlb	0	; select bank0
 19956  07B3  0828               	movf	_setDimmerLights_SwOn$2668,w
 19957  07B4                     L15:	
 19958  07B4  00F9               	movwf	??_setDimmerLights_SwOn
 19959  07B5  0879               	movf	??_setDimmerLights_SwOn,w
 19960  07B6  00A9               	movwf	setDimmerLights_SwOn@idle
 19961  07B7                     l9841:	
 19962                           
 19963                           ;Dimmer_B1.c: 772: }
 19964                           ;Dimmer_B1.c: 773: }
 19965                           ;Dimmer_B1.c: 790: DimmerLights_SelectPointer(sw);
 19966  07B7  082A               	movf	setDimmerLights_SwOn@sw,w
 19967  07B8  319A  2238  3187   	fcall	_DimmerLights_SelectPointer
 19968                           
 19969                           ;Dimmer_B1.c: 791: if (idle == 0) {
 19970  07BB  0020               	movlb	0	; select bank0
 19971  07BC  08A9               	movf	setDimmerLights_SwOn@idle,f
 19972  07BD  1D03               	skipz
 19973  07BE  0008               	return
 19974                           
 19975                           ;Dimmer_B1.c: 793: if (dimmingStatus == 0) {
 19976  07BF  08A6               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19977  07C0  1D03               	skipz
 19978  07C1  2FE5               	goto	l9853
 19979                           
 19980                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 1;
 19981  07C2  086C               	movf	_DimmerLights,w
 19982  07C3  0086               	movwf	6
 19983  07C4  3001               	movlw	1	; select bank2/3
 19984  07C5  0087               	movwf	7
 19985  07C6  1401               	bsf	1,0
 19986                           
 19987                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 0) {
 19988  07C7  0A6C               	incf	_DimmerLights,w
 19989  07C8  0086               	movwf	6
 19990  07C9  3001               	movlw	1	; select bank2/3
 19991  07CA  0087               	movwf	7
 19992  07CB  1801               	btfsc	1,0
 19993  07CC  2FDF               	goto	l9851
 19994                           
 19995                           ;Dimmer_B1.c: 796: DimmerLights->Status = 1;
 19996  07CD  0A6C               	incf	_DimmerLights,w
 19997  07CE  0086               	movwf	6
 19998  07CF  3001               	movlw	1	; select bank2/3
 19999  07D0  0087               	movwf	7
 20000  07D1  1401               	bsf	1,0
 20001                           
 20002                           ;Dimmer_B1.c: 802: DimmerLights->Phase = 1;
 20003  07D2  086C               	movf	_DimmerLights,w
 20004  07D3  3E02               	addlw	2
 20005  07D4  0086               	movwf	6
 20006  07D5  3001               	movlw	1	; select bank2/3
 20007  07D6  0087               	movwf	7
 20008  07D7  1401               	bsf	1,0
 20009                           
 20010                           ;Dimmer_B1.c: 803: DimmerLights->PhaseSwitch = 1;
 20011  07D8  086C               	movf	_DimmerLights,w
 20012  07D9  3E02               	addlw	2
 20013  07DA  0086               	movwf	6
 20014  07DB  3001               	movlw	1	; select bank2/3
 20015  07DC  0087               	movwf	7
 20016  07DD  1501               	bsf	1,2
 20017                           
 20018                           ;Dimmer_B1.c: 807: } else {
 20019  07DE  2FEF               	goto	l9855
 20020  07DF                     l9851:	
 20021                           
 20022                           ;Dimmer_B1.c: 808: DimmerLights->Status = 0;
 20023  07DF  0A6C               	incf	_DimmerLights,w
 20024  07E0  0086               	movwf	6
 20025  07E1  3001               	movlw	1	; select bank2/3
 20026  07E2  0087               	movwf	7
 20027  07E3  1001               	bcf	1,0
 20028                           
 20029                           ;Dimmer_B1.c: 809: }
 20030                           ;Dimmer_B1.c: 810: } else {
 20031  07E4  2FEF               	goto	l9855
 20032  07E5                     l9853:	
 20033                           
 20034                           ;Dimmer_B1.c: 811: DimmerLights->DimmingTrigger = 1;
 20035  07E5  086C               	movf	_DimmerLights,w
 20036  07E6  0086               	movwf	6
 20037  07E7  3001               	movlw	1	; select bank2/3
 20038  07E8  0087               	movwf	7
 20039  07E9  1601               	bsf	1,4
 20040                           
 20041                           ;Dimmer_B1.c: 812: DimmerLights->DimmingSwitch = 0;
 20042  07EA  086C               	movf	_DimmerLights,w
 20043  07EB  0086               	movwf	6
 20044  07EC  3001               	movlw	1	; select bank2/3
 20045  07ED  0087               	movwf	7
 20046  07EE  1281               	bcf	1,5
 20047  07EF                     l9855:	
 20048                           
 20049                           ;Dimmer_B1.c: 813: }
 20050                           ;Dimmer_B1.c: 814: setBuz(1, 100);
 20051  07EF  3064               	movlw	100
 20052  07F0  00A4               	movwf	setBuz@time
 20053  07F1  3000               	movlw	0
 20054  07F2  00A5               	movwf	setBuz@time+1
 20055  07F3  3001               	movlw	1
 20056  07F4  3192  22EC         	fcall	_setBuz
 20057  07F6  0008               	return
 20058  07F7                     __end_of_setDimmerLights_SwOn:	
 20059                           
 20060                           	psect	text138
 20061  12EC                     __ptext138:	
 20062 ;; *************** function _setBuz *****************
 20063 ;; Defined at:
 20064 ;;		line 22 in file "../src/Buzzer_B1.c"
 20065 ;; Parameters:    Size  Location     Type
 20066 ;;  count           1    wreg     unsigned char 
 20067 ;;  time            2    4[BANK0 ] int 
 20068 ;; Auto vars:     Size  Location     Type
 20069 ;;  count           1    8[COMMON] unsigned char 
 20070 ;; Return value:  Size  Location     Type
 20071 ;;		None               void
 20072 ;; Registers used:
 20073 ;;		wreg, status,2, status,0, pclath, cstack
 20074 ;; Tracked objects:
 20075 ;;		On entry : 0/0
 20076 ;;		On exit  : 0/0
 20077 ;;		Unchanged: 0/0
 20078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20082 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20083 ;;Total ram usage:        4 bytes
 20084 ;; Hardware stack levels used:    1
 20085 ;; Hardware stack levels required when called:    4
 20086 ;; This function calls:
 20087 ;;		___awdiv
 20088 ;; This function is called by:
 20089 ;;		_setDimmerLights_SwOn
 20090 ;;		_setDimmerLights_Dimming
 20091 ;;		_my_MainTimer
 20092 ;;		_Exception_Main
 20093 ;;		_setTemp_Main
 20094 ;;		_setLog_Code
 20095 ;;		_setRFSW_Control
 20096 ;;		_setRFSW_AdjControl
 20097 ;;		_setSw_Main
 20098 ;; This function uses a non-reentrant model
 20099 ;;
 20100                           
 20101                           
 20102                           ;psect for function _setBuz
 20103  12EC                     _setBuz:	
 20104                           
 20105                           ;incstack = 0
 20106                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20107                           ;setBuz@count stored from wreg
 20108  12EC  00F8               	movwf	setBuz@count
 20109                           
 20110                           ;Buzzer_B1.c: 23: time /= 20;
 20111  12ED  3014               	movlw	20
 20112  12EE  00F2               	movwf	___awdiv@divisor
 20113  12EF  3000               	movlw	0
 20114  12F0  00F3               	movwf	___awdiv@divisor+1
 20115  12F1  0020               	movlb	0	; select bank0
 20116  12F2  0825               	movf	setBuz@time+1,w
 20117  12F3  01F5               	clrf	___awdiv@dividend+1
 20118  12F4  07F5               	addwf	___awdiv@dividend+1,f
 20119  12F5  0824               	movf	setBuz@time,w
 20120  12F6  01F4               	clrf	___awdiv@dividend
 20121  12F7  07F4               	addwf	___awdiv@dividend,f
 20122  12F8  3193  233F  3192   	fcall	___awdiv
 20123  12FB  0873               	movf	?___awdiv+1,w
 20124  12FC  0020               	movlb	0	; select bank0
 20125  12FD  01A5               	clrf	setBuz@time+1
 20126  12FE  07A5               	addwf	setBuz@time+1,f
 20127  12FF  0872               	movf	?___awdiv,w
 20128  1300  01A4               	clrf	setBuz@time
 20129  1301  07A4               	addwf	setBuz@time,f
 20130                           
 20131                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20132  1302  0021               	movlb	1	; select bank1
 20133  1303  1C5C               	btfss	_Buz1^(0+128),0
 20134  1304  0008               	return
 20135                           
 20136                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20137  1305  18DC               	btfsc	_Buz1^(0+128),1
 20138  1306  2B1B               	goto	l100
 20139                           
 20140                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20141  1307  14DC               	bsf	_Buz1^(0+128),1
 20142                           
 20143                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20144  1308  01DD               	clrf	(_Buz1^(0+128)+1)
 20145  1309  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20146                           
 20147                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20148  130A  0878               	movf	setBuz@count,w
 20149  130B  00F7               	movwf	??_setBuz
 20150  130C  0877               	movf	??_setBuz,w
 20151  130D  00DF               	movwf	(_Buz1^(0+128)+3)
 20152                           
 20153                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20154  130E  0020               	movlb	0	; select bank0
 20155  130F  0825               	movf	setBuz@time+1,w
 20156  1310  0021               	movlb	1	; select bank1
 20157  1311  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20158  1312  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20159  1313  0020               	movlb	0	; select bank0
 20160  1314  0824               	movf	setBuz@time,w
 20161  1315  0021               	movlb	1	; select bank1
 20162  1316  01E2               	clrf	(_Buz1^(0+128)+6)
 20163  1317  07E2               	addwf	(_Buz1^(0+128)+6),f
 20164                           
 20165                           ;Buzzer_B1.c: 30: RB3 = 1;
 20166  1318  0020               	movlb	0	; select bank0
 20167  1319  158D               	bsf	13,3	;volatile
 20168                           
 20169                           ;Buzzer_B1.c: 31: } else {
 20170  131A  0008               	return
 20171  131B                     l100:	
 20172                           
 20173                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20174  131B  19DC               	btfsc	_Buz1^(0+128),3
 20175  131C  2B2D               	goto	l102
 20176                           
 20177                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20178  131D  15DC               	bsf	_Buz1^(0+128),3
 20179                           
 20180                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20181  131E  0878               	movf	setBuz@count,w
 20182  131F  00F7               	movwf	??_setBuz
 20183  1320  0877               	movf	??_setBuz,w
 20184  1321  00E0               	movwf	(_Buz1^(0+128)+4)
 20185                           
 20186                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20187  1322  0020               	movlb	0	; select bank0
 20188  1323  0825               	movf	setBuz@time+1,w
 20189  1324  0021               	movlb	1	; select bank1
 20190  1325  01E5               	clrf	((_Buz1+1)^(0+128)+8)
 20191  1326  07E5               	addwf	((_Buz1+1)^(0+128)+8),f
 20192  1327  0020               	movlb	0	; select bank0
 20193  1328  0824               	movf	setBuz@time,w
 20194  1329  0021               	movlb	1	; select bank1
 20195  132A  01E4               	clrf	(_Buz1^(0+128)+8)
 20196  132B  07E4               	addwf	(_Buz1^(0+128)+8),f
 20197                           
 20198                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20199  132C  0008               	return
 20200  132D                     l102:	
 20201  132D  1A5C               	btfsc	_Buz1^(0+128),4
 20202  132E  0008               	return
 20203                           
 20204                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20205  132F  165C               	bsf	_Buz1^(0+128),4
 20206                           
 20207                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20208  1330  0878               	movf	setBuz@count,w
 20209  1331  00F7               	movwf	??_setBuz
 20210  1332  0877               	movf	??_setBuz,w
 20211  1333  00E1               	movwf	(_Buz1^(0+128)+5)
 20212                           
 20213                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20214  1334  0020               	movlb	0	; select bank0
 20215  1335  0825               	movf	setBuz@time+1,w
 20216  1336  0021               	movlb	1	; select bank1
 20217  1337  01E7               	clrf	((_Buz1+1)^(0+128)+10)
 20218  1338  07E7               	addwf	((_Buz1+1)^(0+128)+10),f
 20219  1339  0020               	movlb	0	; select bank0
 20220  133A  0824               	movf	setBuz@time,w
 20221  133B  0021               	movlb	1	; select bank1
 20222  133C  01E6               	clrf	(_Buz1^(0+128)+10)
 20223  133D  07E6               	addwf	(_Buz1^(0+128)+10),f
 20224  133E  0008               	return
 20225  133F                     __end_of_setBuz:	
 20226                           
 20227                           	psect	text139
 20228  133F                     __ptext139:	
 20229 ;; *************** function ___awdiv *****************
 20230 ;; Defined at:
 20231 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;  divisor         2    2[COMMON] int 
 20234 ;;  dividend        2    4[COMMON] int 
 20235 ;; Auto vars:     Size  Location     Type
 20236 ;;  quotient        2    2[BANK0 ] int 
 20237 ;;  sign            1    1[BANK0 ] unsigned char 
 20238 ;;  counter         1    0[BANK0 ] unsigned char 
 20239 ;; Return value:  Size  Location     Type
 20240 ;;                  2    2[COMMON] int 
 20241 ;; Registers used:
 20242 ;;		wreg, status,2, status,0
 20243 ;; Tracked objects:
 20244 ;;		On entry : 0/0
 20245 ;;		On exit  : 0/0
 20246 ;;		Unchanged: 0/0
 20247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20248 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20249 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20251 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20252 ;;Total ram usage:        9 bytes
 20253 ;; Hardware stack levels used:    1
 20254 ;; Hardware stack levels required when called:    3
 20255 ;; This function calls:
 20256 ;;		Nothing
 20257 ;; This function is called by:
 20258 ;;		_setBuz
 20259 ;; This function uses a non-reentrant model
 20260 ;;
 20261                           
 20262                           
 20263                           ;psect for function ___awdiv
 20264  133F                     ___awdiv:	
 20265                           
 20266                           ;incstack = 0
 20267                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20268  133F  0020               	movlb	0	; select bank0
 20269  1340  01A1               	clrf	___awdiv@sign
 20270  1341  1FF3               	btfss	___awdiv@divisor+1,7
 20271  1342  2B4A               	goto	l9713
 20272  1343  09F2               	comf	___awdiv@divisor,f
 20273  1344  09F3               	comf	___awdiv@divisor+1,f
 20274  1345  0AF2               	incf	___awdiv@divisor,f
 20275  1346  1903               	skipnz
 20276  1347  0AF3               	incf	___awdiv@divisor+1,f
 20277  1348  01A1               	clrf	___awdiv@sign
 20278  1349  0AA1               	incf	___awdiv@sign,f
 20279  134A                     l9713:	
 20280  134A  1FF5               	btfss	___awdiv@dividend+1,7
 20281  134B  2B55               	goto	l9719
 20282  134C  09F4               	comf	___awdiv@dividend,f
 20283  134D  09F5               	comf	___awdiv@dividend+1,f
 20284  134E  0AF4               	incf	___awdiv@dividend,f
 20285  134F  1903               	skipnz
 20286  1350  0AF5               	incf	___awdiv@dividend+1,f
 20287  1351  3001               	movlw	1
 20288  1352  00F6               	movwf	??___awdiv
 20289  1353  0876               	movf	??___awdiv,w
 20290  1354  06A1               	xorwf	___awdiv@sign,f
 20291  1355                     l9719:	
 20292  1355  01A2               	clrf	___awdiv@quotient
 20293  1356  01A3               	clrf	___awdiv@quotient+1
 20294  1357  0873               	movf	___awdiv@divisor+1,w
 20295  1358  0472               	iorwf	___awdiv@divisor,w
 20296  1359  1903               	skipnz
 20297  135A  2B84               	goto	l9741
 20298  135B  01A0               	clrf	___awdiv@counter
 20299  135C  0AA0               	incf	___awdiv@counter,f
 20300  135D                     l9729:	
 20301  135D  1BF3               	btfsc	___awdiv@divisor+1,7
 20302  135E  2B69               	goto	l9731
 20303  135F  3001               	movlw	1
 20304  1360                     u10585:	
 20305  1360  35F2               	lslf	___awdiv@divisor,f
 20306  1361  0DF3               	rlf	___awdiv@divisor+1,f
 20307  1362  0B89               	decfsz	9,f
 20308  1363  2B60               	goto	u10585
 20309  1364  3001               	movlw	1
 20310  1365  00F6               	movwf	??___awdiv
 20311  1366  0876               	movf	??___awdiv,w
 20312  1367  07A0               	addwf	___awdiv@counter,f
 20313  1368  2B5D               	goto	l9729
 20314  1369                     l9731:	
 20315  1369  3001               	movlw	1
 20316  136A                     u10605:	
 20317  136A  35A2               	lslf	___awdiv@quotient,f
 20318  136B  0DA3               	rlf	___awdiv@quotient+1,f
 20319  136C  0B89               	decfsz	9,f
 20320  136D  2B6A               	goto	u10605
 20321  136E  0873               	movf	___awdiv@divisor+1,w
 20322  136F  0275               	subwf	___awdiv@dividend+1,w
 20323  1370  1D03               	skipz
 20324  1371  2B74               	goto	u10615
 20325  1372  0872               	movf	___awdiv@divisor,w
 20326  1373  0274               	subwf	___awdiv@dividend,w
 20327  1374                     u10615:	
 20328  1374  1C03               	skipc
 20329  1375  2B7B               	goto	l9737
 20330  1376  0872               	movf	___awdiv@divisor,w
 20331  1377  02F4               	subwf	___awdiv@dividend,f
 20332  1378  0873               	movf	___awdiv@divisor+1,w
 20333  1379  3BF5               	subwfb	___awdiv@dividend+1,f
 20334  137A  1422               	bsf	___awdiv@quotient,0
 20335  137B                     l9737:	
 20336  137B  3001               	movlw	1
 20337  137C                     u10625:	
 20338  137C  36F3               	lsrf	___awdiv@divisor+1,f
 20339  137D  0CF2               	rrf	___awdiv@divisor,f
 20340  137E  0B89               	decfsz	9,f
 20341  137F  2B7C               	goto	u10625
 20342  1380  3001               	movlw	1
 20343  1381  02A0               	subwf	___awdiv@counter,f
 20344  1382  1D03               	btfss	3,2
 20345  1383  2B69               	goto	l9731
 20346  1384                     l9741:	
 20347  1384  0821               	movf	___awdiv@sign,w
 20348  1385  1903               	btfsc	3,2
 20349  1386  2B8C               	goto	l9745
 20350  1387  09A2               	comf	___awdiv@quotient,f
 20351  1388  09A3               	comf	___awdiv@quotient+1,f
 20352  1389  0AA2               	incf	___awdiv@quotient,f
 20353  138A  1903               	skipnz
 20354  138B  0AA3               	incf	___awdiv@quotient+1,f
 20355  138C                     l9745:	
 20356  138C  0823               	movf	___awdiv@quotient+1,w
 20357  138D  01F3               	clrf	?___awdiv+1
 20358  138E  07F3               	addwf	?___awdiv+1,f
 20359  138F  0822               	movf	___awdiv@quotient,w
 20360  1390  01F2               	clrf	?___awdiv
 20361  1391  07F2               	addwf	?___awdiv,f
 20362  1392  0008               	return
 20363  1393                     __end_of___awdiv:	
 20364                           
 20365                           	psect	text140
 20366  1AE0                     __ptext140:	
 20367 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20368 ;; Defined at:
 20369 ;;		line 269 in file "../src/Dimmer_B1.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;  lights          1    wreg     unsigned char 
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;  lights          1    3[COMMON] unsigned char 
 20374 ;;  status          1    2[COMMON] unsigned char 
 20375 ;; Return value:  Size  Location     Type
 20376 ;;                  1    wreg      unsigned char 
 20377 ;; Registers used:
 20378 ;;		wreg, status,2
 20379 ;; Tracked objects:
 20380 ;;		On entry : 0/0
 20381 ;;		On exit  : 0/0
 20382 ;;		Unchanged: 0/0
 20383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20388 ;;Total ram usage:        2 bytes
 20389 ;; Hardware stack levels used:    1
 20390 ;; Hardware stack levels required when called:    3
 20391 ;; This function calls:
 20392 ;;		Nothing
 20393 ;; This function is called by:
 20394 ;;		_setDimmerLights_SwOn
 20395 ;;		_setRF_AdjControl
 20396 ;; This function uses a non-reentrant model
 20397 ;;
 20398                           
 20399                           
 20400                           ;psect for function _getDimmerIntr_Dimming_Sw
 20401  1AE0                     _getDimmerIntr_Dimming_Sw:	
 20402                           
 20403                           ;incstack = 0
 20404                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20405                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20406  1AE0  00F3               	movwf	getDimmerIntr_Dimming_Sw@lights
 20407                           
 20408                           ;Dimmer_B1.c: 270: char status = 0;
 20409  1AE1  01F2               	clrf	getDimmerIntr_Dimming_Sw@status
 20410                           
 20411                           ;Dimmer_B1.c: 272: if (lights == 1) {
 20412  1AE2  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20413  1AE3  3A01               	xorlw	1
 20414  1AE4  1D03               	skipz
 20415  1AE5  2AEB               	goto	l6735
 20416                           
 20417                           ;Dimmer_B1.c: 273: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20418  1AE6  3000               	movlw	0
 20419  1AE7  0021               	movlb	1	; select bank1
 20420  1AE8  1A20               	btfsc	_DimmerIntr1^(0+128),4
 20421  1AE9  3001               	movlw	1
 20422  1AEA  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20423  1AEB                     l6735:	
 20424                           
 20425                           ;Dimmer_B1.c: 274: }
 20426                           ;Dimmer_B1.c: 277: if (lights == 2) {
 20427  1AEB  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20428  1AEC  3A02               	xorlw	2
 20429  1AED  1D03               	skipz
 20430  1AEE  2AF4               	goto	l6739
 20431                           
 20432                           ;Dimmer_B1.c: 278: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20433  1AEF  3000               	movlw	0
 20434  1AF0  0021               	movlb	1	; select bank1
 20435  1AF1  1A30               	btfsc	_DimmerIntr2^(0+128),4
 20436  1AF2  3001               	movlw	1
 20437  1AF3  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20438  1AF4                     l6739:	
 20439                           
 20440                           ;Dimmer_B1.c: 279: }
 20441                           ;Dimmer_B1.c: 287: return status;
 20442  1AF4  0872               	movf	getDimmerIntr_Dimming_Sw@status,w
 20443  1AF5  0008               	return
 20444  1AF6                     __end_of_getDimmerIntr_Dimming_Sw:	
 20445                           
 20446                           	psect	text141
 20447  1122                     __ptext141:	
 20448 ;; *************** function _setDimmerLights_SwOff *****************
 20449 ;; Defined at:
 20450 ;;		line 819 in file "../src/Dimmer_B1.c"
 20451 ;; Parameters:    Size  Location     Type
 20452 ;;  sw              1    wreg     unsigned char 
 20453 ;; Auto vars:     Size  Location     Type
 20454 ;;  sw              1    4[COMMON] unsigned char 
 20455 ;; Return value:  Size  Location     Type
 20456 ;;		None               void
 20457 ;; Registers used:
 20458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20459 ;; Tracked objects:
 20460 ;;		On entry : 0/0
 20461 ;;		On exit  : 0/0
 20462 ;;		Unchanged: 0/0
 20463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20467 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20468 ;;Total ram usage:        1 bytes
 20469 ;; Hardware stack levels used:    1
 20470 ;; Hardware stack levels required when called:    4
 20471 ;; This function calls:
 20472 ;;		_DimmerLights_SelectPointer
 20473 ;; This function is called by:
 20474 ;;		_DlyOff_Main
 20475 ;;		_Exception_Main
 20476 ;;		_setControl_Lights_Table
 20477 ;;		_setRFSW_Control
 20478 ;;		_setRFSW_AdjControl
 20479 ;;		_setSw_Main
 20480 ;; This function uses a non-reentrant model
 20481 ;;
 20482                           
 20483                           
 20484                           ;psect for function _setDimmerLights_SwOff
 20485  1122                     _setDimmerLights_SwOff:	
 20486                           
 20487                           ;incstack = 0
 20488                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20489                           ;setDimmerLights_SwOff@sw stored from wreg
 20490  1122  00F4               	movwf	setDimmerLights_SwOff@sw
 20491                           
 20492                           ;Dimmer_B1.c: 821: DimmerLights_SelectPointer(sw);
 20493  1123  0874               	movf	setDimmerLights_SwOff@sw,w
 20494  1124  319A  2238  3191   	fcall	_DimmerLights_SelectPointer
 20495                           
 20496                           ;Dimmer_B1.c: 823: if (DimmerLights->SwFlag == 1) {
 20497  1127  0020               	movlb	0	; select bank0
 20498  1128  086C               	movf	_DimmerLights,w
 20499  1129  0086               	movwf	6
 20500  112A  3001               	movlw	1	; select bank2/3
 20501  112B  0087               	movwf	7
 20502  112C  1C01               	btfss	1,0
 20503  112D  0008               	return
 20504                           
 20505                           ;Dimmer_B1.c: 824: DimmerLights->SwFlag = 0;
 20506  112E  086C               	movf	_DimmerLights,w
 20507  112F  0086               	movwf	6
 20508  1130  3001               	movlw	1	; select bank2/3
 20509  1131  0087               	movwf	7
 20510  1132  1001               	bcf	1,0
 20511                           
 20512                           ;Dimmer_B1.c: 825: if (DimmerLights->Status == 1) {
 20513  1133  0A6C               	incf	_DimmerLights,w
 20514  1134  0086               	movwf	6
 20515  1135  3001               	movlw	1	; select bank2/3
 20516  1136  0087               	movwf	7
 20517  1137  1C01               	btfss	1,0
 20518  1138  294F               	goto	l7081
 20519                           
 20520                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwFlag == 1) {
 20521  1139  086C               	movf	_DimmerLights,w
 20522  113A  0086               	movwf	6
 20523  113B  3001               	movlw	1	; select bank2/3
 20524  113C  0087               	movwf	7
 20525  113D  1D81               	btfss	1,3
 20526  113E  0008               	return
 20527                           
 20528                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 0;
 20529  113F  086C               	movf	_DimmerLights,w
 20530  1140  0086               	movwf	6
 20531  1141  3001               	movlw	1	; select bank2/3
 20532  1142  0087               	movwf	7
 20533  1143  1181               	bcf	1,3
 20534                           
 20535                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 1;
 20536  1144  086C               	movf	_DimmerLights,w
 20537  1145  0086               	movwf	6
 20538  1146  3001               	movlw	1	; select bank2/3
 20539  1147  0087               	movwf	7
 20540  1148  1601               	bsf	1,4
 20541                           
 20542                           ;Dimmer_B1.c: 830: DimmerLights->DimmingSwitch = 0;
 20543  1149  086C               	movf	_DimmerLights,w
 20544  114A  0086               	movwf	6
 20545  114B  3001               	movlw	1	; select bank2/3
 20546  114C  0087               	movwf	7
 20547  114D  1281               	bcf	1,5
 20548                           
 20549                           ;Dimmer_B1.c: 831: }
 20550                           ;Dimmer_B1.c: 832: } else {
 20551  114E  0008               	return
 20552  114F                     l7081:	
 20553                           
 20554                           ;Dimmer_B1.c: 838: DimmerLights->Phase = 1;
 20555  114F  086C               	movf	_DimmerLights,w
 20556  1150  3E02               	addlw	2
 20557  1151  0086               	movwf	6
 20558  1152  3001               	movlw	1	; select bank2/3
 20559  1153  0087               	movwf	7
 20560  1154  1401               	bsf	1,0
 20561                           
 20562                           ;Dimmer_B1.c: 839: DimmerLights->PhaseSwitch = 0;
 20563  1155  086C               	movf	_DimmerLights,w
 20564  1156  3E02               	addlw	2
 20565  1157  0086               	movwf	6
 20566  1158  3001               	movlw	1	; select bank2/3
 20567  1159  0087               	movwf	7
 20568  115A  1101               	bcf	1,2
 20569  115B  0008               	return
 20570  115C                     __end_of_setDimmerLights_SwOff:	
 20571                           
 20572                           	psect	text142
 20573  18ED                     __ptext142:	
 20574 ;; *************** function _getDimmerLights_Status *****************
 20575 ;; Defined at:
 20576 ;;		line 1266 in file "../src/Dimmer_B1.c"
 20577 ;; Parameters:    Size  Location     Type
 20578 ;;  lights          1    wreg     unsigned char 
 20579 ;; Auto vars:     Size  Location     Type
 20580 ;;  lights          1    4[COMMON] unsigned char 
 20581 ;;  status          1    5[COMMON] unsigned char 
 20582 ;; Return value:  Size  Location     Type
 20583 ;;                  1    wreg      unsigned char 
 20584 ;; Registers used:
 20585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20586 ;; Tracked objects:
 20587 ;;		On entry : 0/0
 20588 ;;		On exit  : 0/0
 20589 ;;		Unchanged: 0/0
 20590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20594 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20595 ;;Total ram usage:        2 bytes
 20596 ;; Hardware stack levels used:    1
 20597 ;; Hardware stack levels required when called:    4
 20598 ;; This function calls:
 20599 ;;		_DimmerLights_SelectPointer
 20600 ;; This function is called by:
 20601 ;;		_DlyOff_Main
 20602 ;;		_DimmerLights_AssignationDimming
 20603 ;;		_Exception_Main
 20604 ;;		_setControl_Lights_Table
 20605 ;;		_setRFSW_Control
 20606 ;;		_setRFSW_AdjControl
 20607 ;;		_setRF_AdjControl
 20608 ;; This function uses a non-reentrant model
 20609 ;;
 20610                           
 20611                           
 20612                           ;psect for function _getDimmerLights_Status
 20613  18ED                     _getDimmerLights_Status:	
 20614                           
 20615                           ;incstack = 0
 20616                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20617                           ;getDimmerLights_Status@lights stored from wreg
 20618  18ED  00F4               	movwf	getDimmerLights_Status@lights
 20619                           
 20620                           ;Dimmer_B1.c: 1267: DimmerLights_SelectPointer(lights);
 20621  18EE  0874               	movf	getDimmerLights_Status@lights,w
 20622  18EF  319A  2238         	fcall	_DimmerLights_SelectPointer
 20623                           
 20624                           ;Dimmer_B1.c: 1268: char status = DimmerLights->Status == 1 ? 1 : 0;
 20625  18F1  0020               	movlb	0	; select bank0
 20626  18F2  0A6C               	incf	_DimmerLights,w
 20627  18F3  0086               	movwf	6
 20628  18F4  3001               	movlw	1	; select bank2/3
 20629  18F5  0087               	movwf	7
 20630  18F6  3000               	movlw	0
 20631  18F7  1801               	btfsc	1,0
 20632  18F8  3001               	movlw	1
 20633  18F9  00F5               	movwf	getDimmerLights_Status@status
 20634                           
 20635                           ;Dimmer_B1.c: 1269: return status;
 20636  18FA  0875               	movf	getDimmerLights_Status@status,w
 20637  18FB  0008               	return
 20638  18FC                     __end_of_getDimmerLights_Status:	
 20639                           
 20640                           	psect	text143
 20641  1A38                     __ptext143:	
 20642 ;; *************** function _DimmerLights_SelectPointer *****************
 20643 ;; Defined at:
 20644 ;;		line 682 in file "../src/Dimmer_B1.c"
 20645 ;; Parameters:    Size  Location     Type
 20646 ;;  lights          1    wreg     unsigned char 
 20647 ;; Auto vars:     Size  Location     Type
 20648 ;;  lights          1    3[COMMON] unsigned char 
 20649 ;; Return value:  Size  Location     Type
 20650 ;;		None               void
 20651 ;; Registers used:
 20652 ;;		wreg
 20653 ;; Tracked objects:
 20654 ;;		On entry : 0/0
 20655 ;;		On exit  : 0/0
 20656 ;;		Unchanged: 0/0
 20657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20661 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20662 ;;Total ram usage:        2 bytes
 20663 ;; Hardware stack levels used:    1
 20664 ;; Hardware stack levels required when called:    3
 20665 ;; This function calls:
 20666 ;;		Nothing
 20667 ;; This function is called by:
 20668 ;;		_setDimmerLights_SwOn
 20669 ;;		_setDimmerLights_SwOff
 20670 ;;		_setDimmerLights_DimmingOn
 20671 ;;		_setDimmerLights_Main
 20672 ;;		_DimmerLights_TwoPhase_Main
 20673 ;;		_getDimmerLights_Status
 20674 ;;		_setDimmerLights_DimmingRun
 20675 ;;		_setRF_AdjControl
 20676 ;;		_setDimmerLights_Status
 20677 ;; This function uses a non-reentrant model
 20678 ;;
 20679                           
 20680                           
 20681                           ;psect for function _DimmerLights_SelectPointer
 20682  1A38                     _DimmerLights_SelectPointer:	
 20683                           
 20684                           ;incstack = 0
 20685                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20686                           ;DimmerLights_SelectPointer@lights stored from wreg
 20687  1A38  00F3               	movwf	DimmerLights_SelectPointer@lights
 20688                           
 20689                           ;Dimmer_B1.c: 684: if (lights == 1) {
 20690  1A39  0873               	movf	DimmerLights_SelectPointer@lights,w
 20691  1A3A  3A01               	xorlw	1
 20692  1A3B  1D03               	skipz
 20693  1A3C  2A43               	goto	l6747
 20694                           
 20695                           ;Dimmer_B1.c: 685: DimmerLights = &DimmerLights1;
 20696  1A3D  30BE               	movlw	_DimmerLights1& (0+255)
 20697  1A3E  00F2               	movwf	??_DimmerLights_SelectPointer
 20698  1A3F  0872               	movf	??_DimmerLights_SelectPointer,w
 20699  1A40  0020               	movlb	0	; select bank0
 20700  1A41  00EC               	movwf	_DimmerLights
 20701                           
 20702                           ;Dimmer_B1.c: 686: }
 20703  1A42  0008               	return
 20704  1A43                     l6747:	
 20705                           
 20706                           ;Dimmer_B1.c: 689: else if (lights == 2) {
 20707  1A43  0873               	movf	DimmerLights_SelectPointer@lights,w
 20708  1A44  3A02               	xorlw	2
 20709  1A45  1D03               	skipz
 20710  1A46  0008               	return
 20711                           
 20712                           ;Dimmer_B1.c: 690: DimmerLights = &DimmerLights2;
 20713  1A47  30C7               	movlw	_DimmerLights2& (0+255)
 20714  1A48  00F2               	movwf	??_DimmerLights_SelectPointer
 20715  1A49  0872               	movf	??_DimmerLights_SelectPointer,w
 20716  1A4A  0020               	movlb	0	; select bank0
 20717  1A4B  00EC               	movwf	_DimmerLights
 20718  1A4C  0008               	return
 20719  1A4D                     __end_of_DimmerLights_SelectPointer:	
 20720                           
 20721                           	psect	text144
 20722  1819                     __ptext144:	
 20723 ;; *************** function _DelayOff_Initialization *****************
 20724 ;; Defined at:
 20725 ;;		line 26 in file "../src/DelayOff_B1.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;		None
 20728 ;; Auto vars:     Size  Location     Type
 20729 ;;		None
 20730 ;; Return value:  Size  Location     Type
 20731 ;;		None               void
 20732 ;; Registers used:
 20733 ;;		wreg, status,2, status,0, pclath, cstack
 20734 ;; Tracked objects:
 20735 ;;		On entry : 0/0
 20736 ;;		On exit  : 0/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20743 ;;Total ram usage:        0 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; Hardware stack levels required when called:    5
 20746 ;; This function calls:
 20747 ;;		_DlyOff_Initialization
 20748 ;; This function is called by:
 20749 ;;		_main
 20750 ;; This function uses a non-reentrant model
 20751 ;;
 20752                           
 20753                           
 20754                           ;psect for function _DelayOff_Initialization
 20755  1819                     _DelayOff_Initialization:	
 20756                           
 20757                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20758                           
 20759                           ;incstack = 0
 20760                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20761  1819  3001               	movlw	1
 20762  181A  31A7  27D5  3198   	fcall	_DlyOff_Initialization
 20763                           
 20764                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20765  181D  3002               	movlw	2
 20766  181E  31A7  27D5         	fcall	_DlyOff_Initialization
 20767  1820  0008               	return
 20768  1821                     __end_of_DelayOff_Initialization:	
 20769                           
 20770                           	psect	text145
 20771  27D5                     __ptext145:	
 20772 ;; *************** function _DlyOff_Initialization *****************
 20773 ;; Defined at:
 20774 ;;		line 56 in file "../src/DelayOff_B1.c"
 20775 ;; Parameters:    Size  Location     Type
 20776 ;;  sw              1    wreg     unsigned char 
 20777 ;; Auto vars:     Size  Location     Type
 20778 ;;  sw              1    4[COMMON] unsigned char 
 20779 ;; Return value:  Size  Location     Type
 20780 ;;		None               void
 20781 ;; Registers used:
 20782 ;;		wreg, status,2, status,0, pclath, cstack
 20783 ;; Tracked objects:
 20784 ;;		On entry : 0/0
 20785 ;;		On exit  : 0/0
 20786 ;;		Unchanged: 0/0
 20787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20791 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20792 ;;Total ram usage:        1 bytes
 20793 ;; Hardware stack levels used:    1
 20794 ;; Hardware stack levels required when called:    4
 20795 ;; This function calls:
 20796 ;;		_DelayOffPointSelect
 20797 ;; This function is called by:
 20798 ;;		_DelayOff_Initialization
 20799 ;; This function uses a non-reentrant model
 20800 ;;
 20801                           
 20802                           
 20803                           ;psect for function _DlyOff_Initialization
 20804  27D5                     _DlyOff_Initialization:	
 20805                           
 20806                           ;incstack = 0
 20807                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20808                           ;DlyOff_Initialization@sw stored from wreg
 20809  27D5  00F4               	movwf	DlyOff_Initialization@sw
 20810                           
 20811                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20812  27D6  0874               	movf	DlyOff_Initialization@sw,w
 20813  27D7  319A  2223         	fcall	_DelayOffPointSelect
 20814  27D9  0008               	return
 20815  27DA                     __end_of_DlyOff_Initialization:	
 20816                           
 20817                           	psect	text146
 20818  1A23                     __ptext146:	
 20819 ;; *************** function _DelayOffPointSelect *****************
 20820 ;; Defined at:
 20821 ;;		line 7 in file "../src/DelayOff_B1.c"
 20822 ;; Parameters:    Size  Location     Type
 20823 ;;  sw              1    wreg     unsigned char 
 20824 ;; Auto vars:     Size  Location     Type
 20825 ;;  sw              1    3[COMMON] unsigned char 
 20826 ;; Return value:  Size  Location     Type
 20827 ;;		None               void
 20828 ;; Registers used:
 20829 ;;		wreg
 20830 ;; Tracked objects:
 20831 ;;		On entry : 0/0
 20832 ;;		On exit  : 0/0
 20833 ;;		Unchanged: 0/0
 20834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20836 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20837 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20838 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20839 ;;Total ram usage:        2 bytes
 20840 ;; Hardware stack levels used:    1
 20841 ;; Hardware stack levels required when called:    3
 20842 ;; This function calls:
 20843 ;;		Nothing
 20844 ;; This function is called by:
 20845 ;;		_DlyOff_Initialization
 20846 ;;		_DlyOff_Main
 20847 ;;		_setDelayOff_GO
 20848 ;;		_getDelayOff_GO
 20849 ;; This function uses a non-reentrant model
 20850 ;;
 20851                           
 20852                           
 20853                           ;psect for function _DelayOffPointSelect
 20854  1A23                     _DelayOffPointSelect:	
 20855                           
 20856                           ;incstack = 0
 20857                           ; Regs used in _DelayOffPointSelect: [wreg]
 20858                           ;DelayOffPointSelect@sw stored from wreg
 20859  1A23  00F3               	movwf	DelayOffPointSelect@sw
 20860                           
 20861                           ;DelayOff_B1.c: 9: if (sw == 1) {
 20862  1A24  0873               	movf	DelayOffPointSelect@sw,w
 20863  1A25  3A01               	xorlw	1
 20864  1A26  1D03               	skipz
 20865  1A27  2A2E               	goto	l6723
 20866                           
 20867                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 20868  1A28  30E2               	movlw	_DlySw1& (0+255)
 20869  1A29  00F2               	movwf	??_DelayOffPointSelect
 20870  1A2A  0872               	movf	??_DelayOffPointSelect,w
 20871  1A2B  0021               	movlb	1	; select bank1
 20872  1A2C  00EA               	movwf	_DelayOff^(0+128)
 20873                           
 20874                           ;DelayOff_B1.c: 11: }
 20875  1A2D  0008               	return
 20876  1A2E                     l6723:	
 20877                           
 20878                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 20879  1A2E  0873               	movf	DelayOffPointSelect@sw,w
 20880  1A2F  3A02               	xorlw	2
 20881  1A30  1D03               	skipz
 20882  1A31  0008               	return
 20883                           
 20884                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 20885  1A32  30E7               	movlw	_DlySw2& (0+255)
 20886  1A33  00F2               	movwf	??_DelayOffPointSelect
 20887  1A34  0872               	movf	??_DelayOffPointSelect,w
 20888  1A35  0021               	movlb	1	; select bank1
 20889  1A36  00EA               	movwf	_DelayOff^(0+128)
 20890  1A37  0008               	return
 20891  1A38                     __end_of_DelayOffPointSelect:	
 20892                           
 20893                           	psect	text147
 20894  12A6                     __ptext147:	
 20895 ;; *************** function _Buzzer_Main *****************
 20896 ;; Defined at:
 20897 ;;		line 46 in file "../src/Buzzer_B1.c"
 20898 ;; Parameters:    Size  Location     Type
 20899 ;;		None
 20900 ;; Auto vars:     Size  Location     Type
 20901 ;;		None
 20902 ;; Return value:  Size  Location     Type
 20903 ;;		None               void
 20904 ;; Registers used:
 20905 ;;		wreg, status,2, status,0
 20906 ;; Tracked objects:
 20907 ;;		On entry : 0/0
 20908 ;;		On exit  : 0/0
 20909 ;;		Unchanged: 0/0
 20910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20914 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20915 ;;Total ram usage:        1 bytes
 20916 ;; Hardware stack levels used:    1
 20917 ;; Hardware stack levels required when called:    3
 20918 ;; This function calls:
 20919 ;;		Nothing
 20920 ;; This function is called by:
 20921 ;;		_main
 20922 ;; This function uses a non-reentrant model
 20923 ;;
 20924                           
 20925                           
 20926                           ;psect for function _Buzzer_Main
 20927  12A6                     _Buzzer_Main:	
 20928                           
 20929                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 20930                           
 20931                           ;incstack = 0
 20932                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 20933  12A6  0021               	movlb	1	; select bank1
 20934  12A7  1CDC               	btfss	_Buz1^(0+128),1
 20935  12A8  0008               	return
 20936                           
 20937                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 20938  12A9  3001               	movlw	1
 20939  12AA  07DD               	addwf	(_Buz1^(0+128)+1),f
 20940  12AB  3000               	movlw	0
 20941  12AC  3DDE               	addwfc	((_Buz1+1)^(0+128)+1),f
 20942                           
 20943                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 20944  12AD  0863               	movf	((_Buz1+1)^(0+128)+6),w
 20945  12AE  025E               	subwf	((_Buz1+1)^(0+128)+1),w
 20946  12AF  1D03               	skipz
 20947  12B0  2AB3               	goto	u9445
 20948  12B1  0862               	movf	(_Buz1^(0+128)+6),w
 20949  12B2  025D               	subwf	(_Buz1^(0+128)+1),w
 20950  12B3                     u9445:	
 20951  12B3  1C03               	skipc
 20952  12B4  0008               	return
 20953                           
 20954                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 20955  12B5  01DD               	clrf	(_Buz1^(0+128)+1)
 20956  12B6  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20957                           
 20958                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 20959  12B7  12DC               	bcf	_Buz1^(0+128),5
 20960  12B8  0020               	movlb	0	; select bank0
 20961  12B9  1D8D               	btfss	13,3	;volatile
 20962  12BA  2ABD               	goto	l9019
 20963  12BB  0021               	movlb	1	; select bank1
 20964  12BC  16DC               	bsf	_Buz1^(0+128),5
 20965  12BD                     l9019:	
 20966                           
 20967                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 20968  12BD  0021               	movlb	1	; select bank1
 20969  12BE  1ADC               	btfsc	_Buz1^(0+128),5
 20970  12BF  2AE5               	goto	l110
 20971                           
 20972                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20973  12C0  08DF               	movf	(_Buz1^(0+128)+3),f
 20974  12C1  1D03               	skipz
 20975  12C2  2AE1               	goto	l111
 20976                           
 20977                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20978  12C3  1DDC               	btfss	_Buz1^(0+128),3
 20979  12C4  2AD1               	goto	l112
 20980                           
 20981                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20982  12C5  11DC               	bcf	_Buz1^(0+128),3
 20983                           
 20984                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20985  12C6  0860               	movf	(_Buz1^(0+128)+4),w
 20986  12C7  00F2               	movwf	??_Buzzer_Main
 20987  12C8  0872               	movf	??_Buzzer_Main,w
 20988  12C9  00DF               	movwf	(_Buz1^(0+128)+3)
 20989                           
 20990                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20991  12CA  0865               	movf	((_Buz1+1)^(0+128)+8),w
 20992  12CB  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20993  12CC  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20994  12CD  0864               	movf	(_Buz1^(0+128)+8),w
 20995  12CE  01E2               	clrf	(_Buz1^(0+128)+6)
 20996  12CF  07E2               	addwf	(_Buz1^(0+128)+6),f
 20997                           
 20998                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20999  12D0  0008               	return
 21000  12D1                     l112:	
 21001  12D1  1E5C               	btfss	_Buz1^(0+128),4
 21002  12D2  2ADF               	goto	l114
 21003                           
 21004                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 21005  12D3  125C               	bcf	_Buz1^(0+128),4
 21006                           
 21007                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 21008  12D4  0861               	movf	(_Buz1^(0+128)+5),w
 21009  12D5  00F2               	movwf	??_Buzzer_Main
 21010  12D6  0872               	movf	??_Buzzer_Main,w
 21011  12D7  00DF               	movwf	(_Buz1^(0+128)+3)
 21012                           
 21013                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 21014  12D8  0867               	movf	((_Buz1+1)^(0+128)+10),w
 21015  12D9  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 21016  12DA  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 21017  12DB  0866               	movf	(_Buz1^(0+128)+10),w
 21018  12DC  01E2               	clrf	(_Buz1^(0+128)+6)
 21019  12DD  07E2               	addwf	(_Buz1^(0+128)+6),f
 21020                           
 21021                           ;Buzzer_B1.c: 62: } else {
 21022  12DE  0008               	return
 21023  12DF                     l114:	
 21024                           
 21025                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 21026  12DF  10DC               	bcf	_Buz1^(0+128),1
 21027                           
 21028                           ;Buzzer_B1.c: 64: }
 21029                           ;Buzzer_B1.c: 65: } else {
 21030  12E0  0008               	return
 21031  12E1                     l111:	
 21032                           
 21033                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 21034  12E1  16DC               	bsf	_Buz1^(0+128),5
 21035                           
 21036                           ;Buzzer_B1.c: 68: RB3 = 1;
 21037  12E2  0020               	movlb	0	; select bank0
 21038  12E3  158D               	bsf	13,3	;volatile
 21039                           
 21040                           ;Buzzer_B1.c: 69: }
 21041                           ;Buzzer_B1.c: 70: } else {
 21042  12E4  0008               	return
 21043  12E5                     l110:	
 21044                           
 21045                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21046  12E5  12DC               	bcf	_Buz1^(0+128),5
 21047                           
 21048                           ;Buzzer_B1.c: 73: RB3 = 0;
 21049  12E6  0020               	movlb	0	; select bank0
 21050  12E7  118D               	bcf	13,3	;volatile
 21051                           
 21052                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21053  12E8  3001               	movlw	1
 21054  12E9  0021               	movlb	1	; select bank1
 21055  12EA  02DF               	subwf	(_Buz1^(0+128)+3),f
 21056  12EB  0008               	return
 21057  12EC                     __end_of_Buzzer_Main:	
 21058                           
 21059                           	psect	text148
 21060  27B3                     __ptext148:	
 21061 ;; *************** function _Buzzer_Initialization *****************
 21062 ;; Defined at:
 21063 ;;		line 11 in file "../src/Buzzer_B1.c"
 21064 ;; Parameters:    Size  Location     Type
 21065 ;;		None
 21066 ;; Auto vars:     Size  Location     Type
 21067 ;;		None
 21068 ;; Return value:  Size  Location     Type
 21069 ;;		None               void
 21070 ;; Registers used:
 21071 ;;		None
 21072 ;; Tracked objects:
 21073 ;;		On entry : 0/0
 21074 ;;		On exit  : 0/0
 21075 ;;		Unchanged: 0/0
 21076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21081 ;;Total ram usage:        0 bytes
 21082 ;; Hardware stack levels used:    1
 21083 ;; Hardware stack levels required when called:    3
 21084 ;; This function calls:
 21085 ;;		Nothing
 21086 ;; This function is called by:
 21087 ;;		_main
 21088 ;; This function uses a non-reentrant model
 21089 ;;
 21090                           
 21091                           
 21092                           ;psect for function _Buzzer_Initialization
 21093  27B3                     _Buzzer_Initialization:	
 21094                           
 21095                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21096                           
 21097                           ;incstack = 0
 21098                           ; Regs used in _Buzzer_Initialization: []
 21099  27B3  0021               	movlb	1	; select bank1
 21100  27B4  145C               	bsf	_Buz1^(0+128),0
 21101  27B5  0008               	return
 21102  27B6                     __end_of_Buzzer_Initialization:	
 21103                           
 21104                           	psect	intentry
 21105  0004                     __pintentry:	
 21106 ;; *************** function _ISR *****************
 21107 ;; Defined at:
 21108 ;;		line 116 in file "../src/MCU_B1.c"
 21109 ;; Parameters:    Size  Location     Type
 21110 ;;		None
 21111 ;; Auto vars:     Size  Location     Type
 21112 ;;		None
 21113 ;; Return value:  Size  Location     Type
 21114 ;;		None               void
 21115 ;; Registers used:
 21116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21117 ;; Tracked objects:
 21118 ;;		On entry : 0/0
 21119 ;;		On exit  : 0/0
 21120 ;;		Unchanged: 0/0
 21121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21126 ;;Total ram usage:        1 bytes
 21127 ;; Hardware stack levels used:    1
 21128 ;; Hardware stack levels required when called:    2
 21129 ;; This function calls:
 21130 ;;		_IOC_ISR
 21131 ;;		_TMR1_ISR
 21132 ;; This function is called by:
 21133 ;;		Interrupt level 1
 21134 ;; This function uses a non-reentrant model
 21135 ;;
 21136                           
 21137  0004                     _ISR:	
 21138                           
 21139                           ;incstack = 0
 21140                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21141  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21142  0005  3180               	pagesel	$
 21143  0006  0020               	movlb	0	; select bank0
 21144  0007  087F               	movf	127,w
 21145  0008  00F1               	movwf	??_ISR
 21146                           
 21147                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21148  0009  0021               	movlb	1	; select bank1
 21149  000A  1C11               	btfss	17,0	;volatile
 21150  000B  2812               	goto	i1l9627
 21151  000C  0020               	movlb	0	; select bank0
 21152  000D  1C11               	btfss	17,0	;volatile
 21153  000E  2812               	goto	i1l9627
 21154                           
 21155                           ;MCU_B1.c: 126: TMR1_ISR();
 21156  000F  319C  24C6  3180   	fcall	_TMR1_ISR
 21157  0012                     i1l9627:	
 21158                           
 21159                           ;MCU_B1.c: 127: }
 21160                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21161  0012  198B               	btfsc	11,3	;volatile
 21162  0013  1C0B               	btfss	11,0	;volatile
 21163  0014  281A               	goto	i1l1462
 21164  0015  0027               	movlb	7	; select bank7
 21165  0016  1D16               	btfss	22,2	;volatile
 21166  0017  281A               	goto	i1l1462
 21167                           
 21168                           ;MCU_B1.c: 139: IOC_ISR();
 21169  0018  3198  2097         	fcall	_IOC_ISR
 21170  001A                     i1l1462:	
 21171                           ;MCU_B1.c: 140: }
 21172                           ;MCU_B1.c: 148: return;
 21173                           
 21174  001A  0871               	movf	??_ISR,w
 21175  001B  0020               	movlb	0	; select bank0
 21176  001C  00FF               	movwf	127
 21177  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21178  001E  0009               	retfie
 21179  001F                     __end_of_ISR:	
 21180                           
 21181                           	psect	text150
 21182  1CC6                     __ptext150:	
 21183 ;; *************** function _TMR1_ISR *****************
 21184 ;; Defined at:
 21185 ;;		line 236 in file "../src/MCU_B1.c"
 21186 ;; Parameters:    Size  Location     Type
 21187 ;;		None
 21188 ;; Auto vars:     Size  Location     Type
 21189 ;;		None
 21190 ;; Return value:  Size  Location     Type
 21191 ;;		None               void
 21192 ;; Registers used:
 21193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21194 ;; Tracked objects:
 21195 ;;		On entry : 0/0
 21196 ;;		On exit  : 0/0
 21197 ;;		Unchanged: 0/0
 21198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21203 ;;Total ram usage:        0 bytes
 21204 ;; Hardware stack levels used:    1
 21205 ;; Hardware stack levels required when called:    1
 21206 ;; This function calls:
 21207 ;;		_DimmerLights_TMR_1
 21208 ;;		_DimmerLights_TMR_2
 21209 ;; This function is called by:
 21210 ;;		_ISR
 21211 ;; This function uses a non-reentrant model
 21212 ;;
 21213                           
 21214                           
 21215                           ;psect for function _TMR1_ISR
 21216  1CC6                     _TMR1_ISR:	
 21217                           
 21218                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21219                           
 21220                           ;incstack = 0
 21221                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21222  1CC6  3190  207A  319C   	fcall	_DimmerLights_TMR_1
 21223                           
 21224                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21225  1CC9  3190  20B2  319C   	fcall	_DimmerLights_TMR_2
 21226                           
 21227                           ;MCU_B1.c: 269: Timer1.Count++;
 21228  1CCC  3001               	movlw	1
 21229  1CCD  0022               	movlb	2	; select bank2
 21230  1CCE  07A6               	addwf	(_Timer1^(0+256)+1),f
 21231  1CCF  3000               	movlw	0
 21232  1CD0  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 21233                           
 21234                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
 21235  1CD1  3001               	movlw	1
 21236  1CD2  3E25               	addlw	_Timer1& (0+255)
 21237  1CD3  0086               	movwf	6
 21238  1CD4  3001               	movlw	1	; select bank2/3
 21239  1CD5  0087               	movwf	7
 21240  1CD6  3F40               	moviw [0]fsr1
 21241  1CD7  3AC8               	xorlw	200
 21242  1CD8  1D03               	skipz
 21243  1CD9  2CDC               	goto	u954_25
 21244  1CDA  3F41               	moviw [1]fsr1
 21245  1CDB  3A00               	xorlw	0
 21246  1CDC                     u954_25:	
 21247  1CDC  1D03               	skipz
 21248  1CDD  2CE1               	goto	i1l9081
 21249                           
 21250                           ;MCU_B1.c: 271: Timer1.Count = 0;
 21251  1CDE  01A6               	clrf	(_Timer1^(0+256)+1)
 21252  1CDF  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 21253                           
 21254                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
 21255  1CE0  1425               	bsf	_Timer1^(0+256),0
 21256  1CE1                     i1l9081:	
 21257                           
 21258                           ;MCU_B1.c: 273: }
 21259                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
 21260  1CE1  30FA               	movlw	250
 21261  1CE2  0020               	movlb	0	; select bank0
 21262  1CE3  0097               	movwf	23	;volatile
 21263                           
 21264                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
 21265  1CE4  3038               	movlw	56
 21266  1CE5  0096               	movwf	22	;volatile
 21267                           
 21268                           ;MCU_B1.c: 277: TMR1IF = 0;
 21269  1CE6  1011               	bcf	17,0	;volatile
 21270  1CE7  0008               	return
 21271  1CE8                     __end_of_TMR1_ISR:	
 21272                           
 21273                           	psect	text151
 21274  10B2                     __ptext151:	
 21275 ;; *************** function _DimmerLights_TMR_2 *****************
 21276 ;; Defined at:
 21277 ;;		line 1892 in file "../src/Dimmer_B1.c"
 21278 ;; Parameters:    Size  Location     Type
 21279 ;;		None
 21280 ;; Auto vars:     Size  Location     Type
 21281 ;;		None
 21282 ;; Return value:  Size  Location     Type
 21283 ;;		None               void
 21284 ;; Registers used:
 21285 ;;		wreg, status,2, status,0
 21286 ;; Tracked objects:
 21287 ;;		On entry : 0/0
 21288 ;;		On exit  : 0/0
 21289 ;;		Unchanged: 0/0
 21290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21294 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21295 ;;Total ram usage:        1 bytes
 21296 ;; Hardware stack levels used:    1
 21297 ;; This function calls:
 21298 ;;		Nothing
 21299 ;; This function is called by:
 21300 ;;		_TMR1_ISR
 21301 ;; This function uses a non-reentrant model
 21302 ;;
 21303                           
 21304                           
 21305                           ;psect for function _DimmerLights_TMR_2
 21306  10B2                     _DimmerLights_TMR_2:	
 21307                           
 21308                           ;Dimmer_B1.c: 1894: if (DimmerIntr2.Start == 1) {
 21309                           
 21310                           ;incstack = 0
 21311                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21312  10B2  0021               	movlb	1	; select bank1
 21313  10B3  1D30               	btfss	_DimmerIntr2^(0+128),2
 21314  10B4  28D8               	goto	i1l1019
 21315                           
 21316                           ;Dimmer_B1.c: 1895: DimmerIntr2.Count++;
 21317  10B5  3001               	movlw	1
 21318  10B6  00F0               	movwf	??_DimmerLights_TMR_2
 21319  10B7  0870               	movf	??_DimmerLights_TMR_2,w
 21320  10B8  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21321                           
 21322                           ;Dimmer_B1.c: 1897: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd_Value) {
 21323  10B9  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21324  10BA  063F               	xorwf	(_DimmerIntr2^(0+128)+15),w
 21325  10BB  1D03               	skipz
 21326  10BC  28BF               	goto	i1l8525
 21327                           
 21328                           ;Dimmer_B1.c: 1898: DimmerIntr2.Count = 0;
 21329  10BD  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21330                           
 21331                           ;Dimmer_B1.c: 1899: DimmerIntr2.Start = 0;
 21332  10BE  1130               	bcf	_DimmerIntr2^(0+128),2
 21333  10BF                     i1l8525:	
 21334                           
 21335                           ;Dimmer_B1.c: 1900: }
 21336                           ;Dimmer_B1.c: 1904: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2_Value) {
 21337  10BF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21338  10C0  063C               	xorwf	(_DimmerIntr2^(0+128)+12),w
 21339  10C1  1903               	btfsc	3,2
 21340                           
 21341                           ;Dimmer_B1.c: 1905: if (DimmerIntr2.ControlStatus == 1) {
 21342  10C2  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21343  10C3  28C6               	goto	i1l8531
 21344                           
 21345                           ;Dimmer_B1.c: 1906: RB4 = 0;
 21346  10C4  0020               	movlb	0	; select bank0
 21347  10C5  120D               	bcf	13,4	;volatile
 21348  10C6                     i1l8531:	
 21349                           
 21350                           ;Dimmer_B1.c: 1907: }
 21351                           ;Dimmer_B1.c: 1908: }
 21352                           ;Dimmer_B1.c: 1911: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3_Value) {
 21353  10C6  0021               	movlb	1	; select bank1
 21354  10C7  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21355  10C8  063D               	xorwf	(_DimmerIntr2^(0+128)+13),w
 21356  10C9  1903               	btfsc	3,2
 21357                           
 21358                           ;Dimmer_B1.c: 1912: if (DimmerIntr2.ControlStatus == 1) {
 21359  10CA  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21360  10CB  28CE               	goto	i1l8537
 21361                           
 21362                           ;Dimmer_B1.c: 1913: RB4 = 1;
 21363  10CC  0020               	movlb	0	; select bank0
 21364  10CD  160D               	bsf	13,4	;volatile
 21365  10CE                     i1l8537:	
 21366                           
 21367                           ;Dimmer_B1.c: 1914: }
 21368                           ;Dimmer_B1.c: 1915: }
 21369                           ;Dimmer_B1.c: 1918: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4_Value) {
 21370  10CE  0021               	movlb	1	; select bank1
 21371  10CF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21372  10D0  063E               	xorwf	(_DimmerIntr2^(0+128)+14),w
 21373  10D1  1D03               	skipz
 21374  10D2  0008               	return
 21375                           
 21376                           ;Dimmer_B1.c: 1919: if (DimmerIntr2.ControlStatus == 1) {
 21377  10D3  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21378  10D4  0008               	return
 21379                           
 21380                           ;Dimmer_B1.c: 1920: RB4 = 0;
 21381  10D5  0020               	movlb	0	; select bank0
 21382  10D6  120D               	bcf	13,4	;volatile
 21383                           
 21384                           ;Dimmer_B1.c: 1921: }
 21385                           ;Dimmer_B1.c: 1924: }
 21386                           ;Dimmer_B1.c: 1926: } else {
 21387  10D7  0008               	return
 21388  10D8                     i1l1019:	
 21389                           
 21390                           ;Dimmer_B1.c: 1927: if (DimmerIntr2.GO == 1) {
 21391  10D8  1C30               	btfss	_DimmerIntr2^(0+128),0
 21392  10D9  0008               	return
 21393                           
 21394                           ;Dimmer_B1.c: 1928: DimmerIntr2.Count++;
 21395  10DA  3001               	movlw	1
 21396  10DB  00F0               	movwf	??_DimmerLights_TMR_2
 21397  10DC  0870               	movf	??_DimmerLights_TMR_2,w
 21398  10DD  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21399                           
 21400                           ;Dimmer_B1.c: 1929: if (DimmerIntr2.Count == 5) {
 21401  10DE  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21402  10DF  3A05               	xorlw	5
 21403  10E0  1D03               	skipz
 21404  10E1  0008               	return
 21405                           
 21406                           ;Dimmer_B1.c: 1930: DimmerIntr2.Count = 0;
 21407  10E2  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21408                           
 21409                           ;Dimmer_B1.c: 1931: DimmerIntr2.GO = 0;
 21410  10E3  1030               	bcf	_DimmerIntr2^(0+128),0
 21411                           
 21412                           ;Dimmer_B1.c: 1932: DimmerIntr2.Start = 1;
 21413  10E4  1530               	bsf	_DimmerIntr2^(0+128),2
 21414                           
 21415                           ;Dimmer_B1.c: 1934: if (DimmerIntr2.ControlStatus == 1) {
 21416  10E5  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21417  10E6  0008               	return
 21418                           
 21419                           ;Dimmer_B1.c: 1935: RB4 = 1;
 21420  10E7  0020               	movlb	0	; select bank0
 21421  10E8  160D               	bsf	13,4	;volatile
 21422  10E9  0008               	return
 21423  10EA                     __end_of_DimmerLights_TMR_2:	
 21424                           
 21425                           	psect	text152
 21426  107A                     __ptext152:	
 21427 ;; *************** function _DimmerLights_TMR_1 *****************
 21428 ;; Defined at:
 21429 ;;		line 1731 in file "../src/Dimmer_B1.c"
 21430 ;; Parameters:    Size  Location     Type
 21431 ;;		None
 21432 ;; Auto vars:     Size  Location     Type
 21433 ;;		None
 21434 ;; Return value:  Size  Location     Type
 21435 ;;		None               void
 21436 ;; Registers used:
 21437 ;;		wreg, status,2, status,0
 21438 ;; Tracked objects:
 21439 ;;		On entry : 0/0
 21440 ;;		On exit  : 0/0
 21441 ;;		Unchanged: 0/0
 21442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21447 ;;Total ram usage:        1 bytes
 21448 ;; Hardware stack levels used:    1
 21449 ;; This function calls:
 21450 ;;		Nothing
 21451 ;; This function is called by:
 21452 ;;		_TMR1_ISR
 21453 ;; This function uses a non-reentrant model
 21454 ;;
 21455                           
 21456                           
 21457                           ;psect for function _DimmerLights_TMR_1
 21458  107A                     _DimmerLights_TMR_1:	
 21459                           
 21460                           ;Dimmer_B1.c: 1734: if (DimmerIntr1.Start == 1) {
 21461                           
 21462                           ;incstack = 0
 21463                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21464  107A  0021               	movlb	1	; select bank1
 21465  107B  1D20               	btfss	_DimmerIntr1^(0+128),2
 21466  107C  28A0               	goto	i1l995
 21467                           
 21468                           ;Dimmer_B1.c: 1735: DimmerIntr1.Count++;
 21469  107D  3001               	movlw	1
 21470  107E  00F0               	movwf	??_DimmerLights_TMR_1
 21471  107F  0870               	movf	??_DimmerLights_TMR_1,w
 21472  1080  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21473                           
 21474                           ;Dimmer_B1.c: 1737: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 21475  1081  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21476  1082  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 21477  1083  1D03               	skipz
 21478  1084  2887               	goto	i1l8463
 21479                           
 21480                           ;Dimmer_B1.c: 1738: DimmerIntr1.Count = 0;
 21481  1085  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21482                           
 21483                           ;Dimmer_B1.c: 1739: DimmerIntr1.Start = 0;
 21484  1086  1120               	bcf	_DimmerIntr1^(0+128),2
 21485  1087                     i1l8463:	
 21486                           
 21487                           ;Dimmer_B1.c: 1740: }
 21488                           ;Dimmer_B1.c: 1744: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 21489  1087  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21490  1088  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 21491  1089  1903               	btfsc	3,2
 21492                           
 21493                           ;Dimmer_B1.c: 1745: if (DimmerIntr1.ControlStatus == 1) {
 21494  108A  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21495  108B  288E               	goto	i1l8469
 21496                           
 21497                           ;Dimmer_B1.c: 1746: RA7 = 0;
 21498  108C  0020               	movlb	0	; select bank0
 21499  108D  138C               	bcf	12,7	;volatile
 21500  108E                     i1l8469:	
 21501                           
 21502                           ;Dimmer_B1.c: 1747: }
 21503                           ;Dimmer_B1.c: 1748: }
 21504                           ;Dimmer_B1.c: 1751: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 21505  108E  0021               	movlb	1	; select bank1
 21506  108F  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21507  1090  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 21508  1091  1903               	btfsc	3,2
 21509                           
 21510                           ;Dimmer_B1.c: 1752: if (DimmerIntr1.ControlStatus == 1) {
 21511  1092  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21512  1093  2896               	goto	i1l8475
 21513                           
 21514                           ;Dimmer_B1.c: 1753: RA7 = 1;
 21515  1094  0020               	movlb	0	; select bank0
 21516  1095  178C               	bsf	12,7	;volatile
 21517  1096                     i1l8475:	
 21518                           
 21519                           ;Dimmer_B1.c: 1754: }
 21520                           ;Dimmer_B1.c: 1755: }
 21521                           ;Dimmer_B1.c: 1758: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 21522  1096  0021               	movlb	1	; select bank1
 21523  1097  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21524  1098  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 21525  1099  1D03               	skipz
 21526  109A  0008               	return
 21527                           
 21528                           ;Dimmer_B1.c: 1759: if (DimmerIntr1.ControlStatus == 1) {
 21529  109B  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21530  109C  0008               	return
 21531                           
 21532                           ;Dimmer_B1.c: 1760: RA7 = 0;
 21533  109D  0020               	movlb	0	; select bank0
 21534  109E  138C               	bcf	12,7	;volatile
 21535                           
 21536                           ;Dimmer_B1.c: 1761: }
 21537                           ;Dimmer_B1.c: 1764: }
 21538                           ;Dimmer_B1.c: 1766: } else {
 21539  109F  0008               	return
 21540  10A0                     i1l995:	
 21541                           
 21542                           ;Dimmer_B1.c: 1767: if (DimmerIntr1.GO == 1) {
 21543  10A0  1C20               	btfss	_DimmerIntr1^(0+128),0
 21544  10A1  0008               	return
 21545                           
 21546                           ;Dimmer_B1.c: 1768: DimmerIntr1.Count++;
 21547  10A2  3001               	movlw	1
 21548  10A3  00F0               	movwf	??_DimmerLights_TMR_1
 21549  10A4  0870               	movf	??_DimmerLights_TMR_1,w
 21550  10A5  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21551                           
 21552                           ;Dimmer_B1.c: 1769: if (DimmerIntr1.Count == 5) {
 21553  10A6  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21554  10A7  3A05               	xorlw	5
 21555  10A8  1D03               	skipz
 21556  10A9  0008               	return
 21557                           
 21558                           ;Dimmer_B1.c: 1770: DimmerIntr1.Count = 0;
 21559  10AA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21560                           
 21561                           ;Dimmer_B1.c: 1771: DimmerIntr1.GO = 0;
 21562  10AB  1020               	bcf	_DimmerIntr1^(0+128),0
 21563                           
 21564                           ;Dimmer_B1.c: 1772: DimmerIntr1.Start = 1;
 21565  10AC  1520               	bsf	_DimmerIntr1^(0+128),2
 21566                           
 21567                           ;Dimmer_B1.c: 1774: if (DimmerIntr1.ControlStatus == 1) {
 21568  10AD  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21569  10AE  0008               	return
 21570                           
 21571                           ;Dimmer_B1.c: 1775: RA7 = 1;
 21572  10AF  0020               	movlb	0	; select bank0
 21573  10B0  178C               	bsf	12,7	;volatile
 21574  10B1  0008               	return
 21575  10B2                     __end_of_DimmerLights_TMR_1:	
 21576                           
 21577                           	psect	text153
 21578  1897                     __ptext153:	
 21579 ;; *************** function _IOC_ISR *****************
 21580 ;; Defined at:
 21581 ;;		line 396 in file "../src/MCU_B1.c"
 21582 ;; Parameters:    Size  Location     Type
 21583 ;;		None
 21584 ;; Auto vars:     Size  Location     Type
 21585 ;;		None
 21586 ;; Return value:  Size  Location     Type
 21587 ;;		None               void
 21588 ;; Registers used:
 21589 ;;		wreg, status,2, status,0, pclath, cstack
 21590 ;; Tracked objects:
 21591 ;;		On entry : 0/0
 21592 ;;		On exit  : 0/0
 21593 ;;		Unchanged: 0/0
 21594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21599 ;;Total ram usage:        0 bytes
 21600 ;; Hardware stack levels used:    1
 21601 ;; Hardware stack levels required when called:    1
 21602 ;; This function calls:
 21603 ;;		_DimmerLights_IOC_1
 21604 ;;		_DimmerLights_IOC_2
 21605 ;; This function is called by:
 21606 ;;		_ISR
 21607 ;; This function uses a non-reentrant model
 21608 ;;
 21609                           
 21610                           
 21611                           ;psect for function _IOC_ISR
 21612  1897                     _IOC_ISR:	
 21613                           
 21614                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 21615                           
 21616                           ;incstack = 0
 21617                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21618  1897  0021               	movlb	1	; select bank1
 21619  1898  1C4F               	btfss	_myMain^(0+128),0
 21620  1899  289F               	goto	i1l9091
 21621                           
 21622                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 21623  189A  319E  2699  3198   	fcall	_DimmerLights_IOC_1
 21624                           
 21625                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 21626  189D  319E  26C9         	fcall	_DimmerLights_IOC_2
 21627  189F                     i1l9091:	
 21628                           
 21629                           ;MCU_B1.c: 418: }
 21630                           ;MCU_B1.c: 420: IOCBF2 = 0;
 21631  189F  0027               	movlb	7	; select bank7
 21632  18A0  1116               	bcf	22,2	;volatile
 21633                           
 21634                           ;MCU_B1.c: 421: IOCIF = 0;
 21635  18A1  100B               	bcf	11,0	;volatile
 21636  18A2  0008               	return
 21637  18A3                     __end_of_IOC_ISR:	
 21638                           
 21639                           	psect	text154
 21640  1EC9                     __ptext154:	
 21641 ;; *************** function _DimmerLights_IOC_2 *****************
 21642 ;; Defined at:
 21643 ;;		line 1975 in file "../src/Dimmer_B1.c"
 21644 ;; Parameters:    Size  Location     Type
 21645 ;;		None
 21646 ;; Auto vars:     Size  Location     Type
 21647 ;;		None
 21648 ;; Return value:  Size  Location     Type
 21649 ;;		None               void
 21650 ;; Registers used:
 21651 ;;		wreg, status,2, status,0
 21652 ;; Tracked objects:
 21653 ;;		On entry : 0/0
 21654 ;;		On exit  : 0/0
 21655 ;;		Unchanged: 0/0
 21656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21661 ;;Total ram usage:        1 bytes
 21662 ;; Hardware stack levels used:    1
 21663 ;; This function calls:
 21664 ;;		Nothing
 21665 ;; This function is called by:
 21666 ;;		_IOC_ISR
 21667 ;; This function uses a non-reentrant model
 21668 ;;
 21669                           
 21670                           
 21671                           ;psect for function _DimmerLights_IOC_2
 21672  1EC9                     _DimmerLights_IOC_2:	
 21673                           
 21674                           ;Dimmer_B1.c: 1990: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21675                           
 21676                           ;incstack = 0
 21677                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0]
 21678  1EC9  0021               	movlb	1	; select bank1
 21679  1ECA  1930               	btfsc	_DimmerIntr2^(0+128),2
 21680  1ECB  0008               	return
 21681  1ECC  1830               	btfsc	_DimmerIntr2^(0+128),0
 21682  1ECD  0008               	return
 21683                           
 21684                           ;Dimmer_B1.c: 1992: if (RB2 != DimmerIntr2.Status) {
 21685  1ECE  0E31               	swapf	(_DimmerIntr2^(0+128)+1),w
 21686  1ECF  0C89               	rrf	9,f
 21687  1ED0  3901               	andlw	1
 21688  1ED1  00F0               	movwf	??_DimmerLights_IOC_2
 21689  1ED2  3000               	movlw	0
 21690  1ED3  0020               	movlb	0	; select bank0
 21691  1ED4  190D               	btfsc	13,2	;volatile
 21692  1ED5  3001               	movlw	1
 21693  1ED6  0670               	xorwf	??_DimmerLights_IOC_2,w
 21694  1ED7  1903               	skipnz
 21695  1ED8  0008               	return
 21696                           
 21697                           ;Dimmer_B1.c: 1995: DimmerIntr2.Count = 0;
 21698  1ED9  0021               	movlb	1	; select bank1
 21699  1EDA  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21700                           
 21701                           ;Dimmer_B1.c: 1996: DimmerIntr2.GO = 1;
 21702  1EDB  1430               	bsf	_DimmerIntr2^(0+128),0
 21703                           
 21704                           ;Dimmer_B1.c: 1998: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21705  1EDC  1E30               	btfss	_DimmerIntr2^(0+128),4
 21706  1EDD  1B30               	btfsc	_DimmerIntr2^(0+128),6
 21707                           
 21708                           ;Dimmer_B1.c: 1999: DimmerIntr2.Tune = 1;
 21709  1EDE  14B0               	bsf	_DimmerIntr2^(0+128),1
 21710                           
 21711                           ;Dimmer_B1.c: 2000: }
 21712                           ;Dimmer_B1.c: 2002: if (DimmerIntr2.Calculate == 1) {
 21713  1EDF  1FB1               	btfss	(_DimmerIntr2^(0+128)+1),7
 21714  1EE0  2EF2               	goto	i1l8575
 21715                           
 21716                           ;Dimmer_B1.c: 2003: DimmerIntr2.Calculate = 0;
 21717  1EE1  13B1               	bcf	(_DimmerIntr2^(0+128)+1),7
 21718                           
 21719                           ;Dimmer_B1.c: 2004: DimmerIntr2.TuneEnd_Value = DimmerIntr2.TuneEnd;
 21720  1EE2  083B               	movf	(_DimmerIntr2^(0+128)+11),w
 21721  1EE3  00F0               	movwf	??_DimmerLights_IOC_2
 21722  1EE4  0870               	movf	??_DimmerLights_IOC_2,w
 21723  1EE5  00BF               	movwf	(_DimmerIntr2^(0+128)+15)
 21724                           
 21725                           ;Dimmer_B1.c: 2005: DimmerIntr2.TuneValue2_Value = DimmerIntr2.TuneValue2;
 21726  1EE6  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 21727  1EE7  00F0               	movwf	??_DimmerLights_IOC_2
 21728  1EE8  0870               	movf	??_DimmerLights_IOC_2,w
 21729  1EE9  00BC               	movwf	(_DimmerIntr2^(0+128)+12)
 21730                           
 21731                           ;Dimmer_B1.c: 2006: DimmerIntr2.TuneValue3_Value = DimmerIntr2.TuneValue3;
 21732  1EEA  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 21733  1EEB  00F0               	movwf	??_DimmerLights_IOC_2
 21734  1EEC  0870               	movf	??_DimmerLights_IOC_2,w
 21735  1EED  00BD               	movwf	(_DimmerIntr2^(0+128)+13)
 21736                           
 21737                           ;Dimmer_B1.c: 2007: DimmerIntr2.TuneValue4_Value = DimmerIntr2.TuneValue4;
 21738  1EEE  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 21739  1EEF  00F0               	movwf	??_DimmerLights_IOC_2
 21740  1EF0  0870               	movf	??_DimmerLights_IOC_2,w
 21741  1EF1  00BE               	movwf	(_DimmerIntr2^(0+128)+14)
 21742  1EF2                     i1l8575:	
 21743                           
 21744                           ;Dimmer_B1.c: 2008: }
 21745                           ;Dimmer_B1.c: 2018: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21746  1EF2  12B1               	bcf	(_DimmerIntr2^(0+128)+1),5
 21747  1EF3  0020               	movlb	0	; select bank0
 21748  1EF4  1D0D               	btfss	13,2	;volatile
 21749  1EF5  0008               	return
 21750  1EF6  0021               	movlb	1	; select bank1
 21751  1EF7  16B1               	bsf	(_DimmerIntr2^(0+128)+1),5
 21752  1EF8  0008               	return
 21753  1EF9                     __end_of_DimmerLights_IOC_2:	
 21754                           
 21755                           	psect	text155
 21756  1E99                     __ptext155:	
 21757 ;; *************** function _DimmerLights_IOC_1 *****************
 21758 ;; Defined at:
 21759 ;;		line 1817 in file "../src/Dimmer_B1.c"
 21760 ;; Parameters:    Size  Location     Type
 21761 ;;		None
 21762 ;; Auto vars:     Size  Location     Type
 21763 ;;		None
 21764 ;; Return value:  Size  Location     Type
 21765 ;;		None               void
 21766 ;; Registers used:
 21767 ;;		wreg, status,2, status,0
 21768 ;; Tracked objects:
 21769 ;;		On entry : 0/0
 21770 ;;		On exit  : 0/0
 21771 ;;		Unchanged: 0/0
 21772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21777 ;;Total ram usage:        1 bytes
 21778 ;; Hardware stack levels used:    1
 21779 ;; This function calls:
 21780 ;;		Nothing
 21781 ;; This function is called by:
 21782 ;;		_IOC_ISR
 21783 ;; This function uses a non-reentrant model
 21784 ;;
 21785                           
 21786                           
 21787                           ;psect for function _DimmerLights_IOC_1
 21788  1E99                     _DimmerLights_IOC_1:	
 21789                           
 21790                           ;Dimmer_B1.c: 1831: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21791                           
 21792                           ;incstack = 0
 21793                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 21794  1E99  0021               	movlb	1	; select bank1
 21795  1E9A  1920               	btfsc	_DimmerIntr1^(0+128),2
 21796  1E9B  0008               	return
 21797  1E9C  1820               	btfsc	_DimmerIntr1^(0+128),0
 21798  1E9D  0008               	return
 21799                           
 21800                           ;Dimmer_B1.c: 1833: if (RB2 != DimmerIntr1.Status) {
 21801  1E9E  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 21802  1E9F  0C89               	rrf	9,f
 21803  1EA0  3901               	andlw	1
 21804  1EA1  00F0               	movwf	??_DimmerLights_IOC_1
 21805  1EA2  3000               	movlw	0
 21806  1EA3  0020               	movlb	0	; select bank0
 21807  1EA4  190D               	btfsc	13,2	;volatile
 21808  1EA5  3001               	movlw	1
 21809  1EA6  0670               	xorwf	??_DimmerLights_IOC_1,w
 21810  1EA7  1903               	skipnz
 21811  1EA8  0008               	return
 21812                           
 21813                           ;Dimmer_B1.c: 1836: DimmerIntr1.Count = 0;
 21814  1EA9  0021               	movlb	1	; select bank1
 21815  1EAA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21816                           
 21817                           ;Dimmer_B1.c: 1837: DimmerIntr1.GO = 1;
 21818  1EAB  1420               	bsf	_DimmerIntr1^(0+128),0
 21819                           
 21820                           ;Dimmer_B1.c: 1839: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21821  1EAC  1E20               	btfss	_DimmerIntr1^(0+128),4
 21822  1EAD  1B20               	btfsc	_DimmerIntr1^(0+128),6
 21823                           
 21824                           ;Dimmer_B1.c: 1840: DimmerIntr1.Tune = 1;
 21825  1EAE  14A0               	bsf	_DimmerIntr1^(0+128),1
 21826                           
 21827                           ;Dimmer_B1.c: 1841: }
 21828                           ;Dimmer_B1.c: 1843: if (DimmerIntr1.Calculate == 1) {
 21829  1EAF  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 21830  1EB0  2EC2               	goto	i1l8513
 21831                           
 21832                           ;Dimmer_B1.c: 1844: DimmerIntr1.Calculate = 0;
 21833  1EB1  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 21834                           
 21835                           ;Dimmer_B1.c: 1845: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 21836  1EB2  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 21837  1EB3  00F0               	movwf	??_DimmerLights_IOC_1
 21838  1EB4  0870               	movf	??_DimmerLights_IOC_1,w
 21839  1EB5  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 21840                           
 21841                           ;Dimmer_B1.c: 1846: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 21842  1EB6  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 21843  1EB7  00F0               	movwf	??_DimmerLights_IOC_1
 21844  1EB8  0870               	movf	??_DimmerLights_IOC_1,w
 21845  1EB9  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 21846                           
 21847                           ;Dimmer_B1.c: 1847: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 21848  1EBA  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 21849  1EBB  00F0               	movwf	??_DimmerLights_IOC_1
 21850  1EBC  0870               	movf	??_DimmerLights_IOC_1,w
 21851  1EBD  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 21852                           
 21853                           ;Dimmer_B1.c: 1848: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 21854  1EBE  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 21855  1EBF  00F0               	movwf	??_DimmerLights_IOC_1
 21856  1EC0  0870               	movf	??_DimmerLights_IOC_1,w
 21857  1EC1  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 21858  1EC2                     i1l8513:	
 21859                           
 21860                           ;Dimmer_B1.c: 1849: }
 21861                           ;Dimmer_B1.c: 1859: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 21862  1EC2  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 21863  1EC3  0020               	movlb	0	; select bank0
 21864  1EC4  1D0D               	btfss	13,2	;volatile
 21865  1EC5  0008               	return
 21866  1EC6  0021               	movlb	1	; select bank1
 21867  1EC7  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 21868  1EC8  0008               	return
 21869  1EC9                     __end_of_DimmerLights_IOC_1:	
 21870  007E                     btemp	set	126	;btemp
 21871  007E                     pic14e$flags	set	126
 21872  007E                     wtemp	set	126
 21873  007E                     wtemp0	set	126
 21874  0080                     wtemp1	set	128
 21875  0082                     wtemp2	set	130
 21876  0084                     wtemp3	set	132
 21877  0086                     wtemp4	set	134
 21878  0088                     wtemp5	set	136
 21879  007F                     wtemp6	set	127
 21880  007E                     ttemp	set	126
 21881  007E                     ttemp0	set	126
 21882  0081                     ttemp1	set	129
 21883  0084                     ttemp2	set	132
 21884  0087                     ttemp3	set	135
 21885  007F                     ttemp4	set	127
 21886  007E                     ltemp	set	126
 21887  007E                     ltemp0	set	126
 21888  0082                     ltemp1	set	130
 21889  0086                     ltemp2	set	134
 21890  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         295
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      4      57
    BANK5            80      0      32
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK5[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->___lwdiv
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _DimmerLights_TwoPhase_Main->_DimmerLights_AssignationDimming
    _DimmerLights_AssignationDimming->_setDimmerIntr_MaxmumValue
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  181963
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6429
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6429
                                             61 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4876
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4876
                                             11 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   50311
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   50311
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45880
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4671
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41014
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11472
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23710
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2438
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      70
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2285
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3694
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   68979
       _DimmerLights_DimmingFunction
         _DimmerLights_TwoPhase_Main
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   51315
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   29582
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   21214
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3161
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_TwoPhase_Main                           1     1      0   16428
                                             65 BANK0      1     1      0
    _DimmerLights_AssignationDimming
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_AssignationDimming                      4     4      0   16322
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     981
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     919
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   28004
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   28004
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     857
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5400
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5400
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    2332
                                              9 COMMON     1     1      0
                                              6 BANK0      5     5      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _DimmerLights_TwoPhase_Main
       _DimmerLights_AssignationDimming
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_Status
           _DimmerLights_SelectPointer
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
       _DimmerLights_SelectPointer
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
     _DimmerLights_IOC_2
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      39      13       71.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 30 13:56:21 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1A62                            ___bmul@product 0074  
               getMain_Lights_Count@count 0075                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1D2C                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _u1 0220  
                                      _Sw 006D                            setTemp_Main@AD 0065  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1929  
                  __end_of_setDelayOff_GO 0BF6                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 179B  
                    _setDimmerLights_Line 1B0D                              ___ftadd@sign 0043  
                                     l100 131B                                       l110 12E5  
                                     l102 132D                                       l111 12E1  
                                     l112 12D1                                       l114 12DF  
                                     l331 1B2F                      _setDimmerLights_SwOn 0784  
                                     l332 1B31                                       l263 08D0  
                                     l375 1D78                                       l589 0961  
                                     l926 0FBE                                       l960 1930  
                                     l961 1936                                       l779 1A21  
                                     l955 1B1A                                       l886 1F0F  
                                     _GIE 005F                                       _CRC 00E8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00EB                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00C0  
                                     _ISR 0004                                       _WDT 012A  
                                     _Cmd 00E9              getDimmerLights_Status@lights 0074  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1B3C  
                   _Buzzer_Initialization 27B3                           __end_of_ADC_Set 1812  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1E12  
             _setDimmerIntr_ControlStatus 1DE9                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 18A3                     _setDimmerLights_OnOff 0F42  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0028  
                            ___ftdiv@sign 0035                                      l1070 0D1C  
                                    l1054 0CC9                                      l1223 120F  
                                    l1072 0D0E                                      l1056 0CBA  
                                    l1224 1216                                      l1081 0D37  
                                    l1065 0CE6                                      l1075 0D1A  
                                    l1059 0CC7                                      l1190 1C21  
                                    l1513 1E35                                      l1523 0A54  
                                    l3140 1C33                                      l2092 0529  
                                    l3301 15DD                                      l1189 1C18  
                                    l3330 0403                                      l2098 047C  
                                    l1714 1120                                      l3307 15F4  
                                    l2540 1F59                           __end_of_IOC_Set 1881  
                                    l2509 182E                                      l1910 0082  
                                    l1743 1E64                                      l2527 15A9  
                                    l1738 1E4F                                      l1770 0600  
                                    l1906 01ED                                      l1739 1E68  
                                    l1499 11D7                                      l2547 0C0C  
                                    l2483 06E8                                      l1916 01C9  
                                    l1908 008B                                      l2484 072C  
                                    l1917 01C7                                      l1909 0087  
                                    l2901 1ABD                                      l2590 083E  
                                    l2558 0C90                                      l2479 0780  
                          _Load_Main$4636 0023                                      l1779 1A61  
                                    l2923 035A                                      l2925 0238  
                                    l7103 0BA8                                      l7113 0BD8  
                                    l7117 0BEC                                      l7151 0830  
                                    l7231 1C02                                      l7081 114F  
                                    l7145 1DD5                                      l7137 1B02  
                                    l7153 0831                                      l7233 1C07  
                                    l8203 1F83                     _setDimmerLights_SwOff 1122  
                                    l6621 15B3                                      l7165 087C  
                                    l7157 0836                                      l7501 1A6D  
                                    l7245 1D89                                      l7511 1A18  
                                    l8207 1F8C                                      l7247 1D94  
                                    l6625 15BA                                      l9201 09AE  
                                    l9019 12BD                                      l6723 1A2E  
                                    l6635 15E2                                      l6627 15C4  
                                    l7603 153B                                      l8067 19E6  
                                    l8155 1AD6                                      l8171 1C74  
                                    l6637 15EA                                      l6629 15C9  
                                    l6821 03E2                                      l7533 1E4B  
                                    l7277 1D62                                      l8181 1C83  
                                    l6735 1AEB                                      l6815 03CF  
                                    l7543 1E60                                      l7535 1E53  
                                    l7295 1A4F                                      l7607 1541  
                                    l7375 1FBA                                      l6833 0415  
                                    l6817 03D9                                      l6809 03BC  
                                    l6921 0EFE                                      l6905 0EBB  
                                    l6753 19AA                                      l8169 1C72  
                                    l9217 09D5                                      l9241 16B3  
                                    l9233 1695                                      l6747 1A43  
                                    l6739 1AF4                                      l6827 03F5  
                                    l6819 03DE                                      l7643 1961  
                                    l7299 1A5C                                      l8195 1F65  
                                    l8179 1C7F                                      l6837 0427  
                                    l6829 03FF                                      l6933 0F1A  
                                    l6917 0EF6                                      l7645 1966  
                                    l6757 19B0                                      l7493 1DFE  
                                    l7573 1501                                      l8197 1F71  
                                    l8285 1BDF                                      l9245 16C2  
                                    l9237 16A4                                      l6847 0442  
                                    l6791 0393                                      l6863 0D66  
                                    l7639 195B                                      l7583 1511  
                                    l7591 151D                                      l8295 1BEC  
                                    l6857 0D50                                      l6929 0F12  
                                    l7833 1FD7                                      l7569 14FB  
                                    l7577 1507                                      l8297 1BF0  
                                    l6787 038C                                      l7587 1517  
                                    l8651 1BAA                                      l6797 03A2  
                                    l6885 0DC0                                      l6877 0DA7  
                                    l6957 0A75                                      l7845 1FEB  
                                    l8901 1AC2                                      l8653 1BAD  
                                    l9197 09A6                                      l9189 0987  
                   _myMain_Initialization 18DF                                      l6991 0ADA  
                                    l6983 0AC0                                      l6975 0AA5  
                                    l7855 1FFA                                      l7847 1FED  
                                    l7599 1535                                      l9713 134A  
                                    l6985 0AC9                                      l6977 0AB3  
                                    l7857 1FFE                                      l8905 1AC8  
                                    l8657 1BB2                                      l9731 1369  
                                    l6899 0EA5                                      l6987 0ACC  
                                    l9741 1384                                      l9901 1B80  
                                    l9719 1355                                      l9831 07A4  
                                    l9911 1D13                                      l9745 138C  
                                    l9737 137B                                      l9729 135D  
                                    l9841 07B7                                      l9913 1D16  
                                    _CFGS 0CAE                                      l9851 07DF  
                                    l9853 07E5                                      l9829 07A1  
                                    l9917 1D1C                                      l9855 07EF  
                                    l9839 07B2                              __CFG_WDTE$ON 0000  
                                    l9785 1CF3                                      l9875 1CAC  
                                    l9939 1927                                      l9877 1CB5  
                                    l9973 0AFF                                      l9957 118F  
                                    l9887 1CC4                                      l8999 1C2D  
                                    l9895 1B77                                      l9897 1B7A  
                                    l9993 1D36                                      l9985 0B56  
                                    l9969 0AFA                                      l9995 1D39  
                                    l9999 1D3F                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5305 15BF  
                                    u6025 0F1B                                      u6105 0AA6  
                                    u6035 0F21                                      _PEIE 005E  
                                    u5325 15D8                                      u6135 0AC1  
                                    u5345 15E5                                      u6075 0A7C  
                                    u5375 15FB                                      u5715 03BD  
                                    u5805 03F6                                      u6375 0BB4  
                                    u5745 03D0                                      u5905 0DB7  
                                    u5915 0DC1                                      u6565 1D7E  
                                    u5775 03E3                                      u5875 0D78  
                                    u5955 0EC7                                      u5885 0D88  
                                    u5965 0ED7                                      u9405 1C34  
                                    u7565 1AB0                                      u5895 0DA8  
                                    u9415 1C39                                      u5985 0EFF  
                                    u5995 0F05                                      u7915 1F72  
                                    u7595 1B93                                      u9445 12B3  
                                    u7925 1F7C                                      u7935 1F84  
                                    u9705 0996                                      u9805 168C  
                                    u7895 1F68                                      u9815 169B  
                                    u9825 16AA                                      u9755 09C5  
                                    u9835 16B9                                      _LWLO 0CAD  
                                    u9845 16C8                                      _RSSI 012E  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1B54                _setDimmerLights_DimmingRun 1B3C  
                                    _Buz1 00DC                                      _Load 0132  
                                    _Temp 015A                                      _main 1492  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0968  
                         __end_of_RF_Main 27BF                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1856  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 0026  
    __end_of_DimmerLights_DimmingFunction 0D39     __size_of_DimmerLights_DimmingFunction 00A8  
            _DimmerLights_DimmingFunction 0C91                __end_of_setRFSW_AdjControl 0B6A  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2730 0075      _getDimmerLights_Allow_Condition$2731 0076  
    _getDimmerLights_Allow_Condition$2729 0074                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
              ?_DimmerIntr_ValueCalculate 0070                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 2000  
__size_of_getDimmerLights_Allow_Condition 0037         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1FC9  
                  _getDimmerLights_Status 18ED                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 18D3                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 012C                                     l10101 1467  
                                   l10021 1243                                     l10031 1253  
                                   l10023 1246                                     l10033 1256  
                                   l10027 124C                                     l10211 08ED  
                                   l10203 08E0                                     l11021 11B6  
                                   l10037 125C                                     l10205 08E4  
                                   l10141 0C1B                                     l10133 0BF7  
                                   l10231 1621                                     l10207 08E7  
                                   l10151 0C5D                                     l10143 0C21  
                                   l10313 0FCC                                     l10161 0C71  
                                   l10153 0C61                                     l10411 1E20  
                                   l11123 00AE                                     l11107 008A  
                                   l10251 1636                                     l10235 1627  
                                   l10155 0C65                                     l10147 0C3C  
                                   l10341 1403                                     l10333 0FFD  
                                   l10317 0FD0                                     l11221 01DC  
                                   l10253 164C                                     l10229 161E  
                                   l10173 08A1                                     l10157 0C69  
                                   l10165 0C75                                     l10175 08A4  
                                   l10159 0C6D                                     l10601 0CDA  
                                   l11161 0163                                     l11129 00E0  
                                   l10193 08B9                                     l11057 1102  
                                   l10291 0F8C                                     l11251 054E  
                                   l11155 0154                                     l10179 08AA  
                                   l11261 056C                                     l11165 017D  
                                   l10197 08D7                                     l11341 14B6  
                                   l10631 0D10                                     l10607 0CE7  
                                   l10295 0F96                                     l11271 056F  
                                   l11175 0199                                     l10199 08DA  
                                   l10463 1584                                     l10447 1562  
                                   l10289 0F83                                     l10561 17F3  
                                   l11273 059B                                     l11257 055D  
                                   l11185 01AF                                     l11169 0189  
                                   l11089 0069                                     l11345 14C1  
                                   l10643 0D2C                                     l10299 0FA0  
                                   l10547 17C1                                     l11291 05DC  
                                   l10707 0A4D                                     l10459 157B  
                                   l10661 13D1                                     l10549 17C7  
                                   l11293 05E6                                     l11269 0593  
                                   l10821 0727                                     l10741 048E  
                                   l10559 17ED                                     l11287 05D4  
                                   l10735 047F                                     l10743 0491  
                   ?_setDimmerLights_Main 0070                                     l11289 05B0  
                                   l10681 19C4                                     l10905 0297  
                                   l10659 13C0                                     l11299 05F6  
                                   l10835 073B                                     l10589 0CBC  
                                   l10693 09E0                                     l10861 0779  
                                   l10773 0500                                     l10919 02D5  
                                   l10783 0515                                     l10849 0765  
                                   l10929 0307                                     l10785 0517  
                                   l10971 1F11                                     l10699 09F4  
                                   l10895 0265                                     l10879 0222  
                                   l10995 067C                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 005D                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0255                           __end_of___awdiv 1393  
                         __end_of___lbdiv 1CC6                           __end_of___ftadd 045A  
                         __end_of___ftdiv 0DE2                           __end_of___ftneg 1842  
                         __end_of___ftmul 0F42                                     u13000 0599  
                                   u12115 04E9                           ___awdiv@divisor 0072  
                                   u10605 136A                                     u13005 0578  
                                   u13030 05DA                                     u10615 1374  
                                   u12135 0507                                     _T1CON 0018  
                                   u10625 137C                                     u10705 1A86  
                                   u12225 0704                                     u13035 05B9  
                         __end_of___fttol 0AE3                                     u12255 0754  
                                   u12095 04D2                                     u10585 1360  
                                   u12625 1118                                     u12575 11CE  
                                   u12765 00AC                                     _IOCBF 0396  
                                   u12775 00DE                                     u12865 0190  
                                   u12785 0113                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1F93  
                                   i1l995 10A0                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1AB6  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 179B  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1736  
                                   _Light 012D                          __end_of_TMR1_ISR 1CE8  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 18DF        DimmerLights_DimmingFunction@lights 0026  
                                   _getAD 1BA2                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076                           __end_of_setData 12A6  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 19A8               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 19DB  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 1978  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 19B9                        _setRF_DimmerLights 082B  
                         ___lbdiv@divisor 0072               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0075  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 005F  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 190B                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 14ED                       ?_setRF_DimmerLights 005D  
                        __end_of_Fosc_Set 27C9            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0065  
                          _Exception_Main 052F                          ?_CC2500_WriteREG 0074  
       __end_of_DimmerIntr_ValueCalculate 1492                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1812                                    ??_main 007A  
                           ___fttol@sign1 004E                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0BF6  
                          _setMemory_Data 186B                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 13E7  
                               ??_IOC_ISR 0071                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00A0                               _DimmerIntr2 00B0  
                _getMain_All_LightsStatus 191A                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1A77                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08F9  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1AF6  
                               ??_RF_Main 007A               ?_DimmerLights_TwoPhase_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1804  
                               ??_WDT_Set 0072                          __end_of___awtoft 1D0A  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 160B  
                _getMain_All_Error_Status 1E3C                                    _IOCBF2 1CB2  
                                  i1l1019 10D8                                    i1l1462 001A  
                                  i1l8513 1EC2                                    i1l9081 1CE1  
                                  i1l9091 189F                                    i1l8531 10C6  
                                  i1l8525 10BF                                    i1l8463 1087  
                                  i1l8537 10CE                                    i1l8475 1096  
                                  i1l8469 108E                                    i1l8575 1EF2  
                                  i1l9627 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01A0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1B54  
                                  u954_25 1CDC                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 184C     __size_of_setDimmerLights_DimmingClose 000A  
            _setDimmerLights_DimmingClose 1842                      Exception_Main@i_4227 002B  
                      DelayTime_1us@count 0072                        setRF_AdjControl@sw 0079  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1AA1                                    _Dimmer 0120  
                                  _DlySw1 01E2                                    _DlySw2 01E7  
                        _setRF_AdjControl 1F93                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1968  
              __end_of_Mcu_Initialization 1A0F                       __end_of_Buzzer_Main 12EC  
                                  _Memory 0230                                    _Timer1 0125  
                                  ___bmul 19A8                    __end_of_Exception_Main 0601  
                    Exception_Main@lights 002D                                    ___wmul 1C2B  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 0131  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1BF2  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1BD7  
                                  _s_data 00EF                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 14ED                                    _myMain 00CF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1876  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 12EC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 27B9  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1DE9  
        __end_of_setDimmerIntr_Dimming_Sw 1D74                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1D99                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1998               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074               __size_of_DimmerLights_IOC_1 0030  
             __size_of_DimmerLights_IOC_2 0030                     __end_of_SwPointSelect 1AE0  
             __size_of_DimmerLights_TMR_1 0038               __size_of_DimmerLights_TMR_2 0038  
            __size_of_Flash_Memory_Modify 0082                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                        setTemp_Main@TempGO 0060  
                        ___lbdiv@dividend 0074                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1AB6  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$6249 0074  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0029  
               _setDimmerLights_SwOn$2659 0027                 _setDimmerLights_SwOn$2668 0028  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK5 1C85  
                           __end_of_getAD 1BBC                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 18BB  
                         _getSw_KeyStatus 1C65                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073     DimmerLights_AssignationDimming@status 005F  
                         ?_setMemory_Data 0072            ??_DimmerLights_DimmingFunction 0025  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0063             ??_Flash_Memory_Initialization 0076  
                        ___lbdiv@quotient 0076                      _getMain_Lights_Count 19CA  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F3  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1AF6                __end_of_set_TimeoutCleared 27DF  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 005F  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 18A3                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 27BF                        ??_CC2500_WriteByte 0072  
                               ?_Division 0077                                __pbssBANK0 006C  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 12A6  
                       ??_setRFSW_Control 0065               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 27C5                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1819  
                              __pnvCOMMON 007B                             ??_Switch_Main 007A  
                          DelayTime_1us@i 0074                            DelayTime_1us@j 0076  
                    ??_LED_Initialization 0077                              _DimmerLights 006C  
                       LedPointSelect@led 0073     getAll_DimmerIntr_Dimming_Sw_RF@status 0075  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1492                            _getDelayOff_GO 190B  
                     _CC2500_WriteCommand 1B6E                      ?_Temp_Initialization 0070  
                                 ?___bmul 0072                          ??_setDelayOff_GO 005F  
       __end_of_DimmerIntr_Initialization 0E8E             ??_DimmerLights_Initialization 007A  
                                 ?___wmul 0072                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0016  
                              _getLoad_AD 0968                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 27EB                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 0007               ??_DimmerIntr_ValueCalculate 0022  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
     __size_of_DimmerLights_TwoPhase_Main 0054                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 180B                                   ?_setBuz 0024  
                               ?___awtoft 0020                                 ?___ftpack 0072  
                              _getTemp_AD 166D        __end_of_DimmerLights_SelectPointer 1A4D  
              _DimmerLights_SelectPointer 1A38                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 1860                        _setRFSW_AdjControl 0AE3  
                  __end_of_setProductData 18AF             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 1897                                   _IOC_Set 1876  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0062  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 119C                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1066                    __size_of_CC2500_RxData 0062  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 27BC  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0078                                   _WDT_Set 184C  
         __end_of_setControl_Lights_Table 0C91                           setRF_Main@error 006B  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 143B  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 188C                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1988  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 191A                                   _VarLED1 016C  
                                 _VarLED2 01EC            __end_of_getDimmerLights_Status 18FC  
                       __end_of_getRxData 15AB                   __end_of_getSw_KeyStatus 1C85  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 133F            ??_setDimmerLights_DimmingClose 0075  
                                 ___lbdiv 1CA5                                   ___ftadd 0364  
                                 ___ftdiv 0D39                                   ___ftneg 1839  
                         __size_of___wmul 001D                                   ___ftmul 0E8E  
                                 ___fttol 0A5C                       __end_of_Switch_Main 1897  
                                 ___lwdiv 1F5D                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 19DB  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0060  
         DimmerIntr_ValueCalculate@lights 0024                           __size_of_setBuz 0053  
                                 __ptext1 10EA                                   __ptext2 18DF  
                                 __ptext3 166D                                   __ptext4 0968  
                                 __ptext5 1BA2                                   __ptext6 1998  
                                 __ptext7 0002                                   __ptext8 27C2  
                                 __ptext9 045A                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0066                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 11DD                 __end_of_Flash_Memory_Read 107A  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 06C5  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 1821  
                __end_of_setRF_AdjControl 1FC9                         _DimmerLights_Main 1EF9  
                                 _setData 1262            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 27DA                __end_of_CC2500_ClearRXFIFO 27D1  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 27D5  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 007B                            _LedPointSelect 1C0E  
               getAll_Sw_KeyStatus@status 0073                           getTemp_AD@ADRES 0078  
                     _DelayOffPointSelect 1A23                                   clrloop0 27E6  
          __size_of_Switch_Initialization 0008                 _DimmerIntr_ValueCalculate 143B  
           __end_of_Switch_Initialization 1839                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 0801  
                           _DelayTime_1us 1D74                         __end_of_setTxData 27F9  
              __end_of_Flash_Memory_Write 1E3C        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 27DF                __end_of_setRF_TransceiveGO 1958  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 27E0  
                              _setSw_Main 01F3                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 002A                         _CC2500_ReadStatus 1D2C  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1968  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 160B                             _CC2500_TxData 0891  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 09DA  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1A4D                       _Flash_Memory_Unlock 07F7  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                   setTemp_Main@DangerValue 0063  
                  setSw_Initialization@sw 0076                 __end_of_DimmerLights_Main 1F29  
                      _Mcu_Initialization 19FD                  __size_of_CC2500_PowerRST 0044  
        __size_of_setOverTemp_ADV_Restore 001A              __end_of_setRF_TimeoutCleared 27CD  
                    __end_of_my_MainTimer 1122                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C2B  
                __size_of_CC2500_WriteREG 0022                  Load_Main@ErrorCountValue 0025  
        getDimmerIntr_DimmingValue@lights 0074          setDimmerIntr_DimmingValue@lights 0074  
               __end_of_CC2500_InitSetREG 082B                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0066  
       DimmerLights_AssignationDimming@sw 0060                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1D4F                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1DC0  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1B6E  
                    _setRF_Initialization 1856                        _setMemory_LoopSave 1988  
                             _Switch_Main 188C                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 19EC  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1A8C               ??_DimmerIntr_Initialization 005A  
                    ??_Mcu_Initialization 0073               __end_of_getAll_Sw_KeyStatus 19CA  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0072                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 19B9       __size_of_getDimmerIntr_DimmingValue 0014  
        DimmerLights_TwoPhase_Main@lights 0061                      setRF_DimmerLights@on 005D  
                          __end_of___wmul 1C48                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 154C             __size_of_setDimmerLights_Line 0017  
           __size_of_setDimmerLights_SwOn 0073                            __end_of_setBuz 133F  
              __end_of_DimmerLights_IOC_1 1EC9                __end_of_DimmerLights_IOC_2 1EF9  
                    _CC2500_FrequencyCabr 1881                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 115C  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 10B2  
              __end_of_DimmerLights_TMR_2 10EA                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 27F9                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1C65           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 052F                            ??_RF_RxDisable 0072  
  __end_of_getDimmerLights_PercentToValue 1736   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 16D1                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007             setRF_AdjControl@dimmingStatus 0078  
                      _set_TimeoutCleared 27DA         __end_of_setDimmerIntr_MaxmumValue 1B0D  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0168                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0064  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 27C2                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00EC  
                   setProductData@address 005C                       Exception_Main@count 0027  
                     Exception_Main@error 0028                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0015  
        __end_of_getMain_All_LightsStatus 1929                                 _Tx_Length 00EE  
                             __pdataBANK5 02A0                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1E6A  
                        _CC2500_SIDLEMode 1800                __size_of_DimmerLights_Main 0030  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074            getDimmerIntr_Dimming_Sw@lights 0073  
                           ??_setLED_Main 0074                         __size_of___awtoft 0022  
                       __size_of___ftpack 0060                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 0026  
          getDimmerIntr_Dimming_Sw@status 0072                                 ___latbits 0003  
                        _setMemory_Modify 1938                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK4 0255                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 0DE2                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 005F  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1BD7  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                          getRxData@error 0069               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 27C9                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
      __size_of_DimmerIntr_ValueCalculate 0057                       __size_of_setRF_Main 00BF  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1958                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 0800  
                               _getBuz_GO 1978                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 06C5               _Flash_Memory_Initialization 0601  
                                ?___awdiv 0072                                 __ptext100 191A  
                               __ptext101 190B                                  ?___lbdiv 0072  
                               __ptext110 1FC9                                 __ptext102 1958  
                               __ptext111 27EB                                 __ptext103 13E7  
                               __ptext120 27B2                                 __ptext112 1E3C  
                               __ptext104 27F2                                 __ptext121 0DE2  
                               __ptext113 1393                                 __ptext105 1948  
                               __ptext130 1CE8                                 __ptext122 1938  
                               __ptext114 1E6A                                 __ptext106 082B  
                               __ptext131 15AB                                 __ptext123 1736  
                               __ptext115 1AF6                                 __ptext107 1B0D  
                               __ptext140 1AE0                                 __ptext132 18FC  
                               __ptext124 16D1                                 __ptext116 1DC0  
                               __ptext108 1D4F                                 __ptext141 1122  
                               __ptext133 1CA5                                 __ptext125 0A5C  
                               __ptext117 0C91                                 __ptext109 1A0F  
                                ?___ftadd 0039                                 __ptext150 1CC6  
                               __ptext142 18ED                                 __ptext134 1821  
                               __ptext126 1839                                 __ptext118 143B  
                               __ptext151 10B2                                 __ptext143 1A38  
                               __ptext135 08F9                                 __ptext127 0E8E  
                               __ptext119 1860                                 __ptext152 107A  
                               __ptext144 1819                                 __ptext136 18A3  
                               __ptext128 0D39                                 __ptext153 1897  
                               __ptext145 27D5                                 __ptext137 0784  
                               __ptext129 0364                                 __ptext154 1EC9  
                               __ptext146 1A23                                 __ptext138 12EC  
                               __ptext155 1E99                                 __ptext147 12A6  
                               __ptext139 133F                                 __ptext148 27B3  
                               _getRxData 154C                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 119C  
                        ??_setProductData 005B                   _setOverTemp_ADV_Restore 1B88  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 27B6                             ??_setLog_Code 005D  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1ACB  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1A23              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1A0F                    CC2500_WriteByte@loop_a 0073  
                                ?_setData 0070            __size_of_setDimmerLights_OnOff 00BE  
                       ?_setRF_AdjControl 0070                                 _r_address 0130  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 003A  
          __size_of_myMain_Initialization 000E             __end_of_setDimmerLights_SwOff 115C  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 18ED  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 1ACB  
                     __end_of_setLED_Main 121E              ??_DimmerLights_TwoPhase_Main 007A  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 27C2                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 18C7  
                         SwPointSelect@sw 0073                                 clear_ram0 27E5  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10EA                                 _setTxData 27F2  
     __end_of_DimmerLights_Initialization 186B               _DimmerLights_Initialization 1860  
                      _CC2500_ClearRXFIFO 27CD                    _Flash_Memory_Main$3708 0021  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 27D1  
                _getDimmerIntr_Dimming_Sw 1AE0                  setRF_DimmerLights@lights 0061  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 19FD  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0060      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 0087       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1E12                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1CC6  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 18D3  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1948                                  _RF_Count 0128  
                    __end_of_RF_RxDisable 1831                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1B88                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1998                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D5                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00EA  
                            setSw_Main@sw 002D                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 18BB  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1F5D  
                   _DlyOff_Initialization 27D5         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                                  _Division 18FC  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DC0               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1D4F                                  _Fosc_Set 27C5  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 09DA                        __end_of_getLoad_OK 27F2  
                   _Switch_Initialization 1831         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 16D1  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1B24                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0015                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 012F                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$4214 0073  
           _getMain_All_Error_Status$4215 0075                  __end_of_getDimmer_LoadGO 2800  
                     _Load_Initialization 27B6          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
               ??_setOverTemp_ADV_Restore 0072                              _setTemp_Main 045A  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0029  
                                ___awtoft 1CE8                          ??_LedPointSelect 0072  
                                ___ftpack 15AB             __size_of_getMain_Lights_Count 0011  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 11DD                __end_of_setRF_DimmerLights 0891  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 180B                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                          __size_of_setData 0044  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 1B88                                  __ptext11 27BF  
                                __ptext20 27DA                                  __ptext12 0800  
                                __ptext21 1AA1                                  __ptext13 188C  
                                __ptext30 0BF6                                  __ptext22 1831  
                                __ptext14 01F3                                  __ptext31 1F93  
                                __ptext23 1812                                  __ptext15 19EC  
                                __ptext40 1D2C                                  __ptext32 115C  
                                __ptext24 27BC                                  __ptext16 1D99  
                                __ptext41 1BF2                                  __ptext33 0AE3  
                                __ptext25 06C5                                  __ptext17 1C65  
                                __ptext50 27D1                                  __ptext42 1A8C  
                                __ptext34 1B3C                                  __ptext26 1262  
                                __ptext18 1ACB                                  __ptext51 27CD  
                                __ptext43 1800                                  __ptext35 19DB  
                                __ptext27 154C                                  __ptext19 1AB6  
                                __ptext60 18D3                                  __ptext52 1B6E  
                                __ptext44 121E                                  __ptext36 1978  
                                __ptext28 1F29                                  __ptext61 1B54  
                                __ptext53 27C9                                  __ptext45 0801  
                                __ptext37 1829                                  __ptext29 1988  
                                __ptext70 1C2B                                  __ptext62 1876  
                                __ptext54 1A77                                  __ptext46 1C48  
                                __ptext38 0891                                  __ptext71 1F5D  
                                __ptext63 27C5                                  __ptext55 1B24  
                                __ptext47 1D0A                                  __ptext39 160B  
                                __ptext80 09DA                                  __ptext72 27B6  
                                __ptext64 180B                                  __ptext56 27B9  
                                __ptext48 1881                                  __ptext81 18AF  
                                __ptext73 1BBC                                  __ptext65 0053  
                                __ptext57 1856                                  __ptext49 1D74  
                                __ptext90 179B                                  __ptext82 0601  
                                __ptext74 18C7                                  __ptext66 19CA  
                                __ptext58 19FD                                  __ptext91 0F42  
                                __ptext83 186B                                  __ptext75 11DD  
                                __ptext67 1804                                  __ptext59 184C  
                                __ptext92 14ED                                  __ptext84 1E12  
                                __ptext76 18BB                                  __ptext68 27F9  
                                __ptext93 1C0E                                  __ptext85 07F7  
                                __ptext77 1968                                  __ptext69 1BD7  
                                __ptext94 1842                                  __ptext86 1066  
                                __ptext78 119C                                  __ptext95 1A62  
                                __ptext87 052F                                  __ptext79 19B9  
                                __ptext96 1DE9                                  __ptext88 1929  
                                __ptext97 0B6A                                  __ptext89 1EF9  
                                __ptext98 19A8                                  __ptext99 1A4D  
                                __product 02A0                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 1938  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B24  
                      _DimmerLights_IOC_1 1E99                        _DimmerLights_IOC_2 1EC9  
            __end_of_setDimmerLights_SwOn 07F7                              ??_setSw_Main 002B  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 19EC        __size_of_DimmerIntr_Initialization 00AC  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 107A  
                      _DimmerLights_TMR_2 10B2                  __end_of_CC2500_SIDLEMode 1804  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1A38  
                setOverTemp_ADV_Restore@i 0073                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1BF2                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1C48                  __end_of_setMemory_Modify 1948  
    _getAll_DimmerIntr_Dimming_Sw_RF$2605 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2606 0074  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 0784                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1A8C               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$7447 0074                                  main@argc 0255  
                                main@argv 0257                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$7443 0073                      _getSw_KeyStatus$7444 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 121E  
                __size_of_getSw_KeyStatus 0020              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1A77                _setDimmerIntr_DimmingValue 1A62  
             __end_of_Flash_Memory_Modify 0A5C              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1F29               __end_of_Flash_Memory_Unlock 0800  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1D0A  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070                      ??_DimmerLights_IOC_2 0070  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0021           __end_of_setOverTemp_ADV_Restore 1BA2  
      __end_of_DimmerLights_TwoPhase_Main 13E7                _DimmerLights_TwoPhase_Main 1393  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0061    __end_of_setDimmerLights_Initialization 27B3  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 27B2  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 0008  
                       _RF_Initialization 27B9                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
 __end_of_DimmerLights_AssignationDimming 1E99  __size_of_DimmerLights_AssignationDimming 002F  
       ??_DimmerLights_AssignationDimming 005D          ?_DimmerLights_AssignationDimming 0070  
         _DimmerLights_AssignationDimming 1E6A                      _Flash_Memory_Erasing 18AF  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00ED  
                 __size_of_Exception_Main 00D2                             Division@value 0020  
         __end_of_DelayOff_Initialization 1821                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1829                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0B6A  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009B  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00C4               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1D99                ??_getDimmerIntr_Dimming_Sw 0072  
                 __end_of_CC2500_ReadByte 1C0E              __end_of_setSw_Initialization 1819  
                         _Timeout_Counter 1AA1           __size_of_getDimmerLights_Status 000F  
         getDimmerLights_ValueToPercent@i 0057                              _RF_RxDisable 1829  
        Flash_Memory_Initialization@value 0077                __end_of_LED_Initialization 18C7  
          __end_of_setTemp_Initialization 0801                               Division@num 0077  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 27BC  
               __size_of_setRF_AdjControl 0036                     __end_of_CC2500_RxData 166D  
                   __end_of_CC2500_TxData 08F9                     _setLoad_AH_AL_Restore 1BBC  
                 __end_of_CC2500_PowerRST 1262  
