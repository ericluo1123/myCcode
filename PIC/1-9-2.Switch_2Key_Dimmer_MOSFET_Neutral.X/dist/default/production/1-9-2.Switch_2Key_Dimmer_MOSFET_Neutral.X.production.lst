

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 20 16:27:47 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1F52                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1F52  3463               	retlw	99
  2163  1F53  3402               	retlw	2
  2164  1F54  3400               	retlw	0
  2165  1F55  3400               	retlw	0
  2166  1F56  3400               	retlw	0
  2167  1F57  3400               	retlw	0
  2168  1F58  3400               	retlw	0
  2169  1F59  3400               	retlw	0
  2170  1F5A  3400               	retlw	0
  2171  1F5B  3400               	retlw	0
  2172  1F5C  3400               	retlw	0
  2173  1F5D  3400               	retlw	0
  2174  1F5E  34FF               	retlw	255
  2175  1F5F  34FF               	retlw	255
  2176  1F60  34FF               	retlw	255
  2177  1F61  3400               	retlw	0
  2178  1F62  3400               	retlw	0
  2179  1F63  3400               	retlw	0
  2180  1F64  3400               	retlw	0
  2181  1F65  3400               	retlw	0
  2182  1F66  3400               	retlw	0
  2183  1F67  3400               	retlw	0
  2184  1F68  3400               	retlw	0
  2185  1F69  3400               	retlw	0
  2186  1F6A  3400               	retlw	0
  2187  1F6B  3400               	retlw	0
  2188  1F6C  3400               	retlw	0
  2189  1F6D  3400               	retlw	0
  2190  1F6E  3400               	retlw	0
  2191  1F6F  3400               	retlw	0
  2192  1F70  3400               	retlw	0
  2193  1F71  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  020D                     _WPUB	set	525
  2368  1069                     _WPUB1	set	4201
  2369  106A                     _WPUB2	set	4202
  2370  0396                     _IOCBF	set	918
  2371  0395                     _IOCBN	set	917
  2372  0394                     _IOCBP	set	916
  2373  1CB2                     _IOCBF2	set	7346
  2374                           
  2375                           ; #config settings
  2376  0000                     
  2377                           	psect	cinit
  2378  0015                     start_initialization:	
  2379  0015                     __initialization:	
  2380                           
  2381                           ; Clear objects allocated to BITCOMMON
  2382  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2383                           
  2384                           ; Clear objects allocated to COMMON
  2385  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2386  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2387  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK0
  2390  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  001A  30A0               	movlw	low __pbssBANK1
  2394  001B  0084               	movwf	4
  2395  001C  3000               	movlw	high __pbssBANK1
  2396  001D  0085               	movwf	5
  2397  001E  3048               	movlw	72
  2398  001F  319B  231D  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  0022  3020               	movlw	low __pbssBANK2
  2402  0023  0084               	movwf	4
  2403  0024  3001               	movlw	high __pbssBANK2
  2404  0025  0085               	movwf	5
  2405  0026  304E               	movlw	78
  2406  0027  319B  231D  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  002A  30A0               	movlw	low __pbssBANK3
  2410  002B  0084               	movwf	4
  2411  002C  3001               	movlw	high __pbssBANK3
  2412  002D  0085               	movwf	5
  2413  002E  304F               	movlw	79
  2414  002F  319B  231D  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  0032  3020               	movlw	low __pbssBANK4
  2418  0033  0084               	movwf	4
  2419  0034  3002               	movlw	high __pbssBANK4
  2420  0035  0085               	movwf	5
  2421  0036  3025               	movlw	37
  2422  0037  319B  231D  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  003A  3052               	movlw	low __pidataBANK4
  2426  003B  0084               	movwf	4
  2427  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2428  003D  0085               	movwf	5
  2429  003E  3045               	movlw	low __pdataBANK4
  2430  003F  0086               	movwf	6
  2431  0040  3002               	movlw	high __pdataBANK4
  2432  0041  0087               	movwf	7
  2433  0042  3020               	movlw	32
  2434  0043  319B  2317         	fcall	init_ram
  2435  0045                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  0045                     __end_of__initialization:	
  2439  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0046  0020               	movlb	0
  2441  0047  3188  2837         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03C0                     __pbitbssCOMMON:	
  2445  03C0                     _Receive_OK:	
  2446  03C0                     	ds	1
  2447  03C1                     _Transceive_OK:	
  2448  03C1                     	ds	1
  2449                           
  2450                           	psect	bssCOMMON
  2451  0075                     __pbssCOMMON:	
  2452  0075                     _DelayOff:	
  2453  0075                     	ds	1
  2454  0076                     _DimmerLightsIntr:	
  2455  0076                     	ds	1
  2456  0077                     _Sw:	
  2457  0077                     	ds	1
  2458                           
  2459                           	psect	bssBANK0
  2460  006F                     __pbssBANK0:	
  2461  006F                     _DimmerLights:	
  2462  006F                     	ds	1
  2463                           
  2464                           	psect	bssBANK1
  2465  00A0                     __pbssBANK1:	
  2466  00A0                     _myMain:	
  2467  00A0                     	ds	14
  2468  00AE                     _Buz1:	
  2469  00AE                     	ds	12
  2470  00BA                     _RF1:	
  2471  00BA                     	ds	12
  2472  00C6                     _Dimmer:	
  2473  00C6                     	ds	3
  2474  00C9                     _CRC:	
  2475  00C9                     	ds	1
  2476  00CA                     _DimmerLights11:	
  2477  00CA                     	ds	1
  2478  00CB                     _DimmerLights22:	
  2479  00CB                     	ds	1
  2480  00CC                     _DimmerLightsIntrIOC:	
  2481  00CC                     	ds	1
  2482  00CD                     _LED:	
  2483  00CD                     	ds	1
  2484  00CE                     _RSSI:	
  2485  00CE                     	ds	1
  2486  00CF                     _Rx_Length:	
  2487  00CF                     	ds	1
  2488  00D0                     _SPI0Buffer:	
  2489  00D0                     	ds	1
  2490  00D1                     _SwDetect:	
  2491  00D1                     	ds	1
  2492  00D2                     _Tx_Length:	
  2493  00D2                     	ds	1
  2494  00D3                     _r_address:	
  2495  00D3                     	ds	1
  2496  00D4                     _r_data:	
  2497  00D4                     	ds	1
  2498  00D5                     _s_data:	
  2499  00D5                     	ds	1
  2500  00D6                     _Temp:	
  2501  00D6                     	ds	18
  2502                           
  2503                           	psect	bssBANK2
  2504  0120                     __pbssBANK2:	
  2505  0120                     _Timer1:	
  2506  0120                     	ds	3
  2507  0123                     _RF_Count:	
  2508  0123                     	ds	2
  2509  0125                     _WDT:	
  2510  0125                     	ds	2
  2511  0127                     _Load:	
  2512  0127                     	ds	46
  2513  0155                     _DimmerLights1:	
  2514  0155                     	ds	17
  2515  0166                     _VarErrLED:	
  2516  0166                     	ds	4
  2517  016A                     _VarLED1:	
  2518  016A                     	ds	4
  2519                           
  2520                           	psect	bssBANK3
  2521  01A0                     __pbssBANK3:	
  2522  01A0                     _RF_Data:	
  2523  01A0                     	ds	30
  2524  01BE                     _DimmerLights2:	
  2525  01BE                     	ds	17
  2526  01CF                     _Sw1:	
  2527  01CF                     	ds	9
  2528  01D8                     _Sw2:	
  2529  01D8                     	ds	9
  2530  01E1                     _DlySw1:	
  2531  01E1                     	ds	5
  2532  01E6                     _DlySw2:	
  2533  01E6                     	ds	5
  2534  01EB                     _VarLED2:	
  2535  01EB                     	ds	4
  2536                           
  2537                           	psect	bssBANK4
  2538  0220                     __pbssBANK4:	
  2539  0220                     _Memory:	
  2540  0220                     	ds	37
  2541                           
  2542                           	psect	dataBANK4
  2543  0245                     __pdataBANK4:	
  2544  0245                     __product:	
  2545  0245                     	ds	32
  2546                           
  2547                           	psect	clrtext
  2548  1B1D                     clear_ram0:	
  2549                           ;	Called with FSR0 containing the base address, and
  2550                           ;	WREG with the size to clear
  2551                           
  2552  1B1D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2553  1B1E                     clrloop0:	
  2554  1B1E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2555  1B1F  3101               	addfsr 0,1
  2556  1B20  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2557  1B21  2B1E               	goto	clrloop0	;have we reached the end yet?
  2558  1B22  3400               	retlw	0	;all done for this memory range, return
  2559                           
  2560                           	psect	inittext
  2561  1B17                     init_ram:	
  2562  1B17  00FE               	movwf	126
  2563  1B18                     initloop:	
  2564  1B18  0012               	moviw fsr0++
  2565  1B19  001E               	movwi fsr1++
  2566  1B1A  0BFE               	decfsz	126,f
  2567  1B1B  2B18               	goto	initloop
  2568  1B1C  3400               	retlw	0
  2569                           
  2570                           	psect	cstackBANK4
  2571  0265                     __pcstackBANK4:	
  2572  0265                     ?_main:	
  2573  0265                     main@argc:	
  2574                           ; 2 bytes @ 0x0
  2575                           
  2576                           
  2577                           ; 2 bytes @ 0x0
  2578  0265                     	ds	2
  2579  0267                     main@argv:	
  2580                           
  2581                           ; 2 bytes @ 0x2
  2582  0267                     	ds	2
  2583                           
  2584                           	psect	cstackBANK1
  2585  00E8                     __pcstackBANK1:	
  2586  00E8                     setDimmerLights_ErrorClose@count:	
  2587  00E8                     Exception_Main@count:	
  2588                           ; 1 bytes @ 0x0
  2589                           
  2590                           
  2591                           ; 1 bytes @ 0x0
  2592  00E8                     	ds	1
  2593  00E9                     setDimmerLights_ErrorClose@lights:	
  2594  00E9                     Exception_Main@error:	
  2595                           ; 1 bytes @ 0x1
  2596                           
  2597                           
  2598                           ; 1 bytes @ 0x1
  2599  00E9                     	ds	1
  2600  00EA                     setDimmerLights_ErrorClose@i:	
  2601  00EA                     Exception_Main@i:	
  2602                           ; 2 bytes @ 0x2
  2603                           
  2604                           
  2605                           ; 2 bytes @ 0x2
  2606  00EA                     	ds	2
  2607  00EC                     getRxData@error:	
  2608  00EC                     Exception_Main@i_3618:	
  2609                           ; 1 bytes @ 0x4
  2610                           
  2611                           
  2612                           ; 2 bytes @ 0x4
  2613  00EC                     	ds	1
  2614  00ED                     setRF_Main@loop_f:	
  2615                           
  2616                           ; 1 bytes @ 0x5
  2617  00ED                     	ds	1
  2618  00EE                     Exception_Main@lights:	
  2619  00EE                     setRF_Main@Receive_OK:	
  2620                           ; 1 bytes @ 0x6
  2621                           
  2622                           
  2623                           ; 1 bytes @ 0x6
  2624  00EE                     	ds	1
  2625  00EF                     setRF_Main@error:	
  2626                           
  2627                           ; 1 bytes @ 0x7
  2628  00EF                     	ds	1
  2629                           
  2630                           	psect	cstackCOMMON
  2631  0070                     __pcstackCOMMON:	
  2632  0070                     ?_Timeout_Counter:	
  2633  0070                     ?_set_TimeoutCleared:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_CC2500_WriteByte:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_CC2500_WriteCommand:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_ReadStatus:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_CC2500_ReadByte:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_CC2500_PowerRST:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_CC2500_InitSetREG:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_CC2500_InitPATable:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_CC2500_ClearTXFIFO:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_CC2500_ClearRXFIFO:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_CC2500_FrequencyCabr:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_CC2500_SIDLEMode:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_DlyOff_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DlyOff_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setDimmerLights_ErrorClose:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setDimmerLights_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setDimmerLights_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_Line:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setTxData:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setLED_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setLED_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Fosc_Set:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_IO_Set:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_TMR1_Set:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_ADC_Set:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_IOC_Set:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_WDT_Set:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_IOC_ISR:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_TMR1_ISR:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Flash_Memory_Write:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Flash_Memory_Modify:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_WDT_Clearing:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_myMain_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Temp_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Load_Initialization:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_Switch_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_RF_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_getLoad_AD:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_getTemp_AD:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_my_MainTimer:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Temp_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Load_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_Switch_Main:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_RF_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Exception_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setLoad_AH_AL_Restore:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setTemp_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setTemp_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setRF_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setRF_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_RF_RxDisable:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_getRxData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setLog_Code:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setControl_Lights_Table:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setRFSW_Control:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setRFSW_AdjControl:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setRF_DimmerValue:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setSw_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setSw_Main:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_Buzzer_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_Buzzer_Main:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_CC2500_TxData:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_CC2500_RxData:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_CC2500_PowerOnInitial:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DelayOffPointSelect:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DelayOff_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_DelayOff_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DimmerIntrIOCPointSelect:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ??_DimmerIntrIOCPointSelect:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerIntrPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ??_DimmerIntrPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setDimmerLights_IntrControl:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DimmerLightsPointSelect:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_DimmerLights_Initialization:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setDimmerLights_SwOn:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_setDimmerLights_SwOff:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_setDimmerLights_AdjOn:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_DimmerLights_Main:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_setDimmerLights_AdjRF:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_LedPointSelect:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_LED_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_LED_Main:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_Mcu_Initialization:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_ISR:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_setDimmerReClock:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_Flash_Memory_Initialization:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_Flash_Memory_Main:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_Flash_Memory_Unlock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_Flash_Memory_Erasing:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_setMemory_Modify:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_setMemory_LoopSave:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_WDT_Main:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_setRF_Learn:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_TouchPower:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_SwPointSelect:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_DelayTimejudge:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmerLights_Allow_Condition:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getLoad_OK:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getMain_All_Error_Status:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getMain_LightsStatus:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_setPercentValue:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getPercentValue:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_Flash_Memory_Read:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getRF_KeyStatus:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getSw_KeyStatus:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getDelayOff_GO:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_getDimmer_LoadGO:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getDimmerLights_Line:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getDimmerLights_Status:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getAll_DimmerLights_AdjSw:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getDimmer_Load_Status:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getMain_Lights_Count:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972                           
  2973                           ; 1 bytes @ 0x0
  2974  0070                     	ds	1
  2975  0071                     DimmerIntrIOCPointSelect@lights:	
  2976  0071                     DimmerIntrPointSelect@lights:	
  2977                           ; 1 bytes @ 0x1
  2978                           
  2979                           
  2980                           ; 1 bytes @ 0x1
  2981  0071                     	ds	1
  2982  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2983  0072                     ??_setDimmerLights_IntrControl:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989                           
  2990                           ; 1 bytes @ 0x2
  2991  0072                     	ds	1
  2992  0073                     ??_IOC_ISR:	
  2993  0073                     ??_setDimmerReClock:	
  2994                           ; 0 bytes @ 0x3
  2995                           
  2996  0073                     setDimmerLights_IntrControl@lights:	
  2997                           ; 0 bytes @ 0x3
  2998                           
  2999                           
  3000                           ; 1 bytes @ 0x3
  3001  0073                     	ds	1
  3002  0074                     ??_TMR1_ISR:	
  3003  0074                     ??_ISR:	
  3004                           ; 0 bytes @ 0x4
  3005                           
  3006                           
  3007                           ; 0 bytes @ 0x4
  3008  0074                     	ds	1
  3009                           
  3010                           	psect	cstackBANK0
  3011  0020                     __pcstackBANK0:	
  3012  0020                     ??_Timeout_Counter:	
  3013  0020                     ??_set_TimeoutCleared:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_CC2500_WriteByte:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_CC2500_ReadByte:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ?_DelayTime_1us:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getLoad_OK:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_getMain_All_Error_Status:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getMain_LightsStatus:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_setDimmerLights_Line:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_setTxData:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_Fosc_Set:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_IO_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_TMR1_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_ADC_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_IOC_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_WDT_Set:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_Flash_Memory_Read:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ?_setMemory_Data:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Flash_Memory_Write:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_WDT_Clearing:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_myMain_Initialization:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Temp_Initialization:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_setLoad_AH_AL_Restore:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_setTemp_Initialization:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_setRF_Initialization:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_getRF_KeyStatus:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_getSw_KeyStatus:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_Buzzer_Initialization:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_Buzzer_Main:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_DelayOffPointSelect:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_DimmerLightsPointSelect:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_getDimmer_LoadGO:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_getDimmerLights_Line:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getDimmer_Load_Status:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ??_LedPointSelect:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_Flash_Memory_Unlock:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_Flash_Memory_Erasing:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_setMemory_Modify:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_setMemory_LoopSave:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_WDT_Main:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getMain_Lights_Count:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_setRF_Learn:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_TouchPower:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_SwPointSelect:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ?___bmul:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ?_getBuz_GO:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0020                     ?_getAD:	
  3149                           ; 2 bytes @ 0x0
  3150                           
  3151  0020                     ?___wmul:	
  3152                           ; 2 bytes @ 0x0
  3153                           
  3154  0020                     ?___awdiv:	
  3155                           ; 2 bytes @ 0x0
  3156                           
  3157  0020                     ?___lwdiv:	
  3158                           ; 2 bytes @ 0x0
  3159                           
  3160  0020                     ?___ftpack:	
  3161                           ; 2 bytes @ 0x0
  3162                           
  3163  0020                     getDimmer_LoadGO@loadgo:	
  3164                           ; 3 bytes @ 0x0
  3165                           
  3166  0020                     setDimmerLights_Line@lights:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0020                     getDimmer_Load_Status@status:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0020                     getAD@adcon1:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0020                     setMemory_Data@data:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0020                     getMain_LightsStatus@status:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0020                     getMain_Lights_Count@count:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0020                     getLoad_OK@ok:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0020                     ___bmul@multiplicand:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     DelayTime_1us@count:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     ___wmul@multiplier:	
  3194                           ; 2 bytes @ 0x0
  3195                           
  3196  0020                     ___awdiv@divisor:	
  3197                           ; 2 bytes @ 0x0
  3198                           
  3199  0020                     ___lwdiv@divisor:	
  3200                           ; 2 bytes @ 0x0
  3201                           
  3202  0020                     ___ftpack@arg:	
  3203                           ; 2 bytes @ 0x0
  3204                           
  3205                           
  3206                           ; 3 bytes @ 0x0
  3207  0020                     	ds	1
  3208  0021                     ??_getDimmerLights_Allow_Condition:	
  3209  0021                     ??_setMemory_Data:	
  3210                           ; 0 bytes @ 0x1
  3211                           
  3212  0021                     ??_RF_Initialization:	
  3213                           ; 0 bytes @ 0x1
  3214                           
  3215  0021                     ??_Mcu_Initialization:	
  3216                           ; 0 bytes @ 0x1
  3217                           
  3218  0021                     ??___bmul:	
  3219                           ; 0 bytes @ 0x1
  3220                           
  3221  0021                     CC2500_WriteByte@loop_a:	
  3222                           ; 0 bytes @ 0x1
  3223                           
  3224  0021                     CC2500_ReadByte@loop_b:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227  0021                     DelayOffPointSelect@sw:	
  3228                           ; 1 bytes @ 0x1
  3229                           
  3230  0021                     DimmerLightsPointSelect@lights:	
  3231                           ; 1 bytes @ 0x1
  3232                           
  3233  0021                     getDimmerLights_Line@line:	
  3234                           ; 1 bytes @ 0x1
  3235                           
  3236  0021                     LedPointSelect@led:	
  3237                           ; 1 bytes @ 0x1
  3238                           
  3239  0021                     Flash_Memory_Read@i:	
  3240                           ; 1 bytes @ 0x1
  3241                           
  3242  0021                     Flash_Memory_Write@i:	
  3243                           ; 1 bytes @ 0x1
  3244                           
  3245  0021                     setMemory_Modify@command:	
  3246                           ; 1 bytes @ 0x1
  3247                           
  3248  0021                     setMemory_LoopSave@command:	
  3249                           ; 1 bytes @ 0x1
  3250                           
  3251  0021                     getMain_Lights_Count@status1:	
  3252                           ; 1 bytes @ 0x1
  3253                           
  3254  0021                     setLoad_AH_AL_Restore@i:	
  3255                           ; 1 bytes @ 0x1
  3256                           
  3257  0021                     setRF_Learn@command:	
  3258                           ; 1 bytes @ 0x1
  3259                           
  3260  0021                     getRF_KeyStatus@key:	
  3261                           ; 1 bytes @ 0x1
  3262                           
  3263  0021                     SwPointSelect@sw:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     _getSw_KeyStatus$6242:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     _getMain_All_Error_Status$3603:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272                           
  3273                           ; 2 bytes @ 0x1
  3274  0021                     	ds	1
  3275  0022                     ??_CC2500_WriteCommand:	
  3276  0022                     ??_CC2500_ReadStatus:	
  3277                           ; 0 bytes @ 0x2
  3278                           
  3279  0022                     ??_DelayTime_1us:	
  3280                           ; 0 bytes @ 0x2
  3281                           
  3282  0022                     ?_CC2500_WriteREG:	
  3283                           ; 0 bytes @ 0x2
  3284                           
  3285  0022                     ??_DlyOff_Initialization:	
  3286                           ; 0 bytes @ 0x2
  3287                           
  3288  0022                     ??_setDimmerLights_Initialization:	
  3289                           ; 0 bytes @ 0x2
  3290                           
  3291  0022                     ?_setLED:	
  3292                           ; 0 bytes @ 0x2
  3293                           
  3294  0022                     ??_setLED_Main:	
  3295                           ; 0 bytes @ 0x2
  3296                           
  3297  0022                     ??_Load_Initialization:	
  3298                           ; 0 bytes @ 0x2
  3299                           
  3300  0022                     ??_getBuz_GO:	
  3301                           ; 0 bytes @ 0x2
  3302                           
  3303  0022                     ??_getDelayOff_GO:	
  3304                           ; 0 bytes @ 0x2
  3305                           
  3306  0022                     ??_getDimmerLights_Status:	
  3307                           ; 0 bytes @ 0x2
  3308                           
  3309  0022                     ??_getAll_DimmerLights_AdjSw:	
  3310                           ; 0 bytes @ 0x2
  3311                           
  3312  0022                     CC2500_WriteREG@value:	
  3313                           ; 0 bytes @ 0x2
  3314                           
  3315  0022                     DlyOff_Initialization@sw:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0022                     getDelayOff_GO@sw:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0022                     _getDimmerLights_Allow_Condition$2329:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0022                     getDimmerLights_Status@lights:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0022                     setLED@command:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0022                     Flash_Memory_Read@address:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333  0022                     setMemory_Data@address:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336  0022                     getMain_Lights_Count@status2:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339  0022                     _getRF_KeyStatus$5258:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0022                     _getSw_KeyStatus$6243:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0022                     ___bmul@product:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     DelayTime_1us@i:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     ___wmul@multiplicand:	
  3352                           ; 2 bytes @ 0x2
  3353                           
  3354  0022                     ___awdiv@dividend:	
  3355                           ; 2 bytes @ 0x2
  3356                           
  3357  0022                     ___lwdiv@dividend:	
  3358                           ; 2 bytes @ 0x2
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0x2
  3362  0022                     	ds	1
  3363  0023                     ??_CC2500_WriteREG:	
  3364  0023                     ??_setLED:	
  3365                           ; 0 bytes @ 0x3
  3366                           
  3367  0023                     ??_DelayOff_Initialization:	
  3368                           ; 0 bytes @ 0x3
  3369                           
  3370  0023                     ??_getAD:	
  3371                           ; 0 bytes @ 0x3
  3372                           
  3373  0023                     CC2500_WriteCommand@command:	
  3374                           ; 0 bytes @ 0x3
  3375                           
  3376  0023                     CC2500_ReadStatus@status_addr:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     getDelayOff_GO@go:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382  0023                     setDimmerLights_Initialization@lights:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385  0023                     _getDimmerLights_Allow_Condition$2330:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388  0023                     getDimmerLights_Status@status:	
  3389                           ; 1 bytes @ 0x3
  3390                           
  3391  0023                     getAll_DimmerLights_AdjSw@count:	
  3392                           ; 1 bytes @ 0x3
  3393                           
  3394  0023                     setLED@led:	
  3395                           ; 1 bytes @ 0x3
  3396                           
  3397  0023                     getAD@adcon0:	
  3398                           ; 1 bytes @ 0x3
  3399                           
  3400  0023                     Flash_Memory_Read@ret:	
  3401                           ; 1 bytes @ 0x3
  3402                           
  3403  0023                     getSw_KeyStatus@status:	
  3404                           ; 1 bytes @ 0x3
  3405                           
  3406  0023                     ___bmul@multiplier:	
  3407                           ; 1 bytes @ 0x3
  3408                           
  3409  0023                     ___ftpack@exp:	
  3410                           ; 1 bytes @ 0x3
  3411                           
  3412  0023                     _getMain_All_Error_Status$3604:	
  3413                           ; 1 bytes @ 0x3
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0x3
  3417  0023                     	ds	1
  3418  0024                     ??_CC2500_ClearTXFIFO:	
  3419  0024                     ??_CC2500_ClearRXFIFO:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ??_CC2500_SIDLEMode:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     ??_DelayTimejudge:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     ??_setLED_Initialization:	
  3429                           ; 0 bytes @ 0x4
  3430                           
  3431  0024                     ??_Flash_Memory_Modify:	
  3432                           ; 0 bytes @ 0x4
  3433                           
  3434  0024                     ??_getLoad_AD:	
  3435                           ; 0 bytes @ 0x4
  3436                           
  3437  0024                     ??_getTemp_AD:	
  3438                           ; 0 bytes @ 0x4
  3439                           
  3440  0024                     ??_RF_RxDisable:	
  3441                           ; 0 bytes @ 0x4
  3442                           
  3443  0024                     ??_setSw_Initialization:	
  3444                           ; 0 bytes @ 0x4
  3445                           
  3446  0024                     ??_CC2500_TxData:	
  3447                           ; 0 bytes @ 0x4
  3448                           
  3449  0024                     ??_CC2500_RxData:	
  3450                           ; 0 bytes @ 0x4
  3451                           
  3452  0024                     ??_DimmerLights_Initialization:	
  3453                           ; 0 bytes @ 0x4
  3454                           
  3455  0024                     ??___wmul:	
  3456                           ; 0 bytes @ 0x4
  3457                           
  3458  0024                     ??___awdiv:	
  3459                           ; 0 bytes @ 0x4
  3460                           
  3461  0024                     ??___lwdiv:	
  3462                           ; 0 bytes @ 0x4
  3463                           
  3464  0024                     CC2500_WriteREG@w_addr:	
  3465                           ; 0 bytes @ 0x4
  3466                           
  3467  0024                     _getDimmerLights_Allow_Condition$2331:	
  3468                           ; 1 bytes @ 0x4
  3469                           
  3470  0024                     setLED_Initialization@led:	
  3471                           ; 1 bytes @ 0x4
  3472                           
  3473  0024                     setLED_Main@led:	
  3474                           ; 1 bytes @ 0x4
  3475                           
  3476  0024                     setSw_Initialization@sw:	
  3477                           ; 1 bytes @ 0x4
  3478                           
  3479  0024                     getSw_KeyStatus@sw:	
  3480                           ; 1 bytes @ 0x4
  3481                           
  3482  0024                     ___ftpack@sign:	
  3483                           ; 1 bytes @ 0x4
  3484                           
  3485  0024                     getBuz_GO@i:	
  3486                           ; 1 bytes @ 0x4
  3487                           
  3488  0024                     DelayTime_1us@j:	
  3489                           ; 2 bytes @ 0x4
  3490                           
  3491  0024                     getAll_DimmerLights_AdjSw@i:	
  3492                           ; 2 bytes @ 0x4
  3493                           
  3494  0024                     ___wmul@product:	
  3495                           ; 2 bytes @ 0x4
  3496                           
  3497                           
  3498                           ; 2 bytes @ 0x4
  3499  0024                     	ds	1
  3500  0025                     ??_CC2500_InitSetREG:	
  3501  0025                     ??_CC2500_InitPATable:	
  3502                           ; 0 bytes @ 0x5
  3503                           
  3504  0025                     ??_Switch_Initialization:	
  3505                           ; 0 bytes @ 0x5
  3506                           
  3507  0025                     ??___ftpack:	
  3508                           ; 0 bytes @ 0x5
  3509                           
  3510  0025                     ??_LED_Initialization:	
  3511                           ; 0 bytes @ 0x5
  3512                           
  3513  0025                     ??_LED_Main:	
  3514                           ; 0 bytes @ 0x5
  3515                           
  3516  0025                     CC2500_TxData@loop_e:	
  3517                           ; 0 bytes @ 0x5
  3518                           
  3519  0025                     CC2500_RxData@loop_f:	
  3520                           ; 1 bytes @ 0x5
  3521                           
  3522  0025                     getDimmerLights_Allow_Condition@lights:	
  3523                           ; 1 bytes @ 0x5
  3524                           
  3525  0025                     Flash_Memory_Modify@i:	
  3526                           ; 1 bytes @ 0x5
  3527                           
  3528  0025                     getMain_All_Error_Status@command:	
  3529                           ; 1 bytes @ 0x5
  3530                           
  3531  0025                     getTemp_AD@channel:	
  3532                           ; 1 bytes @ 0x5
  3533                           
  3534  0025                     ___awdiv@counter:	
  3535                           ; 1 bytes @ 0x5
  3536                           
  3537  0025                     ___lwdiv@counter:	
  3538                           ; 1 bytes @ 0x5
  3539                           
  3540                           
  3541                           ; 1 bytes @ 0x5
  3542  0025                     	ds	1
  3543  0026                     ??_CC2500_PowerRST:	
  3544  0026                     ??_CC2500_FrequencyCabr:	
  3545                           ; 0 bytes @ 0x6
  3546                           
  3547  0026                     ??_Flash_Memory_Main:	
  3548                           ; 0 bytes @ 0x6
  3549                           
  3550  0026                     CC2500_InitSetREG@temp1:	
  3551                           ; 0 bytes @ 0x6
  3552                           
  3553  0026                     CC2500_InitPATable@temp:	
  3554                           ; 1 bytes @ 0x6
  3555                           
  3556  0026                     DelayTimejudge@i:	
  3557                           ; 1 bytes @ 0x6
  3558                           
  3559  0026                     getDimmerLights_Allow_Condition@allow:	
  3560                           ; 1 bytes @ 0x6
  3561                           
  3562  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3563                           ; 1 bytes @ 0x6
  3564                           
  3565  0026                     getMain_All_Error_Status@status:	
  3566                           ; 1 bytes @ 0x6
  3567                           
  3568  0026                     getLoad_AD@channel:	
  3569                           ; 1 bytes @ 0x6
  3570                           
  3571  0026                     ___awdiv@sign:	
  3572                           ; 1 bytes @ 0x6
  3573                           
  3574  0026                     ___lwdiv@quotient:	
  3575                           ; 1 bytes @ 0x6
  3576                           
  3577                           
  3578                           ; 2 bytes @ 0x6
  3579  0026                     	ds	1
  3580  0027                     ??_setDimmerLights_AdjOn:	
  3581  0027                     CC2500_InitSetREG@temp2:	
  3582                           ; 0 bytes @ 0x7
  3583                           
  3584  0027                     CC2500_InitPATable@loop_d:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587  0027                     DelayTimejudge@j:	
  3588                           ; 1 bytes @ 0x7
  3589                           
  3590  0027                     setDimmerLights_AdjOn@sw:	
  3591                           ; 1 bytes @ 0x7
  3592                           
  3593  0027                     getLoad_AD@k:	
  3594                           ; 1 bytes @ 0x7
  3595                           
  3596  0027                     ___awdiv@quotient:	
  3597                           ; 1 bytes @ 0x7
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x7
  3601  0027                     	ds	1
  3602  0028                     ??_Load_Main:	
  3603  0028                     ?___awtoft:	
  3604                           ; 0 bytes @ 0x8
  3605                           
  3606  0028                     CC2500_InitSetREG@loop_c:	
  3607                           ; 3 bytes @ 0x8
  3608                           
  3609  0028                     DelayTimejudge@k:	
  3610                           ; 1 bytes @ 0x8
  3611                           
  3612  0028                     getLoad_AD@j:	
  3613                           ; 1 bytes @ 0x8
  3614                           
  3615  0028                     ___awtoft@c:	
  3616                           ; 1 bytes @ 0x8
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x8
  3620  0028                     	ds	1
  3621  0029                     ?_setBuz:	
  3622  0029                     ??_CC2500_PowerOnInitial:	
  3623                           ; 0 bytes @ 0x9
  3624                           
  3625  0029                     DelayTimejudge@value:	
  3626                           ; 0 bytes @ 0x9
  3627                           
  3628  0029                     getLoad_AD@i:	
  3629                           ; 1 bytes @ 0x9
  3630                           
  3631  0029                     setBuz@time:	
  3632                           ; 1 bytes @ 0x9
  3633                           
  3634                           
  3635                           ; 2 bytes @ 0x9
  3636  0029                     	ds	1
  3637  002A                     Load_Main@error:	
  3638                           
  3639                           ; 1 bytes @ 0xA
  3640  002A                     	ds	1
  3641  002B                     ??_setBuz:	
  3642  002B                     ??___awtoft:	
  3643                           ; 0 bytes @ 0xB
  3644                           
  3645  002B                     Load_Main@Load_Status:	
  3646                           ; 0 bytes @ 0xB
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0xB
  3650  002B                     	ds	1
  3651  002C                     setBuz@count:	
  3652  002C                     Load_Main@i:	
  3653                           ; 1 bytes @ 0xC
  3654                           
  3655                           
  3656                           ; 2 bytes @ 0xC
  3657  002C                     	ds	1
  3658  002D                     ??_my_MainTimer:	
  3659  002D                     ??_setDimmerLights_SwOn:	
  3660                           ; 0 bytes @ 0xD
  3661                           
  3662  002D                     ___awtoft@sign:	
  3663                           ; 0 bytes @ 0xD
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0xD
  3667  002D                     	ds	1
  3668  002E                     ?___ftdiv:	
  3669  002E                     ?___ftmul:	
  3670                           ; 3 bytes @ 0xE
  3671                           
  3672  002E                     _setDimmerLights_SwOn$2310:	
  3673                           ; 3 bytes @ 0xE
  3674                           
  3675  002E                     ___ftdiv@f2:	
  3676                           ; 1 bytes @ 0xE
  3677                           
  3678  002E                     ___ftmul@f1:	
  3679                           ; 3 bytes @ 0xE
  3680                           
  3681                           
  3682                           ; 3 bytes @ 0xE
  3683  002E                     	ds	1
  3684  002F                     _setDimmerLights_SwOn$2311:	
  3685                           
  3686                           ; 1 bytes @ 0xF
  3687  002F                     	ds	1
  3688  0030                     setDimmerLights_SwOn@idle:	
  3689                           
  3690                           ; 1 bytes @ 0x10
  3691  0030                     	ds	1
  3692  0031                     setDimmerLights_SwOn@sw:	
  3693  0031                     ___ftdiv@f1:	
  3694                           ; 1 bytes @ 0x11
  3695                           
  3696  0031                     ___ftmul@f2:	
  3697                           ; 3 bytes @ 0x11
  3698                           
  3699                           
  3700                           ; 3 bytes @ 0x11
  3701  0031                     	ds	3
  3702  0034                     ??___ftdiv:	
  3703  0034                     ??___ftmul:	
  3704                           ; 0 bytes @ 0x14
  3705                           
  3706                           
  3707                           ; 0 bytes @ 0x14
  3708  0034                     	ds	4
  3709  0038                     ___ftdiv@cntr:	
  3710  0038                     ___ftmul@exp:	
  3711                           ; 1 bytes @ 0x18
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x18
  3715  0038                     	ds	1
  3716  0039                     ___ftdiv@f3:	
  3717  0039                     ___ftmul@f3_as_product:	
  3718                           ; 3 bytes @ 0x19
  3719                           
  3720                           
  3721                           ; 3 bytes @ 0x19
  3722  0039                     	ds	3
  3723  003C                     ___ftdiv@exp:	
  3724  003C                     ___ftmul@cntr:	
  3725                           ; 1 bytes @ 0x1C
  3726                           
  3727                           
  3728                           ; 1 bytes @ 0x1C
  3729  003C                     	ds	1
  3730  003D                     ___ftdiv@sign:	
  3731  003D                     ___ftmul@sign:	
  3732                           ; 1 bytes @ 0x1D
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x1D
  3736  003D                     	ds	1
  3737  003E                     ?___ftneg:	
  3738  003E                     ___ftneg@f1:	
  3739                           ; 3 bytes @ 0x1E
  3740                           
  3741                           
  3742                           ; 3 bytes @ 0x1E
  3743  003E                     	ds	3
  3744  0041                     ??___ftneg:	
  3745  0041                     ?___ftadd:	
  3746                           ; 0 bytes @ 0x21
  3747                           
  3748  0041                     ___ftadd@f1:	
  3749                           ; 3 bytes @ 0x21
  3750                           
  3751                           
  3752                           ; 3 bytes @ 0x21
  3753  0041                     	ds	3
  3754  0044                     ___ftadd@f2:	
  3755                           
  3756                           ; 3 bytes @ 0x24
  3757  0044                     	ds	3
  3758  0047                     ??___ftadd:	
  3759                           
  3760                           ; 0 bytes @ 0x27
  3761  0047                     	ds	4
  3762  004B                     ___ftadd@sign:	
  3763                           
  3764                           ; 1 bytes @ 0x2B
  3765  004B                     	ds	1
  3766  004C                     ___ftadd@exp2:	
  3767                           
  3768                           ; 1 bytes @ 0x2C
  3769  004C                     	ds	1
  3770  004D                     ___ftadd@exp1:	
  3771                           
  3772                           ; 1 bytes @ 0x2D
  3773  004D                     	ds	1
  3774  004E                     ?___fttol:	
  3775  004E                     ___fttol@f1:	
  3776                           ; 4 bytes @ 0x2E
  3777                           
  3778                           
  3779                           ; 3 bytes @ 0x2E
  3780  004E                     	ds	4
  3781  0052                     ??___fttol:	
  3782                           
  3783                           ; 0 bytes @ 0x32
  3784  0052                     	ds	4
  3785  0056                     ___fttol@sign1:	
  3786                           
  3787                           ; 1 bytes @ 0x36
  3788  0056                     	ds	1
  3789  0057                     ___fttol@lval:	
  3790                           
  3791                           ; 4 bytes @ 0x37
  3792  0057                     	ds	4
  3793  005B                     ___fttol@exp1:	
  3794                           
  3795                           ; 1 bytes @ 0x3B
  3796  005B                     	ds	1
  3797  005C                     ??_setPercentValue:	
  3798  005C                     ??_getPercentValue:	
  3799                           ; 0 bytes @ 0x3C
  3800                           
  3801                           
  3802                           ; 0 bytes @ 0x3C
  3803  005C                     	ds	2
  3804  005E                     getPercentValue@value:	
  3805  005E                     setPercentValue@value:	
  3806                           ; 1 bytes @ 0x3E
  3807                           
  3808                           
  3809                           ; 1 bytes @ 0x3E
  3810  005E                     	ds	1
  3811  005F                     getPercentValue@i:	
  3812  005F                     setPercentValue@i:	
  3813                           ; 3 bytes @ 0x3F
  3814                           
  3815                           
  3816                           ; 3 bytes @ 0x3F
  3817  005F                     	ds	3
  3818  0062                     ?_setProductData:	
  3819  0062                     ??_setDimmerLights_AdjRF:	
  3820                           ; 0 bytes @ 0x42
  3821                           
  3822  0062                     ??_Flash_Memory_Initialization:	
  3823                           ; 0 bytes @ 0x42
  3824                           
  3825  0062                     setProductData@value:	
  3826                           ; 0 bytes @ 0x42
  3827                           
  3828                           
  3829                           ; 1 bytes @ 0x42
  3830  0062                     	ds	1
  3831  0063                     ??_setProductData:	
  3832  0063                     setDimmerLights_AdjRF@lights:	
  3833                           ; 0 bytes @ 0x43
  3834                           
  3835  0063                     Flash_Memory_Initialization@i:	
  3836                           ; 1 bytes @ 0x43
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x43
  3840  0063                     	ds	2
  3841  0065                     setProductData@address:	
  3842                           
  3843                           ; 1 bytes @ 0x45
  3844  0065                     	ds	1
  3845  0066                     ?_setRF_DimmerLights:	
  3846  0066                     ??_setTemp_Main:	
  3847                           ; 0 bytes @ 0x46
  3848                           
  3849  0066                     ??_setLog_Code:	
  3850                           ; 0 bytes @ 0x46
  3851                           
  3852  0066                     ??_setRF_DimmerValue:	
  3853                           ; 0 bytes @ 0x46
  3854                           
  3855  0066                     ?_setDelayOff_GO:	
  3856                           ; 0 bytes @ 0x46
  3857                           
  3858  0066                     setDelayOff_GO@command:	
  3859                           ; 0 bytes @ 0x46
  3860                           
  3861  0066                     setRF_DimmerLights@on:	
  3862                           ; 1 bytes @ 0x46
  3863                           
  3864                           
  3865                           ; 1 bytes @ 0x46
  3866  0066                     	ds	1
  3867  0067                     ??_setRF_DimmerLights:	
  3868  0067                     setDelayOff_GO@value:	
  3869                           ; 0 bytes @ 0x47
  3870                           
  3871  0067                     setRF_DimmerValue@lights:	
  3872                           ; 1 bytes @ 0x47
  3873                           
  3874                           
  3875                           ; 1 bytes @ 0x47
  3876  0067                     	ds	1
  3877  0068                     ??_setRFSW_AdjControl:	
  3878  0068                     ??_setDelayOff_GO:	
  3879                           ; 0 bytes @ 0x48
  3880                           
  3881  0068                     setTemp_Main@error:	
  3882                           ; 0 bytes @ 0x48
  3883                           
  3884                           
  3885                           ; 1 bytes @ 0x48
  3886  0068                     	ds	1
  3887  0069                     ??_Temp_Main:	
  3888  0069                     setDelayOff_GO@sw:	
  3889                           ; 0 bytes @ 0x49
  3890                           
  3891  0069                     setRF_DimmerLights@status:	
  3892                           ; 1 bytes @ 0x49
  3893                           
  3894                           
  3895                           ; 1 bytes @ 0x49
  3896  0069                     	ds	1
  3897  006A                     ??_setDimmerLights_SwOff:	
  3898  006A                     setDimmerLights_SwOff@sw:	
  3899                           ; 0 bytes @ 0x4A
  3900                           
  3901  006A                     setRFSW_AdjControl@status:	
  3902                           ; 1 bytes @ 0x4A
  3903                           
  3904  006A                     setRF_DimmerLights@lights:	
  3905                           ; 1 bytes @ 0x4A
  3906                           
  3907                           
  3908                           ; 1 bytes @ 0x4A
  3909  006A                     	ds	1
  3910  006B                     ??_setDimmerLights_ErrorClose:	
  3911  006B                     ?_setDimmerLights:	
  3912                           ; 0 bytes @ 0x4B
  3913                           
  3914  006B                     ?_setDimmerLights_Adj:	
  3915                           ; 0 bytes @ 0x4B
  3916                           
  3917  006B                     ??_Exception_Main:	
  3918                           ; 0 bytes @ 0x4B
  3919                           
  3920  006B                     ??_setRFSW_Control:	
  3921                           ; 0 bytes @ 0x4B
  3922                           
  3923  006B                     ??_setSw_Main:	
  3924                           ; 0 bytes @ 0x4B
  3925                           
  3926  006B                     setDimmerLights@status:	
  3927                           ; 0 bytes @ 0x4B
  3928                           
  3929  006B                     setDimmerLights_Adj@status:	
  3930                           ; 1 bytes @ 0x4B
  3931                           
  3932  006B                     setRFSW_AdjControl@sw:	
  3933                           ; 1 bytes @ 0x4B
  3934                           
  3935                           
  3936                           ; 1 bytes @ 0x4B
  3937  006B                     	ds	1
  3938  006C                     ??_DlyOff_Main:	
  3939  006C                     ??_setDimmerLights:	
  3940                           ; 0 bytes @ 0x4C
  3941                           
  3942  006C                     ??_setDimmerLights_Adj:	
  3943                           ; 0 bytes @ 0x4C
  3944                           
  3945  006C                     setRFSW_Control@status:	
  3946                           ; 0 bytes @ 0x4C
  3947                           
  3948                           
  3949                           ; 1 bytes @ 0x4C
  3950  006C                     	ds	1
  3951  006D                     setDimmerLights@lights:	
  3952  006D                     setDimmerLights_Adj@lights:	
  3953                           ; 1 bytes @ 0x4D
  3954                           
  3955  006D                     setRFSW_Control@sw:	
  3956                           ; 1 bytes @ 0x4D
  3957                           
  3958  006D                     setSw_Main@sw:	
  3959                           ; 1 bytes @ 0x4D
  3960                           
  3961                           
  3962                           ; 1 bytes @ 0x4D
  3963  006D                     	ds	1
  3964  006E                     ??_setDimmerLights_Main:	
  3965  006E                     ??_Switch_Main:	
  3966                           ; 0 bytes @ 0x4E
  3967                           
  3968  006E                     ??_getRxData:	
  3969                           ; 0 bytes @ 0x4E
  3970                           
  3971  006E                     ??_setControl_Lights_Table:	
  3972                           ; 0 bytes @ 0x4E
  3973                           
  3974  006E                     DlyOff_Main@sw:	
  3975                           ; 0 bytes @ 0x4E
  3976                           
  3977  006E                     setDimmerLights_Main@lights:	
  3978                           ; 1 bytes @ 0x4E
  3979                           
  3980                           
  3981                           ; 1 bytes @ 0x4E
  3982  006E                     	ds	1
  3983  006F                     ??_RF_Main:	
  3984  006F                     ??_setRF_Main:	
  3985                           ; 0 bytes @ 0x4F
  3986                           
  3987  006F                     ??_DelayOff_Main:	
  3988                           ; 0 bytes @ 0x4F
  3989                           
  3990  006F                     ??_DimmerLights_Main:	
  3991                           ; 0 bytes @ 0x4F
  3992                           
  3993  006F                     ??_main:	
  3994                           ; 0 bytes @ 0x4F
  3995                           
  3996                           
  3997                           	psect	maintext
  3998  0837                     __pmaintext:	
  3999                           ; 0 bytes @ 0x4F
  4000 ;;
  4001 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4002 ;;
  4003 ;; *************** function _main *****************
  4004 ;; Defined at:
  4005 ;;		line 7 in file "../src/Main_B1.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  argc            2    0[BANK4 ] int 
  4008 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  2    0[BANK4 ] int 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 17F/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4020 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4024 ;;Total ram usage:        4 bytes
  4025 ;; Hardware stack levels required when called:   15
  4026 ;; This function calls:
  4027 ;;		_Buzzer_Initialization
  4028 ;;		_Buzzer_Main
  4029 ;;		_CC2500_PowerOnInitial
  4030 ;;		_DelayOff_Initialization
  4031 ;;		_DelayOff_Main
  4032 ;;		_DimmerLights_Initialization
  4033 ;;		_DimmerLights_Main
  4034 ;;		_Exception_Main
  4035 ;;		_Flash_Memory_Initialization
  4036 ;;		_Flash_Memory_Main
  4037 ;;		_LED_Initialization
  4038 ;;		_LED_Main
  4039 ;;		_Load_Initialization
  4040 ;;		_Load_Main
  4041 ;;		_Mcu_Initialization
  4042 ;;		_RF_Initialization
  4043 ;;		_RF_Main
  4044 ;;		_Switch_Initialization
  4045 ;;		_Switch_Main
  4046 ;;		_Temp_Initialization
  4047 ;;		_Temp_Main
  4048 ;;		_WDT_Main
  4049 ;;		_getLoad_AD
  4050 ;;		_getTemp_AD
  4051 ;;		_myMain_Initialization
  4052 ;;		_my_MainTimer
  4053 ;; This function is called by:
  4054 ;;		Startup code after reset
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           
  4059                           ;psect for function _main
  4060  0837                     _main:	
  4061                           
  4062                           ;Main_B1.c: 8: myMain_Initialization();
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4066  0837  319C  2406  3188   	fcall	_myMain_Initialization
  4067                           
  4068                           ;Main_B1.c: 9: Mcu_Initialization();
  4069  083A  319C  248E  3188   	fcall	_Mcu_Initialization
  4070                           
  4071                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4072  083D  3186  263B  3188   	fcall	_Flash_Memory_Initialization
  4073                           
  4074                           ;Main_B1.c: 11: LED_Initialization();
  4075  0840  319B  23AE  3188   	fcall	_LED_Initialization
  4076                           
  4077                           ;Main_B1.c: 12: Buzzer_Initialization();
  4078  0843  319A  22EA  3188   	fcall	_Buzzer_Initialization
  4079                           
  4080                           ;Main_B1.c: 14: ;;
  4081                           ;Main_B1.c: 15: Temp_Initialization();
  4082  0846  319A  22F6  3188   	fcall	_Temp_Initialization
  4083                           
  4084                           ;Main_B1.c: 16: Load_Initialization();
  4085  0849  319A  22ED  3188   	fcall	_Load_Initialization
  4086                           
  4087                           ;Main_B1.c: 17: ;;
  4088                           ;Main_B1.c: 18: DelayOff_Initialization();
  4089  084C  319B  2332  3188   	fcall	_DelayOff_Initialization
  4090                           
  4091                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4092  084F  319D  2525  3188   	fcall	_DimmerLights_Initialization
  4093                           
  4094                           ;Main_B1.c: 21: ;;
  4095                           ;Main_B1.c: 22: ;;
  4096                           ;Main_B1.c: 23: ;;
  4097                           ;Main_B1.c: 24: Switch_Initialization();
  4098  0852  319B  23EA  3188   	fcall	_Switch_Initialization
  4099                           
  4100                           ;Main_B1.c: 25: RF_Initialization();
  4101  0855  319A  22F0  3188   	fcall	_RF_Initialization
  4102                           
  4103                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4104  0858  319D  25B3  3188   	fcall	_CC2500_PowerOnInitial
  4105  085B                     l10905:	
  4106                           ;Main_B1.c: 27: ;;
  4107                           ;Main_B1.c: 28: ;;
  4108                           ;Main_B1.c: 30: while (1) {
  4109                           
  4110                           
  4111                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4112  085B  0021               	movlb	1	; select bank1
  4113  085C  1C20               	btfss	_myMain^(0+128),0
  4114  085D  2866               	goto	l10909
  4115                           
  4116                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4117  085E  3005               	movlw	5
  4118  085F  318D  2508  3188   	fcall	_getLoad_AD
  4119                           
  4120                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4121  0862  3009               	movlw	9
  4122  0863  3193  2361  3188   	fcall	_getTemp_AD
  4123  0866                     l10909:	
  4124                           
  4125                           ;Main_B1.c: 57: }
  4126                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4127  0866  0022               	movlb	2	; select bank2
  4128  0867  1C20               	btfss	_Timer1^(0+256),0
  4129  0868  285B               	goto	l10905
  4130                           
  4131                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4132  0869  1020               	bcf	_Timer1^(0+256),0
  4133                           
  4134                           ;Main_B1.c: 96: my_MainTimer();
  4135  086A  3192  22E7  3188   	fcall	_my_MainTimer
  4136                           
  4137                           ;Main_B1.c: 97: WDT_Main();
  4138  086D  319C  24A0  3188   	fcall	_WDT_Main
  4139                           
  4140                           ;Main_B1.c: 98: ;;
  4141                           ;Main_B1.c: 99: ;;
  4142                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4143  0870  0021               	movlb	1	; select bank1
  4144  0871  1C20               	btfss	_myMain^(0+128),0
  4145  0872  285B               	goto	l10905
  4146                           
  4147                           ;Main_B1.c: 101: Flash_Memory_Main();
  4148  0873  3192  2206  3188   	fcall	_Flash_Memory_Main
  4149                           
  4150                           ;Main_B1.c: 103: LED_Main();
  4151  0876  319B  23BA  3188   	fcall	_LED_Main
  4152                           
  4153                           ;Main_B1.c: 104: Buzzer_Main();
  4154  0879  3194  2424  3188   	fcall	_Buzzer_Main
  4155                           
  4156                           ;Main_B1.c: 106: ;;
  4157                           ;Main_B1.c: 107: Temp_Main();
  4158  087C  319A  22F9  3188   	fcall	_Temp_Main
  4159                           
  4160                           ;Main_B1.c: 108: Load_Main();
  4161  087F  3180  2049  3188   	fcall	_Load_Main
  4162                           
  4163                           ;Main_B1.c: 109: ;;
  4164                           ;Main_B1.c: 111: ;;
  4165                           ;Main_B1.c: 112: DimmerLights_Main();
  4166  0882  319F  2712  3188   	fcall	_DimmerLights_Main
  4167                           
  4168                           ;Main_B1.c: 113: Switch_Main();
  4169  0885  319B  237F  3188   	fcall	_Switch_Main
  4170                           
  4171                           ;Main_B1.c: 114: ;;
  4172                           ;Main_B1.c: 115: ;;
  4173                           ;Main_B1.c: 117: RF_Main();
  4174  0888  319A  22F3  3188   	fcall	_RF_Main
  4175                           
  4176                           ;Main_B1.c: 118: DelayOff_Main();
  4177  088B  319B  233A  3188   	fcall	_DelayOff_Main
  4178                           
  4179                           ;Main_B1.c: 119: ;;
  4180                           ;Main_B1.c: 120: ;;
  4181                           ;Main_B1.c: 121: Exception_Main();
  4182  088E  3185  255B  3188   	fcall	_Exception_Main
  4183  0891  285B               	goto	l10905
  4184  0892                     __end_of_main:	
  4185                           ;Main_B1.c: 128: }
  4186                           ;Main_B1.c: 129: }
  4187                           ;Main_B1.c: 163: }
  4188                           ;Main_B1.c: 164: return (0);
  4189                           ;	Return value of _main is never used
  4190                           
  4191                           
  4192                           	psect	text1
  4193  12E7                     __ptext1:	
  4194 ;; *************** function _my_MainTimer *****************
  4195 ;; Defined at:
  4196 ;;		line 185 in file "../src/Main_B1.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;		None               void
  4203 ;; Registers used:
  4204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;Total ram usage:        1 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:    7
  4217 ;; This function calls:
  4218 ;;		_setBuz
  4219 ;; This function is called by:
  4220 ;;		_main
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           
  4225                           ;psect for function _my_MainTimer
  4226  12E7                     _my_MainTimer:	
  4227                           
  4228                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4229                           
  4230                           ;incstack = 0
  4231                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4232  12E7  0021               	movlb	1	; select bank1
  4233  12E8  1820               	btfsc	_myMain^(0+128),0
  4234  12E9  2B01               	goto	l10613
  4235                           
  4236                           ;Main_B1.c: 189: myMain.PowerCount++;
  4237  12EA  3001               	movlw	1
  4238  12EB  0020               	movlb	0	; select bank0
  4239  12EC  00AD               	movwf	??_my_MainTimer
  4240  12ED  082D               	movf	??_my_MainTimer,w
  4241  12EE  0021               	movlb	1	; select bank1
  4242  12EF  07A1               	addwf	(_myMain^(0+128)+1),f
  4243                           
  4244                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4245  12F0  0821               	movf	(_myMain^(0+128)+1),w
  4246  12F1  3A96               	xorlw	150
  4247  12F2  1D03               	skipz
  4248  12F3  0008               	return
  4249                           
  4250                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4251  12F4  01A1               	clrf	(_myMain^(0+128)+1)
  4252                           
  4253                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4254  12F5  1420               	bsf	_myMain^(0+128),0
  4255                           
  4256                           ;Main_B1.c: 197: setBuz(3, 50);
  4257  12F6  3032               	movlw	50
  4258  12F7  0020               	movlb	0	; select bank0
  4259  12F8  00A9               	movwf	setBuz@time
  4260  12F9  3000               	movlw	0
  4261  12FA  00AA               	movwf	setBuz@time+1
  4262  12FB  3003               	movlw	3
  4263  12FC  3197  274E         	fcall	_setBuz
  4264                           
  4265                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4266  12FE  0021               	movlb	1	; select bank1
  4267  12FF  1620               	bsf	_myMain^(0+128),4
  4268                           
  4269                           ;Main_B1.c: 207: }
  4270                           ;Main_B1.c: 208: } else {
  4271  1300  0008               	return
  4272  1301                     l10613:	
  4273                           
  4274                           ;Main_B1.c: 209: myMain.PowerCount++;
  4275  1301  3001               	movlw	1
  4276  1302  0020               	movlb	0	; select bank0
  4277  1303  00AD               	movwf	??_my_MainTimer
  4278  1304  082D               	movf	??_my_MainTimer,w
  4279  1305  0021               	movlb	1	; select bank1
  4280  1306  07A1               	addwf	(_myMain^(0+128)+1),f
  4281                           
  4282                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4283  1307  0821               	movf	(_myMain^(0+128)+1),w
  4284  1308  3A64               	xorlw	100
  4285  1309  1903               	btfsc	3,2
  4286                           
  4287                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4288  130A  01A1               	clrf	(_myMain^(0+128)+1)
  4289                           
  4290                           ;Main_B1.c: 226: }
  4291                           ;Main_B1.c: 228: myMain.Count1++;
  4292  130B  3001               	movlw	1
  4293  130C  07A4               	addwf	(_myMain^(0+128)+4),f
  4294  130D  3000               	movlw	0
  4295  130E  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4296                           
  4297                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4298  130F  3004               	movlw	4
  4299  1310  3EA0               	addlw	_myMain& (0+255)
  4300  1311  0086               	movwf	6
  4301  1312  0187               	clrf	7
  4302  1313  3F40               	moviw [0]fsr1
  4303  1314  3A64               	xorlw	100
  4304  1315  1D03               	skipz
  4305  1316  2B19               	goto	u12375
  4306  1317  3F41               	moviw [1]fsr1
  4307  1318  3A00               	xorlw	0
  4308  1319                     u12375:	
  4309  1319  1D03               	skipz
  4310  131A  0008               	return
  4311                           
  4312                           ;Main_B1.c: 230: {
  4313                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4314  131B  01A4               	clrf	(_myMain^(0+128)+4)
  4315  131C  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4316                           
  4317                           ;Main_B1.c: 243: if (myMain.Flag) {
  4318  131D  1CA0               	btfss	_myMain^(0+128),1
  4319  131E  2B21               	goto	l1545
  4320                           
  4321                           ;Main_B1.c: 244: myMain.Flag = 0;
  4322  131F  10A0               	bcf	_myMain^(0+128),1
  4323                           
  4324                           ;Main_B1.c: 253: } else {
  4325  1320  0008               	return
  4326  1321                     l1545:	
  4327                           
  4328                           ;Main_B1.c: 254: myMain.Flag = 1;
  4329  1321  14A0               	bsf	_myMain^(0+128),1
  4330  1322  0008               	return
  4331  1323                     __end_of_my_MainTimer:	
  4332                           
  4333                           	psect	text2
  4334  1C06                     __ptext2:	
  4335 ;; *************** function _myMain_Initialization *****************
  4336 ;; Defined at:
  4337 ;;		line 170 in file "../src/Main_B1.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;Total ram usage:        1 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    5
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           
  4366                           ;psect for function _myMain_Initialization
  4367  1C06                     _myMain_Initialization:	
  4368                           
  4369                           ;Main_B1.c: 173: product = &_product;
  4370                           
  4371                           ;incstack = 0
  4372                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4373  1C06  3045               	movlw	__product& (0+255)
  4374  1C07  0020               	movlb	0	; select bank0
  4375  1C08  00A0               	movwf	??_myMain_Initialization
  4376  1C09  0820               	movf	??_myMain_Initialization,w
  4377  1C0A  00F9               	movwf	_product
  4378                           
  4379                           ;Main_B1.c: 174: product->Data[20] = 210;
  4380  1C0B  30D2               	movlw	210
  4381  1C0C  00A0               	movwf	??_myMain_Initialization
  4382  1C0D  0879               	movf	_product,w
  4383  1C0E  3E14               	addlw	20
  4384  1C0F  0086               	movwf	6
  4385  1C10  3002               	movlw	2	; select bank4/5
  4386  1C11  0087               	movwf	7
  4387  1C12  0820               	movf	??_myMain_Initialization,w
  4388  1C13  0081               	movwf	1
  4389  1C14  0008               	return
  4390  1C15                     __end_of_myMain_Initialization:	
  4391                           
  4392                           	psect	text3
  4393  1361                     __ptext3:	
  4394 ;; *************** function _getTemp_AD *****************
  4395 ;; Defined at:
  4396 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  channel         1    wreg     unsigned char 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  channel         1    5[BANK0 ] unsigned char 
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        2 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    7
  4417 ;; This function calls:
  4418 ;;		_getAD
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _getTemp_AD
  4426  1361                     _getTemp_AD:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4430                           ;getTemp_AD@channel stored from wreg
  4431  1361  0020               	movlb	0	; select bank0
  4432  1362  00A5               	movwf	getTemp_AD@channel
  4433                           
  4434                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4435  1363  0021               	movlb	1	; select bank1
  4436  1364  1D56               	btfss	_Temp^(0+128),2
  4437  1365  0008               	return
  4438                           
  4439                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4440  1366  30F0               	movlw	240
  4441  1367  0020               	movlb	0	; select bank0
  4442  1368  00A4               	movwf	??_getTemp_AD
  4443  1369  0824               	movf	??_getTemp_AD,w
  4444  136A  00A0               	movwf	getAD@adcon1
  4445  136B  0825               	movf	getTemp_AD@channel,w
  4446  136C  319F  2732  3193   	fcall	_getAD
  4447  136F  0020               	movlb	0	; select bank0
  4448  1370  0821               	movf	?_getAD+1,w
  4449  1371  0021               	movlb	1	; select bank1
  4450  1372  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4451  1373  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4452  1374  0020               	movlb	0	; select bank0
  4453  1375  0820               	movf	?_getAD,w
  4454  1376  0021               	movlb	1	; select bank1
  4455  1377  01E2               	clrf	(_Temp^(0+128)+12)
  4456  1378  07E2               	addwf	(_Temp^(0+128)+12),f
  4457                           
  4458                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4459  1379  300C               	movlw	12
  4460  137A  3ED6               	addlw	_Temp& (0+255)
  4461  137B  0086               	movwf	6
  4462  137C  0187               	clrf	7
  4463  137D  0016               	moviw fsr1++
  4464  137E  0401               	iorwf	1,w
  4465  137F  1903               	skipnz
  4466  1380  0008               	return
  4467                           
  4468                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4469  1381  0863               	movf	((_Temp+1)^(0+128)+12),w
  4470  1382  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4471  1383  1D03               	skipz
  4472  1384  2B87               	goto	u12325
  4473  1385  0862               	movf	(_Temp^(0+128)+12),w
  4474  1386  025E               	subwf	(_Temp^(0+128)+8),w
  4475  1387                     u12325:	
  4476  1387  1803               	skipnc
  4477  1388  2B90               	goto	l10595
  4478                           
  4479                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4480  1389  0863               	movf	((_Temp+1)^(0+128)+12),w
  4481  138A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4482  138B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4483  138C  0862               	movf	(_Temp^(0+128)+12),w
  4484  138D  01DE               	clrf	(_Temp^(0+128)+8)
  4485  138E  07DE               	addwf	(_Temp^(0+128)+8),f
  4486                           
  4487                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4488  138F  0008               	return
  4489  1390                     l10595:	
  4490  1390  0863               	movf	((_Temp+1)^(0+128)+12),w
  4491  1391  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4492  1392  1D03               	skipz
  4493  1393  2B96               	goto	u12335
  4494  1394  0862               	movf	(_Temp^(0+128)+12),w
  4495  1395  0260               	subwf	(_Temp^(0+128)+10),w
  4496  1396                     u12335:	
  4497  1396  1803               	skipnc
  4498  1397  0008               	return
  4499                           
  4500                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4501  1398  0863               	movf	((_Temp+1)^(0+128)+12),w
  4502  1399  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4503  139A  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4504  139B  0862               	movf	(_Temp^(0+128)+12),w
  4505  139C  01E0               	clrf	(_Temp^(0+128)+10)
  4506  139D  07E0               	addwf	(_Temp^(0+128)+10),f
  4507  139E  0008               	return
  4508  139F                     __end_of_getTemp_AD:	
  4509                           
  4510                           	psect	text4
  4511  0D08                     __ptext4:	
  4512 ;; *************** function _getLoad_AD *****************
  4513 ;; Defined at:
  4514 ;;		line 15 in file "../src/OverLoad_B1.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  channel         1    wreg     unsigned char 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  channel         1    6[BANK0 ] unsigned char 
  4519 ;;  i               1    9[BANK0 ] unsigned char 
  4520 ;;  j               1    8[BANK0 ] unsigned char 
  4521 ;;  k               1    7[BANK0 ] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;Total ram usage:        6 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    7
  4538 ;; This function calls:
  4539 ;;		_getAD
  4540 ;; This function is called by:
  4541 ;;		_main
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _getLoad_AD
  4547  0D08                     _getLoad_AD:	
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4551                           ;getLoad_AD@channel stored from wreg
  4552  0D08  0020               	movlb	0	; select bank0
  4553  0D09  00A6               	movwf	getLoad_AD@channel
  4554                           
  4555                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4556  0D0A  01A9               	clrf	getLoad_AD@i
  4557  0D0B  01A8               	clrf	getLoad_AD@j
  4558  0D0C  01A7               	clrf	getLoad_AD@k
  4559                           
  4560                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4561  0D0D  0022               	movlb	2	; select bank2
  4562  0D0E  1E27               	btfss	_Load^(0+256),4
  4563  0D0F  0008               	return
  4564                           
  4565                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4566  0D10  30F3               	movlw	243
  4567  0D11  0020               	movlb	0	; select bank0
  4568  0D12  00A4               	movwf	??_getLoad_AD
  4569  0D13  0824               	movf	??_getLoad_AD,w
  4570  0D14  00A0               	movwf	getAD@adcon1
  4571  0D15  0826               	movf	getLoad_AD@channel,w
  4572  0D16  319F  2732  318D   	fcall	_getAD
  4573  0D19  0020               	movlb	0	; select bank0
  4574  0D1A  0821               	movf	?_getAD+1,w
  4575  0D1B  0022               	movlb	2	; select bank2
  4576  0D1C  01C9               	clrf	((_Load+1)^(0+256)+33)
  4577  0D1D  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4578  0D1E  0020               	movlb	0	; select bank0
  4579  0D1F  0820               	movf	?_getAD,w
  4580  0D20  0022               	movlb	2	; select bank2
  4581  0D21  01C8               	clrf	(_Load^(0+256)+33)
  4582  0D22  07C8               	addwf	(_Load^(0+256)+33),f
  4583                           
  4584                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4585  0D23  0020               	movlb	0	; select bank0
  4586  0D24  01A9               	clrf	getLoad_AD@i
  4587  0D25  3004               	movlw	4
  4588  0D26  0229               	subwf	getLoad_AD@i,w
  4589  0D27  1803               	btfsc	3,0
  4590  0D28  2D56               	goto	l10565
  4591  0D29                     l10553:	
  4592                           
  4593                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4594  0D29  3529               	lslf	getLoad_AD@i,w
  4595  0D2A  3E32               	addlw	(_Load+11)& (0+255)
  4596  0D2B  0086               	movwf	6
  4597  0D2C  3001               	movlw	1	; select bank2/3
  4598  0D2D  0087               	movwf	7
  4599  0D2E  3F40               	moviw [0]fsr1
  4600  0D2F  00A4               	movwf	??_getLoad_AD
  4601  0D30  3F41               	moviw [1]fsr1
  4602  0D31  00A5               	movwf	??_getLoad_AD+1
  4603  0D32  0022               	movlb	2	; select bank2
  4604  0D33  0849               	movf	((_Load+1)^(0+256)+33),w
  4605  0D34  0020               	movlb	0	; select bank0
  4606  0D35  0225               	subwf	??_getLoad_AD+1,w
  4607  0D36  1D03               	skipz
  4608  0D37  2D3C               	goto	u12225
  4609  0D38  0022               	movlb	2	; select bank2
  4610  0D39  0848               	movf	(_Load^(0+256)+33),w
  4611  0D3A  0020               	movlb	0	; select bank0
  4612  0D3B  0224               	subwf	??_getLoad_AD,w
  4613  0D3C                     u12225:	
  4614  0D3C  1803               	skipnc
  4615  0D3D  2D4E               	goto	l10561
  4616  0D3E  08A8               	movf	getLoad_AD@j,f
  4617  0D3F  1D03               	skipz
  4618  0D40  2D4E               	goto	l10561
  4619                           
  4620                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4621  0D41  3529               	lslf	getLoad_AD@i,w
  4622  0D42  3E32               	addlw	(_Load+11)& (0+255)
  4623  0D43  0086               	movwf	6
  4624  0D44  3001               	movlw	1	; select bank2/3
  4625  0D45  0087               	movwf	7
  4626  0D46  0022               	movlb	2	; select bank2
  4627  0D47  0848               	movf	(_Load^(0+256)+33),w
  4628  0D48  3FC0               	movwi [0]fsr1
  4629  0D49  0849               	movf	((_Load+1)^(0+256)+33),w
  4630  0D4A  3FC1               	movwi [1]fsr1
  4631                           
  4632                           ;OverLoad_B1.c: 24: j = 1;
  4633  0D4B  0020               	movlb	0	; select bank0
  4634  0D4C  01A8               	clrf	getLoad_AD@j
  4635  0D4D  0AA8               	incf	getLoad_AD@j,f
  4636  0D4E                     l10561:	
  4637  0D4E  3001               	movlw	1
  4638  0D4F  00A4               	movwf	??_getLoad_AD
  4639  0D50  0824               	movf	??_getLoad_AD,w
  4640  0D51  07A9               	addwf	getLoad_AD@i,f
  4641  0D52  3004               	movlw	4
  4642  0D53  0229               	subwf	getLoad_AD@i,w
  4643  0D54  1C03               	skipc
  4644  0D55  2D29               	goto	l10553
  4645  0D56                     l10565:	
  4646                           
  4647                           ;OverLoad_B1.c: 25: }
  4648                           ;OverLoad_B1.c: 26: }
  4649                           ;OverLoad_B1.c: 27: if (j == 0) {
  4650  0D56  08A8               	movf	getLoad_AD@j,f
  4651  0D57  1D03               	skipz
  4652  0D58  0008               	return
  4653                           
  4654                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4655  0D59  01A9               	clrf	getLoad_AD@i
  4656  0D5A                     L1:	
  4657  0D5A  3004               	movlw	4
  4658  0D5B  0229               	subwf	getLoad_AD@i,w
  4659  0D5C  1803               	btfsc	3,0
  4660  0D5D  0008               	return
  4661                           
  4662                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4663  0D5E  3529               	lslf	getLoad_AD@i,w
  4664  0D5F  3E3C               	addlw	(_Load+21)& (0+255)
  4665  0D60  0086               	movwf	6
  4666  0D61  3001               	movlw	1	; select bank2/3
  4667  0D62  0087               	movwf	7
  4668  0D63  3F40               	moviw [0]fsr1
  4669  0D64  00A4               	movwf	??_getLoad_AD
  4670  0D65  3F41               	moviw [1]fsr1
  4671  0D66  00A5               	movwf	??_getLoad_AD+1
  4672  0D67  0825               	movf	??_getLoad_AD+1,w
  4673  0D68  0022               	movlb	2	; select bank2
  4674  0D69  0249               	subwf	((_Load+1)^(0+256)+33),w
  4675  0D6A  1D03               	skipz
  4676  0D6B  2D70               	goto	u12275
  4677  0D6C  0020               	movlb	0	; select bank0
  4678  0D6D  0824               	movf	??_getLoad_AD,w
  4679  0D6E  0022               	movlb	2	; select bank2
  4680  0D6F  0248               	subwf	(_Load^(0+256)+33),w
  4681  0D70                     u12275:	
  4682  0D70  1803               	skipnc
  4683  0D71  2D83               	goto	l10581
  4684  0D72  0020               	movlb	0	; select bank0
  4685  0D73  08A7               	movf	getLoad_AD@k,f
  4686  0D74  1D03               	skipz
  4687  0D75  2D83               	goto	l10581
  4688                           
  4689                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4690  0D76  3529               	lslf	getLoad_AD@i,w
  4691  0D77  3E3C               	addlw	(_Load+21)& (0+255)
  4692  0D78  0086               	movwf	6
  4693  0D79  3001               	movlw	1	; select bank2/3
  4694  0D7A  0087               	movwf	7
  4695  0D7B  0022               	movlb	2	; select bank2
  4696  0D7C  0848               	movf	(_Load^(0+256)+33),w
  4697  0D7D  3FC0               	movwi [0]fsr1
  4698  0D7E  0849               	movf	((_Load+1)^(0+256)+33),w
  4699  0D7F  3FC1               	movwi [1]fsr1
  4700                           
  4701                           ;OverLoad_B1.c: 31: k = 1;
  4702  0D80  0020               	movlb	0	; select bank0
  4703  0D81  01A7               	clrf	getLoad_AD@k
  4704  0D82  0AA7               	incf	getLoad_AD@k,f
  4705  0D83                     l10581:	
  4706  0D83  3001               	movlw	1
  4707  0D84  0020               	movlb	0	; select bank0
  4708  0D85  00A4               	movwf	??_getLoad_AD
  4709  0D86  0824               	movf	??_getLoad_AD,w
  4710  0D87  07A9               	addwf	getLoad_AD@i,f
  4711  0D88  2D5A               	goto	L1
  4712  0D89                     __end_of_getLoad_AD:	
  4713                           
  4714                           	psect	text5
  4715  1F32                     __ptext5:	
  4716 ;; *************** function _getAD *****************
  4717 ;; Defined at:
  4718 ;;		line 454 in file "../src/MCU_B1.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;  adcon0          1    wreg     unsigned char 
  4721 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  2    0[BANK0 ] int 
  4726 ;; Registers used:
  4727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4733 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;Total ram usage:        4 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    6
  4740 ;; This function calls:
  4741 ;;		_Timeout_Counter
  4742 ;;		_set_TimeoutCleared
  4743 ;; This function is called by:
  4744 ;;		_getLoad_AD
  4745 ;;		_getTemp_AD
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function _getAD
  4751  1F32                     _getAD:	
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4755                           ;getAD@adcon0 stored from wreg
  4756  1F32  0020               	movlb	0	; select bank0
  4757  1F33  00A3               	movwf	getAD@adcon0
  4758                           
  4759                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4760  1F34  0823               	movf	getAD@adcon0,w
  4761  1F35  0021               	movlb	1	; select bank1
  4762  1F36  009D               	movwf	29	;volatile
  4763                           
  4764                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4765  1F37  0020               	movlb	0	; select bank0
  4766  1F38  0820               	movf	getAD@adcon1,w
  4767  1F39  0021               	movlb	1	; select bank1
  4768  1F3A  009E               	movwf	30	;volatile
  4769                           
  4770                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4771  1F3B  149D               	bsf	29,1	;volatile
  4772                           
  4773                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4774  1F3C  2F40               	goto	l10049
  4775  1F3D                     l10047:	
  4776                           
  4777                           ;MCU_B1.c: 459: Timeout_Counter();
  4778  1F3D  319D  259E  319F   	fcall	_Timeout_Counter
  4779  1F40                     l10049:	
  4780  1F40  0021               	movlb	1	; select bank1
  4781  1F41  1C9D               	btfss	29,1	;volatile
  4782  1F42  2F45               	goto	l10053
  4783  1F43  1D2B               	btfss	(_myMain^(0+128)+11),2
  4784  1F44  2F3D               	goto	l10047
  4785  1F45                     l10053:	
  4786                           
  4787                           ;MCU_B1.c: 460: };
  4788                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4789  1F45  319B  230C         	fcall	_set_TimeoutCleared
  4790                           
  4791                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4792  1F47  0021               	movlb	1	; select bank1
  4793  1F48  081C               	movf	28,w	;volatile
  4794  1F49  0020               	movlb	0	; select bank0
  4795  1F4A  01A1               	clrf	?_getAD+1
  4796  1F4B  07A1               	addwf	?_getAD+1,f
  4797  1F4C  0021               	movlb	1	; select bank1
  4798  1F4D  081B               	movf	27,w	;volatile
  4799  1F4E  0020               	movlb	0	; select bank0
  4800  1F4F  01A0               	clrf	?_getAD
  4801  1F50  07A0               	addwf	?_getAD,f
  4802  1F51  0008               	return
  4803  1F52                     __end_of_getAD:	
  4804                           
  4805                           	psect	text6
  4806  1CA0                     __ptext6:	
  4807 ;; *************** function _WDT_Main *****************
  4808 ;; Defined at:
  4809 ;;		line 1098 in file "../src/MCU_B1.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;		None
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;		None
  4814 ;; Return value:  Size  Location     Type
  4815 ;;		None               void
  4816 ;; Registers used:
  4817 ;;		wreg, status,2, status,0, pclath, cstack
  4818 ;; Tracked objects:
  4819 ;;		On entry : 0/0
  4820 ;;		On exit  : 0/0
  4821 ;;		Unchanged: 0/0
  4822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;Total ram usage:        1 bytes
  4828 ;; Hardware stack levels used:    1
  4829 ;; Hardware stack levels required when called:    6
  4830 ;; This function calls:
  4831 ;;		_WDT_Clearing
  4832 ;; This function is called by:
  4833 ;;		_main
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           
  4838                           ;psect for function _WDT_Main
  4839  1CA0                     _WDT_Main:	
  4840                           
  4841                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4845  1CA0  0022               	movlb	2	; select bank2
  4846  1CA1  1C25               	btfss	_WDT^(0+256),0
  4847  1CA2  0008               	return
  4848                           
  4849                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4850  1CA3  3001               	movlw	1
  4851  1CA4  02A6               	subwf	(_WDT^(0+256)+1),f
  4852  1CA5  0826               	movf	(_WDT^(0+256)+1),w
  4853  1CA6  3AFF               	xorlw	255
  4854  1CA7  1903               	skipnz
  4855  1CA8  0008               	return
  4856                           
  4857                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4858  1CA9  3064               	movlw	100
  4859  1CAA  0020               	movlb	0	; select bank0
  4860  1CAB  00A0               	movwf	??_WDT_Main
  4861  1CAC  0820               	movf	??_WDT_Main,w
  4862  1CAD  0022               	movlb	2	; select bank2
  4863  1CAE  00A6               	movwf	(_WDT^(0+256)+1)
  4864                           
  4865                           ;MCU_B1.c: 1102: WDT_Clearing();
  4866  1CAF  3180  2002         	fcall	_WDT_Clearing
  4867  1CB1  0008               	return
  4868  1CB2                     __end_of_WDT_Main:	
  4869                           
  4870                           	psect	text7
  4871  0002                     __ptext7:	
  4872 ;; *************** function _WDT_Clearing *****************
  4873 ;; Defined at:
  4874 ;;		line 1108 in file "../src/MCU_B1.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;		None
  4877 ;; Auto vars:     Size  Location     Type
  4878 ;;		None
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		None
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;Total ram usage:        0 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    5
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_WDT_Main
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           
  4903                           ;psect for function _WDT_Clearing
  4904  0002                     _WDT_Clearing:	
  4905                           
  4906                           ;incstack = 0
  4907                           ; Regs used in _WDT_Clearing: []
  4908  0002  0064               	clrwdt	;# 
  4909  0003  0008               	return
  4910  0004                     __end_of_WDT_Clearing:	
  4911                           
  4912                           	psect	text8
  4913  1AF9                     __ptext8:	
  4914 ;; *************** function _Temp_Main *****************
  4915 ;; Defined at:
  4916 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;		None
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        0 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    8
  4937 ;; This function calls:
  4938 ;;		_setTemp_Main
  4939 ;; This function is called by:
  4940 ;;		_main
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _Temp_Main
  4946  1AF9                     _Temp_Main:	
  4947                           
  4948                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4952  1AF9  318F  2750         	fcall	_setTemp_Main
  4953  1AFB  0008               	return
  4954  1AFC                     __end_of_Temp_Main:	
  4955                           
  4956                           	psect	text9
  4957  0F50                     __ptext9:	
  4958 ;; *************** function _setTemp_Main *****************
  4959 ;; Defined at:
  4960 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;		None
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  error           1   72[BANK0 ] unsigned char 
  4965 ;; Return value:  Size  Location     Type
  4966 ;;		None               void
  4967 ;; Registers used:
  4968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4969 ;; Tracked objects:
  4970 ;;		On entry : 0/0
  4971 ;;		On exit  : 0/0
  4972 ;;		Unchanged: 0/0
  4973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;Total ram usage:        3 bytes
  4979 ;; Hardware stack levels used:    1
  4980 ;; Hardware stack levels required when called:    7
  4981 ;; This function calls:
  4982 ;;		_getMain_All_Error_Status
  4983 ;;		_setBuz
  4984 ;;		_setProductData
  4985 ;; This function is called by:
  4986 ;;		_Temp_Main
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function _setTemp_Main
  4992  0F50                     _setTemp_Main:	
  4993                           
  4994                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4995                           
  4996                           ;incstack = 0
  4997                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4998  0F50  3000               	movlw	0
  4999  0F51  3191  21D3  318F   	fcall	_getMain_All_Error_Status
  5000  0F54  0020               	movlb	0	; select bank0
  5001  0F55  00E6               	movwf	??_setTemp_Main
  5002  0F56  0866               	movf	??_setTemp_Main,w
  5003  0F57  00E8               	movwf	setTemp_Main@error
  5004                           
  5005                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5006  0F58  0021               	movlb	1	; select bank1
  5007  0F59  1C56               	btfss	_Temp^(0+128),0
  5008  0F5A  2FFC               	goto	l1895
  5009                           
  5010                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5011  0F5B  1956               	btfsc	_Temp^(0+128),2
  5012  0F5C  2F6C               	goto	l10119
  5013                           
  5014                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5015  0F5D  3001               	movlw	1
  5016  0F5E  07D7               	addwf	(_Temp^(0+128)+1),f
  5017  0F5F  3000               	movlw	0
  5018  0F60  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5019                           
  5020                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5021  0F61  3001               	movlw	1
  5022  0F62  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5023  0F63  30F4               	movlw	244
  5024  0F64  1903               	skipnz
  5025  0F65  0257               	subwf	(_Temp^(0+128)+1),w
  5026  0F66  1C03               	skipc
  5027  0F67  0008               	return
  5028                           
  5029                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5030  0F68  01D7               	clrf	(_Temp^(0+128)+1)
  5031  0F69  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5032                           
  5033                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5034  0F6A  1556               	bsf	_Temp^(0+128),2
  5035                           
  5036                           ;OverTemperature_B1.c: 70: }
  5037                           ;OverTemperature_B1.c: 71: } else {
  5038  0F6B  0008               	return
  5039  0F6C                     l10119:	
  5040                           
  5041                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5042  0F6C  3001               	movlw	1
  5043  0F6D  07D7               	addwf	(_Temp^(0+128)+1),f
  5044  0F6E  3000               	movlw	0
  5045  0F6F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5046                           
  5047                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5048  0F70  3000               	movlw	0
  5049  0F71  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5050  0F72  3005               	movlw	5
  5051  0F73  1903               	skipnz
  5052  0F74  0257               	subwf	(_Temp^(0+128)+1),w
  5053  0F75  1C03               	skipc
  5054  0F76  0008               	return
  5055                           
  5056                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5057  0F77  01D7               	clrf	(_Temp^(0+128)+1)
  5058  0F78  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5059                           
  5060                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5061  0F79  3008               	movlw	8
  5062  0F7A  3ED6               	addlw	_Temp& (0+255)
  5063  0F7B  0086               	movwf	6
  5064  0F7C  0187               	clrf	7
  5065  0F7D  0016               	moviw fsr1++
  5066  0F7E  0401               	iorwf	1,w
  5067  0F7F  1903               	skipnz
  5068  0F80  2FF6               	goto	l1900
  5069  0F81  300A               	movlw	10
  5070  0F82  3ED6               	addlw	_Temp& (0+255)
  5071  0F83  0086               	movwf	6
  5072  0F84  0187               	clrf	7
  5073  0F85  0016               	moviw fsr1++
  5074  0F86  0401               	iorwf	1,w
  5075  0F87  1903               	skipnz
  5076  0F88  2FF6               	goto	l1900
  5077                           
  5078                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5079  0F89  1156               	bcf	_Temp^(0+128),2
  5080                           
  5081                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5082  0F8A  300A               	movlw	10
  5083  0F8B  3ED6               	addlw	_Temp& (0+255)
  5084  0F8C  0086               	movwf	6
  5085  0F8D  0187               	clrf	7
  5086  0F8E  3008               	movlw	8
  5087  0F8F  3ED6               	addlw	_Temp& (0+255)
  5088  0F90  0084               	movwf	4
  5089  0F91  0185               	clrf	5
  5090  0F92  3F40               	moviw [0]fsr1
  5091  0F93  0700               	addwf	0,w
  5092  0F94  0020               	movlb	0	; select bank0
  5093  0F95  00E6               	movwf	??_setTemp_Main
  5094  0F96  3101               	addfsr 0,1
  5095  0F97  3F41               	moviw [1]fsr1
  5096  0F98  3D00               	addwfc	0,w
  5097  0F99  00E7               	movwf	??_setTemp_Main+1
  5098  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5099  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5100  0F9C  0866               	movf	??_setTemp_Main,w
  5101  0F9D  0021               	movlb	1	; select bank1
  5102  0F9E  00DC               	movwf	(_Temp^(0+128)+6)
  5103  0F9F  0020               	movlb	0	; select bank0
  5104  0FA0  0867               	movf	??_setTemp_Main+1,w
  5105  0FA1  0021               	movlb	1	; select bank1
  5106  0FA2  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5107                           
  5108                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5109  0FA3  30C7               	movlw	199
  5110  0FA4  00E4               	movwf	(_Temp^(0+128)+14)
  5111  0FA5  3001               	movlw	1
  5112  0FA6  00E5               	movwf	(_Temp^(0+128)+15)
  5113                           
  5114                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5115  0FA7  309F               	movlw	159
  5116  0FA8  00E6               	movwf	(_Temp^(0+128)+16)
  5117  0FA9  3001               	movlw	1
  5118  0FAA  00E7               	movwf	(_Temp^(0+128)+17)
  5119                           
  5120                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5121  0FAB  1CD6               	btfss	_Temp^(0+128),1
  5122  0FAC  2FCD               	goto	l10151
  5123                           
  5124                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5125  0FAD  0865               	movf	((_Temp+1)^(0+128)+14),w
  5126  0FAE  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5127  0FAF  1D03               	skipz
  5128  0FB0  2FB3               	goto	u11465
  5129  0FB1  0864               	movf	(_Temp^(0+128)+14),w
  5130  0FB2  025C               	subwf	(_Temp^(0+128)+6),w
  5131  0FB3                     u11465:	
  5132  0FB3  1C03               	skipc
  5133  0FB4  2FCB               	goto	l10149
  5134                           
  5135                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5136  0FB5  3001               	movlw	1
  5137  0FB6  0020               	movlb	0	; select bank0
  5138  0FB7  00E6               	movwf	??_setTemp_Main
  5139  0FB8  0866               	movf	??_setTemp_Main,w
  5140  0FB9  0021               	movlb	1	; select bank1
  5141  0FBA  07D9               	addwf	(_Temp^(0+128)+3),f
  5142                           
  5143                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5144  0FBB  3003               	movlw	3
  5145  0FBC  0259               	subwf	(_Temp^(0+128)+3),w
  5146  0FBD  1C03               	skipc
  5147  0FBE  2FE3               	goto	l10163
  5148                           
  5149                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5150  0FBF  01D9               	clrf	(_Temp^(0+128)+3)
  5151                           
  5152                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5153  0FC0  10D6               	bcf	_Temp^(0+128),1
  5154                           
  5155                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5156  0FC1  3064               	movlw	100
  5157  0FC2  0020               	movlb	0	; select bank0
  5158  0FC3  00A9               	movwf	setBuz@time
  5159  0FC4  3000               	movlw	0
  5160  0FC5  00AA               	movwf	setBuz@time+1
  5161  0FC6  3002               	movlw	2
  5162  0FC7  3197  274E  318F   	fcall	_setBuz
  5163                           
  5164                           ;OverTemperature_B1.c: 103: }
  5165                           ;OverTemperature_B1.c: 104: } else {
  5166  0FCA  2FE3               	goto	l10163
  5167  0FCB                     l10149:	
  5168                           
  5169                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5170  0FCB  0021               	movlb	1	; select bank1
  5171  0FCC  2FE2               	goto	l10161
  5172  0FCD                     l10151:	
  5173                           ;OverTemperature_B1.c: 106: }
  5174                           ;OverTemperature_B1.c: 107: } else {
  5175                           
  5176                           
  5177                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5178  0FCD  085D               	movf	((_Temp+1)^(0+128)+6),w
  5179  0FCE  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5180  0FCF  1D03               	skipz
  5181  0FD0  2FD3               	goto	u11485
  5182  0FD1  085C               	movf	(_Temp^(0+128)+6),w
  5183  0FD2  0266               	subwf	(_Temp^(0+128)+16),w
  5184  0FD3                     u11485:	
  5185  0FD3  1C03               	skipc
  5186  0FD4  2FE2               	goto	l10161
  5187                           
  5188                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5189  0FD5  3001               	movlw	1
  5190  0FD6  0020               	movlb	0	; select bank0
  5191  0FD7  00E6               	movwf	??_setTemp_Main
  5192  0FD8  0866               	movf	??_setTemp_Main,w
  5193  0FD9  0021               	movlb	1	; select bank1
  5194  0FDA  07D9               	addwf	(_Temp^(0+128)+3),f
  5195                           
  5196                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5197  0FDB  3003               	movlw	3
  5198  0FDC  0259               	subwf	(_Temp^(0+128)+3),w
  5199  0FDD  1C03               	skipc
  5200  0FDE  2FE3               	goto	l10163
  5201                           
  5202                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5203  0FDF  01D9               	clrf	(_Temp^(0+128)+3)
  5204                           
  5205                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5206  0FE0  14D6               	bsf	_Temp^(0+128),1
  5207                           
  5208                           ;OverTemperature_B1.c: 113: }
  5209                           ;OverTemperature_B1.c: 114: } else {
  5210  0FE1  2FE3               	goto	l10163
  5211  0FE2                     l10161:	
  5212                           
  5213                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5214  0FE2  01D9               	clrf	(_Temp^(0+128)+3)
  5215  0FE3                     l10163:	
  5216                           
  5217                           ;OverTemperature_B1.c: 116: }
  5218                           ;OverTemperature_B1.c: 117: }
  5219                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5220  0FE3  0021               	movlb	1	; select bank1
  5221  0FE4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5222  0FE5  0020               	movlb	0	; select bank0
  5223  0FE6  00E6               	movwf	??_setTemp_Main
  5224  0FE7  0866               	movf	??_setTemp_Main,w
  5225  0FE8  00E2               	movwf	setProductData@value
  5226  0FE9  3018               	movlw	24
  5227  0FEA  3190  2066  318F   	fcall	_setProductData
  5228                           
  5229                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5230  0FED  0021               	movlb	1	; select bank1
  5231  0FEE  085C               	movf	(_Temp^(0+128)+6),w
  5232  0FEF  0020               	movlb	0	; select bank0
  5233  0FF0  00E6               	movwf	??_setTemp_Main
  5234  0FF1  0866               	movf	??_setTemp_Main,w
  5235  0FF2  00E2               	movwf	setProductData@value
  5236  0FF3  3019               	movlw	25
  5237  0FF4  3190  2066         	fcall	_setProductData
  5238  0FF6                     l1900:	
  5239                           
  5240                           ;OverTemperature_B1.c: 135: }
  5241                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5242  0FF6  0021               	movlb	1	; select bank1
  5243  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5244  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5245                           
  5246                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5247  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5248  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5249                           
  5250                           ;OverTemperature_B1.c: 138: }
  5251                           ;OverTemperature_B1.c: 139: }
  5252                           ;OverTemperature_B1.c: 141: } else {
  5253  0FFB  0008               	return
  5254  0FFC                     l1895:	
  5255                           
  5256                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5257  0FFC  1C20               	btfss	_myMain^(0+128),0
  5258  0FFD  0008               	return
  5259                           
  5260                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5261  0FFE  1456               	bsf	_Temp^(0+128),0
  5262  0FFF  0008               	return
  5263  1000                     __end_of_setTemp_Main:	
  5264                           
  5265                           	psect	text10
  5266  1AF6                     __ptext10:	
  5267 ;; *************** function _Temp_Initialization *****************
  5268 ;; Defined at:
  5269 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;		None               void
  5276 ;; Registers used:
  5277 ;;		status,2, status,0, pclath, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;Total ram usage:        0 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    6
  5290 ;; This function calls:
  5291 ;;		_setTemp_Initialization
  5292 ;; This function is called by:
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _Temp_Initialization
  5299  1AF6                     _Temp_Initialization:	
  5300                           
  5301                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5305  1AF6  3187  27FF         	fcall	_setTemp_Initialization
  5306  1AF8  0008               	return
  5307  1AF9                     __end_of_Temp_Initialization:	
  5308                           
  5309                           	psect	text11
  5310  07FF                     __ptext11:	
  5311 ;; *************** function _setTemp_Initialization *****************
  5312 ;; Defined at:
  5313 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		None
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;Total ram usage:        0 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    5
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_Temp_Initialization
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function _setTemp_Initialization
  5343  07FF                     _setTemp_Initialization:	
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _setTemp_Initialization: []
  5347  07FF  0008               	return
  5348  0800                     __end_of_setTemp_Initialization:	
  5349                           
  5350                           	psect	text12
  5351  1B7F                     __ptext12:	
  5352 ;; *************** function _Switch_Main *****************
  5353 ;; Defined at:
  5354 ;;		line 72 in file "../src/Switch_B1.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;		None
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;		None
  5359 ;; Return value:  Size  Location     Type
  5360 ;;		None               void
  5361 ;; Registers used:
  5362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5363 ;; Tracked objects:
  5364 ;;		On entry : 0/0
  5365 ;;		On exit  : 0/0
  5366 ;;		Unchanged: 0/0
  5367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;Total ram usage:        0 bytes
  5373 ;; Hardware stack levels used:    1
  5374 ;; Hardware stack levels required when called:   10
  5375 ;; This function calls:
  5376 ;;		_TouchPower
  5377 ;;		_setSw_Main
  5378 ;; This function is called by:
  5379 ;;		_main
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _Switch_Main
  5385  1B7F                     _Switch_Main:	
  5386                           
  5387                           ;Switch_B1.c: 75: setSw_Main(1);
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5391  1B7F  3001               	movlw	1
  5392  1B80  3181  21F5  319B   	fcall	_setSw_Main
  5393                           
  5394                           ;Switch_B1.c: 79: setSw_Main(2);
  5395  1B83  3002               	movlw	2
  5396  1B84  3181  21F5  319B   	fcall	_setSw_Main
  5397                           
  5398                           ;Switch_B1.c: 87: TouchPower();
  5399  1B87  319D  25C8         	fcall	_TouchPower
  5400  1B89  0008               	return
  5401  1B8A                     __end_of_Switch_Main:	
  5402                           
  5403                           	psect	text13
  5404  01F5                     __ptext13:	
  5405 ;; *************** function _setSw_Main *****************
  5406 ;; Defined at:
  5407 ;;		line 121 in file "../src/Switch_B1.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  sw              1    wreg     unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  sw              1   77[BANK0 ] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;Total ram usage:        3 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:    9
  5428 ;; This function calls:
  5429 ;;		_SwPointSelect
  5430 ;;		_getMain_All_Error_Status
  5431 ;;		_getSw_KeyStatus
  5432 ;;		_setBuz
  5433 ;;		_setDimmerLights_AdjOn
  5434 ;;		_setDimmerLights_SwOff
  5435 ;;		_setDimmerLights_SwOn
  5436 ;;		_setRF_Learn
  5437 ;; This function is called by:
  5438 ;;		_Switch_Main
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           
  5443                           ;psect for function _setSw_Main
  5444  01F5                     _setSw_Main:	
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5448                           ;setSw_Main@sw stored from wreg
  5449  01F5  0020               	movlb	0	; select bank0
  5450  01F6  00ED               	movwf	setSw_Main@sw
  5451                           
  5452                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5453  01F7  086D               	movf	setSw_Main@sw,w
  5454  01F8  319D  2561  3181   	fcall	_SwPointSelect
  5455                           
  5456                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5457  01FB  0877               	movf	_Sw,w
  5458  01FC  0086               	movwf	6
  5459  01FD  3001               	movlw	1	; select bank2/3
  5460  01FE  0087               	movwf	7
  5461  01FF  1C01               	btfss	1,0
  5462  0200  2B5B               	goto	l2662
  5463                           
  5464                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5465  0201  3000               	movlw	0
  5466  0202  3191  21D3  3181   	fcall	_getMain_All_Error_Status
  5467  0205  3800               	iorlw	0
  5468  0206  1D03               	skipz
  5469  0207  2A23               	goto	l10263
  5470                           
  5471                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5472  0208  0A77               	incf	_Sw,w
  5473  0209  0086               	movwf	6
  5474  020A  3001               	movlw	1	; select bank2/3
  5475  020B  0087               	movwf	7
  5476  020C  1081               	bcf	1,1
  5477                           
  5478                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5479  020D  0020               	movlb	0	; select bank0
  5480  020E  086D               	movf	setSw_Main@sw,w
  5481  020F  319E  26D3  3181   	fcall	_getSw_KeyStatus
  5482  0212  3A01               	xorlw	1
  5483  0213  3000               	movlw	0
  5484  0214  1903               	skipnz
  5485  0215  3001               	movlw	1
  5486  0216  0020               	movlb	0	; select bank0
  5487  0217  00EB               	movwf	??_setSw_Main
  5488  0218  0877               	movf	_Sw,w
  5489  0219  0086               	movwf	6
  5490  021A  3001               	movlw	1	; select bank2/3
  5491  021B  0087               	movwf	7
  5492  021C  0DEB               	rlf	??_setSw_Main,f
  5493  021D  0801               	movf	1,w
  5494  021E  066B               	xorwf	??_setSw_Main,w
  5495  021F  39FD               	andlw	-3
  5496  0220  066B               	xorwf	??_setSw_Main,w
  5497  0221  0081               	movwf	1
  5498                           
  5499                           ;Switch_B1.c: 128: } else {
  5500  0222  2A38               	goto	l2664
  5501  0223                     l10263:	
  5502                           
  5503                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5504  0223  0A77               	incf	_Sw,w
  5505  0224  0086               	movwf	6
  5506  0225  3001               	movlw	1	; select bank2/3
  5507  0226  0087               	movwf	7
  5508  0227  1881               	btfsc	1,1
  5509  0228  2A38               	goto	l2664
  5510                           
  5511                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5512  0229  0A77               	incf	_Sw,w
  5513  022A  0086               	movwf	6
  5514  022B  3001               	movlw	1	; select bank2/3
  5515  022C  0087               	movwf	7
  5516  022D  1481               	bsf	1,1
  5517                           
  5518                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5519  022E  0877               	movf	_Sw,w
  5520  022F  0086               	movwf	6
  5521  0230  3001               	movlw	1	; select bank2/3
  5522  0231  0087               	movwf	7
  5523  0232  1081               	bcf	1,1
  5524                           
  5525                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5526  0233  0877               	movf	_Sw,w
  5527  0234  0086               	movwf	6
  5528  0235  3001               	movlw	1	; select bank2/3
  5529  0236  0087               	movwf	7
  5530  0237  1501               	bsf	1,2
  5531  0238                     l2664:	
  5532                           
  5533                           ;Switch_B1.c: 134: }
  5534                           ;Switch_B1.c: 135: }
  5535                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5536  0238  0877               	movf	_Sw,w
  5537  0239  0086               	movwf	6
  5538  023A  3001               	movlw	1	; select bank2/3
  5539  023B  0087               	movwf	7
  5540  023C  1C81               	btfss	1,1
  5541  023D  2B08               	goto	l10313
  5542                           
  5543                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5544  023E  0877               	movf	_Sw,w
  5545  023F  0086               	movwf	6
  5546  0240  3001               	movlw	1	; select bank2/3
  5547  0241  0087               	movwf	7
  5548  0242  1901               	btfsc	1,2
  5549  0243  2A66               	goto	l10279
  5550                           
  5551                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5552  0244  3001               	movlw	1
  5553  0245  0020               	movlb	0	; select bank0
  5554  0246  00EB               	movwf	??_setSw_Main
  5555  0247  0877               	movf	_Sw,w
  5556  0248  3E02               	addlw	2
  5557  0249  0086               	movwf	6
  5558  024A  3001               	movlw	1	; select bank2/3
  5559  024B  0087               	movwf	7
  5560  024C  086B               	movf	??_setSw_Main,w
  5561  024D  0781               	addwf	1,f
  5562                           
  5563                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5564  024E  0877               	movf	_Sw,w
  5565  024F  3E02               	addlw	2
  5566  0250  0086               	movwf	6
  5567  0251  3001               	movlw	1	; select bank2/3
  5568  0252  0087               	movwf	7
  5569  0253  3005               	movlw	5
  5570  0254  0201               	subwf	1,w
  5571  0255  1C03               	skipc
  5572  0256  0008               	return
  5573                           
  5574                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5575  0257  0877               	movf	_Sw,w
  5576  0258  3E02               	addlw	2
  5577  0259  0086               	movwf	6
  5578  025A  3001               	movlw	1	; select bank2/3
  5579  025B  0087               	movwf	7
  5580  025C  0181               	clrf	1
  5581                           
  5582                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5583  025D  0877               	movf	_Sw,w
  5584  025E  0086               	movwf	6
  5585  025F  3001               	movlw	1	; select bank2/3
  5586  0260  0087               	movwf	7
  5587  0261  1501               	bsf	1,2
  5588                           
  5589                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5590  0262  086D               	movf	setSw_Main@sw,w
  5591  0263  3188  2092         	fcall	_setDimmerLights_SwOn
  5592                           
  5593                           ;Switch_B1.c: 148: }
  5594                           ;Switch_B1.c: 149: } else {
  5595  0265  0008               	return
  5596  0266                     l10279:	
  5597                           
  5598                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5599  0266  0877               	movf	_Sw,w
  5600  0267  0086               	movwf	6
  5601  0268  3001               	movlw	1	; select bank2/3
  5602  0269  0087               	movwf	7
  5603  026A  1981               	btfsc	1,3
  5604  026B  2A98               	goto	l10289
  5605                           
  5606                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5607  026C  0877               	movf	_Sw,w
  5608  026D  3E03               	addlw	3
  5609  026E  0086               	movwf	6
  5610  026F  3001               	movlw	1	; select bank2/3
  5611  0270  0087               	movwf	7
  5612  0271  3001               	movlw	1
  5613  0272  0781               	addwf	1,f
  5614  0273  3141               	addfsr 1,1
  5615  0274  1803               	skipnc
  5616  0275  0A81               	incf	1,f
  5617                           
  5618                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5619  0276  0877               	movf	_Sw,w
  5620  0277  3E03               	addlw	3
  5621  0278  0086               	movwf	6
  5622  0279  3001               	movlw	1	; select bank2/3
  5623  027A  0087               	movwf	7
  5624  027B  3F40               	moviw [0]fsr1
  5625  027C  0020               	movlb	0	; select bank0
  5626  027D  00EB               	movwf	??_setSw_Main
  5627  027E  3F41               	moviw [1]fsr1
  5628  027F  00EC               	movwf	??_setSw_Main+1
  5629  0280  3000               	movlw	0
  5630  0281  026C               	subwf	??_setSw_Main+1,w
  5631  0282  3096               	movlw	150
  5632  0283  1903               	skipnz
  5633  0284  026B               	subwf	??_setSw_Main,w
  5634  0285  1C03               	skipc
  5635  0286  0008               	return
  5636                           
  5637                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5638  0287  0877               	movf	_Sw,w
  5639  0288  3E03               	addlw	3
  5640  0289  0086               	movwf	6
  5641  028A  3001               	movlw	1	; select bank2/3
  5642  028B  0087               	movwf	7
  5643  028C  3000               	movlw	0
  5644  028D  3FC0               	movwi [0]fsr1
  5645  028E  3FC1               	movwi [1]fsr1
  5646                           
  5647                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5648  028F  0877               	movf	_Sw,w
  5649  0290  0086               	movwf	6
  5650  0291  3001               	movlw	1	; select bank2/3
  5651  0292  0087               	movwf	7
  5652  0293  1581               	bsf	1,3
  5653                           
  5654                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5655  0294  086D               	movf	setSw_Main@sw,w
  5656  0295  3192  223C         	fcall	_setDimmerLights_AdjOn
  5657                           
  5658                           ;Switch_B1.c: 160: }
  5659                           ;Switch_B1.c: 161: } else {
  5660  0297  0008               	return
  5661  0298                     l10289:	
  5662                           
  5663                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5664  0298  0877               	movf	_Sw,w
  5665  0299  0086               	movwf	6
  5666  029A  3001               	movlw	1	; select bank2/3
  5667  029B  0087               	movwf	7
  5668  029C  1A01               	btfsc	1,4
  5669  029D  2AD6               	goto	l10303
  5670                           
  5671                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5672  029E  0877               	movf	_Sw,w
  5673  029F  3E05               	addlw	5
  5674  02A0  0086               	movwf	6
  5675  02A1  3001               	movlw	1	; select bank2/3
  5676  02A2  0087               	movwf	7
  5677  02A3  3001               	movlw	1
  5678  02A4  0781               	addwf	1,f
  5679  02A5  3141               	addfsr 1,1
  5680  02A6  1803               	skipnc
  5681  02A7  0A81               	incf	1,f
  5682                           
  5683                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5684  02A8  0877               	movf	_Sw,w
  5685  02A9  3E05               	addlw	5
  5686  02AA  0086               	movwf	6
  5687  02AB  3001               	movlw	1	; select bank2/3
  5688  02AC  0087               	movwf	7
  5689  02AD  3F40               	moviw [0]fsr1
  5690  02AE  0020               	movlb	0	; select bank0
  5691  02AF  00EB               	movwf	??_setSw_Main
  5692  02B0  3F41               	moviw [1]fsr1
  5693  02B1  00EC               	movwf	??_setSw_Main+1
  5694  02B2  3000               	movlw	0
  5695  02B3  026C               	subwf	??_setSw_Main+1,w
  5696  02B4  3096               	movlw	150
  5697  02B5  1903               	skipnz
  5698  02B6  026B               	subwf	??_setSw_Main,w
  5699  02B7  1C03               	skipc
  5700  02B8  0008               	return
  5701                           
  5702                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5703  02B9  0877               	movf	_Sw,w
  5704  02BA  3E05               	addlw	5
  5705  02BB  0086               	movwf	6
  5706  02BC  3001               	movlw	1	; select bank2/3
  5707  02BD  0087               	movwf	7
  5708  02BE  3000               	movlw	0
  5709  02BF  3FC0               	movwi [0]fsr1
  5710  02C0  3FC1               	movwi [1]fsr1
  5711                           
  5712                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5713  02C1  0877               	movf	_Sw,w
  5714  02C2  0086               	movwf	6
  5715  02C3  3001               	movlw	1	; select bank2/3
  5716  02C4  0087               	movwf	7
  5717  02C5  1601               	bsf	1,4
  5718                           
  5719                           ;Switch_B1.c: 169: setRF_Learn(1);
  5720  02C6  3001               	movlw	1
  5721  02C7  319D  2575  3181   	fcall	_setRF_Learn
  5722                           
  5723                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5724  02CA  0021               	movlb	1	; select bank1
  5725  02CB  1EA0               	btfss	_myMain^(0+128),5
  5726  02CC  0008               	return
  5727                           
  5728                           ;Switch_B1.c: 172: setBuz(2, 100);
  5729  02CD  3064               	movlw	100
  5730  02CE  0020               	movlb	0	; select bank0
  5731  02CF  00A9               	movwf	setBuz@time
  5732  02D0  3000               	movlw	0
  5733  02D1  00AA               	movwf	setBuz@time+1
  5734  02D2  3002               	movlw	2
  5735  02D3  3197  274E         	fcall	_setBuz
  5736                           
  5737                           ;Switch_B1.c: 173: }
  5738                           ;Switch_B1.c: 175: }
  5739                           ;Switch_B1.c: 176: } else {
  5740  02D5  0008               	return
  5741  02D6                     l10303:	
  5742                           
  5743                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5744  02D6  0877               	movf	_Sw,w
  5745  02D7  0086               	movwf	6
  5746  02D8  3001               	movlw	1	; select bank2/3
  5747  02D9  0087               	movwf	7
  5748  02DA  1A81               	btfsc	1,5
  5749  02DB  0008               	return
  5750                           
  5751                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5752  02DC  0877               	movf	_Sw,w
  5753  02DD  3E07               	addlw	7
  5754  02DE  0086               	movwf	6
  5755  02DF  3001               	movlw	1	; select bank2/3
  5756  02E0  0087               	movwf	7
  5757  02E1  3001               	movlw	1
  5758  02E2  0781               	addwf	1,f
  5759  02E3  3141               	addfsr 1,1
  5760  02E4  1803               	skipnc
  5761  02E5  0A81               	incf	1,f
  5762                           
  5763                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5764  02E6  0877               	movf	_Sw,w
  5765  02E7  3E07               	addlw	7
  5766  02E8  0086               	movwf	6
  5767  02E9  3001               	movlw	1	; select bank2/3
  5768  02EA  0087               	movwf	7
  5769  02EB  3F40               	moviw [0]fsr1
  5770  02EC  0020               	movlb	0	; select bank0
  5771  02ED  00EB               	movwf	??_setSw_Main
  5772  02EE  3F41               	moviw [1]fsr1
  5773  02EF  00EC               	movwf	??_setSw_Main+1
  5774  02F0  3001               	movlw	1
  5775  02F1  026C               	subwf	??_setSw_Main+1,w
  5776  02F2  302C               	movlw	44
  5777  02F3  1903               	skipnz
  5778  02F4  026B               	subwf	??_setSw_Main,w
  5779  02F5  1C03               	skipc
  5780  02F6  0008               	return
  5781                           
  5782                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5783  02F7  0877               	movf	_Sw,w
  5784  02F8  3E07               	addlw	7
  5785  02F9  0086               	movwf	6
  5786  02FA  3001               	movlw	1	; select bank2/3
  5787  02FB  0087               	movwf	7
  5788  02FC  3000               	movlw	0
  5789  02FD  3FC0               	movwi [0]fsr1
  5790  02FE  3FC1               	movwi [1]fsr1
  5791                           
  5792                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5793  02FF  0877               	movf	_Sw,w
  5794  0300  0086               	movwf	6
  5795  0301  3001               	movlw	1	; select bank2/3
  5796  0302  0087               	movwf	7
  5797  0303  1681               	bsf	1,5
  5798                           
  5799                           ;Switch_B1.c: 184: setRF_Learn(0);
  5800  0304  3000               	movlw	0
  5801  0305  319D  2575         	fcall	_setRF_Learn
  5802                           
  5803                           ;Switch_B1.c: 187: }
  5804                           ;Switch_B1.c: 188: }
  5805                           ;Switch_B1.c: 189: }
  5806                           ;Switch_B1.c: 190: }
  5807                           ;Switch_B1.c: 191: }
  5808                           ;Switch_B1.c: 192: } else {
  5809  0307  0008               	return
  5810  0308                     l10313:	
  5811                           
  5812                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5813  0308  0877               	movf	_Sw,w
  5814  0309  0086               	movwf	6
  5815  030A  3001               	movlw	1	; select bank2/3
  5816  030B  0087               	movwf	7
  5817  030C  1D01               	btfss	1,2
  5818  030D  0008               	return
  5819                           
  5820                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5821  030E  3001               	movlw	1
  5822  030F  0020               	movlb	0	; select bank0
  5823  0310  00EB               	movwf	??_setSw_Main
  5824  0311  0877               	movf	_Sw,w
  5825  0312  3E02               	addlw	2
  5826  0313  0086               	movwf	6
  5827  0314  3001               	movlw	1	; select bank2/3
  5828  0315  0087               	movwf	7
  5829  0316  086B               	movf	??_setSw_Main,w
  5830  0317  0781               	addwf	1,f
  5831                           
  5832                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5833  0318  0877               	movf	_Sw,w
  5834  0319  3E02               	addlw	2
  5835  031A  0086               	movwf	6
  5836  031B  3001               	movlw	1	; select bank2/3
  5837  031C  0087               	movwf	7
  5838  031D  3005               	movlw	5
  5839  031E  0201               	subwf	1,w
  5840  031F  1C03               	skipc
  5841  0320  0008               	return
  5842                           
  5843                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5844  0321  0877               	movf	_Sw,w
  5845  0322  3E02               	addlw	2
  5846  0323  0086               	movwf	6
  5847  0324  3001               	movlw	1	; select bank2/3
  5848  0325  0087               	movwf	7
  5849  0326  0181               	clrf	1
  5850                           
  5851                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5852  0327  0877               	movf	_Sw,w
  5853  0328  0086               	movwf	6
  5854  0329  3001               	movlw	1	; select bank2/3
  5855  032A  0087               	movwf	7
  5856  032B  1101               	bcf	1,2
  5857                           
  5858                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5859  032C  0877               	movf	_Sw,w
  5860  032D  3E03               	addlw	3
  5861  032E  0086               	movwf	6
  5862  032F  3001               	movlw	1	; select bank2/3
  5863  0330  0087               	movwf	7
  5864  0331  3000               	movlw	0
  5865  0332  3FC0               	movwi [0]fsr1
  5866  0333  3FC1               	movwi [1]fsr1
  5867                           
  5868                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5869  0334  0877               	movf	_Sw,w
  5870  0335  0086               	movwf	6
  5871  0336  3001               	movlw	1	; select bank2/3
  5872  0337  0087               	movwf	7
  5873  0338  1181               	bcf	1,3
  5874                           
  5875                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5876  0339  0877               	movf	_Sw,w
  5877  033A  3E05               	addlw	5
  5878  033B  0086               	movwf	6
  5879  033C  3001               	movlw	1	; select bank2/3
  5880  033D  0087               	movwf	7
  5881  033E  3000               	movlw	0
  5882  033F  3FC0               	movwi [0]fsr1
  5883  0340  3FC1               	movwi [1]fsr1
  5884                           
  5885                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5886  0341  0877               	movf	_Sw,w
  5887  0342  0086               	movwf	6
  5888  0343  3001               	movlw	1	; select bank2/3
  5889  0344  0087               	movwf	7
  5890  0345  1201               	bcf	1,4
  5891                           
  5892                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5893  0346  0877               	movf	_Sw,w
  5894  0347  3E07               	addlw	7
  5895  0348  0086               	movwf	6
  5896  0349  3001               	movlw	1	; select bank2/3
  5897  034A  0087               	movwf	7
  5898  034B  3000               	movlw	0
  5899  034C  3FC0               	movwi [0]fsr1
  5900  034D  3FC1               	movwi [1]fsr1
  5901                           
  5902                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5903  034E  0877               	movf	_Sw,w
  5904  034F  0086               	movwf	6
  5905  0350  3001               	movlw	1	; select bank2/3
  5906  0351  0087               	movwf	7
  5907  0352  1281               	bcf	1,5
  5908                           
  5909                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5910  0353  086D               	movf	setSw_Main@sw,w
  5911  0354  3194  24BC  3181   	fcall	_setDimmerLights_SwOff
  5912                           
  5913                           ;Switch_B1.c: 209: setRF_Learn(0);
  5914  0357  3000               	movlw	0
  5915  0358  319D  2575         	fcall	_setRF_Learn
  5916                           
  5917                           ;Switch_B1.c: 211: }
  5918                           ;Switch_B1.c: 212: }
  5919                           ;Switch_B1.c: 213: }
  5920                           ;Switch_B1.c: 214: } else {
  5921  035A  0008               	return
  5922  035B                     l2662:	
  5923                           
  5924                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5925  035B  0021               	movlb	1	; select bank1
  5926  035C  1C20               	btfss	_myMain^(0+128),0
  5927  035D  0008               	return
  5928                           
  5929                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5930  035E  0877               	movf	_Sw,w
  5931  035F  0086               	movwf	6
  5932  0360  3001               	movlw	1	; select bank2/3
  5933  0361  0087               	movwf	7
  5934  0362  1401               	bsf	1,0
  5935  0363  0008               	return
  5936  0364                     __end_of_setSw_Main:	
  5937                           
  5938                           	psect	text14
  5939  1D75                     __ptext14:	
  5940 ;; *************** function _setRF_Learn *****************
  5941 ;; Defined at:
  5942 ;;		line 23 in file "../src/RF_Control_B1.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;  command         1    wreg     unsigned char 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;  command         1    1[BANK0 ] unsigned char 
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, status,0
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;Total ram usage:        2 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    5
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_setSw_Main
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           
  5971                           ;psect for function _setRF_Learn
  5972  1D75                     _setRF_Learn:	
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5976                           ;setRF_Learn@command stored from wreg
  5977  1D75  0020               	movlb	0	; select bank0
  5978  1D76  00A1               	movwf	setRF_Learn@command
  5979                           
  5980                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5981  1D77  0821               	movf	setRF_Learn@command,w
  5982  1D78  3A01               	xorlw	1
  5983  1D79  3000               	movlw	0
  5984  1D7A  1903               	skipnz
  5985  1D7B  3001               	movlw	1
  5986  1D7C  00A0               	movwf	??_setRF_Learn
  5987  1D7D  0EA0               	swapf	??_setRF_Learn,f
  5988  1D7E  0DA0               	rlf	??_setRF_Learn,f
  5989  1D7F  0DA0               	rlf	??_setRF_Learn,f
  5990  1D80  0021               	movlb	1	; select bank1
  5991  1D81  083A               	movf	_RF1^(0+128),w
  5992  1D82  0020               	movlb	0	; select bank0
  5993  1D83  0620               	xorwf	??_setRF_Learn,w
  5994  1D84  39BF               	andlw	-65
  5995  1D85  0620               	xorwf	??_setRF_Learn,w
  5996  1D86  0021               	movlb	1	; select bank1
  5997  1D87  00BA               	movwf	_RF1^(0+128)
  5998  1D88  0008               	return
  5999  1D89                     __end_of_setRF_Learn:	
  6000                           
  6001                           	psect	text15
  6002  123C                     __ptext15:	
  6003 ;; *************** function _setDimmerLights_AdjOn *****************
  6004 ;; Defined at:
  6005 ;;		line 477 in file "../src/Dimmer_B1.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  sw              1    wreg     unsigned char 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  sw              1    7[BANK0 ] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;		None               void
  6012 ;; Registers used:
  6013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6023 ;;Total ram usage:        1 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    7
  6026 ;; This function calls:
  6027 ;;		_DimmerLightsPointSelect
  6028 ;;		_getDimmerLights_Allow_Condition
  6029 ;; This function is called by:
  6030 ;;		_setSw_Main
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           
  6035                           ;psect for function _setDimmerLights_AdjOn
  6036  123C                     _setDimmerLights_AdjOn:	
  6037                           
  6038                           ;incstack = 0
  6039                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6040                           ;setDimmerLights_AdjOn@sw stored from wreg
  6041  123C  0020               	movlb	0	; select bank0
  6042  123D  00A7               	movwf	setDimmerLights_AdjOn@sw
  6043                           
  6044                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6045  123E  0827               	movf	setDimmerLights_AdjOn@sw,w
  6046  123F  319C  24B2  3192   	fcall	_DimmerLightsPointSelect
  6047                           
  6048                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6049  1242  0020               	movlb	0	; select bank0
  6050  1243  086F               	movf	_DimmerLights,w
  6051  1244  3E0A               	addlw	10
  6052  1245  0086               	movwf	6
  6053  1246  3001               	movlw	1	; select bank2/3
  6054  1247  0087               	movwf	7
  6055  1248  1881               	btfsc	1,1
  6056  1249  0008               	return
  6057  124A  0827               	movf	setDimmerLights_AdjOn@sw,w
  6058  124B  3192  2272  3192   	fcall	_getDimmerLights_Allow_Condition
  6059  124E  3800               	iorlw	0
  6060  124F  1D03               	skipz
  6061  1250  0008               	return
  6062                           
  6063                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6064  1251  0020               	movlb	0	; select bank0
  6065  1252  086F               	movf	_DimmerLights,w
  6066  1253  3E0B               	addlw	11
  6067  1254  0086               	movwf	6
  6068  1255  3001               	movlw	1	; select bank2/3
  6069  1256  0087               	movwf	7
  6070  1257  1C81               	btfss	1,1
  6071  1258  0008               	return
  6072                           
  6073                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6074  1259  086F               	movf	_DimmerLights,w
  6075  125A  3E0B               	addlw	11
  6076  125B  0086               	movwf	6
  6077  125C  3001               	movlw	1	; select bank2/3
  6078  125D  0087               	movwf	7
  6079  125E  1501               	bsf	1,2
  6080                           
  6081                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6082  125F  086F               	movf	_DimmerLights,w
  6083  1260  3E02               	addlw	2
  6084  1261  0086               	movwf	6
  6085  1262  3001               	movlw	1	; select bank2/3
  6086  1263  0087               	movwf	7
  6087  1264  1481               	bsf	1,1
  6088                           
  6089                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6090  1265  086F               	movf	_DimmerLights,w
  6091  1266  3E0A               	addlw	10
  6092  1267  0086               	movwf	6
  6093  1268  3001               	movlw	1	; select bank2/3
  6094  1269  0087               	movwf	7
  6095  126A  1581               	bsf	1,3
  6096                           
  6097                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6098  126B  086F               	movf	_DimmerLights,w
  6099  126C  3E0A               	addlw	10
  6100  126D  0086               	movwf	6
  6101  126E  3001               	movlw	1	; select bank2/3
  6102  126F  0087               	movwf	7
  6103  1270  1501               	bsf	1,2
  6104  1271  0008               	return
  6105  1272                     __end_of_setDimmerLights_AdjOn:	
  6106                           
  6107                           	psect	text16
  6108  1ED3                     __ptext16:	
  6109 ;; *************** function _getSw_KeyStatus *****************
  6110 ;; Defined at:
  6111 ;;		line 222 in file "../src/Switch_B1.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  sw              1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  sw              1    4[BANK0 ] unsigned char 
  6116 ;;  status          1    3[BANK0 ] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      unsigned char 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;Total ram usage:        5 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    5
  6133 ;; This function calls:
  6134 ;;		Nothing
  6135 ;; This function is called by:
  6136 ;;		_setSw_Main
  6137 ;; This function uses a non-reentrant model
  6138 ;;
  6139                           
  6140                           
  6141                           ;psect for function _getSw_KeyStatus
  6142  1ED3                     _getSw_KeyStatus:	
  6143                           
  6144                           ;incstack = 0
  6145                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6146                           ;getSw_KeyStatus@sw stored from wreg
  6147  1ED3  0020               	movlb	0	; select bank0
  6148  1ED4  00A4               	movwf	getSw_KeyStatus@sw
  6149                           
  6150                           ;Switch_B1.c: 223: char status = 0;
  6151  1ED5  01A3               	clrf	getSw_KeyStatus@status
  6152                           
  6153                           ;Switch_B1.c: 235: if (sw == 1) {
  6154  1ED6  0824               	movf	getSw_KeyStatus@sw,w
  6155  1ED7  3A01               	xorlw	1
  6156  1ED8  1D03               	skipz
  6157  1ED9  2EE2               	goto	l9775
  6158                           
  6159                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6160  1EDA  01A1               	clrf	_getSw_KeyStatus$6242
  6161  1EDB  0AA1               	incf	_getSw_KeyStatus$6242,f
  6162  1EDC  1F0C               	btfss	12,6	;volatile
  6163  1EDD  1A0C               	btfsc	12,4	;volatile
  6164  1EDE  2EE0               	goto	l9773
  6165  1EDF  01A1               	clrf	_getSw_KeyStatus$6242
  6166  1EE0                     l9773:	
  6167  1EE0  0821               	movf	_getSw_KeyStatus$6242,w
  6168  1EE1  2EED               	goto	L2
  6169  1EE2                     l9775:	
  6170                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6171                           
  6172  1EE2  0824               	movf	getSw_KeyStatus@sw,w
  6173  1EE3  3A02               	xorlw	2
  6174  1EE4  1D03               	skipz
  6175  1EE5  2EF0               	goto	l9785
  6176                           
  6177                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6178  1EE6  01A2               	clrf	_getSw_KeyStatus$6243
  6179  1EE7  0AA2               	incf	_getSw_KeyStatus$6243,f
  6180  1EE8  1C0C               	btfss	12,0	;volatile
  6181  1EE9  188D               	btfsc	13,1	;volatile
  6182  1EEA  2EEC               	goto	l9783
  6183  1EEB  01A2               	clrf	_getSw_KeyStatus$6243
  6184  1EEC                     l9783:	
  6185  1EEC  0822               	movf	_getSw_KeyStatus$6243,w
  6186  1EED                     L2:	
  6187  1EED  00A0               	movwf	??_getSw_KeyStatus
  6188  1EEE  0820               	movf	??_getSw_KeyStatus,w
  6189  1EEF  00A3               	movwf	getSw_KeyStatus@status
  6190  1EF0                     l9785:	
  6191                           
  6192                           ;Switch_B1.c: 239: }
  6193                           ;Switch_B1.c: 246: return status;
  6194  1EF0  0823               	movf	getSw_KeyStatus@status,w
  6195  1EF1  0008               	return
  6196  1EF2                     __end_of_getSw_KeyStatus:	
  6197                           
  6198                           	psect	text17
  6199  1D61                     __ptext17:	
  6200 ;; *************** function _SwPointSelect *****************
  6201 ;; Defined at:
  6202 ;;		line 25 in file "../src/Switch_B1.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  sw              1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  sw              1    1[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        2 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    5
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_setSw_Main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _SwPointSelect
  6232  1D61                     _SwPointSelect:	
  6233                           
  6234                           ;incstack = 0
  6235                           ; Regs used in _SwPointSelect: [wreg]
  6236                           ;SwPointSelect@sw stored from wreg
  6237  1D61  0020               	movlb	0	; select bank0
  6238  1D62  00A1               	movwf	SwPointSelect@sw
  6239                           
  6240                           ;Switch_B1.c: 28: if (sw == 1) {
  6241  1D63  0821               	movf	SwPointSelect@sw,w
  6242  1D64  3A01               	xorlw	1
  6243  1D65  1D03               	skipz
  6244  1D66  2D6C               	goto	l9759
  6245                           
  6246                           ;Switch_B1.c: 29: Sw = &Sw1;
  6247  1D67  30CF               	movlw	_Sw1& (0+255)
  6248  1D68  00A0               	movwf	??_SwPointSelect
  6249  1D69  0820               	movf	??_SwPointSelect,w
  6250  1D6A  00F7               	movwf	_Sw
  6251                           
  6252                           ;Switch_B1.c: 30: }
  6253  1D6B  0008               	return
  6254  1D6C                     l9759:	
  6255                           
  6256                           ;Switch_B1.c: 33: else if (sw == 2) {
  6257  1D6C  0821               	movf	SwPointSelect@sw,w
  6258  1D6D  3A02               	xorlw	2
  6259  1D6E  1D03               	skipz
  6260  1D6F  0008               	return
  6261                           
  6262                           ;Switch_B1.c: 34: Sw = &Sw2;
  6263  1D70  30D8               	movlw	_Sw2& (0+255)
  6264  1D71  00A0               	movwf	??_SwPointSelect
  6265  1D72  0820               	movf	??_SwPointSelect,w
  6266  1D73  00F7               	movwf	_Sw
  6267  1D74  0008               	return
  6268  1D75                     __end_of_SwPointSelect:	
  6269                           
  6270                           	psect	text18
  6271  1BEA                     __ptext18:	
  6272 ;; *************** function _Switch_Initialization *****************
  6273 ;; Defined at:
  6274 ;;		line 46 in file "../src/Switch_B1.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;		None
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;		None
  6279 ;; Return value:  Size  Location     Type
  6280 ;;		None               void
  6281 ;; Registers used:
  6282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;Total ram usage:        0 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    8
  6295 ;; This function calls:
  6296 ;;		_TouchPower
  6297 ;;		_setSw_Initialization
  6298 ;; This function is called by:
  6299 ;;		_main
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           
  6304                           ;psect for function _Switch_Initialization
  6305  1BEA                     _Switch_Initialization:	
  6306                           
  6307                           ;Switch_B1.c: 47: TouchPower();
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6311  1BEA  319D  25C8  319B   	fcall	_TouchPower
  6312                           
  6313                           ;Switch_B1.c: 49: WPUB1 = 0;
  6314  1BED  0024               	movlb	4	; select bank4
  6315  1BEE  108D               	bcf	13,1	;volatile
  6316                           
  6317                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6318  1BEF  3001               	movlw	1
  6319  1BF0  319B  235A  319B   	fcall	_setSw_Initialization
  6320                           
  6321                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6322  1BF3  3002               	movlw	2
  6323  1BF4  319B  235A         	fcall	_setSw_Initialization
  6324  1BF6  0008               	return
  6325  1BF7                     __end_of_Switch_Initialization:	
  6326                           
  6327                           	psect	text19
  6328  1B5A                     __ptext19:	
  6329 ;; *************** function _setSw_Initialization *****************
  6330 ;; Defined at:
  6331 ;;		line 93 in file "../src/Switch_B1.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  sw              1    wreg     unsigned char 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;  sw              1    4[BANK0 ] unsigned char 
  6336 ;; Return value:  Size  Location     Type
  6337 ;;		None               void
  6338 ;; Registers used:
  6339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;Total ram usage:        1 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    7
  6352 ;; This function calls:
  6353 ;;		_setLED
  6354 ;; This function is called by:
  6355 ;;		_Switch_Initialization
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function _setSw_Initialization
  6361  1B5A                     _setSw_Initialization:	
  6362                           
  6363                           ;incstack = 0
  6364                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6365                           ;setSw_Initialization@sw stored from wreg
  6366  1B5A  0020               	movlb	0	; select bank0
  6367  1B5B  00A4               	movwf	setSw_Initialization@sw
  6368                           
  6369                           ;Switch_B1.c: 94: setLED(sw, 1);
  6370  1B5C  01A2               	clrf	setLED@command
  6371  1B5D  0AA2               	incf	setLED@command,f
  6372  1B5E  0824               	movf	setSw_Initialization@sw,w
  6373  1B5F  3196  264F         	fcall	_setLED
  6374  1B61  0008               	return
  6375  1B62                     __end_of_setSw_Initialization:	
  6376                           
  6377                           	psect	text20
  6378  1DC8                     __ptext20:	
  6379 ;; *************** function _TouchPower *****************
  6380 ;; Defined at:
  6381 ;;		line 10 in file "../src/Switch_B1.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;		None
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;		None
  6386 ;; Return value:  Size  Location     Type
  6387 ;;		None               void
  6388 ;; Registers used:
  6389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6390 ;; Tracked objects:
  6391 ;;		On entry : 0/0
  6392 ;;		On exit  : 0/0
  6393 ;;		Unchanged: 0/0
  6394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;Total ram usage:        0 bytes
  6400 ;; Hardware stack levels used:    1
  6401 ;; Hardware stack levels required when called:    6
  6402 ;; This function calls:
  6403 ;;		_Timeout_Counter
  6404 ;;		_set_TimeoutCleared
  6405 ;; This function is called by:
  6406 ;;		_Switch_Initialization
  6407 ;;		_Switch_Main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _TouchPower
  6413  1DC8                     _TouchPower:	
  6414                           
  6415                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6416                           
  6417                           ;incstack = 0
  6418                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6419  1DC8  0021               	movlb	1	; select bank1
  6420  1DC9  1C20               	btfss	_myMain^(0+128),0
  6421  1DCA  0008               	return
  6422                           
  6423                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6424  1DCB  0020               	movlb	0	; select bank0
  6425  1DCC  1A8E               	btfsc	14,5	;volatile
  6426  1DCD  0008               	return
  6427  1DCE  2DD4               	goto	l10245
  6428  1DCF                     l2640:	
  6429                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6430                           
  6431                           
  6432                           ;Switch_B1.c: 14: RC5 = 1;
  6433  1DCF  0020               	movlb	0	; select bank0
  6434  1DD0  168E               	bsf	14,5	;volatile
  6435                           
  6436                           ;Switch_B1.c: 15: Timeout_Counter();
  6437  1DD1  319D  259E  319D   	fcall	_Timeout_Counter
  6438  1DD4                     l10245:	
  6439  1DD4  0020               	movlb	0	; select bank0
  6440  1DD5  1A8E               	btfsc	14,5	;volatile
  6441  1DD6  2DDA               	goto	l10249
  6442  1DD7  0021               	movlb	1	; select bank1
  6443  1DD8  1D2B               	btfss	(_myMain^(0+128)+11),2
  6444  1DD9  2DCF               	goto	l2640
  6445  1DDA                     l10249:	
  6446                           
  6447                           ;Switch_B1.c: 16: }
  6448                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6449  1DDA  319B  230C         	fcall	_set_TimeoutCleared
  6450  1DDC  0008               	return
  6451  1DDD                     __end_of_TouchPower:	
  6452                           
  6453                           	psect	text21
  6454  1AF3                     __ptext21:	
  6455 ;; *************** function _RF_Main *****************
  6456 ;; Defined at:
  6457 ;;		line 16 in file "../src/RF_Control_B1.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:   14
  6478 ;; This function calls:
  6479 ;;		_setRF_Main
  6480 ;; This function is called by:
  6481 ;;		_main
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           
  6486                           ;psect for function _RF_Main
  6487  1AF3                     _RF_Main:	
  6488                           
  6489                           ;RF_Control_B1.c: 18: setRF_Main();
  6490                           
  6491                           ;incstack = 0
  6492                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6493  1AF3  318C  248C         	fcall	_setRF_Main
  6494  1AF5  0008               	return
  6495  1AF6                     __end_of_RF_Main:	
  6496                           
  6497                           	psect	text22
  6498  0C8C                     __ptext22:	
  6499 ;; *************** function _setRF_Main *****************
  6500 ;; Defined at:
  6501 ;;		line 52 in file "../src/RF_Control_B1.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;		None
  6504 ;; Auto vars:     Size  Location     Type
  6505 ;;  error           1    7[BANK1 ] unsigned char 
  6506 ;;  Receive_OK      1    6[BANK1 ] unsigned char 
  6507 ;;  loop_f          1    5[BANK1 ] unsigned char 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;		None               void
  6510 ;; Registers used:
  6511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6518 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;Total ram usage:        3 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:   13
  6524 ;; This function calls:
  6525 ;;		_CC2500_RxData
  6526 ;;		_CC2500_TxData
  6527 ;;		_CC2500_WriteCommand
  6528 ;;		_RF_RxDisable
  6529 ;;		_getBuz_GO
  6530 ;;		_getMain_All_Error_Status
  6531 ;;		_getRF_KeyStatus
  6532 ;;		_getRxData
  6533 ;; This function is called by:
  6534 ;;		_RF_Main
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _setRF_Main
  6540  0C8C                     _setRF_Main:	
  6541                           
  6542                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6546  0C8C  0021               	movlb	1	; select bank1
  6547  0C8D  01ED               	clrf	setRF_Main@loop_f^(0+128)
  6548  0C8E  01EE               	clrf	setRF_Main@Receive_OK^(0+128)
  6549  0C8F  01EF               	clrf	setRF_Main@error^(0+128)
  6550                           
  6551                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6552  0C90  1C3A               	btfss	_RF1^(0+128),0
  6553  0C91  2D04               	goto	l2249
  6554                           
  6555                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6556  0C92  319C  2436  318C   	fcall	_getBuz_GO
  6557  0C95  0020               	movlb	0	; select bank0
  6558  0C96  0821               	movf	?_getBuz_GO+1,w
  6559  0C97  0420               	iorwf	?_getBuz_GO,w
  6560  0C98  1D03               	skipz
  6561  0C99  0008               	return
  6562                           
  6563                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6564  0C9A  3000               	movlw	0
  6565  0C9B  3191  21D3  318C   	fcall	_getMain_All_Error_Status
  6566  0C9E  3800               	iorlw	0
  6567  0C9F  1D03               	skipz
  6568  0CA0  2CB1               	goto	l10189
  6569                           
  6570                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6571  0CA1  319C  2447  318C   	fcall	_getRF_KeyStatus
  6572  0CA4  3A01               	xorlw	1
  6573  0CA5  1D03               	skipz
  6574  0CA6  2CB1               	goto	l10189
  6575  0CA7  0021               	movlb	1	; select bank1
  6576  0CA8  1B3A               	btfsc	_RF1^(0+128),6
  6577  0CA9  2CB1               	goto	l10189
  6578                           
  6579                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6580  0CAA  01BC               	clrf	(_RF1^(0+128)+2)
  6581  0CAB  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6582                           
  6583                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6584  0CAC  14BB               	bsf	(_RF1^(0+128)+1),1
  6585                           
  6586                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6587  0CAD  3005               	movlw	5
  6588  0CAE  00C1               	movwf	(_RF1^(0+128)+7)
  6589  0CAF  3000               	movlw	0
  6590  0CB0  00C2               	movwf	(_RF1^(0+128)+8)
  6591  0CB1                     l10189:	
  6592                           
  6593                           ;RF_Control_B1.c: 74: }
  6594                           ;RF_Control_B1.c: 84: }
  6595                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6596  0CB1  0021               	movlb	1	; select bank1
  6597  0CB2  1B3A               	btfsc	_RF1^(0+128),6
  6598  0CB3  2CCA               	goto	l2253
  6599                           
  6600                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6601  0CB4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6602  0CB5  2CD0               	goto	l10205
  6603                           
  6604                           ;RF_Control_B1.c: 88: RF1.Count++;
  6605  0CB6  3001               	movlw	1
  6606  0CB7  07BC               	addwf	(_RF1^(0+128)+2),f
  6607  0CB8  3000               	movlw	0
  6608  0CB9  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6609                           
  6610                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6611  0CBA  3002               	movlw	2
  6612  0CBB  3EBA               	addlw	_RF1& (0+255)
  6613  0CBC  0086               	movwf	6
  6614  0CBD  0187               	clrf	7
  6615  0CBE  3F40               	moviw [0]fsr1
  6616  0CBF  0641               	xorwf	(_RF1^(0+128)+7),w
  6617  0CC0  1D03               	skipz
  6618  0CC1  2CC4               	goto	u11585
  6619  0CC2  3F41               	moviw [1]fsr1
  6620  0CC3  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6621  0CC4                     u11585:	
  6622  0CC4  1D03               	skipz
  6623  0CC5  2CD0               	goto	l10205
  6624                           
  6625                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6626  0CC6  01BC               	clrf	(_RF1^(0+128)+2)
  6627  0CC7  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6628                           
  6629                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6630  0CC8  10BB               	bcf	(_RF1^(0+128)+1),1
  6631                           
  6632                           ;RF_Control_B1.c: 92: }
  6633                           ;RF_Control_B1.c: 93: }
  6634                           ;RF_Control_B1.c: 94: } else {
  6635  0CC9  2CD0               	goto	l10205
  6636  0CCA                     l2253:	
  6637                           
  6638                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6639  0CCA  113A               	bcf	_RF1^(0+128),2
  6640                           
  6641                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6642  0CCB  1CBB               	btfss	(_RF1^(0+128)+1),1
  6643  0CCC  2CD0               	goto	l10205
  6644                           
  6645                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6646  0CCD  10BB               	bcf	(_RF1^(0+128)+1),1
  6647                           
  6648                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6649  0CCE  01BC               	clrf	(_RF1^(0+128)+2)
  6650  0CCF  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6651  0CD0                     l10205:	
  6652                           
  6653                           ;RF_Control_B1.c: 99: }
  6654                           ;RF_Control_B1.c: 100: }
  6655                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6656  0CD0  18BB               	btfsc	(_RF1^(0+128)+1),1
  6657  0CD1  0008               	return
  6658                           
  6659                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6660  0CD2  1D3A               	btfss	_RF1^(0+128),2
  6661  0CD3  2CE0               	goto	l2259
  6662                           
  6663                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6664  0CD4  113A               	bcf	_RF1^(0+128),2
  6665                           
  6666                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6667  0CD5  14BB               	bsf	(_RF1^(0+128)+1),1
  6668                           
  6669                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6670  0CD6  3005               	movlw	5
  6671  0CD7  00C1               	movwf	(_RF1^(0+128)+7)
  6672  0CD8  3000               	movlw	0
  6673  0CD9  00C2               	movwf	(_RF1^(0+128)+8)
  6674                           
  6675                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6676  0CDA  319C  24D8  318C   	fcall	_RF_RxDisable
  6677                           
  6678                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6679  0CDD  318A  220E         	fcall	_CC2500_TxData
  6680                           
  6681                           ;RF_Control_B1.c: 110: } else {
  6682  0CDF  0008               	return
  6683  0CE0                     l2259:	
  6684                           
  6685                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6686  0CE0  1DBA               	btfss	_RF1^(0+128),3
  6687  0CE1  2CF5               	goto	l2261
  6688                           
  6689                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6690  0CE2  1FBA               	btfss	_RF1^(0+128),7
  6691  0CE3  2CE6               	goto	l10221
  6692  0CE4  1F3A               	btfss	_RF1^(0+128),6
  6693  0CE5  0008               	return
  6694  0CE6                     l10221:	
  6695                           
  6696                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6697  0CE6  318B  23A3  318C   	fcall	_CC2500_RxData
  6698                           
  6699                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6700  0CE9  0021               	movlb	1	; select bank1
  6701  0CEA  1CBA               	btfss	_RF1^(0+128),1
  6702  0CEB  0008               	return
  6703                           
  6704                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6705  0CEC  10BA               	bcf	_RF1^(0+128),1
  6706                           
  6707                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6708  0CED  14BB               	bsf	(_RF1^(0+128)+1),1
  6709                           
  6710                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6711  0CEE  3005               	movlw	5
  6712  0CEF  00C1               	movwf	(_RF1^(0+128)+7)
  6713  0CF0  3000               	movlw	0
  6714  0CF1  00C2               	movwf	(_RF1^(0+128)+8)
  6715                           
  6716                           ;RF_Control_B1.c: 127: getRxData();
  6717  0CF2  318C  2412         	fcall	_getRxData
  6718                           
  6719                           ;RF_Control_B1.c: 129: }
  6720                           ;RF_Control_B1.c: 130: }
  6721                           ;RF_Control_B1.c: 131: } else {
  6722  0CF4  0008               	return
  6723  0CF5                     l2261:	
  6724                           
  6725                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6726  0CF5  18BA               	btfsc	_RF1^(0+128),1
  6727  0CF6  0008               	return
  6728                           
  6729                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6730  0CF7  15BA               	bsf	_RF1^(0+128),3
  6731                           
  6732                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6733  0CF8  3036               	movlw	54
  6734  0CF9  319E  260E  318C   	fcall	_CC2500_WriteCommand
  6735                           
  6736                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6737  0CFC  303A               	movlw	58
  6738  0CFD  319E  260E  318C   	fcall	_CC2500_WriteCommand
  6739                           
  6740                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6741  0D00  3034               	movlw	52
  6742  0D01  319E  260E         	fcall	_CC2500_WriteCommand
  6743                           
  6744                           ;RF_Control_B1.c: 140: }
  6745                           ;RF_Control_B1.c: 142: }
  6746                           ;RF_Control_B1.c: 143: }
  6747                           ;RF_Control_B1.c: 144: }
  6748                           ;RF_Control_B1.c: 145: }
  6749                           ;RF_Control_B1.c: 146: } else {
  6750  0D03  0008               	return
  6751  0D04                     l2249:	
  6752                           
  6753                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6754  0D04  1C20               	btfss	_myMain^(0+128),0
  6755  0D05  0008               	return
  6756                           
  6757                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6758  0D06  143A               	bsf	_RF1^(0+128),0
  6759  0D07  0008               	return
  6760  0D08                     __end_of_setRF_Main:	
  6761                           
  6762                           	psect	text23
  6763  0C12                     __ptext23:	
  6764 ;; *************** function _getRxData *****************
  6765 ;; Defined at:
  6766 ;;		line 240 in file "../src/RF_Control_B1.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;  error           1    4[BANK1 ] unsigned char 
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6775 ;; Tracked objects:
  6776 ;;		On entry : 0/0
  6777 ;;		On exit  : 0/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        2 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:   12
  6787 ;; This function calls:
  6788 ;;		_getMain_All_Error_Status
  6789 ;;		_setControl_Lights_Table
  6790 ;;		_setLog_Code
  6791 ;;		_setTxData
  6792 ;; This function is called by:
  6793 ;;		_setRF_Main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _getRxData
  6799  0C12                     _getRxData:	
  6800                           
  6801                           ;RF_Control_B1.c: 241: char error = getMain_All_Error_Status(0);
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6805  0C12  3000               	movlw	0
  6806  0C13  3191  21D3  318C   	fcall	_getMain_All_Error_Status
  6807  0C16  0020               	movlb	0	; select bank0
  6808  0C17  00EE               	movwf	??_getRxData
  6809  0C18  086E               	movf	??_getRxData,w
  6810  0C19  0021               	movlb	1	; select bank1
  6811  0C1A  00EC               	movwf	getRxData@error^(0+128)
  6812                           
  6813                           ;RF_Control_B1.c: 242: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6814  0C1B  0023               	movlb	3	; select bank3
  6815  0C1C  0820               	movf	_RF_Data^(0+384),w
  6816  0C1D  3AAA               	xorlw	170
  6817  0C1E  1D03               	skipz
  6818  0C1F  2C31               	goto	l9713
  6819  0C20  0821               	movf	(_RF_Data^(0+384)+1),w
  6820  0C21  3A01               	xorlw	1
  6821  0C22  1D03               	skipz
  6822  0C23  2C31               	goto	l9713
  6823                           
  6824                           ;RF_Control_B1.c: 244: product->Data[2] = 0x55;
  6825  0C24  3055               	movlw	85
  6826  0C25  0020               	movlb	0	; select bank0
  6827  0C26  00EE               	movwf	??_getRxData
  6828  0C27  0879               	movf	_product,w
  6829  0C28  3E02               	addlw	2
  6830  0C29  0086               	movwf	6
  6831  0C2A  3002               	movlw	2	; select bank4/5
  6832  0C2B  0087               	movwf	7
  6833  0C2C  086E               	movf	??_getRxData,w
  6834  0C2D  0081               	movwf	1
  6835                           
  6836                           ;RF_Control_B1.c: 245: setTxData();
  6837  0C2E  318E  2610         	fcall	_setTxData
  6838                           
  6839                           ;RF_Control_B1.c: 251: } else {
  6840  0C30  0008               	return
  6841  0C31                     l9713:	
  6842                           
  6843                           ;RF_Control_B1.c: 253: if (error == 0) {
  6844  0C31  0021               	movlb	1	; select bank1
  6845  0C32  08EC               	movf	getRxData@error^(0+128),f
  6846  0C33  1D03               	skipz
  6847  0C34  0008               	return
  6848                           
  6849                           ;RF_Control_B1.c: 254: if (RF1.Learn == 1) {
  6850  0C35  1F3A               	btfss	_RF1^(0+128),6
  6851  0C36  2C42               	goto	l9723
  6852                           
  6853                           ;RF_Control_B1.c: 255: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6854  0C37  0023               	movlb	3	; select bank3
  6855  0C38  08A0               	movf	_RF_Data^(0+384),f
  6856  0C39  1D03               	skipz
  6857  0C3A  0008               	return
  6858  0C3B  0821               	movf	(_RF_Data^(0+384)+1),w
  6859  0C3C  3A64               	xorlw	100
  6860  0C3D  1D03               	skipz
  6861  0C3E  0008               	return
  6862                           
  6863                           ;RF_Control_B1.c: 256: setLog_Code();
  6864  0C3F  3187  27CB         	fcall	_setLog_Code
  6865                           
  6866                           ;RF_Control_B1.c: 257: }
  6867                           ;RF_Control_B1.c: 258: } else {
  6868  0C41  0008               	return
  6869  0C42                     l9723:	
  6870                           
  6871                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6872  0C42  0023               	movlb	3	; select bank3
  6873  0C43  08A0               	movf	_RF_Data^(0+384),f
  6874  0C44  1D03               	skipz
  6875  0C45  2C77               	goto	l9743
  6876  0C46  0821               	movf	(_RF_Data^(0+384)+1),w
  6877  0C47  3A02               	xorlw	2
  6878  0C48  1D03               	skipz
  6879  0C49  2C77               	goto	l9743
  6880                           
  6881                           ;RF_Control_B1.c: 261: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6882  0C4A  082C               	movf	(_RF_Data^(0+384)+12),w
  6883  0C4B  3AFF               	xorlw	255
  6884  0C4C  1D03               	skipz
  6885  0C4D  2C58               	goto	l9735
  6886  0C4E  082D               	movf	(_RF_Data^(0+384)+13),w
  6887  0C4F  3AFF               	xorlw	255
  6888  0C50  1D03               	skipz
  6889  0C51  2C58               	goto	l9735
  6890  0C52  082E               	movf	(_RF_Data^(0+384)+14),w
  6891  0C53  3AFF               	xorlw	255
  6892  0C54  1D03               	skipz
  6893  0C55  2C58               	goto	l9735
  6894                           
  6895                           ;RF_Control_B1.c: 262: __nop();
  6896  0C56  0000               	nop
  6897                           
  6898                           ;RF_Control_B1.c: 263: } else {
  6899  0C57  0008               	return
  6900  0C58                     l9735:	
  6901                           
  6902                           ;RF_Control_B1.c: 264: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6903  0C58  0879               	movf	_product,w
  6904  0C59  3E0C               	addlw	12
  6905  0C5A  0086               	movwf	6
  6906  0C5B  3002               	movlw	2	; select bank4/5
  6907  0C5C  0087               	movwf	7
  6908  0C5D  0023               	movlb	3	; select bank3
  6909  0C5E  082C               	movf	(_RF_Data^(0+384)+12),w
  6910  0C5F  0601               	xorwf	1,w
  6911  0C60  1D03               	skipz
  6912  0C61  0008               	return
  6913  0C62  0879               	movf	_product,w
  6914  0C63  3E0D               	addlw	13
  6915  0C64  0086               	movwf	6
  6916  0C65  3002               	movlw	2	; select bank4/5
  6917  0C66  0087               	movwf	7
  6918  0C67  082D               	movf	(_RF_Data^(0+384)+13),w
  6919  0C68  0601               	xorwf	1,w
  6920  0C69  1D03               	skipz
  6921  0C6A  0008               	return
  6922  0C6B  0879               	movf	_product,w
  6923  0C6C  3E0E               	addlw	14
  6924  0C6D  0086               	movwf	6
  6925  0C6E  3002               	movlw	2	; select bank4/5
  6926  0C6F  0087               	movwf	7
  6927  0C70  082E               	movf	(_RF_Data^(0+384)+14),w
  6928  0C71  0601               	xorwf	1,w
  6929  0C72  1D03               	skipz
  6930  0C73  0008               	return
  6931                           
  6932                           ;RF_Control_B1.c: 265: setControl_Lights_Table();
  6933  0C74  318B  233C         	fcall	_setControl_Lights_Table
  6934                           
  6935                           ;RF_Control_B1.c: 266: }
  6936                           ;RF_Control_B1.c: 267: }
  6937                           ;RF_Control_B1.c: 268: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6938  0C76  0008               	return
  6939  0C77                     l9743:	
  6940  0C77  0023               	movlb	3	; select bank3
  6941  0C78  0820               	movf	_RF_Data^(0+384),w
  6942  0C79  3AFF               	xorlw	255
  6943  0C7A  1D03               	skipz
  6944  0C7B  2C82               	goto	l9749
  6945  0C7C  0821               	movf	(_RF_Data^(0+384)+1),w
  6946  0C7D  3A02               	xorlw	2
  6947  0C7E  1D03               	skipz
  6948  0C7F  2C82               	goto	l9749
  6949                           
  6950                           ;RF_Control_B1.c: 269: __nop();
  6951  0C80  0000               	nop
  6952                           
  6953                           ;RF_Control_B1.c: 270: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6954  0C81  0008               	return
  6955  0C82                     l9749:	
  6956  0C82  0023               	movlb	3	; select bank3
  6957  0C83  08A0               	movf	_RF_Data^(0+384),f
  6958  0C84  1D03               	skipz
  6959  0C85  0008               	return
  6960  0C86  0821               	movf	(_RF_Data^(0+384)+1),w
  6961  0C87  3A65               	xorlw	101
  6962  0C88  1D03               	skipz
  6963  0C89  0008               	return
  6964                           
  6965                           ;RF_Control_B1.c: 271: __nop();
  6966  0C8A  0000               	nop
  6967                           
  6968                           ;RF_Control_B1.c: 278: ;
  6969                           
  6970                           ;RF_Control_B1.c: 272: }
  6971                           ;RF_Control_B1.c: 276: }
  6972                           ;RF_Control_B1.c: 277: } else {
  6973  0C8B  0008               	return
  6974  0C8C                     __end_of_getRxData:	
  6975                           
  6976                           	psect	text24
  6977  07CB                     __ptext24:	
  6978 ;; *************** function _setLog_Code *****************
  6979 ;; Defined at:
  6980 ;;		line 284 in file "../src/RF_Control_B1.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;Total ram usage:        1 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    7
  7001 ;; This function calls:
  7002 ;;		_setBuz
  7003 ;;		_setMemory_LoopSave
  7004 ;;		_setMemory_Modify
  7005 ;;		_setProductData
  7006 ;; This function is called by:
  7007 ;;		_getRxData
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           
  7012                           ;psect for function _setLog_Code
  7013  07CB                     _setLog_Code:	
  7014                           
  7015                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7019  07CB  0021               	movlb	1	; select bank1
  7020  07CC  133A               	bcf	_RF1^(0+128),6
  7021                           
  7022                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  7023  07CD  0023               	movlb	3	; select bank3
  7024  07CE  082C               	movf	(_RF_Data^(0+384)+12),w
  7025  07CF  0020               	movlb	0	; select bank0
  7026  07D0  00E6               	movwf	??_setLog_Code
  7027  07D1  0866               	movf	??_setLog_Code,w
  7028  07D2  00E2               	movwf	setProductData@value
  7029  07D3  300C               	movlw	12
  7030  07D4  3190  2066  3187   	fcall	_setProductData
  7031                           
  7032                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  7033  07D7  0023               	movlb	3	; select bank3
  7034  07D8  082D               	movf	(_RF_Data^(0+384)+13),w
  7035  07D9  0020               	movlb	0	; select bank0
  7036  07DA  00E6               	movwf	??_setLog_Code
  7037  07DB  0866               	movf	??_setLog_Code,w
  7038  07DC  00E2               	movwf	setProductData@value
  7039  07DD  300D               	movlw	13
  7040  07DE  3190  2066  3187   	fcall	_setProductData
  7041                           
  7042                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  7043  07E1  0023               	movlb	3	; select bank3
  7044  07E2  082E               	movf	(_RF_Data^(0+384)+14),w
  7045  07E3  0020               	movlb	0	; select bank0
  7046  07E4  00E6               	movwf	??_setLog_Code
  7047  07E5  0866               	movf	??_setLog_Code,w
  7048  07E6  00E2               	movwf	setProductData@value
  7049  07E7  300E               	movlw	14
  7050  07E8  3190  2066  3187   	fcall	_setProductData
  7051                           
  7052                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  7053  07EB  3064               	movlw	100
  7054  07EC  0020               	movlb	0	; select bank0
  7055  07ED  00A9               	movwf	setBuz@time
  7056  07EE  3000               	movlw	0
  7057  07EF  00AA               	movwf	setBuz@time+1
  7058  07F0  3001               	movlw	1
  7059  07F1  3197  274E  3187   	fcall	_setBuz
  7060                           
  7061                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  7062  07F4  0021               	movlb	1	; select bank1
  7063  07F5  1EA0               	btfss	_myMain^(0+128),5
  7064  07F6  2FFB               	goto	l2310
  7065                           
  7066                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  7067  07F7  3001               	movlw	1
  7068  07F8  319C  24FE  3187   	fcall	_setMemory_LoopSave
  7069  07FB                     l2310:	
  7070                           
  7071                           ;RF_Control_B1.c: 292: }
  7072                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  7073  07FB  3001               	movlw	1
  7074  07FC  319C  24EB         	fcall	_setMemory_Modify
  7075  07FE  0008               	return
  7076  07FF                     __end_of_setLog_Code:	
  7077                           
  7078                           	psect	text25
  7079  1CFE                     __ptext25:	
  7080 ;; *************** function _setMemory_LoopSave *****************
  7081 ;; Defined at:
  7082 ;;		line 1071 in file "../src/MCU_B1.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  command         1    wreg     unsigned char 
  7085 ;; Auto vars:     Size  Location     Type
  7086 ;;  command         1    1[BANK0 ] unsigned char 
  7087 ;; Return value:  Size  Location     Type
  7088 ;;		None               void
  7089 ;; Registers used:
  7090 ;;		wreg, status,2, status,0
  7091 ;; Tracked objects:
  7092 ;;		On entry : 0/0
  7093 ;;		On exit  : 0/0
  7094 ;;		Unchanged: 0/0
  7095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;Total ram usage:        2 bytes
  7101 ;; Hardware stack levels used:    1
  7102 ;; Hardware stack levels required when called:    5
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_setLog_Code
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           
  7111                           ;psect for function _setMemory_LoopSave
  7112  1CFE                     _setMemory_LoopSave:	
  7113                           
  7114                           ;incstack = 0
  7115                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7116                           ;setMemory_LoopSave@command stored from wreg
  7117  1CFE  0020               	movlb	0	; select bank0
  7118  1CFF  00A1               	movwf	setMemory_LoopSave@command
  7119                           
  7120                           ;MCU_B1.c: 1072: Memory.LoopSave = command == 1 ? 1 : 0;
  7121  1D00  0821               	movf	setMemory_LoopSave@command,w
  7122  1D01  3A01               	xorlw	1
  7123  1D02  3000               	movlw	0
  7124  1D03  1903               	skipnz
  7125  1D04  3001               	movlw	1
  7126  1D05  00A0               	movwf	??_setMemory_LoopSave
  7127  1D06  0DA0               	rlf	??_setMemory_LoopSave,f
  7128  1D07  0DA0               	rlf	??_setMemory_LoopSave,f
  7129  1D08  0024               	movlb	4	; select bank4
  7130  1D09  0844               	movf	(_Memory^(0+512)+36),w
  7131  1D0A  0020               	movlb	0	; select bank0
  7132  1D0B  0620               	xorwf	??_setMemory_LoopSave,w
  7133  1D0C  39FB               	andlw	-5
  7134  1D0D  0620               	xorwf	??_setMemory_LoopSave,w
  7135  1D0E  0024               	movlb	4	; select bank4
  7136  1D0F  00C4               	movwf	(_Memory^(0+512)+36)
  7137  1D10  0008               	return
  7138  1D11                     __end_of_setMemory_LoopSave:	
  7139                           
  7140                           	psect	text26
  7141  0B3C                     __ptext26:	
  7142 ;; *************** function _setControl_Lights_Table *****************
  7143 ;; Defined at:
  7144 ;;		line 297 in file "../src/RF_Control_B1.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;		None
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;		None
  7149 ;; Return value:  Size  Location     Type
  7150 ;;		None               void
  7151 ;; Registers used:
  7152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;Total ram usage:        0 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:   11
  7165 ;; This function calls:
  7166 ;;		_setBuz
  7167 ;;		_setDimmerLights_ErrorClose
  7168 ;;		_setProductData
  7169 ;;		_setRFSW_AdjControl
  7170 ;;		_setRFSW_Control
  7171 ;;		_setTxData
  7172 ;; This function is called by:
  7173 ;;		_getRxData
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           
  7178                           ;psect for function _setControl_Lights_Table
  7179  0B3C                     _setControl_Lights_Table:	
  7180                           
  7181                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7182                           
  7183                           ;incstack = 0
  7184                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7185  0B3C  2B87               	goto	l9403
  7186  0B3D                     l9387:	
  7187                           ;RF_Control_B1.c: 299: case 0x00:
  7188                           
  7189                           
  7190                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7191  0B3D  30FF               	movlw	255
  7192  0B3E  3189  21AC  318B   	fcall	_setDimmerLights_ErrorClose
  7193                           
  7194                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7195  0B41  0020               	movlb	0	; select bank0
  7196  0B42  01E2               	clrf	setProductData@value
  7197  0B43  3009               	movlw	9
  7198  0B44  3190  2066  318B   	fcall	_setProductData
  7199                           
  7200                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7201  0B47  0020               	movlb	0	; select bank0
  7202  0B48  01E2               	clrf	setProductData@value
  7203  0B49  300B               	movlw	11
  7204  0B4A  3190  2066  318B   	fcall	_setProductData
  7205                           
  7206                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7207  0B4D  0020               	movlb	0	; select bank0
  7208  0B4E  01E2               	clrf	setProductData@value
  7209  0B4F  300F               	movlw	15
  7210  0B50  3190  2066  318B   	fcall	_setProductData
  7211                           
  7212                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7213  0B53  0020               	movlb	0	; select bank0
  7214  0B54  01E2               	clrf	setProductData@value
  7215  0B55  3011               	movlw	17
  7216  0B56  3190  2066  318B   	fcall	_setProductData
  7217                           
  7218                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7219  0B59  3064               	movlw	100
  7220  0B5A  0020               	movlb	0	; select bank0
  7221  0B5B  00A9               	movwf	setBuz@time
  7222  0B5C  3000               	movlw	0
  7223  0B5D  00AA               	movwf	setBuz@time+1
  7224  0B5E  3001               	movlw	1
  7225  0B5F  3197  274E         	fcall	_setBuz
  7226                           
  7227                           ;RF_Control_B1.c: 309: break;
  7228  0B61  0008               	return
  7229  0B62                     l9391:	
  7230                           ;RF_Control_B1.c: 310: case 0x20:
  7231                           
  7232                           
  7233                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7234  0B62  0020               	movlb	0	; select bank0
  7235  0B63  01E2               	clrf	setProductData@value
  7236  0B64  3009               	movlw	9
  7237  0B65  3190  2066  318B   	fcall	_setProductData
  7238                           
  7239                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7240  0B68  0020               	movlb	0	; select bank0
  7241  0B69  01E2               	clrf	setProductData@value
  7242  0B6A  300B               	movlw	11
  7243  0B6B  3190  2066  318B   	fcall	_setProductData
  7244                           
  7245                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7246  0B6E  0020               	movlb	0	; select bank0
  7247  0B6F  01E2               	clrf	setProductData@value
  7248  0B70  3011               	movlw	17
  7249  0B71  3190  2066  318B   	fcall	_setProductData
  7250                           
  7251                           ;RF_Control_B1.c: 314: setTxData();
  7252  0B74  318E  2610         	fcall	_setTxData
  7253                           
  7254                           ;RF_Control_B1.c: 315: break;
  7255  0B76  0008               	return
  7256  0B77                     l9393:	
  7257                           ;RF_Control_B1.c: 316: case 0x01:
  7258                           
  7259                           
  7260                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7261  0B77  3001               	movlw	1
  7262  0B78  3195  250B         	fcall	_setRFSW_Control
  7263                           
  7264                           ;RF_Control_B1.c: 320: break;
  7265  0B7A  0008               	return
  7266  0B7B                     l9395:	
  7267                           ;RF_Control_B1.c: 321: case 0x02:
  7268                           
  7269                           
  7270                           ;RF_Control_B1.c: 323: setRFSW_Control(2);
  7271  0B7B  3002               	movlw	2
  7272  0B7C  3195  250B         	fcall	_setRFSW_Control
  7273                           
  7274                           ;RF_Control_B1.c: 330: break;
  7275                           
  7276                           ;RF_Control_B1.c: 326: case 0x03:
  7277                           
  7278                           ;RF_Control_B1.c: 325: break;
  7279  0B7E  0008               	return
  7280  0B7F                     l9397:	
  7281                           ;RF_Control_B1.c: 331: case 0x11:
  7282                           
  7283                           
  7284                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7285  0B7F  3001               	movlw	1
  7286  0B80  3193  2323         	fcall	_setRFSW_AdjControl
  7287                           
  7288                           ;RF_Control_B1.c: 337: break;
  7289  0B82  0008               	return
  7290  0B83                     l9399:	
  7291                           ;RF_Control_B1.c: 338: case 0x21:
  7292                           
  7293                           
  7294                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(2);
  7295  0B83  3002               	movlw	2
  7296  0B84  3193  2323         	fcall	_setRFSW_AdjControl
  7297                           
  7298                           ;RF_Control_B1.c: 352: }
  7299                           
  7300                           ;RF_Control_B1.c: 351: break;
  7301                           
  7302                           ;RF_Control_B1.c: 345: case 0x31:
  7303                           
  7304                           ;RF_Control_B1.c: 344: break;
  7305  0B86  0008               	return
  7306  0B87                     l9403:	
  7307  0B87  0023               	movlb	3	; select bank3
  7308  0B88  082F               	movf	(_RF_Data^(0+384)+15),w
  7309                           
  7310                           ; Switch size 1, requested type "space"
  7311                           ; Number of cases is 8, Range of values is 0 to 49
  7312                           ; switch strategies available:
  7313                           ; Name         Instructions Cycles
  7314                           ; simple_byte           25    13 (average)
  7315                           ; direct_byte          106     6 (fixed)
  7316                           ; jumptable            260     6 (fixed)
  7317                           ;	Chosen strategy is simple_byte
  7318  0B89  3A00               	xorlw	0	; case 0
  7319  0B8A  1903               	skipnz
  7320  0B8B  2B3D               	goto	l9387
  7321  0B8C  3A01               	xorlw	1	; case 1
  7322  0B8D  1903               	skipnz
  7323  0B8E  2B77               	goto	l9393
  7324  0B8F  3A03               	xorlw	3	; case 2
  7325  0B90  1903               	skipnz
  7326  0B91  2B7B               	goto	l9395
  7327  0B92  3A01               	xorlw	1	; case 3
  7328  0B93  1903               	skipnz
  7329  0B94  2BA2               	goto	l2324
  7330  0B95  3A12               	xorlw	18	; case 17
  7331  0B96  1903               	skipnz
  7332  0B97  2B7F               	goto	l9397
  7333  0B98  3A31               	xorlw	49	; case 32
  7334  0B99  1903               	skipnz
  7335  0B9A  2B62               	goto	l9391
  7336  0B9B  3A01               	xorlw	1	; case 33
  7337  0B9C  1903               	skipnz
  7338  0B9D  2B83               	goto	l9399
  7339  0B9E  3A10               	xorlw	16	; case 49
  7340  0B9F  1903               	skipnz
  7341  0BA0  2BA2               	goto	l2324
  7342  0BA1  2BA2               	goto	l2324
  7343  0BA2                     l2324:	
  7344  0BA2  0008               	return
  7345  0BA3                     __end_of_setControl_Lights_Table:	
  7346                           
  7347                           	psect	text27
  7348  150B                     __ptext27:	
  7349 ;; *************** function _setRFSW_Control *****************
  7350 ;; Defined at:
  7351 ;;		line 379 in file "../src/RF_Control_B1.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  sw              1    wreg     unsigned char 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  sw              1   77[BANK0 ] unsigned char 
  7356 ;;  status          1   76[BANK0 ] unsigned char 
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;Total ram usage:        3 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    9
  7373 ;; This function calls:
  7374 ;;		_getDelayOff_GO
  7375 ;;		_getDimmerLights_Status
  7376 ;;		_setBuz
  7377 ;;		_setDelayOff_GO
  7378 ;;		_setDimmerLights_SwOff
  7379 ;;		_setDimmerLights_SwOn
  7380 ;;		_setRF_DimmerLights
  7381 ;;		_setTxData
  7382 ;; This function is called by:
  7383 ;;		_setControl_Lights_Table
  7384 ;; This function uses a non-reentrant model
  7385 ;;
  7386                           
  7387                           
  7388                           ;psect for function _setRFSW_Control
  7389  150B                     _setRFSW_Control:	
  7390                           
  7391                           ;incstack = 0
  7392                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7393                           ;setRFSW_Control@sw stored from wreg
  7394  150B  0020               	movlb	0	; select bank0
  7395  150C  00ED               	movwf	setRFSW_Control@sw
  7396                           
  7397                           ;RF_Control_B1.c: 380: char status = 0;
  7398  150D  01EC               	clrf	setRFSW_Control@status
  7399                           
  7400                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7401  150E  0023               	movlb	3	; select bank3
  7402  150F  0830               	movf	(_RF_Data^(0+384)+16),w
  7403  1510  3A80               	xorlw	128
  7404  1511  1D03               	skipz
  7405  1512  2D3E               	goto	l9181
  7406                           
  7407                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7408  1513  0020               	movlb	0	; select bank0
  7409  1514  01E6               	clrf	setDelayOff_GO@command
  7410  1515  0AE6               	incf	setDelayOff_GO@command,f
  7411  1516  0023               	movlb	3	; select bank3
  7412  1517  0831               	movf	(_RF_Data^(0+384)+17),w
  7413  1518  0020               	movlb	0	; select bank0
  7414  1519  00EB               	movwf	??_setRFSW_Control
  7415  151A  086B               	movf	??_setRFSW_Control,w
  7416  151B  00E7               	movwf	setDelayOff_GO@value
  7417  151C  086D               	movf	setRFSW_Control@sw,w
  7418  151D  3195  25FC  3195   	fcall	_setDelayOff_GO
  7419                           
  7420                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7421  1520  0020               	movlb	0	; select bank0
  7422  1521  086D               	movf	setRFSW_Control@sw,w
  7423  1522  319C  2425  3195   	fcall	_getDimmerLights_Status
  7424  1525  3A01               	xorlw	1
  7425  1526  1D03               	skipz
  7426  1527  2D4D               	goto	l9185
  7427                           
  7428                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7429  1528  3064               	movlw	100
  7430  1529  0020               	movlb	0	; select bank0
  7431  152A  00A9               	movwf	setBuz@time
  7432  152B  3000               	movlw	0
  7433  152C  00AA               	movwf	setBuz@time+1
  7434  152D  3001               	movlw	1
  7435  152E  3197  274E  3195   	fcall	_setBuz
  7436                           
  7437                           ;RF_Control_B1.c: 387: status = 1;
  7438  1531  0020               	movlb	0	; select bank0
  7439  1532  01EC               	clrf	setRFSW_Control@status
  7440  1533  0AEC               	incf	setRFSW_Control@status,f
  7441                           
  7442                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7443  1534  01E6               	clrf	setRF_DimmerLights@on
  7444  1535  0AE6               	incf	setRF_DimmerLights@on,f
  7445  1536  086D               	movf	setRFSW_Control@sw,w
  7446  1537  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7447                           
  7448                           ;RF_Control_B1.c: 389: setTxData();
  7449  153A  318E  2610  3195   	fcall	_setTxData
  7450                           
  7451                           ;RF_Control_B1.c: 390: }
  7452                           ;RF_Control_B1.c: 391: } else {
  7453  153D  2D4D               	goto	l9185
  7454  153E                     l9181:	
  7455                           
  7456                           ;RF_Control_B1.c: 393: if (getDelayOff_GO(sw) == 1) {
  7457  153E  0020               	movlb	0	; select bank0
  7458  153F  086D               	movf	setRFSW_Control@sw,w
  7459  1540  319C  2415  3195   	fcall	_getDelayOff_GO
  7460  1543  3A01               	xorlw	1
  7461  1544  1D03               	skipz
  7462  1545  2D4D               	goto	l9185
  7463                           
  7464                           ;RF_Control_B1.c: 394: setDelayOff_GO(sw, 0, 0);
  7465  1546  0020               	movlb	0	; select bank0
  7466  1547  01E6               	clrf	setDelayOff_GO@command
  7467  1548  01E7               	clrf	setDelayOff_GO@value
  7468  1549  086D               	movf	setRFSW_Control@sw,w
  7469  154A  3195  25FC  3195   	fcall	_setDelayOff_GO
  7470  154D                     l9185:	
  7471                           
  7472                           ;RF_Control_B1.c: 395: }
  7473                           ;RF_Control_B1.c: 397: }
  7474                           ;RF_Control_B1.c: 398: if (status == 0) {
  7475  154D  0020               	movlb	0	; select bank0
  7476  154E  08EC               	movf	setRFSW_Control@status,f
  7477  154F  1D03               	skipz
  7478  1550  0008               	return
  7479                           
  7480                           ;RF_Control_B1.c: 400: setDimmerLights_SwOn(sw);
  7481  1551  086D               	movf	setRFSW_Control@sw,w
  7482  1552  3188  2092  3195   	fcall	_setDimmerLights_SwOn
  7483                           
  7484                           ;RF_Control_B1.c: 401: setDimmerLights_SwOff(sw);
  7485  1555  0020               	movlb	0	; select bank0
  7486  1556  086D               	movf	setRFSW_Control@sw,w
  7487  1557  3194  24BC         	fcall	_setDimmerLights_SwOff
  7488  1559  0008               	return
  7489  155A                     __end_of_setRFSW_Control:	
  7490                           
  7491                           	psect	text28
  7492  0892                     __ptext28:	
  7493 ;; *************** function _setDimmerLights_SwOn *****************
  7494 ;; Defined at:
  7495 ;;		line 405 in file "../src/Dimmer_B1.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  sw              1    wreg     unsigned char 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  sw              1   17[BANK0 ] unsigned char 
  7500 ;;  idle            1   16[BANK0 ] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;		None               void
  7503 ;; Registers used:
  7504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;Total ram usage:        5 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    7
  7517 ;; This function calls:
  7518 ;;		_DimmerLightsPointSelect
  7519 ;;		_setBuz
  7520 ;; This function is called by:
  7521 ;;		_setRFSW_Control
  7522 ;;		_setSw_Main
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526                           
  7527                           ;psect for function _setDimmerLights_SwOn
  7528  0892                     _setDimmerLights_SwOn:	
  7529                           
  7530                           ;incstack = 0
  7531                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7532                           ;setDimmerLights_SwOn@sw stored from wreg
  7533  0892  0020               	movlb	0	; select bank0
  7534  0893  00B1               	movwf	setDimmerLights_SwOn@sw
  7535                           
  7536                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7537  0894  0831               	movf	setDimmerLights_SwOn@sw,w
  7538  0895  319C  24B2  3188   	fcall	_DimmerLightsPointSelect
  7539                           
  7540                           ;Dimmer_B1.c: 407: char idle = 0;
  7541  0898  0020               	movlb	0	; select bank0
  7542  0899  01B0               	clrf	setDimmerLights_SwOn@idle
  7543                           
  7544                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7545  089A  08B0               	movf	setDimmerLights_SwOn@idle,f
  7546  089B  1D03               	skipz
  7547  089C  28BD               	goto	l8969
  7548                           
  7549                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7550  089D  0831               	movf	setDimmerLights_SwOn@sw,w
  7551  089E  3A01               	xorlw	1
  7552  089F  1D03               	skipz
  7553  08A0  28AC               	goto	l8959
  7554                           
  7555                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7556  08A1  01AE               	clrf	_setDimmerLights_SwOn$2310
  7557  08A2  0AAE               	incf	_setDimmerLights_SwOn$2310,f
  7558  08A3  0023               	movlb	3	; select bank3
  7559  08A4  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
  7560  08A5  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
  7561  08A6  28A9               	goto	l8957
  7562  08A7  0020               	movlb	0	; select bank0
  7563  08A8  01AE               	clrf	_setDimmerLights_SwOn$2310
  7564  08A9                     l8957:	
  7565  08A9  0020               	movlb	0	; select bank0
  7566  08AA  082E               	movf	_setDimmerLights_SwOn$2310,w
  7567  08AB  28BA               	goto	L3
  7568  08AC                     l8959:	
  7569                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7570                           
  7571  08AC  0831               	movf	setDimmerLights_SwOn@sw,w
  7572  08AD  3A02               	xorlw	2
  7573  08AE  1D03               	skipz
  7574  08AF  28BD               	goto	l8969
  7575                           
  7576                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7577  08B0  01AF               	clrf	_setDimmerLights_SwOn$2311
  7578  08B1  0AAF               	incf	_setDimmerLights_SwOn$2311,f
  7579  08B2  0022               	movlb	2	; select bank2
  7580  08B3  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
  7581  08B4  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
  7582  08B5  28B8               	goto	l8967
  7583  08B6  0020               	movlb	0	; select bank0
  7584  08B7  01AF               	clrf	_setDimmerLights_SwOn$2311
  7585  08B8                     l8967:	
  7586  08B8  0020               	movlb	0	; select bank0
  7587  08B9  082F               	movf	_setDimmerLights_SwOn$2311,w
  7588  08BA                     L3:	
  7589  08BA  00AD               	movwf	??_setDimmerLights_SwOn
  7590  08BB  082D               	movf	??_setDimmerLights_SwOn,w
  7591  08BC  00B0               	movwf	setDimmerLights_SwOn@idle
  7592  08BD                     l8969:	
  7593                           
  7594                           ;Dimmer_B1.c: 415: }
  7595                           ;Dimmer_B1.c: 416: }
  7596                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7597  08BD  08B0               	movf	setDimmerLights_SwOn@idle,f
  7598  08BE  1D03               	skipz
  7599  08BF  0008               	return
  7600                           
  7601                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7602  08C0  086F               	movf	_DimmerLights,w
  7603  08C1  3E0B               	addlw	11
  7604  08C2  0086               	movwf	6
  7605  08C3  3001               	movlw	1	; select bank2/3
  7606  08C4  0087               	movwf	7
  7607  08C5  1481               	bsf	1,1
  7608                           
  7609                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7610  08C6  086F               	movf	_DimmerLights,w
  7611  08C7  3E02               	addlw	2
  7612  08C8  0086               	movwf	6
  7613  08C9  3001               	movlw	1	; select bank2/3
  7614  08CA  0087               	movwf	7
  7615  08CB  1881               	btfsc	1,1
  7616  08CC  28E0               	goto	l8975
  7617                           
  7618                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7619  08CD  086F               	movf	_DimmerLights,w
  7620  08CE  3E02               	addlw	2
  7621  08CF  0086               	movwf	6
  7622  08D0  3001               	movlw	1	; select bank2/3
  7623  08D1  0087               	movwf	7
  7624  08D2  1481               	bsf	1,1
  7625                           
  7626                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7627  08D3  086F               	movf	_DimmerLights,w
  7628  08D4  3E0A               	addlw	10
  7629  08D5  0086               	movwf	6
  7630  08D6  3001               	movlw	1	; select bank2/3
  7631  08D7  0087               	movwf	7
  7632  08D8  1481               	bsf	1,1
  7633                           
  7634                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7635  08D9  086F               	movf	_DimmerLights,w
  7636  08DA  3E0A               	addlw	10
  7637  08DB  0086               	movwf	6
  7638  08DC  3001               	movlw	1	; select bank2/3
  7639  08DD  0087               	movwf	7
  7640  08DE  1401               	bsf	1,0
  7641                           
  7642                           ;Dimmer_B1.c: 442: } else {
  7643  08DF  28E6               	goto	l8977
  7644  08E0                     l8975:	
  7645                           
  7646                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7647  08E0  086F               	movf	_DimmerLights,w
  7648  08E1  3E02               	addlw	2
  7649  08E2  0086               	movwf	6
  7650  08E3  3001               	movlw	1	; select bank2/3
  7651  08E4  0087               	movwf	7
  7652  08E5  1081               	bcf	1,1
  7653  08E6                     l8977:	
  7654                           
  7655                           ;Dimmer_B1.c: 444: }
  7656                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7657  08E6  3064               	movlw	100
  7658  08E7  00A9               	movwf	setBuz@time
  7659  08E8  3000               	movlw	0
  7660  08E9  00AA               	movwf	setBuz@time+1
  7661  08EA  3001               	movlw	1
  7662  08EB  3197  274E         	fcall	_setBuz
  7663  08ED  0008               	return
  7664  08EE                     __end_of_setDimmerLights_SwOn:	
  7665                           
  7666                           	psect	text29
  7667  1323                     __ptext29:	
  7668 ;; *************** function _setRFSW_AdjControl *****************
  7669 ;; Defined at:
  7670 ;;		line 407 in file "../src/RF_Control_B1.c"
  7671 ;; Parameters:    Size  Location     Type
  7672 ;;  sw              1    wreg     unsigned char 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  sw              1   75[BANK0 ] unsigned char 
  7675 ;;  status          1   74[BANK0 ] unsigned char 
  7676 ;; Return value:  Size  Location     Type
  7677 ;;		None               void
  7678 ;; Registers used:
  7679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7680 ;; Tracked objects:
  7681 ;;		On entry : 0/0
  7682 ;;		On exit  : 0/0
  7683 ;;		Unchanged: 0/0
  7684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7688 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;Total ram usage:        4 bytes
  7690 ;; Hardware stack levels used:    1
  7691 ;; Hardware stack levels required when called:   10
  7692 ;; This function calls:
  7693 ;;		_getDimmerLights_Status
  7694 ;;		_setMemory_Modify
  7695 ;;		_setProductData
  7696 ;;		_setRF_DimmerValue
  7697 ;;		_setTxData
  7698 ;; This function is called by:
  7699 ;;		_setControl_Lights_Table
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function _setRFSW_AdjControl
  7705  1323                     _setRFSW_AdjControl:	
  7706                           
  7707                           ;incstack = 0
  7708                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7709                           ;setRFSW_AdjControl@sw stored from wreg
  7710  1323  0020               	movlb	0	; select bank0
  7711  1324  00EB               	movwf	setRFSW_AdjControl@sw
  7712                           
  7713                           ;RF_Control_B1.c: 408: char status = 0;
  7714  1325  01EA               	clrf	setRFSW_AdjControl@status
  7715                           
  7716                           ;RF_Control_B1.c: 410: status = getDimmerLights_Status(sw);
  7717  1326  086B               	movf	setRFSW_AdjControl@sw,w
  7718  1327  319C  2425  3193   	fcall	_getDimmerLights_Status
  7719  132A  0020               	movlb	0	; select bank0
  7720  132B  00E8               	movwf	??_setRFSW_AdjControl
  7721  132C  0868               	movf	??_setRFSW_AdjControl,w
  7722  132D  00EA               	movwf	setRFSW_AdjControl@status
  7723                           
  7724                           ;RF_Control_B1.c: 413: if (status == 1) {
  7725  132E  086A               	movf	setRFSW_AdjControl@status,w
  7726  132F  3A01               	xorlw	1
  7727  1330  1D03               	skipz
  7728  1331  2B3C               	goto	l9199
  7729                           
  7730                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7731  1332  3001               	movlw	1
  7732  1333  319C  24EB  3193   	fcall	_setMemory_Modify
  7733                           
  7734                           ;RF_Control_B1.c: 415: setRF_DimmerValue(sw);
  7735  1336  0020               	movlb	0	; select bank0
  7736  1337  086B               	movf	setRFSW_AdjControl@sw,w
  7737  1338  3191  2173  3193   	fcall	_setRF_DimmerValue
  7738                           
  7739                           ;RF_Control_B1.c: 416: } else {
  7740  133B  2B4D               	goto	l2336
  7741  133C                     l9199:	
  7742                           
  7743                           ;RF_Control_B1.c: 417: setProductData(9, product->Data[20 + sw]);
  7744  133C  0020               	movlb	0	; select bank0
  7745  133D  086B               	movf	setRFSW_AdjControl@sw,w
  7746  133E  3E14               	addlw	20
  7747  133F  0779               	addwf	_product,w
  7748  1340  00E8               	movwf	??_setRFSW_AdjControl
  7749  1341  0868               	movf	??_setRFSW_AdjControl,w
  7750  1342  0086               	movwf	6
  7751  1343  3002               	movlw	2	; select bank4/5
  7752  1344  0087               	movwf	7
  7753  1345  0801               	movf	1,w
  7754  1346  00E9               	movwf	??_setRFSW_AdjControl+1
  7755  1347  0869               	movf	??_setRFSW_AdjControl+1,w
  7756  1348  00E2               	movwf	setProductData@value
  7757  1349  3009               	movlw	9
  7758  134A  3190  2066  3193   	fcall	_setProductData
  7759  134D                     l2336:	
  7760                           
  7761                           ;RF_Control_B1.c: 418: }
  7762                           ;RF_Control_B1.c: 419: setProductData(17, product->Data[26 + sw]);
  7763  134D  0020               	movlb	0	; select bank0
  7764  134E  086B               	movf	setRFSW_AdjControl@sw,w
  7765  134F  3E1A               	addlw	26
  7766  1350  0779               	addwf	_product,w
  7767  1351  00E8               	movwf	??_setRFSW_AdjControl
  7768  1352  0868               	movf	??_setRFSW_AdjControl,w
  7769  1353  0086               	movwf	6
  7770  1354  3002               	movlw	2	; select bank4/5
  7771  1355  0087               	movwf	7
  7772  1356  0801               	movf	1,w
  7773  1357  00E9               	movwf	??_setRFSW_AdjControl+1
  7774  1358  0869               	movf	??_setRFSW_AdjControl+1,w
  7775  1359  00E2               	movwf	setProductData@value
  7776  135A  3011               	movlw	17
  7777  135B  3190  2066  3193   	fcall	_setProductData
  7778                           
  7779                           ;RF_Control_B1.c: 420: setTxData();
  7780  135E  318E  2610         	fcall	_setTxData
  7781  1360  0008               	return
  7782  1361                     __end_of_setRFSW_AdjControl:	
  7783                           
  7784                           	psect	text30
  7785  1173                     __ptext30:	
  7786 ;; *************** function _setRF_DimmerValue *****************
  7787 ;; Defined at:
  7788 ;;		line 425 in file "../src/RF_Control_B1.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;  lights          1    wreg     unsigned char 
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;  lights          1   71[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;		None               void
  7795 ;; Registers used:
  7796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;Total ram usage:        2 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    9
  7809 ;; This function calls:
  7810 ;;		_setDimmerLights_AdjRF
  7811 ;;		_setProductData
  7812 ;; This function is called by:
  7813 ;;		_setRFSW_AdjControl
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           
  7818                           ;psect for function _setRF_DimmerValue
  7819  1173                     _setRF_DimmerValue:	
  7820                           
  7821                           ;incstack = 0
  7822                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7823                           ;setRF_DimmerValue@lights stored from wreg
  7824  1173  0020               	movlb	0	; select bank0
  7825  1174  00E7               	movwf	setRF_DimmerValue@lights
  7826                           
  7827                           ;RF_Control_B1.c: 426: if (RF_Data[9] > 0x64) {
  7828  1175  3065               	movlw	101
  7829  1176  0023               	movlb	3	; select bank3
  7830  1177  0229               	subwf	(_RF_Data^(0+384)+9),w
  7831  1178  1C03               	skipc
  7832  1179  2980               	goto	l9071
  7833                           
  7834                           ;RF_Control_B1.c: 427: RF_Data[9] = 0x64;
  7835  117A  3064               	movlw	100
  7836  117B  0020               	movlb	0	; select bank0
  7837  117C  00E6               	movwf	??_setRF_DimmerValue
  7838  117D  0866               	movf	??_setRF_DimmerValue,w
  7839  117E  0023               	movlb	3	; select bank3
  7840  117F  00A9               	movwf	(_RF_Data^(0+384)+9)
  7841  1180                     l9071:	
  7842                           
  7843                           ;RF_Control_B1.c: 428: }
  7844                           ;RF_Control_B1.c: 429: setProductData(9, RF_Data[9]);
  7845  1180  0829               	movf	(_RF_Data^(0+384)+9),w
  7846  1181  0020               	movlb	0	; select bank0
  7847  1182  00E6               	movwf	??_setRF_DimmerValue
  7848  1183  0866               	movf	??_setRF_DimmerValue,w
  7849  1184  00E2               	movwf	setProductData@value
  7850  1185  3009               	movlw	9
  7851  1186  3190  2066  3191   	fcall	_setProductData
  7852                           
  7853                           ;RF_Control_B1.c: 430: setProductData(11, lights);
  7854  1189  0020               	movlb	0	; select bank0
  7855  118A  0867               	movf	setRF_DimmerValue@lights,w
  7856  118B  00E6               	movwf	??_setRF_DimmerValue
  7857  118C  0866               	movf	??_setRF_DimmerValue,w
  7858  118D  00E2               	movwf	setProductData@value
  7859  118E  300B               	movlw	11
  7860  118F  3190  2066  3191   	fcall	_setProductData
  7861                           
  7862                           ;RF_Control_B1.c: 431: setProductData((20 + lights), RF_Data[9]);
  7863  1192  0023               	movlb	3	; select bank3
  7864  1193  0829               	movf	(_RF_Data^(0+384)+9),w
  7865  1194  0020               	movlb	0	; select bank0
  7866  1195  00E6               	movwf	??_setRF_DimmerValue
  7867  1196  0866               	movf	??_setRF_DimmerValue,w
  7868  1197  00E2               	movwf	setProductData@value
  7869  1198  0867               	movf	setRF_DimmerValue@lights,w
  7870  1199  3E14               	addlw	20
  7871  119A  3190  2066  3191   	fcall	_setProductData
  7872                           
  7873                           ;RF_Control_B1.c: 432: setDimmerLights_AdjRF(lights);
  7874  119D  0020               	movlb	0	; select bank0
  7875  119E  0867               	movf	setRF_DimmerValue@lights,w
  7876  119F  319F  27B7         	fcall	_setDimmerLights_AdjRF
  7877  11A1  0008               	return
  7878  11A2                     __end_of_setRF_DimmerValue:	
  7879                           
  7880                           	psect	text31
  7881  1FB7                     __ptext31:	
  7882 ;; *************** function _setDimmerLights_AdjRF *****************
  7883 ;; Defined at:
  7884 ;;		line 903 in file "../src/Dimmer_B1.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  lights          1    wreg     unsigned char 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;  lights          1   67[BANK0 ] unsigned char 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;		None               void
  7891 ;; Registers used:
  7892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;Total ram usage:        2 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    8
  7905 ;; This function calls:
  7906 ;;		_DimmerLightsPointSelect
  7907 ;;		_getPercentValue
  7908 ;; This function is called by:
  7909 ;;		_setRF_DimmerValue
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           
  7914                           ;psect for function _setDimmerLights_AdjRF
  7915  1FB7                     _setDimmerLights_AdjRF:	
  7916                           
  7917                           ;incstack = 0
  7918                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7919                           ;setDimmerLights_AdjRF@lights stored from wreg
  7920  1FB7  0020               	movlb	0	; select bank0
  7921  1FB8  00E3               	movwf	setDimmerLights_AdjRF@lights
  7922                           
  7923                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7924  1FB9  0863               	movf	setDimmerLights_AdjRF@lights,w
  7925  1FBA  319C  24B2  319F   	fcall	_DimmerLightsPointSelect
  7926                           
  7927                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7928  1FBD  0020               	movlb	0	; select bank0
  7929  1FBE  086F               	movf	_DimmerLights,w
  7930  1FBF  3E02               	addlw	2
  7931  1FC0  0086               	movwf	6
  7932  1FC1  3001               	movlw	1	; select bank2/3
  7933  1FC2  0087               	movwf	7
  7934  1FC3  1401               	bsf	1,0
  7935                           
  7936                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7937  1FC4  0A6F               	incf	_DimmerLights,w
  7938  1FC5  0086               	movwf	6
  7939  1FC6  3001               	movlw	1	; select bank2/3
  7940  1FC7  0087               	movwf	7
  7941  1FC8  1681               	bsf	1,5
  7942                           
  7943                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7944  1FC9  0879               	movf	_product,w
  7945  1FCA  3E09               	addlw	9
  7946  1FCB  0086               	movwf	6
  7947  1FCC  3002               	movlw	2	; select bank4/5
  7948  1FCD  0087               	movwf	7
  7949  1FCE  0801               	movf	1,w
  7950  1FCF  318A  22D7         	fcall	_getPercentValue
  7951  1FD1  0020               	movlb	0	; select bank0
  7952  1FD2  00E2               	movwf	??_setDimmerLights_AdjRF
  7953  1FD3  086F               	movf	_DimmerLights,w
  7954  1FD4  3E06               	addlw	6
  7955  1FD5  0086               	movwf	6
  7956  1FD6  3001               	movlw	1	; select bank2/3
  7957  1FD7  0087               	movwf	7
  7958  1FD8  0862               	movf	??_setDimmerLights_AdjRF,w
  7959  1FD9  0081               	movwf	1
  7960  1FDA  0008               	return
  7961  1FDB                     __end_of_setDimmerLights_AdjRF:	
  7962                           
  7963                           	psect	text32
  7964  0AD7                     __ptext32:	
  7965 ;; *************** function _getPercentValue *****************
  7966 ;; Defined at:
  7967 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;  value           1    wreg     unsigned char 
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  value           1   62[BANK0 ] unsigned char 
  7972 ;;  i               3   63[BANK0 ] float 
  7973 ;; Return value:  Size  Location     Type
  7974 ;;                  1    wreg      unsigned char 
  7975 ;; Registers used:
  7976 ;;		wreg, status,2, status,0, pclath, cstack
  7977 ;; Tracked objects:
  7978 ;;		On entry : 0/0
  7979 ;;		On exit  : 0/0
  7980 ;;		Unchanged: 0/0
  7981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7985 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7986 ;;Total ram usage:        6 bytes
  7987 ;; Hardware stack levels used:    1
  7988 ;; Hardware stack levels required when called:    7
  7989 ;; This function calls:
  7990 ;;		___awtoft
  7991 ;;		___ftadd
  7992 ;;		___ftdiv
  7993 ;;		___ftmul
  7994 ;;		___ftneg
  7995 ;;		___fttol
  7996 ;; This function is called by:
  7997 ;;		_setDimmerLights_AdjRF
  7998 ;; This function uses a non-reentrant model
  7999 ;;
  8000                           
  8001                           
  8002                           ;psect for function _getPercentValue
  8003  0AD7                     _getPercentValue:	
  8004                           
  8005                           ;incstack = 0
  8006                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8007                           ;getPercentValue@value stored from wreg
  8008  0AD7  0020               	movlb	0	; select bank0
  8009  0AD8  00DE               	movwf	getPercentValue@value
  8010                           
  8011                           ;Dimmer_B1.c: 1026: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  8012  0AD9  3000               	movlw	0
  8013  0ADA  00DF               	movwf	getPercentValue@i
  8014  0ADB  3030               	movlw	48
  8015  0ADC  00E0               	movwf	getPercentValue@i+1
  8016  0ADD  3042               	movlw	66
  8017  0ADE  00E1               	movwf	getPercentValue@i+2
  8018                           
  8019                           ;Dimmer_B1.c: 1027: i /= 100;
  8020  0ADF  3000               	movlw	0
  8021  0AE0  00AE               	movwf	___ftdiv@f2
  8022  0AE1  30C8               	movlw	200
  8023  0AE2  00AF               	movwf	___ftdiv@f2+1
  8024  0AE3  3042               	movlw	66
  8025  0AE4  00B0               	movwf	___ftdiv@f2+2
  8026  0AE5  085F               	movf	getPercentValue@i,w
  8027  0AE6  00B1               	movwf	___ftdiv@f1
  8028  0AE7  0860               	movf	getPercentValue@i+1,w
  8029  0AE8  00B2               	movwf	___ftdiv@f1+1
  8030  0AE9  0861               	movf	getPercentValue@i+2,w
  8031  0AEA  00B3               	movwf	___ftdiv@f1+2
  8032  0AEB  318E  26A7  318A   	fcall	___ftdiv
  8033  0AEE  0020               	movlb	0	; select bank0
  8034  0AEF  082E               	movf	?___ftdiv,w
  8035  0AF0  00DF               	movwf	getPercentValue@i
  8036  0AF1  082F               	movf	?___ftdiv+1,w
  8037  0AF2  00E0               	movwf	getPercentValue@i+1
  8038  0AF3  0830               	movf	?___ftdiv+2,w
  8039  0AF4  00E1               	movwf	getPercentValue@i+2
  8040                           
  8041                           ;Dimmer_B1.c: 1029: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  8042  0AF5  085E               	movf	getPercentValue@value,w
  8043  0AF6  00DC               	movwf	??_getPercentValue
  8044  0AF7  01DD               	clrf	??_getPercentValue+1
  8045  0AF8  09DC               	comf	??_getPercentValue,f
  8046  0AF9  09DD               	comf	??_getPercentValue+1,f
  8047  0AFA  0ADC               	incf	??_getPercentValue,f
  8048  0AFB  1903               	skipnz
  8049  0AFC  0ADD               	incf	??_getPercentValue+1,f
  8050  0AFD  085C               	movf	??_getPercentValue,w
  8051  0AFE  3E64               	addlw	100
  8052  0AFF  00A8               	movwf	___awtoft@c
  8053  0B00  3000               	movlw	0
  8054  0B01  3D5D               	addwfc	??_getPercentValue+1,w
  8055  0B02  00A9               	movwf	___awtoft@c+1
  8056  0B03  319F  2772  318A   	fcall	___awtoft
  8057  0B06  0020               	movlb	0	; select bank0
  8058  0B07  0828               	movf	?___awtoft,w
  8059  0B08  00B1               	movwf	___ftmul@f2
  8060  0B09  0829               	movf	?___awtoft+1,w
  8061  0B0A  00B2               	movwf	___ftmul@f2+1
  8062  0B0B  082A               	movf	?___awtoft+2,w
  8063  0B0C  00B3               	movwf	___ftmul@f2+2
  8064  0B0D  085F               	movf	getPercentValue@i,w
  8065  0B0E  00AE               	movwf	___ftmul@f1
  8066  0B0F  0860               	movf	getPercentValue@i+1,w
  8067  0B10  00AF               	movwf	___ftmul@f1+1
  8068  0B11  0861               	movf	getPercentValue@i+2,w
  8069  0B12  00B0               	movwf	___ftmul@f1+2
  8070  0B13  3187  2717  318A   	fcall	___ftmul
  8071  0B16  0020               	movlb	0	; select bank0
  8072  0B17  082E               	movf	?___ftmul,w
  8073  0B18  00BE               	movwf	___ftneg@f1
  8074  0B19  082F               	movf	?___ftmul+1,w
  8075  0B1A  00BF               	movwf	___ftneg@f1+1
  8076  0B1B  0830               	movf	?___ftmul+2,w
  8077  0B1C  00C0               	movwf	___ftneg@f1+2
  8078  0B1D  319B  2362  318A   	fcall	___ftneg
  8079  0B20  0020               	movlb	0	; select bank0
  8080  0B21  083E               	movf	?___ftneg,w
  8081  0B22  00C4               	movwf	___ftadd@f2
  8082  0B23  083F               	movf	?___ftneg+1,w
  8083  0B24  00C5               	movwf	___ftadd@f2+1
  8084  0B25  0840               	movf	?___ftneg+2,w
  8085  0B26  00C6               	movwf	___ftadd@f2+2
  8086  0B27  3000               	movlw	0
  8087  0B28  00C1               	movwf	___ftadd@f1
  8088  0B29  3060               	movlw	96
  8089  0B2A  00C2               	movwf	___ftadd@f1+1
  8090  0B2B  3042               	movlw	66
  8091  0B2C  00C3               	movwf	___ftadd@f1+2
  8092  0B2D  3184  2465  318A   	fcall	___ftadd
  8093  0B30  0020               	movlb	0	; select bank0
  8094  0B31  0841               	movf	?___ftadd,w
  8095  0B32  00CE               	movwf	___fttol@f1
  8096  0B33  0842               	movf	?___ftadd+1,w
  8097  0B34  00CF               	movwf	___fttol@f1+1
  8098  0B35  0843               	movf	?___ftadd+2,w
  8099  0B36  00D0               	movwf	___fttol@f1+2
  8100  0B37  318D  2589         	fcall	___fttol
  8101  0B39  0020               	movlb	0	; select bank0
  8102  0B3A  084E               	movf	?___fttol,w
  8103  0B3B  0008               	return
  8104  0B3C                     __end_of_getPercentValue:	
  8105                           
  8106                           	psect	text33
  8107  0717                     __ptext33:	
  8108 ;; *************** function ___ftmul *****************
  8109 ;; Defined at:
  8110 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  f1              3   14[BANK0 ] float 
  8113 ;;  f2              3   17[BANK0 ] float 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8116 ;;  sign            1   29[BANK0 ] unsigned char 
  8117 ;;  cntr            1   28[BANK0 ] unsigned char 
  8118 ;;  exp             1   24[BANK0 ] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  3   14[BANK0 ] float 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0, pclath, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:       16 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    6
  8135 ;; This function calls:
  8136 ;;		___ftpack
  8137 ;; This function is called by:
  8138 ;;		_getPercentValue
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function ___ftmul
  8144  0717                     ___ftmul:	
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8148  0717  0020               	movlb	0	; select bank0
  8149  0718  082E               	movf	___ftmul@f1,w
  8150  0719  00B4               	movwf	??___ftmul
  8151  071A  082F               	movf	___ftmul@f1+1,w
  8152  071B  00B5               	movwf	??___ftmul+1
  8153  071C  0830               	movf	___ftmul@f1+2,w
  8154  071D  00B6               	movwf	??___ftmul+2
  8155  071E  1003               	clrc
  8156  071F  0D35               	rlf	??___ftmul+1,w
  8157  0720  0D36               	rlf	??___ftmul+2,w
  8158  0721  00B7               	movwf	??___ftmul+3
  8159  0722  0837               	movf	??___ftmul+3,w
  8160  0723  00B8               	movwf	___ftmul@exp
  8161  0724  08B8               	movf	___ftmul@exp,f
  8162  0725  1D03               	skipz
  8163  0726  2F2E               	goto	l8695
  8164  0727  3000               	movlw	0
  8165  0728  00AE               	movwf	?___ftmul
  8166  0729  3000               	movlw	0
  8167  072A  00AF               	movwf	?___ftmul+1
  8168  072B  3000               	movlw	0
  8169  072C  00B0               	movwf	?___ftmul+2
  8170  072D  0008               	return
  8171  072E                     l8695:	
  8172  072E  0831               	movf	___ftmul@f2,w
  8173  072F  00B4               	movwf	??___ftmul
  8174  0730  0832               	movf	___ftmul@f2+1,w
  8175  0731  00B5               	movwf	??___ftmul+1
  8176  0732  0833               	movf	___ftmul@f2+2,w
  8177  0733  00B6               	movwf	??___ftmul+2
  8178  0734  1003               	clrc
  8179  0735  0D35               	rlf	??___ftmul+1,w
  8180  0736  0D36               	rlf	??___ftmul+2,w
  8181  0737  00B7               	movwf	??___ftmul+3
  8182  0738  0837               	movf	??___ftmul+3,w
  8183  0739  00BD               	movwf	___ftmul@sign
  8184  073A  08BD               	movf	___ftmul@sign,f
  8185  073B  1D03               	skipz
  8186  073C  2F44               	goto	l8701
  8187  073D  3000               	movlw	0
  8188  073E  00AE               	movwf	?___ftmul
  8189  073F  3000               	movlw	0
  8190  0740  00AF               	movwf	?___ftmul+1
  8191  0741  3000               	movlw	0
  8192  0742  00B0               	movwf	?___ftmul+2
  8193  0743  0008               	return
  8194  0744                     l8701:	
  8195  0744  083D               	movf	___ftmul@sign,w
  8196  0745  3E7B               	addlw	123
  8197  0746  00B4               	movwf	??___ftmul
  8198  0747  0834               	movf	??___ftmul,w
  8199  0748  07B8               	addwf	___ftmul@exp,f
  8200  0749  082E               	movf	___ftmul@f1,w
  8201  074A  00B4               	movwf	??___ftmul
  8202  074B  082F               	movf	___ftmul@f1+1,w
  8203  074C  00B5               	movwf	??___ftmul+1
  8204  074D  0830               	movf	___ftmul@f1+2,w
  8205  074E  00B6               	movwf	??___ftmul+2
  8206  074F  3010               	movlw	16
  8207  0750                     u9285:	
  8208  0750  36B6               	lsrf	??___ftmul+2,f
  8209  0751  0CB5               	rrf	??___ftmul+1,f
  8210  0752  0CB4               	rrf	??___ftmul,f
  8211  0753  0B89               	decfsz	9,f
  8212  0754  2F50               	goto	u9285
  8213  0755  0834               	movf	??___ftmul,w
  8214  0756  00B7               	movwf	??___ftmul+3
  8215  0757  0837               	movf	??___ftmul+3,w
  8216  0758  00BD               	movwf	___ftmul@sign
  8217  0759  0831               	movf	___ftmul@f2,w
  8218  075A  00B4               	movwf	??___ftmul
  8219  075B  0832               	movf	___ftmul@f2+1,w
  8220  075C  00B5               	movwf	??___ftmul+1
  8221  075D  0833               	movf	___ftmul@f2+2,w
  8222  075E  00B6               	movwf	??___ftmul+2
  8223  075F  3010               	movlw	16
  8224  0760                     u9295:	
  8225  0760  36B6               	lsrf	??___ftmul+2,f
  8226  0761  0CB5               	rrf	??___ftmul+1,f
  8227  0762  0CB4               	rrf	??___ftmul,f
  8228  0763  0B89               	decfsz	9,f
  8229  0764  2F60               	goto	u9295
  8230  0765  0834               	movf	??___ftmul,w
  8231  0766  00B7               	movwf	??___ftmul+3
  8232  0767  0837               	movf	??___ftmul+3,w
  8233  0768  06BD               	xorwf	___ftmul@sign,f
  8234  0769  3080               	movlw	128
  8235  076A  00B4               	movwf	??___ftmul
  8236  076B  0834               	movf	??___ftmul,w
  8237  076C  05BD               	andwf	___ftmul@sign,f
  8238  076D  17AF               	bsf	___ftmul@f1+1,7
  8239  076E  17B2               	bsf	___ftmul@f2+1,7
  8240  076F  30FF               	movlw	255
  8241  0770  05B1               	andwf	___ftmul@f2,f
  8242  0771  30FF               	movlw	255
  8243  0772  05B2               	andwf	___ftmul@f2+1,f
  8244  0773  3000               	movlw	0
  8245  0774  05B3               	andwf	___ftmul@f2+2,f
  8246  0775  3000               	movlw	0
  8247  0776  00B9               	movwf	___ftmul@f3_as_product
  8248  0777  3000               	movlw	0
  8249  0778  00BA               	movwf	___ftmul@f3_as_product+1
  8250  0779  3000               	movlw	0
  8251  077A  00BB               	movwf	___ftmul@f3_as_product+2
  8252  077B  3007               	movlw	7
  8253  077C  00B4               	movwf	??___ftmul
  8254  077D  0834               	movf	??___ftmul,w
  8255  077E  00BC               	movwf	___ftmul@cntr
  8256  077F                     l8713:	
  8257  077F  1C2E               	btfss	___ftmul@f1,0
  8258  0780  2F87               	goto	l8717
  8259  0781  0831               	movf	___ftmul@f2,w
  8260  0782  07B9               	addwf	___ftmul@f3_as_product,f
  8261  0783  0832               	movf	___ftmul@f2+1,w
  8262  0784  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8263  0785  0833               	movf	___ftmul@f2+2,w
  8264  0786  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8265  0787                     l8717:	
  8266  0787  3001               	movlw	1
  8267  0788                     u9315:	
  8268  0788  36B0               	lsrf	___ftmul@f1+2,f
  8269  0789  0CAF               	rrf	___ftmul@f1+1,f
  8270  078A  0CAE               	rrf	___ftmul@f1,f
  8271  078B  0B89               	decfsz	9,f
  8272  078C  2F88               	goto	u9315
  8273  078D  3001               	movlw	1
  8274  078E                     u9325:	
  8275  078E  35B1               	lslf	___ftmul@f2,f
  8276  078F  0DB2               	rlf	___ftmul@f2+1,f
  8277  0790  0DB3               	rlf	___ftmul@f2+2,f
  8278  0791  0B89               	decfsz	9,f
  8279  0792  2F8E               	goto	u9325
  8280  0793  3001               	movlw	1
  8281  0794  02BC               	subwf	___ftmul@cntr,f
  8282  0795  1D03               	btfss	3,2
  8283  0796  2F7F               	goto	l8713
  8284  0797  3009               	movlw	9
  8285  0798  00B4               	movwf	??___ftmul
  8286  0799  0834               	movf	??___ftmul,w
  8287  079A  00BC               	movwf	___ftmul@cntr
  8288  079B                     l8725:	
  8289  079B  1C2E               	btfss	___ftmul@f1,0
  8290  079C  2FA3               	goto	l8729
  8291  079D  0831               	movf	___ftmul@f2,w
  8292  079E  07B9               	addwf	___ftmul@f3_as_product,f
  8293  079F  0832               	movf	___ftmul@f2+1,w
  8294  07A0  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8295  07A1  0833               	movf	___ftmul@f2+2,w
  8296  07A2  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8297  07A3                     l8729:	
  8298  07A3  3001               	movlw	1
  8299  07A4                     u9355:	
  8300  07A4  36B0               	lsrf	___ftmul@f1+2,f
  8301  07A5  0CAF               	rrf	___ftmul@f1+1,f
  8302  07A6  0CAE               	rrf	___ftmul@f1,f
  8303  07A7  0B89               	decfsz	9,f
  8304  07A8  2FA4               	goto	u9355
  8305  07A9  3001               	movlw	1
  8306  07AA                     u9365:	
  8307  07AA  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8308  07AB  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8309  07AC  0CB9               	rrf	___ftmul@f3_as_product,f
  8310  07AD  0B89               	decfsz	9,f
  8311  07AE  2FAA               	goto	u9365
  8312  07AF  3001               	movlw	1
  8313  07B0  02BC               	subwf	___ftmul@cntr,f
  8314  07B1  1D03               	btfss	3,2
  8315  07B2  2F9B               	goto	l8725
  8316  07B3  0839               	movf	___ftmul@f3_as_product,w
  8317  07B4  00A0               	movwf	___ftpack@arg
  8318  07B5  083A               	movf	___ftmul@f3_as_product+1,w
  8319  07B6  00A1               	movwf	___ftpack@arg+1
  8320  07B7  083B               	movf	___ftmul@f3_as_product+2,w
  8321  07B8  00A2               	movwf	___ftpack@arg+2
  8322  07B9  0838               	movf	___ftmul@exp,w
  8323  07BA  00B4               	movwf	??___ftmul
  8324  07BB  0834               	movf	??___ftmul,w
  8325  07BC  00A3               	movwf	___ftpack@exp
  8326  07BD  083D               	movf	___ftmul@sign,w
  8327  07BE  00B5               	movwf	??___ftmul+1
  8328  07BF  0835               	movf	??___ftmul+1,w
  8329  07C0  00A4               	movwf	___ftpack@sign
  8330  07C1  3189  214B         	fcall	___ftpack
  8331  07C3  0020               	movlb	0	; select bank0
  8332  07C4  0820               	movf	?___ftpack,w
  8333  07C5  00AE               	movwf	?___ftmul
  8334  07C6  0821               	movf	?___ftpack+1,w
  8335  07C7  00AF               	movwf	?___ftmul+1
  8336  07C8  0822               	movf	?___ftpack+2,w
  8337  07C9  00B0               	movwf	?___ftmul+2
  8338  07CA  0008               	return
  8339  07CB                     __end_of___ftmul:	
  8340                           
  8341                           	psect	text34
  8342  1CEB                     __ptext34:	
  8343 ;; *************** function _setMemory_Modify *****************
  8344 ;; Defined at:
  8345 ;;		line 1065 in file "../src/MCU_B1.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;  command         1    wreg     unsigned char 
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;  command         1    1[BANK0 ] unsigned char 
  8350 ;; Return value:  Size  Location     Type
  8351 ;;		None               void
  8352 ;; Registers used:
  8353 ;;		wreg, status,2, status,0
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8363 ;;Total ram usage:        2 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    5
  8366 ;; This function calls:
  8367 ;;		Nothing
  8368 ;; This function is called by:
  8369 ;;		_setLog_Code
  8370 ;;		_setRFSW_AdjControl
  8371 ;; This function uses a non-reentrant model
  8372 ;;
  8373                           
  8374                           
  8375                           ;psect for function _setMemory_Modify
  8376  1CEB                     _setMemory_Modify:	
  8377                           
  8378                           ;incstack = 0
  8379                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8380                           ;setMemory_Modify@command stored from wreg
  8381  1CEB  0020               	movlb	0	; select bank0
  8382  1CEC  00A1               	movwf	setMemory_Modify@command
  8383                           
  8384                           ;MCU_B1.c: 1066: Memory.Modify = command == 1 ? 1 : 0;
  8385  1CED  0821               	movf	setMemory_Modify@command,w
  8386  1CEE  3A01               	xorlw	1
  8387  1CEF  3000               	movlw	0
  8388  1CF0  1903               	skipnz
  8389  1CF1  3001               	movlw	1
  8390  1CF2  00A0               	movwf	??_setMemory_Modify
  8391  1CF3  0024               	movlb	4	; select bank4
  8392  1CF4  0844               	movf	(_Memory^(0+512)+36),w
  8393  1CF5  0020               	movlb	0	; select bank0
  8394  1CF6  0620               	xorwf	??_setMemory_Modify,w
  8395  1CF7  39FE               	andlw	-2
  8396  1CF8  0620               	xorwf	??_setMemory_Modify,w
  8397  1CF9  0024               	movlb	4	; select bank4
  8398  1CFA  00C4               	movwf	(_Memory^(0+512)+36)
  8399                           
  8400                           ;MCU_B1.c: 1067: Memory.Time = 0;
  8401  1CFB  01C2               	clrf	(_Memory^(0+512)+34)
  8402  1CFC  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8403  1CFD  0008               	return
  8404  1CFE                     __end_of_setMemory_Modify:	
  8405                           
  8406                           	psect	text35
  8407  1C47                     __ptext35:	
  8408 ;; *************** function _getRF_KeyStatus *****************
  8409 ;; Defined at:
  8410 ;;		line 154 in file "../src/RF_Control_B1.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;		None
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;  key             1    1[BANK0 ] unsigned char 
  8415 ;; Return value:  Size  Location     Type
  8416 ;;                  1    wreg      unsigned char 
  8417 ;; Registers used:
  8418 ;;		wreg, status,2
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;Total ram usage:        3 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    5
  8431 ;; This function calls:
  8432 ;;		Nothing
  8433 ;; This function is called by:
  8434 ;;		_setRF_Main
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _getRF_KeyStatus
  8440  1C47                     _getRF_KeyStatus:	
  8441                           
  8442                           ;RF_Control_B1.c: 155: char key = 0;
  8443                           
  8444                           ;incstack = 0
  8445                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8446  1C47  0020               	movlb	0	; select bank0
  8447  1C48  01A1               	clrf	getRF_KeyStatus@key
  8448                           
  8449                           ;RF_Control_B1.c: 161: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8450  1C49  01A2               	clrf	_getRF_KeyStatus$5258
  8451  1C4A  0AA2               	incf	_getRF_KeyStatus$5258,f
  8452  1C4B  1F0C               	btfss	12,6	;volatile
  8453  1C4C  1A0C               	btfsc	12,4	;volatile
  8454  1C4D  2C52               	goto	l9691
  8455  1C4E  1C0C               	btfss	12,0	;volatile
  8456  1C4F  188D               	btfsc	13,1	;volatile
  8457  1C50  2C52               	goto	l9691
  8458  1C51  01A2               	clrf	_getRF_KeyStatus$5258
  8459  1C52                     l9691:	
  8460  1C52  0822               	movf	_getRF_KeyStatus$5258,w
  8461  1C53  00A0               	movwf	??_getRF_KeyStatus
  8462  1C54  0820               	movf	??_getRF_KeyStatus,w
  8463  1C55  00A1               	movwf	getRF_KeyStatus@key
  8464                           
  8465                           ;RF_Control_B1.c: 167: return key;
  8466  1C56  0821               	movf	getRF_KeyStatus@key,w
  8467  1C57  0008               	return
  8468  1C58                     __end_of_getRF_KeyStatus:	
  8469                           
  8470                           	psect	text36
  8471  1C36                     __ptext36:	
  8472 ;; *************** function _getBuz_GO *****************
  8473 ;; Defined at:
  8474 ;;		line 82 in file "../src/Buzzer_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  i               2    4[BANK0 ] int 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  2    0[BANK0 ] int 
  8481 ;; Registers used:
  8482 ;;		wreg, status,2, status,0
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        6 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    5
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_setRF_Main
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _getBuz_GO
  8504  1C36                     _getBuz_GO:	
  8505                           
  8506                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8507                           
  8508                           ;incstack = 0
  8509                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8510  1C36  0021               	movlb	1	; select bank1
  8511  1C37  0C2E               	rrf	_Buz1^(0+128),w
  8512  1C38  3901               	andlw	1
  8513  1C39  0020               	movlb	0	; select bank0
  8514  1C3A  00A2               	movwf	??_getBuz_GO
  8515  1C3B  01A3               	clrf	??_getBuz_GO+1
  8516  1C3C  0822               	movf	??_getBuz_GO,w
  8517  1C3D  00A4               	movwf	getBuz_GO@i
  8518  1C3E  0823               	movf	??_getBuz_GO+1,w
  8519  1C3F  00A5               	movwf	getBuz_GO@i+1
  8520                           
  8521                           ;Buzzer_B1.c: 84: return i;
  8522  1C40  0825               	movf	getBuz_GO@i+1,w
  8523  1C41  01A1               	clrf	?_getBuz_GO+1
  8524  1C42  07A1               	addwf	?_getBuz_GO+1,f
  8525  1C43  0824               	movf	getBuz_GO@i,w
  8526  1C44  01A0               	clrf	?_getBuz_GO
  8527  1C45  07A0               	addwf	?_getBuz_GO,f
  8528  1C46  0008               	return
  8529  1C47                     __end_of_getBuz_GO:	
  8530                           
  8531                           	psect	text37
  8532  1CD8                     __ptext37:	
  8533 ;; *************** function _RF_RxDisable *****************
  8534 ;; Defined at:
  8535 ;;		line 227 in file "../src/RF_Control_B1.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;		None
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        0 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    7
  8556 ;; This function calls:
  8557 ;;		_CC2500_WriteCommand
  8558 ;; This function is called by:
  8559 ;;		_setRF_Main
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           
  8564                           ;psect for function _RF_RxDisable
  8565  1CD8                     _RF_RxDisable:	
  8566                           
  8567                           ;RF_Control_B1.c: 228: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8571  1CD8  0021               	movlb	1	; select bank1
  8572  1CD9  18BA               	btfsc	_RF1^(0+128),1
  8573  1CDA  2CDD               	goto	l2288
  8574  1CDB  1DBA               	btfss	_RF1^(0+128),3
  8575  1CDC  0008               	return
  8576  1CDD                     l2288:	
  8577                           
  8578                           ;RF_Control_B1.c: 229: RF1.RxStatus = 0;
  8579  1CDD  11BA               	bcf	_RF1^(0+128),3
  8580                           
  8581                           ;RF_Control_B1.c: 230: RF1.ReceiveGO = 0;
  8582  1CDE  10BA               	bcf	_RF1^(0+128),1
  8583                           
  8584                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x36);
  8585  1CDF  3036               	movlw	54
  8586  1CE0  319E  260E  319C   	fcall	_CC2500_WriteCommand
  8587                           
  8588                           ;RF_Control_B1.c: 233: CC2500_WriteCommand(0x3A);
  8589  1CE3  303A               	movlw	58
  8590  1CE4  319E  260E  319C   	fcall	_CC2500_WriteCommand
  8591                           
  8592                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x3B);
  8593  1CE7  303B               	movlw	59
  8594  1CE8  319E  260E         	fcall	_CC2500_WriteCommand
  8595  1CEA  0008               	return
  8596  1CEB                     __end_of_RF_RxDisable:	
  8597                           
  8598                           	psect	text38
  8599  0A0E                     __ptext38:	
  8600 ;; *************** function _CC2500_TxData *****************
  8601 ;; Defined at:
  8602 ;;		line 32 in file "../src/CC2500_B1.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;		None
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    7
  8623 ;; This function calls:
  8624 ;;		_CC2500_WriteByte
  8625 ;;		_CC2500_WriteCommand
  8626 ;;		_Timeout_Counter
  8627 ;;		_set_TimeoutCleared
  8628 ;; This function is called by:
  8629 ;;		_setRF_Main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_TxData
  8635  0A0E                     _CC2500_TxData:	
  8636                           
  8637                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8638                           ;CC2500_B1.c: 35: RC4 = 0;
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8642  0A0E  0020               	movlb	0	; select bank0
  8643  0A0F  120E               	bcf	14,4	;volatile
  8644                           
  8645                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8646  0A10  307F               	movlw	127
  8647  0A11  00A4               	movwf	??_CC2500_TxData
  8648  0A12  0824               	movf	??_CC2500_TxData,w
  8649  0A13  0021               	movlb	1	; select bank1
  8650  0A14  00D0               	movwf	_SPI0Buffer^(0+128)
  8651                           
  8652                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8653  0A15  2A19               	goto	l9415
  8654  0A16                     l9413:	
  8655                           
  8656                           ;CC2500_B1.c: 38: Timeout_Counter();
  8657  0A16  319D  259E  318A   	fcall	_Timeout_Counter
  8658  0A19                     l9415:	
  8659  0A19  0020               	movlb	0	; select bank0
  8660  0A1A  1D0E               	btfss	14,2	;volatile
  8661  0A1B  2A1F               	goto	l9419
  8662  0A1C  0021               	movlb	1	; select bank1
  8663  0A1D  1D2B               	btfss	(_myMain^(0+128)+11),2
  8664  0A1E  2A16               	goto	l9413
  8665  0A1F                     l9419:	
  8666                           
  8667                           ;CC2500_B1.c: 39: };
  8668                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8669  0A1F  319B  230C  318A   	fcall	_set_TimeoutCleared
  8670                           
  8671                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8672  0A22  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8673                           
  8674                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8675  0A25  0021               	movlb	1	; select bank1
  8676  0A26  0852               	movf	_Tx_Length^(0+128),w
  8677  0A27  0020               	movlb	0	; select bank0
  8678  0A28  00A4               	movwf	??_CC2500_TxData
  8679  0A29  0824               	movf	??_CC2500_TxData,w
  8680  0A2A  0021               	movlb	1	; select bank1
  8681  0A2B  00D0               	movwf	_SPI0Buffer^(0+128)
  8682                           
  8683                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8684  0A2C  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8685                           
  8686                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8687  0A2F  0020               	movlb	0	; select bank0
  8688  0A30  01A5               	clrf	CC2500_TxData@loop_e
  8689  0A31                     l9433:	
  8690  0A31  0021               	movlb	1	; select bank1
  8691  0A32  0852               	movf	_Tx_Length^(0+128),w
  8692  0A33  0020               	movlb	0	; select bank0
  8693  0A34  0225               	subwf	CC2500_TxData@loop_e,w
  8694  0A35  1803               	btfsc	3,0
  8695  0A36  2A4A               	goto	l255
  8696                           
  8697                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8698  0A37  0825               	movf	CC2500_TxData@loop_e,w
  8699  0A38  3EA0               	addlw	_RF_Data& (0+255)
  8700  0A39  0086               	movwf	6
  8701  0A3A  3001               	movlw	1	; select bank3/4
  8702  0A3B  0087               	movwf	7
  8703  0A3C  0801               	movf	1,w
  8704  0A3D  00A4               	movwf	??_CC2500_TxData
  8705  0A3E  0824               	movf	??_CC2500_TxData,w
  8706  0A3F  0021               	movlb	1	; select bank1
  8707  0A40  00D0               	movwf	_SPI0Buffer^(0+128)
  8708                           
  8709                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8710  0A41  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8711  0A44  3001               	movlw	1
  8712  0A45  0020               	movlb	0	; select bank0
  8713  0A46  00A4               	movwf	??_CC2500_TxData
  8714  0A47  0824               	movf	??_CC2500_TxData,w
  8715  0A48  07A5               	addwf	CC2500_TxData@loop_e,f
  8716  0A49  2A31               	goto	l9433
  8717  0A4A                     l255:	
  8718                           
  8719                           ;CC2500_B1.c: 48: }
  8720                           ;CC2500_B1.c: 49: RC4 = 1;
  8721  0A4A  160E               	bsf	14,4	;volatile
  8722                           
  8723                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8724  0A4B  3035               	movlw	53
  8725  0A4C  319E  260E  318A   	fcall	_CC2500_WriteCommand
  8726                           
  8727                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8728  0A4F  2A53               	goto	l9439
  8729  0A50                     l9437:	
  8730                           
  8731                           ;CC2500_B1.c: 52: Timeout_Counter();
  8732  0A50  319D  259E  318A   	fcall	_Timeout_Counter
  8733  0A53                     l9439:	
  8734  0A53  0020               	movlb	0	; select bank0
  8735  0A54  180D               	btfsc	13,0	;volatile
  8736  0A55  2A59               	goto	l9443
  8737  0A56  0021               	movlb	1	; select bank1
  8738  0A57  1D2B               	btfss	(_myMain^(0+128)+11),2
  8739  0A58  2A50               	goto	l9437
  8740  0A59                     l9443:	
  8741                           
  8742                           ;CC2500_B1.c: 53: };
  8743                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8744  0A59  319B  230C  318A   	fcall	_set_TimeoutCleared
  8745                           
  8746                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8747  0A5C  2A60               	goto	l9447
  8748  0A5D                     l9445:	
  8749                           
  8750                           ;CC2500_B1.c: 57: Timeout_Counter();
  8751  0A5D  319D  259E  318A   	fcall	_Timeout_Counter
  8752  0A60                     l9447:	
  8753  0A60  0020               	movlb	0	; select bank0
  8754  0A61  1C0D               	btfss	13,0	;volatile
  8755  0A62  2A66               	goto	l9451
  8756  0A63  0021               	movlb	1	; select bank1
  8757  0A64  1D2B               	btfss	(_myMain^(0+128)+11),2
  8758  0A65  2A5D               	goto	l9445
  8759  0A66                     l9451:	
  8760                           
  8761                           ;CC2500_B1.c: 58: };
  8762                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8763  0A66  319B  230C  318A   	fcall	_set_TimeoutCleared
  8764                           
  8765                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8766  0A69  3036               	movlw	54
  8767  0A6A  319E  260E  318A   	fcall	_CC2500_WriteCommand
  8768                           
  8769                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8770  0A6D  303B               	movlw	59
  8771  0A6E  319E  260E         	fcall	_CC2500_WriteCommand
  8772                           
  8773                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8774  0A70  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8775  0A71  0008               	return
  8776  0A72                     __end_of_CC2500_TxData:	
  8777                           
  8778                           	psect	text39
  8779  0BA3                     __ptext39:	
  8780 ;; *************** function _CC2500_RxData *****************
  8781 ;; Defined at:
  8782 ;;		line 70 in file "../src/CC2500_B1.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;		None
  8785 ;; Auto vars:     Size  Location     Type
  8786 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8787 ;; Return value:  Size  Location     Type
  8788 ;;		None               void
  8789 ;; Registers used:
  8790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;Total ram usage:        2 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; Hardware stack levels required when called:    7
  8803 ;; This function calls:
  8804 ;;		_CC2500_ReadByte
  8805 ;;		_CC2500_ReadStatus
  8806 ;;		_CC2500_WriteByte
  8807 ;;		_Timeout_Counter
  8808 ;;		_set_TimeoutCleared
  8809 ;; This function is called by:
  8810 ;;		_setRF_Main
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _CC2500_RxData
  8816  0BA3                     _CC2500_RxData:	
  8817                           
  8818                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8819                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8820                           
  8821                           ;incstack = 0
  8822                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8823  0BA3  0020               	movlb	0	; select bank0
  8824  0BA4  180D               	btfsc	13,0	;volatile
  8825  0BA5  2BAA               	goto	l9465
  8826  0BA6  2BB3               	goto	l9471
  8827  0BA7                     l9463:	
  8828                           ;CC2500_B1.c: 76: {
  8829                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8830                           
  8831                           
  8832                           ;CC2500_B1.c: 78: Timeout_Counter();
  8833  0BA7  319D  259E  318B   	fcall	_Timeout_Counter
  8834  0BAA                     l9465:	
  8835  0BAA  0020               	movlb	0	; select bank0
  8836  0BAB  1C0D               	btfss	13,0	;volatile
  8837  0BAC  2BB0               	goto	l9469
  8838  0BAD  0021               	movlb	1	; select bank1
  8839  0BAE  1D2B               	btfss	(_myMain^(0+128)+11),2
  8840  0BAF  2BA7               	goto	l9463
  8841  0BB0                     l9469:	
  8842                           
  8843                           ;CC2500_B1.c: 79: };
  8844                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8845  0BB0  319B  230C  318B   	fcall	_set_TimeoutCleared
  8846  0BB3                     l9471:	
  8847                           
  8848                           ;CC2500_B1.c: 81: }
  8849                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8850  0BB3  303B               	movlw	59
  8851  0BB4  319F  27DB  318B   	fcall	_CC2500_ReadStatus
  8852                           
  8853                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8854  0BB7  0021               	movlb	1	; select bank1
  8855  0BB8  0855               	movf	_s_data^(0+128),w
  8856  0BB9  1903               	btfsc	3,2
  8857  0BBA  0008               	return
  8858                           
  8859                           ;CC2500_B1.c: 86: RC4 = 0;
  8860  0BBB  0020               	movlb	0	; select bank0
  8861  0BBC  120E               	bcf	14,4	;volatile
  8862                           
  8863                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8864  0BBD  30FF               	movlw	255
  8865  0BBE  00A4               	movwf	??_CC2500_RxData
  8866  0BBF  0824               	movf	??_CC2500_RxData,w
  8867  0BC0  0021               	movlb	1	; select bank1
  8868  0BC1  00D0               	movwf	_SPI0Buffer^(0+128)
  8869                           
  8870                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8871  0BC2  2BC6               	goto	l9481
  8872  0BC3                     l9479:	
  8873                           
  8874                           ;CC2500_B1.c: 89: Timeout_Counter();
  8875  0BC3  319D  259E  318B   	fcall	_Timeout_Counter
  8876  0BC6                     l9481:	
  8877  0BC6  0020               	movlb	0	; select bank0
  8878  0BC7  1D0E               	btfss	14,2	;volatile
  8879  0BC8  2BCC               	goto	l9485
  8880  0BC9  0021               	movlb	1	; select bank1
  8881  0BCA  1D2B               	btfss	(_myMain^(0+128)+11),2
  8882  0BCB  2BC3               	goto	l9479
  8883  0BCC                     l9485:	
  8884                           
  8885                           ;CC2500_B1.c: 90: };
  8886                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8887  0BCC  319B  230C  318B   	fcall	_set_TimeoutCleared
  8888                           
  8889                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8890  0BCF  319D  25F5  318B   	fcall	_CC2500_WriteByte
  8891                           
  8892                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8893  0BD2  319E  2679  318B   	fcall	_CC2500_ReadByte
  8894                           
  8895                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8896  0BD5  0021               	movlb	1	; select bank1
  8897  0BD6  0850               	movf	_SPI0Buffer^(0+128),w
  8898  0BD7  0020               	movlb	0	; select bank0
  8899  0BD8  00A4               	movwf	??_CC2500_RxData
  8900  0BD9  0824               	movf	??_CC2500_RxData,w
  8901  0BDA  0021               	movlb	1	; select bank1
  8902  0BDB  00CF               	movwf	_Rx_Length^(0+128)
  8903                           
  8904                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8905  0BDC  0020               	movlb	0	; select bank0
  8906  0BDD  01A5               	clrf	CC2500_RxData@loop_f
  8907  0BDE                     l9501:	
  8908  0BDE  0021               	movlb	1	; select bank1
  8909  0BDF  084F               	movf	_Rx_Length^(0+128),w
  8910  0BE0  0020               	movlb	0	; select bank0
  8911  0BE1  0225               	subwf	CC2500_RxData@loop_f,w
  8912  0BE2  1803               	btfsc	3,0
  8913  0BE3  2BF7               	goto	l9503
  8914                           
  8915                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8916  0BE4  319E  2679  318B   	fcall	_CC2500_ReadByte
  8917                           
  8918                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8919  0BE7  0021               	movlb	1	; select bank1
  8920  0BE8  0850               	movf	_SPI0Buffer^(0+128),w
  8921  0BE9  0020               	movlb	0	; select bank0
  8922  0BEA  00A4               	movwf	??_CC2500_RxData
  8923  0BEB  0825               	movf	CC2500_RxData@loop_f,w
  8924  0BEC  3EA0               	addlw	_RF_Data& (0+255)
  8925  0BED  0086               	movwf	6
  8926  0BEE  3001               	movlw	1	; select bank3/4
  8927  0BEF  0087               	movwf	7
  8928  0BF0  0824               	movf	??_CC2500_RxData,w
  8929  0BF1  0081               	movwf	1
  8930  0BF2  3001               	movlw	1
  8931  0BF3  00A4               	movwf	??_CC2500_RxData
  8932  0BF4  0824               	movf	??_CC2500_RxData,w
  8933  0BF5  07A5               	addwf	CC2500_RxData@loop_f,f
  8934  0BF6  2BDE               	goto	l9501
  8935  0BF7                     l9503:	
  8936                           
  8937                           ;CC2500_B1.c: 99: }
  8938                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8939  0BF7  319E  2679  318B   	fcall	_CC2500_ReadByte
  8940                           
  8941                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8942  0BFA  0021               	movlb	1	; select bank1
  8943  0BFB  0850               	movf	_SPI0Buffer^(0+128),w
  8944  0BFC  0020               	movlb	0	; select bank0
  8945  0BFD  00A4               	movwf	??_CC2500_RxData
  8946  0BFE  0824               	movf	??_CC2500_RxData,w
  8947  0BFF  0021               	movlb	1	; select bank1
  8948  0C00  00CE               	movwf	_RSSI^(0+128)
  8949                           
  8950                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8951  0C01  319E  2679         	fcall	_CC2500_ReadByte
  8952                           
  8953                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8954  0C03  0021               	movlb	1	; select bank1
  8955  0C04  0850               	movf	_SPI0Buffer^(0+128),w
  8956  0C05  0020               	movlb	0	; select bank0
  8957  0C06  00A4               	movwf	??_CC2500_RxData
  8958  0C07  0824               	movf	??_CC2500_RxData,w
  8959  0C08  0021               	movlb	1	; select bank1
  8960  0C09  00C9               	movwf	_CRC^(0+128)
  8961                           
  8962                           ;CC2500_B1.c: 104: RC4 = 1;
  8963  0C0A  0020               	movlb	0	; select bank0
  8964  0C0B  160E               	bsf	14,4	;volatile
  8965                           
  8966                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8967  0C0C  0021               	movlb	1	; select bank1
  8968  0C0D  1BC9               	btfsc	_CRC^(0+128),7
  8969                           
  8970                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8971  0C0E  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8972                           
  8973                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8974  0C0F  11BA               	bcf	_RF1^(0+128),3
  8975                           
  8976                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8977  0C10  14BA               	bsf	_RF1^(0+128),1
  8978  0C11  0008               	return
  8979  0C12                     __end_of_CC2500_RxData:	
  8980                           
  8981                           	psect	text40
  8982  1FDB                     __ptext40:	
  8983 ;; *************** function _CC2500_ReadStatus *****************
  8984 ;; Defined at:
  8985 ;;		line 301 in file "../src/CC2500_B1.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  status_addr     1    wreg     unsigned char 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;		None               void
  8992 ;; Registers used:
  8993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:        2 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    6
  9006 ;; This function calls:
  9007 ;;		_CC2500_ReadByte
  9008 ;;		_CC2500_WriteByte
  9009 ;;		_Timeout_Counter
  9010 ;;		_set_TimeoutCleared
  9011 ;; This function is called by:
  9012 ;;		_CC2500_RxData
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function _CC2500_ReadStatus
  9018  1FDB                     _CC2500_ReadStatus:	
  9019                           
  9020                           ;incstack = 0
  9021                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9022                           ;CC2500_ReadStatus@status_addr stored from wreg
  9023  1FDB  0020               	movlb	0	; select bank0
  9024  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9025                           
  9026                           ;CC2500_B1.c: 302: RC4 = 0;
  9027  1FDD  120E               	bcf	14,4	;volatile
  9028                           
  9029                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9030  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9031  1FDF  3EC0               	addlw	192
  9032  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  9033  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  9034  1FE2  0021               	movlb	1	; select bank1
  9035  1FE3  00D0               	movwf	_SPI0Buffer^(0+128)
  9036                           
  9037                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9038  1FE4  2FE8               	goto	l9223
  9039  1FE5                     l9221:	
  9040                           
  9041                           ;CC2500_B1.c: 306: Timeout_Counter();
  9042  1FE5  319D  259E  319F   	fcall	_Timeout_Counter
  9043  1FE8                     l9223:	
  9044  1FE8  0020               	movlb	0	; select bank0
  9045  1FE9  1D0E               	btfss	14,2	;volatile
  9046  1FEA  2FEE               	goto	l9227
  9047  1FEB  0021               	movlb	1	; select bank1
  9048  1FEC  1D2B               	btfss	(_myMain^(0+128)+11),2
  9049  1FED  2FE5               	goto	l9221
  9050  1FEE                     l9227:	
  9051                           
  9052                           ;CC2500_B1.c: 307: };
  9053                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9054  1FEE  319B  230C  319F   	fcall	_set_TimeoutCleared
  9055                           
  9056                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9057  1FF1  319D  25F5  319F   	fcall	_CC2500_WriteByte
  9058                           
  9059                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9060  1FF4  319E  2679         	fcall	_CC2500_ReadByte
  9061                           
  9062                           ;CC2500_B1.c: 312: RC4 = 1;
  9063  1FF6  0020               	movlb	0	; select bank0
  9064  1FF7  160E               	bsf	14,4	;volatile
  9065                           
  9066                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9067  1FF8  0021               	movlb	1	; select bank1
  9068  1FF9  0850               	movf	_SPI0Buffer^(0+128),w
  9069  1FFA  0020               	movlb	0	; select bank0
  9070  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  9071  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  9072  1FFD  0021               	movlb	1	; select bank1
  9073  1FFE  00D5               	movwf	_s_data^(0+128)
  9074  1FFF  0008               	return
  9075  2000                     __end_of_CC2500_ReadStatus:	
  9076                           
  9077                           	psect	text41
  9078  1E79                     __ptext41:	
  9079 ;; *************** function _CC2500_ReadByte *****************
  9080 ;; Defined at:
  9081 ;;		line 235 in file "../src/CC2500_B1.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;		None
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9086 ;; Return value:  Size  Location     Type
  9087 ;;		None               void
  9088 ;; Registers used:
  9089 ;;		wreg, status,2, status,0
  9090 ;; Tracked objects:
  9091 ;;		On entry : 0/0
  9092 ;;		On exit  : 0/0
  9093 ;;		Unchanged: 0/0
  9094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;Total ram usage:        2 bytes
  9100 ;; Hardware stack levels used:    1
  9101 ;; Hardware stack levels required when called:    5
  9102 ;; This function calls:
  9103 ;;		Nothing
  9104 ;; This function is called by:
  9105 ;;		_CC2500_RxData
  9106 ;;		_CC2500_ReadStatus
  9107 ;;		_CC2500_ReadREG
  9108 ;; This function uses a non-reentrant model
  9109 ;;
  9110                           
  9111                           
  9112                           ;psect for function _CC2500_ReadByte
  9113  1E79                     _CC2500_ReadByte:	
  9114                           
  9115                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9116                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9117                           
  9118                           ;incstack = 0
  9119                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9120  1E79  0020               	movlb	0	; select bank0
  9121  1E7A  01A1               	clrf	CC2500_ReadByte@loop_b
  9122  1E7B                     L4:	
  9123  1E7B  3008               	movlw	8
  9124  1E7C  0221               	subwf	CC2500_ReadByte@loop_b,w
  9125  1E7D  1803               	btfsc	3,0
  9126  1E7E  0008               	return
  9127                           
  9128                           ;CC2500_B1.c: 238: RC1 = 1;
  9129  1E7F  148E               	bsf	14,1	;volatile
  9130                           
  9131                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9132  1E80  1003               	clrc
  9133  1E81  0021               	movlb	1	; select bank1
  9134  1E82  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9135                           
  9136                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9137  1E83  0020               	movlb	0	; select bank0
  9138  1E84  1D0E               	btfss	14,2	;volatile
  9139  1E85  2E89               	goto	l9119
  9140                           
  9141                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9142  1E86  0021               	movlb	1	; select bank1
  9143  1E87  1450               	bsf	_SPI0Buffer^(0+128),0
  9144  1E88  2E8F               	goto	l9121
  9145  1E89                     l9119:	
  9146                           
  9147                           ;CC2500_B1.c: 242: else
  9148                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9149  1E89  30FE               	movlw	254
  9150  1E8A  0020               	movlb	0	; select bank0
  9151  1E8B  00A0               	movwf	??_CC2500_ReadByte
  9152  1E8C  0820               	movf	??_CC2500_ReadByte,w
  9153  1E8D  0021               	movlb	1	; select bank1
  9154  1E8E  05D0               	andwf	_SPI0Buffer^(0+128),f
  9155  1E8F                     l9121:	
  9156                           
  9157                           ;CC2500_B1.c: 244: RC1 = 0;
  9158  1E8F  0020               	movlb	0	; select bank0
  9159  1E90  108E               	bcf	14,1	;volatile
  9160  1E91  3001               	movlw	1
  9161  1E92  00A0               	movwf	??_CC2500_ReadByte
  9162  1E93  0820               	movf	??_CC2500_ReadByte,w
  9163  1E94  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9164  1E95  2E7B               	goto	L4
  9165  1E96                     __end_of_CC2500_ReadByte:	
  9166                           
  9167                           	psect	text42
  9168  1AF0                     __ptext42:	
  9169 ;; *************** function _RF_Initialization *****************
  9170 ;; Defined at:
  9171 ;;		line 9 in file "../src/RF_Control_B1.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;		None               void
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, pclath, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 0/0
  9182 ;;		On exit  : 0/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;Total ram usage:        0 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    6
  9192 ;; This function calls:
  9193 ;;		_setRF_Initialization
  9194 ;; This function is called by:
  9195 ;;		_main
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _RF_Initialization
  9201  1AF0                     _RF_Initialization:	
  9202                           
  9203                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9207  1AF0  319B  2374         	fcall	_setRF_Initialization
  9208  1AF2  0008               	return
  9209  1AF3                     __end_of_RF_Initialization:	
  9210                           
  9211                           	psect	text43
  9212  1B74                     __ptext43:	
  9213 ;; *************** function _setRF_Initialization *****************
  9214 ;; Defined at:
  9215 ;;		line 43 in file "../src/RF_Control_B1.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;		None
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;		None
  9220 ;; Return value:  Size  Location     Type
  9221 ;;		None               void
  9222 ;; Registers used:
  9223 ;;		wreg
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9233 ;;Total ram usage:        1 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    5
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_RF_Initialization
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           
  9244                           ;psect for function _setRF_Initialization
  9245  1B74                     _setRF_Initialization:	
  9246                           
  9247                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9248                           
  9249                           ;incstack = 0
  9250                           ; Regs used in _setRF_Initialization: [wreg]
  9251  1B74  3015               	movlw	21
  9252  1B75  0020               	movlb	0	; select bank0
  9253  1B76  00A0               	movwf	??_setRF_Initialization
  9254  1B77  0820               	movf	??_setRF_Initialization,w
  9255  1B78  0021               	movlb	1	; select bank1
  9256  1B79  00D2               	movwf	_Tx_Length^(0+128)
  9257                           
  9258                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9259  1B7A  3005               	movlw	5
  9260  1B7B  00C1               	movwf	(_RF1^(0+128)+7)
  9261  1B7C  3000               	movlw	0
  9262  1B7D  00C2               	movwf	(_RF1^(0+128)+8)
  9263  1B7E  0008               	return
  9264  1B7F                     __end_of_setRF_Initialization:	
  9265                           
  9266                           	psect	text44
  9267  1C8E                     __ptext44:	
  9268 ;; *************** function _Mcu_Initialization *****************
  9269 ;; Defined at:
  9270 ;;		line 30 in file "../src/MCU_B1.c"
  9271 ;; Parameters:    Size  Location     Type
  9272 ;;		None
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;		None
  9275 ;; Return value:  Size  Location     Type
  9276 ;;		None               void
  9277 ;; Registers used:
  9278 ;;		wreg, status,2, status,0, pclath, cstack
  9279 ;; Tracked objects:
  9280 ;;		On entry : 0/0
  9281 ;;		On exit  : 0/0
  9282 ;;		Unchanged: 0/0
  9283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;Total ram usage:        0 bytes
  9289 ;; Hardware stack levels used:    1
  9290 ;; Hardware stack levels required when called:    6
  9291 ;; This function calls:
  9292 ;;		_ADC_Set
  9293 ;;		_Fosc_Set
  9294 ;;		_IOC_Set
  9295 ;;		_IO_Set
  9296 ;;		_TMR1_Set
  9297 ;;		_WDT_Set
  9298 ;; This function is called by:
  9299 ;;		_main
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _Mcu_Initialization
  9305  1C8E                     _Mcu_Initialization:	
  9306                           
  9307                           ;MCU_B1.c: 32: Fosc_Set();
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9311  1C8E  319B  2308  319C   	fcall	_Fosc_Set
  9312                           
  9313                           ;MCU_B1.c: 34: IO_Set();
  9314  1C91  319E  2642  319C   	fcall	_IO_Set
  9315                           
  9316                           ;MCU_B1.c: 36: ;;
  9317                           ;MCU_B1.c: 38: TMR1_Set();
  9318  1C94  319B  23D2  319C   	fcall	_TMR1_Set
  9319                           
  9320                           ;MCU_B1.c: 40: ADC_Set();
  9321  1C97  319B  2323  319C   	fcall	_ADC_Set
  9322                           
  9323                           ;MCU_B1.c: 42: ;;
  9324                           ;MCU_B1.c: 44: ;;
  9325                           ;MCU_B1.c: 46: IOC_Set();
  9326  1C9A  319B  23C6  319C   	fcall	_IOC_Set
  9327                           
  9328                           ;MCU_B1.c: 48: ;;
  9329                           ;MCU_B1.c: 50: ;;
  9330                           ;MCU_B1.c: 52: WDT_Set();
  9331  1C9D  319B  23DE         	fcall	_WDT_Set
  9332  1C9F  0008               	return
  9333  1CA0                     __end_of_Mcu_Initialization:	
  9334                           
  9335                           	psect	text45
  9336  1BDE                     __ptext45:	
  9337 ;; *************** function _WDT_Set *****************
  9338 ;; Defined at:
  9339 ;;		line 1084 in file "../src/MCU_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;		None
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;		None
  9344 ;; Return value:  Size  Location     Type
  9345 ;;		None               void
  9346 ;; Registers used:
  9347 ;;		wreg
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;Total ram usage:        1 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    5
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_Mcu_Initialization
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           
  9368                           ;psect for function _WDT_Set
  9369  1BDE                     _WDT_Set:	
  9370                           
  9371                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _WDT_Set: [wreg]
  9375  1BDE  3017               	movlw	23
  9376  1BDF  0021               	movlb	1	; select bank1
  9377  1BE0  0097               	movwf	23	;volatile
  9378                           
  9379                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  9380  1BE1  0022               	movlb	2	; select bank2
  9381  1BE2  1425               	bsf	_WDT^(0+256),0
  9382                           
  9383                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  9384  1BE3  300A               	movlw	10
  9385  1BE4  0020               	movlb	0	; select bank0
  9386  1BE5  00A0               	movwf	??_WDT_Set
  9387  1BE6  0820               	movf	??_WDT_Set,w
  9388  1BE7  0022               	movlb	2	; select bank2
  9389  1BE8  00A6               	movwf	(_WDT^(0+256)+1)
  9390  1BE9  0008               	return
  9391  1BEA                     __end_of_WDT_Set:	
  9392                           
  9393                           	psect	text46
  9394  1BD2                     __ptext46:	
  9395 ;; *************** function _TMR1_Set *****************
  9396 ;; Defined at:
  9397 ;;		line 200 in file "../src/MCU_B1.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;		None
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;		None
  9402 ;; Return value:  Size  Location     Type
  9403 ;;		None               void
  9404 ;; Registers used:
  9405 ;;		wreg
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;Total ram usage:        0 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    5
  9418 ;; This function calls:
  9419 ;;		Nothing
  9420 ;; This function is called by:
  9421 ;;		_Mcu_Initialization
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           
  9426                           ;psect for function _TMR1_Set
  9427  1BD2                     _TMR1_Set:	
  9428                           
  9429                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
  9430                           
  9431                           ;incstack = 0
  9432                           ; Regs used in _TMR1_Set: [wreg]
  9433  1BD2  3041               	movlw	65
  9434  1BD3  0020               	movlb	0	; select bank0
  9435  1BD4  0098               	movwf	24	;volatile
  9436                           
  9437                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
  9438  1BD5  30FA               	movlw	250
  9439  1BD6  0097               	movwf	23	;volatile
  9440                           
  9441                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
  9442  1BD7  3038               	movlw	56
  9443  1BD8  0096               	movwf	22	;volatile
  9444                           
  9445                           ;MCU_B1.c: 204: TMR1IE = 1;
  9446  1BD9  0021               	movlb	1	; select bank1
  9447  1BDA  1411               	bsf	17,0	;volatile
  9448                           
  9449                           ;MCU_B1.c: 205: PEIE = 1;
  9450  1BDB  170B               	bsf	11,6	;volatile
  9451                           
  9452                           ;MCU_B1.c: 206: GIE = 1;
  9453  1BDC  178B               	bsf	11,7	;volatile
  9454  1BDD  0008               	return
  9455  1BDE                     __end_of_TMR1_Set:	
  9456                           
  9457                           	psect	text47
  9458  1E42                     __ptext47:	
  9459 ;; *************** function _IO_Set *****************
  9460 ;; Defined at:
  9461 ;;		line 60 in file "../src/MCU_B1.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, status,2
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    5
  9482 ;; This function calls:
  9483 ;;		Nothing
  9484 ;; This function is called by:
  9485 ;;		_Mcu_Initialization
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _IO_Set
  9491  1E42                     _IO_Set:	
  9492                           
  9493                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _IO_Set: [wreg+status,2]
  9497  1E42  3077               	movlw	119
  9498  1E43  0021               	movlb	1	; select bank1
  9499  1E44  008C               	movwf	12	;volatile
  9500                           
  9501                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9502  1E45  3007               	movlw	7
  9503  1E46  008D               	movwf	13	;volatile
  9504                           
  9505                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9506  1E47  300C               	movlw	12
  9507  1E48  008E               	movwf	14	;volatile
  9508                           
  9509                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9510  1E49  0022               	movlb	2	; select bank2
  9511  1E4A  018C               	clrf	12	;volatile
  9512                           
  9513                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9514  1E4B  3002               	movlw	2
  9515  1E4C  008D               	movwf	13	;volatile
  9516                           
  9517                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9518  1E4D  018E               	clrf	14	;volatile
  9519                           
  9520                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9521  1E4E  3022               	movlw	34
  9522  1E4F  0023               	movlb	3	; select bank3
  9523  1E50  008C               	movwf	12	;volatile
  9524                           
  9525                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9526  1E51  018D               	clrf	13	;volatile
  9527                           
  9528                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9529  1E52  018E               	clrf	14	;volatile
  9530                           
  9531                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9532  1E53  3077               	movlw	119
  9533  1E54  0020               	movlb	0	; select bank0
  9534  1E55  008C               	movwf	12	;volatile
  9535                           
  9536                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9537  1E56  3007               	movlw	7
  9538  1E57  008D               	movwf	13	;volatile
  9539                           
  9540                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9541  1E58  300C               	movlw	12
  9542  1E59  008E               	movwf	14	;volatile
  9543                           
  9544                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
  9545  1E5A  0024               	movlb	4	; select bank4
  9546  1E5B  018D               	clrf	13	;volatile
  9547  1E5C  0008               	return
  9548  1E5D                     __end_of_IO_Set:	
  9549                           
  9550                           	psect	text48
  9551  1BC6                     __ptext48:	
  9552 ;; *************** function _IOC_Set *****************
  9553 ;; Defined at:
  9554 ;;		line 366 in file "../src/MCU_B1.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;		None
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;		None
  9559 ;; Return value:  Size  Location     Type
  9560 ;;		None               void
  9561 ;; Registers used:
  9562 ;;		wreg, status,2
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;Total ram usage:        0 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    5
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_Mcu_Initialization
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           
  9583                           ;psect for function _IOC_Set
  9584  1BC6                     _IOC_Set:	
  9585                           
  9586                           ;MCU_B1.c: 367: WPUB2 = 0;
  9587                           
  9588                           ;incstack = 0
  9589                           ; Regs used in _IOC_Set: [wreg+status,2]
  9590  1BC6  0024               	movlb	4	; select bank4
  9591  1BC7  110D               	bcf	13,2	;volatile
  9592                           
  9593                           ;MCU_B1.c: 387: IOCBP = 0b00000100;
  9594  1BC8  3004               	movlw	4
  9595  1BC9  0027               	movlb	7	; select bank7
  9596  1BCA  0094               	movwf	20	;volatile
  9597                           
  9598                           ;MCU_B1.c: 388: IOCBN = 0b00000000;
  9599  1BCB  0195               	clrf	21	;volatile
  9600                           
  9601                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  9602  1BCC  0196               	clrf	22	;volatile
  9603                           
  9604                           ;MCU_B1.c: 394: IOCIE = 1;
  9605  1BCD  158B               	bsf	11,3	;volatile
  9606                           
  9607                           ;MCU_B1.c: 395: IOCIF = 0;
  9608  1BCE  100B               	bcf	11,0	;volatile
  9609                           
  9610                           ;MCU_B1.c: 396: PEIE = 1;
  9611  1BCF  170B               	bsf	11,6	;volatile
  9612                           
  9613                           ;MCU_B1.c: 397: GIE = 1;
  9614  1BD0  178B               	bsf	11,7	;volatile
  9615  1BD1  0008               	return
  9616  1BD2                     __end_of_IOC_Set:	
  9617                           
  9618                           	psect	text49
  9619  1B08                     __ptext49:	
  9620 ;; *************** function _Fosc_Set *****************
  9621 ;; Defined at:
  9622 ;;		line 56 in file "../src/MCU_B1.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;		None               void
  9629 ;; Registers used:
  9630 ;;		wreg
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9640 ;;Total ram usage:        0 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    5
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_Mcu_Initialization
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _Fosc_Set
  9652  1B08                     _Fosc_Set:	
  9653                           
  9654                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9655                           
  9656                           ;incstack = 0
  9657                           ; Regs used in _Fosc_Set: [wreg]
  9658  1B08  3078               	movlw	120
  9659  1B09  0021               	movlb	1	; select bank1
  9660  1B0A  0099               	movwf	25	;volatile
  9661  1B0B  0008               	return
  9662  1B0C                     __end_of_Fosc_Set:	
  9663                           
  9664                           	psect	text50
  9665  1B23                     __ptext50:	
  9666 ;; *************** function _ADC_Set *****************
  9667 ;; Defined at:
  9668 ;;		line 420 in file "../src/MCU_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_Mcu_Initialization
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _ADC_Set
  9698  1B23                     _ADC_Set:	
  9699                           
  9700                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  9701                           
  9702                           ;incstack = 0
  9703                           ; Regs used in _ADC_Set: [wreg]
  9704  1B23  30F3               	movlw	243
  9705  1B24  0021               	movlb	1	; select bank1
  9706  1B25  009E               	movwf	30	;volatile
  9707                           
  9708                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  9709  1B26  30C1               	movlw	193
  9710  1B27  0022               	movlb	2	; select bank2
  9711  1B28  0097               	movwf	23	;volatile
  9712  1B29  0008               	return
  9713  1B2A                     __end_of_ADC_Set:	
  9714                           
  9715                           	psect	text51
  9716  0049                     __ptext51:	
  9717 ;; *************** function _Load_Main *****************
  9718 ;; Defined at:
  9719 ;;		line 39 in file "../src/OverLoad_B1.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;		None
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  i               2   12[BANK0 ] int 
  9724 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9725 ;;  error           1   10[BANK0 ] unsigned char 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;		None               void
  9728 ;; Registers used:
  9729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;Total ram usage:        6 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    7
  9742 ;; This function calls:
  9743 ;;		___lwdiv
  9744 ;;		___wmul
  9745 ;;		_getAll_DimmerLights_AdjSw
  9746 ;;		_getDimmer_LoadGO
  9747 ;;		_getDimmer_Load_Status
  9748 ;;		_getMain_All_Error_Status
  9749 ;;		_getMain_LightsStatus
  9750 ;;		_getMain_Lights_Count
  9751 ;;		_setLoad_AH_AL_Restore
  9752 ;; This function is called by:
  9753 ;;		_main
  9754 ;; This function uses a non-reentrant model
  9755 ;;
  9756                           
  9757                           
  9758                           ;psect for function _Load_Main
  9759  0049                     _Load_Main:	
  9760                           
  9761                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9762                           
  9763                           ;incstack = 0
  9764                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9765  0049  3000               	movlw	0
  9766  004A  3191  21D3  3180   	fcall	_getMain_All_Error_Status
  9767  004D  0020               	movlb	0	; select bank0
  9768  004E  00A8               	movwf	??_Load_Main
  9769  004F  0828               	movf	??_Load_Main,w
  9770  0050  00AA               	movwf	Load_Main@error
  9771                           
  9772                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9773  0051  01AB               	clrf	Load_Main@Load_Status
  9774                           
  9775                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9776  0052  0022               	movlb	2	; select bank2
  9777  0053  1C27               	btfss	_Load^(0+256),0
  9778  0054  29EF               	goto	l1727
  9779                           
  9780                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9781  0055  319C  24C5  3180   	fcall	_getMain_LightsStatus
  9782  0058  3800               	iorlw	0
  9783  0059  1D03               	skipz
  9784  005A  285D               	goto	l10641
  9785                           
  9786                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9787  005B  0022               	movlb	2	; select bank2
  9788  005C  287E               	goto	l10659
  9789  005D                     l10641:	
  9790                           ;OverLoad_B1.c: 66: } else {
  9791                           
  9792                           
  9793                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9794  005D  0020               	movlb	0	; select bank0
  9795  005E  08AA               	movf	Load_Main@error,f
  9796  005F  1D03               	skipz
  9797  0060  287B               	goto	l1730
  9798  0061  3191  2117  3180   	fcall	_getAll_DimmerLights_AdjSw
  9799  0064  3800               	iorlw	0
  9800  0065  1D03               	skipz
  9801  0066  287B               	goto	l1730
  9802                           
  9803                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9804  0067  0022               	movlb	2	; select bank2
  9805  0068  14A7               	bsf	_Load^(0+256),1
  9806                           
  9807                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9808  0069  319B  234A  3180   	fcall	_getDimmer_LoadGO
  9809  006C  3A01               	xorlw	1
  9810  006D  1D03               	skipz
  9811  006E  2876               	goto	l1731
  9812                           
  9813                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9814  006F  0022               	movlb	2	; select bank2
  9815  0070  1DA7               	btfss	_Load^(0+256),3
  9816  0071  1BA7               	btfsc	_Load^(0+256),7
  9817  0072  287F               	goto	l1729
  9818                           
  9819                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9820  0073  15A7               	bsf	_Load^(0+256),3
  9821                           
  9822                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9823  0074  01D0               	clrf	(_Load^(0+256)+41)
  9824                           
  9825                           ;OverLoad_B1.c: 76: }
  9826                           ;OverLoad_B1.c: 77: } else {
  9827  0075  287F               	goto	l1729
  9828  0076                     l1731:	
  9829                           
  9830                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9831  0076  0022               	movlb	2	; select bank2
  9832  0077  1FA7               	btfss	_Load^(0+256),7
  9833  0078  287F               	goto	l1729
  9834                           
  9835                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9836  0079  13A7               	bcf	_Load^(0+256),7
  9837                           
  9838                           ;OverLoad_B1.c: 80: }
  9839                           ;OverLoad_B1.c: 81: }
  9840                           ;OverLoad_B1.c: 82: } else {
  9841  007A  287F               	goto	l1729
  9842  007B                     l1730:	
  9843                           
  9844                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9845  007B  0022               	movlb	2	; select bank2
  9846  007C  1CA7               	btfss	_Load^(0+256),1
  9847  007D  287F               	goto	l1729
  9848  007E                     l10659:	
  9849                           
  9850                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9851  007E  10A7               	bcf	_Load^(0+256),1
  9852  007F                     l1729:	
  9853                           
  9854                           ;OverLoad_B1.c: 85: }
  9855                           ;OverLoad_B1.c: 86: }
  9856                           ;OverLoad_B1.c: 88: }
  9857                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9858  007F  1CA7               	btfss	_Load^(0+256),1
  9859  0080  29CB               	goto	l1737
  9860                           
  9861                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9862  0081  1527               	bsf	_Load^(0+256),2
  9863                           
  9864                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9865  0082  1E27               	btfss	_Load^(0+256),4
  9866  0083  29C9               	goto	l1738
  9867                           
  9868                           ;OverLoad_B1.c: 95: Load.Time++;
  9869  0084  3001               	movlw	1
  9870  0085  07A8               	addwf	(_Load^(0+256)+1),f
  9871  0086  3000               	movlw	0
  9872  0087  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9873                           
  9874                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9875  0088  3000               	movlw	0
  9876  0089  0229               	subwf	((_Load+1)^(0+256)+1),w
  9877  008A  3005               	movlw	5
  9878  008B  1903               	skipnz
  9879  008C  0228               	subwf	(_Load^(0+256)+1),w
  9880  008D  1C03               	skipc
  9881  008E  0008               	return
  9882                           
  9883                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9884  008F  01A8               	clrf	(_Load^(0+256)+1)
  9885  0090  01A9               	clrf	((_Load+1)^(0+256)+1)
  9886                           
  9887                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9888  0091  1227               	bcf	_Load^(0+256),4
  9889                           
  9890                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9891  0092  3001               	movlw	1
  9892  0093  0020               	movlb	0	; select bank0
  9893  0094  00AC               	movwf	Load_Main@i
  9894  0095  3000               	movlw	0
  9895  0096  00AD               	movwf	Load_Main@i+1
  9896  0097  082D               	movf	Load_Main@i+1,w
  9897  0098  3A80               	xorlw	128
  9898  0099  00A8               	movwf	??_Load_Main
  9899  009A  3080               	movlw	128
  9900  009B  0228               	subwf	??_Load_Main,w
  9901  009C  1D03               	skipz
  9902  009D  28A0               	goto	u12515
  9903  009E  3004               	movlw	4
  9904  009F  022C               	subwf	Load_Main@i,w
  9905  00A0                     u12515:	
  9906  00A0  1803               	btfsc	3,0
  9907  00A1  28D4               	goto	l10681
  9908  00A2                     l10675:	
  9909                           
  9910                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9911  00A2  0020               	movlb	0	; select bank0
  9912  00A3  352C               	lslf	Load_Main@i,w
  9913  00A4  3E32               	addlw	(_Load+11)& (0+255)
  9914  00A5  0086               	movwf	6
  9915  00A6  3001               	movlw	1	; select bank2/3
  9916  00A7  0087               	movwf	7
  9917  00A8  3F40               	moviw [0]fsr1
  9918  00A9  00A8               	movwf	??_Load_Main
  9919  00AA  3F41               	moviw [1]fsr1
  9920  00AB  00A9               	movwf	??_Load_Main+1
  9921  00AC  0828               	movf	??_Load_Main,w
  9922  00AD  0022               	movlb	2	; select bank2
  9923  00AE  07AC               	addwf	(_Load^(0+256)+5),f
  9924  00AF  0020               	movlb	0	; select bank0
  9925  00B0  0829               	movf	??_Load_Main+1,w
  9926  00B1  0022               	movlb	2	; select bank2
  9927  00B2  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
  9928                           
  9929                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9930  00B3  0020               	movlb	0	; select bank0
  9931  00B4  352C               	lslf	Load_Main@i,w
  9932  00B5  3E3C               	addlw	(_Load+21)& (0+255)
  9933  00B6  0086               	movwf	6
  9934  00B7  3001               	movlw	1	; select bank2/3
  9935  00B8  0087               	movwf	7
  9936  00B9  3F40               	moviw [0]fsr1
  9937  00BA  00A8               	movwf	??_Load_Main
  9938  00BB  3F41               	moviw [1]fsr1
  9939  00BC  00A9               	movwf	??_Load_Main+1
  9940  00BD  0828               	movf	??_Load_Main,w
  9941  00BE  0022               	movlb	2	; select bank2
  9942  00BF  07AE               	addwf	(_Load^(0+256)+7),f
  9943  00C0  0020               	movlb	0	; select bank0
  9944  00C1  0829               	movf	??_Load_Main+1,w
  9945  00C2  0022               	movlb	2	; select bank2
  9946  00C3  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
  9947  00C4  3001               	movlw	1
  9948  00C5  0020               	movlb	0	; select bank0
  9949  00C6  07AC               	addwf	Load_Main@i,f
  9950  00C7  3000               	movlw	0
  9951  00C8  3DAD               	addwfc	Load_Main@i+1,f
  9952  00C9  082D               	movf	Load_Main@i+1,w
  9953  00CA  3A80               	xorlw	128
  9954  00CB  00A8               	movwf	??_Load_Main
  9955  00CC  3080               	movlw	128
  9956  00CD  0228               	subwf	??_Load_Main,w
  9957  00CE  1D03               	skipz
  9958  00CF  28D2               	goto	u12525
  9959  00D0  3004               	movlw	4
  9960  00D1  022C               	subwf	Load_Main@i,w
  9961  00D2                     u12525:	
  9962  00D2  1C03               	skipc
  9963  00D3  28A2               	goto	l10675
  9964  00D4                     l10681:	
  9965                           
  9966                           ;OverLoad_B1.c: 103: }
  9967                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9968  00D4  3003               	movlw	3
  9969  00D5  0020               	movlb	0	; select bank0
  9970  00D6  00A0               	movwf	___lwdiv@divisor
  9971  00D7  3000               	movlw	0
  9972  00D8  00A1               	movwf	___lwdiv@divisor+1
  9973  00D9  0022               	movlb	2	; select bank2
  9974  00DA  082D               	movf	((_Load+1)^(0+256)+5),w
  9975  00DB  0020               	movlb	0	; select bank0
  9976  00DC  01A3               	clrf	___lwdiv@dividend+1
  9977  00DD  07A3               	addwf	___lwdiv@dividend+1,f
  9978  00DE  0022               	movlb	2	; select bank2
  9979  00DF  082C               	movf	(_Load^(0+256)+5),w
  9980  00E0  0020               	movlb	0	; select bank0
  9981  00E1  01A2               	clrf	___lwdiv@dividend
  9982  00E2  07A2               	addwf	___lwdiv@dividend,f
  9983  00E3  3188  2000  3180   	fcall	___lwdiv
  9984  00E6  0020               	movlb	0	; select bank0
  9985  00E7  0821               	movf	?___lwdiv+1,w
  9986  00E8  0022               	movlb	2	; select bank2
  9987  00E9  01AD               	clrf	((_Load+1)^(0+256)+5)
  9988  00EA  07AD               	addwf	((_Load+1)^(0+256)+5),f
  9989  00EB  0020               	movlb	0	; select bank0
  9990  00EC  0820               	movf	?___lwdiv,w
  9991  00ED  0022               	movlb	2	; select bank2
  9992  00EE  01AC               	clrf	(_Load^(0+256)+5)
  9993  00EF  07AC               	addwf	(_Load^(0+256)+5),f
  9994                           
  9995                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  9996  00F0  3003               	movlw	3
  9997  00F1  0020               	movlb	0	; select bank0
  9998  00F2  00A0               	movwf	___lwdiv@divisor
  9999  00F3  3000               	movlw	0
 10000  00F4  00A1               	movwf	___lwdiv@divisor+1
 10001  00F5  0022               	movlb	2	; select bank2
 10002  00F6  082F               	movf	((_Load+1)^(0+256)+7),w
 10003  00F7  0020               	movlb	0	; select bank0
 10004  00F8  01A3               	clrf	___lwdiv@dividend+1
 10005  00F9  07A3               	addwf	___lwdiv@dividend+1,f
 10006  00FA  0022               	movlb	2	; select bank2
 10007  00FB  082E               	movf	(_Load^(0+256)+7),w
 10008  00FC  0020               	movlb	0	; select bank0
 10009  00FD  01A2               	clrf	___lwdiv@dividend
 10010  00FE  07A2               	addwf	___lwdiv@dividend,f
 10011  00FF  3188  2000  3180   	fcall	___lwdiv
 10012  0102  0020               	movlb	0	; select bank0
 10013  0103  0821               	movf	?___lwdiv+1,w
 10014  0104  0022               	movlb	2	; select bank2
 10015  0105  01AF               	clrf	((_Load+1)^(0+256)+7)
 10016  0106  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10017  0107  0020               	movlb	0	; select bank0
 10018  0108  0820               	movf	?___lwdiv,w
 10019  0109  0022               	movlb	2	; select bank2
 10020  010A  01AE               	clrf	(_Load^(0+256)+7)
 10021  010B  07AE               	addwf	(_Load^(0+256)+7),f
 10022                           
 10023                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10024  010C  319E  265D  3180   	fcall	_setLoad_AH_AL_Restore
 10025                           
 10026                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
 10027  010F  0022               	movlb	2	; select bank2
 10028  0110  082D               	movf	((_Load+1)^(0+256)+5),w
 10029  0111  022F               	subwf	((_Load+1)^(0+256)+7),w
 10030  0112  1D03               	skipz
 10031  0113  2916               	goto	u12535
 10032  0114  082C               	movf	(_Load^(0+256)+5),w
 10033  0115  022E               	subwf	(_Load^(0+256)+7),w
 10034  0116                     u12535:	
 10035  0116  1803               	skipnc
 10036  0117  0008               	return
 10037                           
 10038                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10039  0118  3005               	movlw	5
 10040  0119  3E27               	addlw	_Load& (0+255)
 10041  011A  0086               	movwf	6
 10042  011B  3001               	movlw	1	; select bank2/3
 10043  011C  0087               	movwf	7
 10044  011D  092E               	comf	(_Load^(0+256)+7),w
 10045  011E  0020               	movlb	0	; select bank0
 10046  011F  00A8               	movwf	??_Load_Main
 10047  0120  0022               	movlb	2	; select bank2
 10048  0121  092F               	comf	((_Load+1)^(0+256)+7),w
 10049  0122  0020               	movlb	0	; select bank0
 10050  0123  00A9               	movwf	??_Load_Main+1
 10051  0124  0AA8               	incf	??_Load_Main,f
 10052  0125  1903               	skipnz
 10053  0126  0AA9               	incf	??_Load_Main+1,f
 10054  0127  3F40               	moviw [0]fsr1
 10055  0128  0728               	addwf	??_Load_Main,w
 10056  0129  0022               	movlb	2	; select bank2
 10057  012A  00C6               	movwf	(_Load^(0+256)+31)
 10058  012B  3F41               	moviw [1]fsr1
 10059  012C  0020               	movlb	0	; select bank0
 10060  012D  3D29               	addwfc	??_Load_Main+1,w
 10061  012E  0022               	movlb	2	; select bank2
 10062  012F  00C7               	movwf	(_Load^(0+256)+32)
 10063                           
 10064                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10065  0130  01AC               	clrf	(_Load^(0+256)+5)
 10066  0131  01AD               	clrf	((_Load+1)^(0+256)+5)
 10067                           
 10068                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10069  0132  01AE               	clrf	(_Load^(0+256)+7)
 10070  0133  01AF               	clrf	((_Load+1)^(0+256)+7)
 10071                           
 10072                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10073  0134  1DA7               	btfss	_Load^(0+256),3
 10074  0135  2995               	goto	l10721
 10075                           
 10076                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10077  0136  3002               	movlw	2
 10078  0137  0250               	subwf	(_Load^(0+256)+41),w
 10079  0138  1803               	skipnc
 10080  0139  2995               	goto	l10721
 10081                           
 10082                           ;OverLoad_B1.c: 115: Load.Count++;
 10083  013A  3001               	movlw	1
 10084  013B  0020               	movlb	0	; select bank0
 10085  013C  00A8               	movwf	??_Load_Main
 10086  013D  0828               	movf	??_Load_Main,w
 10087  013E  0022               	movlb	2	; select bank2
 10088  013F  07D0               	addwf	(_Load^(0+256)+41),f
 10089                           
 10090                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10091  0140  319B  2352  3180   	fcall	_getDimmer_Load_Status
 10092  0143  0020               	movlb	0	; select bank0
 10093  0144  00A8               	movwf	??_Load_Main
 10094  0145  0828               	movf	??_Load_Main,w
 10095  0146  00AB               	movwf	Load_Main@Load_Status
 10096                           
 10097                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10098  0147  319D  254D  3180   	fcall	_getMain_Lights_Count
 10099  014A  0020               	movlb	0	; select bank0
 10100  014B  00A8               	movwf	??_Load_Main
 10101  014C  0828               	movf	??_Load_Main,w
 10102  014D  0022               	movlb	2	; select bank2
 10103  014E  00D3               	movwf	(_Load^(0+256)+44)
 10104                           
 10105                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10106  014F  0850               	movf	(_Load^(0+256)+41),w
 10107  0150  3A01               	xorlw	1
 10108  0151  1D03               	skipz
 10109  0152  295D               	goto	l10707
 10110                           
 10111                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10112  0153  3002               	movlw	2
 10113  0154  0020               	movlb	0	; select bank0
 10114  0155  00A8               	movwf	??_Load_Main
 10115  0156  0828               	movf	??_Load_Main,w
 10116  0157  0022               	movlb	2	; select bank2
 10117  0158  00D2               	movwf	(_Load^(0+256)+43)
 10118                           
 10119                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10120  0159  30E8               	movlw	232
 10121  015A  00CC               	movwf	(_Load^(0+256)+37)
 10122  015B  3003               	movlw	3
 10123  015C  2968               	goto	L5
 10124  015D                     l10707:	
 10125                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10126                           
 10127  015D  0850               	movf	(_Load^(0+256)+41),w
 10128  015E  3A02               	xorlw	2
 10129  015F  1D03               	skipz
 10130  0160  2995               	goto	l10721
 10131                           
 10132                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10133  0161  0853               	movf	(_Load^(0+256)+44),w
 10134  0162  3A01               	xorlw	1
 10135  0163  1D03               	skipz
 10136  0164  296A               	goto	l10713
 10137                           
 10138                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10139  0165  3037               	movlw	55
 10140  0166  00CC               	movwf	(_Load^(0+256)+37)
 10141  0167  3000               	movlw	0
 10142  0168                     L5:	
 10143  0168  00CD               	movwf	(_Load^(0+256)+38)
 10144                           
 10145                           ;OverLoad_B1.c: 124: } else {
 10146  0169  2995               	goto	l10721
 10147  016A                     l10713:	
 10148                           
 10149                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10150  016A  0020               	movlb	0	; select bank0
 10151  016B  08AB               	movf	Load_Main@Load_Status,f
 10152  016C  1D03               	skipz
 10153  016D  2989               	goto	l10717
 10154                           
 10155                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10156  016E  0022               	movlb	2	; select bank2
 10157  016F  0853               	movf	(_Load^(0+256)+44),w
 10158  0170  0020               	movlb	0	; select bank0
 10159  0171  00A8               	movwf	??_Load_Main
 10160  0172  01A9               	clrf	??_Load_Main+1
 10161  0173  0828               	movf	??_Load_Main,w
 10162  0174  00A0               	movwf	___wmul@multiplier
 10163  0175  0829               	movf	??_Load_Main+1,w
 10164  0176  00A1               	movwf	___wmul@multiplier+1
 10165  0177  3037               	movlw	55
 10166  0178  00A2               	movwf	___wmul@multiplicand
 10167  0179  3000               	movlw	0
 10168  017A  00A3               	movwf	___wmul@multiplicand+1
 10169  017B  319E  2696  3180   	fcall	___wmul
 10170  017E  0020               	movlb	0	; select bank0
 10171  017F  0821               	movf	?___wmul+1,w
 10172  0180  0022               	movlb	2	; select bank2
 10173  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10174  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10175  0183  0020               	movlb	0	; select bank0
 10176  0184  0820               	movf	?___wmul,w
 10177  0185  0022               	movlb	2	; select bank2
 10178  0186  01CC               	clrf	(_Load^(0+256)+37)
 10179  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10180                           
 10181                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10182  0188  2995               	goto	l10721
 10183  0189                     l10717:	
 10184  0189  0020               	movlb	0	; select bank0
 10185  018A  082B               	movf	Load_Main@Load_Status,w
 10186  018B  3A01               	xorlw	1
 10187  018C  1D03               	skipz
 10188  018D  2995               	goto	l10721
 10189                           
 10190                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10191  018E  0022               	movlb	2	; select bank2
 10192  018F  0830               	movf	(_Load^(0+256)+9),w
 10193  0190  3E37               	addlw	55
 10194  0191  00CC               	movwf	(_Load^(0+256)+37)
 10195  0192  3000               	movlw	0
 10196  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10197  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10198  0195                     l10721:	
 10199                           
 10200                           ;OverLoad_B1.c: 129: }
 10201                           ;OverLoad_B1.c: 130: }
 10202                           ;OverLoad_B1.c: 131: }
 10203                           ;OverLoad_B1.c: 132: }
 10204                           ;OverLoad_B1.c: 133: }
 10205                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10206  0195  0022               	movlb	2	; select bank2
 10207  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10208  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10209  0198  1D03               	skipz
 10210  0199  299C               	goto	u12615
 10211  019A  084C               	movf	(_Load^(0+256)+37),w
 10212  019B  0246               	subwf	(_Load^(0+256)+31),w
 10213  019C                     u12615:	
 10214  019C  1C03               	skipc
 10215  019D  29AB               	goto	l10731
 10216                           
 10217                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10218  019E  3001               	movlw	1
 10219  019F  0020               	movlb	0	; select bank0
 10220  01A0  00A8               	movwf	??_Load_Main
 10221  01A1  0828               	movf	??_Load_Main,w
 10222  01A2  0022               	movlb	2	; select bank2
 10223  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10224                           
 10225                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10226  01A4  0851               	movf	(_Load^(0+256)+42),w
 10227  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10228  01A6  1803               	skipnc
 10229  01A7  0008               	return
 10230                           
 10231                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10232  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10233                           
 10234                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10235  01A9  16A7               	bsf	_Load^(0+256),5
 10236                           
 10237                           ;OverLoad_B1.c: 161: }
 10238                           ;OverLoad_B1.c: 162: } else {
 10239  01AA  0008               	return
 10240  01AB                     l10731:	
 10241                           
 10242                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10243  01AB  01D1               	clrf	(_Load^(0+256)+42)
 10244                           
 10245                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10246  01AC  1DA7               	btfss	_Load^(0+256),3
 10247  01AD  0008               	return
 10248                           
 10249                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10250  01AE  3001               	movlw	1
 10251  01AF  0020               	movlb	0	; select bank0
 10252  01B0  00A8               	movwf	??_Load_Main
 10253  01B1  0828               	movf	??_Load_Main,w
 10254  01B2  0022               	movlb	2	; select bank2
 10255  01B3  07D4               	addwf	(_Load^(0+256)+45),f
 10256                           
 10257                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10258  01B4  3003               	movlw	3
 10259  01B5  0254               	subwf	(_Load^(0+256)+45),w
 10260  01B6  1C03               	skipc
 10261  01B7  0008               	return
 10262                           
 10263                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10264  01B8  01D4               	clrf	(_Load^(0+256)+45)
 10265                           
 10266                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10267  01B9  17A7               	bsf	_Load^(0+256),7
 10268                           
 10269                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10270  01BA  11A7               	bcf	_Load^(0+256),3
 10271                           
 10272                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10273  01BB  01D0               	clrf	(_Load^(0+256)+41)
 10274                           
 10275                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10276  01BC  0847               	movf	((_Load+1)^(0+256)+31),w
 10277  01BD  01B1               	clrf	((_Load+1)^(0+256)+9)
 10278  01BE  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10279  01BF  0846               	movf	(_Load^(0+256)+31),w
 10280  01C0  01B0               	clrf	(_Load^(0+256)+9)
 10281  01C1  07B0               	addwf	(_Load^(0+256)+9),f
 10282                           
 10283                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10284  01C2  3003               	movlw	3
 10285  01C3  0020               	movlb	0	; select bank0
 10286  01C4  00A8               	movwf	??_Load_Main
 10287  01C5  0828               	movf	??_Load_Main,w
 10288  01C6  0022               	movlb	2	; select bank2
 10289  01C7  00D2               	movwf	(_Load^(0+256)+43)
 10290                           
 10291                           ;OverLoad_B1.c: 176: }
 10292                           ;OverLoad_B1.c: 177: }
 10293                           ;OverLoad_B1.c: 200: }
 10294                           ;OverLoad_B1.c: 201: }
 10295                           ;OverLoad_B1.c: 202: }
 10296                           ;OverLoad_B1.c: 203: } else {
 10297  01C8  0008               	return
 10298  01C9                     l1738:	
 10299                           
 10300                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10301  01C9  1627               	bsf	_Load^(0+256),4
 10302                           
 10303                           ;OverLoad_B1.c: 205: }
 10304                           ;OverLoad_B1.c: 206: } else {
 10305  01CA  0008               	return
 10306  01CB                     l1737:	
 10307                           
 10308                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10309  01CB  1D27               	btfss	_Load^(0+256),2
 10310  01CC  29DE               	goto	l10769
 10311                           
 10312                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10313  01CD  1127               	bcf	_Load^(0+256),2
 10314                           
 10315                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10316  01CE  1227               	bcf	_Load^(0+256),4
 10317                           
 10318                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10319  01CF  01A8               	clrf	(_Load^(0+256)+1)
 10320  01D0  01A9               	clrf	((_Load+1)^(0+256)+1)
 10321                           
 10322                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10323  01D1  319E  265D  3180   	fcall	_setLoad_AH_AL_Restore
 10324                           
 10325                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10326  01D4  0022               	movlb	2	; select bank2
 10327  01D5  01D1               	clrf	(_Load^(0+256)+42)
 10328                           
 10329                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10330  01D6  01D4               	clrf	(_Load^(0+256)+45)
 10331                           
 10332                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10333  01D7  01AC               	clrf	(_Load^(0+256)+5)
 10334  01D8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10335                           
 10336                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10337  01D9  01AE               	clrf	(_Load^(0+256)+7)
 10338  01DA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10339                           
 10340                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10341  01DB  11A7               	bcf	_Load^(0+256),3
 10342                           
 10343                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10344  01DC  01D0               	clrf	(_Load^(0+256)+41)
 10345                           
 10346                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10347  01DD  13A7               	bcf	_Load^(0+256),7
 10348  01DE                     l10769:	
 10349                           
 10350                           ;OverLoad_B1.c: 248: }
 10351                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10352  01DE  1EA7               	btfss	_Load^(0+256),5
 10353  01DF  0008               	return
 10354                           
 10355                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10356  01E0  3001               	movlw	1
 10357  01E1  07AA               	addwf	(_Load^(0+256)+3),f
 10358  01E2  3000               	movlw	0
 10359  01E3  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10360                           
 10361                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10362  01E4  3003               	movlw	3
 10363  01E5  022B               	subwf	((_Load+1)^(0+256)+3),w
 10364  01E6  30E8               	movlw	232
 10365  01E7  1903               	skipnz
 10366  01E8  022A               	subwf	(_Load^(0+256)+3),w
 10367  01E9  1C03               	skipc
 10368  01EA  0008               	return
 10369                           
 10370                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10371  01EB  01AA               	clrf	(_Load^(0+256)+3)
 10372  01EC  01AB               	clrf	((_Load+1)^(0+256)+3)
 10373                           
 10374                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10375  01ED  12A7               	bcf	_Load^(0+256),5
 10376                           
 10377                           ;OverLoad_B1.c: 254: }
 10378                           ;OverLoad_B1.c: 255: }
 10379                           ;OverLoad_B1.c: 256: }
 10380                           ;OverLoad_B1.c: 257: } else {
 10381  01EE  0008               	return
 10382  01EF                     l1727:	
 10383                           
 10384                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10385  01EF  0021               	movlb	1	; select bank1
 10386  01F0  1C20               	btfss	_myMain^(0+128),0
 10387  01F1  0008               	return
 10388                           
 10389                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10390  01F2  0022               	movlb	2	; select bank2
 10391  01F3  1427               	bsf	_Load^(0+256),0
 10392  01F4  0008               	return
 10393  01F5                     __end_of_Load_Main:	
 10394                           
 10395                           	psect	text52
 10396  1D4D                     __ptext52:	
 10397 ;; *************** function _getMain_Lights_Count *****************
 10398 ;; Defined at:
 10399 ;;		line 467 in file "../src/Main_B1.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  status2         1    2[BANK0 ] unsigned char 
 10404 ;;  status1         1    1[BANK0 ] unsigned char 
 10405 ;;  count           1    0[BANK0 ] unsigned char 
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  1    wreg      unsigned char 
 10408 ;; Registers used:
 10409 ;;		wreg, status,2, status,0
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;Total ram usage:        3 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; Hardware stack levels required when called:    5
 10422 ;; This function calls:
 10423 ;;		Nothing
 10424 ;; This function is called by:
 10425 ;;		_Load_Main
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           
 10430                           ;psect for function _getMain_Lights_Count
 10431  1D4D                     _getMain_Lights_Count:	
 10432                           
 10433                           ;Main_B1.c: 468: char count = 0;
 10434                           
 10435                           ;incstack = 0
 10436                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10437  1D4D  0020               	movlb	0	; select bank0
 10438  1D4E  01A0               	clrf	getMain_Lights_Count@count
 10439                           
 10440                           ;Main_B1.c: 472: char status1 = 0;
 10441  1D4F  01A1               	clrf	getMain_Lights_Count@status1
 10442                           
 10443                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10444  1D50  3000               	movlw	0
 10445  1D51  0022               	movlb	2	; select bank2
 10446  1D52  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10447  1D53  3001               	movlw	1
 10448  1D54  0020               	movlb	0	; select bank0
 10449  1D55  00A1               	movwf	getMain_Lights_Count@status1
 10450                           
 10451                           ;Main_B1.c: 476: char status2 = 0;
 10452  1D56  01A2               	clrf	getMain_Lights_Count@status2
 10453                           
 10454                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10455  1D57  3000               	movlw	0
 10456  1D58  0023               	movlb	3	; select bank3
 10457  1D59  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10458  1D5A  3001               	movlw	1
 10459  1D5B  0020               	movlb	0	; select bank0
 10460  1D5C  00A2               	movwf	getMain_Lights_Count@status2
 10461                           
 10462                           ;Main_B1.c: 501: return count = (status1 + status2);
 10463  1D5D  0821               	movf	getMain_Lights_Count@status1,w
 10464  1D5E  0722               	addwf	getMain_Lights_Count@status2,w
 10465  1D5F  00A0               	movwf	getMain_Lights_Count@count
 10466  1D60  0008               	return
 10467  1D61                     __end_of_getMain_Lights_Count:	
 10468                           
 10469                           	psect	text53
 10470  1B52                     __ptext53:	
 10471 ;; *************** function _getDimmer_Load_Status *****************
 10472 ;; Defined at:
 10473 ;;		line 888 in file "../src/Dimmer_B1.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;  status          1    0[BANK0 ] unsigned char 
 10478 ;; Return value:  Size  Location     Type
 10479 ;;                  1    wreg      unsigned char 
 10480 ;; Registers used:
 10481 ;;		wreg, status,2
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;Total ram usage:        1 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    5
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		_Load_Main
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _getDimmer_Load_Status
 10503  1B52                     _getDimmer_Load_Status:	
 10504                           
 10505                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10509  1B52  3000               	movlw	0
 10510  1B53  0021               	movlb	1	; select bank1
 10511  1B54  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10512  1B55  3001               	movlw	1
 10513  1B56  0020               	movlb	0	; select bank0
 10514  1B57  00A0               	movwf	getDimmer_Load_Status@status
 10515                           
 10516                           ;Dimmer_B1.c: 890: return status;
 10517  1B58  0820               	movf	getDimmer_Load_Status@status,w
 10518  1B59  0008               	return
 10519  1B5A                     __end_of_getDimmer_Load_Status:	
 10520                           
 10521                           	psect	text54
 10522  1B4A                     __ptext54:	
 10523 ;; *************** function _getDimmer_LoadGO *****************
 10524 ;; Defined at:
 10525 ;;		line 623 in file "../src/Dimmer_B1.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  1    wreg      unsigned char 
 10532 ;; Registers used:
 10533 ;;		wreg, status,2
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:        1 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    5
 10546 ;; This function calls:
 10547 ;;		Nothing
 10548 ;; This function is called by:
 10549 ;;		_Load_Main
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           
 10554                           ;psect for function _getDimmer_LoadGO
 10555  1B4A                     _getDimmer_LoadGO:	
 10556                           
 10557                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10558                           
 10559                           ;incstack = 0
 10560                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10561  1B4A  3000               	movlw	0
 10562  1B4B  0021               	movlb	1	; select bank1
 10563  1B4C  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10564  1B4D  3001               	movlw	1
 10565  1B4E  0020               	movlb	0	; select bank0
 10566  1B4F  00A0               	movwf	getDimmer_LoadGO@loadgo
 10567                           
 10568                           ;Dimmer_B1.c: 625: return loadgo;
 10569  1B50  0820               	movf	getDimmer_LoadGO@loadgo,w
 10570  1B51  0008               	return
 10571  1B52                     __end_of_getDimmer_LoadGO:	
 10572                           
 10573                           	psect	text55
 10574  1117                     __ptext55:	
 10575 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10576 ;; Defined at:
 10577 ;;		line 832 in file "../src/Dimmer_B1.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  i               2    4[BANK0 ] int 
 10582 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10583 ;;  count           1    3[BANK0 ] unsigned char 
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      unsigned char 
 10586 ;; Registers used:
 10587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;Total ram usage:        5 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    6
 10600 ;; This function calls:
 10601 ;;		_DimmerLightsPointSelect
 10602 ;; This function is called by:
 10603 ;;		_Load_Main
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _getAll_DimmerLights_AdjSw
 10609  1117                     _getAll_DimmerLights_AdjSw:	
 10610                           
 10611                           ;Dimmer_B1.c: 833: char count = 2;
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10615  1117  3002               	movlw	2
 10616  1118  0020               	movlb	0	; select bank0
 10617  1119  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10618  111A  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10619  111B  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10620                           
 10621                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10622  111C  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10623                           
 10624                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10625  111D  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10626  111E  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10627  111F                     l9957:	
 10628  111F  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10629  1120  3A80               	xorlw	128
 10630  1121  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10631  1122  3080               	movlw	128
 10632  1123  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10633  1124  1D03               	skipz
 10634  1125  2928               	goto	u11265
 10635  1126  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10636  1127  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10637  1128                     u11265:	
 10638  1128  1803               	btfsc	3,0
 10639  1129  2941               	goto	l9959
 10640                           
 10641                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10642  112A  0020               	movlb	0	; select bank0
 10643  112B  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10644  112C  3E01               	addlw	1
 10645  112D  319C  24B2  3191   	fcall	_DimmerLightsPointSelect
 10646                           
 10647                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10648  1130  0020               	movlb	0	; select bank0
 10649  1131  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10650  1132  1D03               	skipz
 10651  1133  293C               	goto	l9955
 10652                           
 10653                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10654  1134  0A6F               	incf	_DimmerLights,w
 10655  1135  0086               	movwf	6
 10656  1136  3001               	movlw	1	; select bank2/3
 10657  1137  0087               	movwf	7
 10658  1138  3000               	movlw	0
 10659  1139  1B01               	btfsc	1,6
 10660  113A  3001               	movlw	1
 10661  113B  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10662  113C                     l9955:	
 10663  113C  3001               	movlw	1
 10664  113D  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10665  113E  3000               	movlw	0
 10666  113F  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10667  1140  291F               	goto	l9957
 10668  1141                     l9959:	
 10669                           
 10670                           ;Dimmer_B1.c: 840: }
 10671                           ;Dimmer_B1.c: 841: }
 10672                           ;Dimmer_B1.c: 842: return adjsw;
 10673  1141  0020               	movlb	0	; select bank0
 10674  1142  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10675  1143  0008               	return
 10676  1144                     __end_of_getAll_DimmerLights_AdjSw:	
 10677                           
 10678                           	psect	text56
 10679  1E96                     __ptext56:	
 10680 ;; *************** function ___wmul *****************
 10681 ;; Defined at:
 10682 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10685 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;  product         2    4[BANK0 ] unsigned int 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  2    0[BANK0 ] unsigned int 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        6 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    5
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_Load_Main
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function ___wmul
 10713  1E96                     ___wmul:	
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10717  1E96  0020               	movlb	0	; select bank0
 10718  1E97  01A4               	clrf	___wmul@product
 10719  1E98  01A5               	clrf	___wmul@product+1
 10720  1E99                     l10343:	
 10721  1E99  1C20               	btfss	___wmul@multiplier,0
 10722  1E9A  2E9F               	goto	l2866
 10723  1E9B  0822               	movf	___wmul@multiplicand,w
 10724  1E9C  07A4               	addwf	___wmul@product,f
 10725  1E9D  0823               	movf	___wmul@multiplicand+1,w
 10726  1E9E  3DA5               	addwfc	___wmul@product+1,f
 10727  1E9F                     l2866:	
 10728  1E9F  3001               	movlw	1
 10729  1EA0                     u11895:	
 10730  1EA0  35A2               	lslf	___wmul@multiplicand,f
 10731  1EA1  0DA3               	rlf	___wmul@multiplicand+1,f
 10732  1EA2  0B89               	decfsz	9,f
 10733  1EA3  2EA0               	goto	u11895
 10734  1EA4  3001               	movlw	1
 10735  1EA5                     u11905:	
 10736  1EA5  36A1               	lsrf	___wmul@multiplier+1,f
 10737  1EA6  0CA0               	rrf	___wmul@multiplier,f
 10738  1EA7  0B89               	decfsz	9,f
 10739  1EA8  2EA5               	goto	u11905
 10740  1EA9  0821               	movf	___wmul@multiplier+1,w
 10741  1EAA  0420               	iorwf	___wmul@multiplier,w
 10742  1EAB  1D03               	skipz
 10743  1EAC  2E99               	goto	l10343
 10744  1EAD  0825               	movf	___wmul@product+1,w
 10745  1EAE  01A1               	clrf	?___wmul+1
 10746  1EAF  07A1               	addwf	?___wmul+1,f
 10747  1EB0  0824               	movf	___wmul@product,w
 10748  1EB1  01A0               	clrf	?___wmul
 10749  1EB2  07A0               	addwf	?___wmul,f
 10750  1EB3  0008               	return
 10751  1EB4                     __end_of___wmul:	
 10752                           
 10753                           	psect	text57
 10754  0800                     __ptext57:	
 10755 ;; *************** function ___lwdiv *****************
 10756 ;; Defined at:
 10757 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;  divisor         2    0[BANK0 ] unsigned int 
 10760 ;;  dividend        2    2[BANK0 ] unsigned int 
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;  quotient        2    6[BANK0 ] unsigned int 
 10763 ;;  counter         1    5[BANK0 ] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  2    0[BANK0 ] unsigned int 
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10774 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;Total ram usage:        8 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    5
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_Load_Main
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           
 10788                           ;psect for function ___lwdiv
 10789  0800                     ___lwdiv:	
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10793  0800  0020               	movlb	0	; select bank0
 10794  0801  01A6               	clrf	___lwdiv@quotient
 10795  0802  01A7               	clrf	___lwdiv@quotient+1
 10796  0803  0821               	movf	___lwdiv@divisor+1,w
 10797  0804  0420               	iorwf	___lwdiv@divisor,w
 10798  0805  1903               	skipnz
 10799  0806  2830               	goto	l10375
 10800  0807  01A5               	clrf	___lwdiv@counter
 10801  0808  0AA5               	incf	___lwdiv@counter,f
 10802  0809                     l10363:	
 10803  0809  1BA1               	btfsc	___lwdiv@divisor+1,7
 10804  080A  2815               	goto	l10365
 10805  080B  3001               	movlw	1
 10806  080C                     u11935:	
 10807  080C  35A0               	lslf	___lwdiv@divisor,f
 10808  080D  0DA1               	rlf	___lwdiv@divisor+1,f
 10809  080E  0B89               	decfsz	9,f
 10810  080F  280C               	goto	u11935
 10811  0810  3001               	movlw	1
 10812  0811  00A4               	movwf	??___lwdiv
 10813  0812  0824               	movf	??___lwdiv,w
 10814  0813  07A5               	addwf	___lwdiv@counter,f
 10815  0814  2809               	goto	l10363
 10816  0815                     l10365:	
 10817  0815  3001               	movlw	1
 10818  0816                     u11955:	
 10819  0816  35A6               	lslf	___lwdiv@quotient,f
 10820  0817  0DA7               	rlf	___lwdiv@quotient+1,f
 10821  0818  0B89               	decfsz	9,f
 10822  0819  2816               	goto	u11955
 10823  081A  0821               	movf	___lwdiv@divisor+1,w
 10824  081B  0223               	subwf	___lwdiv@dividend+1,w
 10825  081C  1D03               	skipz
 10826  081D  2820               	goto	u11965
 10827  081E  0820               	movf	___lwdiv@divisor,w
 10828  081F  0222               	subwf	___lwdiv@dividend,w
 10829  0820                     u11965:	
 10830  0820  1C03               	skipc
 10831  0821  2827               	goto	l10371
 10832  0822  0820               	movf	___lwdiv@divisor,w
 10833  0823  02A2               	subwf	___lwdiv@dividend,f
 10834  0824  0821               	movf	___lwdiv@divisor+1,w
 10835  0825  3BA3               	subwfb	___lwdiv@dividend+1,f
 10836  0826  1426               	bsf	___lwdiv@quotient,0
 10837  0827                     l10371:	
 10838  0827  3001               	movlw	1
 10839  0828                     u11975:	
 10840  0828  36A1               	lsrf	___lwdiv@divisor+1,f
 10841  0829  0CA0               	rrf	___lwdiv@divisor,f
 10842  082A  0B89               	decfsz	9,f
 10843  082B  2828               	goto	u11975
 10844  082C  3001               	movlw	1
 10845  082D  02A5               	subwf	___lwdiv@counter,f
 10846  082E  1D03               	btfss	3,2
 10847  082F  2815               	goto	l10365
 10848  0830                     l10375:	
 10849  0830  0827               	movf	___lwdiv@quotient+1,w
 10850  0831  01A1               	clrf	?___lwdiv+1
 10851  0832  07A1               	addwf	?___lwdiv+1,f
 10852  0833  0826               	movf	___lwdiv@quotient,w
 10853  0834  01A0               	clrf	?___lwdiv
 10854  0835  07A0               	addwf	?___lwdiv,f
 10855  0836  0008               	return
 10856  0837                     __end_of___lwdiv:	
 10857                           
 10858                           	psect	text58
 10859  1AED                     __ptext58:	
 10860 ;; *************** function _Load_Initialization *****************
 10861 ;; Defined at:
 10862 ;;		line 9 in file "../src/OverLoad_B1.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;		None
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;		None
 10867 ;; Return value:  Size  Location     Type
 10868 ;;		None               void
 10869 ;; Registers used:
 10870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10871 ;; Tracked objects:
 10872 ;;		On entry : 0/0
 10873 ;;		On exit  : 0/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;Total ram usage:        0 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:    6
 10883 ;; This function calls:
 10884 ;;		_setLoad_AH_AL_Restore
 10885 ;; This function is called by:
 10886 ;;		_main
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           
 10891                           ;psect for function _Load_Initialization
 10892  1AED                     _Load_Initialization:	
 10893                           
 10894                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10895                           
 10896                           ;incstack = 0
 10897                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10898  1AED  319E  265D         	fcall	_setLoad_AH_AL_Restore
 10899  1AEF  0008               	return
 10900  1AF0                     __end_of_Load_Initialization:	
 10901                           
 10902                           	psect	text59
 10903  1E5D                     __ptext59:	
 10904 ;; *************** function _setLoad_AH_AL_Restore *****************
 10905 ;; Defined at:
 10906 ;;		line 285 in file "../src/OverLoad_B1.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;  i               1    1[BANK0 ] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;		None               void
 10913 ;; Registers used:
 10914 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;Total ram usage:        2 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    5
 10927 ;; This function calls:
 10928 ;;		Nothing
 10929 ;; This function is called by:
 10930 ;;		_Load_Initialization
 10931 ;;		_Load_Main
 10932 ;; This function uses a non-reentrant model
 10933 ;;
 10934                           
 10935                           
 10936                           ;psect for function _setLoad_AH_AL_Restore
 10937  1E5D                     _setLoad_AH_AL_Restore:	
 10938                           
 10939                           ;OverLoad_B1.c: 286: char i;
 10940                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10941                           
 10942                           ;incstack = 0
 10943                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10944  1E5D  0020               	movlb	0	; select bank0
 10945  1E5E  01A1               	clrf	setLoad_AH_AL_Restore@i
 10946  1E5F                     L6:	
 10947  1E5F  3005               	movlw	5
 10948  1E60  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10949  1E61  1803               	btfsc	3,0
 10950  1E62  0008               	return
 10951                           
 10952                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10953  1E63  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10954  1E64  3E32               	addlw	(_Load+11)& (0+255)
 10955  1E65  0086               	movwf	6
 10956  1E66  3001               	movlw	1	; select bank2/3
 10957  1E67  0087               	movwf	7
 10958  1E68  3000               	movlw	0
 10959  1E69  3FC0               	movwi [0]fsr1
 10960  1E6A  3FC1               	movwi [1]fsr1
 10961                           
 10962                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10963  1E6B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10964  1E6C  3E3C               	addlw	(_Load+21)& (0+255)
 10965  1E6D  0086               	movwf	6
 10966  1E6E  3001               	movlw	1	; select bank2/3
 10967  1E6F  0087               	movwf	7
 10968  1E70  30FF               	movlw	255
 10969  1E71  3FC0               	movwi [0]fsr1
 10970  1E72  30FF               	movlw	255
 10971  1E73  3FC1               	movwi [1]fsr1
 10972  1E74  3001               	movlw	1
 10973  1E75  00A0               	movwf	??_setLoad_AH_AL_Restore
 10974  1E76  0820               	movf	??_setLoad_AH_AL_Restore,w
 10975  1E77  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10976  1E78  2E5F               	goto	L6
 10977  1E79                     __end_of_setLoad_AH_AL_Restore:	
 10978                           
 10979                           	psect	text60
 10980  1BBA                     __ptext60:	
 10981 ;; *************** function _LED_Main *****************
 10982 ;; Defined at:
 10983 ;;		line 47 in file "../src/LED_B1.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;		None
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;		None
 10988 ;; Return value:  Size  Location     Type
 10989 ;;		None               void
 10990 ;; Registers used:
 10991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10992 ;; Tracked objects:
 10993 ;;		On entry : 0/0
 10994 ;;		On exit  : 0/0
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;Total ram usage:        0 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; Hardware stack levels required when called:    7
 11004 ;; This function calls:
 11005 ;;		_setLED_Main
 11006 ;; This function is called by:
 11007 ;;		_main
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           
 11012                           ;psect for function _LED_Main
 11013  1BBA                     _LED_Main:	
 11014                           
 11015                           ;LED_B1.c: 53: setLED_Main(1);
 11016                           
 11017                           ;incstack = 0
 11018                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11019  1BBA  3001               	movlw	1
 11020  1BBB  3193  239F  319B   	fcall	_setLED_Main
 11021                           
 11022                           ;LED_B1.c: 56: setLED_Main(2);
 11023  1BBE  3002               	movlw	2
 11024  1BBF  3193  239F  319B   	fcall	_setLED_Main
 11025                           
 11026                           ;LED_B1.c: 62: setLED_Main(99);
 11027  1BC2  3063               	movlw	99
 11028  1BC3  3193  239F         	fcall	_setLED_Main
 11029  1BC5  0008               	return
 11030  1BC6                     __end_of_LED_Main:	
 11031                           
 11032                           	psect	text61
 11033  139F                     __ptext61:	
 11034 ;; *************** function _setLED_Main *****************
 11035 ;; Defined at:
 11036 ;;		line 221 in file "../src/LED_B1.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  led             1    wreg     unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  led             1    4[BANK0 ] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;		None               void
 11043 ;; Registers used:
 11044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;Total ram usage:        3 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    6
 11057 ;; This function calls:
 11058 ;;		_LedPointSelect
 11059 ;; This function is called by:
 11060 ;;		_LED_Main
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function _setLED_Main
 11066  139F                     _setLED_Main:	
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11070                           ;setLED_Main@led stored from wreg
 11071  139F  0020               	movlb	0	; select bank0
 11072  13A0  00A4               	movwf	setLED_Main@led
 11073                           
 11074                           ;LED_B1.c: 222: LedPointSelect(led);
 11075  13A1  0824               	movf	setLED_Main@led,w
 11076  13A2  319E  26F2  3193   	fcall	_LedPointSelect
 11077                           
 11078                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11079  13A5  0021               	movlb	1	; select bank1
 11080  13A6  084D               	movf	_LED^(0+128),w
 11081  13A7  0086               	movwf	6
 11082  13A8  3001               	movlw	1	; select bank2/3
 11083  13A9  0087               	movwf	7
 11084  13AA  1C81               	btfss	1,1
 11085  13AB  0008               	return
 11086                           
 11087                           ;LED_B1.c: 224: LED->Time++;
 11088  13AC  0A4D               	incf	_LED^(0+128),w
 11089  13AD  0086               	movwf	6
 11090  13AE  3001               	movlw	1	; select bank2/3
 11091  13AF  0087               	movwf	7
 11092  13B0  3001               	movlw	1
 11093  13B1  0781               	addwf	1,f
 11094  13B2  3141               	addfsr 1,1
 11095  13B3  1803               	skipnc
 11096  13B4  0A81               	incf	1,f
 11097                           
 11098                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11099  13B5  0A4D               	incf	_LED^(0+128),w
 11100  13B6  0086               	movwf	6
 11101  13B7  3001               	movlw	1	; select bank2/3
 11102  13B8  0087               	movwf	7
 11103  13B9  3F40               	moviw [0]fsr1
 11104  13BA  0020               	movlb	0	; select bank0
 11105  13BB  00A2               	movwf	??_setLED_Main
 11106  13BC  3F41               	moviw [1]fsr1
 11107  13BD  00A3               	movwf	??_setLED_Main+1
 11108  13BE  3000               	movlw	0
 11109  13BF  0223               	subwf	??_setLED_Main+1,w
 11110  13C0  3032               	movlw	50
 11111  13C1  1903               	skipnz
 11112  13C2  0222               	subwf	??_setLED_Main,w
 11113  13C3  1C03               	skipc
 11114  13C4  0008               	return
 11115                           
 11116                           ;LED_B1.c: 226: LED->Time = 0;
 11117  13C5  0021               	movlb	1	; select bank1
 11118  13C6  0A4D               	incf	_LED^(0+128),w
 11119  13C7  0086               	movwf	6
 11120  13C8  3001               	movlw	1	; select bank2/3
 11121  13C9  0087               	movwf	7
 11122  13CA  3000               	movlw	0
 11123  13CB  3FC0               	movwi [0]fsr1
 11124  13CC  3FC1               	movwi [1]fsr1
 11125                           
 11126                           ;LED_B1.c: 228: if (led == 1) {
 11127  13CD  0020               	movlb	0	; select bank0
 11128  13CE  0824               	movf	setLED_Main@led,w
 11129  13CF  3A01               	xorlw	1
 11130                           
 11131                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11132  13D0  3008               	movlw	8
 11133  13D1  1903               	btfsc	3,2
 11134  13D2  068C               	xorwf	12,f
 11135                           
 11136                           ;LED_B1.c: 230: }
 11137                           ;LED_B1.c: 233: if (led == 2) {
 11138  13D3  0824               	movf	setLED_Main@led,w
 11139  13D4  3A02               	xorlw	2
 11140  13D5  1D03               	skipz
 11141  13D6  2BD9               	goto	l1063
 11142                           
 11143                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11144  13D7  3080               	movlw	128
 11145  13D8  068E               	xorwf	14,f
 11146  13D9                     l1063:	
 11147                           
 11148                           ;LED_B1.c: 235: }
 11149                           ;LED_B1.c: 243: if (led == 99) {
 11150  13D9  0824               	movf	setLED_Main@led,w
 11151  13DA  3A63               	xorlw	99
 11152  13DB  1D03               	skipz
 11153  13DC  0008               	return
 11154                           
 11155                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11156  13DD  3020               	movlw	32
 11157  13DE  068D               	xorwf	13,f
 11158  13DF  0008               	return
 11159  13E0                     __end_of_setLED_Main:	
 11160                           
 11161                           	psect	text62
 11162  1BAE                     __ptext62:	
 11163 ;; *************** function _LED_Initialization *****************
 11164 ;; Defined at:
 11165 ;;		line 31 in file "../src/LED_B1.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;		None
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;		None
 11170 ;; Return value:  Size  Location     Type
 11171 ;;		None               void
 11172 ;; Registers used:
 11173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;Total ram usage:        0 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; Hardware stack levels required when called:    8
 11186 ;; This function calls:
 11187 ;;		_setLED_Initialization
 11188 ;; This function is called by:
 11189 ;;		_main
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           
 11194                           ;psect for function _LED_Initialization
 11195  1BAE                     _LED_Initialization:	
 11196                           
 11197                           ;LED_B1.c: 33: setLED_Initialization(1);
 11198                           
 11199                           ;incstack = 0
 11200                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11201  1BAE  3001               	movlw	1
 11202  1BAF  319C  247C  319B   	fcall	_setLED_Initialization
 11203                           
 11204                           ;LED_B1.c: 36: setLED_Initialization(2);
 11205  1BB2  3002               	movlw	2
 11206  1BB3  319C  247C  319B   	fcall	_setLED_Initialization
 11207                           
 11208                           ;LED_B1.c: 42: setLED_Initialization(99);
 11209  1BB6  3063               	movlw	99
 11210  1BB7  319C  247C         	fcall	_setLED_Initialization
 11211  1BB9  0008               	return
 11212  1BBA                     __end_of_LED_Initialization:	
 11213                           
 11214                           	psect	text63
 11215  1C7C                     __ptext63:	
 11216 ;; *************** function _setLED_Initialization *****************
 11217 ;; Defined at:
 11218 ;;		line 69 in file "../src/LED_B1.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;  led             1    wreg     unsigned char 
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  led             1    4[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;		None               void
 11225 ;; Registers used:
 11226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;Total ram usage:        1 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    7
 11239 ;; This function calls:
 11240 ;;		_LedPointSelect
 11241 ;;		_setLED
 11242 ;; This function is called by:
 11243 ;;		_LED_Initialization
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247                           
 11248                           ;psect for function _setLED_Initialization
 11249  1C7C                     _setLED_Initialization:	
 11250                           
 11251                           ;incstack = 0
 11252                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11253                           ;setLED_Initialization@led stored from wreg
 11254  1C7C  0020               	movlb	0	; select bank0
 11255  1C7D  00A4               	movwf	setLED_Initialization@led
 11256                           
 11257                           ;LED_B1.c: 70: LedPointSelect(led);
 11258  1C7E  0824               	movf	setLED_Initialization@led,w
 11259  1C7F  319E  26F2  319C   	fcall	_LedPointSelect
 11260                           
 11261                           ;LED_B1.c: 71: LED->Enable = 1;
 11262  1C82  0021               	movlb	1	; select bank1
 11263  1C83  084D               	movf	_LED^(0+128),w
 11264  1C84  0086               	movwf	6
 11265  1C85  3001               	movlw	1	; select bank2/3
 11266  1C86  0087               	movwf	7
 11267  1C87  1401               	bsf	1,0
 11268                           
 11269                           ;LED_B1.c: 72: setLED(led, 0);
 11270  1C88  0020               	movlb	0	; select bank0
 11271  1C89  01A2               	clrf	setLED@command
 11272  1C8A  0824               	movf	setLED_Initialization@led,w
 11273  1C8B  3196  264F         	fcall	_setLED
 11274  1C8D  0008               	return
 11275  1C8E                     __end_of_setLED_Initialization:	
 11276                           
 11277                           	psect	text64
 11278  1206                     __ptext64:	
 11279 ;; *************** function _Flash_Memory_Main *****************
 11280 ;; Defined at:
 11281 ;;		line 966 in file "../src/MCU_B1.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;		None
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;		None               void
 11288 ;; Registers used:
 11289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;Total ram usage:        1 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    8
 11302 ;; This function calls:
 11303 ;;		_Flash_Memory_Modify
 11304 ;;		_getMain_LightsStatus
 11305 ;; This function is called by:
 11306 ;;		_main
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function _Flash_Memory_Main
 11312  1206                     _Flash_Memory_Main:	
 11313                           
 11314                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
 11315                           
 11316                           ;incstack = 0
 11317                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11318  1206  0024               	movlb	4	; select bank4
 11319  1207  1C44               	btfss	(_Memory^(0+512)+36),0
 11320  1208  0008               	return
 11321                           
 11322                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11323  1209  319C  24C5  3192   	fcall	_getMain_LightsStatus
 11324  120C  3A00               	xorlw	0
 11325  120D  3000               	movlw	0
 11326  120E  1903               	skipnz
 11327  120F  3001               	movlw	1
 11328  1210  0020               	movlb	0	; select bank0
 11329  1211  00A6               	movwf	??_Flash_Memory_Main
 11330  1212  0DA6               	rlf	??_Flash_Memory_Main,f
 11331  1213  0024               	movlb	4	; select bank4
 11332  1214  0844               	movf	(_Memory^(0+512)+36),w
 11333  1215  0020               	movlb	0	; select bank0
 11334  1216  0626               	xorwf	??_Flash_Memory_Main,w
 11335  1217  39FD               	andlw	-3
 11336  1218  0626               	xorwf	??_Flash_Memory_Main,w
 11337  1219  0024               	movlb	4	; select bank4
 11338  121A  00C4               	movwf	(_Memory^(0+512)+36)
 11339                           
 11340                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
 11341  121B  1CC4               	btfss	(_Memory^(0+512)+36),1
 11342  121C  2A36               	goto	l1333
 11343                           
 11344                           ;MCU_B1.c: 970: Memory.Runtime = 1;
 11345  121D  15C4               	bsf	(_Memory^(0+512)+36),3
 11346                           
 11347                           ;MCU_B1.c: 971: Memory.Time++;
 11348  121E  3001               	movlw	1
 11349  121F  07C2               	addwf	(_Memory^(0+512)+34),f
 11350  1220  3000               	movlw	0
 11351  1221  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11352                           
 11353                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
 11354  1222  3022               	movlw	34
 11355  1223  3E20               	addlw	_Memory& (0+255)
 11356  1224  0086               	movwf	6
 11357  1225  3002               	movlw	2	; select bank4/5
 11358  1226  0087               	movwf	7
 11359  1227  3F40               	moviw [0]fsr1
 11360  1228  3A19               	xorlw	25
 11361  1229  1D03               	skipz
 11362  122A  2A2D               	goto	u12165
 11363  122B  3F41               	moviw [1]fsr1
 11364  122C  3A00               	xorlw	0
 11365  122D                     u12165:	
 11366  122D  1D03               	skipz
 11367  122E  0008               	return
 11368                           
 11369                           ;MCU_B1.c: 973: Memory.Time = 0;
 11370  122F  01C2               	clrf	(_Memory^(0+512)+34)
 11371  1230  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11372                           
 11373                           ;MCU_B1.c: 974: Memory.Modify = 0;
 11374  1231  1044               	bcf	(_Memory^(0+512)+36),0
 11375                           
 11376                           ;MCU_B1.c: 975: Memory.GO = 0;
 11377  1232  10C4               	bcf	(_Memory^(0+512)+36),1
 11378                           
 11379                           ;MCU_B1.c: 976: Flash_Memory_Modify();
 11380  1233  3194  246E         	fcall	_Flash_Memory_Modify
 11381                           
 11382                           ;MCU_B1.c: 977: }
 11383                           ;MCU_B1.c: 978: } else {
 11384  1235  0008               	return
 11385  1236                     l1333:	
 11386                           
 11387                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
 11388  1236  1DC4               	btfss	(_Memory^(0+512)+36),3
 11389  1237  0008               	return
 11390                           
 11391                           ;MCU_B1.c: 980: Memory.Runtime = 0;
 11392  1238  11C4               	bcf	(_Memory^(0+512)+36),3
 11393                           
 11394                           ;MCU_B1.c: 981: Memory.Time = 0;
 11395  1239  01C2               	clrf	(_Memory^(0+512)+34)
 11396  123A  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11397  123B  0008               	return
 11398  123C                     __end_of_Flash_Memory_Main:	
 11399                           
 11400                           	psect	text65
 11401  146E                     __ptext65:	
 11402 ;; *************** function _Flash_Memory_Modify *****************
 11403 ;; Defined at:
 11404 ;;		line 1039 in file "../src/MCU_B1.c"
 11405 ;; Parameters:    Size  Location     Type
 11406 ;;		None
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  i               1    5[BANK0 ] unsigned char 
 11409 ;; Return value:  Size  Location     Type
 11410 ;;		None               void
 11411 ;; Registers used:
 11412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;Total ram usage:        2 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    7
 11425 ;; This function calls:
 11426 ;;		_Flash_Memory_Erasing
 11427 ;;		_Flash_Memory_Read
 11428 ;;		_Flash_Memory_Write
 11429 ;;		_setMemory_Data
 11430 ;; This function is called by:
 11431 ;;		_Flash_Memory_Main
 11432 ;; This function uses a non-reentrant model
 11433 ;;
 11434                           
 11435                           
 11436                           ;psect for function _Flash_Memory_Modify
 11437  146E                     _Flash_Memory_Modify:	
 11438                           
 11439                           ;MCU_B1.c: 1040: char i = 0;
 11440                           
 11441                           ;incstack = 0
 11442                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11443  146E  0020               	movlb	0	; select bank0
 11444  146F  01A5               	clrf	Flash_Memory_Modify@i
 11445                           
 11446                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
 11447  1470  01A5               	clrf	Flash_Memory_Modify@i
 11448  1471  3020               	movlw	32
 11449  1472  0225               	subwf	Flash_Memory_Modify@i,w
 11450  1473  1803               	btfsc	3,0
 11451  1474  2C8A               	goto	l10071
 11452  1475                     l10065:	
 11453                           
 11454                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
 11455  1475  0825               	movf	Flash_Memory_Modify@i,w
 11456  1476  319E  2628  3194   	fcall	_Flash_Memory_Read
 11457  1479  0020               	movlb	0	; select bank0
 11458  147A  00A4               	movwf	??_Flash_Memory_Modify
 11459  147B  0825               	movf	Flash_Memory_Modify@i,w
 11460  147C  3E20               	addlw	_Memory& (0+255)
 11461  147D  0086               	movwf	6
 11462  147E  3002               	movlw	2	; select bank4/5
 11463  147F  0087               	movwf	7
 11464  1480  0824               	movf	??_Flash_Memory_Modify,w
 11465  1481  0081               	movwf	1
 11466  1482  3001               	movlw	1
 11467  1483  00A4               	movwf	??_Flash_Memory_Modify
 11468  1484  0824               	movf	??_Flash_Memory_Modify,w
 11469  1485  07A5               	addwf	Flash_Memory_Modify@i,f
 11470  1486  3020               	movlw	32
 11471  1487  0225               	subwf	Flash_Memory_Modify@i,w
 11472  1488  1C03               	skipc
 11473  1489  2C75               	goto	l10065
 11474  148A                     l10071:	
 11475                           
 11476                           ;MCU_B1.c: 1043: }
 11477                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
 11478  148A  0879               	movf	_product,w
 11479  148B  0086               	movwf	6
 11480  148C  3002               	movlw	2	; select bank4/5
 11481  148D  0087               	movwf	7
 11482  148E  3002               	movlw	2	; select bank4/5
 11483  148F  3F4C               	moviw [12]fsr1
 11484  1490  00A0               	movwf	setMemory_Data@data
 11485  1491  3000               	movlw	0
 11486  1492  319B  2396  3194   	fcall	_setMemory_Data
 11487                           
 11488                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
 11489  1495  0879               	movf	_product,w
 11490  1496  0086               	movwf	6
 11491  1497  3002               	movlw	2	; select bank4/5
 11492  1498  0087               	movwf	7
 11493  1499  3002               	movlw	2	; select bank4/5
 11494  149A  3F4D               	moviw [13]fsr1
 11495  149B  0020               	movlb	0	; select bank0
 11496  149C  00A0               	movwf	setMemory_Data@data
 11497  149D  3001               	movlw	1
 11498  149E  319B  2396  3194   	fcall	_setMemory_Data
 11499                           
 11500                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
 11501  14A1  0879               	movf	_product,w
 11502  14A2  0086               	movwf	6
 11503  14A3  3002               	movlw	2	; select bank4/5
 11504  14A4  0087               	movwf	7
 11505  14A5  3002               	movlw	2	; select bank4/5
 11506  14A6  3F4E               	moviw [14]fsr1
 11507  14A7  0020               	movlb	0	; select bank0
 11508  14A8  00A0               	movwf	setMemory_Data@data
 11509  14A9  3002               	movlw	2
 11510  14AA  319B  2396  3194   	fcall	_setMemory_Data
 11511                           
 11512                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
 11513  14AD  0024               	movlb	4	; select bank4
 11514  14AE  1D44               	btfss	(_Memory^(0+512)+36),2
 11515  14AF  2CB4               	goto	l1356
 11516                           
 11517                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
 11518  14B0  1144               	bcf	(_Memory^(0+512)+36),2
 11519                           
 11520                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
 11521  14B1  0021               	movlb	1	; select bank1
 11522  14B2  11A0               	bcf	_myMain^(0+128),3
 11523                           
 11524                           ;MCU_B1.c: 1055: myMain.First = 0;
 11525  14B3  12A0               	bcf	_myMain^(0+128),5
 11526  14B4                     l1356:	
 11527                           
 11528                           ;MCU_B1.c: 1057: }
 11529                           ;MCU_B1.c: 1058: GIE = 0;
 11530  14B4  138B               	bcf	11,7	;volatile
 11531                           
 11532                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
 11533  14B5  319B  23A2  3194   	fcall	_Flash_Memory_Erasing
 11534                           
 11535                           ;MCU_B1.c: 1060: Flash_Memory_Write();
 11536  14B8  3191  2144         	fcall	_Flash_Memory_Write
 11537                           
 11538                           ;MCU_B1.c: 1061: GIE = 1;
 11539  14BA  178B               	bsf	11,7	;volatile
 11540  14BB  0008               	return
 11541  14BC                     __end_of_Flash_Memory_Modify:	
 11542                           
 11543                           	psect	text66
 11544  1BA2                     __ptext66:	
 11545 ;; *************** function _Flash_Memory_Erasing *****************
 11546 ;; Defined at:
 11547 ;;		line 1028 in file "../src/MCU_B1.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;		None
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;		None
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        0 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    6
 11568 ;; This function calls:
 11569 ;;		_Flash_Memory_Unlock
 11570 ;; This function is called by:
 11571 ;;		_Flash_Memory_Modify
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           
 11576                           ;psect for function _Flash_Memory_Erasing
 11577  1BA2                     _Flash_Memory_Erasing:	
 11578                           
 11579                           ;MCU_B1.c: 1029: CFGS = 0;
 11580                           
 11581                           ;incstack = 0
 11582                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11583  1BA2  0023               	movlb	3	; select bank3
 11584  1BA3  1315               	bcf	21,6	;volatile
 11585                           
 11586                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 11587  1BA4  3030               	movlw	48
 11588  1BA5  0092               	movwf	18	;volatile
 11589                           
 11590                           ;MCU_B1.c: 1031: PMADRL = 0x00;
 11591  1BA6  0191               	clrf	17	;volatile
 11592                           
 11593                           ;MCU_B1.c: 1032: FREE = 1;
 11594  1BA7  1615               	bsf	21,4	;volatile
 11595                           
 11596                           ;MCU_B1.c: 1033: WREN = 1;
 11597  1BA8  1515               	bsf	21,2	;volatile
 11598                           
 11599                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 11600  1BA9  319B  236B         	fcall	_Flash_Memory_Unlock
 11601                           
 11602                           ;MCU_B1.c: 1035: WREN = 0;
 11603  1BAB  0023               	movlb	3	; select bank3
 11604  1BAC  1115               	bcf	21,2	;volatile
 11605  1BAD  0008               	return
 11606  1BAE                     __end_of_Flash_Memory_Erasing:	
 11607                           
 11608                           	psect	text67
 11609  063B                     __ptext67:	
 11610 ;; *************** function _Flash_Memory_Initialization *****************
 11611 ;; Defined at:
 11612 ;;		line 925 in file "../src/MCU_B1.c"
 11613 ;; Parameters:    Size  Location     Type
 11614 ;;		None
 11615 ;; Auto vars:     Size  Location     Type
 11616 ;;  i               1   67[BANK0 ] unsigned char 
 11617 ;; Return value:  Size  Location     Type
 11618 ;;		None               void
 11619 ;; Registers used:
 11620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;Total ram usage:        2 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    8
 11633 ;; This function calls:
 11634 ;;		_Flash_Memory_Read
 11635 ;;		_Flash_Memory_Write
 11636 ;;		_setMemory_Data
 11637 ;;		_setPercentValue
 11638 ;; This function is called by:
 11639 ;;		_main
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           
 11644                           ;psect for function _Flash_Memory_Initialization
 11645  063B                     _Flash_Memory_Initialization:	
 11646                           
 11647                           ;MCU_B1.c: 926: char i = 0;
 11648                           
 11649                           ;incstack = 0
 11650                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11651  063B  0020               	movlb	0	; select bank0
 11652  063C  01E3               	clrf	Flash_Memory_Initialization@i
 11653                           
 11654                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
 11655  063D  301F               	movlw	31
 11656  063E  319E  2628  3186   	fcall	_Flash_Memory_Read
 11657  0641  3AAA               	xorlw	170
 11658  0642  1D03               	skipz
 11659  0643  2EAD               	goto	l10463
 11660                           
 11661                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
 11662  0644  3000               	movlw	0
 11663  0645  319E  2628  3186   	fcall	_Flash_Memory_Read
 11664  0648  0020               	movlb	0	; select bank0
 11665  0649  00E2               	movwf	??_Flash_Memory_Initialization
 11666  064A  0879               	movf	_product,w
 11667  064B  3E0C               	addlw	12
 11668  064C  0086               	movwf	6
 11669  064D  3002               	movlw	2	; select bank4/5
 11670  064E  0087               	movwf	7
 11671  064F  0862               	movf	??_Flash_Memory_Initialization,w
 11672  0650  0081               	movwf	1
 11673                           
 11674                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
 11675  0651  3001               	movlw	1
 11676  0652  319E  2628  3186   	fcall	_Flash_Memory_Read
 11677  0655  0020               	movlb	0	; select bank0
 11678  0656  00E2               	movwf	??_Flash_Memory_Initialization
 11679  0657  0879               	movf	_product,w
 11680  0658  3E0D               	addlw	13
 11681  0659  0086               	movwf	6
 11682  065A  3002               	movlw	2	; select bank4/5
 11683  065B  0087               	movwf	7
 11684  065C  0862               	movf	??_Flash_Memory_Initialization,w
 11685  065D  0081               	movwf	1
 11686                           
 11687                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
 11688  065E  3002               	movlw	2
 11689  065F  319E  2628  3186   	fcall	_Flash_Memory_Read
 11690  0662  0020               	movlb	0	; select bank0
 11691  0663  00E2               	movwf	??_Flash_Memory_Initialization
 11692  0664  0879               	movf	_product,w
 11693  0665  3E0E               	addlw	14
 11694  0666  0086               	movwf	6
 11695  0667  3002               	movlw	2	; select bank4/5
 11696  0668  0087               	movwf	7
 11697  0669  0862               	movf	??_Flash_Memory_Initialization,w
 11698  066A  0081               	movwf	1
 11699                           
 11700                           ;MCU_B1.c: 936: i = setPercentValue(((char)(70*0.8)));
 11701  066B  3038               	movlw	56
 11702  066C  318A  2272  3186   	fcall	_setPercentValue
 11703  066F  0020               	movlb	0	; select bank0
 11704  0670  00E2               	movwf	??_Flash_Memory_Initialization
 11705  0671  0862               	movf	??_Flash_Memory_Initialization,w
 11706  0672  00E3               	movwf	Flash_Memory_Initialization@i
 11707                           
 11708                           ;MCU_B1.c: 937: product->Data[21] = i;
 11709  0673  0863               	movf	Flash_Memory_Initialization@i,w
 11710  0674  00E2               	movwf	??_Flash_Memory_Initialization
 11711  0675  0879               	movf	_product,w
 11712  0676  3E15               	addlw	21
 11713  0677  0086               	movwf	6
 11714  0678  3002               	movlw	2	; select bank4/5
 11715  0679  0087               	movwf	7
 11716  067A  0862               	movf	??_Flash_Memory_Initialization,w
 11717  067B  0081               	movwf	1
 11718                           
 11719                           ;MCU_B1.c: 938: product->Data[22] = i;
 11720  067C  0863               	movf	Flash_Memory_Initialization@i,w
 11721  067D  00E2               	movwf	??_Flash_Memory_Initialization
 11722  067E  0879               	movf	_product,w
 11723  067F  3E16               	addlw	22
 11724  0680  0086               	movwf	6
 11725  0681  3002               	movlw	2	; select bank4/5
 11726  0682  0087               	movwf	7
 11727  0683  0862               	movf	??_Flash_Memory_Initialization,w
 11728  0684  0081               	movwf	1
 11729                           
 11730                           ;MCU_B1.c: 939: product->Data[23] = i;
 11731  0685  0863               	movf	Flash_Memory_Initialization@i,w
 11732  0686  00E2               	movwf	??_Flash_Memory_Initialization
 11733  0687  0879               	movf	_product,w
 11734  0688  3E17               	addlw	23
 11735  0689  0086               	movwf	6
 11736  068A  3002               	movlw	2	; select bank4/5
 11737  068B  0087               	movwf	7
 11738  068C  0862               	movf	??_Flash_Memory_Initialization,w
 11739  068D  0081               	movwf	1
 11740                           
 11741                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11742  068E  0879               	movf	_product,w
 11743  068F  3E0C               	addlw	12
 11744  0690  0086               	movwf	6
 11745  0691  3002               	movlw	2	; select bank4/5
 11746  0692  0087               	movwf	7
 11747  0693  0801               	movf	1,w
 11748  0694  3AFF               	xorlw	255
 11749  0695  1D03               	skipz
 11750  0696  0008               	return
 11751  0697  0879               	movf	_product,w
 11752  0698  3E0D               	addlw	13
 11753  0699  0086               	movwf	6
 11754  069A  3002               	movlw	2	; select bank4/5
 11755  069B  0087               	movwf	7
 11756  069C  0801               	movf	1,w
 11757  069D  3AFF               	xorlw	255
 11758  069E  1D03               	skipz
 11759  069F  0008               	return
 11760  06A0  0879               	movf	_product,w
 11761  06A1  3E0E               	addlw	14
 11762  06A2  0086               	movwf	6
 11763  06A3  3002               	movlw	2	; select bank4/5
 11764  06A4  0087               	movwf	7
 11765  06A5  0801               	movf	1,w
 11766  06A6  3AFF               	xorlw	255
 11767  06A7  1D03               	skipz
 11768  06A8  0008               	return
 11769                           
 11770                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
 11771  06A9  0021               	movlb	1	; select bank1
 11772  06AA  15A0               	bsf	_myMain^(0+128),3
 11773                           
 11774                           ;MCU_B1.c: 943: myMain.First = 1;
 11775  06AB  16A0               	bsf	_myMain^(0+128),5
 11776                           
 11777                           ;MCU_B1.c: 944: }
 11778                           ;MCU_B1.c: 945: } else {
 11779  06AC  0008               	return
 11780  06AD                     l10463:	
 11781                           
 11782                           ;MCU_B1.c: 946: i = setPercentValue(((char)(70*0.8)));
 11783  06AD  3038               	movlw	56
 11784  06AE  318A  2272  3186   	fcall	_setPercentValue
 11785  06B1  0020               	movlb	0	; select bank0
 11786  06B2  00E2               	movwf	??_Flash_Memory_Initialization
 11787  06B3  0862               	movf	??_Flash_Memory_Initialization,w
 11788  06B4  00E3               	movwf	Flash_Memory_Initialization@i
 11789                           
 11790                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
 11791  06B5  30FF               	movlw	255
 11792  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11793  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11794  06B8  00A0               	movwf	setMemory_Data@data
 11795  06B9  3000               	movlw	0
 11796  06BA  319B  2396  3186   	fcall	_setMemory_Data
 11797                           
 11798                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
 11799  06BD  30FF               	movlw	255
 11800  06BE  0020               	movlb	0	; select bank0
 11801  06BF  00E2               	movwf	??_Flash_Memory_Initialization
 11802  06C0  0862               	movf	??_Flash_Memory_Initialization,w
 11803  06C1  00A0               	movwf	setMemory_Data@data
 11804  06C2  3001               	movlw	1
 11805  06C3  319B  2396  3186   	fcall	_setMemory_Data
 11806                           
 11807                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
 11808  06C6  30FF               	movlw	255
 11809  06C7  0020               	movlb	0	; select bank0
 11810  06C8  00E2               	movwf	??_Flash_Memory_Initialization
 11811  06C9  0862               	movf	??_Flash_Memory_Initialization,w
 11812  06CA  00A0               	movwf	setMemory_Data@data
 11813  06CB  3002               	movlw	2
 11814  06CC  319B  2396  3186   	fcall	_setMemory_Data
 11815                           
 11816                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
 11817  06CF  30FF               	movlw	255
 11818  06D0  0020               	movlb	0	; select bank0
 11819  06D1  00E2               	movwf	??_Flash_Memory_Initialization
 11820  06D2  0862               	movf	??_Flash_Memory_Initialization,w
 11821  06D3  00A0               	movwf	setMemory_Data@data
 11822  06D4  3003               	movlw	3
 11823  06D5  319B  2396  3186   	fcall	_setMemory_Data
 11824                           
 11825                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
 11826  06D8  30FF               	movlw	255
 11827  06D9  0020               	movlb	0	; select bank0
 11828  06DA  00E2               	movwf	??_Flash_Memory_Initialization
 11829  06DB  0862               	movf	??_Flash_Memory_Initialization,w
 11830  06DC  00A0               	movwf	setMemory_Data@data
 11831  06DD  3004               	movlw	4
 11832  06DE  319B  2396  3186   	fcall	_setMemory_Data
 11833                           
 11834                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
 11835  06E1  30FF               	movlw	255
 11836  06E2  0020               	movlb	0	; select bank0
 11837  06E3  00E2               	movwf	??_Flash_Memory_Initialization
 11838  06E4  0862               	movf	??_Flash_Memory_Initialization,w
 11839  06E5  00A0               	movwf	setMemory_Data@data
 11840  06E6  3005               	movlw	5
 11841  06E7  319B  2396  3186   	fcall	_setMemory_Data
 11842                           
 11843                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
 11844  06EA  30AA               	movlw	170
 11845  06EB  0020               	movlb	0	; select bank0
 11846  06EC  00E2               	movwf	??_Flash_Memory_Initialization
 11847  06ED  0862               	movf	??_Flash_Memory_Initialization,w
 11848  06EE  00A0               	movwf	setMemory_Data@data
 11849  06EF  301F               	movlw	31
 11850  06F0  319B  2396  3186   	fcall	_setMemory_Data
 11851                           
 11852                           ;MCU_B1.c: 954: product->Data[21] = i;
 11853  06F3  0020               	movlb	0	; select bank0
 11854  06F4  0863               	movf	Flash_Memory_Initialization@i,w
 11855  06F5  00E2               	movwf	??_Flash_Memory_Initialization
 11856  06F6  0879               	movf	_product,w
 11857  06F7  3E15               	addlw	21
 11858  06F8  0086               	movwf	6
 11859  06F9  3002               	movlw	2	; select bank4/5
 11860  06FA  0087               	movwf	7
 11861  06FB  0862               	movf	??_Flash_Memory_Initialization,w
 11862  06FC  0081               	movwf	1
 11863                           
 11864                           ;MCU_B1.c: 955: product->Data[22] = i;
 11865  06FD  0863               	movf	Flash_Memory_Initialization@i,w
 11866  06FE  00E2               	movwf	??_Flash_Memory_Initialization
 11867  06FF  0879               	movf	_product,w
 11868  0700  3E16               	addlw	22
 11869  0701  0086               	movwf	6
 11870  0702  3002               	movlw	2	; select bank4/5
 11871  0703  0087               	movwf	7
 11872  0704  0862               	movf	??_Flash_Memory_Initialization,w
 11873  0705  0081               	movwf	1
 11874                           
 11875                           ;MCU_B1.c: 956: product->Data[23] = i;
 11876  0706  0863               	movf	Flash_Memory_Initialization@i,w
 11877  0707  00E2               	movwf	??_Flash_Memory_Initialization
 11878  0708  0879               	movf	_product,w
 11879  0709  3E17               	addlw	23
 11880  070A  0086               	movwf	6
 11881  070B  3002               	movlw	2	; select bank4/5
 11882  070C  0087               	movwf	7
 11883  070D  0862               	movf	??_Flash_Memory_Initialization,w
 11884  070E  0081               	movwf	1
 11885                           
 11886                           ;MCU_B1.c: 957: GIE = 0;
 11887  070F  138B               	bcf	11,7	;volatile
 11888                           
 11889                           ;MCU_B1.c: 958: Flash_Memory_Write();
 11890  0710  3191  2144         	fcall	_Flash_Memory_Write
 11891                           
 11892                           ;MCU_B1.c: 959: GIE = 1;
 11893  0712  178B               	bsf	11,7	;volatile
 11894                           
 11895                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
 11896  0713  0021               	movlb	1	; select bank1
 11897  0714  15A0               	bsf	_myMain^(0+128),3
 11898                           
 11899                           ;MCU_B1.c: 961: myMain.First = 1;
 11900  0715  16A0               	bsf	_myMain^(0+128),5
 11901  0716  0008               	return
 11902  0717                     __end_of_Flash_Memory_Initialization:	
 11903                           
 11904                           	psect	text68
 11905  1B96                     __ptext68:	
 11906 ;; *************** function _setMemory_Data *****************
 11907 ;; Defined at:
 11908 ;;		line 1076 in file "../src/MCU_B1.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;  address         1    wreg     unsigned char 
 11911 ;;  data            1    0[BANK0 ] unsigned char 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  address         1    2[BANK0 ] unsigned char 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;		None               void
 11916 ;; Registers used:
 11917 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11923 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;Total ram usage:        3 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:    5
 11930 ;; This function calls:
 11931 ;;		Nothing
 11932 ;; This function is called by:
 11933 ;;		_Flash_Memory_Initialization
 11934 ;;		_Flash_Memory_Modify
 11935 ;; This function uses a non-reentrant model
 11936 ;;
 11937                           
 11938                           
 11939                           ;psect for function _setMemory_Data
 11940  1B96                     _setMemory_Data:	
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11944                           ;setMemory_Data@address stored from wreg
 11945  1B96  0020               	movlb	0	; select bank0
 11946  1B97  00A2               	movwf	setMemory_Data@address
 11947                           
 11948                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
 11949  1B98  0820               	movf	setMemory_Data@data,w
 11950  1B99  00A1               	movwf	??_setMemory_Data
 11951  1B9A  0822               	movf	setMemory_Data@address,w
 11952  1B9B  3E20               	addlw	_Memory& (0+255)
 11953  1B9C  0086               	movwf	6
 11954  1B9D  3002               	movlw	2	; select bank4/5
 11955  1B9E  0087               	movwf	7
 11956  1B9F  0821               	movf	??_setMemory_Data,w
 11957  1BA0  0081               	movwf	1
 11958  1BA1  0008               	return
 11959  1BA2                     __end_of_setMemory_Data:	
 11960                           
 11961                           	psect	text69
 11962  1144                     __ptext69:	
 11963 ;; *************** function _Flash_Memory_Write *****************
 11964 ;; Defined at:
 11965 ;;		line 1009 in file "../src/MCU_B1.c"
 11966 ;; Parameters:    Size  Location     Type
 11967 ;;		None
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;  i               1    1[BANK0 ] unsigned char 
 11970 ;; Return value:  Size  Location     Type
 11971 ;;		None               void
 11972 ;; Registers used:
 11973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11974 ;; Tracked objects:
 11975 ;;		On entry : 0/0
 11976 ;;		On exit  : 0/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;Total ram usage:        2 bytes
 11984 ;; Hardware stack levels used:    1
 11985 ;; Hardware stack levels required when called:    6
 11986 ;; This function calls:
 11987 ;;		_Flash_Memory_Unlock
 11988 ;; This function is called by:
 11989 ;;		_Flash_Memory_Initialization
 11990 ;;		_Flash_Memory_Modify
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           
 11995                           ;psect for function _Flash_Memory_Write
 11996  1144                     _Flash_Memory_Write:	
 11997                           
 11998                           ;MCU_B1.c: 1010: char i = 0;
 11999                           
 12000                           ;incstack = 0
 12001                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12002  1144  0020               	movlb	0	; select bank0
 12003  1145  01A1               	clrf	Flash_Memory_Write@i
 12004                           
 12005                           ;MCU_B1.c: 1011: CFGS = 0;
 12006  1146  0023               	movlb	3	; select bank3
 12007  1147  1315               	bcf	21,6	;volatile
 12008                           
 12009                           ;MCU_B1.c: 1012: PMADRH = 0x30;
 12010  1148  3030               	movlw	48
 12011  1149  0092               	movwf	18	;volatile
 12012                           
 12013                           ;MCU_B1.c: 1013: PMDATH = 0;
 12014  114A  0194               	clrf	20	;volatile
 12015                           
 12016                           ;MCU_B1.c: 1014: FREE = 0;
 12017  114B  1215               	bcf	21,4	;volatile
 12018                           
 12019                           ;MCU_B1.c: 1015: LWLO = 1;
 12020  114C  1695               	bsf	21,5	;volatile
 12021                           
 12022                           ;MCU_B1.c: 1016: WREN = 1;
 12023  114D  1515               	bsf	21,2	;volatile
 12024                           
 12025                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
 12026  114E  0020               	movlb	0	; select bank0
 12027  114F  01A1               	clrf	Flash_Memory_Write@i
 12028  1150  3020               	movlw	32
 12029  1151  0221               	subwf	Flash_Memory_Write@i,w
 12030  1152  1803               	btfsc	3,0
 12031  1153  296C               	goto	l1347
 12032  1154                     l9647:	
 12033                           
 12034                           ;MCU_B1.c: 1018: PMADRL = i;
 12035  1154  0821               	movf	Flash_Memory_Write@i,w
 12036  1155  0023               	movlb	3	; select bank3
 12037  1156  0091               	movwf	17	;volatile
 12038                           
 12039                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
 12040  1157  0020               	movlb	0	; select bank0
 12041  1158  0821               	movf	Flash_Memory_Write@i,w
 12042  1159  3E20               	addlw	_Memory& (0+255)
 12043  115A  0086               	movwf	6
 12044  115B  3002               	movlw	2	; select bank4/5
 12045  115C  0087               	movwf	7
 12046  115D  0801               	movf	1,w
 12047  115E  0023               	movlb	3	; select bank3
 12048  115F  0093               	movwf	19	;volatile
 12049                           
 12050                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
 12051  1160  319B  236B  3191   	fcall	_Flash_Memory_Unlock
 12052  1163  3001               	movlw	1
 12053  1164  0020               	movlb	0	; select bank0
 12054  1165  00A0               	movwf	??_Flash_Memory_Write
 12055  1166  0820               	movf	??_Flash_Memory_Write,w
 12056  1167  07A1               	addwf	Flash_Memory_Write@i,f
 12057  1168  3020               	movlw	32
 12058  1169  0221               	subwf	Flash_Memory_Write@i,w
 12059  116A  1C03               	skipc
 12060  116B  2954               	goto	l9647
 12061  116C                     l1347:	
 12062                           
 12063                           ;MCU_B1.c: 1021: }
 12064                           ;MCU_B1.c: 1022: LWLO = 0;
 12065  116C  0023               	movlb	3	; select bank3
 12066  116D  1295               	bcf	21,5	;volatile
 12067                           
 12068                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
 12069  116E  319B  236B         	fcall	_Flash_Memory_Unlock
 12070                           
 12071                           ;MCU_B1.c: 1024: WREN = 0;
 12072  1170  0023               	movlb	3	; select bank3
 12073  1171  1115               	bcf	21,2	;volatile
 12074  1172  0008               	return
 12075  1173                     __end_of_Flash_Memory_Write:	
 12076                           
 12077                           	psect	text70
 12078  1B6B                     __ptext70:	
 12079 ;; *************** function _Flash_Memory_Unlock *****************
 12080 ;; Defined at:
 12081 ;;		line 988 in file "../src/MCU_B1.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;		None
 12084 ;; Auto vars:     Size  Location     Type
 12085 ;;		None
 12086 ;; Return value:  Size  Location     Type
 12087 ;;		None               void
 12088 ;; Registers used:
 12089 ;;		wreg
 12090 ;; Tracked objects:
 12091 ;;		On entry : 0/0
 12092 ;;		On exit  : 0/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;Total ram usage:        0 bytes
 12100 ;; Hardware stack levels used:    1
 12101 ;; Hardware stack levels required when called:    5
 12102 ;; This function calls:
 12103 ;;		Nothing
 12104 ;; This function is called by:
 12105 ;;		_Flash_Memory_Write
 12106 ;;		_Flash_Memory_Erasing
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           
 12111                           ;psect for function _Flash_Memory_Unlock
 12112  1B6B                     _Flash_Memory_Unlock:	
 12113                           
 12114                           ;MCU_B1.c: 989: PMCON2 = 0x55;
 12115                           
 12116                           ;incstack = 0
 12117                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12118  1B6B  3055               	movlw	85
 12119  1B6C  0023               	movlb	3	; select bank3
 12120  1B6D  0096               	movwf	22	;volatile
 12121                           
 12122                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
 12123  1B6E  30AA               	movlw	170
 12124  1B6F  0096               	movwf	22	;volatile
 12125                           
 12126                           ;MCU_B1.c: 991: WR = 1;
 12127  1B70  1495               	bsf	21,1	;volatile
 12128                           
 12129                           ;MCU_B1.c: 992: __nop();
 12130  1B71  0000               	nop
 12131                           
 12132                           ;MCU_B1.c: 993: __nop();
 12133  1B72  0000               	nop
 12134  1B73  0008               	return
 12135  1B74                     __end_of_Flash_Memory_Unlock:	
 12136                           
 12137                           	psect	text71
 12138  1E28                     __ptext71:	
 12139 ;; *************** function _Flash_Memory_Read *****************
 12140 ;; Defined at:
 12141 ;;		line 997 in file "../src/MCU_B1.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;  address         1    wreg     unsigned char 
 12144 ;; Auto vars:     Size  Location     Type
 12145 ;;  address         1    2[BANK0 ] unsigned char 
 12146 ;;  ret             1    3[BANK0 ] unsigned char 
 12147 ;;  i               1    1[BANK0 ] unsigned char 
 12148 ;; Return value:  Size  Location     Type
 12149 ;;                  1    wreg      unsigned char 
 12150 ;; Registers used:
 12151 ;;		wreg, status,2
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;Total ram usage:        4 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:    5
 12164 ;; This function calls:
 12165 ;;		Nothing
 12166 ;; This function is called by:
 12167 ;;		_Flash_Memory_Initialization
 12168 ;;		_Flash_Memory_Modify
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _Flash_Memory_Read
 12174  1E28                     _Flash_Memory_Read:	
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12178                           ;Flash_Memory_Read@address stored from wreg
 12179  1E28  0020               	movlb	0	; select bank0
 12180  1E29  00A2               	movwf	Flash_Memory_Read@address
 12181                           
 12182                           ;MCU_B1.c: 998: char i = 0, ret = 0;
 12183  1E2A  01A1               	clrf	Flash_Memory_Read@i
 12184  1E2B  01A3               	clrf	Flash_Memory_Read@ret
 12185                           
 12186                           ;MCU_B1.c: 999: PMADRH = 0x30;
 12187  1E2C  3030               	movlw	48
 12188  1E2D  0023               	movlb	3	; select bank3
 12189  1E2E  0092               	movwf	18	;volatile
 12190                           
 12191                           ;MCU_B1.c: 1000: PMADRL = address;
 12192  1E2F  0020               	movlb	0	; select bank0
 12193  1E30  0822               	movf	Flash_Memory_Read@address,w
 12194  1E31  0023               	movlb	3	; select bank3
 12195  1E32  0091               	movwf	17	;volatile
 12196                           
 12197                           ;MCU_B1.c: 1001: CFGS = 0;
 12198  1E33  1315               	bcf	21,6	;volatile
 12199                           
 12200                           ;MCU_B1.c: 1002: RD = 1;
 12201  1E34  1415               	bsf	21,0	;volatile
 12202                           
 12203                           ;MCU_B1.c: 1003: i = PMDATH;
 12204  1E35  0814               	movf	20,w	;volatile
 12205  1E36  0020               	movlb	0	; select bank0
 12206  1E37  00A0               	movwf	??_Flash_Memory_Read
 12207  1E38  0820               	movf	??_Flash_Memory_Read,w
 12208  1E39  00A1               	movwf	Flash_Memory_Read@i
 12209                           
 12210                           ;MCU_B1.c: 1004: ret = PMDATL;
 12211  1E3A  0023               	movlb	3	; select bank3
 12212  1E3B  0813               	movf	19,w	;volatile
 12213  1E3C  0020               	movlb	0	; select bank0
 12214  1E3D  00A0               	movwf	??_Flash_Memory_Read
 12215  1E3E  0820               	movf	??_Flash_Memory_Read,w
 12216  1E3F  00A3               	movwf	Flash_Memory_Read@ret
 12217                           
 12218                           ;MCU_B1.c: 1005: return ret;
 12219  1E40  0823               	movf	Flash_Memory_Read@ret,w
 12220  1E41  0008               	return
 12221  1E42                     __end_of_Flash_Memory_Read:	
 12222                           
 12223                           	psect	text72
 12224  055B                     __ptext72:	
 12225 ;; *************** function _Exception_Main *****************
 12226 ;; Defined at:
 12227 ;;		line 523 in file "../src/Main_B1.c"
 12228 ;; Parameters:    Size  Location     Type
 12229 ;;		None
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  i               2    4[BANK1 ] int 
 12232 ;;  i               2    2[BANK1 ] int 
 12233 ;;  lights          1    6[BANK1 ] unsigned char 
 12234 ;;  error           1    1[BANK1 ] unsigned char 
 12235 ;;  count           1    0[BANK1 ] unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;		None               void
 12238 ;; Registers used:
 12239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;Total ram usage:        8 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    9
 12252 ;; This function calls:
 12253 ;;		_getDimmerLights_Line
 12254 ;;		_getDimmerLights_Status
 12255 ;;		_getMain_All_Error_Status
 12256 ;;		_getMain_LightsStatus
 12257 ;;		_setBuz
 12258 ;;		_setDimmerLights_SwOff
 12259 ;;		_setLED
 12260 ;; This function is called by:
 12261 ;;		_main
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function _Exception_Main
 12267  055B                     _Exception_Main:	
 12268                           
 12269                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12273  055B  3000               	movlw	0
 12274  055C  3191  21D3  3185   	fcall	_getMain_All_Error_Status
 12275  055F  0020               	movlb	0	; select bank0
 12276  0560  00EB               	movwf	??_Exception_Main
 12277  0561  086B               	movf	??_Exception_Main,w
 12278  0562  0021               	movlb	1	; select bank1
 12279  0563  00E9               	movwf	Exception_Main@error^(0+128)
 12280                           
 12281                           ;Main_B1.c: 525: char lights = 0, count = 2;
 12282  0564  01EE               	clrf	Exception_Main@lights^(0+128)
 12283  0565  3002               	movlw	2
 12284  0566  0020               	movlb	0	; select bank0
 12285  0567  00EB               	movwf	??_Exception_Main
 12286  0568  086B               	movf	??_Exception_Main,w
 12287  0569  0021               	movlb	1	; select bank1
 12288  056A  00E8               	movwf	Exception_Main@count^(0+128)
 12289                           
 12290                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12291  056B  1DAB               	btfss	(_myMain^(0+128)+11),3
 12292  056C  2D7A               	goto	l10797
 12293                           
 12294                           ;Main_B1.c: 527: if (error == 0) {
 12295  056D  08E9               	movf	Exception_Main@error^(0+128),f
 12296  056E  1D03               	skipz
 12297  056F  0008               	return
 12298                           
 12299                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12300  0570  11AB               	bcf	(_myMain^(0+128)+11),3
 12301                           
 12302                           ;Main_B1.c: 533: setLED(99, 10);
 12303  0571  300A               	movlw	10
 12304  0572  0020               	movlb	0	; select bank0
 12305  0573  00EB               	movwf	??_Exception_Main
 12306  0574  086B               	movf	??_Exception_Main,w
 12307  0575  00A2               	movwf	setLED@command
 12308  0576  3063               	movlw	99
 12309  0577  3196  264F         	fcall	_setLED
 12310                           
 12311                           ;Main_B1.c: 535: }
 12312                           ;Main_B1.c: 536: } else {
 12313  0579  0008               	return
 12314  057A                     l10797:	
 12315                           
 12316                           ;Main_B1.c: 537: if (error != 0) {
 12317  057A  0021               	movlb	1	; select bank1
 12318  057B  0869               	movf	Exception_Main@error^(0+128),w
 12319  057C  1903               	btfsc	3,2
 12320  057D  0008               	return
 12321                           
 12322                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12323  057E  15AB               	bsf	(_myMain^(0+128)+11),3
 12324                           
 12325                           ;Main_B1.c: 541: setLED(99, 11);
 12326  057F  300B               	movlw	11
 12327  0580  0020               	movlb	0	; select bank0
 12328  0581  00EB               	movwf	??_Exception_Main
 12329  0582  086B               	movf	??_Exception_Main,w
 12330  0583  00A2               	movwf	setLED@command
 12331  0584  3063               	movlw	99
 12332  0585  3196  264F  3185   	fcall	_setLED
 12333                           
 12334                           ;Main_B1.c: 543: switch (error) {
 12335  0588  2E30               	goto	l10845
 12336  0589                     l10803:	
 12337                           ;Main_B1.c: 544: case 2:
 12338                           
 12339                           
 12340                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12341  0589  319C  24C5  3185   	fcall	_getMain_LightsStatus
 12342  058C  3A01               	xorlw	1
 12343  058D  1D03               	skipz
 12344  058E  2D98               	goto	l10807
 12345                           
 12346                           ;Main_B1.c: 546: setBuz(10, 300);
 12347  058F  302C               	movlw	44
 12348  0590  0020               	movlb	0	; select bank0
 12349  0591  00A9               	movwf	setBuz@time
 12350  0592  3001               	movlw	1
 12351  0593  00AA               	movwf	setBuz@time+1
 12352  0594  300A               	movlw	10
 12353  0595  3197  274E  3185   	fcall	_setBuz
 12354  0598                     l10807:	
 12355                           
 12356                           ;Main_B1.c: 547: }
 12357                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12358  0598  0021               	movlb	1	; select bank1
 12359  0599  01EA               	clrf	Exception_Main@i^(0+128)
 12360  059A  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12361  059B                     l10817:	
 12362  059B  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12363  059C  3A80               	xorlw	128
 12364  059D  0020               	movlb	0	; select bank0
 12365  059E  00EB               	movwf	??_Exception_Main
 12366  059F  3080               	movlw	128
 12367  05A0  026B               	subwf	??_Exception_Main,w
 12368  05A1  1D03               	skipz
 12369  05A2  2DA6               	goto	u12745
 12370  05A3  0021               	movlb	1	; select bank1
 12371  05A4  0868               	movf	Exception_Main@count^(0+128),w
 12372  05A5  026A               	subwf	Exception_Main@i^(0+128),w
 12373  05A6                     u12745:	
 12374  05A6  1803               	btfsc	3,0
 12375  05A7  2DCA               	goto	u12740
 12376                           
 12377                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12378  05A8  0021               	movlb	1	; select bank1
 12379  05A9  086A               	movf	Exception_Main@i^(0+128),w
 12380  05AA  3E01               	addlw	1
 12381  05AB  319C  2425  3185   	fcall	_getDimmerLights_Status
 12382  05AE  3A01               	xorlw	1
 12383  05AF  1D03               	skipz
 12384  05B0  2DC4               	goto	l10815
 12385                           
 12386                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12387  05B1  0020               	movlb	0	; select bank0
 12388  05B2  086F               	movf	_DimmerLights,w
 12389  05B3  3E0B               	addlw	11
 12390  05B4  0086               	movwf	6
 12391  05B5  3001               	movlw	1	; select bank2/3
 12392  05B6  0087               	movwf	7
 12393  05B7  1481               	bsf	1,1
 12394                           
 12395                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12396  05B8  086F               	movf	_DimmerLights,w
 12397  05B9  3E02               	addlw	2
 12398  05BA  0086               	movwf	6
 12399  05BB  3001               	movlw	1	; select bank2/3
 12400  05BC  0087               	movwf	7
 12401  05BD  1081               	bcf	1,1
 12402                           
 12403                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12404  05BE  0021               	movlb	1	; select bank1
 12405  05BF  086A               	movf	Exception_Main@i^(0+128),w
 12406  05C0  3E01               	addlw	1
 12407  05C1  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12408  05C4                     l10815:	
 12409  05C4  3001               	movlw	1
 12410  05C5  0021               	movlb	1	; select bank1
 12411  05C6  07EA               	addwf	Exception_Main@i^(0+128),f
 12412  05C7  3000               	movlw	0
 12413  05C8  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12414  05C9  2D9B               	goto	l10817
 12415  05CA                     u12740:	
 12416  05CA  0021               	movlb	1	; select bank1
 12417  05CB  0008               	return
 12418  05CC                     l10819:	
 12419                           ;Main_B1.c: 558: case 3:
 12420                           
 12421                           ;Main_B1.c: 555: }
 12422                           ;Main_B1.c: 556: }
 12423                           ;Main_B1.c: 557: break;
 12424                           
 12425                           
 12426                           ;Main_B1.c: 560: setBuz(5, 300);
 12427  05CC  302C               	movlw	44
 12428  05CD  0020               	movlb	0	; select bank0
 12429  05CE  00A9               	movwf	setBuz@time
 12430  05CF  3001               	movlw	1
 12431  05D0  00AA               	movwf	setBuz@time+1
 12432  05D1  3005               	movlw	5
 12433  05D2  3197  274E  3185   	fcall	_setBuz
 12434                           
 12435                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12436  05D5  319D  2539  3185   	fcall	_getDimmerLights_Line
 12437  05D8  0020               	movlb	0	; select bank0
 12438  05D9  00EB               	movwf	??_Exception_Main
 12439  05DA  086B               	movf	??_Exception_Main,w
 12440  05DB  0021               	movlb	1	; select bank1
 12441  05DC  00EE               	movwf	Exception_Main@lights^(0+128)
 12442                           
 12443                           ;Main_B1.c: 562: if (lights == 0) {
 12444  05DD  08EE               	movf	Exception_Main@lights^(0+128),f
 12445  05DE  1D03               	skipz
 12446  05DF  2E13               	goto	l10837
 12447                           
 12448                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12449  05E0  01EC               	clrf	Exception_Main@i_3618^(0+128)
 12450  05E1  01ED               	clrf	(Exception_Main@i_3618+1)^(0+128)
 12451  05E2                     l10835:	
 12452  05E2  086D               	movf	(Exception_Main@i_3618+1)^(0+128),w
 12453  05E3  3A80               	xorlw	128
 12454  05E4  0020               	movlb	0	; select bank0
 12455  05E5  00EB               	movwf	??_Exception_Main
 12456  05E6  3080               	movlw	128
 12457  05E7  026B               	subwf	??_Exception_Main,w
 12458  05E8  1D03               	skipz
 12459  05E9  2DED               	goto	u12775
 12460  05EA  0021               	movlb	1	; select bank1
 12461  05EB  0868               	movf	Exception_Main@count^(0+128),w
 12462  05EC  026C               	subwf	Exception_Main@i_3618^(0+128),w
 12463  05ED                     u12775:	
 12464  05ED  1803               	btfsc	3,0
 12465  05EE  2E11               	goto	u12770
 12466                           
 12467                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12468  05EF  0021               	movlb	1	; select bank1
 12469  05F0  086C               	movf	Exception_Main@i_3618^(0+128),w
 12470  05F1  3E01               	addlw	1
 12471  05F2  319C  2425  3185   	fcall	_getDimmerLights_Status
 12472  05F5  3A01               	xorlw	1
 12473  05F6  1D03               	skipz
 12474  05F7  2E0B               	goto	l10833
 12475                           
 12476                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12477  05F8  0020               	movlb	0	; select bank0
 12478  05F9  086F               	movf	_DimmerLights,w
 12479  05FA  3E0B               	addlw	11
 12480  05FB  0086               	movwf	6
 12481  05FC  3001               	movlw	1	; select bank2/3
 12482  05FD  0087               	movwf	7
 12483  05FE  1481               	bsf	1,1
 12484                           
 12485                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12486  05FF  086F               	movf	_DimmerLights,w
 12487  0600  3E02               	addlw	2
 12488  0601  0086               	movwf	6
 12489  0602  3001               	movlw	1	; select bank2/3
 12490  0603  0087               	movwf	7
 12491  0604  1081               	bcf	1,1
 12492                           
 12493                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12494  0605  0021               	movlb	1	; select bank1
 12495  0606  086C               	movf	Exception_Main@i_3618^(0+128),w
 12496  0607  3E01               	addlw	1
 12497  0608  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12498  060B                     l10833:	
 12499  060B  3001               	movlw	1
 12500  060C  0021               	movlb	1	; select bank1
 12501  060D  07EC               	addwf	Exception_Main@i_3618^(0+128),f
 12502  060E  3000               	movlw	0
 12503  060F  3DED               	addwfc	(Exception_Main@i_3618+1)^(0+128),f
 12504  0610  2DE2               	goto	l10835
 12505  0611                     u12770:	
 12506  0611  0021               	movlb	1	; select bank1
 12507  0612  0008               	return
 12508  0613                     l10837:	
 12509                           ;Main_B1.c: 570: }
 12510                           ;Main_B1.c: 571: }
 12511                           ;Main_B1.c: 572: } else {
 12512                           
 12513                           
 12514                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12515  0613  0021               	movlb	1	; select bank1
 12516  0614  086E               	movf	Exception_Main@lights^(0+128),w
 12517  0615  319C  2425  3185   	fcall	_getDimmerLights_Status
 12518  0618  3A01               	xorlw	1
 12519  0619  1903               	btfsc	3,2
 12520  061A  2E1D               	goto	l10839
 12521  061B  0021               	movlb	1	; select bank1
 12522  061C  0008               	return
 12523  061D                     l10839:	
 12524                           
 12525                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12526  061D  0020               	movlb	0	; select bank0
 12527  061E  086F               	movf	_DimmerLights,w
 12528  061F  3E0B               	addlw	11
 12529  0620  0086               	movwf	6
 12530  0621  3001               	movlw	1	; select bank2/3
 12531  0622  0087               	movwf	7
 12532  0623  1481               	bsf	1,1
 12533                           
 12534                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12535  0624  086F               	movf	_DimmerLights,w
 12536  0625  3E02               	addlw	2
 12537  0626  0086               	movwf	6
 12538  0627  3001               	movlw	1	; select bank2/3
 12539  0628  0087               	movwf	7
 12540  0629  1081               	bcf	1,1
 12541                           
 12542                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12543  062A  0021               	movlb	1	; select bank1
 12544  062B  086E               	movf	Exception_Main@lights^(0+128),w
 12545  062C  3194  24BC         	fcall	_setDimmerLights_SwOff
 12546  062E  0021               	movlb	1	; select bank1
 12547  062F  0008               	return
 12548  0630                     l10845:	
 12549                           ;Main_B1.c: 582: }
 12550                           
 12551                           ;Main_B1.c: 579: }
 12552                           ;Main_B1.c: 580: }
 12553                           ;Main_B1.c: 581: break;
 12554                           
 12555  0630  0021               	movlb	1	; select bank1
 12556  0631  0869               	movf	Exception_Main@error^(0+128),w
 12557                           
 12558                           ; Switch size 1, requested type "space"
 12559                           ; Number of cases is 2, Range of values is 2 to 3
 12560                           ; switch strategies available:
 12561                           ; Name         Instructions Cycles
 12562                           ; simple_byte            7     4 (average)
 12563                           ; direct_byte           13     9 (fixed)
 12564                           ; jumptable            263     9 (fixed)
 12565                           ;	Chosen strategy is simple_byte
 12566  0632  3A02               	xorlw	2	; case 2
 12567  0633  1903               	skipnz
 12568  0634  2D89               	goto	l10803
 12569  0635  3A01               	xorlw	1	; case 3
 12570  0636  1903               	skipnz
 12571  0637  2DCC               	goto	l10819
 12572  0638  2E3A               	goto	l1607
 12573  0639  0008               	return
 12574  063A                     l1607:	
 12575  063A  0008               	return
 12576  063B                     __end_of_Exception_Main:	
 12577                           
 12578                           	psect	text73
 12579  1D39                     __ptext73:	
 12580 ;; *************** function _getDimmerLights_Line *****************
 12581 ;; Defined at:
 12582 ;;		line 736 in file "../src/Dimmer_B1.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;		None
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;  line            1    1[BANK0 ] unsigned char 
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  1    wreg      unsigned char 
 12589 ;; Registers used:
 12590 ;;		wreg, status,2
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;Total ram usage:        2 bytes
 12601 ;; Hardware stack levels used:    1
 12602 ;; Hardware stack levels required when called:    5
 12603 ;; This function calls:
 12604 ;;		Nothing
 12605 ;; This function is called by:
 12606 ;;		_Exception_Main
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           
 12611                           ;psect for function _getDimmerLights_Line
 12612  1D39                     _getDimmerLights_Line:	
 12613                           
 12614                           ;Dimmer_B1.c: 737: char line = 0;
 12615                           
 12616                           ;incstack = 0
 12617                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12618  1D39  0020               	movlb	0	; select bank0
 12619  1D3A  01A1               	clrf	getDimmerLights_Line@line
 12620                           
 12621                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12622  1D3B  0022               	movlb	2	; select bank2
 12623  1D3C  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12624  1D3D  2D42               	goto	l859
 12625                           
 12626                           ;Dimmer_B1.c: 740: line = 1;
 12627  1D3E  0020               	movlb	0	; select bank0
 12628  1D3F  01A1               	clrf	getDimmerLights_Line@line
 12629  1D40  0AA1               	incf	getDimmerLights_Line@line,f
 12630                           
 12631                           ;Dimmer_B1.c: 741: }
 12632  1D41  2D4A               	goto	l860
 12633  1D42                     l859:	
 12634                           
 12635                           ;Dimmer_B1.c: 744: else if (DimmerLights2.Line == 1) {
 12636  1D42  0023               	movlb	3	; select bank3
 12637  1D43  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12638  1D44  2D4A               	goto	l860
 12639                           
 12640                           ;Dimmer_B1.c: 745: line = 2;
 12641  1D45  3002               	movlw	2
 12642  1D46  0020               	movlb	0	; select bank0
 12643  1D47  00A0               	movwf	??_getDimmerLights_Line
 12644  1D48  0820               	movf	??_getDimmerLights_Line,w
 12645  1D49  00A1               	movwf	getDimmerLights_Line@line
 12646  1D4A                     l860:	
 12647                           
 12648                           ;Dimmer_B1.c: 746: }
 12649                           ;Dimmer_B1.c: 753: return line;
 12650  1D4A  0020               	movlb	0	; select bank0
 12651  1D4B  0821               	movf	getDimmerLights_Line@line,w
 12652  1D4C  0008               	return
 12653  1D4D                     __end_of_getDimmerLights_Line:	
 12654                           
 12655                           	psect	text74
 12656  1F12                     __ptext74:	
 12657 ;; *************** function _DimmerLights_Main *****************
 12658 ;; Defined at:
 12659 ;;		line 502 in file "../src/Dimmer_B1.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;		None
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;		None
 12664 ;; Return value:  Size  Location     Type
 12665 ;;		None               void
 12666 ;; Registers used:
 12667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12668 ;; Tracked objects:
 12669 ;;		On entry : 0/0
 12670 ;;		On exit  : 0/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;Total ram usage:        0 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:   10
 12680 ;; This function calls:
 12681 ;;		_getLoad_OK
 12682 ;;		_getMain_All_Error_Status
 12683 ;;		_getMain_LightsStatus
 12684 ;;		_setDimmerLights_Main
 12685 ;; This function is called by:
 12686 ;;		_main
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _DimmerLights_Main
 12692  1F12                     _DimmerLights_Main:	
 12693                           
 12694                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12698  1F12  0021               	movlb	1	; select bank1
 12699  1F13  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12700  1F14  2F2A               	goto	l10433
 12701                           
 12702                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12703  1F15  319B  2342  319F   	fcall	_getLoad_OK
 12704  1F18  3A01               	xorlw	1
 12705  1F19  1903               	skipnz
 12706  1F1A  2F28               	goto	l810
 12707  1F1B  3000               	movlw	0
 12708  1F1C  3191  21D3  319F   	fcall	_getMain_All_Error_Status
 12709  1F1F  3800               	iorlw	0
 12710  1F20  1D03               	skipz
 12711  1F21  2F28               	goto	l810
 12712  1F22  319C  24C5  319F   	fcall	_getMain_LightsStatus
 12713  1F25  3800               	iorlw	0
 12714  1F26  1D03               	skipz
 12715  1F27  2F2A               	goto	l10433
 12716  1F28                     l810:	
 12717                           
 12718                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12719  1F28  0021               	movlb	1	; select bank1
 12720  1F29  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12721  1F2A                     l10433:	
 12722                           
 12723                           ;Dimmer_B1.c: 517: }
 12724                           ;Dimmer_B1.c: 518: }
 12725                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12726  1F2A  3001               	movlw	1
 12727  1F2B  3195  255A  319F   	fcall	_setDimmerLights_Main
 12728                           
 12729                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
 12730  1F2E  3002               	movlw	2
 12731  1F2F  3195  255A         	fcall	_setDimmerLights_Main
 12732  1F31  0008               	return
 12733  1F32                     __end_of_DimmerLights_Main:	
 12734                           
 12735                           	psect	text75
 12736  155A                     __ptext75:	
 12737 ;; *************** function _setDimmerLights_Main *****************
 12738 ;; Defined at:
 12739 ;;		line 536 in file "../src/Dimmer_B1.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;  lights          1    wreg     unsigned char 
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;  lights          1   78[BANK0 ] unsigned char 
 12744 ;; Return value:  Size  Location     Type
 12745 ;;		None               void
 12746 ;; Registers used:
 12747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;Total ram usage:        1 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    9
 12760 ;; This function calls:
 12761 ;;		_DimmerLightsPointSelect
 12762 ;;		_getDimmerLights_Allow_Condition
 12763 ;;		_setDimmerLights
 12764 ;;		_setDimmerLights_Adj
 12765 ;; This function is called by:
 12766 ;;		_DimmerLights_Main
 12767 ;; This function uses a non-reentrant model
 12768 ;;
 12769                           
 12770                           
 12771                           ;psect for function _setDimmerLights_Main
 12772  155A                     _setDimmerLights_Main:	
 12773                           
 12774                           ;incstack = 0
 12775                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12776                           ;setDimmerLights_Main@lights stored from wreg
 12777  155A  0020               	movlb	0	; select bank0
 12778  155B  00EE               	movwf	setDimmerLights_Main@lights
 12779                           
 12780                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12781  155C  086E               	movf	setDimmerLights_Main@lights,w
 12782  155D  319C  24B2  3195   	fcall	_DimmerLightsPointSelect
 12783                           
 12784                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12785  1560  0020               	movlb	0	; select bank0
 12786  1561  086F               	movf	_DimmerLights,w
 12787  1562  3E0A               	addlw	10
 12788  1563  0086               	movwf	6
 12789  1564  3001               	movlw	1	; select bank2/3
 12790  1565  0087               	movwf	7
 12791  1566  1C81               	btfss	1,1
 12792  1567  2D89               	goto	l9919
 12793                           
 12794                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12795  1568  086E               	movf	setDimmerLights_Main@lights,w
 12796  1569  3192  2272  3195   	fcall	_getDimmerLights_Allow_Condition
 12797  156C  3800               	iorlw	0
 12798  156D  1D03               	skipz
 12799  156E  0008               	return
 12800                           
 12801                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12802  156F  0020               	movlb	0	; select bank0
 12803  1570  086F               	movf	_DimmerLights,w
 12804  1571  3E0A               	addlw	10
 12805  1572  0086               	movwf	6
 12806  1573  3001               	movlw	1	; select bank2/3
 12807  1574  0087               	movwf	7
 12808  1575  1081               	bcf	1,1
 12809                           
 12810                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12811  1576  086F               	movf	_DimmerLights,w
 12812  1577  3E0A               	addlw	10
 12813  1578  0086               	movwf	6
 12814  1579  3001               	movlw	1	; select bank2/3
 12815  157A  0087               	movwf	7
 12816  157B  1C01               	btfss	1,0
 12817  157C  2D83               	goto	l9917
 12818                           
 12819                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12820  157D  01EB               	clrf	setDimmerLights@status
 12821  157E  0AEB               	incf	setDimmerLights@status,f
 12822  157F  086E               	movf	setDimmerLights_Main@lights,w
 12823  1580  3195  25AA         	fcall	_setDimmerLights
 12824                           
 12825                           ;Dimmer_B1.c: 544: } else {
 12826  1582  0008               	return
 12827  1583                     l9917:	
 12828                           
 12829                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12830  1583  0020               	movlb	0	; select bank0
 12831  1584  01EB               	clrf	setDimmerLights@status
 12832  1585  086E               	movf	setDimmerLights_Main@lights,w
 12833  1586  3195  25AA         	fcall	_setDimmerLights
 12834                           
 12835                           ;Dimmer_B1.c: 546: }
 12836                           ;Dimmer_B1.c: 547: }
 12837                           ;Dimmer_B1.c: 548: } else {
 12838  1588  0008               	return
 12839  1589                     l9919:	
 12840                           
 12841                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12842  1589  0020               	movlb	0	; select bank0
 12843  158A  086F               	movf	_DimmerLights,w
 12844  158B  3E0A               	addlw	10
 12845  158C  0086               	movwf	6
 12846  158D  3001               	movlw	1	; select bank2/3
 12847  158E  0087               	movwf	7
 12848  158F  1D81               	btfss	1,3
 12849  1590  0008               	return
 12850                           
 12851                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12852  1591  086F               	movf	_DimmerLights,w
 12853  1592  3E0A               	addlw	10
 12854  1593  0086               	movwf	6
 12855  1594  3001               	movlw	1	; select bank2/3
 12856  1595  0087               	movwf	7
 12857  1596  1181               	bcf	1,3
 12858                           
 12859                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12860  1597  086F               	movf	_DimmerLights,w
 12861  1598  3E0A               	addlw	10
 12862  1599  0086               	movwf	6
 12863  159A  3001               	movlw	1	; select bank2/3
 12864  159B  0087               	movwf	7
 12865  159C  1D01               	btfss	1,2
 12866  159D  2DA4               	goto	l9925
 12867                           
 12868                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12869  159E  01EB               	clrf	setDimmerLights_Adj@status
 12870  159F  0AEB               	incf	setDimmerLights_Adj@status,f
 12871  15A0  086E               	movf	setDimmerLights_Main@lights,w
 12872  15A1  3196  26F6         	fcall	_setDimmerLights_Adj
 12873                           
 12874                           ;Dimmer_B1.c: 553: } else {
 12875  15A3  0008               	return
 12876  15A4                     l9925:	
 12877                           
 12878                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12879  15A4  0020               	movlb	0	; select bank0
 12880  15A5  01EB               	clrf	setDimmerLights_Adj@status
 12881  15A6  086E               	movf	setDimmerLights_Main@lights,w
 12882  15A7  3196  26F6         	fcall	_setDimmerLights_Adj
 12883  15A9  0008               	return
 12884  15AA                     __end_of_setDimmerLights_Main:	
 12885                           
 12886                           	psect	text76
 12887  16F6                     __ptext76:	
 12888 ;; *************** function _setDimmerLights_Adj *****************
 12889 ;; Defined at:
 12890 ;;		line 672 in file "../src/Dimmer_B1.c"
 12891 ;; Parameters:    Size  Location     Type
 12892 ;;  lights          1    wreg     unsigned char 
 12893 ;;  status          1   75[BANK0 ] unsigned char 
 12894 ;; Auto vars:     Size  Location     Type
 12895 ;;  lights          1   77[BANK0 ] unsigned char 
 12896 ;; Return value:  Size  Location     Type
 12897 ;;		None               void
 12898 ;; Registers used:
 12899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12900 ;; Tracked objects:
 12901 ;;		On entry : 0/0
 12902 ;;		On exit  : 0/0
 12903 ;;		Unchanged: 0/0
 12904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;Total ram usage:        3 bytes
 12910 ;; Hardware stack levels used:    1
 12911 ;; Hardware stack levels required when called:    8
 12912 ;; This function calls:
 12913 ;;		_setBuz
 12914 ;;		_setDimmerLights_Line
 12915 ;;		_setPercentValue
 12916 ;;		_setProductData
 12917 ;;		_setRF_DimmerLights
 12918 ;;		_setTxData
 12919 ;; This function is called by:
 12920 ;;		_setDimmerLights_Main
 12921 ;; This function uses a non-reentrant model
 12922 ;;
 12923                           
 12924                           
 12925                           ;psect for function _setDimmerLights_Adj
 12926  16F6                     _setDimmerLights_Adj:	
 12927                           
 12928                           ;incstack = 0
 12929                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12930                           ;setDimmerLights_Adj@lights stored from wreg
 12931  16F6  0020               	movlb	0	; select bank0
 12932  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12933                           
 12934                           ;Dimmer_B1.c: 674: if (status == 1) {
 12935  16F8  086B               	movf	setDimmerLights_Adj@status,w
 12936  16F9  3A01               	xorlw	1
 12937  16FA  1D03               	skipz
 12938  16FB  2F0E               	goto	l9589
 12939                           
 12940                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12941  16FC  0A6F               	incf	_DimmerLights,w
 12942  16FD  0086               	movwf	6
 12943  16FE  3001               	movlw	1	; select bank2/3
 12944  16FF  0087               	movwf	7
 12945  1700  1701               	bsf	1,6
 12946                           
 12947                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12948  1701  0A6F               	incf	_DimmerLights,w
 12949  1702  0086               	movwf	6
 12950  1703  3001               	movlw	1	; select bank2/3
 12951  1704  0087               	movwf	7
 12952  1705  1681               	bsf	1,5
 12953                           
 12954                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12955  1706  3064               	movlw	100
 12956  1707  00A9               	movwf	setBuz@time
 12957  1708  3000               	movlw	0
 12958  1709  00AA               	movwf	setBuz@time+1
 12959  170A  3001               	movlw	1
 12960  170B  3197  274E         	fcall	_setBuz
 12961                           
 12962                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12963  170D  0008               	return
 12964  170E                     l9589:	
 12965  170E  0020               	movlb	0	; select bank0
 12966  170F  08EB               	movf	setDimmerLights_Adj@status,f
 12967  1710  1D03               	skipz
 12968  1711  0008               	return
 12969                           
 12970                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12971  1712  0021               	movlb	1	; select bank1
 12972  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12973                           
 12974                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12975  1714  0020               	movlb	0	; select bank0
 12976  1715  086D               	movf	setDimmerLights_Adj@lights,w
 12977  1716  319D  25DD  3196   	fcall	_setDimmerLights_Line
 12978                           
 12979                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12980  1719  0020               	movlb	0	; select bank0
 12981  171A  0A6F               	incf	_DimmerLights,w
 12982  171B  0086               	movwf	6
 12983  171C  3001               	movlw	1	; select bank2/3
 12984  171D  0087               	movwf	7
 12985  171E  1301               	bcf	1,6
 12986                           
 12987                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 12988  171F  0A6F               	incf	_DimmerLights,w
 12989  1720  0086               	movwf	6
 12990  1721  3001               	movlw	1	; select bank2/3
 12991  1722  0087               	movwf	7
 12992  1723  1281               	bcf	1,5
 12993                           
 12994                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12995  1724  086F               	movf	_DimmerLights,w
 12996  1725  3E04               	addlw	4
 12997  1726  0086               	movwf	6
 12998  1727  3001               	movlw	1	; select bank2/3
 12999  1728  0087               	movwf	7
 13000  1729  0801               	movf	1,w
 13001  172A  00EC               	movwf	??_setDimmerLights_Adj
 13002  172B  086F               	movf	_DimmerLights,w
 13003  172C  3E06               	addlw	6
 13004  172D  0086               	movwf	6
 13005  172E  3001               	movlw	1	; select bank2/3
 13006  172F  0087               	movwf	7
 13007  1730  086C               	movf	??_setDimmerLights_Adj,w
 13008  1731  0081               	movwf	1
 13009                           
 13010                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13011  1732  086F               	movf	_DimmerLights,w
 13012  1733  3E04               	addlw	4
 13013  1734  0086               	movwf	6
 13014  1735  3001               	movlw	1	; select bank2/3
 13015  1736  0087               	movwf	7
 13016  1737  0801               	movf	1,w
 13017  1738  318A  2272  3196   	fcall	_setPercentValue
 13018  173B  0020               	movlb	0	; select bank0
 13019  173C  00EC               	movwf	??_setDimmerLights_Adj
 13020  173D  086C               	movf	??_setDimmerLights_Adj,w
 13021  173E  00E2               	movwf	setProductData@value
 13022  173F  086D               	movf	setDimmerLights_Adj@lights,w
 13023  1740  3E14               	addlw	20
 13024  1741  3190  2066  3196   	fcall	_setProductData
 13025                           
 13026                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 13027  1744  0020               	movlb	0	; select bank0
 13028  1745  01E6               	clrf	setRF_DimmerLights@on
 13029  1746  0AE6               	incf	setRF_DimmerLights@on,f
 13030  1747  086D               	movf	setDimmerLights_Adj@lights,w
 13031  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 13032                           
 13033                           ;Dimmer_B1.c: 701: setTxData();
 13034  174B  318E  2610         	fcall	_setTxData
 13035  174D  0008               	return
 13036  174E                     __end_of_setDimmerLights_Adj:	
 13037                           
 13038                           	psect	text77
 13039  15AA                     __ptext77:	
 13040 ;; *************** function _setDimmerLights *****************
 13041 ;; Defined at:
 13042 ;;		line 630 in file "../src/Dimmer_B1.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;  lights          1    wreg     unsigned char 
 13045 ;;  status          1   75[BANK0 ] unsigned char 
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;  lights          1   77[BANK0 ] unsigned char 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;		None               void
 13050 ;; Registers used:
 13051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13057 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;Total ram usage:        3 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:    8
 13064 ;; This function calls:
 13065 ;;		_setDimmerLights_Line
 13066 ;;		_setLED
 13067 ;;		_setPercentValue
 13068 ;;		_setProductData
 13069 ;;		_setRF_DimmerLights
 13070 ;;		_setTxData
 13071 ;; This function is called by:
 13072 ;;		_setDimmerLights_Main
 13073 ;; This function uses a non-reentrant model
 13074 ;;
 13075                           
 13076                           
 13077                           ;psect for function _setDimmerLights
 13078  15AA                     _setDimmerLights:	
 13079                           
 13080                           ;incstack = 0
 13081                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13082                           ;setDimmerLights@lights stored from wreg
 13083  15AA  0020               	movlb	0	; select bank0
 13084  15AB  00ED               	movwf	setDimmerLights@lights
 13085                           
 13086                           ;Dimmer_B1.c: 638: if (status == 1) {
 13087  15AC  086B               	movf	setDimmerLights@status,w
 13088  15AD  3A01               	xorlw	1
 13089  15AE  1D03               	skipz
 13090  15AF  2DDA               	goto	l9569
 13091                           
 13092                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 13093  15B0  0A6F               	incf	_DimmerLights,w
 13094  15B1  0086               	movwf	6
 13095  15B2  3001               	movlw	1	; select bank2/3
 13096  15B3  0087               	movwf	7
 13097  15B4  1501               	bsf	1,2
 13098                           
 13099                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 13100  15B5  0021               	movlb	1	; select bank1
 13101  15B6  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13102                           
 13103                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 13104  15B7  0020               	movlb	0	; select bank0
 13105  15B8  086D               	movf	setDimmerLights@lights,w
 13106  15B9  319D  25DD  3195   	fcall	_setDimmerLights_Line
 13107                           
 13108                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 13109  15BC  0020               	movlb	0	; select bank0
 13110  15BD  01A2               	clrf	setLED@command
 13111  15BE  086D               	movf	setDimmerLights@lights,w
 13112  15BF  3196  264F  3195   	fcall	_setLED
 13113                           
 13114                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(70*0.8));
 13115  15C2  3038               	movlw	56
 13116  15C3  0020               	movlb	0	; select bank0
 13117  15C4  00EC               	movwf	??_setDimmerLights
 13118  15C5  086F               	movf	_DimmerLights,w
 13119  15C6  3E04               	addlw	4
 13120  15C7  0086               	movwf	6
 13121  15C8  3001               	movlw	1	; select bank2/3
 13122  15C9  0087               	movwf	7
 13123  15CA  086C               	movf	??_setDimmerLights,w
 13124  15CB  0081               	movwf	1
 13125                           
 13126                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 13127  15CC  3038               	movlw	56
 13128  15CD  318A  2272  3195   	fcall	_setPercentValue
 13129  15D0  0020               	movlb	0	; select bank0
 13130  15D1  00EC               	movwf	??_setDimmerLights
 13131  15D2  086C               	movf	??_setDimmerLights,w
 13132  15D3  00E2               	movwf	setProductData@value
 13133  15D4  086D               	movf	setDimmerLights@lights,w
 13134  15D5  3E14               	addlw	20
 13135  15D6  3190  2066  3195   	fcall	_setProductData
 13136                           
 13137                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 13138  15D9  2DF0               	goto	l9579
 13139  15DA                     l9569:	
 13140  15DA  0020               	movlb	0	; select bank0
 13141  15DB  08EB               	movf	setDimmerLights@status,f
 13142  15DC  1D03               	skipz
 13143  15DD  2DF0               	goto	l9579
 13144                           
 13145                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 13146  15DE  0A6F               	incf	_DimmerLights,w
 13147  15DF  0086               	movwf	6
 13148  15E0  3001               	movlw	1	; select bank2/3
 13149  15E1  0087               	movwf	7
 13150  15E2  1101               	bcf	1,2
 13151                           
 13152                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 13153  15E3  0021               	movlb	1	; select bank1
 13154  15E4  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13155                           
 13156                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 13157  15E5  3000               	movlw	0
 13158  15E6  319D  25DD  3195   	fcall	_setDimmerLights_Line
 13159                           
 13160                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 13161  15E9  0020               	movlb	0	; select bank0
 13162  15EA  01A2               	clrf	setLED@command
 13163  15EB  0AA2               	incf	setLED@command,f
 13164  15EC  086D               	movf	setDimmerLights@lights,w
 13165  15ED  3196  264F  3195   	fcall	_setLED
 13166  15F0                     l9579:	
 13167                           
 13168                           ;Dimmer_B1.c: 663: }
 13169                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 13170  15F0  0020               	movlb	0	; select bank0
 13171  15F1  086B               	movf	setDimmerLights@status,w
 13172  15F2  00EC               	movwf	??_setDimmerLights
 13173  15F3  086C               	movf	??_setDimmerLights,w
 13174  15F4  00E6               	movwf	setRF_DimmerLights@on
 13175  15F5  086D               	movf	setDimmerLights@lights,w
 13176  15F6  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13177                           
 13178                           ;Dimmer_B1.c: 667: setTxData();
 13179  15F9  318E  2610         	fcall	_setTxData
 13180  15FB  0008               	return
 13181  15FC                     __end_of_setDimmerLights:	
 13182                           
 13183                           	psect	text78
 13184  0E10                     __ptext78:	
 13185 ;; *************** function _setTxData *****************
 13186 ;; Defined at:
 13187 ;;		line 171 in file "../src/RF_Control_B1.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;		None
 13190 ;; Auto vars:     Size  Location     Type
 13191 ;;  i               1    0        unsigned char 
 13192 ;; Return value:  Size  Location     Type
 13193 ;;		None               void
 13194 ;; Registers used:
 13195 ;;		wreg, fsr1l, fsr1h
 13196 ;; Tracked objects:
 13197 ;;		On entry : 0/0
 13198 ;;		On exit  : 0/0
 13199 ;;		Unchanged: 0/0
 13200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13205 ;;Total ram usage:        1 bytes
 13206 ;; Hardware stack levels used:    1
 13207 ;; Hardware stack levels required when called:    5
 13208 ;; This function calls:
 13209 ;;		Nothing
 13210 ;; This function is called by:
 13211 ;;		_setDimmerLights
 13212 ;;		_setDimmerLights_Adj
 13213 ;;		_getRxData
 13214 ;;		_setControl_Lights_Table
 13215 ;;		_setRFSW_Control
 13216 ;;		_setRFSW_AdjControl
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           
 13221                           ;psect for function _setTxData
 13222  0E10                     _setTxData:	
 13223                           
 13224                           ;RF_Control_B1.c: 172: char i;
 13225                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _setTxData: [wregfsr1]
 13229  0E10  0021               	movlb	1	; select bank1
 13230  0E11  1C3A               	btfss	_RF1^(0+128),0
 13231  0E12  0008               	return
 13232                           
 13233                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13234  0E13  193A               	btfsc	_RF1^(0+128),2
 13235  0E14  0008               	return
 13236                           
 13237                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13238  0E15  153A               	bsf	_RF1^(0+128),2
 13239                           
 13240                           ;RF_Control_B1.c: 188: RF_Data[0] = 0x63;
 13241  0E16  3063               	movlw	99
 13242  0E17  0020               	movlb	0	; select bank0
 13243  0E18  00A0               	movwf	??_setTxData
 13244  0E19  0820               	movf	??_setTxData,w
 13245  0E1A  0023               	movlb	3	; select bank3
 13246  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13247                           
 13248                           ;RF_Control_B1.c: 189: RF_Data[1] = 0x02;
 13249  0E1C  3002               	movlw	2
 13250  0E1D  0020               	movlb	0	; select bank0
 13251  0E1E  00A0               	movwf	??_setTxData
 13252  0E1F  0820               	movf	??_setTxData,w
 13253  0E20  0023               	movlb	3	; select bank3
 13254  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13255                           
 13256                           ;RF_Control_B1.c: 191: RF_Data[2] = product->Data[2];
 13257  0E22  0879               	movf	_product,w
 13258  0E23  0086               	movwf	6
 13259  0E24  3002               	movlw	2	; select bank4/5
 13260  0E25  0087               	movwf	7
 13261  0E26  3002               	movlw	2	; select bank4/5
 13262  0E27  3F42               	moviw [2]fsr1
 13263  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13264                           
 13265                           ;RF_Control_B1.c: 192: RF_Data[3] = product->Data[3];
 13266  0E29  0879               	movf	_product,w
 13267  0E2A  0086               	movwf	6
 13268  0E2B  3002               	movlw	2	; select bank4/5
 13269  0E2C  0087               	movwf	7
 13270  0E2D  3002               	movlw	2	; select bank4/5
 13271  0E2E  3F43               	moviw [3]fsr1
 13272  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13273                           
 13274                           ;RF_Control_B1.c: 193: RF_Data[4] = product->Data[4];
 13275  0E30  0879               	movf	_product,w
 13276  0E31  0086               	movwf	6
 13277  0E32  3002               	movlw	2	; select bank4/5
 13278  0E33  0087               	movwf	7
 13279  0E34  3002               	movlw	2	; select bank4/5
 13280  0E35  3F44               	moviw [4]fsr1
 13281  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13282                           
 13283                           ;RF_Control_B1.c: 194: RF_Data[5] = product->Data[5];
 13284  0E37  0879               	movf	_product,w
 13285  0E38  0086               	movwf	6
 13286  0E39  3002               	movlw	2	; select bank4/5
 13287  0E3A  0087               	movwf	7
 13288  0E3B  3002               	movlw	2	; select bank4/5
 13289  0E3C  3F45               	moviw [5]fsr1
 13290  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13291                           
 13292                           ;RF_Control_B1.c: 195: RF_Data[6] = product->Data[6];
 13293  0E3E  0879               	movf	_product,w
 13294  0E3F  0086               	movwf	6
 13295  0E40  3002               	movlw	2	; select bank4/5
 13296  0E41  0087               	movwf	7
 13297  0E42  3002               	movlw	2	; select bank4/5
 13298  0E43  3F46               	moviw [6]fsr1
 13299  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13300                           
 13301                           ;RF_Control_B1.c: 196: RF_Data[7] = product->Data[7];
 13302  0E45  0879               	movf	_product,w
 13303  0E46  0086               	movwf	6
 13304  0E47  3002               	movlw	2	; select bank4/5
 13305  0E48  0087               	movwf	7
 13306  0E49  3002               	movlw	2	; select bank4/5
 13307  0E4A  3F47               	moviw [7]fsr1
 13308  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13309                           
 13310                           ;RF_Control_B1.c: 197: RF_Data[8] = product->Data[8];
 13311  0E4C  0879               	movf	_product,w
 13312  0E4D  0086               	movwf	6
 13313  0E4E  3002               	movlw	2	; select bank4/5
 13314  0E4F  0087               	movwf	7
 13315  0E50  3002               	movlw	2	; select bank4/5
 13316  0E51  3F48               	moviw [8]fsr1
 13317  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13318                           
 13319                           ;RF_Control_B1.c: 198: RF_Data[9] = product->Data[9];
 13320  0E53  0879               	movf	_product,w
 13321  0E54  0086               	movwf	6
 13322  0E55  3002               	movlw	2	; select bank4/5
 13323  0E56  0087               	movwf	7
 13324  0E57  3002               	movlw	2	; select bank4/5
 13325  0E58  3F49               	moviw [9]fsr1
 13326  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13327                           
 13328                           ;RF_Control_B1.c: 199: RF_Data[10] = product->Data[10];
 13329  0E5A  0879               	movf	_product,w
 13330  0E5B  0086               	movwf	6
 13331  0E5C  3002               	movlw	2	; select bank4/5
 13332  0E5D  0087               	movwf	7
 13333  0E5E  3002               	movlw	2	; select bank4/5
 13334  0E5F  3F4A               	moviw [10]fsr1
 13335  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13336                           
 13337                           ;RF_Control_B1.c: 200: RF_Data[11] = product->Data[11];
 13338  0E61  0879               	movf	_product,w
 13339  0E62  0086               	movwf	6
 13340  0E63  3002               	movlw	2	; select bank4/5
 13341  0E64  0087               	movwf	7
 13342  0E65  3002               	movlw	2	; select bank4/5
 13343  0E66  3F4B               	moviw [11]fsr1
 13344  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13345                           
 13346                           ;RF_Control_B1.c: 201: RF_Data[12] = product->Data[12];
 13347  0E68  0879               	movf	_product,w
 13348  0E69  0086               	movwf	6
 13349  0E6A  3002               	movlw	2	; select bank4/5
 13350  0E6B  0087               	movwf	7
 13351  0E6C  3002               	movlw	2	; select bank4/5
 13352  0E6D  3F4C               	moviw [12]fsr1
 13353  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13354                           
 13355                           ;RF_Control_B1.c: 202: RF_Data[13] = product->Data[13];
 13356  0E6F  0879               	movf	_product,w
 13357  0E70  0086               	movwf	6
 13358  0E71  3002               	movlw	2	; select bank4/5
 13359  0E72  0087               	movwf	7
 13360  0E73  3002               	movlw	2	; select bank4/5
 13361  0E74  3F4D               	moviw [13]fsr1
 13362  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13363                           
 13364                           ;RF_Control_B1.c: 203: RF_Data[14] = product->Data[14];
 13365  0E76  0879               	movf	_product,w
 13366  0E77  0086               	movwf	6
 13367  0E78  3002               	movlw	2	; select bank4/5
 13368  0E79  0087               	movwf	7
 13369  0E7A  3002               	movlw	2	; select bank4/5
 13370  0E7B  3F4E               	moviw [14]fsr1
 13371  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13372                           
 13373                           ;RF_Control_B1.c: 204: RF_Data[15] = product->Data[15];
 13374  0E7D  0879               	movf	_product,w
 13375  0E7E  0086               	movwf	6
 13376  0E7F  3002               	movlw	2	; select bank4/5
 13377  0E80  0087               	movwf	7
 13378  0E81  3002               	movlw	2	; select bank4/5
 13379  0E82  3F4F               	moviw [15]fsr1
 13380  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13381                           
 13382                           ;RF_Control_B1.c: 205: RF_Data[16] = product->Data[16];
 13383  0E84  0879               	movf	_product,w
 13384  0E85  0086               	movwf	6
 13385  0E86  3002               	movlw	2	; select bank4/5
 13386  0E87  0087               	movwf	7
 13387  0E88  3002               	movlw	2	; select bank4/5
 13388  0E89  3F50               	moviw [16]fsr1
 13389  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13390                           
 13391                           ;RF_Control_B1.c: 206: RF_Data[17] = product->Data[17];
 13392  0E8B  0879               	movf	_product,w
 13393  0E8C  0086               	movwf	6
 13394  0E8D  3002               	movlw	2	; select bank4/5
 13395  0E8E  0087               	movwf	7
 13396  0E8F  3002               	movlw	2	; select bank4/5
 13397  0E90  3F51               	moviw [17]fsr1
 13398  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13399                           
 13400                           ;RF_Control_B1.c: 207: RF_Data[18] = product->Data[18];
 13401  0E92  0879               	movf	_product,w
 13402  0E93  0086               	movwf	6
 13403  0E94  3002               	movlw	2	; select bank4/5
 13404  0E95  0087               	movwf	7
 13405  0E96  3002               	movlw	2	; select bank4/5
 13406  0E97  3F52               	moviw [18]fsr1
 13407  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13408                           
 13409                           ;RF_Control_B1.c: 208: RF_Data[19] = product->Data[19];
 13410  0E99  0879               	movf	_product,w
 13411  0E9A  0086               	movwf	6
 13412  0E9B  3002               	movlw	2	; select bank4/5
 13413  0E9C  0087               	movwf	7
 13414  0E9D  3002               	movlw	2	; select bank4/5
 13415  0E9E  3F53               	moviw [19]fsr1
 13416  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13417                           
 13418                           ;RF_Control_B1.c: 209: RF_Data[20] = 210;
 13419  0EA0  30D2               	movlw	210
 13420  0EA1  0020               	movlb	0	; select bank0
 13421  0EA2  00A0               	movwf	??_setTxData
 13422  0EA3  0820               	movf	??_setTxData,w
 13423  0EA4  0023               	movlb	3	; select bank3
 13424  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13425  0EA6  0008               	return
 13426  0EA7                     __end_of_setTxData:	
 13427                           
 13428                           	psect	text79
 13429  17A7                     __ptext79:	
 13430 ;; *************** function _setRF_DimmerLights *****************
 13431 ;; Defined at:
 13432 ;;		line 436 in file "../src/RF_Control_B1.c"
 13433 ;; Parameters:    Size  Location     Type
 13434 ;;  lights          1    wreg     unsigned char 
 13435 ;;  on              1   70[BANK0 ] unsigned char 
 13436 ;; Auto vars:     Size  Location     Type
 13437 ;;  lights          1   74[BANK0 ] unsigned char 
 13438 ;;  status          1   73[BANK0 ] unsigned char 
 13439 ;; Return value:  Size  Location     Type
 13440 ;;		None               void
 13441 ;; Registers used:
 13442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13448 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;Total ram usage:        5 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    6
 13455 ;; This function calls:
 13456 ;;		_setProductData
 13457 ;; This function is called by:
 13458 ;;		_setDimmerLights
 13459 ;;		_setDimmerLights_Adj
 13460 ;;		_setRFSW_Control
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           
 13465                           ;psect for function _setRF_DimmerLights
 13466  17A7                     _setRF_DimmerLights:	
 13467                           
 13468                           ;incstack = 0
 13469                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13470                           ;setRF_DimmerLights@lights stored from wreg
 13471  17A7  0020               	movlb	0	; select bank0
 13472  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13473                           
 13474                           ;RF_Control_B1.c: 437: char status = 1;
 13475  17A9  01E9               	clrf	setRF_DimmerLights@status
 13476  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13477                           
 13478                           ;RF_Control_B1.c: 438: status <<= (lights - 1);
 13479  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13480  17AC  3EFF               	addlw	-1
 13481  17AD  0A89               	incf	9,f
 13482  17AE  2FB1               	goto	u9860
 13483  17AF                     u9865:	
 13484  17AF  1003               	clrc
 13485  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13486  17B1                     u9860:	
 13487  17B1  3EFF               	addlw	-1
 13488  17B2  1D03               	skipz
 13489  17B3  2FAF               	goto	u9865
 13490                           
 13491                           ;RF_Control_B1.c: 439: setProductData(11, lights);
 13492  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13493  17B5  00E7               	movwf	??_setRF_DimmerLights
 13494  17B6  0867               	movf	??_setRF_DimmerLights,w
 13495  17B7  00E2               	movwf	setProductData@value
 13496  17B8  300B               	movlw	11
 13497  17B9  3190  2066  3197   	fcall	_setProductData
 13498                           
 13499                           ;RF_Control_B1.c: 447: setProductData(9, product->Data[20 + lights]);
 13500  17BC  0020               	movlb	0	; select bank0
 13501  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13502  17BE  3E14               	addlw	20
 13503  17BF  0779               	addwf	_product,w
 13504  17C0  00E7               	movwf	??_setRF_DimmerLights
 13505  17C1  0867               	movf	??_setRF_DimmerLights,w
 13506  17C2  0086               	movwf	6
 13507  17C3  3002               	movlw	2	; select bank4/5
 13508  17C4  0087               	movwf	7
 13509  17C5  0801               	movf	1,w
 13510  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13511  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13512  17C8  00E2               	movwf	setProductData@value
 13513  17C9  3009               	movlw	9
 13514  17CA  3190  2066  3197   	fcall	_setProductData
 13515                           
 13516                           ;RF_Control_B1.c: 448: setProductData(17, product->Data[26 + lights]);
 13517  17CD  0020               	movlb	0	; select bank0
 13518  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13519  17CF  3E1A               	addlw	26
 13520  17D0  0779               	addwf	_product,w
 13521  17D1  00E7               	movwf	??_setRF_DimmerLights
 13522  17D2  0867               	movf	??_setRF_DimmerLights,w
 13523  17D3  0086               	movwf	6
 13524  17D4  3002               	movlw	2	; select bank4/5
 13525  17D5  0087               	movwf	7
 13526  17D6  0801               	movf	1,w
 13527  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13528  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13529  17D9  00E2               	movwf	setProductData@value
 13530  17DA  3011               	movlw	17
 13531  17DB  3190  2066  3197   	fcall	_setProductData
 13532                           
 13533                           ;RF_Control_B1.c: 449: if (on == 1) {
 13534  17DE  0020               	movlb	0	; select bank0
 13535  17DF  0866               	movf	setRF_DimmerLights@on,w
 13536  17E0  3A01               	xorlw	1
 13537  17E1  1D03               	skipz
 13538  17E2  2FF1               	goto	l9009
 13539                           
 13540                           ;RF_Control_B1.c: 450: setProductData(15, (product->Data[15] | status));
 13541  17E3  0879               	movf	_product,w
 13542  17E4  3E0F               	addlw	15
 13543  17E5  0086               	movwf	6
 13544  17E6  3002               	movlw	2	; select bank4/5
 13545  17E7  0087               	movwf	7
 13546  17E8  0801               	movf	1,w
 13547  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13548  17EA  00E7               	movwf	??_setRF_DimmerLights
 13549  17EB  0867               	movf	??_setRF_DimmerLights,w
 13550  17EC  00E2               	movwf	setProductData@value
 13551  17ED  300F               	movlw	15
 13552  17EE  3190  2066         	fcall	_setProductData
 13553                           
 13554                           ;RF_Control_B1.c: 451: } else {
 13555  17F0  0008               	return
 13556  17F1                     l9009:	
 13557                           
 13558                           ;RF_Control_B1.c: 452: setProductData(15, (product->Data[15]&(~status)));
 13559  17F1  0879               	movf	_product,w
 13560  17F2  3E0F               	addlw	15
 13561  17F3  0086               	movwf	6
 13562  17F4  3002               	movlw	2	; select bank4/5
 13563  17F5  0087               	movwf	7
 13564  17F6  0020               	movlb	0	; select bank0
 13565  17F7  0969               	comf	setRF_DimmerLights@status,w
 13566  17F8  0501               	andwf	1,w
 13567  17F9  00E7               	movwf	??_setRF_DimmerLights
 13568  17FA  0867               	movf	??_setRF_DimmerLights,w
 13569  17FB  00E2               	movwf	setProductData@value
 13570  17FC  300F               	movlw	15
 13571  17FD  3190  2066         	fcall	_setProductData
 13572  17FF  0008               	return
 13573  1800                     __end_of_setRF_DimmerLights:	
 13574                           
 13575                           	psect	text80
 13576  0A72                     __ptext80:	
 13577 ;; *************** function _setPercentValue *****************
 13578 ;; Defined at:
 13579 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13580 ;; Parameters:    Size  Location     Type
 13581 ;;  value           1    wreg     unsigned char 
 13582 ;; Auto vars:     Size  Location     Type
 13583 ;;  value           1   62[BANK0 ] unsigned char 
 13584 ;;  i               3   63[BANK0 ] float 
 13585 ;; Return value:  Size  Location     Type
 13586 ;;                  1    wreg      unsigned char 
 13587 ;; Registers used:
 13588 ;;		wreg, status,2, status,0, pclath, cstack
 13589 ;; Tracked objects:
 13590 ;;		On entry : 0/0
 13591 ;;		On exit  : 0/0
 13592 ;;		Unchanged: 0/0
 13593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;Total ram usage:        6 bytes
 13599 ;; Hardware stack levels used:    1
 13600 ;; Hardware stack levels required when called:    7
 13601 ;; This function calls:
 13602 ;;		___awtoft
 13603 ;;		___ftadd
 13604 ;;		___ftdiv
 13605 ;;		___ftneg
 13606 ;;		___fttol
 13607 ;; This function is called by:
 13608 ;;		_setDimmerLights
 13609 ;;		_setDimmerLights_Adj
 13610 ;;		_Flash_Memory_Initialization
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _setPercentValue
 13616  0A72                     _setPercentValue:	
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13620                           ;setPercentValue@value stored from wreg
 13621  0A72  0020               	movlb	0	; select bank0
 13622  0A73  00DE               	movwf	setPercentValue@value
 13623                           
 13624                           ;Dimmer_B1.c: 1042: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13625  0A74  3000               	movlw	0
 13626  0A75  00DF               	movwf	setPercentValue@i
 13627  0A76  3030               	movlw	48
 13628  0A77  00E0               	movwf	setPercentValue@i+1
 13629  0A78  3042               	movlw	66
 13630  0A79  00E1               	movwf	setPercentValue@i+2
 13631                           
 13632                           ;Dimmer_B1.c: 1043: i /= 100;
 13633  0A7A  3000               	movlw	0
 13634  0A7B  00AE               	movwf	___ftdiv@f2
 13635  0A7C  30C8               	movlw	200
 13636  0A7D  00AF               	movwf	___ftdiv@f2+1
 13637  0A7E  3042               	movlw	66
 13638  0A7F  00B0               	movwf	___ftdiv@f2+2
 13639  0A80  085F               	movf	setPercentValue@i,w
 13640  0A81  00B1               	movwf	___ftdiv@f1
 13641  0A82  0860               	movf	setPercentValue@i+1,w
 13642  0A83  00B2               	movwf	___ftdiv@f1+1
 13643  0A84  0861               	movf	setPercentValue@i+2,w
 13644  0A85  00B3               	movwf	___ftdiv@f1+2
 13645  0A86  318E  26A7  318A   	fcall	___ftdiv
 13646  0A89  0020               	movlb	0	; select bank0
 13647  0A8A  082E               	movf	?___ftdiv,w
 13648  0A8B  00DF               	movwf	setPercentValue@i
 13649  0A8C  082F               	movf	?___ftdiv+1,w
 13650  0A8D  00E0               	movwf	setPercentValue@i+1
 13651  0A8E  0830               	movf	?___ftdiv+2,w
 13652  0A8F  00E1               	movwf	setPercentValue@i+2
 13653                           
 13654                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13655  0A90  085E               	movf	setPercentValue@value,w
 13656  0A91  00DC               	movwf	??_setPercentValue
 13657  0A92  01DD               	clrf	??_setPercentValue+1
 13658  0A93  09DC               	comf	??_setPercentValue,f
 13659  0A94  09DD               	comf	??_setPercentValue+1,f
 13660  0A95  0ADC               	incf	??_setPercentValue,f
 13661  0A96  1903               	skipnz
 13662  0A97  0ADD               	incf	??_setPercentValue+1,f
 13663  0A98  085C               	movf	??_setPercentValue,w
 13664  0A99  3E38               	addlw	56
 13665  0A9A  00A8               	movwf	___awtoft@c
 13666  0A9B  3000               	movlw	0
 13667  0A9C  3D5D               	addwfc	??_setPercentValue+1,w
 13668  0A9D  00A9               	movwf	___awtoft@c+1
 13669  0A9E  319F  2772  318A   	fcall	___awtoft
 13670  0AA1  0020               	movlb	0	; select bank0
 13671  0AA2  0828               	movf	?___awtoft,w
 13672  0AA3  00B1               	movwf	___ftdiv@f1
 13673  0AA4  0829               	movf	?___awtoft+1,w
 13674  0AA5  00B2               	movwf	___ftdiv@f1+1
 13675  0AA6  082A               	movf	?___awtoft+2,w
 13676  0AA7  00B3               	movwf	___ftdiv@f1+2
 13677  0AA8  085F               	movf	setPercentValue@i,w
 13678  0AA9  00AE               	movwf	___ftdiv@f2
 13679  0AAA  0860               	movf	setPercentValue@i+1,w
 13680  0AAB  00AF               	movwf	___ftdiv@f2+1
 13681  0AAC  0861               	movf	setPercentValue@i+2,w
 13682  0AAD  00B0               	movwf	___ftdiv@f2+2
 13683  0AAE  318E  26A7  318A   	fcall	___ftdiv
 13684  0AB1  0020               	movlb	0	; select bank0
 13685  0AB2  082E               	movf	?___ftdiv,w
 13686  0AB3  00BE               	movwf	___ftneg@f1
 13687  0AB4  082F               	movf	?___ftdiv+1,w
 13688  0AB5  00BF               	movwf	___ftneg@f1+1
 13689  0AB6  0830               	movf	?___ftdiv+2,w
 13690  0AB7  00C0               	movwf	___ftneg@f1+2
 13691  0AB8  319B  2362  318A   	fcall	___ftneg
 13692  0ABB  0020               	movlb	0	; select bank0
 13693  0ABC  083E               	movf	?___ftneg,w
 13694  0ABD  00C4               	movwf	___ftadd@f2
 13695  0ABE  083F               	movf	?___ftneg+1,w
 13696  0ABF  00C5               	movwf	___ftadd@f2+1
 13697  0AC0  0840               	movf	?___ftneg+2,w
 13698  0AC1  00C6               	movwf	___ftadd@f2+2
 13699  0AC2  3000               	movlw	0
 13700  0AC3  00C1               	movwf	___ftadd@f1
 13701  0AC4  30C8               	movlw	200
 13702  0AC5  00C2               	movwf	___ftadd@f1+1
 13703  0AC6  3042               	movlw	66
 13704  0AC7  00C3               	movwf	___ftadd@f1+2
 13705  0AC8  3184  2465  318A   	fcall	___ftadd
 13706  0ACB  0020               	movlb	0	; select bank0
 13707  0ACC  0841               	movf	?___ftadd,w
 13708  0ACD  00CE               	movwf	___fttol@f1
 13709  0ACE  0842               	movf	?___ftadd+1,w
 13710  0ACF  00CF               	movwf	___fttol@f1+1
 13711  0AD0  0843               	movf	?___ftadd+2,w
 13712  0AD1  00D0               	movwf	___fttol@f1+2
 13713  0AD2  318D  2589         	fcall	___fttol
 13714  0AD4  0020               	movlb	0	; select bank0
 13715  0AD5  084E               	movf	?___fttol,w
 13716  0AD6  0008               	return
 13717  0AD7                     __end_of_setPercentValue:	
 13718                           
 13719                           	psect	text81
 13720  0D89                     __ptext81:	
 13721 ;; *************** function ___fttol *****************
 13722 ;; Defined at:
 13723 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13724 ;; Parameters:    Size  Location     Type
 13725 ;;  f1              3   46[BANK0 ] float 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  lval            4   55[BANK0 ] unsigned long 
 13728 ;;  exp1            1   59[BANK0 ] unsigned char 
 13729 ;;  sign1           1   54[BANK0 ] unsigned char 
 13730 ;; Return value:  Size  Location     Type
 13731 ;;                  4   46[BANK0 ] long 
 13732 ;; Registers used:
 13733 ;;		wreg, status,2, status,0
 13734 ;; Tracked objects:
 13735 ;;		On entry : 0/0
 13736 ;;		On exit  : 0/0
 13737 ;;		Unchanged: 0/0
 13738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13743 ;;Total ram usage:       14 bytes
 13744 ;; Hardware stack levels used:    1
 13745 ;; Hardware stack levels required when called:    5
 13746 ;; This function calls:
 13747 ;;		Nothing
 13748 ;; This function is called by:
 13749 ;;		_getPercentValue
 13750 ;;		_setPercentValue
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           
 13755                           ;psect for function ___fttol
 13756  0D89                     ___fttol:	
 13757                           
 13758                           ;incstack = 0
 13759                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13760  0D89  0020               	movlb	0	; select bank0
 13761  0D8A  084E               	movf	___fttol@f1,w
 13762  0D8B  00D2               	movwf	??___fttol
 13763  0D8C  084F               	movf	___fttol@f1+1,w
 13764  0D8D  00D3               	movwf	??___fttol+1
 13765  0D8E  0850               	movf	___fttol@f1+2,w
 13766  0D8F  00D4               	movwf	??___fttol+2
 13767  0D90  1003               	clrc
 13768  0D91  0D53               	rlf	??___fttol+1,w
 13769  0D92  0D54               	rlf	??___fttol+2,w
 13770  0D93  00D5               	movwf	??___fttol+3
 13771  0D94  0855               	movf	??___fttol+3,w
 13772  0D95  00DB               	movwf	___fttol@exp1
 13773  0D96  08DB               	movf	___fttol@exp1,f
 13774  0D97  1D03               	skipz
 13775  0D98  2DA2               	goto	l8753
 13776  0D99  3000               	movlw	0
 13777  0D9A  00D1               	movwf	?___fttol+3
 13778  0D9B  3000               	movlw	0
 13779  0D9C  00D0               	movwf	?___fttol+2
 13780  0D9D  3000               	movlw	0
 13781  0D9E  00CF               	movwf	?___fttol+1
 13782  0D9F  3000               	movlw	0
 13783  0DA0  00CE               	movwf	?___fttol
 13784  0DA1  0008               	return
 13785  0DA2                     l8753:	
 13786  0DA2  084E               	movf	___fttol@f1,w
 13787  0DA3  00D2               	movwf	??___fttol
 13788  0DA4  084F               	movf	___fttol@f1+1,w
 13789  0DA5  00D3               	movwf	??___fttol+1
 13790  0DA6  0850               	movf	___fttol@f1+2,w
 13791  0DA7  00D4               	movwf	??___fttol+2
 13792  0DA8  3017               	movlw	23
 13793  0DA9                     u9405:	
 13794  0DA9  36D4               	lsrf	??___fttol+2,f
 13795  0DAA  0CD3               	rrf	??___fttol+1,f
 13796  0DAB  0CD2               	rrf	??___fttol,f
 13797  0DAC  0B89               	decfsz	9,f
 13798  0DAD  2DA9               	goto	u9405
 13799  0DAE  0852               	movf	??___fttol,w
 13800  0DAF  00D5               	movwf	??___fttol+3
 13801  0DB0  0855               	movf	??___fttol+3,w
 13802  0DB1  00D6               	movwf	___fttol@sign1
 13803  0DB2  17CF               	bsf	___fttol@f1+1,7
 13804  0DB3  30FF               	movlw	255
 13805  0DB4  05CE               	andwf	___fttol@f1,f
 13806  0DB5  30FF               	movlw	255
 13807  0DB6  05CF               	andwf	___fttol@f1+1,f
 13808  0DB7  3000               	movlw	0
 13809  0DB8  05D0               	andwf	___fttol@f1+2,f
 13810  0DB9  084E               	movf	___fttol@f1,w
 13811  0DBA  00D7               	movwf	___fttol@lval
 13812  0DBB  084F               	movf	___fttol@f1+1,w
 13813  0DBC  00D8               	movwf	___fttol@lval+1
 13814  0DBD  0850               	movf	___fttol@f1+2,w
 13815  0DBE  00D9               	movwf	___fttol@lval+2
 13816  0DBF  01DA               	clrf	___fttol@lval+3
 13817  0DC0  308E               	movlw	142
 13818  0DC1  02DB               	subwf	___fttol@exp1,f
 13819  0DC2  1FDB               	btfss	___fttol@exp1,7
 13820  0DC3  2DE0               	goto	l8773
 13821  0DC4  085B               	movf	___fttol@exp1,w
 13822  0DC5  3A80               	xorlw	128
 13823  0DC6  3E8F               	addlw	143
 13824  0DC7  1803               	skipnc
 13825  0DC8  2DD2               	goto	l8771
 13826  0DC9  3000               	movlw	0
 13827  0DCA  00D1               	movwf	?___fttol+3
 13828  0DCB  3000               	movlw	0
 13829  0DCC  00D0               	movwf	?___fttol+2
 13830  0DCD  3000               	movlw	0
 13831  0DCE  00CF               	movwf	?___fttol+1
 13832  0DCF  3000               	movlw	0
 13833  0DD0  00CE               	movwf	?___fttol
 13834  0DD1  0008               	return
 13835  0DD2                     l8771:	
 13836  0DD2  3001               	movlw	1
 13837  0DD3                     u9435:	
 13838  0DD3  36DA               	lsrf	___fttol@lval+3,f
 13839  0DD4  0CD9               	rrf	___fttol@lval+2,f
 13840  0DD5  0CD8               	rrf	___fttol@lval+1,f
 13841  0DD6  0CD7               	rrf	___fttol@lval,f
 13842  0DD7  0B89               	decfsz	9,f
 13843  0DD8  2DD3               	goto	u9435
 13844  0DD9  3001               	movlw	1
 13845  0DDA  00D2               	movwf	??___fttol
 13846  0DDB  0852               	movf	??___fttol,w
 13847  0DDC  07DB               	addwf	___fttol@exp1,f
 13848  0DDD  1903               	btfsc	3,2
 13849  0DDE  2DF9               	goto	l8783
 13850  0DDF  2DD2               	goto	l8771
 13851  0DE0                     l8773:	
 13852  0DE0  3018               	movlw	24
 13853  0DE1  025B               	subwf	___fttol@exp1,w
 13854  0DE2  1C03               	skipc
 13855  0DE3  2DF6               	goto	l8781
 13856  0DE4  3000               	movlw	0
 13857  0DE5  00D1               	movwf	?___fttol+3
 13858  0DE6  3000               	movlw	0
 13859  0DE7  00D0               	movwf	?___fttol+2
 13860  0DE8  3000               	movlw	0
 13861  0DE9  00CF               	movwf	?___fttol+1
 13862  0DEA  3000               	movlw	0
 13863  0DEB  00CE               	movwf	?___fttol
 13864  0DEC  0008               	return
 13865  0DED                     l8779:	
 13866  0DED  3001               	movlw	1
 13867  0DEE                     u9465:	
 13868  0DEE  35D7               	lslf	___fttol@lval,f
 13869  0DEF  0DD8               	rlf	___fttol@lval+1,f
 13870  0DF0  0DD9               	rlf	___fttol@lval+2,f
 13871  0DF1  0DDA               	rlf	___fttol@lval+3,f
 13872  0DF2  0B89               	decfsz	9,f
 13873  0DF3  2DEE               	goto	u9465
 13874  0DF4  3001               	movlw	1
 13875  0DF5  02DB               	subwf	___fttol@exp1,f
 13876  0DF6                     l8781:	
 13877  0DF6  08DB               	movf	___fttol@exp1,f
 13878  0DF7  1D03               	skipz
 13879  0DF8  2DED               	goto	l8779
 13880  0DF9                     l8783:	
 13881  0DF9  0856               	movf	___fttol@sign1,w
 13882  0DFA  1903               	btfsc	3,2
 13883  0DFB  2E07               	goto	l8787
 13884  0DFC  09D7               	comf	___fttol@lval,f
 13885  0DFD  09D8               	comf	___fttol@lval+1,f
 13886  0DFE  09D9               	comf	___fttol@lval+2,f
 13887  0DFF  09DA               	comf	___fttol@lval+3,f
 13888  0E00  0AD7               	incf	___fttol@lval,f
 13889  0E01  1903               	skipnz
 13890  0E02  0AD8               	incf	___fttol@lval+1,f
 13891  0E03  1903               	skipnz
 13892  0E04  0AD9               	incf	___fttol@lval+2,f
 13893  0E05  1903               	skipnz
 13894  0E06  0ADA               	incf	___fttol@lval+3,f
 13895  0E07                     l8787:	
 13896  0E07  085A               	movf	___fttol@lval+3,w
 13897  0E08  00D1               	movwf	?___fttol+3
 13898  0E09  0859               	movf	___fttol@lval+2,w
 13899  0E0A  00D0               	movwf	?___fttol+2
 13900  0E0B  0858               	movf	___fttol@lval+1,w
 13901  0E0C  00CF               	movwf	?___fttol+1
 13902  0E0D  0857               	movf	___fttol@lval,w
 13903  0E0E  00CE               	movwf	?___fttol
 13904  0E0F  0008               	return
 13905  0E10                     __end_of___fttol:	
 13906                           
 13907                           	psect	text82
 13908  1B62                     __ptext82:	
 13909 ;; *************** function ___ftneg *****************
 13910 ;; Defined at:
 13911 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;  f1              3   30[BANK0 ] float 
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;		None
 13916 ;; Return value:  Size  Location     Type
 13917 ;;                  3   30[BANK0 ] float 
 13918 ;; Registers used:
 13919 ;;		wreg
 13920 ;; Tracked objects:
 13921 ;;		On entry : 0/0
 13922 ;;		On exit  : 0/0
 13923 ;;		Unchanged: 0/0
 13924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13925 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;Total ram usage:        3 bytes
 13930 ;; Hardware stack levels used:    1
 13931 ;; Hardware stack levels required when called:    5
 13932 ;; This function calls:
 13933 ;;		Nothing
 13934 ;; This function is called by:
 13935 ;;		_getPercentValue
 13936 ;;		_setPercentValue
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940                           
 13941                           ;psect for function ___ftneg
 13942  1B62                     ___ftneg:	
 13943                           
 13944                           ;incstack = 0
 13945                           ; Regs used in ___ftneg: [wreg]
 13946  1B62  0020               	movlb	0	; select bank0
 13947  1B63  0840               	movf	___ftneg@f1+2,w
 13948  1B64  043F               	iorwf	___ftneg@f1+1,w
 13949  1B65  043E               	iorwf	___ftneg@f1,w
 13950  1B66  1903               	skipnz
 13951  1B67  0008               	return
 13952  1B68  3080               	movlw	128
 13953  1B69  06C0               	xorwf	___ftneg@f1+2,f
 13954  1B6A  0008               	return
 13955  1B6B                     __end_of___ftneg:	
 13956                           
 13957                           	psect	text83
 13958  0EA7                     __ptext83:	
 13959 ;; *************** function ___ftdiv *****************
 13960 ;; Defined at:
 13961 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  f2              3   14[BANK0 ] float 
 13964 ;;  f1              3   17[BANK0 ] float 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  f3              3   25[BANK0 ] float 
 13967 ;;  sign            1   29[BANK0 ] unsigned char 
 13968 ;;  exp             1   28[BANK0 ] unsigned char 
 13969 ;;  cntr            1   24[BANK0 ] unsigned char 
 13970 ;; Return value:  Size  Location     Type
 13971 ;;                  3   14[BANK0 ] float 
 13972 ;; Registers used:
 13973 ;;		wreg, status,2, status,0, pclath, cstack
 13974 ;; Tracked objects:
 13975 ;;		On entry : 0/0
 13976 ;;		On exit  : 0/0
 13977 ;;		Unchanged: 0/0
 13978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13979 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;Total ram usage:       16 bytes
 13984 ;; Hardware stack levels used:    1
 13985 ;; Hardware stack levels required when called:    6
 13986 ;; This function calls:
 13987 ;;		___ftpack
 13988 ;; This function is called by:
 13989 ;;		_getPercentValue
 13990 ;;		_setPercentValue
 13991 ;; This function uses a non-reentrant model
 13992 ;;
 13993                           
 13994                           
 13995                           ;psect for function ___ftdiv
 13996  0EA7                     ___ftdiv:	
 13997                           
 13998                           ;incstack = 0
 13999                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14000  0EA7  0020               	movlb	0	; select bank0
 14001  0EA8  0831               	movf	___ftdiv@f1,w
 14002  0EA9  00B4               	movwf	??___ftdiv
 14003  0EAA  0832               	movf	___ftdiv@f1+1,w
 14004  0EAB  00B5               	movwf	??___ftdiv+1
 14005  0EAC  0833               	movf	___ftdiv@f1+2,w
 14006  0EAD  00B6               	movwf	??___ftdiv+2
 14007  0EAE  1003               	clrc
 14008  0EAF  0D35               	rlf	??___ftdiv+1,w
 14009  0EB0  0D36               	rlf	??___ftdiv+2,w
 14010  0EB1  00B7               	movwf	??___ftdiv+3
 14011  0EB2  0837               	movf	??___ftdiv+3,w
 14012  0EB3  00BC               	movwf	___ftdiv@exp
 14013  0EB4  08BC               	movf	___ftdiv@exp,f
 14014  0EB5  1D03               	skipz
 14015  0EB6  2EBE               	goto	l8653
 14016  0EB7  3000               	movlw	0
 14017  0EB8  00AE               	movwf	?___ftdiv
 14018  0EB9  3000               	movlw	0
 14019  0EBA  00AF               	movwf	?___ftdiv+1
 14020  0EBB  3000               	movlw	0
 14021  0EBC  00B0               	movwf	?___ftdiv+2
 14022  0EBD  0008               	return
 14023  0EBE                     l8653:	
 14024  0EBE  082E               	movf	___ftdiv@f2,w
 14025  0EBF  00B4               	movwf	??___ftdiv
 14026  0EC0  082F               	movf	___ftdiv@f2+1,w
 14027  0EC1  00B5               	movwf	??___ftdiv+1
 14028  0EC2  0830               	movf	___ftdiv@f2+2,w
 14029  0EC3  00B6               	movwf	??___ftdiv+2
 14030  0EC4  1003               	clrc
 14031  0EC5  0D35               	rlf	??___ftdiv+1,w
 14032  0EC6  0D36               	rlf	??___ftdiv+2,w
 14033  0EC7  00B7               	movwf	??___ftdiv+3
 14034  0EC8  0837               	movf	??___ftdiv+3,w
 14035  0EC9  00BD               	movwf	___ftdiv@sign
 14036  0ECA  08BD               	movf	___ftdiv@sign,f
 14037  0ECB  1D03               	skipz
 14038  0ECC  2ED4               	goto	l8659
 14039  0ECD  3000               	movlw	0
 14040  0ECE  00AE               	movwf	?___ftdiv
 14041  0ECF  3000               	movlw	0
 14042  0ED0  00AF               	movwf	?___ftdiv+1
 14043  0ED1  3000               	movlw	0
 14044  0ED2  00B0               	movwf	?___ftdiv+2
 14045  0ED3  0008               	return
 14046  0ED4                     l8659:	
 14047  0ED4  3000               	movlw	0
 14048  0ED5  00B9               	movwf	___ftdiv@f3
 14049  0ED6  3000               	movlw	0
 14050  0ED7  00BA               	movwf	___ftdiv@f3+1
 14051  0ED8  3000               	movlw	0
 14052  0ED9  00BB               	movwf	___ftdiv@f3+2
 14053  0EDA  3089               	movlw	137
 14054  0EDB  073D               	addwf	___ftdiv@sign,w
 14055  0EDC  00B4               	movwf	??___ftdiv
 14056  0EDD  0834               	movf	??___ftdiv,w
 14057  0EDE  02BC               	subwf	___ftdiv@exp,f
 14058  0EDF  0831               	movf	___ftdiv@f1,w
 14059  0EE0  00B4               	movwf	??___ftdiv
 14060  0EE1  0832               	movf	___ftdiv@f1+1,w
 14061  0EE2  00B5               	movwf	??___ftdiv+1
 14062  0EE3  0833               	movf	___ftdiv@f1+2,w
 14063  0EE4  00B6               	movwf	??___ftdiv+2
 14064  0EE5  3010               	movlw	16
 14065  0EE6                     u9205:	
 14066  0EE6  36B6               	lsrf	??___ftdiv+2,f
 14067  0EE7  0CB5               	rrf	??___ftdiv+1,f
 14068  0EE8  0CB4               	rrf	??___ftdiv,f
 14069  0EE9  0B89               	decfsz	9,f
 14070  0EEA  2EE6               	goto	u9205
 14071  0EEB  0834               	movf	??___ftdiv,w
 14072  0EEC  00B7               	movwf	??___ftdiv+3
 14073  0EED  0837               	movf	??___ftdiv+3,w
 14074  0EEE  00BD               	movwf	___ftdiv@sign
 14075  0EEF  082E               	movf	___ftdiv@f2,w
 14076  0EF0  00B4               	movwf	??___ftdiv
 14077  0EF1  082F               	movf	___ftdiv@f2+1,w
 14078  0EF2  00B5               	movwf	??___ftdiv+1
 14079  0EF3  0830               	movf	___ftdiv@f2+2,w
 14080  0EF4  00B6               	movwf	??___ftdiv+2
 14081  0EF5  3010               	movlw	16
 14082  0EF6                     u9215:	
 14083  0EF6  36B6               	lsrf	??___ftdiv+2,f
 14084  0EF7  0CB5               	rrf	??___ftdiv+1,f
 14085  0EF8  0CB4               	rrf	??___ftdiv,f
 14086  0EF9  0B89               	decfsz	9,f
 14087  0EFA  2EF6               	goto	u9215
 14088  0EFB  0834               	movf	??___ftdiv,w
 14089  0EFC  00B7               	movwf	??___ftdiv+3
 14090  0EFD  0837               	movf	??___ftdiv+3,w
 14091  0EFE  06BD               	xorwf	___ftdiv@sign,f
 14092  0EFF  3080               	movlw	128
 14093  0F00  00B4               	movwf	??___ftdiv
 14094  0F01  0834               	movf	??___ftdiv,w
 14095  0F02  05BD               	andwf	___ftdiv@sign,f
 14096  0F03  17B2               	bsf	___ftdiv@f1+1,7
 14097  0F04  30FF               	movlw	255
 14098  0F05  05B1               	andwf	___ftdiv@f1,f
 14099  0F06  30FF               	movlw	255
 14100  0F07  05B2               	andwf	___ftdiv@f1+1,f
 14101  0F08  3000               	movlw	0
 14102  0F09  05B3               	andwf	___ftdiv@f1+2,f
 14103  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 14104  0F0B  30FF               	movlw	255
 14105  0F0C  05AE               	andwf	___ftdiv@f2,f
 14106  0F0D  30FF               	movlw	255
 14107  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 14108  0F0F  3000               	movlw	0
 14109  0F10  05B0               	andwf	___ftdiv@f2+2,f
 14110  0F11  3018               	movlw	24
 14111  0F12  00B4               	movwf	??___ftdiv
 14112  0F13  0834               	movf	??___ftdiv,w
 14113  0F14  00B8               	movwf	___ftdiv@cntr
 14114  0F15                     l8673:	
 14115  0F15  3001               	movlw	1
 14116  0F16                     u9225:	
 14117  0F16  35B9               	lslf	___ftdiv@f3,f
 14118  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 14119  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 14120  0F19  0B89               	decfsz	9,f
 14121  0F1A  2F16               	goto	u9225
 14122  0F1B  0830               	movf	___ftdiv@f2+2,w
 14123  0F1C  0233               	subwf	___ftdiv@f1+2,w
 14124  0F1D  1D03               	skipz
 14125  0F1E  2F25               	goto	u9235
 14126  0F1F  082F               	movf	___ftdiv@f2+1,w
 14127  0F20  0232               	subwf	___ftdiv@f1+1,w
 14128  0F21  1D03               	skipz
 14129  0F22  2F25               	goto	u9235
 14130  0F23  082E               	movf	___ftdiv@f2,w
 14131  0F24  0231               	subwf	___ftdiv@f1,w
 14132  0F25                     u9235:	
 14133  0F25  1C03               	skipc
 14134  0F26  2F2E               	goto	l8681
 14135  0F27  082E               	movf	___ftdiv@f2,w
 14136  0F28  02B1               	subwf	___ftdiv@f1,f
 14137  0F29  082F               	movf	___ftdiv@f2+1,w
 14138  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 14139  0F2B  0830               	movf	___ftdiv@f2+2,w
 14140  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 14141  0F2D  1439               	bsf	___ftdiv@f3,0
 14142  0F2E                     l8681:	
 14143  0F2E  3001               	movlw	1
 14144  0F2F                     u9245:	
 14145  0F2F  35B1               	lslf	___ftdiv@f1,f
 14146  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 14147  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 14148  0F32  0B89               	decfsz	9,f
 14149  0F33  2F2F               	goto	u9245
 14150  0F34  3001               	movlw	1
 14151  0F35  02B8               	subwf	___ftdiv@cntr,f
 14152  0F36  1D03               	btfss	3,2
 14153  0F37  2F15               	goto	l8673
 14154  0F38  0839               	movf	___ftdiv@f3,w
 14155  0F39  00A0               	movwf	___ftpack@arg
 14156  0F3A  083A               	movf	___ftdiv@f3+1,w
 14157  0F3B  00A1               	movwf	___ftpack@arg+1
 14158  0F3C  083B               	movf	___ftdiv@f3+2,w
 14159  0F3D  00A2               	movwf	___ftpack@arg+2
 14160  0F3E  083C               	movf	___ftdiv@exp,w
 14161  0F3F  00B4               	movwf	??___ftdiv
 14162  0F40  0834               	movf	??___ftdiv,w
 14163  0F41  00A3               	movwf	___ftpack@exp
 14164  0F42  083D               	movf	___ftdiv@sign,w
 14165  0F43  00B5               	movwf	??___ftdiv+1
 14166  0F44  0835               	movf	??___ftdiv+1,w
 14167  0F45  00A4               	movwf	___ftpack@sign
 14168  0F46  3189  214B         	fcall	___ftpack
 14169  0F48  0020               	movlb	0	; select bank0
 14170  0F49  0820               	movf	?___ftpack,w
 14171  0F4A  00AE               	movwf	?___ftdiv
 14172  0F4B  0821               	movf	?___ftpack+1,w
 14173  0F4C  00AF               	movwf	?___ftdiv+1
 14174  0F4D  0822               	movf	?___ftpack+2,w
 14175  0F4E  00B0               	movwf	?___ftdiv+2
 14176  0F4F  0008               	return
 14177  0F50                     __end_of___ftdiv:	
 14178                           
 14179                           	psect	text84
 14180  0465                     __ptext84:	
 14181 ;; *************** function ___ftadd *****************
 14182 ;; Defined at:
 14183 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  f1              3   33[BANK0 ] float 
 14186 ;;  f2              3   36[BANK0 ] float 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  exp1            1   45[BANK0 ] unsigned char 
 14189 ;;  exp2            1   44[BANK0 ] unsigned char 
 14190 ;;  sign            1   43[BANK0 ] unsigned char 
 14191 ;; Return value:  Size  Location     Type
 14192 ;;                  3   33[BANK0 ] float 
 14193 ;; Registers used:
 14194 ;;		wreg, status,2, status,0, pclath, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : 0/0
 14197 ;;		On exit  : 0/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14200 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;Total ram usage:       13 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:    6
 14207 ;; This function calls:
 14208 ;;		___ftpack
 14209 ;; This function is called by:
 14210 ;;		_getPercentValue
 14211 ;;		_setPercentValue
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           
 14216                           ;psect for function ___ftadd
 14217  0465                     ___ftadd:	
 14218                           
 14219                           ;incstack = 0
 14220                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14221  0465  0020               	movlb	0	; select bank0
 14222  0466  0841               	movf	___ftadd@f1,w
 14223  0467  00C7               	movwf	??___ftadd
 14224  0468  0842               	movf	___ftadd@f1+1,w
 14225  0469  00C8               	movwf	??___ftadd+1
 14226  046A  0843               	movf	___ftadd@f1+2,w
 14227  046B  00C9               	movwf	??___ftadd+2
 14228  046C  1003               	clrc
 14229  046D  0D48               	rlf	??___ftadd+1,w
 14230  046E  0D49               	rlf	??___ftadd+2,w
 14231  046F  00CA               	movwf	??___ftadd+3
 14232  0470  084A               	movf	??___ftadd+3,w
 14233  0471  00CD               	movwf	___ftadd@exp1
 14234  0472  0844               	movf	___ftadd@f2,w
 14235  0473  00C7               	movwf	??___ftadd
 14236  0474  0845               	movf	___ftadd@f2+1,w
 14237  0475  00C8               	movwf	??___ftadd+1
 14238  0476  0846               	movf	___ftadd@f2+2,w
 14239  0477  00C9               	movwf	??___ftadd+2
 14240  0478  1003               	clrc
 14241  0479  0D48               	rlf	??___ftadd+1,w
 14242  047A  0D49               	rlf	??___ftadd+2,w
 14243  047B  00CA               	movwf	??___ftadd+3
 14244  047C  084A               	movf	??___ftadd+3,w
 14245  047D  00CC               	movwf	___ftadd@exp2
 14246  047E  084D               	movf	___ftadd@exp1,w
 14247  047F  1903               	btfsc	3,2
 14248  0480  2C8D               	goto	l8583
 14249  0481  084C               	movf	___ftadd@exp2,w
 14250  0482  024D               	subwf	___ftadd@exp1,w
 14251  0483  1803               	skipnc
 14252  0484  2C94               	goto	l8587
 14253  0485  034D               	decf	___ftadd@exp1,w
 14254  0486  3AFF               	xorlw	255
 14255  0487  074C               	addwf	___ftadd@exp2,w
 14256  0488  00C7               	movwf	??___ftadd
 14257  0489  3019               	movlw	25
 14258  048A  0247               	subwf	??___ftadd,w
 14259  048B  1C03               	skipc
 14260  048C  2C94               	goto	l8587
 14261  048D                     l8583:	
 14262  048D  0844               	movf	___ftadd@f2,w
 14263  048E  00C1               	movwf	?___ftadd
 14264  048F  0845               	movf	___ftadd@f2+1,w
 14265  0490  00C2               	movwf	?___ftadd+1
 14266  0491  0846               	movf	___ftadd@f2+2,w
 14267  0492  00C3               	movwf	?___ftadd+2
 14268  0493  0008               	return
 14269  0494                     l8587:	
 14270  0494  084C               	movf	___ftadd@exp2,w
 14271  0495  1903               	btfsc	3,2
 14272  0496  0008               	return
 14273  0497  084D               	movf	___ftadd@exp1,w
 14274  0498  024C               	subwf	___ftadd@exp2,w
 14275  0499  1803               	skipnc
 14276  049A  2CA3               	goto	l8593
 14277  049B  034C               	decf	___ftadd@exp2,w
 14278  049C  3AFF               	xorlw	255
 14279  049D  074D               	addwf	___ftadd@exp1,w
 14280  049E  00C7               	movwf	??___ftadd
 14281  049F  3019               	movlw	25
 14282  04A0  0247               	subwf	??___ftadd,w
 14283  04A1  1803               	btfsc	3,0
 14284  04A2  0008               	return
 14285  04A3                     l8593:	
 14286  04A3  3006               	movlw	6
 14287  04A4  00C7               	movwf	??___ftadd
 14288  04A5  0847               	movf	??___ftadd,w
 14289  04A6  00CB               	movwf	___ftadd@sign
 14290  04A7  1BC3               	btfsc	___ftadd@f1+2,7
 14291  04A8  17CB               	bsf	___ftadd@sign,7
 14292  04A9  1BC6               	btfsc	___ftadd@f2+2,7
 14293  04AA  174B               	bsf	___ftadd@sign,6
 14294  04AB  17C2               	bsf	___ftadd@f1+1,7
 14295  04AC  30FF               	movlw	255
 14296  04AD  05C1               	andwf	___ftadd@f1,f
 14297  04AE  30FF               	movlw	255
 14298  04AF  05C2               	andwf	___ftadd@f1+1,f
 14299  04B0  3000               	movlw	0
 14300  04B1  05C3               	andwf	___ftadd@f1+2,f
 14301  04B2  17C5               	bsf	___ftadd@f2+1,7
 14302  04B3  30FF               	movlw	255
 14303  04B4  05C4               	andwf	___ftadd@f2,f
 14304  04B5  30FF               	movlw	255
 14305  04B6  05C5               	andwf	___ftadd@f2+1,f
 14306  04B7  3000               	movlw	0
 14307  04B8  05C6               	andwf	___ftadd@f2+2,f
 14308  04B9  084C               	movf	___ftadd@exp2,w
 14309  04BA  024D               	subwf	___ftadd@exp1,w
 14310  04BB  1803               	skipnc
 14311  04BC  2CDF               	goto	l8615
 14312  04BD                     l8605:	
 14313  04BD  3001               	movlw	1
 14314  04BE                     u9045:	
 14315  04BE  35C4               	lslf	___ftadd@f2,f
 14316  04BF  0DC5               	rlf	___ftadd@f2+1,f
 14317  04C0  0DC6               	rlf	___ftadd@f2+2,f
 14318  04C1  0B89               	decfsz	9,f
 14319  04C2  2CBE               	goto	u9045
 14320  04C3  3001               	movlw	1
 14321  04C4  02CC               	subwf	___ftadd@exp2,f
 14322  04C5  084C               	movf	___ftadd@exp2,w
 14323  04C6  064D               	xorwf	___ftadd@exp1,w
 14324  04C7  1903               	skipnz
 14325  04C8  2CDA               	goto	l8613
 14326  04C9  3001               	movlw	1
 14327  04CA  02CB               	subwf	___ftadd@sign,f
 14328  04CB  084B               	movf	___ftadd@sign,w
 14329  04CC  3907               	andlw	7
 14330  04CD  1903               	btfsc	3,2
 14331  04CE  2CDA               	goto	l8613
 14332  04CF  2CBD               	goto	l8605
 14333  04D0                     l8611:	
 14334  04D0  3001               	movlw	1
 14335  04D1                     u9075:	
 14336  04D1  36C3               	lsrf	___ftadd@f1+2,f
 14337  04D2  0CC2               	rrf	___ftadd@f1+1,f
 14338  04D3  0CC1               	rrf	___ftadd@f1,f
 14339  04D4  0B89               	decfsz	9,f
 14340  04D5  2CD1               	goto	u9075
 14341  04D6  3001               	movlw	1
 14342  04D7  00C7               	movwf	??___ftadd
 14343  04D8  0847               	movf	??___ftadd,w
 14344  04D9  07CD               	addwf	___ftadd@exp1,f
 14345  04DA                     l8613:	
 14346  04DA  084D               	movf	___ftadd@exp1,w
 14347  04DB  064C               	xorwf	___ftadd@exp2,w
 14348  04DC  1903               	btfsc	3,2
 14349  04DD  2D04               	goto	l3056
 14350  04DE  2CD0               	goto	l8611
 14351  04DF                     l8615:	
 14352  04DF  084D               	movf	___ftadd@exp1,w
 14353  04E0  024C               	subwf	___ftadd@exp2,w
 14354  04E1  1803               	skipnc
 14355  04E2  2D04               	goto	l3056
 14356  04E3                     l8617:	
 14357  04E3  3001               	movlw	1
 14358  04E4                     u9105:	
 14359  04E4  35C1               	lslf	___ftadd@f1,f
 14360  04E5  0DC2               	rlf	___ftadd@f1+1,f
 14361  04E6  0DC3               	rlf	___ftadd@f1+2,f
 14362  04E7  0B89               	decfsz	9,f
 14363  04E8  2CE4               	goto	u9105
 14364  04E9  3001               	movlw	1
 14365  04EA  02CD               	subwf	___ftadd@exp1,f
 14366  04EB  084C               	movf	___ftadd@exp2,w
 14367  04EC  064D               	xorwf	___ftadd@exp1,w
 14368  04ED  1903               	skipnz
 14369  04EE  2D00               	goto	l8625
 14370  04EF  3001               	movlw	1
 14371  04F0  02CB               	subwf	___ftadd@sign,f
 14372  04F1  084B               	movf	___ftadd@sign,w
 14373  04F2  3907               	andlw	7
 14374  04F3  1903               	btfsc	3,2
 14375  04F4  2D00               	goto	l8625
 14376  04F5  2CE3               	goto	l8617
 14377  04F6                     l8623:	
 14378  04F6  3001               	movlw	1
 14379  04F7                     u9135:	
 14380  04F7  36C6               	lsrf	___ftadd@f2+2,f
 14381  04F8  0CC5               	rrf	___ftadd@f2+1,f
 14382  04F9  0CC4               	rrf	___ftadd@f2,f
 14383  04FA  0B89               	decfsz	9,f
 14384  04FB  2CF7               	goto	u9135
 14385  04FC  3001               	movlw	1
 14386  04FD  00C7               	movwf	??___ftadd
 14387  04FE  0847               	movf	??___ftadd,w
 14388  04FF  07CC               	addwf	___ftadd@exp2,f
 14389  0500                     l8625:	
 14390  0500  084D               	movf	___ftadd@exp1,w
 14391  0501  064C               	xorwf	___ftadd@exp2,w
 14392  0502  1D03               	skipz
 14393  0503  2CF6               	goto	l8623
 14394  0504                     l3056:	
 14395  0504  1FCB               	btfss	___ftadd@sign,7
 14396  0505  2D16               	goto	l8629
 14397  0506  30FF               	movlw	255
 14398  0507  06C1               	xorwf	___ftadd@f1,f
 14399  0508  30FF               	movlw	255
 14400  0509  06C2               	xorwf	___ftadd@f1+1,f
 14401  050A  30FF               	movlw	255
 14402  050B  06C3               	xorwf	___ftadd@f1+2,f
 14403  050C  3001               	movlw	1
 14404  050D  07C1               	addwf	___ftadd@f1,f
 14405  050E  3000               	movlw	0
 14406  050F  1803               	skipnc
 14407  0510  3001               	movlw	1
 14408  0511  07C2               	addwf	___ftadd@f1+1,f
 14409  0512  3000               	movlw	0
 14410  0513  1803               	skipnc
 14411  0514  3001               	movlw	1
 14412  0515  07C3               	addwf	___ftadd@f1+2,f
 14413  0516                     l8629:	
 14414  0516  1F4B               	btfss	___ftadd@sign,6
 14415  0517  2D28               	goto	l8633
 14416  0518  30FF               	movlw	255
 14417  0519  06C4               	xorwf	___ftadd@f2,f
 14418  051A  30FF               	movlw	255
 14419  051B  06C5               	xorwf	___ftadd@f2+1,f
 14420  051C  30FF               	movlw	255
 14421  051D  06C6               	xorwf	___ftadd@f2+2,f
 14422  051E  3001               	movlw	1
 14423  051F  07C4               	addwf	___ftadd@f2,f
 14424  0520  3000               	movlw	0
 14425  0521  1803               	skipnc
 14426  0522  3001               	movlw	1
 14427  0523  07C5               	addwf	___ftadd@f2+1,f
 14428  0524  3000               	movlw	0
 14429  0525  1803               	skipnc
 14430  0526  3001               	movlw	1
 14431  0527  07C6               	addwf	___ftadd@f2+2,f
 14432  0528                     l8633:	
 14433  0528  01CB               	clrf	___ftadd@sign
 14434  0529  0841               	movf	___ftadd@f1,w
 14435  052A  07C4               	addwf	___ftadd@f2,f
 14436  052B  0842               	movf	___ftadd@f1+1,w
 14437  052C  3DC5               	addwfc	___ftadd@f2+1,f
 14438  052D  0843               	movf	___ftadd@f1+2,w
 14439  052E  3DC6               	addwfc	___ftadd@f2+2,f
 14440  052F  1FC6               	btfss	___ftadd@f2+2,7
 14441  0530  2D43               	goto	l8643
 14442  0531  30FF               	movlw	255
 14443  0532  06C4               	xorwf	___ftadd@f2,f
 14444  0533  30FF               	movlw	255
 14445  0534  06C5               	xorwf	___ftadd@f2+1,f
 14446  0535  30FF               	movlw	255
 14447  0536  06C6               	xorwf	___ftadd@f2+2,f
 14448  0537  3001               	movlw	1
 14449  0538  07C4               	addwf	___ftadd@f2,f
 14450  0539  3000               	movlw	0
 14451  053A  1803               	skipnc
 14452  053B  3001               	movlw	1
 14453  053C  07C5               	addwf	___ftadd@f2+1,f
 14454  053D  3000               	movlw	0
 14455  053E  1803               	skipnc
 14456  053F  3001               	movlw	1
 14457  0540  07C6               	addwf	___ftadd@f2+2,f
 14458  0541  01CB               	clrf	___ftadd@sign
 14459  0542  0ACB               	incf	___ftadd@sign,f
 14460  0543                     l8643:	
 14461  0543  0844               	movf	___ftadd@f2,w
 14462  0544  00A0               	movwf	___ftpack@arg
 14463  0545  0845               	movf	___ftadd@f2+1,w
 14464  0546  00A1               	movwf	___ftpack@arg+1
 14465  0547  0846               	movf	___ftadd@f2+2,w
 14466  0548  00A2               	movwf	___ftpack@arg+2
 14467  0549  084D               	movf	___ftadd@exp1,w
 14468  054A  00C7               	movwf	??___ftadd
 14469  054B  0847               	movf	??___ftadd,w
 14470  054C  00A3               	movwf	___ftpack@exp
 14471  054D  084B               	movf	___ftadd@sign,w
 14472  054E  00C8               	movwf	??___ftadd+1
 14473  054F  0848               	movf	??___ftadd+1,w
 14474  0550  00A4               	movwf	___ftpack@sign
 14475  0551  3189  214B         	fcall	___ftpack
 14476  0553  0020               	movlb	0	; select bank0
 14477  0554  0820               	movf	?___ftpack,w
 14478  0555  00C1               	movwf	?___ftadd
 14479  0556  0821               	movf	?___ftpack+1,w
 14480  0557  00C2               	movwf	?___ftadd+1
 14481  0558  0822               	movf	?___ftpack+2,w
 14482  0559  00C3               	movwf	?___ftadd+2
 14483  055A  0008               	return
 14484  055B                     __end_of___ftadd:	
 14485                           
 14486                           	psect	text85
 14487  1F72                     __ptext85:	
 14488 ;; *************** function ___awtoft *****************
 14489 ;; Defined at:
 14490 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;  c               2    8[BANK0 ] int 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;  sign            1   13[BANK0 ] unsigned char 
 14495 ;; Return value:  Size  Location     Type
 14496 ;;                  3    8[BANK0 ] float 
 14497 ;; Registers used:
 14498 ;;		wreg, status,2, status,0, pclath, cstack
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14504 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;Total ram usage:        6 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    6
 14511 ;; This function calls:
 14512 ;;		___ftpack
 14513 ;; This function is called by:
 14514 ;;		_getPercentValue
 14515 ;;		_setPercentValue
 14516 ;; This function uses a non-reentrant model
 14517 ;;
 14518                           
 14519                           
 14520                           ;psect for function ___awtoft
 14521  1F72                     ___awtoft:	
 14522                           
 14523                           ;incstack = 0
 14524                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14525  1F72  0020               	movlb	0	; select bank0
 14526  1F73  01AD               	clrf	___awtoft@sign
 14527  1F74  1FA9               	btfss	___awtoft@c+1,7
 14528  1F75  2F7D               	goto	l8571
 14529  1F76  09A8               	comf	___awtoft@c,f
 14530  1F77  09A9               	comf	___awtoft@c+1,f
 14531  1F78  0AA8               	incf	___awtoft@c,f
 14532  1F79  1903               	skipnz
 14533  1F7A  0AA9               	incf	___awtoft@c+1,f
 14534  1F7B  01AD               	clrf	___awtoft@sign
 14535  1F7C  0AAD               	incf	___awtoft@sign,f
 14536  1F7D                     l8571:	
 14537  1F7D  0828               	movf	___awtoft@c,w
 14538  1F7E  00A0               	movwf	___ftpack@arg
 14539  1F7F  0829               	movf	___awtoft@c+1,w
 14540  1F80  00A1               	movwf	___ftpack@arg+1
 14541  1F81  01A2               	clrf	___ftpack@arg+2
 14542  1F82  308E               	movlw	142
 14543  1F83  00AB               	movwf	??___awtoft
 14544  1F84  082B               	movf	??___awtoft,w
 14545  1F85  00A3               	movwf	___ftpack@exp
 14546  1F86  082D               	movf	___awtoft@sign,w
 14547  1F87  00AC               	movwf	??___awtoft+1
 14548  1F88  082C               	movf	??___awtoft+1,w
 14549  1F89  00A4               	movwf	___ftpack@sign
 14550  1F8A  3189  214B         	fcall	___ftpack
 14551  1F8C  0020               	movlb	0	; select bank0
 14552  1F8D  0820               	movf	?___ftpack,w
 14553  1F8E  00A8               	movwf	?___awtoft
 14554  1F8F  0821               	movf	?___ftpack+1,w
 14555  1F90  00A9               	movwf	?___awtoft+1
 14556  1F91  0822               	movf	?___ftpack+2,w
 14557  1F92  00AA               	movwf	?___awtoft+2
 14558  1F93  0008               	return
 14559  1F94                     __end_of___awtoft:	
 14560                           
 14561                           	psect	text86
 14562  094B                     __ptext86:	
 14563 ;; *************** function ___ftpack *****************
 14564 ;; Defined at:
 14565 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;  arg             3    0[BANK0 ] unsigned um
 14568 ;;  exp             1    3[BANK0 ] unsigned char 
 14569 ;;  sign            1    4[BANK0 ] unsigned char 
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;		None
 14572 ;; Return value:  Size  Location     Type
 14573 ;;                  3    0[BANK0 ] float 
 14574 ;; Registers used:
 14575 ;;		wreg, status,2, status,0
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        8 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:    5
 14588 ;; This function calls:
 14589 ;;		Nothing
 14590 ;; This function is called by:
 14591 ;;		___awtoft
 14592 ;;		___ftadd
 14593 ;;		___ftdiv
 14594 ;;		___ftmul
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           
 14599                           ;psect for function ___ftpack
 14600  094B                     ___ftpack:	
 14601                           
 14602                           ;incstack = 0
 14603                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14604  094B  0020               	movlb	0	; select bank0
 14605  094C  0823               	movf	___ftpack@exp,w
 14606  094D  1903               	btfsc	3,2
 14607  094E  2954               	goto	l8521
 14608  094F  0822               	movf	___ftpack@arg+2,w
 14609  0950  0421               	iorwf	___ftpack@arg+1,w
 14610  0951  0420               	iorwf	___ftpack@arg,w
 14611  0952  1D03               	skipz
 14612  0953  2965               	goto	l8527
 14613  0954                     l8521:	
 14614  0954  3000               	movlw	0
 14615  0955  00A0               	movwf	?___ftpack
 14616  0956  3000               	movlw	0
 14617  0957  00A1               	movwf	?___ftpack+1
 14618  0958  3000               	movlw	0
 14619  0959  00A2               	movwf	?___ftpack+2
 14620  095A  0008               	return
 14621  095B                     l8525:	
 14622  095B  3001               	movlw	1
 14623  095C  00A5               	movwf	??___ftpack
 14624  095D  0825               	movf	??___ftpack,w
 14625  095E  07A3               	addwf	___ftpack@exp,f
 14626  095F  3001               	movlw	1
 14627  0960                     u8835:	
 14628  0960  36A2               	lsrf	___ftpack@arg+2,f
 14629  0961  0CA1               	rrf	___ftpack@arg+1,f
 14630  0962  0CA0               	rrf	___ftpack@arg,f
 14631  0963  0B89               	decfsz	9,f
 14632  0964  2960               	goto	u8835
 14633  0965                     l8527:	
 14634  0965  30FE               	movlw	254
 14635  0966  0522               	andwf	___ftpack@arg+2,w
 14636  0967  1903               	btfsc	3,2
 14637  0968  297E               	goto	l3027
 14638  0969  295B               	goto	l8525
 14639  096A                     l8529:	
 14640  096A  3001               	movlw	1
 14641  096B  00A5               	movwf	??___ftpack
 14642  096C  0825               	movf	??___ftpack,w
 14643  096D  07A3               	addwf	___ftpack@exp,f
 14644  096E  3001               	movlw	1
 14645  096F  07A0               	addwf	___ftpack@arg,f
 14646  0970  3000               	movlw	0
 14647  0971  1803               	skipnc
 14648  0972  3001               	movlw	1
 14649  0973  07A1               	addwf	___ftpack@arg+1,f
 14650  0974  3000               	movlw	0
 14651  0975  1803               	skipnc
 14652  0976  3001               	movlw	1
 14653  0977  07A2               	addwf	___ftpack@arg+2,f
 14654  0978  3001               	movlw	1
 14655  0979                     u8855:	
 14656  0979  36A2               	lsrf	___ftpack@arg+2,f
 14657  097A  0CA1               	rrf	___ftpack@arg+1,f
 14658  097B  0CA0               	rrf	___ftpack@arg,f
 14659  097C  0B89               	decfsz	9,f
 14660  097D  2979               	goto	u8855
 14661  097E                     l3027:	
 14662  097E  30FF               	movlw	255
 14663  097F  0522               	andwf	___ftpack@arg+2,w
 14664  0980  1903               	btfsc	3,2
 14665  0981  298B               	goto	l8537
 14666  0982  296A               	goto	l8529
 14667  0983                     l8535:	
 14668  0983  3001               	movlw	1
 14669  0984  02A3               	subwf	___ftpack@exp,f
 14670  0985  3001               	movlw	1
 14671  0986                     u8875:	
 14672  0986  35A0               	lslf	___ftpack@arg,f
 14673  0987  0DA1               	rlf	___ftpack@arg+1,f
 14674  0988  0DA2               	rlf	___ftpack@arg+2,f
 14675  0989  0B89               	decfsz	9,f
 14676  098A  2986               	goto	u8875
 14677  098B                     l8537:	
 14678  098B  1FA1               	btfss	___ftpack@arg+1,7
 14679  098C  2983               	goto	l8535
 14680  098D  1823               	btfsc	___ftpack@exp,0
 14681  098E  2995               	goto	l3033
 14682  098F  30FF               	movlw	255
 14683  0990  05A0               	andwf	___ftpack@arg,f
 14684  0991  307F               	movlw	127
 14685  0992  05A1               	andwf	___ftpack@arg+1,f
 14686  0993  30FF               	movlw	255
 14687  0994  05A2               	andwf	___ftpack@arg+2,f
 14688  0995                     l3033:	
 14689  0995  1003               	clrc
 14690  0996  0CA3               	rrf	___ftpack@exp,f
 14691  0997  0823               	movf	___ftpack@exp,w
 14692  0998  00A5               	movwf	??___ftpack
 14693  0999  01A6               	clrf	??___ftpack+1
 14694  099A  01A7               	clrf	??___ftpack+2
 14695  099B  3010               	movlw	16
 14696  099C                     u8905:	
 14697  099C  35A5               	lslf	??___ftpack,f
 14698  099D  0DA6               	rlf	??___ftpack+1,f
 14699  099E  0DA7               	rlf	??___ftpack+2,f
 14700  099F  0B89               	decfsz	9,f
 14701  09A0  299C               	goto	u8905
 14702  09A1  0825               	movf	??___ftpack,w
 14703  09A2  04A0               	iorwf	___ftpack@arg,f
 14704  09A3  0826               	movf	??___ftpack+1,w
 14705  09A4  04A1               	iorwf	___ftpack@arg+1,f
 14706  09A5  0827               	movf	??___ftpack+2,w
 14707  09A6  04A2               	iorwf	___ftpack@arg+2,f
 14708  09A7  0824               	movf	___ftpack@sign,w
 14709  09A8  1903               	btfsc	3,2
 14710  09A9  0008               	return
 14711  09AA  17A2               	bsf	___ftpack@arg+2,7
 14712  09AB  0008               	return
 14713  09AC                     __end_of___ftpack:	
 14714                           
 14715                           	psect	text87
 14716  164F                     __ptext87:	
 14717 ;; *************** function _setLED *****************
 14718 ;; Defined at:
 14719 ;;		line 76 in file "../src/LED_B1.c"
 14720 ;; Parameters:    Size  Location     Type
 14721 ;;  led             1    wreg     unsigned char 
 14722 ;;  command         1    2[BANK0 ] unsigned char 
 14723 ;; Auto vars:     Size  Location     Type
 14724 ;;  led             1    3[BANK0 ] unsigned char 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;		None               void
 14727 ;; Registers used:
 14728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14738 ;;Total ram usage:        2 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    6
 14741 ;; This function calls:
 14742 ;;		_LedPointSelect
 14743 ;; This function is called by:
 14744 ;;		_setDimmerLights
 14745 ;;		_setLED_Initialization
 14746 ;;		_Exception_Main
 14747 ;;		_setSw_Initialization
 14748 ;; This function uses a non-reentrant model
 14749 ;;
 14750                           
 14751                           
 14752                           ;psect for function _setLED
 14753  164F                     _setLED:	
 14754                           
 14755                           ;incstack = 0
 14756                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14757                           ;setLED@led stored from wreg
 14758  164F  0020               	movlb	0	; select bank0
 14759  1650  00A3               	movwf	setLED@led
 14760                           
 14761                           ;LED_B1.c: 77: LedPointSelect(led);
 14762  1651  0823               	movf	setLED@led,w
 14763  1652  319E  26F2  3196   	fcall	_LedPointSelect
 14764                           
 14765                           ;LED_B1.c: 78: if (command == 0) {
 14766  1655  0020               	movlb	0	; select bank0
 14767  1656  08A2               	movf	setLED@command,f
 14768  1657  1D03               	skipz
 14769  1658  2E66               	goto	l9325
 14770                           
 14771                           ;LED_B1.c: 80: if (led == 1) {
 14772  1659  0823               	movf	setLED@led,w
 14773  165A  3A01               	xorlw	1
 14774  165B  1D03               	skipz
 14775  165C  2E5E               	goto	l9317
 14776                           
 14777                           ;LED_B1.c: 84: RA3 = 1;
 14778  165D  158C               	bsf	12,3	;volatile
 14779  165E                     l9317:	
 14780                           
 14781                           ;LED_B1.c: 86: }
 14782                           ;LED_B1.c: 89: if (led == 2) {
 14783  165E  0823               	movf	setLED@led,w
 14784  165F  3A02               	xorlw	2
 14785  1660  1903               	btfsc	3,2
 14786                           
 14787                           ;LED_B1.c: 93: RC7 = 1;
 14788  1661  178E               	bsf	14,7	;volatile
 14789                           
 14790                           ;LED_B1.c: 95: }
 14791                           ;LED_B1.c: 107: if (led == 99) {
 14792  1662  0823               	movf	setLED@led,w
 14793  1663  3A63               	xorlw	99
 14794  1664  1903               	btfsc	3,2
 14795                           
 14796                           ;LED_B1.c: 111: RB5 = 1;
 14797  1665  168D               	bsf	13,5	;volatile
 14798  1666                     l9325:	
 14799                           
 14800                           ;LED_B1.c: 113: }
 14801                           ;LED_B1.c: 115: }
 14802                           ;LED_B1.c: 116: if (command == 1) {
 14803  1666  0822               	movf	setLED@command,w
 14804  1667  3A01               	xorlw	1
 14805  1668  1D03               	skipz
 14806  1669  2E77               	goto	l9339
 14807                           
 14808                           ;LED_B1.c: 118: if (led == 1) {
 14809  166A  0823               	movf	setLED@led,w
 14810  166B  3A01               	xorlw	1
 14811  166C  1D03               	skipz
 14812  166D  2E6F               	goto	l9331
 14813                           
 14814                           ;LED_B1.c: 122: RA3 = 0;
 14815  166E  118C               	bcf	12,3	;volatile
 14816  166F                     l9331:	
 14817                           
 14818                           ;LED_B1.c: 124: }
 14819                           ;LED_B1.c: 127: if (led == 2) {
 14820  166F  0823               	movf	setLED@led,w
 14821  1670  3A02               	xorlw	2
 14822  1671  1903               	btfsc	3,2
 14823                           
 14824                           ;LED_B1.c: 131: RC7 = 0;
 14825  1672  138E               	bcf	14,7	;volatile
 14826                           
 14827                           ;LED_B1.c: 133: }
 14828                           ;LED_B1.c: 145: if (led == 99) {
 14829  1673  0823               	movf	setLED@led,w
 14830  1674  3A63               	xorlw	99
 14831  1675  1903               	btfsc	3,2
 14832                           
 14833                           ;LED_B1.c: 149: RB5 = 0;
 14834  1676  128D               	bcf	13,5	;volatile
 14835  1677                     l9339:	
 14836                           
 14837                           ;LED_B1.c: 151: }
 14838                           ;LED_B1.c: 153: }
 14839                           ;LED_B1.c: 154: if (command == 10) {
 14840  1677  0822               	movf	setLED@command,w
 14841  1678  3A0A               	xorlw	10
 14842  1679  1D03               	skipz
 14843  167A  2E97               	goto	l9355
 14844                           
 14845                           ;LED_B1.c: 155: LED->GO = 0;
 14846  167B  0021               	movlb	1	; select bank1
 14847  167C  084D               	movf	_LED^(0+128),w
 14848  167D  0086               	movwf	6
 14849  167E  3001               	movlw	1	; select bank2/3
 14850  167F  0087               	movwf	7
 14851  1680  1081               	bcf	1,1
 14852                           
 14853                           ;LED_B1.c: 156: LED->Time = 0;
 14854  1681  0A4D               	incf	_LED^(0+128),w
 14855  1682  0086               	movwf	6
 14856  1683  3001               	movlw	1	; select bank2/3
 14857  1684  0087               	movwf	7
 14858  1685  3000               	movlw	0
 14859  1686  3FC0               	movwi [0]fsr1
 14860  1687  3FC1               	movwi [1]fsr1
 14861                           
 14862                           ;LED_B1.c: 158: if (led == 1) {
 14863  1688  0020               	movlb	0	; select bank0
 14864  1689  0823               	movf	setLED@led,w
 14865  168A  3A01               	xorlw	1
 14866  168B  1D03               	skipz
 14867  168C  2E8F               	goto	l9347
 14868                           
 14869                           ;LED_B1.c: 162: RA3 = 1;
 14870  168D  158C               	bsf	12,3	;volatile
 14871                           
 14872                           ;LED_B1.c: 164: }
 14873  168E  2E93               	goto	l9351
 14874  168F                     l9347:	
 14875                           
 14876                           ;LED_B1.c: 167: else if (led == 2) {
 14877  168F  0823               	movf	setLED@led,w
 14878  1690  3A02               	xorlw	2
 14879  1691  1903               	btfsc	3,2
 14880                           
 14881                           ;LED_B1.c: 171: RC7 = 1;
 14882  1692  178E               	bsf	14,7	;volatile
 14883  1693                     l9351:	
 14884                           
 14885                           ;LED_B1.c: 173: }
 14886                           ;LED_B1.c: 185: if (led == 99) {
 14887  1693  0823               	movf	setLED@led,w
 14888  1694  3A63               	xorlw	99
 14889  1695  1903               	btfsc	3,2
 14890                           
 14891                           ;LED_B1.c: 189: RB5 = 1;
 14892  1696  168D               	bsf	13,5	;volatile
 14893  1697                     l9355:	
 14894                           
 14895                           ;LED_B1.c: 191: }
 14896                           ;LED_B1.c: 193: }
 14897                           ;LED_B1.c: 194: if (command == 11) {
 14898  1697  0822               	movf	setLED@command,w
 14899  1698  3A0B               	xorlw	11
 14900  1699  1D03               	skipz
 14901  169A  0008               	return
 14902                           
 14903                           ;LED_B1.c: 195: LED->GO = 1;
 14904  169B  0021               	movlb	1	; select bank1
 14905  169C  084D               	movf	_LED^(0+128),w
 14906  169D  0086               	movwf	6
 14907  169E  3001               	movlw	1	; select bank2/3
 14908  169F  0087               	movwf	7
 14909  16A0  1481               	bsf	1,1
 14910  16A1  0008               	return
 14911  16A2                     __end_of_setLED:	
 14912                           
 14913                           	psect	text88
 14914  1EF2                     __ptext88:	
 14915 ;; *************** function _LedPointSelect *****************
 14916 ;; Defined at:
 14917 ;;		line 7 in file "../src/LED_B1.c"
 14918 ;; Parameters:    Size  Location     Type
 14919 ;;  led             1    wreg     unsigned char 
 14920 ;; Auto vars:     Size  Location     Type
 14921 ;;  led             1    1[BANK0 ] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;		None               void
 14924 ;; Registers used:
 14925 ;;		wreg
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;Total ram usage:        2 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; Hardware stack levels required when called:    5
 14938 ;; This function calls:
 14939 ;;		Nothing
 14940 ;; This function is called by:
 14941 ;;		_setLED_Initialization
 14942 ;;		_setLED
 14943 ;;		_setLED_Main
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function _LedPointSelect
 14949  1EF2                     _LedPointSelect:	
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in _LedPointSelect: [wreg]
 14953                           ;LedPointSelect@led stored from wreg
 14954  1EF2  0020               	movlb	0	; select bank0
 14955  1EF3  00A1               	movwf	LedPointSelect@led
 14956                           
 14957                           ;LED_B1.c: 9: if (led == 1) {
 14958  1EF4  0821               	movf	LedPointSelect@led,w
 14959  1EF5  3A01               	xorlw	1
 14960  1EF6  1D03               	skipz
 14961  1EF7  2EFD               	goto	l1028
 14962                           
 14963                           ;LED_B1.c: 10: LED = &VarLED1;
 14964  1EF8  306A               	movlw	_VarLED1& (0+255)
 14965  1EF9  00A0               	movwf	??_LedPointSelect
 14966  1EFA  0820               	movf	??_LedPointSelect,w
 14967  1EFB  0021               	movlb	1	; select bank1
 14968  1EFC  00CD               	movwf	_LED^(0+128)
 14969  1EFD                     l1028:	
 14970                           
 14971                           ;LED_B1.c: 11: }
 14972                           ;LED_B1.c: 14: if (led == 2) {
 14973  1EFD  0020               	movlb	0	; select bank0
 14974  1EFE  0821               	movf	LedPointSelect@led,w
 14975  1EFF  3A02               	xorlw	2
 14976  1F00  1D03               	skipz
 14977  1F01  2F07               	goto	l1029
 14978                           
 14979                           ;LED_B1.c: 15: LED = &VarLED2;
 14980  1F02  30EB               	movlw	_VarLED2& (0+255)
 14981  1F03  00A0               	movwf	??_LedPointSelect
 14982  1F04  0820               	movf	??_LedPointSelect,w
 14983  1F05  0021               	movlb	1	; select bank1
 14984  1F06  00CD               	movwf	_LED^(0+128)
 14985  1F07                     l1029:	
 14986                           
 14987                           ;LED_B1.c: 16: }
 14988                           ;LED_B1.c: 24: if (led == 99) {
 14989  1F07  0020               	movlb	0	; select bank0
 14990  1F08  0821               	movf	LedPointSelect@led,w
 14991  1F09  3A63               	xorlw	99
 14992  1F0A  1D03               	skipz
 14993  1F0B  0008               	return
 14994                           
 14995                           ;LED_B1.c: 25: LED = &VarErrLED;
 14996  1F0C  3066               	movlw	_VarErrLED& (0+255)
 14997  1F0D  00A0               	movwf	??_LedPointSelect
 14998  1F0E  0820               	movf	??_LedPointSelect,w
 14999  1F0F  0021               	movlb	1	; select bank1
 15000  1F10  00CD               	movwf	_LED^(0+128)
 15001  1F11  0008               	return
 15002  1F12                     __end_of_LedPointSelect:	
 15003                           
 15004                           	psect	text89
 15005  1DDD                     __ptext89:	
 15006 ;; *************** function _setDimmerLights_Line *****************
 15007 ;; Defined at:
 15008 ;;		line 706 in file "../src/Dimmer_B1.c"
 15009 ;; Parameters:    Size  Location     Type
 15010 ;;  lights          1    wreg     unsigned char 
 15011 ;; Auto vars:     Size  Location     Type
 15012 ;;  lights          1    0[BANK0 ] unsigned char 
 15013 ;; Return value:  Size  Location     Type
 15014 ;;		None               void
 15015 ;; Registers used:
 15016 ;;		wreg
 15017 ;; Tracked objects:
 15018 ;;		On entry : 0/0
 15019 ;;		On exit  : 0/0
 15020 ;;		Unchanged: 0/0
 15021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;Total ram usage:        1 bytes
 15027 ;; Hardware stack levels used:    1
 15028 ;; Hardware stack levels required when called:    5
 15029 ;; This function calls:
 15030 ;;		Nothing
 15031 ;; This function is called by:
 15032 ;;		_setDimmerLights
 15033 ;;		_setDimmerLights_Adj
 15034 ;; This function uses a non-reentrant model
 15035 ;;
 15036                           
 15037                           
 15038                           ;psect for function _setDimmerLights_Line
 15039  1DDD                     _setDimmerLights_Line:	
 15040                           
 15041                           ;incstack = 0
 15042                           ; Regs used in _setDimmerLights_Line: [wreg]
 15043                           ;setDimmerLights_Line@lights stored from wreg
 15044  1DDD  0020               	movlb	0	; select bank0
 15045  1DDE  00A0               	movwf	setDimmerLights_Line@lights
 15046                           
 15047                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 15048  1DDF  0021               	movlb	1	; select bank1
 15049  1DE0  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15050                           
 15051                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 15052  1DE1  0022               	movlb	2	; select bank2
 15053  1DE2  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15054                           
 15055                           ;Dimmer_B1.c: 712: DimmerLights2.Line = 0;
 15056  1DE3  0023               	movlb	3	; select bank3
 15057  1DE4  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15058                           
 15059                           ;Dimmer_B1.c: 718: if (lights == 1) {
 15060  1DE5  0020               	movlb	0	; select bank0
 15061  1DE6  0820               	movf	setDimmerLights_Line@lights,w
 15062  1DE7  3A01               	xorlw	1
 15063  1DE8  1D03               	skipz
 15064  1DE9  2DED               	goto	l9305
 15065                           
 15066                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 15067  1DEA  0022               	movlb	2	; select bank2
 15068  1DEB  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15069                           
 15070                           ;Dimmer_B1.c: 720: }
 15071  1DEC  0008               	return
 15072  1DED                     l9305:	
 15073                           
 15074                           ;Dimmer_B1.c: 723: else if (lights == 2) {
 15075  1DED  0020               	movlb	0	; select bank0
 15076  1DEE  0820               	movf	setDimmerLights_Line@lights,w
 15077  1DEF  3A02               	xorlw	2
 15078  1DF0  1D03               	skipz
 15079  1DF1  0008               	return
 15080                           
 15081                           ;Dimmer_B1.c: 724: DimmerLights2.Line = 1;
 15082  1DF2  0023               	movlb	3	; select bank3
 15083  1DF3  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15084  1DF4  0008               	return
 15085  1DF5                     __end_of_setDimmerLights_Line:	
 15086                           
 15087                           	psect	text90
 15088  1272                     __ptext90:	
 15089 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15090 ;; Defined at:
 15091 ;;		line 586 in file "../src/Dimmer_B1.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;  lights          1    wreg     unsigned char 
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;  lights          1    5[BANK0 ] unsigned char 
 15096 ;;  allow           1    6[BANK0 ] unsigned char 
 15097 ;; Return value:  Size  Location     Type
 15098 ;;                  1    wreg      unsigned char 
 15099 ;; Registers used:
 15100 ;;		wreg, status,2, status,0, pclath, cstack
 15101 ;; Tracked objects:
 15102 ;;		On entry : 0/0
 15103 ;;		On exit  : 0/0
 15104 ;;		Unchanged: 0/0
 15105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15107 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15109 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;Total ram usage:        6 bytes
 15111 ;; Hardware stack levels used:    1
 15112 ;; Hardware stack levels required when called:    6
 15113 ;; This function calls:
 15114 ;;		_getLoad_OK
 15115 ;; This function is called by:
 15116 ;;		_setDimmerLights_AdjOn
 15117 ;;		_setDimmerLights_Main
 15118 ;; This function uses a non-reentrant model
 15119 ;;
 15120                           
 15121                           
 15122                           ;psect for function _getDimmerLights_Allow_Condition
 15123  1272                     _getDimmerLights_Allow_Condition:	
 15124                           
 15125                           ;incstack = 0
 15126                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15127                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15128  1272  0020               	movlb	0	; select bank0
 15129  1273  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 15130                           
 15131                           ;Dimmer_B1.c: 587: char allow = 0;
 15132  1274  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 15133                           
 15134                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15135  1275  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15136  1276  0AA2               	incf	_getDimmerLights_Allow_Condition$2329,f
 15137  1277  319B  2342  3192   	fcall	_getLoad_OK
 15138  127A  3800               	iorlw	0
 15139  127B  1D03               	skipz
 15140  127C  2A82               	goto	l9247
 15141  127D  0021               	movlb	1	; select bank1
 15142  127E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15143  127F  2A82               	goto	l9247
 15144  1280  0020               	movlb	0	; select bank0
 15145  1281  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15146  1282                     l9247:	
 15147  1282  0020               	movlb	0	; select bank0
 15148  1283  0822               	movf	_getDimmerLights_Allow_Condition$2329,w
 15149  1284  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15150  1285  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15151  1286  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15152                           
 15153                           ;Dimmer_B1.c: 599: if (allow == 0) {
 15154  1287  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 15155  1288  1D03               	skipz
 15156  1289  2AAA               	goto	l9271
 15157                           
 15158                           ;Dimmer_B1.c: 600: if (lights == 1) {
 15159  128A  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15160  128B  3A01               	xorlw	1
 15161  128C  1D03               	skipz
 15162  128D  2A99               	goto	l9261
 15163                           
 15164                           ;Dimmer_B1.c: 601: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15165  128E  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15166  128F  0AA3               	incf	_getDimmerLights_Allow_Condition$2330,f
 15167  1290  0023               	movlb	3	; select bank3
 15168  1291  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15169  1292  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15170  1293  2A96               	goto	l9259
 15171  1294  0020               	movlb	0	; select bank0
 15172  1295  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15173  1296                     l9259:	
 15174  1296  0020               	movlb	0	; select bank0
 15175  1297  0823               	movf	_getDimmerLights_Allow_Condition$2330,w
 15176  1298  2AA7               	goto	L7
 15177  1299                     l9261:	
 15178                           ;Dimmer_B1.c: 602: } else if (lights == 2) {
 15179                           
 15180  1299  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15181  129A  3A02               	xorlw	2
 15182  129B  1D03               	skipz
 15183  129C  2AAA               	goto	l9271
 15184                           
 15185                           ;Dimmer_B1.c: 603: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15186  129D  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15187  129E  0AA4               	incf	_getDimmerLights_Allow_Condition$2331,f
 15188  129F  0022               	movlb	2	; select bank2
 15189  12A0  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15190  12A1  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15191  12A2  2AA5               	goto	l9269
 15192  12A3  0020               	movlb	0	; select bank0
 15193  12A4  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15194  12A5                     l9269:	
 15195  12A5  0020               	movlb	0	; select bank0
 15196  12A6  0824               	movf	_getDimmerLights_Allow_Condition$2331,w
 15197  12A7                     L7:	
 15198  12A7  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15199  12A8  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15200  12A9  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15201  12AA                     l9271:	
 15202                           
 15203                           ;Dimmer_B1.c: 604: }
 15204                           ;Dimmer_B1.c: 605: }
 15205                           ;Dimmer_B1.c: 619: return allow;
 15206  12AA  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 15207  12AB  0008               	return
 15208  12AC                     __end_of_getDimmerLights_Allow_Condition:	
 15209                           
 15210                           	psect	text91
 15211  1B42                     __ptext91:	
 15212 ;; *************** function _getLoad_OK *****************
 15213 ;; Defined at:
 15214 ;;		line 265 in file "../src/OverLoad_B1.c"
 15215 ;; Parameters:    Size  Location     Type
 15216 ;;		None
 15217 ;; Auto vars:     Size  Location     Type
 15218 ;;  ok              1    0[BANK0 ] unsigned char 
 15219 ;; Return value:  Size  Location     Type
 15220 ;;                  1    wreg      unsigned char 
 15221 ;; Registers used:
 15222 ;;		wreg, status,2
 15223 ;; Tracked objects:
 15224 ;;		On entry : 0/0
 15225 ;;		On exit  : 0/0
 15226 ;;		Unchanged: 0/0
 15227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;Total ram usage:        1 bytes
 15233 ;; Hardware stack levels used:    1
 15234 ;; Hardware stack levels required when called:    5
 15235 ;; This function calls:
 15236 ;;		Nothing
 15237 ;; This function is called by:
 15238 ;;		_DimmerLights_Main
 15239 ;;		_getDimmerLights_Allow_Condition
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           
 15244                           ;psect for function _getLoad_OK
 15245  1B42                     _getLoad_OK:	
 15246                           
 15247                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 15248                           
 15249                           ;incstack = 0
 15250                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15251  1B42  3000               	movlw	0
 15252  1B43  0022               	movlb	2	; select bank2
 15253  1B44  1BA7               	btfsc	_Load^(0+256),7
 15254  1B45  3001               	movlw	1
 15255  1B46  0020               	movlb	0	; select bank0
 15256  1B47  00A0               	movwf	getLoad_OK@ok
 15257                           
 15258                           ;OverLoad_B1.c: 267: return ok;
 15259  1B48  0820               	movf	getLoad_OK@ok,w
 15260  1B49  0008               	return
 15261  1B4A                     __end_of_getLoad_OK:	
 15262                           
 15263                           	psect	text92
 15264  1CC5                     __ptext92:	
 15265 ;; *************** function _getMain_LightsStatus *****************
 15266 ;; Defined at:
 15267 ;;		line 375 in file "../src/Main_B1.c"
 15268 ;; Parameters:    Size  Location     Type
 15269 ;;		None
 15270 ;; Auto vars:     Size  Location     Type
 15271 ;;  status          1    0[BANK0 ] unsigned char 
 15272 ;; Return value:  Size  Location     Type
 15273 ;;                  1    wreg      unsigned char 
 15274 ;; Registers used:
 15275 ;;		wreg, status,2, status,0
 15276 ;; Tracked objects:
 15277 ;;		On entry : 0/0
 15278 ;;		On exit  : 0/0
 15279 ;;		Unchanged: 0/0
 15280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;Total ram usage:        1 bytes
 15286 ;; Hardware stack levels used:    1
 15287 ;; Hardware stack levels required when called:    5
 15288 ;; This function calls:
 15289 ;;		Nothing
 15290 ;; This function is called by:
 15291 ;;		_DimmerLights_Main
 15292 ;;		_Flash_Memory_Main
 15293 ;;		_Exception_Main
 15294 ;;		_Load_Main
 15295 ;; This function uses a non-reentrant model
 15296 ;;
 15297                           
 15298                           
 15299                           ;psect for function _getMain_LightsStatus
 15300  1CC5                     _getMain_LightsStatus:	
 15301                           
 15302                           ;Main_B1.c: 376: char status = 0;
 15303                           
 15304                           ;incstack = 0
 15305                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15306  1CC5  0020               	movlb	0	; select bank0
 15307  1CC6  01A0               	clrf	getMain_LightsStatus@status
 15308                           
 15309                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15310  1CC7  3000               	movlw	0
 15311  1CC8  0022               	movlb	2	; select bank2
 15312  1CC9  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15313  1CCA  3001               	movlw	1
 15314  1CCB  0020               	movlb	0	; select bank0
 15315  1CCC  00A0               	movwf	getMain_LightsStatus@status
 15316                           
 15317                           ;Main_B1.c: 396: if (status == 0) {
 15318  1CCD  08A0               	movf	getMain_LightsStatus@status,f
 15319  1CCE  1D03               	skipz
 15320  1CCF  2CD6               	goto	l9903
 15321                           
 15322                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15323  1CD0  3000               	movlw	0
 15324  1CD1  0023               	movlb	3	; select bank3
 15325  1CD2  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15326  1CD3  3001               	movlw	1
 15327  1CD4  0020               	movlb	0	; select bank0
 15328  1CD5  00A0               	movwf	getMain_LightsStatus@status
 15329  1CD6                     l9903:	
 15330                           
 15331                           ;Main_B1.c: 398: }
 15332                           ;Main_B1.c: 422: return status;
 15333  1CD6  0820               	movf	getMain_LightsStatus@status,w
 15334  1CD7  0008               	return
 15335  1CD8                     __end_of_getMain_LightsStatus:	
 15336                           
 15337                           	psect	text93
 15338  11D3                     __ptext93:	
 15339 ;; *************** function _getMain_All_Error_Status *****************
 15340 ;; Defined at:
 15341 ;;		line 426 in file "../src/Main_B1.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;  command         1    wreg     unsigned char 
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;  command         1    5[BANK0 ] unsigned char 
 15346 ;;  status          1    6[BANK0 ] unsigned char 
 15347 ;; Return value:  Size  Location     Type
 15348 ;;                  1    wreg      unsigned char 
 15349 ;; Registers used:
 15350 ;;		wreg, status,2, status,0
 15351 ;; Tracked objects:
 15352 ;;		On entry : 0/0
 15353 ;;		On exit  : 0/0
 15354 ;;		Unchanged: 0/0
 15355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15357 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;Total ram usage:        7 bytes
 15361 ;; Hardware stack levels used:    1
 15362 ;; Hardware stack levels required when called:    5
 15363 ;; This function calls:
 15364 ;;		Nothing
 15365 ;; This function is called by:
 15366 ;;		_DimmerLights_Main
 15367 ;;		_Exception_Main
 15368 ;;		_Load_Main
 15369 ;;		_setTemp_Main
 15370 ;;		_setRF_Main
 15371 ;;		_getRxData
 15372 ;;		_setSw_Main
 15373 ;; This function uses a non-reentrant model
 15374 ;;
 15375                           
 15376                           
 15377                           ;psect for function _getMain_All_Error_Status
 15378  11D3                     _getMain_All_Error_Status:	
 15379                           
 15380                           ;incstack = 0
 15381                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15382                           ;getMain_All_Error_Status@command stored from wreg
 15383  11D3  0020               	movlb	0	; select bank0
 15384  11D4  00A5               	movwf	getMain_All_Error_Status@command
 15385                           
 15386                           ;Main_B1.c: 427: char status = 0;
 15387  11D5  01A6               	clrf	getMain_All_Error_Status@status
 15388                           
 15389                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15390  11D6  08A6               	movf	getMain_All_Error_Status@status,f
 15391  11D7  1D03               	skipz
 15392  11D8  29ED               	goto	l9287
 15393  11D9  0825               	movf	getMain_All_Error_Status@command,w
 15394  11DA  3A02               	xorlw	2
 15395  11DB  1903               	skipnz
 15396  11DC  29ED               	goto	l9287
 15397                           
 15398                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15399  11DD  0021               	movlb	1	; select bank1
 15400  11DE  18D6               	btfsc	_Temp^(0+128),1
 15401  11DF  29E4               	goto	l9285
 15402  11E0  0020               	movlb	0	; select bank0
 15403  11E1  01A1               	clrf	_getMain_All_Error_Status$3603
 15404  11E2  01A2               	clrf	_getMain_All_Error_Status$3603+1
 15405  11E3  29E9               	goto	l1572
 15406  11E4                     l9285:	
 15407  11E4  3002               	movlw	2
 15408  11E5  0020               	movlb	0	; select bank0
 15409  11E6  00A1               	movwf	_getMain_All_Error_Status$3603
 15410  11E7  3000               	movlw	0
 15411  11E8  00A2               	movwf	_getMain_All_Error_Status$3603+1
 15412  11E9                     l1572:	
 15413  11E9  0821               	movf	_getMain_All_Error_Status$3603,w
 15414  11EA  00A0               	movwf	??_getMain_All_Error_Status
 15415  11EB  0820               	movf	??_getMain_All_Error_Status,w
 15416  11EC  00A6               	movwf	getMain_All_Error_Status@status
 15417  11ED                     l9287:	
 15418                           
 15419                           ;Main_B1.c: 440: }
 15420                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15421  11ED  08A6               	movf	getMain_All_Error_Status@status,f
 15422  11EE  1D03               	skipz
 15423  11EF  2A04               	goto	l1573
 15424  11F0  0825               	movf	getMain_All_Error_Status@command,w
 15425  11F1  3A03               	xorlw	3
 15426  11F2  1903               	skipnz
 15427  11F3  2A04               	goto	l1573
 15428                           
 15429                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15430  11F4  0022               	movlb	2	; select bank2
 15431  11F5  1AA7               	btfsc	_Load^(0+256),5
 15432  11F6  29FB               	goto	l9295
 15433  11F7  0020               	movlb	0	; select bank0
 15434  11F8  01A3               	clrf	_getMain_All_Error_Status$3604
 15435  11F9  01A4               	clrf	_getMain_All_Error_Status$3604+1
 15436  11FA  2A00               	goto	l1577
 15437  11FB                     l9295:	
 15438  11FB  3003               	movlw	3
 15439  11FC  0020               	movlb	0	; select bank0
 15440  11FD  00A3               	movwf	_getMain_All_Error_Status$3604
 15441  11FE  3000               	movlw	0
 15442  11FF  00A4               	movwf	_getMain_All_Error_Status$3604+1
 15443  1200                     l1577:	
 15444  1200  0823               	movf	_getMain_All_Error_Status$3604,w
 15445  1201  00A0               	movwf	??_getMain_All_Error_Status
 15446  1202  0820               	movf	??_getMain_All_Error_Status,w
 15447  1203  00A6               	movwf	getMain_All_Error_Status@status
 15448  1204                     l1573:	
 15449                           
 15450                           ;Main_B1.c: 447: }
 15451                           ;Main_B1.c: 463: return status;
 15452  1204  0826               	movf	getMain_All_Error_Status@status,w
 15453  1205  0008               	return
 15454  1206                     __end_of_getMain_All_Error_Status:	
 15455                           
 15456                           	psect	text94
 15457  1D25                     __ptext94:	
 15458 ;; *************** function _DimmerLights_Initialization *****************
 15459 ;; Defined at:
 15460 ;;		line 341 in file "../src/Dimmer_B1.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;		None
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;		None
 15465 ;; Return value:  Size  Location     Type
 15466 ;;		None               void
 15467 ;; Registers used:
 15468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;Total ram usage:        1 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    7
 15481 ;; This function calls:
 15482 ;;		_setDimmerLights_Initialization
 15483 ;; This function is called by:
 15484 ;;		_main
 15485 ;; This function uses a non-reentrant model
 15486 ;;
 15487                           
 15488                           
 15489                           ;psect for function _DimmerLights_Initialization
 15490  1D25                     _DimmerLights_Initialization:	
 15491                           
 15492                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15493                           
 15494                           ;incstack = 0
 15495                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15496  1D25  3055               	movlw	_DimmerLights1& (0+255)
 15497  1D26  0020               	movlb	0	; select bank0
 15498  1D27  00A4               	movwf	??_DimmerLights_Initialization
 15499  1D28  0824               	movf	??_DimmerLights_Initialization,w
 15500  1D29  0021               	movlb	1	; select bank1
 15501  1D2A  00CA               	movwf	_DimmerLights11^(0+128)
 15502                           
 15503                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15504  1D2B  3001               	movlw	1
 15505  1D2C  3191  21A2  319D   	fcall	_setDimmerLights_Initialization
 15506                           
 15507                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15508  1D2F  30BE               	movlw	_DimmerLights2& (0+255)
 15509  1D30  0020               	movlb	0	; select bank0
 15510  1D31  00A4               	movwf	??_DimmerLights_Initialization
 15511  1D32  0824               	movf	??_DimmerLights_Initialization,w
 15512  1D33  0021               	movlb	1	; select bank1
 15513  1D34  00CB               	movwf	_DimmerLights22^(0+128)
 15514                           
 15515                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15516  1D35  3002               	movlw	2
 15517  1D36  3191  21A2         	fcall	_setDimmerLights_Initialization
 15518  1D38  0008               	return
 15519  1D39                     __end_of_DimmerLights_Initialization:	
 15520                           
 15521                           	psect	text95
 15522  11A2                     __ptext95:	
 15523 ;; *************** function _setDimmerLights_Initialization *****************
 15524 ;; Defined at:
 15525 ;;		line 365 in file "../src/Dimmer_B1.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  lights          1    wreg     unsigned char 
 15528 ;; Auto vars:     Size  Location     Type
 15529 ;;  lights          1    3[BANK0 ] unsigned char 
 15530 ;; Return value:  Size  Location     Type
 15531 ;;		None               void
 15532 ;; Registers used:
 15533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15534 ;; Tracked objects:
 15535 ;;		On entry : 0/0
 15536 ;;		On exit  : 0/0
 15537 ;;		Unchanged: 0/0
 15538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;Total ram usage:        2 bytes
 15544 ;; Hardware stack levels used:    1
 15545 ;; Hardware stack levels required when called:    6
 15546 ;; This function calls:
 15547 ;;		_DimmerLightsPointSelect
 15548 ;; This function is called by:
 15549 ;;		_DimmerLights_Initialization
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           
 15554                           ;psect for function _setDimmerLights_Initialization
 15555  11A2                     _setDimmerLights_Initialization:	
 15556                           
 15557                           ;incstack = 0
 15558                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15559                           ;setDimmerLights_Initialization@lights stored from wreg
 15560  11A2  0020               	movlb	0	; select bank0
 15561  11A3  00A3               	movwf	setDimmerLights_Initialization@lights
 15562                           
 15563                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15564  11A4  0823               	movf	setDimmerLights_Initialization@lights,w
 15565  11A5  319C  24B2  3191   	fcall	_DimmerLightsPointSelect
 15566                           
 15567                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15568  11A8  3007               	movlw	7
 15569  11A9  0020               	movlb	0	; select bank0
 15570  11AA  00A2               	movwf	??_setDimmerLights_Initialization
 15571  11AB  086F               	movf	_DimmerLights,w
 15572  11AC  3E08               	addlw	8
 15573  11AD  0086               	movwf	6
 15574  11AE  3001               	movlw	1	; select bank2/3
 15575  11AF  0087               	movwf	7
 15576  11B0  0822               	movf	??_setDimmerLights_Initialization,w
 15577  11B1  0081               	movwf	1
 15578                           
 15579                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15580  11B2  3038               	movlw	56
 15581  11B3  00A2               	movwf	??_setDimmerLights_Initialization
 15582  11B4  086F               	movf	_DimmerLights,w
 15583  11B5  3E06               	addlw	6
 15584  11B6  0086               	movwf	6
 15585  11B7  3001               	movlw	1	; select bank2/3
 15586  11B8  0087               	movwf	7
 15587  11B9  0822               	movf	??_setDimmerLights_Initialization,w
 15588  11BA  0081               	movwf	1
 15589                           
 15590                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15591  11BB  300C               	movlw	12
 15592  11BC  00A2               	movwf	??_setDimmerLights_Initialization
 15593  11BD  086F               	movf	_DimmerLights,w
 15594  11BE  3E09               	addlw	9
 15595  11BF  0086               	movwf	6
 15596  11C0  3001               	movlw	1	; select bank2/3
 15597  11C1  0087               	movwf	7
 15598  11C2  0822               	movf	??_setDimmerLights_Initialization,w
 15599  11C3  0081               	movwf	1
 15600                           
 15601                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15602  11C4  086F               	movf	_DimmerLights,w
 15603  11C5  3E06               	addlw	6
 15604  11C6  0086               	movwf	6
 15605  11C7  3001               	movlw	1	; select bank2/3
 15606  11C8  0087               	movwf	7
 15607  11C9  0801               	movf	1,w
 15608  11CA  00A2               	movwf	??_setDimmerLights_Initialization
 15609  11CB  086F               	movf	_DimmerLights,w
 15610  11CC  3E04               	addlw	4
 15611  11CD  0086               	movwf	6
 15612  11CE  3001               	movlw	1	; select bank2/3
 15613  11CF  0087               	movwf	7
 15614  11D0  0822               	movf	??_setDimmerLights_Initialization,w
 15615  11D1  0081               	movwf	1
 15616  11D2  0008               	return
 15617  11D3                     __end_of_setDimmerLights_Initialization:	
 15618                           
 15619                           	psect	text96
 15620  1B3A                     __ptext96:	
 15621 ;; *************** function _DelayOff_Main *****************
 15622 ;; Defined at:
 15623 ;;		line 41 in file "../src/DelayOff_B1.c"
 15624 ;; Parameters:    Size  Location     Type
 15625 ;;		None
 15626 ;; Auto vars:     Size  Location     Type
 15627 ;;		None
 15628 ;; Return value:  Size  Location     Type
 15629 ;;		None               void
 15630 ;; Registers used:
 15631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;Total ram usage:        0 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; Hardware stack levels required when called:   11
 15644 ;; This function calls:
 15645 ;;		_DlyOff_Main
 15646 ;; This function is called by:
 15647 ;;		_main
 15648 ;; This function uses a non-reentrant model
 15649 ;;
 15650                           
 15651                           
 15652                           ;psect for function _DelayOff_Main
 15653  1B3A                     _DelayOff_Main:	
 15654                           
 15655                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15656                           
 15657                           ;incstack = 0
 15658                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15659  1B3A  3001               	movlw	1
 15660  1B3B  3188  20EE  319B   	fcall	_DlyOff_Main
 15661                           
 15662                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15663  1B3E  3002               	movlw	2
 15664  1B3F  3188  20EE         	fcall	_DlyOff_Main
 15665  1B41  0008               	return
 15666  1B42                     __end_of_DelayOff_Main:	
 15667                           
 15668                           	psect	text97
 15669  08EE                     __ptext97:	
 15670 ;; *************** function _DlyOff_Main *****************
 15671 ;; Defined at:
 15672 ;;		line 61 in file "../src/DelayOff_B1.c"
 15673 ;; Parameters:    Size  Location     Type
 15674 ;;  sw              1    wreg     unsigned char 
 15675 ;; Auto vars:     Size  Location     Type
 15676 ;;  sw              1   78[BANK0 ] unsigned char 
 15677 ;; Return value:  Size  Location     Type
 15678 ;;		None               void
 15679 ;; Registers used:
 15680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15681 ;; Tracked objects:
 15682 ;;		On entry : 0/0
 15683 ;;		On exit  : 0/0
 15684 ;;		Unchanged: 0/0
 15685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15690 ;;Total ram usage:        3 bytes
 15691 ;; Hardware stack levels used:    1
 15692 ;; Hardware stack levels required when called:   10
 15693 ;; This function calls:
 15694 ;;		_DelayOffPointSelect
 15695 ;;		_setBuz
 15696 ;;		_setDimmerLights_ErrorClose
 15697 ;; This function is called by:
 15698 ;;		_DelayOff_Main
 15699 ;; This function uses a non-reentrant model
 15700 ;;
 15701                           
 15702                           
 15703                           ;psect for function _DlyOff_Main
 15704  08EE                     _DlyOff_Main:	
 15705                           
 15706                           ;incstack = 0
 15707                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15708                           ;DlyOff_Main@sw stored from wreg
 15709  08EE  0020               	movlb	0	; select bank0
 15710  08EF  00EE               	movwf	DlyOff_Main@sw
 15711                           
 15712                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15713  08F0  086E               	movf	DlyOff_Main@sw,w
 15714  08F1  319D  2511  3188   	fcall	_DelayOffPointSelect
 15715                           
 15716                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15717  08F4  0875               	movf	_DelayOff,w
 15718  08F5  0086               	movwf	6
 15719  08F6  3001               	movlw	1	; select bank2/3
 15720  08F7  0087               	movwf	7
 15721  08F8  1C81               	btfss	1,1
 15722  08F9  0008               	return
 15723                           
 15724                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15725  08FA  0875               	movf	_DelayOff,w
 15726  08FB  3E02               	addlw	2
 15727  08FC  0086               	movwf	6
 15728  08FD  3001               	movlw	1	; select bank2/3
 15729  08FE  0087               	movwf	7
 15730  08FF  3001               	movlw	1
 15731  0900  0781               	addwf	1,f
 15732  0901  3141               	addfsr 1,1
 15733  0902  1803               	skipnc
 15734  0903  0A81               	incf	1,f
 15735                           
 15736                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15737  0904  0875               	movf	_DelayOff,w
 15738  0905  3E02               	addlw	2
 15739  0906  0086               	movwf	6
 15740  0907  3001               	movlw	1	; select bank2/3
 15741  0908  0087               	movwf	7
 15742  0909  3F40               	moviw [0]fsr1
 15743  090A  0020               	movlb	0	; select bank0
 15744  090B  00EC               	movwf	??_DlyOff_Main
 15745  090C  3F41               	moviw [1]fsr1
 15746  090D  00ED               	movwf	??_DlyOff_Main+1
 15747  090E  3017               	movlw	23
 15748  090F  026D               	subwf	??_DlyOff_Main+1,w
 15749  0910  3070               	movlw	112
 15750  0911  1903               	skipnz
 15751  0912  026C               	subwf	??_DlyOff_Main,w
 15752  0913  1C03               	skipc
 15753  0914  0008               	return
 15754                           
 15755                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15756  0915  0875               	movf	_DelayOff,w
 15757  0916  3E02               	addlw	2
 15758  0917  0086               	movwf	6
 15759  0918  3001               	movlw	1	; select bank2/3
 15760  0919  0087               	movwf	7
 15761  091A  3000               	movlw	0
 15762  091B  3FC0               	movwi [0]fsr1
 15763  091C  3FC1               	movwi [1]fsr1
 15764                           
 15765                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15766  091D  3001               	movlw	1
 15767  091E  00EC               	movwf	??_DlyOff_Main
 15768  091F  0875               	movf	_DelayOff,w
 15769  0920  3E04               	addlw	4
 15770  0921  0086               	movwf	6
 15771  0922  3001               	movlw	1	; select bank2/3
 15772  0923  0087               	movwf	7
 15773  0924  086C               	movf	??_DlyOff_Main,w
 15774  0925  0781               	addwf	1,f
 15775                           
 15776                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15777  0926  0875               	movf	_DelayOff,w
 15778  0927  3E04               	addlw	4
 15779  0928  0086               	movwf	6
 15780  0929  3001               	movlw	1	; select bank2/3
 15781  092A  0087               	movwf	7
 15782  092B  0A75               	incf	_DelayOff,w
 15783  092C  0084               	movwf	4
 15784  092D  3001               	movlw	1	; select bank2/3
 15785  092E  0085               	movwf	5
 15786  092F  0800               	movf	0,w
 15787  0930  0201               	subwf	1,w
 15788  0931  1C03               	skipc
 15789  0932  0008               	return
 15790                           
 15791                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15792  0933  0875               	movf	_DelayOff,w
 15793  0934  3E04               	addlw	4
 15794  0935  0086               	movwf	6
 15795  0936  3001               	movlw	1	; select bank2/3
 15796  0937  0087               	movwf	7
 15797  0938  0181               	clrf	1
 15798                           
 15799                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15800  0939  0875               	movf	_DelayOff,w
 15801  093A  0086               	movwf	6
 15802  093B  3001               	movlw	1	; select bank2/3
 15803  093C  0087               	movwf	7
 15804  093D  1081               	bcf	1,1
 15805                           
 15806                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15807  093E  3064               	movlw	100
 15808  093F  00A9               	movwf	setBuz@time
 15809  0940  3000               	movlw	0
 15810  0941  00AA               	movwf	setBuz@time+1
 15811  0942  3001               	movlw	1
 15812  0943  3197  274E  3188   	fcall	_setBuz
 15813                           
 15814                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15815  0946  0020               	movlb	0	; select bank0
 15816  0947  086E               	movf	DlyOff_Main@sw,w
 15817  0948  3189  21AC         	fcall	_setDimmerLights_ErrorClose
 15818  094A  0008               	return
 15819  094B                     __end_of_DlyOff_Main:	
 15820                           
 15821                           	psect	text98
 15822  09AC                     __ptext98:	
 15823 ;; *************** function _setDimmerLights_ErrorClose *****************
 15824 ;; Defined at:
 15825 ;;		line 846 in file "../src/Dimmer_B1.c"
 15826 ;; Parameters:    Size  Location     Type
 15827 ;;  lights          1    wreg     unsigned char 
 15828 ;; Auto vars:     Size  Location     Type
 15829 ;;  lights          1    1[BANK1 ] unsigned char 
 15830 ;;  i               2    2[BANK1 ] int 
 15831 ;;  count           1    0[BANK1 ] unsigned char 
 15832 ;; Return value:  Size  Location     Type
 15833 ;;		None               void
 15834 ;; Registers used:
 15835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15836 ;; Tracked objects:
 15837 ;;		On entry : 0/0
 15838 ;;		On exit  : 0/0
 15839 ;;		Unchanged: 0/0
 15840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;Total ram usage:        5 bytes
 15846 ;; Hardware stack levels used:    1
 15847 ;; Hardware stack levels required when called:    9
 15848 ;; This function calls:
 15849 ;;		_DimmerLightsPointSelect
 15850 ;;		_getDimmerLights_Status
 15851 ;;		_setDimmerLights_SwOff
 15852 ;; This function is called by:
 15853 ;;		_DlyOff_Main
 15854 ;;		_setControl_Lights_Table
 15855 ;; This function uses a non-reentrant model
 15856 ;;
 15857                           
 15858                           
 15859                           ;psect for function _setDimmerLights_ErrorClose
 15860  09AC                     _setDimmerLights_ErrorClose:	
 15861                           
 15862                           ;incstack = 0
 15863                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15864                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15865  09AC  0021               	movlb	1	; select bank1
 15866  09AD  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15867                           
 15868                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15869  09AE  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15870  09AF  3AFF               	xorlw	255
 15871  09B0  1D03               	skipz
 15872  09B1  29EF               	goto	l9143
 15873                           
 15874                           ;Dimmer_B1.c: 852: char count = 2;
 15875  09B2  3002               	movlw	2
 15876  09B3  0020               	movlb	0	; select bank0
 15877  09B4  00EB               	movwf	??_setDimmerLights_ErrorClose
 15878  09B5  086B               	movf	??_setDimmerLights_ErrorClose,w
 15879  09B6  0021               	movlb	1	; select bank1
 15880  09B7  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 15881                           
 15882                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15883  09B8  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15884  09B9  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15885  09BA                     l9141:	
 15886  09BA  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15887  09BB  3A80               	xorlw	128
 15888  09BC  0020               	movlb	0	; select bank0
 15889  09BD  00EB               	movwf	??_setDimmerLights_ErrorClose
 15890  09BE  3080               	movlw	128
 15891  09BF  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15892  09C0  1D03               	skipz
 15893  09C1  29C5               	goto	u10005
 15894  09C2  0021               	movlb	1	; select bank1
 15895  09C3  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15896  09C4  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15897  09C5                     u10005:	
 15898  09C5  1803               	btfsc	3,0
 15899  09C6  0008               	return
 15900                           
 15901                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15902  09C7  0021               	movlb	1	; select bank1
 15903  09C8  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15904  09C9  3E01               	addlw	1
 15905  09CA  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15906                           
 15907                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15908  09CD  0021               	movlb	1	; select bank1
 15909  09CE  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15910  09CF  3E01               	addlw	1
 15911  09D0  319C  2425  3189   	fcall	_getDimmerLights_Status
 15912  09D3  3A01               	xorlw	1
 15913  09D4  1D03               	skipz
 15914  09D5  29E9               	goto	l9139
 15915                           
 15916                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15917  09D6  0020               	movlb	0	; select bank0
 15918  09D7  086F               	movf	_DimmerLights,w
 15919  09D8  3E0B               	addlw	11
 15920  09D9  0086               	movwf	6
 15921  09DA  3001               	movlw	1	; select bank2/3
 15922  09DB  0087               	movwf	7
 15923  09DC  1481               	bsf	1,1
 15924                           
 15925                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15926  09DD  086F               	movf	_DimmerLights,w
 15927  09DE  3E02               	addlw	2
 15928  09DF  0086               	movwf	6
 15929  09E0  3001               	movlw	1	; select bank2/3
 15930  09E1  0087               	movwf	7
 15931  09E2  1081               	bcf	1,1
 15932                           
 15933                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15934  09E3  0021               	movlb	1	; select bank1
 15935  09E4  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15936  09E5  3E01               	addlw	1
 15937  09E6  3194  24BC  3189   	fcall	_setDimmerLights_SwOff
 15938  09E9                     l9139:	
 15939  09E9  3001               	movlw	1
 15940  09EA  0021               	movlb	1	; select bank1
 15941  09EB  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15942  09EC  3000               	movlw	0
 15943  09ED  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15944  09EE  29BA               	goto	l9141
 15945  09EF                     l9143:	
 15946                           ;Dimmer_B1.c: 863: }
 15947                           ;Dimmer_B1.c: 864: }
 15948                           ;Dimmer_B1.c: 865: } else {
 15949                           
 15950                           
 15951                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15952  09EF  0021               	movlb	1	; select bank1
 15953  09F0  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15954  09F1  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15955                           
 15956                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15957  09F4  0021               	movlb	1	; select bank1
 15958  09F5  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15959  09F6  319C  2425  3189   	fcall	_getDimmerLights_Status
 15960  09F9  3A01               	xorlw	1
 15961  09FA  1D03               	skipz
 15962  09FB  0008               	return
 15963                           
 15964                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15965  09FC  0020               	movlb	0	; select bank0
 15966  09FD  086F               	movf	_DimmerLights,w
 15967  09FE  3E0B               	addlw	11
 15968  09FF  0086               	movwf	6
 15969  0A00  3001               	movlw	1	; select bank2/3
 15970  0A01  0087               	movwf	7
 15971  0A02  1481               	bsf	1,1
 15972                           
 15973                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15974  0A03  086F               	movf	_DimmerLights,w
 15975  0A04  3E02               	addlw	2
 15976  0A05  0086               	movwf	6
 15977  0A06  3001               	movlw	1	; select bank2/3
 15978  0A07  0087               	movwf	7
 15979  0A08  1081               	bcf	1,1
 15980                           
 15981                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 15982  0A09  0021               	movlb	1	; select bank1
 15983  0A0A  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15984  0A0B  3194  24BC         	fcall	_setDimmerLights_SwOff
 15985  0A0D  0008               	return
 15986  0A0E                     __end_of_setDimmerLights_ErrorClose:	
 15987                           
 15988                           	psect	text99
 15989  14BC                     __ptext99:	
 15990 ;; *************** function _setDimmerLights_SwOff *****************
 15991 ;; Defined at:
 15992 ;;		line 450 in file "../src/Dimmer_B1.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  sw              1    wreg     unsigned char 
 15995 ;; Auto vars:     Size  Location     Type
 15996 ;;  sw              1   74[BANK0 ] unsigned char 
 15997 ;; Return value:  Size  Location     Type
 15998 ;;		None               void
 15999 ;; Registers used:
 16000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16001 ;; Tracked objects:
 16002 ;;		On entry : 0/0
 16003 ;;		On exit  : 0/0
 16004 ;;		Unchanged: 0/0
 16005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;Total ram usage:        1 bytes
 16011 ;; Hardware stack levels used:    1
 16012 ;; Hardware stack levels required when called:    8
 16013 ;; This function calls:
 16014 ;;		_DimmerLightsPointSelect
 16015 ;;		_getDelayOff_GO
 16016 ;;		_setDelayOff_GO
 16017 ;; This function is called by:
 16018 ;;		_setDimmerLights_ErrorClose
 16019 ;;		_Exception_Main
 16020 ;;		_setRFSW_Control
 16021 ;;		_setSw_Main
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           
 16026                           ;psect for function _setDimmerLights_SwOff
 16027  14BC                     _setDimmerLights_SwOff:	
 16028                           
 16029                           ;incstack = 0
 16030                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16031                           ;setDimmerLights_SwOff@sw stored from wreg
 16032  14BC  0020               	movlb	0	; select bank0
 16033  14BD  00EA               	movwf	setDimmerLights_SwOff@sw
 16034                           
 16035                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 16036  14BE  086A               	movf	setDimmerLights_SwOff@sw,w
 16037  14BF  319C  24B2  3194   	fcall	_DimmerLightsPointSelect
 16038                           
 16039                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 16040  14C2  0020               	movlb	0	; select bank0
 16041  14C3  086F               	movf	_DimmerLights,w
 16042  14C4  3E0B               	addlw	11
 16043  14C5  0086               	movwf	6
 16044  14C6  3001               	movlw	1	; select bank2/3
 16045  14C7  0087               	movwf	7
 16046  14C8  1C81               	btfss	1,1
 16047  14C9  0008               	return
 16048                           
 16049                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 16050  14CA  086F               	movf	_DimmerLights,w
 16051  14CB  3E0B               	addlw	11
 16052  14CC  0086               	movwf	6
 16053  14CD  3001               	movlw	1	; select bank2/3
 16054  14CE  0087               	movwf	7
 16055  14CF  1081               	bcf	1,1
 16056                           
 16057                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 16058  14D0  086F               	movf	_DimmerLights,w
 16059  14D1  3E02               	addlw	2
 16060  14D2  0086               	movwf	6
 16061  14D3  3001               	movlw	1	; select bank2/3
 16062  14D4  0087               	movwf	7
 16063  14D5  1C81               	btfss	1,1
 16064  14D6  2CF1               	goto	l8989
 16065                           
 16066                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 16067  14D7  086F               	movf	_DimmerLights,w
 16068  14D8  3E0B               	addlw	11
 16069  14D9  0086               	movwf	6
 16070  14DA  3001               	movlw	1	; select bank2/3
 16071  14DB  0087               	movwf	7
 16072  14DC  1D01               	btfss	1,2
 16073  14DD  0008               	return
 16074                           
 16075                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 16076  14DE  086F               	movf	_DimmerLights,w
 16077  14DF  3E0B               	addlw	11
 16078  14E0  0086               	movwf	6
 16079  14E1  3001               	movlw	1	; select bank2/3
 16080  14E2  0087               	movwf	7
 16081  14E3  1101               	bcf	1,2
 16082                           
 16083                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 16084  14E4  086F               	movf	_DimmerLights,w
 16085  14E5  3E0A               	addlw	10
 16086  14E6  0086               	movwf	6
 16087  14E7  3001               	movlw	1	; select bank2/3
 16088  14E8  0087               	movwf	7
 16089  14E9  1581               	bsf	1,3
 16090                           
 16091                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 16092  14EA  086F               	movf	_DimmerLights,w
 16093  14EB  3E0A               	addlw	10
 16094  14EC  0086               	movwf	6
 16095  14ED  3001               	movlw	1	; select bank2/3
 16096  14EE  0087               	movwf	7
 16097  14EF  1101               	bcf	1,2
 16098                           
 16099                           ;Dimmer_B1.c: 462: }
 16100                           ;Dimmer_B1.c: 463: } else {
 16101  14F0  0008               	return
 16102  14F1                     l8989:	
 16103                           
 16104                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 16105  14F1  086F               	movf	_DimmerLights,w
 16106  14F2  3E0A               	addlw	10
 16107  14F3  0086               	movwf	6
 16108  14F4  3001               	movlw	1	; select bank2/3
 16109  14F5  0087               	movwf	7
 16110  14F6  1481               	bsf	1,1
 16111                           
 16112                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 16113  14F7  086F               	movf	_DimmerLights,w
 16114  14F8  3E0A               	addlw	10
 16115  14F9  0086               	movwf	6
 16116  14FA  3001               	movlw	1	; select bank2/3
 16117  14FB  0087               	movwf	7
 16118  14FC  1001               	bcf	1,0
 16119                           
 16120                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 16121  14FD  086A               	movf	setDimmerLights_SwOff@sw,w
 16122  14FE  319C  2415  3194   	fcall	_getDelayOff_GO
 16123  1501  3A01               	xorlw	1
 16124  1502  1D03               	skipz
 16125  1503  0008               	return
 16126                           
 16127                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 16128  1504  0020               	movlb	0	; select bank0
 16129  1505  01E6               	clrf	setDelayOff_GO@command
 16130  1506  01E7               	clrf	setDelayOff_GO@value
 16131  1507  086A               	movf	setDimmerLights_SwOff@sw,w
 16132  1508  3195  25FC         	fcall	_setDelayOff_GO
 16133  150A  0008               	return
 16134  150B                     __end_of_setDimmerLights_SwOff:	
 16135                           
 16136                           	psect	text100
 16137  15FC                     __ptext100:	
 16138 ;; *************** function _setDelayOff_GO *****************
 16139 ;; Defined at:
 16140 ;;		line 83 in file "../src/DelayOff_B1.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  sw              1    wreg     unsigned char 
 16143 ;;  command         1   70[BANK0 ] unsigned char 
 16144 ;;  value           1   71[BANK0 ] unsigned char 
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;  sw              1   73[BANK0 ] unsigned char 
 16147 ;; Return value:  Size  Location     Type
 16148 ;;		None               void
 16149 ;; Registers used:
 16150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16151 ;; Tracked objects:
 16152 ;;		On entry : 0/0
 16153 ;;		On exit  : 0/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;Total ram usage:        4 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:    7
 16163 ;; This function calls:
 16164 ;;		_DelayOffPointSelect
 16165 ;;		_DelayTimejudge
 16166 ;;		_setProductData
 16167 ;; This function is called by:
 16168 ;;		_setDimmerLights_SwOff
 16169 ;;		_setRFSW_Control
 16170 ;; This function uses a non-reentrant model
 16171 ;;
 16172                           
 16173                           
 16174                           ;psect for function _setDelayOff_GO
 16175  15FC                     _setDelayOff_GO:	
 16176                           
 16177                           ;incstack = 0
 16178                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16179                           ;setDelayOff_GO@sw stored from wreg
 16180  15FC  0020               	movlb	0	; select bank0
 16181  15FD  00E9               	movwf	setDelayOff_GO@sw
 16182                           
 16183                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16184  15FE  0869               	movf	setDelayOff_GO@sw,w
 16185  15FF  319D  2511  3195   	fcall	_DelayOffPointSelect
 16186                           
 16187                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16188  1602  0020               	movlb	0	; select bank0
 16189  1603  0866               	movf	setDelayOff_GO@command,w
 16190  1604  3A01               	xorlw	1
 16191  1605  3000               	movlw	0
 16192  1606  1903               	skipnz
 16193  1607  3001               	movlw	1
 16194  1608  00E8               	movwf	??_setDelayOff_GO
 16195  1609  0875               	movf	_DelayOff,w
 16196  160A  0086               	movwf	6
 16197  160B  3001               	movlw	1	; select bank2/3
 16198  160C  0087               	movwf	7
 16199  160D  0DE8               	rlf	??_setDelayOff_GO,f
 16200  160E  0801               	movf	1,w
 16201  160F  0668               	xorwf	??_setDelayOff_GO,w
 16202  1610  39FD               	andlw	-3
 16203  1611  0668               	xorwf	??_setDelayOff_GO,w
 16204  1612  0081               	movwf	1
 16205                           
 16206                           ;DelayOff_B1.c: 89: if (command == 1) {
 16207  1613  0866               	movf	setDelayOff_GO@command,w
 16208  1614  3A01               	xorlw	1
 16209  1615  1D03               	skipz
 16210  1616  2E3A               	goto	l8921
 16211                           
 16212                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16213  1617  0867               	movf	setDelayOff_GO@value,w
 16214  1618  3190  20ED  3195   	fcall	_DelayTimejudge
 16215  161B  0020               	movlb	0	; select bank0
 16216  161C  00E8               	movwf	??_setDelayOff_GO
 16217  161D  0A75               	incf	_DelayOff,w
 16218  161E  0086               	movwf	6
 16219  161F  3001               	movlw	1	; select bank2/3
 16220  1620  0087               	movwf	7
 16221  1621  0868               	movf	??_setDelayOff_GO,w
 16222  1622  0081               	movwf	1
 16223                           
 16224                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16225  1623  300F               	movlw	15
 16226  1624  0567               	andwf	setDelayOff_GO@value,w
 16227  1625  00E8               	movwf	??_setDelayOff_GO
 16228  1626  0868               	movf	??_setDelayOff_GO,w
 16229  1627  3A05               	xorlw	5
 16230  1628  1903               	skipnz
 16231  1629  2E2E               	goto	l8915
 16232  162A  0867               	movf	setDelayOff_GO@value,w
 16233  162B  390F               	andlw	15
 16234  162C  1D03               	btfss	3,2
 16235  162D  2E34               	goto	l8919
 16236  162E                     l8915:	
 16237  162E  3026               	movlw	38
 16238  162F  0267               	subwf	setDelayOff_GO@value,w
 16239  1630  1803               	skipnc
 16240  1631  2E34               	goto	l8919
 16241                           
 16242                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16243  1632  0867               	movf	setDelayOff_GO@value,w
 16244  1633  2E36               	goto	L9
 16245  1634                     l8919:	
 16246                           ;DelayOff_B1.c: 93: } else {
 16247                           
 16248                           
 16249                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16250  1634  3005               	movlw	5
 16251  1635  0020               	movlb	0	; select bank0
 16252  1636                     L9:	
 16253  1636  00E8               	movwf	??_setDelayOff_GO
 16254  1637  0868               	movf	??_setDelayOff_GO,w
 16255  1638  00E2               	movwf	setProductData@value
 16256  1639  2E3C               	goto	L8
 16257  163A                     l8921:	
 16258                           ;DelayOff_B1.c: 95: }
 16259                           ;DelayOff_B1.c: 96: } else {
 16260                           
 16261                           
 16262                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16263  163A  0020               	movlb	0	; select bank0
 16264  163B  01E2               	clrf	setProductData@value
 16265  163C                     L8:	
 16266  163C  0869               	movf	setDelayOff_GO@sw,w
 16267  163D  3E1A               	addlw	26
 16268  163E  3190  2066         	fcall	_setProductData
 16269                           
 16270                           ;DelayOff_B1.c: 98: }
 16271                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16272  1640  0875               	movf	_DelayOff,w
 16273  1641  3E02               	addlw	2
 16274  1642  0086               	movwf	6
 16275  1643  3001               	movlw	1	; select bank2/3
 16276  1644  0087               	movwf	7
 16277  1645  3000               	movlw	0
 16278  1646  3FC0               	movwi [0]fsr1
 16279  1647  3FC1               	movwi [1]fsr1
 16280                           
 16281                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16282  1648  0875               	movf	_DelayOff,w
 16283  1649  3E04               	addlw	4
 16284  164A  0086               	movwf	6
 16285  164B  3001               	movlw	1	; select bank2/3
 16286  164C  0087               	movwf	7
 16287  164D  0181               	clrf	1
 16288  164E  0008               	return
 16289  164F                     __end_of_setDelayOff_GO:	
 16290                           
 16291                           	psect	text101
 16292  1066                     __ptext101:	
 16293 ;; *************** function _setProductData *****************
 16294 ;; Defined at:
 16295 ;;		line 605 in file "../src/Main_B1.c"
 16296 ;; Parameters:    Size  Location     Type
 16297 ;;  address         1    wreg     unsigned char 
 16298 ;;  value           1   66[BANK0 ] unsigned char 
 16299 ;; Auto vars:     Size  Location     Type
 16300 ;;  address         1   69[BANK0 ] unsigned char 
 16301 ;; Return value:  Size  Location     Type
 16302 ;;		None               void
 16303 ;; Registers used:
 16304 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16305 ;; Tracked objects:
 16306 ;;		On entry : 0/0
 16307 ;;		On exit  : 0/0
 16308 ;;		Unchanged: 0/0
 16309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16310 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;Total ram usage:        4 bytes
 16315 ;; Hardware stack levels used:    1
 16316 ;; Hardware stack levels required when called:    5
 16317 ;; This function calls:
 16318 ;;		Nothing
 16319 ;; This function is called by:
 16320 ;;		_setDelayOff_GO
 16321 ;;		_setDimmerLights
 16322 ;;		_setDimmerLights_Adj
 16323 ;;		_setTemp_Main
 16324 ;;		_setLog_Code
 16325 ;;		_setControl_Lights_Table
 16326 ;;		_setRFSW_AdjControl
 16327 ;;		_setRF_DimmerValue
 16328 ;;		_setRF_DimmerLights
 16329 ;; This function uses a non-reentrant model
 16330 ;;
 16331                           
 16332                           
 16333                           ;psect for function _setProductData
 16334  1066                     _setProductData:	
 16335                           
 16336                           ;incstack = 0
 16337                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16338                           ;setProductData@address stored from wreg
 16339  1066  0020               	movlb	0	; select bank0
 16340  1067  00E5               	movwf	setProductData@address
 16341                           
 16342                           ;Main_B1.c: 606: product->Data[address] = value;
 16343  1068  0862               	movf	setProductData@value,w
 16344  1069  00E3               	movwf	??_setProductData
 16345  106A  0865               	movf	setProductData@address,w
 16346  106B  0779               	addwf	_product,w
 16347  106C  00E4               	movwf	??_setProductData+1
 16348  106D  0864               	movf	??_setProductData+1,w
 16349  106E  0086               	movwf	6
 16350  106F  3002               	movlw	2	; select bank4/5
 16351  1070  0087               	movwf	7
 16352  1071  0863               	movf	??_setProductData,w
 16353  1072  0081               	movwf	1
 16354  1073  0008               	return
 16355  1074                     __end_of_setProductData:	
 16356                           
 16357                           	psect	text102
 16358  10ED                     __ptext102:	
 16359 ;; *************** function _DelayTimejudge *****************
 16360 ;; Defined at:
 16361 ;;		line 112 in file "../src/DelayOff_B1.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  value           1    wreg     unsigned char 
 16364 ;; Auto vars:     Size  Location     Type
 16365 ;;  value           1    9[BANK0 ] unsigned char 
 16366 ;;  k               1    8[BANK0 ] unsigned char 
 16367 ;;  j               1    7[BANK0 ] unsigned char 
 16368 ;;  i               1    6[BANK0 ] unsigned char 
 16369 ;; Return value:  Size  Location     Type
 16370 ;;                  1    wreg      unsigned char 
 16371 ;; Registers used:
 16372 ;;		wreg, status,2, status,0, pclath, cstack
 16373 ;; Tracked objects:
 16374 ;;		On entry : 0/0
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;Total ram usage:        6 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    6
 16385 ;; This function calls:
 16386 ;;		___bmul
 16387 ;; This function is called by:
 16388 ;;		_setDelayOff_GO
 16389 ;; This function uses a non-reentrant model
 16390 ;;
 16391                           
 16392                           
 16393                           ;psect for function _DelayTimejudge
 16394  10ED                     _DelayTimejudge:	
 16395                           
 16396                           ;incstack = 0
 16397                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16398                           ;DelayTimejudge@value stored from wreg
 16399  10ED  0020               	movlb	0	; select bank0
 16400  10EE  00A9               	movwf	DelayTimejudge@value
 16401                           
 16402                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16403  10EF  3005               	movlw	5
 16404  10F0  00A4               	movwf	??_DelayTimejudge
 16405  10F1  0824               	movf	??_DelayTimejudge,w
 16406  10F2  00A6               	movwf	DelayTimejudge@i
 16407  10F3  01A7               	clrf	DelayTimejudge@j
 16408  10F4  01A8               	clrf	DelayTimejudge@k
 16409                           
 16410                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16411  10F5  3031               	movlw	49
 16412  10F6  0229               	subwf	DelayTimejudge@value,w
 16413  10F7  1803               	skipnc
 16414  10F8  2915               	goto	l8811
 16415                           
 16416                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16417  10F9  0829               	movf	DelayTimejudge@value,w
 16418  10FA  390F               	andlw	15
 16419  10FB  00A4               	movwf	??_DelayTimejudge
 16420  10FC  0824               	movf	??_DelayTimejudge,w
 16421  10FD  00A7               	movwf	DelayTimejudge@j
 16422                           
 16423                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16424  10FE  0829               	movf	DelayTimejudge@value,w
 16425  10FF  00A4               	movwf	??_DelayTimejudge
 16426  1100  3004               	movlw	4
 16427  1101                     u9525:	
 16428  1101  36A4               	lsrf	??_DelayTimejudge,f
 16429  1102  0B89               	decfsz	9,f
 16430  1103  2901               	goto	u9525
 16431  1104  0824               	movf	??_DelayTimejudge,w
 16432  1105  390F               	andlw	15
 16433  1106  00A5               	movwf	??_DelayTimejudge+1
 16434  1107  0825               	movf	??_DelayTimejudge+1,w
 16435  1108  00A8               	movwf	DelayTimejudge@k
 16436                           
 16437                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16438  1109  300A               	movlw	10
 16439  110A  00A4               	movwf	??_DelayTimejudge
 16440  110B  0824               	movf	??_DelayTimejudge,w
 16441  110C  00A0               	movwf	___bmul@multiplicand
 16442  110D  0828               	movf	DelayTimejudge@k,w
 16443  110E  319C  246A         	fcall	___bmul
 16444  1110  0020               	movlb	0	; select bank0
 16445  1111  0727               	addwf	DelayTimejudge@j,w
 16446  1112  00A5               	movwf	??_DelayTimejudge+1
 16447  1113  0825               	movf	??_DelayTimejudge+1,w
 16448  1114  00A6               	movwf	DelayTimejudge@i
 16449  1115                     l8811:	
 16450                           
 16451                           ;DelayOff_B1.c: 118: }
 16452                           ;DelayOff_B1.c: 139: return i;
 16453  1115  0826               	movf	DelayTimejudge@i,w
 16454  1116  0008               	return
 16455  1117                     __end_of_DelayTimejudge:	
 16456                           
 16457                           	psect	text103
 16458  1C6A                     __ptext103:	
 16459 ;; *************** function ___bmul *****************
 16460 ;; Defined at:
 16461 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16462 ;; Parameters:    Size  Location     Type
 16463 ;;  multiplier      1    wreg     unsigned char 
 16464 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16465 ;; Auto vars:     Size  Location     Type
 16466 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16467 ;;  product         1    2[BANK0 ] unsigned char 
 16468 ;; Return value:  Size  Location     Type
 16469 ;;                  1    wreg      unsigned char 
 16470 ;; Registers used:
 16471 ;;		wreg, status,2, status,0
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16477 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;Total ram usage:        4 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    5
 16484 ;; This function calls:
 16485 ;;		Nothing
 16486 ;; This function is called by:
 16487 ;;		_DelayTimejudge
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function ___bmul
 16493  1C6A                     ___bmul:	
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16497                           ;___bmul@multiplier stored from wreg
 16498  1C6A  0020               	movlb	0	; select bank0
 16499  1C6B  00A3               	movwf	___bmul@multiplier
 16500  1C6C  01A2               	clrf	___bmul@product
 16501  1C6D                     l8549:	
 16502  1C6D  1C23               	btfss	___bmul@multiplier,0
 16503  1C6E  2C73               	goto	l8553
 16504  1C6F  0820               	movf	___bmul@multiplicand,w
 16505  1C70  00A1               	movwf	??___bmul
 16506  1C71  0821               	movf	??___bmul,w
 16507  1C72  07A2               	addwf	___bmul@product,f
 16508  1C73                     l8553:	
 16509  1C73  1003               	clrc
 16510  1C74  0DA0               	rlf	___bmul@multiplicand,f
 16511  1C75  1003               	clrc
 16512  1C76  0CA3               	rrf	___bmul@multiplier,f
 16513  1C77  08A3               	movf	___bmul@multiplier,f
 16514  1C78  1D03               	skipz
 16515  1C79  2C6D               	goto	l8549
 16516  1C7A  0822               	movf	___bmul@product,w
 16517  1C7B  0008               	return
 16518  1C7C                     __end_of___bmul:	
 16519                           
 16520                           	psect	text104
 16521  1C15                     __ptext104:	
 16522 ;; *************** function _getDelayOff_GO *****************
 16523 ;; Defined at:
 16524 ;;		line 105 in file "../src/DelayOff_B1.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;  sw              1    wreg     unsigned char 
 16527 ;; Auto vars:     Size  Location     Type
 16528 ;;  sw              1    2[BANK0 ] unsigned char 
 16529 ;;  go              1    3[BANK0 ] unsigned char 
 16530 ;; Return value:  Size  Location     Type
 16531 ;;                  1    wreg      unsigned char 
 16532 ;; Registers used:
 16533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16534 ;; Tracked objects:
 16535 ;;		On entry : 0/0
 16536 ;;		On exit  : 0/0
 16537 ;;		Unchanged: 0/0
 16538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16543 ;;Total ram usage:        2 bytes
 16544 ;; Hardware stack levels used:    1
 16545 ;; Hardware stack levels required when called:    6
 16546 ;; This function calls:
 16547 ;;		_DelayOffPointSelect
 16548 ;; This function is called by:
 16549 ;;		_setDimmerLights_SwOff
 16550 ;;		_setRFSW_Control
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           
 16555                           ;psect for function _getDelayOff_GO
 16556  1C15                     _getDelayOff_GO:	
 16557                           
 16558                           ;incstack = 0
 16559                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16560                           ;getDelayOff_GO@sw stored from wreg
 16561  1C15  0020               	movlb	0	; select bank0
 16562  1C16  00A2               	movwf	getDelayOff_GO@sw
 16563                           
 16564                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16565  1C17  0822               	movf	getDelayOff_GO@sw,w
 16566  1C18  319D  2511         	fcall	_DelayOffPointSelect
 16567                           
 16568                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16569  1C1A  0875               	movf	_DelayOff,w
 16570  1C1B  0086               	movwf	6
 16571  1C1C  3001               	movlw	1	; select bank2/3
 16572  1C1D  0087               	movwf	7
 16573  1C1E  3000               	movlw	0
 16574  1C1F  1881               	btfsc	1,1
 16575  1C20  3001               	movlw	1
 16576  1C21  0020               	movlb	0	; select bank0
 16577  1C22  00A3               	movwf	getDelayOff_GO@go
 16578                           
 16579                           ;DelayOff_B1.c: 108: return go;
 16580  1C23  0823               	movf	getDelayOff_GO@go,w
 16581  1C24  0008               	return
 16582  1C25                     __end_of_getDelayOff_GO:	
 16583                           
 16584                           	psect	text105
 16585  1C25                     __ptext105:	
 16586 ;; *************** function _getDimmerLights_Status *****************
 16587 ;; Defined at:
 16588 ;;		line 757 in file "../src/Dimmer_B1.c"
 16589 ;; Parameters:    Size  Location     Type
 16590 ;;  lights          1    wreg     unsigned char 
 16591 ;; Auto vars:     Size  Location     Type
 16592 ;;  lights          1    2[BANK0 ] unsigned char 
 16593 ;;  status          1    3[BANK0 ] unsigned char 
 16594 ;; Return value:  Size  Location     Type
 16595 ;;                  1    wreg      unsigned char 
 16596 ;; Registers used:
 16597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16598 ;; Tracked objects:
 16599 ;;		On entry : 0/0
 16600 ;;		On exit  : 0/0
 16601 ;;		Unchanged: 0/0
 16602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;Total ram usage:        2 bytes
 16608 ;; Hardware stack levels used:    1
 16609 ;; Hardware stack levels required when called:    6
 16610 ;; This function calls:
 16611 ;;		_DimmerLightsPointSelect
 16612 ;; This function is called by:
 16613 ;;		_setDimmerLights_ErrorClose
 16614 ;;		_Exception_Main
 16615 ;;		_setRFSW_Control
 16616 ;;		_setRFSW_AdjControl
 16617 ;; This function uses a non-reentrant model
 16618 ;;
 16619                           
 16620                           
 16621                           ;psect for function _getDimmerLights_Status
 16622  1C25                     _getDimmerLights_Status:	
 16623                           
 16624                           ;incstack = 0
 16625                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16626                           ;getDimmerLights_Status@lights stored from wreg
 16627  1C25  0020               	movlb	0	; select bank0
 16628  1C26  00A2               	movwf	getDimmerLights_Status@lights
 16629                           
 16630                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16631  1C27  0822               	movf	getDimmerLights_Status@lights,w
 16632  1C28  319C  24B2         	fcall	_DimmerLightsPointSelect
 16633                           
 16634                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16635  1C2A  0020               	movlb	0	; select bank0
 16636  1C2B  086F               	movf	_DimmerLights,w
 16637  1C2C  3E02               	addlw	2
 16638  1C2D  0086               	movwf	6
 16639  1C2E  3001               	movlw	1	; select bank2/3
 16640  1C2F  0087               	movwf	7
 16641  1C30  3000               	movlw	0
 16642  1C31  1881               	btfsc	1,1
 16643  1C32  3001               	movlw	1
 16644  1C33  00A3               	movwf	getDimmerLights_Status@status
 16645                           
 16646                           ;Dimmer_B1.c: 760: return status;
 16647  1C34  0823               	movf	getDimmerLights_Status@status,w
 16648  1C35  0008               	return
 16649  1C36                     __end_of_getDimmerLights_Status:	
 16650                           
 16651                           	psect	text106
 16652  1CB2                     __ptext106:	
 16653 ;; *************** function _DimmerLightsPointSelect *****************
 16654 ;; Defined at:
 16655 ;;		line 321 in file "../src/Dimmer_B1.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;  lights          1    wreg     unsigned char 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  lights          1    1[BANK0 ] unsigned char 
 16660 ;; Return value:  Size  Location     Type
 16661 ;;		None               void
 16662 ;; Registers used:
 16663 ;;		wreg
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;Total ram usage:        2 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    5
 16676 ;; This function calls:
 16677 ;;		Nothing
 16678 ;; This function is called by:
 16679 ;;		_setDimmerLights_Initialization
 16680 ;;		_setDimmerLights_SwOn
 16681 ;;		_setDimmerLights_SwOff
 16682 ;;		_setDimmerLights_AdjOn
 16683 ;;		_setDimmerLights_Main
 16684 ;;		_getDimmerLights_Status
 16685 ;;		_getAll_DimmerLights_AdjSw
 16686 ;;		_setDimmerLights_ErrorClose
 16687 ;;		_setDimmerLights_AdjRF
 16688 ;;		_setDimmerLights_Status
 16689 ;;		_setDimmerLights_GO
 16690 ;;		_setDimmerLights_MaxmumValue
 16691 ;;		_setDimmerLights_Trigger
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           
 16696                           ;psect for function _DimmerLightsPointSelect
 16697  1CB2                     _DimmerLightsPointSelect:	
 16698                           
 16699                           ;incstack = 0
 16700                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16701                           ;DimmerLightsPointSelect@lights stored from wreg
 16702  1CB2  0020               	movlb	0	; select bank0
 16703  1CB3  00A1               	movwf	DimmerLightsPointSelect@lights
 16704                           
 16705                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16706  1CB4  0821               	movf	DimmerLightsPointSelect@lights,w
 16707  1CB5  3A01               	xorlw	1
 16708  1CB6  1D03               	skipz
 16709  1CB7  2CBC               	goto	l769
 16710                           
 16711                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16712  1CB8  3055               	movlw	_DimmerLights1& (0+255)
 16713  1CB9  00A0               	movwf	??_DimmerLightsPointSelect
 16714  1CBA  0820               	movf	??_DimmerLightsPointSelect,w
 16715  1CBB  00EF               	movwf	_DimmerLights
 16716  1CBC                     l769:	
 16717                           
 16718                           ;Dimmer_B1.c: 325: }
 16719                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16720  1CBC  0821               	movf	DimmerLightsPointSelect@lights,w
 16721  1CBD  3A02               	xorlw	2
 16722  1CBE  1D03               	skipz
 16723  1CBF  0008               	return
 16724                           
 16725                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 16726  1CC0  30BE               	movlw	_DimmerLights2& (0+255)
 16727  1CC1  00A0               	movwf	??_DimmerLightsPointSelect
 16728  1CC2  0820               	movf	??_DimmerLightsPointSelect,w
 16729  1CC3  00EF               	movwf	_DimmerLights
 16730  1CC4  0008               	return
 16731  1CC5                     __end_of_DimmerLightsPointSelect:	
 16732                           
 16733                           	psect	text107
 16734  174E                     __ptext107:	
 16735 ;; *************** function _setBuz *****************
 16736 ;; Defined at:
 16737 ;;		line 22 in file "../src/Buzzer_B1.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  count           1    wreg     unsigned char 
 16740 ;;  time            2    9[BANK0 ] int 
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;  count           1   12[BANK0 ] unsigned char 
 16743 ;; Return value:  Size  Location     Type
 16744 ;;		None               void
 16745 ;; Registers used:
 16746 ;;		wreg, status,2, status,0, pclath, cstack
 16747 ;; Tracked objects:
 16748 ;;		On entry : 0/0
 16749 ;;		On exit  : 0/0
 16750 ;;		Unchanged: 0/0
 16751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16752 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;Total ram usage:        4 bytes
 16757 ;; Hardware stack levels used:    1
 16758 ;; Hardware stack levels required when called:    6
 16759 ;; This function calls:
 16760 ;;		___awdiv
 16761 ;; This function is called by:
 16762 ;;		_DlyOff_Main
 16763 ;;		_setDimmerLights_SwOn
 16764 ;;		_setDimmerLights_Adj
 16765 ;;		_my_MainTimer
 16766 ;;		_Exception_Main
 16767 ;;		_setTemp_Main
 16768 ;;		_setLog_Code
 16769 ;;		_setControl_Lights_Table
 16770 ;;		_setRFSW_Control
 16771 ;;		_setSw_Main
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           
 16776                           ;psect for function _setBuz
 16777  174E                     _setBuz:	
 16778                           
 16779                           ;incstack = 0
 16780                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16781                           ;setBuz@count stored from wreg
 16782  174E  0020               	movlb	0	; select bank0
 16783  174F  00AC               	movwf	setBuz@count
 16784                           
 16785                           ;Buzzer_B1.c: 23: time /= 10;
 16786  1750  300A               	movlw	10
 16787  1751  00A0               	movwf	___awdiv@divisor
 16788  1752  3000               	movlw	0
 16789  1753  00A1               	movwf	___awdiv@divisor+1
 16790  1754  082A               	movf	setBuz@time+1,w
 16791  1755  01A3               	clrf	___awdiv@dividend+1
 16792  1756  07A3               	addwf	___awdiv@dividend+1,f
 16793  1757  0829               	movf	setBuz@time,w
 16794  1758  01A2               	clrf	___awdiv@dividend
 16795  1759  07A2               	addwf	___awdiv@dividend,f
 16796  175A  3196  26A2  3197   	fcall	___awdiv
 16797  175D  0020               	movlb	0	; select bank0
 16798  175E  0821               	movf	?___awdiv+1,w
 16799  175F  01AA               	clrf	setBuz@time+1
 16800  1760  07AA               	addwf	setBuz@time+1,f
 16801  1761  0820               	movf	?___awdiv,w
 16802  1762  01A9               	clrf	setBuz@time
 16803  1763  07A9               	addwf	setBuz@time,f
 16804                           
 16805                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16806  1764  0021               	movlb	1	; select bank1
 16807  1765  1C2E               	btfss	_Buz1^(0+128),0
 16808  1766  0008               	return
 16809                           
 16810                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16811  1767  18AE               	btfsc	_Buz1^(0+128),1
 16812  1768  2F7F               	goto	l96
 16813                           
 16814                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16815  1769  14AE               	bsf	_Buz1^(0+128),1
 16816                           
 16817                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16818  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16819  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16820                           
 16821                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16822  176C  0020               	movlb	0	; select bank0
 16823  176D  082C               	movf	setBuz@count,w
 16824  176E  00AB               	movwf	??_setBuz
 16825  176F  082B               	movf	??_setBuz,w
 16826  1770  0021               	movlb	1	; select bank1
 16827  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16828                           
 16829                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16830  1772  0020               	movlb	0	; select bank0
 16831  1773  082A               	movf	setBuz@time+1,w
 16832  1774  0021               	movlb	1	; select bank1
 16833  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16834  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16835  1777  0020               	movlb	0	; select bank0
 16836  1778  0829               	movf	setBuz@time,w
 16837  1779  0021               	movlb	1	; select bank1
 16838  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16839  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16840                           
 16841                           ;Buzzer_B1.c: 30: RB3 = 1;
 16842  177C  0020               	movlb	0	; select bank0
 16843  177D  158D               	bsf	13,3	;volatile
 16844                           
 16845                           ;Buzzer_B1.c: 31: } else {
 16846  177E  0008               	return
 16847  177F                     l96:	
 16848                           
 16849                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16850  177F  19AE               	btfsc	_Buz1^(0+128),3
 16851  1780  2F93               	goto	l98
 16852                           
 16853                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16854  1781  15AE               	bsf	_Buz1^(0+128),3
 16855                           
 16856                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16857  1782  0020               	movlb	0	; select bank0
 16858  1783  082C               	movf	setBuz@count,w
 16859  1784  00AB               	movwf	??_setBuz
 16860  1785  082B               	movf	??_setBuz,w
 16861  1786  0021               	movlb	1	; select bank1
 16862  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16863                           
 16864                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16865  1788  0020               	movlb	0	; select bank0
 16866  1789  082A               	movf	setBuz@time+1,w
 16867  178A  0021               	movlb	1	; select bank1
 16868  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16869  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16870  178D  0020               	movlb	0	; select bank0
 16871  178E  0829               	movf	setBuz@time,w
 16872  178F  0021               	movlb	1	; select bank1
 16873  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16874  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16875                           
 16876                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16877  1792  0008               	return
 16878  1793                     l98:	
 16879  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16880  1794  0008               	return
 16881                           
 16882                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16883  1795  162E               	bsf	_Buz1^(0+128),4
 16884                           
 16885                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16886  1796  0020               	movlb	0	; select bank0
 16887  1797  082C               	movf	setBuz@count,w
 16888  1798  00AB               	movwf	??_setBuz
 16889  1799  082B               	movf	??_setBuz,w
 16890  179A  0021               	movlb	1	; select bank1
 16891  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16892                           
 16893                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16894  179C  0020               	movlb	0	; select bank0
 16895  179D  082A               	movf	setBuz@time+1,w
 16896  179E  0021               	movlb	1	; select bank1
 16897  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16898  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16899  17A1  0020               	movlb	0	; select bank0
 16900  17A2  0829               	movf	setBuz@time,w
 16901  17A3  0021               	movlb	1	; select bank1
 16902  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16903  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16904  17A6  0008               	return
 16905  17A7                     __end_of_setBuz:	
 16906                           
 16907                           	psect	text108
 16908  16A2                     __ptext108:	
 16909 ;; *************** function ___awdiv *****************
 16910 ;; Defined at:
 16911 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16912 ;; Parameters:    Size  Location     Type
 16913 ;;  divisor         2    0[BANK0 ] int 
 16914 ;;  dividend        2    2[BANK0 ] int 
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;  quotient        2    7[BANK0 ] int 
 16917 ;;  sign            1    6[BANK0 ] unsigned char 
 16918 ;;  counter         1    5[BANK0 ] unsigned char 
 16919 ;; Return value:  Size  Location     Type
 16920 ;;                  2    0[BANK0 ] int 
 16921 ;; Registers used:
 16922 ;;		wreg, status,2, status,0
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        9 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    5
 16935 ;; This function calls:
 16936 ;;		Nothing
 16937 ;; This function is called by:
 16938 ;;		_setBuz
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function ___awdiv
 16944  16A2                     ___awdiv:	
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16948  16A2  0020               	movlb	0	; select bank0
 16949  16A3  01A6               	clrf	___awdiv@sign
 16950  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 16951  16A5  2EAD               	goto	l8839
 16952  16A6  09A0               	comf	___awdiv@divisor,f
 16953  16A7  09A1               	comf	___awdiv@divisor+1,f
 16954  16A8  0AA0               	incf	___awdiv@divisor,f
 16955  16A9  1903               	skipnz
 16956  16AA  0AA1               	incf	___awdiv@divisor+1,f
 16957  16AB  01A6               	clrf	___awdiv@sign
 16958  16AC  0AA6               	incf	___awdiv@sign,f
 16959  16AD                     l8839:	
 16960  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 16961  16AE  2EB8               	goto	l8845
 16962  16AF  09A2               	comf	___awdiv@dividend,f
 16963  16B0  09A3               	comf	___awdiv@dividend+1,f
 16964  16B1  0AA2               	incf	___awdiv@dividend,f
 16965  16B2  1903               	skipnz
 16966  16B3  0AA3               	incf	___awdiv@dividend+1,f
 16967  16B4  3001               	movlw	1
 16968  16B5  00A4               	movwf	??___awdiv
 16969  16B6  0824               	movf	??___awdiv,w
 16970  16B7  06A6               	xorwf	___awdiv@sign,f
 16971  16B8                     l8845:	
 16972  16B8  01A7               	clrf	___awdiv@quotient
 16973  16B9  01A8               	clrf	___awdiv@quotient+1
 16974  16BA  0821               	movf	___awdiv@divisor+1,w
 16975  16BB  0420               	iorwf	___awdiv@divisor,w
 16976  16BC  1903               	skipnz
 16977  16BD  2EE7               	goto	l8867
 16978  16BE  01A5               	clrf	___awdiv@counter
 16979  16BF  0AA5               	incf	___awdiv@counter,f
 16980  16C0                     l8855:	
 16981  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 16982  16C1  2ECC               	goto	l8857
 16983  16C2  3001               	movlw	1
 16984  16C3                     u9585:	
 16985  16C3  35A0               	lslf	___awdiv@divisor,f
 16986  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 16987  16C5  0B89               	decfsz	9,f
 16988  16C6  2EC3               	goto	u9585
 16989  16C7  3001               	movlw	1
 16990  16C8  00A4               	movwf	??___awdiv
 16991  16C9  0824               	movf	??___awdiv,w
 16992  16CA  07A5               	addwf	___awdiv@counter,f
 16993  16CB  2EC0               	goto	l8855
 16994  16CC                     l8857:	
 16995  16CC  3001               	movlw	1
 16996  16CD                     u9605:	
 16997  16CD  35A7               	lslf	___awdiv@quotient,f
 16998  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 16999  16CF  0B89               	decfsz	9,f
 17000  16D0  2ECD               	goto	u9605
 17001  16D1  0821               	movf	___awdiv@divisor+1,w
 17002  16D2  0223               	subwf	___awdiv@dividend+1,w
 17003  16D3  1D03               	skipz
 17004  16D4  2ED7               	goto	u9615
 17005  16D5  0820               	movf	___awdiv@divisor,w
 17006  16D6  0222               	subwf	___awdiv@dividend,w
 17007  16D7                     u9615:	
 17008  16D7  1C03               	skipc
 17009  16D8  2EDE               	goto	l8863
 17010  16D9  0820               	movf	___awdiv@divisor,w
 17011  16DA  02A2               	subwf	___awdiv@dividend,f
 17012  16DB  0821               	movf	___awdiv@divisor+1,w
 17013  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 17014  16DD  1427               	bsf	___awdiv@quotient,0
 17015  16DE                     l8863:	
 17016  16DE  3001               	movlw	1
 17017  16DF                     u9625:	
 17018  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 17019  16E0  0CA0               	rrf	___awdiv@divisor,f
 17020  16E1  0B89               	decfsz	9,f
 17021  16E2  2EDF               	goto	u9625
 17022  16E3  3001               	movlw	1
 17023  16E4  02A5               	subwf	___awdiv@counter,f
 17024  16E5  1D03               	btfss	3,2
 17025  16E6  2ECC               	goto	l8857
 17026  16E7                     l8867:	
 17027  16E7  0826               	movf	___awdiv@sign,w
 17028  16E8  1903               	btfsc	3,2
 17029  16E9  2EEF               	goto	l8871
 17030  16EA  09A7               	comf	___awdiv@quotient,f
 17031  16EB  09A8               	comf	___awdiv@quotient+1,f
 17032  16EC  0AA7               	incf	___awdiv@quotient,f
 17033  16ED  1903               	skipnz
 17034  16EE  0AA8               	incf	___awdiv@quotient+1,f
 17035  16EF                     l8871:	
 17036  16EF  0828               	movf	___awdiv@quotient+1,w
 17037  16F0  01A1               	clrf	?___awdiv+1
 17038  16F1  07A1               	addwf	?___awdiv+1,f
 17039  16F2  0827               	movf	___awdiv@quotient,w
 17040  16F3  01A0               	clrf	?___awdiv
 17041  16F4  07A0               	addwf	?___awdiv,f
 17042  16F5  0008               	return
 17043  16F6                     __end_of___awdiv:	
 17044                           
 17045                           	psect	text109
 17046  1B32                     __ptext109:	
 17047 ;; *************** function _DelayOff_Initialization *****************
 17048 ;; Defined at:
 17049 ;;		line 26 in file "../src/DelayOff_B1.c"
 17050 ;; Parameters:    Size  Location     Type
 17051 ;;		None
 17052 ;; Auto vars:     Size  Location     Type
 17053 ;;		None
 17054 ;; Return value:  Size  Location     Type
 17055 ;;		None               void
 17056 ;; Registers used:
 17057 ;;		wreg, status,2, status,0, pclath, cstack
 17058 ;; Tracked objects:
 17059 ;;		On entry : 0/0
 17060 ;;		On exit  : 0/0
 17061 ;;		Unchanged: 0/0
 17062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;Total ram usage:        0 bytes
 17068 ;; Hardware stack levels used:    1
 17069 ;; Hardware stack levels required when called:    7
 17070 ;; This function calls:
 17071 ;;		_DlyOff_Initialization
 17072 ;; This function is called by:
 17073 ;;		_main
 17074 ;; This function uses a non-reentrant model
 17075 ;;
 17076                           
 17077                           
 17078                           ;psect for function _DelayOff_Initialization
 17079  1B32                     _DelayOff_Initialization:	
 17080                           
 17081                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17082                           
 17083                           ;incstack = 0
 17084                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17085  1B32  3001               	movlw	1
 17086  1B33  319B  2311  319B   	fcall	_DlyOff_Initialization
 17087                           
 17088                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17089  1B36  3002               	movlw	2
 17090  1B37  319B  2311         	fcall	_DlyOff_Initialization
 17091  1B39  0008               	return
 17092  1B3A                     __end_of_DelayOff_Initialization:	
 17093                           
 17094                           	psect	text110
 17095  1B11                     __ptext110:	
 17096 ;; *************** function _DlyOff_Initialization *****************
 17097 ;; Defined at:
 17098 ;;		line 56 in file "../src/DelayOff_B1.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;  sw              1    wreg     unsigned char 
 17101 ;; Auto vars:     Size  Location     Type
 17102 ;;  sw              1    2[BANK0 ] unsigned char 
 17103 ;; Return value:  Size  Location     Type
 17104 ;;		None               void
 17105 ;; Registers used:
 17106 ;;		wreg, status,2, status,0, pclath, cstack
 17107 ;; Tracked objects:
 17108 ;;		On entry : 0/0
 17109 ;;		On exit  : 0/0
 17110 ;;		Unchanged: 0/0
 17111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;Total ram usage:        1 bytes
 17117 ;; Hardware stack levels used:    1
 17118 ;; Hardware stack levels required when called:    6
 17119 ;; This function calls:
 17120 ;;		_DelayOffPointSelect
 17121 ;; This function is called by:
 17122 ;;		_DelayOff_Initialization
 17123 ;; This function uses a non-reentrant model
 17124 ;;
 17125                           
 17126                           
 17127                           ;psect for function _DlyOff_Initialization
 17128  1B11                     _DlyOff_Initialization:	
 17129                           
 17130                           ;incstack = 0
 17131                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17132                           ;DlyOff_Initialization@sw stored from wreg
 17133  1B11  0020               	movlb	0	; select bank0
 17134  1B12  00A2               	movwf	DlyOff_Initialization@sw
 17135                           
 17136                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17137  1B13  0822               	movf	DlyOff_Initialization@sw,w
 17138  1B14  319D  2511         	fcall	_DelayOffPointSelect
 17139  1B16  0008               	return
 17140  1B17                     __end_of_DlyOff_Initialization:	
 17141                           
 17142                           	psect	text111
 17143  1D11                     __ptext111:	
 17144 ;; *************** function _DelayOffPointSelect *****************
 17145 ;; Defined at:
 17146 ;;		line 7 in file "../src/DelayOff_B1.c"
 17147 ;; Parameters:    Size  Location     Type
 17148 ;;  sw              1    wreg     unsigned char 
 17149 ;; Auto vars:     Size  Location     Type
 17150 ;;  sw              1    1[BANK0 ] unsigned char 
 17151 ;; Return value:  Size  Location     Type
 17152 ;;		None               void
 17153 ;; Registers used:
 17154 ;;		wreg
 17155 ;; Tracked objects:
 17156 ;;		On entry : 0/0
 17157 ;;		On exit  : 0/0
 17158 ;;		Unchanged: 0/0
 17159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17164 ;;Total ram usage:        2 bytes
 17165 ;; Hardware stack levels used:    1
 17166 ;; Hardware stack levels required when called:    5
 17167 ;; This function calls:
 17168 ;;		Nothing
 17169 ;; This function is called by:
 17170 ;;		_DlyOff_Initialization
 17171 ;;		_DlyOff_Main
 17172 ;;		_setDelayOff_GO
 17173 ;;		_getDelayOff_GO
 17174 ;; This function uses a non-reentrant model
 17175 ;;
 17176                           
 17177                           
 17178                           ;psect for function _DelayOffPointSelect
 17179  1D11                     _DelayOffPointSelect:	
 17180                           
 17181                           ;incstack = 0
 17182                           ; Regs used in _DelayOffPointSelect: [wreg]
 17183                           ;DelayOffPointSelect@sw stored from wreg
 17184  1D11  0020               	movlb	0	; select bank0
 17185  1D12  00A1               	movwf	DelayOffPointSelect@sw
 17186                           
 17187                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17188  1D13  0821               	movf	DelayOffPointSelect@sw,w
 17189  1D14  3A01               	xorlw	1
 17190  1D15  1D03               	skipz
 17191  1D16  2D1C               	goto	l8795
 17192                           
 17193                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17194  1D17  30E1               	movlw	_DlySw1& (0+255)
 17195  1D18  00A0               	movwf	??_DelayOffPointSelect
 17196  1D19  0820               	movf	??_DelayOffPointSelect,w
 17197  1D1A  00F5               	movwf	_DelayOff
 17198                           
 17199                           ;DelayOff_B1.c: 11: }
 17200  1D1B  0008               	return
 17201  1D1C                     l8795:	
 17202                           
 17203                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17204  1D1C  0821               	movf	DelayOffPointSelect@sw,w
 17205  1D1D  3A02               	xorlw	2
 17206  1D1E  1D03               	skipz
 17207  1D1F  0008               	return
 17208                           
 17209                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17210  1D20  30E6               	movlw	_DlySw2& (0+255)
 17211  1D21  00A0               	movwf	??_DelayOffPointSelect
 17212  1D22  0820               	movf	??_DelayOffPointSelect,w
 17213  1D23  00F5               	movwf	_DelayOff
 17214  1D24  0008               	return
 17215  1D25                     __end_of_DelayOffPointSelect:	
 17216                           
 17217                           	psect	text112
 17218  1DB3                     __ptext112:	
 17219 ;; *************** function _CC2500_PowerOnInitial *****************
 17220 ;; Defined at:
 17221 ;;		line 119 in file "../src/CC2500_B1.c"
 17222 ;; Parameters:    Size  Location     Type
 17223 ;;		None
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;		None
 17226 ;; Return value:  Size  Location     Type
 17227 ;;		None               void
 17228 ;; Registers used:
 17229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17230 ;; Tracked objects:
 17231 ;;		On entry : 0/0
 17232 ;;		On exit  : 0/0
 17233 ;;		Unchanged: 0/0
 17234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;Total ram usage:        0 bytes
 17240 ;; Hardware stack levels used:    1
 17241 ;; Hardware stack levels required when called:    8
 17242 ;; This function calls:
 17243 ;;		_CC2500_ClearRXFIFO
 17244 ;;		_CC2500_ClearTXFIFO
 17245 ;;		_CC2500_FrequencyCabr
 17246 ;;		_CC2500_InitPATable
 17247 ;;		_CC2500_InitSetREG
 17248 ;;		_CC2500_PowerRST
 17249 ;;		_CC2500_SIDLEMode
 17250 ;; This function is called by:
 17251 ;;		_main
 17252 ;; This function uses a non-reentrant model
 17253 ;;
 17254                           
 17255                           
 17256                           ;psect for function _CC2500_PowerOnInitial
 17257  1DB3                     _CC2500_PowerOnInitial:	
 17258                           
 17259                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17260                           
 17261                           ;incstack = 0
 17262                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17263  1DB3  3193  23E0  319D   	fcall	_CC2500_PowerRST
 17264                           
 17265                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17266  1DB6  3190  20C3  319D   	fcall	_CC2500_InitSetREG
 17267                           
 17268                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17269  1DB9  319E  26B4  319D   	fcall	_CC2500_InitPATable
 17270                           
 17271                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17272  1DBC  319B  2300  319D   	fcall	_CC2500_ClearTXFIFO
 17273                           
 17274                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17275  1DBF  319A  22FC  319D   	fcall	_CC2500_ClearRXFIFO
 17276                           
 17277                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17278  1DC2  319B  238A  319D   	fcall	_CC2500_FrequencyCabr
 17279                           
 17280                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17281  1DC5  319B  2304         	fcall	_CC2500_SIDLEMode
 17282  1DC7  0008               	return
 17283  1DC8                     __end_of_CC2500_PowerOnInitial:	
 17284                           
 17285                           	psect	text113
 17286  1B04                     __ptext113:	
 17287 ;; *************** function _CC2500_SIDLEMode *****************
 17288 ;; Defined at:
 17289 ;;		line 209 in file "../src/CC2500_B1.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;		None
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;		None
 17294 ;; Return value:  Size  Location     Type
 17295 ;;		None               void
 17296 ;; Registers used:
 17297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17298 ;; Tracked objects:
 17299 ;;		On entry : 0/0
 17300 ;;		On exit  : 0/0
 17301 ;;		Unchanged: 0/0
 17302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;Total ram usage:        0 bytes
 17308 ;; Hardware stack levels used:    1
 17309 ;; Hardware stack levels required when called:    7
 17310 ;; This function calls:
 17311 ;;		_CC2500_WriteCommand
 17312 ;; This function is called by:
 17313 ;;		_CC2500_PowerOnInitial
 17314 ;; This function uses a non-reentrant model
 17315 ;;
 17316                           
 17317                           
 17318                           ;psect for function _CC2500_SIDLEMode
 17319  1B04                     _CC2500_SIDLEMode:	
 17320                           
 17321                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17322                           
 17323                           ;incstack = 0
 17324                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17325  1B04  3036               	movlw	54
 17326  1B05  319E  260E         	fcall	_CC2500_WriteCommand
 17327  1B07  0008               	return
 17328  1B08                     __end_of_CC2500_SIDLEMode:	
 17329                           
 17330                           	psect	text114
 17331  13E0                     __ptext114:	
 17332 ;; *************** function _CC2500_PowerRST *****************
 17333 ;; Defined at:
 17334 ;;		line 132 in file "../src/CC2500_B1.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;		None
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;		None
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;Total ram usage:        1 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    6
 17355 ;; This function calls:
 17356 ;;		_CC2500_WriteByte
 17357 ;;		_DelayTime_1us
 17358 ;;		_Timeout_Counter
 17359 ;;		_set_TimeoutCleared
 17360 ;; This function is called by:
 17361 ;;		_CC2500_PowerOnInitial
 17362 ;; This function uses a non-reentrant model
 17363 ;;
 17364                           
 17365                           
 17366                           ;psect for function _CC2500_PowerRST
 17367  13E0                     _CC2500_PowerRST:	
 17368                           
 17369                           ;CC2500_B1.c: 133: RC1 = 0;
 17370                           
 17371                           ;incstack = 0
 17372                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17373  13E0  0020               	movlb	0	; select bank0
 17374  13E1  108E               	bcf	14,1	;volatile
 17375                           
 17376                           ;CC2500_B1.c: 134: RC0 = 0;
 17377  13E2  100E               	bcf	14,0	;volatile
 17378                           
 17379                           ;CC2500_B1.c: 135: RC4 = 1;
 17380  13E3  160E               	bsf	14,4	;volatile
 17381                           
 17382                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17383  13E4  300A               	movlw	10
 17384  13E5  00A0               	movwf	DelayTime_1us@count
 17385  13E6  3000               	movlw	0
 17386  13E7  00A1               	movwf	DelayTime_1us@count+1
 17387  13E8  3190  2074  3193   	fcall	_DelayTime_1us
 17388                           
 17389                           ;CC2500_B1.c: 137: RC4 = 0;
 17390  13EB  0020               	movlb	0	; select bank0
 17391  13EC  120E               	bcf	14,4	;volatile
 17392                           
 17393                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17394  13ED  300A               	movlw	10
 17395  13EE  00A0               	movwf	DelayTime_1us@count
 17396  13EF  3000               	movlw	0
 17397  13F0  00A1               	movwf	DelayTime_1us@count+1
 17398  13F1  3190  2074  3193   	fcall	_DelayTime_1us
 17399                           
 17400                           ;CC2500_B1.c: 139: RC4 = 1;
 17401  13F4  0020               	movlb	0	; select bank0
 17402  13F5  160E               	bsf	14,4	;volatile
 17403                           
 17404                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17405  13F6  3028               	movlw	40
 17406  13F7  00A0               	movwf	DelayTime_1us@count
 17407  13F8  3000               	movlw	0
 17408  13F9  00A1               	movwf	DelayTime_1us@count+1
 17409  13FA  3190  2074  3193   	fcall	_DelayTime_1us
 17410                           
 17411                           ;CC2500_B1.c: 141: RC4 = 0;
 17412  13FD  0020               	movlb	0	; select bank0
 17413  13FE  120E               	bcf	14,4	;volatile
 17414                           
 17415                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17416  13FF  3030               	movlw	48
 17417  1400  00A6               	movwf	??_CC2500_PowerRST
 17418  1401  0826               	movf	??_CC2500_PowerRST,w
 17419  1402  0021               	movlb	1	; select bank1
 17420  1403  00D0               	movwf	_SPI0Buffer^(0+128)
 17421                           
 17422                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17423  1404  2C08               	goto	l9803
 17424  1405                     l9801:	
 17425                           
 17426                           ;CC2500_B1.c: 144: Timeout_Counter();
 17427  1405  319D  259E  3193   	fcall	_Timeout_Counter
 17428  1408                     l9803:	
 17429  1408  0020               	movlb	0	; select bank0
 17430  1409  1D0E               	btfss	14,2	;volatile
 17431  140A  2C0E               	goto	l9807
 17432  140B  0021               	movlb	1	; select bank1
 17433  140C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17434  140D  2C05               	goto	l9801
 17435  140E                     l9807:	
 17436                           
 17437                           ;CC2500_B1.c: 145: };
 17438                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17439  140E  319B  230C  3193   	fcall	_set_TimeoutCleared
 17440                           
 17441                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17442  1411  319D  25F5  3193   	fcall	_CC2500_WriteByte
 17443                           
 17444                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17445  1414  2C18               	goto	l9813
 17446  1415                     l9811:	
 17447                           
 17448                           ;CC2500_B1.c: 149: Timeout_Counter();
 17449  1415  319D  259E  3193   	fcall	_Timeout_Counter
 17450  1418                     l9813:	
 17451  1418  0020               	movlb	0	; select bank0
 17452  1419  1D0E               	btfss	14,2	;volatile
 17453  141A  2C1E               	goto	l9817
 17454  141B  0021               	movlb	1	; select bank1
 17455  141C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17456  141D  2C15               	goto	l9811
 17457  141E                     l9817:	
 17458                           
 17459                           ;CC2500_B1.c: 150: };
 17460                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17461  141E  319B  230C         	fcall	_set_TimeoutCleared
 17462                           
 17463                           ;CC2500_B1.c: 152: RC0 = 0;
 17464  1420  0020               	movlb	0	; select bank0
 17465  1421  100E               	bcf	14,0	;volatile
 17466                           
 17467                           ;CC2500_B1.c: 153: RC4 = 1;
 17468  1422  160E               	bsf	14,4	;volatile
 17469  1423  0008               	return
 17470  1424                     __end_of_CC2500_PowerRST:	
 17471                           
 17472                           	psect	text115
 17473  10C3                     __ptext115:	
 17474 ;; *************** function _CC2500_InitSetREG *****************
 17475 ;; Defined at:
 17476 ;;		line 159 in file "../src/CC2500_B1.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;		None
 17479 ;; Auto vars:     Size  Location     Type
 17480 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17481 ;;  temp2           1    7[BANK0 ] unsigned char 
 17482 ;;  temp1           1    6[BANK0 ] unsigned char 
 17483 ;; Return value:  Size  Location     Type
 17484 ;;		None               void
 17485 ;; Registers used:
 17486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17487 ;; Tracked objects:
 17488 ;;		On entry : 0/0
 17489 ;;		On exit  : 0/0
 17490 ;;		Unchanged: 0/0
 17491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17493 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;Total ram usage:        4 bytes
 17497 ;; Hardware stack levels used:    1
 17498 ;; Hardware stack levels required when called:    7
 17499 ;; This function calls:
 17500 ;;		_CC2500_WriteREG
 17501 ;; This function is called by:
 17502 ;;		_CC2500_PowerOnInitial
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           
 17507                           ;psect for function _CC2500_InitSetREG
 17508  10C3                     _CC2500_InitSetREG:	
 17509                           
 17510                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17511                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17512                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17513                           
 17514                           ;incstack = 0
 17515                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17516  10C3  0020               	movlb	0	; select bank0
 17517  10C4  01A8               	clrf	CC2500_InitSetREG@loop_c
 17518  10C5                     L10:	
 17519  10C5  302F               	movlw	47
 17520  10C6  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17521  10C7  1803               	btfsc	3,0
 17522  10C8  0008               	return
 17523                           
 17524                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17525  10C9  0828               	movf	CC2500_InitSetREG@loop_c,w
 17526  10CA  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17527  10CB  0084               	movwf	4
 17528  10CC  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17529  10CD  1803               	skipnc
 17530  10CE  3E01               	addlw	1
 17531  10CF  0085               	movwf	5
 17532  10D0  0800               	movf	0,w	;code access
 17533  10D1  00A5               	movwf	??_CC2500_InitSetREG
 17534  10D2  0825               	movf	??_CC2500_InitSetREG,w
 17535  10D3  00A6               	movwf	CC2500_InitSetREG@temp1
 17536                           
 17537                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17538  10D4  0828               	movf	CC2500_InitSetREG@loop_c,w
 17539  10D5  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17540  10D6  0084               	movwf	4
 17541  10D7  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17542  10D8  1803               	skipnc
 17543  10D9  3E01               	addlw	1
 17544  10DA  0085               	movwf	5
 17545  10DB  0800               	movf	0,w	;code access
 17546  10DC  00A5               	movwf	??_CC2500_InitSetREG
 17547  10DD  0825               	movf	??_CC2500_InitSetREG,w
 17548  10DE  00A7               	movwf	CC2500_InitSetREG@temp2
 17549                           
 17550                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17551  10DF  0827               	movf	CC2500_InitSetREG@temp2,w
 17552  10E0  00A5               	movwf	??_CC2500_InitSetREG
 17553  10E1  0825               	movf	??_CC2500_InitSetREG,w
 17554  10E2  00A2               	movwf	CC2500_WriteREG@value
 17555  10E3  0826               	movf	CC2500_InitSetREG@temp1,w
 17556  10E4  319F  2794  3190   	fcall	_CC2500_WriteREG
 17557  10E7  3001               	movlw	1
 17558  10E8  0020               	movlb	0	; select bank0
 17559  10E9  00A5               	movwf	??_CC2500_InitSetREG
 17560  10EA  0825               	movf	??_CC2500_InitSetREG,w
 17561  10EB  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17562  10EC  28C5               	goto	L10
 17563  10ED                     __end_of_CC2500_InitSetREG:	
 17564                           
 17565                           	psect	text116
 17566  1EB4                     __ptext116:	
 17567 ;; *************** function _CC2500_InitPATable *****************
 17568 ;; Defined at:
 17569 ;;		line 174 in file "../src/CC2500_B1.c"
 17570 ;; Parameters:    Size  Location     Type
 17571 ;;		None
 17572 ;; Auto vars:     Size  Location     Type
 17573 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17574 ;;  temp            1    6[BANK0 ] unsigned char 
 17575 ;; Return value:  Size  Location     Type
 17576 ;;		None               void
 17577 ;; Registers used:
 17578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17579 ;; Tracked objects:
 17580 ;;		On entry : 0/0
 17581 ;;		On exit  : 0/0
 17582 ;;		Unchanged: 0/0
 17583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;Total ram usage:        3 bytes
 17589 ;; Hardware stack levels used:    1
 17590 ;; Hardware stack levels required when called:    7
 17591 ;; This function calls:
 17592 ;;		_CC2500_WriteREG
 17593 ;; This function is called by:
 17594 ;;		_CC2500_PowerOnInitial
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           
 17599                           ;psect for function _CC2500_InitPATable
 17600  1EB4                     _CC2500_InitPATable:	
 17601                           
 17602                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17603                           ;CC2500_B1.c: 176: unsigned char temp;
 17604                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17605                           
 17606                           ;incstack = 0
 17607                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17608  1EB4  0020               	movlb	0	; select bank0
 17609  1EB5  01A7               	clrf	CC2500_InitPATable@loop_d
 17610  1EB6                     L11:	
 17611  1EB6  3008               	movlw	8
 17612  1EB7  0227               	subwf	CC2500_InitPATable@loop_d,w
 17613  1EB8  1803               	btfsc	3,0
 17614  1EB9  0008               	return
 17615                           
 17616                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17617  1EBA  0827               	movf	CC2500_InitPATable@loop_d,w
 17618  1EBB  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17619  1EBC  0084               	movwf	4
 17620  1EBD  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17621  1EBE  1803               	skipnc
 17622  1EBF  3E01               	addlw	1
 17623  1EC0  0085               	movwf	5
 17624  1EC1  0800               	movf	0,w	;code access
 17625  1EC2  00A5               	movwf	??_CC2500_InitPATable
 17626  1EC3  0825               	movf	??_CC2500_InitPATable,w
 17627  1EC4  00A6               	movwf	CC2500_InitPATable@temp
 17628                           
 17629                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17630  1EC5  0826               	movf	CC2500_InitPATable@temp,w
 17631  1EC6  00A5               	movwf	??_CC2500_InitPATable
 17632  1EC7  0825               	movf	??_CC2500_InitPATable,w
 17633  1EC8  00A2               	movwf	CC2500_WriteREG@value
 17634  1EC9  303E               	movlw	62
 17635  1ECA  319F  2794  319E   	fcall	_CC2500_WriteREG
 17636  1ECD  3001               	movlw	1
 17637  1ECE  0020               	movlb	0	; select bank0
 17638  1ECF  00A5               	movwf	??_CC2500_InitPATable
 17639  1ED0  0825               	movf	??_CC2500_InitPATable,w
 17640  1ED1  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17641  1ED2  2EB6               	goto	L11
 17642  1ED3                     __end_of_CC2500_InitPATable:	
 17643                           
 17644                           	psect	text117
 17645  1F94                     __ptext117:	
 17646 ;; *************** function _CC2500_WriteREG *****************
 17647 ;; Defined at:
 17648 ;;		line 251 in file "../src/CC2500_B1.c"
 17649 ;; Parameters:    Size  Location     Type
 17650 ;;  w_addr          1    wreg     unsigned char 
 17651 ;;  value           1    2[BANK0 ] unsigned char 
 17652 ;; Auto vars:     Size  Location     Type
 17653 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17654 ;; Return value:  Size  Location     Type
 17655 ;;		None               void
 17656 ;; Registers used:
 17657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17658 ;; Tracked objects:
 17659 ;;		On entry : 0/0
 17660 ;;		On exit  : 0/0
 17661 ;;		Unchanged: 0/0
 17662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17663 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;Total ram usage:        3 bytes
 17668 ;; Hardware stack levels used:    1
 17669 ;; Hardware stack levels required when called:    6
 17670 ;; This function calls:
 17671 ;;		_CC2500_WriteByte
 17672 ;;		_Timeout_Counter
 17673 ;;		_set_TimeoutCleared
 17674 ;; This function is called by:
 17675 ;;		_CC2500_InitSetREG
 17676 ;;		_CC2500_InitPATable
 17677 ;; This function uses a non-reentrant model
 17678 ;;
 17679                           
 17680                           
 17681                           ;psect for function _CC2500_WriteREG
 17682  1F94                     _CC2500_WriteREG:	
 17683                           
 17684                           ;incstack = 0
 17685                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17686                           ;CC2500_WriteREG@w_addr stored from wreg
 17687  1F94  0020               	movlb	0	; select bank0
 17688  1F95  00A4               	movwf	CC2500_WriteREG@w_addr
 17689                           
 17690                           ;CC2500_B1.c: 252: RC4 = 0;
 17691  1F96  120E               	bcf	14,4	;volatile
 17692                           
 17693                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17694  1F97  0824               	movf	CC2500_WriteREG@w_addr,w
 17695  1F98  00A3               	movwf	??_CC2500_WriteREG
 17696  1F99  0823               	movf	??_CC2500_WriteREG,w
 17697  1F9A  0021               	movlb	1	; select bank1
 17698  1F9B  00D0               	movwf	_SPI0Buffer^(0+128)
 17699                           
 17700                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17701  1F9C  2FA0               	goto	l9533
 17702  1F9D                     l9531:	
 17703                           
 17704                           ;CC2500_B1.c: 255: Timeout_Counter();
 17705  1F9D  319D  259E  319F   	fcall	_Timeout_Counter
 17706  1FA0                     l9533:	
 17707  1FA0  0020               	movlb	0	; select bank0
 17708  1FA1  1D0E               	btfss	14,2	;volatile
 17709  1FA2  2FA6               	goto	l9537
 17710  1FA3  0021               	movlb	1	; select bank1
 17711  1FA4  1D2B               	btfss	(_myMain^(0+128)+11),2
 17712  1FA5  2F9D               	goto	l9531
 17713  1FA6                     l9537:	
 17714                           
 17715                           ;CC2500_B1.c: 256: };
 17716                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17717  1FA6  319B  230C  319F   	fcall	_set_TimeoutCleared
 17718                           
 17719                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17720  1FA9  319D  25F5  319F   	fcall	_CC2500_WriteByte
 17721                           
 17722                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17723  1FAC  0020               	movlb	0	; select bank0
 17724  1FAD  0822               	movf	CC2500_WriteREG@value,w
 17725  1FAE  00A3               	movwf	??_CC2500_WriteREG
 17726  1FAF  0823               	movf	??_CC2500_WriteREG,w
 17727  1FB0  0021               	movlb	1	; select bank1
 17728  1FB1  00D0               	movwf	_SPI0Buffer^(0+128)
 17729                           
 17730                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17731  1FB2  319D  25F5         	fcall	_CC2500_WriteByte
 17732                           
 17733                           ;CC2500_B1.c: 262: RC4 = 1;
 17734  1FB4  0020               	movlb	0	; select bank0
 17735  1FB5  160E               	bsf	14,4	;volatile
 17736  1FB6  0008               	return
 17737  1FB7                     __end_of_CC2500_WriteREG:	
 17738                           
 17739                           	psect	text118
 17740  1B8A                     __ptext118:	
 17741 ;; *************** function _CC2500_FrequencyCabr *****************
 17742 ;; Defined at:
 17743 ;;		line 201 in file "../src/CC2500_B1.c"
 17744 ;; Parameters:    Size  Location     Type
 17745 ;;		None
 17746 ;; Auto vars:     Size  Location     Type
 17747 ;;		None
 17748 ;; Return value:  Size  Location     Type
 17749 ;;		None               void
 17750 ;; Registers used:
 17751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17752 ;; Tracked objects:
 17753 ;;		On entry : 0/0
 17754 ;;		On exit  : 0/0
 17755 ;;		Unchanged: 0/0
 17756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17761 ;;Total ram usage:        0 bytes
 17762 ;; Hardware stack levels used:    1
 17763 ;; Hardware stack levels required when called:    7
 17764 ;; This function calls:
 17765 ;;		_CC2500_WriteCommand
 17766 ;;		_DelayTime_1us
 17767 ;; This function is called by:
 17768 ;;		_CC2500_PowerOnInitial
 17769 ;; This function uses a non-reentrant model
 17770 ;;
 17771                           
 17772                           
 17773                           ;psect for function _CC2500_FrequencyCabr
 17774  1B8A                     _CC2500_FrequencyCabr:	
 17775                           
 17776                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17777                           
 17778                           ;incstack = 0
 17779                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17780  1B8A  3033               	movlw	51
 17781  1B8B  319E  260E  319B   	fcall	_CC2500_WriteCommand
 17782                           
 17783                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17784  1B8E  30E8               	movlw	232
 17785  1B8F  0020               	movlb	0	; select bank0
 17786  1B90  00A0               	movwf	DelayTime_1us@count
 17787  1B91  3003               	movlw	3
 17788  1B92  00A1               	movwf	DelayTime_1us@count+1
 17789  1B93  3190  2074         	fcall	_DelayTime_1us
 17790  1B95  0008               	return
 17791  1B96                     __end_of_CC2500_FrequencyCabr:	
 17792                           
 17793                           	psect	text119
 17794  1074                     __ptext119:	
 17795 ;; *************** function _DelayTime_1us *****************
 17796 ;; Defined at:
 17797 ;;		line 320 in file "../src/CC2500_B1.c"
 17798 ;; Parameters:    Size  Location     Type
 17799 ;;  count           2    0[BANK0 ] int 
 17800 ;; Auto vars:     Size  Location     Type
 17801 ;;  j               2    4[BANK0 ] unsigned int 
 17802 ;;  i               2    2[BANK0 ] unsigned int 
 17803 ;; Return value:  Size  Location     Type
 17804 ;;		None               void
 17805 ;; Registers used:
 17806 ;;		wreg, status,2
 17807 ;; Tracked objects:
 17808 ;;		On entry : 0/0
 17809 ;;		On exit  : 0/0
 17810 ;;		Unchanged: 0/0
 17811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17812 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;Total ram usage:        6 bytes
 17817 ;; Hardware stack levels used:    1
 17818 ;; Hardware stack levels required when called:    5
 17819 ;; This function calls:
 17820 ;;		Nothing
 17821 ;; This function is called by:
 17822 ;;		_CC2500_PowerRST
 17823 ;;		_CC2500_FrequencyCabr
 17824 ;; This function uses a non-reentrant model
 17825 ;;
 17826                           
 17827                           
 17828                           ;psect for function _DelayTime_1us
 17829  1074                     _DelayTime_1us:	
 17830                           
 17831                           ;CC2500_B1.c: 321: unsigned int i, j;
 17832                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17833                           
 17834                           ;incstack = 0
 17835                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17836  1074  3001               	movlw	1
 17837  1075  0020               	movlb	0	; select bank0
 17838  1076  00A2               	movwf	DelayTime_1us@i
 17839  1077  3000               	movlw	0
 17840  1078  00A3               	movwf	DelayTime_1us@i+1
 17841  1079                     l372:	
 17842  1079  0821               	movf	DelayTime_1us@count+1,w
 17843  107A  0223               	subwf	DelayTime_1us@i+1,w
 17844  107B  1D03               	skipz
 17845  107C  287F               	goto	u10625
 17846  107D  0820               	movf	DelayTime_1us@count,w
 17847  107E  0222               	subwf	DelayTime_1us@i,w
 17848  107F                     u10625:	
 17849  107F  1803               	btfsc	3,0
 17850  1080  0008               	return
 17851                           
 17852                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17853  1081  01A4               	clrf	DelayTime_1us@j
 17854  1082  01A5               	clrf	DelayTime_1us@j+1
 17855  1083  3000               	movlw	0
 17856  1084  0225               	subwf	DelayTime_1us@j+1,w
 17857  1085  3002               	movlw	2
 17858  1086  1903               	skipnz
 17859  1087  0224               	subwf	DelayTime_1us@j,w
 17860  1088  1803               	btfsc	3,0
 17861  1089  2895               	goto	l9525
 17862  108A                     l9523:	
 17863  108A  3001               	movlw	1
 17864  108B  07A4               	addwf	DelayTime_1us@j,f
 17865  108C  3000               	movlw	0
 17866  108D  3DA5               	addwfc	DelayTime_1us@j+1,f
 17867  108E  3000               	movlw	0
 17868  108F  0225               	subwf	DelayTime_1us@j+1,w
 17869  1090  3002               	movlw	2
 17870  1091  1903               	skipnz
 17871  1092  0224               	subwf	DelayTime_1us@j,w
 17872  1093  1C03               	skipc
 17873  1094  288A               	goto	l9523
 17874  1095                     l9525:	
 17875  1095  3001               	movlw	1
 17876  1096  07A2               	addwf	DelayTime_1us@i,f
 17877  1097  3000               	movlw	0
 17878  1098  3DA3               	addwfc	DelayTime_1us@i+1,f
 17879  1099  2879               	goto	l372
 17880  109A                     __end_of_DelayTime_1us:	
 17881                           
 17882                           	psect	text120
 17883  1B00                     __ptext120:	
 17884 ;; *************** function _CC2500_ClearTXFIFO *****************
 17885 ;; Defined at:
 17886 ;;		line 187 in file "../src/CC2500_B1.c"
 17887 ;; Parameters:    Size  Location     Type
 17888 ;;		None
 17889 ;; Auto vars:     Size  Location     Type
 17890 ;;		None
 17891 ;; Return value:  Size  Location     Type
 17892 ;;		None               void
 17893 ;; Registers used:
 17894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17895 ;; Tracked objects:
 17896 ;;		On entry : 0/0
 17897 ;;		On exit  : 0/0
 17898 ;;		Unchanged: 0/0
 17899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;Total ram usage:        0 bytes
 17905 ;; Hardware stack levels used:    1
 17906 ;; Hardware stack levels required when called:    7
 17907 ;; This function calls:
 17908 ;;		_CC2500_WriteCommand
 17909 ;; This function is called by:
 17910 ;;		_CC2500_PowerOnInitial
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           
 17915                           ;psect for function _CC2500_ClearTXFIFO
 17916  1B00                     _CC2500_ClearTXFIFO:	
 17917                           
 17918                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17919                           
 17920                           ;incstack = 0
 17921                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17922  1B00  303B               	movlw	59
 17923  1B01  319E  260E         	fcall	_CC2500_WriteCommand
 17924  1B03  0008               	return
 17925  1B04                     __end_of_CC2500_ClearTXFIFO:	
 17926                           
 17927                           	psect	text121
 17928  1AFC                     __ptext121:	
 17929 ;; *************** function _CC2500_ClearRXFIFO *****************
 17930 ;; Defined at:
 17931 ;;		line 194 in file "../src/CC2500_B1.c"
 17932 ;; Parameters:    Size  Location     Type
 17933 ;;		None
 17934 ;; Auto vars:     Size  Location     Type
 17935 ;;		None
 17936 ;; Return value:  Size  Location     Type
 17937 ;;		None               void
 17938 ;; Registers used:
 17939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17940 ;; Tracked objects:
 17941 ;;		On entry : 0/0
 17942 ;;		On exit  : 0/0
 17943 ;;		Unchanged: 0/0
 17944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17949 ;;Total ram usage:        0 bytes
 17950 ;; Hardware stack levels used:    1
 17951 ;; Hardware stack levels required when called:    7
 17952 ;; This function calls:
 17953 ;;		_CC2500_WriteCommand
 17954 ;; This function is called by:
 17955 ;;		_CC2500_PowerOnInitial
 17956 ;; This function uses a non-reentrant model
 17957 ;;
 17958                           
 17959                           
 17960                           ;psect for function _CC2500_ClearRXFIFO
 17961  1AFC                     _CC2500_ClearRXFIFO:	
 17962                           
 17963                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17964                           
 17965                           ;incstack = 0
 17966                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17967  1AFC  303A               	movlw	58
 17968  1AFD  319E  260E         	fcall	_CC2500_WriteCommand
 17969  1AFF  0008               	return
 17970  1B00                     __end_of_CC2500_ClearRXFIFO:	
 17971                           
 17972                           	psect	text122
 17973  1E0E                     __ptext122:	
 17974 ;; *************** function _CC2500_WriteCommand *****************
 17975 ;; Defined at:
 17976 ;;		line 285 in file "../src/CC2500_B1.c"
 17977 ;; Parameters:    Size  Location     Type
 17978 ;;  command         1    wreg     unsigned char 
 17979 ;; Auto vars:     Size  Location     Type
 17980 ;;  command         1    3[BANK0 ] unsigned char 
 17981 ;; Return value:  Size  Location     Type
 17982 ;;		None               void
 17983 ;; Registers used:
 17984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17985 ;; Tracked objects:
 17986 ;;		On entry : 0/0
 17987 ;;		On exit  : 0/0
 17988 ;;		Unchanged: 0/0
 17989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17994 ;;Total ram usage:        2 bytes
 17995 ;; Hardware stack levels used:    1
 17996 ;; Hardware stack levels required when called:    6
 17997 ;; This function calls:
 17998 ;;		_CC2500_WriteByte
 17999 ;;		_Timeout_Counter
 18000 ;;		_set_TimeoutCleared
 18001 ;; This function is called by:
 18002 ;;		_CC2500_TxData
 18003 ;;		_CC2500_ClearTXFIFO
 18004 ;;		_CC2500_ClearRXFIFO
 18005 ;;		_CC2500_FrequencyCabr
 18006 ;;		_CC2500_SIDLEMode
 18007 ;;		_setRF_Main
 18008 ;;		_RF_RxDisable
 18009 ;; This function uses a non-reentrant model
 18010 ;;
 18011                           
 18012                           
 18013                           ;psect for function _CC2500_WriteCommand
 18014  1E0E                     _CC2500_WriteCommand:	
 18015                           
 18016                           ;incstack = 0
 18017                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18018                           ;CC2500_WriteCommand@command stored from wreg
 18019  1E0E  0020               	movlb	0	; select bank0
 18020  1E0F  00A3               	movwf	CC2500_WriteCommand@command
 18021                           
 18022                           ;CC2500_B1.c: 286: RC4 = 0;
 18023  1E10  120E               	bcf	14,4	;volatile
 18024                           
 18025                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18026  1E11  0823               	movf	CC2500_WriteCommand@command,w
 18027  1E12  00A2               	movwf	??_CC2500_WriteCommand
 18028  1E13  0822               	movf	??_CC2500_WriteCommand,w
 18029  1E14  0021               	movlb	1	; select bank1
 18030  1E15  00D0               	movwf	_SPI0Buffer^(0+128)
 18031                           
 18032                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18033  1E16  2E1A               	goto	l9207
 18034  1E17                     l9205:	
 18035                           
 18036                           ;CC2500_B1.c: 290: Timeout_Counter();
 18037  1E17  319D  259E  319E   	fcall	_Timeout_Counter
 18038  1E1A                     l9207:	
 18039  1E1A  0020               	movlb	0	; select bank0
 18040  1E1B  1D0E               	btfss	14,2	;volatile
 18041  1E1C  2E20               	goto	l9211
 18042  1E1D  0021               	movlb	1	; select bank1
 18043  1E1E  1D2B               	btfss	(_myMain^(0+128)+11),2
 18044  1E1F  2E17               	goto	l9205
 18045  1E20                     l9211:	
 18046                           
 18047                           ;CC2500_B1.c: 291: };
 18048                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18049  1E20  319B  230C  319E   	fcall	_set_TimeoutCleared
 18050                           
 18051                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18052  1E23  319D  25F5         	fcall	_CC2500_WriteByte
 18053                           
 18054                           ;CC2500_B1.c: 295: RC4 = 1;
 18055  1E25  0020               	movlb	0	; select bank0
 18056  1E26  160E               	bsf	14,4	;volatile
 18057  1E27  0008               	return
 18058  1E28                     __end_of_CC2500_WriteCommand:	
 18059                           
 18060                           	psect	text123
 18061  1B0C                     __ptext123:	
 18062 ;; *************** function _set_TimeoutCleared *****************
 18063 ;; Defined at:
 18064 ;;		line 283 in file "../src/Main_B1.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;		None
 18067 ;; Auto vars:     Size  Location     Type
 18068 ;;		None
 18069 ;; Return value:  Size  Location     Type
 18070 ;;		None               void
 18071 ;; Registers used:
 18072 ;;		status,2
 18073 ;; Tracked objects:
 18074 ;;		On entry : 0/0
 18075 ;;		On exit  : 0/0
 18076 ;;		Unchanged: 0/0
 18077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;Total ram usage:        0 bytes
 18083 ;; Hardware stack levels used:    1
 18084 ;; Hardware stack levels required when called:    5
 18085 ;; This function calls:
 18086 ;;		Nothing
 18087 ;; This function is called by:
 18088 ;;		_CC2500_TxData
 18089 ;;		_CC2500_RxData
 18090 ;;		_CC2500_PowerRST
 18091 ;;		_CC2500_WriteREG
 18092 ;;		_CC2500_WriteCommand
 18093 ;;		_CC2500_ReadStatus
 18094 ;;		_getAD
 18095 ;;		_TouchPower
 18096 ;;		_CC2500_ReadREG
 18097 ;; This function uses a non-reentrant model
 18098 ;;
 18099                           
 18100                           
 18101                           ;psect for function _set_TimeoutCleared
 18102  1B0C                     _set_TimeoutCleared:	
 18103                           
 18104                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18105                           
 18106                           ;incstack = 0
 18107                           ; Regs used in _set_TimeoutCleared: [status,2]
 18108  1B0C  0021               	movlb	1	; select bank1
 18109  1B0D  112B               	bcf	(_myMain^(0+128)+11),2
 18110                           
 18111                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18112  1B0E  01AC               	clrf	(_myMain^(0+128)+12)
 18113  1B0F  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18114  1B10  0008               	return
 18115  1B11                     __end_of_set_TimeoutCleared:	
 18116                           
 18117                           	psect	text124
 18118  1D9E                     __ptext124:	
 18119 ;; *************** function _Timeout_Counter *****************
 18120 ;; Defined at:
 18121 ;;		line 274 in file "../src/Main_B1.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;		None
 18124 ;; Auto vars:     Size  Location     Type
 18125 ;;		None
 18126 ;; Return value:  Size  Location     Type
 18127 ;;		None               void
 18128 ;; Registers used:
 18129 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18130 ;; Tracked objects:
 18131 ;;		On entry : 0/0
 18132 ;;		On exit  : 0/0
 18133 ;;		Unchanged: 0/0
 18134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;Total ram usage:        0 bytes
 18140 ;; Hardware stack levels used:    1
 18141 ;; Hardware stack levels required when called:    5
 18142 ;; This function calls:
 18143 ;;		Nothing
 18144 ;; This function is called by:
 18145 ;;		_CC2500_TxData
 18146 ;;		_CC2500_RxData
 18147 ;;		_CC2500_PowerRST
 18148 ;;		_CC2500_WriteREG
 18149 ;;		_CC2500_WriteCommand
 18150 ;;		_CC2500_ReadStatus
 18151 ;;		_getAD
 18152 ;;		_TouchPower
 18153 ;;		_CC2500_ReadREG
 18154 ;; This function uses a non-reentrant model
 18155 ;;
 18156                           
 18157                           
 18158                           ;psect for function _Timeout_Counter
 18159  1D9E                     _Timeout_Counter:	
 18160                           
 18161                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18162                           
 18163                           ;incstack = 0
 18164                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18165  1D9E  3001               	movlw	1
 18166  1D9F  0021               	movlb	1	; select bank1
 18167  1DA0  07AC               	addwf	(_myMain^(0+128)+12),f
 18168  1DA1  3000               	movlw	0
 18169  1DA2  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18170                           
 18171                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
 18172  1DA3  300C               	movlw	12
 18173  1DA4  3EA0               	addlw	_myMain& (0+255)
 18174  1DA5  0086               	movwf	6
 18175  1DA6  0187               	clrf	7
 18176  1DA7  3F40               	moviw [0]fsr1
 18177  1DA8  3AA8               	xorlw	168
 18178  1DA9  1D03               	skipz
 18179  1DAA  2DAD               	goto	u9915
 18180  1DAB  3F41               	moviw [1]fsr1
 18181  1DAC  3A61               	xorlw	97
 18182  1DAD                     u9915:	
 18183  1DAD  1D03               	skipz
 18184  1DAE  0008               	return
 18185                           
 18186                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18187  1DAF  01AC               	clrf	(_myMain^(0+128)+12)
 18188  1DB0  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18189                           
 18190                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18191  1DB1  152B               	bsf	(_myMain^(0+128)+11),2
 18192  1DB2  0008               	return
 18193  1DB3                     __end_of_Timeout_Counter:	
 18194                           
 18195                           	psect	text125
 18196  1DF5                     __ptext125:	
 18197 ;; *************** function _CC2500_WriteByte *****************
 18198 ;; Defined at:
 18199 ;;		line 219 in file "../src/CC2500_B1.c"
 18200 ;; Parameters:    Size  Location     Type
 18201 ;;		None
 18202 ;; Auto vars:     Size  Location     Type
 18203 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18204 ;; Return value:  Size  Location     Type
 18205 ;;		None               void
 18206 ;; Registers used:
 18207 ;;		wreg, status,2, status,0
 18208 ;; Tracked objects:
 18209 ;;		On entry : 0/0
 18210 ;;		On exit  : 0/0
 18211 ;;		Unchanged: 0/0
 18212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18217 ;;Total ram usage:        2 bytes
 18218 ;; Hardware stack levels used:    1
 18219 ;; Hardware stack levels required when called:    5
 18220 ;; This function calls:
 18221 ;;		Nothing
 18222 ;; This function is called by:
 18223 ;;		_CC2500_TxData
 18224 ;;		_CC2500_RxData
 18225 ;;		_CC2500_PowerRST
 18226 ;;		_CC2500_WriteREG
 18227 ;;		_CC2500_WriteCommand
 18228 ;;		_CC2500_ReadStatus
 18229 ;;		_CC2500_ReadREG
 18230 ;; This function uses a non-reentrant model
 18231 ;;
 18232                           
 18233                           
 18234                           ;psect for function _CC2500_WriteByte
 18235  1DF5                     _CC2500_WriteByte:	
 18236                           
 18237                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18238                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18239                           
 18240                           ;incstack = 0
 18241                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18242  1DF5  0020               	movlb	0	; select bank0
 18243  1DF6  01A1               	clrf	CC2500_WriteByte@loop_a
 18244  1DF7                     L12:	
 18245  1DF7  3008               	movlw	8
 18246  1DF8  0221               	subwf	CC2500_WriteByte@loop_a,w
 18247  1DF9  1803               	btfsc	3,0
 18248  1DFA  0008               	return
 18249                           
 18250                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18251  1DFB  0021               	movlb	1	; select bank1
 18252  1DFC  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18253  1DFD  2E01               	goto	l328
 18254                           
 18255                           ;CC2500_B1.c: 223: RC0 = 1;
 18256  1DFE  0020               	movlb	0	; select bank0
 18257  1DFF  140E               	bsf	14,0	;volatile
 18258  1E00  2E03               	goto	l329
 18259  1E01                     l328:	
 18260                           
 18261                           ;CC2500_B1.c: 224: else
 18262                           ;CC2500_B1.c: 225: RC0 = 0;
 18263  1E01  0020               	movlb	0	; select bank0
 18264  1E02  100E               	bcf	14,0	;volatile
 18265  1E03                     l329:	
 18266                           
 18267                           ;CC2500_B1.c: 226: RC1 = 1;
 18268  1E03  148E               	bsf	14,1	;volatile
 18269                           
 18270                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18271  1E04  1003               	clrc
 18272  1E05  0021               	movlb	1	; select bank1
 18273  1E06  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18274                           
 18275                           ;CC2500_B1.c: 228: RC1 = 0;
 18276  1E07  0020               	movlb	0	; select bank0
 18277  1E08  108E               	bcf	14,1	;volatile
 18278  1E09  3001               	movlw	1
 18279  1E0A  00A0               	movwf	??_CC2500_WriteByte
 18280  1E0B  0820               	movf	??_CC2500_WriteByte,w
 18281  1E0C  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18282  1E0D  2DF7               	goto	L12
 18283  1E0E                     __end_of_CC2500_WriteByte:	
 18284                           
 18285                           	psect	text126
 18286  1424                     __ptext126:	
 18287 ;; *************** function _Buzzer_Main *****************
 18288 ;; Defined at:
 18289 ;;		line 46 in file "../src/Buzzer_B1.c"
 18290 ;; Parameters:    Size  Location     Type
 18291 ;;		None
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;		None
 18294 ;; Return value:  Size  Location     Type
 18295 ;;		None               void
 18296 ;; Registers used:
 18297 ;;		wreg, status,2, status,0
 18298 ;; Tracked objects:
 18299 ;;		On entry : 0/0
 18300 ;;		On exit  : 0/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;Total ram usage:        1 bytes
 18308 ;; Hardware stack levels used:    1
 18309 ;; Hardware stack levels required when called:    5
 18310 ;; This function calls:
 18311 ;;		Nothing
 18312 ;; This function is called by:
 18313 ;;		_main
 18314 ;; This function uses a non-reentrant model
 18315 ;;
 18316                           
 18317                           
 18318                           ;psect for function _Buzzer_Main
 18319  1424                     _Buzzer_Main:	
 18320                           
 18321                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18322                           
 18323                           ;incstack = 0
 18324                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18325  1424  0021               	movlb	1	; select bank1
 18326  1425  1CAE               	btfss	_Buz1^(0+128),1
 18327  1426  0008               	return
 18328                           
 18329                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18330  1427  3001               	movlw	1
 18331  1428  07AF               	addwf	(_Buz1^(0+128)+1),f
 18332  1429  3000               	movlw	0
 18333  142A  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18334                           
 18335                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18336  142B  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18337  142C  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18338  142D  1D03               	skipz
 18339  142E  2C31               	goto	u12005
 18340  142F  0834               	movf	(_Buz1^(0+128)+6),w
 18341  1430  022F               	subwf	(_Buz1^(0+128)+1),w
 18342  1431                     u12005:	
 18343  1431  1C03               	skipc
 18344  1432  0008               	return
 18345                           
 18346                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18347  1433  01AF               	clrf	(_Buz1^(0+128)+1)
 18348  1434  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18349                           
 18350                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18351  1435  12AE               	bcf	_Buz1^(0+128),5
 18352  1436  0020               	movlb	0	; select bank0
 18353  1437  1D8D               	btfss	13,3	;volatile
 18354  1438  2C3B               	goto	l10389
 18355  1439  0021               	movlb	1	; select bank1
 18356  143A  16AE               	bsf	_Buz1^(0+128),5
 18357  143B                     l10389:	
 18358                           
 18359                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18360  143B  0021               	movlb	1	; select bank1
 18361  143C  1AAE               	btfsc	_Buz1^(0+128),5
 18362  143D  2C67               	goto	l106
 18363                           
 18364                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18365  143E  08B1               	movf	(_Buz1^(0+128)+3),f
 18366  143F  1D03               	skipz
 18367  1440  2C63               	goto	l107
 18368                           
 18369                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18370  1441  1DAE               	btfss	_Buz1^(0+128),3
 18371  1442  2C51               	goto	l108
 18372                           
 18373                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18374  1443  11AE               	bcf	_Buz1^(0+128),3
 18375                           
 18376                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18377  1444  0832               	movf	(_Buz1^(0+128)+4),w
 18378  1445  0020               	movlb	0	; select bank0
 18379  1446  00A0               	movwf	??_Buzzer_Main
 18380  1447  0820               	movf	??_Buzzer_Main,w
 18381  1448  0021               	movlb	1	; select bank1
 18382  1449  00B1               	movwf	(_Buz1^(0+128)+3)
 18383                           
 18384                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18385  144A  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18386  144B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18387  144C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18388  144D  0836               	movf	(_Buz1^(0+128)+8),w
 18389  144E  01B4               	clrf	(_Buz1^(0+128)+6)
 18390  144F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18391                           
 18392                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18393  1450  0008               	return
 18394  1451                     l108:	
 18395  1451  1E2E               	btfss	_Buz1^(0+128),4
 18396  1452  2C61               	goto	l110
 18397                           
 18398                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18399  1453  122E               	bcf	_Buz1^(0+128),4
 18400                           
 18401                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18402  1454  0833               	movf	(_Buz1^(0+128)+5),w
 18403  1455  0020               	movlb	0	; select bank0
 18404  1456  00A0               	movwf	??_Buzzer_Main
 18405  1457  0820               	movf	??_Buzzer_Main,w
 18406  1458  0021               	movlb	1	; select bank1
 18407  1459  00B1               	movwf	(_Buz1^(0+128)+3)
 18408                           
 18409                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18410  145A  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18411  145B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18412  145C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18413  145D  0838               	movf	(_Buz1^(0+128)+10),w
 18414  145E  01B4               	clrf	(_Buz1^(0+128)+6)
 18415  145F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18416                           
 18417                           ;Buzzer_B1.c: 62: } else {
 18418  1460  0008               	return
 18419  1461                     l110:	
 18420                           
 18421                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18422  1461  10AE               	bcf	_Buz1^(0+128),1
 18423                           
 18424                           ;Buzzer_B1.c: 64: }
 18425                           ;Buzzer_B1.c: 65: } else {
 18426  1462  0008               	return
 18427  1463                     l107:	
 18428                           
 18429                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18430  1463  16AE               	bsf	_Buz1^(0+128),5
 18431                           
 18432                           ;Buzzer_B1.c: 68: RB3 = 1;
 18433  1464  0020               	movlb	0	; select bank0
 18434  1465  158D               	bsf	13,3	;volatile
 18435                           
 18436                           ;Buzzer_B1.c: 69: }
 18437                           ;Buzzer_B1.c: 70: } else {
 18438  1466  0008               	return
 18439  1467                     l106:	
 18440                           
 18441                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18442  1467  12AE               	bcf	_Buz1^(0+128),5
 18443                           
 18444                           ;Buzzer_B1.c: 73: RB3 = 0;
 18445  1468  0020               	movlb	0	; select bank0
 18446  1469  118D               	bcf	13,3	;volatile
 18447                           
 18448                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18449  146A  3001               	movlw	1
 18450  146B  0021               	movlb	1	; select bank1
 18451  146C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18452  146D  0008               	return
 18453  146E                     __end_of_Buzzer_Main:	
 18454                           
 18455                           	psect	text127
 18456  1AEA                     __ptext127:	
 18457 ;; *************** function _Buzzer_Initialization *****************
 18458 ;; Defined at:
 18459 ;;		line 11 in file "../src/Buzzer_B1.c"
 18460 ;; Parameters:    Size  Location     Type
 18461 ;;		None
 18462 ;; Auto vars:     Size  Location     Type
 18463 ;;		None
 18464 ;; Return value:  Size  Location     Type
 18465 ;;		None               void
 18466 ;; Registers used:
 18467 ;;		None
 18468 ;; Tracked objects:
 18469 ;;		On entry : 0/0
 18470 ;;		On exit  : 0/0
 18471 ;;		Unchanged: 0/0
 18472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18477 ;;Total ram usage:        0 bytes
 18478 ;; Hardware stack levels used:    1
 18479 ;; Hardware stack levels required when called:    5
 18480 ;; This function calls:
 18481 ;;		Nothing
 18482 ;; This function is called by:
 18483 ;;		_main
 18484 ;; This function uses a non-reentrant model
 18485 ;;
 18486                           
 18487                           
 18488                           ;psect for function _Buzzer_Initialization
 18489  1AEA                     _Buzzer_Initialization:	
 18490                           
 18491                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18492                           
 18493                           ;incstack = 0
 18494                           ; Regs used in _Buzzer_Initialization: []
 18495  1AEA  0021               	movlb	1	; select bank1
 18496  1AEB  142E               	bsf	_Buz1^(0+128),0
 18497  1AEC  0008               	return
 18498  1AED                     __end_of_Buzzer_Initialization:	
 18499                           
 18500                           	psect	intentry
 18501  0004                     __pintentry:	
 18502 ;; *************** function _ISR *****************
 18503 ;; Defined at:
 18504 ;;		line 108 in file "../src/MCU_B1.c"
 18505 ;; Parameters:    Size  Location     Type
 18506 ;;		None
 18507 ;; Auto vars:     Size  Location     Type
 18508 ;;		None
 18509 ;; Return value:  Size  Location     Type
 18510 ;;		None               void
 18511 ;; Registers used:
 18512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18513 ;; Tracked objects:
 18514 ;;		On entry : 0/0
 18515 ;;		On exit  : 0/0
 18516 ;;		Unchanged: 0/0
 18517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18520 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;Total ram usage:        1 bytes
 18523 ;; Hardware stack levels used:    1
 18524 ;; Hardware stack levels required when called:    4
 18525 ;; This function calls:
 18526 ;;		_IOC_ISR
 18527 ;;		_TMR1_ISR
 18528 ;; This function is called by:
 18529 ;;		Interrupt level 1
 18530 ;; This function uses a non-reentrant model
 18531 ;;
 18532                           
 18533  0004                     _ISR:	
 18534                           
 18535                           ;incstack = 0
 18536                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18537  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18538  0005  3180               	pagesel	$
 18539  0006  0020               	movlb	0	; select bank0
 18540  0007  087F               	movf	127,w
 18541  0008  00F4               	movwf	??_ISR
 18542                           
 18543                           ;MCU_B1.c: 110: IOC_ISR();
 18544  0009  319B  23F7  3180   	fcall	_IOC_ISR
 18545                           
 18546                           ;MCU_B1.c: 112: ;;
 18547                           ;MCU_B1.c: 114: TMR1_ISR();
 18548  000C  3190  209A         	fcall	_TMR1_ISR
 18549  000E  0874               	movf	??_ISR,w
 18550  000F  0020               	movlb	0	; select bank0
 18551  0010  00FF               	movwf	127
 18552  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18553  0012  0009               	retfie
 18554  0013                     __end_of_ISR:	
 18555                           
 18556                           	psect	text129
 18557  109A                     __ptext129:	
 18558 ;; *************** function _TMR1_ISR *****************
 18559 ;; Defined at:
 18560 ;;		line 210 in file "../src/MCU_B1.c"
 18561 ;; Parameters:    Size  Location     Type
 18562 ;;		None
 18563 ;; Auto vars:     Size  Location     Type
 18564 ;;		None
 18565 ;; Return value:  Size  Location     Type
 18566 ;;		None               void
 18567 ;; Registers used:
 18568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18569 ;; Tracked objects:
 18570 ;;		On entry : 0/0
 18571 ;;		On exit  : 0/0
 18572 ;;		Unchanged: 0/0
 18573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;Total ram usage:        0 bytes
 18579 ;; Hardware stack levels used:    1
 18580 ;; Hardware stack levels required when called:    2
 18581 ;; This function calls:
 18582 ;;		_setDimmerLights_IntrControl
 18583 ;; This function is called by:
 18584 ;;		_ISR
 18585 ;; This function uses a non-reentrant model
 18586 ;;
 18587                           
 18588                           
 18589                           ;psect for function _TMR1_ISR
 18590  109A                     _TMR1_ISR:	
 18591                           
 18592                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18593                           
 18594                           ;incstack = 0
 18595                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18596  109A  0021               	movlb	1	; select bank1
 18597  109B  1C11               	btfss	17,0	;volatile
 18598  109C  0008               	return
 18599  109D  0020               	movlb	0	; select bank0
 18600  109E  1C11               	btfss	17,0	;volatile
 18601  109F  0008               	return
 18602                           
 18603                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18604  10A0  30FA               	movlw	250
 18605  10A1  0097               	movwf	23	;volatile
 18606                           
 18607                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18608  10A2  3038               	movlw	56
 18609  10A3  0096               	movwf	22	;volatile
 18610                           
 18611                           ;MCU_B1.c: 215: TMR1IF = 0;
 18612  10A4  1011               	bcf	17,0	;volatile
 18613                           
 18614                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18615  10A5  3001               	movlw	1
 18616  10A6  3183  2364  3190   	fcall	_setDimmerLights_IntrControl
 18617                           
 18618                           ;MCU_B1.c: 225: setDimmerLights_IntrControl(2);
 18619  10A9  3002               	movlw	2
 18620  10AA  3183  2364  3190   	fcall	_setDimmerLights_IntrControl
 18621                           
 18622                           ;MCU_B1.c: 236: Timer1.Count++;
 18623  10AD  3001               	movlw	1
 18624  10AE  0022               	movlb	2	; select bank2
 18625  10AF  07A1               	addwf	(_Timer1^(0+256)+1),f
 18626  10B0  3000               	movlw	0
 18627  10B1  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18628                           
 18629                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18630  10B2  3001               	movlw	1
 18631  10B3  3E20               	addlw	_Timer1& (0+255)
 18632  10B4  0086               	movwf	6
 18633  10B5  3001               	movlw	1	; select bank2/3
 18634  10B6  0087               	movwf	7
 18635  10B7  3F40               	moviw [0]fsr1
 18636  10B8  3A64               	xorlw	100
 18637  10B9  1D03               	skipz
 18638  10BA  28BD               	goto	u801_25
 18639  10BB  3F41               	moviw [1]fsr1
 18640  10BC  3A00               	xorlw	0
 18641  10BD                     u801_25:	
 18642  10BD  1D03               	skipz
 18643  10BE  0008               	return
 18644                           
 18645                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18646  10BF  01A1               	clrf	(_Timer1^(0+256)+1)
 18647  10C0  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18648                           
 18649                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18650  10C1  1420               	bsf	_Timer1^(0+256),0
 18651  10C2  0008               	return
 18652  10C3                     __end_of_TMR1_ISR:	
 18653                           
 18654                           	psect	text130
 18655  0364                     __ptext130:	
 18656 ;; *************** function _setDimmerLights_IntrControl *****************
 18657 ;; Defined at:
 18658 ;;		line 96 in file "../src/Dimmer_B1.c"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;  lights          1    wreg     unsigned char 
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;  lights          1    3[COMMON] unsigned char 
 18663 ;; Return value:  Size  Location     Type
 18664 ;;		None               void
 18665 ;; Registers used:
 18666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18676 ;;Total ram usage:        2 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:    1
 18679 ;; This function calls:
 18680 ;;		_DimmerIntrPointSelect
 18681 ;; This function is called by:
 18682 ;;		_TMR1_ISR
 18683 ;; This function uses a non-reentrant model
 18684 ;;
 18685                           
 18686                           
 18687                           ;psect for function _setDimmerLights_IntrControl
 18688  0364                     _setDimmerLights_IntrControl:	
 18689                           
 18690                           ;incstack = 0
 18691                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18692                           ;setDimmerLights_IntrControl@lights stored from wreg
 18693  0364  00F3               	movwf	setDimmerLights_IntrControl@lights
 18694                           
 18695                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18696  0365  0873               	movf	setDimmerLights_IntrControl@lights,w
 18697  0366  319C  2458  3183   	fcall	_DimmerIntrPointSelect
 18698                           
 18699                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18700  0369  0876               	movf	_DimmerLightsIntr,w
 18701  036A  3E02               	addlw	2
 18702  036B  0086               	movwf	6
 18703  036C  3001               	movlw	1	; select bank2/3
 18704  036D  0087               	movwf	7
 18705  036E  1D01               	btfss	1,2
 18706  036F  2B8E               	goto	i1l7299
 18707                           
 18708                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18709  0370  3001               	movlw	1
 18710  0371  00F2               	movwf	??_setDimmerLights_IntrControl
 18711  0372  0876               	movf	_DimmerLightsIntr,w
 18712  0373  3E03               	addlw	3
 18713  0374  0086               	movwf	6
 18714  0375  3001               	movlw	1	; select bank2/3
 18715  0376  0087               	movwf	7
 18716  0377  0872               	movf	??_setDimmerLights_IntrControl,w
 18717  0378  0781               	addwf	1,f
 18718                           
 18719                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18720  0379  0876               	movf	_DimmerLightsIntr,w
 18721  037A  3E03               	addlw	3
 18722  037B  0086               	movwf	6
 18723  037C  3001               	movlw	1	; select bank2/3
 18724  037D  0087               	movwf	7
 18725  037E  3039               	movlw	57
 18726  037F  0201               	subwf	1,w
 18727  0380  1C03               	skipc
 18728  0381  2B8E               	goto	i1l7299
 18729                           
 18730                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18731  0382  0876               	movf	_DimmerLightsIntr,w
 18732  0383  3E03               	addlw	3
 18733  0384  0086               	movwf	6
 18734  0385  3001               	movlw	1	; select bank2/3
 18735  0386  0087               	movwf	7
 18736  0387  0181               	clrf	1
 18737                           
 18738                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18739  0388  0876               	movf	_DimmerLightsIntr,w
 18740  0389  3E02               	addlw	2
 18741  038A  0086               	movwf	6
 18742  038B  3001               	movlw	1	; select bank2/3
 18743  038C  0087               	movwf	7
 18744  038D  1101               	bcf	1,2
 18745  038E                     i1l7299:	
 18746                           
 18747                           ;Dimmer_B1.c: 241: }
 18748                           ;Dimmer_B1.c: 242: }
 18749                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18750  038E  0A76               	incf	_DimmerLightsIntr,w
 18751  038F  0086               	movwf	6
 18752  0390  3001               	movlw	1	; select bank2/3
 18753  0391  0087               	movwf	7
 18754  0392  1C01               	btfss	1,0
 18755  0393  2BC5               	goto	i1l7315
 18756                           
 18757                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18758  0394  0876               	movf	_DimmerLightsIntr,w
 18759  0395  3E03               	addlw	3
 18760  0396  0086               	movwf	6
 18761  0397  3001               	movlw	1	; select bank2/3
 18762  0398  0087               	movwf	7
 18763  0399  0876               	movf	_DimmerLightsIntr,w
 18764  039A  3E04               	addlw	4
 18765  039B  0084               	movwf	4
 18766  039C  3001               	movlw	1	; select bank2/3
 18767  039D  0085               	movwf	5
 18768  039E  0800               	movf	0,w
 18769  039F  0201               	subwf	1,w
 18770  03A0  1C03               	skipc
 18771  03A1  0008               	return
 18772                           
 18773                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18774  03A2  0A76               	incf	_DimmerLightsIntr,w
 18775  03A3  0086               	movwf	6
 18776  03A4  3001               	movlw	1	; select bank2/3
 18777  03A5  0087               	movwf	7
 18778  03A6  1001               	bcf	1,0
 18779                           
 18780                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18781  03A7  0A76               	incf	_DimmerLightsIntr,w
 18782  03A8  0086               	movwf	6
 18783  03A9  3001               	movlw	1	; select bank2/3
 18784  03AA  0087               	movwf	7
 18785  03AB  1581               	bsf	1,3
 18786                           
 18787                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18788  03AC  0876               	movf	_DimmerLightsIntr,w
 18789  03AD  0086               	movwf	6
 18790  03AE  3001               	movlw	1	; select bank2/3
 18791  03AF  0087               	movwf	7
 18792  03B0  1C01               	btfss	1,0
 18793  03B1  0008               	return
 18794                           
 18795                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18796  03B2  0876               	movf	_DimmerLightsIntr,w
 18797  03B3  0086               	movwf	6
 18798  03B4  3001               	movlw	1	; select bank2/3
 18799  03B5  0087               	movwf	7
 18800  03B6  1001               	bcf	1,0
 18801                           
 18802                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18803  03B7  0873               	movf	setDimmerLights_IntrControl@lights,w
 18804  03B8  3A01               	xorlw	1
 18805  03B9  1D03               	skipz
 18806  03BA  2BBE               	goto	i1l7311
 18807                           
 18808                           ;Dimmer_B1.c: 253: RA7 = 0;
 18809  03BB  0020               	movlb	0	; select bank0
 18810  03BC  138C               	bcf	12,7	;volatile
 18811                           
 18812                           ;Dimmer_B1.c: 255: }
 18813  03BD  0008               	return
 18814  03BE                     i1l7311:	
 18815                           
 18816                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 18817  03BE  0873               	movf	setDimmerLights_IntrControl@lights,w
 18818  03BF  3A02               	xorlw	2
 18819  03C0  1D03               	skipz
 18820  03C1  0008               	return
 18821                           
 18822                           ;Dimmer_B1.c: 259: RB4 = 0;
 18823  03C2  0020               	movlb	0	; select bank0
 18824  03C3  120D               	bcf	13,4	;volatile
 18825                           
 18826                           ;Dimmer_B1.c: 260: }
 18827                           ;Dimmer_B1.c: 262: }
 18828                           ;Dimmer_B1.c: 263: }
 18829                           ;Dimmer_B1.c: 264: } else {
 18830  03C4  0008               	return
 18831  03C5                     i1l7315:	
 18832                           
 18833                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18834  03C5  0A76               	incf	_DimmerLightsIntr,w
 18835  03C6  0086               	movwf	6
 18836  03C7  3001               	movlw	1	; select bank2/3
 18837  03C8  0087               	movwf	7
 18838  03C9  1D81               	btfss	1,3
 18839  03CA  0008               	return
 18840                           
 18841                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18842  03CB  0A76               	incf	_DimmerLightsIntr,w
 18843  03CC  0086               	movwf	6
 18844  03CD  3001               	movlw	1	; select bank2/3
 18845  03CE  0087               	movwf	7
 18846  03CF  1181               	bcf	1,3
 18847                           
 18848                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18849  03D0  3001               	movlw	1
 18850  03D1  00F2               	movwf	??_setDimmerLights_IntrControl
 18851  03D2  0876               	movf	_DimmerLightsIntr,w
 18852  03D3  3E05               	addlw	5
 18853  03D4  0086               	movwf	6
 18854  03D5  3001               	movlw	1	; select bank2/3
 18855  03D6  0087               	movwf	7
 18856  03D7  0872               	movf	??_setDimmerLights_IntrControl,w
 18857  03D8  0781               	addwf	1,f
 18858                           
 18859                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18860  03D9  0876               	movf	_DimmerLightsIntr,w
 18861  03DA  3E05               	addlw	5
 18862  03DB  0086               	movwf	6
 18863  03DC  3001               	movlw	1	; select bank2/3
 18864  03DD  0087               	movwf	7
 18865  03DE  0876               	movf	_DimmerLightsIntr,w
 18866  03DF  3E08               	addlw	8
 18867  03E0  0084               	movwf	4
 18868  03E1  3001               	movlw	1	; select bank2/3
 18869  03E2  0085               	movwf	5
 18870  03E3  0800               	movf	0,w
 18871  03E4  0201               	subwf	1,w
 18872  03E5  1C03               	skipc
 18873  03E6  2C29               	goto	i1l7341
 18874                           
 18875                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18876  03E7  0876               	movf	_DimmerLightsIntr,w
 18877  03E8  3E05               	addlw	5
 18878  03E9  0086               	movwf	6
 18879  03EA  3001               	movlw	1	; select bank2/3
 18880  03EB  0087               	movwf	7
 18881  03EC  0181               	clrf	1
 18882                           
 18883                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18884  03ED  0A76               	incf	_DimmerLightsIntr,w
 18885  03EE  0086               	movwf	6
 18886  03EF  3001               	movlw	1	; select bank2/3
 18887  03F0  0087               	movwf	7
 18888  03F1  1F01               	btfss	1,6
 18889  03F2  0008               	return
 18890                           
 18891                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18892  03F3  0A76               	incf	_DimmerLightsIntr,w
 18893  03F4  0086               	movwf	6
 18894  03F5  3001               	movlw	1	; select bank2/3
 18895  03F6  0087               	movwf	7
 18896  03F7  1B81               	btfsc	1,7
 18897  03F8  2C12               	goto	i1l7335
 18898                           
 18899                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18900  03F9  0876               	movf	_DimmerLightsIntr,w
 18901  03FA  3E04               	addlw	4
 18902  03FB  0086               	movwf	6
 18903  03FC  3001               	movlw	1	; select bank2/3
 18904  03FD  0087               	movwf	7
 18905  03FE  3038               	movlw	56
 18906  03FF  0201               	subwf	1,w
 18907  0400  1803               	skipnc
 18908  0401  2C0C               	goto	i1l7333
 18909                           
 18910                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18911  0402  3001               	movlw	1
 18912  0403  00F2               	movwf	??_setDimmerLights_IntrControl
 18913  0404  0876               	movf	_DimmerLightsIntr,w
 18914  0405  3E04               	addlw	4
 18915  0406  0086               	movwf	6
 18916  0407  3001               	movlw	1	; select bank2/3
 18917  0408  0087               	movwf	7
 18918  0409  0872               	movf	??_setDimmerLights_IntrControl,w
 18919  040A  0781               	addwf	1,f
 18920                           
 18921                           ;Dimmer_B1.c: 274: } else {
 18922  040B  0008               	return
 18923  040C                     i1l7333:	
 18924                           
 18925                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18926  040C  0A76               	incf	_DimmerLightsIntr,w
 18927  040D  0086               	movwf	6
 18928  040E  3001               	movlw	1	; select bank2/3
 18929  040F  0087               	movwf	7
 18930  0410  1781               	bsf	1,7
 18931                           
 18932                           ;Dimmer_B1.c: 276: }
 18933                           ;Dimmer_B1.c: 277: } else {
 18934  0411  0008               	return
 18935  0412                     i1l7335:	
 18936                           
 18937                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18938  0412  0876               	movf	_DimmerLightsIntr,w
 18939  0413  3E04               	addlw	4
 18940  0414  0086               	movwf	6
 18941  0415  3001               	movlw	1	; select bank2/3
 18942  0416  0087               	movwf	7
 18943  0417  300D               	movlw	13
 18944  0418  0201               	subwf	1,w
 18945  0419  1C03               	skipc
 18946  041A  2C23               	goto	i1l7339
 18947                           
 18948                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18949  041B  0876               	movf	_DimmerLightsIntr,w
 18950  041C  3E04               	addlw	4
 18951  041D  0086               	movwf	6
 18952  041E  3001               	movlw	1	; select bank2/3
 18953  041F  0087               	movwf	7
 18954  0420  3001               	movlw	1
 18955  0421  0281               	subwf	1,f
 18956                           
 18957                           ;Dimmer_B1.c: 280: } else
 18958  0422  0008               	return
 18959  0423                     i1l7339:	
 18960                           
 18961                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18962  0423  0A76               	incf	_DimmerLightsIntr,w
 18963  0424  0086               	movwf	6
 18964  0425  3001               	movlw	1	; select bank2/3
 18965  0426  0087               	movwf	7
 18966  0427  1381               	bcf	1,7
 18967                           
 18968                           ;Dimmer_B1.c: 282: }
 18969                           ;Dimmer_B1.c: 283: }
 18970                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18971  0428  0008               	return
 18972  0429                     i1l7341:	
 18973  0429  0876               	movf	_DimmerLightsIntr,w
 18974  042A  3E02               	addlw	2
 18975  042B  0086               	movwf	6
 18976  042C  3001               	movlw	1	; select bank2/3
 18977  042D  0087               	movwf	7
 18978  042E  1C01               	btfss	1,0
 18979  042F  0008               	return
 18980                           
 18981                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18982  0430  0876               	movf	_DimmerLightsIntr,w
 18983  0431  3E04               	addlw	4
 18984  0432  0086               	movwf	6
 18985  0433  3001               	movlw	1	; select bank2/3
 18986  0434  0087               	movwf	7
 18987  0435  0876               	movf	_DimmerLightsIntr,w
 18988  0436  3E06               	addlw	6
 18989  0437  0084               	movwf	4
 18990  0438  3001               	movlw	1	; select bank2/3
 18991  0439  0085               	movwf	5
 18992  043A  0800               	movf	0,w
 18993  043B  0201               	subwf	1,w
 18994  043C  1803               	skipnc
 18995  043D  2C48               	goto	i1l7347
 18996                           
 18997                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 18998  043E  3001               	movlw	1
 18999  043F  00F2               	movwf	??_setDimmerLights_IntrControl
 19000  0440  0876               	movf	_DimmerLightsIntr,w
 19001  0441  3E04               	addlw	4
 19002  0442  0086               	movwf	6
 19003  0443  3001               	movlw	1	; select bank2/3
 19004  0444  0087               	movwf	7
 19005  0445  0872               	movf	??_setDimmerLights_IntrControl,w
 19006  0446  0781               	addwf	1,f
 19007                           
 19008                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19009  0447  0008               	return
 19010  0448                     i1l7347:	
 19011  0448  0876               	movf	_DimmerLightsIntr,w
 19012  0449  3E06               	addlw	6
 19013  044A  0086               	movwf	6
 19014  044B  3001               	movlw	1	; select bank2/3
 19015  044C  0087               	movwf	7
 19016  044D  0876               	movf	_DimmerLightsIntr,w
 19017  044E  3E04               	addlw	4
 19018  044F  0084               	movwf	4
 19019  0450  3001               	movlw	1	; select bank2/3
 19020  0451  0085               	movwf	5
 19021  0452  0800               	movf	0,w
 19022  0453  0201               	subwf	1,w
 19023  0454  1803               	skipnc
 19024  0455  2C5E               	goto	i1l7351
 19025                           
 19026                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19027  0456  0876               	movf	_DimmerLightsIntr,w
 19028  0457  3E04               	addlw	4
 19029  0458  0086               	movwf	6
 19030  0459  3001               	movlw	1	; select bank2/3
 19031  045A  0087               	movwf	7
 19032  045B  3001               	movlw	1
 19033  045C  0281               	subwf	1,f
 19034                           
 19035                           ;Dimmer_B1.c: 289: } else {
 19036  045D  0008               	return
 19037  045E                     i1l7351:	
 19038                           
 19039                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19040  045E  0876               	movf	_DimmerLightsIntr,w
 19041  045F  3E02               	addlw	2
 19042  0460  0086               	movwf	6
 19043  0461  3001               	movlw	1	; select bank2/3
 19044  0462  0087               	movwf	7
 19045  0463  1001               	bcf	1,0
 19046  0464  0008               	return
 19047  0465                     __end_of_setDimmerLights_IntrControl:	
 19048                           
 19049                           	psect	text131
 19050  1C58                     __ptext131:	
 19051 ;; *************** function _DimmerIntrPointSelect *****************
 19052 ;; Defined at:
 19053 ;;		line 74 in file "../src/Dimmer_B1.c"
 19054 ;; Parameters:    Size  Location     Type
 19055 ;;  lights          1    wreg     unsigned char 
 19056 ;; Auto vars:     Size  Location     Type
 19057 ;;  lights          1    1[COMMON] unsigned char 
 19058 ;; Return value:  Size  Location     Type
 19059 ;;		None               void
 19060 ;; Registers used:
 19061 ;;		wreg
 19062 ;; Tracked objects:
 19063 ;;		On entry : 0/0
 19064 ;;		On exit  : 0/0
 19065 ;;		Unchanged: 0/0
 19066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19069 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;Total ram usage:        2 bytes
 19072 ;; Hardware stack levels used:    1
 19073 ;; This function calls:
 19074 ;;		Nothing
 19075 ;; This function is called by:
 19076 ;;		_setDimmerLights_IntrControl
 19077 ;; This function uses a non-reentrant model
 19078 ;;
 19079                           
 19080                           
 19081                           ;psect for function _DimmerIntrPointSelect
 19082  1C58                     _DimmerIntrPointSelect:	
 19083                           
 19084                           ;incstack = 0
 19085                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19086                           ;DimmerIntrPointSelect@lights stored from wreg
 19087  1C58  00F1               	movwf	DimmerIntrPointSelect@lights
 19088                           
 19089                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19090  1C59  0871               	movf	DimmerIntrPointSelect@lights,w
 19091  1C5A  3A01               	xorlw	1
 19092  1C5B  1D03               	skipz
 19093  1C5C  2C61               	goto	i1l737
 19094                           
 19095                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19096  1C5D  3055               	movlw	_DimmerLights1& (0+255)
 19097  1C5E  00F0               	movwf	??_DimmerIntrPointSelect
 19098  1C5F  0870               	movf	??_DimmerIntrPointSelect,w
 19099  1C60  00F6               	movwf	_DimmerLightsIntr
 19100  1C61                     i1l737:	
 19101                           
 19102                           ;Dimmer_B1.c: 78: }
 19103                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19104  1C61  0871               	movf	DimmerIntrPointSelect@lights,w
 19105  1C62  3A02               	xorlw	2
 19106  1C63  1D03               	skipz
 19107  1C64  0008               	return
 19108                           
 19109                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19110  1C65  30BE               	movlw	_DimmerLights2& (0+255)
 19111  1C66  00F0               	movwf	??_DimmerIntrPointSelect
 19112  1C67  0870               	movf	??_DimmerIntrPointSelect,w
 19113  1C68  00F6               	movwf	_DimmerLightsIntr
 19114  1C69  0008               	return
 19115  1C6A                     __end_of_DimmerIntrPointSelect:	
 19116                           
 19117                           	psect	text132
 19118  1BF7                     __ptext132:	
 19119 ;; *************** function _IOC_ISR *****************
 19120 ;; Defined at:
 19121 ;;		line 401 in file "../src/MCU_B1.c"
 19122 ;; Parameters:    Size  Location     Type
 19123 ;;		None
 19124 ;; Auto vars:     Size  Location     Type
 19125 ;;		None
 19126 ;; Return value:  Size  Location     Type
 19127 ;;		None               void
 19128 ;; Registers used:
 19129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19130 ;; Tracked objects:
 19131 ;;		On entry : 0/0
 19132 ;;		On exit  : 0/0
 19133 ;;		Unchanged: 0/0
 19134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19139 ;;Total ram usage:        0 bytes
 19140 ;; Hardware stack levels used:    1
 19141 ;; Hardware stack levels required when called:    3
 19142 ;; This function calls:
 19143 ;;		_setDimmerReClock
 19144 ;; This function is called by:
 19145 ;;		_ISR
 19146 ;; This function uses a non-reentrant model
 19147 ;;
 19148                           
 19149                           
 19150                           ;psect for function _IOC_ISR
 19151  1BF7                     _IOC_ISR:	
 19152                           
 19153                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19154                           
 19155                           ;incstack = 0
 19156                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19157  1BF7  1D8B               	btfss	11,3	;volatile
 19158  1BF8  0008               	return
 19159  1BF9  1C0B               	btfss	11,0	;volatile
 19160  1BFA  0008               	return
 19161  1BFB  0027               	movlb	7	; select bank7
 19162  1BFC  1D16               	btfss	22,2	;volatile
 19163  1BFD  0008               	return
 19164                           
 19165                           ;MCU_B1.c: 403: IOCBF2 = 0;
 19166  1BFE  1116               	bcf	22,2	;volatile
 19167                           
 19168                           ;MCU_B1.c: 404: IOCIF = 0;
 19169  1BFF  100B               	bcf	11,0	;volatile
 19170                           
 19171                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 19172  1C00  0021               	movlb	1	; select bank1
 19173  1C01  1C20               	btfss	_myMain^(0+128),0
 19174  1C02  0008               	return
 19175                           
 19176                           ;MCU_B1.c: 408: setDimmerReClock();
 19177  1C03  319B  232A         	fcall	_setDimmerReClock
 19178  1C05  0008               	return
 19179  1C06                     __end_of_IOC_ISR:	
 19180                           
 19181                           	psect	text133
 19182  1B2A                     __ptext133:	
 19183 ;; *************** function _setDimmerReClock *****************
 19184 ;; Defined at:
 19185 ;;		line 244 in file "../src/MCU_B1.c"
 19186 ;; Parameters:    Size  Location     Type
 19187 ;;		None
 19188 ;; Auto vars:     Size  Location     Type
 19189 ;;		None
 19190 ;; Return value:  Size  Location     Type
 19191 ;;		None               void
 19192 ;; Registers used:
 19193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19194 ;; Tracked objects:
 19195 ;;		On entry : 0/0
 19196 ;;		On exit  : 0/0
 19197 ;;		Unchanged: 0/0
 19198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19203 ;;Total ram usage:        0 bytes
 19204 ;; Hardware stack levels used:    1
 19205 ;; Hardware stack levels required when called:    2
 19206 ;; This function calls:
 19207 ;;		_setDimmerLights_IntrIOC_GO
 19208 ;; This function is called by:
 19209 ;;		_IOC_ISR
 19210 ;; This function uses a non-reentrant model
 19211 ;;
 19212                           
 19213                           
 19214                           ;psect for function _setDimmerReClock
 19215  1B2A                     _setDimmerReClock:	
 19216                           
 19217                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 19218                           
 19219                           ;incstack = 0
 19220                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19221  1B2A  3001               	movlw	1
 19222  1B2B  3192  22AC  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19223                           
 19224                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 19225  1B2E  3002               	movlw	2
 19226  1B2F  3192  22AC         	fcall	_setDimmerLights_IntrIOC_GO
 19227  1B31  0008               	return
 19228  1B32                     __end_of_setDimmerReClock:	
 19229                           
 19230                           	psect	text134
 19231  12AC                     __ptext134:	
 19232 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19233 ;; Defined at:
 19234 ;;		line 28 in file "../src/Dimmer_B1.c"
 19235 ;; Parameters:    Size  Location     Type
 19236 ;;  lights          1    wreg     unsigned char 
 19237 ;; Auto vars:     Size  Location     Type
 19238 ;;  lights          1    2[COMMON] unsigned char 
 19239 ;; Return value:  Size  Location     Type
 19240 ;;		None               void
 19241 ;; Registers used:
 19242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19243 ;; Tracked objects:
 19244 ;;		On entry : 0/0
 19245 ;;		On exit  : 0/0
 19246 ;;		Unchanged: 0/0
 19247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19252 ;;Total ram usage:        1 bytes
 19253 ;; Hardware stack levels used:    1
 19254 ;; Hardware stack levels required when called:    1
 19255 ;; This function calls:
 19256 ;;		_DimmerIntrIOCPointSelect
 19257 ;; This function is called by:
 19258 ;;		_setDimmerReClock
 19259 ;; This function uses a non-reentrant model
 19260 ;;
 19261                           
 19262                           
 19263                           ;psect for function _setDimmerLights_IntrIOC_GO
 19264  12AC                     _setDimmerLights_IntrIOC_GO:	
 19265                           
 19266                           ;incstack = 0
 19267                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19268                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19269  12AC  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19270                           
 19271                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19272  12AD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19273  12AE  319D  2589  3192   	fcall	_DimmerIntrIOCPointSelect
 19274                           
 19275                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19276  12B1  0021               	movlb	1	; select bank1
 19277  12B2  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19278  12B3  3E02               	addlw	2
 19279  12B4  0086               	movwf	6
 19280  12B5  3001               	movlw	1	; select bank2/3
 19281  12B6  0087               	movwf	7
 19282  12B7  1901               	btfsc	1,2
 19283  12B8  0008               	return
 19284  12B9  0020               	movlb	0	; select bank0
 19285  12BA  1D0D               	btfss	13,2	;volatile
 19286  12BB  0008               	return
 19287                           
 19288                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19289  12BC  0021               	movlb	1	; select bank1
 19290  12BD  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19291  12BE  3E02               	addlw	2
 19292  12BF  0086               	movwf	6
 19293  12C0  3001               	movlw	1	; select bank2/3
 19294  12C1  0087               	movwf	7
 19295  12C2  1501               	bsf	1,2
 19296                           
 19297                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19298  12C3  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19299  12C4  0086               	movwf	6
 19300  12C5  3001               	movlw	1	; select bank2/3
 19301  12C6  0087               	movwf	7
 19302  12C7  1401               	bsf	1,0
 19303                           
 19304                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19305  12C8  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19306  12C9  0086               	movwf	6
 19307  12CA  3001               	movlw	1	; select bank2/3
 19308  12CB  0087               	movwf	7
 19309  12CC  1481               	bsf	1,1
 19310                           
 19311                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19312  12CD  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19313                           
 19314                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19315  12CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19316  12CF  0086               	movwf	6
 19317  12D0  3001               	movlw	1	; select bank2/3
 19318  12D1  0087               	movwf	7
 19319  12D2  1D01               	btfss	1,2
 19320  12D3  0008               	return
 19321                           
 19322                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19323  12D4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19324  12D5  0086               	movwf	6
 19325  12D6  3001               	movlw	1	; select bank2/3
 19326  12D7  0087               	movwf	7
 19327  12D8  1401               	bsf	1,0
 19328                           
 19329                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19330  12D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19331  12DA  3A01               	xorlw	1
 19332  12DB  1D03               	skipz
 19333  12DC  2AE0               	goto	i1l6937
 19334                           
 19335                           ;Dimmer_B1.c: 56: RA7 = 1;
 19336  12DD  0020               	movlb	0	; select bank0
 19337  12DE  178C               	bsf	12,7	;volatile
 19338                           
 19339                           ;Dimmer_B1.c: 58: }
 19340  12DF  0008               	return
 19341  12E0                     i1l6937:	
 19342                           
 19343                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19344  12E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19345  12E1  3A02               	xorlw	2
 19346  12E2  1D03               	skipz
 19347  12E3  0008               	return
 19348                           
 19349                           ;Dimmer_B1.c: 62: RB4 = 1;
 19350  12E4  0020               	movlb	0	; select bank0
 19351  12E5  160D               	bsf	13,4	;volatile
 19352  12E6  0008               	return
 19353  12E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19354                           
 19355                           	psect	text135
 19356  1D89                     __ptext135:	
 19357 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19358 ;; Defined at:
 19359 ;;		line 8 in file "../src/Dimmer_B1.c"
 19360 ;; Parameters:    Size  Location     Type
 19361 ;;  lights          1    wreg     unsigned char 
 19362 ;; Auto vars:     Size  Location     Type
 19363 ;;  lights          1    1[COMMON] unsigned char 
 19364 ;; Return value:  Size  Location     Type
 19365 ;;		None               void
 19366 ;; Registers used:
 19367 ;;		wreg
 19368 ;; Tracked objects:
 19369 ;;		On entry : 0/0
 19370 ;;		On exit  : 0/0
 19371 ;;		Unchanged: 0/0
 19372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19375 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19376 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19377 ;;Total ram usage:        2 bytes
 19378 ;; Hardware stack levels used:    1
 19379 ;; This function calls:
 19380 ;;		Nothing
 19381 ;; This function is called by:
 19382 ;;		_setDimmerLights_IntrIOC_GO
 19383 ;; This function uses a non-reentrant model
 19384 ;;
 19385                           
 19386                           
 19387                           ;psect for function _DimmerIntrIOCPointSelect
 19388  1D89                     _DimmerIntrIOCPointSelect:	
 19389                           
 19390                           ;incstack = 0
 19391                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19392                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19393  1D89  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19394                           
 19395                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19396  1D8A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19397  1D8B  3A01               	xorlw	1
 19398  1D8C  1D03               	skipz
 19399  1D8D  2D94               	goto	i1l6607
 19400                           
 19401                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19402  1D8E  3055               	movlw	_DimmerLights1& (0+255)
 19403  1D8F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19404  1D90  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19405  1D91  0021               	movlb	1	; select bank1
 19406  1D92  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19407                           
 19408                           ;Dimmer_B1.c: 12: }
 19409  1D93  0008               	return
 19410  1D94                     i1l6607:	
 19411                           
 19412                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 19413  1D94  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19414  1D95  3A02               	xorlw	2
 19415  1D96  1D03               	skipz
 19416  1D97  0008               	return
 19417                           
 19418                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19419  1D98  30BE               	movlw	_DimmerLights2& (0+255)
 19420  1D99  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19421  1D9A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19422  1D9B  0021               	movlb	1	; select bank1
 19423  1D9C  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19424  1D9D  0008               	return
 19425  1D9E                     __end_of_DimmerIntrIOCPointSelect:	
 19426  007E                     btemp	set	126	;btemp
 19427  007E                     pic14e$flags	set	126
 19428  007E                     wtemp	set	126
 19429  007E                     wtemp0	set	126
 19430  0080                     wtemp1	set	128
 19431  0082                     wtemp2	set	130
 19432  0084                     wtemp3	set	132
 19433  0086                     wtemp4	set	134
 19434  0088                     wtemp5	set	136
 19435  007F                     wtemp6	set	127
 19436  007E                     ttemp	set	126
 19437  007E                     ttemp0	set	126
 19438  0081                     ttemp1	set	129
 19439  0084                     ttemp2	set	132
 19440  0087                     ttemp3	set	135
 19441  007F                     ttemp4	set	127
 19442  007E                     ltemp	set	126
 19443  007E                     ltemp0	set	126
 19444  0082                     ltemp1	set	130
 19445  0086                     ltemp2	set	134
 19446  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      8      80
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  130241
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8404
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8404
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     405
                                              7 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45972
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45972
                                              5 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35750
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35407
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 20 16:27:47 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 177F  
                                      l98 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1FB7                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1D39  
                  __end_of_setDelayOff_GO 164F                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 155A  
                    _setDimmerLights_Line 1DDD                              ___ftadd@sign 004B  
                                     l110 1461                                       l106 1467  
                                     l107 1463                                       l108 1451  
                    _setDimmerLights_SwOn 0892                                       l255 0A4A  
                                     l328 1E01                                       l329 1E03  
                                     l372 1079                                       l810 1F28  
                                     l860 1D4A                                       l769 1CBC  
                                     l859 1D42                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1E0E  
                   _Buzzer_Initialization 1AEA                           __end_of_ADC_Set 1B2A  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 15AA                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1FB7                     _setDimmerLights_AdjOn 123C  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1C06  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1028 1EFD                                      l1029 1F07  
                                    l1063 13D9                                      l1333 1236  
                                    l2310 07FB                                      l3033 0995  
                ?_DimmerLightsPointSelect 0070                                      l3027 097E  
                                    l1347 116C                                      l1356 14B4  
                                    l2324 0BA2                                      l2261 0CF5  
                                    l2253 0CCA                                      l1607 063A  
                                    l3056 0504                                      l2336 134D  
                                    l2249 0D04                                      l1545 1321  
                                    l1730 007B                                      l1731 0076  
                                    l2259 0CE0                                      l1572 11E9  
                                    l1900 0FF6                                      l1573 1204  
                         __end_of_IOC_Set 1BD2                                      l1727 01EF  
                                    l2288 1CDD                                      l2640 1DCF  
                                    l1577 1200                                      l1737 01CB  
                                    l1729 007F                                      l1738 01C9  
                                    l2662 035B                                      l2664 0238  
                                    l1895 0FFC                                      l2866 1E9F  
                   _setDimmerLights_SwOff 14BC                                      l9009 17F1  
                                    l9121 1E8F                                      l9211 1E20  
                                    l9205 1E17                                      l9141 09BA  
                                    l9221 1FE5                                      l9207 1E1A  
                                    l9143 09EF                                      l9119 1E89  
                                    l9223 1FE8                                      l9071 1180  
                                    l9305 1DED                                      l8521 0954  
                                    l9139 09E9                                      l9331 166F  
                                    l8611 04D0                                      l9227 1FEE  
                                    l9403 0B87                                      l9261 1299  
                                    l9317 165E                                      l9325 1666  
                                    l8525 095B                                      l8613 04DA  
                                    l8605 04BD                                      l9501 0BDE  
                                    l9413 0A16                                      l8701 0744  
                                    l9181 153E                                      l9271 12AA  
                                    l9247 1282                                      l9351 1693  
                                    l8535 0983                                      l8527 0965  
                                    l8623 04F6                                      l8615 04DF  
                                    l9503 0BF7                                      l9415 0A19  
                                    l8553 1C73                                      l8537 098B  
                                    l8529 096A                                      l8633 0528  
                                    l8625 0500                                      l8617 04E3  
                                    l9433 0A31                                      l8713 077F  
                                    l9185 154D                                      l9523 108A  
                                    l9531 1F9D                                      l8811 1115  
                                    l9259 1296                                      l9347 168F  
                                    l9355 1697                                      l9339 1677  
                                    l8571 1F7D                                      l8643 0543  
                                    l9451 0A66                                      l9443 0A59  
                                    l9419 0A1F                                      l9525 1095  
                                    l9533 1FA0                                      l8549 1C6D  
                                    l9285 11E4                                      l9269 12A5  
                                    l8629 0516                                      l8653 0EBE  
                                    l9445 0A5D                                      l9437 0A50  
                                    l8725 079B                                      l8717 0787  
                   _myMain_Initialization 1C06                                      l9295 11FB  
                                    l9287 11ED                                      l8583 048D  
                                    l9463 0BA7                                      l9471 0BB3  
                                    l9447 0A60                                      l9439 0A53  
                                    l9199 133C                                      l9391 0B62  
                                    l9537 1FA6                                      l9801 1405  
                                    l8921 163A                                      l8593 04A3  
                                    l8681 0F2E                                      l8673 0F15  
                                    l8753 0DA2                                      l9481 0BC6  
                                    l9465 0BAA                                      l8729 07A3  
                                    l9393 0B77                                      l9713 0C31  
                                    l9811 1415                                      l9803 1408  
                                    l8915 162E                                      l8587 0494  
                                    l8659 0ED4                                      l8771 0DD2  
                                    l9395 0B7B                                      l9387 0B3D  
                                    l9723 0C42                                      l9813 1418  
                                    l8845 16B8                                      l8781 0DF6  
                                    l8773 0DE0                                      l9485 0BCC  
                                    l9469 0BB0                                      l9397 0B7F  
                                    l9807 140E                                      l8871 16EF  
                                    l8863 16DE                                      l8855 16C0  
                                    l8839 16AD                                      l8919 1634  
                                    l9903 1CD6                                      l8783 0DF9  
                                    l9647 1154                                      l9479 0BC3  
                                    l8695 072E                                      l9399 0B83  
                                    l9735 0C58                                      l9743 0C77  
                                    l9817 141E                                      l8857 16CC  
                                    l9569 15DA                                      _CFGS 0CAE  
                                    l8795 1D1C                                      l8867 16E7  
                                    l8787 0E07                                      l8779 0DED  
                                    l9579 15F0                                      l9691 1C52  
                                    l9589 170E                                      l9925 15A4  
                                    l9917 1583                                      l8957 08A9  
                                    l9749 0C82                                      l9773 1EE0  
                                    l9919 1589                                      l8975 08E0  
                                    l8967 08B8                                      l8959 08AC  
                                    l9759 1D6C                                      l9783 1EEC  
                                    l9775 1EE2                              __CFG_WDTE$ON 0000  
                                    l8977 08E6                                      l8969 08BD  
                                    l9785 1EF0                                      l9955 113C  
                                    l8989 14F1                                      l9957 111F  
                                    l9959 1141                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9105 04E4                                      u9045 04BE  
                                    u9205 0EE6                                      u9135 04F7  
                                    u9215 0EF6                                      u9225 0F16  
                                    u9075 04D1                                      u9235 0F25  
                                    u9315 0788                                      u9245 0F2F  
                                    u9405 0DA9                                      u9325 078E  
                                    u9435 0DD3                                      u9355 07A4  
                                    u9605 16CD                                      u9525 1101  
                                    u9365 07AA                                      u9285 0750  
                                    u9615 16D7                                      u9295 0760  
                                    u9625 16DF                                      u8905 099C  
                                    u9465 0DEE                                      u8835 0960  
                                    u8855 0979                                      u9585 16C3  
                                    u9915 1DAD                                      u8875 0986  
                                    _LWLO 0CAD                                      u9860 17B1  
                                    u9865 17AF                                      _RSSI 00CE  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00AE                                      _Load 0127  
                                    _Temp 00D6                                      _main 0837  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 094B  
                         __end_of_RF_Main 1AF6                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1BEA  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1B2A                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1361  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2330 0023  
    _getDimmerLights_Allow_Condition$2331 0024      _getDimmerLights_Allow_Condition$2329 0022  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 12AC  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1272  
                  _getDimmerLights_Status 1C25                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0012                          __end_of_LED_Main 1BC6  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1C6A  
                   ?_getDimmerLights_Line 0070                                     l10221 0CE6  
                                   l10205 0CD0                                     l10053 1F45  
                                   l10071 148A                                     l10303 02D6  
                                   l10151 0FCD                                     l10119 0F6C  
                                   l10047 1F3D                                     l10065 1475  
                                   l10313 0308                                     l10161 0FE2  
                                   l10049 1F40                                     l10163 0FE3  
                                   l10245 1DD4                                     l10149 0FCB  
                                   l10343 1E99                                     l10263 0223  
                                   l10433 1F2A                                     l10249 1DDA  
                                   l10371 0827                                     l10363 0809  
                                   l10365 0815                                     l10189 0CB1  
                                   l10613 1301                                     l10463 06AD  
                                   l10375 0830                                     l10279 0266  
                                   l10713 016A                                     l10721 0195  
                                   l10641 005D                                     l10289 0298  
                                   l10561 0D4E                                     l10553 0D29  
                                   l10803 0589                                     l10731 01AB  
                                   l10707 015D                                     l10389 143B  
                                   l10717 0189                                     l10581 0D83  
                                   l10565 0D56                                     l10815 05C4  
                                   l10807 0598                     ?_setDimmerLights_Main 0070  
                                   l10833 060B                                     l10817 059B  
                                   l10681 00D4                                     l10905 085B  
                                   l10835 05E2                                     l10819 05CC  
                                   l10675 00A2                                     l10659 007E  
                                   l10595 1390                                     l10837 0613  
                                   l10845 0630                                     l10909 0866  
                                   l10839 061D                                     l10769 01DE  
                                   l10797 057A                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0265                           __end_of___awdiv 16F6  
                         __end_of___ftadd 055B                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1B6B                                     u10005 09C5  
                                   u12005 1431                           __end_of___ftmul 07CB  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u10625 107F                                     u11265 1128  
                                   u12225 0D3C                           __end_of___fttol 0E10  
                                   u12165 122D                                     u12325 1387  
                                   u12335 1396                                     u11465 0FB3  
                                   u12515 00A0                                     u12275 0D70  
                                   u12525 00D2                                     u11485 0FD3  
                                   u12615 019C                                     u12535 0116  
                                   u12375 1319                                     u11905 1EA5  
                                   u11585 0CC4                                     u12740 05CA  
                                   u11935 080C                                     u12745 05A6  
                                   u12770 0611                                     u11955 0816  
                                   u11965 0820                                     _IOCBF 0396  
                                   u12775 05ED                                     u11975 0828  
                                   u11895 1EA0                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 0837  
                                   i1l737 1C61                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1DB3  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 12E7  
              _setDimmerLights_IntrIOC_GO 12AC                          __end_of_TMR1_ISR 10C3  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 0A0E                _setDimmerLights_ErrorClose 09AC  
                        __end_of_TMR1_Set 1BDE                                     _getAD 1F32  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1CB2  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D61                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
            __end_of_getMain_LightsStatus 1CD8             __end_of_setLED_Initialization 1C8E  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 17A7               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0AD7                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 0892  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1B0C  
                      ??_setMemory_Modify 0020                            _Exception_Main 055B  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 15FC                      _setSw_Initialization 1B5A  
                                  ??_main 006F                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0B3C  
                          _setMemory_Data 1B96                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 0015                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1CC5                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08EE  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B52  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F94  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 09AC  
                _getMain_All_Error_Status 11D3                                    _IOCBF2 1CB2  
                                  i1l7311 03BE                                    i1l7315 03C5  
                                  i1l7333 040C                                    i1l7341 0429  
                                  i1l6607 1D94                                    i1l7351 045E  
                                  i1l7335 0412                                    i1l7347 0448  
                                  i1l7339 0423                                    i1l7299 038E  
                                  i1l6937 12E0                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  u801_25 10BD                                    _OSCCON 0099  
                      __size_of_Load_Main 01AC                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E42  
                                  _WDTCON 0097                      Exception_Main@i_3618 00EC  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1DC8                                    _Dimmer 00C6  
                                  _DlySw1 01E1                                    _DlySw2 01E6  
              __end_of_Mcu_Initialization 1CA0                       __end_of_Buzzer_Main 146E  
                                  _Memory 0220                                    _Timer1 0120  
                                  ___bmul 1C6A                    __end_of_Exception_Main 063B  
                    Load_Main@Load_Status 002B                      Exception_Main@lights 00EE  
                                  ___wmul 1E96                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0014  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
             setDimmerLights_AdjRF@lights 0063                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D4  
                                  _s_data 00D5                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 164F                                    _myMain 00A0  
                  __end_of_setMemory_Data 1BA2                          _DimmerLightsIntr 0076  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AF0  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0465  
             _setDimmerLights_IntrControl 0364                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1D11  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D75              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1DC8  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B3C  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0045  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5258 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2310 002E  
               _setDimmerLights_SwOn$2311 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1F52                             __end_of_getAD 1F52  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1BAE  
                         _getSw_KeyStatus 1ED3                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D4D  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F5  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1CC5  
              __end_of_set_TimeoutCleared 1B11                  __end_of_setDimmerReClock 1B32  
                      __size_of_getRxData 007A                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1066  
                          _DimmerLights11 00CA                            _DimmerLights22 00CB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1AF6  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1424  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1AFC  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B32                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 0837                            _getDelayOff_GO 1C15  
                     _CC2500_WriteCommand 1E0E                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0D08  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B42  
                      __size_of_setTxData 0097                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B23                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1361                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B7F  
                      _setRFSW_AdjControl 1323                    __end_of_setProductData 1074  
                                 _IOC_ISR 1BF7                                   _IOC_Set 1BC6  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1206  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E28  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1AF3  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1BDE           __end_of_setControl_Lights_Table 0BA3  
                         setRF_Main@error 00EF                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0A72  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B96                           __size_of_IO_Set 001B  
                       __end_of_getBuz_GO 1C47                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1C25  
                                 _VarLED1 016A                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 1C36                         __end_of_getRxData 0C8C  
                 __end_of_getSw_KeyStatus 1EF2                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1D9E                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A2                                   ___ftadd 0465  
                                 ___ftdiv 0EA7                                   ___ftneg 1B62  
                         __size_of___wmul 001E                                   ___ftmul 0717  
                                 ___fttol 0D89                       __end_of_Switch_Main 1B8A  
                                 ___lwdiv 0800                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C47                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12E7                                   __ptext2 1C06  
                                 __ptext3 1361                                   __ptext4 0D08  
                                 __ptext5 1F32                                   __ptext6 1CA0  
                                 __ptext7 0002                                   __ptext8 1AF9  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0027                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C58                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 123C                 __end_of_Flash_Memory_Read 1E42  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0C8C  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B3A  
                       _DimmerLights_Main 1F12            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B17                __end_of_CC2500_ClearRXFIFO 1B00  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1B04  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1EF2                       _DelayOffPointSelect 1D11  
                                 clrloop0 1B1E            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BF7                      end_of_initialization 0045  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 10C3  
                           _DelayTime_1us 1074                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 1173                                   init_ram 1B17  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1B18  
                              _setSw_Main 01F5                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1FDB  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C7C  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0BA3                             _CC2500_TxData 0A0E  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 146E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1B6B                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F32                        _Mcu_Initialization 1C8E  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1323  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1F12                   __end_of_setPercentValue 0AD7  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 10ED  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 16F6                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 2000                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1E5D                      _setRF_Initialization 1B74  
                      _setMemory_LoopSave 1CFE                               _Switch_Main 1B7F  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CB2                   __end_of_getRF_KeyStatus 1C58  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1DB3                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1C7C                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1D89                            __end_of___wmul 1EB4  
                       getSw_KeyStatus@sw 0024                         __size_of_TMR1_ISR 0029  
           __size_of_getDimmerLights_Line 0014                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 16A2             __size_of_setDimmerLights_Line 0018  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 17A7  
                    _CC2500_FrequencyCabr 1B8A                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 150B  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1173  
                         ?_LedPointSelect 0070                                 _Load_Main 0049  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1B4A  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1ED3           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1B0C  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0166                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1AF9                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0245  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 1117  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 1206                          _CC2500_SIDLEMode 1B04  
              __size_of_DimmerLights_Main 0020                 __end_of_setRF_DimmerValue 11A2  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1CEB  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0155                             _DimmerLights2 01BE  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E79  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EA  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 007C  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1C36       __end_of_Flash_Memory_Initialization 0717  
             _Flash_Memory_Initialization 063B                                  ?___awdiv 0020  
                               __ptext100 15FC                                 __ptext101 1066  
                               __ptext110 1B11                                 __ptext102 10ED  
                               __ptext111 1D11                                 __ptext103 1C6A  
                               __ptext120 1B00                                 __ptext112 1DB3  
                               __ptext104 1C15                                 __ptext121 1AFC  
                               __ptext113 1B04                                 __ptext105 1C25  
                               __ptext130 0364                                 __ptext122 1E0E  
                               __ptext114 13E0                                 __ptext106 1CB2  
                               __ptext131 1C58                                 __ptext123 1B0C  
                               __ptext115 10C3                                 __ptext107 174E  
                               __ptext132 1BF7                                 __ptext124 1D9E  
                               __ptext116 1EB4                                 __ptext108 16A2  
                               __ptext133 1B2A                                 __ptext125 1DF5  
                               __ptext117 1F94                                 __ptext109 1B32  
                                ?___ftadd 0041                                 __ptext134 12AC  
                               __ptext126 1424                                 __ptext118 1B8A  
                               __ptext135 1D89                                 __ptext127 1AEA  
                               __ptext119 1074                                 __ptext129 109A  
                               _getRxData 0C12                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 155A  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1AED  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1DDD                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 1FDB             __end_of_setDimmerLights_AdjOn 1272  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 150B              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1C15                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D61                       __end_of_setLED_Main 13E0  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CC  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1AF9  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1BBA                           SwPointSelect@sw 0021  
                               clear_ram0 1B1D                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 12E7                                 _setTxData 0E10  
     __end_of_DimmerLights_Initialization 1D39               _DimmerLights_Initialization 1D25  
                      _CC2500_ClearRXFIFO 1AFC                        _CC2500_ClearTXFIFO 1B00  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D89                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1144                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 109A  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1BD2  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1CEB  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E28  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1CA0  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 00ED                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1BAE  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 07FF  
                   _DlyOff_Initialization 1B11                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1B08  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D89                        __end_of_getLoad_OK 1B4A  
                   _Switch_Initialization 1BEA         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 139F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DF5                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3603 0021             _getMain_All_Error_Status$3604 0023  
                __end_of_getDimmer_LoadGO 1B52                       _Load_Initialization 1AED  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F72                          ??_LedPointSelect 0020  
                                ___ftpack 094B             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 139F  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B5A  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1AF6  
                                __ptext11 07FF                                  __ptext20 1DC8  
                                __ptext12 1B7F                                  __ptext21 1AF3  
                                __ptext13 01F5                                  __ptext30 1173  
                                __ptext22 0C8C                                  __ptext14 1D75  
                                __ptext31 1FB7                                  __ptext23 0C12  
                                __ptext15 123C                                  __ptext40 1FDB  
                                __ptext32 0AD7                                  __ptext24 07CB  
                                __ptext16 1ED3                                  __ptext41 1E79  
                                __ptext33 0717                                  __ptext25 1CFE  
                                __ptext17 1D61                                  __ptext50 1B23  
                                __ptext42 1AF0                                  __ptext34 1CEB  
                                __ptext26 0B3C                                  __ptext18 1BEA  
                                __ptext51 0049                                  __ptext43 1B74  
                                __ptext35 1C47                                  __ptext27 150B  
                                __ptext19 1B5A                                  __ptext60 1BBA  
                                __ptext52 1D4D                                  __ptext44 1C8E  
                                __ptext36 1C36                                  __ptext28 0892  
                                __ptext61 139F                                  __ptext53 1B52  
                                __ptext45 1BDE                                  __ptext37 1CD8  
                                __ptext29 1323                                  __ptext70 1B6B  
                                __ptext62 1BAE                                  __ptext54 1B4A  
                                __ptext46 1BD2                                  __ptext38 0A0E  
                                __ptext71 1E28                                  __ptext63 1C7C  
                                __ptext55 1117                                  __ptext47 1E42  
                                __ptext39 0BA3                                  __ptext80 0A72  
                                __ptext72 055B                                  __ptext64 1206  
                                __ptext56 1E96                                  __ptext48 1BC6  
                                __ptext81 0D89                                  __ptext73 1D39  
                                __ptext65 146E                                  __ptext57 0800  
                                __ptext49 1B08                                  __ptext90 1272  
                                __ptext82 1B62                                  __ptext74 1F12  
                                __ptext66 1BA2                                  __ptext58 1AED  
                                __ptext91 1B42                                  __ptext83 0EA7  
                                __ptext75 155A                                  __ptext67 063B  
                                __ptext59 1E5D                                  __ptext92 1CC5  
                                __ptext84 0465                                  __ptext76 16F6  
                                __ptext68 1B96                                  __ptext93 11D3  
                                __ptext85 1F72                                  __ptext77 15AA  
                                __ptext69 1144                                  __ptext94 1D25  
                                __ptext86 094B                                  __ptext78 0E10  
                                __ptext95 11A2                                  __ptext87 164F  
                                __ptext79 17A7                                  __ptext96 1B3A  
                                __ptext88 1EF2                                  __ptext97 08EE  
                                __ptext89 1DDD                                  __ptext98 09AC  
                                __ptext99 14BC                                  __product 0245  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1D4D  
            __end_of_setDimmerLights_Main 15AA              __end_of_setDimmerLights_Line 1DF5  
            __end_of_setDimmerLights_SwOn 08EE                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1D75                  __end_of_CC2500_SIDLEMode 1B08  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1D25  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 00EE  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0027  
                         _CC2500_ReadByte 1E79                        _CC2500_InitPATable 1EB4  
                __end_of_setMemory_Modify 1CFE                        __end_of_setRF_Main 0D08  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 0265                                  main@argv 0267  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6242 0021  
                    _getSw_KeyStatus$6243 0022                           _CC2500_PowerRST 13E0  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 14BC  
                       ??_getPercentValue 005C                               _setLog_Code 07CB  
             __end_of_Flash_Memory_Unlock 1B74                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F94                        __end_of_setSw_Main 0364  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 10ED  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 1144                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 11D3  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 11A2  
             __end_of_setDimmerLights_Adj 174E                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 0013                         _RF_Initialization 1AF0  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1BA2                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 1B3A       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B42                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 15FC  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 1117  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 109A  
                 __end_of_CC2500_ReadByte 1E96              __end_of_setSw_Initialization 1B62  
                         _Timeout_Counter 1D9E           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1CD8  
              __end_of_LED_Initialization 1BBA            __end_of_setTemp_Initialization 0800  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1AF3  
                   __end_of_CC2500_RxData 0C12                     __end_of_CC2500_TxData 0A72  
                   _setLoad_AH_AL_Restore 1E5D                   __end_of_CC2500_PowerRST 1424  
