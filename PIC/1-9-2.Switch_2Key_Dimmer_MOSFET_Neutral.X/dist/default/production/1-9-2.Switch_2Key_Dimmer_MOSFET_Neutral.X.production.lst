

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 23 17:13:04 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	intentry,global,class=CODE,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   160                           	dabs	1,0x7E,2
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  0116                     	;# 
   208  0117                     	;# 
   209  011D                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0194                     	;# 
   219  0195                     	;# 
   220  0196                     	;# 
   221  0197                     	;# 
   222  0199                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019D                     	;# 
   231  019E                     	;# 
   232  019F                     	;# 
   233  020D                     	;# 
   234  0210                     	;# 
   235  0211                     	;# 
   236  0211                     	;# 
   237  0212                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0213                     	;# 
   241  0214                     	;# 
   242  0214                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0216                     	;# 
   247  0216                     	;# 
   248  0217                     	;# 
   249  0217                     	;# 
   250  0291                     	;# 
   251  0291                     	;# 
   252  0292                     	;# 
   253  0293                     	;# 
   254  0298                     	;# 
   255  0298                     	;# 
   256  0299                     	;# 
   257  029A                     	;# 
   258  0394                     	;# 
   259  0395                     	;# 
   260  0396                     	;# 
   261  0FE4                     	;# 
   262  0FE5                     	;# 
   263  0FE6                     	;# 
   264  0FE7                     	;# 
   265  0FE8                     	;# 
   266  0FE9                     	;# 
   267  0FEA                     	;# 
   268  0FEB                     	;# 
   269  0FED                     	;# 
   270  0FEE                     	;# 
   271  0FEF                     	;# 
   272  0000                     	;# 
   273  0001                     	;# 
   274  0002                     	;# 
   275  0003                     	;# 
   276  0004                     	;# 
   277  0005                     	;# 
   278  0006                     	;# 
   279  0007                     	;# 
   280  0008                     	;# 
   281  0009                     	;# 
   282  000A                     	;# 
   283  000B                     	;# 
   284  000C                     	;# 
   285  000D                     	;# 
   286  000E                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0015                     	;# 
   291  0016                     	;# 
   292  0016                     	;# 
   293  0017                     	;# 
   294  0018                     	;# 
   295  0019                     	;# 
   296  001A                     	;# 
   297  001B                     	;# 
   298  001C                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  0090                     	;# 
   303  0091                     	;# 
   304  0092                     	;# 
   305  0095                     	;# 
   306  0096                     	;# 
   307  0097                     	;# 
   308  0099                     	;# 
   309  009A                     	;# 
   310  009B                     	;# 
   311  009B                     	;# 
   312  009C                     	;# 
   313  009D                     	;# 
   314  009E                     	;# 
   315  010C                     	;# 
   316  010D                     	;# 
   317  010E                     	;# 
   318  0116                     	;# 
   319  0117                     	;# 
   320  011D                     	;# 
   321  018C                     	;# 
   322  018D                     	;# 
   323  018E                     	;# 
   324  0191                     	;# 
   325  0191                     	;# 
   326  0192                     	;# 
   327  0193                     	;# 
   328  0193                     	;# 
   329  0194                     	;# 
   330  0195                     	;# 
   331  0196                     	;# 
   332  0197                     	;# 
   333  0199                     	;# 
   334  019A                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019C                     	;# 
   340  019C                     	;# 
   341  019D                     	;# 
   342  019E                     	;# 
   343  019F                     	;# 
   344  020D                     	;# 
   345  0210                     	;# 
   346  0211                     	;# 
   347  0211                     	;# 
   348  0212                     	;# 
   349  0212                     	;# 
   350  0213                     	;# 
   351  0213                     	;# 
   352  0214                     	;# 
   353  0214                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0216                     	;# 
   359  0217                     	;# 
   360  0217                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0298                     	;# 
   366  0298                     	;# 
   367  0299                     	;# 
   368  029A                     	;# 
   369  0394                     	;# 
   370  0395                     	;# 
   371  0396                     	;# 
   372  0FE4                     	;# 
   373  0FE5                     	;# 
   374  0FE6                     	;# 
   375  0FE7                     	;# 
   376  0FE8                     	;# 
   377  0FE9                     	;# 
   378  0FEA                     	;# 
   379  0FEB                     	;# 
   380  0FED                     	;# 
   381  0FEE                     	;# 
   382  0FEF                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  0010                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0015                     	;# 
   402  0016                     	;# 
   403  0016                     	;# 
   404  0017                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  001B                     	;# 
   409  001C                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  0090                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0095                     	;# 
   417  0096                     	;# 
   418  0097                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009B                     	;# 
   423  009C                     	;# 
   424  009D                     	;# 
   425  009E                     	;# 
   426  010C                     	;# 
   427  010D                     	;# 
   428  010E                     	;# 
   429  0116                     	;# 
   430  0117                     	;# 
   431  011D                     	;# 
   432  018C                     	;# 
   433  018D                     	;# 
   434  018E                     	;# 
   435  0191                     	;# 
   436  0191                     	;# 
   437  0192                     	;# 
   438  0193                     	;# 
   439  0193                     	;# 
   440  0194                     	;# 
   441  0195                     	;# 
   442  0196                     	;# 
   443  0197                     	;# 
   444  0199                     	;# 
   445  019A                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019C                     	;# 
   451  019C                     	;# 
   452  019D                     	;# 
   453  019E                     	;# 
   454  019F                     	;# 
   455  020D                     	;# 
   456  0210                     	;# 
   457  0211                     	;# 
   458  0211                     	;# 
   459  0212                     	;# 
   460  0212                     	;# 
   461  0213                     	;# 
   462  0213                     	;# 
   463  0214                     	;# 
   464  0214                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0216                     	;# 
   469  0216                     	;# 
   470  0217                     	;# 
   471  0217                     	;# 
   472  0291                     	;# 
   473  0291                     	;# 
   474  0292                     	;# 
   475  0293                     	;# 
   476  0298                     	;# 
   477  0298                     	;# 
   478  0299                     	;# 
   479  029A                     	;# 
   480  0394                     	;# 
   481  0395                     	;# 
   482  0396                     	;# 
   483  0FE4                     	;# 
   484  0FE5                     	;# 
   485  0FE6                     	;# 
   486  0FE7                     	;# 
   487  0FE8                     	;# 
   488  0FE9                     	;# 
   489  0FEA                     	;# 
   490  0FEB                     	;# 
   491  0FED                     	;# 
   492  0FEE                     	;# 
   493  0FEF                     	;# 
   494  0000                     	;# 
   495  0001                     	;# 
   496  0002                     	;# 
   497  0003                     	;# 
   498  0004                     	;# 
   499  0005                     	;# 
   500  0006                     	;# 
   501  0007                     	;# 
   502  0008                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0015                     	;# 
   513  0016                     	;# 
   514  0016                     	;# 
   515  0017                     	;# 
   516  0018                     	;# 
   517  0019                     	;# 
   518  001A                     	;# 
   519  001B                     	;# 
   520  001C                     	;# 
   521  008C                     	;# 
   522  008D                     	;# 
   523  008E                     	;# 
   524  0090                     	;# 
   525  0091                     	;# 
   526  0092                     	;# 
   527  0095                     	;# 
   528  0096                     	;# 
   529  0097                     	;# 
   530  0099                     	;# 
   531  009A                     	;# 
   532  009B                     	;# 
   533  009B                     	;# 
   534  009C                     	;# 
   535  009D                     	;# 
   536  009E                     	;# 
   537  010C                     	;# 
   538  010D                     	;# 
   539  010E                     	;# 
   540  0116                     	;# 
   541  0117                     	;# 
   542  011D                     	;# 
   543  018C                     	;# 
   544  018D                     	;# 
   545  018E                     	;# 
   546  0191                     	;# 
   547  0191                     	;# 
   548  0192                     	;# 
   549  0193                     	;# 
   550  0193                     	;# 
   551  0194                     	;# 
   552  0195                     	;# 
   553  0196                     	;# 
   554  0197                     	;# 
   555  0199                     	;# 
   556  019A                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019C                     	;# 
   562  019C                     	;# 
   563  019D                     	;# 
   564  019E                     	;# 
   565  019F                     	;# 
   566  020D                     	;# 
   567  0210                     	;# 
   568  0211                     	;# 
   569  0211                     	;# 
   570  0212                     	;# 
   571  0212                     	;# 
   572  0213                     	;# 
   573  0213                     	;# 
   574  0214                     	;# 
   575  0214                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0216                     	;# 
   580  0216                     	;# 
   581  0217                     	;# 
   582  0217                     	;# 
   583  0291                     	;# 
   584  0291                     	;# 
   585  0292                     	;# 
   586  0293                     	;# 
   587  0298                     	;# 
   588  0298                     	;# 
   589  0299                     	;# 
   590  029A                     	;# 
   591  0394                     	;# 
   592  0395                     	;# 
   593  0396                     	;# 
   594  0FE4                     	;# 
   595  0FE5                     	;# 
   596  0FE6                     	;# 
   597  0FE7                     	;# 
   598  0FE8                     	;# 
   599  0FE9                     	;# 
   600  0FEA                     	;# 
   601  0FEB                     	;# 
   602  0FED                     	;# 
   603  0FEE                     	;# 
   604  0FEF                     	;# 
   605  0000                     	;# 
   606  0001                     	;# 
   607  0002                     	;# 
   608  0003                     	;# 
   609  0004                     	;# 
   610  0005                     	;# 
   611  0006                     	;# 
   612  0007                     	;# 
   613  0008                     	;# 
   614  0009                     	;# 
   615  000A                     	;# 
   616  000B                     	;# 
   617  000C                     	;# 
   618  000D                     	;# 
   619  000E                     	;# 
   620  0010                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0015                     	;# 
   624  0016                     	;# 
   625  0016                     	;# 
   626  0017                     	;# 
   627  0018                     	;# 
   628  0019                     	;# 
   629  001A                     	;# 
   630  001B                     	;# 
   631  001C                     	;# 
   632  008C                     	;# 
   633  008D                     	;# 
   634  008E                     	;# 
   635  0090                     	;# 
   636  0091                     	;# 
   637  0092                     	;# 
   638  0095                     	;# 
   639  0096                     	;# 
   640  0097                     	;# 
   641  0099                     	;# 
   642  009A                     	;# 
   643  009B                     	;# 
   644  009B                     	;# 
   645  009C                     	;# 
   646  009D                     	;# 
   647  009E                     	;# 
   648  010C                     	;# 
   649  010D                     	;# 
   650  010E                     	;# 
   651  0116                     	;# 
   652  0117                     	;# 
   653  011D                     	;# 
   654  018C                     	;# 
   655  018D                     	;# 
   656  018E                     	;# 
   657  0191                     	;# 
   658  0191                     	;# 
   659  0192                     	;# 
   660  0193                     	;# 
   661  0193                     	;# 
   662  0194                     	;# 
   663  0195                     	;# 
   664  0196                     	;# 
   665  0197                     	;# 
   666  0199                     	;# 
   667  019A                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019C                     	;# 
   673  019C                     	;# 
   674  019D                     	;# 
   675  019E                     	;# 
   676  019F                     	;# 
   677  020D                     	;# 
   678  0210                     	;# 
   679  0211                     	;# 
   680  0211                     	;# 
   681  0212                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0213                     	;# 
   685  0214                     	;# 
   686  0214                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0216                     	;# 
   691  0216                     	;# 
   692  0217                     	;# 
   693  0217                     	;# 
   694  0291                     	;# 
   695  0291                     	;# 
   696  0292                     	;# 
   697  0293                     	;# 
   698  0298                     	;# 
   699  0298                     	;# 
   700  0299                     	;# 
   701  029A                     	;# 
   702  0394                     	;# 
   703  0395                     	;# 
   704  0396                     	;# 
   705  0FE4                     	;# 
   706  0FE5                     	;# 
   707  0FE6                     	;# 
   708  0FE7                     	;# 
   709  0FE8                     	;# 
   710  0FE9                     	;# 
   711  0FEA                     	;# 
   712  0FEB                     	;# 
   713  0FED                     	;# 
   714  0FEE                     	;# 
   715  0FEF                     	;# 
   716  0000                     	;# 
   717  0001                     	;# 
   718  0002                     	;# 
   719  0003                     	;# 
   720  0004                     	;# 
   721  0005                     	;# 
   722  0006                     	;# 
   723  0007                     	;# 
   724  0008                     	;# 
   725  0009                     	;# 
   726  000A                     	;# 
   727  000B                     	;# 
   728  000C                     	;# 
   729  000D                     	;# 
   730  000E                     	;# 
   731  0010                     	;# 
   732  0011                     	;# 
   733  0012                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0016                     	;# 
   737  0017                     	;# 
   738  0018                     	;# 
   739  0019                     	;# 
   740  001A                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  008C                     	;# 
   744  008D                     	;# 
   745  008E                     	;# 
   746  0090                     	;# 
   747  0091                     	;# 
   748  0092                     	;# 
   749  0095                     	;# 
   750  0096                     	;# 
   751  0097                     	;# 
   752  0099                     	;# 
   753  009A                     	;# 
   754  009B                     	;# 
   755  009B                     	;# 
   756  009C                     	;# 
   757  009D                     	;# 
   758  009E                     	;# 
   759  010C                     	;# 
   760  010D                     	;# 
   761  010E                     	;# 
   762  0116                     	;# 
   763  0117                     	;# 
   764  011D                     	;# 
   765  018C                     	;# 
   766  018D                     	;# 
   767  018E                     	;# 
   768  0191                     	;# 
   769  0191                     	;# 
   770  0192                     	;# 
   771  0193                     	;# 
   772  0193                     	;# 
   773  0194                     	;# 
   774  0195                     	;# 
   775  0196                     	;# 
   776  0197                     	;# 
   777  0199                     	;# 
   778  019A                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019C                     	;# 
   784  019C                     	;# 
   785  019D                     	;# 
   786  019E                     	;# 
   787  019F                     	;# 
   788  020D                     	;# 
   789  0210                     	;# 
   790  0211                     	;# 
   791  0211                     	;# 
   792  0212                     	;# 
   793  0212                     	;# 
   794  0213                     	;# 
   795  0213                     	;# 
   796  0214                     	;# 
   797  0214                     	;# 
   798  0215                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0216                     	;# 
   802  0216                     	;# 
   803  0217                     	;# 
   804  0217                     	;# 
   805  0291                     	;# 
   806  0291                     	;# 
   807  0292                     	;# 
   808  0293                     	;# 
   809  0298                     	;# 
   810  0298                     	;# 
   811  0299                     	;# 
   812  029A                     	;# 
   813  0394                     	;# 
   814  0395                     	;# 
   815  0396                     	;# 
   816  0FE4                     	;# 
   817  0FE5                     	;# 
   818  0FE6                     	;# 
   819  0FE7                     	;# 
   820  0FE8                     	;# 
   821  0FE9                     	;# 
   822  0FEA                     	;# 
   823  0FEB                     	;# 
   824  0FED                     	;# 
   825  0FEE                     	;# 
   826  0FEF                     	;# 
   827  0000                     	;# 
   828  0001                     	;# 
   829  0002                     	;# 
   830  0003                     	;# 
   831  0004                     	;# 
   832  0005                     	;# 
   833  0006                     	;# 
   834  0007                     	;# 
   835  0008                     	;# 
   836  0009                     	;# 
   837  000A                     	;# 
   838  000B                     	;# 
   839  000C                     	;# 
   840  000D                     	;# 
   841  000E                     	;# 
   842  0010                     	;# 
   843  0011                     	;# 
   844  0012                     	;# 
   845  0015                     	;# 
   846  0016                     	;# 
   847  0016                     	;# 
   848  0017                     	;# 
   849  0018                     	;# 
   850  0019                     	;# 
   851  001A                     	;# 
   852  001B                     	;# 
   853  001C                     	;# 
   854  008C                     	;# 
   855  008D                     	;# 
   856  008E                     	;# 
   857  0090                     	;# 
   858  0091                     	;# 
   859  0092                     	;# 
   860  0095                     	;# 
   861  0096                     	;# 
   862  0097                     	;# 
   863  0099                     	;# 
   864  009A                     	;# 
   865  009B                     	;# 
   866  009B                     	;# 
   867  009C                     	;# 
   868  009D                     	;# 
   869  009E                     	;# 
   870  010C                     	;# 
   871  010D                     	;# 
   872  010E                     	;# 
   873  0116                     	;# 
   874  0117                     	;# 
   875  011D                     	;# 
   876  018C                     	;# 
   877  018D                     	;# 
   878  018E                     	;# 
   879  0191                     	;# 
   880  0191                     	;# 
   881  0192                     	;# 
   882  0193                     	;# 
   883  0193                     	;# 
   884  0194                     	;# 
   885  0195                     	;# 
   886  0196                     	;# 
   887  0197                     	;# 
   888  0199                     	;# 
   889  019A                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019C                     	;# 
   895  019C                     	;# 
   896  019D                     	;# 
   897  019E                     	;# 
   898  019F                     	;# 
   899  020D                     	;# 
   900  0210                     	;# 
   901  0211                     	;# 
   902  0211                     	;# 
   903  0212                     	;# 
   904  0212                     	;# 
   905  0213                     	;# 
   906  0213                     	;# 
   907  0214                     	;# 
   908  0214                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0215                     	;# 
   912  0216                     	;# 
   913  0216                     	;# 
   914  0217                     	;# 
   915  0217                     	;# 
   916  0291                     	;# 
   917  0291                     	;# 
   918  0292                     	;# 
   919  0293                     	;# 
   920  0298                     	;# 
   921  0298                     	;# 
   922  0299                     	;# 
   923  029A                     	;# 
   924  0394                     	;# 
   925  0395                     	;# 
   926  0396                     	;# 
   927  0FE4                     	;# 
   928  0FE5                     	;# 
   929  0FE6                     	;# 
   930  0FE7                     	;# 
   931  0FE8                     	;# 
   932  0FE9                     	;# 
   933  0FEA                     	;# 
   934  0FEB                     	;# 
   935  0FED                     	;# 
   936  0FEE                     	;# 
   937  0FEF                     	;# 
   938  0000                     	;# 
   939  0001                     	;# 
   940  0002                     	;# 
   941  0003                     	;# 
   942  0004                     	;# 
   943  0005                     	;# 
   944  0006                     	;# 
   945  0007                     	;# 
   946  0008                     	;# 
   947  0009                     	;# 
   948  000A                     	;# 
   949  000B                     	;# 
   950  000C                     	;# 
   951  000D                     	;# 
   952  000E                     	;# 
   953  0010                     	;# 
   954  0011                     	;# 
   955  0012                     	;# 
   956  0015                     	;# 
   957  0016                     	;# 
   958  0016                     	;# 
   959  0017                     	;# 
   960  0018                     	;# 
   961  0019                     	;# 
   962  001A                     	;# 
   963  001B                     	;# 
   964  001C                     	;# 
   965  008C                     	;# 
   966  008D                     	;# 
   967  008E                     	;# 
   968  0090                     	;# 
   969  0091                     	;# 
   970  0092                     	;# 
   971  0095                     	;# 
   972  0096                     	;# 
   973  0097                     	;# 
   974  0099                     	;# 
   975  009A                     	;# 
   976  009B                     	;# 
   977  009B                     	;# 
   978  009C                     	;# 
   979  009D                     	;# 
   980  009E                     	;# 
   981  010C                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  0116                     	;# 
   985  0117                     	;# 
   986  011D                     	;# 
   987  018C                     	;# 
   988  018D                     	;# 
   989  018E                     	;# 
   990  0191                     	;# 
   991  0191                     	;# 
   992  0192                     	;# 
   993  0193                     	;# 
   994  0193                     	;# 
   995  0194                     	;# 
   996  0195                     	;# 
   997  0196                     	;# 
   998  0197                     	;# 
   999  0199                     	;# 
  1000  019A                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019C                     	;# 
  1006  019C                     	;# 
  1007  019D                     	;# 
  1008  019E                     	;# 
  1009  019F                     	;# 
  1010  020D                     	;# 
  1011  0210                     	;# 
  1012  0211                     	;# 
  1013  0211                     	;# 
  1014  0212                     	;# 
  1015  0212                     	;# 
  1016  0213                     	;# 
  1017  0213                     	;# 
  1018  0214                     	;# 
  1019  0214                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0216                     	;# 
  1024  0216                     	;# 
  1025  0217                     	;# 
  1026  0217                     	;# 
  1027  0291                     	;# 
  1028  0291                     	;# 
  1029  0292                     	;# 
  1030  0293                     	;# 
  1031  0298                     	;# 
  1032  0298                     	;# 
  1033  0299                     	;# 
  1034  029A                     	;# 
  1035  0394                     	;# 
  1036  0395                     	;# 
  1037  0396                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  000E                     	;# 
  1064  0010                     	;# 
  1065  0011                     	;# 
  1066  0012                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  008C                     	;# 
  1077  008D                     	;# 
  1078  008E                     	;# 
  1079  0090                     	;# 
  1080  0091                     	;# 
  1081  0092                     	;# 
  1082  0095                     	;# 
  1083  0096                     	;# 
  1084  0097                     	;# 
  1085  0099                     	;# 
  1086  009A                     	;# 
  1087  009B                     	;# 
  1088  009B                     	;# 
  1089  009C                     	;# 
  1090  009D                     	;# 
  1091  009E                     	;# 
  1092  010C                     	;# 
  1093  010D                     	;# 
  1094  010E                     	;# 
  1095  0116                     	;# 
  1096  0117                     	;# 
  1097  011D                     	;# 
  1098  018C                     	;# 
  1099  018D                     	;# 
  1100  018E                     	;# 
  1101  0191                     	;# 
  1102  0191                     	;# 
  1103  0192                     	;# 
  1104  0193                     	;# 
  1105  0193                     	;# 
  1106  0194                     	;# 
  1107  0195                     	;# 
  1108  0196                     	;# 
  1109  0197                     	;# 
  1110  0199                     	;# 
  1111  019A                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019C                     	;# 
  1117  019C                     	;# 
  1118  019D                     	;# 
  1119  019E                     	;# 
  1120  019F                     	;# 
  1121  020D                     	;# 
  1122  0210                     	;# 
  1123  0211                     	;# 
  1124  0211                     	;# 
  1125  0212                     	;# 
  1126  0212                     	;# 
  1127  0213                     	;# 
  1128  0213                     	;# 
  1129  0214                     	;# 
  1130  0214                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0216                     	;# 
  1135  0216                     	;# 
  1136  0217                     	;# 
  1137  0217                     	;# 
  1138  0291                     	;# 
  1139  0291                     	;# 
  1140  0292                     	;# 
  1141  0293                     	;# 
  1142  0298                     	;# 
  1143  0298                     	;# 
  1144  0299                     	;# 
  1145  029A                     	;# 
  1146  0394                     	;# 
  1147  0395                     	;# 
  1148  0396                     	;# 
  1149  0FE4                     	;# 
  1150  0FE5                     	;# 
  1151  0FE6                     	;# 
  1152  0FE7                     	;# 
  1153  0FE8                     	;# 
  1154  0FE9                     	;# 
  1155  0FEA                     	;# 
  1156  0FEB                     	;# 
  1157  0FED                     	;# 
  1158  0FEE                     	;# 
  1159  0FEF                     	;# 
  1160  0000                     	;# 
  1161  0001                     	;# 
  1162  0002                     	;# 
  1163  0003                     	;# 
  1164  0004                     	;# 
  1165  0005                     	;# 
  1166  0006                     	;# 
  1167  0007                     	;# 
  1168  0008                     	;# 
  1169  0009                     	;# 
  1170  000A                     	;# 
  1171  000B                     	;# 
  1172  000C                     	;# 
  1173  000D                     	;# 
  1174  000E                     	;# 
  1175  0010                     	;# 
  1176  0011                     	;# 
  1177  0012                     	;# 
  1178  0015                     	;# 
  1179  0016                     	;# 
  1180  0016                     	;# 
  1181  0017                     	;# 
  1182  0018                     	;# 
  1183  0019                     	;# 
  1184  001A                     	;# 
  1185  001B                     	;# 
  1186  001C                     	;# 
  1187  008C                     	;# 
  1188  008D                     	;# 
  1189  008E                     	;# 
  1190  0090                     	;# 
  1191  0091                     	;# 
  1192  0092                     	;# 
  1193  0095                     	;# 
  1194  0096                     	;# 
  1195  0097                     	;# 
  1196  0099                     	;# 
  1197  009A                     	;# 
  1198  009B                     	;# 
  1199  009B                     	;# 
  1200  009C                     	;# 
  1201  009D                     	;# 
  1202  009E                     	;# 
  1203  010C                     	;# 
  1204  010D                     	;# 
  1205  010E                     	;# 
  1206  0116                     	;# 
  1207  0117                     	;# 
  1208  011D                     	;# 
  1209  018C                     	;# 
  1210  018D                     	;# 
  1211  018E                     	;# 
  1212  0191                     	;# 
  1213  0191                     	;# 
  1214  0192                     	;# 
  1215  0193                     	;# 
  1216  0193                     	;# 
  1217  0194                     	;# 
  1218  0195                     	;# 
  1219  0196                     	;# 
  1220  0197                     	;# 
  1221  0199                     	;# 
  1222  019A                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019C                     	;# 
  1228  019C                     	;# 
  1229  019D                     	;# 
  1230  019E                     	;# 
  1231  019F                     	;# 
  1232  020D                     	;# 
  1233  0210                     	;# 
  1234  0211                     	;# 
  1235  0211                     	;# 
  1236  0212                     	;# 
  1237  0212                     	;# 
  1238  0213                     	;# 
  1239  0213                     	;# 
  1240  0214                     	;# 
  1241  0214                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0216                     	;# 
  1246  0216                     	;# 
  1247  0217                     	;# 
  1248  0217                     	;# 
  1249  0291                     	;# 
  1250  0291                     	;# 
  1251  0292                     	;# 
  1252  0293                     	;# 
  1253  0298                     	;# 
  1254  0298                     	;# 
  1255  0299                     	;# 
  1256  029A                     	;# 
  1257  0394                     	;# 
  1258  0395                     	;# 
  1259  0396                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000D                     	;# 
  1285  000E                     	;# 
  1286  0010                     	;# 
  1287  0011                     	;# 
  1288  0012                     	;# 
  1289  0015                     	;# 
  1290  0016                     	;# 
  1291  0016                     	;# 
  1292  0017                     	;# 
  1293  0018                     	;# 
  1294  0019                     	;# 
  1295  001A                     	;# 
  1296  001B                     	;# 
  1297  001C                     	;# 
  1298  008C                     	;# 
  1299  008D                     	;# 
  1300  008E                     	;# 
  1301  0090                     	;# 
  1302  0091                     	;# 
  1303  0092                     	;# 
  1304  0095                     	;# 
  1305  0096                     	;# 
  1306  0097                     	;# 
  1307  0099                     	;# 
  1308  009A                     	;# 
  1309  009B                     	;# 
  1310  009B                     	;# 
  1311  009C                     	;# 
  1312  009D                     	;# 
  1313  009E                     	;# 
  1314  010C                     	;# 
  1315  010D                     	;# 
  1316  010E                     	;# 
  1317  0116                     	;# 
  1318  0117                     	;# 
  1319  011D                     	;# 
  1320  018C                     	;# 
  1321  018D                     	;# 
  1322  018E                     	;# 
  1323  0191                     	;# 
  1324  0191                     	;# 
  1325  0192                     	;# 
  1326  0193                     	;# 
  1327  0193                     	;# 
  1328  0194                     	;# 
  1329  0195                     	;# 
  1330  0196                     	;# 
  1331  0197                     	;# 
  1332  0199                     	;# 
  1333  019A                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019C                     	;# 
  1339  019C                     	;# 
  1340  019D                     	;# 
  1341  019E                     	;# 
  1342  019F                     	;# 
  1343  020D                     	;# 
  1344  0210                     	;# 
  1345  0211                     	;# 
  1346  0211                     	;# 
  1347  0212                     	;# 
  1348  0212                     	;# 
  1349  0213                     	;# 
  1350  0213                     	;# 
  1351  0214                     	;# 
  1352  0214                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0216                     	;# 
  1357  0216                     	;# 
  1358  0217                     	;# 
  1359  0217                     	;# 
  1360  0291                     	;# 
  1361  0291                     	;# 
  1362  0292                     	;# 
  1363  0293                     	;# 
  1364  0298                     	;# 
  1365  0298                     	;# 
  1366  0299                     	;# 
  1367  029A                     	;# 
  1368  0394                     	;# 
  1369  0395                     	;# 
  1370  0396                     	;# 
  1371  0FE4                     	;# 
  1372  0FE5                     	;# 
  1373  0FE6                     	;# 
  1374  0FE7                     	;# 
  1375  0FE8                     	;# 
  1376  0FE9                     	;# 
  1377  0FEA                     	;# 
  1378  0FEB                     	;# 
  1379  0FED                     	;# 
  1380  0FEE                     	;# 
  1381  0FEF                     	;# 
  1382  0000                     	;# 
  1383  0001                     	;# 
  1384  0002                     	;# 
  1385  0003                     	;# 
  1386  0004                     	;# 
  1387  0005                     	;# 
  1388  0006                     	;# 
  1389  0007                     	;# 
  1390  0008                     	;# 
  1391  0009                     	;# 
  1392  000A                     	;# 
  1393  000B                     	;# 
  1394  000C                     	;# 
  1395  000D                     	;# 
  1396  000E                     	;# 
  1397  0010                     	;# 
  1398  0011                     	;# 
  1399  0012                     	;# 
  1400  0015                     	;# 
  1401  0016                     	;# 
  1402  0016                     	;# 
  1403  0017                     	;# 
  1404  0018                     	;# 
  1405  0019                     	;# 
  1406  001A                     	;# 
  1407  001B                     	;# 
  1408  001C                     	;# 
  1409  008C                     	;# 
  1410  008D                     	;# 
  1411  008E                     	;# 
  1412  0090                     	;# 
  1413  0091                     	;# 
  1414  0092                     	;# 
  1415  0095                     	;# 
  1416  0096                     	;# 
  1417  0097                     	;# 
  1418  0099                     	;# 
  1419  009A                     	;# 
  1420  009B                     	;# 
  1421  009B                     	;# 
  1422  009C                     	;# 
  1423  009D                     	;# 
  1424  009E                     	;# 
  1425  010C                     	;# 
  1426  010D                     	;# 
  1427  010E                     	;# 
  1428  0116                     	;# 
  1429  0117                     	;# 
  1430  011D                     	;# 
  1431  018C                     	;# 
  1432  018D                     	;# 
  1433  018E                     	;# 
  1434  0191                     	;# 
  1435  0191                     	;# 
  1436  0192                     	;# 
  1437  0193                     	;# 
  1438  0193                     	;# 
  1439  0194                     	;# 
  1440  0195                     	;# 
  1441  0196                     	;# 
  1442  0197                     	;# 
  1443  0199                     	;# 
  1444  019A                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019C                     	;# 
  1450  019C                     	;# 
  1451  019D                     	;# 
  1452  019E                     	;# 
  1453  019F                     	;# 
  1454  020D                     	;# 
  1455  0210                     	;# 
  1456  0211                     	;# 
  1457  0211                     	;# 
  1458  0212                     	;# 
  1459  0212                     	;# 
  1460  0213                     	;# 
  1461  0213                     	;# 
  1462  0214                     	;# 
  1463  0214                     	;# 
  1464  0215                     	;# 
  1465  0215                     	;# 
  1466  0215                     	;# 
  1467  0216                     	;# 
  1468  0216                     	;# 
  1469  0217                     	;# 
  1470  0217                     	;# 
  1471  0291                     	;# 
  1472  0291                     	;# 
  1473  0292                     	;# 
  1474  0293                     	;# 
  1475  0298                     	;# 
  1476  0298                     	;# 
  1477  0299                     	;# 
  1478  029A                     	;# 
  1479  0394                     	;# 
  1480  0395                     	;# 
  1481  0396                     	;# 
  1482  0FE4                     	;# 
  1483  0FE5                     	;# 
  1484  0FE6                     	;# 
  1485  0FE7                     	;# 
  1486  0FE8                     	;# 
  1487  0FE9                     	;# 
  1488  0FEA                     	;# 
  1489  0FEB                     	;# 
  1490  0FED                     	;# 
  1491  0FEE                     	;# 
  1492  0FEF                     	;# 
  1493  0000                     	;# 
  1494  0001                     	;# 
  1495  0002                     	;# 
  1496  0003                     	;# 
  1497  0004                     	;# 
  1498  0005                     	;# 
  1499  0006                     	;# 
  1500  0007                     	;# 
  1501  0008                     	;# 
  1502  0009                     	;# 
  1503  000A                     	;# 
  1504  000B                     	;# 
  1505  000C                     	;# 
  1506  000D                     	;# 
  1507  000E                     	;# 
  1508  0010                     	;# 
  1509  0011                     	;# 
  1510  0012                     	;# 
  1511  0015                     	;# 
  1512  0016                     	;# 
  1513  0016                     	;# 
  1514  0017                     	;# 
  1515  0018                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  008C                     	;# 
  1521  008D                     	;# 
  1522  008E                     	;# 
  1523  0090                     	;# 
  1524  0091                     	;# 
  1525  0092                     	;# 
  1526  0095                     	;# 
  1527  0096                     	;# 
  1528  0097                     	;# 
  1529  0099                     	;# 
  1530  009A                     	;# 
  1531  009B                     	;# 
  1532  009B                     	;# 
  1533  009C                     	;# 
  1534  009D                     	;# 
  1535  009E                     	;# 
  1536  010C                     	;# 
  1537  010D                     	;# 
  1538  010E                     	;# 
  1539  0116                     	;# 
  1540  0117                     	;# 
  1541  011D                     	;# 
  1542  018C                     	;# 
  1543  018D                     	;# 
  1544  018E                     	;# 
  1545  0191                     	;# 
  1546  0191                     	;# 
  1547  0192                     	;# 
  1548  0193                     	;# 
  1549  0193                     	;# 
  1550  0194                     	;# 
  1551  0195                     	;# 
  1552  0196                     	;# 
  1553  0197                     	;# 
  1554  0199                     	;# 
  1555  019A                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019C                     	;# 
  1561  019C                     	;# 
  1562  019D                     	;# 
  1563  019E                     	;# 
  1564  019F                     	;# 
  1565  020D                     	;# 
  1566  0210                     	;# 
  1567  0211                     	;# 
  1568  0211                     	;# 
  1569  0212                     	;# 
  1570  0212                     	;# 
  1571  0213                     	;# 
  1572  0213                     	;# 
  1573  0214                     	;# 
  1574  0214                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0216                     	;# 
  1579  0216                     	;# 
  1580  0217                     	;# 
  1581  0217                     	;# 
  1582  0291                     	;# 
  1583  0291                     	;# 
  1584  0292                     	;# 
  1585  0293                     	;# 
  1586  0298                     	;# 
  1587  0298                     	;# 
  1588  0299                     	;# 
  1589  029A                     	;# 
  1590  0394                     	;# 
  1591  0395                     	;# 
  1592  0396                     	;# 
  1593  0FE4                     	;# 
  1594  0FE5                     	;# 
  1595  0FE6                     	;# 
  1596  0FE7                     	;# 
  1597  0FE8                     	;# 
  1598  0FE9                     	;# 
  1599  0FEA                     	;# 
  1600  0FEB                     	;# 
  1601  0FED                     	;# 
  1602  0FEE                     	;# 
  1603  0FEF                     	;# 
  1604  0000                     	;# 
  1605  0001                     	;# 
  1606  0002                     	;# 
  1607  0003                     	;# 
  1608  0004                     	;# 
  1609  0005                     	;# 
  1610  0006                     	;# 
  1611  0007                     	;# 
  1612  0008                     	;# 
  1613  0009                     	;# 
  1614  000A                     	;# 
  1615  000B                     	;# 
  1616  000C                     	;# 
  1617  000D                     	;# 
  1618  000E                     	;# 
  1619  0010                     	;# 
  1620  0011                     	;# 
  1621  0012                     	;# 
  1622  0015                     	;# 
  1623  0016                     	;# 
  1624  0016                     	;# 
  1625  0017                     	;# 
  1626  0018                     	;# 
  1627  0019                     	;# 
  1628  001A                     	;# 
  1629  001B                     	;# 
  1630  001C                     	;# 
  1631  008C                     	;# 
  1632  008D                     	;# 
  1633  008E                     	;# 
  1634  0090                     	;# 
  1635  0091                     	;# 
  1636  0092                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0099                     	;# 
  1641  009A                     	;# 
  1642  009B                     	;# 
  1643  009B                     	;# 
  1644  009C                     	;# 
  1645  009D                     	;# 
  1646  009E                     	;# 
  1647  010C                     	;# 
  1648  010D                     	;# 
  1649  010E                     	;# 
  1650  0116                     	;# 
  1651  0117                     	;# 
  1652  011D                     	;# 
  1653  018C                     	;# 
  1654  018D                     	;# 
  1655  018E                     	;# 
  1656  0191                     	;# 
  1657  0191                     	;# 
  1658  0192                     	;# 
  1659  0193                     	;# 
  1660  0193                     	;# 
  1661  0194                     	;# 
  1662  0195                     	;# 
  1663  0196                     	;# 
  1664  0197                     	;# 
  1665  0199                     	;# 
  1666  019A                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019C                     	;# 
  1672  019C                     	;# 
  1673  019D                     	;# 
  1674  019E                     	;# 
  1675  019F                     	;# 
  1676  020D                     	;# 
  1677  0210                     	;# 
  1678  0211                     	;# 
  1679  0211                     	;# 
  1680  0212                     	;# 
  1681  0212                     	;# 
  1682  0213                     	;# 
  1683  0213                     	;# 
  1684  0214                     	;# 
  1685  0214                     	;# 
  1686  0215                     	;# 
  1687  0215                     	;# 
  1688  0215                     	;# 
  1689  0216                     	;# 
  1690  0216                     	;# 
  1691  0217                     	;# 
  1692  0217                     	;# 
  1693  0291                     	;# 
  1694  0291                     	;# 
  1695  0292                     	;# 
  1696  0293                     	;# 
  1697  0298                     	;# 
  1698  0298                     	;# 
  1699  0299                     	;# 
  1700  029A                     	;# 
  1701  0394                     	;# 
  1702  0395                     	;# 
  1703  0396                     	;# 
  1704  0FE4                     	;# 
  1705  0FE5                     	;# 
  1706  0FE6                     	;# 
  1707  0FE7                     	;# 
  1708  0FE8                     	;# 
  1709  0FE9                     	;# 
  1710  0FEA                     	;# 
  1711  0FEB                     	;# 
  1712  0FED                     	;# 
  1713  0FEE                     	;# 
  1714  0FEF                     	;# 
  1715  0000                     	;# 
  1716  0001                     	;# 
  1717  0002                     	;# 
  1718  0003                     	;# 
  1719  0004                     	;# 
  1720  0005                     	;# 
  1721  0006                     	;# 
  1722  0007                     	;# 
  1723  0008                     	;# 
  1724  0009                     	;# 
  1725  000A                     	;# 
  1726  000B                     	;# 
  1727  000C                     	;# 
  1728  000D                     	;# 
  1729  000E                     	;# 
  1730  0010                     	;# 
  1731  0011                     	;# 
  1732  0012                     	;# 
  1733  0015                     	;# 
  1734  0016                     	;# 
  1735  0016                     	;# 
  1736  0017                     	;# 
  1737  0018                     	;# 
  1738  0019                     	;# 
  1739  001A                     	;# 
  1740  001B                     	;# 
  1741  001C                     	;# 
  1742  008C                     	;# 
  1743  008D                     	;# 
  1744  008E                     	;# 
  1745  0090                     	;# 
  1746  0091                     	;# 
  1747  0092                     	;# 
  1748  0095                     	;# 
  1749  0096                     	;# 
  1750  0097                     	;# 
  1751  0099                     	;# 
  1752  009A                     	;# 
  1753  009B                     	;# 
  1754  009B                     	;# 
  1755  009C                     	;# 
  1756  009D                     	;# 
  1757  009E                     	;# 
  1758  010C                     	;# 
  1759  010D                     	;# 
  1760  010E                     	;# 
  1761  0116                     	;# 
  1762  0117                     	;# 
  1763  011D                     	;# 
  1764  018C                     	;# 
  1765  018D                     	;# 
  1766  018E                     	;# 
  1767  0191                     	;# 
  1768  0191                     	;# 
  1769  0192                     	;# 
  1770  0193                     	;# 
  1771  0193                     	;# 
  1772  0194                     	;# 
  1773  0195                     	;# 
  1774  0196                     	;# 
  1775  0197                     	;# 
  1776  0199                     	;# 
  1777  019A                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019C                     	;# 
  1783  019C                     	;# 
  1784  019D                     	;# 
  1785  019E                     	;# 
  1786  019F                     	;# 
  1787  020D                     	;# 
  1788  0210                     	;# 
  1789  0211                     	;# 
  1790  0211                     	;# 
  1791  0212                     	;# 
  1792  0212                     	;# 
  1793  0213                     	;# 
  1794  0213                     	;# 
  1795  0214                     	;# 
  1796  0214                     	;# 
  1797  0215                     	;# 
  1798  0215                     	;# 
  1799  0215                     	;# 
  1800  0216                     	;# 
  1801  0216                     	;# 
  1802  0217                     	;# 
  1803  0217                     	;# 
  1804  0291                     	;# 
  1805  0291                     	;# 
  1806  0292                     	;# 
  1807  0293                     	;# 
  1808  0298                     	;# 
  1809  0298                     	;# 
  1810  0299                     	;# 
  1811  029A                     	;# 
  1812  0394                     	;# 
  1813  0395                     	;# 
  1814  0396                     	;# 
  1815  0FE4                     	;# 
  1816  0FE5                     	;# 
  1817  0FE6                     	;# 
  1818  0FE7                     	;# 
  1819  0FE8                     	;# 
  1820  0FE9                     	;# 
  1821  0FEA                     	;# 
  1822  0FEB                     	;# 
  1823  0FED                     	;# 
  1824  0FEE                     	;# 
  1825  0FEF                     	;# 
  1826  0000                     	;# 
  1827  0001                     	;# 
  1828  0002                     	;# 
  1829  0003                     	;# 
  1830  0004                     	;# 
  1831  0005                     	;# 
  1832  0006                     	;# 
  1833  0007                     	;# 
  1834  0008                     	;# 
  1835  0009                     	;# 
  1836  000A                     	;# 
  1837  000B                     	;# 
  1838  000C                     	;# 
  1839  000D                     	;# 
  1840  000E                     	;# 
  1841  0010                     	;# 
  1842  0011                     	;# 
  1843  0012                     	;# 
  1844  0015                     	;# 
  1845  0016                     	;# 
  1846  0016                     	;# 
  1847  0017                     	;# 
  1848  0018                     	;# 
  1849  0019                     	;# 
  1850  001A                     	;# 
  1851  001B                     	;# 
  1852  001C                     	;# 
  1853  008C                     	;# 
  1854  008D                     	;# 
  1855  008E                     	;# 
  1856  0090                     	;# 
  1857  0091                     	;# 
  1858  0092                     	;# 
  1859  0095                     	;# 
  1860  0096                     	;# 
  1861  0097                     	;# 
  1862  0099                     	;# 
  1863  009A                     	;# 
  1864  009B                     	;# 
  1865  009B                     	;# 
  1866  009C                     	;# 
  1867  009D                     	;# 
  1868  009E                     	;# 
  1869  010C                     	;# 
  1870  010D                     	;# 
  1871  010E                     	;# 
  1872  0116                     	;# 
  1873  0117                     	;# 
  1874  011D                     	;# 
  1875  018C                     	;# 
  1876  018D                     	;# 
  1877  018E                     	;# 
  1878  0191                     	;# 
  1879  0191                     	;# 
  1880  0192                     	;# 
  1881  0193                     	;# 
  1882  0193                     	;# 
  1883  0194                     	;# 
  1884  0195                     	;# 
  1885  0196                     	;# 
  1886  0197                     	;# 
  1887  0199                     	;# 
  1888  019A                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019C                     	;# 
  1894  019C                     	;# 
  1895  019D                     	;# 
  1896  019E                     	;# 
  1897  019F                     	;# 
  1898  020D                     	;# 
  1899  0210                     	;# 
  1900  0211                     	;# 
  1901  0211                     	;# 
  1902  0212                     	;# 
  1903  0212                     	;# 
  1904  0213                     	;# 
  1905  0213                     	;# 
  1906  0214                     	;# 
  1907  0214                     	;# 
  1908  0215                     	;# 
  1909  0215                     	;# 
  1910  0215                     	;# 
  1911  0216                     	;# 
  1912  0216                     	;# 
  1913  0217                     	;# 
  1914  0217                     	;# 
  1915  0291                     	;# 
  1916  0291                     	;# 
  1917  0292                     	;# 
  1918  0293                     	;# 
  1919  0298                     	;# 
  1920  0298                     	;# 
  1921  0299                     	;# 
  1922  029A                     	;# 
  1923  0394                     	;# 
  1924  0395                     	;# 
  1925  0396                     	;# 
  1926  0FE4                     	;# 
  1927  0FE5                     	;# 
  1928  0FE6                     	;# 
  1929  0FE7                     	;# 
  1930  0FE8                     	;# 
  1931  0FE9                     	;# 
  1932  0FEA                     	;# 
  1933  0FEB                     	;# 
  1934  0FED                     	;# 
  1935  0FEE                     	;# 
  1936  0FEF                     	;# 
  1937  0000                     	;# 
  1938  0001                     	;# 
  1939  0002                     	;# 
  1940  0003                     	;# 
  1941  0004                     	;# 
  1942  0005                     	;# 
  1943  0006                     	;# 
  1944  0007                     	;# 
  1945  0008                     	;# 
  1946  0009                     	;# 
  1947  000A                     	;# 
  1948  000B                     	;# 
  1949  000C                     	;# 
  1950  000D                     	;# 
  1951  000E                     	;# 
  1952  0010                     	;# 
  1953  0011                     	;# 
  1954  0012                     	;# 
  1955  0015                     	;# 
  1956  0016                     	;# 
  1957  0016                     	;# 
  1958  0017                     	;# 
  1959  0018                     	;# 
  1960  0019                     	;# 
  1961  001A                     	;# 
  1962  001B                     	;# 
  1963  001C                     	;# 
  1964  008C                     	;# 
  1965  008D                     	;# 
  1966  008E                     	;# 
  1967  0090                     	;# 
  1968  0091                     	;# 
  1969  0092                     	;# 
  1970  0095                     	;# 
  1971  0096                     	;# 
  1972  0097                     	;# 
  1973  0099                     	;# 
  1974  009A                     	;# 
  1975  009B                     	;# 
  1976  009B                     	;# 
  1977  009C                     	;# 
  1978  009D                     	;# 
  1979  009E                     	;# 
  1980  010C                     	;# 
  1981  010D                     	;# 
  1982  010E                     	;# 
  1983  0116                     	;# 
  1984  0117                     	;# 
  1985  011D                     	;# 
  1986  018C                     	;# 
  1987  018D                     	;# 
  1988  018E                     	;# 
  1989  0191                     	;# 
  1990  0191                     	;# 
  1991  0192                     	;# 
  1992  0193                     	;# 
  1993  0193                     	;# 
  1994  0194                     	;# 
  1995  0195                     	;# 
  1996  0196                     	;# 
  1997  0197                     	;# 
  1998  0199                     	;# 
  1999  019A                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019C                     	;# 
  2005  019C                     	;# 
  2006  019D                     	;# 
  2007  019E                     	;# 
  2008  019F                     	;# 
  2009  020D                     	;# 
  2010  0210                     	;# 
  2011  0211                     	;# 
  2012  0211                     	;# 
  2013  0212                     	;# 
  2014  0212                     	;# 
  2015  0213                     	;# 
  2016  0213                     	;# 
  2017  0214                     	;# 
  2018  0214                     	;# 
  2019  0215                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0216                     	;# 
  2023  0216                     	;# 
  2024  0217                     	;# 
  2025  0217                     	;# 
  2026  0291                     	;# 
  2027  0291                     	;# 
  2028  0292                     	;# 
  2029  0293                     	;# 
  2030  0298                     	;# 
  2031  0298                     	;# 
  2032  0299                     	;# 
  2033  029A                     	;# 
  2034  0394                     	;# 
  2035  0395                     	;# 
  2036  0396                     	;# 
  2037  0FE4                     	;# 
  2038  0FE5                     	;# 
  2039  0FE6                     	;# 
  2040  0FE7                     	;# 
  2041  0FE8                     	;# 
  2042  0FE9                     	;# 
  2043  0FEA                     	;# 
  2044  0FEB                     	;# 
  2045  0FED                     	;# 
  2046  0FEE                     	;# 
  2047  0FEF                     	;# 
  2048  0000                     	;# 
  2049  0001                     	;# 
  2050  0002                     	;# 
  2051  0003                     	;# 
  2052  0004                     	;# 
  2053  0005                     	;# 
  2054  0006                     	;# 
  2055  0007                     	;# 
  2056  0008                     	;# 
  2057  0009                     	;# 
  2058  000A                     	;# 
  2059  000B                     	;# 
  2060  000C                     	;# 
  2061  000D                     	;# 
  2062  000E                     	;# 
  2063  0010                     	;# 
  2064  0011                     	;# 
  2065  0012                     	;# 
  2066  0015                     	;# 
  2067  0016                     	;# 
  2068  0016                     	;# 
  2069  0017                     	;# 
  2070  0018                     	;# 
  2071  0019                     	;# 
  2072  001A                     	;# 
  2073  001B                     	;# 
  2074  001C                     	;# 
  2075  008C                     	;# 
  2076  008D                     	;# 
  2077  008E                     	;# 
  2078  0090                     	;# 
  2079  0091                     	;# 
  2080  0092                     	;# 
  2081  0095                     	;# 
  2082  0096                     	;# 
  2083  0097                     	;# 
  2084  0099                     	;# 
  2085  009A                     	;# 
  2086  009B                     	;# 
  2087  009B                     	;# 
  2088  009C                     	;# 
  2089  009D                     	;# 
  2090  009E                     	;# 
  2091  010C                     	;# 
  2092  010D                     	;# 
  2093  010E                     	;# 
  2094  0116                     	;# 
  2095  0117                     	;# 
  2096  011D                     	;# 
  2097  018C                     	;# 
  2098  018D                     	;# 
  2099  018E                     	;# 
  2100  0191                     	;# 
  2101  0191                     	;# 
  2102  0192                     	;# 
  2103  0193                     	;# 
  2104  0193                     	;# 
  2105  0194                     	;# 
  2106  0195                     	;# 
  2107  0196                     	;# 
  2108  0197                     	;# 
  2109  0199                     	;# 
  2110  019A                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019C                     	;# 
  2116  019C                     	;# 
  2117  019D                     	;# 
  2118  019E                     	;# 
  2119  019F                     	;# 
  2120  020D                     	;# 
  2121  0210                     	;# 
  2122  0211                     	;# 
  2123  0211                     	;# 
  2124  0212                     	;# 
  2125  0212                     	;# 
  2126  0213                     	;# 
  2127  0213                     	;# 
  2128  0214                     	;# 
  2129  0214                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0216                     	;# 
  2134  0216                     	;# 
  2135  0217                     	;# 
  2136  0217                     	;# 
  2137  0291                     	;# 
  2138  0291                     	;# 
  2139  0292                     	;# 
  2140  0293                     	;# 
  2141  0298                     	;# 
  2142  0298                     	;# 
  2143  0299                     	;# 
  2144  029A                     	;# 
  2145  0394                     	;# 
  2146  0395                     	;# 
  2147  0396                     	;# 
  2148  0FE4                     	;# 
  2149  0FE5                     	;# 
  2150  0FE6                     	;# 
  2151  0FE7                     	;# 
  2152  0FE8                     	;# 
  2153  0FE9                     	;# 
  2154  0FEA                     	;# 
  2155  0FEB                     	;# 
  2156  0FED                     	;# 
  2157  0FEE                     	;# 
  2158  0FEF                     	;# 
  2159                           
  2160                           	psect	idataBANK4
  2161  1EE3                     __pidataBANK4:	
  2162                           
  2163                           ;initializer for __product
  2164  1EE3  3463               	retlw	99
  2165  1EE4  3402               	retlw	2
  2166  1EE5  3400               	retlw	0
  2167  1EE6  3400               	retlw	0
  2168  1EE7  3400               	retlw	0
  2169  1EE8  3400               	retlw	0
  2170  1EE9  3400               	retlw	0
  2171  1EEA  3400               	retlw	0
  2172  1EEB  3400               	retlw	0
  2173  1EEC  3400               	retlw	0
  2174  1EED  3400               	retlw	0
  2175  1EEE  3400               	retlw	0
  2176  1EEF  34FF               	retlw	255
  2177  1EF0  34FF               	retlw	255
  2178  1EF1  34FF               	retlw	255
  2179  1EF2  3400               	retlw	0
  2180  1EF3  3400               	retlw	0
  2181  1EF4  3400               	retlw	0
  2182  1EF5  3400               	retlw	0
  2183  1EF6  3400               	retlw	0
  2184  1EF7  3400               	retlw	0
  2185  1EF8  3400               	retlw	0
  2186  1EF9  3400               	retlw	0
  2187  1EFA  3400               	retlw	0
  2188  1EFB  3400               	retlw	0
  2189  1EFC  3400               	retlw	0
  2190  1EFD  3400               	retlw	0
  2191  1EFE  3400               	retlw	0
  2192  1EFF  3400               	retlw	0
  2193  1F00  3400               	retlw	0
  2194  1F01  3400               	retlw	0
  2195  1F02  3400               	retlw	0
  2196                           
  2197                           	psect	stringtext
  2198  1000                     __pstringtext:	
  2199  1000                     _CC2500_registers_address:	
  2200  1000  3403               	retlw	3
  2201  1001  3416               	retlw	22
  2202  1002  3417               	retlw	23
  2203  1003  341E               	retlw	30
  2204  1004  341F               	retlw	31
  2205  1005  3420               	retlw	32
  2206  1006  342A               	retlw	42
  2207  1007  342B               	retlw	43
  2208  1008  340B               	retlw	11
  2209  1009  340C               	retlw	12
  2210  100A  340D               	retlw	13
  2211  100B  340E               	retlw	14
  2212  100C  340F               	retlw	15
  2213  100D  3410               	retlw	16
  2214  100E  3411               	retlw	17
  2215  100F  3412               	retlw	18
  2216  1010  3413               	retlw	19
  2217  1011  3414               	retlw	20
  2218  1012  340A               	retlw	10
  2219  1013  3415               	retlw	21
  2220  1014  3421               	retlw	33
  2221  1015  3422               	retlw	34
  2222  1016  3418               	retlw	24
  2223  1017  3419               	retlw	25
  2224  1018  341A               	retlw	26
  2225  1019  341B               	retlw	27
  2226  101A  341C               	retlw	28
  2227  101B  341D               	retlw	29
  2228  101C  3423               	retlw	35
  2229  101D  3424               	retlw	36
  2230  101E  3425               	retlw	37
  2231  101F  3426               	retlw	38
  2232  1020  3429               	retlw	41
  2233  1021  342C               	retlw	44
  2234  1022  342D               	retlw	45
  2235  1023  342E               	retlw	46
  2236  1024  3400               	retlw	0
  2237  1025  3401               	retlw	1
  2238  1026  3402               	retlw	2
  2239  1027  3407               	retlw	7
  2240  1028  3408               	retlw	8
  2241  1029  3409               	retlw	9
  2242  102A  3406               	retlw	6
  2243  102B  3404               	retlw	4
  2244  102C  3405               	retlw	5
  2245  102D  3427               	retlw	39
  2246  102E  3428               	retlw	40
  2247  102F                     __end_of_CC2500_registers_address:	
  2248  102F                     _CC2500_rfSettings:	
  2249  102F  3407               	retlw	7
  2250  1030  3407               	retlw	7
  2251  1031  3430               	retlw	48
  2252  1032  3487               	retlw	135
  2253  1033  346B               	retlw	107
  2254  1034  34F8               	retlw	248
  2255  1035  347F               	retlw	127
  2256  1036  343F               	retlw	63
  2257  1037  3409               	retlw	9
  2258  1038  3400               	retlw	0
  2259  1039  345C               	retlw	92
  2260  103A  34A7               	retlw	167
  2261  103B  3462               	retlw	98
  2262  103C  3486               	retlw	134
  2263  103D  3483               	retlw	131
  2264  103E  3403               	retlw	3
  2265  103F  3422               	retlw	34
  2266  1040  34F8               	retlw	248
  2267  1041  3400               	retlw	0
  2268  1042  3444               	retlw	68
  2269  1043  34B6               	retlw	182
  2270  1044  3410               	retlw	16
  2271  1045  3418               	retlw	24
  2272  1046  341D               	retlw	29
  2273  1047  341C               	retlw	28
  2274  1048  34C7               	retlw	199
  2275  1049  3400               	retlw	0
  2276  104A  34B2               	retlw	178
  2277  104B  34EA               	retlw	234
  2278  104C  340A               	retlw	10
  2279  104D  3400               	retlw	0
  2280  104E  3411               	retlw	17
  2281  104F  3459               	retlw	89
  2282  1050  3488               	retlw	136
  2283  1051  3431               	retlw	49
  2284  1052  340B               	retlw	11
  2285  1053  342F               	retlw	47
  2286  1054  342E               	retlw	46
  2287  1055  3406               	retlw	6
  2288  1056  3404               	retlw	4
  2289  1057  3405               	retlw	5
  2290  1058  3400               	retlw	0
  2291  1059  3430               	retlw	48
  2292  105A  34D3               	retlw	211
  2293  105B  3491               	retlw	145
  2294  105C  3441               	retlw	65
  2295  105D  3400               	retlw	0
  2296  105E                     __end_of_CC2500_rfSettings:	
  2297  105E                     _CC2500_patable_vaule:	
  2298  105E  34FE               	retlw	254
  2299  105F  34FE               	retlw	254
  2300  1060  34FE               	retlw	254
  2301  1061  34FE               	retlw	254
  2302  1062  34FE               	retlw	254
  2303  1063  34FE               	retlw	254
  2304  1064  34FE               	retlw	254
  2305  1065  34FE               	retlw	254
  2306  1066                     __end_of_CC2500_patable_vaule:	
  2307                           
  2308                           	psect	nvCOMMON
  2309  007A                     __pnvCOMMON:	
  2310  007A                     _product:	
  2311  007A                     	ds	1
  2312  000C                     _PORTA	set	12
  2313  000D                     _PORTB	set	13
  2314  000E                     _PORTC	set	14
  2315  0018                     _T1CON	set	24
  2316  0017                     _TMR1H	set	23
  2317  0016                     _TMR1L	set	22
  2318  005F                     _GIE	set	95
  2319  005B                     _IOCIE	set	91
  2320  0058                     _IOCIF	set	88
  2321  005E                     _PEIE	set	94
  2322  0060                     _RA0	set	96
  2323  0063                     _RA3	set	99
  2324  0064                     _RA4	set	100
  2325  0066                     _RA6	set	102
  2326  0067                     _RA7	set	103
  2327  0068                     _RB0	set	104
  2328  0069                     _RB1	set	105
  2329  006A                     _RB2	set	106
  2330  006B                     _RB3	set	107
  2331  006C                     _RB4	set	108
  2332  006D                     _RB5	set	109
  2333  0070                     _RC0	set	112
  2334  0071                     _RC1	set	113
  2335  0072                     _RC2	set	114
  2336  0074                     _RC4	set	116
  2337  0075                     _RC5	set	117
  2338  0077                     _RC7	set	119
  2339  0088                     _TMR1IF	set	136
  2340  009D                     _ADCON0	set	157
  2341  009E                     _ADCON1	set	158
  2342  009C                     _ADRESH	set	156
  2343  009B                     _ADRESL	set	155
  2344  0099                     _OSCCON	set	153
  2345  008C                     _TRISA	set	140
  2346  008D                     _TRISB	set	141
  2347  008E                     _TRISC	set	142
  2348  0097                     _WDTCON	set	151
  2349  04E9                     _GO_nDONE	set	1257
  2350  0488                     _TMR1IE	set	1160
  2351  0117                     _FVRCON	set	279
  2352  010C                     _LATA	set	268
  2353  010D                     _LATB	set	269
  2354  010E                     _LATC	set	270
  2355  018C                     _ANSELA	set	396
  2356  018D                     _ANSELB	set	397
  2357  018E                     _ANSELC	set	398
  2358  0192                     _PMADRH	set	402
  2359  0191                     _PMADRL	set	401
  2360  0196                     _PMCON2	set	406
  2361  0194                     _PMDATH	set	404
  2362  0193                     _PMDATL	set	403
  2363  0CAE                     _CFGS	set	3246
  2364  0CAC                     _FREE	set	3244
  2365  0CAD                     _LWLO	set	3245
  2366  0CA8                     _RD	set	3240
  2367  0CA9                     _WR	set	3241
  2368  0CAA                     _WREN	set	3242
  2369  020D                     _WPUB	set	525
  2370  1069                     _WPUB1	set	4201
  2371  106A                     _WPUB2	set	4202
  2372  0396                     _IOCBF	set	918
  2373  0395                     _IOCBN	set	917
  2374  0394                     _IOCBP	set	916
  2375  1CB2                     _IOCBF2	set	7346
  2376                           
  2377                           ; #config settings
  2378  0000                     
  2379                           	psect	cinit
  2380  0015                     start_initialization:	
  2381  0015                     __initialization:	
  2382                           
  2383                           ; Clear objects allocated to BITCOMMON
  2384  0015  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2385                           
  2386                           ; Clear objects allocated to COMMON
  2387  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2388  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2389  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2390  0019  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK0
  2393  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  001B  30A0               	movlw	low __pbssBANK1
  2397  001C  0084               	movwf	4
  2398  001D  3000               	movlw	high __pbssBANK1
  2399  001E  0085               	movwf	5
  2400  001F  3048               	movlw	72
  2401  0020  319A  22B0  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  0023  3020               	movlw	low __pbssBANK2
  2405  0024  0084               	movwf	4
  2406  0025  3001               	movlw	high __pbssBANK2
  2407  0026  0085               	movwf	5
  2408  0027  304E               	movlw	78
  2409  0028  319A  22B0  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  002B  30A0               	movlw	low __pbssBANK3
  2413  002C  0084               	movwf	4
  2414  002D  3001               	movlw	high __pbssBANK3
  2415  002E  0085               	movwf	5
  2416  002F  3049               	movlw	73
  2417  0030  319A  22B0  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  0033  3020               	movlw	low __pbssBANK4
  2421  0034  0084               	movwf	4
  2422  0035  3002               	movlw	high __pbssBANK4
  2423  0036  0085               	movwf	5
  2424  0037  302E               	movlw	46
  2425  0038  319A  22B0  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK4
  2428  003B  30E3               	movlw	low __pidataBANK4
  2429  003C  0084               	movwf	4
  2430  003D  309E               	movlw	(high __pidataBANK4)| (0+128)
  2431  003E  0085               	movwf	5
  2432  003F  304E               	movlw	low __pdataBANK4
  2433  0040  0086               	movwf	6
  2434  0041  3002               	movlw	high __pdataBANK4
  2435  0042  0087               	movwf	7
  2436  0043  3020               	movlw	32
  2437  0044  319A  22AA         	fcall	init_ram
  2438  0046                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  0046                     __end_of__initialization:	
  2442  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0047  0020               	movlb	0
  2444  0048  3197  2F49         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03C8                     __pbitbssCOMMON:	
  2448  03C8                     _Receive_OK:	
  2449  03C8                     	ds	1
  2450  03C9                     _Transceive_OK:	
  2451  03C9                     	ds	1
  2452                           
  2453                           	psect	bssCOMMON
  2454  0075                     __pbssCOMMON:	
  2455  0075                     _Sw:	
  2456  0075                     	ds	2
  2457  0077                     _DelayOff:	
  2458  0077                     	ds	1
  2459  0078                     _DimmerLightsIntr:	
  2460  0078                     	ds	1
  2461                           
  2462                           	psect	bssBANK0
  2463  006F                     __pbssBANK0:	
  2464  006F                     _DimmerLights:	
  2465  006F                     	ds	1
  2466                           
  2467                           	psect	bssBANK1
  2468  00A0                     __pbssBANK1:	
  2469  00A0                     _RF1:	
  2470  00A0                     	ds	14
  2471  00AE                     _Buz1:	
  2472  00AE                     	ds	12
  2473  00BA                     _Dimmer:	
  2474  00BA                     	ds	3
  2475  00BD                     _Timer1:	
  2476  00BD                     	ds	3
  2477  00C0                     _LED:	
  2478  00C0                     	ds	2
  2479  00C2                     _RF_Count:	
  2480  00C2                     	ds	2
  2481  00C4                     _WDT:	
  2482  00C4                     	ds	2
  2483  00C6                     _CRC:	
  2484  00C6                     	ds	1
  2485  00C7                     _DimmerLights11:	
  2486  00C7                     	ds	1
  2487  00C8                     _DimmerLights22:	
  2488  00C8                     	ds	1
  2489  00C9                     _DimmerLightsIntrIOC:	
  2490  00C9                     	ds	1
  2491  00CA                     _RSSI:	
  2492  00CA                     	ds	1
  2493  00CB                     _Rx_Length:	
  2494  00CB                     	ds	1
  2495  00CC                     _SPI0Buffer:	
  2496  00CC                     	ds	1
  2497  00CD                     _SwDetect:	
  2498  00CD                     	ds	1
  2499  00CE                     _Tx_Length:	
  2500  00CE                     	ds	1
  2501  00CF                     _r_address:	
  2502  00CF                     	ds	1
  2503  00D0                     _r_data:	
  2504  00D0                     	ds	1
  2505  00D1                     _s_data:	
  2506  00D1                     	ds	1
  2507  00D2                     _Temp:	
  2508  00D2                     	ds	18
  2509  00E4                     _VarErrLED:	
  2510  00E4                     	ds	4
  2511                           
  2512                           	psect	bssBANK2
  2513  0120                     __pbssBANK2:	
  2514  0120                     _myMain:	
  2515  0120                     	ds	14
  2516  012E                     _Load:	
  2517  012E                     	ds	46
  2518  015C                     _DlySw1:	
  2519  015C                     	ds	5
  2520  0161                     _DlySw2:	
  2521  0161                     	ds	5
  2522  0166                     _VarLED1:	
  2523  0166                     	ds	4
  2524  016A                     _VarLED2:	
  2525  016A                     	ds	4
  2526                           
  2527                           	psect	bssBANK3
  2528  01A0                     __pbssBANK3:	
  2529  01A0                     _RF_Data:	
  2530  01A0                     	ds	30
  2531  01BE                     _DimmerLights1:	
  2532  01BE                     	ds	17
  2533  01CF                     _DimmerLights2:	
  2534  01CF                     	ds	17
  2535  01E0                     _Sw1:	
  2536  01E0                     	ds	9
  2537                           
  2538                           	psect	bssBANK4
  2539  0220                     __pbssBANK4:	
  2540  0220                     _Memory:	
  2541  0220                     	ds	37
  2542  0245                     _Sw2:	
  2543  0245                     	ds	9
  2544                           
  2545                           	psect	dataBANK4
  2546  024E                     __pdataBANK4:	
  2547  024E                     __product:	
  2548  024E                     	ds	32
  2549                           
  2550                           	psect	clrtext
  2551  1AB0                     clear_ram0:	
  2552                           ;	Called with FSR0 containing the base address, and
  2553                           ;	WREG with the size to clear
  2554                           
  2555  1AB0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2556  1AB1                     clrloop0:	
  2557  1AB1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2558  1AB2  3101               	addfsr 0,1
  2559  1AB3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2560  1AB4  2AB1               	goto	clrloop0	;have we reached the end yet?
  2561  1AB5  3400               	retlw	0	;all done for this memory range, return
  2562                           
  2563                           	psect	inittext
  2564  1AAA                     init_ram:	
  2565  1AAA  00FE               	movwf	126
  2566  1AAB                     initloop:	
  2567  1AAB  0012               	moviw fsr0++
  2568  1AAC  001E               	movwi fsr1++
  2569  1AAD  0BFE               	decfsz	126,f
  2570  1AAE  2AAB               	goto	initloop
  2571  1AAF  3400               	retlw	0
  2572                           
  2573                           	psect	cstackBANK3
  2574  01E9                     __pcstackBANK3:	
  2575  01E9                     ?_main:	
  2576  01E9                     main@argc:	
  2577                           ; 2 bytes @ 0x0
  2578                           
  2579                           
  2580                           ; 2 bytes @ 0x0
  2581  01E9                     	ds	2
  2582  01EB                     main@argv:	
  2583                           
  2584                           ; 2 bytes @ 0x2
  2585  01EB                     	ds	2
  2586                           
  2587                           	psect	cstackBANK1
  2588  00E8                     __pcstackBANK1:	
  2589  00E8                     setDimmerLights_ErrorClose@count:	
  2590  00E8                     Exception_Main@count:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593                           
  2594                           ; 1 bytes @ 0x0
  2595  00E8                     	ds	1
  2596  00E9                     setDimmerLights_ErrorClose@lights:	
  2597  00E9                     Exception_Main@error:	
  2598                           ; 1 bytes @ 0x1
  2599                           
  2600                           
  2601                           ; 1 bytes @ 0x1
  2602  00E9                     	ds	1
  2603  00EA                     setDimmerLights_ErrorClose@i:	
  2604  00EA                     Exception_Main@i:	
  2605                           ; 2 bytes @ 0x2
  2606                           
  2607                           
  2608                           ; 2 bytes @ 0x2
  2609  00EA                     	ds	2
  2610  00EC                     getRxData@error:	
  2611  00EC                     Exception_Main@i_3642:	
  2612                           ; 1 bytes @ 0x4
  2613                           
  2614                           
  2615                           ; 2 bytes @ 0x4
  2616  00EC                     	ds	1
  2617  00ED                     setRF_Main@loop_f:	
  2618                           
  2619                           ; 1 bytes @ 0x5
  2620  00ED                     	ds	1
  2621  00EE                     Exception_Main@lights:	
  2622  00EE                     setRF_Main@Receive_OK:	
  2623                           ; 1 bytes @ 0x6
  2624                           
  2625                           
  2626                           ; 1 bytes @ 0x6
  2627  00EE                     	ds	1
  2628  00EF                     setRF_Main@error:	
  2629                           
  2630                           ; 1 bytes @ 0x7
  2631  00EF                     	ds	1
  2632                           
  2633                           	psect	cstackCOMMON
  2634  0070                     __pcstackCOMMON:	
  2635  0070                     ?_CC2500_WriteCommand:	
  2636  0070                     ?_RF_Timeout_Counter:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setRF_TimeoutCleared:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_CC2500_WriteByte:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_CC2500_ReadStatus:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_CC2500_ReadByte:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_CC2500_PowerRST:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_CC2500_InitSetREG:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_CC2500_InitPATable:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_CC2500_ClearTXFIFO:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_CC2500_ClearRXFIFO:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_CC2500_FrequencyCabr:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_CC2500_SIDLEMode:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DlyOff_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_DlyOff_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setDimmerLights_ErrorClose:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_setDimmerLights_Initialization:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_setDimmerLights_Main:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_setDimmerLights_Line:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setTxData:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setLED_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setLED_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Fosc_Set:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_IO_Set:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TMR1_Set:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_ADC_Set:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_IOC_Set:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_WDT_Set:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_IOC_ISR:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_TMR1_ISR:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Timeout_Counter:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_set_TimeoutCleared:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Flash_Memory_Write:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Flash_Memory_Modify:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_WDT_Clearing:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_myMain_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Temp_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Load_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Switch_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_Initialization:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_getLoad_AD:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_getTemp_AD:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_my_MainTimer:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_Temp_Main:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_Load_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_Switch_Main:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_RF_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_Exception_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setLoad_AH_AL_Restore:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setTemp_Initialization:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_setTemp_Main:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_setRF_Initialization:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_setRF_Main:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_RF_RxDisable:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_getRxData:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setLog_Code:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setControl_Lights_Table:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setRFSW_Control:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setRFSW_AdjControl:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setRF_DimmerValue:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setSw_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setSw_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_Buzzer_Initialization:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_Buzzer_Main:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_CC2500_TxData:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_CC2500_RxData:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_CC2500_PowerOnInitial:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_DelayOffPointSelect:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_DelayOff_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_DelayOff_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_DimmerIntrIOCPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ??_DimmerIntrIOCPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DimmerIntrPointSelect:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ??_DimmerIntrPointSelect:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setDimmerLights_IntrControl:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_DimmerLightsPointSelect:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_DimmerLights_Initialization:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_setDimmerLights_SwOn:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_setDimmerLights_SwOff:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setDimmerLights_AdjOn:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_DimmerLights_Main:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_setDimmerLights_AdjRF:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_LedPointSelect:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_LED_Initialization:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_LED_Main:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_Mcu_Initialization:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_ISR:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_setDimmerReClock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_Flash_Memory_Initialization:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_Flash_Memory_Main:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_Flash_Memory_Unlock:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_Flash_Memory_Erasing:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_setMemory_Modify:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_setMemory_LoopSave:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_WDT_Main:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_setRF_Learn:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0070                     ?_TouchPower:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0070                     ?_SwPointSelect:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0070                     ?_DelayTimejudge:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0070                     ?_getLoad_OK:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getMain_All_Error_Status:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_getMain_LightsStatus:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_getDimmerLights_Allow_Condition:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_setPercentValue:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getPercentValue:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_Flash_Memory_Read:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_getRF_KeyStatus:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getSw_KeyStatus:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_getDelayOff_GO:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getDimmer_LoadGO:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getDimmerLights_Line:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getDimmerLights_Status:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getAll_DimmerLights_AdjSw:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getDimmer_Load_Status:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_getMain_Lights_Count:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x0
  2983  0070                     	ds	1
  2984  0071                     DimmerIntrIOCPointSelect@lights:	
  2985  0071                     DimmerIntrPointSelect@lights:	
  2986                           ; 1 bytes @ 0x1
  2987                           
  2988                           
  2989                           ; 1 bytes @ 0x1
  2990  0071                     	ds	1
  2991  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2992  0072                     ??_setDimmerLights_IntrControl:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998                           
  2999                           ; 1 bytes @ 0x2
  3000  0072                     	ds	1
  3001  0073                     ??_IOC_ISR:	
  3002  0073                     ??_setDimmerReClock:	
  3003                           ; 0 bytes @ 0x3
  3004                           
  3005  0073                     setDimmerLights_IntrControl@lights:	
  3006                           ; 0 bytes @ 0x3
  3007                           
  3008                           
  3009                           ; 1 bytes @ 0x3
  3010  0073                     	ds	1
  3011  0074                     ??_TMR1_ISR:	
  3012  0074                     ??_ISR:	
  3013                           ; 0 bytes @ 0x4
  3014                           
  3015                           
  3016                           ; 0 bytes @ 0x4
  3017  0074                     	ds	1
  3018                           
  3019                           	psect	cstackBANK0
  3020  0020                     __pcstackBANK0:	
  3021  0020                     ??_RF_Timeout_Counter:	
  3022  0020                     ??_setRF_TimeoutCleared:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_CC2500_WriteByte:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_CC2500_ReadByte:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ?_DelayTime_1us:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_getLoad_OK:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_getMain_All_Error_Status:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_getMain_LightsStatus:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_setDimmerLights_Line:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_setTxData:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_Fosc_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_IO_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_TMR1_Set:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_ADC_Set:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_IOC_Set:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_WDT_Set:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Timeout_Counter:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_set_TimeoutCleared:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Flash_Memory_Read:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ?_setMemory_Data:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Flash_Memory_Write:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_WDT_Clearing:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_myMain_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_Temp_Initialization:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_setLoad_AH_AL_Restore:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_setTemp_Initialization:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_setRF_Initialization:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_getRF_KeyStatus:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_getSw_KeyStatus:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_Buzzer_Initialization:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_Buzzer_Main:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ??_DelayOffPointSelect:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_DimmerLightsPointSelect:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_getDimmer_LoadGO:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_getDimmerLights_Line:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getDimmer_Load_Status:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_LedPointSelect:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_Flash_Memory_Unlock:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_Flash_Memory_Erasing:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_setMemory_Modify:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_setMemory_LoopSave:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_WDT_Main:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_getMain_Lights_Count:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_setRF_Learn:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_TouchPower:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_SwPointSelect:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ?___bmul:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ?_getBuz_GO:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0020                     ?_getAD:	
  3164                           ; 2 bytes @ 0x0
  3165                           
  3166  0020                     ?___wmul:	
  3167                           ; 2 bytes @ 0x0
  3168                           
  3169  0020                     ?___awdiv:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     ?___lwdiv:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___ftpack:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     getDimmer_LoadGO@loadgo:	
  3179                           ; 3 bytes @ 0x0
  3180                           
  3181  0020                     setDimmerLights_Line@lights:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0020                     getDimmer_Load_Status@status:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0020                     LedPointSelect@led:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     getAD@adcon1:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     setMemory_Data@data:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     getMain_LightsStatus@status:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     getMain_Lights_Count@count:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getLoad_OK@ok:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     SwPointSelect@sw:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     ___bmul@multiplicand:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     DelayTime_1us@count:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     ___wmul@multiplier:	
  3215                           ; 2 bytes @ 0x0
  3216                           
  3217  0020                     ___awdiv@divisor:	
  3218                           ; 2 bytes @ 0x0
  3219                           
  3220  0020                     ___lwdiv@divisor:	
  3221                           ; 2 bytes @ 0x0
  3222                           
  3223  0020                     ___ftpack@arg:	
  3224                           ; 2 bytes @ 0x0
  3225                           
  3226                           
  3227                           ; 3 bytes @ 0x0
  3228  0020                     	ds	1
  3229  0021                     ??_getDimmerLights_Allow_Condition:	
  3230  0021                     ?_setLED:	
  3231                           ; 0 bytes @ 0x1
  3232                           
  3233  0021                     ??_setLED_Main:	
  3234                           ; 0 bytes @ 0x1
  3235                           
  3236  0021                     ??_setMemory_Data:	
  3237                           ; 0 bytes @ 0x1
  3238                           
  3239  0021                     ??_RF_Initialization:	
  3240                           ; 0 bytes @ 0x1
  3241                           
  3242  0021                     ??_Mcu_Initialization:	
  3243                           ; 0 bytes @ 0x1
  3244                           
  3245  0021                     ??___bmul:	
  3246                           ; 0 bytes @ 0x1
  3247                           
  3248  0021                     CC2500_WriteByte@loop_a:	
  3249                           ; 0 bytes @ 0x1
  3250                           
  3251  0021                     CC2500_ReadByte@loop_b:	
  3252                           ; 1 bytes @ 0x1
  3253                           
  3254  0021                     DelayOffPointSelect@sw:	
  3255                           ; 1 bytes @ 0x1
  3256                           
  3257  0021                     DimmerLightsPointSelect@lights:	
  3258                           ; 1 bytes @ 0x1
  3259                           
  3260  0021                     getDimmerLights_Line@line:	
  3261                           ; 1 bytes @ 0x1
  3262                           
  3263  0021                     setLED@command:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     Flash_Memory_Read@i:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     Flash_Memory_Write@i:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     setMemory_Modify@command:	
  3273                           ; 1 bytes @ 0x1
  3274                           
  3275  0021                     setMemory_LoopSave@command:	
  3276                           ; 1 bytes @ 0x1
  3277                           
  3278  0021                     getMain_Lights_Count@status1:	
  3279                           ; 1 bytes @ 0x1
  3280                           
  3281  0021                     setLoad_AH_AL_Restore@i:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     setRF_Learn@command:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     getRF_KeyStatus@key:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     _getSw_KeyStatus$6287:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     _getMain_All_Error_Status$3627:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296                           
  3297                           ; 2 bytes @ 0x1
  3298  0021                     	ds	1
  3299  0022                     ??_CC2500_WriteCommand:	
  3300  0022                     ??_CC2500_ReadStatus:	
  3301                           ; 0 bytes @ 0x2
  3302                           
  3303  0022                     ??_DelayTime_1us:	
  3304                           ; 0 bytes @ 0x2
  3305                           
  3306  0022                     ?_CC2500_WriteREG:	
  3307                           ; 0 bytes @ 0x2
  3308                           
  3309  0022                     ??_DlyOff_Initialization:	
  3310                           ; 0 bytes @ 0x2
  3311                           
  3312  0022                     ??_setDimmerLights_Initialization:	
  3313                           ; 0 bytes @ 0x2
  3314                           
  3315  0022                     ??_setLED:	
  3316                           ; 0 bytes @ 0x2
  3317                           
  3318  0022                     ??_Load_Initialization:	
  3319                           ; 0 bytes @ 0x2
  3320                           
  3321  0022                     ??_getBuz_GO:	
  3322                           ; 0 bytes @ 0x2
  3323                           
  3324  0022                     ??_getDelayOff_GO:	
  3325                           ; 0 bytes @ 0x2
  3326                           
  3327  0022                     ??_setDimmerLights_AdjOn:	
  3328                           ; 0 bytes @ 0x2
  3329                           
  3330  0022                     ??_getDimmerLights_Status:	
  3331                           ; 0 bytes @ 0x2
  3332                           
  3333  0022                     ??_getAll_DimmerLights_AdjSw:	
  3334                           ; 0 bytes @ 0x2
  3335                           
  3336  0022                     CC2500_WriteREG@value:	
  3337                           ; 0 bytes @ 0x2
  3338                           
  3339  0022                     DlyOff_Initialization@sw:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0022                     getDelayOff_GO@sw:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0022                     setDimmerLights_AdjOn@sw:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     _getDimmerLights_Allow_Condition$2341:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     getDimmerLights_Status@lights:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0022                     setLED@led:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0022                     Flash_Memory_Read@address:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0022                     setMemory_Data@address:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0022                     getMain_Lights_Count@status2:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0022                     _getRF_KeyStatus$5297:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0022                     _getSw_KeyStatus$6288:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0022                     ___bmul@product:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0022                     DelayTime_1us@i:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0022                     ___wmul@multiplicand:	
  3379                           ; 2 bytes @ 0x2
  3380                           
  3381  0022                     ___awdiv@dividend:	
  3382                           ; 2 bytes @ 0x2
  3383                           
  3384  0022                     ___lwdiv@dividend:	
  3385                           ; 2 bytes @ 0x2
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x2
  3389  0022                     	ds	1
  3390  0023                     ??_CC2500_WriteREG:	
  3391  0023                     ??_setLED_Initialization:	
  3392                           ; 0 bytes @ 0x3
  3393                           
  3394  0023                     ??_setSw_Initialization:	
  3395                           ; 0 bytes @ 0x3
  3396                           
  3397  0023                     ??_DelayOff_Initialization:	
  3398                           ; 0 bytes @ 0x3
  3399                           
  3400  0023                     ??_getAD:	
  3401                           ; 0 bytes @ 0x3
  3402                           
  3403  0023                     CC2500_WriteCommand@command:	
  3404                           ; 0 bytes @ 0x3
  3405                           
  3406  0023                     CC2500_ReadStatus@status_addr:	
  3407                           ; 1 bytes @ 0x3
  3408                           
  3409  0023                     getDelayOff_GO@go:	
  3410                           ; 1 bytes @ 0x3
  3411                           
  3412  0023                     setDimmerLights_Initialization@lights:	
  3413                           ; 1 bytes @ 0x3
  3414                           
  3415  0023                     _getDimmerLights_Allow_Condition$2342:	
  3416                           ; 1 bytes @ 0x3
  3417                           
  3418  0023                     getDimmerLights_Status@status:	
  3419                           ; 1 bytes @ 0x3
  3420                           
  3421  0023                     getAll_DimmerLights_AdjSw@count:	
  3422                           ; 1 bytes @ 0x3
  3423                           
  3424  0023                     setLED_Initialization@led:	
  3425                           ; 1 bytes @ 0x3
  3426                           
  3427  0023                     setLED_Main@led:	
  3428                           ; 1 bytes @ 0x3
  3429                           
  3430  0023                     getAD@adcon0:	
  3431                           ; 1 bytes @ 0x3
  3432                           
  3433  0023                     Flash_Memory_Read@ret:	
  3434                           ; 1 bytes @ 0x3
  3435                           
  3436  0023                     setSw_Initialization@sw:	
  3437                           ; 1 bytes @ 0x3
  3438                           
  3439  0023                     getSw_KeyStatus@status:	
  3440                           ; 1 bytes @ 0x3
  3441                           
  3442  0023                     ___bmul@multiplier:	
  3443                           ; 1 bytes @ 0x3
  3444                           
  3445  0023                     ___ftpack@exp:	
  3446                           ; 1 bytes @ 0x3
  3447                           
  3448  0023                     _getMain_All_Error_Status$3628:	
  3449                           ; 1 bytes @ 0x3
  3450                           
  3451                           
  3452                           ; 2 bytes @ 0x3
  3453  0023                     	ds	1
  3454  0024                     ??_CC2500_ClearTXFIFO:	
  3455  0024                     ??_CC2500_ClearRXFIFO:	
  3456                           ; 0 bytes @ 0x4
  3457                           
  3458  0024                     ??_CC2500_SIDLEMode:	
  3459                           ; 0 bytes @ 0x4
  3460                           
  3461  0024                     ??_DelayTimejudge:	
  3462                           ; 0 bytes @ 0x4
  3463                           
  3464  0024                     ??_Flash_Memory_Modify:	
  3465                           ; 0 bytes @ 0x4
  3466                           
  3467  0024                     ??_Switch_Initialization:	
  3468                           ; 0 bytes @ 0x4
  3469                           
  3470  0024                     ??_getLoad_AD:	
  3471                           ; 0 bytes @ 0x4
  3472                           
  3473  0024                     ??_getTemp_AD:	
  3474                           ; 0 bytes @ 0x4
  3475                           
  3476  0024                     ??_RF_RxDisable:	
  3477                           ; 0 bytes @ 0x4
  3478                           
  3479  0024                     ??_CC2500_TxData:	
  3480                           ; 0 bytes @ 0x4
  3481                           
  3482  0024                     ??_CC2500_RxData:	
  3483                           ; 0 bytes @ 0x4
  3484                           
  3485  0024                     ??_DimmerLights_Initialization:	
  3486                           ; 0 bytes @ 0x4
  3487                           
  3488  0024                     ??_LED_Initialization:	
  3489                           ; 0 bytes @ 0x4
  3490                           
  3491  0024                     ??_LED_Main:	
  3492                           ; 0 bytes @ 0x4
  3493                           
  3494  0024                     ??___wmul:	
  3495                           ; 0 bytes @ 0x4
  3496                           
  3497  0024                     ??___awdiv:	
  3498                           ; 0 bytes @ 0x4
  3499                           
  3500  0024                     ??___lwdiv:	
  3501                           ; 0 bytes @ 0x4
  3502                           
  3503  0024                     CC2500_WriteREG@w_addr:	
  3504                           ; 0 bytes @ 0x4
  3505                           
  3506  0024                     _getDimmerLights_Allow_Condition$2343:	
  3507                           ; 1 bytes @ 0x4
  3508                           
  3509  0024                     getSw_KeyStatus@sw:	
  3510                           ; 1 bytes @ 0x4
  3511                           
  3512  0024                     ___ftpack@sign:	
  3513                           ; 1 bytes @ 0x4
  3514                           
  3515  0024                     getBuz_GO@i:	
  3516                           ; 1 bytes @ 0x4
  3517                           
  3518  0024                     DelayTime_1us@j:	
  3519                           ; 2 bytes @ 0x4
  3520                           
  3521  0024                     getAll_DimmerLights_AdjSw@i:	
  3522                           ; 2 bytes @ 0x4
  3523                           
  3524  0024                     ___wmul@product:	
  3525                           ; 2 bytes @ 0x4
  3526                           
  3527                           
  3528                           ; 2 bytes @ 0x4
  3529  0024                     	ds	1
  3530  0025                     ??_CC2500_InitSetREG:	
  3531  0025                     ??_CC2500_InitPATable:	
  3532                           ; 0 bytes @ 0x5
  3533                           
  3534  0025                     ??___ftpack:	
  3535                           ; 0 bytes @ 0x5
  3536                           
  3537  0025                     CC2500_TxData@loop_e:	
  3538                           ; 0 bytes @ 0x5
  3539                           
  3540  0025                     CC2500_RxData@loop_f:	
  3541                           ; 1 bytes @ 0x5
  3542                           
  3543  0025                     getDimmerLights_Allow_Condition@lights:	
  3544                           ; 1 bytes @ 0x5
  3545                           
  3546  0025                     Flash_Memory_Modify@i:	
  3547                           ; 1 bytes @ 0x5
  3548                           
  3549  0025                     getMain_All_Error_Status@command:	
  3550                           ; 1 bytes @ 0x5
  3551                           
  3552  0025                     getTemp_AD@channel:	
  3553                           ; 1 bytes @ 0x5
  3554                           
  3555  0025                     ___awdiv@counter:	
  3556                           ; 1 bytes @ 0x5
  3557                           
  3558  0025                     ___lwdiv@counter:	
  3559                           ; 1 bytes @ 0x5
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x5
  3563  0025                     	ds	1
  3564  0026                     ??_CC2500_PowerRST:	
  3565  0026                     ??_CC2500_FrequencyCabr:	
  3566                           ; 0 bytes @ 0x6
  3567                           
  3568  0026                     ??_Flash_Memory_Main:	
  3569                           ; 0 bytes @ 0x6
  3570                           
  3571  0026                     CC2500_InitSetREG@temp1:	
  3572                           ; 0 bytes @ 0x6
  3573                           
  3574  0026                     CC2500_InitPATable@temp:	
  3575                           ; 1 bytes @ 0x6
  3576                           
  3577  0026                     DelayTimejudge@i:	
  3578                           ; 1 bytes @ 0x6
  3579                           
  3580  0026                     getDimmerLights_Allow_Condition@allow:	
  3581                           ; 1 bytes @ 0x6
  3582                           
  3583  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3584                           ; 1 bytes @ 0x6
  3585                           
  3586  0026                     getMain_All_Error_Status@status:	
  3587                           ; 1 bytes @ 0x6
  3588                           
  3589  0026                     getLoad_AD@channel:	
  3590                           ; 1 bytes @ 0x6
  3591                           
  3592  0026                     ___awdiv@sign:	
  3593                           ; 1 bytes @ 0x6
  3594                           
  3595  0026                     ___lwdiv@quotient:	
  3596                           ; 1 bytes @ 0x6
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x6
  3600  0026                     	ds	1
  3601  0027                     CC2500_InitSetREG@temp2:	
  3602  0027                     CC2500_InitPATable@loop_d:	
  3603                           ; 1 bytes @ 0x7
  3604                           
  3605  0027                     DelayTimejudge@j:	
  3606                           ; 1 bytes @ 0x7
  3607                           
  3608  0027                     getLoad_AD@k:	
  3609                           ; 1 bytes @ 0x7
  3610                           
  3611  0027                     ___awdiv@quotient:	
  3612                           ; 1 bytes @ 0x7
  3613                           
  3614                           
  3615                           ; 2 bytes @ 0x7
  3616  0027                     	ds	1
  3617  0028                     ??_Load_Main:	
  3618  0028                     ?___awtoft:	
  3619                           ; 0 bytes @ 0x8
  3620                           
  3621  0028                     CC2500_InitSetREG@loop_c:	
  3622                           ; 3 bytes @ 0x8
  3623                           
  3624  0028                     DelayTimejudge@k:	
  3625                           ; 1 bytes @ 0x8
  3626                           
  3627  0028                     getLoad_AD@j:	
  3628                           ; 1 bytes @ 0x8
  3629                           
  3630  0028                     ___awtoft@c:	
  3631                           ; 1 bytes @ 0x8
  3632                           
  3633                           
  3634                           ; 2 bytes @ 0x8
  3635  0028                     	ds	1
  3636  0029                     ?_setBuz:	
  3637  0029                     ??_CC2500_PowerOnInitial:	
  3638                           ; 0 bytes @ 0x9
  3639                           
  3640  0029                     DelayTimejudge@value:	
  3641                           ; 0 bytes @ 0x9
  3642                           
  3643  0029                     getLoad_AD@i:	
  3644                           ; 1 bytes @ 0x9
  3645                           
  3646  0029                     setBuz@time:	
  3647                           ; 1 bytes @ 0x9
  3648                           
  3649                           
  3650                           ; 2 bytes @ 0x9
  3651  0029                     	ds	1
  3652  002A                     Load_Main@error:	
  3653                           
  3654                           ; 1 bytes @ 0xA
  3655  002A                     	ds	1
  3656  002B                     ??_setBuz:	
  3657  002B                     ??___awtoft:	
  3658                           ; 0 bytes @ 0xB
  3659                           
  3660  002B                     Load_Main@Load_Status:	
  3661                           ; 0 bytes @ 0xB
  3662                           
  3663                           
  3664                           ; 1 bytes @ 0xB
  3665  002B                     	ds	1
  3666  002C                     setBuz@count:	
  3667  002C                     Load_Main@i:	
  3668                           ; 1 bytes @ 0xC
  3669                           
  3670                           
  3671                           ; 2 bytes @ 0xC
  3672  002C                     	ds	1
  3673  002D                     ??_my_MainTimer:	
  3674  002D                     ??_setDimmerLights_SwOn:	
  3675                           ; 0 bytes @ 0xD
  3676                           
  3677  002D                     ___awtoft@sign:	
  3678                           ; 0 bytes @ 0xD
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0xD
  3682  002D                     	ds	1
  3683  002E                     ?___ftdiv:	
  3684  002E                     ?___ftmul:	
  3685                           ; 3 bytes @ 0xE
  3686                           
  3687  002E                     _setDimmerLights_SwOn$2322:	
  3688                           ; 3 bytes @ 0xE
  3689                           
  3690  002E                     ___ftdiv@f2:	
  3691                           ; 1 bytes @ 0xE
  3692                           
  3693  002E                     ___ftmul@f1:	
  3694                           ; 3 bytes @ 0xE
  3695                           
  3696                           
  3697                           ; 3 bytes @ 0xE
  3698  002E                     	ds	1
  3699  002F                     _setDimmerLights_SwOn$2323:	
  3700                           
  3701                           ; 1 bytes @ 0xF
  3702  002F                     	ds	1
  3703  0030                     setDimmerLights_SwOn@idle:	
  3704                           
  3705                           ; 1 bytes @ 0x10
  3706  0030                     	ds	1
  3707  0031                     setDimmerLights_SwOn@sw:	
  3708  0031                     ___ftdiv@f1:	
  3709                           ; 1 bytes @ 0x11
  3710                           
  3711  0031                     ___ftmul@f2:	
  3712                           ; 3 bytes @ 0x11
  3713                           
  3714                           
  3715                           ; 3 bytes @ 0x11
  3716  0031                     	ds	3
  3717  0034                     ??___ftdiv:	
  3718  0034                     ??___ftmul:	
  3719                           ; 0 bytes @ 0x14
  3720                           
  3721                           
  3722                           ; 0 bytes @ 0x14
  3723  0034                     	ds	4
  3724  0038                     ___ftdiv@cntr:	
  3725  0038                     ___ftmul@exp:	
  3726                           ; 1 bytes @ 0x18
  3727                           
  3728                           
  3729                           ; 1 bytes @ 0x18
  3730  0038                     	ds	1
  3731  0039                     ___ftdiv@f3:	
  3732  0039                     ___ftmul@f3_as_product:	
  3733                           ; 3 bytes @ 0x19
  3734                           
  3735                           
  3736                           ; 3 bytes @ 0x19
  3737  0039                     	ds	3
  3738  003C                     ___ftdiv@exp:	
  3739  003C                     ___ftmul@cntr:	
  3740                           ; 1 bytes @ 0x1C
  3741                           
  3742                           
  3743                           ; 1 bytes @ 0x1C
  3744  003C                     	ds	1
  3745  003D                     ___ftdiv@sign:	
  3746  003D                     ___ftmul@sign:	
  3747                           ; 1 bytes @ 0x1D
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x1D
  3751  003D                     	ds	1
  3752  003E                     ?___ftneg:	
  3753  003E                     ___ftneg@f1:	
  3754                           ; 3 bytes @ 0x1E
  3755                           
  3756                           
  3757                           ; 3 bytes @ 0x1E
  3758  003E                     	ds	3
  3759  0041                     ??___ftneg:	
  3760  0041                     ?___ftadd:	
  3761                           ; 0 bytes @ 0x21
  3762                           
  3763  0041                     ___ftadd@f1:	
  3764                           ; 3 bytes @ 0x21
  3765                           
  3766                           
  3767                           ; 3 bytes @ 0x21
  3768  0041                     	ds	3
  3769  0044                     ___ftadd@f2:	
  3770                           
  3771                           ; 3 bytes @ 0x24
  3772  0044                     	ds	3
  3773  0047                     ??___ftadd:	
  3774                           
  3775                           ; 0 bytes @ 0x27
  3776  0047                     	ds	4
  3777  004B                     ___ftadd@sign:	
  3778                           
  3779                           ; 1 bytes @ 0x2B
  3780  004B                     	ds	1
  3781  004C                     ___ftadd@exp2:	
  3782                           
  3783                           ; 1 bytes @ 0x2C
  3784  004C                     	ds	1
  3785  004D                     ___ftadd@exp1:	
  3786                           
  3787                           ; 1 bytes @ 0x2D
  3788  004D                     	ds	1
  3789  004E                     ?___fttol:	
  3790  004E                     ___fttol@f1:	
  3791                           ; 4 bytes @ 0x2E
  3792                           
  3793                           
  3794                           ; 3 bytes @ 0x2E
  3795  004E                     	ds	4
  3796  0052                     ??___fttol:	
  3797                           
  3798                           ; 0 bytes @ 0x32
  3799  0052                     	ds	4
  3800  0056                     ___fttol@sign1:	
  3801                           
  3802                           ; 1 bytes @ 0x36
  3803  0056                     	ds	1
  3804  0057                     ___fttol@lval:	
  3805                           
  3806                           ; 4 bytes @ 0x37
  3807  0057                     	ds	4
  3808  005B                     ___fttol@exp1:	
  3809                           
  3810                           ; 1 bytes @ 0x3B
  3811  005B                     	ds	1
  3812  005C                     ??_setPercentValue:	
  3813  005C                     ??_getPercentValue:	
  3814                           ; 0 bytes @ 0x3C
  3815                           
  3816                           
  3817                           ; 0 bytes @ 0x3C
  3818  005C                     	ds	2
  3819  005E                     getPercentValue@value:	
  3820  005E                     setPercentValue@value:	
  3821                           ; 1 bytes @ 0x3E
  3822                           
  3823                           
  3824                           ; 1 bytes @ 0x3E
  3825  005E                     	ds	1
  3826  005F                     getPercentValue@i:	
  3827  005F                     setPercentValue@i:	
  3828                           ; 3 bytes @ 0x3F
  3829                           
  3830                           
  3831                           ; 3 bytes @ 0x3F
  3832  005F                     	ds	3
  3833  0062                     ?_setProductData:	
  3834  0062                     ??_setDimmerLights_AdjRF:	
  3835                           ; 0 bytes @ 0x42
  3836                           
  3837  0062                     ??_Flash_Memory_Initialization:	
  3838                           ; 0 bytes @ 0x42
  3839                           
  3840  0062                     setProductData@value:	
  3841                           ; 0 bytes @ 0x42
  3842                           
  3843                           
  3844                           ; 1 bytes @ 0x42
  3845  0062                     	ds	1
  3846  0063                     ??_setProductData:	
  3847  0063                     setDimmerLights_AdjRF@lights:	
  3848                           ; 0 bytes @ 0x43
  3849                           
  3850  0063                     Flash_Memory_Initialization@i:	
  3851                           ; 1 bytes @ 0x43
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x43
  3855  0063                     	ds	2
  3856  0065                     setProductData@address:	
  3857                           
  3858                           ; 1 bytes @ 0x45
  3859  0065                     	ds	1
  3860  0066                     ?_setRF_DimmerLights:	
  3861  0066                     ??_setTemp_Main:	
  3862                           ; 0 bytes @ 0x46
  3863                           
  3864  0066                     ??_setLog_Code:	
  3865                           ; 0 bytes @ 0x46
  3866                           
  3867  0066                     ??_setRF_DimmerValue:	
  3868                           ; 0 bytes @ 0x46
  3869                           
  3870  0066                     ?_setDelayOff_GO:	
  3871                           ; 0 bytes @ 0x46
  3872                           
  3873  0066                     setDelayOff_GO@command:	
  3874                           ; 0 bytes @ 0x46
  3875                           
  3876  0066                     setRF_DimmerLights@on:	
  3877                           ; 1 bytes @ 0x46
  3878                           
  3879                           
  3880                           ; 1 bytes @ 0x46
  3881  0066                     	ds	1
  3882  0067                     ??_setRF_DimmerLights:	
  3883  0067                     setDelayOff_GO@value:	
  3884                           ; 0 bytes @ 0x47
  3885                           
  3886  0067                     setRF_DimmerValue@lights:	
  3887                           ; 1 bytes @ 0x47
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0x47
  3891  0067                     	ds	1
  3892  0068                     ??_setRFSW_AdjControl:	
  3893  0068                     ??_setDelayOff_GO:	
  3894                           ; 0 bytes @ 0x48
  3895                           
  3896  0068                     setTemp_Main@error:	
  3897                           ; 0 bytes @ 0x48
  3898                           
  3899                           
  3900                           ; 1 bytes @ 0x48
  3901  0068                     	ds	1
  3902  0069                     ??_Temp_Main:	
  3903  0069                     setDelayOff_GO@sw:	
  3904                           ; 0 bytes @ 0x49
  3905                           
  3906  0069                     setRF_DimmerLights@status:	
  3907                           ; 1 bytes @ 0x49
  3908                           
  3909                           
  3910                           ; 1 bytes @ 0x49
  3911  0069                     	ds	1
  3912  006A                     ??_setDimmerLights_SwOff:	
  3913  006A                     setDimmerLights_SwOff@sw:	
  3914                           ; 0 bytes @ 0x4A
  3915                           
  3916  006A                     setRFSW_AdjControl@status:	
  3917                           ; 1 bytes @ 0x4A
  3918                           
  3919  006A                     setRF_DimmerLights@lights:	
  3920                           ; 1 bytes @ 0x4A
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0x4A
  3924  006A                     	ds	1
  3925  006B                     ??_setDimmerLights_ErrorClose:	
  3926  006B                     ?_setDimmerLights:	
  3927                           ; 0 bytes @ 0x4B
  3928                           
  3929  006B                     ?_setDimmerLights_Adj:	
  3930                           ; 0 bytes @ 0x4B
  3931                           
  3932  006B                     ??_Exception_Main:	
  3933                           ; 0 bytes @ 0x4B
  3934                           
  3935  006B                     ??_setRFSW_Control:	
  3936                           ; 0 bytes @ 0x4B
  3937                           
  3938  006B                     ??_setSw_Main:	
  3939                           ; 0 bytes @ 0x4B
  3940                           
  3941  006B                     setDimmerLights@status:	
  3942                           ; 0 bytes @ 0x4B
  3943                           
  3944  006B                     setDimmerLights_Adj@status:	
  3945                           ; 1 bytes @ 0x4B
  3946                           
  3947  006B                     setRFSW_AdjControl@sw:	
  3948                           ; 1 bytes @ 0x4B
  3949                           
  3950                           
  3951                           ; 1 bytes @ 0x4B
  3952  006B                     	ds	1
  3953  006C                     ??_DlyOff_Main:	
  3954  006C                     ??_setDimmerLights:	
  3955                           ; 0 bytes @ 0x4C
  3956                           
  3957  006C                     ??_setDimmerLights_Adj:	
  3958                           ; 0 bytes @ 0x4C
  3959                           
  3960  006C                     setRFSW_Control@status:	
  3961                           ; 0 bytes @ 0x4C
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x4C
  3965  006C                     	ds	1
  3966  006D                     setDimmerLights@lights:	
  3967  006D                     setDimmerLights_Adj@lights:	
  3968                           ; 1 bytes @ 0x4D
  3969                           
  3970  006D                     setRFSW_Control@sw:	
  3971                           ; 1 bytes @ 0x4D
  3972                           
  3973  006D                     setSw_Main@sw:	
  3974                           ; 1 bytes @ 0x4D
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x4D
  3978  006D                     	ds	1
  3979  006E                     ??_setDimmerLights_Main:	
  3980  006E                     ??_Switch_Main:	
  3981                           ; 0 bytes @ 0x4E
  3982                           
  3983  006E                     ??_getRxData:	
  3984                           ; 0 bytes @ 0x4E
  3985                           
  3986  006E                     ??_setControl_Lights_Table:	
  3987                           ; 0 bytes @ 0x4E
  3988                           
  3989  006E                     DlyOff_Main@sw:	
  3990                           ; 0 bytes @ 0x4E
  3991                           
  3992  006E                     setDimmerLights_Main@lights:	
  3993                           ; 1 bytes @ 0x4E
  3994                           
  3995                           
  3996                           ; 1 bytes @ 0x4E
  3997  006E                     	ds	1
  3998  006F                     ??_RF_Main:	
  3999  006F                     ??_setRF_Main:	
  4000                           ; 0 bytes @ 0x4F
  4001                           
  4002  006F                     ??_DelayOff_Main:	
  4003                           ; 0 bytes @ 0x4F
  4004                           
  4005  006F                     ??_DimmerLights_Main:	
  4006                           ; 0 bytes @ 0x4F
  4007                           
  4008  006F                     ??_main:	
  4009                           ; 0 bytes @ 0x4F
  4010                           
  4011                           
  4012                           	psect	maintext
  4013  1749                     __pmaintext:	
  4014                           ; 0 bytes @ 0x4F
  4015 ;;
  4016 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4017 ;;
  4018 ;; *************** function _main *****************
  4019 ;; Defined at:
  4020 ;;		line 7 in file "../src/Main_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  argc            2    0[BANK3 ] int 
  4023 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  2    0[BANK3 ] int 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 17F/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4035 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4038 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4039 ;;Total ram usage:        4 bytes
  4040 ;; Hardware stack levels required when called:   15
  4041 ;; This function calls:
  4042 ;;		_Buzzer_Initialization
  4043 ;;		_Buzzer_Main
  4044 ;;		_CC2500_PowerOnInitial
  4045 ;;		_DelayOff_Initialization
  4046 ;;		_DelayOff_Main
  4047 ;;		_DimmerLights_Initialization
  4048 ;;		_DimmerLights_Main
  4049 ;;		_Exception_Main
  4050 ;;		_Flash_Memory_Initialization
  4051 ;;		_Flash_Memory_Main
  4052 ;;		_LED_Initialization
  4053 ;;		_LED_Main
  4054 ;;		_Load_Initialization
  4055 ;;		_Load_Main
  4056 ;;		_Mcu_Initialization
  4057 ;;		_RF_Initialization
  4058 ;;		_RF_Main
  4059 ;;		_Switch_Initialization
  4060 ;;		_Switch_Main
  4061 ;;		_Temp_Initialization
  4062 ;;		_Temp_Main
  4063 ;;		_WDT_Main
  4064 ;;		_getLoad_AD
  4065 ;;		_getTemp_AD
  4066 ;;		_myMain_Initialization
  4067 ;;		_my_MainTimer
  4068 ;; This function is called by:
  4069 ;;		Startup code after reset
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           
  4074                           ;psect for function _main
  4075  1749                     _main:	
  4076                           
  4077                           ;Main_B1.c: 8: myMain_Initialization();
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4081  1749  319B  23B5  3197   	fcall	_myMain_Initialization
  4082                           
  4083                           ;Main_B1.c: 9: Mcu_Initialization();
  4084  174C  319C  242B  3197   	fcall	_Mcu_Initialization
  4085                           
  4086                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4087  174F  3186  2641  3197   	fcall	_Flash_Memory_Initialization
  4088                           
  4089                           ;Main_B1.c: 11: LED_Initialization();
  4090  1752  319B  2340  3197   	fcall	_LED_Initialization
  4091                           
  4092                           ;Main_B1.c: 12: Buzzer_Initialization();
  4093  1755  319A  2279  3197   	fcall	_Buzzer_Initialization
  4094                           
  4095                           ;Main_B1.c: 14: ;;
  4096                           ;Main_B1.c: 15: Temp_Initialization();
  4097  1758  319A  2285  3197   	fcall	_Temp_Initialization
  4098                           
  4099                           ;Main_B1.c: 16: Load_Initialization();
  4100  175B  319A  227C  3197   	fcall	_Load_Initialization
  4101                           
  4102                           ;Main_B1.c: 17: ;;
  4103                           ;Main_B1.c: 18: DelayOff_Initialization();
  4104  175E  319A  22C5  3197   	fcall	_DelayOff_Initialization
  4105                           
  4106                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4107  1761  319C  24D5  3197   	fcall	_DimmerLights_Initialization
  4108                           
  4109                           ;Main_B1.c: 21: ;;
  4110                           ;Main_B1.c: 22: ;;
  4111                           ;Main_B1.c: 23: ;;
  4112                           ;Main_B1.c: 24: Switch_Initialization();
  4113  1764  319B  237C  3197   	fcall	_Switch_Initialization
  4114                           
  4115                           ;Main_B1.c: 25: RF_Initialization();
  4116  1767  319A  227F  3197   	fcall	_RF_Initialization
  4117                           
  4118                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4119  176A  319D  254F  3197   	fcall	_CC2500_PowerOnInitial
  4120  176D                     l11067:	
  4121                           ;Main_B1.c: 27: ;;
  4122                           ;Main_B1.c: 28: ;;
  4123                           ;Main_B1.c: 30: while (1) {
  4124                           
  4125                           
  4126                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4127  176D  0022               	movlb	2	; select bank2
  4128  176E  1C20               	btfss	_myMain^(0+256),0
  4129  176F  2F78               	goto	l11071
  4130                           
  4131                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4132  1770  3005               	movlw	5
  4133  1771  318C  2462  3197   	fcall	_getLoad_AD
  4134                           
  4135                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4136  1774  3009               	movlw	9
  4137  1775  3193  233A  3197   	fcall	_getTemp_AD
  4138  1778                     l11071:	
  4139                           
  4140                           ;Main_B1.c: 57: }
  4141                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4142  1778  0021               	movlb	1	; select bank1
  4143  1779  1C3D               	btfss	_Timer1^(0+128),0
  4144  177A  2F6D               	goto	l11067
  4145                           
  4146                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4147  177B  103D               	bcf	_Timer1^(0+128),0
  4148                           
  4149                           ;Main_B1.c: 96: my_MainTimer();
  4150  177C  3192  22BF  3197   	fcall	_my_MainTimer
  4151                           
  4152                           ;Main_B1.c: 97: WDT_Main();
  4153  177F  319C  243D  3197   	fcall	_WDT_Main
  4154                           
  4155                           ;Main_B1.c: 98: ;;
  4156                           ;Main_B1.c: 99: ;;
  4157                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4158  1782  0022               	movlb	2	; select bank2
  4159  1783  1C20               	btfss	_myMain^(0+256),0
  4160  1784  2F6D               	goto	l11067
  4161                           
  4162                           ;Main_B1.c: 101: Flash_Memory_Main();
  4163  1785  3191  21DD  3197   	fcall	_Flash_Memory_Main
  4164                           
  4165                           ;Main_B1.c: 103: LED_Main();
  4166  1788  319B  234C  3197   	fcall	_LED_Main
  4167                           
  4168                           ;Main_B1.c: 104: Buzzer_Main();
  4169  178B  3193  23BC  3197   	fcall	_Buzzer_Main
  4170                           
  4171                           ;Main_B1.c: 106: ;;
  4172                           ;Main_B1.c: 107: Temp_Main();
  4173  178E  319A  2288  3197   	fcall	_Temp_Main
  4174                           
  4175                           ;Main_B1.c: 108: Load_Main();
  4176  1791  3180  204A  3197   	fcall	_Load_Main
  4177                           
  4178                           ;Main_B1.c: 109: ;;
  4179                           ;Main_B1.c: 111: ;;
  4180                           ;Main_B1.c: 112: DimmerLights_Main();
  4181  1794  319E  26C3  3197   	fcall	_DimmerLights_Main
  4182                           
  4183                           ;Main_B1.c: 113: Switch_Main();
  4184  1797  319B  231D  3197   	fcall	_Switch_Main
  4185                           
  4186                           ;Main_B1.c: 114: ;;
  4187                           ;Main_B1.c: 115: ;;
  4188                           ;Main_B1.c: 117: RF_Main();
  4189  179A  319A  2282  3197   	fcall	_RF_Main
  4190                           
  4191                           ;Main_B1.c: 118: DelayOff_Main();
  4192  179D  319A  22CD  3197   	fcall	_DelayOff_Main
  4193                           
  4194                           ;Main_B1.c: 119: ;;
  4195                           ;Main_B1.c: 120: ;;
  4196                           ;Main_B1.c: 121: Exception_Main();
  4197  17A0  3185  255D  3197   	fcall	_Exception_Main
  4198  17A3  2F6D               	goto	l11067
  4199  17A4                     __end_of_main:	
  4200                           ;Main_B1.c: 128: }
  4201                           ;Main_B1.c: 129: }
  4202                           ;Main_B1.c: 163: }
  4203                           ;Main_B1.c: 164: return (0);
  4204                           ;	Return value of _main is never used
  4205                           
  4206                           
  4207                           	psect	text1
  4208  12BF                     __ptext1:	
  4209 ;; *************** function _my_MainTimer *****************
  4210 ;; Defined at:
  4211 ;;		line 185 in file "../src/Main_B1.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;Total ram usage:        1 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    7
  4232 ;; This function calls:
  4233 ;;		_setBuz
  4234 ;; This function is called by:
  4235 ;;		_main
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           
  4240                           ;psect for function _my_MainTimer
  4241  12BF                     _my_MainTimer:	
  4242                           
  4243                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4244                           
  4245                           ;incstack = 0
  4246                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4247  12BF  0022               	movlb	2	; select bank2
  4248  12C0  1820               	btfsc	_myMain^(0+256),0
  4249  12C1  2AD9               	goto	l10775
  4250                           
  4251                           ;Main_B1.c: 189: myMain.PowerCount++;
  4252  12C2  3001               	movlw	1
  4253  12C3  0020               	movlb	0	; select bank0
  4254  12C4  00AD               	movwf	??_my_MainTimer
  4255  12C5  082D               	movf	??_my_MainTimer,w
  4256  12C6  0022               	movlb	2	; select bank2
  4257  12C7  07A1               	addwf	(_myMain^(0+256)+1),f
  4258                           
  4259                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4260  12C8  0821               	movf	(_myMain^(0+256)+1),w
  4261  12C9  3A96               	xorlw	150
  4262  12CA  1D03               	skipz
  4263  12CB  0008               	return
  4264                           
  4265                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4266  12CC  01A1               	clrf	(_myMain^(0+256)+1)
  4267                           
  4268                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4269  12CD  1420               	bsf	_myMain^(0+256),0
  4270                           
  4271                           ;Main_B1.c: 197: setBuz(3, 50);
  4272  12CE  3032               	movlw	50
  4273  12CF  0020               	movlb	0	; select bank0
  4274  12D0  00A9               	movwf	setBuz@time
  4275  12D1  3000               	movlw	0
  4276  12D2  00AA               	movwf	setBuz@time+1
  4277  12D3  3003               	movlw	3
  4278  12D4  3196  2697         	fcall	_setBuz
  4279                           
  4280                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4281  12D6  0022               	movlb	2	; select bank2
  4282  12D7  1620               	bsf	_myMain^(0+256),4
  4283                           
  4284                           ;Main_B1.c: 207: }
  4285                           ;Main_B1.c: 208: } else {
  4286  12D8  0008               	return
  4287  12D9                     l10775:	
  4288                           
  4289                           ;Main_B1.c: 209: myMain.PowerCount++;
  4290  12D9  3001               	movlw	1
  4291  12DA  0020               	movlb	0	; select bank0
  4292  12DB  00AD               	movwf	??_my_MainTimer
  4293  12DC  082D               	movf	??_my_MainTimer,w
  4294  12DD  0022               	movlb	2	; select bank2
  4295  12DE  07A1               	addwf	(_myMain^(0+256)+1),f
  4296                           
  4297                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4298  12DF  0821               	movf	(_myMain^(0+256)+1),w
  4299  12E0  3A64               	xorlw	100
  4300  12E1  1903               	btfsc	3,2
  4301                           
  4302                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4303  12E2  01A1               	clrf	(_myMain^(0+256)+1)
  4304                           
  4305                           ;Main_B1.c: 226: }
  4306                           ;Main_B1.c: 228: myMain.Count1++;
  4307  12E3  3001               	movlw	1
  4308  12E4  07A4               	addwf	(_myMain^(0+256)+4),f
  4309  12E5  3000               	movlw	0
  4310  12E6  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4311                           
  4312                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4313  12E7  3004               	movlw	4
  4314  12E8  3E20               	addlw	_myMain& (0+255)
  4315  12E9  0086               	movwf	6
  4316  12EA  3001               	movlw	1	; select bank2/3
  4317  12EB  0087               	movwf	7
  4318  12EC  3F40               	moviw [0]fsr1
  4319  12ED  3A64               	xorlw	100
  4320  12EE  1D03               	skipz
  4321  12EF  2AF2               	goto	u12525
  4322  12F0  3F41               	moviw [1]fsr1
  4323  12F1  3A00               	xorlw	0
  4324  12F2                     u12525:	
  4325  12F2  1D03               	skipz
  4326  12F3  0008               	return
  4327                           
  4328                           ;Main_B1.c: 230: {
  4329                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4330  12F4  01A4               	clrf	(_myMain^(0+256)+4)
  4331  12F5  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4332                           
  4333                           ;Main_B1.c: 243: if (myMain.Flag) {
  4334  12F6  1CA0               	btfss	_myMain^(0+256),1
  4335  12F7  2AFA               	goto	l1550
  4336                           
  4337                           ;Main_B1.c: 244: myMain.Flag = 0;
  4338  12F8  10A0               	bcf	_myMain^(0+256),1
  4339                           
  4340                           ;Main_B1.c: 253: } else {
  4341  12F9  0008               	return
  4342  12FA                     l1550:	
  4343                           
  4344                           ;Main_B1.c: 254: myMain.Flag = 1;
  4345  12FA  14A0               	bsf	_myMain^(0+256),1
  4346  12FB  0008               	return
  4347  12FC                     __end_of_my_MainTimer:	
  4348                           
  4349                           	psect	text2
  4350  1BB5                     __ptext2:	
  4351 ;; *************** function _myMain_Initialization *****************
  4352 ;; Defined at:
  4353 ;;		line 170 in file "../src/Main_B1.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;		None
  4358 ;; Return value:  Size  Location     Type
  4359 ;;		None               void
  4360 ;; Registers used:
  4361 ;;		wreg, fsr1l, fsr1h
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;Total ram usage:        1 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    5
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           
  4382                           ;psect for function _myMain_Initialization
  4383  1BB5                     _myMain_Initialization:	
  4384                           
  4385                           ;Main_B1.c: 173: product = &_product;
  4386                           
  4387                           ;incstack = 0
  4388                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4389  1BB5  304E               	movlw	__product& (0+255)
  4390  1BB6  0020               	movlb	0	; select bank0
  4391  1BB7  00A0               	movwf	??_myMain_Initialization
  4392  1BB8  0820               	movf	??_myMain_Initialization,w
  4393  1BB9  00FA               	movwf	_product
  4394                           
  4395                           ;Main_B1.c: 174: product->Data[20] = 210;
  4396  1BBA  30D2               	movlw	210
  4397  1BBB  00A0               	movwf	??_myMain_Initialization
  4398  1BBC  087A               	movf	_product,w
  4399  1BBD  3E14               	addlw	20
  4400  1BBE  0086               	movwf	6
  4401  1BBF  3002               	movlw	2	; select bank4/5
  4402  1BC0  0087               	movwf	7
  4403  1BC1  0820               	movf	??_myMain_Initialization,w
  4404  1BC2  0081               	movwf	1
  4405  1BC3  0008               	return
  4406  1BC4                     __end_of_myMain_Initialization:	
  4407                           
  4408                           	psect	text3
  4409  133A                     __ptext3:	
  4410 ;; *************** function _getTemp_AD *****************
  4411 ;; Defined at:
  4412 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  channel         1    wreg     unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;  channel         1    5[BANK0 ] unsigned char 
  4417 ;; Return value:  Size  Location     Type
  4418 ;;		None               void
  4419 ;; Registers used:
  4420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;Total ram usage:        2 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    7
  4433 ;; This function calls:
  4434 ;;		_getAD
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           
  4441                           ;psect for function _getTemp_AD
  4442  133A                     _getTemp_AD:	
  4443                           
  4444                           ;incstack = 0
  4445                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4446                           ;getTemp_AD@channel stored from wreg
  4447  133A  0020               	movlb	0	; select bank0
  4448  133B  00A5               	movwf	getTemp_AD@channel
  4449                           
  4450                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4451  133C  0021               	movlb	1	; select bank1
  4452  133D  1D52               	btfss	_Temp^(0+128),2
  4453  133E  0008               	return
  4454                           
  4455                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4456  133F  30F0               	movlw	240
  4457  1340  0020               	movlb	0	; select bank0
  4458  1341  00A4               	movwf	??_getTemp_AD
  4459  1342  0824               	movf	??_getTemp_AD,w
  4460  1343  00A0               	movwf	getAD@adcon1
  4461  1344  0825               	movf	getTemp_AD@channel,w
  4462  1345  319F  2703  3193   	fcall	_getAD
  4463  1348  0020               	movlb	0	; select bank0
  4464  1349  0821               	movf	?_getAD+1,w
  4465  134A  0021               	movlb	1	; select bank1
  4466  134B  01DF               	clrf	((_Temp+1)^(0+128)+12)
  4467  134C  07DF               	addwf	((_Temp+1)^(0+128)+12),f
  4468  134D  0020               	movlb	0	; select bank0
  4469  134E  0820               	movf	?_getAD,w
  4470  134F  0021               	movlb	1	; select bank1
  4471  1350  01DE               	clrf	(_Temp^(0+128)+12)
  4472  1351  07DE               	addwf	(_Temp^(0+128)+12),f
  4473                           
  4474                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4475  1352  300C               	movlw	12
  4476  1353  3ED2               	addlw	_Temp& (0+255)
  4477  1354  0086               	movwf	6
  4478  1355  0187               	clrf	7
  4479  1356  0016               	moviw fsr1++
  4480  1357  0401               	iorwf	1,w
  4481  1358  1903               	skipnz
  4482  1359  0008               	return
  4483                           
  4484                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4485  135A  085F               	movf	((_Temp+1)^(0+128)+12),w
  4486  135B  025B               	subwf	((_Temp+1)^(0+128)+8),w
  4487  135C  1D03               	skipz
  4488  135D  2B60               	goto	u12475
  4489  135E  085E               	movf	(_Temp^(0+128)+12),w
  4490  135F  025A               	subwf	(_Temp^(0+128)+8),w
  4491  1360                     u12475:	
  4492  1360  1803               	skipnc
  4493  1361  2B69               	goto	l10757
  4494                           
  4495                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4496  1362  085F               	movf	((_Temp+1)^(0+128)+12),w
  4497  1363  01DB               	clrf	((_Temp+1)^(0+128)+8)
  4498  1364  07DB               	addwf	((_Temp+1)^(0+128)+8),f
  4499  1365  085E               	movf	(_Temp^(0+128)+12),w
  4500  1366  01DA               	clrf	(_Temp^(0+128)+8)
  4501  1367  07DA               	addwf	(_Temp^(0+128)+8),f
  4502                           
  4503                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4504  1368  0008               	return
  4505  1369                     l10757:	
  4506  1369  085F               	movf	((_Temp+1)^(0+128)+12),w
  4507  136A  025D               	subwf	((_Temp+1)^(0+128)+10),w
  4508  136B  1D03               	skipz
  4509  136C  2B6F               	goto	u12485
  4510  136D  085E               	movf	(_Temp^(0+128)+12),w
  4511  136E  025C               	subwf	(_Temp^(0+128)+10),w
  4512  136F                     u12485:	
  4513  136F  1803               	skipnc
  4514  1370  0008               	return
  4515                           
  4516                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4517  1371  085F               	movf	((_Temp+1)^(0+128)+12),w
  4518  1372  01DD               	clrf	((_Temp+1)^(0+128)+10)
  4519  1373  07DD               	addwf	((_Temp+1)^(0+128)+10),f
  4520  1374  085E               	movf	(_Temp^(0+128)+12),w
  4521  1375  01DC               	clrf	(_Temp^(0+128)+10)
  4522  1376  07DC               	addwf	(_Temp^(0+128)+10),f
  4523  1377  0008               	return
  4524  1378                     __end_of_getTemp_AD:	
  4525                           
  4526                           	psect	text4
  4527  0C62                     __ptext4:	
  4528 ;; *************** function _getLoad_AD *****************
  4529 ;; Defined at:
  4530 ;;		line 15 in file "../src/OverLoad_B1.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  channel         1    wreg     unsigned char 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  channel         1    6[BANK0 ] unsigned char 
  4535 ;;  i               1    9[BANK0 ] unsigned char 
  4536 ;;  j               1    8[BANK0 ] unsigned char 
  4537 ;;  k               1    7[BANK0 ] unsigned char 
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4548 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;Total ram usage:        6 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    7
  4554 ;; This function calls:
  4555 ;;		_getAD
  4556 ;; This function is called by:
  4557 ;;		_main
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           
  4562                           ;psect for function _getLoad_AD
  4563  0C62                     _getLoad_AD:	
  4564                           
  4565                           ;incstack = 0
  4566                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4567                           ;getLoad_AD@channel stored from wreg
  4568  0C62  0020               	movlb	0	; select bank0
  4569  0C63  00A6               	movwf	getLoad_AD@channel
  4570                           
  4571                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4572  0C64  01A9               	clrf	getLoad_AD@i
  4573  0C65  01A8               	clrf	getLoad_AD@j
  4574  0C66  01A7               	clrf	getLoad_AD@k
  4575                           
  4576                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4577  0C67  0022               	movlb	2	; select bank2
  4578  0C68  1E2E               	btfss	_Load^(0+256),4
  4579  0C69  0008               	return
  4580                           
  4581                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4582  0C6A  30F3               	movlw	243
  4583  0C6B  0020               	movlb	0	; select bank0
  4584  0C6C  00A4               	movwf	??_getLoad_AD
  4585  0C6D  0824               	movf	??_getLoad_AD,w
  4586  0C6E  00A0               	movwf	getAD@adcon1
  4587  0C6F  0826               	movf	getLoad_AD@channel,w
  4588  0C70  319F  2703  318C   	fcall	_getAD
  4589  0C73  0020               	movlb	0	; select bank0
  4590  0C74  0821               	movf	?_getAD+1,w
  4591  0C75  0022               	movlb	2	; select bank2
  4592  0C76  01D0               	clrf	((_Load+1)^(0+256)+33)
  4593  0C77  07D0               	addwf	((_Load+1)^(0+256)+33),f
  4594  0C78  0020               	movlb	0	; select bank0
  4595  0C79  0820               	movf	?_getAD,w
  4596  0C7A  0022               	movlb	2	; select bank2
  4597  0C7B  01CF               	clrf	(_Load^(0+256)+33)
  4598  0C7C  07CF               	addwf	(_Load^(0+256)+33),f
  4599                           
  4600                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4601  0C7D  0020               	movlb	0	; select bank0
  4602  0C7E  01A9               	clrf	getLoad_AD@i
  4603  0C7F  3004               	movlw	4
  4604  0C80  0229               	subwf	getLoad_AD@i,w
  4605  0C81  1803               	btfsc	3,0
  4606  0C82  2CB0               	goto	l10727
  4607  0C83                     l10715:	
  4608                           
  4609                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4610  0C83  3529               	lslf	getLoad_AD@i,w
  4611  0C84  3E39               	addlw	(_Load+11)& (0+255)
  4612  0C85  0086               	movwf	6
  4613  0C86  3001               	movlw	1	; select bank2/3
  4614  0C87  0087               	movwf	7
  4615  0C88  3F40               	moviw [0]fsr1
  4616  0C89  00A4               	movwf	??_getLoad_AD
  4617  0C8A  3F41               	moviw [1]fsr1
  4618  0C8B  00A5               	movwf	??_getLoad_AD+1
  4619  0C8C  0022               	movlb	2	; select bank2
  4620  0C8D  0850               	movf	((_Load+1)^(0+256)+33),w
  4621  0C8E  0020               	movlb	0	; select bank0
  4622  0C8F  0225               	subwf	??_getLoad_AD+1,w
  4623  0C90  1D03               	skipz
  4624  0C91  2C96               	goto	u12375
  4625  0C92  0022               	movlb	2	; select bank2
  4626  0C93  084F               	movf	(_Load^(0+256)+33),w
  4627  0C94  0020               	movlb	0	; select bank0
  4628  0C95  0224               	subwf	??_getLoad_AD,w
  4629  0C96                     u12375:	
  4630  0C96  1803               	skipnc
  4631  0C97  2CA8               	goto	l10723
  4632  0C98  08A8               	movf	getLoad_AD@j,f
  4633  0C99  1D03               	skipz
  4634  0C9A  2CA8               	goto	l10723
  4635                           
  4636                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4637  0C9B  3529               	lslf	getLoad_AD@i,w
  4638  0C9C  3E39               	addlw	(_Load+11)& (0+255)
  4639  0C9D  0086               	movwf	6
  4640  0C9E  3001               	movlw	1	; select bank2/3
  4641  0C9F  0087               	movwf	7
  4642  0CA0  0022               	movlb	2	; select bank2
  4643  0CA1  084F               	movf	(_Load^(0+256)+33),w
  4644  0CA2  3FC0               	movwi [0]fsr1
  4645  0CA3  0850               	movf	((_Load+1)^(0+256)+33),w
  4646  0CA4  3FC1               	movwi [1]fsr1
  4647                           
  4648                           ;OverLoad_B1.c: 24: j = 1;
  4649  0CA5  0020               	movlb	0	; select bank0
  4650  0CA6  01A8               	clrf	getLoad_AD@j
  4651  0CA7  0AA8               	incf	getLoad_AD@j,f
  4652  0CA8                     l10723:	
  4653  0CA8  3001               	movlw	1
  4654  0CA9  00A4               	movwf	??_getLoad_AD
  4655  0CAA  0824               	movf	??_getLoad_AD,w
  4656  0CAB  07A9               	addwf	getLoad_AD@i,f
  4657  0CAC  3004               	movlw	4
  4658  0CAD  0229               	subwf	getLoad_AD@i,w
  4659  0CAE  1C03               	skipc
  4660  0CAF  2C83               	goto	l10715
  4661  0CB0                     l10727:	
  4662                           
  4663                           ;OverLoad_B1.c: 25: }
  4664                           ;OverLoad_B1.c: 26: }
  4665                           ;OverLoad_B1.c: 27: if (j == 0) {
  4666  0CB0  08A8               	movf	getLoad_AD@j,f
  4667  0CB1  1D03               	skipz
  4668  0CB2  0008               	return
  4669                           
  4670                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4671  0CB3  01A9               	clrf	getLoad_AD@i
  4672  0CB4                     L1:	
  4673  0CB4  3004               	movlw	4
  4674  0CB5  0229               	subwf	getLoad_AD@i,w
  4675  0CB6  1803               	btfsc	3,0
  4676  0CB7  0008               	return
  4677                           
  4678                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4679  0CB8  3529               	lslf	getLoad_AD@i,w
  4680  0CB9  3E43               	addlw	(_Load+21)& (0+255)
  4681  0CBA  0086               	movwf	6
  4682  0CBB  3001               	movlw	1	; select bank2/3
  4683  0CBC  0087               	movwf	7
  4684  0CBD  3F40               	moviw [0]fsr1
  4685  0CBE  00A4               	movwf	??_getLoad_AD
  4686  0CBF  3F41               	moviw [1]fsr1
  4687  0CC0  00A5               	movwf	??_getLoad_AD+1
  4688  0CC1  0825               	movf	??_getLoad_AD+1,w
  4689  0CC2  0022               	movlb	2	; select bank2
  4690  0CC3  0250               	subwf	((_Load+1)^(0+256)+33),w
  4691  0CC4  1D03               	skipz
  4692  0CC5  2CCA               	goto	u12425
  4693  0CC6  0020               	movlb	0	; select bank0
  4694  0CC7  0824               	movf	??_getLoad_AD,w
  4695  0CC8  0022               	movlb	2	; select bank2
  4696  0CC9  024F               	subwf	(_Load^(0+256)+33),w
  4697  0CCA                     u12425:	
  4698  0CCA  1803               	skipnc
  4699  0CCB  2CDD               	goto	l10743
  4700  0CCC  0020               	movlb	0	; select bank0
  4701  0CCD  08A7               	movf	getLoad_AD@k,f
  4702  0CCE  1D03               	skipz
  4703  0CCF  2CDD               	goto	l10743
  4704                           
  4705                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4706  0CD0  3529               	lslf	getLoad_AD@i,w
  4707  0CD1  3E43               	addlw	(_Load+21)& (0+255)
  4708  0CD2  0086               	movwf	6
  4709  0CD3  3001               	movlw	1	; select bank2/3
  4710  0CD4  0087               	movwf	7
  4711  0CD5  0022               	movlb	2	; select bank2
  4712  0CD6  084F               	movf	(_Load^(0+256)+33),w
  4713  0CD7  3FC0               	movwi [0]fsr1
  4714  0CD8  0850               	movf	((_Load+1)^(0+256)+33),w
  4715  0CD9  3FC1               	movwi [1]fsr1
  4716                           
  4717                           ;OverLoad_B1.c: 31: k = 1;
  4718  0CDA  0020               	movlb	0	; select bank0
  4719  0CDB  01A7               	clrf	getLoad_AD@k
  4720  0CDC  0AA7               	incf	getLoad_AD@k,f
  4721  0CDD                     l10743:	
  4722  0CDD  3001               	movlw	1
  4723  0CDE  0020               	movlb	0	; select bank0
  4724  0CDF  00A4               	movwf	??_getLoad_AD
  4725  0CE0  0824               	movf	??_getLoad_AD,w
  4726  0CE1  07A9               	addwf	getLoad_AD@i,f
  4727  0CE2  2CB4               	goto	L1
  4728  0CE3                     __end_of_getLoad_AD:	
  4729                           
  4730                           	psect	text5
  4731  1F03                     __ptext5:	
  4732 ;; *************** function _getAD *****************
  4733 ;; Defined at:
  4734 ;;		line 456 in file "../src/MCU_B1.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  adcon0          1    wreg     unsigned char 
  4737 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4740 ;; Return value:  Size  Location     Type
  4741 ;;                  2    0[BANK0 ] int 
  4742 ;; Registers used:
  4743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : 0/0
  4746 ;;		On exit  : 0/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4749 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;Total ram usage:        4 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    6
  4756 ;; This function calls:
  4757 ;;		_Timeout_Counter
  4758 ;;		_set_TimeoutCleared
  4759 ;; This function is called by:
  4760 ;;		_getLoad_AD
  4761 ;;		_getTemp_AD
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           
  4766                           ;psect for function _getAD
  4767  1F03                     _getAD:	
  4768                           
  4769                           ;incstack = 0
  4770                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4771                           ;getAD@adcon0 stored from wreg
  4772  1F03  0020               	movlb	0	; select bank0
  4773  1F04  00A3               	movwf	getAD@adcon0
  4774                           
  4775                           ;MCU_B1.c: 457: ADCON0 = adcon0;
  4776  1F05  0823               	movf	getAD@adcon0,w
  4777  1F06  0021               	movlb	1	; select bank1
  4778  1F07  009D               	movwf	29	;volatile
  4779                           
  4780                           ;MCU_B1.c: 458: ADCON1 = adcon1;
  4781  1F08  0020               	movlb	0	; select bank0
  4782  1F09  0820               	movf	getAD@adcon1,w
  4783  1F0A  0021               	movlb	1	; select bank1
  4784  1F0B  009E               	movwf	30	;volatile
  4785                           
  4786                           ;MCU_B1.c: 459: GO_nDONE = 1;
  4787  1F0C  149D               	bsf	29,1	;volatile
  4788                           
  4789                           ;MCU_B1.c: 460: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4790  1F0D  2F11               	goto	l10195
  4791  1F0E                     l10193:	
  4792                           
  4793                           ;MCU_B1.c: 461: Timeout_Counter();
  4794  1F0E  319D  2579  319F   	fcall	_Timeout_Counter
  4795  1F11                     l10195:	
  4796  1F11  0021               	movlb	1	; select bank1
  4797  1F12  1C9D               	btfss	29,1	;volatile
  4798  1F13  2F17               	goto	l10199
  4799  1F14  0022               	movlb	2	; select bank2
  4800  1F15  1D2B               	btfss	(_myMain^(0+256)+11),2
  4801  1F16  2F0E               	goto	l10193
  4802  1F17                     l10199:	
  4803                           
  4804                           ;MCU_B1.c: 462: };
  4805                           ;MCU_B1.c: 463: set_TimeoutCleared();
  4806  1F17  319A  229F         	fcall	_set_TimeoutCleared
  4807                           
  4808                           ;MCU_B1.c: 464: return ((ADRESH*256)+ADRESL);
  4809  1F19  0021               	movlb	1	; select bank1
  4810  1F1A  081C               	movf	28,w	;volatile
  4811  1F1B  0020               	movlb	0	; select bank0
  4812  1F1C  01A1               	clrf	?_getAD+1
  4813  1F1D  07A1               	addwf	?_getAD+1,f
  4814  1F1E  0021               	movlb	1	; select bank1
  4815  1F1F  081B               	movf	27,w	;volatile
  4816  1F20  0020               	movlb	0	; select bank0
  4817  1F21  01A0               	clrf	?_getAD
  4818  1F22  07A0               	addwf	?_getAD,f
  4819  1F23  0008               	return
  4820  1F24                     __end_of_getAD:	
  4821                           
  4822                           	psect	text6
  4823  1C3D                     __ptext6:	
  4824 ;; *************** function _WDT_Main *****************
  4825 ;; Defined at:
  4826 ;;		line 1100 in file "../src/MCU_B1.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:        1 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    6
  4847 ;; This function calls:
  4848 ;;		_WDT_Clearing
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _WDT_Main
  4856  1C3D                     _WDT_Main:	
  4857                           
  4858                           ;MCU_B1.c: 1101: if (WDT.Enable == 1) {
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4862  1C3D  0021               	movlb	1	; select bank1
  4863  1C3E  1C44               	btfss	_WDT^(0+128),0
  4864  1C3F  0008               	return
  4865                           
  4866                           ;MCU_B1.c: 1102: if (WDT.Timer-- > 0) {
  4867  1C40  3001               	movlw	1
  4868  1C41  02C5               	subwf	(_WDT^(0+128)+1),f
  4869  1C42  0845               	movf	(_WDT^(0+128)+1),w
  4870  1C43  3AFF               	xorlw	255
  4871  1C44  1903               	skipnz
  4872  1C45  0008               	return
  4873                           
  4874                           ;MCU_B1.c: 1103: WDT.Timer = 100;
  4875  1C46  3064               	movlw	100
  4876  1C47  0020               	movlb	0	; select bank0
  4877  1C48  00A0               	movwf	??_WDT_Main
  4878  1C49  0820               	movf	??_WDT_Main,w
  4879  1C4A  0021               	movlb	1	; select bank1
  4880  1C4B  00C5               	movwf	(_WDT^(0+128)+1)
  4881                           
  4882                           ;MCU_B1.c: 1104: WDT_Clearing();
  4883  1C4C  3180  2002         	fcall	_WDT_Clearing
  4884  1C4E  0008               	return
  4885  1C4F                     __end_of_WDT_Main:	
  4886                           
  4887                           	psect	text7
  4888  0002                     __ptext7:	
  4889 ;; *************** function _WDT_Clearing *****************
  4890 ;; Defined at:
  4891 ;;		line 1110 in file "../src/MCU_B1.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		None
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    5
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_WDT_Main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _WDT_Clearing
  4921  0002                     _WDT_Clearing:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _WDT_Clearing: []
  4925  0002  0064               	clrwdt	;# 
  4926  0003  0008               	return
  4927  0004                     __end_of_WDT_Clearing:	
  4928                           
  4929                           	psect	text8
  4930  1A88                     __ptext8:	
  4931 ;; *************** function _Temp_Main *****************
  4932 ;; Defined at:
  4933 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;		None               void
  4940 ;; Registers used:
  4941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;Total ram usage:        0 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    8
  4954 ;; This function calls:
  4955 ;;		_setTemp_Main
  4956 ;; This function is called by:
  4957 ;;		_main
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           
  4962                           ;psect for function _Temp_Main
  4963  1A88                     _Temp_Main:	
  4964                           
  4965                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4966                           
  4967                           ;incstack = 0
  4968                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4969  1A88  318F  274E         	fcall	_setTemp_Main
  4970  1A8A  0008               	return
  4971  1A8B                     __end_of_Temp_Main:	
  4972                           
  4973                           	psect	text9
  4974  0F4E                     __ptext9:	
  4975 ;; *************** function _setTemp_Main *****************
  4976 ;; Defined at:
  4977 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  error           1   72[BANK0 ] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;		None               void
  4984 ;; Registers used:
  4985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;Total ram usage:        3 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    7
  4998 ;; This function calls:
  4999 ;;		_getMain_All_Error_Status
  5000 ;;		_setBuz
  5001 ;;		_setProductData
  5002 ;; This function is called by:
  5003 ;;		_Temp_Main
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _setTemp_Main
  5009  0F4E                     _setTemp_Main:	
  5010                           
  5011                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5012                           
  5013                           ;incstack = 0
  5014                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5015  0F4E  3000               	movlw	0
  5016  0F4F  3191  2176  318F   	fcall	_getMain_All_Error_Status
  5017  0F52  0020               	movlb	0	; select bank0
  5018  0F53  00E6               	movwf	??_setTemp_Main
  5019  0F54  0866               	movf	??_setTemp_Main,w
  5020  0F55  00E8               	movwf	setTemp_Main@error
  5021                           
  5022                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5023  0F56  0021               	movlb	1	; select bank1
  5024  0F57  1C52               	btfss	_Temp^(0+128),0
  5025  0F58  2FFA               	goto	l1900
  5026                           
  5027                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5028  0F59  1952               	btfsc	_Temp^(0+128),2
  5029  0F5A  2F6A               	goto	l10265
  5030                           
  5031                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5032  0F5B  3001               	movlw	1
  5033  0F5C  07D3               	addwf	(_Temp^(0+128)+1),f
  5034  0F5D  3000               	movlw	0
  5035  0F5E  3DD4               	addwfc	((_Temp+1)^(0+128)+1),f
  5036                           
  5037                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5038  0F5F  3001               	movlw	1
  5039  0F60  0254               	subwf	((_Temp+1)^(0+128)+1),w
  5040  0F61  30F4               	movlw	244
  5041  0F62  1903               	skipnz
  5042  0F63  0253               	subwf	(_Temp^(0+128)+1),w
  5043  0F64  1C03               	skipc
  5044  0F65  0008               	return
  5045                           
  5046                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5047  0F66  01D3               	clrf	(_Temp^(0+128)+1)
  5048  0F67  01D4               	clrf	((_Temp+1)^(0+128)+1)
  5049                           
  5050                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5051  0F68  1552               	bsf	_Temp^(0+128),2
  5052                           
  5053                           ;OverTemperature_B1.c: 70: }
  5054                           ;OverTemperature_B1.c: 71: } else {
  5055  0F69  0008               	return
  5056  0F6A                     l10265:	
  5057                           
  5058                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5059  0F6A  3001               	movlw	1
  5060  0F6B  07D3               	addwf	(_Temp^(0+128)+1),f
  5061  0F6C  3000               	movlw	0
  5062  0F6D  3DD4               	addwfc	((_Temp+1)^(0+128)+1),f
  5063                           
  5064                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5065  0F6E  3000               	movlw	0
  5066  0F6F  0254               	subwf	((_Temp+1)^(0+128)+1),w
  5067  0F70  3005               	movlw	5
  5068  0F71  1903               	skipnz
  5069  0F72  0253               	subwf	(_Temp^(0+128)+1),w
  5070  0F73  1C03               	skipc
  5071  0F74  0008               	return
  5072                           
  5073                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5074  0F75  01D3               	clrf	(_Temp^(0+128)+1)
  5075  0F76  01D4               	clrf	((_Temp+1)^(0+128)+1)
  5076                           
  5077                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5078  0F77  3008               	movlw	8
  5079  0F78  3ED2               	addlw	_Temp& (0+255)
  5080  0F79  0086               	movwf	6
  5081  0F7A  0187               	clrf	7
  5082  0F7B  0016               	moviw fsr1++
  5083  0F7C  0401               	iorwf	1,w
  5084  0F7D  1903               	skipnz
  5085  0F7E  2FF4               	goto	l1905
  5086  0F7F  300A               	movlw	10
  5087  0F80  3ED2               	addlw	_Temp& (0+255)
  5088  0F81  0086               	movwf	6
  5089  0F82  0187               	clrf	7
  5090  0F83  0016               	moviw fsr1++
  5091  0F84  0401               	iorwf	1,w
  5092  0F85  1903               	skipnz
  5093  0F86  2FF4               	goto	l1905
  5094                           
  5095                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5096  0F87  1152               	bcf	_Temp^(0+128),2
  5097                           
  5098                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5099  0F88  300A               	movlw	10
  5100  0F89  3ED2               	addlw	_Temp& (0+255)
  5101  0F8A  0086               	movwf	6
  5102  0F8B  0187               	clrf	7
  5103  0F8C  3008               	movlw	8
  5104  0F8D  3ED2               	addlw	_Temp& (0+255)
  5105  0F8E  0084               	movwf	4
  5106  0F8F  0185               	clrf	5
  5107  0F90  3F40               	moviw [0]fsr1
  5108  0F91  0700               	addwf	0,w
  5109  0F92  0020               	movlb	0	; select bank0
  5110  0F93  00E6               	movwf	??_setTemp_Main
  5111  0F94  3101               	addfsr 0,1
  5112  0F95  3F41               	moviw [1]fsr1
  5113  0F96  3D00               	addwfc	0,w
  5114  0F97  00E7               	movwf	??_setTemp_Main+1
  5115  0F98  36E7               	lsrf	??_setTemp_Main+1,f
  5116  0F99  0CE6               	rrf	??_setTemp_Main,f
  5117  0F9A  0866               	movf	??_setTemp_Main,w
  5118  0F9B  0021               	movlb	1	; select bank1
  5119  0F9C  00D8               	movwf	(_Temp^(0+128)+6)
  5120  0F9D  0020               	movlb	0	; select bank0
  5121  0F9E  0867               	movf	??_setTemp_Main+1,w
  5122  0F9F  0021               	movlb	1	; select bank1
  5123  0FA0  00D9               	movwf	((_Temp+1)^(0+128)+6)
  5124                           
  5125                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5126  0FA1  30C7               	movlw	199
  5127  0FA2  00E0               	movwf	(_Temp^(0+128)+14)
  5128  0FA3  3001               	movlw	1
  5129  0FA4  00E1               	movwf	(_Temp^(0+128)+15)
  5130                           
  5131                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5132  0FA5  309F               	movlw	159
  5133  0FA6  00E2               	movwf	(_Temp^(0+128)+16)
  5134  0FA7  3001               	movlw	1
  5135  0FA8  00E3               	movwf	(_Temp^(0+128)+17)
  5136                           
  5137                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5138  0FA9  1CD2               	btfss	_Temp^(0+128),1
  5139  0FAA  2FCB               	goto	l10297
  5140                           
  5141                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5142  0FAB  0861               	movf	((_Temp+1)^(0+128)+14),w
  5143  0FAC  0259               	subwf	((_Temp+1)^(0+128)+6),w
  5144  0FAD  1D03               	skipz
  5145  0FAE  2FB1               	goto	u11595
  5146  0FAF  0860               	movf	(_Temp^(0+128)+14),w
  5147  0FB0  0258               	subwf	(_Temp^(0+128)+6),w
  5148  0FB1                     u11595:	
  5149  0FB1  1C03               	skipc
  5150  0FB2  2FC9               	goto	l10295
  5151                           
  5152                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5153  0FB3  3001               	movlw	1
  5154  0FB4  0020               	movlb	0	; select bank0
  5155  0FB5  00E6               	movwf	??_setTemp_Main
  5156  0FB6  0866               	movf	??_setTemp_Main,w
  5157  0FB7  0021               	movlb	1	; select bank1
  5158  0FB8  07D5               	addwf	(_Temp^(0+128)+3),f
  5159                           
  5160                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5161  0FB9  3003               	movlw	3
  5162  0FBA  0255               	subwf	(_Temp^(0+128)+3),w
  5163  0FBB  1C03               	skipc
  5164  0FBC  2FE1               	goto	l10309
  5165                           
  5166                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5167  0FBD  01D5               	clrf	(_Temp^(0+128)+3)
  5168                           
  5169                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5170  0FBE  10D2               	bcf	_Temp^(0+128),1
  5171                           
  5172                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5173  0FBF  3064               	movlw	100
  5174  0FC0  0020               	movlb	0	; select bank0
  5175  0FC1  00A9               	movwf	setBuz@time
  5176  0FC2  3000               	movlw	0
  5177  0FC3  00AA               	movwf	setBuz@time+1
  5178  0FC4  3002               	movlw	2
  5179  0FC5  3196  2697  318F   	fcall	_setBuz
  5180                           
  5181                           ;OverTemperature_B1.c: 103: }
  5182                           ;OverTemperature_B1.c: 104: } else {
  5183  0FC8  2FE1               	goto	l10309
  5184  0FC9                     l10295:	
  5185                           
  5186                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5187  0FC9  0021               	movlb	1	; select bank1
  5188  0FCA  2FE0               	goto	l10307
  5189  0FCB                     l10297:	
  5190                           ;OverTemperature_B1.c: 106: }
  5191                           ;OverTemperature_B1.c: 107: } else {
  5192                           
  5193                           
  5194                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5195  0FCB  0859               	movf	((_Temp+1)^(0+128)+6),w
  5196  0FCC  0263               	subwf	((_Temp+1)^(0+128)+16),w
  5197  0FCD  1D03               	skipz
  5198  0FCE  2FD1               	goto	u11615
  5199  0FCF  0858               	movf	(_Temp^(0+128)+6),w
  5200  0FD0  0262               	subwf	(_Temp^(0+128)+16),w
  5201  0FD1                     u11615:	
  5202  0FD1  1C03               	skipc
  5203  0FD2  2FE0               	goto	l10307
  5204                           
  5205                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5206  0FD3  3001               	movlw	1
  5207  0FD4  0020               	movlb	0	; select bank0
  5208  0FD5  00E6               	movwf	??_setTemp_Main
  5209  0FD6  0866               	movf	??_setTemp_Main,w
  5210  0FD7  0021               	movlb	1	; select bank1
  5211  0FD8  07D5               	addwf	(_Temp^(0+128)+3),f
  5212                           
  5213                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5214  0FD9  3003               	movlw	3
  5215  0FDA  0255               	subwf	(_Temp^(0+128)+3),w
  5216  0FDB  1C03               	skipc
  5217  0FDC  2FE1               	goto	l10309
  5218                           
  5219                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5220  0FDD  01D5               	clrf	(_Temp^(0+128)+3)
  5221                           
  5222                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5223  0FDE  14D2               	bsf	_Temp^(0+128),1
  5224                           
  5225                           ;OverTemperature_B1.c: 113: }
  5226                           ;OverTemperature_B1.c: 114: } else {
  5227  0FDF  2FE1               	goto	l10309
  5228  0FE0                     l10307:	
  5229                           
  5230                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5231  0FE0  01D5               	clrf	(_Temp^(0+128)+3)
  5232  0FE1                     l10309:	
  5233                           
  5234                           ;OverTemperature_B1.c: 116: }
  5235                           ;OverTemperature_B1.c: 117: }
  5236                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5237  0FE1  0021               	movlb	1	; select bank1
  5238  0FE2  0859               	movf	((_Temp+1)^(0+128)+6),w
  5239  0FE3  0020               	movlb	0	; select bank0
  5240  0FE4  00E6               	movwf	??_setTemp_Main
  5241  0FE5  0866               	movf	??_setTemp_Main,w
  5242  0FE6  00E2               	movwf	setProductData@value
  5243  0FE7  3018               	movlw	24
  5244  0FE8  319B  2389  318F   	fcall	_setProductData
  5245                           
  5246                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5247  0FEB  0021               	movlb	1	; select bank1
  5248  0FEC  0858               	movf	(_Temp^(0+128)+6),w
  5249  0FED  0020               	movlb	0	; select bank0
  5250  0FEE  00E6               	movwf	??_setTemp_Main
  5251  0FEF  0866               	movf	??_setTemp_Main,w
  5252  0FF0  00E2               	movwf	setProductData@value
  5253  0FF1  3019               	movlw	25
  5254  0FF2  319B  2389         	fcall	_setProductData
  5255  0FF4                     l1905:	
  5256                           
  5257                           ;OverTemperature_B1.c: 135: }
  5258                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5259  0FF4  0021               	movlb	1	; select bank1
  5260  0FF5  01DA               	clrf	(_Temp^(0+128)+8)
  5261  0FF6  01DB               	clrf	((_Temp+1)^(0+128)+8)
  5262                           
  5263                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5264  0FF7  01DC               	clrf	(_Temp^(0+128)+10)
  5265  0FF8  01DD               	clrf	((_Temp+1)^(0+128)+10)
  5266                           
  5267                           ;OverTemperature_B1.c: 138: }
  5268                           ;OverTemperature_B1.c: 139: }
  5269                           ;OverTemperature_B1.c: 141: } else {
  5270  0FF9  0008               	return
  5271  0FFA                     l1900:	
  5272                           
  5273                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5274  0FFA  0022               	movlb	2	; select bank2
  5275  0FFB  1C20               	btfss	_myMain^(0+256),0
  5276  0FFC  0008               	return
  5277                           
  5278                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5279  0FFD  0021               	movlb	1	; select bank1
  5280  0FFE  1452               	bsf	_Temp^(0+128),0
  5281  0FFF  0008               	return
  5282  1000                     __end_of_setTemp_Main:	
  5283                           
  5284                           	psect	text10
  5285  1A85                     __ptext10:	
  5286 ;; *************** function _Temp_Initialization *****************
  5287 ;; Defined at:
  5288 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;		None               void
  5295 ;; Registers used:
  5296 ;;		status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    6
  5309 ;; This function calls:
  5310 ;;		_setTemp_Initialization
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           
  5317                           ;psect for function _Temp_Initialization
  5318  1A85                     _Temp_Initialization:	
  5319                           
  5320                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5321                           
  5322                           ;incstack = 0
  5323                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5324  1A85  3188  2001         	fcall	_setTemp_Initialization
  5325  1A87  0008               	return
  5326  1A88                     __end_of_Temp_Initialization:	
  5327                           
  5328                           	psect	text11
  5329  0801                     __ptext11:	
  5330 ;; *************** function _setTemp_Initialization *****************
  5331 ;; Defined at:
  5332 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;		None
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;		None
  5337 ;; Return value:  Size  Location     Type
  5338 ;;		None               void
  5339 ;; Registers used:
  5340 ;;		None
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;Total ram usage:        0 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    5
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_Temp_Initialization
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _setTemp_Initialization
  5362  0801                     _setTemp_Initialization:	
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _setTemp_Initialization: []
  5366  0801  0008               	return
  5367  0802                     __end_of_setTemp_Initialization:	
  5368                           
  5369                           	psect	text12
  5370  1B1D                     __ptext12:	
  5371 ;; *************** function _Switch_Main *****************
  5372 ;; Defined at:
  5373 ;;		line 72 in file "../src/Switch_B1.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;		None
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;		None
  5378 ;; Return value:  Size  Location     Type
  5379 ;;		None               void
  5380 ;; Registers used:
  5381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5382 ;; Tracked objects:
  5383 ;;		On entry : 0/0
  5384 ;;		On exit  : 0/0
  5385 ;;		Unchanged: 0/0
  5386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;Total ram usage:        0 bytes
  5392 ;; Hardware stack levels used:    1
  5393 ;; Hardware stack levels required when called:   10
  5394 ;; This function calls:
  5395 ;;		_TouchPower
  5396 ;;		_setSw_Main
  5397 ;; This function is called by:
  5398 ;;		_main
  5399 ;; This function uses a non-reentrant model
  5400 ;;
  5401                           
  5402                           
  5403                           ;psect for function _Switch_Main
  5404  1B1D                     _Switch_Main:	
  5405                           
  5406                           ;Switch_B1.c: 75: setSw_Main(1);
  5407                           
  5408                           ;incstack = 0
  5409                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5410  1B1D  3001               	movlw	1
  5411  1B1E  3181  21F4  319B   	fcall	_setSw_Main
  5412                           
  5413                           ;Switch_B1.c: 79: setSw_Main(2);
  5414  1B21  3002               	movlw	2
  5415  1B22  3181  21F4  319B   	fcall	_setSw_Main
  5416                           
  5417                           ;Switch_B1.c: 87: TouchPower();
  5418  1B25  319D  2564         	fcall	_TouchPower
  5419  1B27  0008               	return
  5420  1B28                     __end_of_Switch_Main:	
  5421                           
  5422                           	psect	text13
  5423  01F4                     __ptext13:	
  5424 ;; *************** function _setSw_Main *****************
  5425 ;; Defined at:
  5426 ;;		line 121 in file "../src/Switch_B1.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  sw              1    wreg     unsigned char 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  sw              1   77[BANK0 ] unsigned char 
  5431 ;; Return value:  Size  Location     Type
  5432 ;;		None               void
  5433 ;; Registers used:
  5434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        3 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    9
  5447 ;; This function calls:
  5448 ;;		_SwPointSelect
  5449 ;;		_getMain_All_Error_Status
  5450 ;;		_getSw_KeyStatus
  5451 ;;		_setBuz
  5452 ;;		_setDimmerLights_AdjOn
  5453 ;;		_setDimmerLights_SwOff
  5454 ;;		_setDimmerLights_SwOn
  5455 ;;		_setRF_Learn
  5456 ;; This function is called by:
  5457 ;;		_Switch_Main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _setSw_Main
  5463  01F4                     _setSw_Main:	
  5464                           
  5465                           ;incstack = 0
  5466                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5467                           ;setSw_Main@sw stored from wreg
  5468  01F4  0020               	movlb	0	; select bank0
  5469  01F5  00ED               	movwf	setSw_Main@sw
  5470                           
  5471                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5472  01F6  086D               	movf	setSw_Main@sw,w
  5473  01F7  319C  24FD  3181   	fcall	_SwPointSelect
  5474                           
  5475                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5476  01FA  0875               	movf	_Sw,w
  5477  01FB  0086               	movwf	6
  5478  01FC  0876               	movf	_Sw+1,w
  5479  01FD  0087               	movwf	7
  5480  01FE  1C01               	btfss	1,0
  5481  01FF  2B5D               	goto	l2678
  5482                           
  5483                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5484  0200  3000               	movlw	0
  5485  0201  3191  2176  3181   	fcall	_getMain_All_Error_Status
  5486  0204  3800               	iorlw	0
  5487  0205  1D03               	skipz
  5488  0206  2A23               	goto	l10431
  5489                           
  5490                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5491  0207  0875               	movf	_Sw,w
  5492  0208  0086               	movwf	6
  5493  0209  0876               	movf	_Sw+1,w
  5494  020A  0087               	movwf	7
  5495  020B  3141               	addfsr 1,1
  5496  020C  1081               	bcf	1,1
  5497                           
  5498                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5499  020D  0020               	movlb	0	; select bank0
  5500  020E  086D               	movf	setSw_Main@sw,w
  5501  020F  319E  2684  3181   	fcall	_getSw_KeyStatus
  5502  0212  3A01               	xorlw	1
  5503  0213  3000               	movlw	0
  5504  0214  1903               	skipnz
  5505  0215  3001               	movlw	1
  5506  0216  0020               	movlb	0	; select bank0
  5507  0217  00EB               	movwf	??_setSw_Main
  5508  0218  0875               	movf	_Sw,w
  5509  0219  0086               	movwf	6
  5510  021A  0876               	movf	_Sw+1,w
  5511  021B  0087               	movwf	7
  5512  021C  0DEB               	rlf	??_setSw_Main,f
  5513  021D  0801               	movf	1,w
  5514  021E  066B               	xorwf	??_setSw_Main,w
  5515  021F  39FD               	andlw	-3
  5516  0220  066B               	xorwf	??_setSw_Main,w
  5517  0221  0081               	movwf	1
  5518                           
  5519                           ;Switch_B1.c: 128: } else {
  5520  0222  2A3A               	goto	l2680
  5521  0223                     l10431:	
  5522                           
  5523                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5524  0223  0875               	movf	_Sw,w
  5525  0224  0086               	movwf	6
  5526  0225  0876               	movf	_Sw+1,w
  5527  0226  0087               	movwf	7
  5528  0227  3141               	addfsr 1,1
  5529  0228  1881               	btfsc	1,1
  5530  0229  2A3A               	goto	l2680
  5531                           
  5532                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5533  022A  0875               	movf	_Sw,w
  5534  022B  0086               	movwf	6
  5535  022C  0876               	movf	_Sw+1,w
  5536  022D  0087               	movwf	7
  5537  022E  3141               	addfsr 1,1
  5538  022F  1481               	bsf	1,1
  5539                           
  5540                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5541  0230  0875               	movf	_Sw,w
  5542  0231  0086               	movwf	6
  5543  0232  0876               	movf	_Sw+1,w
  5544  0233  0087               	movwf	7
  5545  0234  1081               	bcf	1,1
  5546                           
  5547                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5548  0235  0875               	movf	_Sw,w
  5549  0236  0086               	movwf	6
  5550  0237  0876               	movf	_Sw+1,w
  5551  0238  0087               	movwf	7
  5552  0239  1501               	bsf	1,2
  5553  023A                     l2680:	
  5554                           
  5555                           ;Switch_B1.c: 134: }
  5556                           ;Switch_B1.c: 135: }
  5557                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5558  023A  0875               	movf	_Sw,w
  5559  023B  0086               	movwf	6
  5560  023C  0876               	movf	_Sw+1,w
  5561  023D  0087               	movwf	7
  5562  023E  1C81               	btfss	1,1
  5563  023F  2B0A               	goto	l10481
  5564                           
  5565                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5566  0240  0875               	movf	_Sw,w
  5567  0241  0086               	movwf	6
  5568  0242  0876               	movf	_Sw+1,w
  5569  0243  0087               	movwf	7
  5570  0244  1901               	btfsc	1,2
  5571  0245  2A68               	goto	l10447
  5572                           
  5573                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5574  0246  3001               	movlw	1
  5575  0247  0020               	movlb	0	; select bank0
  5576  0248  00EB               	movwf	??_setSw_Main
  5577  0249  0875               	movf	_Sw,w
  5578  024A  0086               	movwf	6
  5579  024B  0876               	movf	_Sw+1,w
  5580  024C  0087               	movwf	7
  5581  024D  3142               	addfsr 1,2
  5582  024E  086B               	movf	??_setSw_Main,w
  5583  024F  0781               	addwf	1,f
  5584                           
  5585                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5586  0250  0875               	movf	_Sw,w
  5587  0251  0086               	movwf	6
  5588  0252  0876               	movf	_Sw+1,w
  5589  0253  0087               	movwf	7
  5590  0254  3142               	addfsr 1,2
  5591  0255  3005               	movlw	5
  5592  0256  0201               	subwf	1,w
  5593  0257  1C03               	skipc
  5594  0258  0008               	return
  5595                           
  5596                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5597  0259  0875               	movf	_Sw,w
  5598  025A  0086               	movwf	6
  5599  025B  0876               	movf	_Sw+1,w
  5600  025C  0087               	movwf	7
  5601  025D  3142               	addfsr 1,2
  5602  025E  0181               	clrf	1
  5603                           
  5604                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5605  025F  0875               	movf	_Sw,w
  5606  0260  0086               	movwf	6
  5607  0261  0876               	movf	_Sw+1,w
  5608  0262  0087               	movwf	7
  5609  0263  1501               	bsf	1,2
  5610                           
  5611                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5612  0264  086D               	movf	setSw_Main@sw,w
  5613  0265  3197  27A4         	fcall	_setDimmerLights_SwOn
  5614                           
  5615                           ;Switch_B1.c: 148: }
  5616                           ;Switch_B1.c: 149: } else {
  5617  0267  0008               	return
  5618  0268                     l10447:	
  5619                           
  5620                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5621  0268  0875               	movf	_Sw,w
  5622  0269  0086               	movwf	6
  5623  026A  0876               	movf	_Sw+1,w
  5624  026B  0087               	movwf	7
  5625  026C  1981               	btfsc	1,3
  5626  026D  2A9A               	goto	l10457
  5627                           
  5628                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5629  026E  0875               	movf	_Sw,w
  5630  026F  0086               	movwf	6
  5631  0270  0876               	movf	_Sw+1,w
  5632  0271  0087               	movwf	7
  5633  0272  3143               	addfsr 1,3
  5634  0273  3001               	movlw	1
  5635  0274  0781               	addwf	1,f
  5636  0275  3141               	addfsr 1,1
  5637  0276  1803               	skipnc
  5638  0277  0A81               	incf	1,f
  5639                           
  5640                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5641  0278  0875               	movf	_Sw,w
  5642  0279  0086               	movwf	6
  5643  027A  0876               	movf	_Sw+1,w
  5644  027B  0087               	movwf	7
  5645  027C  3143               	addfsr 1,3
  5646  027D  3F40               	moviw [0]fsr1
  5647  027E  0020               	movlb	0	; select bank0
  5648  027F  00EB               	movwf	??_setSw_Main
  5649  0280  3F41               	moviw [1]fsr1
  5650  0281  00EC               	movwf	??_setSw_Main+1
  5651  0282  3000               	movlw	0
  5652  0283  026C               	subwf	??_setSw_Main+1,w
  5653  0284  3096               	movlw	150
  5654  0285  1903               	skipnz
  5655  0286  026B               	subwf	??_setSw_Main,w
  5656  0287  1C03               	skipc
  5657  0288  0008               	return
  5658                           
  5659                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5660  0289  0875               	movf	_Sw,w
  5661  028A  0086               	movwf	6
  5662  028B  0876               	movf	_Sw+1,w
  5663  028C  0087               	movwf	7
  5664  028D  3143               	addfsr 1,3
  5665  028E  3000               	movlw	0
  5666  028F  3FC0               	movwi [0]fsr1
  5667  0290  3FC1               	movwi [1]fsr1
  5668                           
  5669                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5670  0291  0875               	movf	_Sw,w
  5671  0292  0086               	movwf	6
  5672  0293  0876               	movf	_Sw+1,w
  5673  0294  0087               	movwf	7
  5674  0295  1581               	bsf	1,3
  5675                           
  5676                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5677  0296  086D               	movf	setSw_Main@sw,w
  5678  0297  3190  20E8         	fcall	_setDimmerLights_AdjOn
  5679                           
  5680                           ;Switch_B1.c: 160: }
  5681                           ;Switch_B1.c: 161: } else {
  5682  0299  0008               	return
  5683  029A                     l10457:	
  5684                           
  5685                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5686  029A  0875               	movf	_Sw,w
  5687  029B  0086               	movwf	6
  5688  029C  0876               	movf	_Sw+1,w
  5689  029D  0087               	movwf	7
  5690  029E  1A01               	btfsc	1,4
  5691  029F  2AD8               	goto	l10471
  5692                           
  5693                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5694  02A0  0875               	movf	_Sw,w
  5695  02A1  0086               	movwf	6
  5696  02A2  0876               	movf	_Sw+1,w
  5697  02A3  0087               	movwf	7
  5698  02A4  3145               	addfsr 1,5
  5699  02A5  3001               	movlw	1
  5700  02A6  0781               	addwf	1,f
  5701  02A7  3141               	addfsr 1,1
  5702  02A8  1803               	skipnc
  5703  02A9  0A81               	incf	1,f
  5704                           
  5705                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5706  02AA  0875               	movf	_Sw,w
  5707  02AB  0086               	movwf	6
  5708  02AC  0876               	movf	_Sw+1,w
  5709  02AD  0087               	movwf	7
  5710  02AE  3145               	addfsr 1,5
  5711  02AF  3F40               	moviw [0]fsr1
  5712  02B0  0020               	movlb	0	; select bank0
  5713  02B1  00EB               	movwf	??_setSw_Main
  5714  02B2  3F41               	moviw [1]fsr1
  5715  02B3  00EC               	movwf	??_setSw_Main+1
  5716  02B4  3000               	movlw	0
  5717  02B5  026C               	subwf	??_setSw_Main+1,w
  5718  02B6  3096               	movlw	150
  5719  02B7  1903               	skipnz
  5720  02B8  026B               	subwf	??_setSw_Main,w
  5721  02B9  1C03               	skipc
  5722  02BA  0008               	return
  5723                           
  5724                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5725  02BB  0875               	movf	_Sw,w
  5726  02BC  0086               	movwf	6
  5727  02BD  0876               	movf	_Sw+1,w
  5728  02BE  0087               	movwf	7
  5729  02BF  3145               	addfsr 1,5
  5730  02C0  3000               	movlw	0
  5731  02C1  3FC0               	movwi [0]fsr1
  5732  02C2  3FC1               	movwi [1]fsr1
  5733                           
  5734                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5735  02C3  0875               	movf	_Sw,w
  5736  02C4  0086               	movwf	6
  5737  02C5  0876               	movf	_Sw+1,w
  5738  02C6  0087               	movwf	7
  5739  02C7  1601               	bsf	1,4
  5740                           
  5741                           ;Switch_B1.c: 169: setRF_Learn(1);
  5742  02C8  3001               	movlw	1
  5743  02C9  319D  2511  3181   	fcall	_setRF_Learn
  5744                           
  5745                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5746  02CC  0022               	movlb	2	; select bank2
  5747  02CD  1EA0               	btfss	_myMain^(0+256),5
  5748  02CE  0008               	return
  5749                           
  5750                           ;Switch_B1.c: 172: setBuz(2, 100);
  5751  02CF  3064               	movlw	100
  5752  02D0  0020               	movlb	0	; select bank0
  5753  02D1  00A9               	movwf	setBuz@time
  5754  02D2  3000               	movlw	0
  5755  02D3  00AA               	movwf	setBuz@time+1
  5756  02D4  3002               	movlw	2
  5757  02D5  3196  2697         	fcall	_setBuz
  5758                           
  5759                           ;Switch_B1.c: 173: }
  5760                           ;Switch_B1.c: 175: }
  5761                           ;Switch_B1.c: 176: } else {
  5762  02D7  0008               	return
  5763  02D8                     l10471:	
  5764                           
  5765                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5766  02D8  0875               	movf	_Sw,w
  5767  02D9  0086               	movwf	6
  5768  02DA  0876               	movf	_Sw+1,w
  5769  02DB  0087               	movwf	7
  5770  02DC  1A81               	btfsc	1,5
  5771  02DD  0008               	return
  5772                           
  5773                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5774  02DE  0875               	movf	_Sw,w
  5775  02DF  0086               	movwf	6
  5776  02E0  0876               	movf	_Sw+1,w
  5777  02E1  0087               	movwf	7
  5778  02E2  3147               	addfsr 1,7
  5779  02E3  3001               	movlw	1
  5780  02E4  0781               	addwf	1,f
  5781  02E5  3141               	addfsr 1,1
  5782  02E6  1803               	skipnc
  5783  02E7  0A81               	incf	1,f
  5784                           
  5785                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5786  02E8  0875               	movf	_Sw,w
  5787  02E9  0086               	movwf	6
  5788  02EA  0876               	movf	_Sw+1,w
  5789  02EB  0087               	movwf	7
  5790  02EC  3147               	addfsr 1,7
  5791  02ED  3F40               	moviw [0]fsr1
  5792  02EE  0020               	movlb	0	; select bank0
  5793  02EF  00EB               	movwf	??_setSw_Main
  5794  02F0  3F41               	moviw [1]fsr1
  5795  02F1  00EC               	movwf	??_setSw_Main+1
  5796  02F2  3001               	movlw	1
  5797  02F3  026C               	subwf	??_setSw_Main+1,w
  5798  02F4  302C               	movlw	44
  5799  02F5  1903               	skipnz
  5800  02F6  026B               	subwf	??_setSw_Main,w
  5801  02F7  1C03               	skipc
  5802  02F8  0008               	return
  5803                           
  5804                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5805  02F9  0875               	movf	_Sw,w
  5806  02FA  0086               	movwf	6
  5807  02FB  0876               	movf	_Sw+1,w
  5808  02FC  0087               	movwf	7
  5809  02FD  3147               	addfsr 1,7
  5810  02FE  3000               	movlw	0
  5811  02FF  3FC0               	movwi [0]fsr1
  5812  0300  3FC1               	movwi [1]fsr1
  5813                           
  5814                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5815  0301  0875               	movf	_Sw,w
  5816  0302  0086               	movwf	6
  5817  0303  0876               	movf	_Sw+1,w
  5818  0304  0087               	movwf	7
  5819  0305  1681               	bsf	1,5
  5820                           
  5821                           ;Switch_B1.c: 184: setRF_Learn(0);
  5822  0306  3000               	movlw	0
  5823  0307  319D  2511         	fcall	_setRF_Learn
  5824                           
  5825                           ;Switch_B1.c: 187: }
  5826                           ;Switch_B1.c: 188: }
  5827                           ;Switch_B1.c: 189: }
  5828                           ;Switch_B1.c: 190: }
  5829                           ;Switch_B1.c: 191: }
  5830                           ;Switch_B1.c: 192: } else {
  5831  0309  0008               	return
  5832  030A                     l10481:	
  5833                           
  5834                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5835  030A  0875               	movf	_Sw,w
  5836  030B  0086               	movwf	6
  5837  030C  0876               	movf	_Sw+1,w
  5838  030D  0087               	movwf	7
  5839  030E  1D01               	btfss	1,2
  5840  030F  0008               	return
  5841                           
  5842                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5843  0310  3001               	movlw	1
  5844  0311  0020               	movlb	0	; select bank0
  5845  0312  00EB               	movwf	??_setSw_Main
  5846  0313  0875               	movf	_Sw,w
  5847  0314  0086               	movwf	6
  5848  0315  0876               	movf	_Sw+1,w
  5849  0316  0087               	movwf	7
  5850  0317  3142               	addfsr 1,2
  5851  0318  086B               	movf	??_setSw_Main,w
  5852  0319  0781               	addwf	1,f
  5853                           
  5854                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5855  031A  0875               	movf	_Sw,w
  5856  031B  0086               	movwf	6
  5857  031C  0876               	movf	_Sw+1,w
  5858  031D  0087               	movwf	7
  5859  031E  3142               	addfsr 1,2
  5860  031F  3005               	movlw	5
  5861  0320  0201               	subwf	1,w
  5862  0321  1C03               	skipc
  5863  0322  0008               	return
  5864                           
  5865                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5866  0323  0875               	movf	_Sw,w
  5867  0324  0086               	movwf	6
  5868  0325  0876               	movf	_Sw+1,w
  5869  0326  0087               	movwf	7
  5870  0327  3142               	addfsr 1,2
  5871  0328  0181               	clrf	1
  5872                           
  5873                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5874  0329  0875               	movf	_Sw,w
  5875  032A  0086               	movwf	6
  5876  032B  0876               	movf	_Sw+1,w
  5877  032C  0087               	movwf	7
  5878  032D  1101               	bcf	1,2
  5879                           
  5880                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5881  032E  0875               	movf	_Sw,w
  5882  032F  0086               	movwf	6
  5883  0330  0876               	movf	_Sw+1,w
  5884  0331  0087               	movwf	7
  5885  0332  3143               	addfsr 1,3
  5886  0333  3000               	movlw	0
  5887  0334  3FC0               	movwi [0]fsr1
  5888  0335  3FC1               	movwi [1]fsr1
  5889                           
  5890                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5891  0336  0875               	movf	_Sw,w
  5892  0337  0086               	movwf	6
  5893  0338  0876               	movf	_Sw+1,w
  5894  0339  0087               	movwf	7
  5895  033A  1181               	bcf	1,3
  5896                           
  5897                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5898  033B  0875               	movf	_Sw,w
  5899  033C  0086               	movwf	6
  5900  033D  0876               	movf	_Sw+1,w
  5901  033E  0087               	movwf	7
  5902  033F  3145               	addfsr 1,5
  5903  0340  3000               	movlw	0
  5904  0341  3FC0               	movwi [0]fsr1
  5905  0342  3FC1               	movwi [1]fsr1
  5906                           
  5907                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5908  0343  0875               	movf	_Sw,w
  5909  0344  0086               	movwf	6
  5910  0345  0876               	movf	_Sw+1,w
  5911  0346  0087               	movwf	7
  5912  0347  1201               	bcf	1,4
  5913                           
  5914                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5915  0348  0875               	movf	_Sw,w
  5916  0349  0086               	movwf	6
  5917  034A  0876               	movf	_Sw+1,w
  5918  034B  0087               	movwf	7
  5919  034C  3147               	addfsr 1,7
  5920  034D  3000               	movlw	0
  5921  034E  3FC0               	movwi [0]fsr1
  5922  034F  3FC1               	movwi [1]fsr1
  5923                           
  5924                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5925  0350  0875               	movf	_Sw,w
  5926  0351  0086               	movwf	6
  5927  0352  0876               	movf	_Sw+1,w
  5928  0353  0087               	movwf	7
  5929  0354  1281               	bcf	1,5
  5930                           
  5931                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5932  0355  086D               	movf	setSw_Main@sw,w
  5933  0356  3194  2454  3181   	fcall	_setDimmerLights_SwOff
  5934                           
  5935                           ;Switch_B1.c: 209: setRF_Learn(0);
  5936  0359  3000               	movlw	0
  5937  035A  319D  2511         	fcall	_setRF_Learn
  5938                           
  5939                           ;Switch_B1.c: 211: }
  5940                           ;Switch_B1.c: 212: }
  5941                           ;Switch_B1.c: 213: }
  5942                           ;Switch_B1.c: 214: } else {
  5943  035C  0008               	return
  5944  035D                     l2678:	
  5945                           
  5946                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5947  035D  0022               	movlb	2	; select bank2
  5948  035E  1C20               	btfss	_myMain^(0+256),0
  5949  035F  0008               	return
  5950                           
  5951                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5952  0360  0875               	movf	_Sw,w
  5953  0361  0086               	movwf	6
  5954  0362  0876               	movf	_Sw+1,w
  5955  0363  0087               	movwf	7
  5956  0364  1401               	bsf	1,0
  5957  0365  0008               	return
  5958  0366                     __end_of_setSw_Main:	
  5959                           
  5960                           	psect	text14
  5961  1D11                     __ptext14:	
  5962 ;; *************** function _setRF_Learn *****************
  5963 ;; Defined at:
  5964 ;;		line 23 in file "../src/RF_Control_B1.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;  command         1    wreg     unsigned char 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  command         1    1[BANK0 ] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        2 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:    5
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_setSw_Main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function _setRF_Learn
  5994  1D11                     _setRF_Learn:	
  5995                           
  5996                           ;incstack = 0
  5997                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5998                           ;setRF_Learn@command stored from wreg
  5999  1D11  0020               	movlb	0	; select bank0
  6000  1D12  00A1               	movwf	setRF_Learn@command
  6001                           
  6002                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6003  1D13  0821               	movf	setRF_Learn@command,w
  6004  1D14  3A01               	xorlw	1
  6005  1D15  3000               	movlw	0
  6006  1D16  1903               	skipnz
  6007  1D17  3001               	movlw	1
  6008  1D18  00A0               	movwf	??_setRF_Learn
  6009  1D19  0EA0               	swapf	??_setRF_Learn,f
  6010  1D1A  0DA0               	rlf	??_setRF_Learn,f
  6011  1D1B  0DA0               	rlf	??_setRF_Learn,f
  6012  1D1C  0021               	movlb	1	; select bank1
  6013  1D1D  0820               	movf	_RF1^(0+128),w
  6014  1D1E  0020               	movlb	0	; select bank0
  6015  1D1F  0620               	xorwf	??_setRF_Learn,w
  6016  1D20  39BF               	andlw	-65
  6017  1D21  0620               	xorwf	??_setRF_Learn,w
  6018  1D22  0021               	movlb	1	; select bank1
  6019  1D23  00A0               	movwf	_RF1^(0+128)
  6020  1D24  0008               	return
  6021  1D25                     __end_of_setRF_Learn:	
  6022                           
  6023                           	psect	text15
  6024  10E8                     __ptext15:	
  6025 ;; *************** function _setDimmerLights_AdjOn *****************
  6026 ;; Defined at:
  6027 ;;		line 477 in file "../src/Dimmer_B1.c"
  6028 ;; Parameters:    Size  Location     Type
  6029 ;;  sw              1    wreg     unsigned char 
  6030 ;; Auto vars:     Size  Location     Type
  6031 ;;  sw              1    2[BANK0 ] unsigned char 
  6032 ;; Return value:  Size  Location     Type
  6033 ;;		None               void
  6034 ;; Registers used:
  6035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6036 ;; Tracked objects:
  6037 ;;		On entry : 0/0
  6038 ;;		On exit  : 0/0
  6039 ;;		Unchanged: 0/0
  6040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6045 ;;Total ram usage:        1 bytes
  6046 ;; Hardware stack levels used:    1
  6047 ;; Hardware stack levels required when called:    6
  6048 ;; This function calls:
  6049 ;;		_DimmerLightsPointSelect
  6050 ;; This function is called by:
  6051 ;;		_setSw_Main
  6052 ;; This function uses a non-reentrant model
  6053 ;;
  6054                           
  6055                           
  6056                           ;psect for function _setDimmerLights_AdjOn
  6057  10E8                     _setDimmerLights_AdjOn:	
  6058                           
  6059                           ;incstack = 0
  6060                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6061                           ;setDimmerLights_AdjOn@sw stored from wreg
  6062  10E8  0020               	movlb	0	; select bank0
  6063  10E9  00A2               	movwf	setDimmerLights_AdjOn@sw
  6064                           
  6065                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6066  10EA  0822               	movf	setDimmerLights_AdjOn@sw,w
  6067  10EB  319C  2462  3190   	fcall	_DimmerLightsPointSelect
  6068                           
  6069                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0) {
  6070  10EE  0020               	movlb	0	; select bank0
  6071  10EF  086F               	movf	_DimmerLights,w
  6072  10F0  3E0A               	addlw	10
  6073  10F1  0086               	movwf	6
  6074  10F2  3001               	movlw	1	; select bank2/3
  6075  10F3  0087               	movwf	7
  6076  10F4  1881               	btfsc	1,1
  6077  10F5  0008               	return
  6078                           
  6079                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6080  10F6  086F               	movf	_DimmerLights,w
  6081  10F7  3E0B               	addlw	11
  6082  10F8  0086               	movwf	6
  6083  10F9  3001               	movlw	1	; select bank2/3
  6084  10FA  0087               	movwf	7
  6085  10FB  1C81               	btfss	1,1
  6086  10FC  0008               	return
  6087                           
  6088                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6089  10FD  086F               	movf	_DimmerLights,w
  6090  10FE  3E0B               	addlw	11
  6091  10FF  0086               	movwf	6
  6092  1100  3001               	movlw	1	; select bank2/3
  6093  1101  0087               	movwf	7
  6094  1102  1501               	bsf	1,2
  6095                           
  6096                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6097  1103  086F               	movf	_DimmerLights,w
  6098  1104  3E02               	addlw	2
  6099  1105  0086               	movwf	6
  6100  1106  3001               	movlw	1	; select bank2/3
  6101  1107  0087               	movwf	7
  6102  1108  1481               	bsf	1,1
  6103                           
  6104                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6105  1109  086F               	movf	_DimmerLights,w
  6106  110A  3E0A               	addlw	10
  6107  110B  0086               	movwf	6
  6108  110C  3001               	movlw	1	; select bank2/3
  6109  110D  0087               	movwf	7
  6110  110E  1581               	bsf	1,3
  6111                           
  6112                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6113  110F  086F               	movf	_DimmerLights,w
  6114  1110  3E0A               	addlw	10
  6115  1111  0086               	movwf	6
  6116  1112  3001               	movlw	1	; select bank2/3
  6117  1113  0087               	movwf	7
  6118  1114  1501               	bsf	1,2
  6119  1115  0008               	return
  6120  1116                     __end_of_setDimmerLights_AdjOn:	
  6121                           
  6122                           	psect	text16
  6123  1E84                     __ptext16:	
  6124 ;; *************** function _getSw_KeyStatus *****************
  6125 ;; Defined at:
  6126 ;;		line 222 in file "../src/Switch_B1.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  sw              1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  sw              1    4[BANK0 ] unsigned char 
  6131 ;;  status          1    3[BANK0 ] unsigned char 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      unsigned char 
  6134 ;; Registers used:
  6135 ;;		wreg, status,2
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;Total ram usage:        5 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    5
  6148 ;; This function calls:
  6149 ;;		Nothing
  6150 ;; This function is called by:
  6151 ;;		_setSw_Main
  6152 ;; This function uses a non-reentrant model
  6153 ;;
  6154                           
  6155                           
  6156                           ;psect for function _getSw_KeyStatus
  6157  1E84                     _getSw_KeyStatus:	
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6161                           ;getSw_KeyStatus@sw stored from wreg
  6162  1E84  0020               	movlb	0	; select bank0
  6163  1E85  00A4               	movwf	getSw_KeyStatus@sw
  6164                           
  6165                           ;Switch_B1.c: 223: char status = 0;
  6166  1E86  01A3               	clrf	getSw_KeyStatus@status
  6167                           
  6168                           ;Switch_B1.c: 235: if (sw == 1) {
  6169  1E87  0824               	movf	getSw_KeyStatus@sw,w
  6170  1E88  3A01               	xorlw	1
  6171  1E89  1D03               	skipz
  6172  1E8A  2E93               	goto	l9997
  6173                           
  6174                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6175  1E8B  01A1               	clrf	_getSw_KeyStatus$6287
  6176  1E8C  0AA1               	incf	_getSw_KeyStatus$6287,f
  6177  1E8D  1F0C               	btfss	12,6	;volatile
  6178  1E8E  1A0C               	btfsc	12,4	;volatile
  6179  1E8F  2E91               	goto	l9995
  6180  1E90  01A1               	clrf	_getSw_KeyStatus$6287
  6181  1E91                     l9995:	
  6182  1E91  0821               	movf	_getSw_KeyStatus$6287,w
  6183  1E92  2E9E               	goto	L2
  6184  1E93                     l9997:	
  6185                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6186                           
  6187  1E93  0824               	movf	getSw_KeyStatus@sw,w
  6188  1E94  3A02               	xorlw	2
  6189  1E95  1D03               	skipz
  6190  1E96  2EA1               	goto	l10007
  6191                           
  6192                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6193  1E97  01A2               	clrf	_getSw_KeyStatus$6288
  6194  1E98  0AA2               	incf	_getSw_KeyStatus$6288,f
  6195  1E99  1C0C               	btfss	12,0	;volatile
  6196  1E9A  188D               	btfsc	13,1	;volatile
  6197  1E9B  2E9D               	goto	l10005
  6198  1E9C  01A2               	clrf	_getSw_KeyStatus$6288
  6199  1E9D                     l10005:	
  6200  1E9D  0822               	movf	_getSw_KeyStatus$6288,w
  6201  1E9E                     L2:	
  6202  1E9E  00A0               	movwf	??_getSw_KeyStatus
  6203  1E9F  0820               	movf	??_getSw_KeyStatus,w
  6204  1EA0  00A3               	movwf	getSw_KeyStatus@status
  6205  1EA1                     l10007:	
  6206                           
  6207                           ;Switch_B1.c: 239: }
  6208                           ;Switch_B1.c: 246: return status;
  6209  1EA1  0823               	movf	getSw_KeyStatus@status,w
  6210  1EA2  0008               	return
  6211  1EA3                     __end_of_getSw_KeyStatus:	
  6212                           
  6213                           	psect	text17
  6214  1CFD                     __ptext17:	
  6215 ;; *************** function _SwPointSelect *****************
  6216 ;; Defined at:
  6217 ;;		line 25 in file "../src/Switch_B1.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  sw              1    wreg     unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  sw              1    0[BANK0 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;		None               void
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;Total ram usage:        1 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    5
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_setSw_Main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _SwPointSelect
  6247  1CFD                     _SwPointSelect:	
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  6251                           ;SwPointSelect@sw stored from wreg
  6252  1CFD  0020               	movlb	0	; select bank0
  6253  1CFE  00A0               	movwf	SwPointSelect@sw
  6254                           
  6255                           ;Switch_B1.c: 28: if (sw == 1) {
  6256  1CFF  0820               	movf	SwPointSelect@sw,w
  6257  1D00  3A01               	xorlw	1
  6258  1D01  1D03               	skipz
  6259  1D02  2D08               	goto	l9981
  6260                           
  6261                           ;Switch_B1.c: 29: Sw = &Sw1;
  6262  1D03  30E0               	movlw	low _Sw1
  6263  1D04  00F5               	movwf	_Sw
  6264  1D05  3001               	movlw	high _Sw1
  6265  1D06  00F6               	movwf	_Sw+1
  6266                           
  6267                           ;Switch_B1.c: 30: }
  6268  1D07  0008               	return
  6269  1D08                     l9981:	
  6270                           
  6271                           ;Switch_B1.c: 33: else if (sw == 2) {
  6272  1D08  0820               	movf	SwPointSelect@sw,w
  6273  1D09  3A02               	xorlw	2
  6274  1D0A  1D03               	skipz
  6275  1D0B  0008               	return
  6276                           
  6277                           ;Switch_B1.c: 34: Sw = &Sw2;
  6278  1D0C  3045               	movlw	low _Sw2
  6279  1D0D  00F5               	movwf	_Sw
  6280  1D0E  3002               	movlw	high _Sw2
  6281  1D0F  00F6               	movwf	_Sw+1
  6282  1D10  0008               	return
  6283  1D11                     __end_of_SwPointSelect:	
  6284                           
  6285                           	psect	text18
  6286  1B7C                     __ptext18:	
  6287 ;; *************** function _Switch_Initialization *****************
  6288 ;; Defined at:
  6289 ;;		line 46 in file "../src/Switch_B1.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    8
  6310 ;; This function calls:
  6311 ;;		_TouchPower
  6312 ;;		_setSw_Initialization
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _Switch_Initialization
  6320  1B7C                     _Switch_Initialization:	
  6321                           
  6322                           ;Switch_B1.c: 47: TouchPower();
  6323                           
  6324                           ;incstack = 0
  6325                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6326  1B7C  319D  2564  319B   	fcall	_TouchPower
  6327                           
  6328                           ;Switch_B1.c: 49: WPUB1 = 0;
  6329  1B7F  0024               	movlb	4	; select bank4
  6330  1B80  108D               	bcf	13,1	;volatile
  6331                           
  6332                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6333  1B81  3001               	movlw	1
  6334  1B82  319A  22ED  319B   	fcall	_setSw_Initialization
  6335                           
  6336                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6337  1B85  3002               	movlw	2
  6338  1B86  319A  22ED         	fcall	_setSw_Initialization
  6339  1B88  0008               	return
  6340  1B89                     __end_of_Switch_Initialization:	
  6341                           
  6342                           	psect	text19
  6343  1AED                     __ptext19:	
  6344 ;; *************** function _setSw_Initialization *****************
  6345 ;; Defined at:
  6346 ;;		line 93 in file "../src/Switch_B1.c"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  sw              1    wreg     unsigned char 
  6349 ;; Auto vars:     Size  Location     Type
  6350 ;;  sw              1    3[BANK0 ] unsigned char 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;		None               void
  6353 ;; Registers used:
  6354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;Total ram usage:        1 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    7
  6367 ;; This function calls:
  6368 ;;		_setLED
  6369 ;; This function is called by:
  6370 ;;		_Switch_Initialization
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _setSw_Initialization
  6376  1AED                     _setSw_Initialization:	
  6377                           
  6378                           ;incstack = 0
  6379                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6380                           ;setSw_Initialization@sw stored from wreg
  6381  1AED  0020               	movlb	0	; select bank0
  6382  1AEE  00A3               	movwf	setSw_Initialization@sw
  6383                           
  6384                           ;Switch_B1.c: 94: setLED(sw, 1);
  6385  1AEF  01A1               	clrf	setLED@command
  6386  1AF0  0AA1               	incf	setLED@command,f
  6387  1AF1  0823               	movf	setSw_Initialization@sw,w
  6388  1AF2  3195  25EB         	fcall	_setLED
  6389  1AF4  0008               	return
  6390  1AF5                     __end_of_setSw_Initialization:	
  6391                           
  6392                           	psect	text20
  6393  1D64                     __ptext20:	
  6394 ;; *************** function _TouchPower *****************
  6395 ;; Defined at:
  6396 ;;		line 10 in file "../src/Switch_B1.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;		None
  6401 ;; Return value:  Size  Location     Type
  6402 ;;		None               void
  6403 ;; Registers used:
  6404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;Total ram usage:        0 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    6
  6417 ;; This function calls:
  6418 ;;		_Timeout_Counter
  6419 ;;		_set_TimeoutCleared
  6420 ;; This function is called by:
  6421 ;;		_Switch_Initialization
  6422 ;;		_Switch_Main
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           
  6427                           ;psect for function _TouchPower
  6428  1D64                     _TouchPower:	
  6429                           
  6430                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6431                           
  6432                           ;incstack = 0
  6433                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6434  1D64  0022               	movlb	2	; select bank2
  6435  1D65  1C20               	btfss	_myMain^(0+256),0
  6436  1D66  0008               	return
  6437                           
  6438                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6439  1D67  0020               	movlb	0	; select bank0
  6440  1D68  1A8E               	btfsc	14,5	;volatile
  6441  1D69  0008               	return
  6442  1D6A  2D70               	goto	l10413
  6443  1D6B                     l2656:	
  6444                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6445                           
  6446                           
  6447                           ;Switch_B1.c: 14: RC5 = 1;
  6448  1D6B  0020               	movlb	0	; select bank0
  6449  1D6C  168E               	bsf	14,5	;volatile
  6450                           
  6451                           ;Switch_B1.c: 15: Timeout_Counter();
  6452  1D6D  319D  2579  319D   	fcall	_Timeout_Counter
  6453  1D70                     l10413:	
  6454  1D70  0020               	movlb	0	; select bank0
  6455  1D71  1A8E               	btfsc	14,5	;volatile
  6456  1D72  2D76               	goto	l10417
  6457  1D73  0022               	movlb	2	; select bank2
  6458  1D74  1D2B               	btfss	(_myMain^(0+256)+11),2
  6459  1D75  2D6B               	goto	l2656
  6460  1D76                     l10417:	
  6461                           
  6462                           ;Switch_B1.c: 16: }
  6463                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6464  1D76  319A  229F         	fcall	_set_TimeoutCleared
  6465  1D78  0008               	return
  6466  1D79                     __end_of_TouchPower:	
  6467                           
  6468                           	psect	text21
  6469  1A9F                     __ptext21:	
  6470 ;; *************** function _set_TimeoutCleared *****************
  6471 ;; Defined at:
  6472 ;;		line 283 in file "../src/Main_B1.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;		None               void
  6479 ;; Registers used:
  6480 ;;		status,2
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    5
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_getAD
  6497 ;;		_TouchPower
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           
  6502                           ;psect for function _set_TimeoutCleared
  6503  1A9F                     _set_TimeoutCleared:	
  6504                           
  6505                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6506                           
  6507                           ;incstack = 0
  6508                           ; Regs used in _set_TimeoutCleared: [status,2]
  6509  1A9F  0022               	movlb	2	; select bank2
  6510  1AA0  112B               	bcf	(_myMain^(0+256)+11),2
  6511                           
  6512                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6513  1AA1  01AC               	clrf	(_myMain^(0+256)+12)
  6514  1AA2  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6515  1AA3  0008               	return
  6516  1AA4                     __end_of_set_TimeoutCleared:	
  6517                           
  6518                           	psect	text22
  6519  1D79                     __ptext22:	
  6520 ;; *************** function _Timeout_Counter *****************
  6521 ;; Defined at:
  6522 ;;		line 274 in file "../src/Main_B1.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;		None               void
  6529 ;; Registers used:
  6530 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    5
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_getAD
  6547 ;;		_TouchPower
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _Timeout_Counter
  6553  1D79                     _Timeout_Counter:	
  6554                           
  6555                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6559  1D79  3001               	movlw	1
  6560  1D7A  0022               	movlb	2	; select bank2
  6561  1D7B  07AC               	addwf	(_myMain^(0+256)+12),f
  6562  1D7C  3000               	movlw	0
  6563  1D7D  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6564                           
  6565                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
  6566  1D7E  300C               	movlw	12
  6567  1D7F  3E20               	addlw	_myMain& (0+255)
  6568  1D80  0086               	movwf	6
  6569  1D81  3001               	movlw	1	; select bank2/3
  6570  1D82  0087               	movwf	7
  6571  1D83  3F40               	moviw [0]fsr1
  6572  1D84  3AA8               	xorlw	168
  6573  1D85  1D03               	skipz
  6574  1D86  2D89               	goto	u10905
  6575  1D87  3F41               	moviw [1]fsr1
  6576  1D88  3A61               	xorlw	97
  6577  1D89                     u10905:	
  6578  1D89  1D03               	skipz
  6579  1D8A  0008               	return
  6580                           
  6581                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6582  1D8B  01AC               	clrf	(_myMain^(0+256)+12)
  6583  1D8C  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6584                           
  6585                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6586  1D8D  152B               	bsf	(_myMain^(0+256)+11),2
  6587  1D8E  0008               	return
  6588  1D8F                     __end_of_Timeout_Counter:	
  6589                           
  6590                           	psect	text23
  6591  1A82                     __ptext23:	
  6592 ;; *************** function _RF_Main *****************
  6593 ;; Defined at:
  6594 ;;		line 16 in file "../src/RF_Control_B1.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;		None
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 0/0
  6605 ;;		On exit  : 0/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        0 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:   14
  6615 ;; This function calls:
  6616 ;;		_setRF_Main
  6617 ;; This function is called by:
  6618 ;;		_main
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _RF_Main
  6624  1A82                     _RF_Main:	
  6625                           
  6626                           ;RF_Control_B1.c: 18: setRF_Main();
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6630  1A82  318E  2601         	fcall	_setRF_Main
  6631  1A84  0008               	return
  6632  1A85                     __end_of_RF_Main:	
  6633                           
  6634                           	psect	text24
  6635  0E01                     __ptext24:	
  6636 ;; *************** function _setRF_Main *****************
  6637 ;; Defined at:
  6638 ;;		line 53 in file "../src/RF_Control_B1.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  error           1    7[BANK1 ] unsigned char 
  6643 ;;  Receive_OK      1    6[BANK1 ] unsigned char 
  6644 ;;  loop_f          1    5[BANK1 ] unsigned char 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;		None               void
  6647 ;; Registers used:
  6648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6657 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;Total ram usage:        3 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:   13
  6661 ;; This function calls:
  6662 ;;		_CC2500_PowerOnInitial
  6663 ;;		_CC2500_RxData
  6664 ;;		_CC2500_TxData
  6665 ;;		_CC2500_WriteCommand
  6666 ;;		_RF_RxDisable
  6667 ;;		_getBuz_GO
  6668 ;;		_getMain_All_Error_Status
  6669 ;;		_getRF_KeyStatus
  6670 ;;		_getRxData
  6671 ;; This function is called by:
  6672 ;;		_RF_Main
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           
  6677                           ;psect for function _setRF_Main
  6678  0E01                     _setRF_Main:	
  6679                           
  6680                           ;RF_Control_B1.c: 54: char loop_f = 0, Receive_OK = 0, error = 0;
  6681                           
  6682                           ;incstack = 0
  6683                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6684  0E01  0021               	movlb	1	; select bank1
  6685  0E02  01ED               	clrf	setRF_Main@loop_f^(0+128)
  6686  0E03  01EE               	clrf	setRF_Main@Receive_OK^(0+128)
  6687  0E04  01EF               	clrf	setRF_Main@error^(0+128)
  6688                           
  6689                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6690  0E05  1C20               	btfss	_RF1^(0+128),0
  6691  0E06  2E9F               	goto	l2256
  6692                           
  6693                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6694  0E07  319B  23E5  318E   	fcall	_getBuz_GO
  6695  0E0A  0020               	movlb	0	; select bank0
  6696  0E0B  0821               	movf	?_getBuz_GO+1,w
  6697  0E0C  0420               	iorwf	?_getBuz_GO,w
  6698  0E0D  1D03               	skipz
  6699  0E0E  2E87               	goto	l10389
  6700                           
  6701                           ;RF_Control_B1.c: 58: if (getMain_All_Error_Status(0) == 0) {
  6702  0E0F  3000               	movlw	0
  6703  0E10  3191  2176  318E   	fcall	_getMain_All_Error_Status
  6704  0E13  3800               	iorlw	0
  6705  0E14  1D03               	skipz
  6706  0E15  2E26               	goto	l10335
  6707                           
  6708                           ;RF_Control_B1.c: 60: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6709  0E16  319B  23F6  318E   	fcall	_getRF_KeyStatus
  6710  0E19  3A01               	xorlw	1
  6711  0E1A  1D03               	skipz
  6712  0E1B  2E26               	goto	l10335
  6713  0E1C  0021               	movlb	1	; select bank1
  6714  0E1D  1B20               	btfsc	_RF1^(0+128),6
  6715  0E1E  2E26               	goto	l10335
  6716                           
  6717                           ;RF_Control_B1.c: 61: RF1.Count = 0;
  6718  0E1F  01A2               	clrf	(_RF1^(0+128)+2)
  6719  0E20  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6720                           
  6721                           ;RF_Control_B1.c: 62: RF1.Run = 1;
  6722  0E21  14A1               	bsf	(_RF1^(0+128)+1),1
  6723                           
  6724                           ;RF_Control_B1.c: 63: RF1.RunTime = 5;
  6725  0E22  3005               	movlw	5
  6726  0E23  00A7               	movwf	(_RF1^(0+128)+7)
  6727  0E24  3000               	movlw	0
  6728  0E25  00A8               	movwf	(_RF1^(0+128)+8)
  6729  0E26                     l10335:	
  6730                           
  6731                           ;RF_Control_B1.c: 64: }
  6732                           ;RF_Control_B1.c: 74: }
  6733                           ;RF_Control_B1.c: 76: if (RF1.Learn == 0) {
  6734  0E26  0021               	movlb	1	; select bank1
  6735  0E27  1B20               	btfsc	_RF1^(0+128),6
  6736  0E28  2E3F               	goto	l2260
  6737                           
  6738                           ;RF_Control_B1.c: 77: if (RF1.Run == 1) {
  6739  0E29  1CA1               	btfss	(_RF1^(0+128)+1),1
  6740  0E2A  2E50               	goto	l10357
  6741                           
  6742                           ;RF_Control_B1.c: 78: RF1.Count++;
  6743  0E2B  3001               	movlw	1
  6744  0E2C  07A2               	addwf	(_RF1^(0+128)+2),f
  6745  0E2D  3000               	movlw	0
  6746  0E2E  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6747                           
  6748                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6749  0E2F  3002               	movlw	2
  6750  0E30  3EA0               	addlw	_RF1& (0+255)
  6751  0E31  0086               	movwf	6
  6752  0E32  0187               	clrf	7
  6753  0E33  3F40               	moviw [0]fsr1
  6754  0E34  0627               	xorwf	(_RF1^(0+128)+7),w
  6755  0E35  1D03               	skipz
  6756  0E36  2E39               	goto	u11715
  6757  0E37  3F41               	moviw [1]fsr1
  6758  0E38  0628               	xorwf	((_RF1+1)^(0+128)+7),w
  6759  0E39                     u11715:	
  6760  0E39  1D03               	skipz
  6761  0E3A  2E50               	goto	l10357
  6762                           
  6763                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6764  0E3B  01A2               	clrf	(_RF1^(0+128)+2)
  6765  0E3C  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6766                           
  6767                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6768  0E3D  10A1               	bcf	(_RF1^(0+128)+1),1
  6769                           
  6770                           ;RF_Control_B1.c: 82: }
  6771                           ;RF_Control_B1.c: 83: }
  6772                           ;RF_Control_B1.c: 84: } else {
  6773  0E3E  2E50               	goto	l10357
  6774  0E3F                     l2260:	
  6775                           
  6776                           ;RF_Control_B1.c: 85: if (RF1.TransceiveGO == 1) {
  6777  0E3F  1D20               	btfss	_RF1^(0+128),2
  6778  0E40  2E4A               	goto	l10351
  6779                           
  6780                           ;RF_Control_B1.c: 86: RF1.TransceiveGO = 0;
  6781  0E41  1120               	bcf	_RF1^(0+128),2
  6782                           
  6783                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  6784  0E42  3036               	movlw	54
  6785  0E43  319D  25D9  318E   	fcall	_CC2500_WriteCommand
  6786                           
  6787                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  6788  0E46  303B               	movlw	59
  6789  0E47  319D  25D9  318E   	fcall	_CC2500_WriteCommand
  6790  0E4A                     l10351:	
  6791                           
  6792                           ;RF_Control_B1.c: 89: }
  6793                           ;RF_Control_B1.c: 90: if (RF1.Run == 1) {
  6794  0E4A  0021               	movlb	1	; select bank1
  6795  0E4B  1CA1               	btfss	(_RF1^(0+128)+1),1
  6796  0E4C  2E50               	goto	l10357
  6797                           
  6798                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6799  0E4D  10A1               	bcf	(_RF1^(0+128)+1),1
  6800                           
  6801                           ;RF_Control_B1.c: 92: RF1.Count = 0;
  6802  0E4E  01A2               	clrf	(_RF1^(0+128)+2)
  6803  0E4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6804  0E50                     l10357:	
  6805                           
  6806                           ;RF_Control_B1.c: 93: }
  6807                           ;RF_Control_B1.c: 94: }
  6808                           ;RF_Control_B1.c: 96: if (RF1.Run == 0) {
  6809  0E50  18A1               	btfsc	(_RF1^(0+128)+1),1
  6810  0E51  2E87               	goto	l10389
  6811                           
  6812                           ;RF_Control_B1.c: 97: if (RF1.TransceiveGO == 1) {
  6813  0E52  1D20               	btfss	_RF1^(0+128),2
  6814  0E53  2E61               	goto	l2267
  6815                           
  6816                           ;RF_Control_B1.c: 98: RF1.TransceiveGO = 0;
  6817  0E54  1120               	bcf	_RF1^(0+128),2
  6818                           
  6819                           ;RF_Control_B1.c: 99: RF1.Run = 1;
  6820  0E55  14A1               	bsf	(_RF1^(0+128)+1),1
  6821                           
  6822                           ;RF_Control_B1.c: 100: RF1.RunTime = 5;
  6823  0E56  3005               	movlw	5
  6824  0E57  00A7               	movwf	(_RF1^(0+128)+7)
  6825  0E58  3000               	movlw	0
  6826  0E59  00A8               	movwf	(_RF1^(0+128)+8)
  6827                           
  6828                           ;RF_Control_B1.c: 101: RF_RxDisable();
  6829  0E5A  319B  23A6  318E   	fcall	_RF_RxDisable
  6830                           
  6831                           ;RF_Control_B1.c: 102: CC2500_TxData();
  6832  0E5D  318A  2297  318E   	fcall	_CC2500_TxData
  6833  0E60  2E76               	goto	l10385
  6834  0E61                     l2267:	
  6835                           ;RF_Control_B1.c: 105: } else {
  6836                           
  6837                           ;RF_Control_B1.c: 103: RF1.CorrectionCounter = 0;
  6838                           
  6839                           
  6840                           ;RF_Control_B1.c: 106: if (RF1.RxStatus == 1) {
  6841  0E61  1DA0               	btfss	_RF1^(0+128),3
  6842  0E62  2E7A               	goto	l2269
  6843                           
  6844                           ;RF_Control_B1.c: 107: if (RF1.Key == 0 || RF1.Learn == 1) {
  6845  0E63  1FA0               	btfss	_RF1^(0+128),7
  6846  0E64  2E67               	goto	l10375
  6847  0E65  1F20               	btfss	_RF1^(0+128),6
  6848  0E66  2E87               	goto	l10389
  6849  0E67                     l10375:	
  6850                           
  6851                           ;RF_Control_B1.c: 109: CC2500_RxData();
  6852  0E67  318B  2370  318E   	fcall	_CC2500_RxData
  6853                           
  6854                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6855  0E6A  0021               	movlb	1	; select bank1
  6856  0E6B  1CA0               	btfss	_RF1^(0+128),1
  6857  0E6C  2E87               	goto	l10389
  6858                           
  6859                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6860  0E6D  10A0               	bcf	_RF1^(0+128),1
  6861                           
  6862                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  6863  0E6E  14A1               	bsf	(_RF1^(0+128)+1),1
  6864                           
  6865                           ;RF_Control_B1.c: 115: RF1.RunTime = 5;
  6866  0E6F  3005               	movlw	5
  6867  0E70  00A7               	movwf	(_RF1^(0+128)+7)
  6868  0E71  3000               	movlw	0
  6869  0E72  00A8               	movwf	(_RF1^(0+128)+8)
  6870                           
  6871                           ;RF_Control_B1.c: 123: getRxData();
  6872  0E73  318B  23E8  318E   	fcall	_getRxData
  6873  0E76                     l10385:	
  6874                           
  6875                           ;RF_Control_B1.c: 126: RF1.CorrectionCounter = 0;
  6876  0E76  0021               	movlb	1	; select bank1
  6877  0E77  01AA               	clrf	(_RF1^(0+128)+10)
  6878  0E78  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6879                           
  6880                           ;RF_Control_B1.c: 127: }
  6881                           ;RF_Control_B1.c: 128: }
  6882                           ;RF_Control_B1.c: 129: } else {
  6883  0E79  2E87               	goto	l10389
  6884  0E7A                     l2269:	
  6885                           
  6886                           ;RF_Control_B1.c: 131: RF1.RxStatus = 1;
  6887  0E7A  15A0               	bsf	_RF1^(0+128),3
  6888                           
  6889                           ;RF_Control_B1.c: 132: CC2500_WriteCommand(0x36);
  6890  0E7B  3036               	movlw	54
  6891  0E7C  319D  25D9  318E   	fcall	_CC2500_WriteCommand
  6892                           
  6893                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x3A);
  6894  0E7F  303A               	movlw	58
  6895  0E80  319D  25D9  318E   	fcall	_CC2500_WriteCommand
  6896                           
  6897                           ;RF_Control_B1.c: 134: CC2500_WriteCommand(0x34);
  6898  0E83  3034               	movlw	52
  6899  0E84  319D  25D9  318E   	fcall	_CC2500_WriteCommand
  6900  0E87                     l10389:	
  6901                           
  6902                           ;RF_Control_B1.c: 136: }
  6903                           ;RF_Control_B1.c: 137: }
  6904                           ;RF_Control_B1.c: 138: }
  6905                           ;RF_Control_B1.c: 139: }
  6906                           ;RF_Control_B1.c: 141: RF1.CorrectionCounter++;
  6907  0E87  3001               	movlw	1
  6908  0E88  0021               	movlb	1	; select bank1
  6909  0E89  07AA               	addwf	(_RF1^(0+128)+10),f
  6910  0E8A  3000               	movlw	0
  6911  0E8B  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6912                           
  6913                           ;RF_Control_B1.c: 142: if (RF1.CorrectionCounter > 6000) {
  6914  0E8C  3017               	movlw	23
  6915  0E8D  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6916  0E8E  3071               	movlw	113
  6917  0E8F  1903               	skipnz
  6918  0E90  022A               	subwf	(_RF1^(0+128)+10),w
  6919  0E91  1C03               	skipc
  6920  0E92  2E98               	goto	l10397
  6921                           
  6922                           ;RF_Control_B1.c: 143: RF1.CorrectionCounter = 0;
  6923  0E93  01AA               	clrf	(_RF1^(0+128)+10)
  6924  0E94  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6925                           
  6926                           ;RF_Control_B1.c: 144: RF_RxDisable();
  6927  0E95  319B  23A6  318E   	fcall	_RF_RxDisable
  6928  0E98                     l10397:	
  6929                           
  6930                           ;RF_Control_B1.c: 145: }
  6931                           ;RF_Control_B1.c: 147: if (RF1.Timeout == 1) {
  6932  0E98  0021               	movlb	1	; select bank1
  6933  0E99  1F21               	btfss	(_RF1^(0+128)+1),6
  6934  0E9A  0008               	return
  6935                           
  6936                           ;RF_Control_B1.c: 148: RF1.Timeout = 0;
  6937  0E9B  1321               	bcf	(_RF1^(0+128)+1),6
  6938                           
  6939                           ;RF_Control_B1.c: 149: CC2500_PowerOnInitial();
  6940  0E9C  319D  254F         	fcall	_CC2500_PowerOnInitial
  6941                           
  6942                           ;RF_Control_B1.c: 150: }
  6943                           ;RF_Control_B1.c: 152: } else {
  6944  0E9E  0008               	return
  6945  0E9F                     l2256:	
  6946                           
  6947                           ;RF_Control_B1.c: 153: if (myMain.PowerON == 1) {
  6948  0E9F  0022               	movlb	2	; select bank2
  6949  0EA0  1C20               	btfss	_myMain^(0+256),0
  6950  0EA1  0008               	return
  6951                           
  6952                           ;RF_Control_B1.c: 154: RF1.Enable = 1;
  6953  0EA2  0021               	movlb	1	; select bank1
  6954  0EA3  1420               	bsf	_RF1^(0+128),0
  6955  0EA4  0008               	return
  6956  0EA5                     __end_of_setRF_Main:	
  6957                           
  6958                           	psect	text25
  6959  0BE8                     __ptext25:	
  6960 ;; *************** function _getRxData *****************
  6961 ;; Defined at:
  6962 ;;		line 260 in file "../src/RF_Control_B1.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  error           1    4[BANK1 ] unsigned char 
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;Total ram usage:        2 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:   12
  6983 ;; This function calls:
  6984 ;;		_getMain_All_Error_Status
  6985 ;;		_setControl_Lights_Table
  6986 ;;		_setLog_Code
  6987 ;;		_setTxData
  6988 ;; This function is called by:
  6989 ;;		_setRF_Main
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _getRxData
  6995  0BE8                     _getRxData:	
  6996                           
  6997                           ;RF_Control_B1.c: 261: char error = getMain_All_Error_Status(0);
  6998                           
  6999                           ;incstack = 0
  7000                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7001  0BE8  3000               	movlw	0
  7002  0BE9  3191  2176  318B   	fcall	_getMain_All_Error_Status
  7003  0BEC  0020               	movlb	0	; select bank0
  7004  0BED  00EE               	movwf	??_getRxData
  7005  0BEE  086E               	movf	??_getRxData,w
  7006  0BEF  0021               	movlb	1	; select bank1
  7007  0BF0  00EC               	movwf	getRxData@error^(0+128)
  7008                           
  7009                           ;RF_Control_B1.c: 262: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7010  0BF1  0023               	movlb	3	; select bank3
  7011  0BF2  0820               	movf	_RF_Data^(0+384),w
  7012  0BF3  3AAA               	xorlw	170
  7013  0BF4  1D03               	skipz
  7014  0BF5  2C07               	goto	l9935
  7015  0BF6  0821               	movf	(_RF_Data^(0+384)+1),w
  7016  0BF7  3A01               	xorlw	1
  7017  0BF8  1D03               	skipz
  7018  0BF9  2C07               	goto	l9935
  7019                           
  7020                           ;RF_Control_B1.c: 264: product->Data[2] = 0x55;
  7021  0BFA  3055               	movlw	85
  7022  0BFB  0020               	movlb	0	; select bank0
  7023  0BFC  00EE               	movwf	??_getRxData
  7024  0BFD  087A               	movf	_product,w
  7025  0BFE  3E02               	addlw	2
  7026  0BFF  0086               	movwf	6
  7027  0C00  3002               	movlw	2	; select bank4/5
  7028  0C01  0087               	movwf	7
  7029  0C02  086E               	movf	??_getRxData,w
  7030  0C03  0081               	movwf	1
  7031                           
  7032                           ;RF_Control_B1.c: 265: setTxData();
  7033  0C04  318D  256A         	fcall	_setTxData
  7034                           
  7035                           ;RF_Control_B1.c: 271: } else {
  7036  0C06  0008               	return
  7037  0C07                     l9935:	
  7038                           
  7039                           ;RF_Control_B1.c: 273: if (error == 0) {
  7040  0C07  0021               	movlb	1	; select bank1
  7041  0C08  08EC               	movf	getRxData@error^(0+128),f
  7042  0C09  1D03               	skipz
  7043  0C0A  0008               	return
  7044                           
  7045                           ;RF_Control_B1.c: 274: if (RF1.Learn == 1) {
  7046  0C0B  1F20               	btfss	_RF1^(0+128),6
  7047  0C0C  2C18               	goto	l9945
  7048                           
  7049                           ;RF_Control_B1.c: 275: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7050  0C0D  0023               	movlb	3	; select bank3
  7051  0C0E  08A0               	movf	_RF_Data^(0+384),f
  7052  0C0F  1D03               	skipz
  7053  0C10  0008               	return
  7054  0C11  0821               	movf	(_RF_Data^(0+384)+1),w
  7055  0C12  3A64               	xorlw	100
  7056  0C13  1D03               	skipz
  7057  0C14  0008               	return
  7058                           
  7059                           ;RF_Control_B1.c: 276: setLog_Code();
  7060  0C15  3191  21A9         	fcall	_setLog_Code
  7061                           
  7062                           ;RF_Control_B1.c: 277: }
  7063                           ;RF_Control_B1.c: 278: } else {
  7064  0C17  0008               	return
  7065  0C18                     l9945:	
  7066                           
  7067                           ;RF_Control_B1.c: 279: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7068  0C18  0023               	movlb	3	; select bank3
  7069  0C19  08A0               	movf	_RF_Data^(0+384),f
  7070  0C1A  1D03               	skipz
  7071  0C1B  2C4D               	goto	l9965
  7072  0C1C  0821               	movf	(_RF_Data^(0+384)+1),w
  7073  0C1D  3A02               	xorlw	2
  7074  0C1E  1D03               	skipz
  7075  0C1F  2C4D               	goto	l9965
  7076                           
  7077                           ;RF_Control_B1.c: 281: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7078  0C20  082C               	movf	(_RF_Data^(0+384)+12),w
  7079  0C21  3AFF               	xorlw	255
  7080  0C22  1D03               	skipz
  7081  0C23  2C2E               	goto	l9957
  7082  0C24  082D               	movf	(_RF_Data^(0+384)+13),w
  7083  0C25  3AFF               	xorlw	255
  7084  0C26  1D03               	skipz
  7085  0C27  2C2E               	goto	l9957
  7086  0C28  082E               	movf	(_RF_Data^(0+384)+14),w
  7087  0C29  3AFF               	xorlw	255
  7088  0C2A  1D03               	skipz
  7089  0C2B  2C2E               	goto	l9957
  7090                           
  7091                           ;RF_Control_B1.c: 282: __nop();
  7092  0C2C  0000               	nop
  7093                           
  7094                           ;RF_Control_B1.c: 283: } else {
  7095  0C2D  0008               	return
  7096  0C2E                     l9957:	
  7097                           
  7098                           ;RF_Control_B1.c: 284: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7099  0C2E  087A               	movf	_product,w
  7100  0C2F  3E0C               	addlw	12
  7101  0C30  0086               	movwf	6
  7102  0C31  3002               	movlw	2	; select bank4/5
  7103  0C32  0087               	movwf	7
  7104  0C33  0023               	movlb	3	; select bank3
  7105  0C34  082C               	movf	(_RF_Data^(0+384)+12),w
  7106  0C35  0601               	xorwf	1,w
  7107  0C36  1D03               	skipz
  7108  0C37  0008               	return
  7109  0C38  087A               	movf	_product,w
  7110  0C39  3E0D               	addlw	13
  7111  0C3A  0086               	movwf	6
  7112  0C3B  3002               	movlw	2	; select bank4/5
  7113  0C3C  0087               	movwf	7
  7114  0C3D  082D               	movf	(_RF_Data^(0+384)+13),w
  7115  0C3E  0601               	xorwf	1,w
  7116  0C3F  1D03               	skipz
  7117  0C40  0008               	return
  7118  0C41  087A               	movf	_product,w
  7119  0C42  3E0E               	addlw	14
  7120  0C43  0086               	movwf	6
  7121  0C44  3002               	movlw	2	; select bank4/5
  7122  0C45  0087               	movwf	7
  7123  0C46  082E               	movf	(_RF_Data^(0+384)+14),w
  7124  0C47  0601               	xorwf	1,w
  7125  0C48  1D03               	skipz
  7126  0C49  0008               	return
  7127                           
  7128                           ;RF_Control_B1.c: 285: setControl_Lights_Table();
  7129  0C4A  318A  2230         	fcall	_setControl_Lights_Table
  7130                           
  7131                           ;RF_Control_B1.c: 286: }
  7132                           ;RF_Control_B1.c: 287: }
  7133                           ;RF_Control_B1.c: 288: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7134  0C4C  0008               	return
  7135  0C4D                     l9965:	
  7136  0C4D  0023               	movlb	3	; select bank3
  7137  0C4E  0820               	movf	_RF_Data^(0+384),w
  7138  0C4F  3AFF               	xorlw	255
  7139  0C50  1D03               	skipz
  7140  0C51  2C58               	goto	l9971
  7141  0C52  0821               	movf	(_RF_Data^(0+384)+1),w
  7142  0C53  3A02               	xorlw	2
  7143  0C54  1D03               	skipz
  7144  0C55  2C58               	goto	l9971
  7145                           
  7146                           ;RF_Control_B1.c: 289: __nop();
  7147  0C56  0000               	nop
  7148                           
  7149                           ;RF_Control_B1.c: 290: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7150  0C57  0008               	return
  7151  0C58                     l9971:	
  7152  0C58  0023               	movlb	3	; select bank3
  7153  0C59  08A0               	movf	_RF_Data^(0+384),f
  7154  0C5A  1D03               	skipz
  7155  0C5B  0008               	return
  7156  0C5C  0821               	movf	(_RF_Data^(0+384)+1),w
  7157  0C5D  3A65               	xorlw	101
  7158  0C5E  1D03               	skipz
  7159  0C5F  0008               	return
  7160                           
  7161                           ;RF_Control_B1.c: 291: __nop();
  7162  0C60  0000               	nop
  7163                           
  7164                           ;RF_Control_B1.c: 298: ;
  7165                           
  7166                           ;RF_Control_B1.c: 292: }
  7167                           ;RF_Control_B1.c: 296: }
  7168                           ;RF_Control_B1.c: 297: } else {
  7169  0C61  0008               	return
  7170  0C62                     __end_of_getRxData:	
  7171                           
  7172                           	psect	text26
  7173  11A9                     __ptext26:	
  7174 ;; *************** function _setLog_Code *****************
  7175 ;; Defined at:
  7176 ;;		line 304 in file "../src/RF_Control_B1.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;		None
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;		None
  7181 ;; Return value:  Size  Location     Type
  7182 ;;		None               void
  7183 ;; Registers used:
  7184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;Total ram usage:        1 bytes
  7195 ;; Hardware stack levels used:    1
  7196 ;; Hardware stack levels required when called:    7
  7197 ;; This function calls:
  7198 ;;		_setBuz
  7199 ;;		_setMemory_LoopSave
  7200 ;;		_setMemory_Modify
  7201 ;;		_setProductData
  7202 ;; This function is called by:
  7203 ;;		_getRxData
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           
  7208                           ;psect for function _setLog_Code
  7209  11A9                     _setLog_Code:	
  7210                           
  7211                           ;RF_Control_B1.c: 305: RF1.Learn = 0;
  7212                           
  7213                           ;incstack = 0
  7214                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7215  11A9  0021               	movlb	1	; select bank1
  7216  11AA  1320               	bcf	_RF1^(0+128),6
  7217                           
  7218                           ;RF_Control_B1.c: 306: setProductData(12, RF_Data[12]);
  7219  11AB  0023               	movlb	3	; select bank3
  7220  11AC  082C               	movf	(_RF_Data^(0+384)+12),w
  7221  11AD  0020               	movlb	0	; select bank0
  7222  11AE  00E6               	movwf	??_setLog_Code
  7223  11AF  0866               	movf	??_setLog_Code,w
  7224  11B0  00E2               	movwf	setProductData@value
  7225  11B1  300C               	movlw	12
  7226  11B2  319B  2389  3191   	fcall	_setProductData
  7227                           
  7228                           ;RF_Control_B1.c: 307: setProductData(13, RF_Data[13]);
  7229  11B5  0023               	movlb	3	; select bank3
  7230  11B6  082D               	movf	(_RF_Data^(0+384)+13),w
  7231  11B7  0020               	movlb	0	; select bank0
  7232  11B8  00E6               	movwf	??_setLog_Code
  7233  11B9  0866               	movf	??_setLog_Code,w
  7234  11BA  00E2               	movwf	setProductData@value
  7235  11BB  300D               	movlw	13
  7236  11BC  319B  2389  3191   	fcall	_setProductData
  7237                           
  7238                           ;RF_Control_B1.c: 308: setProductData(14, RF_Data[14]);
  7239  11BF  0023               	movlb	3	; select bank3
  7240  11C0  082E               	movf	(_RF_Data^(0+384)+14),w
  7241  11C1  0020               	movlb	0	; select bank0
  7242  11C2  00E6               	movwf	??_setLog_Code
  7243  11C3  0866               	movf	??_setLog_Code,w
  7244  11C4  00E2               	movwf	setProductData@value
  7245  11C5  300E               	movlw	14
  7246  11C6  319B  2389  3191   	fcall	_setProductData
  7247                           
  7248                           ;RF_Control_B1.c: 309: setBuz(1, 100);
  7249  11C9  3064               	movlw	100
  7250  11CA  0020               	movlb	0	; select bank0
  7251  11CB  00A9               	movwf	setBuz@time
  7252  11CC  3000               	movlw	0
  7253  11CD  00AA               	movwf	setBuz@time+1
  7254  11CE  3001               	movlw	1
  7255  11CF  3196  2697  3191   	fcall	_setBuz
  7256                           
  7257                           ;RF_Control_B1.c: 310: if (myMain.First == 1) {
  7258  11D2  0022               	movlb	2	; select bank2
  7259  11D3  1EA0               	btfss	_myMain^(0+256),5
  7260  11D4  29D9               	goto	l2326
  7261                           
  7262                           ;RF_Control_B1.c: 311: setMemory_LoopSave(1);
  7263  11D5  3001               	movlw	1
  7264  11D6  319C  24AE  3191   	fcall	_setMemory_LoopSave
  7265  11D9                     l2326:	
  7266                           
  7267                           ;RF_Control_B1.c: 312: }
  7268                           ;RF_Control_B1.c: 313: setMemory_Modify(1);
  7269  11D9  3001               	movlw	1
  7270  11DA  319C  249B         	fcall	_setMemory_Modify
  7271  11DC  0008               	return
  7272  11DD                     __end_of_setLog_Code:	
  7273                           
  7274                           	psect	text27
  7275  1CAE                     __ptext27:	
  7276 ;; *************** function _setMemory_LoopSave *****************
  7277 ;; Defined at:
  7278 ;;		line 1073 in file "../src/MCU_B1.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  command         1    wreg     unsigned char 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  command         1    1[BANK0 ] unsigned char 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, status,2, status,0
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;Total ram usage:        2 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    5
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_setLog_Code
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _setMemory_LoopSave
  7308  1CAE                     _setMemory_LoopSave:	
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7312                           ;setMemory_LoopSave@command stored from wreg
  7313  1CAE  0020               	movlb	0	; select bank0
  7314  1CAF  00A1               	movwf	setMemory_LoopSave@command
  7315                           
  7316                           ;MCU_B1.c: 1074: Memory.LoopSave = command == 1 ? 1 : 0;
  7317  1CB0  0821               	movf	setMemory_LoopSave@command,w
  7318  1CB1  3A01               	xorlw	1
  7319  1CB2  3000               	movlw	0
  7320  1CB3  1903               	skipnz
  7321  1CB4  3001               	movlw	1
  7322  1CB5  00A0               	movwf	??_setMemory_LoopSave
  7323  1CB6  0DA0               	rlf	??_setMemory_LoopSave,f
  7324  1CB7  0DA0               	rlf	??_setMemory_LoopSave,f
  7325  1CB8  0024               	movlb	4	; select bank4
  7326  1CB9  0844               	movf	(_Memory^(0+512)+36),w
  7327  1CBA  0020               	movlb	0	; select bank0
  7328  1CBB  0620               	xorwf	??_setMemory_LoopSave,w
  7329  1CBC  39FB               	andlw	-5
  7330  1CBD  0620               	xorwf	??_setMemory_LoopSave,w
  7331  1CBE  0024               	movlb	4	; select bank4
  7332  1CBF  00C4               	movwf	(_Memory^(0+512)+36)
  7333  1CC0  0008               	return
  7334  1CC1                     __end_of_setMemory_LoopSave:	
  7335                           
  7336                           	psect	text28
  7337  0A30                     __ptext28:	
  7338 ;; *************** function _setControl_Lights_Table *****************
  7339 ;; Defined at:
  7340 ;;		line 317 in file "../src/RF_Control_B1.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;		None
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;		None
  7345 ;; Return value:  Size  Location     Type
  7346 ;;		None               void
  7347 ;; Registers used:
  7348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        0 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:   11
  7361 ;; This function calls:
  7362 ;;		_setBuz
  7363 ;;		_setDimmerLights_ErrorClose
  7364 ;;		_setProductData
  7365 ;;		_setRFSW_AdjControl
  7366 ;;		_setRFSW_Control
  7367 ;;		_setTxData
  7368 ;; This function is called by:
  7369 ;;		_getRxData
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _setControl_Lights_Table
  7375  0A30                     _setControl_Lights_Table:	
  7376                           
  7377                           ;RF_Control_B1.c: 318: switch (RF_Data[15]) {
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7381  0A30  2A7B               	goto	l9585
  7382  0A31                     l9569:	
  7383                           ;RF_Control_B1.c: 319: case 0x00:
  7384                           
  7385                           
  7386                           ;RF_Control_B1.c: 321: setDimmerLights_ErrorClose(255);
  7387  0A31  30FF               	movlw	255
  7388  0A32  3189  2104  318A   	fcall	_setDimmerLights_ErrorClose
  7389                           
  7390                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7391  0A35  0020               	movlb	0	; select bank0
  7392  0A36  01E2               	clrf	setProductData@value
  7393  0A37  3009               	movlw	9
  7394  0A38  319B  2389  318A   	fcall	_setProductData
  7395                           
  7396                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7397  0A3B  0020               	movlb	0	; select bank0
  7398  0A3C  01E2               	clrf	setProductData@value
  7399  0A3D  300B               	movlw	11
  7400  0A3E  319B  2389  318A   	fcall	_setProductData
  7401                           
  7402                           ;RF_Control_B1.c: 325: setProductData(15, 0);
  7403  0A41  0020               	movlb	0	; select bank0
  7404  0A42  01E2               	clrf	setProductData@value
  7405  0A43  300F               	movlw	15
  7406  0A44  319B  2389  318A   	fcall	_setProductData
  7407                           
  7408                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7409  0A47  0020               	movlb	0	; select bank0
  7410  0A48  01E2               	clrf	setProductData@value
  7411  0A49  3011               	movlw	17
  7412  0A4A  319B  2389  318A   	fcall	_setProductData
  7413                           
  7414                           ;RF_Control_B1.c: 327: setBuz(1, 100);
  7415  0A4D  3064               	movlw	100
  7416  0A4E  0020               	movlb	0	; select bank0
  7417  0A4F  00A9               	movwf	setBuz@time
  7418  0A50  3000               	movlw	0
  7419  0A51  00AA               	movwf	setBuz@time+1
  7420  0A52  3001               	movlw	1
  7421  0A53  3196  2697         	fcall	_setBuz
  7422                           
  7423                           ;RF_Control_B1.c: 329: break;
  7424  0A55  0008               	return
  7425  0A56                     l9573:	
  7426                           ;RF_Control_B1.c: 330: case 0x20:
  7427                           
  7428                           
  7429                           ;RF_Control_B1.c: 331: setProductData(9, 0);
  7430  0A56  0020               	movlb	0	; select bank0
  7431  0A57  01E2               	clrf	setProductData@value
  7432  0A58  3009               	movlw	9
  7433  0A59  319B  2389  318A   	fcall	_setProductData
  7434                           
  7435                           ;RF_Control_B1.c: 332: setProductData(11, 0);
  7436  0A5C  0020               	movlb	0	; select bank0
  7437  0A5D  01E2               	clrf	setProductData@value
  7438  0A5E  300B               	movlw	11
  7439  0A5F  319B  2389  318A   	fcall	_setProductData
  7440                           
  7441                           ;RF_Control_B1.c: 333: setProductData(17, 0);
  7442  0A62  0020               	movlb	0	; select bank0
  7443  0A63  01E2               	clrf	setProductData@value
  7444  0A64  3011               	movlw	17
  7445  0A65  319B  2389  318A   	fcall	_setProductData
  7446                           
  7447                           ;RF_Control_B1.c: 334: setTxData();
  7448  0A68  318D  256A         	fcall	_setTxData
  7449                           
  7450                           ;RF_Control_B1.c: 335: break;
  7451  0A6A  0008               	return
  7452  0A6B                     l9575:	
  7453                           ;RF_Control_B1.c: 336: case 0x01:
  7454                           
  7455                           
  7456                           ;RF_Control_B1.c: 338: setRFSW_Control(1);
  7457  0A6B  3001               	movlw	1
  7458  0A6C  3194  24A3         	fcall	_setRFSW_Control
  7459                           
  7460                           ;RF_Control_B1.c: 340: break;
  7461  0A6E  0008               	return
  7462  0A6F                     l9577:	
  7463                           ;RF_Control_B1.c: 341: case 0x02:
  7464                           
  7465                           
  7466                           ;RF_Control_B1.c: 343: setRFSW_Control(2);
  7467  0A6F  3002               	movlw	2
  7468  0A70  3194  24A3         	fcall	_setRFSW_Control
  7469                           
  7470                           ;RF_Control_B1.c: 350: break;
  7471                           
  7472                           ;RF_Control_B1.c: 346: case 0x03:
  7473                           
  7474                           ;RF_Control_B1.c: 345: break;
  7475  0A72  0008               	return
  7476  0A73                     l9579:	
  7477                           ;RF_Control_B1.c: 351: case 0x11:
  7478                           
  7479                           
  7480                           ;RF_Control_B1.c: 354: setRFSW_AdjControl(1);
  7481  0A73  3001               	movlw	1
  7482  0A74  3192  22FC         	fcall	_setRFSW_AdjControl
  7483                           
  7484                           ;RF_Control_B1.c: 357: break;
  7485  0A76  0008               	return
  7486  0A77                     l9581:	
  7487                           ;RF_Control_B1.c: 358: case 0x21:
  7488                           
  7489                           
  7490                           ;RF_Control_B1.c: 361: setRFSW_AdjControl(2);
  7491  0A77  3002               	movlw	2
  7492  0A78  3192  22FC         	fcall	_setRFSW_AdjControl
  7493                           
  7494                           ;RF_Control_B1.c: 372: }
  7495                           
  7496                           ;RF_Control_B1.c: 371: break;
  7497                           
  7498                           ;RF_Control_B1.c: 365: case 0x31:
  7499                           
  7500                           ;RF_Control_B1.c: 364: break;
  7501  0A7A  0008               	return
  7502  0A7B                     l9585:	
  7503  0A7B  0023               	movlb	3	; select bank3
  7504  0A7C  082F               	movf	(_RF_Data^(0+384)+15),w
  7505                           
  7506                           ; Switch size 1, requested type "space"
  7507                           ; Number of cases is 8, Range of values is 0 to 49
  7508                           ; switch strategies available:
  7509                           ; Name         Instructions Cycles
  7510                           ; simple_byte           25    13 (average)
  7511                           ; direct_byte          106     6 (fixed)
  7512                           ; jumptable            260     6 (fixed)
  7513                           ;	Chosen strategy is simple_byte
  7514  0A7D  3A00               	xorlw	0	; case 0
  7515  0A7E  1903               	skipnz
  7516  0A7F  2A31               	goto	l9569
  7517  0A80  3A01               	xorlw	1	; case 1
  7518  0A81  1903               	skipnz
  7519  0A82  2A6B               	goto	l9575
  7520  0A83  3A03               	xorlw	3	; case 2
  7521  0A84  1903               	skipnz
  7522  0A85  2A6F               	goto	l9577
  7523  0A86  3A01               	xorlw	1	; case 3
  7524  0A87  1903               	skipnz
  7525  0A88  2A96               	goto	l2340
  7526  0A89  3A12               	xorlw	18	; case 17
  7527  0A8A  1903               	skipnz
  7528  0A8B  2A73               	goto	l9579
  7529  0A8C  3A31               	xorlw	49	; case 32
  7530  0A8D  1903               	skipnz
  7531  0A8E  2A56               	goto	l9573
  7532  0A8F  3A01               	xorlw	1	; case 33
  7533  0A90  1903               	skipnz
  7534  0A91  2A77               	goto	l9581
  7535  0A92  3A10               	xorlw	16	; case 49
  7536  0A93  1903               	skipnz
  7537  0A94  2A96               	goto	l2340
  7538  0A95  2A96               	goto	l2340
  7539  0A96                     l2340:	
  7540  0A96  0008               	return
  7541  0A97                     __end_of_setControl_Lights_Table:	
  7542                           
  7543                           	psect	text29
  7544  14A3                     __ptext29:	
  7545 ;; *************** function _setRFSW_Control *****************
  7546 ;; Defined at:
  7547 ;;		line 399 in file "../src/RF_Control_B1.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  sw              1    wreg     unsigned char 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  sw              1   77[BANK0 ] unsigned char 
  7552 ;;  status          1   76[BANK0 ] unsigned char 
  7553 ;; Return value:  Size  Location     Type
  7554 ;;		None               void
  7555 ;; Registers used:
  7556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : 0/0
  7559 ;;		On exit  : 0/0
  7560 ;;		Unchanged: 0/0
  7561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;Total ram usage:        3 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    9
  7569 ;; This function calls:
  7570 ;;		_getDelayOff_GO
  7571 ;;		_getDimmerLights_Status
  7572 ;;		_setBuz
  7573 ;;		_setDelayOff_GO
  7574 ;;		_setDimmerLights_SwOff
  7575 ;;		_setDimmerLights_SwOn
  7576 ;;		_setRF_DimmerLights
  7577 ;;		_setTxData
  7578 ;; This function is called by:
  7579 ;;		_setControl_Lights_Table
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _setRFSW_Control
  7585  14A3                     _setRFSW_Control:	
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7589                           ;setRFSW_Control@sw stored from wreg
  7590  14A3  0020               	movlb	0	; select bank0
  7591  14A4  00ED               	movwf	setRFSW_Control@sw
  7592                           
  7593                           ;RF_Control_B1.c: 400: char status = 0;
  7594  14A5  01EC               	clrf	setRFSW_Control@status
  7595                           
  7596                           ;RF_Control_B1.c: 403: if (RF_Data[16] == 0x80) {
  7597  14A6  0023               	movlb	3	; select bank3
  7598  14A7  0830               	movf	(_RF_Data^(0+384)+16),w
  7599  14A8  3A80               	xorlw	128
  7600  14A9  1D03               	skipz
  7601  14AA  2CD6               	goto	l9339
  7602                           
  7603                           ;RF_Control_B1.c: 404: setDelayOff_GO(sw, 1, RF_Data[17]);
  7604  14AB  0020               	movlb	0	; select bank0
  7605  14AC  01E6               	clrf	setDelayOff_GO@command
  7606  14AD  0AE6               	incf	setDelayOff_GO@command,f
  7607  14AE  0023               	movlb	3	; select bank3
  7608  14AF  0831               	movf	(_RF_Data^(0+384)+17),w
  7609  14B0  0020               	movlb	0	; select bank0
  7610  14B1  00EB               	movwf	??_setRFSW_Control
  7611  14B2  086B               	movf	??_setRFSW_Control,w
  7612  14B3  00E7               	movwf	setDelayOff_GO@value
  7613  14B4  086D               	movf	setRFSW_Control@sw,w
  7614  14B5  3195  2544  3194   	fcall	_setDelayOff_GO
  7615                           
  7616                           ;RF_Control_B1.c: 405: if (getDimmerLights_Status(sw) == 1) {
  7617  14B8  0020               	movlb	0	; select bank0
  7618  14B9  086D               	movf	setRFSW_Control@sw,w
  7619  14BA  319B  23D4  3194   	fcall	_getDimmerLights_Status
  7620  14BD  3A01               	xorlw	1
  7621  14BE  1D03               	skipz
  7622  14BF  2CE5               	goto	l9343
  7623                           
  7624                           ;RF_Control_B1.c: 406: setBuz(1, 100);
  7625  14C0  3064               	movlw	100
  7626  14C1  0020               	movlb	0	; select bank0
  7627  14C2  00A9               	movwf	setBuz@time
  7628  14C3  3000               	movlw	0
  7629  14C4  00AA               	movwf	setBuz@time+1
  7630  14C5  3001               	movlw	1
  7631  14C6  3196  2697  3194   	fcall	_setBuz
  7632                           
  7633                           ;RF_Control_B1.c: 407: status = 1;
  7634  14C9  0020               	movlb	0	; select bank0
  7635  14CA  01EC               	clrf	setRFSW_Control@status
  7636  14CB  0AEC               	incf	setRFSW_Control@status,f
  7637                           
  7638                           ;RF_Control_B1.c: 408: setRF_DimmerLights(sw, 1);
  7639  14CC  01E6               	clrf	setRF_DimmerLights@on
  7640  14CD  0AE6               	incf	setRF_DimmerLights@on,f
  7641  14CE  086D               	movf	setRFSW_Control@sw,w
  7642  14CF  3196  26F0  3194   	fcall	_setRF_DimmerLights
  7643                           
  7644                           ;RF_Control_B1.c: 409: setTxData();
  7645  14D2  318D  256A  3194   	fcall	_setTxData
  7646                           
  7647                           ;RF_Control_B1.c: 410: }
  7648                           ;RF_Control_B1.c: 411: } else {
  7649  14D5  2CE5               	goto	l9343
  7650  14D6                     l9339:	
  7651                           
  7652                           ;RF_Control_B1.c: 413: if (getDelayOff_GO(sw) == 1) {
  7653  14D6  0020               	movlb	0	; select bank0
  7654  14D7  086D               	movf	setRFSW_Control@sw,w
  7655  14D8  319B  23C4  3194   	fcall	_getDelayOff_GO
  7656  14DB  3A01               	xorlw	1
  7657  14DC  1D03               	skipz
  7658  14DD  2CE5               	goto	l9343
  7659                           
  7660                           ;RF_Control_B1.c: 414: setDelayOff_GO(sw, 0, 0);
  7661  14DE  0020               	movlb	0	; select bank0
  7662  14DF  01E6               	clrf	setDelayOff_GO@command
  7663  14E0  01E7               	clrf	setDelayOff_GO@value
  7664  14E1  086D               	movf	setRFSW_Control@sw,w
  7665  14E2  3195  2544  3194   	fcall	_setDelayOff_GO
  7666  14E5                     l9343:	
  7667                           
  7668                           ;RF_Control_B1.c: 415: }
  7669                           ;RF_Control_B1.c: 417: }
  7670                           ;RF_Control_B1.c: 418: if (status == 0) {
  7671  14E5  0020               	movlb	0	; select bank0
  7672  14E6  08EC               	movf	setRFSW_Control@status,f
  7673  14E7  1D03               	skipz
  7674  14E8  0008               	return
  7675                           
  7676                           ;RF_Control_B1.c: 420: setDimmerLights_SwOn(sw);
  7677  14E9  086D               	movf	setRFSW_Control@sw,w
  7678  14EA  3197  27A4  3194   	fcall	_setDimmerLights_SwOn
  7679                           
  7680                           ;RF_Control_B1.c: 421: setDimmerLights_SwOff(sw);
  7681  14ED  0020               	movlb	0	; select bank0
  7682  14EE  086D               	movf	setRFSW_Control@sw,w
  7683  14EF  3194  2454         	fcall	_setDimmerLights_SwOff
  7684  14F1  0008               	return
  7685  14F2                     __end_of_setRFSW_Control:	
  7686                           
  7687                           	psect	text30
  7688  17A4                     __ptext30:	
  7689 ;; *************** function _setDimmerLights_SwOn *****************
  7690 ;; Defined at:
  7691 ;;		line 405 in file "../src/Dimmer_B1.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;  sw              1    wreg     unsigned char 
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;  sw              1   17[BANK0 ] unsigned char 
  7696 ;;  idle            1   16[BANK0 ] unsigned char 
  7697 ;; Return value:  Size  Location     Type
  7698 ;;		None               void
  7699 ;; Registers used:
  7700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;Total ram usage:        5 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    7
  7713 ;; This function calls:
  7714 ;;		_DimmerLightsPointSelect
  7715 ;;		_setBuz
  7716 ;; This function is called by:
  7717 ;;		_setRFSW_Control
  7718 ;;		_setSw_Main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _setDimmerLights_SwOn
  7724  17A4                     _setDimmerLights_SwOn:	
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7728                           ;setDimmerLights_SwOn@sw stored from wreg
  7729  17A4  0020               	movlb	0	; select bank0
  7730  17A5  00B1               	movwf	setDimmerLights_SwOn@sw
  7731                           
  7732                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7733  17A6  0831               	movf	setDimmerLights_SwOn@sw,w
  7734  17A7  319C  2462  3197   	fcall	_DimmerLightsPointSelect
  7735                           
  7736                           ;Dimmer_B1.c: 407: char idle = 0;
  7737  17AA  0020               	movlb	0	; select bank0
  7738  17AB  01B0               	clrf	setDimmerLights_SwOn@idle
  7739                           
  7740                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7741  17AC  08B0               	movf	setDimmerLights_SwOn@idle,f
  7742  17AD  1D03               	skipz
  7743  17AE  2FCF               	goto	l9111
  7744                           
  7745                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7746  17AF  0831               	movf	setDimmerLights_SwOn@sw,w
  7747  17B0  3A01               	xorlw	1
  7748  17B1  1D03               	skipz
  7749  17B2  2FBE               	goto	l9101
  7750                           
  7751                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7752  17B3  01AE               	clrf	_setDimmerLights_SwOn$2322
  7753  17B4  0AAE               	incf	_setDimmerLights_SwOn$2322,f
  7754  17B5  0023               	movlb	3	; select bank3
  7755  17B6  1DD9               	btfss	(_DimmerLights2^(0+384)+10),3
  7756  17B7  1B50               	btfsc	(_DimmerLights2^(0+384)+1),6
  7757  17B8  2FBB               	goto	l9099
  7758  17B9  0020               	movlb	0	; select bank0
  7759  17BA  01AE               	clrf	_setDimmerLights_SwOn$2322
  7760  17BB                     l9099:	
  7761  17BB  0020               	movlb	0	; select bank0
  7762  17BC  082E               	movf	_setDimmerLights_SwOn$2322,w
  7763  17BD  2FCC               	goto	L3
  7764  17BE                     l9101:	
  7765                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7766                           
  7767  17BE  0831               	movf	setDimmerLights_SwOn@sw,w
  7768  17BF  3A02               	xorlw	2
  7769  17C0  1D03               	skipz
  7770  17C1  2FCF               	goto	l9111
  7771                           
  7772                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7773  17C2  01AF               	clrf	_setDimmerLights_SwOn$2323
  7774  17C3  0AAF               	incf	_setDimmerLights_SwOn$2323,f
  7775  17C4  0023               	movlb	3	; select bank3
  7776  17C5  1DC8               	btfss	(_DimmerLights1^(0+384)+10),3
  7777  17C6  1B3F               	btfsc	(_DimmerLights1^(0+384)+1),6
  7778  17C7  2FCA               	goto	l9109
  7779  17C8  0020               	movlb	0	; select bank0
  7780  17C9  01AF               	clrf	_setDimmerLights_SwOn$2323
  7781  17CA                     l9109:	
  7782  17CA  0020               	movlb	0	; select bank0
  7783  17CB  082F               	movf	_setDimmerLights_SwOn$2323,w
  7784  17CC                     L3:	
  7785  17CC  00AD               	movwf	??_setDimmerLights_SwOn
  7786  17CD  082D               	movf	??_setDimmerLights_SwOn,w
  7787  17CE  00B0               	movwf	setDimmerLights_SwOn@idle
  7788  17CF                     l9111:	
  7789                           
  7790                           ;Dimmer_B1.c: 415: }
  7791                           ;Dimmer_B1.c: 416: }
  7792                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7793  17CF  08B0               	movf	setDimmerLights_SwOn@idle,f
  7794  17D0  1D03               	skipz
  7795  17D1  0008               	return
  7796                           
  7797                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7798  17D2  086F               	movf	_DimmerLights,w
  7799  17D3  3E0B               	addlw	11
  7800  17D4  0086               	movwf	6
  7801  17D5  3001               	movlw	1	; select bank2/3
  7802  17D6  0087               	movwf	7
  7803  17D7  1481               	bsf	1,1
  7804                           
  7805                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7806  17D8  086F               	movf	_DimmerLights,w
  7807  17D9  3E02               	addlw	2
  7808  17DA  0086               	movwf	6
  7809  17DB  3001               	movlw	1	; select bank2/3
  7810  17DC  0087               	movwf	7
  7811  17DD  1881               	btfsc	1,1
  7812  17DE  2FF2               	goto	l9117
  7813                           
  7814                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7815  17DF  086F               	movf	_DimmerLights,w
  7816  17E0  3E02               	addlw	2
  7817  17E1  0086               	movwf	6
  7818  17E2  3001               	movlw	1	; select bank2/3
  7819  17E3  0087               	movwf	7
  7820  17E4  1481               	bsf	1,1
  7821                           
  7822                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7823  17E5  086F               	movf	_DimmerLights,w
  7824  17E6  3E0A               	addlw	10
  7825  17E7  0086               	movwf	6
  7826  17E8  3001               	movlw	1	; select bank2/3
  7827  17E9  0087               	movwf	7
  7828  17EA  1481               	bsf	1,1
  7829                           
  7830                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7831  17EB  086F               	movf	_DimmerLights,w
  7832  17EC  3E0A               	addlw	10
  7833  17ED  0086               	movwf	6
  7834  17EE  3001               	movlw	1	; select bank2/3
  7835  17EF  0087               	movwf	7
  7836  17F0  1401               	bsf	1,0
  7837                           
  7838                           ;Dimmer_B1.c: 442: } else {
  7839  17F1  2FF8               	goto	l9119
  7840  17F2                     l9117:	
  7841                           
  7842                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7843  17F2  086F               	movf	_DimmerLights,w
  7844  17F3  3E02               	addlw	2
  7845  17F4  0086               	movwf	6
  7846  17F5  3001               	movlw	1	; select bank2/3
  7847  17F6  0087               	movwf	7
  7848  17F7  1081               	bcf	1,1
  7849  17F8                     l9119:	
  7850                           
  7851                           ;Dimmer_B1.c: 444: }
  7852                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7853  17F8  3064               	movlw	100
  7854  17F9  00A9               	movwf	setBuz@time
  7855  17FA  3000               	movlw	0
  7856  17FB  00AA               	movwf	setBuz@time+1
  7857  17FC  3001               	movlw	1
  7858  17FD  3196  2697         	fcall	_setBuz
  7859  17FF  0008               	return
  7860  1800                     __end_of_setDimmerLights_SwOn:	
  7861                           
  7862                           	psect	text31
  7863  12FC                     __ptext31:	
  7864 ;; *************** function _setRFSW_AdjControl *****************
  7865 ;; Defined at:
  7866 ;;		line 427 in file "../src/RF_Control_B1.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  sw              1    wreg     unsigned char 
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  sw              1   75[BANK0 ] unsigned char 
  7871 ;;  status          1   74[BANK0 ] unsigned char 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;		None               void
  7874 ;; Registers used:
  7875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;Total ram usage:        4 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:   10
  7888 ;; This function calls:
  7889 ;;		_getDimmerLights_Status
  7890 ;;		_setMemory_Modify
  7891 ;;		_setProductData
  7892 ;;		_setRF_DimmerValue
  7893 ;;		_setTxData
  7894 ;; This function is called by:
  7895 ;;		_setControl_Lights_Table
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _setRFSW_AdjControl
  7901  12FC                     _setRFSW_AdjControl:	
  7902                           
  7903                           ;incstack = 0
  7904                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7905                           ;setRFSW_AdjControl@sw stored from wreg
  7906  12FC  0020               	movlb	0	; select bank0
  7907  12FD  00EB               	movwf	setRFSW_AdjControl@sw
  7908                           
  7909                           ;RF_Control_B1.c: 428: char status = 0;
  7910  12FE  01EA               	clrf	setRFSW_AdjControl@status
  7911                           
  7912                           ;RF_Control_B1.c: 430: status = getDimmerLights_Status(sw);
  7913  12FF  086B               	movf	setRFSW_AdjControl@sw,w
  7914  1300  319B  23D4  3192   	fcall	_getDimmerLights_Status
  7915  1303  0020               	movlb	0	; select bank0
  7916  1304  00E8               	movwf	??_setRFSW_AdjControl
  7917  1305  0868               	movf	??_setRFSW_AdjControl,w
  7918  1306  00EA               	movwf	setRFSW_AdjControl@status
  7919                           
  7920                           ;RF_Control_B1.c: 433: if (status == 1) {
  7921  1307  086A               	movf	setRFSW_AdjControl@status,w
  7922  1308  3A01               	xorlw	1
  7923  1309  1D03               	skipz
  7924  130A  2B15               	goto	l9357
  7925                           
  7926                           ;RF_Control_B1.c: 434: setMemory_Modify(1);
  7927  130B  3001               	movlw	1
  7928  130C  319C  249B  3192   	fcall	_setMemory_Modify
  7929                           
  7930                           ;RF_Control_B1.c: 435: setRF_DimmerValue(sw);
  7931  130F  0020               	movlb	0	; select bank0
  7932  1310  086B               	movf	setRFSW_AdjControl@sw,w
  7933  1311  3187  27D1  3192   	fcall	_setRF_DimmerValue
  7934                           
  7935                           ;RF_Control_B1.c: 436: } else {
  7936  1314  2B26               	goto	l2352
  7937  1315                     l9357:	
  7938                           
  7939                           ;RF_Control_B1.c: 437: setProductData(9, product->Data[20 + sw]);
  7940  1315  0020               	movlb	0	; select bank0
  7941  1316  086B               	movf	setRFSW_AdjControl@sw,w
  7942  1317  3E14               	addlw	20
  7943  1318  077A               	addwf	_product,w
  7944  1319  00E8               	movwf	??_setRFSW_AdjControl
  7945  131A  0868               	movf	??_setRFSW_AdjControl,w
  7946  131B  0086               	movwf	6
  7947  131C  3002               	movlw	2	; select bank4/5
  7948  131D  0087               	movwf	7
  7949  131E  0801               	movf	1,w
  7950  131F  00E9               	movwf	??_setRFSW_AdjControl+1
  7951  1320  0869               	movf	??_setRFSW_AdjControl+1,w
  7952  1321  00E2               	movwf	setProductData@value
  7953  1322  3009               	movlw	9
  7954  1323  319B  2389  3192   	fcall	_setProductData
  7955  1326                     l2352:	
  7956                           
  7957                           ;RF_Control_B1.c: 438: }
  7958                           ;RF_Control_B1.c: 439: setProductData(17, product->Data[26 + sw]);
  7959  1326  0020               	movlb	0	; select bank0
  7960  1327  086B               	movf	setRFSW_AdjControl@sw,w
  7961  1328  3E1A               	addlw	26
  7962  1329  077A               	addwf	_product,w
  7963  132A  00E8               	movwf	??_setRFSW_AdjControl
  7964  132B  0868               	movf	??_setRFSW_AdjControl,w
  7965  132C  0086               	movwf	6
  7966  132D  3002               	movlw	2	; select bank4/5
  7967  132E  0087               	movwf	7
  7968  132F  0801               	movf	1,w
  7969  1330  00E9               	movwf	??_setRFSW_AdjControl+1
  7970  1331  0869               	movf	??_setRFSW_AdjControl+1,w
  7971  1332  00E2               	movwf	setProductData@value
  7972  1333  3011               	movlw	17
  7973  1334  319B  2389  3192   	fcall	_setProductData
  7974                           
  7975                           ;RF_Control_B1.c: 440: setTxData();
  7976  1337  318D  256A         	fcall	_setTxData
  7977  1339  0008               	return
  7978  133A                     __end_of_setRFSW_AdjControl:	
  7979                           
  7980                           	psect	text32
  7981  07D1                     __ptext32:	
  7982 ;; *************** function _setRF_DimmerValue *****************
  7983 ;; Defined at:
  7984 ;;		line 445 in file "../src/RF_Control_B1.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  lights          1    wreg     unsigned char 
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;  lights          1   71[BANK0 ] unsigned char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;		None               void
  7991 ;; Registers used:
  7992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;Total ram usage:        2 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    9
  8005 ;; This function calls:
  8006 ;;		_setDimmerLights_AdjRF
  8007 ;;		_setProductData
  8008 ;; This function is called by:
  8009 ;;		_setRFSW_AdjControl
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           
  8014                           ;psect for function _setRF_DimmerValue
  8015  07D1                     _setRF_DimmerValue:	
  8016                           
  8017                           ;incstack = 0
  8018                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8019                           ;setRF_DimmerValue@lights stored from wreg
  8020  07D1  0020               	movlb	0	; select bank0
  8021  07D2  00E7               	movwf	setRF_DimmerValue@lights
  8022                           
  8023                           ;RF_Control_B1.c: 446: if (RF_Data[9] > 0x64) {
  8024  07D3  3065               	movlw	101
  8025  07D4  0023               	movlb	3	; select bank3
  8026  07D5  0229               	subwf	(_RF_Data^(0+384)+9),w
  8027  07D6  1C03               	skipc
  8028  07D7  2FDE               	goto	l9213
  8029                           
  8030                           ;RF_Control_B1.c: 447: RF_Data[9] = 0x64;
  8031  07D8  3064               	movlw	100
  8032  07D9  0020               	movlb	0	; select bank0
  8033  07DA  00E6               	movwf	??_setRF_DimmerValue
  8034  07DB  0866               	movf	??_setRF_DimmerValue,w
  8035  07DC  0023               	movlb	3	; select bank3
  8036  07DD  00A9               	movwf	(_RF_Data^(0+384)+9)
  8037  07DE                     l9213:	
  8038                           
  8039                           ;RF_Control_B1.c: 448: }
  8040                           ;RF_Control_B1.c: 449: setProductData(9, RF_Data[9]);
  8041  07DE  0829               	movf	(_RF_Data^(0+384)+9),w
  8042  07DF  0020               	movlb	0	; select bank0
  8043  07E0  00E6               	movwf	??_setRF_DimmerValue
  8044  07E1  0866               	movf	??_setRF_DimmerValue,w
  8045  07E2  00E2               	movwf	setProductData@value
  8046  07E3  3009               	movlw	9
  8047  07E4  319B  2389  3187   	fcall	_setProductData
  8048                           
  8049                           ;RF_Control_B1.c: 450: setProductData(11, lights);
  8050  07E7  0020               	movlb	0	; select bank0
  8051  07E8  0867               	movf	setRF_DimmerValue@lights,w
  8052  07E9  00E6               	movwf	??_setRF_DimmerValue
  8053  07EA  0866               	movf	??_setRF_DimmerValue,w
  8054  07EB  00E2               	movwf	setProductData@value
  8055  07EC  300B               	movlw	11
  8056  07ED  319B  2389  3187   	fcall	_setProductData
  8057                           
  8058                           ;RF_Control_B1.c: 451: setProductData((20 + lights), RF_Data[9]);
  8059  07F0  0023               	movlb	3	; select bank3
  8060  07F1  0829               	movf	(_RF_Data^(0+384)+9),w
  8061  07F2  0020               	movlb	0	; select bank0
  8062  07F3  00E6               	movwf	??_setRF_DimmerValue
  8063  07F4  0866               	movf	??_setRF_DimmerValue,w
  8064  07F5  00E2               	movwf	setProductData@value
  8065  07F6  0867               	movf	setRF_DimmerValue@lights,w
  8066  07F7  3E14               	addlw	20
  8067  07F8  319B  2389  3187   	fcall	_setProductData
  8068                           
  8069                           ;RF_Control_B1.c: 452: setDimmerLights_AdjRF(lights);
  8070  07FB  0020               	movlb	0	; select bank0
  8071  07FC  0867               	movf	setRF_DimmerValue@lights,w
  8072  07FD  319F  2769         	fcall	_setDimmerLights_AdjRF
  8073  07FF  0008               	return
  8074  0800                     __end_of_setRF_DimmerValue:	
  8075                           
  8076                           	psect	text33
  8077  1F69                     __ptext33:	
  8078 ;; *************** function _setDimmerLights_AdjRF *****************
  8079 ;; Defined at:
  8080 ;;		line 911 in file "../src/Dimmer_B1.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  lights          1    wreg     unsigned char 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  lights          1   67[BANK0 ] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;		None               void
  8087 ;; Registers used:
  8088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;Total ram usage:        2 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; Hardware stack levels required when called:    8
  8101 ;; This function calls:
  8102 ;;		_DimmerLightsPointSelect
  8103 ;;		_getPercentValue
  8104 ;; This function is called by:
  8105 ;;		_setRF_DimmerValue
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _setDimmerLights_AdjRF
  8111  1F69                     _setDimmerLights_AdjRF:	
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8115                           ;setDimmerLights_AdjRF@lights stored from wreg
  8116  1F69  0020               	movlb	0	; select bank0
  8117  1F6A  00E3               	movwf	setDimmerLights_AdjRF@lights
  8118                           
  8119                           ;Dimmer_B1.c: 913: DimmerLightsPointSelect(lights);
  8120  1F6B  0863               	movf	setDimmerLights_AdjRF@lights,w
  8121  1F6C  319C  2462  319F   	fcall	_DimmerLightsPointSelect
  8122                           
  8123                           ;Dimmer_B1.c: 914: DimmerLights->AdjRF = 1;
  8124  1F6F  0020               	movlb	0	; select bank0
  8125  1F70  086F               	movf	_DimmerLights,w
  8126  1F71  3E02               	addlw	2
  8127  1F72  0086               	movwf	6
  8128  1F73  3001               	movlw	1	; select bank2/3
  8129  1F74  0087               	movwf	7
  8130  1F75  1401               	bsf	1,0
  8131                           
  8132                           ;Dimmer_B1.c: 915: DimmerLights->Signal = 1;
  8133  1F76  0A6F               	incf	_DimmerLights,w
  8134  1F77  0086               	movwf	6
  8135  1F78  3001               	movlw	1	; select bank2/3
  8136  1F79  0087               	movwf	7
  8137  1F7A  1681               	bsf	1,5
  8138                           
  8139                           ;Dimmer_B1.c: 916: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8140  1F7B  087A               	movf	_product,w
  8141  1F7C  3E09               	addlw	9
  8142  1F7D  0086               	movwf	6
  8143  1F7E  3002               	movlw	2	; select bank4/5
  8144  1F7F  0087               	movwf	7
  8145  1F80  0801               	movf	1,w
  8146  1F81  3189  21CB         	fcall	_getPercentValue
  8147  1F83  0020               	movlb	0	; select bank0
  8148  1F84  00E2               	movwf	??_setDimmerLights_AdjRF
  8149  1F85  086F               	movf	_DimmerLights,w
  8150  1F86  3E06               	addlw	6
  8151  1F87  0086               	movwf	6
  8152  1F88  3001               	movlw	1	; select bank2/3
  8153  1F89  0087               	movwf	7
  8154  1F8A  0862               	movf	??_setDimmerLights_AdjRF,w
  8155  1F8B  0081               	movwf	1
  8156  1F8C  0008               	return
  8157  1F8D                     __end_of_setDimmerLights_AdjRF:	
  8158                           
  8159                           	psect	text34
  8160  09CB                     __ptext34:	
  8161 ;; *************** function _getPercentValue *****************
  8162 ;; Defined at:
  8163 ;;		line 1026 in file "../src/Dimmer_B1.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;  value           1    wreg     unsigned char 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  value           1   62[BANK0 ] unsigned char 
  8168 ;;  i               3   63[BANK0 ] float 
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      unsigned char 
  8171 ;; Registers used:
  8172 ;;		wreg, status,2, status,0, pclath, cstack
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;Total ram usage:        6 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    7
  8185 ;; This function calls:
  8186 ;;		___awtoft
  8187 ;;		___ftadd
  8188 ;;		___ftdiv
  8189 ;;		___ftmul
  8190 ;;		___ftneg
  8191 ;;		___fttol
  8192 ;; This function is called by:
  8193 ;;		_setDimmerLights_AdjRF
  8194 ;; This function uses a non-reentrant model
  8195 ;;
  8196                           
  8197                           
  8198                           ;psect for function _getPercentValue
  8199  09CB                     _getPercentValue:	
  8200                           
  8201                           ;incstack = 0
  8202                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8203                           ;getPercentValue@value stored from wreg
  8204  09CB  0020               	movlb	0	; select bank0
  8205  09CC  00DE               	movwf	getPercentValue@value
  8206                           
  8207                           ;Dimmer_B1.c: 1034: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  8208  09CD  3000               	movlw	0
  8209  09CE  00DF               	movwf	getPercentValue@i
  8210  09CF  3030               	movlw	48
  8211  09D0  00E0               	movwf	getPercentValue@i+1
  8212  09D1  3042               	movlw	66
  8213  09D2  00E1               	movwf	getPercentValue@i+2
  8214                           
  8215                           ;Dimmer_B1.c: 1035: i /= 100;
  8216  09D3  3000               	movlw	0
  8217  09D4  00AE               	movwf	___ftdiv@f2
  8218  09D5  30C8               	movlw	200
  8219  09D6  00AF               	movwf	___ftdiv@f2+1
  8220  09D7  3042               	movlw	66
  8221  09D8  00B0               	movwf	___ftdiv@f2+2
  8222  09D9  085F               	movf	getPercentValue@i,w
  8223  09DA  00B1               	movwf	___ftdiv@f1
  8224  09DB  0860               	movf	getPercentValue@i+1,w
  8225  09DC  00B2               	movwf	___ftdiv@f1+1
  8226  09DD  0861               	movf	getPercentValue@i+2,w
  8227  09DE  00B3               	movwf	___ftdiv@f1+2
  8228  09DF  318E  26A5  3189   	fcall	___ftdiv
  8229  09E2  0020               	movlb	0	; select bank0
  8230  09E3  082E               	movf	?___ftdiv,w
  8231  09E4  00DF               	movwf	getPercentValue@i
  8232  09E5  082F               	movf	?___ftdiv+1,w
  8233  09E6  00E0               	movwf	getPercentValue@i+1
  8234  09E7  0830               	movf	?___ftdiv+2,w
  8235  09E8  00E1               	movwf	getPercentValue@i+2
  8236                           
  8237                           ;Dimmer_B1.c: 1037: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  8238  09E9  085E               	movf	getPercentValue@value,w
  8239  09EA  00DC               	movwf	??_getPercentValue
  8240  09EB  01DD               	clrf	??_getPercentValue+1
  8241  09EC  09DC               	comf	??_getPercentValue,f
  8242  09ED  09DD               	comf	??_getPercentValue+1,f
  8243  09EE  0ADC               	incf	??_getPercentValue,f
  8244  09EF  1903               	skipnz
  8245  09F0  0ADD               	incf	??_getPercentValue+1,f
  8246  09F1  085C               	movf	??_getPercentValue,w
  8247  09F2  3E64               	addlw	100
  8248  09F3  00A8               	movwf	___awtoft@c
  8249  09F4  3000               	movlw	0
  8250  09F5  3D5D               	addwfc	??_getPercentValue+1,w
  8251  09F6  00A9               	movwf	___awtoft@c+1
  8252  09F7  319F  2724  3189   	fcall	___awtoft
  8253  09FA  0020               	movlb	0	; select bank0
  8254  09FB  0828               	movf	?___awtoft,w
  8255  09FC  00B1               	movwf	___ftmul@f2
  8256  09FD  0829               	movf	?___awtoft+1,w
  8257  09FE  00B2               	movwf	___ftmul@f2+1
  8258  09FF  082A               	movf	?___awtoft+2,w
  8259  0A00  00B3               	movwf	___ftmul@f2+2
  8260  0A01  085F               	movf	getPercentValue@i,w
  8261  0A02  00AE               	movwf	___ftmul@f1
  8262  0A03  0860               	movf	getPercentValue@i+1,w
  8263  0A04  00AF               	movwf	___ftmul@f1+1
  8264  0A05  0861               	movf	getPercentValue@i+2,w
  8265  0A06  00B0               	movwf	___ftmul@f1+2
  8266  0A07  3187  271D  3189   	fcall	___ftmul
  8267  0A0A  0020               	movlb	0	; select bank0
  8268  0A0B  082E               	movf	?___ftmul,w
  8269  0A0C  00BE               	movwf	___ftneg@f1
  8270  0A0D  082F               	movf	?___ftmul+1,w
  8271  0A0E  00BF               	movwf	___ftneg@f1+1
  8272  0A0F  0830               	movf	?___ftmul+2,w
  8273  0A10  00C0               	movwf	___ftneg@f1+2
  8274  0A11  319A  22F5  3189   	fcall	___ftneg
  8275  0A14  0020               	movlb	0	; select bank0
  8276  0A15  083E               	movf	?___ftneg,w
  8277  0A16  00C4               	movwf	___ftadd@f2
  8278  0A17  083F               	movf	?___ftneg+1,w
  8279  0A18  00C5               	movwf	___ftadd@f2+1
  8280  0A19  0840               	movf	?___ftneg+2,w
  8281  0A1A  00C6               	movwf	___ftadd@f2+2
  8282  0A1B  3000               	movlw	0
  8283  0A1C  00C1               	movwf	___ftadd@f1
  8284  0A1D  3060               	movlw	96
  8285  0A1E  00C2               	movwf	___ftadd@f1+1
  8286  0A1F  3042               	movlw	66
  8287  0A20  00C3               	movwf	___ftadd@f1+2
  8288  0A21  3184  2467  3189   	fcall	___ftadd
  8289  0A24  0020               	movlb	0	; select bank0
  8290  0A25  0841               	movf	?___ftadd,w
  8291  0A26  00CE               	movwf	___fttol@f1
  8292  0A27  0842               	movf	?___ftadd+1,w
  8293  0A28  00CF               	movwf	___fttol@f1+1
  8294  0A29  0843               	movf	?___ftadd+2,w
  8295  0A2A  00D0               	movwf	___fttol@f1+2
  8296  0A2B  318C  24E3         	fcall	___fttol
  8297  0A2D  0020               	movlb	0	; select bank0
  8298  0A2E  084E               	movf	?___fttol,w
  8299  0A2F  0008               	return
  8300  0A30                     __end_of_getPercentValue:	
  8301                           
  8302                           	psect	text35
  8303  071D                     __ptext35:	
  8304 ;; *************** function ___ftmul *****************
  8305 ;; Defined at:
  8306 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  f1              3   14[BANK0 ] float 
  8309 ;;  f2              3   17[BANK0 ] float 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8312 ;;  sign            1   29[BANK0 ] unsigned char 
  8313 ;;  cntr            1   28[BANK0 ] unsigned char 
  8314 ;;  exp             1   24[BANK0 ] unsigned char 
  8315 ;; Return value:  Size  Location     Type
  8316 ;;                  3   14[BANK0 ] float 
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0, pclath, cstack
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8324 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8328 ;;Total ram usage:       16 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    6
  8331 ;; This function calls:
  8332 ;;		___ftpack
  8333 ;; This function is called by:
  8334 ;;		_getPercentValue
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function ___ftmul
  8340  071D                     ___ftmul:	
  8341                           
  8342                           ;incstack = 0
  8343                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8344  071D  0020               	movlb	0	; select bank0
  8345  071E  082E               	movf	___ftmul@f1,w
  8346  071F  00B4               	movwf	??___ftmul
  8347  0720  082F               	movf	___ftmul@f1+1,w
  8348  0721  00B5               	movwf	??___ftmul+1
  8349  0722  0830               	movf	___ftmul@f1+2,w
  8350  0723  00B6               	movwf	??___ftmul+2
  8351  0724  1003               	clrc
  8352  0725  0D35               	rlf	??___ftmul+1,w
  8353  0726  0D36               	rlf	??___ftmul+2,w
  8354  0727  00B7               	movwf	??___ftmul+3
  8355  0728  0837               	movf	??___ftmul+3,w
  8356  0729  00B8               	movwf	___ftmul@exp
  8357  072A  08B8               	movf	___ftmul@exp,f
  8358  072B  1D03               	skipz
  8359  072C  2F34               	goto	l8811
  8360  072D  3000               	movlw	0
  8361  072E  00AE               	movwf	?___ftmul
  8362  072F  3000               	movlw	0
  8363  0730  00AF               	movwf	?___ftmul+1
  8364  0731  3000               	movlw	0
  8365  0732  00B0               	movwf	?___ftmul+2
  8366  0733  0008               	return
  8367  0734                     l8811:	
  8368  0734  0831               	movf	___ftmul@f2,w
  8369  0735  00B4               	movwf	??___ftmul
  8370  0736  0832               	movf	___ftmul@f2+1,w
  8371  0737  00B5               	movwf	??___ftmul+1
  8372  0738  0833               	movf	___ftmul@f2+2,w
  8373  0739  00B6               	movwf	??___ftmul+2
  8374  073A  1003               	clrc
  8375  073B  0D35               	rlf	??___ftmul+1,w
  8376  073C  0D36               	rlf	??___ftmul+2,w
  8377  073D  00B7               	movwf	??___ftmul+3
  8378  073E  0837               	movf	??___ftmul+3,w
  8379  073F  00BD               	movwf	___ftmul@sign
  8380  0740  08BD               	movf	___ftmul@sign,f
  8381  0741  1D03               	skipz
  8382  0742  2F4A               	goto	l8817
  8383  0743  3000               	movlw	0
  8384  0744  00AE               	movwf	?___ftmul
  8385  0745  3000               	movlw	0
  8386  0746  00AF               	movwf	?___ftmul+1
  8387  0747  3000               	movlw	0
  8388  0748  00B0               	movwf	?___ftmul+2
  8389  0749  0008               	return
  8390  074A                     l8817:	
  8391  074A  083D               	movf	___ftmul@sign,w
  8392  074B  3E7B               	addlw	123
  8393  074C  00B4               	movwf	??___ftmul
  8394  074D  0834               	movf	??___ftmul,w
  8395  074E  07B8               	addwf	___ftmul@exp,f
  8396  074F  082E               	movf	___ftmul@f1,w
  8397  0750  00B4               	movwf	??___ftmul
  8398  0751  082F               	movf	___ftmul@f1+1,w
  8399  0752  00B5               	movwf	??___ftmul+1
  8400  0753  0830               	movf	___ftmul@f1+2,w
  8401  0754  00B6               	movwf	??___ftmul+2
  8402  0755  3010               	movlw	16
  8403  0756                     u9385:	
  8404  0756  36B6               	lsrf	??___ftmul+2,f
  8405  0757  0CB5               	rrf	??___ftmul+1,f
  8406  0758  0CB4               	rrf	??___ftmul,f
  8407  0759  0B89               	decfsz	9,f
  8408  075A  2F56               	goto	u9385
  8409  075B  0834               	movf	??___ftmul,w
  8410  075C  00B7               	movwf	??___ftmul+3
  8411  075D  0837               	movf	??___ftmul+3,w
  8412  075E  00BD               	movwf	___ftmul@sign
  8413  075F  0831               	movf	___ftmul@f2,w
  8414  0760  00B4               	movwf	??___ftmul
  8415  0761  0832               	movf	___ftmul@f2+1,w
  8416  0762  00B5               	movwf	??___ftmul+1
  8417  0763  0833               	movf	___ftmul@f2+2,w
  8418  0764  00B6               	movwf	??___ftmul+2
  8419  0765  3010               	movlw	16
  8420  0766                     u9395:	
  8421  0766  36B6               	lsrf	??___ftmul+2,f
  8422  0767  0CB5               	rrf	??___ftmul+1,f
  8423  0768  0CB4               	rrf	??___ftmul,f
  8424  0769  0B89               	decfsz	9,f
  8425  076A  2F66               	goto	u9395
  8426  076B  0834               	movf	??___ftmul,w
  8427  076C  00B7               	movwf	??___ftmul+3
  8428  076D  0837               	movf	??___ftmul+3,w
  8429  076E  06BD               	xorwf	___ftmul@sign,f
  8430  076F  3080               	movlw	128
  8431  0770  00B4               	movwf	??___ftmul
  8432  0771  0834               	movf	??___ftmul,w
  8433  0772  05BD               	andwf	___ftmul@sign,f
  8434  0773  17AF               	bsf	___ftmul@f1+1,7
  8435  0774  17B2               	bsf	___ftmul@f2+1,7
  8436  0775  30FF               	movlw	255
  8437  0776  05B1               	andwf	___ftmul@f2,f
  8438  0777  30FF               	movlw	255
  8439  0778  05B2               	andwf	___ftmul@f2+1,f
  8440  0779  3000               	movlw	0
  8441  077A  05B3               	andwf	___ftmul@f2+2,f
  8442  077B  3000               	movlw	0
  8443  077C  00B9               	movwf	___ftmul@f3_as_product
  8444  077D  3000               	movlw	0
  8445  077E  00BA               	movwf	___ftmul@f3_as_product+1
  8446  077F  3000               	movlw	0
  8447  0780  00BB               	movwf	___ftmul@f3_as_product+2
  8448  0781  3007               	movlw	7
  8449  0782  00B4               	movwf	??___ftmul
  8450  0783  0834               	movf	??___ftmul,w
  8451  0784  00BC               	movwf	___ftmul@cntr
  8452  0785                     l8829:	
  8453  0785  1C2E               	btfss	___ftmul@f1,0
  8454  0786  2F8D               	goto	l8833
  8455  0787  0831               	movf	___ftmul@f2,w
  8456  0788  07B9               	addwf	___ftmul@f3_as_product,f
  8457  0789  0832               	movf	___ftmul@f2+1,w
  8458  078A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8459  078B  0833               	movf	___ftmul@f2+2,w
  8460  078C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8461  078D                     l8833:	
  8462  078D  3001               	movlw	1
  8463  078E                     u9415:	
  8464  078E  36B0               	lsrf	___ftmul@f1+2,f
  8465  078F  0CAF               	rrf	___ftmul@f1+1,f
  8466  0790  0CAE               	rrf	___ftmul@f1,f
  8467  0791  0B89               	decfsz	9,f
  8468  0792  2F8E               	goto	u9415
  8469  0793  3001               	movlw	1
  8470  0794                     u9425:	
  8471  0794  35B1               	lslf	___ftmul@f2,f
  8472  0795  0DB2               	rlf	___ftmul@f2+1,f
  8473  0796  0DB3               	rlf	___ftmul@f2+2,f
  8474  0797  0B89               	decfsz	9,f
  8475  0798  2F94               	goto	u9425
  8476  0799  3001               	movlw	1
  8477  079A  02BC               	subwf	___ftmul@cntr,f
  8478  079B  1D03               	btfss	3,2
  8479  079C  2F85               	goto	l8829
  8480  079D  3009               	movlw	9
  8481  079E  00B4               	movwf	??___ftmul
  8482  079F  0834               	movf	??___ftmul,w
  8483  07A0  00BC               	movwf	___ftmul@cntr
  8484  07A1                     l8841:	
  8485  07A1  1C2E               	btfss	___ftmul@f1,0
  8486  07A2  2FA9               	goto	l8845
  8487  07A3  0831               	movf	___ftmul@f2,w
  8488  07A4  07B9               	addwf	___ftmul@f3_as_product,f
  8489  07A5  0832               	movf	___ftmul@f2+1,w
  8490  07A6  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8491  07A7  0833               	movf	___ftmul@f2+2,w
  8492  07A8  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8493  07A9                     l8845:	
  8494  07A9  3001               	movlw	1
  8495  07AA                     u9455:	
  8496  07AA  36B0               	lsrf	___ftmul@f1+2,f
  8497  07AB  0CAF               	rrf	___ftmul@f1+1,f
  8498  07AC  0CAE               	rrf	___ftmul@f1,f
  8499  07AD  0B89               	decfsz	9,f
  8500  07AE  2FAA               	goto	u9455
  8501  07AF  3001               	movlw	1
  8502  07B0                     u9465:	
  8503  07B0  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8504  07B1  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8505  07B2  0CB9               	rrf	___ftmul@f3_as_product,f
  8506  07B3  0B89               	decfsz	9,f
  8507  07B4  2FB0               	goto	u9465
  8508  07B5  3001               	movlw	1
  8509  07B6  02BC               	subwf	___ftmul@cntr,f
  8510  07B7  1D03               	btfss	3,2
  8511  07B8  2FA1               	goto	l8841
  8512  07B9  0839               	movf	___ftmul@f3_as_product,w
  8513  07BA  00A0               	movwf	___ftpack@arg
  8514  07BB  083A               	movf	___ftmul@f3_as_product+1,w
  8515  07BC  00A1               	movwf	___ftpack@arg+1
  8516  07BD  083B               	movf	___ftmul@f3_as_product+2,w
  8517  07BE  00A2               	movwf	___ftpack@arg+2
  8518  07BF  0838               	movf	___ftmul@exp,w
  8519  07C0  00B4               	movwf	??___ftmul
  8520  07C1  0834               	movf	??___ftmul,w
  8521  07C2  00A3               	movwf	___ftpack@exp
  8522  07C3  083D               	movf	___ftmul@sign,w
  8523  07C4  00B5               	movwf	??___ftmul+1
  8524  07C5  0835               	movf	??___ftmul+1,w
  8525  07C6  00A4               	movwf	___ftpack@sign
  8526  07C7  3188  20A3         	fcall	___ftpack
  8527  07C9  0020               	movlb	0	; select bank0
  8528  07CA  0820               	movf	?___ftpack,w
  8529  07CB  00AE               	movwf	?___ftmul
  8530  07CC  0821               	movf	?___ftpack+1,w
  8531  07CD  00AF               	movwf	?___ftmul+1
  8532  07CE  0822               	movf	?___ftpack+2,w
  8533  07CF  00B0               	movwf	?___ftmul+2
  8534  07D0  0008               	return
  8535  07D1                     __end_of___ftmul:	
  8536                           
  8537                           	psect	text36
  8538  1C9B                     __ptext36:	
  8539 ;; *************** function _setMemory_Modify *****************
  8540 ;; Defined at:
  8541 ;;		line 1067 in file "../src/MCU_B1.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;  command         1    wreg     unsigned char 
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;  command         1    1[BANK0 ] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;		None               void
  8548 ;; Registers used:
  8549 ;;		wreg, status,2, status,0
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:        2 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    5
  8562 ;; This function calls:
  8563 ;;		Nothing
  8564 ;; This function is called by:
  8565 ;;		_setLog_Code
  8566 ;;		_setRFSW_AdjControl
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           
  8571                           ;psect for function _setMemory_Modify
  8572  1C9B                     _setMemory_Modify:	
  8573                           
  8574                           ;incstack = 0
  8575                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8576                           ;setMemory_Modify@command stored from wreg
  8577  1C9B  0020               	movlb	0	; select bank0
  8578  1C9C  00A1               	movwf	setMemory_Modify@command
  8579                           
  8580                           ;MCU_B1.c: 1068: Memory.Modify = command == 1 ? 1 : 0;
  8581  1C9D  0821               	movf	setMemory_Modify@command,w
  8582  1C9E  3A01               	xorlw	1
  8583  1C9F  3000               	movlw	0
  8584  1CA0  1903               	skipnz
  8585  1CA1  3001               	movlw	1
  8586  1CA2  00A0               	movwf	??_setMemory_Modify
  8587  1CA3  0024               	movlb	4	; select bank4
  8588  1CA4  0844               	movf	(_Memory^(0+512)+36),w
  8589  1CA5  0020               	movlb	0	; select bank0
  8590  1CA6  0620               	xorwf	??_setMemory_Modify,w
  8591  1CA7  39FE               	andlw	-2
  8592  1CA8  0620               	xorwf	??_setMemory_Modify,w
  8593  1CA9  0024               	movlb	4	; select bank4
  8594  1CAA  00C4               	movwf	(_Memory^(0+512)+36)
  8595                           
  8596                           ;MCU_B1.c: 1069: Memory.Time = 0;
  8597  1CAB  01C2               	clrf	(_Memory^(0+512)+34)
  8598  1CAC  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8599  1CAD  0008               	return
  8600  1CAE                     __end_of_setMemory_Modify:	
  8601                           
  8602                           	psect	text37
  8603  1BF6                     __ptext37:	
  8604 ;; *************** function _getRF_KeyStatus *****************
  8605 ;; Defined at:
  8606 ;;		line 175 in file "../src/RF_Control_B1.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;  key             1    1[BANK0 ] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      unsigned char 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        3 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_setRF_Main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function _getRF_KeyStatus
  8636  1BF6                     _getRF_KeyStatus:	
  8637                           
  8638                           ;RF_Control_B1.c: 176: char key = 0;
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8642  1BF6  0020               	movlb	0	; select bank0
  8643  1BF7  01A1               	clrf	getRF_KeyStatus@key
  8644                           
  8645                           ;RF_Control_B1.c: 182: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8646  1BF8  01A2               	clrf	_getRF_KeyStatus$5297
  8647  1BF9  0AA2               	incf	_getRF_KeyStatus$5297,f
  8648  1BFA  1F0C               	btfss	12,6	;volatile
  8649  1BFB  1A0C               	btfsc	12,4	;volatile
  8650  1BFC  2C01               	goto	l9913
  8651  1BFD  1C0C               	btfss	12,0	;volatile
  8652  1BFE  188D               	btfsc	13,1	;volatile
  8653  1BFF  2C01               	goto	l9913
  8654  1C00  01A2               	clrf	_getRF_KeyStatus$5297
  8655  1C01                     l9913:	
  8656  1C01  0822               	movf	_getRF_KeyStatus$5297,w
  8657  1C02  00A0               	movwf	??_getRF_KeyStatus
  8658  1C03  0820               	movf	??_getRF_KeyStatus,w
  8659  1C04  00A1               	movwf	getRF_KeyStatus@key
  8660                           
  8661                           ;RF_Control_B1.c: 188: return key;
  8662  1C05  0821               	movf	getRF_KeyStatus@key,w
  8663  1C06  0008               	return
  8664  1C07                     __end_of_getRF_KeyStatus:	
  8665                           
  8666                           	psect	text38
  8667  1BE5                     __ptext38:	
  8668 ;; *************** function _getBuz_GO *****************
  8669 ;; Defined at:
  8670 ;;		line 82 in file "../src/Buzzer_B1.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;		None
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  i               2    4[BANK0 ] int 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  2    0[BANK0 ] int 
  8677 ;; Registers used:
  8678 ;;		wreg, status,2, status,0
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:        6 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    5
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_setRF_Main
  8695 ;; This function uses a non-reentrant model
  8696 ;;
  8697                           
  8698                           
  8699                           ;psect for function _getBuz_GO
  8700  1BE5                     _getBuz_GO:	
  8701                           
  8702                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8703                           
  8704                           ;incstack = 0
  8705                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8706  1BE5  0021               	movlb	1	; select bank1
  8707  1BE6  0C2E               	rrf	_Buz1^(0+128),w
  8708  1BE7  3901               	andlw	1
  8709  1BE8  0020               	movlb	0	; select bank0
  8710  1BE9  00A2               	movwf	??_getBuz_GO
  8711  1BEA  01A3               	clrf	??_getBuz_GO+1
  8712  1BEB  0822               	movf	??_getBuz_GO,w
  8713  1BEC  00A4               	movwf	getBuz_GO@i
  8714  1BED  0823               	movf	??_getBuz_GO+1,w
  8715  1BEE  00A5               	movwf	getBuz_GO@i+1
  8716                           
  8717                           ;Buzzer_B1.c: 84: return i;
  8718  1BEF  0825               	movf	getBuz_GO@i+1,w
  8719  1BF0  01A1               	clrf	?_getBuz_GO+1
  8720  1BF1  07A1               	addwf	?_getBuz_GO+1,f
  8721  1BF2  0824               	movf	getBuz_GO@i,w
  8722  1BF3  01A0               	clrf	?_getBuz_GO
  8723  1BF4  07A0               	addwf	?_getBuz_GO,f
  8724  1BF5  0008               	return
  8725  1BF6                     __end_of_getBuz_GO:	
  8726                           
  8727                           	psect	text39
  8728  1BA6                     __ptext39:	
  8729 ;; *************** function _RF_RxDisable *****************
  8730 ;; Defined at:
  8731 ;;		line 248 in file "../src/RF_Control_B1.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;		None               void
  8738 ;; Registers used:
  8739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    7
  8752 ;; This function calls:
  8753 ;;		_CC2500_WriteCommand
  8754 ;; This function is called by:
  8755 ;;		_setRF_Main
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           
  8760                           ;psect for function _RF_RxDisable
  8761  1BA6                     _RF_RxDisable:	
  8762                           
  8763                           ;RF_Control_B1.c: 249: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8767  1BA6  0021               	movlb	1	; select bank1
  8768  1BA7  18A0               	btfsc	_RF1^(0+128),1
  8769  1BA8  2BAB               	goto	l2304
  8770  1BA9  1DA0               	btfss	_RF1^(0+128),3
  8771  1BAA  0008               	return
  8772  1BAB                     l2304:	
  8773                           
  8774                           ;RF_Control_B1.c: 250: RF1.RxStatus = 0;
  8775  1BAB  11A0               	bcf	_RF1^(0+128),3
  8776                           
  8777                           ;RF_Control_B1.c: 251: RF1.ReceiveGO = 0;
  8778  1BAC  10A0               	bcf	_RF1^(0+128),1
  8779                           
  8780                           ;RF_Control_B1.c: 252: CC2500_WriteCommand(0x36);
  8781  1BAD  3036               	movlw	54
  8782  1BAE  319D  25D9  319B   	fcall	_CC2500_WriteCommand
  8783                           
  8784                           ;RF_Control_B1.c: 253: CC2500_WriteCommand(0x3A);
  8785  1BB1  303A               	movlw	58
  8786  1BB2  319D  25D9         	fcall	_CC2500_WriteCommand
  8787  1BB4  0008               	return
  8788  1BB5                     __end_of_RF_RxDisable:	
  8789                           
  8790                           	psect	text40
  8791  0A97                     __ptext40:	
  8792 ;; *************** function _CC2500_TxData *****************
  8793 ;; Defined at:
  8794 ;;		line 32 in file "../src/CC2500_B1.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;		None               void
  8801 ;; Registers used:
  8802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        2 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    7
  8815 ;; This function calls:
  8816 ;;		_CC2500_WriteByte
  8817 ;;		_CC2500_WriteCommand
  8818 ;;		_RF_Timeout_Counter
  8819 ;;		_setRF_TimeoutCleared
  8820 ;; This function is called by:
  8821 ;;		_setRF_Main
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _CC2500_TxData
  8827  0A97                     _CC2500_TxData:	
  8828                           
  8829                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8830                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8834  0A97  3036               	movlw	54
  8835  0A98  319D  25D9  318A   	fcall	_CC2500_WriteCommand
  8836                           
  8837                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8838  0A9B  303B               	movlw	59
  8839  0A9C  319D  25D9  318A   	fcall	_CC2500_WriteCommand
  8840                           
  8841                           ;CC2500_B1.c: 38: RC4 = 0;
  8842  0A9F  0020               	movlb	0	; select bank0
  8843  0AA0  120E               	bcf	14,4	;volatile
  8844                           
  8845                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8846  0AA1  307F               	movlw	127
  8847  0AA2  00A4               	movwf	??_CC2500_TxData
  8848  0AA3  0824               	movf	??_CC2500_TxData,w
  8849  0AA4  0021               	movlb	1	; select bank1
  8850  0AA5  00CC               	movwf	_SPI0Buffer^(0+128)
  8851                           
  8852                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8853  0AA6  2AAA               	goto	l9599
  8854  0AA7                     l9597:	
  8855                           
  8856                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8857  0AA7  319D  253A  318A   	fcall	_RF_Timeout_Counter
  8858  0AAA                     l9599:	
  8859  0AAA  0020               	movlb	0	; select bank0
  8860  0AAB  1D0E               	btfss	14,2	;volatile
  8861  0AAC  2AB0               	goto	l9603
  8862  0AAD  0021               	movlb	1	; select bank1
  8863  0AAE  1F21               	btfss	(_RF1^(0+128)+1),6
  8864  0AAF  2AA7               	goto	l9597
  8865  0AB0                     l9603:	
  8866                           
  8867                           ;CC2500_B1.c: 42: };
  8868                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8869  0AB0  319A  228F  318A   	fcall	_setRF_TimeoutCleared
  8870                           
  8871                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8872  0AB3  319D  25A6  318A   	fcall	_CC2500_WriteByte
  8873                           
  8874                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8875  0AB6  0021               	movlb	1	; select bank1
  8876  0AB7  084E               	movf	_Tx_Length^(0+128),w
  8877  0AB8  0020               	movlb	0	; select bank0
  8878  0AB9  00A4               	movwf	??_CC2500_TxData
  8879  0ABA  0824               	movf	??_CC2500_TxData,w
  8880  0ABB  0021               	movlb	1	; select bank1
  8881  0ABC  00CC               	movwf	_SPI0Buffer^(0+128)
  8882                           
  8883                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8884  0ABD  319D  25A6  318A   	fcall	_CC2500_WriteByte
  8885                           
  8886                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8887  0AC0  0020               	movlb	0	; select bank0
  8888  0AC1  01A5               	clrf	CC2500_TxData@loop_e
  8889  0AC2                     l9617:	
  8890  0AC2  0021               	movlb	1	; select bank1
  8891  0AC3  084E               	movf	_Tx_Length^(0+128),w
  8892  0AC4  0020               	movlb	0	; select bank0
  8893  0AC5  0225               	subwf	CC2500_TxData@loop_e,w
  8894  0AC6  1803               	btfsc	3,0
  8895  0AC7  2ADB               	goto	l255
  8896                           
  8897                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8898  0AC8  0825               	movf	CC2500_TxData@loop_e,w
  8899  0AC9  3EA0               	addlw	_RF_Data& (0+255)
  8900  0ACA  0086               	movwf	6
  8901  0ACB  3001               	movlw	1	; select bank3/4
  8902  0ACC  0087               	movwf	7
  8903  0ACD  0801               	movf	1,w
  8904  0ACE  00A4               	movwf	??_CC2500_TxData
  8905  0ACF  0824               	movf	??_CC2500_TxData,w
  8906  0AD0  0021               	movlb	1	; select bank1
  8907  0AD1  00CC               	movwf	_SPI0Buffer^(0+128)
  8908                           
  8909                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8910  0AD2  319D  25A6  318A   	fcall	_CC2500_WriteByte
  8911  0AD5  3001               	movlw	1
  8912  0AD6  0020               	movlb	0	; select bank0
  8913  0AD7  00A4               	movwf	??_CC2500_TxData
  8914  0AD8  0824               	movf	??_CC2500_TxData,w
  8915  0AD9  07A5               	addwf	CC2500_TxData@loop_e,f
  8916  0ADA  2AC2               	goto	l9617
  8917  0ADB                     l255:	
  8918                           
  8919                           ;CC2500_B1.c: 51: }
  8920                           ;CC2500_B1.c: 52: RC4 = 1;
  8921  0ADB  160E               	bsf	14,4	;volatile
  8922                           
  8923                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8924  0ADC  3035               	movlw	53
  8925  0ADD  319D  25D9  318A   	fcall	_CC2500_WriteCommand
  8926                           
  8927                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8928  0AE0  2AE4               	goto	l9623
  8929  0AE1                     l9621:	
  8930                           
  8931                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8932  0AE1  319D  253A  318A   	fcall	_RF_Timeout_Counter
  8933  0AE4                     l9623:	
  8934  0AE4  0020               	movlb	0	; select bank0
  8935  0AE5  180D               	btfsc	13,0	;volatile
  8936  0AE6  2AEA               	goto	l9627
  8937  0AE7  0021               	movlb	1	; select bank1
  8938  0AE8  1F21               	btfss	(_RF1^(0+128)+1),6
  8939  0AE9  2AE1               	goto	l9621
  8940  0AEA                     l9627:	
  8941                           
  8942                           ;CC2500_B1.c: 56: };
  8943                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8944  0AEA  319A  228F  318A   	fcall	_setRF_TimeoutCleared
  8945                           
  8946                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8947  0AED  2AF1               	goto	l9631
  8948  0AEE                     l9629:	
  8949                           
  8950                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8951  0AEE  319D  253A  318A   	fcall	_RF_Timeout_Counter
  8952  0AF1                     l9631:	
  8953  0AF1  0020               	movlb	0	; select bank0
  8954  0AF2  1C0D               	btfss	13,0	;volatile
  8955  0AF3  2AF7               	goto	l9635
  8956  0AF4  0021               	movlb	1	; select bank1
  8957  0AF5  1F21               	btfss	(_RF1^(0+128)+1),6
  8958  0AF6  2AEE               	goto	l9629
  8959  0AF7                     l9635:	
  8960                           
  8961                           ;CC2500_B1.c: 61: };
  8962                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8963  0AF7  319A  228F  318A   	fcall	_setRF_TimeoutCleared
  8964                           
  8965                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8966  0AFA  3036               	movlw	54
  8967  0AFB  319D  25D9  318A   	fcall	_CC2500_WriteCommand
  8968                           
  8969                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8970  0AFE  303B               	movlw	59
  8971  0AFF  319D  25D9         	fcall	_CC2500_WriteCommand
  8972                           
  8973                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8974  0B01  14F9               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8975  0B02  0008               	return
  8976  0B03                     __end_of_CC2500_TxData:	
  8977                           
  8978                           	psect	text41
  8979  0B70                     __ptext41:	
  8980 ;; *************** function _CC2500_RxData *****************
  8981 ;; Defined at:
  8982 ;;		line 73 in file "../src/CC2500_B1.c"
  8983 ;; Parameters:    Size  Location     Type
  8984 ;;		None
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8987 ;; Return value:  Size  Location     Type
  8988 ;;		None               void
  8989 ;; Registers used:
  8990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8991 ;; Tracked objects:
  8992 ;;		On entry : 0/0
  8993 ;;		On exit  : 0/0
  8994 ;;		Unchanged: 0/0
  8995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;Total ram usage:        2 bytes
  9001 ;; Hardware stack levels used:    1
  9002 ;; Hardware stack levels required when called:    7
  9003 ;; This function calls:
  9004 ;;		_CC2500_ReadByte
  9005 ;;		_CC2500_ReadStatus
  9006 ;;		_CC2500_WriteByte
  9007 ;;		_CC2500_WriteCommand
  9008 ;;		_RF_Timeout_Counter
  9009 ;;		_setRF_TimeoutCleared
  9010 ;; This function is called by:
  9011 ;;		_setRF_Main
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _CC2500_RxData
  9017  0B70                     _CC2500_RxData:	
  9018                           
  9019                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9020                           ;CC2500_B1.c: 78: if (RB0 == 1)
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9024  0B70  0020               	movlb	0	; select bank0
  9025  0B71  180D               	btfsc	13,0	;volatile
  9026  0B72  2B77               	goto	l9649
  9027  0B73  2B80               	goto	l9655
  9028  0B74                     l9647:	
  9029                           ;CC2500_B1.c: 79: {
  9030                           ;CC2500_B1.c: 80: while (RB0 == 1 && RF1.Timeout == 0) {
  9031                           
  9032                           
  9033                           ;CC2500_B1.c: 81: RF_Timeout_Counter();
  9034  0B74  319D  253A  318B   	fcall	_RF_Timeout_Counter
  9035  0B77                     l9649:	
  9036  0B77  0020               	movlb	0	; select bank0
  9037  0B78  1C0D               	btfss	13,0	;volatile
  9038  0B79  2B7D               	goto	l9653
  9039  0B7A  0021               	movlb	1	; select bank1
  9040  0B7B  1F21               	btfss	(_RF1^(0+128)+1),6
  9041  0B7C  2B74               	goto	l9647
  9042  0B7D                     l9653:	
  9043                           
  9044                           ;CC2500_B1.c: 82: };
  9045                           ;CC2500_B1.c: 83: setRF_TimeoutCleared();
  9046  0B7D  319A  228F  318B   	fcall	_setRF_TimeoutCleared
  9047  0B80                     l9655:	
  9048                           
  9049                           ;CC2500_B1.c: 84: }
  9050                           ;CC2500_B1.c: 86: CC2500_ReadStatus(0x3B);
  9051  0B80  303B               	movlw	59
  9052  0B81  319F  278D  318B   	fcall	_CC2500_ReadStatus
  9053                           
  9054                           ;CC2500_B1.c: 88: if (s_data != 0) {
  9055  0B84  0021               	movlb	1	; select bank1
  9056  0B85  0851               	movf	_s_data^(0+128),w
  9057  0B86  1903               	btfsc	3,2
  9058  0B87  0008               	return
  9059                           
  9060                           ;CC2500_B1.c: 89: RC4 = 0;
  9061  0B88  0020               	movlb	0	; select bank0
  9062  0B89  120E               	bcf	14,4	;volatile
  9063                           
  9064                           ;CC2500_B1.c: 90: SPI0Buffer = 0x3F + 0xC0;
  9065  0B8A  30FF               	movlw	255
  9066  0B8B  00A4               	movwf	??_CC2500_RxData
  9067  0B8C  0824               	movf	??_CC2500_RxData,w
  9068  0B8D  0021               	movlb	1	; select bank1
  9069  0B8E  00CC               	movwf	_SPI0Buffer^(0+128)
  9070                           
  9071                           ;CC2500_B1.c: 91: while (RC2 == 1 && RF1.Timeout == 0) {
  9072  0B8F  2B93               	goto	l9665
  9073  0B90                     l9663:	
  9074                           
  9075                           ;CC2500_B1.c: 92: RF_Timeout_Counter();
  9076  0B90  319D  253A  318B   	fcall	_RF_Timeout_Counter
  9077  0B93                     l9665:	
  9078  0B93  0020               	movlb	0	; select bank0
  9079  0B94  1D0E               	btfss	14,2	;volatile
  9080  0B95  2B99               	goto	l9669
  9081  0B96  0021               	movlb	1	; select bank1
  9082  0B97  1F21               	btfss	(_RF1^(0+128)+1),6
  9083  0B98  2B90               	goto	l9663
  9084  0B99                     l9669:	
  9085                           
  9086                           ;CC2500_B1.c: 93: };
  9087                           ;CC2500_B1.c: 94: setRF_TimeoutCleared();
  9088  0B99  319A  228F  318B   	fcall	_setRF_TimeoutCleared
  9089                           
  9090                           ;CC2500_B1.c: 95: CC2500_WriteByte();
  9091  0B9C  319D  25A6  318B   	fcall	_CC2500_WriteByte
  9092                           
  9093                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9094  0B9F  319E  262A  318B   	fcall	_CC2500_ReadByte
  9095                           
  9096                           ;CC2500_B1.c: 98: Rx_Length = SPI0Buffer;
  9097  0BA2  0021               	movlb	1	; select bank1
  9098  0BA3  084C               	movf	_SPI0Buffer^(0+128),w
  9099  0BA4  0020               	movlb	0	; select bank0
  9100  0BA5  00A4               	movwf	??_CC2500_RxData
  9101  0BA6  0824               	movf	??_CC2500_RxData,w
  9102  0BA7  0021               	movlb	1	; select bank1
  9103  0BA8  00CB               	movwf	_Rx_Length^(0+128)
  9104                           
  9105                           ;CC2500_B1.c: 99: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9106  0BA9  0020               	movlb	0	; select bank0
  9107  0BAA  01A5               	clrf	CC2500_RxData@loop_f
  9108  0BAB                     l9685:	
  9109  0BAB  0021               	movlb	1	; select bank1
  9110  0BAC  084B               	movf	_Rx_Length^(0+128),w
  9111  0BAD  0020               	movlb	0	; select bank0
  9112  0BAE  0225               	subwf	CC2500_RxData@loop_f,w
  9113  0BAF  1803               	btfsc	3,0
  9114  0BB0  2BC4               	goto	l9687
  9115                           
  9116                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9117  0BB1  319E  262A  318B   	fcall	_CC2500_ReadByte
  9118                           
  9119                           ;CC2500_B1.c: 101: RF_Data[loop_f] = SPI0Buffer;
  9120  0BB4  0021               	movlb	1	; select bank1
  9121  0BB5  084C               	movf	_SPI0Buffer^(0+128),w
  9122  0BB6  0020               	movlb	0	; select bank0
  9123  0BB7  00A4               	movwf	??_CC2500_RxData
  9124  0BB8  0825               	movf	CC2500_RxData@loop_f,w
  9125  0BB9  3EA0               	addlw	_RF_Data& (0+255)
  9126  0BBA  0086               	movwf	6
  9127  0BBB  3001               	movlw	1	; select bank3/4
  9128  0BBC  0087               	movwf	7
  9129  0BBD  0824               	movf	??_CC2500_RxData,w
  9130  0BBE  0081               	movwf	1
  9131  0BBF  3001               	movlw	1
  9132  0BC0  00A4               	movwf	??_CC2500_RxData
  9133  0BC1  0824               	movf	??_CC2500_RxData,w
  9134  0BC2  07A5               	addwf	CC2500_RxData@loop_f,f
  9135  0BC3  2BAB               	goto	l9685
  9136  0BC4                     l9687:	
  9137                           
  9138                           ;CC2500_B1.c: 102: }
  9139                           ;CC2500_B1.c: 103: CC2500_ReadByte();
  9140  0BC4  319E  262A  318B   	fcall	_CC2500_ReadByte
  9141                           
  9142                           ;CC2500_B1.c: 104: RSSI = SPI0Buffer;
  9143  0BC7  0021               	movlb	1	; select bank1
  9144  0BC8  084C               	movf	_SPI0Buffer^(0+128),w
  9145  0BC9  0020               	movlb	0	; select bank0
  9146  0BCA  00A4               	movwf	??_CC2500_RxData
  9147  0BCB  0824               	movf	??_CC2500_RxData,w
  9148  0BCC  0021               	movlb	1	; select bank1
  9149  0BCD  00CA               	movwf	_RSSI^(0+128)
  9150                           
  9151                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9152  0BCE  319E  262A  318B   	fcall	_CC2500_ReadByte
  9153                           
  9154                           ;CC2500_B1.c: 106: CRC = SPI0Buffer;
  9155  0BD1  0021               	movlb	1	; select bank1
  9156  0BD2  084C               	movf	_SPI0Buffer^(0+128),w
  9157  0BD3  0020               	movlb	0	; select bank0
  9158  0BD4  00A4               	movwf	??_CC2500_RxData
  9159  0BD5  0824               	movf	??_CC2500_RxData,w
  9160  0BD6  0021               	movlb	1	; select bank1
  9161  0BD7  00C6               	movwf	_CRC^(0+128)
  9162                           
  9163                           ;CC2500_B1.c: 107: RC4 = 1;
  9164  0BD8  0020               	movlb	0	; select bank0
  9165  0BD9  160E               	bsf	14,4	;volatile
  9166                           
  9167                           ;CC2500_B1.c: 108: if (CRC & 0x80)
  9168  0BDA  0021               	movlb	1	; select bank1
  9169  0BDB  1BC6               	btfsc	_CRC^(0+128),7
  9170                           
  9171                           ;CC2500_B1.c: 109: Receive_OK = 1;
  9172  0BDC  1479               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9173                           
  9174                           ;CC2500_B1.c: 112: RF1.RxStatus = 0;
  9175  0BDD  11A0               	bcf	_RF1^(0+128),3
  9176                           
  9177                           ;CC2500_B1.c: 113: RF1.ReceiveGO = 1;
  9178  0BDE  14A0               	bsf	_RF1^(0+128),1
  9179                           
  9180                           ;CC2500_B1.c: 114: CC2500_WriteCommand(0x36);
  9181  0BDF  3036               	movlw	54
  9182  0BE0  319D  25D9  318B   	fcall	_CC2500_WriteCommand
  9183                           
  9184                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x3A);
  9185  0BE3  303A               	movlw	58
  9186  0BE4  319D  25D9         	fcall	_CC2500_WriteCommand
  9187  0BE6  0021               	movlb	1	; select bank1
  9188  0BE7  0008               	return
  9189  0BE8                     __end_of_CC2500_RxData:	
  9190                           
  9191                           	psect	text42
  9192  1F8D                     __ptext42:	
  9193 ;; *************** function _CC2500_ReadStatus *****************
  9194 ;; Defined at:
  9195 ;;		line 306 in file "../src/CC2500_B1.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  status_addr     1    wreg     unsigned char 
  9198 ;; Auto vars:     Size  Location     Type
  9199 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9200 ;; Return value:  Size  Location     Type
  9201 ;;		None               void
  9202 ;; Registers used:
  9203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;Total ram usage:        2 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:    6
  9216 ;; This function calls:
  9217 ;;		_CC2500_ReadByte
  9218 ;;		_CC2500_WriteByte
  9219 ;;		_RF_Timeout_Counter
  9220 ;;		_setRF_TimeoutCleared
  9221 ;; This function is called by:
  9222 ;;		_CC2500_RxData
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           
  9227                           ;psect for function _CC2500_ReadStatus
  9228  1F8D                     _CC2500_ReadStatus:	
  9229                           
  9230                           ;incstack = 0
  9231                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9232                           ;CC2500_ReadStatus@status_addr stored from wreg
  9233  1F8D  0020               	movlb	0	; select bank0
  9234  1F8E  00A3               	movwf	CC2500_ReadStatus@status_addr
  9235                           
  9236                           ;CC2500_B1.c: 307: RC4 = 0;
  9237  1F8F  120E               	bcf	14,4	;volatile
  9238                           
  9239                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  9240  1F90  0823               	movf	CC2500_ReadStatus@status_addr,w
  9241  1F91  3EC0               	addlw	192
  9242  1F92  00A2               	movwf	??_CC2500_ReadStatus
  9243  1F93  0822               	movf	??_CC2500_ReadStatus,w
  9244  1F94  0021               	movlb	1	; select bank1
  9245  1F95  00CC               	movwf	_SPI0Buffer^(0+128)
  9246                           
  9247                           ;CC2500_B1.c: 310: while (RC2 == 1 && RF1.Timeout == 0) {
  9248  1F96  2F9A               	goto	l9365
  9249  1F97                     l9363:	
  9250                           
  9251                           ;CC2500_B1.c: 311: RF_Timeout_Counter();
  9252  1F97  319D  253A  319F   	fcall	_RF_Timeout_Counter
  9253  1F9A                     l9365:	
  9254  1F9A  0020               	movlb	0	; select bank0
  9255  1F9B  1D0E               	btfss	14,2	;volatile
  9256  1F9C  2FA0               	goto	l9369
  9257  1F9D  0021               	movlb	1	; select bank1
  9258  1F9E  1F21               	btfss	(_RF1^(0+128)+1),6
  9259  1F9F  2F97               	goto	l9363
  9260  1FA0                     l9369:	
  9261                           
  9262                           ;CC2500_B1.c: 312: };
  9263                           ;CC2500_B1.c: 313: setRF_TimeoutCleared();
  9264  1FA0  319A  228F  319F   	fcall	_setRF_TimeoutCleared
  9265                           
  9266                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  9267  1FA3  319D  25A6  319F   	fcall	_CC2500_WriteByte
  9268                           
  9269                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  9270  1FA6  319E  262A         	fcall	_CC2500_ReadByte
  9271                           
  9272                           ;CC2500_B1.c: 317: RC4 = 1;
  9273  1FA8  0020               	movlb	0	; select bank0
  9274  1FA9  160E               	bsf	14,4	;volatile
  9275                           
  9276                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  9277  1FAA  0021               	movlb	1	; select bank1
  9278  1FAB  084C               	movf	_SPI0Buffer^(0+128),w
  9279  1FAC  0020               	movlb	0	; select bank0
  9280  1FAD  00A2               	movwf	??_CC2500_ReadStatus
  9281  1FAE  0822               	movf	??_CC2500_ReadStatus,w
  9282  1FAF  0021               	movlb	1	; select bank1
  9283  1FB0  00D1               	movwf	_s_data^(0+128)
  9284  1FB1  0008               	return
  9285  1FB2                     __end_of_CC2500_ReadStatus:	
  9286                           
  9287                           	psect	text43
  9288  1E2A                     __ptext43:	
  9289 ;; *************** function _CC2500_ReadByte *****************
  9290 ;; Defined at:
  9291 ;;		line 240 in file "../src/CC2500_B1.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;Total ram usage:        2 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    5
  9312 ;; This function calls:
  9313 ;;		Nothing
  9314 ;; This function is called by:
  9315 ;;		_CC2500_RxData
  9316 ;;		_CC2500_ReadStatus
  9317 ;;		_CC2500_ReadREG
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _CC2500_ReadByte
  9323  1E2A                     _CC2500_ReadByte:	
  9324                           
  9325                           ;CC2500_B1.c: 241: unsigned char loop_b;
  9326                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9330  1E2A  0020               	movlb	0	; select bank0
  9331  1E2B  01A1               	clrf	CC2500_ReadByte@loop_b
  9332  1E2C                     L4:	
  9333  1E2C  3008               	movlw	8
  9334  1E2D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9335  1E2E  1803               	btfsc	3,0
  9336  1E2F  0008               	return
  9337                           
  9338                           ;CC2500_B1.c: 243: RC1 = 1;
  9339  1E30  148E               	bsf	14,1	;volatile
  9340                           
  9341                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
  9342  1E31  1003               	clrc
  9343  1E32  0021               	movlb	1	; select bank1
  9344  1E33  0DCC               	rlf	_SPI0Buffer^(0+128),f
  9345                           
  9346                           ;CC2500_B1.c: 245: if (RC2 == 1)
  9347  1E34  0020               	movlb	0	; select bank0
  9348  1E35  1D0E               	btfss	14,2	;volatile
  9349  1E36  2E3A               	goto	l9249
  9350                           
  9351                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
  9352  1E37  0021               	movlb	1	; select bank1
  9353  1E38  144C               	bsf	_SPI0Buffer^(0+128),0
  9354  1E39  2E40               	goto	l9251
  9355  1E3A                     l9249:	
  9356                           
  9357                           ;CC2500_B1.c: 247: else
  9358                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
  9359  1E3A  30FE               	movlw	254
  9360  1E3B  0020               	movlb	0	; select bank0
  9361  1E3C  00A0               	movwf	??_CC2500_ReadByte
  9362  1E3D  0820               	movf	??_CC2500_ReadByte,w
  9363  1E3E  0021               	movlb	1	; select bank1
  9364  1E3F  05CC               	andwf	_SPI0Buffer^(0+128),f
  9365  1E40                     l9251:	
  9366                           
  9367                           ;CC2500_B1.c: 249: RC1 = 0;
  9368  1E40  0020               	movlb	0	; select bank0
  9369  1E41  108E               	bcf	14,1	;volatile
  9370  1E42  3001               	movlw	1
  9371  1E43  00A0               	movwf	??_CC2500_ReadByte
  9372  1E44  0820               	movf	??_CC2500_ReadByte,w
  9373  1E45  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9374  1E46  2E2C               	goto	L4
  9375  1E47                     __end_of_CC2500_ReadByte:	
  9376                           
  9377                           	psect	text44
  9378  1D4F                     __ptext44:	
  9379 ;; *************** function _CC2500_PowerOnInitial *****************
  9380 ;; Defined at:
  9381 ;;		line 124 in file "../src/CC2500_B1.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;		None
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;		None
  9386 ;; Return value:  Size  Location     Type
  9387 ;;		None               void
  9388 ;; Registers used:
  9389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;Total ram usage:        0 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    8
  9402 ;; This function calls:
  9403 ;;		_CC2500_ClearRXFIFO
  9404 ;;		_CC2500_ClearTXFIFO
  9405 ;;		_CC2500_FrequencyCabr
  9406 ;;		_CC2500_InitPATable
  9407 ;;		_CC2500_InitSetREG
  9408 ;;		_CC2500_PowerRST
  9409 ;;		_CC2500_SIDLEMode
  9410 ;; This function is called by:
  9411 ;;		_main
  9412 ;;		_setRF_Main
  9413 ;; This function uses a non-reentrant model
  9414 ;;
  9415                           
  9416                           
  9417                           ;psect for function _CC2500_PowerOnInitial
  9418  1D4F                     _CC2500_PowerOnInitial:	
  9419                           
  9420                           ;CC2500_B1.c: 125: CC2500_PowerRST();
  9421                           
  9422                           ;incstack = 0
  9423                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9424  1D4F  3188  2002  319D   	fcall	_CC2500_PowerRST
  9425                           
  9426                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
  9427  1D52  3190  2091  319D   	fcall	_CC2500_InitSetREG
  9428                           
  9429                           ;CC2500_B1.c: 127: CC2500_InitPATable();
  9430  1D55  319E  2665  319D   	fcall	_CC2500_InitPATable
  9431                           
  9432                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
  9433  1D58  319A  2297  319D   	fcall	_CC2500_ClearTXFIFO
  9434                           
  9435                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
  9436  1D5B  319A  2293  319D   	fcall	_CC2500_ClearRXFIFO
  9437                           
  9438                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
  9439  1D5E  319B  2370  319D   	fcall	_CC2500_FrequencyCabr
  9440                           
  9441                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
  9442  1D61  319A  229B         	fcall	_CC2500_SIDLEMode
  9443  1D63  0008               	return
  9444  1D64                     __end_of_CC2500_PowerOnInitial:	
  9445                           
  9446                           	psect	text45
  9447  1A9B                     __ptext45:	
  9448 ;; *************** function _CC2500_SIDLEMode *****************
  9449 ;; Defined at:
  9450 ;;		line 214 in file "../src/CC2500_B1.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;		None
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;		None
  9455 ;; Return value:  Size  Location     Type
  9456 ;;		None               void
  9457 ;; Registers used:
  9458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;Total ram usage:        0 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:    7
  9471 ;; This function calls:
  9472 ;;		_CC2500_WriteCommand
  9473 ;; This function is called by:
  9474 ;;		_CC2500_PowerOnInitial
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           
  9479                           ;psect for function _CC2500_SIDLEMode
  9480  1A9B                     _CC2500_SIDLEMode:	
  9481                           
  9482                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
  9483                           
  9484                           ;incstack = 0
  9485                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9486  1A9B  3036               	movlw	54
  9487  1A9C  319D  25D9         	fcall	_CC2500_WriteCommand
  9488  1A9E  0008               	return
  9489  1A9F                     __end_of_CC2500_SIDLEMode:	
  9490                           
  9491                           	psect	text46
  9492  0802                     __ptext46:	
  9493 ;; *************** function _CC2500_PowerRST *****************
  9494 ;; Defined at:
  9495 ;;		line 137 in file "../src/CC2500_B1.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;		None
  9498 ;; Auto vars:     Size  Location     Type
  9499 ;;		None
  9500 ;; Return value:  Size  Location     Type
  9501 ;;		None               void
  9502 ;; Registers used:
  9503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9504 ;; Tracked objects:
  9505 ;;		On entry : 0/0
  9506 ;;		On exit  : 0/0
  9507 ;;		Unchanged: 0/0
  9508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;Total ram usage:        1 bytes
  9514 ;; Hardware stack levels used:    1
  9515 ;; Hardware stack levels required when called:    6
  9516 ;; This function calls:
  9517 ;;		_CC2500_WriteByte
  9518 ;;		_DelayTime_1us
  9519 ;;		_RF_Timeout_Counter
  9520 ;;		_setRF_TimeoutCleared
  9521 ;; This function is called by:
  9522 ;;		_CC2500_PowerOnInitial
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _CC2500_PowerRST
  9528  0802                     _CC2500_PowerRST:	
  9529                           
  9530                           ;CC2500_B1.c: 138: RC1 = 0;
  9531                           
  9532                           ;incstack = 0
  9533                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9534  0802  0020               	movlb	0	; select bank0
  9535  0803  108E               	bcf	14,1	;volatile
  9536                           
  9537                           ;CC2500_B1.c: 139: RC0 = 0;
  9538  0804  100E               	bcf	14,0	;volatile
  9539                           
  9540                           ;CC2500_B1.c: 140: RC4 = 1;
  9541  0805  160E               	bsf	14,4	;volatile
  9542                           
  9543                           ;CC2500_B1.c: 141: DelayTime_1us(10);
  9544  0806  300A               	movlw	10
  9545  0807  00A0               	movwf	DelayTime_1us@count
  9546  0808  3000               	movlw	0
  9547  0809  00A1               	movwf	DelayTime_1us@count+1
  9548  080A  319F  27B2  3188   	fcall	_DelayTime_1us
  9549                           
  9550                           ;CC2500_B1.c: 142: RC4 = 0;
  9551  080D  0020               	movlb	0	; select bank0
  9552  080E  120E               	bcf	14,4	;volatile
  9553                           
  9554                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9555  080F  300A               	movlw	10
  9556  0810  00A0               	movwf	DelayTime_1us@count
  9557  0811  3000               	movlw	0
  9558  0812  00A1               	movwf	DelayTime_1us@count+1
  9559  0813  319F  27B2  3188   	fcall	_DelayTime_1us
  9560                           
  9561                           ;CC2500_B1.c: 144: RC4 = 1;
  9562  0816  0020               	movlb	0	; select bank0
  9563  0817  160E               	bsf	14,4	;volatile
  9564                           
  9565                           ;CC2500_B1.c: 145: DelayTime_1us(40);
  9566  0818  3028               	movlw	40
  9567  0819  00A0               	movwf	DelayTime_1us@count
  9568  081A  3000               	movlw	0
  9569  081B  00A1               	movwf	DelayTime_1us@count+1
  9570  081C  319F  27B2  3188   	fcall	_DelayTime_1us
  9571                           
  9572                           ;CC2500_B1.c: 146: RC4 = 0;
  9573  081F  0020               	movlb	0	; select bank0
  9574  0820  120E               	bcf	14,4	;volatile
  9575                           
  9576                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
  9577  0821  3030               	movlw	48
  9578  0822  00A6               	movwf	??_CC2500_PowerRST
  9579  0823  0826               	movf	??_CC2500_PowerRST,w
  9580  0824  0021               	movlb	1	; select bank1
  9581  0825  00CC               	movwf	_SPI0Buffer^(0+128)
  9582                           
  9583                           ;CC2500_B1.c: 148: while (RC2 == 1 && RF1.Timeout == 0) {
  9584  0826  282A               	goto	l9393
  9585  0827                     l9391:	
  9586                           
  9587                           ;CC2500_B1.c: 149: RF_Timeout_Counter();
  9588  0827  319D  253A  3188   	fcall	_RF_Timeout_Counter
  9589  082A                     l9393:	
  9590  082A  0020               	movlb	0	; select bank0
  9591  082B  1D0E               	btfss	14,2	;volatile
  9592  082C  2830               	goto	l9397
  9593  082D  0021               	movlb	1	; select bank1
  9594  082E  1F21               	btfss	(_RF1^(0+128)+1),6
  9595  082F  2827               	goto	l9391
  9596  0830                     l9397:	
  9597                           
  9598                           ;CC2500_B1.c: 150: };
  9599                           ;CC2500_B1.c: 151: setRF_TimeoutCleared();
  9600  0830  319A  228F  3188   	fcall	_setRF_TimeoutCleared
  9601                           
  9602                           ;CC2500_B1.c: 152: CC2500_WriteByte();
  9603  0833  319D  25A6  3188   	fcall	_CC2500_WriteByte
  9604                           
  9605                           ;CC2500_B1.c: 153: while (RC2 == 1 && RF1.Timeout == 0) {
  9606  0836  283A               	goto	l9403
  9607  0837                     l9401:	
  9608                           
  9609                           ;CC2500_B1.c: 154: RF_Timeout_Counter();
  9610  0837  319D  253A  3188   	fcall	_RF_Timeout_Counter
  9611  083A                     l9403:	
  9612  083A  0020               	movlb	0	; select bank0
  9613  083B  1D0E               	btfss	14,2	;volatile
  9614  083C  2840               	goto	l9407
  9615  083D  0021               	movlb	1	; select bank1
  9616  083E  1F21               	btfss	(_RF1^(0+128)+1),6
  9617  083F  2837               	goto	l9401
  9618  0840                     l9407:	
  9619                           
  9620                           ;CC2500_B1.c: 155: };
  9621                           ;CC2500_B1.c: 156: setRF_TimeoutCleared();
  9622  0840  319A  228F         	fcall	_setRF_TimeoutCleared
  9623                           
  9624                           ;CC2500_B1.c: 157: RC0 = 0;
  9625  0842  0020               	movlb	0	; select bank0
  9626  0843  100E               	bcf	14,0	;volatile
  9627                           
  9628                           ;CC2500_B1.c: 158: RC4 = 1;
  9629  0844  160E               	bsf	14,4	;volatile
  9630  0845  0008               	return
  9631  0846                     __end_of_CC2500_PowerRST:	
  9632                           
  9633                           	psect	text47
  9634  1091                     __ptext47:	
  9635 ;; *************** function _CC2500_InitSetREG *****************
  9636 ;; Defined at:
  9637 ;;		line 164 in file "../src/CC2500_B1.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;		None
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9642 ;;  temp2           1    7[BANK0 ] unsigned char 
  9643 ;;  temp1           1    6[BANK0 ] unsigned char 
  9644 ;; Return value:  Size  Location     Type
  9645 ;;		None               void
  9646 ;; Registers used:
  9647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;Total ram usage:        4 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    7
  9660 ;; This function calls:
  9661 ;;		_CC2500_WriteREG
  9662 ;; This function is called by:
  9663 ;;		_CC2500_PowerOnInitial
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _CC2500_InitSetREG
  9669  1091                     _CC2500_InitSetREG:	
  9670                           
  9671                           ;CC2500_B1.c: 165: unsigned char loop_c;
  9672                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
  9673                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
  9674                           
  9675                           ;incstack = 0
  9676                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9677  1091  0020               	movlb	0	; select bank0
  9678  1092  01A8               	clrf	CC2500_InitSetREG@loop_c
  9679  1093                     L5:	
  9680  1093  302F               	movlw	47
  9681  1094  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9682  1095  1803               	btfsc	3,0
  9683  1096  0008               	return
  9684                           
  9685                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
  9686  1097  0828               	movf	CC2500_InitSetREG@loop_c,w
  9687  1098  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9688  1099  0084               	movwf	4
  9689  109A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9690  109B  1803               	skipnc
  9691  109C  3E01               	addlw	1
  9692  109D  0085               	movwf	5
  9693  109E  0800               	movf	0,w	;code access
  9694  109F  00A5               	movwf	??_CC2500_InitSetREG
  9695  10A0  0825               	movf	??_CC2500_InitSetREG,w
  9696  10A1  00A6               	movwf	CC2500_InitSetREG@temp1
  9697                           
  9698                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
  9699  10A2  0828               	movf	CC2500_InitSetREG@loop_c,w
  9700  10A3  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9701  10A4  0084               	movwf	4
  9702  10A5  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9703  10A6  1803               	skipnc
  9704  10A7  3E01               	addlw	1
  9705  10A8  0085               	movwf	5
  9706  10A9  0800               	movf	0,w	;code access
  9707  10AA  00A5               	movwf	??_CC2500_InitSetREG
  9708  10AB  0825               	movf	??_CC2500_InitSetREG,w
  9709  10AC  00A7               	movwf	CC2500_InitSetREG@temp2
  9710                           
  9711                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
  9712  10AD  0827               	movf	CC2500_InitSetREG@temp2,w
  9713  10AE  00A5               	movwf	??_CC2500_InitSetREG
  9714  10AF  0825               	movf	??_CC2500_InitSetREG,w
  9715  10B0  00A2               	movwf	CC2500_WriteREG@value
  9716  10B1  0826               	movf	CC2500_InitSetREG@temp1,w
  9717  10B2  319F  2746  3190   	fcall	_CC2500_WriteREG
  9718  10B5  3001               	movlw	1
  9719  10B6  0020               	movlb	0	; select bank0
  9720  10B7  00A5               	movwf	??_CC2500_InitSetREG
  9721  10B8  0825               	movf	??_CC2500_InitSetREG,w
  9722  10B9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9723  10BA  2893               	goto	L5
  9724  10BB                     __end_of_CC2500_InitSetREG:	
  9725                           
  9726                           	psect	text48
  9727  1E65                     __ptext48:	
  9728 ;; *************** function _CC2500_InitPATable *****************
  9729 ;; Defined at:
  9730 ;;		line 179 in file "../src/CC2500_B1.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9735 ;;  temp            1    6[BANK0 ] unsigned char 
  9736 ;; Return value:  Size  Location     Type
  9737 ;;		None               void
  9738 ;; Registers used:
  9739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;Total ram usage:        3 bytes
  9750 ;; Hardware stack levels used:    1
  9751 ;; Hardware stack levels required when called:    7
  9752 ;; This function calls:
  9753 ;;		_CC2500_WriteREG
  9754 ;; This function is called by:
  9755 ;;		_CC2500_PowerOnInitial
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function _CC2500_InitPATable
  9761  1E65                     _CC2500_InitPATable:	
  9762                           
  9763                           ;CC2500_B1.c: 180: unsigned char loop_d;
  9764                           ;CC2500_B1.c: 181: unsigned char temp;
  9765                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9769  1E65  0020               	movlb	0	; select bank0
  9770  1E66  01A7               	clrf	CC2500_InitPATable@loop_d
  9771  1E67                     L6:	
  9772  1E67  3008               	movlw	8
  9773  1E68  0227               	subwf	CC2500_InitPATable@loop_d,w
  9774  1E69  1803               	btfsc	3,0
  9775  1E6A  0008               	return
  9776                           
  9777                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
  9778  1E6B  0827               	movf	CC2500_InitPATable@loop_d,w
  9779  1E6C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9780  1E6D  0084               	movwf	4
  9781  1E6E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9782  1E6F  1803               	skipnc
  9783  1E70  3E01               	addlw	1
  9784  1E71  0085               	movwf	5
  9785  1E72  0800               	movf	0,w	;code access
  9786  1E73  00A5               	movwf	??_CC2500_InitPATable
  9787  1E74  0825               	movf	??_CC2500_InitPATable,w
  9788  1E75  00A6               	movwf	CC2500_InitPATable@temp
  9789                           
  9790                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
  9791  1E76  0826               	movf	CC2500_InitPATable@temp,w
  9792  1E77  00A5               	movwf	??_CC2500_InitPATable
  9793  1E78  0825               	movf	??_CC2500_InitPATable,w
  9794  1E79  00A2               	movwf	CC2500_WriteREG@value
  9795  1E7A  303E               	movlw	62
  9796  1E7B  319F  2746  319E   	fcall	_CC2500_WriteREG
  9797  1E7E  3001               	movlw	1
  9798  1E7F  0020               	movlb	0	; select bank0
  9799  1E80  00A5               	movwf	??_CC2500_InitPATable
  9800  1E81  0825               	movf	??_CC2500_InitPATable,w
  9801  1E82  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9802  1E83  2E67               	goto	L6
  9803  1E84                     __end_of_CC2500_InitPATable:	
  9804                           
  9805                           	psect	text49
  9806  1F46                     __ptext49:	
  9807 ;; *************** function _CC2500_WriteREG *****************
  9808 ;; Defined at:
  9809 ;;		line 256 in file "../src/CC2500_B1.c"
  9810 ;; Parameters:    Size  Location     Type
  9811 ;;  w_addr          1    wreg     unsigned char 
  9812 ;;  value           1    2[BANK0 ] unsigned char 
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9815 ;; Return value:  Size  Location     Type
  9816 ;;		None               void
  9817 ;; Registers used:
  9818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9824 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;Total ram usage:        3 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    6
  9831 ;; This function calls:
  9832 ;;		_CC2500_WriteByte
  9833 ;;		_RF_Timeout_Counter
  9834 ;;		_setRF_TimeoutCleared
  9835 ;; This function is called by:
  9836 ;;		_CC2500_InitSetREG
  9837 ;;		_CC2500_InitPATable
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           
  9842                           ;psect for function _CC2500_WriteREG
  9843  1F46                     _CC2500_WriteREG:	
  9844                           
  9845                           ;incstack = 0
  9846                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9847                           ;CC2500_WriteREG@w_addr stored from wreg
  9848  1F46  0020               	movlb	0	; select bank0
  9849  1F47  00A4               	movwf	CC2500_WriteREG@w_addr
  9850                           
  9851                           ;CC2500_B1.c: 257: RC4 = 0;
  9852  1F48  120E               	bcf	14,4	;volatile
  9853                           
  9854                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
  9855  1F49  0824               	movf	CC2500_WriteREG@w_addr,w
  9856  1F4A  00A3               	movwf	??_CC2500_WriteREG
  9857  1F4B  0823               	movf	??_CC2500_WriteREG,w
  9858  1F4C  0021               	movlb	1	; select bank1
  9859  1F4D  00CC               	movwf	_SPI0Buffer^(0+128)
  9860                           
  9861                           ;CC2500_B1.c: 259: while (RC2 == 1 && RF1.Timeout == 0) {
  9862  1F4E  2F52               	goto	l9273
  9863  1F4F                     l9271:	
  9864                           
  9865                           ;CC2500_B1.c: 260: RF_Timeout_Counter();
  9866  1F4F  319D  253A  319F   	fcall	_RF_Timeout_Counter
  9867  1F52                     l9273:	
  9868  1F52  0020               	movlb	0	; select bank0
  9869  1F53  1D0E               	btfss	14,2	;volatile
  9870  1F54  2F58               	goto	l9277
  9871  1F55  0021               	movlb	1	; select bank1
  9872  1F56  1F21               	btfss	(_RF1^(0+128)+1),6
  9873  1F57  2F4F               	goto	l9271
  9874  1F58                     l9277:	
  9875                           
  9876                           ;CC2500_B1.c: 261: };
  9877                           ;CC2500_B1.c: 262: setRF_TimeoutCleared();
  9878  1F58  319A  228F  319F   	fcall	_setRF_TimeoutCleared
  9879                           
  9880                           ;CC2500_B1.c: 264: CC2500_WriteByte();
  9881  1F5B  319D  25A6  319F   	fcall	_CC2500_WriteByte
  9882                           
  9883                           ;CC2500_B1.c: 265: SPI0Buffer = value;
  9884  1F5E  0020               	movlb	0	; select bank0
  9885  1F5F  0822               	movf	CC2500_WriteREG@value,w
  9886  1F60  00A3               	movwf	??_CC2500_WriteREG
  9887  1F61  0823               	movf	??_CC2500_WriteREG,w
  9888  1F62  0021               	movlb	1	; select bank1
  9889  1F63  00CC               	movwf	_SPI0Buffer^(0+128)
  9890                           
  9891                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9892  1F64  319D  25A6         	fcall	_CC2500_WriteByte
  9893                           
  9894                           ;CC2500_B1.c: 267: RC4 = 1;
  9895  1F66  0020               	movlb	0	; select bank0
  9896  1F67  160E               	bsf	14,4	;volatile
  9897  1F68  0008               	return
  9898  1F69                     __end_of_CC2500_WriteREG:	
  9899                           
  9900                           	psect	text50
  9901  1B70                     __ptext50:	
  9902 ;; *************** function _CC2500_FrequencyCabr *****************
  9903 ;; Defined at:
  9904 ;;		line 206 in file "../src/CC2500_B1.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;		None
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;		None
  9909 ;; Return value:  Size  Location     Type
  9910 ;;		None               void
  9911 ;; Registers used:
  9912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;Total ram usage:        0 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; Hardware stack levels required when called:    7
  9925 ;; This function calls:
  9926 ;;		_CC2500_WriteCommand
  9927 ;;		_DelayTime_1us
  9928 ;; This function is called by:
  9929 ;;		_CC2500_PowerOnInitial
  9930 ;; This function uses a non-reentrant model
  9931 ;;
  9932                           
  9933                           
  9934                           ;psect for function _CC2500_FrequencyCabr
  9935  1B70                     _CC2500_FrequencyCabr:	
  9936                           
  9937                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9941  1B70  3033               	movlw	51
  9942  1B71  319D  25D9  319B   	fcall	_CC2500_WriteCommand
  9943                           
  9944                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
  9945  1B74  30E8               	movlw	232
  9946  1B75  0020               	movlb	0	; select bank0
  9947  1B76  00A0               	movwf	DelayTime_1us@count
  9948  1B77  3003               	movlw	3
  9949  1B78  00A1               	movwf	DelayTime_1us@count+1
  9950  1B79  319F  27B2         	fcall	_DelayTime_1us
  9951  1B7B  0008               	return
  9952  1B7C                     __end_of_CC2500_FrequencyCabr:	
  9953                           
  9954                           	psect	text51
  9955  1FB2                     __ptext51:	
  9956 ;; *************** function _DelayTime_1us *****************
  9957 ;; Defined at:
  9958 ;;		line 325 in file "../src/CC2500_B1.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  count           2    0[BANK0 ] int 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;  j               2    4[BANK0 ] unsigned int 
  9963 ;;  i               2    2[BANK0 ] unsigned int 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;		None               void
  9966 ;; Registers used:
  9967 ;;		wreg, status,2
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        6 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    5
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_CC2500_PowerRST
  9984 ;;		_CC2500_FrequencyCabr
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           
  9989                           ;psect for function _DelayTime_1us
  9990  1FB2                     _DelayTime_1us:	
  9991                           
  9992                           ;CC2500_B1.c: 326: unsigned int i, j;
  9993                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9997  1FB2  3001               	movlw	1
  9998  1FB3  0020               	movlb	0	; select bank0
  9999  1FB4  00A2               	movwf	DelayTime_1us@i
 10000  1FB5  3000               	movlw	0
 10001  1FB6  00A3               	movwf	DelayTime_1us@i+1
 10002  1FB7                     l372:	
 10003  1FB7  0821               	movf	DelayTime_1us@count+1,w
 10004  1FB8  0223               	subwf	DelayTime_1us@i+1,w
 10005  1FB9  1D03               	skipz
 10006  1FBA  2FBD               	goto	u10125
 10007  1FBB  0820               	movf	DelayTime_1us@count,w
 10008  1FBC  0222               	subwf	DelayTime_1us@i,w
 10009  1FBD                     u10125:	
 10010  1FBD  1803               	btfsc	3,0
 10011  1FBE  0008               	return
 10012                           
 10013                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 10014  1FBF  01A4               	clrf	DelayTime_1us@j
 10015  1FC0  01A5               	clrf	DelayTime_1us@j+1
 10016  1FC1  3000               	movlw	0
 10017  1FC2  0225               	subwf	DelayTime_1us@j+1,w
 10018  1FC3  3002               	movlw	2
 10019  1FC4  1903               	skipnz
 10020  1FC5  0224               	subwf	DelayTime_1us@j,w
 10021  1FC6  1803               	btfsc	3,0
 10022  1FC7  2FD3               	goto	l9265
 10023  1FC8                     l9263:	
 10024  1FC8  3001               	movlw	1
 10025  1FC9  07A4               	addwf	DelayTime_1us@j,f
 10026  1FCA  3000               	movlw	0
 10027  1FCB  3DA5               	addwfc	DelayTime_1us@j+1,f
 10028  1FCC  3000               	movlw	0
 10029  1FCD  0225               	subwf	DelayTime_1us@j+1,w
 10030  1FCE  3002               	movlw	2
 10031  1FCF  1903               	skipnz
 10032  1FD0  0224               	subwf	DelayTime_1us@j,w
 10033  1FD1  1C03               	skipc
 10034  1FD2  2FC8               	goto	l9263
 10035  1FD3                     l9265:	
 10036  1FD3  3001               	movlw	1
 10037  1FD4  07A2               	addwf	DelayTime_1us@i,f
 10038  1FD5  3000               	movlw	0
 10039  1FD6  3DA3               	addwfc	DelayTime_1us@i+1,f
 10040  1FD7  2FB7               	goto	l372
 10041  1FD8                     __end_of_DelayTime_1us:	
 10042                           
 10043                           	psect	text52
 10044  1A97                     __ptext52:	
 10045 ;; *************** function _CC2500_ClearTXFIFO *****************
 10046 ;; Defined at:
 10047 ;;		line 192 in file "../src/CC2500_B1.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        0 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    7
 10068 ;; This function calls:
 10069 ;;		_CC2500_WriteCommand
 10070 ;; This function is called by:
 10071 ;;		_CC2500_PowerOnInitial
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _CC2500_ClearTXFIFO
 10077  1A97                     _CC2500_ClearTXFIFO:	
 10078                           
 10079                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 10080                           
 10081                           ;incstack = 0
 10082                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10083  1A97  303B               	movlw	59
 10084  1A98  319D  25D9         	fcall	_CC2500_WriteCommand
 10085  1A9A  0008               	return
 10086  1A9B                     __end_of_CC2500_ClearTXFIFO:	
 10087                           
 10088                           	psect	text53
 10089  1A93                     __ptext53:	
 10090 ;; *************** function _CC2500_ClearRXFIFO *****************
 10091 ;; Defined at:
 10092 ;;		line 199 in file "../src/CC2500_B1.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;		None
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;		None
 10097 ;; Return value:  Size  Location     Type
 10098 ;;		None               void
 10099 ;; Registers used:
 10100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : 0/0
 10104 ;;		Unchanged: 0/0
 10105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;Total ram usage:        0 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    7
 10113 ;; This function calls:
 10114 ;;		_CC2500_WriteCommand
 10115 ;; This function is called by:
 10116 ;;		_CC2500_PowerOnInitial
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           
 10121                           ;psect for function _CC2500_ClearRXFIFO
 10122  1A93                     _CC2500_ClearRXFIFO:	
 10123                           
 10124                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 10125                           
 10126                           ;incstack = 0
 10127                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10128  1A93  303A               	movlw	58
 10129  1A94  319D  25D9         	fcall	_CC2500_WriteCommand
 10130  1A96  0008               	return
 10131  1A97                     __end_of_CC2500_ClearRXFIFO:	
 10132                           
 10133                           	psect	text54
 10134  1DD9                     __ptext54:	
 10135 ;; *************** function _CC2500_WriteCommand *****************
 10136 ;; Defined at:
 10137 ;;		line 290 in file "../src/CC2500_B1.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  command         1    wreg     unsigned char 
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;  command         1    3[BANK0 ] unsigned char 
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        2 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    6
 10158 ;; This function calls:
 10159 ;;		_CC2500_WriteByte
 10160 ;;		_RF_Timeout_Counter
 10161 ;;		_setRF_TimeoutCleared
 10162 ;; This function is called by:
 10163 ;;		_CC2500_TxData
 10164 ;;		_CC2500_RxData
 10165 ;;		_CC2500_ClearTXFIFO
 10166 ;;		_CC2500_ClearRXFIFO
 10167 ;;		_CC2500_FrequencyCabr
 10168 ;;		_CC2500_SIDLEMode
 10169 ;;		_setRF_Main
 10170 ;;		_RF_RxDisable
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _CC2500_WriteCommand
 10176  1DD9                     _CC2500_WriteCommand:	
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10180                           ;CC2500_WriteCommand@command stored from wreg
 10181  1DD9  0020               	movlb	0	; select bank0
 10182  1DDA  00A3               	movwf	CC2500_WriteCommand@command
 10183                           
 10184                           ;CC2500_B1.c: 291: RC4 = 0;
 10185  1DDB  120E               	bcf	14,4	;volatile
 10186                           
 10187                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 10188  1DDC  0823               	movf	CC2500_WriteCommand@command,w
 10189  1DDD  00A2               	movwf	??_CC2500_WriteCommand
 10190  1DDE  0822               	movf	??_CC2500_WriteCommand,w
 10191  1DDF  0021               	movlb	1	; select bank1
 10192  1DE0  00CC               	movwf	_SPI0Buffer^(0+128)
 10193                           
 10194                           ;CC2500_B1.c: 294: while (RC2 == 1 && RF1.Timeout == 0) {
 10195  1DE1  2DE5               	goto	l9227
 10196  1DE2                     l9225:	
 10197                           
 10198                           ;CC2500_B1.c: 295: RF_Timeout_Counter();
 10199  1DE2  319D  253A  319D   	fcall	_RF_Timeout_Counter
 10200  1DE5                     l9227:	
 10201  1DE5  0020               	movlb	0	; select bank0
 10202  1DE6  1D0E               	btfss	14,2	;volatile
 10203  1DE7  2DEB               	goto	l9231
 10204  1DE8  0021               	movlb	1	; select bank1
 10205  1DE9  1F21               	btfss	(_RF1^(0+128)+1),6
 10206  1DEA  2DE2               	goto	l9225
 10207  1DEB                     l9231:	
 10208                           
 10209                           ;CC2500_B1.c: 296: };
 10210                           ;CC2500_B1.c: 297: setRF_TimeoutCleared();
 10211  1DEB  319A  228F  319D   	fcall	_setRF_TimeoutCleared
 10212                           
 10213                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 10214  1DEE  319D  25A6         	fcall	_CC2500_WriteByte
 10215                           
 10216                           ;CC2500_B1.c: 300: RC4 = 1;
 10217  1DF0  0020               	movlb	0	; select bank0
 10218  1DF1  160E               	bsf	14,4	;volatile
 10219  1DF2  0008               	return
 10220  1DF3                     __end_of_CC2500_WriteCommand:	
 10221                           
 10222                           	psect	text55
 10223  1A8F                     __ptext55:	
 10224 ;; *************** function _setRF_TimeoutCleared *****************
 10225 ;; Defined at:
 10226 ;;		line 169 in file "../src/RF_Control_B1.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;		None
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;		None               void
 10233 ;; Registers used:
 10234 ;;		status,2
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;Total ram usage:        0 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:    5
 10247 ;; This function calls:
 10248 ;;		Nothing
 10249 ;; This function is called by:
 10250 ;;		_CC2500_TxData
 10251 ;;		_CC2500_RxData
 10252 ;;		_CC2500_PowerRST
 10253 ;;		_CC2500_WriteREG
 10254 ;;		_CC2500_WriteCommand
 10255 ;;		_CC2500_ReadStatus
 10256 ;;		_CC2500_ReadREG
 10257 ;; This function uses a non-reentrant model
 10258 ;;
 10259                           
 10260                           
 10261                           ;psect for function _setRF_TimeoutCleared
 10262  1A8F                     _setRF_TimeoutCleared:	
 10263                           
 10264                           ;RF_Control_B1.c: 170: RF1.TimeoutCount = 0;
 10265                           
 10266                           ;incstack = 0
 10267                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10268  1A8F  0021               	movlb	1	; select bank1
 10269  1A90  01AC               	clrf	(_RF1^(0+128)+12)
 10270  1A91  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10271  1A92  0008               	return
 10272  1A93                     __end_of_setRF_TimeoutCleared:	
 10273                           
 10274                           	psect	text56
 10275  1D3A                     __ptext56:	
 10276 ;; *************** function _RF_Timeout_Counter *****************
 10277 ;; Defined at:
 10278 ;;		line 161 in file "../src/RF_Control_B1.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    5
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_CC2500_TxData
 10303 ;;		_CC2500_RxData
 10304 ;;		_CC2500_PowerRST
 10305 ;;		_CC2500_WriteREG
 10306 ;;		_CC2500_WriteCommand
 10307 ;;		_CC2500_ReadStatus
 10308 ;;		_CC2500_ReadREG
 10309 ;; This function uses a non-reentrant model
 10310 ;;
 10311                           
 10312                           
 10313                           ;psect for function _RF_Timeout_Counter
 10314  1D3A                     _RF_Timeout_Counter:	
 10315                           
 10316                           ;RF_Control_B1.c: 162: RF1.TimeoutCount++;
 10317                           
 10318                           ;incstack = 0
 10319                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10320  1D3A  3001               	movlw	1
 10321  1D3B  0021               	movlb	1	; select bank1
 10322  1D3C  07AC               	addwf	(_RF1^(0+128)+12),f
 10323  1D3D  3000               	movlw	0
 10324  1D3E  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
 10325                           
 10326                           ;RF_Control_B1.c: 163: if (RF1.TimeoutCount == 25000) {
 10327  1D3F  300C               	movlw	12
 10328  1D40  3EA0               	addlw	_RF1& (0+255)
 10329  1D41  0086               	movwf	6
 10330  1D42  0187               	clrf	7
 10331  1D43  3F40               	moviw [0]fsr1
 10332  1D44  3AA8               	xorlw	168
 10333  1D45  1D03               	skipz
 10334  1D46  2D49               	goto	u9835
 10335  1D47  3F41               	moviw [1]fsr1
 10336  1D48  3A61               	xorlw	97
 10337  1D49                     u9835:	
 10338  1D49  1D03               	skipz
 10339  1D4A  0008               	return
 10340                           
 10341                           ;RF_Control_B1.c: 164: RF1.TimeoutCount = 0;
 10342  1D4B  01AC               	clrf	(_RF1^(0+128)+12)
 10343  1D4C  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10344                           
 10345                           ;RF_Control_B1.c: 165: RF1.Timeout = 1;
 10346  1D4D  1721               	bsf	(_RF1^(0+128)+1),6
 10347  1D4E  0008               	return
 10348  1D4F                     __end_of_RF_Timeout_Counter:	
 10349                           
 10350                           	psect	text57
 10351  1DA6                     __ptext57:	
 10352 ;; *************** function _CC2500_WriteByte *****************
 10353 ;; Defined at:
 10354 ;;		line 224 in file "../src/CC2500_B1.c"
 10355 ;; Parameters:    Size  Location     Type
 10356 ;;		None
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;		None               void
 10361 ;; Registers used:
 10362 ;;		wreg, status,2, status,0
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;Total ram usage:        2 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    5
 10375 ;; This function calls:
 10376 ;;		Nothing
 10377 ;; This function is called by:
 10378 ;;		_CC2500_TxData
 10379 ;;		_CC2500_RxData
 10380 ;;		_CC2500_PowerRST
 10381 ;;		_CC2500_WriteREG
 10382 ;;		_CC2500_WriteCommand
 10383 ;;		_CC2500_ReadStatus
 10384 ;;		_CC2500_ReadREG
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _CC2500_WriteByte
 10390  1DA6                     _CC2500_WriteByte:	
 10391                           
 10392                           ;CC2500_B1.c: 225: unsigned char loop_a;
 10393                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 10394                           
 10395                           ;incstack = 0
 10396                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10397  1DA6  0020               	movlb	0	; select bank0
 10398  1DA7  01A1               	clrf	CC2500_WriteByte@loop_a
 10399  1DA8                     L7:	
 10400  1DA8  3008               	movlw	8
 10401  1DA9  0221               	subwf	CC2500_WriteByte@loop_a,w
 10402  1DAA  1803               	btfsc	3,0
 10403  1DAB  0008               	return
 10404                           
 10405                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 10406  1DAC  0021               	movlb	1	; select bank1
 10407  1DAD  1FCC               	btfss	_SPI0Buffer^(0+128),7
 10408  1DAE  2DB2               	goto	l328
 10409                           
 10410                           ;CC2500_B1.c: 228: RC0 = 1;
 10411  1DAF  0020               	movlb	0	; select bank0
 10412  1DB0  140E               	bsf	14,0	;volatile
 10413  1DB1  2DB4               	goto	l329
 10414  1DB2                     l328:	
 10415                           
 10416                           ;CC2500_B1.c: 229: else
 10417                           ;CC2500_B1.c: 230: RC0 = 0;
 10418  1DB2  0020               	movlb	0	; select bank0
 10419  1DB3  100E               	bcf	14,0	;volatile
 10420  1DB4                     l329:	
 10421                           
 10422                           ;CC2500_B1.c: 231: RC1 = 1;
 10423  1DB4  148E               	bsf	14,1	;volatile
 10424                           
 10425                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 10426  1DB5  1003               	clrc
 10427  1DB6  0021               	movlb	1	; select bank1
 10428  1DB7  0DCC               	rlf	_SPI0Buffer^(0+128),f
 10429                           
 10430                           ;CC2500_B1.c: 233: RC1 = 0;
 10431  1DB8  0020               	movlb	0	; select bank0
 10432  1DB9  108E               	bcf	14,1	;volatile
 10433  1DBA  3001               	movlw	1
 10434  1DBB  00A0               	movwf	??_CC2500_WriteByte
 10435  1DBC  0820               	movf	??_CC2500_WriteByte,w
 10436  1DBD  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10437  1DBE  2DA8               	goto	L7
 10438  1DBF                     __end_of_CC2500_WriteByte:	
 10439                           
 10440                           	psect	text58
 10441  1A7F                     __ptext58:	
 10442 ;; *************** function _RF_Initialization *****************
 10443 ;; Defined at:
 10444 ;;		line 9 in file "../src/RF_Control_B1.c"
 10445 ;; Parameters:    Size  Location     Type
 10446 ;;		None
 10447 ;; Auto vars:     Size  Location     Type
 10448 ;;		None
 10449 ;; Return value:  Size  Location     Type
 10450 ;;		None               void
 10451 ;; Registers used:
 10452 ;;		wreg, status,2, status,0, pclath, cstack
 10453 ;; Tracked objects:
 10454 ;;		On entry : 0/0
 10455 ;;		On exit  : 0/0
 10456 ;;		Unchanged: 0/0
 10457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;Total ram usage:        0 bytes
 10463 ;; Hardware stack levels used:    1
 10464 ;; Hardware stack levels required when called:    6
 10465 ;; This function calls:
 10466 ;;		_setRF_Initialization
 10467 ;; This function is called by:
 10468 ;;		_main
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           
 10473                           ;psect for function _RF_Initialization
 10474  1A7F                     _RF_Initialization:	
 10475                           
 10476                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10477                           
 10478                           ;incstack = 0
 10479                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10480  1A7F  319B  2312         	fcall	_setRF_Initialization
 10481  1A81  0008               	return
 10482  1A82                     __end_of_RF_Initialization:	
 10483                           
 10484                           	psect	text59
 10485  1B12                     __ptext59:	
 10486 ;; *************** function _setRF_Initialization *****************
 10487 ;; Defined at:
 10488 ;;		line 43 in file "../src/RF_Control_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;		None
 10493 ;; Return value:  Size  Location     Type
 10494 ;;		None               void
 10495 ;; Registers used:
 10496 ;;		wreg
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        1 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_RF_Initialization
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _setRF_Initialization
 10518  1B12                     _setRF_Initialization:	
 10519                           
 10520                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in _setRF_Initialization: [wreg]
 10524  1B12  3015               	movlw	21
 10525  1B13  0020               	movlb	0	; select bank0
 10526  1B14  00A0               	movwf	??_setRF_Initialization
 10527  1B15  0820               	movf	??_setRF_Initialization,w
 10528  1B16  0021               	movlb	1	; select bank1
 10529  1B17  00CE               	movwf	_Tx_Length^(0+128)
 10530                           
 10531                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
 10532  1B18  3005               	movlw	5
 10533  1B19  00A7               	movwf	(_RF1^(0+128)+7)
 10534  1B1A  3000               	movlw	0
 10535  1B1B  00A8               	movwf	(_RF1^(0+128)+8)
 10536  1B1C  0008               	return
 10537  1B1D                     __end_of_setRF_Initialization:	
 10538                           
 10539                           	psect	text60
 10540  1C2B                     __ptext60:	
 10541 ;; *************** function _Mcu_Initialization *****************
 10542 ;; Defined at:
 10543 ;;		line 30 in file "../src/MCU_B1.c"
 10544 ;; Parameters:    Size  Location     Type
 10545 ;;		None
 10546 ;; Auto vars:     Size  Location     Type
 10547 ;;		None
 10548 ;; Return value:  Size  Location     Type
 10549 ;;		None               void
 10550 ;; Registers used:
 10551 ;;		wreg, status,2, status,0, pclath, cstack
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;Total ram usage:        0 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    6
 10564 ;; This function calls:
 10565 ;;		_ADC_Set
 10566 ;;		_Fosc_Set
 10567 ;;		_IOC_Set
 10568 ;;		_IO_Set
 10569 ;;		_TMR1_Set
 10570 ;;		_WDT_Set
 10571 ;; This function is called by:
 10572 ;;		_main
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           
 10577                           ;psect for function _Mcu_Initialization
 10578  1C2B                     _Mcu_Initialization:	
 10579                           
 10580                           ;MCU_B1.c: 32: Fosc_Set();
 10581                           
 10582                           ;incstack = 0
 10583                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10584  1C2B  319A  228B  319C   	fcall	_Fosc_Set
 10585                           
 10586                           ;MCU_B1.c: 34: IO_Set();
 10587  1C2E  319D  25F3  319C   	fcall	_IO_Set
 10588                           
 10589                           ;MCU_B1.c: 36: ;;
 10590                           ;MCU_B1.c: 38: TMR1_Set();
 10591  1C31  319B  2364  319C   	fcall	_TMR1_Set
 10592                           
 10593                           ;MCU_B1.c: 40: ADC_Set();
 10594  1C34  319A  22B6  319C   	fcall	_ADC_Set
 10595                           
 10596                           ;MCU_B1.c: 42: ;;
 10597                           ;MCU_B1.c: 44: ;;
 10598                           ;MCU_B1.c: 46: IOC_Set();
 10599  1C37  319B  2358  319C   	fcall	_IOC_Set
 10600                           
 10601                           ;MCU_B1.c: 48: ;;
 10602                           ;MCU_B1.c: 50: ;;
 10603                           ;MCU_B1.c: 52: WDT_Set();
 10604  1C3A  319B  2307         	fcall	_WDT_Set
 10605  1C3C  0008               	return
 10606  1C3D                     __end_of_Mcu_Initialization:	
 10607                           
 10608                           	psect	text61
 10609  1B07                     __ptext61:	
 10610 ;; *************** function _WDT_Set *****************
 10611 ;; Defined at:
 10612 ;;		line 1086 in file "../src/MCU_B1.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;		None
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;		None
 10617 ;; Return value:  Size  Location     Type
 10618 ;;		None               void
 10619 ;; Registers used:
 10620 ;;		wreg
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10629 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10630 ;;Total ram usage:        1 bytes
 10631 ;; Hardware stack levels used:    1
 10632 ;; Hardware stack levels required when called:    5
 10633 ;; This function calls:
 10634 ;;		Nothing
 10635 ;; This function is called by:
 10636 ;;		_Mcu_Initialization
 10637 ;; This function uses a non-reentrant model
 10638 ;;
 10639                           
 10640                           
 10641                           ;psect for function _WDT_Set
 10642  1B07                     _WDT_Set:	
 10643                           
 10644                           ;MCU_B1.c: 1093: WDTCON = 0b00010111;;
 10645                           
 10646                           ;incstack = 0
 10647                           ; Regs used in _WDT_Set: [wreg]
 10648  1B07  3017               	movlw	23
 10649  1B08  0021               	movlb	1	; select bank1
 10650  1B09  0097               	movwf	23	;volatile
 10651                           
 10652                           ;MCU_B1.c: 1095: WDT.Enable = 1;
 10653  1B0A  1444               	bsf	_WDT^(0+128),0
 10654                           
 10655                           ;MCU_B1.c: 1096: WDT.Timer = 10;
 10656  1B0B  300A               	movlw	10
 10657  1B0C  0020               	movlb	0	; select bank0
 10658  1B0D  00A0               	movwf	??_WDT_Set
 10659  1B0E  0820               	movf	??_WDT_Set,w
 10660  1B0F  0021               	movlb	1	; select bank1
 10661  1B10  00C5               	movwf	(_WDT^(0+128)+1)
 10662  1B11  0008               	return
 10663  1B12                     __end_of_WDT_Set:	
 10664                           
 10665                           	psect	text62
 10666  1B64                     __ptext62:	
 10667 ;; *************** function _TMR1_Set *****************
 10668 ;; Defined at:
 10669 ;;		line 200 in file "../src/MCU_B1.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;		None
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;		None
 10674 ;; Return value:  Size  Location     Type
 10675 ;;		None               void
 10676 ;; Registers used:
 10677 ;;		wreg
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;Total ram usage:        0 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    5
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_Mcu_Initialization
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _TMR1_Set
 10699  1B64                     _TMR1_Set:	
 10700                           
 10701                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
 10702                           
 10703                           ;incstack = 0
 10704                           ; Regs used in _TMR1_Set: [wreg]
 10705  1B64  3041               	movlw	65
 10706  1B65  0020               	movlb	0	; select bank0
 10707  1B66  0098               	movwf	24	;volatile
 10708                           
 10709                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
 10710  1B67  30FA               	movlw	250
 10711  1B68  0097               	movwf	23	;volatile
 10712                           
 10713                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
 10714  1B69  3038               	movlw	56
 10715  1B6A  0096               	movwf	22	;volatile
 10716                           
 10717                           ;MCU_B1.c: 204: TMR1IE = 1;
 10718  1B6B  0021               	movlb	1	; select bank1
 10719  1B6C  1411               	bsf	17,0	;volatile
 10720                           
 10721                           ;MCU_B1.c: 205: PEIE = 1;
 10722  1B6D  170B               	bsf	11,6	;volatile
 10723                           
 10724                           ;MCU_B1.c: 206: GIE = 1;
 10725  1B6E  178B               	bsf	11,7	;volatile
 10726  1B6F  0008               	return
 10727  1B70                     __end_of_TMR1_Set:	
 10728                           
 10729                           	psect	text63
 10730  1DF3                     __ptext63:	
 10731 ;; *************** function _IO_Set *****************
 10732 ;; Defined at:
 10733 ;;		line 60 in file "../src/MCU_B1.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;		None
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;		None
 10738 ;; Return value:  Size  Location     Type
 10739 ;;		None               void
 10740 ;; Registers used:
 10741 ;;		wreg, status,2
 10742 ;; Tracked objects:
 10743 ;;		On entry : 0/0
 10744 ;;		On exit  : 0/0
 10745 ;;		Unchanged: 0/0
 10746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;Total ram usage:        0 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:    5
 10754 ;; This function calls:
 10755 ;;		Nothing
 10756 ;; This function is called by:
 10757 ;;		_Mcu_Initialization
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           
 10762                           ;psect for function _IO_Set
 10763  1DF3                     _IO_Set:	
 10764                           
 10765                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10766                           
 10767                           ;incstack = 0
 10768                           ; Regs used in _IO_Set: [wreg+status,2]
 10769  1DF3  3077               	movlw	119
 10770  1DF4  0021               	movlb	1	; select bank1
 10771  1DF5  008C               	movwf	12	;volatile
 10772                           
 10773                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10774  1DF6  3007               	movlw	7
 10775  1DF7  008D               	movwf	13	;volatile
 10776                           
 10777                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10778  1DF8  300C               	movlw	12
 10779  1DF9  008E               	movwf	14	;volatile
 10780                           
 10781                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10782  1DFA  0022               	movlb	2	; select bank2
 10783  1DFB  018C               	clrf	12	;volatile
 10784                           
 10785                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10786  1DFC  3002               	movlw	2
 10787  1DFD  008D               	movwf	13	;volatile
 10788                           
 10789                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10790  1DFE  018E               	clrf	14	;volatile
 10791                           
 10792                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10793  1DFF  3022               	movlw	34
 10794  1E00  0023               	movlb	3	; select bank3
 10795  1E01  008C               	movwf	12	;volatile
 10796                           
 10797                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10798  1E02  018D               	clrf	13	;volatile
 10799                           
 10800                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10801  1E03  018E               	clrf	14	;volatile
 10802                           
 10803                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10804  1E04  3077               	movlw	119
 10805  1E05  0020               	movlb	0	; select bank0
 10806  1E06  008C               	movwf	12	;volatile
 10807                           
 10808                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10809  1E07  3007               	movlw	7
 10810  1E08  008D               	movwf	13	;volatile
 10811                           
 10812                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10813  1E09  300C               	movlw	12
 10814  1E0A  008E               	movwf	14	;volatile
 10815                           
 10816                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
 10817  1E0B  0024               	movlb	4	; select bank4
 10818  1E0C  018D               	clrf	13	;volatile
 10819  1E0D  0008               	return
 10820  1E0E                     __end_of_IO_Set:	
 10821                           
 10822                           	psect	text64
 10823  1B58                     __ptext64:	
 10824 ;; *************** function _IOC_Set *****************
 10825 ;; Defined at:
 10826 ;;		line 367 in file "../src/MCU_B1.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;		None
 10829 ;; Auto vars:     Size  Location     Type
 10830 ;;		None
 10831 ;; Return value:  Size  Location     Type
 10832 ;;		None               void
 10833 ;; Registers used:
 10834 ;;		wreg, status,2
 10835 ;; Tracked objects:
 10836 ;;		On entry : 0/0
 10837 ;;		On exit  : 0/0
 10838 ;;		Unchanged: 0/0
 10839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;Total ram usage:        0 bytes
 10845 ;; Hardware stack levels used:    1
 10846 ;; Hardware stack levels required when called:    5
 10847 ;; This function calls:
 10848 ;;		Nothing
 10849 ;; This function is called by:
 10850 ;;		_Mcu_Initialization
 10851 ;; This function uses a non-reentrant model
 10852 ;;
 10853                           
 10854                           
 10855                           ;psect for function _IOC_Set
 10856  1B58                     _IOC_Set:	
 10857                           
 10858                           ;MCU_B1.c: 368: WPUB2 = 0;
 10859                           
 10860                           ;incstack = 0
 10861                           ; Regs used in _IOC_Set: [wreg+status,2]
 10862  1B58  0024               	movlb	4	; select bank4
 10863  1B59  110D               	bcf	13,2	;volatile
 10864                           
 10865                           ;MCU_B1.c: 388: IOCBP = 0b00000100;
 10866  1B5A  3004               	movlw	4
 10867  1B5B  0027               	movlb	7	; select bank7
 10868  1B5C  0094               	movwf	20	;volatile
 10869                           
 10870                           ;MCU_B1.c: 389: IOCBN = 0b00000000;
 10871  1B5D  0195               	clrf	21	;volatile
 10872                           
 10873                           ;MCU_B1.c: 393: IOCBF = 0b00000000;
 10874  1B5E  0196               	clrf	22	;volatile
 10875                           
 10876                           ;MCU_B1.c: 395: IOCIE = 1;
 10877  1B5F  158B               	bsf	11,3	;volatile
 10878                           
 10879                           ;MCU_B1.c: 396: IOCIF = 0;
 10880  1B60  100B               	bcf	11,0	;volatile
 10881                           
 10882                           ;MCU_B1.c: 397: PEIE = 1;
 10883  1B61  170B               	bsf	11,6	;volatile
 10884                           
 10885                           ;MCU_B1.c: 398: GIE = 1;
 10886  1B62  178B               	bsf	11,7	;volatile
 10887  1B63  0008               	return
 10888  1B64                     __end_of_IOC_Set:	
 10889                           
 10890                           	psect	text65
 10891  1A8B                     __ptext65:	
 10892 ;; *************** function _Fosc_Set *****************
 10893 ;; Defined at:
 10894 ;;		line 56 in file "../src/MCU_B1.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;		None               void
 10901 ;; Registers used:
 10902 ;;		wreg
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        0 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    5
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_Mcu_Initialization
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _Fosc_Set
 10924  1A8B                     _Fosc_Set:	
 10925                           
 10926                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _Fosc_Set: [wreg]
 10930  1A8B  3078               	movlw	120
 10931  1A8C  0021               	movlb	1	; select bank1
 10932  1A8D  0099               	movwf	25	;volatile
 10933  1A8E  0008               	return
 10934  1A8F                     __end_of_Fosc_Set:	
 10935                           
 10936                           	psect	text66
 10937  1AB6                     __ptext66:	
 10938 ;; *************** function _ADC_Set *****************
 10939 ;; Defined at:
 10940 ;;		line 422 in file "../src/MCU_B1.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;		None
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;		None
 10945 ;; Return value:  Size  Location     Type
 10946 ;;		None               void
 10947 ;; Registers used:
 10948 ;;		wreg
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;Total ram usage:        0 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; Hardware stack levels required when called:    5
 10961 ;; This function calls:
 10962 ;;		Nothing
 10963 ;; This function is called by:
 10964 ;;		_Mcu_Initialization
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           
 10969                           ;psect for function _ADC_Set
 10970  1AB6                     _ADC_Set:	
 10971                           
 10972                           ;MCU_B1.c: 423: ADCON1 = 0xf3;
 10973                           
 10974                           ;incstack = 0
 10975                           ; Regs used in _ADC_Set: [wreg]
 10976  1AB6  30F3               	movlw	243
 10977  1AB7  0021               	movlb	1	; select bank1
 10978  1AB8  009E               	movwf	30	;volatile
 10979                           
 10980                           ;MCU_B1.c: 424: FVRCON = 0xc1;
 10981  1AB9  30C1               	movlw	193
 10982  1ABA  0022               	movlb	2	; select bank2
 10983  1ABB  0097               	movwf	23	;volatile
 10984  1ABC  0008               	return
 10985  1ABD                     __end_of_ADC_Set:	
 10986                           
 10987                           	psect	text67
 10988  004A                     __ptext67:	
 10989 ;; *************** function _Load_Main *****************
 10990 ;; Defined at:
 10991 ;;		line 39 in file "../src/OverLoad_B1.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  i               2   12[BANK0 ] int 
 10996 ;;  Load_Status     1   11[BANK0 ] unsigned char 
 10997 ;;  error           1   10[BANK0 ] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;		None               void
 11000 ;; Registers used:
 11001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;Total ram usage:        6 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    7
 11014 ;; This function calls:
 11015 ;;		___lwdiv
 11016 ;;		___wmul
 11017 ;;		_getAll_DimmerLights_AdjSw
 11018 ;;		_getDimmer_LoadGO
 11019 ;;		_getDimmer_Load_Status
 11020 ;;		_getMain_All_Error_Status
 11021 ;;		_getMain_LightsStatus
 11022 ;;		_getMain_Lights_Count
 11023 ;;		_setLoad_AH_AL_Restore
 11024 ;; This function is called by:
 11025 ;;		_main
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _Load_Main
 11031  004A                     _Load_Main:	
 11032                           
 11033                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11037  004A  3000               	movlw	0
 11038  004B  3191  2176  3180   	fcall	_getMain_All_Error_Status
 11039  004E  0020               	movlb	0	; select bank0
 11040  004F  00A8               	movwf	??_Load_Main
 11041  0050  0828               	movf	??_Load_Main,w
 11042  0051  00AA               	movwf	Load_Main@error
 11043                           
 11044                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 11045  0052  01AB               	clrf	Load_Main@Load_Status
 11046                           
 11047                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 11048  0053  0022               	movlb	2	; select bank2
 11049  0054  1C2E               	btfss	_Load^(0+256),0
 11050  0055  29F0               	goto	l1732
 11051                           
 11052                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
 11053  0056  319C  2475  3180   	fcall	_getMain_LightsStatus
 11054  0059  3800               	iorlw	0
 11055  005A  1D03               	skipz
 11056  005B  285E               	goto	l10803
 11057                           
 11058                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11059  005C  0022               	movlb	2	; select bank2
 11060  005D  287F               	goto	l10821
 11061  005E                     l10803:	
 11062                           ;OverLoad_B1.c: 66: } else {
 11063                           
 11064                           
 11065                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
 11066  005E  0020               	movlb	0	; select bank0
 11067  005F  08AA               	movf	Load_Main@error,f
 11068  0060  1D03               	skipz
 11069  0061  287C               	goto	l1735
 11070  0062  3190  20BB  3180   	fcall	_getAll_DimmerLights_AdjSw
 11071  0065  3800               	iorlw	0
 11072  0066  1D03               	skipz
 11073  0067  287C               	goto	l1735
 11074                           
 11075                           ;OverLoad_B1.c: 70: Load.GO = 1;
 11076  0068  0022               	movlb	2	; select bank2
 11077  0069  14AE               	bsf	_Load^(0+256),1
 11078                           
 11079                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
 11080  006A  319A  22DD  3180   	fcall	_getDimmer_LoadGO
 11081  006D  3A01               	xorlw	1
 11082  006E  1D03               	skipz
 11083  006F  2877               	goto	l1736
 11084                           
 11085                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
 11086  0070  0022               	movlb	2	; select bank2
 11087  0071  1DAE               	btfss	_Load^(0+256),3
 11088  0072  1BAE               	btfsc	_Load^(0+256),7
 11089  0073  2880               	goto	l1734
 11090                           
 11091                           ;OverLoad_B1.c: 74: Load.Run = 1;
 11092  0074  15AE               	bsf	_Load^(0+256),3
 11093                           
 11094                           ;OverLoad_B1.c: 75: Load.Count = 0;
 11095  0075  01D7               	clrf	(_Load^(0+256)+41)
 11096                           
 11097                           ;OverLoad_B1.c: 76: }
 11098                           ;OverLoad_B1.c: 77: } else {
 11099  0076  2880               	goto	l1734
 11100  0077                     l1736:	
 11101                           
 11102                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
 11103  0077  0022               	movlb	2	; select bank2
 11104  0078  1FAE               	btfss	_Load^(0+256),7
 11105  0079  2880               	goto	l1734
 11106                           
 11107                           ;OverLoad_B1.c: 79: Load.OK = 0;
 11108  007A  13AE               	bcf	_Load^(0+256),7
 11109                           
 11110                           ;OverLoad_B1.c: 80: }
 11111                           ;OverLoad_B1.c: 81: }
 11112                           ;OverLoad_B1.c: 82: } else {
 11113  007B  2880               	goto	l1734
 11114  007C                     l1735:	
 11115                           
 11116                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
 11117  007C  0022               	movlb	2	; select bank2
 11118  007D  1CAE               	btfss	_Load^(0+256),1
 11119  007E  2880               	goto	l1734
 11120  007F                     l10821:	
 11121                           
 11122                           ;OverLoad_B1.c: 84: Load.GO = 0;
 11123  007F  10AE               	bcf	_Load^(0+256),1
 11124  0080                     l1734:	
 11125                           
 11126                           ;OverLoad_B1.c: 85: }
 11127                           ;OverLoad_B1.c: 86: }
 11128                           ;OverLoad_B1.c: 88: }
 11129                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 11130  0080  1CAE               	btfss	_Load^(0+256),1
 11131  0081  29CC               	goto	l1742
 11132                           
 11133                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 11134  0082  152E               	bsf	_Load^(0+256),2
 11135                           
 11136                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 11137  0083  1E2E               	btfss	_Load^(0+256),4
 11138  0084  29CA               	goto	l1743
 11139                           
 11140                           ;OverLoad_B1.c: 95: Load.Time++;
 11141  0085  3001               	movlw	1
 11142  0086  07AF               	addwf	(_Load^(0+256)+1),f
 11143  0087  3000               	movlw	0
 11144  0088  3DB0               	addwfc	((_Load+1)^(0+256)+1),f
 11145                           
 11146                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
 11147  0089  3000               	movlw	0
 11148  008A  0230               	subwf	((_Load+1)^(0+256)+1),w
 11149  008B  3005               	movlw	5
 11150  008C  1903               	skipnz
 11151  008D  022F               	subwf	(_Load^(0+256)+1),w
 11152  008E  1C03               	skipc
 11153  008F  0008               	return
 11154                           
 11155                           ;OverLoad_B1.c: 97: Load.Time = 0;
 11156  0090  01AF               	clrf	(_Load^(0+256)+1)
 11157  0091  01B0               	clrf	((_Load+1)^(0+256)+1)
 11158                           
 11159                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 11160  0092  122E               	bcf	_Load^(0+256),4
 11161                           
 11162                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 11163  0093  3001               	movlw	1
 11164  0094  0020               	movlb	0	; select bank0
 11165  0095  00AC               	movwf	Load_Main@i
 11166  0096  3000               	movlw	0
 11167  0097  00AD               	movwf	Load_Main@i+1
 11168  0098  082D               	movf	Load_Main@i+1,w
 11169  0099  3A80               	xorlw	128
 11170  009A  00A8               	movwf	??_Load_Main
 11171  009B  3080               	movlw	128
 11172  009C  0228               	subwf	??_Load_Main,w
 11173  009D  1D03               	skipz
 11174  009E  28A1               	goto	u12665
 11175  009F  3004               	movlw	4
 11176  00A0  022C               	subwf	Load_Main@i,w
 11177  00A1                     u12665:	
 11178  00A1  1803               	btfsc	3,0
 11179  00A2  28D5               	goto	l10843
 11180  00A3                     l10837:	
 11181                           
 11182                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 11183  00A3  0020               	movlb	0	; select bank0
 11184  00A4  352C               	lslf	Load_Main@i,w
 11185  00A5  3E39               	addlw	(_Load+11)& (0+255)
 11186  00A6  0086               	movwf	6
 11187  00A7  3001               	movlw	1	; select bank2/3
 11188  00A8  0087               	movwf	7
 11189  00A9  3F40               	moviw [0]fsr1
 11190  00AA  00A8               	movwf	??_Load_Main
 11191  00AB  3F41               	moviw [1]fsr1
 11192  00AC  00A9               	movwf	??_Load_Main+1
 11193  00AD  0828               	movf	??_Load_Main,w
 11194  00AE  0022               	movlb	2	; select bank2
 11195  00AF  07B3               	addwf	(_Load^(0+256)+5),f
 11196  00B0  0020               	movlb	0	; select bank0
 11197  00B1  0829               	movf	??_Load_Main+1,w
 11198  00B2  0022               	movlb	2	; select bank2
 11199  00B3  3DB4               	addwfc	((_Load+1)^(0+256)+5),f
 11200                           
 11201                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 11202  00B4  0020               	movlb	0	; select bank0
 11203  00B5  352C               	lslf	Load_Main@i,w
 11204  00B6  3E43               	addlw	(_Load+21)& (0+255)
 11205  00B7  0086               	movwf	6
 11206  00B8  3001               	movlw	1	; select bank2/3
 11207  00B9  0087               	movwf	7
 11208  00BA  3F40               	moviw [0]fsr1
 11209  00BB  00A8               	movwf	??_Load_Main
 11210  00BC  3F41               	moviw [1]fsr1
 11211  00BD  00A9               	movwf	??_Load_Main+1
 11212  00BE  0828               	movf	??_Load_Main,w
 11213  00BF  0022               	movlb	2	; select bank2
 11214  00C0  07B5               	addwf	(_Load^(0+256)+7),f
 11215  00C1  0020               	movlb	0	; select bank0
 11216  00C2  0829               	movf	??_Load_Main+1,w
 11217  00C3  0022               	movlb	2	; select bank2
 11218  00C4  3DB6               	addwfc	((_Load+1)^(0+256)+7),f
 11219  00C5  3001               	movlw	1
 11220  00C6  0020               	movlb	0	; select bank0
 11221  00C7  07AC               	addwf	Load_Main@i,f
 11222  00C8  3000               	movlw	0
 11223  00C9  3DAD               	addwfc	Load_Main@i+1,f
 11224  00CA  082D               	movf	Load_Main@i+1,w
 11225  00CB  3A80               	xorlw	128
 11226  00CC  00A8               	movwf	??_Load_Main
 11227  00CD  3080               	movlw	128
 11228  00CE  0228               	subwf	??_Load_Main,w
 11229  00CF  1D03               	skipz
 11230  00D0  28D3               	goto	u12675
 11231  00D1  3004               	movlw	4
 11232  00D2  022C               	subwf	Load_Main@i,w
 11233  00D3                     u12675:	
 11234  00D3  1C03               	skipc
 11235  00D4  28A3               	goto	l10837
 11236  00D5                     l10843:	
 11237                           
 11238                           ;OverLoad_B1.c: 103: }
 11239                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 11240  00D5  3003               	movlw	3
 11241  00D6  0020               	movlb	0	; select bank0
 11242  00D7  00A0               	movwf	___lwdiv@divisor
 11243  00D8  3000               	movlw	0
 11244  00D9  00A1               	movwf	___lwdiv@divisor+1
 11245  00DA  0022               	movlb	2	; select bank2
 11246  00DB  0834               	movf	((_Load+1)^(0+256)+5),w
 11247  00DC  0020               	movlb	0	; select bank0
 11248  00DD  01A3               	clrf	___lwdiv@dividend+1
 11249  00DE  07A3               	addwf	___lwdiv@dividend+1,f
 11250  00DF  0022               	movlb	2	; select bank2
 11251  00E0  0833               	movf	(_Load^(0+256)+5),w
 11252  00E1  0020               	movlb	0	; select bank0
 11253  00E2  01A2               	clrf	___lwdiv@dividend
 11254  00E3  07A2               	addwf	___lwdiv@dividend,f
 11255  00E4  3192  2213  3180   	fcall	___lwdiv
 11256  00E7  0020               	movlb	0	; select bank0
 11257  00E8  0821               	movf	?___lwdiv+1,w
 11258  00E9  0022               	movlb	2	; select bank2
 11259  00EA  01B4               	clrf	((_Load+1)^(0+256)+5)
 11260  00EB  07B4               	addwf	((_Load+1)^(0+256)+5),f
 11261  00EC  0020               	movlb	0	; select bank0
 11262  00ED  0820               	movf	?___lwdiv,w
 11263  00EE  0022               	movlb	2	; select bank2
 11264  00EF  01B3               	clrf	(_Load^(0+256)+5)
 11265  00F0  07B3               	addwf	(_Load^(0+256)+5),f
 11266                           
 11267                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 11268  00F1  3003               	movlw	3
 11269  00F2  0020               	movlb	0	; select bank0
 11270  00F3  00A0               	movwf	___lwdiv@divisor
 11271  00F4  3000               	movlw	0
 11272  00F5  00A1               	movwf	___lwdiv@divisor+1
 11273  00F6  0022               	movlb	2	; select bank2
 11274  00F7  0836               	movf	((_Load+1)^(0+256)+7),w
 11275  00F8  0020               	movlb	0	; select bank0
 11276  00F9  01A3               	clrf	___lwdiv@dividend+1
 11277  00FA  07A3               	addwf	___lwdiv@dividend+1,f
 11278  00FB  0022               	movlb	2	; select bank2
 11279  00FC  0835               	movf	(_Load^(0+256)+7),w
 11280  00FD  0020               	movlb	0	; select bank0
 11281  00FE  01A2               	clrf	___lwdiv@dividend
 11282  00FF  07A2               	addwf	___lwdiv@dividend,f
 11283  0100  3192  2213  3180   	fcall	___lwdiv
 11284  0103  0020               	movlb	0	; select bank0
 11285  0104  0821               	movf	?___lwdiv+1,w
 11286  0105  0022               	movlb	2	; select bank2
 11287  0106  01B6               	clrf	((_Load+1)^(0+256)+7)
 11288  0107  07B6               	addwf	((_Load+1)^(0+256)+7),f
 11289  0108  0020               	movlb	0	; select bank0
 11290  0109  0820               	movf	?___lwdiv,w
 11291  010A  0022               	movlb	2	; select bank2
 11292  010B  01B5               	clrf	(_Load^(0+256)+7)
 11293  010C  07B5               	addwf	(_Load^(0+256)+7),f
 11294                           
 11295                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 11296  010D  319E  260E  3180   	fcall	_setLoad_AH_AL_Restore
 11297                           
 11298                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 11299  0110  0022               	movlb	2	; select bank2
 11300  0111  0836               	movf	((_Load+1)^(0+256)+7),w
 11301  0112  0234               	subwf	((_Load+1)^(0+256)+5),w
 11302  0113  1D03               	skipz
 11303  0114  2917               	goto	u12685
 11304  0115  0835               	movf	(_Load^(0+256)+7),w
 11305  0116  0233               	subwf	(_Load^(0+256)+5),w
 11306  0117                     u12685:	
 11307  0117  1C03               	skipc
 11308  0118  0008               	return
 11309                           
 11310                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 11311  0119  3005               	movlw	5
 11312  011A  3E2E               	addlw	_Load& (0+255)
 11313  011B  0086               	movwf	6
 11314  011C  3001               	movlw	1	; select bank2/3
 11315  011D  0087               	movwf	7
 11316  011E  0935               	comf	(_Load^(0+256)+7),w
 11317  011F  0020               	movlb	0	; select bank0
 11318  0120  00A8               	movwf	??_Load_Main
 11319  0121  0022               	movlb	2	; select bank2
 11320  0122  0936               	comf	((_Load+1)^(0+256)+7),w
 11321  0123  0020               	movlb	0	; select bank0
 11322  0124  00A9               	movwf	??_Load_Main+1
 11323  0125  0AA8               	incf	??_Load_Main,f
 11324  0126  1903               	skipnz
 11325  0127  0AA9               	incf	??_Load_Main+1,f
 11326  0128  3F40               	moviw [0]fsr1
 11327  0129  0728               	addwf	??_Load_Main,w
 11328  012A  0022               	movlb	2	; select bank2
 11329  012B  00CD               	movwf	(_Load^(0+256)+31)
 11330  012C  3F41               	moviw [1]fsr1
 11331  012D  0020               	movlb	0	; select bank0
 11332  012E  3D29               	addwfc	??_Load_Main+1,w
 11333  012F  0022               	movlb	2	; select bank2
 11334  0130  00CE               	movwf	(_Load^(0+256)+32)
 11335                           
 11336                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 11337  0131  01B3               	clrf	(_Load^(0+256)+5)
 11338  0132  01B4               	clrf	((_Load+1)^(0+256)+5)
 11339                           
 11340                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 11341  0133  01B5               	clrf	(_Load^(0+256)+7)
 11342  0134  01B6               	clrf	((_Load+1)^(0+256)+7)
 11343                           
 11344                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 11345  0135  1DAE               	btfss	_Load^(0+256),3
 11346  0136  2996               	goto	l10883
 11347                           
 11348                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 11349  0137  3002               	movlw	2
 11350  0138  0257               	subwf	(_Load^(0+256)+41),w
 11351  0139  1803               	skipnc
 11352  013A  2996               	goto	l10883
 11353                           
 11354                           ;OverLoad_B1.c: 115: Load.Count++;
 11355  013B  3001               	movlw	1
 11356  013C  0020               	movlb	0	; select bank0
 11357  013D  00A8               	movwf	??_Load_Main
 11358  013E  0828               	movf	??_Load_Main,w
 11359  013F  0022               	movlb	2	; select bank2
 11360  0140  07D7               	addwf	(_Load^(0+256)+41),f
 11361                           
 11362                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 11363  0141  319A  22E5  3180   	fcall	_getDimmer_Load_Status
 11364  0144  0020               	movlb	0	; select bank0
 11365  0145  00A8               	movwf	??_Load_Main
 11366  0146  0828               	movf	??_Load_Main,w
 11367  0147  00AB               	movwf	Load_Main@Load_Status
 11368                           
 11369                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 11370  0148  319C  24E9  3180   	fcall	_getMain_Lights_Count
 11371  014B  0020               	movlb	0	; select bank0
 11372  014C  00A8               	movwf	??_Load_Main
 11373  014D  0828               	movf	??_Load_Main,w
 11374  014E  0022               	movlb	2	; select bank2
 11375  014F  00DA               	movwf	(_Load^(0+256)+44)
 11376                           
 11377                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 11378  0150  0857               	movf	(_Load^(0+256)+41),w
 11379  0151  3A01               	xorlw	1
 11380  0152  1D03               	skipz
 11381  0153  295E               	goto	l10869
 11382                           
 11383                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 11384  0154  3002               	movlw	2
 11385  0155  0020               	movlb	0	; select bank0
 11386  0156  00A8               	movwf	??_Load_Main
 11387  0157  0828               	movf	??_Load_Main,w
 11388  0158  0022               	movlb	2	; select bank2
 11389  0159  00D9               	movwf	(_Load^(0+256)+43)
 11390                           
 11391                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 11392  015A  30E8               	movlw	232
 11393  015B  00D3               	movwf	(_Load^(0+256)+37)
 11394  015C  3003               	movlw	3
 11395  015D  2969               	goto	L8
 11396  015E                     l10869:	
 11397                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 11398                           
 11399  015E  0857               	movf	(_Load^(0+256)+41),w
 11400  015F  3A02               	xorlw	2
 11401  0160  1D03               	skipz
 11402  0161  2996               	goto	l10883
 11403                           
 11404                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 11405  0162  085A               	movf	(_Load^(0+256)+44),w
 11406  0163  3A01               	xorlw	1
 11407  0164  1D03               	skipz
 11408  0165  296B               	goto	l10875
 11409                           
 11410                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 11411  0166  3037               	movlw	55
 11412  0167  00D3               	movwf	(_Load^(0+256)+37)
 11413  0168  3000               	movlw	0
 11414  0169                     L8:	
 11415  0169  00D4               	movwf	(_Load^(0+256)+38)
 11416                           
 11417                           ;OverLoad_B1.c: 124: } else {
 11418  016A  2996               	goto	l10883
 11419  016B                     l10875:	
 11420                           
 11421                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 11422  016B  0020               	movlb	0	; select bank0
 11423  016C  08AB               	movf	Load_Main@Load_Status,f
 11424  016D  1D03               	skipz
 11425  016E  298A               	goto	l10879
 11426                           
 11427                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 11428  016F  0022               	movlb	2	; select bank2
 11429  0170  085A               	movf	(_Load^(0+256)+44),w
 11430  0171  0020               	movlb	0	; select bank0
 11431  0172  00A8               	movwf	??_Load_Main
 11432  0173  01A9               	clrf	??_Load_Main+1
 11433  0174  0828               	movf	??_Load_Main,w
 11434  0175  00A0               	movwf	___wmul@multiplier
 11435  0176  0829               	movf	??_Load_Main+1,w
 11436  0177  00A1               	movwf	___wmul@multiplier+1
 11437  0178  3037               	movlw	55
 11438  0179  00A2               	movwf	___wmul@multiplicand
 11439  017A  3000               	movlw	0
 11440  017B  00A3               	movwf	___wmul@multiplicand+1
 11441  017C  319E  2647  3180   	fcall	___wmul
 11442  017F  0020               	movlb	0	; select bank0
 11443  0180  0821               	movf	?___wmul+1,w
 11444  0181  0022               	movlb	2	; select bank2
 11445  0182  01D4               	clrf	((_Load+1)^(0+256)+37)
 11446  0183  07D4               	addwf	((_Load+1)^(0+256)+37),f
 11447  0184  0020               	movlb	0	; select bank0
 11448  0185  0820               	movf	?___wmul,w
 11449  0186  0022               	movlb	2	; select bank2
 11450  0187  01D3               	clrf	(_Load^(0+256)+37)
 11451  0188  07D3               	addwf	(_Load^(0+256)+37),f
 11452                           
 11453                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 11454  0189  2996               	goto	l10883
 11455  018A                     l10879:	
 11456  018A  0020               	movlb	0	; select bank0
 11457  018B  082B               	movf	Load_Main@Load_Status,w
 11458  018C  3A01               	xorlw	1
 11459  018D  1D03               	skipz
 11460  018E  2996               	goto	l10883
 11461                           
 11462                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 11463  018F  0022               	movlb	2	; select bank2
 11464  0190  0837               	movf	(_Load^(0+256)+9),w
 11465  0191  3E37               	addlw	55
 11466  0192  00D3               	movwf	(_Load^(0+256)+37)
 11467  0193  3000               	movlw	0
 11468  0194  3D38               	addwfc	((_Load+1)^(0+256)+9),w
 11469  0195  00D4               	movwf	((_Load+1)^(0+256)+37)
 11470  0196                     l10883:	
 11471                           
 11472                           ;OverLoad_B1.c: 129: }
 11473                           ;OverLoad_B1.c: 130: }
 11474                           ;OverLoad_B1.c: 131: }
 11475                           ;OverLoad_B1.c: 132: }
 11476                           ;OverLoad_B1.c: 133: }
 11477                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 11478  0196  0022               	movlb	2	; select bank2
 11479  0197  0854               	movf	((_Load+1)^(0+256)+37),w
 11480  0198  024E               	subwf	((_Load+1)^(0+256)+31),w
 11481  0199  1D03               	skipz
 11482  019A  299D               	goto	u12765
 11483  019B  0853               	movf	(_Load^(0+256)+37),w
 11484  019C  024D               	subwf	(_Load^(0+256)+31),w
 11485  019D                     u12765:	
 11486  019D  1C03               	skipc
 11487  019E  29AC               	goto	l10893
 11488                           
 11489                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 11490  019F  3001               	movlw	1
 11491  01A0  0020               	movlb	0	; select bank0
 11492  01A1  00A8               	movwf	??_Load_Main
 11493  01A2  0828               	movf	??_Load_Main,w
 11494  01A3  0022               	movlb	2	; select bank2
 11495  01A4  07D8               	addwf	(_Load^(0+256)+42),f
 11496                           
 11497                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 11498  01A5  0858               	movf	(_Load^(0+256)+42),w
 11499  01A6  0259               	subwf	(_Load^(0+256)+43),w
 11500  01A7  1803               	skipnc
 11501  01A8  0008               	return
 11502                           
 11503                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 11504  01A9  01D8               	clrf	(_Load^(0+256)+42)
 11505                           
 11506                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 11507  01AA  16AE               	bsf	_Load^(0+256),5
 11508                           
 11509                           ;OverLoad_B1.c: 161: }
 11510                           ;OverLoad_B1.c: 162: } else {
 11511  01AB  0008               	return
 11512  01AC                     l10893:	
 11513                           
 11514                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 11515  01AC  01D8               	clrf	(_Load^(0+256)+42)
 11516                           
 11517                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 11518  01AD  1DAE               	btfss	_Load^(0+256),3
 11519  01AE  0008               	return
 11520                           
 11521                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 11522  01AF  3001               	movlw	1
 11523  01B0  0020               	movlb	0	; select bank0
 11524  01B1  00A8               	movwf	??_Load_Main
 11525  01B2  0828               	movf	??_Load_Main,w
 11526  01B3  0022               	movlb	2	; select bank2
 11527  01B4  07DB               	addwf	(_Load^(0+256)+45),f
 11528                           
 11529                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 11530  01B5  3003               	movlw	3
 11531  01B6  025B               	subwf	(_Load^(0+256)+45),w
 11532  01B7  1C03               	skipc
 11533  01B8  0008               	return
 11534                           
 11535                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 11536  01B9  01DB               	clrf	(_Load^(0+256)+45)
 11537                           
 11538                           ;OverLoad_B1.c: 168: Load.OK = 1;
 11539  01BA  17AE               	bsf	_Load^(0+256),7
 11540                           
 11541                           ;OverLoad_B1.c: 169: Load.Run = 0;
 11542  01BB  11AE               	bcf	_Load^(0+256),3
 11543                           
 11544                           ;OverLoad_B1.c: 170: Load.Count = 0;
 11545  01BC  01D7               	clrf	(_Load^(0+256)+41)
 11546                           
 11547                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 11548  01BD  084E               	movf	((_Load+1)^(0+256)+31),w
 11549  01BE  01B8               	clrf	((_Load+1)^(0+256)+9)
 11550  01BF  07B8               	addwf	((_Load+1)^(0+256)+9),f
 11551  01C0  084D               	movf	(_Load^(0+256)+31),w
 11552  01C1  01B7               	clrf	(_Load^(0+256)+9)
 11553  01C2  07B7               	addwf	(_Load^(0+256)+9),f
 11554                           
 11555                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 11556  01C3  3003               	movlw	3
 11557  01C4  0020               	movlb	0	; select bank0
 11558  01C5  00A8               	movwf	??_Load_Main
 11559  01C6  0828               	movf	??_Load_Main,w
 11560  01C7  0022               	movlb	2	; select bank2
 11561  01C8  00D9               	movwf	(_Load^(0+256)+43)
 11562                           
 11563                           ;OverLoad_B1.c: 175: }
 11564                           ;OverLoad_B1.c: 176: }
 11565                           ;OverLoad_B1.c: 199: }
 11566                           ;OverLoad_B1.c: 200: }
 11567                           ;OverLoad_B1.c: 201: }
 11568                           ;OverLoad_B1.c: 202: } else {
 11569  01C9  0008               	return
 11570  01CA                     l1743:	
 11571                           
 11572                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 11573  01CA  162E               	bsf	_Load^(0+256),4
 11574                           
 11575                           ;OverLoad_B1.c: 204: }
 11576                           ;OverLoad_B1.c: 205: } else {
 11577  01CB  0008               	return
 11578  01CC                     l1742:	
 11579                           
 11580                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 11581  01CC  1D2E               	btfss	_Load^(0+256),2
 11582  01CD  29DF               	goto	l10931
 11583                           
 11584                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 11585  01CE  112E               	bcf	_Load^(0+256),2
 11586                           
 11587                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 11588  01CF  122E               	bcf	_Load^(0+256),4
 11589                           
 11590                           ;OverLoad_B1.c: 211: Load.Time = 0;
 11591  01D0  01AF               	clrf	(_Load^(0+256)+1)
 11592  01D1  01B0               	clrf	((_Load+1)^(0+256)+1)
 11593                           
 11594                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 11595  01D2  319E  260E  3180   	fcall	_setLoad_AH_AL_Restore
 11596                           
 11597                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 11598  01D5  0022               	movlb	2	; select bank2
 11599  01D6  01D8               	clrf	(_Load^(0+256)+42)
 11600                           
 11601                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 11602  01D7  01DB               	clrf	(_Load^(0+256)+45)
 11603                           
 11604                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 11605  01D8  01B3               	clrf	(_Load^(0+256)+5)
 11606  01D9  01B4               	clrf	((_Load+1)^(0+256)+5)
 11607                           
 11608                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 11609  01DA  01B5               	clrf	(_Load^(0+256)+7)
 11610  01DB  01B6               	clrf	((_Load+1)^(0+256)+7)
 11611                           
 11612                           ;OverLoad_B1.c: 224: Load.Run = 0;
 11613  01DC  11AE               	bcf	_Load^(0+256),3
 11614                           
 11615                           ;OverLoad_B1.c: 225: Load.Count = 0;
 11616  01DD  01D7               	clrf	(_Load^(0+256)+41)
 11617                           
 11618                           ;OverLoad_B1.c: 226: Load.OK = 0;
 11619  01DE  13AE               	bcf	_Load^(0+256),7
 11620  01DF                     l10931:	
 11621                           
 11622                           ;OverLoad_B1.c: 248: }
 11623                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 11624  01DF  1EAE               	btfss	_Load^(0+256),5
 11625  01E0  0008               	return
 11626                           
 11627                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 11628  01E1  3001               	movlw	1
 11629  01E2  07B1               	addwf	(_Load^(0+256)+3),f
 11630  01E3  3000               	movlw	0
 11631  01E4  3DB2               	addwfc	((_Load+1)^(0+256)+3),f
 11632                           
 11633                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 11634  01E5  3003               	movlw	3
 11635  01E6  0232               	subwf	((_Load+1)^(0+256)+3),w
 11636  01E7  30E8               	movlw	232
 11637  01E8  1903               	skipnz
 11638  01E9  0231               	subwf	(_Load^(0+256)+3),w
 11639  01EA  1C03               	skipc
 11640  01EB  0008               	return
 11641                           
 11642                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 11643  01EC  01B1               	clrf	(_Load^(0+256)+3)
 11644  01ED  01B2               	clrf	((_Load+1)^(0+256)+3)
 11645                           
 11646                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 11647  01EE  12AE               	bcf	_Load^(0+256),5
 11648                           
 11649                           ;OverLoad_B1.c: 254: }
 11650                           ;OverLoad_B1.c: 255: }
 11651                           ;OverLoad_B1.c: 256: }
 11652                           ;OverLoad_B1.c: 257: } else {
 11653  01EF  0008               	return
 11654  01F0                     l1732:	
 11655                           
 11656                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 11657  01F0  1C20               	btfss	_myMain^(0+256),0
 11658  01F1  0008               	return
 11659                           
 11660                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 11661  01F2  142E               	bsf	_Load^(0+256),0
 11662  01F3  0008               	return
 11663  01F4                     __end_of_Load_Main:	
 11664                           
 11665                           	psect	text68
 11666  1CE9                     __ptext68:	
 11667 ;; *************** function _getMain_Lights_Count *****************
 11668 ;; Defined at:
 11669 ;;		line 467 in file "../src/Main_B1.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;		None
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  status2         1    2[BANK0 ] unsigned char 
 11674 ;;  status1         1    1[BANK0 ] unsigned char 
 11675 ;;  count           1    0[BANK0 ] unsigned char 
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      unsigned char 
 11678 ;; Registers used:
 11679 ;;		wreg, status,2, status,0
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11686 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;Total ram usage:        3 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:    5
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_Load_Main
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           
 11700                           ;psect for function _getMain_Lights_Count
 11701  1CE9                     _getMain_Lights_Count:	
 11702                           
 11703                           ;Main_B1.c: 468: char count = 0;
 11704                           
 11705                           ;incstack = 0
 11706                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11707  1CE9  0020               	movlb	0	; select bank0
 11708  1CEA  01A0               	clrf	getMain_Lights_Count@count
 11709                           
 11710                           ;Main_B1.c: 472: char status1 = 0;
 11711  1CEB  01A1               	clrf	getMain_Lights_Count@status1
 11712                           
 11713                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 11714  1CEC  3000               	movlw	0
 11715  1CED  0023               	movlb	3	; select bank3
 11716  1CEE  193F               	btfsc	(_DimmerLights1^(0+384)+1),2
 11717  1CEF  3001               	movlw	1
 11718  1CF0  0020               	movlb	0	; select bank0
 11719  1CF1  00A1               	movwf	getMain_Lights_Count@status1
 11720                           
 11721                           ;Main_B1.c: 476: char status2 = 0;
 11722  1CF2  01A2               	clrf	getMain_Lights_Count@status2
 11723                           
 11724                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 11725  1CF3  3000               	movlw	0
 11726  1CF4  0023               	movlb	3	; select bank3
 11727  1CF5  1950               	btfsc	(_DimmerLights2^(0+384)+1),2
 11728  1CF6  3001               	movlw	1
 11729  1CF7  0020               	movlb	0	; select bank0
 11730  1CF8  00A2               	movwf	getMain_Lights_Count@status2
 11731                           
 11732                           ;Main_B1.c: 501: return count = (status1 + status2);
 11733  1CF9  0821               	movf	getMain_Lights_Count@status1,w
 11734  1CFA  0722               	addwf	getMain_Lights_Count@status2,w
 11735  1CFB  00A0               	movwf	getMain_Lights_Count@count
 11736  1CFC  0008               	return
 11737  1CFD                     __end_of_getMain_Lights_Count:	
 11738                           
 11739                           	psect	text69
 11740  1AE5                     __ptext69:	
 11741 ;; *************** function _getDimmer_Load_Status *****************
 11742 ;; Defined at:
 11743 ;;		line 896 in file "../src/Dimmer_B1.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  status          1    0[BANK0 ] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      unsigned char 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;Total ram usage:        1 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    5
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_Load_Main
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           
 11772                           ;psect for function _getDimmer_Load_Status
 11773  1AE5                     _getDimmer_Load_Status:	
 11774                           
 11775                           ;Dimmer_B1.c: 897: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11776                           
 11777                           ;incstack = 0
 11778                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11779  1AE5  3000               	movlw	0
 11780  1AE6  0021               	movlb	1	; select bank1
 11781  1AE7  19BA               	btfsc	_Dimmer^(0+128),3	;volatile
 11782  1AE8  3001               	movlw	1
 11783  1AE9  0020               	movlb	0	; select bank0
 11784  1AEA  00A0               	movwf	getDimmer_Load_Status@status
 11785                           
 11786                           ;Dimmer_B1.c: 898: return status;
 11787  1AEB  0820               	movf	getDimmer_Load_Status@status,w
 11788  1AEC  0008               	return
 11789  1AED                     __end_of_getDimmer_Load_Status:	
 11790                           
 11791                           	psect	text70
 11792  1ADD                     __ptext70:	
 11793 ;; *************** function _getDimmer_LoadGO *****************
 11794 ;; Defined at:
 11795 ;;		line 631 in file "../src/Dimmer_B1.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;		None
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;                  1    wreg      unsigned char 
 11802 ;; Registers used:
 11803 ;;		wreg, status,2
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11812 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11813 ;;Total ram usage:        1 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:    5
 11816 ;; This function calls:
 11817 ;;		Nothing
 11818 ;; This function is called by:
 11819 ;;		_Load_Main
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function _getDimmer_LoadGO
 11825  1ADD                     _getDimmer_LoadGO:	
 11826                           
 11827                           ;Dimmer_B1.c: 632: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11828                           
 11829                           ;incstack = 0
 11830                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11831  1ADD  3000               	movlw	0
 11832  1ADE  0021               	movlb	1	; select bank1
 11833  1ADF  193A               	btfsc	_Dimmer^(0+128),2	;volatile
 11834  1AE0  3001               	movlw	1
 11835  1AE1  0020               	movlb	0	; select bank0
 11836  1AE2  00A0               	movwf	getDimmer_LoadGO@loadgo
 11837                           
 11838                           ;Dimmer_B1.c: 633: return loadgo;
 11839  1AE3  0820               	movf	getDimmer_LoadGO@loadgo,w
 11840  1AE4  0008               	return
 11841  1AE5                     __end_of_getDimmer_LoadGO:	
 11842                           
 11843                           	psect	text71
 11844  10BB                     __ptext71:	
 11845 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 11846 ;; Defined at:
 11847 ;;		line 840 in file "../src/Dimmer_B1.c"
 11848 ;; Parameters:    Size  Location     Type
 11849 ;;		None
 11850 ;; Auto vars:     Size  Location     Type
 11851 ;;  i               2    4[BANK0 ] int 
 11852 ;;  adjsw           1    6[BANK0 ] unsigned char 
 11853 ;;  count           1    3[BANK0 ] unsigned char 
 11854 ;; Return value:  Size  Location     Type
 11855 ;;                  1    wreg      unsigned char 
 11856 ;; Registers used:
 11857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11858 ;; Tracked objects:
 11859 ;;		On entry : 0/0
 11860 ;;		On exit  : 0/0
 11861 ;;		Unchanged: 0/0
 11862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;Total ram usage:        5 bytes
 11868 ;; Hardware stack levels used:    1
 11869 ;; Hardware stack levels required when called:    6
 11870 ;; This function calls:
 11871 ;;		_DimmerLightsPointSelect
 11872 ;; This function is called by:
 11873 ;;		_Load_Main
 11874 ;; This function uses a non-reentrant model
 11875 ;;
 11876                           
 11877                           
 11878                           ;psect for function _getAll_DimmerLights_AdjSw
 11879  10BB                     _getAll_DimmerLights_AdjSw:	
 11880                           
 11881                           ;Dimmer_B1.c: 841: char count = 2;
 11882                           
 11883                           ;incstack = 0
 11884                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11885  10BB  3002               	movlw	2
 11886  10BC  0020               	movlb	0	; select bank0
 11887  10BD  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 11888  10BE  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 11889  10BF  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 11890                           
 11891                           ;Dimmer_B1.c: 842: char adjsw = 0;
 11892  10C0  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 11893                           
 11894                           ;Dimmer_B1.c: 844: for (int i = 0; i < count; i++) {
 11895  10C1  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 11896  10C2  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 11897  10C3                     l10103:	
 11898  10C3  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 11899  10C4  3A80               	xorlw	128
 11900  10C5  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 11901  10C6  3080               	movlw	128
 11902  10C7  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 11903  10C8  1D03               	skipz
 11904  10C9  28CC               	goto	u11395
 11905  10CA  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 11906  10CB  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 11907  10CC                     u11395:	
 11908  10CC  1803               	btfsc	3,0
 11909  10CD  28E5               	goto	l10105
 11910                           
 11911                           ;Dimmer_B1.c: 845: DimmerLightsPointSelect(i + 1);
 11912  10CE  0020               	movlb	0	; select bank0
 11913  10CF  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 11914  10D0  3E01               	addlw	1
 11915  10D1  319C  2462  3190   	fcall	_DimmerLightsPointSelect
 11916                           
 11917                           ;Dimmer_B1.c: 846: if (adjsw == 0) {
 11918  10D4  0020               	movlb	0	; select bank0
 11919  10D5  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 11920  10D6  1D03               	skipz
 11921  10D7  28E0               	goto	l10101
 11922                           
 11923                           ;Dimmer_B1.c: 847: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 11924  10D8  0A6F               	incf	_DimmerLights,w
 11925  10D9  0086               	movwf	6
 11926  10DA  3001               	movlw	1	; select bank2/3
 11927  10DB  0087               	movwf	7
 11928  10DC  3000               	movlw	0
 11929  10DD  1B01               	btfsc	1,6
 11930  10DE  3001               	movlw	1
 11931  10DF  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 11932  10E0                     l10101:	
 11933  10E0  3001               	movlw	1
 11934  10E1  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 11935  10E2  3000               	movlw	0
 11936  10E3  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 11937  10E4  28C3               	goto	l10103
 11938  10E5                     l10105:	
 11939                           
 11940                           ;Dimmer_B1.c: 848: }
 11941                           ;Dimmer_B1.c: 849: }
 11942                           ;Dimmer_B1.c: 850: return adjsw;
 11943  10E5  0020               	movlb	0	; select bank0
 11944  10E6  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 11945  10E7  0008               	return
 11946  10E8                     __end_of_getAll_DimmerLights_AdjSw:	
 11947                           
 11948                           	psect	text72
 11949  1E47                     __ptext72:	
 11950 ;; *************** function ___wmul *****************
 11951 ;; Defined at:
 11952 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11955 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  product         2    4[BANK0 ] unsigned int 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  2    0[BANK0 ] unsigned int 
 11960 ;; Registers used:
 11961 ;;		wreg, status,2, status,0
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;Total ram usage:        6 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:    5
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_Load_Main
 11978 ;; This function uses a non-reentrant model
 11979 ;;
 11980                           
 11981                           
 11982                           ;psect for function ___wmul
 11983  1E47                     ___wmul:	
 11984                           
 11985                           ;incstack = 0
 11986                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11987  1E47  0020               	movlb	0	; select bank0
 11988  1E48  01A4               	clrf	___wmul@product
 11989  1E49  01A5               	clrf	___wmul@product+1
 11990  1E4A                     l10511:	
 11991  1E4A  1C20               	btfss	___wmul@multiplier,0
 11992  1E4B  2E50               	goto	l2882
 11993  1E4C  0822               	movf	___wmul@multiplicand,w
 11994  1E4D  07A4               	addwf	___wmul@product,f
 11995  1E4E  0823               	movf	___wmul@multiplicand+1,w
 11996  1E4F  3DA5               	addwfc	___wmul@product+1,f
 11997  1E50                     l2882:	
 11998  1E50  3001               	movlw	1
 11999  1E51                     u12045:	
 12000  1E51  35A2               	lslf	___wmul@multiplicand,f
 12001  1E52  0DA3               	rlf	___wmul@multiplicand+1,f
 12002  1E53  0B89               	decfsz	9,f
 12003  1E54  2E51               	goto	u12045
 12004  1E55  3001               	movlw	1
 12005  1E56                     u12055:	
 12006  1E56  36A1               	lsrf	___wmul@multiplier+1,f
 12007  1E57  0CA0               	rrf	___wmul@multiplier,f
 12008  1E58  0B89               	decfsz	9,f
 12009  1E59  2E56               	goto	u12055
 12010  1E5A  0821               	movf	___wmul@multiplier+1,w
 12011  1E5B  0420               	iorwf	___wmul@multiplier,w
 12012  1E5C  1D03               	skipz
 12013  1E5D  2E4A               	goto	l10511
 12014  1E5E  0825               	movf	___wmul@product+1,w
 12015  1E5F  01A1               	clrf	?___wmul+1
 12016  1E60  07A1               	addwf	?___wmul+1,f
 12017  1E61  0824               	movf	___wmul@product,w
 12018  1E62  01A0               	clrf	?___wmul
 12019  1E63  07A0               	addwf	?___wmul,f
 12020  1E64  0008               	return
 12021  1E65                     __end_of___wmul:	
 12022                           
 12023                           	psect	text73
 12024  1213                     __ptext73:	
 12025 ;; *************** function ___lwdiv *****************
 12026 ;; Defined at:
 12027 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12028 ;; Parameters:    Size  Location     Type
 12029 ;;  divisor         2    0[BANK0 ] unsigned int 
 12030 ;;  dividend        2    2[BANK0 ] unsigned int 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  quotient        2    6[BANK0 ] unsigned int 
 12033 ;;  counter         1    5[BANK0 ] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  2    0[BANK0 ] unsigned int 
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        8 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    5
 12050 ;; This function calls:
 12051 ;;		Nothing
 12052 ;; This function is called by:
 12053 ;;		_Load_Main
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function ___lwdiv
 12059  1213                     ___lwdiv:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12063  1213  0020               	movlb	0	; select bank0
 12064  1214  01A6               	clrf	___lwdiv@quotient
 12065  1215  01A7               	clrf	___lwdiv@quotient+1
 12066  1216  0821               	movf	___lwdiv@divisor+1,w
 12067  1217  0420               	iorwf	___lwdiv@divisor,w
 12068  1218  1903               	skipnz
 12069  1219  2A43               	goto	l10543
 12070  121A  01A5               	clrf	___lwdiv@counter
 12071  121B  0AA5               	incf	___lwdiv@counter,f
 12072  121C                     l10531:	
 12073  121C  1BA1               	btfsc	___lwdiv@divisor+1,7
 12074  121D  2A28               	goto	l10533
 12075  121E  3001               	movlw	1
 12076  121F                     u12085:	
 12077  121F  35A0               	lslf	___lwdiv@divisor,f
 12078  1220  0DA1               	rlf	___lwdiv@divisor+1,f
 12079  1221  0B89               	decfsz	9,f
 12080  1222  2A1F               	goto	u12085
 12081  1223  3001               	movlw	1
 12082  1224  00A4               	movwf	??___lwdiv
 12083  1225  0824               	movf	??___lwdiv,w
 12084  1226  07A5               	addwf	___lwdiv@counter,f
 12085  1227  2A1C               	goto	l10531
 12086  1228                     l10533:	
 12087  1228  3001               	movlw	1
 12088  1229                     u12105:	
 12089  1229  35A6               	lslf	___lwdiv@quotient,f
 12090  122A  0DA7               	rlf	___lwdiv@quotient+1,f
 12091  122B  0B89               	decfsz	9,f
 12092  122C  2A29               	goto	u12105
 12093  122D  0821               	movf	___lwdiv@divisor+1,w
 12094  122E  0223               	subwf	___lwdiv@dividend+1,w
 12095  122F  1D03               	skipz
 12096  1230  2A33               	goto	u12115
 12097  1231  0820               	movf	___lwdiv@divisor,w
 12098  1232  0222               	subwf	___lwdiv@dividend,w
 12099  1233                     u12115:	
 12100  1233  1C03               	skipc
 12101  1234  2A3A               	goto	l10539
 12102  1235  0820               	movf	___lwdiv@divisor,w
 12103  1236  02A2               	subwf	___lwdiv@dividend,f
 12104  1237  0821               	movf	___lwdiv@divisor+1,w
 12105  1238  3BA3               	subwfb	___lwdiv@dividend+1,f
 12106  1239  1426               	bsf	___lwdiv@quotient,0
 12107  123A                     l10539:	
 12108  123A  3001               	movlw	1
 12109  123B                     u12125:	
 12110  123B  36A1               	lsrf	___lwdiv@divisor+1,f
 12111  123C  0CA0               	rrf	___lwdiv@divisor,f
 12112  123D  0B89               	decfsz	9,f
 12113  123E  2A3B               	goto	u12125
 12114  123F  3001               	movlw	1
 12115  1240  02A5               	subwf	___lwdiv@counter,f
 12116  1241  1D03               	btfss	3,2
 12117  1242  2A28               	goto	l10533
 12118  1243                     l10543:	
 12119  1243  0827               	movf	___lwdiv@quotient+1,w
 12120  1244  01A1               	clrf	?___lwdiv+1
 12121  1245  07A1               	addwf	?___lwdiv+1,f
 12122  1246  0826               	movf	___lwdiv@quotient,w
 12123  1247  01A0               	clrf	?___lwdiv
 12124  1248  07A0               	addwf	?___lwdiv,f
 12125  1249  0008               	return
 12126  124A                     __end_of___lwdiv:	
 12127                           
 12128                           	psect	text74
 12129  1A7C                     __ptext74:	
 12130 ;; *************** function _Load_Initialization *****************
 12131 ;; Defined at:
 12132 ;;		line 9 in file "../src/OverLoad_B1.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;		None               void
 12139 ;; Registers used:
 12140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : 0/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    6
 12153 ;; This function calls:
 12154 ;;		_setLoad_AH_AL_Restore
 12155 ;; This function is called by:
 12156 ;;		_main
 12157 ;; This function uses a non-reentrant model
 12158 ;;
 12159                           
 12160                           
 12161                           ;psect for function _Load_Initialization
 12162  1A7C                     _Load_Initialization:	
 12163                           
 12164                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12165                           
 12166                           ;incstack = 0
 12167                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12168  1A7C  319E  260E         	fcall	_setLoad_AH_AL_Restore
 12169  1A7E  0008               	return
 12170  1A7F                     __end_of_Load_Initialization:	
 12171                           
 12172                           	psect	text75
 12173  1E0E                     __ptext75:	
 12174 ;; *************** function _setLoad_AH_AL_Restore *****************
 12175 ;; Defined at:
 12176 ;;		line 285 in file "../src/OverLoad_B1.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;		None
 12179 ;; Auto vars:     Size  Location     Type
 12180 ;;  i               1    1[BANK0 ] unsigned char 
 12181 ;; Return value:  Size  Location     Type
 12182 ;;		None               void
 12183 ;; Registers used:
 12184 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;Total ram usage:        2 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    5
 12197 ;; This function calls:
 12198 ;;		Nothing
 12199 ;; This function is called by:
 12200 ;;		_Load_Initialization
 12201 ;;		_Load_Main
 12202 ;; This function uses a non-reentrant model
 12203 ;;
 12204                           
 12205                           
 12206                           ;psect for function _setLoad_AH_AL_Restore
 12207  1E0E                     _setLoad_AH_AL_Restore:	
 12208                           
 12209                           ;OverLoad_B1.c: 286: char i;
 12210                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 12211                           
 12212                           ;incstack = 0
 12213                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12214  1E0E  0020               	movlb	0	; select bank0
 12215  1E0F  01A1               	clrf	setLoad_AH_AL_Restore@i
 12216  1E10                     L9:	
 12217  1E10  3005               	movlw	5
 12218  1E11  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12219  1E12  1803               	btfsc	3,0
 12220  1E13  0008               	return
 12221                           
 12222                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 12223  1E14  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12224  1E15  3E39               	addlw	(_Load+11)& (0+255)
 12225  1E16  0086               	movwf	6
 12226  1E17  3001               	movlw	1	; select bank2/3
 12227  1E18  0087               	movwf	7
 12228  1E19  3000               	movlw	0
 12229  1E1A  3FC0               	movwi [0]fsr1
 12230  1E1B  3FC1               	movwi [1]fsr1
 12231                           
 12232                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 12233  1E1C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12234  1E1D  3E43               	addlw	(_Load+21)& (0+255)
 12235  1E1E  0086               	movwf	6
 12236  1E1F  3001               	movlw	1	; select bank2/3
 12237  1E20  0087               	movwf	7
 12238  1E21  30FF               	movlw	255
 12239  1E22  3FC0               	movwi [0]fsr1
 12240  1E23  30FF               	movlw	255
 12241  1E24  3FC1               	movwi [1]fsr1
 12242  1E25  3001               	movlw	1
 12243  1E26  00A0               	movwf	??_setLoad_AH_AL_Restore
 12244  1E27  0820               	movf	??_setLoad_AH_AL_Restore,w
 12245  1E28  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12246  1E29  2E10               	goto	L9
 12247  1E2A                     __end_of_setLoad_AH_AL_Restore:	
 12248                           
 12249                           	psect	text76
 12250  1B4C                     __ptext76:	
 12251 ;; *************** function _LED_Main *****************
 12252 ;; Defined at:
 12253 ;;		line 47 in file "../src/LED_B1.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;		None
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;		None
 12258 ;; Return value:  Size  Location     Type
 12259 ;;		None               void
 12260 ;; Registers used:
 12261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;Total ram usage:        0 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    7
 12274 ;; This function calls:
 12275 ;;		_setLED_Main
 12276 ;; This function is called by:
 12277 ;;		_main
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           
 12282                           ;psect for function _LED_Main
 12283  1B4C                     _LED_Main:	
 12284                           
 12285                           ;LED_B1.c: 53: setLED_Main(1);
 12286                           
 12287                           ;incstack = 0
 12288                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12289  1B4C  3001               	movlw	1
 12290  1B4D  3193  2378  319B   	fcall	_setLED_Main
 12291                           
 12292                           ;LED_B1.c: 56: setLED_Main(2);
 12293  1B50  3002               	movlw	2
 12294  1B51  3193  2378  319B   	fcall	_setLED_Main
 12295                           
 12296                           ;LED_B1.c: 62: setLED_Main(99);
 12297  1B54  3063               	movlw	99
 12298  1B55  3193  2378         	fcall	_setLED_Main
 12299  1B57  0008               	return
 12300  1B58                     __end_of_LED_Main:	
 12301                           
 12302                           	psect	text77
 12303  1378                     __ptext77:	
 12304 ;; *************** function _setLED_Main *****************
 12305 ;; Defined at:
 12306 ;;		line 221 in file "../src/LED_B1.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  led             1    wreg     unsigned char 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;  led             1    3[BANK0 ] unsigned char 
 12311 ;; Return value:  Size  Location     Type
 12312 ;;		None               void
 12313 ;; Registers used:
 12314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;Total ram usage:        3 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; Hardware stack levels required when called:    6
 12327 ;; This function calls:
 12328 ;;		_LedPointSelect
 12329 ;; This function is called by:
 12330 ;;		_LED_Main
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           
 12335                           ;psect for function _setLED_Main
 12336  1378                     _setLED_Main:	
 12337                           
 12338                           ;incstack = 0
 12339                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12340                           ;setLED_Main@led stored from wreg
 12341  1378  0020               	movlb	0	; select bank0
 12342  1379  00A3               	movwf	setLED_Main@led
 12343                           
 12344                           ;LED_B1.c: 222: LedPointSelect(led);
 12345  137A  0823               	movf	setLED_Main@led,w
 12346  137B  319E  26A3  3193   	fcall	_LedPointSelect
 12347                           
 12348                           ;LED_B1.c: 223: if (LED->GO == 1) {
 12349  137E  0021               	movlb	1	; select bank1
 12350  137F  0840               	movf	_LED^(0+128),w
 12351  1380  0086               	movwf	6
 12352  1381  0841               	movf	(_LED+1)^(0+128),w
 12353  1382  0087               	movwf	7
 12354  1383  1C81               	btfss	1,1
 12355  1384  0008               	return
 12356                           
 12357                           ;LED_B1.c: 224: LED->Time++;
 12358  1385  0840               	movf	_LED^(0+128),w
 12359  1386  0086               	movwf	6
 12360  1387  0841               	movf	(_LED+1)^(0+128),w
 12361  1388  0087               	movwf	7
 12362  1389  3141               	addfsr 1,1
 12363  138A  3001               	movlw	1
 12364  138B  0781               	addwf	1,f
 12365  138C  3141               	addfsr 1,1
 12366  138D  1803               	skipnc
 12367  138E  0A81               	incf	1,f
 12368                           
 12369                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 12370  138F  0840               	movf	_LED^(0+128),w
 12371  1390  0086               	movwf	6
 12372  1391  0841               	movf	(_LED+1)^(0+128),w
 12373  1392  0087               	movwf	7
 12374  1393  3141               	addfsr 1,1
 12375  1394  3F40               	moviw [0]fsr1
 12376  1395  0020               	movlb	0	; select bank0
 12377  1396  00A1               	movwf	??_setLED_Main
 12378  1397  3F41               	moviw [1]fsr1
 12379  1398  00A2               	movwf	??_setLED_Main+1
 12380  1399  3000               	movlw	0
 12381  139A  0222               	subwf	??_setLED_Main+1,w
 12382  139B  3032               	movlw	50
 12383  139C  1903               	skipnz
 12384  139D  0221               	subwf	??_setLED_Main,w
 12385  139E  1C03               	skipc
 12386  139F  0008               	return
 12387                           
 12388                           ;LED_B1.c: 226: LED->Time = 0;
 12389  13A0  0021               	movlb	1	; select bank1
 12390  13A1  0840               	movf	_LED^(0+128),w
 12391  13A2  0086               	movwf	6
 12392  13A3  0841               	movf	(_LED+1)^(0+128),w
 12393  13A4  0087               	movwf	7
 12394  13A5  3141               	addfsr 1,1
 12395  13A6  3000               	movlw	0
 12396  13A7  3FC0               	movwi [0]fsr1
 12397  13A8  3FC1               	movwi [1]fsr1
 12398                           
 12399                           ;LED_B1.c: 228: if (led == 1) {
 12400  13A9  0020               	movlb	0	; select bank0
 12401  13AA  0823               	movf	setLED_Main@led,w
 12402  13AB  3A01               	xorlw	1
 12403                           
 12404                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 12405  13AC  3008               	movlw	8
 12406  13AD  1903               	btfsc	3,2
 12407  13AE  068C               	xorwf	12,f
 12408                           
 12409                           ;LED_B1.c: 230: }
 12410                           ;LED_B1.c: 233: if (led == 2) {
 12411  13AF  0823               	movf	setLED_Main@led,w
 12412  13B0  3A02               	xorlw	2
 12413  13B1  1D03               	skipz
 12414  13B2  2BB5               	goto	l1068
 12415                           
 12416                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 12417  13B3  3080               	movlw	128
 12418  13B4  068E               	xorwf	14,f
 12419  13B5                     l1068:	
 12420                           
 12421                           ;LED_B1.c: 235: }
 12422                           ;LED_B1.c: 243: if (led == 99) {
 12423  13B5  0823               	movf	setLED_Main@led,w
 12424  13B6  3A63               	xorlw	99
 12425  13B7  1D03               	skipz
 12426  13B8  0008               	return
 12427                           
 12428                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 12429  13B9  3020               	movlw	32
 12430  13BA  068D               	xorwf	13,f
 12431  13BB  0008               	return
 12432  13BC                     __end_of_setLED_Main:	
 12433                           
 12434                           	psect	text78
 12435  1B40                     __ptext78:	
 12436 ;; *************** function _LED_Initialization *****************
 12437 ;; Defined at:
 12438 ;;		line 31 in file "../src/LED_B1.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;		None               void
 12445 ;; Registers used:
 12446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    8
 12459 ;; This function calls:
 12460 ;;		_setLED_Initialization
 12461 ;; This function is called by:
 12462 ;;		_main
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _LED_Initialization
 12468  1B40                     _LED_Initialization:	
 12469                           
 12470                           ;LED_B1.c: 33: setLED_Initialization(1);
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12474  1B40  3001               	movlw	1
 12475  1B41  319C  2419  319B   	fcall	_setLED_Initialization
 12476                           
 12477                           ;LED_B1.c: 36: setLED_Initialization(2);
 12478  1B44  3002               	movlw	2
 12479  1B45  319C  2419  319B   	fcall	_setLED_Initialization
 12480                           
 12481                           ;LED_B1.c: 42: setLED_Initialization(99);
 12482  1B48  3063               	movlw	99
 12483  1B49  319C  2419         	fcall	_setLED_Initialization
 12484  1B4B  0008               	return
 12485  1B4C                     __end_of_LED_Initialization:	
 12486                           
 12487                           	psect	text79
 12488  1C19                     __ptext79:	
 12489 ;; *************** function _setLED_Initialization *****************
 12490 ;; Defined at:
 12491 ;;		line 69 in file "../src/LED_B1.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;  led             1    wreg     unsigned char 
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  led             1    3[BANK0 ] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;		None               void
 12498 ;; Registers used:
 12499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        1 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    7
 12512 ;; This function calls:
 12513 ;;		_LedPointSelect
 12514 ;;		_setLED
 12515 ;; This function is called by:
 12516 ;;		_LED_Initialization
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           
 12521                           ;psect for function _setLED_Initialization
 12522  1C19                     _setLED_Initialization:	
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12526                           ;setLED_Initialization@led stored from wreg
 12527  1C19  0020               	movlb	0	; select bank0
 12528  1C1A  00A3               	movwf	setLED_Initialization@led
 12529                           
 12530                           ;LED_B1.c: 70: LedPointSelect(led);
 12531  1C1B  0823               	movf	setLED_Initialization@led,w
 12532  1C1C  319E  26A3  319C   	fcall	_LedPointSelect
 12533                           
 12534                           ;LED_B1.c: 71: LED->Enable = 1;
 12535  1C1F  0021               	movlb	1	; select bank1
 12536  1C20  0840               	movf	_LED^(0+128),w
 12537  1C21  0086               	movwf	6
 12538  1C22  0841               	movf	(_LED+1)^(0+128),w
 12539  1C23  0087               	movwf	7
 12540  1C24  1401               	bsf	1,0
 12541                           
 12542                           ;LED_B1.c: 72: setLED(led, 0);
 12543  1C25  0020               	movlb	0	; select bank0
 12544  1C26  01A1               	clrf	setLED@command
 12545  1C27  0823               	movf	setLED_Initialization@led,w
 12546  1C28  3195  25EB         	fcall	_setLED
 12547  1C2A  0008               	return
 12548  1C2B                     __end_of_setLED_Initialization:	
 12549                           
 12550                           	psect	text80
 12551  11DD                     __ptext80:	
 12552 ;; *************** function _Flash_Memory_Main *****************
 12553 ;; Defined at:
 12554 ;;		line 968 in file "../src/MCU_B1.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;		None
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;		None
 12559 ;; Return value:  Size  Location     Type
 12560 ;;		None               void
 12561 ;; Registers used:
 12562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;Total ram usage:        1 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    8
 12575 ;; This function calls:
 12576 ;;		_Flash_Memory_Modify
 12577 ;;		_getMain_LightsStatus
 12578 ;; This function is called by:
 12579 ;;		_main
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function _Flash_Memory_Main
 12585  11DD                     _Flash_Memory_Main:	
 12586                           
 12587                           ;MCU_B1.c: 969: if (Memory.Modify == 1) {
 12588                           
 12589                           ;incstack = 0
 12590                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12591  11DD  0024               	movlb	4	; select bank4
 12592  11DE  1C44               	btfss	(_Memory^(0+512)+36),0
 12593  11DF  0008               	return
 12594                           
 12595                           ;MCU_B1.c: 970: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 12596  11E0  319C  2475  3191   	fcall	_getMain_LightsStatus
 12597  11E3  3A00               	xorlw	0
 12598  11E4  3000               	movlw	0
 12599  11E5  1903               	skipnz
 12600  11E6  3001               	movlw	1
 12601  11E7  0020               	movlb	0	; select bank0
 12602  11E8  00A6               	movwf	??_Flash_Memory_Main
 12603  11E9  0DA6               	rlf	??_Flash_Memory_Main,f
 12604  11EA  0024               	movlb	4	; select bank4
 12605  11EB  0844               	movf	(_Memory^(0+512)+36),w
 12606  11EC  0020               	movlb	0	; select bank0
 12607  11ED  0626               	xorwf	??_Flash_Memory_Main,w
 12608  11EE  39FD               	andlw	-3
 12609  11EF  0626               	xorwf	??_Flash_Memory_Main,w
 12610  11F0  0024               	movlb	4	; select bank4
 12611  11F1  00C4               	movwf	(_Memory^(0+512)+36)
 12612                           
 12613                           ;MCU_B1.c: 971: if (Memory.GO == 1) {
 12614  11F2  1CC4               	btfss	(_Memory^(0+512)+36),1
 12615  11F3  2A0D               	goto	l1338
 12616                           
 12617                           ;MCU_B1.c: 972: Memory.Runtime = 1;
 12618  11F4  15C4               	bsf	(_Memory^(0+512)+36),3
 12619                           
 12620                           ;MCU_B1.c: 973: Memory.Time++;
 12621  11F5  3001               	movlw	1
 12622  11F6  07C2               	addwf	(_Memory^(0+512)+34),f
 12623  11F7  3000               	movlw	0
 12624  11F8  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12625                           
 12626                           ;MCU_B1.c: 974: if (Memory.Time == 25) {
 12627  11F9  3022               	movlw	34
 12628  11FA  3E20               	addlw	_Memory& (0+255)
 12629  11FB  0086               	movwf	6
 12630  11FC  3002               	movlw	2	; select bank4/5
 12631  11FD  0087               	movwf	7
 12632  11FE  3F40               	moviw [0]fsr1
 12633  11FF  3A19               	xorlw	25
 12634  1200  1D03               	skipz
 12635  1201  2A04               	goto	u12315
 12636  1202  3F41               	moviw [1]fsr1
 12637  1203  3A00               	xorlw	0
 12638  1204                     u12315:	
 12639  1204  1D03               	skipz
 12640  1205  0008               	return
 12641                           
 12642                           ;MCU_B1.c: 975: Memory.Time = 0;
 12643  1206  01C2               	clrf	(_Memory^(0+512)+34)
 12644  1207  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12645                           
 12646                           ;MCU_B1.c: 976: Memory.Modify = 0;
 12647  1208  1044               	bcf	(_Memory^(0+512)+36),0
 12648                           
 12649                           ;MCU_B1.c: 977: Memory.GO = 0;
 12650  1209  10C4               	bcf	(_Memory^(0+512)+36),1
 12651                           
 12652                           ;MCU_B1.c: 978: Flash_Memory_Modify();
 12653  120A  3194  2406         	fcall	_Flash_Memory_Modify
 12654                           
 12655                           ;MCU_B1.c: 979: }
 12656                           ;MCU_B1.c: 980: } else {
 12657  120C  0008               	return
 12658  120D                     l1338:	
 12659                           
 12660                           ;MCU_B1.c: 981: if (Memory.Runtime == 1) {
 12661  120D  1DC4               	btfss	(_Memory^(0+512)+36),3
 12662  120E  0008               	return
 12663                           
 12664                           ;MCU_B1.c: 982: Memory.Runtime = 0;
 12665  120F  11C4               	bcf	(_Memory^(0+512)+36),3
 12666                           
 12667                           ;MCU_B1.c: 983: Memory.Time = 0;
 12668  1210  01C2               	clrf	(_Memory^(0+512)+34)
 12669  1211  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12670  1212  0008               	return
 12671  1213                     __end_of_Flash_Memory_Main:	
 12672                           
 12673                           	psect	text81
 12674  1406                     __ptext81:	
 12675 ;; *************** function _Flash_Memory_Modify *****************
 12676 ;; Defined at:
 12677 ;;		line 1041 in file "../src/MCU_B1.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;		None
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;  i               1    5[BANK0 ] unsigned char 
 12682 ;; Return value:  Size  Location     Type
 12683 ;;		None               void
 12684 ;; Registers used:
 12685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;Total ram usage:        2 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; Hardware stack levels required when called:    7
 12698 ;; This function calls:
 12699 ;;		_Flash_Memory_Erasing
 12700 ;;		_Flash_Memory_Read
 12701 ;;		_Flash_Memory_Write
 12702 ;;		_setMemory_Data
 12703 ;; This function is called by:
 12704 ;;		_Flash_Memory_Main
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _Flash_Memory_Modify
 12710  1406                     _Flash_Memory_Modify:	
 12711                           
 12712                           ;MCU_B1.c: 1042: char i = 0;
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12716  1406  0020               	movlb	0	; select bank0
 12717  1407  01A5               	clrf	Flash_Memory_Modify@i
 12718                           
 12719                           ;MCU_B1.c: 1043: for (i = 0; i < 32; i++) {
 12720  1408  01A5               	clrf	Flash_Memory_Modify@i
 12721  1409  3020               	movlw	32
 12722  140A  0225               	subwf	Flash_Memory_Modify@i,w
 12723  140B  1803               	btfsc	3,0
 12724  140C  2C22               	goto	l10217
 12725  140D                     l10211:	
 12726                           
 12727                           ;MCU_B1.c: 1044: Memory.Data[i] = Flash_Memory_Read(i);
 12728  140D  0825               	movf	Flash_Memory_Modify@i,w
 12729  140E  319D  25BF  3194   	fcall	_Flash_Memory_Read
 12730  1411  0020               	movlb	0	; select bank0
 12731  1412  00A4               	movwf	??_Flash_Memory_Modify
 12732  1413  0825               	movf	Flash_Memory_Modify@i,w
 12733  1414  3E20               	addlw	_Memory& (0+255)
 12734  1415  0086               	movwf	6
 12735  1416  3002               	movlw	2	; select bank4/5
 12736  1417  0087               	movwf	7
 12737  1418  0824               	movf	??_Flash_Memory_Modify,w
 12738  1419  0081               	movwf	1
 12739  141A  3001               	movlw	1
 12740  141B  00A4               	movwf	??_Flash_Memory_Modify
 12741  141C  0824               	movf	??_Flash_Memory_Modify,w
 12742  141D  07A5               	addwf	Flash_Memory_Modify@i,f
 12743  141E  3020               	movlw	32
 12744  141F  0225               	subwf	Flash_Memory_Modify@i,w
 12745  1420  1C03               	skipc
 12746  1421  2C0D               	goto	l10211
 12747  1422                     l10217:	
 12748                           
 12749                           ;MCU_B1.c: 1045: }
 12750                           ;MCU_B1.c: 1046: setMemory_Data(0, product->Data[12]);
 12751  1422  087A               	movf	_product,w
 12752  1423  0086               	movwf	6
 12753  1424  3002               	movlw	2	; select bank4/5
 12754  1425  0087               	movwf	7
 12755  1426  3002               	movlw	2	; select bank4/5
 12756  1427  3F4C               	moviw [12]fsr1
 12757  1428  00A0               	movwf	setMemory_Data@data
 12758  1429  3000               	movlw	0
 12759  142A  319B  2328  3194   	fcall	_setMemory_Data
 12760                           
 12761                           ;MCU_B1.c: 1047: setMemory_Data(1, product->Data[13]);
 12762  142D  087A               	movf	_product,w
 12763  142E  0086               	movwf	6
 12764  142F  3002               	movlw	2	; select bank4/5
 12765  1430  0087               	movwf	7
 12766  1431  3002               	movlw	2	; select bank4/5
 12767  1432  3F4D               	moviw [13]fsr1
 12768  1433  0020               	movlb	0	; select bank0
 12769  1434  00A0               	movwf	setMemory_Data@data
 12770  1435  3001               	movlw	1
 12771  1436  319B  2328  3194   	fcall	_setMemory_Data
 12772                           
 12773                           ;MCU_B1.c: 1048: setMemory_Data(2, product->Data[14]);
 12774  1439  087A               	movf	_product,w
 12775  143A  0086               	movwf	6
 12776  143B  3002               	movlw	2	; select bank4/5
 12777  143C  0087               	movwf	7
 12778  143D  3002               	movlw	2	; select bank4/5
 12779  143E  3F4E               	moviw [14]fsr1
 12780  143F  0020               	movlb	0	; select bank0
 12781  1440  00A0               	movwf	setMemory_Data@data
 12782  1441  3002               	movlw	2
 12783  1442  319B  2328  3194   	fcall	_setMemory_Data
 12784                           
 12785                           ;MCU_B1.c: 1054: if (Memory.LoopSave == 1) {
 12786  1445  0024               	movlb	4	; select bank4
 12787  1446  1D44               	btfss	(_Memory^(0+512)+36),2
 12788  1447  2C4C               	goto	l1361
 12789                           
 12790                           ;MCU_B1.c: 1055: Memory.LoopSave = 0;
 12791  1448  1144               	bcf	(_Memory^(0+512)+36),2
 12792                           
 12793                           ;MCU_B1.c: 1056: myMain.FirstOpen = 0;
 12794  1449  0022               	movlb	2	; select bank2
 12795  144A  11A0               	bcf	_myMain^(0+256),3
 12796                           
 12797                           ;MCU_B1.c: 1057: myMain.First = 0;
 12798  144B  12A0               	bcf	_myMain^(0+256),5
 12799  144C                     l1361:	
 12800                           
 12801                           ;MCU_B1.c: 1059: }
 12802                           ;MCU_B1.c: 1060: GIE = 0;
 12803  144C  138B               	bcf	11,7	;volatile
 12804                           
 12805                           ;MCU_B1.c: 1061: Flash_Memory_Erasing();
 12806  144D  319B  2334  3194   	fcall	_Flash_Memory_Erasing
 12807                           
 12808                           ;MCU_B1.c: 1062: Flash_Memory_Write();
 12809  1450  3191  2116         	fcall	_Flash_Memory_Write
 12810                           
 12811                           ;MCU_B1.c: 1063: GIE = 1;
 12812  1452  178B               	bsf	11,7	;volatile
 12813  1453  0008               	return
 12814  1454                     __end_of_Flash_Memory_Modify:	
 12815                           
 12816                           	psect	text82
 12817  1B34                     __ptext82:	
 12818 ;; *************** function _Flash_Memory_Erasing *****************
 12819 ;; Defined at:
 12820 ;;		line 1030 in file "../src/MCU_B1.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;		None
 12823 ;; Auto vars:     Size  Location     Type
 12824 ;;		None
 12825 ;; Return value:  Size  Location     Type
 12826 ;;		None               void
 12827 ;; Registers used:
 12828 ;;		wreg, status,2, status,0, pclath, cstack
 12829 ;; Tracked objects:
 12830 ;;		On entry : 0/0
 12831 ;;		On exit  : 0/0
 12832 ;;		Unchanged: 0/0
 12833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;Total ram usage:        0 bytes
 12839 ;; Hardware stack levels used:    1
 12840 ;; Hardware stack levels required when called:    6
 12841 ;; This function calls:
 12842 ;;		_Flash_Memory_Unlock
 12843 ;; This function is called by:
 12844 ;;		_Flash_Memory_Modify
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           
 12849                           ;psect for function _Flash_Memory_Erasing
 12850  1B34                     _Flash_Memory_Erasing:	
 12851                           
 12852                           ;MCU_B1.c: 1031: CFGS = 0;
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12856  1B34  0023               	movlb	3	; select bank3
 12857  1B35  1315               	bcf	21,6	;volatile
 12858                           
 12859                           ;MCU_B1.c: 1032: PMADRH = 0x30;
 12860  1B36  3030               	movlw	48
 12861  1B37  0092               	movwf	18	;volatile
 12862                           
 12863                           ;MCU_B1.c: 1033: PMADRL = 0x00;
 12864  1B38  0191               	clrf	17	;volatile
 12865                           
 12866                           ;MCU_B1.c: 1034: FREE = 1;
 12867  1B39  1615               	bsf	21,4	;volatile
 12868                           
 12869                           ;MCU_B1.c: 1035: WREN = 1;
 12870  1B3A  1515               	bsf	21,2	;volatile
 12871                           
 12872                           ;MCU_B1.c: 1036: Flash_Memory_Unlock();
 12873  1B3B  319A  22FE         	fcall	_Flash_Memory_Unlock
 12874                           
 12875                           ;MCU_B1.c: 1037: WREN = 0;
 12876  1B3D  0023               	movlb	3	; select bank3
 12877  1B3E  1115               	bcf	21,2	;volatile
 12878  1B3F  0008               	return
 12879  1B40                     __end_of_Flash_Memory_Erasing:	
 12880                           
 12881                           	psect	text83
 12882  0641                     __ptext83:	
 12883 ;; *************** function _Flash_Memory_Initialization *****************
 12884 ;; Defined at:
 12885 ;;		line 927 in file "../src/MCU_B1.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;		None
 12888 ;; Auto vars:     Size  Location     Type
 12889 ;;  i               1   67[BANK0 ] unsigned char 
 12890 ;; Return value:  Size  Location     Type
 12891 ;;		None               void
 12892 ;; Registers used:
 12893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12894 ;; Tracked objects:
 12895 ;;		On entry : 0/0
 12896 ;;		On exit  : 0/0
 12897 ;;		Unchanged: 0/0
 12898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;Total ram usage:        2 bytes
 12904 ;; Hardware stack levels used:    1
 12905 ;; Hardware stack levels required when called:    8
 12906 ;; This function calls:
 12907 ;;		_Flash_Memory_Read
 12908 ;;		_Flash_Memory_Write
 12909 ;;		_setMemory_Data
 12910 ;;		_setPercentValue
 12911 ;; This function is called by:
 12912 ;;		_main
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           
 12917                           ;psect for function _Flash_Memory_Initialization
 12918  0641                     _Flash_Memory_Initialization:	
 12919                           
 12920                           ;MCU_B1.c: 928: char i = 0;
 12921                           
 12922                           ;incstack = 0
 12923                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12924  0641  0020               	movlb	0	; select bank0
 12925  0642  01E3               	clrf	Flash_Memory_Initialization@i
 12926                           
 12927                           ;MCU_B1.c: 929: if (Flash_Memory_Read(31) == 0xaa) {
 12928  0643  301F               	movlw	31
 12929  0644  319D  25BF  3186   	fcall	_Flash_Memory_Read
 12930  0647  3AAA               	xorlw	170
 12931  0648  1D03               	skipz
 12932  0649  2EB3               	goto	l10625
 12933                           
 12934                           ;MCU_B1.c: 930: product->Data[12] = Flash_Memory_Read(0);
 12935  064A  3000               	movlw	0
 12936  064B  319D  25BF  3186   	fcall	_Flash_Memory_Read
 12937  064E  0020               	movlb	0	; select bank0
 12938  064F  00E2               	movwf	??_Flash_Memory_Initialization
 12939  0650  087A               	movf	_product,w
 12940  0651  3E0C               	addlw	12
 12941  0652  0086               	movwf	6
 12942  0653  3002               	movlw	2	; select bank4/5
 12943  0654  0087               	movwf	7
 12944  0655  0862               	movf	??_Flash_Memory_Initialization,w
 12945  0656  0081               	movwf	1
 12946                           
 12947                           ;MCU_B1.c: 931: product->Data[13] = Flash_Memory_Read(1);
 12948  0657  3001               	movlw	1
 12949  0658  319D  25BF  3186   	fcall	_Flash_Memory_Read
 12950  065B  0020               	movlb	0	; select bank0
 12951  065C  00E2               	movwf	??_Flash_Memory_Initialization
 12952  065D  087A               	movf	_product,w
 12953  065E  3E0D               	addlw	13
 12954  065F  0086               	movwf	6
 12955  0660  3002               	movlw	2	; select bank4/5
 12956  0661  0087               	movwf	7
 12957  0662  0862               	movf	??_Flash_Memory_Initialization,w
 12958  0663  0081               	movwf	1
 12959                           
 12960                           ;MCU_B1.c: 932: product->Data[14] = Flash_Memory_Read(2);
 12961  0664  3002               	movlw	2
 12962  0665  319D  25BF  3186   	fcall	_Flash_Memory_Read
 12963  0668  0020               	movlb	0	; select bank0
 12964  0669  00E2               	movwf	??_Flash_Memory_Initialization
 12965  066A  087A               	movf	_product,w
 12966  066B  3E0E               	addlw	14
 12967  066C  0086               	movwf	6
 12968  066D  3002               	movlw	2	; select bank4/5
 12969  066E  0087               	movwf	7
 12970  066F  0862               	movf	??_Flash_Memory_Initialization,w
 12971  0670  0081               	movwf	1
 12972                           
 12973                           ;MCU_B1.c: 938: i = setPercentValue(((char)(70*0.8)));
 12974  0671  3038               	movlw	56
 12975  0672  3189  2166  3186   	fcall	_setPercentValue
 12976  0675  0020               	movlb	0	; select bank0
 12977  0676  00E2               	movwf	??_Flash_Memory_Initialization
 12978  0677  0862               	movf	??_Flash_Memory_Initialization,w
 12979  0678  00E3               	movwf	Flash_Memory_Initialization@i
 12980                           
 12981                           ;MCU_B1.c: 939: product->Data[21] = i;
 12982  0679  0863               	movf	Flash_Memory_Initialization@i,w
 12983  067A  00E2               	movwf	??_Flash_Memory_Initialization
 12984  067B  087A               	movf	_product,w
 12985  067C  3E15               	addlw	21
 12986  067D  0086               	movwf	6
 12987  067E  3002               	movlw	2	; select bank4/5
 12988  067F  0087               	movwf	7
 12989  0680  0862               	movf	??_Flash_Memory_Initialization,w
 12990  0681  0081               	movwf	1
 12991                           
 12992                           ;MCU_B1.c: 940: product->Data[22] = i;
 12993  0682  0863               	movf	Flash_Memory_Initialization@i,w
 12994  0683  00E2               	movwf	??_Flash_Memory_Initialization
 12995  0684  087A               	movf	_product,w
 12996  0685  3E16               	addlw	22
 12997  0686  0086               	movwf	6
 12998  0687  3002               	movlw	2	; select bank4/5
 12999  0688  0087               	movwf	7
 13000  0689  0862               	movf	??_Flash_Memory_Initialization,w
 13001  068A  0081               	movwf	1
 13002                           
 13003                           ;MCU_B1.c: 941: product->Data[23] = i;
 13004  068B  0863               	movf	Flash_Memory_Initialization@i,w
 13005  068C  00E2               	movwf	??_Flash_Memory_Initialization
 13006  068D  087A               	movf	_product,w
 13007  068E  3E17               	addlw	23
 13008  068F  0086               	movwf	6
 13009  0690  3002               	movlw	2	; select bank4/5
 13010  0691  0087               	movwf	7
 13011  0692  0862               	movf	??_Flash_Memory_Initialization,w
 13012  0693  0081               	movwf	1
 13013                           
 13014                           ;MCU_B1.c: 943: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13015  0694  087A               	movf	_product,w
 13016  0695  3E0C               	addlw	12
 13017  0696  0086               	movwf	6
 13018  0697  3002               	movlw	2	; select bank4/5
 13019  0698  0087               	movwf	7
 13020  0699  0801               	movf	1,w
 13021  069A  3AFF               	xorlw	255
 13022  069B  1D03               	skipz
 13023  069C  0008               	return
 13024  069D  087A               	movf	_product,w
 13025  069E  3E0D               	addlw	13
 13026  069F  0086               	movwf	6
 13027  06A0  3002               	movlw	2	; select bank4/5
 13028  06A1  0087               	movwf	7
 13029  06A2  0801               	movf	1,w
 13030  06A3  3AFF               	xorlw	255
 13031  06A4  1D03               	skipz
 13032  06A5  0008               	return
 13033  06A6  087A               	movf	_product,w
 13034  06A7  3E0E               	addlw	14
 13035  06A8  0086               	movwf	6
 13036  06A9  3002               	movlw	2	; select bank4/5
 13037  06AA  0087               	movwf	7
 13038  06AB  0801               	movf	1,w
 13039  06AC  3AFF               	xorlw	255
 13040  06AD  1D03               	skipz
 13041  06AE  0008               	return
 13042                           
 13043                           ;MCU_B1.c: 944: myMain.FirstOpen = 1;
 13044  06AF  0022               	movlb	2	; select bank2
 13045  06B0  15A0               	bsf	_myMain^(0+256),3
 13046                           
 13047                           ;MCU_B1.c: 945: myMain.First = 1;
 13048  06B1  16A0               	bsf	_myMain^(0+256),5
 13049                           
 13050                           ;MCU_B1.c: 946: }
 13051                           ;MCU_B1.c: 947: } else {
 13052  06B2  0008               	return
 13053  06B3                     l10625:	
 13054                           
 13055                           ;MCU_B1.c: 948: i = setPercentValue(((char)(70*0.8)));
 13056  06B3  3038               	movlw	56
 13057  06B4  3189  2166  3186   	fcall	_setPercentValue
 13058  06B7  0020               	movlb	0	; select bank0
 13059  06B8  00E2               	movwf	??_Flash_Memory_Initialization
 13060  06B9  0862               	movf	??_Flash_Memory_Initialization,w
 13061  06BA  00E3               	movwf	Flash_Memory_Initialization@i
 13062                           
 13063                           ;MCU_B1.c: 949: setMemory_Data(0, 0xff);
 13064  06BB  30FF               	movlw	255
 13065  06BC  00E2               	movwf	??_Flash_Memory_Initialization
 13066  06BD  0862               	movf	??_Flash_Memory_Initialization,w
 13067  06BE  00A0               	movwf	setMemory_Data@data
 13068  06BF  3000               	movlw	0
 13069  06C0  319B  2328  3186   	fcall	_setMemory_Data
 13070                           
 13071                           ;MCU_B1.c: 950: setMemory_Data(1, 0xff);
 13072  06C3  30FF               	movlw	255
 13073  06C4  0020               	movlb	0	; select bank0
 13074  06C5  00E2               	movwf	??_Flash_Memory_Initialization
 13075  06C6  0862               	movf	??_Flash_Memory_Initialization,w
 13076  06C7  00A0               	movwf	setMemory_Data@data
 13077  06C8  3001               	movlw	1
 13078  06C9  319B  2328  3186   	fcall	_setMemory_Data
 13079                           
 13080                           ;MCU_B1.c: 951: setMemory_Data(2, 0xff);
 13081  06CC  30FF               	movlw	255
 13082  06CD  0020               	movlb	0	; select bank0
 13083  06CE  00E2               	movwf	??_Flash_Memory_Initialization
 13084  06CF  0862               	movf	??_Flash_Memory_Initialization,w
 13085  06D0  00A0               	movwf	setMemory_Data@data
 13086  06D1  3002               	movlw	2
 13087  06D2  319B  2328  3186   	fcall	_setMemory_Data
 13088                           
 13089                           ;MCU_B1.c: 952: setMemory_Data(3, 0xff);
 13090  06D5  30FF               	movlw	255
 13091  06D6  0020               	movlb	0	; select bank0
 13092  06D7  00E2               	movwf	??_Flash_Memory_Initialization
 13093  06D8  0862               	movf	??_Flash_Memory_Initialization,w
 13094  06D9  00A0               	movwf	setMemory_Data@data
 13095  06DA  3003               	movlw	3
 13096  06DB  319B  2328  3186   	fcall	_setMemory_Data
 13097                           
 13098                           ;MCU_B1.c: 953: setMemory_Data(4, 0xff);
 13099  06DE  30FF               	movlw	255
 13100  06DF  0020               	movlb	0	; select bank0
 13101  06E0  00E2               	movwf	??_Flash_Memory_Initialization
 13102  06E1  0862               	movf	??_Flash_Memory_Initialization,w
 13103  06E2  00A0               	movwf	setMemory_Data@data
 13104  06E3  3004               	movlw	4
 13105  06E4  319B  2328  3186   	fcall	_setMemory_Data
 13106                           
 13107                           ;MCU_B1.c: 954: setMemory_Data(5, 0xff);
 13108  06E7  30FF               	movlw	255
 13109  06E8  0020               	movlb	0	; select bank0
 13110  06E9  00E2               	movwf	??_Flash_Memory_Initialization
 13111  06EA  0862               	movf	??_Flash_Memory_Initialization,w
 13112  06EB  00A0               	movwf	setMemory_Data@data
 13113  06EC  3005               	movlw	5
 13114  06ED  319B  2328  3186   	fcall	_setMemory_Data
 13115                           
 13116                           ;MCU_B1.c: 955: setMemory_Data(31, 0xaa);
 13117  06F0  30AA               	movlw	170
 13118  06F1  0020               	movlb	0	; select bank0
 13119  06F2  00E2               	movwf	??_Flash_Memory_Initialization
 13120  06F3  0862               	movf	??_Flash_Memory_Initialization,w
 13121  06F4  00A0               	movwf	setMemory_Data@data
 13122  06F5  301F               	movlw	31
 13123  06F6  319B  2328  3186   	fcall	_setMemory_Data
 13124                           
 13125                           ;MCU_B1.c: 956: product->Data[21] = i;
 13126  06F9  0020               	movlb	0	; select bank0
 13127  06FA  0863               	movf	Flash_Memory_Initialization@i,w
 13128  06FB  00E2               	movwf	??_Flash_Memory_Initialization
 13129  06FC  087A               	movf	_product,w
 13130  06FD  3E15               	addlw	21
 13131  06FE  0086               	movwf	6
 13132  06FF  3002               	movlw	2	; select bank4/5
 13133  0700  0087               	movwf	7
 13134  0701  0862               	movf	??_Flash_Memory_Initialization,w
 13135  0702  0081               	movwf	1
 13136                           
 13137                           ;MCU_B1.c: 957: product->Data[22] = i;
 13138  0703  0863               	movf	Flash_Memory_Initialization@i,w
 13139  0704  00E2               	movwf	??_Flash_Memory_Initialization
 13140  0705  087A               	movf	_product,w
 13141  0706  3E16               	addlw	22
 13142  0707  0086               	movwf	6
 13143  0708  3002               	movlw	2	; select bank4/5
 13144  0709  0087               	movwf	7
 13145  070A  0862               	movf	??_Flash_Memory_Initialization,w
 13146  070B  0081               	movwf	1
 13147                           
 13148                           ;MCU_B1.c: 958: product->Data[23] = i;
 13149  070C  0863               	movf	Flash_Memory_Initialization@i,w
 13150  070D  00E2               	movwf	??_Flash_Memory_Initialization
 13151  070E  087A               	movf	_product,w
 13152  070F  3E17               	addlw	23
 13153  0710  0086               	movwf	6
 13154  0711  3002               	movlw	2	; select bank4/5
 13155  0712  0087               	movwf	7
 13156  0713  0862               	movf	??_Flash_Memory_Initialization,w
 13157  0714  0081               	movwf	1
 13158                           
 13159                           ;MCU_B1.c: 959: GIE = 0;
 13160  0715  138B               	bcf	11,7	;volatile
 13161                           
 13162                           ;MCU_B1.c: 960: Flash_Memory_Write();
 13163  0716  3191  2116         	fcall	_Flash_Memory_Write
 13164                           
 13165                           ;MCU_B1.c: 961: GIE = 1;
 13166  0718  178B               	bsf	11,7	;volatile
 13167                           
 13168                           ;MCU_B1.c: 962: myMain.FirstOpen = 1;
 13169  0719  0022               	movlb	2	; select bank2
 13170  071A  15A0               	bsf	_myMain^(0+256),3
 13171                           
 13172                           ;MCU_B1.c: 963: myMain.First = 1;
 13173  071B  16A0               	bsf	_myMain^(0+256),5
 13174  071C  0008               	return
 13175  071D                     __end_of_Flash_Memory_Initialization:	
 13176                           
 13177                           	psect	text84
 13178  1B28                     __ptext84:	
 13179 ;; *************** function _setMemory_Data *****************
 13180 ;; Defined at:
 13181 ;;		line 1078 in file "../src/MCU_B1.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;  address         1    wreg     unsigned char 
 13184 ;;  data            1    0[BANK0 ] unsigned char 
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;  address         1    2[BANK0 ] unsigned char 
 13187 ;; Return value:  Size  Location     Type
 13188 ;;		None               void
 13189 ;; Registers used:
 13190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13191 ;; Tracked objects:
 13192 ;;		On entry : 0/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13196 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;Total ram usage:        3 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:    5
 13203 ;; This function calls:
 13204 ;;		Nothing
 13205 ;; This function is called by:
 13206 ;;		_Flash_Memory_Initialization
 13207 ;;		_Flash_Memory_Modify
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           
 13212                           ;psect for function _setMemory_Data
 13213  1B28                     _setMemory_Data:	
 13214                           
 13215                           ;incstack = 0
 13216                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13217                           ;setMemory_Data@address stored from wreg
 13218  1B28  0020               	movlb	0	; select bank0
 13219  1B29  00A2               	movwf	setMemory_Data@address
 13220                           
 13221                           ;MCU_B1.c: 1079: Memory.Data[address] = data;
 13222  1B2A  0820               	movf	setMemory_Data@data,w
 13223  1B2B  00A1               	movwf	??_setMemory_Data
 13224  1B2C  0822               	movf	setMemory_Data@address,w
 13225  1B2D  3E20               	addlw	_Memory& (0+255)
 13226  1B2E  0086               	movwf	6
 13227  1B2F  3002               	movlw	2	; select bank4/5
 13228  1B30  0087               	movwf	7
 13229  1B31  0821               	movf	??_setMemory_Data,w
 13230  1B32  0081               	movwf	1
 13231  1B33  0008               	return
 13232  1B34                     __end_of_setMemory_Data:	
 13233                           
 13234                           	psect	text85
 13235  1116                     __ptext85:	
 13236 ;; *************** function _Flash_Memory_Write *****************
 13237 ;; Defined at:
 13238 ;;		line 1011 in file "../src/MCU_B1.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;		None
 13241 ;; Auto vars:     Size  Location     Type
 13242 ;;  i               1    1[BANK0 ] unsigned char 
 13243 ;; Return value:  Size  Location     Type
 13244 ;;		None               void
 13245 ;; Registers used:
 13246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13247 ;; Tracked objects:
 13248 ;;		On entry : 0/0
 13249 ;;		On exit  : 0/0
 13250 ;;		Unchanged: 0/0
 13251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;Total ram usage:        2 bytes
 13257 ;; Hardware stack levels used:    1
 13258 ;; Hardware stack levels required when called:    6
 13259 ;; This function calls:
 13260 ;;		_Flash_Memory_Unlock
 13261 ;; This function is called by:
 13262 ;;		_Flash_Memory_Initialization
 13263 ;;		_Flash_Memory_Modify
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _Flash_Memory_Write
 13269  1116                     _Flash_Memory_Write:	
 13270                           
 13271                           ;MCU_B1.c: 1012: char i = 0;
 13272                           
 13273                           ;incstack = 0
 13274                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13275  1116  0020               	movlb	0	; select bank0
 13276  1117  01A1               	clrf	Flash_Memory_Write@i
 13277                           
 13278                           ;MCU_B1.c: 1013: CFGS = 0;
 13279  1118  0023               	movlb	3	; select bank3
 13280  1119  1315               	bcf	21,6	;volatile
 13281                           
 13282                           ;MCU_B1.c: 1014: PMADRH = 0x30;
 13283  111A  3030               	movlw	48
 13284  111B  0092               	movwf	18	;volatile
 13285                           
 13286                           ;MCU_B1.c: 1015: PMDATH = 0;
 13287  111C  0194               	clrf	20	;volatile
 13288                           
 13289                           ;MCU_B1.c: 1016: FREE = 0;
 13290  111D  1215               	bcf	21,4	;volatile
 13291                           
 13292                           ;MCU_B1.c: 1017: LWLO = 1;
 13293  111E  1695               	bsf	21,5	;volatile
 13294                           
 13295                           ;MCU_B1.c: 1018: WREN = 1;
 13296  111F  1515               	bsf	21,2	;volatile
 13297                           
 13298                           ;MCU_B1.c: 1019: for (i = 0; i < 32; i++) {
 13299  1120  0020               	movlb	0	; select bank0
 13300  1121  01A1               	clrf	Flash_Memory_Write@i
 13301  1122  3020               	movlw	32
 13302  1123  0221               	subwf	Flash_Memory_Write@i,w
 13303  1124  1803               	btfsc	3,0
 13304  1125  293E               	goto	l1352
 13305  1126                     l9869:	
 13306                           
 13307                           ;MCU_B1.c: 1020: PMADRL = i;
 13308  1126  0821               	movf	Flash_Memory_Write@i,w
 13309  1127  0023               	movlb	3	; select bank3
 13310  1128  0091               	movwf	17	;volatile
 13311                           
 13312                           ;MCU_B1.c: 1021: PMDATL = Memory.Data[i];
 13313  1129  0020               	movlb	0	; select bank0
 13314  112A  0821               	movf	Flash_Memory_Write@i,w
 13315  112B  3E20               	addlw	_Memory& (0+255)
 13316  112C  0086               	movwf	6
 13317  112D  3002               	movlw	2	; select bank4/5
 13318  112E  0087               	movwf	7
 13319  112F  0801               	movf	1,w
 13320  1130  0023               	movlb	3	; select bank3
 13321  1131  0093               	movwf	19	;volatile
 13322                           
 13323                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 13324  1132  319A  22FE  3191   	fcall	_Flash_Memory_Unlock
 13325  1135  3001               	movlw	1
 13326  1136  0020               	movlb	0	; select bank0
 13327  1137  00A0               	movwf	??_Flash_Memory_Write
 13328  1138  0820               	movf	??_Flash_Memory_Write,w
 13329  1139  07A1               	addwf	Flash_Memory_Write@i,f
 13330  113A  3020               	movlw	32
 13331  113B  0221               	subwf	Flash_Memory_Write@i,w
 13332  113C  1C03               	skipc
 13333  113D  2926               	goto	l9869
 13334  113E                     l1352:	
 13335                           
 13336                           ;MCU_B1.c: 1023: }
 13337                           ;MCU_B1.c: 1024: LWLO = 0;
 13338  113E  0023               	movlb	3	; select bank3
 13339  113F  1295               	bcf	21,5	;volatile
 13340                           
 13341                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 13342  1140  319A  22FE         	fcall	_Flash_Memory_Unlock
 13343                           
 13344                           ;MCU_B1.c: 1026: WREN = 0;
 13345  1142  0023               	movlb	3	; select bank3
 13346  1143  1115               	bcf	21,2	;volatile
 13347  1144  0008               	return
 13348  1145                     __end_of_Flash_Memory_Write:	
 13349                           
 13350                           	psect	text86
 13351  1AFE                     __ptext86:	
 13352 ;; *************** function _Flash_Memory_Unlock *****************
 13353 ;; Defined at:
 13354 ;;		line 990 in file "../src/MCU_B1.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;		None
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;		None
 13359 ;; Return value:  Size  Location     Type
 13360 ;;		None               void
 13361 ;; Registers used:
 13362 ;;		wreg
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;Total ram usage:        0 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    5
 13375 ;; This function calls:
 13376 ;;		Nothing
 13377 ;; This function is called by:
 13378 ;;		_Flash_Memory_Write
 13379 ;;		_Flash_Memory_Erasing
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           
 13384                           ;psect for function _Flash_Memory_Unlock
 13385  1AFE                     _Flash_Memory_Unlock:	
 13386                           
 13387                           ;MCU_B1.c: 991: PMCON2 = 0x55;
 13388                           
 13389                           ;incstack = 0
 13390                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13391  1AFE  3055               	movlw	85
 13392  1AFF  0023               	movlb	3	; select bank3
 13393  1B00  0096               	movwf	22	;volatile
 13394                           
 13395                           ;MCU_B1.c: 992: PMCON2 = 0xaa;
 13396  1B01  30AA               	movlw	170
 13397  1B02  0096               	movwf	22	;volatile
 13398                           
 13399                           ;MCU_B1.c: 993: WR = 1;
 13400  1B03  1495               	bsf	21,1	;volatile
 13401                           
 13402                           ;MCU_B1.c: 994: __nop();
 13403  1B04  0000               	nop
 13404                           
 13405                           ;MCU_B1.c: 995: __nop();
 13406  1B05  0000               	nop
 13407  1B06  0008               	return
 13408  1B07                     __end_of_Flash_Memory_Unlock:	
 13409                           
 13410                           	psect	text87
 13411  1DBF                     __ptext87:	
 13412 ;; *************** function _Flash_Memory_Read *****************
 13413 ;; Defined at:
 13414 ;;		line 999 in file "../src/MCU_B1.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;  address         1    wreg     unsigned char 
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;  address         1    2[BANK0 ] unsigned char 
 13419 ;;  ret             1    3[BANK0 ] unsigned char 
 13420 ;;  i               1    1[BANK0 ] unsigned char 
 13421 ;; Return value:  Size  Location     Type
 13422 ;;                  1    wreg      unsigned char 
 13423 ;; Registers used:
 13424 ;;		wreg, status,2
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;Total ram usage:        4 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    5
 13437 ;; This function calls:
 13438 ;;		Nothing
 13439 ;; This function is called by:
 13440 ;;		_Flash_Memory_Initialization
 13441 ;;		_Flash_Memory_Modify
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           
 13446                           ;psect for function _Flash_Memory_Read
 13447  1DBF                     _Flash_Memory_Read:	
 13448                           
 13449                           ;incstack = 0
 13450                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13451                           ;Flash_Memory_Read@address stored from wreg
 13452  1DBF  0020               	movlb	0	; select bank0
 13453  1DC0  00A2               	movwf	Flash_Memory_Read@address
 13454                           
 13455                           ;MCU_B1.c: 1000: char i = 0, ret = 0;
 13456  1DC1  01A1               	clrf	Flash_Memory_Read@i
 13457  1DC2  01A3               	clrf	Flash_Memory_Read@ret
 13458                           
 13459                           ;MCU_B1.c: 1001: PMADRH = 0x30;
 13460  1DC3  3030               	movlw	48
 13461  1DC4  0023               	movlb	3	; select bank3
 13462  1DC5  0092               	movwf	18	;volatile
 13463                           
 13464                           ;MCU_B1.c: 1002: PMADRL = address;
 13465  1DC6  0020               	movlb	0	; select bank0
 13466  1DC7  0822               	movf	Flash_Memory_Read@address,w
 13467  1DC8  0023               	movlb	3	; select bank3
 13468  1DC9  0091               	movwf	17	;volatile
 13469                           
 13470                           ;MCU_B1.c: 1003: CFGS = 0;
 13471  1DCA  1315               	bcf	21,6	;volatile
 13472                           
 13473                           ;MCU_B1.c: 1004: RD = 1;
 13474  1DCB  1415               	bsf	21,0	;volatile
 13475                           
 13476                           ;MCU_B1.c: 1005: i = PMDATH;
 13477  1DCC  0814               	movf	20,w	;volatile
 13478  1DCD  0020               	movlb	0	; select bank0
 13479  1DCE  00A0               	movwf	??_Flash_Memory_Read
 13480  1DCF  0820               	movf	??_Flash_Memory_Read,w
 13481  1DD0  00A1               	movwf	Flash_Memory_Read@i
 13482                           
 13483                           ;MCU_B1.c: 1006: ret = PMDATL;
 13484  1DD1  0023               	movlb	3	; select bank3
 13485  1DD2  0813               	movf	19,w	;volatile
 13486  1DD3  0020               	movlb	0	; select bank0
 13487  1DD4  00A0               	movwf	??_Flash_Memory_Read
 13488  1DD5  0820               	movf	??_Flash_Memory_Read,w
 13489  1DD6  00A3               	movwf	Flash_Memory_Read@ret
 13490                           
 13491                           ;MCU_B1.c: 1007: return ret;
 13492  1DD7  0823               	movf	Flash_Memory_Read@ret,w
 13493  1DD8  0008               	return
 13494  1DD9                     __end_of_Flash_Memory_Read:	
 13495                           
 13496                           	psect	text88
 13497  055D                     __ptext88:	
 13498 ;; *************** function _Exception_Main *****************
 13499 ;; Defined at:
 13500 ;;		line 523 in file "../src/Main_B1.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;		None
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  i               2    4[BANK1 ] int 
 13505 ;;  i               2    2[BANK1 ] int 
 13506 ;;  lights          1    6[BANK1 ] unsigned char 
 13507 ;;  error           1    1[BANK1 ] unsigned char 
 13508 ;;  count           1    0[BANK1 ] unsigned char 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;		None               void
 13511 ;; Registers used:
 13512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        8 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    9
 13525 ;; This function calls:
 13526 ;;		_getDimmerLights_Line
 13527 ;;		_getDimmerLights_Status
 13528 ;;		_getMain_All_Error_Status
 13529 ;;		_getMain_LightsStatus
 13530 ;;		_setBuz
 13531 ;;		_setDimmerLights_SwOff
 13532 ;;		_setLED
 13533 ;; This function is called by:
 13534 ;;		_main
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538                           
 13539                           ;psect for function _Exception_Main
 13540  055D                     _Exception_Main:	
 13541                           
 13542                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 13543                           
 13544                           ;incstack = 0
 13545                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13546  055D  3000               	movlw	0
 13547  055E  3191  2176  3185   	fcall	_getMain_All_Error_Status
 13548  0561  0020               	movlb	0	; select bank0
 13549  0562  00EB               	movwf	??_Exception_Main
 13550  0563  086B               	movf	??_Exception_Main,w
 13551  0564  0021               	movlb	1	; select bank1
 13552  0565  00E9               	movwf	Exception_Main@error^(0+128)
 13553                           
 13554                           ;Main_B1.c: 525: char lights = 0, count = 2;
 13555  0566  01EE               	clrf	Exception_Main@lights^(0+128)
 13556  0567  3002               	movlw	2
 13557  0568  0020               	movlb	0	; select bank0
 13558  0569  00EB               	movwf	??_Exception_Main
 13559  056A  086B               	movf	??_Exception_Main,w
 13560  056B  0021               	movlb	1	; select bank1
 13561  056C  00E8               	movwf	Exception_Main@count^(0+128)
 13562                           
 13563                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 13564  056D  0022               	movlb	2	; select bank2
 13565  056E  1DAB               	btfss	(_myMain^(0+256)+11),3
 13566  056F  2D7F               	goto	l10959
 13567                           
 13568                           ;Main_B1.c: 527: if (error == 0) {
 13569  0570  0021               	movlb	1	; select bank1
 13570  0571  08E9               	movf	Exception_Main@error^(0+128),f
 13571  0572  1D03               	skipz
 13572  0573  0008               	return
 13573                           
 13574                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 13575  0574  0022               	movlb	2	; select bank2
 13576  0575  11AB               	bcf	(_myMain^(0+256)+11),3
 13577                           
 13578                           ;Main_B1.c: 533: setLED(99, 10);
 13579  0576  300A               	movlw	10
 13580  0577  0020               	movlb	0	; select bank0
 13581  0578  00EB               	movwf	??_Exception_Main
 13582  0579  086B               	movf	??_Exception_Main,w
 13583  057A  00A1               	movwf	setLED@command
 13584  057B  3063               	movlw	99
 13585  057C  3195  25EB         	fcall	_setLED
 13586                           
 13587                           ;Main_B1.c: 535: }
 13588                           ;Main_B1.c: 536: } else {
 13589  057E  0008               	return
 13590  057F                     l10959:	
 13591                           
 13592                           ;Main_B1.c: 537: if (error != 0) {
 13593  057F  0021               	movlb	1	; select bank1
 13594  0580  0869               	movf	Exception_Main@error^(0+128),w
 13595  0581  1903               	btfsc	3,2
 13596  0582  0008               	return
 13597                           
 13598                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 13599  0583  0022               	movlb	2	; select bank2
 13600  0584  15AB               	bsf	(_myMain^(0+256)+11),3
 13601                           
 13602                           ;Main_B1.c: 541: setLED(99, 11);
 13603  0585  300B               	movlw	11
 13604  0586  0020               	movlb	0	; select bank0
 13605  0587  00EB               	movwf	??_Exception_Main
 13606  0588  086B               	movf	??_Exception_Main,w
 13607  0589  00A1               	movwf	setLED@command
 13608  058A  3063               	movlw	99
 13609  058B  3195  25EB  3185   	fcall	_setLED
 13610                           
 13611                           ;Main_B1.c: 543: switch (error) {
 13612  058E  2E36               	goto	l11007
 13613  058F                     l10965:	
 13614                           ;Main_B1.c: 544: case 2:
 13615                           
 13616                           
 13617                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 13618  058F  319C  2475  3185   	fcall	_getMain_LightsStatus
 13619  0592  3A01               	xorlw	1
 13620  0593  1D03               	skipz
 13621  0594  2D9E               	goto	l10969
 13622                           
 13623                           ;Main_B1.c: 546: setBuz(10, 300);
 13624  0595  302C               	movlw	44
 13625  0596  0020               	movlb	0	; select bank0
 13626  0597  00A9               	movwf	setBuz@time
 13627  0598  3001               	movlw	1
 13628  0599  00AA               	movwf	setBuz@time+1
 13629  059A  300A               	movlw	10
 13630  059B  3196  2697  3185   	fcall	_setBuz
 13631  059E                     l10969:	
 13632                           
 13633                           ;Main_B1.c: 547: }
 13634                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 13635  059E  0021               	movlb	1	; select bank1
 13636  059F  01EA               	clrf	Exception_Main@i^(0+128)
 13637  05A0  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 13638  05A1                     l10979:	
 13639  05A1  086B               	movf	(Exception_Main@i+1)^(0+128),w
 13640  05A2  3A80               	xorlw	128
 13641  05A3  0020               	movlb	0	; select bank0
 13642  05A4  00EB               	movwf	??_Exception_Main
 13643  05A5  3080               	movlw	128
 13644  05A6  026B               	subwf	??_Exception_Main,w
 13645  05A7  1D03               	skipz
 13646  05A8  2DAC               	goto	u12895
 13647  05A9  0021               	movlb	1	; select bank1
 13648  05AA  0868               	movf	Exception_Main@count^(0+128),w
 13649  05AB  026A               	subwf	Exception_Main@i^(0+128),w
 13650  05AC                     u12895:	
 13651  05AC  1803               	btfsc	3,0
 13652  05AD  2DD0               	goto	u12890
 13653                           
 13654                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 13655  05AE  0021               	movlb	1	; select bank1
 13656  05AF  086A               	movf	Exception_Main@i^(0+128),w
 13657  05B0  3E01               	addlw	1
 13658  05B1  319B  23D4  3185   	fcall	_getDimmerLights_Status
 13659  05B4  3A01               	xorlw	1
 13660  05B5  1D03               	skipz
 13661  05B6  2DCA               	goto	l10977
 13662                           
 13663                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 13664  05B7  0020               	movlb	0	; select bank0
 13665  05B8  086F               	movf	_DimmerLights,w
 13666  05B9  3E0B               	addlw	11
 13667  05BA  0086               	movwf	6
 13668  05BB  3001               	movlw	1	; select bank2/3
 13669  05BC  0087               	movwf	7
 13670  05BD  1481               	bsf	1,1
 13671                           
 13672                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 13673  05BE  086F               	movf	_DimmerLights,w
 13674  05BF  3E02               	addlw	2
 13675  05C0  0086               	movwf	6
 13676  05C1  3001               	movlw	1	; select bank2/3
 13677  05C2  0087               	movwf	7
 13678  05C3  1081               	bcf	1,1
 13679                           
 13680                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 13681  05C4  0021               	movlb	1	; select bank1
 13682  05C5  086A               	movf	Exception_Main@i^(0+128),w
 13683  05C6  3E01               	addlw	1
 13684  05C7  3194  2454  3185   	fcall	_setDimmerLights_SwOff
 13685  05CA                     l10977:	
 13686  05CA  3001               	movlw	1
 13687  05CB  0021               	movlb	1	; select bank1
 13688  05CC  07EA               	addwf	Exception_Main@i^(0+128),f
 13689  05CD  3000               	movlw	0
 13690  05CE  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 13691  05CF  2DA1               	goto	l10979
 13692  05D0                     u12890:	
 13693  05D0  0021               	movlb	1	; select bank1
 13694  05D1  0008               	return
 13695  05D2                     l10981:	
 13696                           ;Main_B1.c: 558: case 3:
 13697                           
 13698                           ;Main_B1.c: 555: }
 13699                           ;Main_B1.c: 556: }
 13700                           ;Main_B1.c: 557: break;
 13701                           
 13702                           
 13703                           ;Main_B1.c: 560: setBuz(5, 300);
 13704  05D2  302C               	movlw	44
 13705  05D3  0020               	movlb	0	; select bank0
 13706  05D4  00A9               	movwf	setBuz@time
 13707  05D5  3001               	movlw	1
 13708  05D6  00AA               	movwf	setBuz@time+1
 13709  05D7  3005               	movlw	5
 13710  05D8  3196  2697  3185   	fcall	_setBuz
 13711                           
 13712                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 13713  05DB  319C  2488  3185   	fcall	_getDimmerLights_Line
 13714  05DE  0020               	movlb	0	; select bank0
 13715  05DF  00EB               	movwf	??_Exception_Main
 13716  05E0  086B               	movf	??_Exception_Main,w
 13717  05E1  0021               	movlb	1	; select bank1
 13718  05E2  00EE               	movwf	Exception_Main@lights^(0+128)
 13719                           
 13720                           ;Main_B1.c: 562: if (lights == 0) {
 13721  05E3  08EE               	movf	Exception_Main@lights^(0+128),f
 13722  05E4  1D03               	skipz
 13723  05E5  2E19               	goto	l10999
 13724                           
 13725                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 13726  05E6  01EC               	clrf	Exception_Main@i_3642^(0+128)
 13727  05E7  01ED               	clrf	(Exception_Main@i_3642+1)^(0+128)
 13728  05E8                     l10997:	
 13729  05E8  086D               	movf	(Exception_Main@i_3642+1)^(0+128),w
 13730  05E9  3A80               	xorlw	128
 13731  05EA  0020               	movlb	0	; select bank0
 13732  05EB  00EB               	movwf	??_Exception_Main
 13733  05EC  3080               	movlw	128
 13734  05ED  026B               	subwf	??_Exception_Main,w
 13735  05EE  1D03               	skipz
 13736  05EF  2DF3               	goto	u12925
 13737  05F0  0021               	movlb	1	; select bank1
 13738  05F1  0868               	movf	Exception_Main@count^(0+128),w
 13739  05F2  026C               	subwf	Exception_Main@i_3642^(0+128),w
 13740  05F3                     u12925:	
 13741  05F3  1803               	btfsc	3,0
 13742  05F4  2E17               	goto	u12920
 13743                           
 13744                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 13745  05F5  0021               	movlb	1	; select bank1
 13746  05F6  086C               	movf	Exception_Main@i_3642^(0+128),w
 13747  05F7  3E01               	addlw	1
 13748  05F8  319B  23D4  3185   	fcall	_getDimmerLights_Status
 13749  05FB  3A01               	xorlw	1
 13750  05FC  1D03               	skipz
 13751  05FD  2E11               	goto	l10995
 13752                           
 13753                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 13754  05FE  0020               	movlb	0	; select bank0
 13755  05FF  086F               	movf	_DimmerLights,w
 13756  0600  3E0B               	addlw	11
 13757  0601  0086               	movwf	6
 13758  0602  3001               	movlw	1	; select bank2/3
 13759  0603  0087               	movwf	7
 13760  0604  1481               	bsf	1,1
 13761                           
 13762                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 13763  0605  086F               	movf	_DimmerLights,w
 13764  0606  3E02               	addlw	2
 13765  0607  0086               	movwf	6
 13766  0608  3001               	movlw	1	; select bank2/3
 13767  0609  0087               	movwf	7
 13768  060A  1081               	bcf	1,1
 13769                           
 13770                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 13771  060B  0021               	movlb	1	; select bank1
 13772  060C  086C               	movf	Exception_Main@i_3642^(0+128),w
 13773  060D  3E01               	addlw	1
 13774  060E  3194  2454  3185   	fcall	_setDimmerLights_SwOff
 13775  0611                     l10995:	
 13776  0611  3001               	movlw	1
 13777  0612  0021               	movlb	1	; select bank1
 13778  0613  07EC               	addwf	Exception_Main@i_3642^(0+128),f
 13779  0614  3000               	movlw	0
 13780  0615  3DED               	addwfc	(Exception_Main@i_3642+1)^(0+128),f
 13781  0616  2DE8               	goto	l10997
 13782  0617                     u12920:	
 13783  0617  0021               	movlb	1	; select bank1
 13784  0618  0008               	return
 13785  0619                     l10999:	
 13786                           ;Main_B1.c: 570: }
 13787                           ;Main_B1.c: 571: }
 13788                           ;Main_B1.c: 572: } else {
 13789                           
 13790                           
 13791                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 13792  0619  0021               	movlb	1	; select bank1
 13793  061A  086E               	movf	Exception_Main@lights^(0+128),w
 13794  061B  319B  23D4  3185   	fcall	_getDimmerLights_Status
 13795  061E  3A01               	xorlw	1
 13796  061F  1903               	btfsc	3,2
 13797  0620  2E23               	goto	l11001
 13798  0621  0021               	movlb	1	; select bank1
 13799  0622  0008               	return
 13800  0623                     l11001:	
 13801                           
 13802                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 13803  0623  0020               	movlb	0	; select bank0
 13804  0624  086F               	movf	_DimmerLights,w
 13805  0625  3E0B               	addlw	11
 13806  0626  0086               	movwf	6
 13807  0627  3001               	movlw	1	; select bank2/3
 13808  0628  0087               	movwf	7
 13809  0629  1481               	bsf	1,1
 13810                           
 13811                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 13812  062A  086F               	movf	_DimmerLights,w
 13813  062B  3E02               	addlw	2
 13814  062C  0086               	movwf	6
 13815  062D  3001               	movlw	1	; select bank2/3
 13816  062E  0087               	movwf	7
 13817  062F  1081               	bcf	1,1
 13818                           
 13819                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 13820  0630  0021               	movlb	1	; select bank1
 13821  0631  086E               	movf	Exception_Main@lights^(0+128),w
 13822  0632  3194  2454         	fcall	_setDimmerLights_SwOff
 13823  0634  0021               	movlb	1	; select bank1
 13824  0635  0008               	return
 13825  0636                     l11007:	
 13826                           ;Main_B1.c: 582: }
 13827                           
 13828                           ;Main_B1.c: 579: }
 13829                           ;Main_B1.c: 580: }
 13830                           ;Main_B1.c: 581: break;
 13831                           
 13832  0636  0021               	movlb	1	; select bank1
 13833  0637  0869               	movf	Exception_Main@error^(0+128),w
 13834                           
 13835                           ; Switch size 1, requested type "space"
 13836                           ; Number of cases is 2, Range of values is 2 to 3
 13837                           ; switch strategies available:
 13838                           ; Name         Instructions Cycles
 13839                           ; simple_byte            7     4 (average)
 13840                           ; direct_byte           13     9 (fixed)
 13841                           ; jumptable            263     9 (fixed)
 13842                           ;	Chosen strategy is simple_byte
 13843  0638  3A02               	xorlw	2	; case 2
 13844  0639  1903               	skipnz
 13845  063A  2D8F               	goto	l10965
 13846  063B  3A01               	xorlw	1	; case 3
 13847  063C  1903               	skipnz
 13848  063D  2DD2               	goto	l10981
 13849  063E  2E40               	goto	l1612
 13850  063F  0008               	return
 13851  0640                     l1612:	
 13852  0640  0008               	return
 13853  0641                     __end_of_Exception_Main:	
 13854                           
 13855                           	psect	text89
 13856  1C88                     __ptext89:	
 13857 ;; *************** function _getDimmerLights_Line *****************
 13858 ;; Defined at:
 13859 ;;		line 744 in file "../src/Dimmer_B1.c"
 13860 ;; Parameters:    Size  Location     Type
 13861 ;;		None
 13862 ;; Auto vars:     Size  Location     Type
 13863 ;;  line            1    1[BANK0 ] unsigned char 
 13864 ;; Return value:  Size  Location     Type
 13865 ;;                  1    wreg      unsigned char 
 13866 ;; Registers used:
 13867 ;;		wreg, status,2
 13868 ;; Tracked objects:
 13869 ;;		On entry : 0/0
 13870 ;;		On exit  : 0/0
 13871 ;;		Unchanged: 0/0
 13872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;Total ram usage:        2 bytes
 13878 ;; Hardware stack levels used:    1
 13879 ;; Hardware stack levels required when called:    5
 13880 ;; This function calls:
 13881 ;;		Nothing
 13882 ;; This function is called by:
 13883 ;;		_Exception_Main
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           
 13888                           ;psect for function _getDimmerLights_Line
 13889  1C88                     _getDimmerLights_Line:	
 13890                           
 13891                           ;Dimmer_B1.c: 745: char line = 0;
 13892                           
 13893                           ;incstack = 0
 13894                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13895  1C88  0020               	movlb	0	; select bank0
 13896  1C89  01A1               	clrf	getDimmerLights_Line@line
 13897                           
 13898                           ;Dimmer_B1.c: 747: if (DimmerLights1.Line == 1) {
 13899  1C8A  0023               	movlb	3	; select bank3
 13900  1C8B  1F48               	btfss	(_DimmerLights1^(0+384)+10),6
 13901  1C8C  2C91               	goto	l864
 13902                           
 13903                           ;Dimmer_B1.c: 748: line = 1;
 13904  1C8D  0020               	movlb	0	; select bank0
 13905  1C8E  01A1               	clrf	getDimmerLights_Line@line
 13906  1C8F  0AA1               	incf	getDimmerLights_Line@line,f
 13907                           
 13908                           ;Dimmer_B1.c: 749: }
 13909  1C90  2C98               	goto	l865
 13910  1C91                     l864:	
 13911                           
 13912                           ;Dimmer_B1.c: 752: else if (DimmerLights2.Line == 1) {
 13913  1C91  1F59               	btfss	(_DimmerLights2^(0+384)+10),6
 13914  1C92  2C98               	goto	l865
 13915                           
 13916                           ;Dimmer_B1.c: 753: line = 2;
 13917  1C93  3002               	movlw	2
 13918  1C94  0020               	movlb	0	; select bank0
 13919  1C95  00A0               	movwf	??_getDimmerLights_Line
 13920  1C96  0820               	movf	??_getDimmerLights_Line,w
 13921  1C97  00A1               	movwf	getDimmerLights_Line@line
 13922  1C98                     l865:	
 13923                           
 13924                           ;Dimmer_B1.c: 754: }
 13925                           ;Dimmer_B1.c: 761: return line;
 13926  1C98  0020               	movlb	0	; select bank0
 13927  1C99  0821               	movf	getDimmerLights_Line@line,w
 13928  1C9A  0008               	return
 13929  1C9B                     __end_of_getDimmerLights_Line:	
 13930                           
 13931                           	psect	text90
 13932  1EC3                     __ptext90:	
 13933 ;; *************** function _DimmerLights_Main *****************
 13934 ;; Defined at:
 13935 ;;		line 502 in file "../src/Dimmer_B1.c"
 13936 ;; Parameters:    Size  Location     Type
 13937 ;;		None
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;		None
 13940 ;; Return value:  Size  Location     Type
 13941 ;;		None               void
 13942 ;; Registers used:
 13943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;Total ram usage:        0 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; Hardware stack levels required when called:   10
 13956 ;; This function calls:
 13957 ;;		_getLoad_OK
 13958 ;;		_getMain_All_Error_Status
 13959 ;;		_getMain_LightsStatus
 13960 ;;		_setDimmerLights_Main
 13961 ;; This function is called by:
 13962 ;;		_main
 13963 ;; This function uses a non-reentrant model
 13964 ;;
 13965                           
 13966                           
 13967                           ;psect for function _DimmerLights_Main
 13968  1EC3                     _DimmerLights_Main:	
 13969                           
 13970                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 13971                           
 13972                           ;incstack = 0
 13973                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13974  1EC3  0021               	movlb	1	; select bank1
 13975  1EC4  1D3A               	btfss	_Dimmer^(0+128),2	;volatile
 13976  1EC5  2EDB               	goto	l10595
 13977                           
 13978                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13979  1EC6  319A  22D5  319E   	fcall	_getLoad_OK
 13980  1EC9  3A01               	xorlw	1
 13981  1ECA  1903               	skipnz
 13982  1ECB  2ED9               	goto	l811
 13983  1ECC  3000               	movlw	0
 13984  1ECD  3191  2176  319E   	fcall	_getMain_All_Error_Status
 13985  1ED0  3800               	iorlw	0
 13986  1ED1  1D03               	skipz
 13987  1ED2  2ED9               	goto	l811
 13988  1ED3  319C  2475  319E   	fcall	_getMain_LightsStatus
 13989  1ED6  3800               	iorlw	0
 13990  1ED7  1D03               	skipz
 13991  1ED8  2EDB               	goto	l10595
 13992  1ED9                     l811:	
 13993                           
 13994                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 13995  1ED9  0021               	movlb	1	; select bank1
 13996  1EDA  113A               	bcf	_Dimmer^(0+128),2	;volatile
 13997  1EDB                     l10595:	
 13998                           
 13999                           ;Dimmer_B1.c: 517: }
 14000                           ;Dimmer_B1.c: 518: }
 14001                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 14002  1EDB  3001               	movlw	1
 14003  1EDC  318B  2303  319E   	fcall	_setDimmerLights_Main
 14004                           
 14005                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
 14006  1EDF  3002               	movlw	2
 14007  1EE0  318B  2303         	fcall	_setDimmerLights_Main
 14008  1EE2  0008               	return
 14009  1EE3                     __end_of_DimmerLights_Main:	
 14010                           
 14011                           	psect	text91
 14012  0B03                     __ptext91:	
 14013 ;; *************** function _setDimmerLights_Main *****************
 14014 ;; Defined at:
 14015 ;;		line 536 in file "../src/Dimmer_B1.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;  lights          1    wreg     unsigned char 
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;  lights          1   78[BANK0 ] unsigned char 
 14020 ;; Return value:  Size  Location     Type
 14021 ;;		None               void
 14022 ;; Registers used:
 14023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14024 ;; Tracked objects:
 14025 ;;		On entry : 0/0
 14026 ;;		On exit  : 0/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14033 ;;Total ram usage:        1 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; Hardware stack levels required when called:    9
 14036 ;; This function calls:
 14037 ;;		_DimmerLightsPointSelect
 14038 ;;		_getDimmerLights_Allow_Condition
 14039 ;;		_getMain_LightsStatus
 14040 ;;		_setDimmerLights
 14041 ;;		_setDimmerLights_Adj
 14042 ;; This function is called by:
 14043 ;;		_DimmerLights_Main
 14044 ;; This function uses a non-reentrant model
 14045 ;;
 14046                           
 14047                           
 14048                           ;psect for function _setDimmerLights_Main
 14049  0B03                     _setDimmerLights_Main:	
 14050                           
 14051                           ;incstack = 0
 14052                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14053                           ;setDimmerLights_Main@lights stored from wreg
 14054  0B03  0020               	movlb	0	; select bank0
 14055  0B04  00EE               	movwf	setDimmerLights_Main@lights
 14056                           
 14057                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 14058  0B05  086E               	movf	setDimmerLights_Main@lights,w
 14059  0B06  319C  2462  318B   	fcall	_DimmerLightsPointSelect
 14060                           
 14061                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 14062  0B09  0020               	movlb	0	; select bank0
 14063  0B0A  086F               	movf	_DimmerLights,w
 14064  0B0B  3E0A               	addlw	10
 14065  0B0C  0086               	movwf	6
 14066  0B0D  3001               	movlw	1	; select bank2/3
 14067  0B0E  0087               	movwf	7
 14068  0B0F  1C81               	btfss	1,1
 14069  0B10  2B32               	goto	l10057
 14070                           
 14071                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14072  0B11  086E               	movf	setDimmerLights_Main@lights,w
 14073  0B12  3192  224A  318B   	fcall	_getDimmerLights_Allow_Condition
 14074  0B15  3800               	iorlw	0
 14075  0B16  1D03               	skipz
 14076  0B17  0008               	return
 14077                           
 14078                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 14079  0B18  0020               	movlb	0	; select bank0
 14080  0B19  086F               	movf	_DimmerLights,w
 14081  0B1A  3E0A               	addlw	10
 14082  0B1B  0086               	movwf	6
 14083  0B1C  3001               	movlw	1	; select bank2/3
 14084  0B1D  0087               	movwf	7
 14085  0B1E  1081               	bcf	1,1
 14086                           
 14087                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 14088  0B1F  086F               	movf	_DimmerLights,w
 14089  0B20  3E0A               	addlw	10
 14090  0B21  0086               	movwf	6
 14091  0B22  3001               	movlw	1	; select bank2/3
 14092  0B23  0087               	movwf	7
 14093  0B24  1C01               	btfss	1,0
 14094  0B25  2B2C               	goto	l10055
 14095                           
 14096                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 14097  0B26  01EB               	clrf	setDimmerLights@status
 14098  0B27  0AEB               	incf	setDimmerLights@status,f
 14099  0B28  086E               	movf	setDimmerLights_Main@lights,w
 14100  0B29  3194  24F2         	fcall	_setDimmerLights
 14101                           
 14102                           ;Dimmer_B1.c: 544: } else {
 14103  0B2B  0008               	return
 14104  0B2C                     l10055:	
 14105                           
 14106                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 14107  0B2C  0020               	movlb	0	; select bank0
 14108  0B2D  01EB               	clrf	setDimmerLights@status
 14109  0B2E  086E               	movf	setDimmerLights_Main@lights,w
 14110  0B2F  3194  24F2         	fcall	_setDimmerLights
 14111                           
 14112                           ;Dimmer_B1.c: 546: }
 14113                           ;Dimmer_B1.c: 547: }
 14114                           ;Dimmer_B1.c: 548: } else {
 14115  0B31  0008               	return
 14116  0B32                     l10057:	
 14117                           
 14118                           ;Dimmer_B1.c: 549: if (getMain_LightsStatus() == 1) {
 14119  0B32  319C  2475  318B   	fcall	_getMain_LightsStatus
 14120  0B35  3A01               	xorlw	1
 14121  0B36  1D03               	skipz
 14122  0B37  2B61               	goto	l10069
 14123                           
 14124                           ;Dimmer_B1.c: 550: if (DimmerLights->TriggerAdj == 1) {
 14125  0B38  0020               	movlb	0	; select bank0
 14126  0B39  086F               	movf	_DimmerLights,w
 14127  0B3A  3E0A               	addlw	10
 14128  0B3B  0086               	movwf	6
 14129  0B3C  3001               	movlw	1	; select bank2/3
 14130  0B3D  0087               	movwf	7
 14131  0B3E  1D81               	btfss	1,3
 14132  0B3F  0008               	return
 14133                           
 14134                           ;Dimmer_B1.c: 551: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14135  0B40  086E               	movf	setDimmerLights_Main@lights,w
 14136  0B41  3192  224A  318B   	fcall	_getDimmerLights_Allow_Condition
 14137  0B44  3800               	iorlw	0
 14138  0B45  1D03               	skipz
 14139  0B46  0008               	return
 14140                           
 14141                           ;Dimmer_B1.c: 552: DimmerLights->TriggerAdj = 0;
 14142  0B47  0020               	movlb	0	; select bank0
 14143  0B48  086F               	movf	_DimmerLights,w
 14144  0B49  3E0A               	addlw	10
 14145  0B4A  0086               	movwf	6
 14146  0B4B  3001               	movlw	1	; select bank2/3
 14147  0B4C  0087               	movwf	7
 14148  0B4D  1181               	bcf	1,3
 14149                           
 14150                           ;Dimmer_B1.c: 553: if (DimmerLights->SwitchAdj == 1) {
 14151  0B4E  086F               	movf	_DimmerLights,w
 14152  0B4F  3E0A               	addlw	10
 14153  0B50  0086               	movwf	6
 14154  0B51  3001               	movlw	1	; select bank2/3
 14155  0B52  0087               	movwf	7
 14156  0B53  1D01               	btfss	1,2
 14157  0B54  2B5B               	goto	l10067
 14158                           
 14159                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 1);
 14160  0B55  01EB               	clrf	setDimmerLights_Adj@status
 14161  0B56  0AEB               	incf	setDimmerLights_Adj@status,f
 14162  0B57  086E               	movf	setDimmerLights_Main@lights,w
 14163  0B58  3196  263F         	fcall	_setDimmerLights_Adj
 14164                           
 14165                           ;Dimmer_B1.c: 555: } else {
 14166  0B5A  0008               	return
 14167  0B5B                     l10067:	
 14168                           
 14169                           ;Dimmer_B1.c: 556: setDimmerLights_Adj(lights, 0);
 14170  0B5B  0020               	movlb	0	; select bank0
 14171  0B5C  01EB               	clrf	setDimmerLights_Adj@status
 14172  0B5D  086E               	movf	setDimmerLights_Main@lights,w
 14173  0B5E  3196  263F         	fcall	_setDimmerLights_Adj
 14174                           
 14175                           ;Dimmer_B1.c: 557: }
 14176                           ;Dimmer_B1.c: 558: }
 14177                           ;Dimmer_B1.c: 559: }
 14178                           ;Dimmer_B1.c: 560: } else {
 14179  0B60  0008               	return
 14180  0B61                     l10069:	
 14181                           
 14182                           ;Dimmer_B1.c: 561: if (DimmerLights->TriggerAdj == 1) {
 14183  0B61  0020               	movlb	0	; select bank0
 14184  0B62  086F               	movf	_DimmerLights,w
 14185  0B63  3E0A               	addlw	10
 14186  0B64  0086               	movwf	6
 14187  0B65  3001               	movlw	1	; select bank2/3
 14188  0B66  0087               	movwf	7
 14189  0B67  1D81               	btfss	1,3
 14190  0B68  0008               	return
 14191                           
 14192                           ;Dimmer_B1.c: 562: DimmerLights->TriggerAdj = 0;
 14193  0B69  086F               	movf	_DimmerLights,w
 14194  0B6A  3E0A               	addlw	10
 14195  0B6B  0086               	movwf	6
 14196  0B6C  3001               	movlw	1	; select bank2/3
 14197  0B6D  0087               	movwf	7
 14198  0B6E  1181               	bcf	1,3
 14199  0B6F  0008               	return
 14200  0B70                     __end_of_setDimmerLights_Main:	
 14201                           
 14202                           	psect	text92
 14203  163F                     __ptext92:	
 14204 ;; *************** function _setDimmerLights_Adj *****************
 14205 ;; Defined at:
 14206 ;;		line 680 in file "../src/Dimmer_B1.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  lights          1    wreg     unsigned char 
 14209 ;;  status          1   75[BANK0 ] unsigned char 
 14210 ;; Auto vars:     Size  Location     Type
 14211 ;;  lights          1   77[BANK0 ] unsigned char 
 14212 ;; Return value:  Size  Location     Type
 14213 ;;		None               void
 14214 ;; Registers used:
 14215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14216 ;; Tracked objects:
 14217 ;;		On entry : 0/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14221 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;Total ram usage:        3 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; Hardware stack levels required when called:    8
 14228 ;; This function calls:
 14229 ;;		_setBuz
 14230 ;;		_setDimmerLights_Line
 14231 ;;		_setPercentValue
 14232 ;;		_setProductData
 14233 ;;		_setRF_DimmerLights
 14234 ;;		_setTxData
 14235 ;; This function is called by:
 14236 ;;		_setDimmerLights_Main
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function _setDimmerLights_Adj
 14242  163F                     _setDimmerLights_Adj:	
 14243                           
 14244                           ;incstack = 0
 14245                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14246                           ;setDimmerLights_Adj@lights stored from wreg
 14247  163F  0020               	movlb	0	; select bank0
 14248  1640  00ED               	movwf	setDimmerLights_Adj@lights
 14249                           
 14250                           ;Dimmer_B1.c: 682: if (status == 1) {
 14251  1641  086B               	movf	setDimmerLights_Adj@status,w
 14252  1642  3A01               	xorlw	1
 14253  1643  1D03               	skipz
 14254  1644  2E57               	goto	l9799
 14255                           
 14256                           ;Dimmer_B1.c: 683: DimmerLights->AdjSw = 1;
 14257  1645  0A6F               	incf	_DimmerLights,w
 14258  1646  0086               	movwf	6
 14259  1647  3001               	movlw	1	; select bank2/3
 14260  1648  0087               	movwf	7
 14261  1649  1701               	bsf	1,6
 14262                           
 14263                           ;Dimmer_B1.c: 684: DimmerLights->Signal = 1;
 14264  164A  0A6F               	incf	_DimmerLights,w
 14265  164B  0086               	movwf	6
 14266  164C  3001               	movlw	1	; select bank2/3
 14267  164D  0087               	movwf	7
 14268  164E  1681               	bsf	1,5
 14269                           
 14270                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 14271  164F  3064               	movlw	100
 14272  1650  00A9               	movwf	setBuz@time
 14273  1651  3000               	movlw	0
 14274  1652  00AA               	movwf	setBuz@time+1
 14275  1653  3001               	movlw	1
 14276  1654  3196  2697         	fcall	_setBuz
 14277                           
 14278                           ;Dimmer_B1.c: 686: } else if (status == 0) {
 14279  1656  0008               	return
 14280  1657                     l9799:	
 14281  1657  0020               	movlb	0	; select bank0
 14282  1658  08EB               	movf	setDimmerLights_Adj@status,f
 14283  1659  1D03               	skipz
 14284  165A  0008               	return
 14285                           
 14286                           ;Dimmer_B1.c: 687: Dimmer.Load_Status = 0;
 14287  165B  0021               	movlb	1	; select bank1
 14288  165C  11BA               	bcf	_Dimmer^(0+128),3	;volatile
 14289                           
 14290                           ;Dimmer_B1.c: 688: setDimmerLights_Line(lights);
 14291  165D  0020               	movlb	0	; select bank0
 14292  165E  086D               	movf	setDimmerLights_Adj@lights,w
 14293  165F  319D  258F  3196   	fcall	_setDimmerLights_Line
 14294                           
 14295                           ;Dimmer_B1.c: 689: DimmerLights->AdjSw = 0;
 14296  1662  0020               	movlb	0	; select bank0
 14297  1663  0A6F               	incf	_DimmerLights,w
 14298  1664  0086               	movwf	6
 14299  1665  3001               	movlw	1	; select bank2/3
 14300  1666  0087               	movwf	7
 14301  1667  1301               	bcf	1,6
 14302                           
 14303                           ;Dimmer_B1.c: 690: DimmerLights->Signal = 0;
 14304  1668  0A6F               	incf	_DimmerLights,w
 14305  1669  0086               	movwf	6
 14306  166A  3001               	movlw	1	; select bank2/3
 14307  166B  0087               	movwf	7
 14308  166C  1281               	bcf	1,5
 14309                           
 14310                           ;Dimmer_B1.c: 692: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 14311  166D  086F               	movf	_DimmerLights,w
 14312  166E  3E04               	addlw	4
 14313  166F  0086               	movwf	6
 14314  1670  3001               	movlw	1	; select bank2/3
 14315  1671  0087               	movwf	7
 14316  1672  0801               	movf	1,w
 14317  1673  00EC               	movwf	??_setDimmerLights_Adj
 14318  1674  086F               	movf	_DimmerLights,w
 14319  1675  3E06               	addlw	6
 14320  1676  0086               	movwf	6
 14321  1677  3001               	movlw	1	; select bank2/3
 14322  1678  0087               	movwf	7
 14323  1679  086C               	movf	??_setDimmerLights_Adj,w
 14324  167A  0081               	movwf	1
 14325                           
 14326                           ;Dimmer_B1.c: 693: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 14327  167B  086F               	movf	_DimmerLights,w
 14328  167C  3E04               	addlw	4
 14329  167D  0086               	movwf	6
 14330  167E  3001               	movlw	1	; select bank2/3
 14331  167F  0087               	movwf	7
 14332  1680  0801               	movf	1,w
 14333  1681  3189  2166  3196   	fcall	_setPercentValue
 14334  1684  0020               	movlb	0	; select bank0
 14335  1685  00EC               	movwf	??_setDimmerLights_Adj
 14336  1686  086C               	movf	??_setDimmerLights_Adj,w
 14337  1687  00E2               	movwf	setProductData@value
 14338  1688  086D               	movf	setDimmerLights_Adj@lights,w
 14339  1689  3E14               	addlw	20
 14340  168A  319B  2389  3196   	fcall	_setProductData
 14341                           
 14342                           ;Dimmer_B1.c: 708: setRF_DimmerLights(lights, 1);
 14343  168D  0020               	movlb	0	; select bank0
 14344  168E  01E6               	clrf	setRF_DimmerLights@on
 14345  168F  0AE6               	incf	setRF_DimmerLights@on,f
 14346  1690  086D               	movf	setDimmerLights_Adj@lights,w
 14347  1691  3196  26F0  3196   	fcall	_setRF_DimmerLights
 14348                           
 14349                           ;Dimmer_B1.c: 709: setTxData();
 14350  1694  318D  256A         	fcall	_setTxData
 14351  1696  0008               	return
 14352  1697                     __end_of_setDimmerLights_Adj:	
 14353                           
 14354                           	psect	text93
 14355  14F2                     __ptext93:	
 14356 ;; *************** function _setDimmerLights *****************
 14357 ;; Defined at:
 14358 ;;		line 638 in file "../src/Dimmer_B1.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;  lights          1    wreg     unsigned char 
 14361 ;;  status          1   75[BANK0 ] unsigned char 
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;  lights          1   77[BANK0 ] unsigned char 
 14364 ;; Return value:  Size  Location     Type
 14365 ;;		None               void
 14366 ;; Registers used:
 14367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14368 ;; Tracked objects:
 14369 ;;		On entry : 0/0
 14370 ;;		On exit  : 0/0
 14371 ;;		Unchanged: 0/0
 14372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14373 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;Total ram usage:        3 bytes
 14378 ;; Hardware stack levels used:    1
 14379 ;; Hardware stack levels required when called:    8
 14380 ;; This function calls:
 14381 ;;		_setDimmerLights_Line
 14382 ;;		_setLED
 14383 ;;		_setPercentValue
 14384 ;;		_setProductData
 14385 ;;		_setRF_DimmerLights
 14386 ;;		_setTxData
 14387 ;; This function is called by:
 14388 ;;		_setDimmerLights_Main
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           
 14393                           ;psect for function _setDimmerLights
 14394  14F2                     _setDimmerLights:	
 14395                           
 14396                           ;incstack = 0
 14397                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14398                           ;setDimmerLights@lights stored from wreg
 14399  14F2  0020               	movlb	0	; select bank0
 14400  14F3  00ED               	movwf	setDimmerLights@lights
 14401                           
 14402                           ;Dimmer_B1.c: 646: if (status == 1) {
 14403  14F4  086B               	movf	setDimmerLights@status,w
 14404  14F5  3A01               	xorlw	1
 14405  14F6  1D03               	skipz
 14406  14F7  2D22               	goto	l9779
 14407                           
 14408                           ;Dimmer_B1.c: 647: DimmerLights->StatusFlag = 1;
 14409  14F8  0A6F               	incf	_DimmerLights,w
 14410  14F9  0086               	movwf	6
 14411  14FA  3001               	movlw	1	; select bank2/3
 14412  14FB  0087               	movwf	7
 14413  14FC  1501               	bsf	1,2
 14414                           
 14415                           ;Dimmer_B1.c: 650: Dimmer.Load_Status = 1;
 14416  14FD  0021               	movlb	1	; select bank1
 14417  14FE  15BA               	bsf	_Dimmer^(0+128),3	;volatile
 14418                           
 14419                           ;Dimmer_B1.c: 651: setDimmerLights_Line(lights);
 14420  14FF  0020               	movlb	0	; select bank0
 14421  1500  086D               	movf	setDimmerLights@lights,w
 14422  1501  319D  258F  3194   	fcall	_setDimmerLights_Line
 14423                           
 14424                           ;Dimmer_B1.c: 653: setLED(lights, 0);
 14425  1504  0020               	movlb	0	; select bank0
 14426  1505  01A1               	clrf	setLED@command
 14427  1506  086D               	movf	setDimmerLights@lights,w
 14428  1507  3195  25EB  3194   	fcall	_setLED
 14429                           
 14430                           ;Dimmer_B1.c: 658: DimmerLights->DimmingValue = ((char)(70*0.8));
 14431  150A  3038               	movlw	56
 14432  150B  0020               	movlb	0	; select bank0
 14433  150C  00EC               	movwf	??_setDimmerLights
 14434  150D  086F               	movf	_DimmerLights,w
 14435  150E  3E04               	addlw	4
 14436  150F  0086               	movwf	6
 14437  1510  3001               	movlw	1	; select bank2/3
 14438  1511  0087               	movwf	7
 14439  1512  086C               	movf	??_setDimmerLights,w
 14440  1513  0081               	movwf	1
 14441                           
 14442                           ;Dimmer_B1.c: 660: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 14443  1514  3038               	movlw	56
 14444  1515  3189  2166  3194   	fcall	_setPercentValue
 14445  1518  0020               	movlb	0	; select bank0
 14446  1519  00EC               	movwf	??_setDimmerLights
 14447  151A  086C               	movf	??_setDimmerLights,w
 14448  151B  00E2               	movwf	setProductData@value
 14449  151C  086D               	movf	setDimmerLights@lights,w
 14450  151D  3E14               	addlw	20
 14451  151E  319B  2389  3194   	fcall	_setProductData
 14452                           
 14453                           ;Dimmer_B1.c: 662: } else if (status == 0) {
 14454  1521  2D38               	goto	l9789
 14455  1522                     l9779:	
 14456  1522  0020               	movlb	0	; select bank0
 14457  1523  08EB               	movf	setDimmerLights@status,f
 14458  1524  1D03               	skipz
 14459  1525  2D38               	goto	l9789
 14460                           
 14461                           ;Dimmer_B1.c: 663: DimmerLights->StatusFlag = 0;
 14462  1526  0A6F               	incf	_DimmerLights,w
 14463  1527  0086               	movwf	6
 14464  1528  3001               	movlw	1	; select bank2/3
 14465  1529  0087               	movwf	7
 14466  152A  1101               	bcf	1,2
 14467                           
 14468                           ;Dimmer_B1.c: 666: Dimmer.Load_Status = 0;
 14469  152B  0021               	movlb	1	; select bank1
 14470  152C  11BA               	bcf	_Dimmer^(0+128),3	;volatile
 14471                           
 14472                           ;Dimmer_B1.c: 667: setDimmerLights_Line(0);
 14473  152D  3000               	movlw	0
 14474  152E  319D  258F  3194   	fcall	_setDimmerLights_Line
 14475                           
 14476                           ;Dimmer_B1.c: 669: setLED(lights, 1);
 14477  1531  0020               	movlb	0	; select bank0
 14478  1532  01A1               	clrf	setLED@command
 14479  1533  0AA1               	incf	setLED@command,f
 14480  1534  086D               	movf	setDimmerLights@lights,w
 14481  1535  3195  25EB  3194   	fcall	_setLED
 14482  1538                     l9789:	
 14483                           
 14484                           ;Dimmer_B1.c: 671: }
 14485                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, status);
 14486  1538  0020               	movlb	0	; select bank0
 14487  1539  086B               	movf	setDimmerLights@status,w
 14488  153A  00EC               	movwf	??_setDimmerLights
 14489  153B  086C               	movf	??_setDimmerLights,w
 14490  153C  00E6               	movwf	setRF_DimmerLights@on
 14491  153D  086D               	movf	setDimmerLights@lights,w
 14492  153E  3196  26F0  3194   	fcall	_setRF_DimmerLights
 14493                           
 14494                           ;Dimmer_B1.c: 675: setTxData();
 14495  1541  318D  256A         	fcall	_setTxData
 14496  1543  0008               	return
 14497  1544                     __end_of_setDimmerLights:	
 14498                           
 14499                           	psect	text94
 14500  0D6A                     __ptext94:	
 14501 ;; *************** function _setTxData *****************
 14502 ;; Defined at:
 14503 ;;		line 192 in file "../src/RF_Control_B1.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;		None
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;  i               1    0        unsigned char 
 14508 ;; Return value:  Size  Location     Type
 14509 ;;		None               void
 14510 ;; Registers used:
 14511 ;;		wreg, fsr1l, fsr1h
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;Total ram usage:        1 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    5
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_setDimmerLights
 14528 ;;		_setDimmerLights_Adj
 14529 ;;		_getRxData
 14530 ;;		_setControl_Lights_Table
 14531 ;;		_setRFSW_Control
 14532 ;;		_setRFSW_AdjControl
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536                           
 14537                           ;psect for function _setTxData
 14538  0D6A                     _setTxData:	
 14539                           
 14540                           ;RF_Control_B1.c: 193: char i;
 14541                           ;RF_Control_B1.c: 194: if (RF1.Enable == 1) {
 14542                           
 14543                           ;incstack = 0
 14544                           ; Regs used in _setTxData: [wregfsr1]
 14545  0D6A  0021               	movlb	1	; select bank1
 14546  0D6B  1C20               	btfss	_RF1^(0+128),0
 14547  0D6C  0008               	return
 14548                           
 14549                           ;RF_Control_B1.c: 196: if (RF1.TransceiveGO == 0) {
 14550  0D6D  1920               	btfsc	_RF1^(0+128),2
 14551  0D6E  0008               	return
 14552                           
 14553                           ;RF_Control_B1.c: 197: RF1.TransceiveGO = 1;
 14554  0D6F  1520               	bsf	_RF1^(0+128),2
 14555                           
 14556                           ;RF_Control_B1.c: 209: RF_Data[0] = 0x63;
 14557  0D70  3063               	movlw	99
 14558  0D71  0020               	movlb	0	; select bank0
 14559  0D72  00A0               	movwf	??_setTxData
 14560  0D73  0820               	movf	??_setTxData,w
 14561  0D74  0023               	movlb	3	; select bank3
 14562  0D75  00A0               	movwf	_RF_Data^(0+384)
 14563                           
 14564                           ;RF_Control_B1.c: 210: RF_Data[1] = 0x02;
 14565  0D76  3002               	movlw	2
 14566  0D77  0020               	movlb	0	; select bank0
 14567  0D78  00A0               	movwf	??_setTxData
 14568  0D79  0820               	movf	??_setTxData,w
 14569  0D7A  0023               	movlb	3	; select bank3
 14570  0D7B  00A1               	movwf	(_RF_Data^(0+384)+1)
 14571                           
 14572                           ;RF_Control_B1.c: 212: RF_Data[2] = product->Data[2];
 14573  0D7C  087A               	movf	_product,w
 14574  0D7D  0086               	movwf	6
 14575  0D7E  3002               	movlw	2	; select bank4/5
 14576  0D7F  0087               	movwf	7
 14577  0D80  3002               	movlw	2	; select bank4/5
 14578  0D81  3F42               	moviw [2]fsr1
 14579  0D82  00A2               	movwf	(_RF_Data^(0+384)+2)
 14580                           
 14581                           ;RF_Control_B1.c: 213: RF_Data[3] = product->Data[3];
 14582  0D83  087A               	movf	_product,w
 14583  0D84  0086               	movwf	6
 14584  0D85  3002               	movlw	2	; select bank4/5
 14585  0D86  0087               	movwf	7
 14586  0D87  3002               	movlw	2	; select bank4/5
 14587  0D88  3F43               	moviw [3]fsr1
 14588  0D89  00A3               	movwf	(_RF_Data^(0+384)+3)
 14589                           
 14590                           ;RF_Control_B1.c: 214: RF_Data[4] = product->Data[4];
 14591  0D8A  087A               	movf	_product,w
 14592  0D8B  0086               	movwf	6
 14593  0D8C  3002               	movlw	2	; select bank4/5
 14594  0D8D  0087               	movwf	7
 14595  0D8E  3002               	movlw	2	; select bank4/5
 14596  0D8F  3F44               	moviw [4]fsr1
 14597  0D90  00A4               	movwf	(_RF_Data^(0+384)+4)
 14598                           
 14599                           ;RF_Control_B1.c: 215: RF_Data[5] = product->Data[5];
 14600  0D91  087A               	movf	_product,w
 14601  0D92  0086               	movwf	6
 14602  0D93  3002               	movlw	2	; select bank4/5
 14603  0D94  0087               	movwf	7
 14604  0D95  3002               	movlw	2	; select bank4/5
 14605  0D96  3F45               	moviw [5]fsr1
 14606  0D97  00A5               	movwf	(_RF_Data^(0+384)+5)
 14607                           
 14608                           ;RF_Control_B1.c: 216: RF_Data[6] = product->Data[6];
 14609  0D98  087A               	movf	_product,w
 14610  0D99  0086               	movwf	6
 14611  0D9A  3002               	movlw	2	; select bank4/5
 14612  0D9B  0087               	movwf	7
 14613  0D9C  3002               	movlw	2	; select bank4/5
 14614  0D9D  3F46               	moviw [6]fsr1
 14615  0D9E  00A6               	movwf	(_RF_Data^(0+384)+6)
 14616                           
 14617                           ;RF_Control_B1.c: 217: RF_Data[7] = product->Data[7];
 14618  0D9F  087A               	movf	_product,w
 14619  0DA0  0086               	movwf	6
 14620  0DA1  3002               	movlw	2	; select bank4/5
 14621  0DA2  0087               	movwf	7
 14622  0DA3  3002               	movlw	2	; select bank4/5
 14623  0DA4  3F47               	moviw [7]fsr1
 14624  0DA5  00A7               	movwf	(_RF_Data^(0+384)+7)
 14625                           
 14626                           ;RF_Control_B1.c: 218: RF_Data[8] = product->Data[8];
 14627  0DA6  087A               	movf	_product,w
 14628  0DA7  0086               	movwf	6
 14629  0DA8  3002               	movlw	2	; select bank4/5
 14630  0DA9  0087               	movwf	7
 14631  0DAA  3002               	movlw	2	; select bank4/5
 14632  0DAB  3F48               	moviw [8]fsr1
 14633  0DAC  00A8               	movwf	(_RF_Data^(0+384)+8)
 14634                           
 14635                           ;RF_Control_B1.c: 219: RF_Data[9] = product->Data[9];
 14636  0DAD  087A               	movf	_product,w
 14637  0DAE  0086               	movwf	6
 14638  0DAF  3002               	movlw	2	; select bank4/5
 14639  0DB0  0087               	movwf	7
 14640  0DB1  3002               	movlw	2	; select bank4/5
 14641  0DB2  3F49               	moviw [9]fsr1
 14642  0DB3  00A9               	movwf	(_RF_Data^(0+384)+9)
 14643                           
 14644                           ;RF_Control_B1.c: 220: RF_Data[10] = product->Data[10];
 14645  0DB4  087A               	movf	_product,w
 14646  0DB5  0086               	movwf	6
 14647  0DB6  3002               	movlw	2	; select bank4/5
 14648  0DB7  0087               	movwf	7
 14649  0DB8  3002               	movlw	2	; select bank4/5
 14650  0DB9  3F4A               	moviw [10]fsr1
 14651  0DBA  00AA               	movwf	(_RF_Data^(0+384)+10)
 14652                           
 14653                           ;RF_Control_B1.c: 221: RF_Data[11] = product->Data[11];
 14654  0DBB  087A               	movf	_product,w
 14655  0DBC  0086               	movwf	6
 14656  0DBD  3002               	movlw	2	; select bank4/5
 14657  0DBE  0087               	movwf	7
 14658  0DBF  3002               	movlw	2	; select bank4/5
 14659  0DC0  3F4B               	moviw [11]fsr1
 14660  0DC1  00AB               	movwf	(_RF_Data^(0+384)+11)
 14661                           
 14662                           ;RF_Control_B1.c: 222: RF_Data[12] = product->Data[12];
 14663  0DC2  087A               	movf	_product,w
 14664  0DC3  0086               	movwf	6
 14665  0DC4  3002               	movlw	2	; select bank4/5
 14666  0DC5  0087               	movwf	7
 14667  0DC6  3002               	movlw	2	; select bank4/5
 14668  0DC7  3F4C               	moviw [12]fsr1
 14669  0DC8  00AC               	movwf	(_RF_Data^(0+384)+12)
 14670                           
 14671                           ;RF_Control_B1.c: 223: RF_Data[13] = product->Data[13];
 14672  0DC9  087A               	movf	_product,w
 14673  0DCA  0086               	movwf	6
 14674  0DCB  3002               	movlw	2	; select bank4/5
 14675  0DCC  0087               	movwf	7
 14676  0DCD  3002               	movlw	2	; select bank4/5
 14677  0DCE  3F4D               	moviw [13]fsr1
 14678  0DCF  00AD               	movwf	(_RF_Data^(0+384)+13)
 14679                           
 14680                           ;RF_Control_B1.c: 224: RF_Data[14] = product->Data[14];
 14681  0DD0  087A               	movf	_product,w
 14682  0DD1  0086               	movwf	6
 14683  0DD2  3002               	movlw	2	; select bank4/5
 14684  0DD3  0087               	movwf	7
 14685  0DD4  3002               	movlw	2	; select bank4/5
 14686  0DD5  3F4E               	moviw [14]fsr1
 14687  0DD6  00AE               	movwf	(_RF_Data^(0+384)+14)
 14688                           
 14689                           ;RF_Control_B1.c: 225: RF_Data[15] = product->Data[15];
 14690  0DD7  087A               	movf	_product,w
 14691  0DD8  0086               	movwf	6
 14692  0DD9  3002               	movlw	2	; select bank4/5
 14693  0DDA  0087               	movwf	7
 14694  0DDB  3002               	movlw	2	; select bank4/5
 14695  0DDC  3F4F               	moviw [15]fsr1
 14696  0DDD  00AF               	movwf	(_RF_Data^(0+384)+15)
 14697                           
 14698                           ;RF_Control_B1.c: 226: RF_Data[16] = product->Data[16];
 14699  0DDE  087A               	movf	_product,w
 14700  0DDF  0086               	movwf	6
 14701  0DE0  3002               	movlw	2	; select bank4/5
 14702  0DE1  0087               	movwf	7
 14703  0DE2  3002               	movlw	2	; select bank4/5
 14704  0DE3  3F50               	moviw [16]fsr1
 14705  0DE4  00B0               	movwf	(_RF_Data^(0+384)+16)
 14706                           
 14707                           ;RF_Control_B1.c: 227: RF_Data[17] = product->Data[17];
 14708  0DE5  087A               	movf	_product,w
 14709  0DE6  0086               	movwf	6
 14710  0DE7  3002               	movlw	2	; select bank4/5
 14711  0DE8  0087               	movwf	7
 14712  0DE9  3002               	movlw	2	; select bank4/5
 14713  0DEA  3F51               	moviw [17]fsr1
 14714  0DEB  00B1               	movwf	(_RF_Data^(0+384)+17)
 14715                           
 14716                           ;RF_Control_B1.c: 228: RF_Data[18] = product->Data[18];
 14717  0DEC  087A               	movf	_product,w
 14718  0DED  0086               	movwf	6
 14719  0DEE  3002               	movlw	2	; select bank4/5
 14720  0DEF  0087               	movwf	7
 14721  0DF0  3002               	movlw	2	; select bank4/5
 14722  0DF1  3F52               	moviw [18]fsr1
 14723  0DF2  00B2               	movwf	(_RF_Data^(0+384)+18)
 14724                           
 14725                           ;RF_Control_B1.c: 229: RF_Data[19] = product->Data[19];
 14726  0DF3  087A               	movf	_product,w
 14727  0DF4  0086               	movwf	6
 14728  0DF5  3002               	movlw	2	; select bank4/5
 14729  0DF6  0087               	movwf	7
 14730  0DF7  3002               	movlw	2	; select bank4/5
 14731  0DF8  3F53               	moviw [19]fsr1
 14732  0DF9  00B3               	movwf	(_RF_Data^(0+384)+19)
 14733                           
 14734                           ;RF_Control_B1.c: 230: RF_Data[20] = 210;
 14735  0DFA  30D2               	movlw	210
 14736  0DFB  0020               	movlb	0	; select bank0
 14737  0DFC  00A0               	movwf	??_setTxData
 14738  0DFD  0820               	movf	??_setTxData,w
 14739  0DFE  0023               	movlb	3	; select bank3
 14740  0DFF  00B4               	movwf	(_RF_Data^(0+384)+20)
 14741  0E00  0008               	return
 14742  0E01                     __end_of_setTxData:	
 14743                           
 14744                           	psect	text95
 14745  16F0                     __ptext95:	
 14746 ;; *************** function _setRF_DimmerLights *****************
 14747 ;; Defined at:
 14748 ;;		line 456 in file "../src/RF_Control_B1.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;  lights          1    wreg     unsigned char 
 14751 ;;  on              1   70[BANK0 ] unsigned char 
 14752 ;; Auto vars:     Size  Location     Type
 14753 ;;  lights          1   74[BANK0 ] unsigned char 
 14754 ;;  status          1   73[BANK0 ] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;		None               void
 14757 ;; Registers used:
 14758 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14764 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;Total ram usage:        5 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; Hardware stack levels required when called:    6
 14771 ;; This function calls:
 14772 ;;		_setProductData
 14773 ;; This function is called by:
 14774 ;;		_setDimmerLights
 14775 ;;		_setDimmerLights_Adj
 14776 ;;		_setRFSW_Control
 14777 ;; This function uses a non-reentrant model
 14778 ;;
 14779                           
 14780                           
 14781                           ;psect for function _setRF_DimmerLights
 14782  16F0                     _setRF_DimmerLights:	
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14786                           ;setRF_DimmerLights@lights stored from wreg
 14787  16F0  0020               	movlb	0	; select bank0
 14788  16F1  00EA               	movwf	setRF_DimmerLights@lights
 14789                           
 14790                           ;RF_Control_B1.c: 457: char status = 1;
 14791  16F2  01E9               	clrf	setRF_DimmerLights@status
 14792  16F3  0AE9               	incf	setRF_DimmerLights@status,f
 14793                           
 14794                           ;RF_Control_B1.c: 458: status <<= (lights - 1);
 14795  16F4  086A               	movf	setRF_DimmerLights@lights,w
 14796  16F5  3EFF               	addlw	-1
 14797  16F6  0A89               	incf	9,f
 14798  16F7  2EFA               	goto	u10000
 14799  16F8                     u10005:	
 14800  16F8  1003               	clrc
 14801  16F9  0DE9               	rlf	setRF_DimmerLights@status,f
 14802  16FA                     u10000:	
 14803  16FA  3EFF               	addlw	-1
 14804  16FB  1D03               	skipz
 14805  16FC  2EF8               	goto	u10005
 14806                           
 14807                           ;RF_Control_B1.c: 459: setProductData(11, lights);
 14808  16FD  086A               	movf	setRF_DimmerLights@lights,w
 14809  16FE  00E7               	movwf	??_setRF_DimmerLights
 14810  16FF  0867               	movf	??_setRF_DimmerLights,w
 14811  1700  00E2               	movwf	setProductData@value
 14812  1701  300B               	movlw	11
 14813  1702  319B  2389  3196   	fcall	_setProductData
 14814                           
 14815                           ;RF_Control_B1.c: 467: setProductData(9, product->Data[20 + lights]);
 14816  1705  0020               	movlb	0	; select bank0
 14817  1706  086A               	movf	setRF_DimmerLights@lights,w
 14818  1707  3E14               	addlw	20
 14819  1708  077A               	addwf	_product,w
 14820  1709  00E7               	movwf	??_setRF_DimmerLights
 14821  170A  0867               	movf	??_setRF_DimmerLights,w
 14822  170B  0086               	movwf	6
 14823  170C  3002               	movlw	2	; select bank4/5
 14824  170D  0087               	movwf	7
 14825  170E  0801               	movf	1,w
 14826  170F  00E8               	movwf	??_setRF_DimmerLights+1
 14827  1710  0868               	movf	??_setRF_DimmerLights+1,w
 14828  1711  00E2               	movwf	setProductData@value
 14829  1712  3009               	movlw	9
 14830  1713  319B  2389  3196   	fcall	_setProductData
 14831                           
 14832                           ;RF_Control_B1.c: 468: setProductData(17, product->Data[26 + lights]);
 14833  1716  0020               	movlb	0	; select bank0
 14834  1717  086A               	movf	setRF_DimmerLights@lights,w
 14835  1718  3E1A               	addlw	26
 14836  1719  077A               	addwf	_product,w
 14837  171A  00E7               	movwf	??_setRF_DimmerLights
 14838  171B  0867               	movf	??_setRF_DimmerLights,w
 14839  171C  0086               	movwf	6
 14840  171D  3002               	movlw	2	; select bank4/5
 14841  171E  0087               	movwf	7
 14842  171F  0801               	movf	1,w
 14843  1720  00E8               	movwf	??_setRF_DimmerLights+1
 14844  1721  0868               	movf	??_setRF_DimmerLights+1,w
 14845  1722  00E2               	movwf	setProductData@value
 14846  1723  3011               	movlw	17
 14847  1724  319B  2389  3196   	fcall	_setProductData
 14848                           
 14849                           ;RF_Control_B1.c: 469: if (on == 1) {
 14850  1727  0020               	movlb	0	; select bank0
 14851  1728  0866               	movf	setRF_DimmerLights@on,w
 14852  1729  3A01               	xorlw	1
 14853  172A  1D03               	skipz
 14854  172B  2F3A               	goto	l9151
 14855                           
 14856                           ;RF_Control_B1.c: 470: setProductData(15, (product->Data[15] | status));
 14857  172C  087A               	movf	_product,w
 14858  172D  3E0F               	addlw	15
 14859  172E  0086               	movwf	6
 14860  172F  3002               	movlw	2	; select bank4/5
 14861  1730  0087               	movwf	7
 14862  1731  0801               	movf	1,w
 14863  1732  0469               	iorwf	setRF_DimmerLights@status,w
 14864  1733  00E7               	movwf	??_setRF_DimmerLights
 14865  1734  0867               	movf	??_setRF_DimmerLights,w
 14866  1735  00E2               	movwf	setProductData@value
 14867  1736  300F               	movlw	15
 14868  1737  319B  2389         	fcall	_setProductData
 14869                           
 14870                           ;RF_Control_B1.c: 471: } else {
 14871  1739  0008               	return
 14872  173A                     l9151:	
 14873                           
 14874                           ;RF_Control_B1.c: 472: setProductData(15, (product->Data[15]&(~status)));
 14875  173A  087A               	movf	_product,w
 14876  173B  3E0F               	addlw	15
 14877  173C  0086               	movwf	6
 14878  173D  3002               	movlw	2	; select bank4/5
 14879  173E  0087               	movwf	7
 14880  173F  0020               	movlb	0	; select bank0
 14881  1740  0969               	comf	setRF_DimmerLights@status,w
 14882  1741  0501               	andwf	1,w
 14883  1742  00E7               	movwf	??_setRF_DimmerLights
 14884  1743  0867               	movf	??_setRF_DimmerLights,w
 14885  1744  00E2               	movwf	setProductData@value
 14886  1745  300F               	movlw	15
 14887  1746  319B  2389         	fcall	_setProductData
 14888  1748  0008               	return
 14889  1749                     __end_of_setRF_DimmerLights:	
 14890                           
 14891                           	psect	text96
 14892  0966                     __ptext96:	
 14893 ;; *************** function _setPercentValue *****************
 14894 ;; Defined at:
 14895 ;;		line 1042 in file "../src/Dimmer_B1.c"
 14896 ;; Parameters:    Size  Location     Type
 14897 ;;  value           1    wreg     unsigned char 
 14898 ;; Auto vars:     Size  Location     Type
 14899 ;;  value           1   62[BANK0 ] unsigned char 
 14900 ;;  i               3   63[BANK0 ] float 
 14901 ;; Return value:  Size  Location     Type
 14902 ;;                  1    wreg      unsigned char 
 14903 ;; Registers used:
 14904 ;;		wreg, status,2, status,0, pclath, cstack
 14905 ;; Tracked objects:
 14906 ;;		On entry : 0/0
 14907 ;;		On exit  : 0/0
 14908 ;;		Unchanged: 0/0
 14909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;Total ram usage:        6 bytes
 14915 ;; Hardware stack levels used:    1
 14916 ;; Hardware stack levels required when called:    7
 14917 ;; This function calls:
 14918 ;;		___awtoft
 14919 ;;		___ftadd
 14920 ;;		___ftdiv
 14921 ;;		___ftneg
 14922 ;;		___fttol
 14923 ;; This function is called by:
 14924 ;;		_setDimmerLights
 14925 ;;		_setDimmerLights_Adj
 14926 ;;		_Flash_Memory_Initialization
 14927 ;; This function uses a non-reentrant model
 14928 ;;
 14929                           
 14930                           
 14931                           ;psect for function _setPercentValue
 14932  0966                     _setPercentValue:	
 14933                           
 14934                           ;incstack = 0
 14935                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14936                           ;setPercentValue@value stored from wreg
 14937  0966  0020               	movlb	0	; select bank0
 14938  0967  00DE               	movwf	setPercentValue@value
 14939                           
 14940                           ;Dimmer_B1.c: 1050: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14941  0968  3000               	movlw	0
 14942  0969  00DF               	movwf	setPercentValue@i
 14943  096A  3030               	movlw	48
 14944  096B  00E0               	movwf	setPercentValue@i+1
 14945  096C  3042               	movlw	66
 14946  096D  00E1               	movwf	setPercentValue@i+2
 14947                           
 14948                           ;Dimmer_B1.c: 1051: i /= 100;
 14949  096E  3000               	movlw	0
 14950  096F  00AE               	movwf	___ftdiv@f2
 14951  0970  30C8               	movlw	200
 14952  0971  00AF               	movwf	___ftdiv@f2+1
 14953  0972  3042               	movlw	66
 14954  0973  00B0               	movwf	___ftdiv@f2+2
 14955  0974  085F               	movf	setPercentValue@i,w
 14956  0975  00B1               	movwf	___ftdiv@f1
 14957  0976  0860               	movf	setPercentValue@i+1,w
 14958  0977  00B2               	movwf	___ftdiv@f1+1
 14959  0978  0861               	movf	setPercentValue@i+2,w
 14960  0979  00B3               	movwf	___ftdiv@f1+2
 14961  097A  318E  26A5  3189   	fcall	___ftdiv
 14962  097D  0020               	movlb	0	; select bank0
 14963  097E  082E               	movf	?___ftdiv,w
 14964  097F  00DF               	movwf	setPercentValue@i
 14965  0980  082F               	movf	?___ftdiv+1,w
 14966  0981  00E0               	movwf	setPercentValue@i+1
 14967  0982  0830               	movf	?___ftdiv+2,w
 14968  0983  00E1               	movwf	setPercentValue@i+2
 14969                           
 14970                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 14971  0984  085E               	movf	setPercentValue@value,w
 14972  0985  00DC               	movwf	??_setPercentValue
 14973  0986  01DD               	clrf	??_setPercentValue+1
 14974  0987  09DC               	comf	??_setPercentValue,f
 14975  0988  09DD               	comf	??_setPercentValue+1,f
 14976  0989  0ADC               	incf	??_setPercentValue,f
 14977  098A  1903               	skipnz
 14978  098B  0ADD               	incf	??_setPercentValue+1,f
 14979  098C  085C               	movf	??_setPercentValue,w
 14980  098D  3E38               	addlw	56
 14981  098E  00A8               	movwf	___awtoft@c
 14982  098F  3000               	movlw	0
 14983  0990  3D5D               	addwfc	??_setPercentValue+1,w
 14984  0991  00A9               	movwf	___awtoft@c+1
 14985  0992  319F  2724  3189   	fcall	___awtoft
 14986  0995  0020               	movlb	0	; select bank0
 14987  0996  0828               	movf	?___awtoft,w
 14988  0997  00B1               	movwf	___ftdiv@f1
 14989  0998  0829               	movf	?___awtoft+1,w
 14990  0999  00B2               	movwf	___ftdiv@f1+1
 14991  099A  082A               	movf	?___awtoft+2,w
 14992  099B  00B3               	movwf	___ftdiv@f1+2
 14993  099C  085F               	movf	setPercentValue@i,w
 14994  099D  00AE               	movwf	___ftdiv@f2
 14995  099E  0860               	movf	setPercentValue@i+1,w
 14996  099F  00AF               	movwf	___ftdiv@f2+1
 14997  09A0  0861               	movf	setPercentValue@i+2,w
 14998  09A1  00B0               	movwf	___ftdiv@f2+2
 14999  09A2  318E  26A5  3189   	fcall	___ftdiv
 15000  09A5  0020               	movlb	0	; select bank0
 15001  09A6  082E               	movf	?___ftdiv,w
 15002  09A7  00BE               	movwf	___ftneg@f1
 15003  09A8  082F               	movf	?___ftdiv+1,w
 15004  09A9  00BF               	movwf	___ftneg@f1+1
 15005  09AA  0830               	movf	?___ftdiv+2,w
 15006  09AB  00C0               	movwf	___ftneg@f1+2
 15007  09AC  319A  22F5  3189   	fcall	___ftneg
 15008  09AF  0020               	movlb	0	; select bank0
 15009  09B0  083E               	movf	?___ftneg,w
 15010  09B1  00C4               	movwf	___ftadd@f2
 15011  09B2  083F               	movf	?___ftneg+1,w
 15012  09B3  00C5               	movwf	___ftadd@f2+1
 15013  09B4  0840               	movf	?___ftneg+2,w
 15014  09B5  00C6               	movwf	___ftadd@f2+2
 15015  09B6  3000               	movlw	0
 15016  09B7  00C1               	movwf	___ftadd@f1
 15017  09B8  30C8               	movlw	200
 15018  09B9  00C2               	movwf	___ftadd@f1+1
 15019  09BA  3042               	movlw	66
 15020  09BB  00C3               	movwf	___ftadd@f1+2
 15021  09BC  3184  2467  3189   	fcall	___ftadd
 15022  09BF  0020               	movlb	0	; select bank0
 15023  09C0  0841               	movf	?___ftadd,w
 15024  09C1  00CE               	movwf	___fttol@f1
 15025  09C2  0842               	movf	?___ftadd+1,w
 15026  09C3  00CF               	movwf	___fttol@f1+1
 15027  09C4  0843               	movf	?___ftadd+2,w
 15028  09C5  00D0               	movwf	___fttol@f1+2
 15029  09C6  318C  24E3         	fcall	___fttol
 15030  09C8  0020               	movlb	0	; select bank0
 15031  09C9  084E               	movf	?___fttol,w
 15032  09CA  0008               	return
 15033  09CB                     __end_of_setPercentValue:	
 15034                           
 15035                           	psect	text97
 15036  0CE3                     __ptext97:	
 15037 ;; *************** function ___fttol *****************
 15038 ;; Defined at:
 15039 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;  f1              3   46[BANK0 ] float 
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;  lval            4   55[BANK0 ] unsigned long 
 15044 ;;  exp1            1   59[BANK0 ] unsigned char 
 15045 ;;  sign1           1   54[BANK0 ] unsigned char 
 15046 ;; Return value:  Size  Location     Type
 15047 ;;                  4   46[BANK0 ] long 
 15048 ;; Registers used:
 15049 ;;		wreg, status,2, status,0
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15055 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;Total ram usage:       14 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    5
 15062 ;; This function calls:
 15063 ;;		Nothing
 15064 ;; This function is called by:
 15065 ;;		_getPercentValue
 15066 ;;		_setPercentValue
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           
 15071                           ;psect for function ___fttol
 15072  0CE3                     ___fttol:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15076  0CE3  0020               	movlb	0	; select bank0
 15077  0CE4  084E               	movf	___fttol@f1,w
 15078  0CE5  00D2               	movwf	??___fttol
 15079  0CE6  084F               	movf	___fttol@f1+1,w
 15080  0CE7  00D3               	movwf	??___fttol+1
 15081  0CE8  0850               	movf	___fttol@f1+2,w
 15082  0CE9  00D4               	movwf	??___fttol+2
 15083  0CEA  1003               	clrc
 15084  0CEB  0D53               	rlf	??___fttol+1,w
 15085  0CEC  0D54               	rlf	??___fttol+2,w
 15086  0CED  00D5               	movwf	??___fttol+3
 15087  0CEE  0855               	movf	??___fttol+3,w
 15088  0CEF  00DB               	movwf	___fttol@exp1
 15089  0CF0  08DB               	movf	___fttol@exp1,f
 15090  0CF1  1D03               	skipz
 15091  0CF2  2CFC               	goto	l8869
 15092  0CF3  3000               	movlw	0
 15093  0CF4  00D1               	movwf	?___fttol+3
 15094  0CF5  3000               	movlw	0
 15095  0CF6  00D0               	movwf	?___fttol+2
 15096  0CF7  3000               	movlw	0
 15097  0CF8  00CF               	movwf	?___fttol+1
 15098  0CF9  3000               	movlw	0
 15099  0CFA  00CE               	movwf	?___fttol
 15100  0CFB  0008               	return
 15101  0CFC                     l8869:	
 15102  0CFC  084E               	movf	___fttol@f1,w
 15103  0CFD  00D2               	movwf	??___fttol
 15104  0CFE  084F               	movf	___fttol@f1+1,w
 15105  0CFF  00D3               	movwf	??___fttol+1
 15106  0D00  0850               	movf	___fttol@f1+2,w
 15107  0D01  00D4               	movwf	??___fttol+2
 15108  0D02  3017               	movlw	23
 15109  0D03                     u9505:	
 15110  0D03  36D4               	lsrf	??___fttol+2,f
 15111  0D04  0CD3               	rrf	??___fttol+1,f
 15112  0D05  0CD2               	rrf	??___fttol,f
 15113  0D06  0B89               	decfsz	9,f
 15114  0D07  2D03               	goto	u9505
 15115  0D08  0852               	movf	??___fttol,w
 15116  0D09  00D5               	movwf	??___fttol+3
 15117  0D0A  0855               	movf	??___fttol+3,w
 15118  0D0B  00D6               	movwf	___fttol@sign1
 15119  0D0C  17CF               	bsf	___fttol@f1+1,7
 15120  0D0D  30FF               	movlw	255
 15121  0D0E  05CE               	andwf	___fttol@f1,f
 15122  0D0F  30FF               	movlw	255
 15123  0D10  05CF               	andwf	___fttol@f1+1,f
 15124  0D11  3000               	movlw	0
 15125  0D12  05D0               	andwf	___fttol@f1+2,f
 15126  0D13  084E               	movf	___fttol@f1,w
 15127  0D14  00D7               	movwf	___fttol@lval
 15128  0D15  084F               	movf	___fttol@f1+1,w
 15129  0D16  00D8               	movwf	___fttol@lval+1
 15130  0D17  0850               	movf	___fttol@f1+2,w
 15131  0D18  00D9               	movwf	___fttol@lval+2
 15132  0D19  01DA               	clrf	___fttol@lval+3
 15133  0D1A  308E               	movlw	142
 15134  0D1B  02DB               	subwf	___fttol@exp1,f
 15135  0D1C  1FDB               	btfss	___fttol@exp1,7
 15136  0D1D  2D3A               	goto	l8889
 15137  0D1E  085B               	movf	___fttol@exp1,w
 15138  0D1F  3A80               	xorlw	128
 15139  0D20  3E8F               	addlw	143
 15140  0D21  1803               	skipnc
 15141  0D22  2D2C               	goto	l8887
 15142  0D23  3000               	movlw	0
 15143  0D24  00D1               	movwf	?___fttol+3
 15144  0D25  3000               	movlw	0
 15145  0D26  00D0               	movwf	?___fttol+2
 15146  0D27  3000               	movlw	0
 15147  0D28  00CF               	movwf	?___fttol+1
 15148  0D29  3000               	movlw	0
 15149  0D2A  00CE               	movwf	?___fttol
 15150  0D2B  0008               	return
 15151  0D2C                     l8887:	
 15152  0D2C  3001               	movlw	1
 15153  0D2D                     u9535:	
 15154  0D2D  36DA               	lsrf	___fttol@lval+3,f
 15155  0D2E  0CD9               	rrf	___fttol@lval+2,f
 15156  0D2F  0CD8               	rrf	___fttol@lval+1,f
 15157  0D30  0CD7               	rrf	___fttol@lval,f
 15158  0D31  0B89               	decfsz	9,f
 15159  0D32  2D2D               	goto	u9535
 15160  0D33  3001               	movlw	1
 15161  0D34  00D2               	movwf	??___fttol
 15162  0D35  0852               	movf	??___fttol,w
 15163  0D36  07DB               	addwf	___fttol@exp1,f
 15164  0D37  1903               	btfsc	3,2
 15165  0D38  2D53               	goto	l8899
 15166  0D39  2D2C               	goto	l8887
 15167  0D3A                     l8889:	
 15168  0D3A  3018               	movlw	24
 15169  0D3B  025B               	subwf	___fttol@exp1,w
 15170  0D3C  1C03               	skipc
 15171  0D3D  2D50               	goto	l8897
 15172  0D3E  3000               	movlw	0
 15173  0D3F  00D1               	movwf	?___fttol+3
 15174  0D40  3000               	movlw	0
 15175  0D41  00D0               	movwf	?___fttol+2
 15176  0D42  3000               	movlw	0
 15177  0D43  00CF               	movwf	?___fttol+1
 15178  0D44  3000               	movlw	0
 15179  0D45  00CE               	movwf	?___fttol
 15180  0D46  0008               	return
 15181  0D47                     l8895:	
 15182  0D47  3001               	movlw	1
 15183  0D48                     u9565:	
 15184  0D48  35D7               	lslf	___fttol@lval,f
 15185  0D49  0DD8               	rlf	___fttol@lval+1,f
 15186  0D4A  0DD9               	rlf	___fttol@lval+2,f
 15187  0D4B  0DDA               	rlf	___fttol@lval+3,f
 15188  0D4C  0B89               	decfsz	9,f
 15189  0D4D  2D48               	goto	u9565
 15190  0D4E  3001               	movlw	1
 15191  0D4F  02DB               	subwf	___fttol@exp1,f
 15192  0D50                     l8897:	
 15193  0D50  08DB               	movf	___fttol@exp1,f
 15194  0D51  1D03               	skipz
 15195  0D52  2D47               	goto	l8895
 15196  0D53                     l8899:	
 15197  0D53  0856               	movf	___fttol@sign1,w
 15198  0D54  1903               	btfsc	3,2
 15199  0D55  2D61               	goto	l8903
 15200  0D56  09D7               	comf	___fttol@lval,f
 15201  0D57  09D8               	comf	___fttol@lval+1,f
 15202  0D58  09D9               	comf	___fttol@lval+2,f
 15203  0D59  09DA               	comf	___fttol@lval+3,f
 15204  0D5A  0AD7               	incf	___fttol@lval,f
 15205  0D5B  1903               	skipnz
 15206  0D5C  0AD8               	incf	___fttol@lval+1,f
 15207  0D5D  1903               	skipnz
 15208  0D5E  0AD9               	incf	___fttol@lval+2,f
 15209  0D5F  1903               	skipnz
 15210  0D60  0ADA               	incf	___fttol@lval+3,f
 15211  0D61                     l8903:	
 15212  0D61  085A               	movf	___fttol@lval+3,w
 15213  0D62  00D1               	movwf	?___fttol+3
 15214  0D63  0859               	movf	___fttol@lval+2,w
 15215  0D64  00D0               	movwf	?___fttol+2
 15216  0D65  0858               	movf	___fttol@lval+1,w
 15217  0D66  00CF               	movwf	?___fttol+1
 15218  0D67  0857               	movf	___fttol@lval,w
 15219  0D68  00CE               	movwf	?___fttol
 15220  0D69  0008               	return
 15221  0D6A                     __end_of___fttol:	
 15222                           
 15223                           	psect	text98
 15224  1AF5                     __ptext98:	
 15225 ;; *************** function ___ftneg *****************
 15226 ;; Defined at:
 15227 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15228 ;; Parameters:    Size  Location     Type
 15229 ;;  f1              3   30[BANK0 ] float 
 15230 ;; Auto vars:     Size  Location     Type
 15231 ;;		None
 15232 ;; Return value:  Size  Location     Type
 15233 ;;                  3   30[BANK0 ] float 
 15234 ;; Registers used:
 15235 ;;		wreg
 15236 ;; Tracked objects:
 15237 ;;		On entry : 0/0
 15238 ;;		On exit  : 0/0
 15239 ;;		Unchanged: 0/0
 15240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15241 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;Total ram usage:        3 bytes
 15246 ;; Hardware stack levels used:    1
 15247 ;; Hardware stack levels required when called:    5
 15248 ;; This function calls:
 15249 ;;		Nothing
 15250 ;; This function is called by:
 15251 ;;		_getPercentValue
 15252 ;;		_setPercentValue
 15253 ;; This function uses a non-reentrant model
 15254 ;;
 15255                           
 15256                           
 15257                           ;psect for function ___ftneg
 15258  1AF5                     ___ftneg:	
 15259                           
 15260                           ;incstack = 0
 15261                           ; Regs used in ___ftneg: [wreg]
 15262  1AF5  0020               	movlb	0	; select bank0
 15263  1AF6  0840               	movf	___ftneg@f1+2,w
 15264  1AF7  043F               	iorwf	___ftneg@f1+1,w
 15265  1AF8  043E               	iorwf	___ftneg@f1,w
 15266  1AF9  1903               	skipnz
 15267  1AFA  0008               	return
 15268  1AFB  3080               	movlw	128
 15269  1AFC  06C0               	xorwf	___ftneg@f1+2,f
 15270  1AFD  0008               	return
 15271  1AFE                     __end_of___ftneg:	
 15272                           
 15273                           	psect	text99
 15274  0EA5                     __ptext99:	
 15275 ;; *************** function ___ftdiv *****************
 15276 ;; Defined at:
 15277 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15278 ;; Parameters:    Size  Location     Type
 15279 ;;  f2              3   14[BANK0 ] float 
 15280 ;;  f1              3   17[BANK0 ] float 
 15281 ;; Auto vars:     Size  Location     Type
 15282 ;;  f3              3   25[BANK0 ] float 
 15283 ;;  sign            1   29[BANK0 ] unsigned char 
 15284 ;;  exp             1   28[BANK0 ] unsigned char 
 15285 ;;  cntr            1   24[BANK0 ] unsigned char 
 15286 ;; Return value:  Size  Location     Type
 15287 ;;                  3   14[BANK0 ] float 
 15288 ;; Registers used:
 15289 ;;		wreg, status,2, status,0, pclath, cstack
 15290 ;; Tracked objects:
 15291 ;;		On entry : 0/0
 15292 ;;		On exit  : 0/0
 15293 ;;		Unchanged: 0/0
 15294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15295 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;Total ram usage:       16 bytes
 15300 ;; Hardware stack levels used:    1
 15301 ;; Hardware stack levels required when called:    6
 15302 ;; This function calls:
 15303 ;;		___ftpack
 15304 ;; This function is called by:
 15305 ;;		_getPercentValue
 15306 ;;		_setPercentValue
 15307 ;; This function uses a non-reentrant model
 15308 ;;
 15309                           
 15310                           
 15311                           ;psect for function ___ftdiv
 15312  0EA5                     ___ftdiv:	
 15313                           
 15314                           ;incstack = 0
 15315                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15316  0EA5  0020               	movlb	0	; select bank0
 15317  0EA6  0831               	movf	___ftdiv@f1,w
 15318  0EA7  00B4               	movwf	??___ftdiv
 15319  0EA8  0832               	movf	___ftdiv@f1+1,w
 15320  0EA9  00B5               	movwf	??___ftdiv+1
 15321  0EAA  0833               	movf	___ftdiv@f1+2,w
 15322  0EAB  00B6               	movwf	??___ftdiv+2
 15323  0EAC  1003               	clrc
 15324  0EAD  0D35               	rlf	??___ftdiv+1,w
 15325  0EAE  0D36               	rlf	??___ftdiv+2,w
 15326  0EAF  00B7               	movwf	??___ftdiv+3
 15327  0EB0  0837               	movf	??___ftdiv+3,w
 15328  0EB1  00BC               	movwf	___ftdiv@exp
 15329  0EB2  08BC               	movf	___ftdiv@exp,f
 15330  0EB3  1D03               	skipz
 15331  0EB4  2EBC               	goto	l8769
 15332  0EB5  3000               	movlw	0
 15333  0EB6  00AE               	movwf	?___ftdiv
 15334  0EB7  3000               	movlw	0
 15335  0EB8  00AF               	movwf	?___ftdiv+1
 15336  0EB9  3000               	movlw	0
 15337  0EBA  00B0               	movwf	?___ftdiv+2
 15338  0EBB  0008               	return
 15339  0EBC                     l8769:	
 15340  0EBC  082E               	movf	___ftdiv@f2,w
 15341  0EBD  00B4               	movwf	??___ftdiv
 15342  0EBE  082F               	movf	___ftdiv@f2+1,w
 15343  0EBF  00B5               	movwf	??___ftdiv+1
 15344  0EC0  0830               	movf	___ftdiv@f2+2,w
 15345  0EC1  00B6               	movwf	??___ftdiv+2
 15346  0EC2  1003               	clrc
 15347  0EC3  0D35               	rlf	??___ftdiv+1,w
 15348  0EC4  0D36               	rlf	??___ftdiv+2,w
 15349  0EC5  00B7               	movwf	??___ftdiv+3
 15350  0EC6  0837               	movf	??___ftdiv+3,w
 15351  0EC7  00BD               	movwf	___ftdiv@sign
 15352  0EC8  08BD               	movf	___ftdiv@sign,f
 15353  0EC9  1D03               	skipz
 15354  0ECA  2ED2               	goto	l8775
 15355  0ECB  3000               	movlw	0
 15356  0ECC  00AE               	movwf	?___ftdiv
 15357  0ECD  3000               	movlw	0
 15358  0ECE  00AF               	movwf	?___ftdiv+1
 15359  0ECF  3000               	movlw	0
 15360  0ED0  00B0               	movwf	?___ftdiv+2
 15361  0ED1  0008               	return
 15362  0ED2                     l8775:	
 15363  0ED2  3000               	movlw	0
 15364  0ED3  00B9               	movwf	___ftdiv@f3
 15365  0ED4  3000               	movlw	0
 15366  0ED5  00BA               	movwf	___ftdiv@f3+1
 15367  0ED6  3000               	movlw	0
 15368  0ED7  00BB               	movwf	___ftdiv@f3+2
 15369  0ED8  3089               	movlw	137
 15370  0ED9  073D               	addwf	___ftdiv@sign,w
 15371  0EDA  00B4               	movwf	??___ftdiv
 15372  0EDB  0834               	movf	??___ftdiv,w
 15373  0EDC  02BC               	subwf	___ftdiv@exp,f
 15374  0EDD  0831               	movf	___ftdiv@f1,w
 15375  0EDE  00B4               	movwf	??___ftdiv
 15376  0EDF  0832               	movf	___ftdiv@f1+1,w
 15377  0EE0  00B5               	movwf	??___ftdiv+1
 15378  0EE1  0833               	movf	___ftdiv@f1+2,w
 15379  0EE2  00B6               	movwf	??___ftdiv+2
 15380  0EE3  3010               	movlw	16
 15381  0EE4                     u9305:	
 15382  0EE4  36B6               	lsrf	??___ftdiv+2,f
 15383  0EE5  0CB5               	rrf	??___ftdiv+1,f
 15384  0EE6  0CB4               	rrf	??___ftdiv,f
 15385  0EE7  0B89               	decfsz	9,f
 15386  0EE8  2EE4               	goto	u9305
 15387  0EE9  0834               	movf	??___ftdiv,w
 15388  0EEA  00B7               	movwf	??___ftdiv+3
 15389  0EEB  0837               	movf	??___ftdiv+3,w
 15390  0EEC  00BD               	movwf	___ftdiv@sign
 15391  0EED  082E               	movf	___ftdiv@f2,w
 15392  0EEE  00B4               	movwf	??___ftdiv
 15393  0EEF  082F               	movf	___ftdiv@f2+1,w
 15394  0EF0  00B5               	movwf	??___ftdiv+1
 15395  0EF1  0830               	movf	___ftdiv@f2+2,w
 15396  0EF2  00B6               	movwf	??___ftdiv+2
 15397  0EF3  3010               	movlw	16
 15398  0EF4                     u9315:	
 15399  0EF4  36B6               	lsrf	??___ftdiv+2,f
 15400  0EF5  0CB5               	rrf	??___ftdiv+1,f
 15401  0EF6  0CB4               	rrf	??___ftdiv,f
 15402  0EF7  0B89               	decfsz	9,f
 15403  0EF8  2EF4               	goto	u9315
 15404  0EF9  0834               	movf	??___ftdiv,w
 15405  0EFA  00B7               	movwf	??___ftdiv+3
 15406  0EFB  0837               	movf	??___ftdiv+3,w
 15407  0EFC  06BD               	xorwf	___ftdiv@sign,f
 15408  0EFD  3080               	movlw	128
 15409  0EFE  00B4               	movwf	??___ftdiv
 15410  0EFF  0834               	movf	??___ftdiv,w
 15411  0F00  05BD               	andwf	___ftdiv@sign,f
 15412  0F01  17B2               	bsf	___ftdiv@f1+1,7
 15413  0F02  30FF               	movlw	255
 15414  0F03  05B1               	andwf	___ftdiv@f1,f
 15415  0F04  30FF               	movlw	255
 15416  0F05  05B2               	andwf	___ftdiv@f1+1,f
 15417  0F06  3000               	movlw	0
 15418  0F07  05B3               	andwf	___ftdiv@f1+2,f
 15419  0F08  17AF               	bsf	___ftdiv@f2+1,7
 15420  0F09  30FF               	movlw	255
 15421  0F0A  05AE               	andwf	___ftdiv@f2,f
 15422  0F0B  30FF               	movlw	255
 15423  0F0C  05AF               	andwf	___ftdiv@f2+1,f
 15424  0F0D  3000               	movlw	0
 15425  0F0E  05B0               	andwf	___ftdiv@f2+2,f
 15426  0F0F  3018               	movlw	24
 15427  0F10  00B4               	movwf	??___ftdiv
 15428  0F11  0834               	movf	??___ftdiv,w
 15429  0F12  00B8               	movwf	___ftdiv@cntr
 15430  0F13                     l8789:	
 15431  0F13  3001               	movlw	1
 15432  0F14                     u9325:	
 15433  0F14  35B9               	lslf	___ftdiv@f3,f
 15434  0F15  0DBA               	rlf	___ftdiv@f3+1,f
 15435  0F16  0DBB               	rlf	___ftdiv@f3+2,f
 15436  0F17  0B89               	decfsz	9,f
 15437  0F18  2F14               	goto	u9325
 15438  0F19  0830               	movf	___ftdiv@f2+2,w
 15439  0F1A  0233               	subwf	___ftdiv@f1+2,w
 15440  0F1B  1D03               	skipz
 15441  0F1C  2F23               	goto	u9335
 15442  0F1D  082F               	movf	___ftdiv@f2+1,w
 15443  0F1E  0232               	subwf	___ftdiv@f1+1,w
 15444  0F1F  1D03               	skipz
 15445  0F20  2F23               	goto	u9335
 15446  0F21  082E               	movf	___ftdiv@f2,w
 15447  0F22  0231               	subwf	___ftdiv@f1,w
 15448  0F23                     u9335:	
 15449  0F23  1C03               	skipc
 15450  0F24  2F2C               	goto	l8797
 15451  0F25  082E               	movf	___ftdiv@f2,w
 15452  0F26  02B1               	subwf	___ftdiv@f1,f
 15453  0F27  082F               	movf	___ftdiv@f2+1,w
 15454  0F28  3BB2               	subwfb	___ftdiv@f1+1,f
 15455  0F29  0830               	movf	___ftdiv@f2+2,w
 15456  0F2A  3BB3               	subwfb	___ftdiv@f1+2,f
 15457  0F2B  1439               	bsf	___ftdiv@f3,0
 15458  0F2C                     l8797:	
 15459  0F2C  3001               	movlw	1
 15460  0F2D                     u9345:	
 15461  0F2D  35B1               	lslf	___ftdiv@f1,f
 15462  0F2E  0DB2               	rlf	___ftdiv@f1+1,f
 15463  0F2F  0DB3               	rlf	___ftdiv@f1+2,f
 15464  0F30  0B89               	decfsz	9,f
 15465  0F31  2F2D               	goto	u9345
 15466  0F32  3001               	movlw	1
 15467  0F33  02B8               	subwf	___ftdiv@cntr,f
 15468  0F34  1D03               	btfss	3,2
 15469  0F35  2F13               	goto	l8789
 15470  0F36  0839               	movf	___ftdiv@f3,w
 15471  0F37  00A0               	movwf	___ftpack@arg
 15472  0F38  083A               	movf	___ftdiv@f3+1,w
 15473  0F39  00A1               	movwf	___ftpack@arg+1
 15474  0F3A  083B               	movf	___ftdiv@f3+2,w
 15475  0F3B  00A2               	movwf	___ftpack@arg+2
 15476  0F3C  083C               	movf	___ftdiv@exp,w
 15477  0F3D  00B4               	movwf	??___ftdiv
 15478  0F3E  0834               	movf	??___ftdiv,w
 15479  0F3F  00A3               	movwf	___ftpack@exp
 15480  0F40  083D               	movf	___ftdiv@sign,w
 15481  0F41  00B5               	movwf	??___ftdiv+1
 15482  0F42  0835               	movf	??___ftdiv+1,w
 15483  0F43  00A4               	movwf	___ftpack@sign
 15484  0F44  3188  20A3         	fcall	___ftpack
 15485  0F46  0020               	movlb	0	; select bank0
 15486  0F47  0820               	movf	?___ftpack,w
 15487  0F48  00AE               	movwf	?___ftdiv
 15488  0F49  0821               	movf	?___ftpack+1,w
 15489  0F4A  00AF               	movwf	?___ftdiv+1
 15490  0F4B  0822               	movf	?___ftpack+2,w
 15491  0F4C  00B0               	movwf	?___ftdiv+2
 15492  0F4D  0008               	return
 15493  0F4E                     __end_of___ftdiv:	
 15494                           
 15495                           	psect	text100
 15496  0467                     __ptext100:	
 15497 ;; *************** function ___ftadd *****************
 15498 ;; Defined at:
 15499 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  f1              3   33[BANK0 ] float 
 15502 ;;  f2              3   36[BANK0 ] float 
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;  exp1            1   45[BANK0 ] unsigned char 
 15505 ;;  exp2            1   44[BANK0 ] unsigned char 
 15506 ;;  sign            1   43[BANK0 ] unsigned char 
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  3   33[BANK0 ] float 
 15509 ;; Registers used:
 15510 ;;		wreg, status,2, status,0, pclath, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15516 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;Total ram usage:       13 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    6
 15523 ;; This function calls:
 15524 ;;		___ftpack
 15525 ;; This function is called by:
 15526 ;;		_getPercentValue
 15527 ;;		_setPercentValue
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           
 15532                           ;psect for function ___ftadd
 15533  0467                     ___ftadd:	
 15534                           
 15535                           ;incstack = 0
 15536                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15537  0467  0020               	movlb	0	; select bank0
 15538  0468  0841               	movf	___ftadd@f1,w
 15539  0469  00C7               	movwf	??___ftadd
 15540  046A  0842               	movf	___ftadd@f1+1,w
 15541  046B  00C8               	movwf	??___ftadd+1
 15542  046C  0843               	movf	___ftadd@f1+2,w
 15543  046D  00C9               	movwf	??___ftadd+2
 15544  046E  1003               	clrc
 15545  046F  0D48               	rlf	??___ftadd+1,w
 15546  0470  0D49               	rlf	??___ftadd+2,w
 15547  0471  00CA               	movwf	??___ftadd+3
 15548  0472  084A               	movf	??___ftadd+3,w
 15549  0473  00CD               	movwf	___ftadd@exp1
 15550  0474  0844               	movf	___ftadd@f2,w
 15551  0475  00C7               	movwf	??___ftadd
 15552  0476  0845               	movf	___ftadd@f2+1,w
 15553  0477  00C8               	movwf	??___ftadd+1
 15554  0478  0846               	movf	___ftadd@f2+2,w
 15555  0479  00C9               	movwf	??___ftadd+2
 15556  047A  1003               	clrc
 15557  047B  0D48               	rlf	??___ftadd+1,w
 15558  047C  0D49               	rlf	??___ftadd+2,w
 15559  047D  00CA               	movwf	??___ftadd+3
 15560  047E  084A               	movf	??___ftadd+3,w
 15561  047F  00CC               	movwf	___ftadd@exp2
 15562  0480  084D               	movf	___ftadd@exp1,w
 15563  0481  1903               	btfsc	3,2
 15564  0482  2C8F               	goto	l8699
 15565  0483  084C               	movf	___ftadd@exp2,w
 15566  0484  024D               	subwf	___ftadd@exp1,w
 15567  0485  1803               	skipnc
 15568  0486  2C96               	goto	l8703
 15569  0487  034D               	decf	___ftadd@exp1,w
 15570  0488  3AFF               	xorlw	255
 15571  0489  074C               	addwf	___ftadd@exp2,w
 15572  048A  00C7               	movwf	??___ftadd
 15573  048B  3019               	movlw	25
 15574  048C  0247               	subwf	??___ftadd,w
 15575  048D  1C03               	skipc
 15576  048E  2C96               	goto	l8703
 15577  048F                     l8699:	
 15578  048F  0844               	movf	___ftadd@f2,w
 15579  0490  00C1               	movwf	?___ftadd
 15580  0491  0845               	movf	___ftadd@f2+1,w
 15581  0492  00C2               	movwf	?___ftadd+1
 15582  0493  0846               	movf	___ftadd@f2+2,w
 15583  0494  00C3               	movwf	?___ftadd+2
 15584  0495  0008               	return
 15585  0496                     l8703:	
 15586  0496  084C               	movf	___ftadd@exp2,w
 15587  0497  1903               	btfsc	3,2
 15588  0498  0008               	return
 15589  0499  084D               	movf	___ftadd@exp1,w
 15590  049A  024C               	subwf	___ftadd@exp2,w
 15591  049B  1803               	skipnc
 15592  049C  2CA5               	goto	l8709
 15593  049D  034C               	decf	___ftadd@exp2,w
 15594  049E  3AFF               	xorlw	255
 15595  049F  074D               	addwf	___ftadd@exp1,w
 15596  04A0  00C7               	movwf	??___ftadd
 15597  04A1  3019               	movlw	25
 15598  04A2  0247               	subwf	??___ftadd,w
 15599  04A3  1803               	btfsc	3,0
 15600  04A4  0008               	return
 15601  04A5                     l8709:	
 15602  04A5  3006               	movlw	6
 15603  04A6  00C7               	movwf	??___ftadd
 15604  04A7  0847               	movf	??___ftadd,w
 15605  04A8  00CB               	movwf	___ftadd@sign
 15606  04A9  1BC3               	btfsc	___ftadd@f1+2,7
 15607  04AA  17CB               	bsf	___ftadd@sign,7
 15608  04AB  1BC6               	btfsc	___ftadd@f2+2,7
 15609  04AC  174B               	bsf	___ftadd@sign,6
 15610  04AD  17C2               	bsf	___ftadd@f1+1,7
 15611  04AE  30FF               	movlw	255
 15612  04AF  05C1               	andwf	___ftadd@f1,f
 15613  04B0  30FF               	movlw	255
 15614  04B1  05C2               	andwf	___ftadd@f1+1,f
 15615  04B2  3000               	movlw	0
 15616  04B3  05C3               	andwf	___ftadd@f1+2,f
 15617  04B4  17C5               	bsf	___ftadd@f2+1,7
 15618  04B5  30FF               	movlw	255
 15619  04B6  05C4               	andwf	___ftadd@f2,f
 15620  04B7  30FF               	movlw	255
 15621  04B8  05C5               	andwf	___ftadd@f2+1,f
 15622  04B9  3000               	movlw	0
 15623  04BA  05C6               	andwf	___ftadd@f2+2,f
 15624  04BB  084C               	movf	___ftadd@exp2,w
 15625  04BC  024D               	subwf	___ftadd@exp1,w
 15626  04BD  1803               	skipnc
 15627  04BE  2CE1               	goto	l8731
 15628  04BF                     l8721:	
 15629  04BF  3001               	movlw	1
 15630  04C0                     u9145:	
 15631  04C0  35C4               	lslf	___ftadd@f2,f
 15632  04C1  0DC5               	rlf	___ftadd@f2+1,f
 15633  04C2  0DC6               	rlf	___ftadd@f2+2,f
 15634  04C3  0B89               	decfsz	9,f
 15635  04C4  2CC0               	goto	u9145
 15636  04C5  3001               	movlw	1
 15637  04C6  02CC               	subwf	___ftadd@exp2,f
 15638  04C7  084C               	movf	___ftadd@exp2,w
 15639  04C8  064D               	xorwf	___ftadd@exp1,w
 15640  04C9  1903               	skipnz
 15641  04CA  2CDC               	goto	l8729
 15642  04CB  3001               	movlw	1
 15643  04CC  02CB               	subwf	___ftadd@sign,f
 15644  04CD  084B               	movf	___ftadd@sign,w
 15645  04CE  3907               	andlw	7
 15646  04CF  1903               	btfsc	3,2
 15647  04D0  2CDC               	goto	l8729
 15648  04D1  2CBF               	goto	l8721
 15649  04D2                     l8727:	
 15650  04D2  3001               	movlw	1
 15651  04D3                     u9175:	
 15652  04D3  36C3               	lsrf	___ftadd@f1+2,f
 15653  04D4  0CC2               	rrf	___ftadd@f1+1,f
 15654  04D5  0CC1               	rrf	___ftadd@f1,f
 15655  04D6  0B89               	decfsz	9,f
 15656  04D7  2CD3               	goto	u9175
 15657  04D8  3001               	movlw	1
 15658  04D9  00C7               	movwf	??___ftadd
 15659  04DA  0847               	movf	??___ftadd,w
 15660  04DB  07CD               	addwf	___ftadd@exp1,f
 15661  04DC                     l8729:	
 15662  04DC  084D               	movf	___ftadd@exp1,w
 15663  04DD  064C               	xorwf	___ftadd@exp2,w
 15664  04DE  1903               	btfsc	3,2
 15665  04DF  2D06               	goto	l3072
 15666  04E0  2CD2               	goto	l8727
 15667  04E1                     l8731:	
 15668  04E1  084D               	movf	___ftadd@exp1,w
 15669  04E2  024C               	subwf	___ftadd@exp2,w
 15670  04E3  1803               	skipnc
 15671  04E4  2D06               	goto	l3072
 15672  04E5                     l8733:	
 15673  04E5  3001               	movlw	1
 15674  04E6                     u9205:	
 15675  04E6  35C1               	lslf	___ftadd@f1,f
 15676  04E7  0DC2               	rlf	___ftadd@f1+1,f
 15677  04E8  0DC3               	rlf	___ftadd@f1+2,f
 15678  04E9  0B89               	decfsz	9,f
 15679  04EA  2CE6               	goto	u9205
 15680  04EB  3001               	movlw	1
 15681  04EC  02CD               	subwf	___ftadd@exp1,f
 15682  04ED  084C               	movf	___ftadd@exp2,w
 15683  04EE  064D               	xorwf	___ftadd@exp1,w
 15684  04EF  1903               	skipnz
 15685  04F0  2D02               	goto	l8741
 15686  04F1  3001               	movlw	1
 15687  04F2  02CB               	subwf	___ftadd@sign,f
 15688  04F3  084B               	movf	___ftadd@sign,w
 15689  04F4  3907               	andlw	7
 15690  04F5  1903               	btfsc	3,2
 15691  04F6  2D02               	goto	l8741
 15692  04F7  2CE5               	goto	l8733
 15693  04F8                     l8739:	
 15694  04F8  3001               	movlw	1
 15695  04F9                     u9235:	
 15696  04F9  36C6               	lsrf	___ftadd@f2+2,f
 15697  04FA  0CC5               	rrf	___ftadd@f2+1,f
 15698  04FB  0CC4               	rrf	___ftadd@f2,f
 15699  04FC  0B89               	decfsz	9,f
 15700  04FD  2CF9               	goto	u9235
 15701  04FE  3001               	movlw	1
 15702  04FF  00C7               	movwf	??___ftadd
 15703  0500  0847               	movf	??___ftadd,w
 15704  0501  07CC               	addwf	___ftadd@exp2,f
 15705  0502                     l8741:	
 15706  0502  084D               	movf	___ftadd@exp1,w
 15707  0503  064C               	xorwf	___ftadd@exp2,w
 15708  0504  1D03               	skipz
 15709  0505  2CF8               	goto	l8739
 15710  0506                     l3072:	
 15711  0506  1FCB               	btfss	___ftadd@sign,7
 15712  0507  2D18               	goto	l8745
 15713  0508  30FF               	movlw	255
 15714  0509  06C1               	xorwf	___ftadd@f1,f
 15715  050A  30FF               	movlw	255
 15716  050B  06C2               	xorwf	___ftadd@f1+1,f
 15717  050C  30FF               	movlw	255
 15718  050D  06C3               	xorwf	___ftadd@f1+2,f
 15719  050E  3001               	movlw	1
 15720  050F  07C1               	addwf	___ftadd@f1,f
 15721  0510  3000               	movlw	0
 15722  0511  1803               	skipnc
 15723  0512  3001               	movlw	1
 15724  0513  07C2               	addwf	___ftadd@f1+1,f
 15725  0514  3000               	movlw	0
 15726  0515  1803               	skipnc
 15727  0516  3001               	movlw	1
 15728  0517  07C3               	addwf	___ftadd@f1+2,f
 15729  0518                     l8745:	
 15730  0518  1F4B               	btfss	___ftadd@sign,6
 15731  0519  2D2A               	goto	l8749
 15732  051A  30FF               	movlw	255
 15733  051B  06C4               	xorwf	___ftadd@f2,f
 15734  051C  30FF               	movlw	255
 15735  051D  06C5               	xorwf	___ftadd@f2+1,f
 15736  051E  30FF               	movlw	255
 15737  051F  06C6               	xorwf	___ftadd@f2+2,f
 15738  0520  3001               	movlw	1
 15739  0521  07C4               	addwf	___ftadd@f2,f
 15740  0522  3000               	movlw	0
 15741  0523  1803               	skipnc
 15742  0524  3001               	movlw	1
 15743  0525  07C5               	addwf	___ftadd@f2+1,f
 15744  0526  3000               	movlw	0
 15745  0527  1803               	skipnc
 15746  0528  3001               	movlw	1
 15747  0529  07C6               	addwf	___ftadd@f2+2,f
 15748  052A                     l8749:	
 15749  052A  01CB               	clrf	___ftadd@sign
 15750  052B  0841               	movf	___ftadd@f1,w
 15751  052C  07C4               	addwf	___ftadd@f2,f
 15752  052D  0842               	movf	___ftadd@f1+1,w
 15753  052E  3DC5               	addwfc	___ftadd@f2+1,f
 15754  052F  0843               	movf	___ftadd@f1+2,w
 15755  0530  3DC6               	addwfc	___ftadd@f2+2,f
 15756  0531  1FC6               	btfss	___ftadd@f2+2,7
 15757  0532  2D45               	goto	l8759
 15758  0533  30FF               	movlw	255
 15759  0534  06C4               	xorwf	___ftadd@f2,f
 15760  0535  30FF               	movlw	255
 15761  0536  06C5               	xorwf	___ftadd@f2+1,f
 15762  0537  30FF               	movlw	255
 15763  0538  06C6               	xorwf	___ftadd@f2+2,f
 15764  0539  3001               	movlw	1
 15765  053A  07C4               	addwf	___ftadd@f2,f
 15766  053B  3000               	movlw	0
 15767  053C  1803               	skipnc
 15768  053D  3001               	movlw	1
 15769  053E  07C5               	addwf	___ftadd@f2+1,f
 15770  053F  3000               	movlw	0
 15771  0540  1803               	skipnc
 15772  0541  3001               	movlw	1
 15773  0542  07C6               	addwf	___ftadd@f2+2,f
 15774  0543  01CB               	clrf	___ftadd@sign
 15775  0544  0ACB               	incf	___ftadd@sign,f
 15776  0545                     l8759:	
 15777  0545  0844               	movf	___ftadd@f2,w
 15778  0546  00A0               	movwf	___ftpack@arg
 15779  0547  0845               	movf	___ftadd@f2+1,w
 15780  0548  00A1               	movwf	___ftpack@arg+1
 15781  0549  0846               	movf	___ftadd@f2+2,w
 15782  054A  00A2               	movwf	___ftpack@arg+2
 15783  054B  084D               	movf	___ftadd@exp1,w
 15784  054C  00C7               	movwf	??___ftadd
 15785  054D  0847               	movf	??___ftadd,w
 15786  054E  00A3               	movwf	___ftpack@exp
 15787  054F  084B               	movf	___ftadd@sign,w
 15788  0550  00C8               	movwf	??___ftadd+1
 15789  0551  0848               	movf	??___ftadd+1,w
 15790  0552  00A4               	movwf	___ftpack@sign
 15791  0553  3188  20A3         	fcall	___ftpack
 15792  0555  0020               	movlb	0	; select bank0
 15793  0556  0820               	movf	?___ftpack,w
 15794  0557  00C1               	movwf	?___ftadd
 15795  0558  0821               	movf	?___ftpack+1,w
 15796  0559  00C2               	movwf	?___ftadd+1
 15797  055A  0822               	movf	?___ftpack+2,w
 15798  055B  00C3               	movwf	?___ftadd+2
 15799  055C  0008               	return
 15800  055D                     __end_of___ftadd:	
 15801                           
 15802                           	psect	text101
 15803  1F24                     __ptext101:	
 15804 ;; *************** function ___awtoft *****************
 15805 ;; Defined at:
 15806 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15807 ;; Parameters:    Size  Location     Type
 15808 ;;  c               2    8[BANK0 ] int 
 15809 ;; Auto vars:     Size  Location     Type
 15810 ;;  sign            1   13[BANK0 ] unsigned char 
 15811 ;; Return value:  Size  Location     Type
 15812 ;;                  3    8[BANK0 ] float 
 15813 ;; Registers used:
 15814 ;;		wreg, status,2, status,0, pclath, cstack
 15815 ;; Tracked objects:
 15816 ;;		On entry : 0/0
 15817 ;;		On exit  : 0/0
 15818 ;;		Unchanged: 0/0
 15819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15820 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15824 ;;Total ram usage:        6 bytes
 15825 ;; Hardware stack levels used:    1
 15826 ;; Hardware stack levels required when called:    6
 15827 ;; This function calls:
 15828 ;;		___ftpack
 15829 ;; This function is called by:
 15830 ;;		_getPercentValue
 15831 ;;		_setPercentValue
 15832 ;; This function uses a non-reentrant model
 15833 ;;
 15834                           
 15835                           
 15836                           ;psect for function ___awtoft
 15837  1F24                     ___awtoft:	
 15838                           
 15839                           ;incstack = 0
 15840                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15841  1F24  0020               	movlb	0	; select bank0
 15842  1F25  01AD               	clrf	___awtoft@sign
 15843  1F26  1FA9               	btfss	___awtoft@c+1,7
 15844  1F27  2F2F               	goto	l8687
 15845  1F28  09A8               	comf	___awtoft@c,f
 15846  1F29  09A9               	comf	___awtoft@c+1,f
 15847  1F2A  0AA8               	incf	___awtoft@c,f
 15848  1F2B  1903               	skipnz
 15849  1F2C  0AA9               	incf	___awtoft@c+1,f
 15850  1F2D  01AD               	clrf	___awtoft@sign
 15851  1F2E  0AAD               	incf	___awtoft@sign,f
 15852  1F2F                     l8687:	
 15853  1F2F  0828               	movf	___awtoft@c,w
 15854  1F30  00A0               	movwf	___ftpack@arg
 15855  1F31  0829               	movf	___awtoft@c+1,w
 15856  1F32  00A1               	movwf	___ftpack@arg+1
 15857  1F33  01A2               	clrf	___ftpack@arg+2
 15858  1F34  308E               	movlw	142
 15859  1F35  00AB               	movwf	??___awtoft
 15860  1F36  082B               	movf	??___awtoft,w
 15861  1F37  00A3               	movwf	___ftpack@exp
 15862  1F38  082D               	movf	___awtoft@sign,w
 15863  1F39  00AC               	movwf	??___awtoft+1
 15864  1F3A  082C               	movf	??___awtoft+1,w
 15865  1F3B  00A4               	movwf	___ftpack@sign
 15866  1F3C  3188  20A3         	fcall	___ftpack
 15867  1F3E  0020               	movlb	0	; select bank0
 15868  1F3F  0820               	movf	?___ftpack,w
 15869  1F40  00A8               	movwf	?___awtoft
 15870  1F41  0821               	movf	?___ftpack+1,w
 15871  1F42  00A9               	movwf	?___awtoft+1
 15872  1F43  0822               	movf	?___ftpack+2,w
 15873  1F44  00AA               	movwf	?___awtoft+2
 15874  1F45  0008               	return
 15875  1F46                     __end_of___awtoft:	
 15876                           
 15877                           	psect	text102
 15878  08A3                     __ptext102:	
 15879 ;; *************** function ___ftpack *****************
 15880 ;; Defined at:
 15881 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  arg             3    0[BANK0 ] unsigned um
 15884 ;;  exp             1    3[BANK0 ] unsigned char 
 15885 ;;  sign            1    4[BANK0 ] unsigned char 
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;		None
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  3    0[BANK0 ] float 
 15890 ;; Registers used:
 15891 ;;		wreg, status,2, status,0
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15897 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;Total ram usage:        8 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    5
 15904 ;; This function calls:
 15905 ;;		Nothing
 15906 ;; This function is called by:
 15907 ;;		___awtoft
 15908 ;;		___ftadd
 15909 ;;		___ftdiv
 15910 ;;		___ftmul
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function ___ftpack
 15916  08A3                     ___ftpack:	
 15917                           
 15918                           ;incstack = 0
 15919                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15920  08A3  0020               	movlb	0	; select bank0
 15921  08A4  0823               	movf	___ftpack@exp,w
 15922  08A5  1903               	btfsc	3,2
 15923  08A6  28AC               	goto	l8637
 15924  08A7  0822               	movf	___ftpack@arg+2,w
 15925  08A8  0421               	iorwf	___ftpack@arg+1,w
 15926  08A9  0420               	iorwf	___ftpack@arg,w
 15927  08AA  1D03               	skipz
 15928  08AB  28BD               	goto	l8643
 15929  08AC                     l8637:	
 15930  08AC  3000               	movlw	0
 15931  08AD  00A0               	movwf	?___ftpack
 15932  08AE  3000               	movlw	0
 15933  08AF  00A1               	movwf	?___ftpack+1
 15934  08B0  3000               	movlw	0
 15935  08B1  00A2               	movwf	?___ftpack+2
 15936  08B2  0008               	return
 15937  08B3                     l8641:	
 15938  08B3  3001               	movlw	1
 15939  08B4  00A5               	movwf	??___ftpack
 15940  08B5  0825               	movf	??___ftpack,w
 15941  08B6  07A3               	addwf	___ftpack@exp,f
 15942  08B7  3001               	movlw	1
 15943  08B8                     u8935:	
 15944  08B8  36A2               	lsrf	___ftpack@arg+2,f
 15945  08B9  0CA1               	rrf	___ftpack@arg+1,f
 15946  08BA  0CA0               	rrf	___ftpack@arg,f
 15947  08BB  0B89               	decfsz	9,f
 15948  08BC  28B8               	goto	u8935
 15949  08BD                     l8643:	
 15950  08BD  30FE               	movlw	254
 15951  08BE  0522               	andwf	___ftpack@arg+2,w
 15952  08BF  1903               	btfsc	3,2
 15953  08C0  28D6               	goto	l3043
 15954  08C1  28B3               	goto	l8641
 15955  08C2                     l8645:	
 15956  08C2  3001               	movlw	1
 15957  08C3  00A5               	movwf	??___ftpack
 15958  08C4  0825               	movf	??___ftpack,w
 15959  08C5  07A3               	addwf	___ftpack@exp,f
 15960  08C6  3001               	movlw	1
 15961  08C7  07A0               	addwf	___ftpack@arg,f
 15962  08C8  3000               	movlw	0
 15963  08C9  1803               	skipnc
 15964  08CA  3001               	movlw	1
 15965  08CB  07A1               	addwf	___ftpack@arg+1,f
 15966  08CC  3000               	movlw	0
 15967  08CD  1803               	skipnc
 15968  08CE  3001               	movlw	1
 15969  08CF  07A2               	addwf	___ftpack@arg+2,f
 15970  08D0  3001               	movlw	1
 15971  08D1                     u8955:	
 15972  08D1  36A2               	lsrf	___ftpack@arg+2,f
 15973  08D2  0CA1               	rrf	___ftpack@arg+1,f
 15974  08D3  0CA0               	rrf	___ftpack@arg,f
 15975  08D4  0B89               	decfsz	9,f
 15976  08D5  28D1               	goto	u8955
 15977  08D6                     l3043:	
 15978  08D6  30FF               	movlw	255
 15979  08D7  0522               	andwf	___ftpack@arg+2,w
 15980  08D8  1903               	btfsc	3,2
 15981  08D9  28E3               	goto	l8653
 15982  08DA  28C2               	goto	l8645
 15983  08DB                     l8651:	
 15984  08DB  3001               	movlw	1
 15985  08DC  02A3               	subwf	___ftpack@exp,f
 15986  08DD  3001               	movlw	1
 15987  08DE                     u8975:	
 15988  08DE  35A0               	lslf	___ftpack@arg,f
 15989  08DF  0DA1               	rlf	___ftpack@arg+1,f
 15990  08E0  0DA2               	rlf	___ftpack@arg+2,f
 15991  08E1  0B89               	decfsz	9,f
 15992  08E2  28DE               	goto	u8975
 15993  08E3                     l8653:	
 15994  08E3  1FA1               	btfss	___ftpack@arg+1,7
 15995  08E4  28DB               	goto	l8651
 15996  08E5  1823               	btfsc	___ftpack@exp,0
 15997  08E6  28ED               	goto	l3049
 15998  08E7  30FF               	movlw	255
 15999  08E8  05A0               	andwf	___ftpack@arg,f
 16000  08E9  307F               	movlw	127
 16001  08EA  05A1               	andwf	___ftpack@arg+1,f
 16002  08EB  30FF               	movlw	255
 16003  08EC  05A2               	andwf	___ftpack@arg+2,f
 16004  08ED                     l3049:	
 16005  08ED  1003               	clrc
 16006  08EE  0CA3               	rrf	___ftpack@exp,f
 16007  08EF  0823               	movf	___ftpack@exp,w
 16008  08F0  00A5               	movwf	??___ftpack
 16009  08F1  01A6               	clrf	??___ftpack+1
 16010  08F2  01A7               	clrf	??___ftpack+2
 16011  08F3  3010               	movlw	16
 16012  08F4                     u9005:	
 16013  08F4  35A5               	lslf	??___ftpack,f
 16014  08F5  0DA6               	rlf	??___ftpack+1,f
 16015  08F6  0DA7               	rlf	??___ftpack+2,f
 16016  08F7  0B89               	decfsz	9,f
 16017  08F8  28F4               	goto	u9005
 16018  08F9  0825               	movf	??___ftpack,w
 16019  08FA  04A0               	iorwf	___ftpack@arg,f
 16020  08FB  0826               	movf	??___ftpack+1,w
 16021  08FC  04A1               	iorwf	___ftpack@arg+1,f
 16022  08FD  0827               	movf	??___ftpack+2,w
 16023  08FE  04A2               	iorwf	___ftpack@arg+2,f
 16024  08FF  0824               	movf	___ftpack@sign,w
 16025  0900  1903               	btfsc	3,2
 16026  0901  0008               	return
 16027  0902  17A2               	bsf	___ftpack@arg+2,7
 16028  0903  0008               	return
 16029  0904                     __end_of___ftpack:	
 16030                           
 16031                           	psect	text103
 16032  15EB                     __ptext103:	
 16033 ;; *************** function _setLED *****************
 16034 ;; Defined at:
 16035 ;;		line 76 in file "../src/LED_B1.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;  led             1    wreg     unsigned char 
 16038 ;;  command         1    1[BANK0 ] unsigned char 
 16039 ;; Auto vars:     Size  Location     Type
 16040 ;;  led             1    2[BANK0 ] unsigned char 
 16041 ;; Return value:  Size  Location     Type
 16042 ;;		None               void
 16043 ;; Registers used:
 16044 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16045 ;; Tracked objects:
 16046 ;;		On entry : 0/0
 16047 ;;		On exit  : 0/0
 16048 ;;		Unchanged: 0/0
 16049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16050 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;Total ram usage:        2 bytes
 16055 ;; Hardware stack levels used:    1
 16056 ;; Hardware stack levels required when called:    6
 16057 ;; This function calls:
 16058 ;;		_LedPointSelect
 16059 ;; This function is called by:
 16060 ;;		_setDimmerLights
 16061 ;;		_setLED_Initialization
 16062 ;;		_Exception_Main
 16063 ;;		_setSw_Initialization
 16064 ;; This function uses a non-reentrant model
 16065 ;;
 16066                           
 16067                           
 16068                           ;psect for function _setLED
 16069  15EB                     _setLED:	
 16070                           
 16071                           ;incstack = 0
 16072                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16073                           ;setLED@led stored from wreg
 16074  15EB  0020               	movlb	0	; select bank0
 16075  15EC  00A2               	movwf	setLED@led
 16076                           
 16077                           ;LED_B1.c: 77: LedPointSelect(led);
 16078  15ED  0822               	movf	setLED@led,w
 16079  15EE  319E  26A3  3195   	fcall	_LedPointSelect
 16080                           
 16081                           ;LED_B1.c: 78: if (command == 0) {
 16082  15F1  0020               	movlb	0	; select bank0
 16083  15F2  08A1               	movf	setLED@command,f
 16084  15F3  1D03               	skipz
 16085  15F4  2E02               	goto	l9507
 16086                           
 16087                           ;LED_B1.c: 80: if (led == 1) {
 16088  15F5  0822               	movf	setLED@led,w
 16089  15F6  3A01               	xorlw	1
 16090  15F7  1D03               	skipz
 16091  15F8  2DFA               	goto	l9499
 16092                           
 16093                           ;LED_B1.c: 84: RA3 = 1;
 16094  15F9  158C               	bsf	12,3	;volatile
 16095  15FA                     l9499:	
 16096                           
 16097                           ;LED_B1.c: 86: }
 16098                           ;LED_B1.c: 89: if (led == 2) {
 16099  15FA  0822               	movf	setLED@led,w
 16100  15FB  3A02               	xorlw	2
 16101  15FC  1903               	btfsc	3,2
 16102                           
 16103                           ;LED_B1.c: 93: RC7 = 1;
 16104  15FD  178E               	bsf	14,7	;volatile
 16105                           
 16106                           ;LED_B1.c: 95: }
 16107                           ;LED_B1.c: 107: if (led == 99) {
 16108  15FE  0822               	movf	setLED@led,w
 16109  15FF  3A63               	xorlw	99
 16110  1600  1903               	btfsc	3,2
 16111                           
 16112                           ;LED_B1.c: 111: RB5 = 1;
 16113  1601  168D               	bsf	13,5	;volatile
 16114  1602                     l9507:	
 16115                           
 16116                           ;LED_B1.c: 113: }
 16117                           ;LED_B1.c: 115: }
 16118                           ;LED_B1.c: 116: if (command == 1) {
 16119  1602  0821               	movf	setLED@command,w
 16120  1603  3A01               	xorlw	1
 16121  1604  1D03               	skipz
 16122  1605  2E13               	goto	l9521
 16123                           
 16124                           ;LED_B1.c: 118: if (led == 1) {
 16125  1606  0822               	movf	setLED@led,w
 16126  1607  3A01               	xorlw	1
 16127  1608  1D03               	skipz
 16128  1609  2E0B               	goto	l9513
 16129                           
 16130                           ;LED_B1.c: 122: RA3 = 0;
 16131  160A  118C               	bcf	12,3	;volatile
 16132  160B                     l9513:	
 16133                           
 16134                           ;LED_B1.c: 124: }
 16135                           ;LED_B1.c: 127: if (led == 2) {
 16136  160B  0822               	movf	setLED@led,w
 16137  160C  3A02               	xorlw	2
 16138  160D  1903               	btfsc	3,2
 16139                           
 16140                           ;LED_B1.c: 131: RC7 = 0;
 16141  160E  138E               	bcf	14,7	;volatile
 16142                           
 16143                           ;LED_B1.c: 133: }
 16144                           ;LED_B1.c: 145: if (led == 99) {
 16145  160F  0822               	movf	setLED@led,w
 16146  1610  3A63               	xorlw	99
 16147  1611  1903               	btfsc	3,2
 16148                           
 16149                           ;LED_B1.c: 149: RB5 = 0;
 16150  1612  128D               	bcf	13,5	;volatile
 16151  1613                     l9521:	
 16152                           
 16153                           ;LED_B1.c: 151: }
 16154                           ;LED_B1.c: 153: }
 16155                           ;LED_B1.c: 154: if (command == 10) {
 16156  1613  0821               	movf	setLED@command,w
 16157  1614  3A0A               	xorlw	10
 16158  1615  1D03               	skipz
 16159  1616  2E34               	goto	l9537
 16160                           
 16161                           ;LED_B1.c: 155: LED->GO = 0;
 16162  1617  0021               	movlb	1	; select bank1
 16163  1618  0840               	movf	_LED^(0+128),w
 16164  1619  0086               	movwf	6
 16165  161A  0841               	movf	(_LED+1)^(0+128),w
 16166  161B  0087               	movwf	7
 16167  161C  1081               	bcf	1,1
 16168                           
 16169                           ;LED_B1.c: 156: LED->Time = 0;
 16170  161D  0840               	movf	_LED^(0+128),w
 16171  161E  0086               	movwf	6
 16172  161F  0841               	movf	(_LED+1)^(0+128),w
 16173  1620  0087               	movwf	7
 16174  1621  3141               	addfsr 1,1
 16175  1622  3000               	movlw	0
 16176  1623  3FC0               	movwi [0]fsr1
 16177  1624  3FC1               	movwi [1]fsr1
 16178                           
 16179                           ;LED_B1.c: 158: if (led == 1) {
 16180  1625  0020               	movlb	0	; select bank0
 16181  1626  0822               	movf	setLED@led,w
 16182  1627  3A01               	xorlw	1
 16183  1628  1D03               	skipz
 16184  1629  2E2C               	goto	l9529
 16185                           
 16186                           ;LED_B1.c: 162: RA3 = 1;
 16187  162A  158C               	bsf	12,3	;volatile
 16188                           
 16189                           ;LED_B1.c: 164: }
 16190  162B  2E30               	goto	l9533
 16191  162C                     l9529:	
 16192                           
 16193                           ;LED_B1.c: 167: else if (led == 2) {
 16194  162C  0822               	movf	setLED@led,w
 16195  162D  3A02               	xorlw	2
 16196  162E  1903               	btfsc	3,2
 16197                           
 16198                           ;LED_B1.c: 171: RC7 = 1;
 16199  162F  178E               	bsf	14,7	;volatile
 16200  1630                     l9533:	
 16201                           
 16202                           ;LED_B1.c: 173: }
 16203                           ;LED_B1.c: 185: if (led == 99) {
 16204  1630  0822               	movf	setLED@led,w
 16205  1631  3A63               	xorlw	99
 16206  1632  1903               	btfsc	3,2
 16207                           
 16208                           ;LED_B1.c: 189: RB5 = 1;
 16209  1633  168D               	bsf	13,5	;volatile
 16210  1634                     l9537:	
 16211                           
 16212                           ;LED_B1.c: 191: }
 16213                           ;LED_B1.c: 193: }
 16214                           ;LED_B1.c: 194: if (command == 11) {
 16215  1634  0821               	movf	setLED@command,w
 16216  1635  3A0B               	xorlw	11
 16217  1636  1D03               	skipz
 16218  1637  0008               	return
 16219                           
 16220                           ;LED_B1.c: 195: LED->GO = 1;
 16221  1638  0021               	movlb	1	; select bank1
 16222  1639  0840               	movf	_LED^(0+128),w
 16223  163A  0086               	movwf	6
 16224  163B  0841               	movf	(_LED+1)^(0+128),w
 16225  163C  0087               	movwf	7
 16226  163D  1481               	bsf	1,1
 16227  163E  0008               	return
 16228  163F                     __end_of_setLED:	
 16229                           
 16230                           	psect	text104
 16231  1EA3                     __ptext104:	
 16232 ;; *************** function _LedPointSelect *****************
 16233 ;; Defined at:
 16234 ;;		line 7 in file "../src/LED_B1.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  led             1    wreg     unsigned char 
 16237 ;; Auto vars:     Size  Location     Type
 16238 ;;  led             1    0[BANK0 ] unsigned char 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;		None               void
 16241 ;; Registers used:
 16242 ;;		wreg, status,2, status,0
 16243 ;; Tracked objects:
 16244 ;;		On entry : 0/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16252 ;;Total ram usage:        1 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; Hardware stack levels required when called:    5
 16255 ;; This function calls:
 16256 ;;		Nothing
 16257 ;; This function is called by:
 16258 ;;		_setLED_Initialization
 16259 ;;		_setLED
 16260 ;;		_setLED_Main
 16261 ;; This function uses a non-reentrant model
 16262 ;;
 16263                           
 16264                           
 16265                           ;psect for function _LedPointSelect
 16266  1EA3                     _LedPointSelect:	
 16267                           
 16268                           ;incstack = 0
 16269                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 16270                           ;LedPointSelect@led stored from wreg
 16271  1EA3  0020               	movlb	0	; select bank0
 16272  1EA4  00A0               	movwf	LedPointSelect@led
 16273                           
 16274                           ;LED_B1.c: 9: if (led == 1) {
 16275  1EA5  0820               	movf	LedPointSelect@led,w
 16276  1EA6  3A01               	xorlw	1
 16277  1EA7  1D03               	skipz
 16278  1EA8  2EAE               	goto	l9315
 16279                           
 16280                           ;LED_B1.c: 10: LED = &VarLED1;
 16281  1EA9  3066               	movlw	low _VarLED1
 16282  1EAA  0021               	movlb	1	; select bank1
 16283  1EAB  00C0               	movwf	_LED^(0+128)
 16284  1EAC  3001               	movlw	high _VarLED1
 16285  1EAD  00C1               	movwf	(_LED+1)^(0+128)
 16286  1EAE                     l9315:	
 16287                           
 16288                           ;LED_B1.c: 11: }
 16289                           ;LED_B1.c: 14: if (led == 2) {
 16290  1EAE  0020               	movlb	0	; select bank0
 16291  1EAF  0820               	movf	LedPointSelect@led,w
 16292  1EB0  3A02               	xorlw	2
 16293  1EB1  1D03               	skipz
 16294  1EB2  2EB8               	goto	l9319
 16295                           
 16296                           ;LED_B1.c: 15: LED = &VarLED2;
 16297  1EB3  306A               	movlw	low _VarLED2
 16298  1EB4  0021               	movlb	1	; select bank1
 16299  1EB5  00C0               	movwf	_LED^(0+128)
 16300  1EB6  3001               	movlw	high _VarLED2
 16301  1EB7  00C1               	movwf	(_LED+1)^(0+128)
 16302  1EB8                     l9319:	
 16303                           
 16304                           ;LED_B1.c: 16: }
 16305                           ;LED_B1.c: 24: if (led == 99) {
 16306  1EB8  0020               	movlb	0	; select bank0
 16307  1EB9  0820               	movf	LedPointSelect@led,w
 16308  1EBA  3A63               	xorlw	99
 16309  1EBB  1D03               	skipz
 16310  1EBC  0008               	return
 16311                           
 16312                           ;LED_B1.c: 25: LED = &VarErrLED;
 16313  1EBD  30E4               	movlw	low _VarErrLED
 16314  1EBE  0021               	movlb	1	; select bank1
 16315  1EBF  00C0               	movwf	_LED^(0+128)
 16316  1EC0  3000               	movlw	high _VarErrLED
 16317  1EC1  00C1               	movwf	(_LED+1)^(0+128)
 16318  1EC2  0008               	return
 16319  1EC3                     __end_of_LedPointSelect:	
 16320                           
 16321                           	psect	text105
 16322  1D8F                     __ptext105:	
 16323 ;; *************** function _setDimmerLights_Line *****************
 16324 ;; Defined at:
 16325 ;;		line 714 in file "../src/Dimmer_B1.c"
 16326 ;; Parameters:    Size  Location     Type
 16327 ;;  lights          1    wreg     unsigned char 
 16328 ;; Auto vars:     Size  Location     Type
 16329 ;;  lights          1    0[BANK0 ] unsigned char 
 16330 ;; Return value:  Size  Location     Type
 16331 ;;		None               void
 16332 ;; Registers used:
 16333 ;;		wreg
 16334 ;; Tracked objects:
 16335 ;;		On entry : 0/0
 16336 ;;		On exit  : 0/0
 16337 ;;		Unchanged: 0/0
 16338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;Total ram usage:        1 bytes
 16344 ;; Hardware stack levels used:    1
 16345 ;; Hardware stack levels required when called:    5
 16346 ;; This function calls:
 16347 ;;		Nothing
 16348 ;; This function is called by:
 16349 ;;		_setDimmerLights
 16350 ;;		_setDimmerLights_Adj
 16351 ;; This function uses a non-reentrant model
 16352 ;;
 16353                           
 16354                           
 16355                           ;psect for function _setDimmerLights_Line
 16356  1D8F                     _setDimmerLights_Line:	
 16357                           
 16358                           ;incstack = 0
 16359                           ; Regs used in _setDimmerLights_Line: [wreg]
 16360                           ;setDimmerLights_Line@lights stored from wreg
 16361  1D8F  0020               	movlb	0	; select bank0
 16362  1D90  00A0               	movwf	setDimmerLights_Line@lights
 16363                           
 16364                           ;Dimmer_B1.c: 715: Dimmer.LoadGO = 1;
 16365  1D91  0021               	movlb	1	; select bank1
 16366  1D92  153A               	bsf	_Dimmer^(0+128),2	;volatile
 16367                           
 16368                           ;Dimmer_B1.c: 717: DimmerLights1.Line = 0;
 16369  1D93  0023               	movlb	3	; select bank3
 16370  1D94  1348               	bcf	(_DimmerLights1^(0+384)+10),6
 16371                           
 16372                           ;Dimmer_B1.c: 720: DimmerLights2.Line = 0;
 16373  1D95  1359               	bcf	(_DimmerLights2^(0+384)+10),6
 16374                           
 16375                           ;Dimmer_B1.c: 726: if (lights == 1) {
 16376  1D96  0020               	movlb	0	; select bank0
 16377  1D97  0820               	movf	setDimmerLights_Line@lights,w
 16378  1D98  3A01               	xorlw	1
 16379  1D99  1D03               	skipz
 16380  1D9A  2D9E               	goto	l9487
 16381                           
 16382                           ;Dimmer_B1.c: 727: DimmerLights1.Line = 1;
 16383  1D9B  0023               	movlb	3	; select bank3
 16384  1D9C  1748               	bsf	(_DimmerLights1^(0+384)+10),6
 16385                           
 16386                           ;Dimmer_B1.c: 728: }
 16387  1D9D  0008               	return
 16388  1D9E                     l9487:	
 16389                           
 16390                           ;Dimmer_B1.c: 731: else if (lights == 2) {
 16391  1D9E  0020               	movlb	0	; select bank0
 16392  1D9F  0820               	movf	setDimmerLights_Line@lights,w
 16393  1DA0  3A02               	xorlw	2
 16394  1DA1  1D03               	skipz
 16395  1DA2  0008               	return
 16396                           
 16397                           ;Dimmer_B1.c: 732: DimmerLights2.Line = 1;
 16398  1DA3  0023               	movlb	3	; select bank3
 16399  1DA4  1759               	bsf	(_DimmerLights2^(0+384)+10),6
 16400  1DA5  0008               	return
 16401  1DA6                     __end_of_setDimmerLights_Line:	
 16402                           
 16403                           	psect	text106
 16404  1C75                     __ptext106:	
 16405 ;; *************** function _getMain_LightsStatus *****************
 16406 ;; Defined at:
 16407 ;;		line 375 in file "../src/Main_B1.c"
 16408 ;; Parameters:    Size  Location     Type
 16409 ;;		None
 16410 ;; Auto vars:     Size  Location     Type
 16411 ;;  status          1    0[BANK0 ] unsigned char 
 16412 ;; Return value:  Size  Location     Type
 16413 ;;                  1    wreg      unsigned char 
 16414 ;; Registers used:
 16415 ;;		wreg, status,2, status,0
 16416 ;; Tracked objects:
 16417 ;;		On entry : 0/0
 16418 ;;		On exit  : 0/0
 16419 ;;		Unchanged: 0/0
 16420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;Total ram usage:        1 bytes
 16426 ;; Hardware stack levels used:    1
 16427 ;; Hardware stack levels required when called:    5
 16428 ;; This function calls:
 16429 ;;		Nothing
 16430 ;; This function is called by:
 16431 ;;		_DimmerLights_Main
 16432 ;;		_setDimmerLights_Main
 16433 ;;		_Flash_Memory_Main
 16434 ;;		_Exception_Main
 16435 ;;		_Load_Main
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function _getMain_LightsStatus
 16441  1C75                     _getMain_LightsStatus:	
 16442                           
 16443                           ;Main_B1.c: 376: char status = 0;
 16444                           
 16445                           ;incstack = 0
 16446                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16447  1C75  0020               	movlb	0	; select bank0
 16448  1C76  01A0               	clrf	getMain_LightsStatus@status
 16449                           
 16450                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 16451  1C77  3000               	movlw	0
 16452  1C78  0023               	movlb	3	; select bank3
 16453  1C79  18C0               	btfsc	(_DimmerLights1^(0+384)+2),1
 16454  1C7A  3001               	movlw	1
 16455  1C7B  0020               	movlb	0	; select bank0
 16456  1C7C  00A0               	movwf	getMain_LightsStatus@status
 16457                           
 16458                           ;Main_B1.c: 396: if (status == 0) {
 16459  1C7D  08A0               	movf	getMain_LightsStatus@status,f
 16460  1C7E  1D03               	skipz
 16461  1C7F  2C86               	goto	l9723
 16462                           
 16463                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 16464  1C80  3000               	movlw	0
 16465  1C81  0023               	movlb	3	; select bank3
 16466  1C82  18D1               	btfsc	(_DimmerLights2^(0+384)+2),1
 16467  1C83  3001               	movlw	1
 16468  1C84  0020               	movlb	0	; select bank0
 16469  1C85  00A0               	movwf	getMain_LightsStatus@status
 16470  1C86                     l9723:	
 16471                           
 16472                           ;Main_B1.c: 398: }
 16473                           ;Main_B1.c: 422: return status;
 16474  1C86  0820               	movf	getMain_LightsStatus@status,w
 16475  1C87  0008               	return
 16476  1C88                     __end_of_getMain_LightsStatus:	
 16477                           
 16478                           	psect	text107
 16479  124A                     __ptext107:	
 16480 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16481 ;; Defined at:
 16482 ;;		line 594 in file "../src/Dimmer_B1.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  lights          1    wreg     unsigned char 
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  lights          1    5[BANK0 ] unsigned char 
 16487 ;;  allow           1    6[BANK0 ] unsigned char 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  1    wreg      unsigned char 
 16490 ;; Registers used:
 16491 ;;		wreg, status,2, status,0, pclath, cstack
 16492 ;; Tracked objects:
 16493 ;;		On entry : 0/0
 16494 ;;		On exit  : 0/0
 16495 ;;		Unchanged: 0/0
 16496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;Total ram usage:        6 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; Hardware stack levels required when called:    6
 16504 ;; This function calls:
 16505 ;;		_getLoad_OK
 16506 ;; This function is called by:
 16507 ;;		_setDimmerLights_Main
 16508 ;; This function uses a non-reentrant model
 16509 ;;
 16510                           
 16511                           
 16512                           ;psect for function _getDimmerLights_Allow_Condition
 16513  124A                     _getDimmerLights_Allow_Condition:	
 16514                           
 16515                           ;incstack = 0
 16516                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16517                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16518  124A  0020               	movlb	0	; select bank0
 16519  124B  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16520                           
 16521                           ;Dimmer_B1.c: 595: char allow = 0;
 16522  124C  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16523                           
 16524                           ;Dimmer_B1.c: 602: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16525  124D  01A2               	clrf	_getDimmerLights_Allow_Condition$2341
 16526  124E  0AA2               	incf	_getDimmerLights_Allow_Condition$2341,f
 16527  124F  319A  22D5  3192   	fcall	_getLoad_OK
 16528  1252  3800               	iorlw	0
 16529  1253  1D03               	skipz
 16530  1254  2A5A               	goto	l9737
 16531  1255  0021               	movlb	1	; select bank1
 16532  1256  193A               	btfsc	_Dimmer^(0+128),2	;volatile
 16533  1257  2A5A               	goto	l9737
 16534  1258  0020               	movlb	0	; select bank0
 16535  1259  01A2               	clrf	_getDimmerLights_Allow_Condition$2341
 16536  125A                     l9737:	
 16537  125A  0020               	movlb	0	; select bank0
 16538  125B  0822               	movf	_getDimmerLights_Allow_Condition$2341,w
 16539  125C  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16540  125D  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16541  125E  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16542                           
 16543                           ;Dimmer_B1.c: 607: if (allow == 0) {
 16544  125F  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16545  1260  1D03               	skipz
 16546  1261  2A82               	goto	l9761
 16547                           
 16548                           ;Dimmer_B1.c: 608: if (lights == 1) {
 16549  1262  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16550  1263  3A01               	xorlw	1
 16551  1264  1D03               	skipz
 16552  1265  2A71               	goto	l9751
 16553                           
 16554                           ;Dimmer_B1.c: 609: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 16555  1266  01A3               	clrf	_getDimmerLights_Allow_Condition$2342
 16556  1267  0AA3               	incf	_getDimmerLights_Allow_Condition$2342,f
 16557  1268  0023               	movlb	3	; select bank3
 16558  1269  1DD9               	btfss	(_DimmerLights2^(0+384)+10),3
 16559  126A  1B50               	btfsc	(_DimmerLights2^(0+384)+1),6
 16560  126B  2A6E               	goto	l9749
 16561  126C  0020               	movlb	0	; select bank0
 16562  126D  01A3               	clrf	_getDimmerLights_Allow_Condition$2342
 16563  126E                     l9749:	
 16564  126E  0020               	movlb	0	; select bank0
 16565  126F  0823               	movf	_getDimmerLights_Allow_Condition$2342,w
 16566  1270  2A7F               	goto	L10
 16567  1271                     l9751:	
 16568                           ;Dimmer_B1.c: 610: } else if (lights == 2) {
 16569                           
 16570  1271  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16571  1272  3A02               	xorlw	2
 16572  1273  1D03               	skipz
 16573  1274  2A82               	goto	l9761
 16574                           
 16575                           ;Dimmer_B1.c: 611: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 16576  1275  01A4               	clrf	_getDimmerLights_Allow_Condition$2343
 16577  1276  0AA4               	incf	_getDimmerLights_Allow_Condition$2343,f
 16578  1277  0023               	movlb	3	; select bank3
 16579  1278  1DC8               	btfss	(_DimmerLights1^(0+384)+10),3
 16580  1279  1B3F               	btfsc	(_DimmerLights1^(0+384)+1),6
 16581  127A  2A7D               	goto	l9759
 16582  127B  0020               	movlb	0	; select bank0
 16583  127C  01A4               	clrf	_getDimmerLights_Allow_Condition$2343
 16584  127D                     l9759:	
 16585  127D  0020               	movlb	0	; select bank0
 16586  127E  0824               	movf	_getDimmerLights_Allow_Condition$2343,w
 16587  127F                     L10:	
 16588  127F  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16589  1280  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16590  1281  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16591  1282                     l9761:	
 16592                           
 16593                           ;Dimmer_B1.c: 612: }
 16594                           ;Dimmer_B1.c: 613: }
 16595                           ;Dimmer_B1.c: 627: return allow;
 16596  1282  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16597  1283  0008               	return
 16598  1284                     __end_of_getDimmerLights_Allow_Condition:	
 16599                           
 16600                           	psect	text108
 16601  1AD5                     __ptext108:	
 16602 ;; *************** function _getLoad_OK *****************
 16603 ;; Defined at:
 16604 ;;		line 265 in file "../src/OverLoad_B1.c"
 16605 ;; Parameters:    Size  Location     Type
 16606 ;;		None
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  ok              1    0[BANK0 ] unsigned char 
 16609 ;; Return value:  Size  Location     Type
 16610 ;;                  1    wreg      unsigned char 
 16611 ;; Registers used:
 16612 ;;		wreg, status,2
 16613 ;; Tracked objects:
 16614 ;;		On entry : 0/0
 16615 ;;		On exit  : 0/0
 16616 ;;		Unchanged: 0/0
 16617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;Total ram usage:        1 bytes
 16623 ;; Hardware stack levels used:    1
 16624 ;; Hardware stack levels required when called:    5
 16625 ;; This function calls:
 16626 ;;		Nothing
 16627 ;; This function is called by:
 16628 ;;		_DimmerLights_Main
 16629 ;;		_getDimmerLights_Allow_Condition
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           
 16634                           ;psect for function _getLoad_OK
 16635  1AD5                     _getLoad_OK:	
 16636                           
 16637                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 16638                           
 16639                           ;incstack = 0
 16640                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16641  1AD5  3000               	movlw	0
 16642  1AD6  0022               	movlb	2	; select bank2
 16643  1AD7  1BAE               	btfsc	_Load^(0+256),7
 16644  1AD8  3001               	movlw	1
 16645  1AD9  0020               	movlb	0	; select bank0
 16646  1ADA  00A0               	movwf	getLoad_OK@ok
 16647                           
 16648                           ;OverLoad_B1.c: 267: return ok;
 16649  1ADB  0820               	movf	getLoad_OK@ok,w
 16650  1ADC  0008               	return
 16651  1ADD                     __end_of_getLoad_OK:	
 16652                           
 16653                           	psect	text109
 16654  1176                     __ptext109:	
 16655 ;; *************** function _getMain_All_Error_Status *****************
 16656 ;; Defined at:
 16657 ;;		line 426 in file "../src/Main_B1.c"
 16658 ;; Parameters:    Size  Location     Type
 16659 ;;  command         1    wreg     unsigned char 
 16660 ;; Auto vars:     Size  Location     Type
 16661 ;;  command         1    5[BANK0 ] unsigned char 
 16662 ;;  status          1    6[BANK0 ] unsigned char 
 16663 ;; Return value:  Size  Location     Type
 16664 ;;                  1    wreg      unsigned char 
 16665 ;; Registers used:
 16666 ;;		wreg, status,2, status,0
 16667 ;; Tracked objects:
 16668 ;;		On entry : 0/0
 16669 ;;		On exit  : 0/0
 16670 ;;		Unchanged: 0/0
 16671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;Total ram usage:        7 bytes
 16677 ;; Hardware stack levels used:    1
 16678 ;; Hardware stack levels required when called:    5
 16679 ;; This function calls:
 16680 ;;		Nothing
 16681 ;; This function is called by:
 16682 ;;		_DimmerLights_Main
 16683 ;;		_Exception_Main
 16684 ;;		_Load_Main
 16685 ;;		_setTemp_Main
 16686 ;;		_setRF_Main
 16687 ;;		_getRxData
 16688 ;;		_setSw_Main
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           
 16693                           ;psect for function _getMain_All_Error_Status
 16694  1176                     _getMain_All_Error_Status:	
 16695                           
 16696                           ;incstack = 0
 16697                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16698                           ;getMain_All_Error_Status@command stored from wreg
 16699  1176  0020               	movlb	0	; select bank0
 16700  1177  00A5               	movwf	getMain_All_Error_Status@command
 16701                           
 16702                           ;Main_B1.c: 427: char status = 0;
 16703  1178  01A6               	clrf	getMain_All_Error_Status@status
 16704                           
 16705                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 16706  1179  08A6               	movf	getMain_All_Error_Status@status,f
 16707  117A  1D03               	skipz
 16708  117B  2990               	goto	l9469
 16709  117C  0825               	movf	getMain_All_Error_Status@command,w
 16710  117D  3A02               	xorlw	2
 16711  117E  1903               	skipnz
 16712  117F  2990               	goto	l9469
 16713                           
 16714                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 16715  1180  0021               	movlb	1	; select bank1
 16716  1181  18D2               	btfsc	_Temp^(0+128),1
 16717  1182  2987               	goto	l9467
 16718  1183  0020               	movlb	0	; select bank0
 16719  1184  01A1               	clrf	_getMain_All_Error_Status$3627
 16720  1185  01A2               	clrf	_getMain_All_Error_Status$3627+1
 16721  1186  298C               	goto	l1577
 16722  1187                     l9467:	
 16723  1187  3002               	movlw	2
 16724  1188  0020               	movlb	0	; select bank0
 16725  1189  00A1               	movwf	_getMain_All_Error_Status$3627
 16726  118A  3000               	movlw	0
 16727  118B  00A2               	movwf	_getMain_All_Error_Status$3627+1
 16728  118C                     l1577:	
 16729  118C  0821               	movf	_getMain_All_Error_Status$3627,w
 16730  118D  00A0               	movwf	??_getMain_All_Error_Status
 16731  118E  0820               	movf	??_getMain_All_Error_Status,w
 16732  118F  00A6               	movwf	getMain_All_Error_Status@status
 16733  1190                     l9469:	
 16734                           
 16735                           ;Main_B1.c: 440: }
 16736                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 16737  1190  08A6               	movf	getMain_All_Error_Status@status,f
 16738  1191  1D03               	skipz
 16739  1192  29A7               	goto	l1578
 16740  1193  0825               	movf	getMain_All_Error_Status@command,w
 16741  1194  3A03               	xorlw	3
 16742  1195  1903               	skipnz
 16743  1196  29A7               	goto	l1578
 16744                           
 16745                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 16746  1197  0022               	movlb	2	; select bank2
 16747  1198  1AAE               	btfsc	_Load^(0+256),5
 16748  1199  299E               	goto	l9477
 16749  119A  0020               	movlb	0	; select bank0
 16750  119B  01A3               	clrf	_getMain_All_Error_Status$3628
 16751  119C  01A4               	clrf	_getMain_All_Error_Status$3628+1
 16752  119D  29A3               	goto	l1582
 16753  119E                     l9477:	
 16754  119E  3003               	movlw	3
 16755  119F  0020               	movlb	0	; select bank0
 16756  11A0  00A3               	movwf	_getMain_All_Error_Status$3628
 16757  11A1  3000               	movlw	0
 16758  11A2  00A4               	movwf	_getMain_All_Error_Status$3628+1
 16759  11A3                     l1582:	
 16760  11A3  0823               	movf	_getMain_All_Error_Status$3628,w
 16761  11A4  00A0               	movwf	??_getMain_All_Error_Status
 16762  11A5  0820               	movf	??_getMain_All_Error_Status,w
 16763  11A6  00A6               	movwf	getMain_All_Error_Status@status
 16764  11A7                     l1578:	
 16765                           
 16766                           ;Main_B1.c: 447: }
 16767                           ;Main_B1.c: 463: return status;
 16768  11A7  0826               	movf	getMain_All_Error_Status@status,w
 16769  11A8  0008               	return
 16770  11A9                     __end_of_getMain_All_Error_Status:	
 16771                           
 16772                           	psect	text110
 16773  1CD5                     __ptext110:	
 16774 ;; *************** function _DimmerLights_Initialization *****************
 16775 ;; Defined at:
 16776 ;;		line 341 in file "../src/Dimmer_B1.c"
 16777 ;; Parameters:    Size  Location     Type
 16778 ;;		None
 16779 ;; Auto vars:     Size  Location     Type
 16780 ;;		None
 16781 ;; Return value:  Size  Location     Type
 16782 ;;		None               void
 16783 ;; Registers used:
 16784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16785 ;; Tracked objects:
 16786 ;;		On entry : 0/0
 16787 ;;		On exit  : 0/0
 16788 ;;		Unchanged: 0/0
 16789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16794 ;;Total ram usage:        1 bytes
 16795 ;; Hardware stack levels used:    1
 16796 ;; Hardware stack levels required when called:    7
 16797 ;; This function calls:
 16798 ;;		_setDimmerLights_Initialization
 16799 ;; This function is called by:
 16800 ;;		_main
 16801 ;; This function uses a non-reentrant model
 16802 ;;
 16803                           
 16804                           
 16805                           ;psect for function _DimmerLights_Initialization
 16806  1CD5                     _DimmerLights_Initialization:	
 16807                           
 16808                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 16809                           
 16810                           ;incstack = 0
 16811                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16812  1CD5  30BE               	movlw	_DimmerLights1& (0+255)
 16813  1CD6  0020               	movlb	0	; select bank0
 16814  1CD7  00A4               	movwf	??_DimmerLights_Initialization
 16815  1CD8  0824               	movf	??_DimmerLights_Initialization,w
 16816  1CD9  0021               	movlb	1	; select bank1
 16817  1CDA  00C7               	movwf	_DimmerLights11^(0+128)
 16818                           
 16819                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 16820  1CDB  3001               	movlw	1
 16821  1CDC  3191  2145  319C   	fcall	_setDimmerLights_Initialization
 16822                           
 16823                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 16824  1CDF  30CF               	movlw	_DimmerLights2& (0+255)
 16825  1CE0  0020               	movlb	0	; select bank0
 16826  1CE1  00A4               	movwf	??_DimmerLights_Initialization
 16827  1CE2  0824               	movf	??_DimmerLights_Initialization,w
 16828  1CE3  0021               	movlb	1	; select bank1
 16829  1CE4  00C8               	movwf	_DimmerLights22^(0+128)
 16830                           
 16831                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 16832  1CE5  3002               	movlw	2
 16833  1CE6  3191  2145         	fcall	_setDimmerLights_Initialization
 16834  1CE8  0008               	return
 16835  1CE9                     __end_of_DimmerLights_Initialization:	
 16836                           
 16837                           	psect	text111
 16838  1145                     __ptext111:	
 16839 ;; *************** function _setDimmerLights_Initialization *****************
 16840 ;; Defined at:
 16841 ;;		line 365 in file "../src/Dimmer_B1.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;  lights          1    wreg     unsigned char 
 16844 ;; Auto vars:     Size  Location     Type
 16845 ;;  lights          1    3[BANK0 ] unsigned char 
 16846 ;; Return value:  Size  Location     Type
 16847 ;;		None               void
 16848 ;; Registers used:
 16849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16850 ;; Tracked objects:
 16851 ;;		On entry : 0/0
 16852 ;;		On exit  : 0/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;Total ram usage:        2 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:    6
 16862 ;; This function calls:
 16863 ;;		_DimmerLightsPointSelect
 16864 ;; This function is called by:
 16865 ;;		_DimmerLights_Initialization
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           
 16870                           ;psect for function _setDimmerLights_Initialization
 16871  1145                     _setDimmerLights_Initialization:	
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16875                           ;setDimmerLights_Initialization@lights stored from wreg
 16876  1145  0020               	movlb	0	; select bank0
 16877  1146  00A3               	movwf	setDimmerLights_Initialization@lights
 16878                           
 16879                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 16880  1147  0823               	movf	setDimmerLights_Initialization@lights,w
 16881  1148  319C  2462  3191   	fcall	_DimmerLightsPointSelect
 16882                           
 16883                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 16884  114B  3007               	movlw	7
 16885  114C  0020               	movlb	0	; select bank0
 16886  114D  00A2               	movwf	??_setDimmerLights_Initialization
 16887  114E  086F               	movf	_DimmerLights,w
 16888  114F  3E08               	addlw	8
 16889  1150  0086               	movwf	6
 16890  1151  3001               	movlw	1	; select bank2/3
 16891  1152  0087               	movwf	7
 16892  1153  0822               	movf	??_setDimmerLights_Initialization,w
 16893  1154  0081               	movwf	1
 16894                           
 16895                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 16896  1155  3038               	movlw	56
 16897  1156  00A2               	movwf	??_setDimmerLights_Initialization
 16898  1157  086F               	movf	_DimmerLights,w
 16899  1158  3E06               	addlw	6
 16900  1159  0086               	movwf	6
 16901  115A  3001               	movlw	1	; select bank2/3
 16902  115B  0087               	movwf	7
 16903  115C  0822               	movf	??_setDimmerLights_Initialization,w
 16904  115D  0081               	movwf	1
 16905                           
 16906                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 16907  115E  300C               	movlw	12
 16908  115F  00A2               	movwf	??_setDimmerLights_Initialization
 16909  1160  086F               	movf	_DimmerLights,w
 16910  1161  3E09               	addlw	9
 16911  1162  0086               	movwf	6
 16912  1163  3001               	movlw	1	; select bank2/3
 16913  1164  0087               	movwf	7
 16914  1165  0822               	movf	??_setDimmerLights_Initialization,w
 16915  1166  0081               	movwf	1
 16916                           
 16917                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 16918  1167  086F               	movf	_DimmerLights,w
 16919  1168  3E06               	addlw	6
 16920  1169  0086               	movwf	6
 16921  116A  3001               	movlw	1	; select bank2/3
 16922  116B  0087               	movwf	7
 16923  116C  0801               	movf	1,w
 16924  116D  00A2               	movwf	??_setDimmerLights_Initialization
 16925  116E  086F               	movf	_DimmerLights,w
 16926  116F  3E04               	addlw	4
 16927  1170  0086               	movwf	6
 16928  1171  3001               	movlw	1	; select bank2/3
 16929  1172  0087               	movwf	7
 16930  1173  0822               	movf	??_setDimmerLights_Initialization,w
 16931  1174  0081               	movwf	1
 16932  1175  0008               	return
 16933  1176                     __end_of_setDimmerLights_Initialization:	
 16934                           
 16935                           	psect	text112
 16936  1ACD                     __ptext112:	
 16937 ;; *************** function _DelayOff_Main *****************
 16938 ;; Defined at:
 16939 ;;		line 41 in file "../src/DelayOff_B1.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;		None
 16942 ;; Auto vars:     Size  Location     Type
 16943 ;;		None
 16944 ;; Return value:  Size  Location     Type
 16945 ;;		None               void
 16946 ;; Registers used:
 16947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16948 ;; Tracked objects:
 16949 ;;		On entry : 0/0
 16950 ;;		On exit  : 0/0
 16951 ;;		Unchanged: 0/0
 16952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16957 ;;Total ram usage:        0 bytes
 16958 ;; Hardware stack levels used:    1
 16959 ;; Hardware stack levels required when called:   11
 16960 ;; This function calls:
 16961 ;;		_DlyOff_Main
 16962 ;; This function is called by:
 16963 ;;		_main
 16964 ;; This function uses a non-reentrant model
 16965 ;;
 16966                           
 16967                           
 16968                           ;psect for function _DelayOff_Main
 16969  1ACD                     _DelayOff_Main:	
 16970                           
 16971                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16972                           
 16973                           ;incstack = 0
 16974                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16975  1ACD  3001               	movlw	1
 16976  1ACE  3188  2046  319A   	fcall	_DlyOff_Main
 16977                           
 16978                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16979  1AD1  3002               	movlw	2
 16980  1AD2  3188  2046         	fcall	_DlyOff_Main
 16981  1AD4  0008               	return
 16982  1AD5                     __end_of_DelayOff_Main:	
 16983                           
 16984                           	psect	text113
 16985  0846                     __ptext113:	
 16986 ;; *************** function _DlyOff_Main *****************
 16987 ;; Defined at:
 16988 ;;		line 61 in file "../src/DelayOff_B1.c"
 16989 ;; Parameters:    Size  Location     Type
 16990 ;;  sw              1    wreg     unsigned char 
 16991 ;; Auto vars:     Size  Location     Type
 16992 ;;  sw              1   78[BANK0 ] unsigned char 
 16993 ;; Return value:  Size  Location     Type
 16994 ;;		None               void
 16995 ;; Registers used:
 16996 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16997 ;; Tracked objects:
 16998 ;;		On entry : 0/0
 16999 ;;		On exit  : 0/0
 17000 ;;		Unchanged: 0/0
 17001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17005 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;Total ram usage:        3 bytes
 17007 ;; Hardware stack levels used:    1
 17008 ;; Hardware stack levels required when called:   10
 17009 ;; This function calls:
 17010 ;;		_DelayOffPointSelect
 17011 ;;		_setBuz
 17012 ;;		_setDimmerLights_ErrorClose
 17013 ;; This function is called by:
 17014 ;;		_DelayOff_Main
 17015 ;; This function uses a non-reentrant model
 17016 ;;
 17017                           
 17018                           
 17019                           ;psect for function _DlyOff_Main
 17020  0846                     _DlyOff_Main:	
 17021                           
 17022                           ;incstack = 0
 17023                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17024                           ;DlyOff_Main@sw stored from wreg
 17025  0846  0020               	movlb	0	; select bank0
 17026  0847  00EE               	movwf	DlyOff_Main@sw
 17027                           
 17028                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17029  0848  086E               	movf	DlyOff_Main@sw,w
 17030  0849  319C  24C1  3188   	fcall	_DelayOffPointSelect
 17031                           
 17032                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17033  084C  0877               	movf	_DelayOff,w
 17034  084D  0086               	movwf	6
 17035  084E  3001               	movlw	1	; select bank2/3
 17036  084F  0087               	movwf	7
 17037  0850  1C81               	btfss	1,1
 17038  0851  0008               	return
 17039                           
 17040                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17041  0852  0877               	movf	_DelayOff,w
 17042  0853  3E02               	addlw	2
 17043  0854  0086               	movwf	6
 17044  0855  3001               	movlw	1	; select bank2/3
 17045  0856  0087               	movwf	7
 17046  0857  3001               	movlw	1
 17047  0858  0781               	addwf	1,f
 17048  0859  3141               	addfsr 1,1
 17049  085A  1803               	skipnc
 17050  085B  0A81               	incf	1,f
 17051                           
 17052                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 17053  085C  0877               	movf	_DelayOff,w
 17054  085D  3E02               	addlw	2
 17055  085E  0086               	movwf	6
 17056  085F  3001               	movlw	1	; select bank2/3
 17057  0860  0087               	movwf	7
 17058  0861  3F40               	moviw [0]fsr1
 17059  0862  0020               	movlb	0	; select bank0
 17060  0863  00EC               	movwf	??_DlyOff_Main
 17061  0864  3F41               	moviw [1]fsr1
 17062  0865  00ED               	movwf	??_DlyOff_Main+1
 17063  0866  3017               	movlw	23
 17064  0867  026D               	subwf	??_DlyOff_Main+1,w
 17065  0868  3070               	movlw	112
 17066  0869  1903               	skipnz
 17067  086A  026C               	subwf	??_DlyOff_Main,w
 17068  086B  1C03               	skipc
 17069  086C  0008               	return
 17070                           
 17071                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17072  086D  0877               	movf	_DelayOff,w
 17073  086E  3E02               	addlw	2
 17074  086F  0086               	movwf	6
 17075  0870  3001               	movlw	1	; select bank2/3
 17076  0871  0087               	movwf	7
 17077  0872  3000               	movlw	0
 17078  0873  3FC0               	movwi [0]fsr1
 17079  0874  3FC1               	movwi [1]fsr1
 17080                           
 17081                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17082  0875  3001               	movlw	1
 17083  0876  00EC               	movwf	??_DlyOff_Main
 17084  0877  0877               	movf	_DelayOff,w
 17085  0878  3E04               	addlw	4
 17086  0879  0086               	movwf	6
 17087  087A  3001               	movlw	1	; select bank2/3
 17088  087B  0087               	movwf	7
 17089  087C  086C               	movf	??_DlyOff_Main,w
 17090  087D  0781               	addwf	1,f
 17091                           
 17092                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17093  087E  0877               	movf	_DelayOff,w
 17094  087F  3E04               	addlw	4
 17095  0880  0086               	movwf	6
 17096  0881  3001               	movlw	1	; select bank2/3
 17097  0882  0087               	movwf	7
 17098  0883  0A77               	incf	_DelayOff,w
 17099  0884  0084               	movwf	4
 17100  0885  3001               	movlw	1	; select bank2/3
 17101  0886  0085               	movwf	5
 17102  0887  0800               	movf	0,w
 17103  0888  0201               	subwf	1,w
 17104  0889  1C03               	skipc
 17105  088A  0008               	return
 17106                           
 17107                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17108  088B  0877               	movf	_DelayOff,w
 17109  088C  3E04               	addlw	4
 17110  088D  0086               	movwf	6
 17111  088E  3001               	movlw	1	; select bank2/3
 17112  088F  0087               	movwf	7
 17113  0890  0181               	clrf	1
 17114                           
 17115                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17116  0891  0877               	movf	_DelayOff,w
 17117  0892  0086               	movwf	6
 17118  0893  3001               	movlw	1	; select bank2/3
 17119  0894  0087               	movwf	7
 17120  0895  1081               	bcf	1,1
 17121                           
 17122                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 17123  0896  3064               	movlw	100
 17124  0897  00A9               	movwf	setBuz@time
 17125  0898  3000               	movlw	0
 17126  0899  00AA               	movwf	setBuz@time+1
 17127  089A  3001               	movlw	1
 17128  089B  3196  2697  3188   	fcall	_setBuz
 17129                           
 17130                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 17131  089E  0020               	movlb	0	; select bank0
 17132  089F  086E               	movf	DlyOff_Main@sw,w
 17133  08A0  3189  2104         	fcall	_setDimmerLights_ErrorClose
 17134  08A2  0008               	return
 17135  08A3                     __end_of_DlyOff_Main:	
 17136                           
 17137                           	psect	text114
 17138  0904                     __ptext114:	
 17139 ;; *************** function _setDimmerLights_ErrorClose *****************
 17140 ;; Defined at:
 17141 ;;		line 854 in file "../src/Dimmer_B1.c"
 17142 ;; Parameters:    Size  Location     Type
 17143 ;;  lights          1    wreg     unsigned char 
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  lights          1    1[BANK1 ] unsigned char 
 17146 ;;  i               2    2[BANK1 ] int 
 17147 ;;  count           1    0[BANK1 ] unsigned char 
 17148 ;; Return value:  Size  Location     Type
 17149 ;;		None               void
 17150 ;; Registers used:
 17151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17152 ;; Tracked objects:
 17153 ;;		On entry : 0/0
 17154 ;;		On exit  : 0/0
 17155 ;;		Unchanged: 0/0
 17156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 17161 ;;Total ram usage:        5 bytes
 17162 ;; Hardware stack levels used:    1
 17163 ;; Hardware stack levels required when called:    9
 17164 ;; This function calls:
 17165 ;;		_DimmerLightsPointSelect
 17166 ;;		_getDimmerLights_Status
 17167 ;;		_setDimmerLights_SwOff
 17168 ;; This function is called by:
 17169 ;;		_DlyOff_Main
 17170 ;;		_setControl_Lights_Table
 17171 ;; This function uses a non-reentrant model
 17172 ;;
 17173                           
 17174                           
 17175                           ;psect for function _setDimmerLights_ErrorClose
 17176  0904                     _setDimmerLights_ErrorClose:	
 17177                           
 17178                           ;incstack = 0
 17179                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17180                           ;setDimmerLights_ErrorClose@lights stored from wreg
 17181  0904  0021               	movlb	1	; select bank1
 17182  0905  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 17183                           
 17184                           ;Dimmer_B1.c: 855: if (lights == 255) {
 17185  0906  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17186  0907  3AFF               	xorlw	255
 17187  0908  1D03               	skipz
 17188  0909  2947               	goto	l9303
 17189                           
 17190                           ;Dimmer_B1.c: 860: char count = 2;
 17191  090A  3002               	movlw	2
 17192  090B  0020               	movlb	0	; select bank0
 17193  090C  00EB               	movwf	??_setDimmerLights_ErrorClose
 17194  090D  086B               	movf	??_setDimmerLights_ErrorClose,w
 17195  090E  0021               	movlb	1	; select bank1
 17196  090F  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 17197                           
 17198                           ;Dimmer_B1.c: 865: for (int i = 0; i < count; i++) {
 17199  0910  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 17200  0911  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 17201  0912                     l9301:	
 17202  0912  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 17203  0913  3A80               	xorlw	128
 17204  0914  0020               	movlb	0	; select bank0
 17205  0915  00EB               	movwf	??_setDimmerLights_ErrorClose
 17206  0916  3080               	movlw	128
 17207  0917  026B               	subwf	??_setDimmerLights_ErrorClose,w
 17208  0918  1D03               	skipz
 17209  0919  291D               	goto	u10175
 17210  091A  0021               	movlb	1	; select bank1
 17211  091B  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 17212  091C  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 17213  091D                     u10175:	
 17214  091D  1803               	btfsc	3,0
 17215  091E  0008               	return
 17216                           
 17217                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(i + 1);
 17218  091F  0021               	movlb	1	; select bank1
 17219  0920  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17220  0921  3E01               	addlw	1
 17221  0922  319C  2462  3189   	fcall	_DimmerLightsPointSelect
 17222                           
 17223                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(i + 1) == 1) {
 17224  0925  0021               	movlb	1	; select bank1
 17225  0926  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17226  0927  3E01               	addlw	1
 17227  0928  319B  23D4  3189   	fcall	_getDimmerLights_Status
 17228  092B  3A01               	xorlw	1
 17229  092C  1D03               	skipz
 17230  092D  2941               	goto	l9299
 17231                           
 17232                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 17233  092E  0020               	movlb	0	; select bank0
 17234  092F  086F               	movf	_DimmerLights,w
 17235  0930  3E0B               	addlw	11
 17236  0931  0086               	movwf	6
 17237  0932  3001               	movlw	1	; select bank2/3
 17238  0933  0087               	movwf	7
 17239  0934  1481               	bsf	1,1
 17240                           
 17241                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 17242  0935  086F               	movf	_DimmerLights,w
 17243  0936  3E02               	addlw	2
 17244  0937  0086               	movwf	6
 17245  0938  3001               	movlw	1	; select bank2/3
 17246  0939  0087               	movwf	7
 17247  093A  1081               	bcf	1,1
 17248                           
 17249                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(i + 1);
 17250  093B  0021               	movlb	1	; select bank1
 17251  093C  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17252  093D  3E01               	addlw	1
 17253  093E  3194  2454  3189   	fcall	_setDimmerLights_SwOff
 17254  0941                     l9299:	
 17255  0941  3001               	movlw	1
 17256  0942  0021               	movlb	1	; select bank1
 17257  0943  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 17258  0944  3000               	movlw	0
 17259  0945  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 17260  0946  2912               	goto	l9301
 17261  0947                     l9303:	
 17262                           ;Dimmer_B1.c: 871: }
 17263                           ;Dimmer_B1.c: 872: }
 17264                           ;Dimmer_B1.c: 873: } else {
 17265                           
 17266                           
 17267                           ;Dimmer_B1.c: 874: DimmerLightsPointSelect(lights);
 17268  0947  0021               	movlb	1	; select bank1
 17269  0948  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17270  0949  319C  2462  3189   	fcall	_DimmerLightsPointSelect
 17271                           
 17272                           ;Dimmer_B1.c: 875: if (getDimmerLights_Status(lights) == 1) {
 17273  094C  0021               	movlb	1	; select bank1
 17274  094D  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17275  094E  319B  23D4  3189   	fcall	_getDimmerLights_Status
 17276  0951  3A01               	xorlw	1
 17277  0952  1D03               	skipz
 17278  0953  0008               	return
 17279                           
 17280                           ;Dimmer_B1.c: 876: DimmerLights->SwFlag = 1;
 17281  0954  0020               	movlb	0	; select bank0
 17282  0955  086F               	movf	_DimmerLights,w
 17283  0956  3E0B               	addlw	11
 17284  0957  0086               	movwf	6
 17285  0958  3001               	movlw	1	; select bank2/3
 17286  0959  0087               	movwf	7
 17287  095A  1481               	bsf	1,1
 17288                           
 17289                           ;Dimmer_B1.c: 877: DimmerLights->Status = 0;
 17290  095B  086F               	movf	_DimmerLights,w
 17291  095C  3E02               	addlw	2
 17292  095D  0086               	movwf	6
 17293  095E  3001               	movlw	1	; select bank2/3
 17294  095F  0087               	movwf	7
 17295  0960  1081               	bcf	1,1
 17296                           
 17297                           ;Dimmer_B1.c: 878: setDimmerLights_SwOff(lights);
 17298  0961  0021               	movlb	1	; select bank1
 17299  0962  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17300  0963  3194  2454         	fcall	_setDimmerLights_SwOff
 17301  0965  0008               	return
 17302  0966                     __end_of_setDimmerLights_ErrorClose:	
 17303                           
 17304                           	psect	text115
 17305  1454                     __ptext115:	
 17306 ;; *************** function _setDimmerLights_SwOff *****************
 17307 ;; Defined at:
 17308 ;;		line 450 in file "../src/Dimmer_B1.c"
 17309 ;; Parameters:    Size  Location     Type
 17310 ;;  sw              1    wreg     unsigned char 
 17311 ;; Auto vars:     Size  Location     Type
 17312 ;;  sw              1   74[BANK0 ] unsigned char 
 17313 ;; Return value:  Size  Location     Type
 17314 ;;		None               void
 17315 ;; Registers used:
 17316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17317 ;; Tracked objects:
 17318 ;;		On entry : 0/0
 17319 ;;		On exit  : 0/0
 17320 ;;		Unchanged: 0/0
 17321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;Total ram usage:        1 bytes
 17327 ;; Hardware stack levels used:    1
 17328 ;; Hardware stack levels required when called:    8
 17329 ;; This function calls:
 17330 ;;		_DimmerLightsPointSelect
 17331 ;;		_getDelayOff_GO
 17332 ;;		_setDelayOff_GO
 17333 ;; This function is called by:
 17334 ;;		_setDimmerLights_ErrorClose
 17335 ;;		_Exception_Main
 17336 ;;		_setRFSW_Control
 17337 ;;		_setSw_Main
 17338 ;; This function uses a non-reentrant model
 17339 ;;
 17340                           
 17341                           
 17342                           ;psect for function _setDimmerLights_SwOff
 17343  1454                     _setDimmerLights_SwOff:	
 17344                           
 17345                           ;incstack = 0
 17346                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17347                           ;setDimmerLights_SwOff@sw stored from wreg
 17348  1454  0020               	movlb	0	; select bank0
 17349  1455  00EA               	movwf	setDimmerLights_SwOff@sw
 17350                           
 17351                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 17352  1456  086A               	movf	setDimmerLights_SwOff@sw,w
 17353  1457  319C  2462  3194   	fcall	_DimmerLightsPointSelect
 17354                           
 17355                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 17356  145A  0020               	movlb	0	; select bank0
 17357  145B  086F               	movf	_DimmerLights,w
 17358  145C  3E0B               	addlw	11
 17359  145D  0086               	movwf	6
 17360  145E  3001               	movlw	1	; select bank2/3
 17361  145F  0087               	movwf	7
 17362  1460  1C81               	btfss	1,1
 17363  1461  0008               	return
 17364                           
 17365                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 17366  1462  086F               	movf	_DimmerLights,w
 17367  1463  3E0B               	addlw	11
 17368  1464  0086               	movwf	6
 17369  1465  3001               	movlw	1	; select bank2/3
 17370  1466  0087               	movwf	7
 17371  1467  1081               	bcf	1,1
 17372                           
 17373                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 17374  1468  086F               	movf	_DimmerLights,w
 17375  1469  3E02               	addlw	2
 17376  146A  0086               	movwf	6
 17377  146B  3001               	movlw	1	; select bank2/3
 17378  146C  0087               	movwf	7
 17379  146D  1C81               	btfss	1,1
 17380  146E  2C89               	goto	l9131
 17381                           
 17382                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 17383  146F  086F               	movf	_DimmerLights,w
 17384  1470  3E0B               	addlw	11
 17385  1471  0086               	movwf	6
 17386  1472  3001               	movlw	1	; select bank2/3
 17387  1473  0087               	movwf	7
 17388  1474  1D01               	btfss	1,2
 17389  1475  0008               	return
 17390                           
 17391                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 17392  1476  086F               	movf	_DimmerLights,w
 17393  1477  3E0B               	addlw	11
 17394  1478  0086               	movwf	6
 17395  1479  3001               	movlw	1	; select bank2/3
 17396  147A  0087               	movwf	7
 17397  147B  1101               	bcf	1,2
 17398                           
 17399                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 17400  147C  086F               	movf	_DimmerLights,w
 17401  147D  3E0A               	addlw	10
 17402  147E  0086               	movwf	6
 17403  147F  3001               	movlw	1	; select bank2/3
 17404  1480  0087               	movwf	7
 17405  1481  1581               	bsf	1,3
 17406                           
 17407                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 17408  1482  086F               	movf	_DimmerLights,w
 17409  1483  3E0A               	addlw	10
 17410  1484  0086               	movwf	6
 17411  1485  3001               	movlw	1	; select bank2/3
 17412  1486  0087               	movwf	7
 17413  1487  1101               	bcf	1,2
 17414                           
 17415                           ;Dimmer_B1.c: 462: }
 17416                           ;Dimmer_B1.c: 463: } else {
 17417  1488  0008               	return
 17418  1489                     l9131:	
 17419                           
 17420                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 17421  1489  086F               	movf	_DimmerLights,w
 17422  148A  3E0A               	addlw	10
 17423  148B  0086               	movwf	6
 17424  148C  3001               	movlw	1	; select bank2/3
 17425  148D  0087               	movwf	7
 17426  148E  1481               	bsf	1,1
 17427                           
 17428                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 17429  148F  086F               	movf	_DimmerLights,w
 17430  1490  3E0A               	addlw	10
 17431  1491  0086               	movwf	6
 17432  1492  3001               	movlw	1	; select bank2/3
 17433  1493  0087               	movwf	7
 17434  1494  1001               	bcf	1,0
 17435                           
 17436                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 17437  1495  086A               	movf	setDimmerLights_SwOff@sw,w
 17438  1496  319B  23C4  3194   	fcall	_getDelayOff_GO
 17439  1499  3A01               	xorlw	1
 17440  149A  1D03               	skipz
 17441  149B  0008               	return
 17442                           
 17443                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 17444  149C  0020               	movlb	0	; select bank0
 17445  149D  01E6               	clrf	setDelayOff_GO@command
 17446  149E  01E7               	clrf	setDelayOff_GO@value
 17447  149F  086A               	movf	setDimmerLights_SwOff@sw,w
 17448  14A0  3195  2544         	fcall	_setDelayOff_GO
 17449  14A2  0008               	return
 17450  14A3                     __end_of_setDimmerLights_SwOff:	
 17451                           
 17452                           	psect	text116
 17453  1544                     __ptext116:	
 17454 ;; *************** function _setDelayOff_GO *****************
 17455 ;; Defined at:
 17456 ;;		line 83 in file "../src/DelayOff_B1.c"
 17457 ;; Parameters:    Size  Location     Type
 17458 ;;  sw              1    wreg     unsigned char 
 17459 ;;  command         1   70[BANK0 ] unsigned char 
 17460 ;;  value           1   71[BANK0 ] unsigned char 
 17461 ;; Auto vars:     Size  Location     Type
 17462 ;;  sw              1   73[BANK0 ] unsigned char 
 17463 ;; Return value:  Size  Location     Type
 17464 ;;		None               void
 17465 ;; Registers used:
 17466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17467 ;; Tracked objects:
 17468 ;;		On entry : 0/0
 17469 ;;		On exit  : 0/0
 17470 ;;		Unchanged: 0/0
 17471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17472 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17475 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17476 ;;Total ram usage:        4 bytes
 17477 ;; Hardware stack levels used:    1
 17478 ;; Hardware stack levels required when called:    7
 17479 ;; This function calls:
 17480 ;;		_DelayOffPointSelect
 17481 ;;		_DelayTimejudge
 17482 ;;		_setProductData
 17483 ;; This function is called by:
 17484 ;;		_setDimmerLights_SwOff
 17485 ;;		_setRFSW_Control
 17486 ;; This function uses a non-reentrant model
 17487 ;;
 17488                           
 17489                           
 17490                           ;psect for function _setDelayOff_GO
 17491  1544                     _setDelayOff_GO:	
 17492                           
 17493                           ;incstack = 0
 17494                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17495                           ;setDelayOff_GO@sw stored from wreg
 17496  1544  0020               	movlb	0	; select bank0
 17497  1545  00E9               	movwf	setDelayOff_GO@sw
 17498                           
 17499                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 17500  1546  0869               	movf	setDelayOff_GO@sw,w
 17501  1547  319C  24C1  3195   	fcall	_DelayOffPointSelect
 17502                           
 17503                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 17504  154A  0020               	movlb	0	; select bank0
 17505  154B  0866               	movf	setDelayOff_GO@command,w
 17506  154C  3A01               	xorlw	1
 17507  154D  3000               	movlw	0
 17508  154E  1903               	skipnz
 17509  154F  3001               	movlw	1
 17510  1550  00E8               	movwf	??_setDelayOff_GO
 17511  1551  0877               	movf	_DelayOff,w
 17512  1552  0086               	movwf	6
 17513  1553  3001               	movlw	1	; select bank2/3
 17514  1554  0087               	movwf	7
 17515  1555  0DE8               	rlf	??_setDelayOff_GO,f
 17516  1556  0801               	movf	1,w
 17517  1557  0668               	xorwf	??_setDelayOff_GO,w
 17518  1558  39FD               	andlw	-3
 17519  1559  0668               	xorwf	??_setDelayOff_GO,w
 17520  155A  0081               	movwf	1
 17521                           
 17522                           ;DelayOff_B1.c: 89: if (command == 1) {
 17523  155B  0866               	movf	setDelayOff_GO@command,w
 17524  155C  3A01               	xorlw	1
 17525  155D  1D03               	skipz
 17526  155E  2D82               	goto	l9037
 17527                           
 17528                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 17529  155F  0867               	movf	setDelayOff_GO@value,w
 17530  1560  3190  2067  3195   	fcall	_DelayTimejudge
 17531  1563  0020               	movlb	0	; select bank0
 17532  1564  00E8               	movwf	??_setDelayOff_GO
 17533  1565  0A77               	incf	_DelayOff,w
 17534  1566  0086               	movwf	6
 17535  1567  3001               	movlw	1	; select bank2/3
 17536  1568  0087               	movwf	7
 17537  1569  0868               	movf	??_setDelayOff_GO,w
 17538  156A  0081               	movwf	1
 17539                           
 17540                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 17541  156B  300F               	movlw	15
 17542  156C  0567               	andwf	setDelayOff_GO@value,w
 17543  156D  00E8               	movwf	??_setDelayOff_GO
 17544  156E  0868               	movf	??_setDelayOff_GO,w
 17545  156F  3A05               	xorlw	5
 17546  1570  1903               	skipnz
 17547  1571  2D76               	goto	l9031
 17548  1572  0867               	movf	setDelayOff_GO@value,w
 17549  1573  390F               	andlw	15
 17550  1574  1D03               	btfss	3,2
 17551  1575  2D7C               	goto	l9035
 17552  1576                     l9031:	
 17553  1576  3026               	movlw	38
 17554  1577  0267               	subwf	setDelayOff_GO@value,w
 17555  1578  1803               	skipnc
 17556  1579  2D7C               	goto	l9035
 17557                           
 17558                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 17559  157A  0867               	movf	setDelayOff_GO@value,w
 17560  157B  2D7E               	goto	L12
 17561  157C                     l9035:	
 17562                           ;DelayOff_B1.c: 93: } else {
 17563                           
 17564                           
 17565                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 17566  157C  3005               	movlw	5
 17567  157D  0020               	movlb	0	; select bank0
 17568  157E                     L12:	
 17569  157E  00E8               	movwf	??_setDelayOff_GO
 17570  157F  0868               	movf	??_setDelayOff_GO,w
 17571  1580  00E2               	movwf	setProductData@value
 17572  1581  2D84               	goto	L11
 17573  1582                     l9037:	
 17574                           ;DelayOff_B1.c: 95: }
 17575                           ;DelayOff_B1.c: 96: } else {
 17576                           
 17577                           
 17578                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 17579  1582  0020               	movlb	0	; select bank0
 17580  1583  01E2               	clrf	setProductData@value
 17581  1584                     L11:	
 17582  1584  0869               	movf	setDelayOff_GO@sw,w
 17583  1585  3E1A               	addlw	26
 17584  1586  319B  2389         	fcall	_setProductData
 17585                           
 17586                           ;DelayOff_B1.c: 98: }
 17587                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 17588  1588  0877               	movf	_DelayOff,w
 17589  1589  3E02               	addlw	2
 17590  158A  0086               	movwf	6
 17591  158B  3001               	movlw	1	; select bank2/3
 17592  158C  0087               	movwf	7
 17593  158D  3000               	movlw	0
 17594  158E  3FC0               	movwi [0]fsr1
 17595  158F  3FC1               	movwi [1]fsr1
 17596                           
 17597                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 17598  1590  0877               	movf	_DelayOff,w
 17599  1591  3E04               	addlw	4
 17600  1592  0086               	movwf	6
 17601  1593  3001               	movlw	1	; select bank2/3
 17602  1594  0087               	movwf	7
 17603  1595  0181               	clrf	1
 17604  1596  0008               	return
 17605  1597                     __end_of_setDelayOff_GO:	
 17606                           
 17607                           	psect	text117
 17608  1B89                     __ptext117:	
 17609 ;; *************** function _setProductData *****************
 17610 ;; Defined at:
 17611 ;;		line 605 in file "../src/Main_B1.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;  address         1    wreg     unsigned char 
 17614 ;;  value           1   66[BANK0 ] unsigned char 
 17615 ;; Auto vars:     Size  Location     Type
 17616 ;;  address         1   69[BANK0 ] unsigned char 
 17617 ;; Return value:  Size  Location     Type
 17618 ;;		None               void
 17619 ;; Registers used:
 17620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17621 ;; Tracked objects:
 17622 ;;		On entry : 0/0
 17623 ;;		On exit  : 0/0
 17624 ;;		Unchanged: 0/0
 17625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17626 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17630 ;;Total ram usage:        4 bytes
 17631 ;; Hardware stack levels used:    1
 17632 ;; Hardware stack levels required when called:    5
 17633 ;; This function calls:
 17634 ;;		Nothing
 17635 ;; This function is called by:
 17636 ;;		_setDelayOff_GO
 17637 ;;		_setDimmerLights
 17638 ;;		_setDimmerLights_Adj
 17639 ;;		_setTemp_Main
 17640 ;;		_setLog_Code
 17641 ;;		_setControl_Lights_Table
 17642 ;;		_setRFSW_AdjControl
 17643 ;;		_setRF_DimmerValue
 17644 ;;		_setRF_DimmerLights
 17645 ;; This function uses a non-reentrant model
 17646 ;;
 17647                           
 17648                           
 17649                           ;psect for function _setProductData
 17650  1B89                     _setProductData:	
 17651                           
 17652                           ;incstack = 0
 17653                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17654                           ;setProductData@address stored from wreg
 17655  1B89  0020               	movlb	0	; select bank0
 17656  1B8A  00E5               	movwf	setProductData@address
 17657                           
 17658                           ;Main_B1.c: 606: product->Data[address] = value;
 17659  1B8B  0862               	movf	setProductData@value,w
 17660  1B8C  00E3               	movwf	??_setProductData
 17661  1B8D  0865               	movf	setProductData@address,w
 17662  1B8E  077A               	addwf	_product,w
 17663  1B8F  00E4               	movwf	??_setProductData+1
 17664  1B90  0864               	movf	??_setProductData+1,w
 17665  1B91  0086               	movwf	6
 17666  1B92  3002               	movlw	2	; select bank4/5
 17667  1B93  0087               	movwf	7
 17668  1B94  0863               	movf	??_setProductData,w
 17669  1B95  0081               	movwf	1
 17670  1B96  0008               	return
 17671  1B97                     __end_of_setProductData:	
 17672                           
 17673                           	psect	text118
 17674  1067                     __ptext118:	
 17675 ;; *************** function _DelayTimejudge *****************
 17676 ;; Defined at:
 17677 ;;		line 112 in file "../src/DelayOff_B1.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  value           1    wreg     unsigned char 
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  value           1    9[BANK0 ] unsigned char 
 17682 ;;  k               1    8[BANK0 ] unsigned char 
 17683 ;;  j               1    7[BANK0 ] unsigned char 
 17684 ;;  i               1    6[BANK0 ] unsigned char 
 17685 ;; Return value:  Size  Location     Type
 17686 ;;                  1    wreg      unsigned char 
 17687 ;; Registers used:
 17688 ;;		wreg, status,2, status,0, pclath, cstack
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17697 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17698 ;;Total ram usage:        6 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:    6
 17701 ;; This function calls:
 17702 ;;		___bmul
 17703 ;; This function is called by:
 17704 ;;		_setDelayOff_GO
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           
 17709                           ;psect for function _DelayTimejudge
 17710  1067                     _DelayTimejudge:	
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 17714                           ;DelayTimejudge@value stored from wreg
 17715  1067  0020               	movlb	0	; select bank0
 17716  1068  00A9               	movwf	DelayTimejudge@value
 17717                           
 17718                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 17719  1069  3005               	movlw	5
 17720  106A  00A4               	movwf	??_DelayTimejudge
 17721  106B  0824               	movf	??_DelayTimejudge,w
 17722  106C  00A6               	movwf	DelayTimejudge@i
 17723  106D  01A7               	clrf	DelayTimejudge@j
 17724  106E  01A8               	clrf	DelayTimejudge@k
 17725                           
 17726                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 17727  106F  3031               	movlw	49
 17728  1070  0229               	subwf	DelayTimejudge@value,w
 17729  1071  1803               	skipnc
 17730  1072  288F               	goto	l8927
 17731                           
 17732                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 17733  1073  0829               	movf	DelayTimejudge@value,w
 17734  1074  390F               	andlw	15
 17735  1075  00A4               	movwf	??_DelayTimejudge
 17736  1076  0824               	movf	??_DelayTimejudge,w
 17737  1077  00A7               	movwf	DelayTimejudge@j
 17738                           
 17739                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 17740  1078  0829               	movf	DelayTimejudge@value,w
 17741  1079  00A4               	movwf	??_DelayTimejudge
 17742  107A  3004               	movlw	4
 17743  107B                     u9625:	
 17744  107B  36A4               	lsrf	??_DelayTimejudge,f
 17745  107C  0B89               	decfsz	9,f
 17746  107D  287B               	goto	u9625
 17747  107E  0824               	movf	??_DelayTimejudge,w
 17748  107F  390F               	andlw	15
 17749  1080  00A5               	movwf	??_DelayTimejudge+1
 17750  1081  0825               	movf	??_DelayTimejudge+1,w
 17751  1082  00A8               	movwf	DelayTimejudge@k
 17752                           
 17753                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 17754  1083  300A               	movlw	10
 17755  1084  00A4               	movwf	??_DelayTimejudge
 17756  1085  0824               	movf	??_DelayTimejudge,w
 17757  1086  00A0               	movwf	___bmul@multiplicand
 17758  1087  0828               	movf	DelayTimejudge@k,w
 17759  1088  319C  2407         	fcall	___bmul
 17760  108A  0020               	movlb	0	; select bank0
 17761  108B  0727               	addwf	DelayTimejudge@j,w
 17762  108C  00A5               	movwf	??_DelayTimejudge+1
 17763  108D  0825               	movf	??_DelayTimejudge+1,w
 17764  108E  00A6               	movwf	DelayTimejudge@i
 17765  108F                     l8927:	
 17766                           
 17767                           ;DelayOff_B1.c: 118: }
 17768                           ;DelayOff_B1.c: 139: return i;
 17769  108F  0826               	movf	DelayTimejudge@i,w
 17770  1090  0008               	return
 17771  1091                     __end_of_DelayTimejudge:	
 17772                           
 17773                           	psect	text119
 17774  1C07                     __ptext119:	
 17775 ;; *************** function ___bmul *****************
 17776 ;; Defined at:
 17777 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 17778 ;; Parameters:    Size  Location     Type
 17779 ;;  multiplier      1    wreg     unsigned char 
 17780 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 17781 ;; Auto vars:     Size  Location     Type
 17782 ;;  multiplier      1    3[BANK0 ] unsigned char 
 17783 ;;  product         1    2[BANK0 ] unsigned char 
 17784 ;; Return value:  Size  Location     Type
 17785 ;;                  1    wreg      unsigned char 
 17786 ;; Registers used:
 17787 ;;		wreg, status,2, status,0
 17788 ;; Tracked objects:
 17789 ;;		On entry : 0/0
 17790 ;;		On exit  : 0/0
 17791 ;;		Unchanged: 0/0
 17792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17793 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17797 ;;Total ram usage:        4 bytes
 17798 ;; Hardware stack levels used:    1
 17799 ;; Hardware stack levels required when called:    5
 17800 ;; This function calls:
 17801 ;;		Nothing
 17802 ;; This function is called by:
 17803 ;;		_DelayTimejudge
 17804 ;; This function uses a non-reentrant model
 17805 ;;
 17806                           
 17807                           
 17808                           ;psect for function ___bmul
 17809  1C07                     ___bmul:	
 17810                           
 17811                           ;incstack = 0
 17812                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 17813                           ;___bmul@multiplier stored from wreg
 17814  1C07  0020               	movlb	0	; select bank0
 17815  1C08  00A3               	movwf	___bmul@multiplier
 17816  1C09  01A2               	clrf	___bmul@product
 17817  1C0A                     l8665:	
 17818  1C0A  1C23               	btfss	___bmul@multiplier,0
 17819  1C0B  2C10               	goto	l8669
 17820  1C0C  0820               	movf	___bmul@multiplicand,w
 17821  1C0D  00A1               	movwf	??___bmul
 17822  1C0E  0821               	movf	??___bmul,w
 17823  1C0F  07A2               	addwf	___bmul@product,f
 17824  1C10                     l8669:	
 17825  1C10  1003               	clrc
 17826  1C11  0DA0               	rlf	___bmul@multiplicand,f
 17827  1C12  1003               	clrc
 17828  1C13  0CA3               	rrf	___bmul@multiplier,f
 17829  1C14  08A3               	movf	___bmul@multiplier,f
 17830  1C15  1D03               	skipz
 17831  1C16  2C0A               	goto	l8665
 17832  1C17  0822               	movf	___bmul@product,w
 17833  1C18  0008               	return
 17834  1C19                     __end_of___bmul:	
 17835                           
 17836                           	psect	text120
 17837  1BC4                     __ptext120:	
 17838 ;; *************** function _getDelayOff_GO *****************
 17839 ;; Defined at:
 17840 ;;		line 105 in file "../src/DelayOff_B1.c"
 17841 ;; Parameters:    Size  Location     Type
 17842 ;;  sw              1    wreg     unsigned char 
 17843 ;; Auto vars:     Size  Location     Type
 17844 ;;  sw              1    2[BANK0 ] unsigned char 
 17845 ;;  go              1    3[BANK0 ] unsigned char 
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  1    wreg      unsigned char 
 17848 ;; Registers used:
 17849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17859 ;;Total ram usage:        2 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:    6
 17862 ;; This function calls:
 17863 ;;		_DelayOffPointSelect
 17864 ;; This function is called by:
 17865 ;;		_setDimmerLights_SwOff
 17866 ;;		_setRFSW_Control
 17867 ;; This function uses a non-reentrant model
 17868 ;;
 17869                           
 17870                           
 17871                           ;psect for function _getDelayOff_GO
 17872  1BC4                     _getDelayOff_GO:	
 17873                           
 17874                           ;incstack = 0
 17875                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17876                           ;getDelayOff_GO@sw stored from wreg
 17877  1BC4  0020               	movlb	0	; select bank0
 17878  1BC5  00A2               	movwf	getDelayOff_GO@sw
 17879                           
 17880                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 17881  1BC6  0822               	movf	getDelayOff_GO@sw,w
 17882  1BC7  319C  24C1         	fcall	_DelayOffPointSelect
 17883                           
 17884                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 17885  1BC9  0877               	movf	_DelayOff,w
 17886  1BCA  0086               	movwf	6
 17887  1BCB  3001               	movlw	1	; select bank2/3
 17888  1BCC  0087               	movwf	7
 17889  1BCD  3000               	movlw	0
 17890  1BCE  1881               	btfsc	1,1
 17891  1BCF  3001               	movlw	1
 17892  1BD0  0020               	movlb	0	; select bank0
 17893  1BD1  00A3               	movwf	getDelayOff_GO@go
 17894                           
 17895                           ;DelayOff_B1.c: 108: return go;
 17896  1BD2  0823               	movf	getDelayOff_GO@go,w
 17897  1BD3  0008               	return
 17898  1BD4                     __end_of_getDelayOff_GO:	
 17899                           
 17900                           	psect	text121
 17901  1BD4                     __ptext121:	
 17902 ;; *************** function _getDimmerLights_Status *****************
 17903 ;; Defined at:
 17904 ;;		line 765 in file "../src/Dimmer_B1.c"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;  lights          1    wreg     unsigned char 
 17907 ;; Auto vars:     Size  Location     Type
 17908 ;;  lights          1    2[BANK0 ] unsigned char 
 17909 ;;  status          1    3[BANK0 ] unsigned char 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      unsigned char 
 17912 ;; Registers used:
 17913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;Total ram usage:        2 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    6
 17926 ;; This function calls:
 17927 ;;		_DimmerLightsPointSelect
 17928 ;; This function is called by:
 17929 ;;		_setDimmerLights_ErrorClose
 17930 ;;		_Exception_Main
 17931 ;;		_setRFSW_Control
 17932 ;;		_setRFSW_AdjControl
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           
 17937                           ;psect for function _getDimmerLights_Status
 17938  1BD4                     _getDimmerLights_Status:	
 17939                           
 17940                           ;incstack = 0
 17941                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17942                           ;getDimmerLights_Status@lights stored from wreg
 17943  1BD4  0020               	movlb	0	; select bank0
 17944  1BD5  00A2               	movwf	getDimmerLights_Status@lights
 17945                           
 17946                           ;Dimmer_B1.c: 766: DimmerLightsPointSelect(lights);
 17947  1BD6  0822               	movf	getDimmerLights_Status@lights,w
 17948  1BD7  319C  2462         	fcall	_DimmerLightsPointSelect
 17949                           
 17950                           ;Dimmer_B1.c: 767: char status = DimmerLights->Status == 1 ? 1 : 0;
 17951  1BD9  0020               	movlb	0	; select bank0
 17952  1BDA  086F               	movf	_DimmerLights,w
 17953  1BDB  3E02               	addlw	2
 17954  1BDC  0086               	movwf	6
 17955  1BDD  3001               	movlw	1	; select bank2/3
 17956  1BDE  0087               	movwf	7
 17957  1BDF  3000               	movlw	0
 17958  1BE0  1881               	btfsc	1,1
 17959  1BE1  3001               	movlw	1
 17960  1BE2  00A3               	movwf	getDimmerLights_Status@status
 17961                           
 17962                           ;Dimmer_B1.c: 768: return status;
 17963  1BE3  0823               	movf	getDimmerLights_Status@status,w
 17964  1BE4  0008               	return
 17965  1BE5                     __end_of_getDimmerLights_Status:	
 17966                           
 17967                           	psect	text122
 17968  1C62                     __ptext122:	
 17969 ;; *************** function _DimmerLightsPointSelect *****************
 17970 ;; Defined at:
 17971 ;;		line 321 in file "../src/Dimmer_B1.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;  lights          1    wreg     unsigned char 
 17974 ;; Auto vars:     Size  Location     Type
 17975 ;;  lights          1    1[BANK0 ] unsigned char 
 17976 ;; Return value:  Size  Location     Type
 17977 ;;		None               void
 17978 ;; Registers used:
 17979 ;;		wreg
 17980 ;; Tracked objects:
 17981 ;;		On entry : 0/0
 17982 ;;		On exit  : 0/0
 17983 ;;		Unchanged: 0/0
 17984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17989 ;;Total ram usage:        2 bytes
 17990 ;; Hardware stack levels used:    1
 17991 ;; Hardware stack levels required when called:    5
 17992 ;; This function calls:
 17993 ;;		Nothing
 17994 ;; This function is called by:
 17995 ;;		_setDimmerLights_Initialization
 17996 ;;		_setDimmerLights_SwOn
 17997 ;;		_setDimmerLights_SwOff
 17998 ;;		_setDimmerLights_AdjOn
 17999 ;;		_setDimmerLights_Main
 18000 ;;		_getDimmerLights_Status
 18001 ;;		_getAll_DimmerLights_AdjSw
 18002 ;;		_setDimmerLights_ErrorClose
 18003 ;;		_setDimmerLights_AdjRF
 18004 ;;		_setDimmerLights_Status
 18005 ;;		_setDimmerLights_GO
 18006 ;;		_setDimmerLights_MaxmumValue
 18007 ;;		_setDimmerLights_Trigger
 18008 ;; This function uses a non-reentrant model
 18009 ;;
 18010                           
 18011                           
 18012                           ;psect for function _DimmerLightsPointSelect
 18013  1C62                     _DimmerLightsPointSelect:	
 18014                           
 18015                           ;incstack = 0
 18016                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18017                           ;DimmerLightsPointSelect@lights stored from wreg
 18018  1C62  0020               	movlb	0	; select bank0
 18019  1C63  00A1               	movwf	DimmerLightsPointSelect@lights
 18020                           
 18021                           ;Dimmer_B1.c: 323: if (lights == 1) {
 18022  1C64  0821               	movf	DimmerLightsPointSelect@lights,w
 18023  1C65  3A01               	xorlw	1
 18024  1C66  1D03               	skipz
 18025  1C67  2C6C               	goto	l770
 18026                           
 18027                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 18028  1C68  30BE               	movlw	_DimmerLights1& (0+255)
 18029  1C69  00A0               	movwf	??_DimmerLightsPointSelect
 18030  1C6A  0820               	movf	??_DimmerLightsPointSelect,w
 18031  1C6B  00EF               	movwf	_DimmerLights
 18032  1C6C                     l770:	
 18033                           
 18034                           ;Dimmer_B1.c: 325: }
 18035                           ;Dimmer_B1.c: 328: if (lights == 2) {
 18036  1C6C  0821               	movf	DimmerLightsPointSelect@lights,w
 18037  1C6D  3A02               	xorlw	2
 18038  1C6E  1D03               	skipz
 18039  1C6F  0008               	return
 18040                           
 18041                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 18042  1C70  30CF               	movlw	_DimmerLights2& (0+255)
 18043  1C71  00A0               	movwf	??_DimmerLightsPointSelect
 18044  1C72  0820               	movf	??_DimmerLightsPointSelect,w
 18045  1C73  00EF               	movwf	_DimmerLights
 18046  1C74  0008               	return
 18047  1C75                     __end_of_DimmerLightsPointSelect:	
 18048                           
 18049                           	psect	text123
 18050  1697                     __ptext123:	
 18051 ;; *************** function _setBuz *****************
 18052 ;; Defined at:
 18053 ;;		line 22 in file "../src/Buzzer_B1.c"
 18054 ;; Parameters:    Size  Location     Type
 18055 ;;  count           1    wreg     unsigned char 
 18056 ;;  time            2    9[BANK0 ] int 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;  count           1   12[BANK0 ] unsigned char 
 18059 ;; Return value:  Size  Location     Type
 18060 ;;		None               void
 18061 ;; Registers used:
 18062 ;;		wreg, status,2, status,0, pclath, cstack
 18063 ;; Tracked objects:
 18064 ;;		On entry : 0/0
 18065 ;;		On exit  : 0/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18068 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18072 ;;Total ram usage:        4 bytes
 18073 ;; Hardware stack levels used:    1
 18074 ;; Hardware stack levels required when called:    6
 18075 ;; This function calls:
 18076 ;;		___awdiv
 18077 ;; This function is called by:
 18078 ;;		_DlyOff_Main
 18079 ;;		_setDimmerLights_SwOn
 18080 ;;		_setDimmerLights_Adj
 18081 ;;		_my_MainTimer
 18082 ;;		_Exception_Main
 18083 ;;		_setTemp_Main
 18084 ;;		_setLog_Code
 18085 ;;		_setControl_Lights_Table
 18086 ;;		_setRFSW_Control
 18087 ;;		_setSw_Main
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           
 18092                           ;psect for function _setBuz
 18093  1697                     _setBuz:	
 18094                           
 18095                           ;incstack = 0
 18096                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18097                           ;setBuz@count stored from wreg
 18098  1697  0020               	movlb	0	; select bank0
 18099  1698  00AC               	movwf	setBuz@count
 18100                           
 18101                           ;Buzzer_B1.c: 23: time /= 10;
 18102  1699  300A               	movlw	10
 18103  169A  00A0               	movwf	___awdiv@divisor
 18104  169B  3000               	movlw	0
 18105  169C  00A1               	movwf	___awdiv@divisor+1
 18106  169D  082A               	movf	setBuz@time+1,w
 18107  169E  01A3               	clrf	___awdiv@dividend+1
 18108  169F  07A3               	addwf	___awdiv@dividend+1,f
 18109  16A0  0829               	movf	setBuz@time,w
 18110  16A1  01A2               	clrf	___awdiv@dividend
 18111  16A2  07A2               	addwf	___awdiv@dividend,f
 18112  16A3  3195  2597  3196   	fcall	___awdiv
 18113  16A6  0020               	movlb	0	; select bank0
 18114  16A7  0821               	movf	?___awdiv+1,w
 18115  16A8  01AA               	clrf	setBuz@time+1
 18116  16A9  07AA               	addwf	setBuz@time+1,f
 18117  16AA  0820               	movf	?___awdiv,w
 18118  16AB  01A9               	clrf	setBuz@time
 18119  16AC  07A9               	addwf	setBuz@time,f
 18120                           
 18121                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18122  16AD  0021               	movlb	1	; select bank1
 18123  16AE  1C2E               	btfss	_Buz1^(0+128),0
 18124  16AF  0008               	return
 18125                           
 18126                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18127  16B0  18AE               	btfsc	_Buz1^(0+128),1
 18128  16B1  2EC8               	goto	l96
 18129                           
 18130                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18131  16B2  14AE               	bsf	_Buz1^(0+128),1
 18132                           
 18133                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18134  16B3  01AF               	clrf	(_Buz1^(0+128)+1)
 18135  16B4  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18136                           
 18137                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18138  16B5  0020               	movlb	0	; select bank0
 18139  16B6  082C               	movf	setBuz@count,w
 18140  16B7  00AB               	movwf	??_setBuz
 18141  16B8  082B               	movf	??_setBuz,w
 18142  16B9  0021               	movlb	1	; select bank1
 18143  16BA  00B1               	movwf	(_Buz1^(0+128)+3)
 18144                           
 18145                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18146  16BB  0020               	movlb	0	; select bank0
 18147  16BC  082A               	movf	setBuz@time+1,w
 18148  16BD  0021               	movlb	1	; select bank1
 18149  16BE  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18150  16BF  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18151  16C0  0020               	movlb	0	; select bank0
 18152  16C1  0829               	movf	setBuz@time,w
 18153  16C2  0021               	movlb	1	; select bank1
 18154  16C3  01B4               	clrf	(_Buz1^(0+128)+6)
 18155  16C4  07B4               	addwf	(_Buz1^(0+128)+6),f
 18156                           
 18157                           ;Buzzer_B1.c: 30: RB3 = 1;
 18158  16C5  0020               	movlb	0	; select bank0
 18159  16C6  158D               	bsf	13,3	;volatile
 18160                           
 18161                           ;Buzzer_B1.c: 31: } else {
 18162  16C7  0008               	return
 18163  16C8                     l96:	
 18164                           
 18165                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18166  16C8  19AE               	btfsc	_Buz1^(0+128),3
 18167  16C9  2EDC               	goto	l98
 18168                           
 18169                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18170  16CA  15AE               	bsf	_Buz1^(0+128),3
 18171                           
 18172                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18173  16CB  0020               	movlb	0	; select bank0
 18174  16CC  082C               	movf	setBuz@count,w
 18175  16CD  00AB               	movwf	??_setBuz
 18176  16CE  082B               	movf	??_setBuz,w
 18177  16CF  0021               	movlb	1	; select bank1
 18178  16D0  00B2               	movwf	(_Buz1^(0+128)+4)
 18179                           
 18180                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18181  16D1  0020               	movlb	0	; select bank0
 18182  16D2  082A               	movf	setBuz@time+1,w
 18183  16D3  0021               	movlb	1	; select bank1
 18184  16D4  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18185  16D5  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18186  16D6  0020               	movlb	0	; select bank0
 18187  16D7  0829               	movf	setBuz@time,w
 18188  16D8  0021               	movlb	1	; select bank1
 18189  16D9  01B6               	clrf	(_Buz1^(0+128)+8)
 18190  16DA  07B6               	addwf	(_Buz1^(0+128)+8),f
 18191                           
 18192                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18193  16DB  0008               	return
 18194  16DC                     l98:	
 18195  16DC  1A2E               	btfsc	_Buz1^(0+128),4
 18196  16DD  0008               	return
 18197                           
 18198                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18199  16DE  162E               	bsf	_Buz1^(0+128),4
 18200                           
 18201                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18202  16DF  0020               	movlb	0	; select bank0
 18203  16E0  082C               	movf	setBuz@count,w
 18204  16E1  00AB               	movwf	??_setBuz
 18205  16E2  082B               	movf	??_setBuz,w
 18206  16E3  0021               	movlb	1	; select bank1
 18207  16E4  00B3               	movwf	(_Buz1^(0+128)+5)
 18208                           
 18209                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18210  16E5  0020               	movlb	0	; select bank0
 18211  16E6  082A               	movf	setBuz@time+1,w
 18212  16E7  0021               	movlb	1	; select bank1
 18213  16E8  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18214  16E9  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18215  16EA  0020               	movlb	0	; select bank0
 18216  16EB  0829               	movf	setBuz@time,w
 18217  16EC  0021               	movlb	1	; select bank1
 18218  16ED  01B8               	clrf	(_Buz1^(0+128)+10)
 18219  16EE  07B8               	addwf	(_Buz1^(0+128)+10),f
 18220  16EF  0008               	return
 18221  16F0                     __end_of_setBuz:	
 18222                           
 18223                           	psect	text124
 18224  1597                     __ptext124:	
 18225 ;; *************** function ___awdiv *****************
 18226 ;; Defined at:
 18227 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18228 ;; Parameters:    Size  Location     Type
 18229 ;;  divisor         2    0[BANK0 ] int 
 18230 ;;  dividend        2    2[BANK0 ] int 
 18231 ;; Auto vars:     Size  Location     Type
 18232 ;;  quotient        2    7[BANK0 ] int 
 18233 ;;  sign            1    6[BANK0 ] unsigned char 
 18234 ;;  counter         1    5[BANK0 ] unsigned char 
 18235 ;; Return value:  Size  Location     Type
 18236 ;;                  2    0[BANK0 ] int 
 18237 ;; Registers used:
 18238 ;;		wreg, status,2, status,0
 18239 ;; Tracked objects:
 18240 ;;		On entry : 0/0
 18241 ;;		On exit  : 0/0
 18242 ;;		Unchanged: 0/0
 18243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18244 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18245 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;Total ram usage:        9 bytes
 18249 ;; Hardware stack levels used:    1
 18250 ;; Hardware stack levels required when called:    5
 18251 ;; This function calls:
 18252 ;;		Nothing
 18253 ;; This function is called by:
 18254 ;;		_setBuz
 18255 ;; This function uses a non-reentrant model
 18256 ;;
 18257                           
 18258                           
 18259                           ;psect for function ___awdiv
 18260  1597                     ___awdiv:	
 18261                           
 18262                           ;incstack = 0
 18263                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18264  1597  0020               	movlb	0	; select bank0
 18265  1598  01A6               	clrf	___awdiv@sign
 18266  1599  1FA1               	btfss	___awdiv@divisor+1,7
 18267  159A  2DA2               	goto	l8955
 18268  159B  09A0               	comf	___awdiv@divisor,f
 18269  159C  09A1               	comf	___awdiv@divisor+1,f
 18270  159D  0AA0               	incf	___awdiv@divisor,f
 18271  159E  1903               	skipnz
 18272  159F  0AA1               	incf	___awdiv@divisor+1,f
 18273  15A0  01A6               	clrf	___awdiv@sign
 18274  15A1  0AA6               	incf	___awdiv@sign,f
 18275  15A2                     l8955:	
 18276  15A2  1FA3               	btfss	___awdiv@dividend+1,7
 18277  15A3  2DAD               	goto	l8961
 18278  15A4  09A2               	comf	___awdiv@dividend,f
 18279  15A5  09A3               	comf	___awdiv@dividend+1,f
 18280  15A6  0AA2               	incf	___awdiv@dividend,f
 18281  15A7  1903               	skipnz
 18282  15A8  0AA3               	incf	___awdiv@dividend+1,f
 18283  15A9  3001               	movlw	1
 18284  15AA  00A4               	movwf	??___awdiv
 18285  15AB  0824               	movf	??___awdiv,w
 18286  15AC  06A6               	xorwf	___awdiv@sign,f
 18287  15AD                     l8961:	
 18288  15AD  01A7               	clrf	___awdiv@quotient
 18289  15AE  01A8               	clrf	___awdiv@quotient+1
 18290  15AF  0821               	movf	___awdiv@divisor+1,w
 18291  15B0  0420               	iorwf	___awdiv@divisor,w
 18292  15B1  1903               	skipnz
 18293  15B2  2DDC               	goto	l8983
 18294  15B3  01A5               	clrf	___awdiv@counter
 18295  15B4  0AA5               	incf	___awdiv@counter,f
 18296  15B5                     l8971:	
 18297  15B5  1BA1               	btfsc	___awdiv@divisor+1,7
 18298  15B6  2DC1               	goto	l8973
 18299  15B7  3001               	movlw	1
 18300  15B8                     u9685:	
 18301  15B8  35A0               	lslf	___awdiv@divisor,f
 18302  15B9  0DA1               	rlf	___awdiv@divisor+1,f
 18303  15BA  0B89               	decfsz	9,f
 18304  15BB  2DB8               	goto	u9685
 18305  15BC  3001               	movlw	1
 18306  15BD  00A4               	movwf	??___awdiv
 18307  15BE  0824               	movf	??___awdiv,w
 18308  15BF  07A5               	addwf	___awdiv@counter,f
 18309  15C0  2DB5               	goto	l8971
 18310  15C1                     l8973:	
 18311  15C1  3001               	movlw	1
 18312  15C2                     u9705:	
 18313  15C2  35A7               	lslf	___awdiv@quotient,f
 18314  15C3  0DA8               	rlf	___awdiv@quotient+1,f
 18315  15C4  0B89               	decfsz	9,f
 18316  15C5  2DC2               	goto	u9705
 18317  15C6  0821               	movf	___awdiv@divisor+1,w
 18318  15C7  0223               	subwf	___awdiv@dividend+1,w
 18319  15C8  1D03               	skipz
 18320  15C9  2DCC               	goto	u9715
 18321  15CA  0820               	movf	___awdiv@divisor,w
 18322  15CB  0222               	subwf	___awdiv@dividend,w
 18323  15CC                     u9715:	
 18324  15CC  1C03               	skipc
 18325  15CD  2DD3               	goto	l8979
 18326  15CE  0820               	movf	___awdiv@divisor,w
 18327  15CF  02A2               	subwf	___awdiv@dividend,f
 18328  15D0  0821               	movf	___awdiv@divisor+1,w
 18329  15D1  3BA3               	subwfb	___awdiv@dividend+1,f
 18330  15D2  1427               	bsf	___awdiv@quotient,0
 18331  15D3                     l8979:	
 18332  15D3  3001               	movlw	1
 18333  15D4                     u9725:	
 18334  15D4  36A1               	lsrf	___awdiv@divisor+1,f
 18335  15D5  0CA0               	rrf	___awdiv@divisor,f
 18336  15D6  0B89               	decfsz	9,f
 18337  15D7  2DD4               	goto	u9725
 18338  15D8  3001               	movlw	1
 18339  15D9  02A5               	subwf	___awdiv@counter,f
 18340  15DA  1D03               	btfss	3,2
 18341  15DB  2DC1               	goto	l8973
 18342  15DC                     l8983:	
 18343  15DC  0826               	movf	___awdiv@sign,w
 18344  15DD  1903               	btfsc	3,2
 18345  15DE  2DE4               	goto	l8987
 18346  15DF  09A7               	comf	___awdiv@quotient,f
 18347  15E0  09A8               	comf	___awdiv@quotient+1,f
 18348  15E1  0AA7               	incf	___awdiv@quotient,f
 18349  15E2  1903               	skipnz
 18350  15E3  0AA8               	incf	___awdiv@quotient+1,f
 18351  15E4                     l8987:	
 18352  15E4  0828               	movf	___awdiv@quotient+1,w
 18353  15E5  01A1               	clrf	?___awdiv+1
 18354  15E6  07A1               	addwf	?___awdiv+1,f
 18355  15E7  0827               	movf	___awdiv@quotient,w
 18356  15E8  01A0               	clrf	?___awdiv
 18357  15E9  07A0               	addwf	?___awdiv,f
 18358  15EA  0008               	return
 18359  15EB                     __end_of___awdiv:	
 18360                           
 18361                           	psect	text125
 18362  1AC5                     __ptext125:	
 18363 ;; *************** function _DelayOff_Initialization *****************
 18364 ;; Defined at:
 18365 ;;		line 26 in file "../src/DelayOff_B1.c"
 18366 ;; Parameters:    Size  Location     Type
 18367 ;;		None
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;		None
 18370 ;; Return value:  Size  Location     Type
 18371 ;;		None               void
 18372 ;; Registers used:
 18373 ;;		wreg, status,2, status,0, pclath, cstack
 18374 ;; Tracked objects:
 18375 ;;		On entry : 0/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;Total ram usage:        0 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    7
 18386 ;; This function calls:
 18387 ;;		_DlyOff_Initialization
 18388 ;; This function is called by:
 18389 ;;		_main
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393                           
 18394                           ;psect for function _DelayOff_Initialization
 18395  1AC5                     _DelayOff_Initialization:	
 18396                           
 18397                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18398                           
 18399                           ;incstack = 0
 18400                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18401  1AC5  3001               	movlw	1
 18402  1AC6  319A  22A4  319A   	fcall	_DlyOff_Initialization
 18403                           
 18404                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18405  1AC9  3002               	movlw	2
 18406  1ACA  319A  22A4         	fcall	_DlyOff_Initialization
 18407  1ACC  0008               	return
 18408  1ACD                     __end_of_DelayOff_Initialization:	
 18409                           
 18410                           	psect	text126
 18411  1AA4                     __ptext126:	
 18412 ;; *************** function _DlyOff_Initialization *****************
 18413 ;; Defined at:
 18414 ;;		line 56 in file "../src/DelayOff_B1.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;  sw              1    wreg     unsigned char 
 18417 ;; Auto vars:     Size  Location     Type
 18418 ;;  sw              1    2[BANK0 ] unsigned char 
 18419 ;; Return value:  Size  Location     Type
 18420 ;;		None               void
 18421 ;; Registers used:
 18422 ;;		wreg, status,2, status,0, pclath, cstack
 18423 ;; Tracked objects:
 18424 ;;		On entry : 0/0
 18425 ;;		On exit  : 0/0
 18426 ;;		Unchanged: 0/0
 18427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18432 ;;Total ram usage:        1 bytes
 18433 ;; Hardware stack levels used:    1
 18434 ;; Hardware stack levels required when called:    6
 18435 ;; This function calls:
 18436 ;;		_DelayOffPointSelect
 18437 ;; This function is called by:
 18438 ;;		_DelayOff_Initialization
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           
 18443                           ;psect for function _DlyOff_Initialization
 18444  1AA4                     _DlyOff_Initialization:	
 18445                           
 18446                           ;incstack = 0
 18447                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18448                           ;DlyOff_Initialization@sw stored from wreg
 18449  1AA4  0020               	movlb	0	; select bank0
 18450  1AA5  00A2               	movwf	DlyOff_Initialization@sw
 18451                           
 18452                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18453  1AA6  0822               	movf	DlyOff_Initialization@sw,w
 18454  1AA7  319C  24C1         	fcall	_DelayOffPointSelect
 18455  1AA9  0008               	return
 18456  1AAA                     __end_of_DlyOff_Initialization:	
 18457                           
 18458                           	psect	text127
 18459  1CC1                     __ptext127:	
 18460 ;; *************** function _DelayOffPointSelect *****************
 18461 ;; Defined at:
 18462 ;;		line 7 in file "../src/DelayOff_B1.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;  sw              1    wreg     unsigned char 
 18465 ;; Auto vars:     Size  Location     Type
 18466 ;;  sw              1    1[BANK0 ] unsigned char 
 18467 ;; Return value:  Size  Location     Type
 18468 ;;		None               void
 18469 ;; Registers used:
 18470 ;;		wreg
 18471 ;; Tracked objects:
 18472 ;;		On entry : 0/0
 18473 ;;		On exit  : 0/0
 18474 ;;		Unchanged: 0/0
 18475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;Total ram usage:        2 bytes
 18481 ;; Hardware stack levels used:    1
 18482 ;; Hardware stack levels required when called:    5
 18483 ;; This function calls:
 18484 ;;		Nothing
 18485 ;; This function is called by:
 18486 ;;		_DlyOff_Initialization
 18487 ;;		_DlyOff_Main
 18488 ;;		_setDelayOff_GO
 18489 ;;		_getDelayOff_GO
 18490 ;; This function uses a non-reentrant model
 18491 ;;
 18492                           
 18493                           
 18494                           ;psect for function _DelayOffPointSelect
 18495  1CC1                     _DelayOffPointSelect:	
 18496                           
 18497                           ;incstack = 0
 18498                           ; Regs used in _DelayOffPointSelect: [wreg]
 18499                           ;DelayOffPointSelect@sw stored from wreg
 18500  1CC1  0020               	movlb	0	; select bank0
 18501  1CC2  00A1               	movwf	DelayOffPointSelect@sw
 18502                           
 18503                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18504  1CC3  0821               	movf	DelayOffPointSelect@sw,w
 18505  1CC4  3A01               	xorlw	1
 18506  1CC5  1D03               	skipz
 18507  1CC6  2CCC               	goto	l8911
 18508                           
 18509                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18510  1CC7  305C               	movlw	_DlySw1& (0+255)
 18511  1CC8  00A0               	movwf	??_DelayOffPointSelect
 18512  1CC9  0820               	movf	??_DelayOffPointSelect,w
 18513  1CCA  00F7               	movwf	_DelayOff
 18514                           
 18515                           ;DelayOff_B1.c: 11: }
 18516  1CCB  0008               	return
 18517  1CCC                     l8911:	
 18518                           
 18519                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18520  1CCC  0821               	movf	DelayOffPointSelect@sw,w
 18521  1CCD  3A02               	xorlw	2
 18522  1CCE  1D03               	skipz
 18523  1CCF  0008               	return
 18524                           
 18525                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18526  1CD0  3061               	movlw	_DlySw2& (0+255)
 18527  1CD1  00A0               	movwf	??_DelayOffPointSelect
 18528  1CD2  0820               	movf	??_DelayOffPointSelect,w
 18529  1CD3  00F7               	movwf	_DelayOff
 18530  1CD4  0008               	return
 18531  1CD5                     __end_of_DelayOffPointSelect:	
 18532                           
 18533                           	psect	text128
 18534  13BC                     __ptext128:	
 18535 ;; *************** function _Buzzer_Main *****************
 18536 ;; Defined at:
 18537 ;;		line 46 in file "../src/Buzzer_B1.c"
 18538 ;; Parameters:    Size  Location     Type
 18539 ;;		None
 18540 ;; Auto vars:     Size  Location     Type
 18541 ;;		None
 18542 ;; Return value:  Size  Location     Type
 18543 ;;		None               void
 18544 ;; Registers used:
 18545 ;;		wreg, status,2, status,0
 18546 ;; Tracked objects:
 18547 ;;		On entry : 0/0
 18548 ;;		On exit  : 0/0
 18549 ;;		Unchanged: 0/0
 18550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;Total ram usage:        1 bytes
 18556 ;; Hardware stack levels used:    1
 18557 ;; Hardware stack levels required when called:    5
 18558 ;; This function calls:
 18559 ;;		Nothing
 18560 ;; This function is called by:
 18561 ;;		_main
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           
 18566                           ;psect for function _Buzzer_Main
 18567  13BC                     _Buzzer_Main:	
 18568                           
 18569                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18570                           
 18571                           ;incstack = 0
 18572                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18573  13BC  0021               	movlb	1	; select bank1
 18574  13BD  1CAE               	btfss	_Buz1^(0+128),1
 18575  13BE  0008               	return
 18576                           
 18577                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18578  13BF  3001               	movlw	1
 18579  13C0  07AF               	addwf	(_Buz1^(0+128)+1),f
 18580  13C1  3000               	movlw	0
 18581  13C2  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18582                           
 18583                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18584  13C3  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18585  13C4  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18586  13C5  1D03               	skipz
 18587  13C6  2BC9               	goto	u12155
 18588  13C7  0834               	movf	(_Buz1^(0+128)+6),w
 18589  13C8  022F               	subwf	(_Buz1^(0+128)+1),w
 18590  13C9                     u12155:	
 18591  13C9  1C03               	skipc
 18592  13CA  0008               	return
 18593                           
 18594                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18595  13CB  01AF               	clrf	(_Buz1^(0+128)+1)
 18596  13CC  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18597                           
 18598                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18599  13CD  12AE               	bcf	_Buz1^(0+128),5
 18600  13CE  0020               	movlb	0	; select bank0
 18601  13CF  1D8D               	btfss	13,3	;volatile
 18602  13D0  2BD3               	goto	l10557
 18603  13D1  0021               	movlb	1	; select bank1
 18604  13D2  16AE               	bsf	_Buz1^(0+128),5
 18605  13D3                     l10557:	
 18606                           
 18607                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18608  13D3  0021               	movlb	1	; select bank1
 18609  13D4  1AAE               	btfsc	_Buz1^(0+128),5
 18610  13D5  2BFF               	goto	l106
 18611                           
 18612                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18613  13D6  08B1               	movf	(_Buz1^(0+128)+3),f
 18614  13D7  1D03               	skipz
 18615  13D8  2BFB               	goto	l107
 18616                           
 18617                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18618  13D9  1DAE               	btfss	_Buz1^(0+128),3
 18619  13DA  2BE9               	goto	l108
 18620                           
 18621                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18622  13DB  11AE               	bcf	_Buz1^(0+128),3
 18623                           
 18624                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18625  13DC  0832               	movf	(_Buz1^(0+128)+4),w
 18626  13DD  0020               	movlb	0	; select bank0
 18627  13DE  00A0               	movwf	??_Buzzer_Main
 18628  13DF  0820               	movf	??_Buzzer_Main,w
 18629  13E0  0021               	movlb	1	; select bank1
 18630  13E1  00B1               	movwf	(_Buz1^(0+128)+3)
 18631                           
 18632                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18633  13E2  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18634  13E3  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18635  13E4  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18636  13E5  0836               	movf	(_Buz1^(0+128)+8),w
 18637  13E6  01B4               	clrf	(_Buz1^(0+128)+6)
 18638  13E7  07B4               	addwf	(_Buz1^(0+128)+6),f
 18639                           
 18640                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18641  13E8  0008               	return
 18642  13E9                     l108:	
 18643  13E9  1E2E               	btfss	_Buz1^(0+128),4
 18644  13EA  2BF9               	goto	l110
 18645                           
 18646                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18647  13EB  122E               	bcf	_Buz1^(0+128),4
 18648                           
 18649                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18650  13EC  0833               	movf	(_Buz1^(0+128)+5),w
 18651  13ED  0020               	movlb	0	; select bank0
 18652  13EE  00A0               	movwf	??_Buzzer_Main
 18653  13EF  0820               	movf	??_Buzzer_Main,w
 18654  13F0  0021               	movlb	1	; select bank1
 18655  13F1  00B1               	movwf	(_Buz1^(0+128)+3)
 18656                           
 18657                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18658  13F2  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18659  13F3  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18660  13F4  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18661  13F5  0838               	movf	(_Buz1^(0+128)+10),w
 18662  13F6  01B4               	clrf	(_Buz1^(0+128)+6)
 18663  13F7  07B4               	addwf	(_Buz1^(0+128)+6),f
 18664                           
 18665                           ;Buzzer_B1.c: 62: } else {
 18666  13F8  0008               	return
 18667  13F9                     l110:	
 18668                           
 18669                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18670  13F9  10AE               	bcf	_Buz1^(0+128),1
 18671                           
 18672                           ;Buzzer_B1.c: 64: }
 18673                           ;Buzzer_B1.c: 65: } else {
 18674  13FA  0008               	return
 18675  13FB                     l107:	
 18676                           
 18677                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18678  13FB  16AE               	bsf	_Buz1^(0+128),5
 18679                           
 18680                           ;Buzzer_B1.c: 68: RB3 = 1;
 18681  13FC  0020               	movlb	0	; select bank0
 18682  13FD  158D               	bsf	13,3	;volatile
 18683                           
 18684                           ;Buzzer_B1.c: 69: }
 18685                           ;Buzzer_B1.c: 70: } else {
 18686  13FE  0008               	return
 18687  13FF                     l106:	
 18688                           
 18689                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18690  13FF  12AE               	bcf	_Buz1^(0+128),5
 18691                           
 18692                           ;Buzzer_B1.c: 73: RB3 = 0;
 18693  1400  0020               	movlb	0	; select bank0
 18694  1401  118D               	bcf	13,3	;volatile
 18695                           
 18696                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18697  1402  3001               	movlw	1
 18698  1403  0021               	movlb	1	; select bank1
 18699  1404  02B1               	subwf	(_Buz1^(0+128)+3),f
 18700  1405  0008               	return
 18701  1406                     __end_of_Buzzer_Main:	
 18702                           
 18703                           	psect	text129
 18704  1A79                     __ptext129:	
 18705 ;; *************** function _Buzzer_Initialization *****************
 18706 ;; Defined at:
 18707 ;;		line 11 in file "../src/Buzzer_B1.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;		None
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;		None
 18712 ;; Return value:  Size  Location     Type
 18713 ;;		None               void
 18714 ;; Registers used:
 18715 ;;		None
 18716 ;; Tracked objects:
 18717 ;;		On entry : 0/0
 18718 ;;		On exit  : 0/0
 18719 ;;		Unchanged: 0/0
 18720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;Total ram usage:        0 bytes
 18726 ;; Hardware stack levels used:    1
 18727 ;; Hardware stack levels required when called:    5
 18728 ;; This function calls:
 18729 ;;		Nothing
 18730 ;; This function is called by:
 18731 ;;		_main
 18732 ;; This function uses a non-reentrant model
 18733 ;;
 18734                           
 18735                           
 18736                           ;psect for function _Buzzer_Initialization
 18737  1A79                     _Buzzer_Initialization:	
 18738                           
 18739                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18740                           
 18741                           ;incstack = 0
 18742                           ; Regs used in _Buzzer_Initialization: []
 18743  1A79  0021               	movlb	1	; select bank1
 18744  1A7A  142E               	bsf	_Buz1^(0+128),0
 18745  1A7B  0008               	return
 18746  1A7C                     __end_of_Buzzer_Initialization:	
 18747                           
 18748                           	psect	intentry
 18749  0004                     __pintentry:	
 18750 ;; *************** function _ISR *****************
 18751 ;; Defined at:
 18752 ;;		line 108 in file "../src/MCU_B1.c"
 18753 ;; Parameters:    Size  Location     Type
 18754 ;;		None
 18755 ;; Auto vars:     Size  Location     Type
 18756 ;;		None
 18757 ;; Return value:  Size  Location     Type
 18758 ;;		None               void
 18759 ;; Registers used:
 18760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18761 ;; Tracked objects:
 18762 ;;		On entry : 0/0
 18763 ;;		On exit  : 0/0
 18764 ;;		Unchanged: 0/0
 18765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18770 ;;Total ram usage:        1 bytes
 18771 ;; Hardware stack levels used:    1
 18772 ;; Hardware stack levels required when called:    4
 18773 ;; This function calls:
 18774 ;;		_IOC_ISR
 18775 ;;		_TMR1_ISR
 18776 ;; This function is called by:
 18777 ;;		Interrupt level 1
 18778 ;; This function uses a non-reentrant model
 18779 ;;
 18780                           
 18781  0004                     _ISR:	
 18782                           
 18783                           ;incstack = 0
 18784                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18785  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18786  0005  3180               	pagesel	$
 18787  0006  0020               	movlb	0	; select bank0
 18788  0007  087F               	movf	127,w
 18789  0008  00F4               	movwf	??_ISR
 18790                           
 18791                           ;MCU_B1.c: 110: IOC_ISR();
 18792  0009  319B  2397  3180   	fcall	_IOC_ISR
 18793                           
 18794                           ;MCU_B1.c: 112: ;;
 18795                           ;MCU_B1.c: 114: TMR1_ISR();
 18796  000C  319F  27D8         	fcall	_TMR1_ISR
 18797  000E  0874               	movf	??_ISR,w
 18798  000F  0020               	movlb	0	; select bank0
 18799  0010  00FF               	movwf	127
 18800  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18801  0012  0009               	retfie
 18802  0013                     __end_of_ISR:	
 18803                           
 18804                           	psect	text131
 18805  1FD8                     __ptext131:	
 18806 ;; *************** function _TMR1_ISR *****************
 18807 ;; Defined at:
 18808 ;;		line 210 in file "../src/MCU_B1.c"
 18809 ;; Parameters:    Size  Location     Type
 18810 ;;		None
 18811 ;; Auto vars:     Size  Location     Type
 18812 ;;		None
 18813 ;; Return value:  Size  Location     Type
 18814 ;;		None               void
 18815 ;; Registers used:
 18816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18817 ;; Tracked objects:
 18818 ;;		On entry : 0/0
 18819 ;;		On exit  : 0/0
 18820 ;;		Unchanged: 0/0
 18821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18826 ;;Total ram usage:        0 bytes
 18827 ;; Hardware stack levels used:    1
 18828 ;; Hardware stack levels required when called:    2
 18829 ;; This function calls:
 18830 ;;		_setDimmerLights_IntrControl
 18831 ;; This function is called by:
 18832 ;;		_ISR
 18833 ;; This function uses a non-reentrant model
 18834 ;;
 18835                           
 18836                           
 18837                           ;psect for function _TMR1_ISR
 18838  1FD8                     _TMR1_ISR:	
 18839                           
 18840                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18841                           
 18842                           ;incstack = 0
 18843                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18844  1FD8  0021               	movlb	1	; select bank1
 18845  1FD9  1C11               	btfss	17,0	;volatile
 18846  1FDA  0008               	return
 18847  1FDB  0020               	movlb	0	; select bank0
 18848  1FDC  1C11               	btfss	17,0	;volatile
 18849  1FDD  0008               	return
 18850                           
 18851                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18852  1FDE  30FA               	movlw	250
 18853  1FDF  0097               	movwf	23	;volatile
 18854                           
 18855                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18856  1FE0  3038               	movlw	56
 18857  1FE1  0096               	movwf	22	;volatile
 18858                           
 18859                           ;MCU_B1.c: 215: TMR1IF = 0;
 18860  1FE2  1011               	bcf	17,0	;volatile
 18861                           
 18862                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18863  1FE3  3001               	movlw	1
 18864  1FE4  3183  2366  319F   	fcall	_setDimmerLights_IntrControl
 18865                           
 18866                           ;MCU_B1.c: 225: setDimmerLights_IntrControl(2);
 18867  1FE7  3002               	movlw	2
 18868  1FE8  3183  2366  319F   	fcall	_setDimmerLights_IntrControl
 18869                           
 18870                           ;MCU_B1.c: 236: Timer1.Count++;
 18871  1FEB  3001               	movlw	1
 18872  1FEC  0021               	movlb	1	; select bank1
 18873  1FED  07BE               	addwf	(_Timer1^(0+128)+1),f
 18874  1FEE  3000               	movlw	0
 18875  1FEF  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 18876                           
 18877                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18878  1FF0  3001               	movlw	1
 18879  1FF1  3EBD               	addlw	_Timer1& (0+255)
 18880  1FF2  0086               	movwf	6
 18881  1FF3  0187               	clrf	7
 18882  1FF4  3F40               	moviw [0]fsr1
 18883  1FF5  3A64               	xorlw	100
 18884  1FF6  1D03               	skipz
 18885  1FF7  2FFA               	goto	u811_25
 18886  1FF8  3F41               	moviw [1]fsr1
 18887  1FF9  3A00               	xorlw	0
 18888  1FFA                     u811_25:	
 18889  1FFA  1D03               	skipz
 18890  1FFB  0008               	return
 18891                           
 18892                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18893  1FFC  01BE               	clrf	(_Timer1^(0+128)+1)
 18894  1FFD  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 18895                           
 18896                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18897  1FFE  143D               	bsf	_Timer1^(0+128),0
 18898                           
 18899                           ;MCU_B1.c: 240: }
 18900                           ;MCU_B1.c: 241: return;
 18901  1FFF  0008               	return
 18902  2000                     __end_of_TMR1_ISR:	
 18903                           
 18904                           	psect	text132
 18905  0366                     __ptext132:	
 18906 ;; *************** function _setDimmerLights_IntrControl *****************
 18907 ;; Defined at:
 18908 ;;		line 96 in file "../src/Dimmer_B1.c"
 18909 ;; Parameters:    Size  Location     Type
 18910 ;;  lights          1    wreg     unsigned char 
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;  lights          1    3[COMMON] unsigned char 
 18913 ;; Return value:  Size  Location     Type
 18914 ;;		None               void
 18915 ;; Registers used:
 18916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;Total ram usage:        2 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:    1
 18929 ;; This function calls:
 18930 ;;		_DimmerIntrPointSelect
 18931 ;; This function is called by:
 18932 ;;		_TMR1_ISR
 18933 ;; This function uses a non-reentrant model
 18934 ;;
 18935                           
 18936                           
 18937                           ;psect for function _setDimmerLights_IntrControl
 18938  0366                     _setDimmerLights_IntrControl:	
 18939                           
 18940                           ;incstack = 0
 18941                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18942                           ;setDimmerLights_IntrControl@lights stored from wreg
 18943  0366  00F3               	movwf	setDimmerLights_IntrControl@lights
 18944                           
 18945                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18946  0367  0873               	movf	setDimmerLights_IntrControl@lights,w
 18947  0368  319C  244F  3183   	fcall	_DimmerIntrPointSelect
 18948                           
 18949                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18950  036B  0878               	movf	_DimmerLightsIntr,w
 18951  036C  3E02               	addlw	2
 18952  036D  0086               	movwf	6
 18953  036E  3001               	movlw	1	; select bank2/3
 18954  036F  0087               	movwf	7
 18955  0370  1D01               	btfss	1,2
 18956  0371  2B90               	goto	i1l7399
 18957                           
 18958                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18959  0372  3001               	movlw	1
 18960  0373  00F2               	movwf	??_setDimmerLights_IntrControl
 18961  0374  0878               	movf	_DimmerLightsIntr,w
 18962  0375  3E03               	addlw	3
 18963  0376  0086               	movwf	6
 18964  0377  3001               	movlw	1	; select bank2/3
 18965  0378  0087               	movwf	7
 18966  0379  0872               	movf	??_setDimmerLights_IntrControl,w
 18967  037A  0781               	addwf	1,f
 18968                           
 18969                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18970  037B  0878               	movf	_DimmerLightsIntr,w
 18971  037C  3E03               	addlw	3
 18972  037D  0086               	movwf	6
 18973  037E  3001               	movlw	1	; select bank2/3
 18974  037F  0087               	movwf	7
 18975  0380  3039               	movlw	57
 18976  0381  0201               	subwf	1,w
 18977  0382  1C03               	skipc
 18978  0383  2B90               	goto	i1l7399
 18979                           
 18980                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18981  0384  0878               	movf	_DimmerLightsIntr,w
 18982  0385  3E03               	addlw	3
 18983  0386  0086               	movwf	6
 18984  0387  3001               	movlw	1	; select bank2/3
 18985  0388  0087               	movwf	7
 18986  0389  0181               	clrf	1
 18987                           
 18988                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18989  038A  0878               	movf	_DimmerLightsIntr,w
 18990  038B  3E02               	addlw	2
 18991  038C  0086               	movwf	6
 18992  038D  3001               	movlw	1	; select bank2/3
 18993  038E  0087               	movwf	7
 18994  038F  1101               	bcf	1,2
 18995  0390                     i1l7399:	
 18996                           
 18997                           ;Dimmer_B1.c: 241: }
 18998                           ;Dimmer_B1.c: 242: }
 18999                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 19000  0390  0A78               	incf	_DimmerLightsIntr,w
 19001  0391  0086               	movwf	6
 19002  0392  3001               	movlw	1	; select bank2/3
 19003  0393  0087               	movwf	7
 19004  0394  1C01               	btfss	1,0
 19005  0395  2BC7               	goto	i1l7415
 19006                           
 19007                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 19008  0396  0878               	movf	_DimmerLightsIntr,w
 19009  0397  3E03               	addlw	3
 19010  0398  0086               	movwf	6
 19011  0399  3001               	movlw	1	; select bank2/3
 19012  039A  0087               	movwf	7
 19013  039B  0878               	movf	_DimmerLightsIntr,w
 19014  039C  3E04               	addlw	4
 19015  039D  0084               	movwf	4
 19016  039E  3001               	movlw	1	; select bank2/3
 19017  039F  0085               	movwf	5
 19018  03A0  0800               	movf	0,w
 19019  03A1  0201               	subwf	1,w
 19020  03A2  1C03               	skipc
 19021  03A3  0008               	return
 19022                           
 19023                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 19024  03A4  0A78               	incf	_DimmerLightsIntr,w
 19025  03A5  0086               	movwf	6
 19026  03A6  3001               	movlw	1	; select bank2/3
 19027  03A7  0087               	movwf	7
 19028  03A8  1001               	bcf	1,0
 19029                           
 19030                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 19031  03A9  0A78               	incf	_DimmerLightsIntr,w
 19032  03AA  0086               	movwf	6
 19033  03AB  3001               	movlw	1	; select bank2/3
 19034  03AC  0087               	movwf	7
 19035  03AD  1581               	bsf	1,3
 19036                           
 19037                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 19038  03AE  0878               	movf	_DimmerLightsIntr,w
 19039  03AF  0086               	movwf	6
 19040  03B0  3001               	movlw	1	; select bank2/3
 19041  03B1  0087               	movwf	7
 19042  03B2  1C01               	btfss	1,0
 19043  03B3  0008               	return
 19044                           
 19045                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 19046  03B4  0878               	movf	_DimmerLightsIntr,w
 19047  03B5  0086               	movwf	6
 19048  03B6  3001               	movlw	1	; select bank2/3
 19049  03B7  0087               	movwf	7
 19050  03B8  1001               	bcf	1,0
 19051                           
 19052                           ;Dimmer_B1.c: 252: if (lights == 1) {
 19053  03B9  0873               	movf	setDimmerLights_IntrControl@lights,w
 19054  03BA  3A01               	xorlw	1
 19055  03BB  1D03               	skipz
 19056  03BC  2BC0               	goto	i1l7411
 19057                           
 19058                           ;Dimmer_B1.c: 253: RA7 = 0;
 19059  03BD  0020               	movlb	0	; select bank0
 19060  03BE  138C               	bcf	12,7	;volatile
 19061                           
 19062                           ;Dimmer_B1.c: 255: }
 19063  03BF  0008               	return
 19064  03C0                     i1l7411:	
 19065                           
 19066                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 19067  03C0  0873               	movf	setDimmerLights_IntrControl@lights,w
 19068  03C1  3A02               	xorlw	2
 19069  03C2  1D03               	skipz
 19070  03C3  0008               	return
 19071                           
 19072                           ;Dimmer_B1.c: 259: RB4 = 0;
 19073  03C4  0020               	movlb	0	; select bank0
 19074  03C5  120D               	bcf	13,4	;volatile
 19075                           
 19076                           ;Dimmer_B1.c: 260: }
 19077                           ;Dimmer_B1.c: 262: }
 19078                           ;Dimmer_B1.c: 263: }
 19079                           ;Dimmer_B1.c: 264: } else {
 19080  03C6  0008               	return
 19081  03C7                     i1l7415:	
 19082                           
 19083                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 19084  03C7  0A78               	incf	_DimmerLightsIntr,w
 19085  03C8  0086               	movwf	6
 19086  03C9  3001               	movlw	1	; select bank2/3
 19087  03CA  0087               	movwf	7
 19088  03CB  1D81               	btfss	1,3
 19089  03CC  0008               	return
 19090                           
 19091                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 19092  03CD  0A78               	incf	_DimmerLightsIntr,w
 19093  03CE  0086               	movwf	6
 19094  03CF  3001               	movlw	1	; select bank2/3
 19095  03D0  0087               	movwf	7
 19096  03D1  1181               	bcf	1,3
 19097                           
 19098                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 19099  03D2  3001               	movlw	1
 19100  03D3  00F2               	movwf	??_setDimmerLights_IntrControl
 19101  03D4  0878               	movf	_DimmerLightsIntr,w
 19102  03D5  3E05               	addlw	5
 19103  03D6  0086               	movwf	6
 19104  03D7  3001               	movlw	1	; select bank2/3
 19105  03D8  0087               	movwf	7
 19106  03D9  0872               	movf	??_setDimmerLights_IntrControl,w
 19107  03DA  0781               	addwf	1,f
 19108                           
 19109                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19110  03DB  0878               	movf	_DimmerLightsIntr,w
 19111  03DC  3E05               	addlw	5
 19112  03DD  0086               	movwf	6
 19113  03DE  3001               	movlw	1	; select bank2/3
 19114  03DF  0087               	movwf	7
 19115  03E0  0878               	movf	_DimmerLightsIntr,w
 19116  03E1  3E08               	addlw	8
 19117  03E2  0084               	movwf	4
 19118  03E3  3001               	movlw	1	; select bank2/3
 19119  03E4  0085               	movwf	5
 19120  03E5  0800               	movf	0,w
 19121  03E6  0201               	subwf	1,w
 19122  03E7  1C03               	skipc
 19123  03E8  2C2B               	goto	i1l7441
 19124                           
 19125                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 19126  03E9  0878               	movf	_DimmerLightsIntr,w
 19127  03EA  3E05               	addlw	5
 19128  03EB  0086               	movwf	6
 19129  03EC  3001               	movlw	1	; select bank2/3
 19130  03ED  0087               	movwf	7
 19131  03EE  0181               	clrf	1
 19132                           
 19133                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 19134  03EF  0A78               	incf	_DimmerLightsIntr,w
 19135  03F0  0086               	movwf	6
 19136  03F1  3001               	movlw	1	; select bank2/3
 19137  03F2  0087               	movwf	7
 19138  03F3  1F01               	btfss	1,6
 19139  03F4  0008               	return
 19140                           
 19141                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 19142  03F5  0A78               	incf	_DimmerLightsIntr,w
 19143  03F6  0086               	movwf	6
 19144  03F7  3001               	movlw	1	; select bank2/3
 19145  03F8  0087               	movwf	7
 19146  03F9  1B81               	btfsc	1,7
 19147  03FA  2C14               	goto	i1l7435
 19148                           
 19149                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 19150  03FB  0878               	movf	_DimmerLightsIntr,w
 19151  03FC  3E04               	addlw	4
 19152  03FD  0086               	movwf	6
 19153  03FE  3001               	movlw	1	; select bank2/3
 19154  03FF  0087               	movwf	7
 19155  0400  3038               	movlw	56
 19156  0401  0201               	subwf	1,w
 19157  0402  1803               	skipnc
 19158  0403  2C0E               	goto	i1l7433
 19159                           
 19160                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 19161  0404  3001               	movlw	1
 19162  0405  00F2               	movwf	??_setDimmerLights_IntrControl
 19163  0406  0878               	movf	_DimmerLightsIntr,w
 19164  0407  3E04               	addlw	4
 19165  0408  0086               	movwf	6
 19166  0409  3001               	movlw	1	; select bank2/3
 19167  040A  0087               	movwf	7
 19168  040B  0872               	movf	??_setDimmerLights_IntrControl,w
 19169  040C  0781               	addwf	1,f
 19170                           
 19171                           ;Dimmer_B1.c: 274: } else {
 19172  040D  0008               	return
 19173  040E                     i1l7433:	
 19174                           
 19175                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 19176  040E  0A78               	incf	_DimmerLightsIntr,w
 19177  040F  0086               	movwf	6
 19178  0410  3001               	movlw	1	; select bank2/3
 19179  0411  0087               	movwf	7
 19180  0412  1781               	bsf	1,7
 19181                           
 19182                           ;Dimmer_B1.c: 276: }
 19183                           ;Dimmer_B1.c: 277: } else {
 19184  0413  0008               	return
 19185  0414                     i1l7435:	
 19186                           
 19187                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19188  0414  0878               	movf	_DimmerLightsIntr,w
 19189  0415  3E04               	addlw	4
 19190  0416  0086               	movwf	6
 19191  0417  3001               	movlw	1	; select bank2/3
 19192  0418  0087               	movwf	7
 19193  0419  300D               	movlw	13
 19194  041A  0201               	subwf	1,w
 19195  041B  1C03               	skipc
 19196  041C  2C25               	goto	i1l7439
 19197                           
 19198                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 19199  041D  0878               	movf	_DimmerLightsIntr,w
 19200  041E  3E04               	addlw	4
 19201  041F  0086               	movwf	6
 19202  0420  3001               	movlw	1	; select bank2/3
 19203  0421  0087               	movwf	7
 19204  0422  3001               	movlw	1
 19205  0423  0281               	subwf	1,f
 19206                           
 19207                           ;Dimmer_B1.c: 280: } else
 19208  0424  0008               	return
 19209  0425                     i1l7439:	
 19210                           
 19211                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 19212  0425  0A78               	incf	_DimmerLightsIntr,w
 19213  0426  0086               	movwf	6
 19214  0427  3001               	movlw	1	; select bank2/3
 19215  0428  0087               	movwf	7
 19216  0429  1381               	bcf	1,7
 19217                           
 19218                           ;Dimmer_B1.c: 282: }
 19219                           ;Dimmer_B1.c: 283: }
 19220                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 19221  042A  0008               	return
 19222  042B                     i1l7441:	
 19223  042B  0878               	movf	_DimmerLightsIntr,w
 19224  042C  3E02               	addlw	2
 19225  042D  0086               	movwf	6
 19226  042E  3001               	movlw	1	; select bank2/3
 19227  042F  0087               	movwf	7
 19228  0430  1C01               	btfss	1,0
 19229  0431  0008               	return
 19230                           
 19231                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19232  0432  0878               	movf	_DimmerLightsIntr,w
 19233  0433  3E04               	addlw	4
 19234  0434  0086               	movwf	6
 19235  0435  3001               	movlw	1	; select bank2/3
 19236  0436  0087               	movwf	7
 19237  0437  0878               	movf	_DimmerLightsIntr,w
 19238  0438  3E06               	addlw	6
 19239  0439  0084               	movwf	4
 19240  043A  3001               	movlw	1	; select bank2/3
 19241  043B  0085               	movwf	5
 19242  043C  0800               	movf	0,w
 19243  043D  0201               	subwf	1,w
 19244  043E  1803               	skipnc
 19245  043F  2C4A               	goto	i1l7447
 19246                           
 19247                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19248  0440  3001               	movlw	1
 19249  0441  00F2               	movwf	??_setDimmerLights_IntrControl
 19250  0442  0878               	movf	_DimmerLightsIntr,w
 19251  0443  3E04               	addlw	4
 19252  0444  0086               	movwf	6
 19253  0445  3001               	movlw	1	; select bank2/3
 19254  0446  0087               	movwf	7
 19255  0447  0872               	movf	??_setDimmerLights_IntrControl,w
 19256  0448  0781               	addwf	1,f
 19257                           
 19258                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19259  0449  0008               	return
 19260  044A                     i1l7447:	
 19261  044A  0878               	movf	_DimmerLightsIntr,w
 19262  044B  3E06               	addlw	6
 19263  044C  0086               	movwf	6
 19264  044D  3001               	movlw	1	; select bank2/3
 19265  044E  0087               	movwf	7
 19266  044F  0878               	movf	_DimmerLightsIntr,w
 19267  0450  3E04               	addlw	4
 19268  0451  0084               	movwf	4
 19269  0452  3001               	movlw	1	; select bank2/3
 19270  0453  0085               	movwf	5
 19271  0454  0800               	movf	0,w
 19272  0455  0201               	subwf	1,w
 19273  0456  1803               	skipnc
 19274  0457  2C60               	goto	i1l7451
 19275                           
 19276                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19277  0458  0878               	movf	_DimmerLightsIntr,w
 19278  0459  3E04               	addlw	4
 19279  045A  0086               	movwf	6
 19280  045B  3001               	movlw	1	; select bank2/3
 19281  045C  0087               	movwf	7
 19282  045D  3001               	movlw	1
 19283  045E  0281               	subwf	1,f
 19284                           
 19285                           ;Dimmer_B1.c: 289: } else {
 19286  045F  0008               	return
 19287  0460                     i1l7451:	
 19288                           
 19289                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19290  0460  0878               	movf	_DimmerLightsIntr,w
 19291  0461  3E02               	addlw	2
 19292  0462  0086               	movwf	6
 19293  0463  3001               	movlw	1	; select bank2/3
 19294  0464  0087               	movwf	7
 19295  0465  1001               	bcf	1,0
 19296  0466  0008               	return
 19297  0467                     __end_of_setDimmerLights_IntrControl:	
 19298                           
 19299                           	psect	text133
 19300  1C4F                     __ptext133:	
 19301 ;; *************** function _DimmerIntrPointSelect *****************
 19302 ;; Defined at:
 19303 ;;		line 74 in file "../src/Dimmer_B1.c"
 19304 ;; Parameters:    Size  Location     Type
 19305 ;;  lights          1    wreg     unsigned char 
 19306 ;; Auto vars:     Size  Location     Type
 19307 ;;  lights          1    1[COMMON] unsigned char 
 19308 ;; Return value:  Size  Location     Type
 19309 ;;		None               void
 19310 ;; Registers used:
 19311 ;;		wreg
 19312 ;; Tracked objects:
 19313 ;;		On entry : 0/0
 19314 ;;		On exit  : 0/0
 19315 ;;		Unchanged: 0/0
 19316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;Total ram usage:        2 bytes
 19322 ;; Hardware stack levels used:    1
 19323 ;; This function calls:
 19324 ;;		Nothing
 19325 ;; This function is called by:
 19326 ;;		_setDimmerLights_IntrControl
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           
 19331                           ;psect for function _DimmerIntrPointSelect
 19332  1C4F                     _DimmerIntrPointSelect:	
 19333                           
 19334                           ;incstack = 0
 19335                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19336                           ;DimmerIntrPointSelect@lights stored from wreg
 19337  1C4F  00F1               	movwf	DimmerIntrPointSelect@lights
 19338                           
 19339                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19340  1C50  0871               	movf	DimmerIntrPointSelect@lights,w
 19341  1C51  3A01               	xorlw	1
 19342  1C52  1D03               	skipz
 19343  1C53  2C59               	goto	i1l7055
 19344                           
 19345                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19346  1C54  30BE               	movlw	_DimmerLights1& (0+255)
 19347  1C55  00F0               	movwf	??_DimmerIntrPointSelect
 19348  1C56  0870               	movf	??_DimmerIntrPointSelect,w
 19349  1C57  00F8               	movwf	_DimmerLightsIntr
 19350                           
 19351                           ;Dimmer_B1.c: 78: }
 19352  1C58  0008               	return
 19353  1C59                     i1l7055:	
 19354                           
 19355                           ;Dimmer_B1.c: 81: else if (lights == 2) {
 19356  1C59  0871               	movf	DimmerIntrPointSelect@lights,w
 19357  1C5A  3A02               	xorlw	2
 19358  1C5B  1D03               	skipz
 19359  1C5C  0008               	return
 19360                           
 19361                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19362  1C5D  30CF               	movlw	_DimmerLights2& (0+255)
 19363  1C5E  00F0               	movwf	??_DimmerIntrPointSelect
 19364  1C5F  0870               	movf	??_DimmerIntrPointSelect,w
 19365  1C60  00F8               	movwf	_DimmerLightsIntr
 19366  1C61  0008               	return
 19367  1C62                     __end_of_DimmerIntrPointSelect:	
 19368                           
 19369                           	psect	text134
 19370  1B97                     __ptext134:	
 19371 ;; *************** function _IOC_ISR *****************
 19372 ;; Defined at:
 19373 ;;		line 402 in file "../src/MCU_B1.c"
 19374 ;; Parameters:    Size  Location     Type
 19375 ;;		None
 19376 ;; Auto vars:     Size  Location     Type
 19377 ;;		None
 19378 ;; Return value:  Size  Location     Type
 19379 ;;		None               void
 19380 ;; Registers used:
 19381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19382 ;; Tracked objects:
 19383 ;;		On entry : 0/0
 19384 ;;		On exit  : 0/0
 19385 ;;		Unchanged: 0/0
 19386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19391 ;;Total ram usage:        0 bytes
 19392 ;; Hardware stack levels used:    1
 19393 ;; Hardware stack levels required when called:    3
 19394 ;; This function calls:
 19395 ;;		_setDimmerReClock
 19396 ;; This function is called by:
 19397 ;;		_ISR
 19398 ;; This function uses a non-reentrant model
 19399 ;;
 19400                           
 19401                           
 19402                           ;psect for function _IOC_ISR
 19403  1B97                     _IOC_ISR:	
 19404                           
 19405                           ;MCU_B1.c: 403: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19406                           
 19407                           ;incstack = 0
 19408                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19409  1B97  1D8B               	btfss	11,3	;volatile
 19410  1B98  0008               	return
 19411  1B99  1C0B               	btfss	11,0	;volatile
 19412  1B9A  0008               	return
 19413  1B9B  0027               	movlb	7	; select bank7
 19414  1B9C  1D16               	btfss	22,2	;volatile
 19415  1B9D  0008               	return
 19416                           
 19417                           ;MCU_B1.c: 404: IOCBF2 = 0;
 19418  1B9E  1116               	bcf	22,2	;volatile
 19419                           
 19420                           ;MCU_B1.c: 405: IOCIF = 0;
 19421  1B9F  100B               	bcf	11,0	;volatile
 19422                           
 19423                           ;MCU_B1.c: 406: if (myMain.PowerON == 1) {
 19424  1BA0  0022               	movlb	2	; select bank2
 19425  1BA1  1C20               	btfss	_myMain^(0+256),0
 19426  1BA2  0008               	return
 19427                           
 19428                           ;MCU_B1.c: 409: setDimmerReClock();
 19429  1BA3  319A  22BD         	fcall	_setDimmerReClock
 19430                           
 19431                           ;MCU_B1.c: 411: }
 19432                           ;MCU_B1.c: 412: return;
 19433  1BA5  0008               	return
 19434  1BA6                     __end_of_IOC_ISR:	
 19435                           
 19436                           	psect	text135
 19437  1ABD                     __ptext135:	
 19438 ;; *************** function _setDimmerReClock *****************
 19439 ;; Defined at:
 19440 ;;		line 245 in file "../src/MCU_B1.c"
 19441 ;; Parameters:    Size  Location     Type
 19442 ;;		None
 19443 ;; Auto vars:     Size  Location     Type
 19444 ;;		None
 19445 ;; Return value:  Size  Location     Type
 19446 ;;		None               void
 19447 ;; Registers used:
 19448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19449 ;; Tracked objects:
 19450 ;;		On entry : 0/0
 19451 ;;		On exit  : 0/0
 19452 ;;		Unchanged: 0/0
 19453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19458 ;;Total ram usage:        0 bytes
 19459 ;; Hardware stack levels used:    1
 19460 ;; Hardware stack levels required when called:    2
 19461 ;; This function calls:
 19462 ;;		_setDimmerLights_IntrIOC_GO
 19463 ;; This function is called by:
 19464 ;;		_IOC_ISR
 19465 ;; This function uses a non-reentrant model
 19466 ;;
 19467                           
 19468                           
 19469                           ;psect for function _setDimmerReClock
 19470  1ABD                     _setDimmerReClock:	
 19471                           
 19472                           ;MCU_B1.c: 250: setDimmerLights_IntrIOC_GO(1);
 19473                           
 19474                           ;incstack = 0
 19475                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19476  1ABD  3001               	movlw	1
 19477  1ABE  3192  2284  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19478                           
 19479                           ;MCU_B1.c: 254: setDimmerLights_IntrIOC_GO(2);
 19480  1AC1  3002               	movlw	2
 19481  1AC2  3192  2284         	fcall	_setDimmerLights_IntrIOC_GO
 19482  1AC4  0008               	return
 19483  1AC5                     __end_of_setDimmerReClock:	
 19484                           
 19485                           	psect	text136
 19486  1284                     __ptext136:	
 19487 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19488 ;; Defined at:
 19489 ;;		line 28 in file "../src/Dimmer_B1.c"
 19490 ;; Parameters:    Size  Location     Type
 19491 ;;  lights          1    wreg     unsigned char 
 19492 ;; Auto vars:     Size  Location     Type
 19493 ;;  lights          1    2[COMMON] unsigned char 
 19494 ;; Return value:  Size  Location     Type
 19495 ;;		None               void
 19496 ;; Registers used:
 19497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19498 ;; Tracked objects:
 19499 ;;		On entry : 0/0
 19500 ;;		On exit  : 0/0
 19501 ;;		Unchanged: 0/0
 19502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19506 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19507 ;;Total ram usage:        1 bytes
 19508 ;; Hardware stack levels used:    1
 19509 ;; Hardware stack levels required when called:    1
 19510 ;; This function calls:
 19511 ;;		_DimmerIntrIOCPointSelect
 19512 ;; This function is called by:
 19513 ;;		_setDimmerReClock
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           
 19518                           ;psect for function _setDimmerLights_IntrIOC_GO
 19519  1284                     _setDimmerLights_IntrIOC_GO:	
 19520                           
 19521                           ;incstack = 0
 19522                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19523                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19524  1284  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19525                           
 19526                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19527  1285  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19528  1286  319D  2525  3192   	fcall	_DimmerIntrIOCPointSelect
 19529                           
 19530                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19531  1289  0021               	movlb	1	; select bank1
 19532  128A  0849               	movf	_DimmerLightsIntrIOC^(0+128),w
 19533  128B  3E02               	addlw	2
 19534  128C  0086               	movwf	6
 19535  128D  3001               	movlw	1	; select bank2/3
 19536  128E  0087               	movwf	7
 19537  128F  1901               	btfsc	1,2
 19538  1290  0008               	return
 19539  1291  0020               	movlb	0	; select bank0
 19540  1292  1D0D               	btfss	13,2	;volatile
 19541  1293  0008               	return
 19542                           
 19543                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19544  1294  0021               	movlb	1	; select bank1
 19545  1295  0849               	movf	_DimmerLightsIntrIOC^(0+128),w
 19546  1296  3E02               	addlw	2
 19547  1297  0086               	movwf	6
 19548  1298  3001               	movlw	1	; select bank2/3
 19549  1299  0087               	movwf	7
 19550  129A  1501               	bsf	1,2
 19551                           
 19552                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19553  129B  0A49               	incf	_DimmerLightsIntrIOC^(0+128),w
 19554  129C  0086               	movwf	6
 19555  129D  3001               	movlw	1	; select bank2/3
 19556  129E  0087               	movwf	7
 19557  129F  1401               	bsf	1,0
 19558                           
 19559                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19560  12A0  0A49               	incf	_DimmerLightsIntrIOC^(0+128),w
 19561  12A1  0086               	movwf	6
 19562  12A2  3001               	movlw	1	; select bank2/3
 19563  12A3  0087               	movwf	7
 19564  12A4  1481               	bsf	1,1
 19565                           
 19566                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19567  12A5  01BC               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19568                           
 19569                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19570  12A6  0A49               	incf	_DimmerLightsIntrIOC^(0+128),w
 19571  12A7  0086               	movwf	6
 19572  12A8  3001               	movlw	1	; select bank2/3
 19573  12A9  0087               	movwf	7
 19574  12AA  1D01               	btfss	1,2
 19575  12AB  0008               	return
 19576                           
 19577                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19578  12AC  0849               	movf	_DimmerLightsIntrIOC^(0+128),w
 19579  12AD  0086               	movwf	6
 19580  12AE  3001               	movlw	1	; select bank2/3
 19581  12AF  0087               	movwf	7
 19582  12B0  1401               	bsf	1,0
 19583                           
 19584                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19585  12B1  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19586  12B2  3A01               	xorlw	1
 19587  12B3  1D03               	skipz
 19588  12B4  2AB8               	goto	i1l7047
 19589                           
 19590                           ;Dimmer_B1.c: 56: RA7 = 1;
 19591  12B5  0020               	movlb	0	; select bank0
 19592  12B6  178C               	bsf	12,7	;volatile
 19593                           
 19594                           ;Dimmer_B1.c: 58: }
 19595  12B7  0008               	return
 19596  12B8                     i1l7047:	
 19597                           
 19598                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19599  12B8  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19600  12B9  3A02               	xorlw	2
 19601  12BA  1D03               	skipz
 19602  12BB  0008               	return
 19603                           
 19604                           ;Dimmer_B1.c: 62: RB4 = 1;
 19605  12BC  0020               	movlb	0	; select bank0
 19606  12BD  160D               	bsf	13,4	;volatile
 19607  12BE  0008               	return
 19608  12BF                     __end_of_setDimmerLights_IntrIOC_GO:	
 19609                           
 19610                           	psect	text137
 19611  1D25                     __ptext137:	
 19612 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19613 ;; Defined at:
 19614 ;;		line 8 in file "../src/Dimmer_B1.c"
 19615 ;; Parameters:    Size  Location     Type
 19616 ;;  lights          1    wreg     unsigned char 
 19617 ;; Auto vars:     Size  Location     Type
 19618 ;;  lights          1    1[COMMON] unsigned char 
 19619 ;; Return value:  Size  Location     Type
 19620 ;;		None               void
 19621 ;; Registers used:
 19622 ;;		wreg
 19623 ;; Tracked objects:
 19624 ;;		On entry : 0/0
 19625 ;;		On exit  : 0/0
 19626 ;;		Unchanged: 0/0
 19627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19632 ;;Total ram usage:        2 bytes
 19633 ;; Hardware stack levels used:    1
 19634 ;; This function calls:
 19635 ;;		Nothing
 19636 ;; This function is called by:
 19637 ;;		_setDimmerLights_IntrIOC_GO
 19638 ;; This function uses a non-reentrant model
 19639 ;;
 19640                           
 19641                           
 19642                           ;psect for function _DimmerIntrIOCPointSelect
 19643  1D25                     _DimmerIntrIOCPointSelect:	
 19644                           
 19645                           ;incstack = 0
 19646                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19647                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19648  1D25  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19649                           
 19650                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19651  1D26  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19652  1D27  3A01               	xorlw	1
 19653  1D28  1D03               	skipz
 19654  1D29  2D30               	goto	i1l6769
 19655                           
 19656                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19657  1D2A  30BE               	movlw	_DimmerLights1& (0+255)
 19658  1D2B  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19659  1D2C  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19660  1D2D  0021               	movlb	1	; select bank1
 19661  1D2E  00C9               	movwf	_DimmerLightsIntrIOC^(0+128)
 19662                           
 19663                           ;Dimmer_B1.c: 12: }
 19664  1D2F  0008               	return
 19665  1D30                     i1l6769:	
 19666                           
 19667                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 19668  1D30  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19669  1D31  3A02               	xorlw	2
 19670  1D32  1D03               	skipz
 19671  1D33  0008               	return
 19672                           
 19673                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19674  1D34  30CF               	movlw	_DimmerLights2& (0+255)
 19675  1D35  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19676  1D36  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19677  1D37  0021               	movlb	1	; select bank1
 19678  1D38  00C9               	movwf	_DimmerLightsIntrIOC^(0+128)
 19679  1D39  0008               	return
 19680  1D3A                     __end_of_DimmerIntrIOCPointSelect:	
 19681  007E                     btemp	set	126	;btemp
 19682  007E                     pic14e$flags	set	126
 19683  007E                     wtemp	set	126
 19684  007E                     wtemp0	set	126
 19685  0080                     wtemp1	set	128
 19686  0082                     wtemp2	set	130
 19687  0084                     wtemp3	set	132
 19688  0086                     wtemp4	set	134
 19689  0088                     wtemp5	set	136
 19690  007F                     wtemp6	set	127
 19691  007E                     ttemp	set	126
 19692  007E                     ttemp0	set	126
 19693  0081                     ttemp1	set	129
 19694  0084                     ttemp2	set	132
 19695  0087                     ttemp3	set	135
 19696  007F                     ttemp4	set	127
 19697  007E                     ltemp	set	126
 19698  007E                     ltemp0	set	126
 19699  0082                     ltemp1	set	130
 19700  0086                     ltemp2	set	134
 19701  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         274
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80     79      80
    BANK1            80      8      80
    BANK2            80      0      78
    BANK3            80      4      77
    BANK4            80      0      78
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  132381
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8092
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8092
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      93
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48322
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   48322
                                              5 BANK1      3     3      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35852
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35509
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     194      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     194      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 23 17:13:04 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 16C8  
                                      l98 16DC                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F69                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0075  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1C88  
                  __end_of_setDelayOff_GO 1597                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0B03  
                    _setDimmerLights_Line 1D8F                              ___ftadd@sign 004B  
                                     l110 13F9                                       l106 13FF  
                                     l107 13FB                                       l108 13E9  
                    _setDimmerLights_SwOn 17A4                                       l255 0ADB  
                                     l328 1DB2                                       l329 1DB4  
                                     l372 1FB7                                       l811 1ED9  
                                     l770 1C6C                                       l864 1C91  
                                     l865 1C98                                       _GIE 005F  
                                     _CRC 00C6                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C0  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C4              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E0                                       _Sw2 0245  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1DBF  
                   _Buzzer_Initialization 1A79                           __end_of_ADC_Set 1ABD  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 14F2                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1F69                     _setDimmerLights_AdjOn 10E8  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1BA6  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1068 13B5                                      l1352 113E  
                                    l2304 1BAB                                      l1361 144C  
                                    l1338 120D                  ?_DimmerLightsPointSelect 0070  
                                    l3043 08D6                                      l1612 0640  
                                    l2340 0A96                                      l2260 0E3F  
                                    l2326 11D9                                      l1550 12FA  
                                    l3072 0506                                      l2352 1326  
                                    l2256 0E9F                                      l3049 08ED  
                                    l2267 0E61                                      l1732 01F0  
                                    l1900 0FFA                           __end_of_IOC_Set 1B64  
                                    l2269 0E7A                                      l1582 11A3  
                                    l1742 01CC                                      l1734 0080  
                                    l1743 01CA                                      l1735 007C  
                                    l1736 0077                                      l1577 118C  
                                    l1905 0FF4                                      l1578 11A7  
                                    l2656 1D6B                                      l2680 023A  
                                    l2678 035D                                      l2882 1E50  
                   _setDimmerLights_SwOff 1454                                      l9101 17BE  
                                    l9031 1576                                      l9111 17CF  
                                    l9035 157C                                      l9131 1489  
                                    l9037 1582                                      l9301 0912  
                                    l9213 07DE                                      l9117 17F2  
                                    l9109 17CA                                      l9303 0947  
                                    l9151 173A                                      l9231 1DEB  
                                    l9119 17F8                                      l9225 1DE2  
                                    l9401 0837                                      l9315 1EAE  
                                    l9227 1DE5                                      l9403 083A  
                                    l9251 1E40                                      l9319 1EB8  
                                    l8703 0496                                      l9263 1FC8  
                                    l9271 1F4F                                      l9407 0840  
                                    l9343 14E5                                      l9513 160B  
                                    l9521 1613                                      l8641 08B3  
                                    l8721 04BF                                      l9265 1FD3  
                                    l9273 1F52                                      l9249 1E3A  
                                    l9507 1602                                      l8651 08DB  
                                    l8643 08BD                                      l8731 04E1  
                                    l9363 1F97                                      l9603 0AB0  
                                    l8811 0734                                      l9099 17BB  
                                    l9339 14D6                                      l9533 1630  
                                    l8653 08E3                                      l8645 08C2  
                                    l8637 08AC                                      l8741 0502  
                                    l8733 04E5                                      l8709 04A5  
                                    l9277 1F58                                      l9365 1F9A  
                                    l9621 0AE1                                      l9357 1315  
                   _myMain_Initialization 1BB5                                      l8911 1CCC  
                                    l8727 04D2                                      l8903 0D61  
                                    l9391 0827                                      l9631 0AF1  
                                    l9623 0AE4                                      l8665 1C0A  
                                    l9529 162C                                      l9537 1634  
                                    l8745 0518                                      l8729 04DC  
                                    l9393 082A                                      l9369 1FA0  
                                    l9617 0AC2                                      l8841 07A1  
                                    l8833 078D                                      l8817 074A  
                                    l9299 0941                                      l9467 1187  
                                    l9723 1C86                                      l8739 04F8  
                                    l9635 0AF7                                      l9627 0AEA  
                                    l8669 1C10                                      l9477 119E  
                                    l9469 1190                                      l8749 052A  
                                    l9397 0830                                      l9653 0B7D  
                                    l9629 0AEE                                      l8845 07A9  
                                    l8829 0785                                      l9581 0A77  
                                    l9573 0A56                                      l8927 108F  
                                    l9751 1271                                      l9487 1D9E  
                                    l8687 1F2F                                      l8759 0545  
                                    l8775 0ED2                                      l9663 0B90  
                                    l9647 0B74                                      l9655 0B80  
                                    l9575 0A6B                                      l8961 15AD  
                                    l9761 1282                                      l9737 125A  
                                    l8769 0EBC                                      l9665 0B93  
                                    l9649 0B77                                      l9913 1C01  
                                    l9577 0A6F                                      l9569 0A31  
                                    l9585 0A7B                                      _CFGS 0CAE  
                                    l8971 15B5                                      l8955 15A2  
                                    l9499 15FA                                      l8699 048F  
                                    l9579 0A73                                      l8973 15C1  
                                    l9749 126E                                      l8797 0F2C  
                                    l8789 0F13                                      l8869 0CFC  
                                    l9685 0BAB                                      l9669 0B99  
                                    l9597 0AA7                                      l8983 15DC  
                                    l9759 127D                                      l8895 0D47  
                                    l8887 0D2C                                      l9687 0BC4  
                                    l9599 0AAA                                      l9935 0C07  
                            __CFG_WDTE$ON 0000                                      l8897 0D50  
                                    l8889 0D3A                                      l9945 0C18  
                                    l8987 15E4                                      l8979 15D3  
                                    l8899 0D53                                      l9779 1522  
                                    l9971 0C58                                      l9789 1538  
                                    l9869 1126                                      l9957 0C2E  
                                    l9965 0C4D                                      l9981 1D08  
                                    l9799 1657                                      l9995 1E91  
                                    l9997 1E93                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9005 08F4                                      u9205 04E6  
                                    u9145 04C0                                      u9305 0EE4  
                                    u9235 04F9                                      u9315 0EF4  
                                    u9325 0F14                                      u9175 04D3  
                                    u9335 0F23                                      u9415 078E  
                                    u9345 0F2D                                      u9505 0D03  
                                    u9425 0794                                      u9535 0D2D  
                                    u9455 07AA                                      u9705 15C2  
                                    u9625 107B                                      u9465 07B0  
                                    u9385 0756                                      u9715 15CC  
                                    u9395 0766                                      u9725 15D4  
                                    u9565 0D48                                      u8935 08B8  
                                    u8955 08D1                                      u9835 1D49  
                                    _LWLO 0CAD                                      u9685 15B8  
                                    u8975 08DE                                      _RSSI 00CA  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00AE                                      _Load 012E  
                                    _Temp 00D2                                      _main 1749  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 08A3  
                         __end_of_RF_Main 1A85                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B12  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1ABD                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 133A  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2341 0022  
    _getDimmerLights_Allow_Condition$2342 0023      _getDimmerLights_Allow_Condition$2343 0024  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1284  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 124A  
                  _getDimmerLights_Status 1BD4                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0013                          __end_of_LED_Main 1B58  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1C62  
                   ?_getDimmerLights_Line 0070                                     l10101 10E0  
                                   l10005 1E9D                                     l10103 10C3  
                                   l10007 1EA1                                     l11001 0623  
                                   l10105 10E5                                     l10211 140D  
                                   l10055 0B2C                                     l11007 0636  
                                   l10057 0B32                                     l10217 1422  
                                   l10067 0B5B                                     l10307 0FE0  
                                   l10069 0B61                                     l10413 1D70  
                                   l10309 0FE1                                     l10511 1E4A  
                                   l10351 0E4A                                     l10335 0E26  
                                   l10431 0223                                     l11071 1778  
                                   l10417 1D76                                     l10265 0F6A  
                                   l10193 1F0E                                     l10531 121C  
                                   l10195 1F11                                     l11067 176D  
                                   l10533 1228                                     l10357 0E50  
                                   l10543 1243                                     l10375 0E67  
                                   l10471 02D8                                     l10447 0268  
                                   l10295 0FC9                                     l10199 1F17  
                                   l10625 06B3                                     l10385 0E76  
                                   l10457 029A                                     l10481 030A  
                                   l10297 0FCB                                     l10539 123A  
                                   l10803 005E                                     l10723 0CA8  
                                   l10715 0C83                                     l10557 13D3  
                                   l10821 007F                                     l10397 0E98  
                                   l10389 0E87                                     l10743 0CDD  
                                   l10727 0CB0                     ?_setDimmerLights_Main 0070  
                                   l10595 1EDB                                     l10931 01DF  
                                   l10843 00D5                                     l10837 00A3  
                                   l10757 1369                                     l10775 12D9  
                                   l10875 016B                                     l10883 0196  
                                   l10981 05D2                                     l10965 058F  
                                   l10893 01AC                                     l10869 015E  
                                   l10959 057F                                     l10879 018A  
                                   l10977 05CA                                     l10969 059E  
                                   l10995 0611                                     l10979 05A1  
                                   l10997 05E8                                     l10999 0619  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E9  
                         __end_of___awdiv 15EB                           __end_of___ftadd 055D  
                         __end_of___ftdiv 0F4E                           __end_of___ftneg 1AFE  
                                   u10000 16FA                                     u10005 16F8  
                                   u10125 1FBD                           __end_of___ftmul 07D1  
                                   u10175 091D                                     u12105 1229  
                                   u12115 1233                           ___awdiv@divisor 0020  
                                   u12125 123B                                     u12045 1E51  
                                   u12055 1E56                                     _T1CON 0018  
                                   u12155 13C9                                     u12315 1204  
                         __end_of___fttol 0D6A                                     u12085 121F  
                                   u11615 0FD1                                     u10905 1D89  
                                   u12425 0CCA                                     u11395 10CC  
                                   u11715 0E39                                     u12525 12F2  
                                   u12375 0C96                                     u11595 0FB1  
                                   u12475 1360                                     u12485 136F  
                                   u12920 0617                                     u12665 00A1  
                                   u12675 00D3                                     u12925 05F3  
                                   u12765 019D                                     u12685 0117  
                                   _IOCBF 0396                                     u12890 05D0  
                                   _IOCBN 0395                                     u12895 05AC  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 124A  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1D8F                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12BF                _setDimmerLights_IntrIOC_GO 1284  
                        __end_of_TMR1_ISR 2000                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 0966  
              _setDimmerLights_ErrorClose 0904                          __end_of_TMR1_Set 1B70  
                                   _getAD 1F03                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C4F               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1CFD  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1C88  
           __end_of_setLED_Initialization 1C2B                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 16F0  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 09CB  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 17A4                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1A8F                        ??_setMemory_Modify 0020  
                          _Exception_Main 055D                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 1544  
                    _setSw_Initialization 1AED                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 0A30                            _setMemory_Data 1B28  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 0015  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C8  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1C75  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                        _RF_Timeout_Counter 1D3A  
                 ??_Switch_Initialization 0024                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0846  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1AE5  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F46  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0904  
                _getMain_All_Error_Status 1176                                    _IOCBF2 1CB2  
                                  i1l7047 12B8                                    i1l7055 1C59  
                                  i1l7411 03C0                                    i1l7415 03C7  
                                  i1l7433 040E                                    i1l7441 042B  
                                  i1l7451 0460                                    i1l7435 0414  
                                  i1l7447 044A                                    i1l7439 0425  
                                  i1l7399 0390                                    i1l6769 1D30  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u811_25 1FFA  
                      __size_of_Load_Main 01AA                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DF3  
                                  _WDTCON 0097                      Exception_Main@i_3642 00EC  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1D64                                    _Dimmer 00BA  
                                  _DlySw1 015C                                    _DlySw2 0161  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1C3D  
                     __end_of_Buzzer_Main 1406                                    _Memory 0220  
                                  _Timer1 00BD                                    ___bmul 1C07  
                  __end_of_Exception_Main 0641                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EE                                    ___wmul 1E47  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D0                                    _s_data 00D1  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 15EB  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1B34                          _DimmerLightsIntr 0078  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 1697  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1A7F  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0467  
             _setDimmerLights_IntrControl 0366                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CC1  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D11              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1D64  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0A30  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0046  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5297 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2322 002E  
               _setDimmerLights_SwOn$2323 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1EE3                             __end_of_getAD 1F24  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1B40  
                         _getSw_KeyStatus 1E84                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1CE9  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F4  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C75  
              __end_of_set_TimeoutCleared 1AA4                  __end_of_setDimmerReClock 1AC5  
                      __size_of_getRxData 007A                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1B89  
                          _DimmerLights11 00C7                            _DimmerLights22 00C8  
                    __size_of_setLED_Main 0044                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1A85  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13BC  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1A8B  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0024                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1AC5                                __pnvCOMMON 007A  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0024  
                            _DimmerLights 006F                         LedPointSelect@led 0020  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1749                            _getDelayOff_GO 1BC4  
                     _CC2500_WriteCommand 1DD9                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0C62  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0023                                _getLoad_OK 1AD5  
                      __size_of_setTxData 0097                                   ?_setLED 0021  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1AB6                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 133A                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B1D  
                      _setRFSW_AdjControl 12FC                    __end_of_setProductData 1B97  
                                 _IOC_ISR 1B97                                   _IOC_Set 1B58  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11DD  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1DBF  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 0078                    __size_of_CC2500_TxData 006C  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1A82  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1B07           __end_of_setControl_Lights_Table 0A97  
                         setRF_Main@error 00EF                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0966  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B7C                           __size_of_IO_Set 001B  
                       __end_of_getBuz_GO 1BF6                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BD4  
                                 _VarLED1 0166                                   _VarLED2 016A  
          __end_of_getDimmerLights_Status 1BE5                         __end_of_getRxData 0C62  
                 __end_of_getSw_KeyStatus 1EA3                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1D3A                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 1597                                   ___ftadd 0467  
                                 ___ftdiv 0EA5                                   ___ftneg 1AF5  
                         __size_of___wmul 001E                                   ___ftmul 071D  
                                 ___fttol 0CE3                       __end_of_Switch_Main 1B28  
                                 ___lwdiv 1213                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1BF6                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0054  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12BF                                   __ptext2 1BB5  
                                 __ptext3 133A                                   __ptext4 0C62  
                                 __ptext5 1F03                                   __ptext6 1C3D  
                                 __ptext7 0002                                   __ptext8 1A88  
                                 __ptext9 0F4E                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0022                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C4F                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1213                 __end_of_Flash_Memory_Read 1DD9  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0E01  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1ACD  
                       _DimmerLights_Main 1EC3            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1AAA                __end_of_CC2500_ClearRXFIFO 1A97  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1A9B  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 007A  
                          _LedPointSelect 1EA3                       _DelayOffPointSelect 1CC1  
                                 clrloop0 1AB1            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1B89                      end_of_initialization 0046  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1091  
                           _DelayTime_1us 1FB2                         __end_of_setTxData 0E01  
              __end_of_Flash_Memory_Write 1145                                   init_ram 1AAA  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1AAB  
                              _setSw_Main 01F4                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1F8D  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C19  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B70                             _CC2500_TxData 0A97  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1406  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1AFE                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0023                    setSw_Initialization@sw 0023  
               __end_of_DimmerLights_Main 1EE3                        _Mcu_Initialization 1C2B  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1A93  
                    __end_of_my_MainTimer 12FC                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1EC3  
                 __end_of_setPercentValue 09CB                  __size_of_CC2500_WriteREG 0023  
               __end_of_CC2500_InitSetREG 10BB                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0059  
                          ?_DelayTime_1us 0020                       _setDimmerLights_Adj 163F  
                    ?_Flash_Memory_Unlock 0070                 __end_of_CC2500_ReadStatus 1FB2  
                           ?_RF_RxDisable 0070           getMain_All_Error_Status@command 0025  
             ??_getAll_DimmerLights_AdjSw 0022                               ___ftdiv@exp 003C  
                        ??_Exception_Main 006B                            __end_of_IO_Set 1E0E  
                    _setRF_Initialization 1B12                        _setMemory_LoopSave 1CAE  
                             _Switch_Main 1B1D                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   _DimmerLightsPointSelect 1C62  
                 __end_of_getRF_KeyStatus 1C07                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1D4F  
                    ??_Mcu_Initialization 0021                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                    ?_setDimmerLights_Adj 006B                            __end_of___bmul 1C19  
                    setRF_DimmerLights@on 0066                  _DimmerIntrIOCPointSelect 1D25  
                          __end_of___wmul 1E65                         getSw_KeyStatus@sw 0024  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0028  
           __size_of_getDimmerLights_Line 0013                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006D  
                          __end_of_setLED 163F             __size_of_setDimmerLights_Line 0017  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 16F0  
                    _CC2500_FrequencyCabr 1B70                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 14A3  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 07D1  
                         ?_LedPointSelect 0070                                 _Load_Main 004A  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1ADD  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1E84           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1A9F  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 00E4                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A88                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CB  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00CE                               __pdataBANK4 024E  
                                ??_setLED 0022                 _getAll_DimmerLights_AdjSw 10BB  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 11A9                          _CC2500_SIDLEMode 1A9B  
              __size_of_DimmerLights_Main 0020                 __end_of_setRF_DimmerValue 0800  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0021                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1C9B  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK3 01E9  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01BE                             _DimmerLights2 01CF  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E2A  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 1A8F                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 00EA                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00A4                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                                setBuz@time 0029  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 0801                                 _getBuz_GO 1BE5  
     __end_of_Flash_Memory_Initialization 071D               _Flash_Memory_Initialization 0641  
                                ?___awdiv 0020                                 __ptext100 0467  
                               __ptext101 1F24                                 __ptext110 1CD5  
                               __ptext102 08A3                                 __ptext111 1145  
                               __ptext103 15EB                                 __ptext120 1BC4  
                               __ptext112 1ACD                                 __ptext104 1EA3  
                               __ptext121 1BD4                                 __ptext113 0846  
                               __ptext105 1D8F                                 __ptext122 1C62  
                               __ptext114 0904                                 __ptext106 1C75  
                               __ptext131 1FD8                                 __ptext123 1697  
                               __ptext115 1454                                 __ptext107 124A  
                               __ptext132 0366                                 __ptext124 1597  
                               __ptext116 1544                                 __ptext108 1AD5  
                               __ptext133 1C4F                                 __ptext125 1AC5  
                               __ptext117 1B89                                 __ptext109 1176  
                                ?___ftadd 0041                                 __ptext134 1B97  
                               __ptext126 1AA4                                 __ptext118 1067  
                               __ptext135 1ABD                                 __ptext127 1CC1  
                               __ptext119 1C07                                 __ptext136 1284  
                               __ptext128 13BC                                 __ptext137 1D25  
                               __ptext129 1A79                                 _getRxData 0BE8  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003D                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 14F2                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A7C                          getPercentValue@i 005F  
                        setPercentValue@i 005F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1D79  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 0172  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 002E             __end_of_setDimmerLights_AdjRF 1F8D  
           __end_of_setDimmerLights_AdjOn 1116                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00CF            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 14A3  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1BC4  
                          __size_of_getAD 0021                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1CFD  
                     __end_of_setLED_Main 13BC                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00C9                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1A88                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1B4C  
                         SwPointSelect@sw 0020                                 clear_ram0 1AB0  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 12BF                                 _setTxData 0D6A  
     __end_of_DimmerLights_Initialization 1CE9               _DimmerLights_Initialization 1CD5  
                      _CC2500_ClearRXFIFO 1A93                        _CC2500_ClearTXFIFO 1A97  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D25                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1116                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FD8  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B64  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 00C2                      __end_of_RF_RxDisable 1BB5  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1DF3  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C3D  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 00ED                     __size_of_setTemp_Main 00B2  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0077  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B40  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0023  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11DD  
                   _DlyOff_Initialization 1AA4                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1A8B  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0CE3                        __end_of_getLoad_OK 1ADD  
                   _Switch_Initialization 1B7C         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 1378                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DA6                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00CD  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3627 0021             _getMain_All_Error_Status$3628 0023  
                __end_of_getDimmer_LoadGO 1AE5                       _Load_Initialization 1A7C  
                               setLED@led 0022                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F4E                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F24                          ??_LedPointSelect 0020  
                                ___ftpack 08A3             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1378  
              __end_of_setRF_DimmerLights 1749            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1AED  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1A85  
                                __ptext11 0801                                  __ptext20 1D64  
                                __ptext12 1B1D                                  __ptext21 1A9F  
                                __ptext13 01F4                                  __ptext30 17A4  
                                __ptext22 1D79                                  __ptext14 1D11  
                                __ptext31 12FC                                  __ptext23 1A82  
                                __ptext15 10E8                                  __ptext40 0A97  
                                __ptext32 07D1                                  __ptext24 0E01  
                                __ptext16 1E84                                  __ptext41 0B70  
                                __ptext33 1F69                                  __ptext25 0BE8  
                                __ptext17 1CFD                                  __ptext50 1B70  
                                __ptext42 1F8D                                  __ptext34 09CB  
                                __ptext26 11A9                                  __ptext18 1B7C  
                                __ptext51 1FB2                                  __ptext43 1E2A  
                                __ptext35 071D                                  __ptext27 1CAE  
                                __ptext19 1AED                                  __ptext60 1C2B  
                                __ptext52 1A97                                  __ptext44 1D4F  
                                __ptext36 1C9B                                  __ptext28 0A30  
                                __ptext61 1B07                                  __ptext53 1A93  
                                __ptext45 1A9B                                  __ptext37 1BF6  
                                __ptext29 14A3                                  __ptext70 1ADD  
                                __ptext62 1B64                                  __ptext54 1DD9  
                                __ptext46 0802                                  __ptext38 1BE5  
                                __ptext71 10BB                                  __ptext63 1DF3  
                                __ptext55 1A8F                                  __ptext47 1091  
                                __ptext39 1BA6                                  __ptext80 11DD  
                                __ptext72 1E47                                  __ptext64 1B58  
                                __ptext56 1D3A                                  __ptext48 1E65  
                                __ptext81 1406                                  __ptext73 1213  
                                __ptext65 1A8B                                  __ptext57 1DA6  
                                __ptext49 1F46                                  __ptext90 1EC3  
                                __ptext82 1B34                                  __ptext74 1A7C  
                                __ptext66 1AB6                                  __ptext58 1A7F  
                                __ptext91 0B03                                  __ptext83 0641  
                                __ptext75 1E0E                                  __ptext67 004A  
                                __ptext59 1B12                                  __ptext92 163F  
                                __ptext84 1B28                                  __ptext76 1B4C  
                                __ptext68 1CE9                                  __ptext93 14F2  
                                __ptext85 1116                                  __ptext77 1378  
                                __ptext69 1AE5                                  __ptext94 0D6A  
                                __ptext86 1AFE                                  __ptext78 1B40  
                                __ptext95 16F0                                  __ptext87 1DBF  
                                __ptext79 1C19                                  __ptext96 0966  
                                __ptext88 055D                                  __ptext97 0CE3  
                                __ptext89 1C88                                  __ptext98 1AF5  
                                __ptext99 0EA5                                  __product 024E  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0023  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1C9B  
            __end_of_setDimmerLights_Main 0B70              __end_of_setDimmerLights_Line 1DA6  
            __end_of_setDimmerLights_SwOn 1800                              ??_setSw_Main 006B  
                  ??_setRF_TimeoutCleared 0020                             setLED@command 0021  
                           __size_of_main 005B                               _setRF_Learn 1D11  
                __end_of_CC2500_SIDLEMode 1A9F                setDimmerLights_Main@lights 006E  
             __end_of_DelayOffPointSelect 1CD5                CC2500_WriteCommand@command 0023  
                    setRF_Main@Receive_OK 00EE                 __size_of_setDimmerReClock 0008  
                 setDimmerLights_AdjOn@sw 0022                           _CC2500_ReadByte 1E2A  
                      _CC2500_InitPATable 1E65                  __end_of_setMemory_Modify 1CAE  
                      __end_of_setRF_Main 0EA5                               ??_getBuz_GO 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 00EA  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D4F  
                                main@argc 01E9                                  main@argv 01EB  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6287 0021  
                    _getSw_KeyStatus$6288 0022                           _CC2500_PowerRST 0802  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 1454  
                       ??_getPercentValue 005C                               _setLog_Code 11A9  
             __end_of_Flash_Memory_Unlock 1B07                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F46                        __end_of_setSw_Main 0366  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C9  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 1067  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 10E8                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 1176  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 1145  
             __end_of_setDimmerLights_Adj 1697                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A7F  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B34                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00CC                   __size_of_Exception_Main 00E4  
         __end_of_DelayOff_Initialization 1ACD       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1AD5                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 1544  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 1091  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD8  
                 __end_of_CC2500_ReadByte 1E47              __end_of_setSw_Initialization 1AF5  
                         _Timeout_Counter 1D79           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1BA6  
              __end_of_LED_Initialization 1B4C            __end_of_setTemp_Initialization 0802  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1A82  
                   __end_of_CC2500_RxData 0BE8                     __end_of_CC2500_TxData 0B03  
                   _setLoad_AH_AL_Restore 1E0E                   __end_of_CC2500_PowerRST 0846  
