

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Jan 05 11:51:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  0010                     	;# 
  2068  0011                     	;# 
  2069  0012                     	;# 
  2070  0015                     	;# 
  2071  0016                     	;# 
  2072  0016                     	;# 
  2073  0017                     	;# 
  2074  0018                     	;# 
  2075  0019                     	;# 
  2076  001A                     	;# 
  2077  001B                     	;# 
  2078  001C                     	;# 
  2079  008C                     	;# 
  2080  008D                     	;# 
  2081  008E                     	;# 
  2082  0090                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  010C                     	;# 
  2096  010D                     	;# 
  2097  010E                     	;# 
  2098  0116                     	;# 
  2099  0117                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0197                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019C                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020D                     	;# 
  2125  0210                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  0394                     	;# 
  2150  0395                     	;# 
  2151  0396                     	;# 
  2152  0FE4                     	;# 
  2153  0FE5                     	;# 
  2154  0FE6                     	;# 
  2155  0FE7                     	;# 
  2156  0FE8                     	;# 
  2157  0FE9                     	;# 
  2158  0FEA                     	;# 
  2159  0FEB                     	;# 
  2160  0FED                     	;# 
  2161  0FEE                     	;# 
  2162  0FEF                     	;# 
  2163                           
  2164                           	psect	idataBANK4
  2165  1F7B                     __pidataBANK4:	
  2166                           
  2167                           ;initializer for __product
  2168  1F7B  3463               	retlw	99
  2169  1F7C  3402               	retlw	2
  2170  1F7D  3400               	retlw	0
  2171  1F7E  3400               	retlw	0
  2172  1F7F  3400               	retlw	0
  2173  1F80  3400               	retlw	0
  2174  1F81  3400               	retlw	0
  2175  1F82  3400               	retlw	0
  2176  1F83  3400               	retlw	0
  2177  1F84  3400               	retlw	0
  2178  1F85  3400               	retlw	0
  2179  1F86  3400               	retlw	0
  2180  1F87  34FF               	retlw	255
  2181  1F88  34FF               	retlw	255
  2182  1F89  34FF               	retlw	255
  2183  1F8A  3400               	retlw	0
  2184  1F8B  3400               	retlw	0
  2185  1F8C  3400               	retlw	0
  2186  1F8D  3400               	retlw	0
  2187  1F8E  3400               	retlw	0
  2188  1F8F  3400               	retlw	0
  2189  1F90  3400               	retlw	0
  2190  1F91  3400               	retlw	0
  2191  1F92  3400               	retlw	0
  2192  1F93  3400               	retlw	0
  2193  1F94  3400               	retlw	0
  2194  1F95  3400               	retlw	0
  2195  1F96  3400               	retlw	0
  2196  1F97  3400               	retlw	0
  2197  1F98  3400               	retlw	0
  2198  1F99  3400               	retlw	0
  2199  1F9A  3400               	retlw	0
  2200                           
  2201                           	psect	stringtext
  2202  1000                     __pstringtext:	
  2203  1000                     _CC2500_registers_address:	
  2204  1000  3403               	retlw	3
  2205  1001  3416               	retlw	22
  2206  1002  3417               	retlw	23
  2207  1003  341E               	retlw	30
  2208  1004  341F               	retlw	31
  2209  1005  3420               	retlw	32
  2210  1006  342A               	retlw	42
  2211  1007  342B               	retlw	43
  2212  1008  340B               	retlw	11
  2213  1009  340C               	retlw	12
  2214  100A  340D               	retlw	13
  2215  100B  340E               	retlw	14
  2216  100C  340F               	retlw	15
  2217  100D  3410               	retlw	16
  2218  100E  3411               	retlw	17
  2219  100F  3412               	retlw	18
  2220  1010  3413               	retlw	19
  2221  1011  3414               	retlw	20
  2222  1012  340A               	retlw	10
  2223  1013  3415               	retlw	21
  2224  1014  3421               	retlw	33
  2225  1015  3422               	retlw	34
  2226  1016  3418               	retlw	24
  2227  1017  3419               	retlw	25
  2228  1018  341A               	retlw	26
  2229  1019  341B               	retlw	27
  2230  101A  341C               	retlw	28
  2231  101B  341D               	retlw	29
  2232  101C  3423               	retlw	35
  2233  101D  3424               	retlw	36
  2234  101E  3425               	retlw	37
  2235  101F  3426               	retlw	38
  2236  1020  3429               	retlw	41
  2237  1021  342C               	retlw	44
  2238  1022  342D               	retlw	45
  2239  1023  342E               	retlw	46
  2240  1024  3400               	retlw	0
  2241  1025  3401               	retlw	1
  2242  1026  3402               	retlw	2
  2243  1027  3407               	retlw	7
  2244  1028  3408               	retlw	8
  2245  1029  3409               	retlw	9
  2246  102A  3406               	retlw	6
  2247  102B  3404               	retlw	4
  2248  102C  3405               	retlw	5
  2249  102D  3427               	retlw	39
  2250  102E  3428               	retlw	40
  2251  102F                     __end_of_CC2500_registers_address:	
  2252  102F                     _CC2500_rfSettings:	
  2253  102F  3407               	retlw	7
  2254  1030  3407               	retlw	7
  2255  1031  3430               	retlw	48
  2256  1032  3487               	retlw	135
  2257  1033  346B               	retlw	107
  2258  1034  34F8               	retlw	248
  2259  1035  347F               	retlw	127
  2260  1036  343F               	retlw	63
  2261  1037  3409               	retlw	9
  2262  1038  3400               	retlw	0
  2263  1039  345C               	retlw	92
  2264  103A  34A7               	retlw	167
  2265  103B  3462               	retlw	98
  2266  103C  3486               	retlw	134
  2267  103D  3483               	retlw	131
  2268  103E  3403               	retlw	3
  2269  103F  3422               	retlw	34
  2270  1040  34F8               	retlw	248
  2271  1041  3400               	retlw	0
  2272  1042  3444               	retlw	68
  2273  1043  34B6               	retlw	182
  2274  1044  3410               	retlw	16
  2275  1045  3418               	retlw	24
  2276  1046  341D               	retlw	29
  2277  1047  341C               	retlw	28
  2278  1048  34C7               	retlw	199
  2279  1049  3400               	retlw	0
  2280  104A  34B2               	retlw	178
  2281  104B  34EA               	retlw	234
  2282  104C  340A               	retlw	10
  2283  104D  3400               	retlw	0
  2284  104E  3411               	retlw	17
  2285  104F  3459               	retlw	89
  2286  1050  3488               	retlw	136
  2287  1051  3431               	retlw	49
  2288  1052  340B               	retlw	11
  2289  1053  342F               	retlw	47
  2290  1054  342E               	retlw	46
  2291  1055  3406               	retlw	6
  2292  1056  3404               	retlw	4
  2293  1057  3405               	retlw	5
  2294  1058  3400               	retlw	0
  2295  1059  3430               	retlw	48
  2296  105A  34D3               	retlw	211
  2297  105B  3491               	retlw	145
  2298  105C  3441               	retlw	65
  2299  105D  3400               	retlw	0
  2300  105E                     __end_of_CC2500_rfSettings:	
  2301  105E                     _CC2500_patable_vaule:	
  2302  105E  34FE               	retlw	254
  2303  105F  34FE               	retlw	254
  2304  1060  34FE               	retlw	254
  2305  1061  34FE               	retlw	254
  2306  1062  34FE               	retlw	254
  2307  1063  34FE               	retlw	254
  2308  1064  34FE               	retlw	254
  2309  1065  34FE               	retlw	254
  2310  1066                     __end_of_CC2500_patable_vaule:	
  2311                           
  2312                           	psect	nvBANK0
  2313  006D                     __pnvBANK0:	
  2314  006D                     _product:	
  2315  006D                     	ds	1
  2316  000C                     _PORTA	set	12
  2317  000D                     _PORTB	set	13
  2318  000E                     _PORTC	set	14
  2319  0018                     _T1CON	set	24
  2320  0017                     _TMR1H	set	23
  2321  0016                     _TMR1L	set	22
  2322  005F                     _GIE	set	95
  2323  005B                     _IOCIE	set	91
  2324  0058                     _IOCIF	set	88
  2325  005E                     _PEIE	set	94
  2326  0060                     _RA0	set	96
  2327  0063                     _RA3	set	99
  2328  0064                     _RA4	set	100
  2329  0066                     _RA6	set	102
  2330  0067                     _RA7	set	103
  2331  0068                     _RB0	set	104
  2332  0069                     _RB1	set	105
  2333  006A                     _RB2	set	106
  2334  006B                     _RB3	set	107
  2335  006C                     _RB4	set	108
  2336  006D                     _RB5	set	109
  2337  0070                     _RC0	set	112
  2338  0071                     _RC1	set	113
  2339  0072                     _RC2	set	114
  2340  0074                     _RC4	set	116
  2341  0075                     _RC5	set	117
  2342  0077                     _RC7	set	119
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  1069                     _WPUB1	set	4201
  2375  0396                     _IOCBF	set	918
  2376  0395                     _IOCBN	set	917
  2377  0394                     _IOCBP	set	916
  2378  1CB2                     _IOCBF2	set	7346
  2379                           
  2380                           ; #config settings
  2381  0000                     
  2382                           	psect	cinit
  2383  0022                     start_initialization:	
  2384  0022                     __initialization:	
  2385                           
  2386                           ; Clear objects allocated to BITCOMMON
  2387  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2388                           
  2389                           ; Clear objects allocated to COMMON
  2390  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  3050               	movlw	80
  2398  0029  319A  22EA  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304E               	movlw	78
  2406  0031  319A  22EA  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  3046               	movlw	70
  2414  0039  319A  22EA  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  003C  3020               	movlw	low __pbssBANK4
  2418  003D  0084               	movwf	4
  2419  003E  3002               	movlw	high __pbssBANK4
  2420  003F  0085               	movwf	5
  2421  0040  3025               	movlw	37
  2422  0041  319A  22EA  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  0044  307B               	movlw	low __pidataBANK4
  2426  0045  0084               	movwf	4
  2427  0046  309F               	movlw	(high __pidataBANK4)| (0+128)
  2428  0047  0085               	movwf	5
  2429  0048  3045               	movlw	low __pdataBANK4
  2430  0049  0086               	movwf	6
  2431  004A  3002               	movlw	high __pdataBANK4
  2432  004B  0087               	movwf	7
  2433  004C  3020               	movlw	32
  2434  004D  319A  22E4         	fcall	init_ram
  2435  004F                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  004F                     __end_of__initialization:	
  2439  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0050  0020               	movlb	0
  2441  0051  3196  2E2B         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03D0                     __pbitbssCOMMON:	
  2445  03D0                     _Receive_OK:	
  2446  03D0                     	ds	1
  2447  03D1                     _Transceive_OK:	
  2448  03D1                     	ds	1
  2449                           
  2450                           	psect	bssCOMMON
  2451  007B                     __pbssCOMMON:	
  2452  007B                     _Sw:	
  2453  007B                     	ds	1
  2454                           
  2455                           	psect	bssBANK1
  2456  00A0                     __pbssBANK1:	
  2457  00A0                     _RF1:	
  2458  00A0                     	ds	14
  2459  00AE                     _Buz1:	
  2460  00AE                     	ds	12
  2461  00BA                     _Dimmer:	
  2462  00BA                     	ds	3
  2463  00BD                     _Timer1:	
  2464  00BD                     	ds	3
  2465  00C0                     _WDT:	
  2466  00C0                     	ds	2
  2467  00C2                     _CRC:	
  2468  00C2                     	ds	1
  2469  00C3                     _Cmd:	
  2470  00C3                     	ds	1
  2471  00C4                     _DelayOff:	
  2472  00C4                     	ds	1
  2473  00C5                     _DimmerIntr:	
  2474  00C5                     	ds	1
  2475  00C6                     _DimmerLights:	
  2476  00C6                     	ds	1
  2477  00C7                     _LED:	
  2478  00C7                     	ds	1
  2479  00C8                     _RSSI:	
  2480  00C8                     	ds	1
  2481  00C9                     _Rx_Length:	
  2482  00C9                     	ds	1
  2483  00CA                     _SPI0Buffer:	
  2484  00CA                     	ds	1
  2485  00CB                     _SwDetect:	
  2486  00CB                     	ds	1
  2487  00CC                     _Tx_Length:	
  2488  00CC                     	ds	1
  2489  00CD                     _r_address:	
  2490  00CD                     	ds	1
  2491  00CE                     _r_data:	
  2492  00CE                     	ds	1
  2493  00CF                     _s_data:	
  2494  00CF                     	ds	1
  2495  00D0                     _Temp:	
  2496  00D0                     	ds	18
  2497  00E2                     _DimmerIntr1:	
  2498  00E2                     	ds	7
  2499  00E9                     _DimmerIntr2:	
  2500  00E9                     	ds	7
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _myMain:	
  2505  0120                     	ds	14
  2506  012E                     _RF_Count:	
  2507  012E                     	ds	2
  2508  0130                     _Load:	
  2509  0130                     	ds	46
  2510  015E                     _DimmerLights1:	
  2511  015E                     	ds	8
  2512  0166                     _DimmerLights2:	
  2513  0166                     	ds	8
  2514                           
  2515                           	psect	bssBANK3
  2516  01A0                     __pbssBANK3:	
  2517  01A0                     _RF_Data:	
  2518  01A0                     	ds	30
  2519  01BE                     _Sw1:	
  2520  01BE                     	ds	9
  2521  01C7                     _Sw2:	
  2522  01C7                     	ds	9
  2523  01D0                     _DlySw1:	
  2524  01D0                     	ds	5
  2525  01D5                     _DlySw2:	
  2526  01D5                     	ds	5
  2527  01DA                     _VarErrLED:	
  2528  01DA                     	ds	4
  2529  01DE                     _VarLED1:	
  2530  01DE                     	ds	4
  2531  01E2                     _VarLED2:	
  2532  01E2                     	ds	4
  2533                           
  2534                           	psect	bssBANK4
  2535  0220                     __pbssBANK4:	
  2536  0220                     _Memory:	
  2537  0220                     	ds	37
  2538                           
  2539                           	psect	dataBANK4
  2540  0245                     __pdataBANK4:	
  2541  0245                     __product:	
  2542  0245                     	ds	32
  2543                           
  2544                           	psect	clrtext
  2545  1AEA                     clear_ram0:	
  2546                           ;	Called with FSR0 containing the base address, and
  2547                           ;	WREG with the size to clear
  2548                           
  2549  1AEA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2550  1AEB                     clrloop0:	
  2551  1AEB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2552  1AEC  3101               	addfsr 0,1
  2553  1AED  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2554  1AEE  2AEB               	goto	clrloop0	;have we reached the end yet?
  2555  1AEF  3400               	retlw	0	;all done for this memory range, return
  2556                           
  2557                           	psect	inittext
  2558  1AE4                     init_ram:	
  2559  1AE4  00FE               	movwf	126
  2560  1AE5                     initloop:	
  2561  1AE5  0012               	moviw fsr0++
  2562  1AE6  001E               	movwi fsr1++
  2563  1AE7  0BFE               	decfsz	126,f
  2564  1AE8  2AE5               	goto	initloop
  2565  1AE9  3400               	retlw	0
  2566                           
  2567                           	psect	cstackBANK3
  2568  01E6                     __pcstackBANK3:	
  2569  01E6                     ?_main:	
  2570  01E6                     main@argc:	
  2571                           ; 2 bytes @ 0x0
  2572                           
  2573                           
  2574                           ; 2 bytes @ 0x0
  2575  01E6                     	ds	2
  2576  01E8                     main@argv:	
  2577                           
  2578                           ; 2 bytes @ 0x2
  2579  01E8                     	ds	2
  2580                           
  2581                           	psect	cstackCOMMON
  2582  0070                     __pcstackCOMMON:	
  2583  0070                     ?_CC2500_WriteCommand:	
  2584  0070                     ?_RF_Timeout_Counter:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setRF_TimeoutCleared:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_WriteByte:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_ReadStatus:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ReadByte:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_PowerRST:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_InitSetREG:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_InitPATable:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ClearTXFIFO:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ClearRXFIFO:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_FrequencyCabr:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_SIDLEMode:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_DlyOff_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_DlyOff_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_SwOn:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setDimmerLights_SwOff:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setDimmerLights_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setDimmerLights_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_Line:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setTxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRF_TransceiveGO:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setLED_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setLED_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Fosc_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_IO_Set:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR1_Set:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_ADC_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_IOC_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_WDT_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_IOC_ISR:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ??_IOC_ISR:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_TMR1_ISR:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Timeout_Counter:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_set_TimeoutCleared:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_Flash_Memory_Write:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Modify:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_WDT_Clearing:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_myMain_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Temp_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Load_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Switch_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_RF_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getLoad_AD:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_getTemp_AD:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_my_MainTimer:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Temp_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Load_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Switch_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_RF_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Exception_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setLoad_AH_AL_Restore:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setTemp_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setTemp_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setRF_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setRF_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_RF_RxDisable:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_getRxData:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setLog_Code:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setControl_Lights_Table:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setRFSW_Control:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setRFSW_AdjControl:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setSw_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setSw_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_Buzzer_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_Buzzer_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_TxData:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_CC2500_RxData:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_CC2500_PowerOnInitial:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DelayOffPointSelect:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DelayOff_Initialization:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DelayOff_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerIntr_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerLights_SelectPointer:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_DimmerLights_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_DimmingOn:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLights_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_LedPointSelect:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_LED_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_LED_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_Mcu_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_ISR:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Flash_Memory_Main:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Flash_Memory_Unlock:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Flash_Memory_Erasing:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_setMemory_Modify:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setMemory_LoopSave:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_WDT_Main:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_setRF_Learn:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_TouchPower:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_SwPointSelect:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_getDimmerLights_Status:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_getLoad_OK:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getMain_All_Error_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getMain_All_LightsStatus:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Allow_Condition:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_PercentToValue:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_ValueToPercent:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getCmd_Status:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_Flash_Memory_Read:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getRF_KeyStatus:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getSw_KeyStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDelayOff_GO:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerIntr_DimmingValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDimmerLights_Line:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmer_LoadGO:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmer_Load_Status:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getMain_Lights_Count:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     setDimmerLights_Initialization@lights:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x0
  2940  0070                     	ds	1
  2941  0071                     ??_TMR1_ISR:	
  2942  0071                     ??_ISR:	
  2943                           ; 0 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 0 bytes @ 0x1
  2947  0071                     	ds	1
  2948  0072                     ??_RF_Timeout_Counter:	
  2949  0072                     ??_setRF_TimeoutCleared:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0072                     ??_CC2500_WriteByte:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955  0072                     ??_CC2500_ReadByte:	
  2956                           ; 0 bytes @ 0x2
  2957                           
  2958  0072                     ?_DelayTime_1us:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0072                     ??_setDimmerLights_Initialization:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0072                     ??_getLoad_OK:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0072                     ??_getMain_All_Error_Status:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     ??_getMain_All_LightsStatus:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0072                     ??_setDimmerLights_Line:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0072                     ??_getCmd_Status:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0072                     ?_setCmd_Status:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0072                     ??_setTxData:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0072                     ??_setRF_TransceiveGO:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0072                     ??_Fosc_Set:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0072                     ??_IO_Set:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0072                     ??_TMR1_Set:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ??_ADC_Set:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_IOC_Set:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ??_WDT_Set:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_Timeout_Counter:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_set_TimeoutCleared:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_Flash_Memory_Read:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ?_setMemory_Data:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_Flash_Memory_Write:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ??_WDT_Clearing:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ??_myMain_Initialization:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_Temp_Initialization:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_setLoad_AH_AL_Restore:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ??_setTemp_Initialization:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_setRF_Initialization:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_getRF_KeyStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_getSw_KeyStatus:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_Buzzer_Initialization:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_Buzzer_Main:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_DelayOffPointSelect:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_DimmerIntr_Initialization:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ?_setDimmerIntr_ControlStatus:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ?_setDimmerIntr_DimmingValue:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_getDimmerIntr_DimmingValue:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ?_setDimmerIntr_Dimming_RF:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ??_DimmerLights_SelectPointer:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ??_getDimmerLights_Line:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_getDimmer_LoadGO:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ??_getDimmer_Load_Status:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_LedPointSelect:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ??_Flash_Memory_Unlock:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_Flash_Memory_Erasing:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ??_setMemory_Modify:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_setMemory_LoopSave:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ??_WDT_Main:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ??_getMain_Lights_Count:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ??_setRF_Learn:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ??_TouchPower:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ??_SwPointSelect:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ?___bmul:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ?_getBuz_GO:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0072                     ?_getAD:	
  3124                           ; 2 bytes @ 0x2
  3125                           
  3126  0072                     ?___wmul:	
  3127                           ; 2 bytes @ 0x2
  3128                           
  3129  0072                     ?___awdiv:	
  3130                           ; 2 bytes @ 0x2
  3131                           
  3132  0072                     ?___lwdiv:	
  3133                           ; 2 bytes @ 0x2
  3134                           
  3135  0072                     ?___ftpack:	
  3136                           ; 2 bytes @ 0x2
  3137                           
  3138  0072                     setDimmerIntr_ControlStatus@command:	
  3139                           ; 3 bytes @ 0x2
  3140                           
  3141  0072                     setDimmerIntr_DimmingValue@value:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0072                     setDimmerIntr_Dimming_Sw@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0072                     setDimmerIntr_Dimming_RF@command:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0072                     setDimmerLights_Line@lights:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0072                     getDimmer_LoadGO@loadgo:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0072                     getDimmer_Load_Status@status:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0072                     getAD@adcon1:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0072                     setMemory_Data@data:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0072                     getMain_All_LightsStatus@status:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0072                     getMain_Lights_Count@count:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     setCmd_Status@cmd:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     getCmd_Status@number:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0072                     getLoad_OK@ok:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0072                     ___bmul@multiplicand:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0072                     DelayTime_1us@count:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0072                     ___wmul@multiplier:	
  3187                           ; 2 bytes @ 0x2
  3188                           
  3189  0072                     ___awdiv@divisor:	
  3190                           ; 2 bytes @ 0x2
  3191                           
  3192  0072                     ___lwdiv@divisor:	
  3193                           ; 2 bytes @ 0x2
  3194                           
  3195  0072                     ___ftpack@arg:	
  3196                           ; 2 bytes @ 0x2
  3197                           
  3198                           
  3199                           ; 3 bytes @ 0x2
  3200  0072                     	ds	1
  3201  0073                     ??_getDimmerLights_Allow_Condition:	
  3202  0073                     ??_setCmd_Status:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0073                     ??_setMemory_Data:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0073                     ??_RF_Initialization:	
  3209                           ; 0 bytes @ 0x3
  3210                           
  3211  0073                     ??_setDimmerIntr_ControlStatus:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0073                     ??_setDimmerIntr_DimmingValue:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0073                     ??_setDimmerIntr_Dimming_RF:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0073                     ??_DimmerLights_Initialization:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0073                     ??_Mcu_Initialization:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0073                     ??___bmul:	
  3230                           ; 0 bytes @ 0x3
  3231                           
  3232  0073                     CC2500_WriteByte@loop_a:	
  3233                           ; 0 bytes @ 0x3
  3234                           
  3235  0073                     CC2500_ReadByte@loop_b:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0073                     DelayOffPointSelect@sw:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0073                     getDimmerIntr_DimmingValue@value:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2165:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0073                     DimmerLights_SelectPointer@lights:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0073                     getDimmerLights_Line@line:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0073                     LedPointSelect@led:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0073                     Flash_Memory_Read@i:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0073                     Flash_Memory_Write@i:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0073                     setMemory_Modify@command:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0073                     setMemory_LoopSave@command:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0073                     getMain_Lights_Count@status1:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0073                     getCmd_Status@cmd:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0073                     setLoad_AH_AL_Restore@i:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0073                     setRF_Learn@command:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0073                     getRF_KeyStatus@key:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     setRF_TransceiveGO@command:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     SwPointSelect@sw:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     _getSw_KeyStatus$6284:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     _getMain_All_Error_Status$3588:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295                           
  3296                           ; 2 bytes @ 0x3
  3297  0073                     	ds	1
  3298  0074                     ??_CC2500_WriteCommand:	
  3299  0074                     ??_CC2500_ReadStatus:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0074                     ??_DelayTime_1us:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0074                     ?_CC2500_WriteREG:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0074                     ??_DlyOff_Initialization:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0074                     ??_getDimmerLights_Status:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0074                     ??_setDimmerLights_SwOff:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0074                     ?_setLED:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0074                     ??_setLED_Main:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0074                     ??_Load_Initialization:	
  3324                           ; 0 bytes @ 0x4
  3325                           
  3326  0074                     ??_getBuz_GO:	
  3327                           ; 0 bytes @ 0x4
  3328                           
  3329  0074                     ??_getDelayOff_GO:	
  3330                           ; 0 bytes @ 0x4
  3331                           
  3332  0074                     ??_setDimmerLights_DimmingOn:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0074                     ?_setDimmerLights_DimmingRun:	
  3336                           ; 0 bytes @ 0x4
  3337                           
  3338  0074                     CC2500_WriteREG@value:	
  3339                           ; 0 bytes @ 0x4
  3340                           
  3341  0074                     DlyOff_Initialization@sw:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0074                     getDelayOff_GO@sw:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0074                     setDimmerIntr_ControlStatus@lights:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0074                     setDimmerIntr_DimmingValue@lights:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0074                     getDimmerIntr_DimmingValue@lights:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359  0074                     setDimmerIntr_Dimming_RF@lights:	
  3360                           ; 1 bytes @ 0x4
  3361                           
  3362  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2166:	
  3363                           ; 1 bytes @ 0x4
  3364                           
  3365  0074                     setDimmerLights_SwOff@sw:	
  3366                           ; 1 bytes @ 0x4
  3367                           
  3368  0074                     setDimmerLights_DimmingOn@sw:	
  3369                           ; 1 bytes @ 0x4
  3370                           
  3371  0074                     _getDimmerLights_Allow_Condition$2298:	
  3372                           ; 1 bytes @ 0x4
  3373                           
  3374  0074                     getDimmerLights_Status@lights:	
  3375                           ; 1 bytes @ 0x4
  3376                           
  3377  0074                     setDimmerLights_DimmingRun@command:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380  0074                     setLED@command:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383  0074                     Flash_Memory_Read@address:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386  0074                     setMemory_Data@address:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389  0074                     getMain_Lights_Count@status2:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392  0074                     setCmd_Status@number:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395  0074                     _getRF_KeyStatus$5283:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398  0074                     _getSw_KeyStatus$6285:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0074                     ___bmul@product:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0074                     DelayTime_1us@i:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0074                     ___wmul@multiplicand:	
  3408                           ; 2 bytes @ 0x4
  3409                           
  3410  0074                     ___awdiv@dividend:	
  3411                           ; 2 bytes @ 0x4
  3412                           
  3413  0074                     ___lwdiv@dividend:	
  3414                           ; 2 bytes @ 0x4
  3415                           
  3416                           
  3417                           ; 2 bytes @ 0x4
  3418  0074                     	ds	1
  3419  0075                     ??_CC2500_WriteREG:	
  3420  0075                     ??_setLED:	
  3421                           ; 0 bytes @ 0x5
  3422                           
  3423  0075                     ??_DelayOff_Initialization:	
  3424                           ; 0 bytes @ 0x5
  3425                           
  3426  0075                     ??_setDimmerLights_DimmingRun:	
  3427                           ; 0 bytes @ 0x5
  3428                           
  3429  0075                     ??_getAD:	
  3430                           ; 0 bytes @ 0x5
  3431                           
  3432  0075                     CC2500_WriteCommand@command:	
  3433                           ; 0 bytes @ 0x5
  3434                           
  3435  0075                     CC2500_ReadStatus@status_addr:	
  3436                           ; 1 bytes @ 0x5
  3437                           
  3438  0075                     getDelayOff_GO@go:	
  3439                           ; 1 bytes @ 0x5
  3440                           
  3441  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3442                           ; 1 bytes @ 0x5
  3443                           
  3444  0075                     _getDimmerLights_Allow_Condition$2299:	
  3445                           ; 1 bytes @ 0x5
  3446                           
  3447  0075                     getDimmerLights_Status@status:	
  3448                           ; 1 bytes @ 0x5
  3449                           
  3450  0075                     setLED@led:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453  0075                     getAD@adcon0:	
  3454                           ; 1 bytes @ 0x5
  3455                           
  3456  0075                     Flash_Memory_Read@ret:	
  3457                           ; 1 bytes @ 0x5
  3458                           
  3459  0075                     getSw_KeyStatus@status:	
  3460                           ; 1 bytes @ 0x5
  3461                           
  3462  0075                     ___bmul@multiplier:	
  3463                           ; 1 bytes @ 0x5
  3464                           
  3465  0075                     ___ftpack@exp:	
  3466                           ; 1 bytes @ 0x5
  3467                           
  3468  0075                     _getMain_All_Error_Status$3589:	
  3469                           ; 1 bytes @ 0x5
  3470                           
  3471                           
  3472                           ; 2 bytes @ 0x5
  3473  0075                     	ds	1
  3474  0076                     ??_CC2500_ClearTXFIFO:	
  3475  0076                     ??_CC2500_ClearRXFIFO:	
  3476                           ; 0 bytes @ 0x6
  3477                           
  3478  0076                     ??_CC2500_SIDLEMode:	
  3479                           ; 0 bytes @ 0x6
  3480                           
  3481  0076                     ??_setLED_Initialization:	
  3482                           ; 0 bytes @ 0x6
  3483                           
  3484  0076                     ??_Flash_Memory_Modify:	
  3485                           ; 0 bytes @ 0x6
  3486                           
  3487  0076                     ??_getLoad_AD:	
  3488                           ; 0 bytes @ 0x6
  3489                           
  3490  0076                     ??_getTemp_AD:	
  3491                           ; 0 bytes @ 0x6
  3492                           
  3493  0076                     ??_RF_RxDisable:	
  3494                           ; 0 bytes @ 0x6
  3495                           
  3496  0076                     ??_setSw_Initialization:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0076                     ??_CC2500_TxData:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0076                     ??_CC2500_RxData:	
  3503                           ; 0 bytes @ 0x6
  3504                           
  3505  0076                     ??___wmul:	
  3506                           ; 0 bytes @ 0x6
  3507                           
  3508  0076                     ??___awdiv:	
  3509                           ; 0 bytes @ 0x6
  3510                           
  3511  0076                     ??___lwdiv:	
  3512                           ; 0 bytes @ 0x6
  3513                           
  3514  0076                     CC2500_WriteREG@w_addr:	
  3515                           ; 0 bytes @ 0x6
  3516                           
  3517  0076                     _getDimmerLights_Allow_Condition$2300:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0076                     setDimmerLights_DimmingRun@lights:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523  0076                     setLED_Initialization@led:	
  3524                           ; 1 bytes @ 0x6
  3525                           
  3526  0076                     setLED_Main@led:	
  3527                           ; 1 bytes @ 0x6
  3528                           
  3529  0076                     setSw_Initialization@sw:	
  3530                           ; 1 bytes @ 0x6
  3531                           
  3532  0076                     getSw_KeyStatus@sw:	
  3533                           ; 1 bytes @ 0x6
  3534                           
  3535  0076                     ___ftpack@sign:	
  3536                           ; 1 bytes @ 0x6
  3537                           
  3538  0076                     getBuz_GO@i:	
  3539                           ; 1 bytes @ 0x6
  3540                           
  3541  0076                     DelayTime_1us@j:	
  3542                           ; 2 bytes @ 0x6
  3543                           
  3544  0076                     ___wmul@product:	
  3545                           ; 2 bytes @ 0x6
  3546                           
  3547                           
  3548                           ; 2 bytes @ 0x6
  3549  0076                     	ds	1
  3550  0077                     ??_CC2500_InitSetREG:	
  3551  0077                     ??_CC2500_InitPATable:	
  3552                           ; 0 bytes @ 0x7
  3553                           
  3554  0077                     ??_Switch_Initialization:	
  3555                           ; 0 bytes @ 0x7
  3556                           
  3557  0077                     ??___ftpack:	
  3558                           ; 0 bytes @ 0x7
  3559                           
  3560  0077                     ??_setBuz:	
  3561                           ; 0 bytes @ 0x7
  3562                           
  3563  0077                     ??_LED_Initialization:	
  3564                           ; 0 bytes @ 0x7
  3565                           
  3566  0077                     ??_LED_Main:	
  3567                           ; 0 bytes @ 0x7
  3568                           
  3569  0077                     CC2500_TxData@loop_e:	
  3570                           ; 0 bytes @ 0x7
  3571                           
  3572  0077                     CC2500_RxData@loop_f:	
  3573                           ; 1 bytes @ 0x7
  3574                           
  3575  0077                     getDimmerLights_Allow_Condition@lights:	
  3576                           ; 1 bytes @ 0x7
  3577                           
  3578  0077                     Flash_Memory_Modify@i:	
  3579                           ; 1 bytes @ 0x7
  3580                           
  3581  0077                     getMain_All_Error_Status@command:	
  3582                           ; 1 bytes @ 0x7
  3583                           
  3584  0077                     getTemp_AD@channel:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587  0077                     ___lwdiv@quotient:	
  3588                           ; 1 bytes @ 0x7
  3589                           
  3590                           
  3591                           ; 2 bytes @ 0x7
  3592  0077                     	ds	1
  3593  0078                     ??_CC2500_PowerRST:	
  3594  0078                     ??_CC2500_FrequencyCabr:	
  3595                           ; 0 bytes @ 0x8
  3596                           
  3597  0078                     ??_Flash_Memory_Main:	
  3598                           ; 0 bytes @ 0x8
  3599                           
  3600  0078                     setBuz@count:	
  3601                           ; 0 bytes @ 0x8
  3602                           
  3603  0078                     CC2500_InitPATable@temp:	
  3604                           ; 1 bytes @ 0x8
  3605                           
  3606  0078                     getDimmerLights_Allow_Condition@allow:	
  3607                           ; 1 bytes @ 0x8
  3608                           
  3609  0078                     getMain_All_Error_Status@status:	
  3610                           ; 1 bytes @ 0x8
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x8
  3614  0078                     	ds	1
  3615  0079                     ??_setDimmerLights_SwOn:	
  3616  0079                     ??_my_MainTimer:	
  3617                           ; 0 bytes @ 0x9
  3618                           
  3619  0079                     ??_Exception_Main:	
  3620                           ; 0 bytes @ 0x9
  3621                           
  3622  0079                     CC2500_InitPATable@loop_d:	
  3623                           ; 0 bytes @ 0x9
  3624                           
  3625  0079                     ___lwdiv@counter:	
  3626                           ; 1 bytes @ 0x9
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x9
  3630  0079                     	ds	1
  3631  007A                     ??_setDimmerLights_Main:	
  3632  007A                     ??_Temp_Main:	
  3633                           ; 0 bytes @ 0xA
  3634                           
  3635  007A                     ??_Switch_Main:	
  3636                           ; 0 bytes @ 0xA
  3637                           
  3638  007A                     ??_RF_Main:	
  3639                           ; 0 bytes @ 0xA
  3640                           
  3641  007A                     ??_setControl_Lights_Table:	
  3642                           ; 0 bytes @ 0xA
  3643                           
  3644  007A                     ??_CC2500_PowerOnInitial:	
  3645                           ; 0 bytes @ 0xA
  3646                           
  3647  007A                     ??_DelayOff_Main:	
  3648                           ; 0 bytes @ 0xA
  3649                           
  3650  007A                     ??_DimmerLights_Main:	
  3651                           ; 0 bytes @ 0xA
  3652                           
  3653  007A                     ??_main:	
  3654                           ; 0 bytes @ 0xA
  3655                           
  3656  007A                     ??___ftneg:	
  3657                           ; 0 bytes @ 0xA
  3658                           
  3659                           
  3660                           	psect	cstackBANK0
  3661  0020                     __pcstackBANK0:	
  3662                           ; 0 bytes @ 0xA
  3663                           
  3664  0020                     ??_Load_Main:	
  3665  0020                     ?___awtoft:	
  3666                           ; 0 bytes @ 0x0
  3667                           
  3668  0020                     CC2500_InitSetREG@temp1:	
  3669                           ; 3 bytes @ 0x0
  3670                           
  3671  0020                     getLoad_AD@channel:	
  3672                           ; 1 bytes @ 0x0
  3673                           
  3674  0020                     ___awdiv@counter:	
  3675                           ; 1 bytes @ 0x0
  3676                           
  3677  0020                     ___awtoft@c:	
  3678                           ; 1 bytes @ 0x0
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x0
  3682  0020                     	ds	1
  3683  0021                     CC2500_InitSetREG@temp2:	
  3684  0021                     getLoad_AD@k:	
  3685                           ; 1 bytes @ 0x1
  3686                           
  3687  0021                     ___awdiv@sign:	
  3688                           ; 1 bytes @ 0x1
  3689                           
  3690                           
  3691                           ; 1 bytes @ 0x1
  3692  0021                     	ds	1
  3693  0022                     CC2500_InitSetREG@loop_c:	
  3694  0022                     getLoad_AD@j:	
  3695                           ; 1 bytes @ 0x2
  3696                           
  3697  0022                     Load_Main@error:	
  3698                           ; 1 bytes @ 0x2
  3699                           
  3700  0022                     ___awdiv@quotient:	
  3701                           ; 1 bytes @ 0x2
  3702                           
  3703                           
  3704                           ; 2 bytes @ 0x2
  3705  0022                     	ds	1
  3706  0023                     ??___awtoft:	
  3707  0023                     getLoad_AD@i:	
  3708                           ; 0 bytes @ 0x3
  3709                           
  3710  0023                     Load_Main@Load_Status:	
  3711                           ; 1 bytes @ 0x3
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x3
  3715  0023                     	ds	1
  3716  0024                     ?_setBuz:	
  3717  0024                     setBuz@time:	
  3718                           ; 0 bytes @ 0x4
  3719                           
  3720  0024                     Load_Main@i:	
  3721                           ; 2 bytes @ 0x4
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x4
  3725  0024                     	ds	1
  3726  0025                     ___awtoft@sign:	
  3727                           
  3728                           ; 1 bytes @ 0x5
  3729  0025                     	ds	1
  3730  0026                     ?___ftdiv:	
  3731  0026                     ?___ftmul:	
  3732                           ; 3 bytes @ 0x6
  3733                           
  3734  0026                     _setDimmerLights_SwOn$2241:	
  3735                           ; 3 bytes @ 0x6
  3736                           
  3737  0026                     Exception_Main@count:	
  3738                           ; 1 bytes @ 0x6
  3739                           
  3740  0026                     ___ftdiv@f2:	
  3741                           ; 1 bytes @ 0x6
  3742                           
  3743  0026                     ___ftmul@f1:	
  3744                           ; 3 bytes @ 0x6
  3745                           
  3746                           
  3747                           ; 3 bytes @ 0x6
  3748  0026                     	ds	1
  3749  0027                     _setDimmerLights_SwOn$2250:	
  3750  0027                     Exception_Main@error:	
  3751                           ; 1 bytes @ 0x7
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x7
  3755  0027                     	ds	1
  3756  0028                     setDimmerLights_SwOn@idle:	
  3757  0028                     Exception_Main@i:	
  3758                           ; 1 bytes @ 0x8
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x8
  3762  0028                     	ds	1
  3763  0029                     setDimmerLights_SwOn@sw:	
  3764  0029                     ___ftdiv@f1:	
  3765                           ; 1 bytes @ 0x9
  3766                           
  3767  0029                     ___ftmul@f2:	
  3768                           ; 3 bytes @ 0x9
  3769                           
  3770                           
  3771                           ; 3 bytes @ 0x9
  3772  0029                     	ds	1
  3773  002A                     ??_setSw_Main:	
  3774  002A                     Exception_Main@i_3600:	
  3775                           ; 0 bytes @ 0xA
  3776                           
  3777                           
  3778                           ; 2 bytes @ 0xA
  3779  002A                     	ds	2
  3780  002C                     ??___ftdiv:	
  3781  002C                     ??___ftmul:	
  3782                           ; 0 bytes @ 0xC
  3783                           
  3784  002C                     Exception_Main@lights:	
  3785                           ; 0 bytes @ 0xC
  3786                           
  3787  002C                     setSw_Main@sw:	
  3788                           ; 1 bytes @ 0xC
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0xC
  3792  002C                     	ds	4
  3793  0030                     ___ftdiv@cntr:	
  3794  0030                     ___ftmul@exp:	
  3795                           ; 1 bytes @ 0x10
  3796                           
  3797                           
  3798                           ; 1 bytes @ 0x10
  3799  0030                     	ds	1
  3800  0031                     ___ftdiv@f3:	
  3801  0031                     ___ftmul@f3_as_product:	
  3802                           ; 3 bytes @ 0x11
  3803                           
  3804                           
  3805                           ; 3 bytes @ 0x11
  3806  0031                     	ds	3
  3807  0034                     ___ftdiv@exp:	
  3808  0034                     ___ftmul@cntr:	
  3809                           ; 1 bytes @ 0x14
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0x14
  3813  0034                     	ds	1
  3814  0035                     ___ftdiv@sign:	
  3815  0035                     ___ftmul@sign:	
  3816                           ; 1 bytes @ 0x15
  3817                           
  3818                           
  3819                           ; 1 bytes @ 0x15
  3820  0035                     	ds	1
  3821  0036                     ?___ftneg:	
  3822  0036                     ___ftneg@f1:	
  3823                           ; 3 bytes @ 0x16
  3824                           
  3825                           
  3826                           ; 3 bytes @ 0x16
  3827  0036                     	ds	3
  3828  0039                     ?___ftadd:	
  3829  0039                     ___ftadd@f1:	
  3830                           ; 3 bytes @ 0x19
  3831                           
  3832                           
  3833                           ; 3 bytes @ 0x19
  3834  0039                     	ds	3
  3835  003C                     ___ftadd@f2:	
  3836                           
  3837                           ; 3 bytes @ 0x1C
  3838  003C                     	ds	3
  3839  003F                     ??___ftadd:	
  3840                           
  3841                           ; 0 bytes @ 0x1F
  3842  003F                     	ds	4
  3843  0043                     ___ftadd@sign:	
  3844                           
  3845                           ; 1 bytes @ 0x23
  3846  0043                     	ds	1
  3847  0044                     ___ftadd@exp2:	
  3848                           
  3849                           ; 1 bytes @ 0x24
  3850  0044                     	ds	1
  3851  0045                     ___ftadd@exp1:	
  3852                           
  3853                           ; 1 bytes @ 0x25
  3854  0045                     	ds	1
  3855  0046                     ?___fttol:	
  3856  0046                     ___fttol@f1:	
  3857                           ; 4 bytes @ 0x26
  3858                           
  3859                           
  3860                           ; 3 bytes @ 0x26
  3861  0046                     	ds	4
  3862  004A                     ??___fttol:	
  3863                           
  3864                           ; 0 bytes @ 0x2A
  3865  004A                     	ds	4
  3866  004E                     ___fttol@sign1:	
  3867                           
  3868                           ; 1 bytes @ 0x2E
  3869  004E                     	ds	1
  3870  004F                     ___fttol@lval:	
  3871                           
  3872                           ; 4 bytes @ 0x2F
  3873  004F                     	ds	4
  3874  0053                     ___fttol@exp1:	
  3875                           
  3876                           ; 1 bytes @ 0x33
  3877  0053                     	ds	1
  3878  0054                     ??_getDimmerLights_PercentToValue:	
  3879  0054                     ??_getDimmerLights_ValueToPercent:	
  3880                           ; 0 bytes @ 0x34
  3881                           
  3882                           
  3883                           ; 0 bytes @ 0x34
  3884  0054                     	ds	2
  3885  0056                     getDimmerLights_PercentToValue@value:	
  3886  0056                     getDimmerLights_ValueToPercent@value:	
  3887                           ; 1 bytes @ 0x36
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0x36
  3891  0056                     	ds	1
  3892  0057                     getDimmerLights_PercentToValue@i:	
  3893  0057                     getDimmerLights_ValueToPercent@i:	
  3894                           ; 3 bytes @ 0x37
  3895                           
  3896                           
  3897                           ; 3 bytes @ 0x37
  3898  0057                     	ds	3
  3899  005A                     ?_setProductData:	
  3900  005A                     ?_setDimmerIntr_MaxmumValue:	
  3901                           ; 0 bytes @ 0x3A
  3902                           
  3903  005A                     ??_Flash_Memory_Initialization:	
  3904                           ; 0 bytes @ 0x3A
  3905                           
  3906  005A                     setDimmerIntr_MaxmumValue@value:	
  3907                           ; 0 bytes @ 0x3A
  3908                           
  3909  005A                     setProductData@value:	
  3910                           ; 1 bytes @ 0x3A
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x3A
  3914  005A                     	ds	1
  3915  005B                     ??_setProductData:	
  3916  005B                     ??_setDimmerIntr_MaxmumValue:	
  3917                           ; 0 bytes @ 0x3B
  3918                           
  3919  005B                     Flash_Memory_Initialization@i:	
  3920                           ; 0 bytes @ 0x3B
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0x3B
  3924  005B                     	ds	1
  3925  005C                     setDimmerIntr_MaxmumValue@lights:	
  3926                           
  3927                           ; 1 bytes @ 0x3C
  3928  005C                     	ds	1
  3929  005D                     setProductData@address:	
  3930                           
  3931                           ; 1 bytes @ 0x3D
  3932  005D                     	ds	1
  3933  005E                     ??_DlyOff_Main:	
  3934  005E                     ?_setRF_DimmerLights:	
  3935                           ; 0 bytes @ 0x3E
  3936                           
  3937  005E                     ??_setTemp_Main:	
  3938                           ; 0 bytes @ 0x3E
  3939                           
  3940  005E                     ??_setLog_Code:	
  3941                           ; 0 bytes @ 0x3E
  3942                           
  3943  005E                     ??_setRFSW_AdjControl:	
  3944                           ; 0 bytes @ 0x3E
  3945                           
  3946  005E                     ?_setDelayOff_GO:	
  3947                           ; 0 bytes @ 0x3E
  3948                           
  3949  005E                     setDelayOff_GO@command:	
  3950                           ; 0 bytes @ 0x3E
  3951                           
  3952  005E                     setRF_DimmerLights@on:	
  3953                           ; 1 bytes @ 0x3E
  3954                           
  3955                           
  3956                           ; 1 bytes @ 0x3E
  3957  005E                     	ds	1
  3958  005F                     ??_setRF_DimmerLights:	
  3959  005F                     setDelayOff_GO@value:	
  3960                           ; 0 bytes @ 0x3F
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x3F
  3964  005F                     	ds	1
  3965  0060                     ??_setDelayOff_GO:	
  3966  0060                     DlyOff_Main@sw:	
  3967                           ; 0 bytes @ 0x40
  3968                           
  3969  0060                     setTemp_Main@error:	
  3970                           ; 1 bytes @ 0x40
  3971                           
  3972  0060                     setRFSW_AdjControl@status:	
  3973                           ; 1 bytes @ 0x40
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x40
  3977  0060                     	ds	1
  3978  0061                     setRFSW_AdjControl@sw:	
  3979  0061                     setRF_DimmerLights@status:	
  3980                           ; 1 bytes @ 0x41
  3981                           
  3982                           
  3983                           ; 1 bytes @ 0x41
  3984  0061                     	ds	1
  3985  0062                     setDelayOff_GO@i:	
  3986  0062                     setRF_DimmerLights@lights:	
  3987                           ; 1 bytes @ 0x42
  3988                           
  3989                           
  3990                           ; 1 bytes @ 0x42
  3991  0062                     	ds	1
  3992  0063                     ?_setDimmerLights_Dimming:	
  3993  0063                     setDelayOff_GO@j:	
  3994                           ; 0 bytes @ 0x43
  3995                           
  3996  0063                     setDimmerLights_Dimming@status:	
  3997                           ; 1 bytes @ 0x43
  3998                           
  3999                           
  4000                           ; 1 bytes @ 0x43
  4001  0063                     	ds	1
  4002  0064                     ??_setDimmerLights_Dimming:	
  4003  0064                     setDelayOff_GO@k:	
  4004                           ; 0 bytes @ 0x44
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x44
  4008  0064                     	ds	1
  4009  0065                     setDelayOff_GO@sw:	
  4010  0065                     setDimmerLights_Dimming@lights:	
  4011                           ; 1 bytes @ 0x45
  4012                           
  4013                           
  4014                           ; 1 bytes @ 0x45
  4015  0065                     	ds	1
  4016  0066                     ?_setDimmerLights_OnOff:	
  4017  0066                     ??_setRFSW_Control:	
  4018                           ; 0 bytes @ 0x46
  4019                           
  4020  0066                     setDimmerLights_OnOff@command:	
  4021                           ; 0 bytes @ 0x46
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x46
  4025  0066                     	ds	1
  4026  0067                     ??_setDimmerLights_OnOff:	
  4027  0067                     setRFSW_Control@status:	
  4028                           ; 0 bytes @ 0x47
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x47
  4032  0067                     	ds	1
  4033  0068                     setRFSW_Control@sw:	
  4034                           
  4035                           ; 1 bytes @ 0x48
  4036  0068                     	ds	1
  4037  0069                     ??_getRxData:	
  4038  0069                     setDimmerLights_OnOff@lights:	
  4039                           ; 0 bytes @ 0x49
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x49
  4043  0069                     	ds	1
  4044  006A                     setDimmerLights_Main@lights:	
  4045  006A                     getRxData@error:	
  4046                           ; 1 bytes @ 0x4A
  4047                           
  4048                           
  4049                           ; 1 bytes @ 0x4A
  4050  006A                     	ds	1
  4051  006B                     ??_setRF_Main:	
  4052                           
  4053                           ; 0 bytes @ 0x4B
  4054  006B                     	ds	1
  4055  006C                     setRF_Main@error:	
  4056                           
  4057                           ; 1 bytes @ 0x4C
  4058  006C                     	ds	1
  4059                           
  4060                           	psect	maintext
  4061  162B                     __pmaintext:	
  4062 ;;
  4063 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4064 ;;
  4065 ;; *************** function _main *****************
  4066 ;; Defined at:
  4067 ;;		line 7 in file "../src/Main_B1.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  argc            2    0[BANK3 ] int 
  4070 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;		None
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  2    0[BANK3 ] int 
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 17F/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4082 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4086 ;;Total ram usage:        4 bytes
  4087 ;; Hardware stack levels required when called:   11
  4088 ;; This function calls:
  4089 ;;		_Buzzer_Initialization
  4090 ;;		_Buzzer_Main
  4091 ;;		_CC2500_PowerOnInitial
  4092 ;;		_DelayOff_Initialization
  4093 ;;		_DelayOff_Main
  4094 ;;		_DimmerLights_Initialization
  4095 ;;		_DimmerLights_Main
  4096 ;;		_Exception_Main
  4097 ;;		_Flash_Memory_Initialization
  4098 ;;		_Flash_Memory_Main
  4099 ;;		_LED_Initialization
  4100 ;;		_LED_Main
  4101 ;;		_Load_Initialization
  4102 ;;		_Load_Main
  4103 ;;		_Mcu_Initialization
  4104 ;;		_RF_Initialization
  4105 ;;		_RF_Main
  4106 ;;		_Switch_Initialization
  4107 ;;		_Switch_Main
  4108 ;;		_Temp_Initialization
  4109 ;;		_Temp_Main
  4110 ;;		_WDT_Main
  4111 ;;		_getLoad_AD
  4112 ;;		_getTemp_AD
  4113 ;;		_myMain_Initialization
  4114 ;;		_my_MainTimer
  4115 ;; This function is called by:
  4116 ;;		Startup code after reset
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _main
  4122  162B                     _main:	
  4123                           
  4124                           ;Main_B1.c: 8: myMain_Initialization();
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4128  162B  319C  2432  3196   	fcall	_myMain_Initialization
  4129                           
  4130                           ;Main_B1.c: 9: Mcu_Initialization();
  4131  162E  319D  2506  3196   	fcall	_Mcu_Initialization
  4132                           
  4133                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4134  1631  3184  2450  3196   	fcall	_Flash_Memory_Initialization
  4135                           
  4136                           ;Main_B1.c: 11: LED_Initialization();
  4137  1634  319B  238C  3196   	fcall	_LED_Initialization
  4138                           
  4139                           ;Main_B1.c: 12: Buzzer_Initialization();
  4140  1637  319A  22B4  3196   	fcall	_Buzzer_Initialization
  4141                           
  4142                           ;Main_B1.c: 14: ;;
  4143                           ;Main_B1.c: 15: Temp_Initialization();
  4144  163A  319A  22C0  3196   	fcall	_Temp_Initialization
  4145                           
  4146                           ;Main_B1.c: 16: Load_Initialization();
  4147  163D  319A  22B7  3196   	fcall	_Load_Initialization
  4148                           
  4149                           ;Main_B1.c: 17: ;;
  4150                           ;Main_B1.c: 18: DelayOff_Initialization();
  4151  1640  319B  2313  3196   	fcall	_DelayOff_Initialization
  4152                           
  4153                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4154  1643  319B  2348  3196   	fcall	_DimmerLights_Initialization
  4155                           
  4156                           ;Main_B1.c: 21: ;;
  4157                           ;Main_B1.c: 22: ;;
  4158                           ;Main_B1.c: 23: ;;
  4159                           ;Main_B1.c: 24: Switch_Initialization();
  4160  1646  319B  23B0  3196   	fcall	_Switch_Initialization
  4161                           
  4162                           ;Main_B1.c: 25: RF_Initialization();
  4163  1649  319A  22BA  3196   	fcall	_RF_Initialization
  4164                           
  4165                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4166  164C  319D  25BC  3196   	fcall	_CC2500_PowerOnInitial
  4167  164F                     l10356:	
  4168                           ;Main_B1.c: 27: ;;
  4169                           ;Main_B1.c: 28: ;;
  4170                           ;Main_B1.c: 30: while (1) {
  4171                           
  4172                           
  4173                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4174  164F  0022               	movlb	2	; select bank2
  4175  1650  1C20               	btfss	_myMain^(0+256),0
  4176  1651  2E5A               	goto	l10360
  4177                           
  4178                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4179  1652  3005               	movlw	5
  4180  1653  318B  2320  3196   	fcall	_getLoad_AD
  4181                           
  4182                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4183  1656  3009               	movlw	9
  4184  1657  3193  2306  3196   	fcall	_getTemp_AD
  4185  165A                     l10360:	
  4186                           
  4187                           ;Main_B1.c: 57: }
  4188                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4189  165A  0021               	movlb	1	; select bank1
  4190  165B  1C3D               	btfss	_Timer1^(0+128),0
  4191  165C  2E4F               	goto	l10356
  4192                           
  4193                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4194  165D  103D               	bcf	_Timer1^(0+128),0
  4195                           
  4196                           ;Main_B1.c: 96: my_MainTimer();
  4197  165E  3193  233F  3196   	fcall	_my_MainTimer
  4198                           
  4199                           ;Main_B1.c: 97: WDT_Main();
  4200  1661  319C  24B1  3196   	fcall	_WDT_Main
  4201                           
  4202                           ;Main_B1.c: 98: ;;
  4203                           ;Main_B1.c: 99: ;;
  4204                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4205  1664  0022               	movlb	2	; select bank2
  4206  1665  1C20               	btfss	_myMain^(0+256),0
  4207  1666  2E4F               	goto	l10356
  4208                           
  4209                           ;Main_B1.c: 101: Flash_Memory_Main();
  4210  1667  3191  21FA  3196   	fcall	_Flash_Memory_Main
  4211                           
  4212                           ;Main_B1.c: 103: LED_Main();
  4213  166A  319B  2398  3196   	fcall	_LED_Main
  4214                           
  4215                           ;Main_B1.c: 104: Buzzer_Main();
  4216  166D  3193  23FC  3196   	fcall	_Buzzer_Main
  4217                           
  4218                           ;Main_B1.c: 106: ;;
  4219                           ;Main_B1.c: 107: Temp_Main();
  4220  1670  319A  22C3  3196   	fcall	_Temp_Main
  4221                           
  4222                           ;Main_B1.c: 108: Load_Main();
  4223  1673  3180  2053  3196   	fcall	_Load_Main
  4224                           
  4225                           ;Main_B1.c: 109: ;;
  4226                           ;Main_B1.c: 111: ;;
  4227                           ;Main_B1.c: 112: DimmerLights_Main();
  4228  1676  319F  273B  3196   	fcall	_DimmerLights_Main
  4229                           
  4230                           ;Main_B1.c: 113: Switch_Main();
  4231  1679  319B  2369  3196   	fcall	_Switch_Main
  4232                           
  4233                           ;Main_B1.c: 114: ;;
  4234                           ;Main_B1.c: 115: ;;
  4235                           ;Main_B1.c: 117: RF_Main();
  4236  167C  319A  22BD  3196   	fcall	_RF_Main
  4237                           
  4238                           ;Main_B1.c: 118: DelayOff_Main();
  4239  167F  319B  231B  3196   	fcall	_DelayOff_Main
  4240                           
  4241                           ;Main_B1.c: 119: ;;
  4242                           ;Main_B1.c: 120: ;;
  4243                           ;Main_B1.c: 121: Exception_Main();
  4244  1682  3185  252C  3196   	fcall	_Exception_Main
  4245  1685  2E4F               	goto	l10356
  4246  1686                     __end_of_main:	
  4247                           ;Main_B1.c: 128: }
  4248                           ;Main_B1.c: 129: }
  4249                           ;Main_B1.c: 163: }
  4250                           ;Main_B1.c: 164: return (0);
  4251                           ;	Return value of _main is never used
  4252                           
  4253                           
  4254                           	psect	text1
  4255  133F                     __ptext1:	
  4256 ;; *************** function _my_MainTimer *****************
  4257 ;; Defined at:
  4258 ;;		line 185 in file "../src/Main_B1.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;Total ram usage:        1 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    5
  4279 ;; This function calls:
  4280 ;;		_setBuz
  4281 ;; This function is called by:
  4282 ;;		_main
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _my_MainTimer
  4288  133F                     _my_MainTimer:	
  4289                           
  4290                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4294  133F  0022               	movlb	2	; select bank2
  4295  1340  1820               	btfsc	_myMain^(0+256),0
  4296  1341  2B57               	goto	l10082
  4297                           
  4298                           ;Main_B1.c: 189: myMain.PowerCount++;
  4299  1342  3001               	movlw	1
  4300  1343  00F9               	movwf	??_my_MainTimer
  4301  1344  0879               	movf	??_my_MainTimer,w
  4302  1345  07A1               	addwf	(_myMain^(0+256)+1),f
  4303                           
  4304                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4305  1346  0821               	movf	(_myMain^(0+256)+1),w
  4306  1347  3A4B               	xorlw	75
  4307  1348  1D03               	skipz
  4308  1349  0008               	return
  4309                           
  4310                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4311  134A  01A1               	clrf	(_myMain^(0+256)+1)
  4312                           
  4313                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4314  134B  1420               	bsf	_myMain^(0+256),0
  4315                           
  4316                           ;Main_B1.c: 197: setBuz(3, 50);
  4317  134C  3032               	movlw	50
  4318  134D  0020               	movlb	0	; select bank0
  4319  134E  00A4               	movwf	setBuz@time
  4320  134F  3000               	movlw	0
  4321  1350  00A5               	movwf	setBuz@time+1
  4322  1351  3003               	movlw	3
  4323  1352  3195  2584         	fcall	_setBuz
  4324                           
  4325                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4326  1354  0022               	movlb	2	; select bank2
  4327  1355  1620               	bsf	_myMain^(0+256),4
  4328                           
  4329                           ;Main_B1.c: 207: }
  4330                           ;Main_B1.c: 208: } else {
  4331  1356  0008               	return
  4332  1357                     l10082:	
  4333                           
  4334                           ;Main_B1.c: 209: myMain.PowerCount++;
  4335  1357  3001               	movlw	1
  4336  1358  00F9               	movwf	??_my_MainTimer
  4337  1359  0879               	movf	??_my_MainTimer,w
  4338  135A  07A1               	addwf	(_myMain^(0+256)+1),f
  4339                           
  4340                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4341  135B  0821               	movf	(_myMain^(0+256)+1),w
  4342  135C  3A32               	xorlw	50
  4343  135D  1903               	btfsc	3,2
  4344                           
  4345                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4346  135E  01A1               	clrf	(_myMain^(0+256)+1)
  4347                           
  4348                           ;Main_B1.c: 226: }
  4349                           ;Main_B1.c: 228: myMain.Count1++;
  4350  135F  3001               	movlw	1
  4351  1360  07A4               	addwf	(_myMain^(0+256)+4),f
  4352  1361  3000               	movlw	0
  4353  1362  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4354                           
  4355                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4356  1363  3004               	movlw	4
  4357  1364  3E20               	addlw	_myMain& (0+255)
  4358  1365  0086               	movwf	6
  4359  1366  3001               	movlw	1	; select bank2/3
  4360  1367  0087               	movwf	7
  4361  1368  3F40               	moviw [0]fsr1
  4362  1369  3A32               	xorlw	50
  4363  136A  1D03               	skipz
  4364  136B  2B6E               	goto	u11805
  4365  136C  3F41               	moviw [1]fsr1
  4366  136D  3A00               	xorlw	0
  4367  136E                     u11805:	
  4368  136E  1D03               	skipz
  4369  136F  0008               	return
  4370                           
  4371                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4372  1370  01A4               	clrf	(_myMain^(0+256)+4)
  4373  1371  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4374                           
  4375                           ;Main_B1.c: 242: if (myMain.Flag) {
  4376  1372  1CA0               	btfss	_myMain^(0+256),1
  4377  1373  2B76               	goto	l1649
  4378                           
  4379                           ;Main_B1.c: 243: myMain.Flag = 0;
  4380  1374  10A0               	bcf	_myMain^(0+256),1
  4381                           
  4382                           ;Main_B1.c: 252: } else {
  4383  1375  0008               	return
  4384  1376                     l1649:	
  4385                           
  4386                           ;Main_B1.c: 253: myMain.Flag = 1;
  4387  1376  14A0               	bsf	_myMain^(0+256),1
  4388  1377  0008               	return
  4389  1378                     __end_of_my_MainTimer:	
  4390                           
  4391                           	psect	text2
  4392  1C32                     __ptext2:	
  4393 ;; *************** function _myMain_Initialization *****************
  4394 ;; Defined at:
  4395 ;;		line 170 in file "../src/Main_B1.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;Total ram usage:        1 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    3
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _myMain_Initialization
  4425  1C32                     _myMain_Initialization:	
  4426                           
  4427                           ;Main_B1.c: 173: product = &_product;
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4431  1C32  3045               	movlw	__product& (0+255)
  4432  1C33  00F2               	movwf	??_myMain_Initialization
  4433  1C34  0872               	movf	??_myMain_Initialization,w
  4434  1C35  0020               	movlb	0	; select bank0
  4435  1C36  00ED               	movwf	_product
  4436                           
  4437                           ;Main_B1.c: 174: product->Data[20] = 210;
  4438  1C37  30D2               	movlw	210
  4439  1C38  00F2               	movwf	??_myMain_Initialization
  4440  1C39  086D               	movf	_product,w
  4441  1C3A  3E14               	addlw	20
  4442  1C3B  0086               	movwf	6
  4443  1C3C  3002               	movlw	2	; select bank4/5
  4444  1C3D  0087               	movwf	7
  4445  1C3E  0872               	movf	??_myMain_Initialization,w
  4446  1C3F  0081               	movwf	1
  4447  1C40  0008               	return
  4448  1C41                     __end_of_myMain_Initialization:	
  4449                           
  4450                           	psect	text3
  4451  1306                     __ptext3:	
  4452 ;; *************** function _getTemp_AD *****************
  4453 ;; Defined at:
  4454 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  channel         1    wreg     unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  channel         1    7[COMMON] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:        2 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    5
  4475 ;; This function calls:
  4476 ;;		_getAD
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _getTemp_AD
  4484  1306                     _getTemp_AD:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4488                           ;getTemp_AD@channel stored from wreg
  4489  1306  00F7               	movwf	getTemp_AD@channel
  4490                           
  4491                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4492  1307  0021               	movlb	1	; select bank1
  4493  1308  1D50               	btfss	_Temp^(0+128),2
  4494  1309  0008               	return
  4495                           
  4496                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4497  130A  30F0               	movlw	240
  4498  130B  00F6               	movwf	??_getTemp_AD
  4499  130C  0876               	movf	??_getTemp_AD,w
  4500  130D  00F2               	movwf	getAD@adcon1
  4501  130E  0877               	movf	getTemp_AD@channel,w
  4502  130F  319E  26AD  3193   	fcall	_getAD
  4503  1312  0873               	movf	?_getAD+1,w
  4504  1313  0021               	movlb	1	; select bank1
  4505  1314  01DD               	clrf	((_Temp+1)^(0+128)+12)
  4506  1315  07DD               	addwf	((_Temp+1)^(0+128)+12),f
  4507  1316  0872               	movf	?_getAD,w
  4508  1317  01DC               	clrf	(_Temp^(0+128)+12)
  4509  1318  07DC               	addwf	(_Temp^(0+128)+12),f
  4510                           
  4511                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4512  1319  300C               	movlw	12
  4513  131A  3ED0               	addlw	_Temp& (0+255)
  4514  131B  0086               	movwf	6
  4515  131C  0187               	clrf	7
  4516  131D  0016               	moviw fsr1++
  4517  131E  0401               	iorwf	1,w
  4518  131F  1903               	skipnz
  4519  1320  0008               	return
  4520                           
  4521                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4522  1321  085D               	movf	((_Temp+1)^(0+128)+12),w
  4523  1322  0259               	subwf	((_Temp+1)^(0+128)+8),w
  4524  1323  1D03               	skipz
  4525  1324  2B27               	goto	u11755
  4526  1325  085C               	movf	(_Temp^(0+128)+12),w
  4527  1326  0258               	subwf	(_Temp^(0+128)+8),w
  4528  1327                     u11755:	
  4529  1327  1803               	skipnc
  4530  1328  2B30               	goto	l10064
  4531                           
  4532                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4533  1329  085D               	movf	((_Temp+1)^(0+128)+12),w
  4534  132A  01D9               	clrf	((_Temp+1)^(0+128)+8)
  4535  132B  07D9               	addwf	((_Temp+1)^(0+128)+8),f
  4536  132C  085C               	movf	(_Temp^(0+128)+12),w
  4537  132D  01D8               	clrf	(_Temp^(0+128)+8)
  4538  132E  07D8               	addwf	(_Temp^(0+128)+8),f
  4539                           
  4540                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4541  132F  0008               	return
  4542  1330                     l10064:	
  4543  1330  085D               	movf	((_Temp+1)^(0+128)+12),w
  4544  1331  025B               	subwf	((_Temp+1)^(0+128)+10),w
  4545  1332  1D03               	skipz
  4546  1333  2B36               	goto	u11765
  4547  1334  085C               	movf	(_Temp^(0+128)+12),w
  4548  1335  025A               	subwf	(_Temp^(0+128)+10),w
  4549  1336                     u11765:	
  4550  1336  1803               	skipnc
  4551  1337  0008               	return
  4552                           
  4553                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4554  1338  085D               	movf	((_Temp+1)^(0+128)+12),w
  4555  1339  01DB               	clrf	((_Temp+1)^(0+128)+10)
  4556  133A  07DB               	addwf	((_Temp+1)^(0+128)+10),f
  4557  133B  085C               	movf	(_Temp^(0+128)+12),w
  4558  133C  01DA               	clrf	(_Temp^(0+128)+10)
  4559  133D  07DA               	addwf	(_Temp^(0+128)+10),f
  4560  133E  0008               	return
  4561  133F                     __end_of_getTemp_AD:	
  4562                           
  4563                           	psect	text4
  4564  0B20                     __ptext4:	
  4565 ;; *************** function _getLoad_AD *****************
  4566 ;; Defined at:
  4567 ;;		line 15 in file "../src/OverLoad_B1.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  channel         1    wreg     unsigned char 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  channel         1    0[BANK0 ] unsigned char 
  4572 ;;  i               1    3[BANK0 ] unsigned char 
  4573 ;;  j               1    2[BANK0 ] unsigned char 
  4574 ;;  k               1    1[BANK0 ] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;Total ram usage:        6 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    5
  4591 ;; This function calls:
  4592 ;;		_getAD
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _getLoad_AD
  4600  0B20                     _getLoad_AD:	
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4604                           ;getLoad_AD@channel stored from wreg
  4605  0B20  0020               	movlb	0	; select bank0
  4606  0B21  00A0               	movwf	getLoad_AD@channel
  4607                           
  4608                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4609  0B22  01A3               	clrf	getLoad_AD@i
  4610  0B23  01A2               	clrf	getLoad_AD@j
  4611  0B24  01A1               	clrf	getLoad_AD@k
  4612                           
  4613                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4614  0B25  0022               	movlb	2	; select bank2
  4615  0B26  1E30               	btfss	_Load^(0+256),4
  4616  0B27  0008               	return
  4617                           
  4618                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4619  0B28  30F3               	movlw	243
  4620  0B29  00F6               	movwf	??_getLoad_AD
  4621  0B2A  0876               	movf	??_getLoad_AD,w
  4622  0B2B  00F2               	movwf	getAD@adcon1
  4623  0B2C  0020               	movlb	0	; select bank0
  4624  0B2D  0820               	movf	getLoad_AD@channel,w
  4625  0B2E  319E  26AD  318B   	fcall	_getAD
  4626  0B31  0873               	movf	?_getAD+1,w
  4627  0B32  0022               	movlb	2	; select bank2
  4628  0B33  01D2               	clrf	((_Load+1)^(0+256)+33)
  4629  0B34  07D2               	addwf	((_Load+1)^(0+256)+33),f
  4630  0B35  0872               	movf	?_getAD,w
  4631  0B36  01D1               	clrf	(_Load^(0+256)+33)
  4632  0B37  07D1               	addwf	(_Load^(0+256)+33),f
  4633                           
  4634                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4635  0B38  0020               	movlb	0	; select bank0
  4636  0B39  01A3               	clrf	getLoad_AD@i
  4637  0B3A  3004               	movlw	4
  4638  0B3B  0223               	subwf	getLoad_AD@i,w
  4639  0B3C  1803               	btfsc	3,0
  4640  0B3D  2B6A               	goto	l10034
  4641  0B3E                     l10022:	
  4642                           
  4643                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4644  0B3E  3523               	lslf	getLoad_AD@i,w
  4645  0B3F  3E3B               	addlw	(_Load+11)& (0+255)
  4646  0B40  0086               	movwf	6
  4647  0B41  3001               	movlw	1	; select bank2/3
  4648  0B42  0087               	movwf	7
  4649  0B43  3F40               	moviw [0]fsr1
  4650  0B44  00F6               	movwf	??_getLoad_AD
  4651  0B45  3F41               	moviw [1]fsr1
  4652  0B46  00F7               	movwf	??_getLoad_AD+1
  4653  0B47  0022               	movlb	2	; select bank2
  4654  0B48  0852               	movf	((_Load+1)^(0+256)+33),w
  4655  0B49  0277               	subwf	??_getLoad_AD+1,w
  4656  0B4A  1D03               	skipz
  4657  0B4B  2B4E               	goto	u11655
  4658  0B4C  0851               	movf	(_Load^(0+256)+33),w
  4659  0B4D  0276               	subwf	??_getLoad_AD,w
  4660  0B4E                     u11655:	
  4661  0B4E  1803               	skipnc
  4662  0B4F  2B61               	goto	l10030
  4663  0B50  0020               	movlb	0	; select bank0
  4664  0B51  08A2               	movf	getLoad_AD@j,f
  4665  0B52  1D03               	skipz
  4666  0B53  2B61               	goto	l10030
  4667                           
  4668                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4669  0B54  3523               	lslf	getLoad_AD@i,w
  4670  0B55  3E3B               	addlw	(_Load+11)& (0+255)
  4671  0B56  0086               	movwf	6
  4672  0B57  3001               	movlw	1	; select bank2/3
  4673  0B58  0087               	movwf	7
  4674  0B59  0022               	movlb	2	; select bank2
  4675  0B5A  0851               	movf	(_Load^(0+256)+33),w
  4676  0B5B  3FC0               	movwi [0]fsr1
  4677  0B5C  0852               	movf	((_Load+1)^(0+256)+33),w
  4678  0B5D  3FC1               	movwi [1]fsr1
  4679                           
  4680                           ;OverLoad_B1.c: 24: j = 1;
  4681  0B5E  0020               	movlb	0	; select bank0
  4682  0B5F  01A2               	clrf	getLoad_AD@j
  4683  0B60  0AA2               	incf	getLoad_AD@j,f
  4684  0B61                     l10030:	
  4685  0B61  3001               	movlw	1
  4686  0B62  00F6               	movwf	??_getLoad_AD
  4687  0B63  0876               	movf	??_getLoad_AD,w
  4688  0B64  0020               	movlb	0	; select bank0
  4689  0B65  07A3               	addwf	getLoad_AD@i,f
  4690  0B66  3004               	movlw	4
  4691  0B67  0223               	subwf	getLoad_AD@i,w
  4692  0B68  1C03               	skipc
  4693  0B69  2B3E               	goto	l10022
  4694  0B6A                     l10034:	
  4695                           
  4696                           ;OverLoad_B1.c: 25: }
  4697                           ;OverLoad_B1.c: 26: }
  4698                           ;OverLoad_B1.c: 27: if (j == 0) {
  4699  0B6A  08A2               	movf	getLoad_AD@j,f
  4700  0B6B  1D03               	skipz
  4701  0B6C  0008               	return
  4702                           
  4703                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4704  0B6D  01A3               	clrf	getLoad_AD@i
  4705  0B6E                     L1:	
  4706  0B6E  3004               	movlw	4
  4707  0B6F  0223               	subwf	getLoad_AD@i,w
  4708  0B70  1803               	btfsc	3,0
  4709  0B71  0008               	return
  4710                           
  4711                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4712  0B72  3523               	lslf	getLoad_AD@i,w
  4713  0B73  3E45               	addlw	(_Load+21)& (0+255)
  4714  0B74  0086               	movwf	6
  4715  0B75  3001               	movlw	1	; select bank2/3
  4716  0B76  0087               	movwf	7
  4717  0B77  3F40               	moviw [0]fsr1
  4718  0B78  00F6               	movwf	??_getLoad_AD
  4719  0B79  3F41               	moviw [1]fsr1
  4720  0B7A  00F7               	movwf	??_getLoad_AD+1
  4721  0B7B  0877               	movf	??_getLoad_AD+1,w
  4722  0B7C  0022               	movlb	2	; select bank2
  4723  0B7D  0252               	subwf	((_Load+1)^(0+256)+33),w
  4724  0B7E  1D03               	skipz
  4725  0B7F  2B82               	goto	u11705
  4726  0B80  0876               	movf	??_getLoad_AD,w
  4727  0B81  0251               	subwf	(_Load^(0+256)+33),w
  4728  0B82                     u11705:	
  4729  0B82  1803               	skipnc
  4730  0B83  2B95               	goto	l10050
  4731  0B84  0020               	movlb	0	; select bank0
  4732  0B85  08A1               	movf	getLoad_AD@k,f
  4733  0B86  1D03               	skipz
  4734  0B87  2B95               	goto	l10050
  4735                           
  4736                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4737  0B88  3523               	lslf	getLoad_AD@i,w
  4738  0B89  3E45               	addlw	(_Load+21)& (0+255)
  4739  0B8A  0086               	movwf	6
  4740  0B8B  3001               	movlw	1	; select bank2/3
  4741  0B8C  0087               	movwf	7
  4742  0B8D  0022               	movlb	2	; select bank2
  4743  0B8E  0851               	movf	(_Load^(0+256)+33),w
  4744  0B8F  3FC0               	movwi [0]fsr1
  4745  0B90  0852               	movf	((_Load+1)^(0+256)+33),w
  4746  0B91  3FC1               	movwi [1]fsr1
  4747                           
  4748                           ;OverLoad_B1.c: 31: k = 1;
  4749  0B92  0020               	movlb	0	; select bank0
  4750  0B93  01A1               	clrf	getLoad_AD@k
  4751  0B94  0AA1               	incf	getLoad_AD@k,f
  4752  0B95                     l10050:	
  4753  0B95  3001               	movlw	1
  4754  0B96  00F6               	movwf	??_getLoad_AD
  4755  0B97  0876               	movf	??_getLoad_AD,w
  4756  0B98  0020               	movlb	0	; select bank0
  4757  0B99  07A3               	addwf	getLoad_AD@i,f
  4758  0B9A  2B6E               	goto	L1
  4759  0B9B                     __end_of_getLoad_AD:	
  4760                           
  4761                           	psect	text5
  4762  1EAD                     __ptext5:	
  4763 ;; *************** function _getAD *****************
  4764 ;; Defined at:
  4765 ;;		line 442 in file "../src/MCU_B1.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  adcon0          1    wreg     unsigned char 
  4768 ;;  adcon1          1    2[COMMON] unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  adcon0          1    5[COMMON] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  2    2[COMMON] int 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:        4 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		_Timeout_Counter
  4789 ;;		_set_TimeoutCleared
  4790 ;; This function is called by:
  4791 ;;		_getLoad_AD
  4792 ;;		_getTemp_AD
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _getAD
  4798  1EAD                     _getAD:	
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4802                           ;getAD@adcon0 stored from wreg
  4803  1EAD  00F5               	movwf	getAD@adcon0
  4804                           
  4805                           ;MCU_B1.c: 443: ADCON0 = adcon0;
  4806  1EAE  0875               	movf	getAD@adcon0,w
  4807  1EAF  0021               	movlb	1	; select bank1
  4808  1EB0  009D               	movwf	29	;volatile
  4809                           
  4810                           ;MCU_B1.c: 444: ADCON1 = adcon1;
  4811  1EB1  0872               	movf	getAD@adcon1,w
  4812  1EB2  009E               	movwf	30	;volatile
  4813                           
  4814                           ;MCU_B1.c: 445: GO_nDONE = 1;
  4815  1EB3  149D               	bsf	29,1	;volatile
  4816                           
  4817                           ;MCU_B1.c: 446: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4818  1EB4  2EB8               	goto	l9688
  4819  1EB5                     l9686:	
  4820                           
  4821                           ;MCU_B1.c: 447: Timeout_Counter();
  4822  1EB5  319D  25E6  319E   	fcall	_Timeout_Counter
  4823  1EB8                     l9688:	
  4824  1EB8  0021               	movlb	1	; select bank1
  4825  1EB9  1C9D               	btfss	29,1	;volatile
  4826  1EBA  2EBE               	goto	l9692
  4827  1EBB  0022               	movlb	2	; select bank2
  4828  1EBC  1D2B               	btfss	(_myMain^(0+256)+11),2
  4829  1EBD  2EB5               	goto	l9686
  4830  1EBE                     l9692:	
  4831                           
  4832                           ;MCU_B1.c: 448: };
  4833                           ;MCU_B1.c: 449: set_TimeoutCleared();
  4834  1EBE  319A  22DF         	fcall	_set_TimeoutCleared
  4835                           
  4836                           ;MCU_B1.c: 450: return ((ADRESH*256)+ADRESL);
  4837  1EC0  0021               	movlb	1	; select bank1
  4838  1EC1  081C               	movf	28,w	;volatile
  4839  1EC2  01F3               	clrf	?_getAD+1
  4840  1EC3  07F3               	addwf	?_getAD+1,f
  4841  1EC4  081B               	movf	27,w	;volatile
  4842  1EC5  01F2               	clrf	?_getAD
  4843  1EC6  07F2               	addwf	?_getAD,f
  4844  1EC7  0008               	return
  4845  1EC8                     __end_of_getAD:	
  4846                           
  4847                           	psect	text6
  4848  1CB1                     __ptext6:	
  4849 ;; *************** function _WDT_Main *****************
  4850 ;; Defined at:
  4851 ;;		line 1086 in file "../src/MCU_B1.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;		None               void
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0, pclath, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;Total ram usage:        1 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    4
  4872 ;; This function calls:
  4873 ;;		_WDT_Clearing
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _WDT_Main
  4881  1CB1                     _WDT_Main:	
  4882                           
  4883                           ;MCU_B1.c: 1087: if (WDT.Enable == 1) {
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4887  1CB1  0021               	movlb	1	; select bank1
  4888  1CB2  1C40               	btfss	_WDT^(0+128),0
  4889  1CB3  0008               	return
  4890                           
  4891                           ;MCU_B1.c: 1088: if (WDT.Timer-- > 0) {
  4892  1CB4  3001               	movlw	1
  4893  1CB5  02C1               	subwf	(_WDT^(0+128)+1),f
  4894  1CB6  0841               	movf	(_WDT^(0+128)+1),w
  4895  1CB7  3AFF               	xorlw	255
  4896  1CB8  1903               	skipnz
  4897  1CB9  0008               	return
  4898                           
  4899                           ;MCU_B1.c: 1089: WDT.Timer = 100;
  4900  1CBA  3064               	movlw	100
  4901  1CBB  00F2               	movwf	??_WDT_Main
  4902  1CBC  0872               	movf	??_WDT_Main,w
  4903  1CBD  00C1               	movwf	(_WDT^(0+128)+1)
  4904                           
  4905                           ;MCU_B1.c: 1090: WDT_Clearing();
  4906  1CBE  3180  2002         	fcall	_WDT_Clearing
  4907  1CC0  0008               	return
  4908  1CC1                     __end_of_WDT_Main:	
  4909                           
  4910                           	psect	text7
  4911  0002                     __ptext7:	
  4912 ;; *************** function _WDT_Clearing *****************
  4913 ;; Defined at:
  4914 ;;		line 1096 in file "../src/MCU_B1.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		None
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_WDT_Main
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _WDT_Clearing
  4944  0002                     _WDT_Clearing:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _WDT_Clearing: []
  4948  0002  0064               	clrwdt	;# 
  4949  0003  0008               	return
  4950  0004                     __end_of_WDT_Clearing:	
  4951                           
  4952                           	psect	text8
  4953  1AC3                     __ptext8:	
  4954 ;; *************** function _Temp_Main *****************
  4955 ;; Defined at:
  4956 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    6
  4977 ;; This function calls:
  4978 ;;		_setTemp_Main
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _Temp_Main
  4986  1AC3                     _Temp_Main:	
  4987                           
  4988                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4992  1AC3  318D  25E4         	fcall	_setTemp_Main
  4993  1AC5  0008               	return
  4994  1AC6                     __end_of_Temp_Main:	
  4995                           
  4996                           	psect	text9
  4997  0DE4                     __ptext9:	
  4998 ;; *************** function _setTemp_Main *****************
  4999 ;; Defined at:
  5000 ;;		line 56 in file "../src/OverTemperature_B1.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  error           1   64[BANK0 ] unsigned char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;		None               void
  5007 ;; Registers used:
  5008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5018 ;;Total ram usage:        3 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    5
  5021 ;; This function calls:
  5022 ;;		_getMain_All_Error_Status
  5023 ;;		_setBuz
  5024 ;;		_setProductData
  5025 ;; This function is called by:
  5026 ;;		_Temp_Main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _setTemp_Main
  5032  0DE4                     _setTemp_Main:	
  5033                           
  5034                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038  0DE4  3000               	movlw	0
  5039  0DE5  3191  21CC  318D   	fcall	_getMain_All_Error_Status
  5040  0DE8  0020               	movlb	0	; select bank0
  5041  0DE9  00DE               	movwf	??_setTemp_Main
  5042  0DEA  085E               	movf	??_setTemp_Main,w
  5043  0DEB  00E0               	movwf	setTemp_Main@error
  5044                           
  5045                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5046  0DEC  0021               	movlb	1	; select bank1
  5047  0DED  1C50               	btfss	_Temp^(0+128),0
  5048  0DEE  2E90               	goto	l2008
  5049                           
  5050                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5051  0DEF  1950               	btfsc	_Temp^(0+128),2
  5052  0DF0  2E00               	goto	l9710
  5053                           
  5054                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5055  0DF1  3001               	movlw	1
  5056  0DF2  07D1               	addwf	(_Temp^(0+128)+1),f
  5057  0DF3  3000               	movlw	0
  5058  0DF4  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5059                           
  5060                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5061  0DF5  3000               	movlw	0
  5062  0DF6  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5063  0DF7  30FA               	movlw	250
  5064  0DF8  1903               	skipnz
  5065  0DF9  0251               	subwf	(_Temp^(0+128)+1),w
  5066  0DFA  1C03               	skipc
  5067  0DFB  0008               	return
  5068                           
  5069                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5070  0DFC  01D1               	clrf	(_Temp^(0+128)+1)
  5071  0DFD  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5072                           
  5073                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5074  0DFE  1550               	bsf	_Temp^(0+128),2
  5075                           
  5076                           ;OverTemperature_B1.c: 70: }
  5077                           ;OverTemperature_B1.c: 71: } else {
  5078  0DFF  0008               	return
  5079  0E00                     l9710:	
  5080                           
  5081                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5082  0E00  3001               	movlw	1
  5083  0E01  07D1               	addwf	(_Temp^(0+128)+1),f
  5084  0E02  3000               	movlw	0
  5085  0E03  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5086                           
  5087                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5088  0E04  3000               	movlw	0
  5089  0E05  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5090  0E06  3002               	movlw	2
  5091  0E07  1903               	skipnz
  5092  0E08  0251               	subwf	(_Temp^(0+128)+1),w
  5093  0E09  1C03               	skipc
  5094  0E0A  0008               	return
  5095                           
  5096                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5097  0E0B  01D1               	clrf	(_Temp^(0+128)+1)
  5098  0E0C  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5099                           
  5100                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5101  0E0D  3008               	movlw	8
  5102  0E0E  3ED0               	addlw	_Temp& (0+255)
  5103  0E0F  0086               	movwf	6
  5104  0E10  0187               	clrf	7
  5105  0E11  0016               	moviw fsr1++
  5106  0E12  0401               	iorwf	1,w
  5107  0E13  1903               	skipnz
  5108  0E14  2E8A               	goto	l2013
  5109  0E15  300A               	movlw	10
  5110  0E16  3ED0               	addlw	_Temp& (0+255)
  5111  0E17  0086               	movwf	6
  5112  0E18  0187               	clrf	7
  5113  0E19  0016               	moviw fsr1++
  5114  0E1A  0401               	iorwf	1,w
  5115  0E1B  1903               	skipnz
  5116  0E1C  2E8A               	goto	l2013
  5117                           
  5118                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5119  0E1D  1150               	bcf	_Temp^(0+128),2
  5120                           
  5121                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5122  0E1E  300A               	movlw	10
  5123  0E1F  3ED0               	addlw	_Temp& (0+255)
  5124  0E20  0086               	movwf	6
  5125  0E21  0187               	clrf	7
  5126  0E22  3008               	movlw	8
  5127  0E23  3ED0               	addlw	_Temp& (0+255)
  5128  0E24  0084               	movwf	4
  5129  0E25  0185               	clrf	5
  5130  0E26  3F40               	moviw [0]fsr1
  5131  0E27  0700               	addwf	0,w
  5132  0E28  0020               	movlb	0	; select bank0
  5133  0E29  00DE               	movwf	??_setTemp_Main
  5134  0E2A  3101               	addfsr 0,1
  5135  0E2B  3F41               	moviw [1]fsr1
  5136  0E2C  3D00               	addwfc	0,w
  5137  0E2D  00DF               	movwf	??_setTemp_Main+1
  5138  0E2E  36DF               	lsrf	??_setTemp_Main+1,f
  5139  0E2F  0CDE               	rrf	??_setTemp_Main,f
  5140  0E30  085E               	movf	??_setTemp_Main,w
  5141  0E31  0021               	movlb	1	; select bank1
  5142  0E32  00D6               	movwf	(_Temp^(0+128)+6)
  5143  0E33  0020               	movlb	0	; select bank0
  5144  0E34  085F               	movf	??_setTemp_Main+1,w
  5145  0E35  0021               	movlb	1	; select bank1
  5146  0E36  00D7               	movwf	((_Temp+1)^(0+128)+6)
  5147                           
  5148                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5149  0E37  30C7               	movlw	199
  5150  0E38  00DE               	movwf	(_Temp^(0+128)+14)
  5151  0E39  3001               	movlw	1
  5152  0E3A  00DF               	movwf	(_Temp^(0+128)+15)
  5153                           
  5154                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5155  0E3B  309F               	movlw	159
  5156  0E3C  00E0               	movwf	(_Temp^(0+128)+16)
  5157  0E3D  3001               	movlw	1
  5158  0E3E  00E1               	movwf	(_Temp^(0+128)+17)
  5159                           
  5160                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5161  0E3F  1CD0               	btfss	_Temp^(0+128),1
  5162  0E40  2E61               	goto	l9742
  5163                           
  5164                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5165  0E41  085F               	movf	((_Temp+1)^(0+128)+14),w
  5166  0E42  0257               	subwf	((_Temp+1)^(0+128)+6),w
  5167  0E43  1D03               	skipz
  5168  0E44  2E47               	goto	u11175
  5169  0E45  085E               	movf	(_Temp^(0+128)+14),w
  5170  0E46  0256               	subwf	(_Temp^(0+128)+6),w
  5171  0E47                     u11175:	
  5172  0E47  1C03               	skipc
  5173  0E48  2E5F               	goto	l9740
  5174                           
  5175                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5176  0E49  3001               	movlw	1
  5177  0E4A  0020               	movlb	0	; select bank0
  5178  0E4B  00DE               	movwf	??_setTemp_Main
  5179  0E4C  085E               	movf	??_setTemp_Main,w
  5180  0E4D  0021               	movlb	1	; select bank1
  5181  0E4E  07D3               	addwf	(_Temp^(0+128)+3),f
  5182                           
  5183                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5184  0E4F  3003               	movlw	3
  5185  0E50  0253               	subwf	(_Temp^(0+128)+3),w
  5186  0E51  1C03               	skipc
  5187  0E52  2E77               	goto	l9754
  5188                           
  5189                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5190  0E53  01D3               	clrf	(_Temp^(0+128)+3)
  5191                           
  5192                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5193  0E54  10D0               	bcf	_Temp^(0+128),1
  5194                           
  5195                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5196  0E55  3064               	movlw	100
  5197  0E56  0020               	movlb	0	; select bank0
  5198  0E57  00A4               	movwf	setBuz@time
  5199  0E58  3000               	movlw	0
  5200  0E59  00A5               	movwf	setBuz@time+1
  5201  0E5A  3002               	movlw	2
  5202  0E5B  3195  2584  318D   	fcall	_setBuz
  5203                           
  5204                           ;OverTemperature_B1.c: 103: }
  5205                           ;OverTemperature_B1.c: 104: } else {
  5206  0E5E  2E77               	goto	l9754
  5207  0E5F                     l9740:	
  5208                           
  5209                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5210  0E5F  0021               	movlb	1	; select bank1
  5211  0E60  2E76               	goto	l9752
  5212  0E61                     l9742:	
  5213                           ;OverTemperature_B1.c: 106: }
  5214                           ;OverTemperature_B1.c: 107: } else {
  5215                           
  5216                           
  5217                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5218  0E61  0857               	movf	((_Temp+1)^(0+128)+6),w
  5219  0E62  0261               	subwf	((_Temp+1)^(0+128)+16),w
  5220  0E63  1D03               	skipz
  5221  0E64  2E67               	goto	u11195
  5222  0E65  0856               	movf	(_Temp^(0+128)+6),w
  5223  0E66  0260               	subwf	(_Temp^(0+128)+16),w
  5224  0E67                     u11195:	
  5225  0E67  1C03               	skipc
  5226  0E68  2E76               	goto	l9752
  5227                           
  5228                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5229  0E69  3001               	movlw	1
  5230  0E6A  0020               	movlb	0	; select bank0
  5231  0E6B  00DE               	movwf	??_setTemp_Main
  5232  0E6C  085E               	movf	??_setTemp_Main,w
  5233  0E6D  0021               	movlb	1	; select bank1
  5234  0E6E  07D3               	addwf	(_Temp^(0+128)+3),f
  5235                           
  5236                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5237  0E6F  3003               	movlw	3
  5238  0E70  0253               	subwf	(_Temp^(0+128)+3),w
  5239  0E71  1C03               	skipc
  5240  0E72  2E77               	goto	l9754
  5241                           
  5242                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5243  0E73  01D3               	clrf	(_Temp^(0+128)+3)
  5244                           
  5245                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5246  0E74  14D0               	bsf	_Temp^(0+128),1
  5247                           
  5248                           ;OverTemperature_B1.c: 113: }
  5249                           ;OverTemperature_B1.c: 114: } else {
  5250  0E75  2E77               	goto	l9754
  5251  0E76                     l9752:	
  5252                           
  5253                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5254  0E76  01D3               	clrf	(_Temp^(0+128)+3)
  5255  0E77                     l9754:	
  5256                           
  5257                           ;OverTemperature_B1.c: 116: }
  5258                           ;OverTemperature_B1.c: 117: }
  5259                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5260  0E77  0021               	movlb	1	; select bank1
  5261  0E78  0857               	movf	((_Temp+1)^(0+128)+6),w
  5262  0E79  0020               	movlb	0	; select bank0
  5263  0E7A  00DE               	movwf	??_setTemp_Main
  5264  0E7B  085E               	movf	??_setTemp_Main,w
  5265  0E7C  00DA               	movwf	setProductData@value
  5266  0E7D  3018               	movlw	24
  5267  0E7E  319B  23D9  318D   	fcall	_setProductData
  5268                           
  5269                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5270  0E81  0021               	movlb	1	; select bank1
  5271  0E82  0856               	movf	(_Temp^(0+128)+6),w
  5272  0E83  0020               	movlb	0	; select bank0
  5273  0E84  00DE               	movwf	??_setTemp_Main
  5274  0E85  085E               	movf	??_setTemp_Main,w
  5275  0E86  00DA               	movwf	setProductData@value
  5276  0E87  3019               	movlw	25
  5277  0E88  319B  23D9         	fcall	_setProductData
  5278  0E8A                     l2013:	
  5279                           
  5280                           ;OverTemperature_B1.c: 135: }
  5281                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5282  0E8A  0021               	movlb	1	; select bank1
  5283  0E8B  01D8               	clrf	(_Temp^(0+128)+8)
  5284  0E8C  01D9               	clrf	((_Temp+1)^(0+128)+8)
  5285                           
  5286                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5287  0E8D  01DA               	clrf	(_Temp^(0+128)+10)
  5288  0E8E  01DB               	clrf	((_Temp+1)^(0+128)+10)
  5289                           
  5290                           ;OverTemperature_B1.c: 138: }
  5291                           ;OverTemperature_B1.c: 139: }
  5292                           ;OverTemperature_B1.c: 141: } else {
  5293  0E8F  0008               	return
  5294  0E90                     l2008:	
  5295                           
  5296                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5297  0E90  0022               	movlb	2	; select bank2
  5298  0E91  1C20               	btfss	_myMain^(0+256),0
  5299  0E92  0008               	return
  5300                           
  5301                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5302  0E93  0021               	movlb	1	; select bank1
  5303  0E94  1450               	bsf	_Temp^(0+128),0
  5304  0E95  0008               	return
  5305  0E96                     __end_of_setTemp_Main:	
  5306                           
  5307                           	psect	text10
  5308  1AC0                     __ptext10:	
  5309 ;; *************** function _Temp_Initialization *****************
  5310 ;; Defined at:
  5311 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    4
  5332 ;; This function calls:
  5333 ;;		_setTemp_Initialization
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _Temp_Initialization
  5341  1AC0                     _Temp_Initialization:	
  5342                           
  5343                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5347  1AC0  3187  27FF         	fcall	_setTemp_Initialization
  5348  1AC2  0008               	return
  5349  1AC3                     __end_of_Temp_Initialization:	
  5350                           
  5351                           	psect	text11
  5352  07FF                     __ptext11:	
  5353 ;; *************** function _setTemp_Initialization *****************
  5354 ;; Defined at:
  5355 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		None
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    3
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_Temp_Initialization
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _setTemp_Initialization
  5385  07FF                     _setTemp_Initialization:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _setTemp_Initialization: []
  5389  07FF  0008               	return
  5390  0800                     __end_of_setTemp_Initialization:	
  5391                           
  5392                           	psect	text12
  5393  1B69                     __ptext12:	
  5394 ;; *************** function _Switch_Main *****************
  5395 ;; Defined at:
  5396 ;;		line 72 in file "../src/Switch_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    7
  5417 ;; This function calls:
  5418 ;;		_TouchPower
  5419 ;;		_setSw_Main
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Switch_Main
  5427  1B69                     _Switch_Main:	
  5428                           
  5429                           ;Switch_B1.c: 75: setSw_Main(1);
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5433  1B69  3001               	movlw	1
  5434  1B6A  3181  21EB  319B   	fcall	_setSw_Main
  5435                           
  5436                           ;Switch_B1.c: 79: setSw_Main(2);
  5437  1B6D  3002               	movlw	2
  5438  1B6E  3181  21EB  319B   	fcall	_setSw_Main
  5439                           
  5440                           ;Switch_B1.c: 87: TouchPower();
  5441  1B71  319D  25D1         	fcall	_TouchPower
  5442  1B73  0008               	return
  5443  1B74                     __end_of_Switch_Main:	
  5444                           
  5445                           	psect	text13
  5446  01EB                     __ptext13:	
  5447 ;; *************** function _setSw_Main *****************
  5448 ;; Defined at:
  5449 ;;		line 121 in file "../src/Switch_B1.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  sw              1    wreg     unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  sw              1   12[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;Total ram usage:        3 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    6
  5470 ;; This function calls:
  5471 ;;		_SwPointSelect
  5472 ;;		_getMain_All_Error_Status
  5473 ;;		_getSw_KeyStatus
  5474 ;;		_setBuz
  5475 ;;		_setDimmerLights_DimmingOn
  5476 ;;		_setDimmerLights_SwOff
  5477 ;;		_setDimmerLights_SwOn
  5478 ;;		_setRF_Learn
  5479 ;; This function is called by:
  5480 ;;		_Switch_Main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _setSw_Main
  5486  01EB                     _setSw_Main:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5490                           ;setSw_Main@sw stored from wreg
  5491  01EB  0020               	movlb	0	; select bank0
  5492  01EC  00AC               	movwf	setSw_Main@sw
  5493                           
  5494                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5495  01ED  082C               	movf	setSw_Main@sw,w
  5496  01EE  319D  2518  3181   	fcall	_SwPointSelect
  5497                           
  5498                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5499  01F1  087B               	movf	_Sw,w
  5500  01F2  0086               	movwf	6
  5501  01F3  3001               	movlw	1	; select bank2/3
  5502  01F4  0087               	movwf	7
  5503  01F5  1C01               	btfss	1,0
  5504  01F6  2B51               	goto	l2779
  5505                           
  5506                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5507  01F7  3000               	movlw	0
  5508  01F8  3191  21CC  3181   	fcall	_getMain_All_Error_Status
  5509  01FB  3800               	iorlw	0
  5510  01FC  1D03               	skipz
  5511  01FD  2A19               	goto	l9862
  5512                           
  5513                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5514  01FE  0A7B               	incf	_Sw,w
  5515  01FF  0086               	movwf	6
  5516  0200  3001               	movlw	1	; select bank2/3
  5517  0201  0087               	movwf	7
  5518  0202  1081               	bcf	1,1
  5519                           
  5520                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5521  0203  0020               	movlb	0	; select bank0
  5522  0204  082C               	movf	setSw_Main@sw,w
  5523  0205  319F  275B  3181   	fcall	_getSw_KeyStatus
  5524  0208  3A01               	xorlw	1
  5525  0209  3000               	movlw	0
  5526  020A  1903               	skipnz
  5527  020B  3001               	movlw	1
  5528  020C  0020               	movlb	0	; select bank0
  5529  020D  00AA               	movwf	??_setSw_Main
  5530  020E  087B               	movf	_Sw,w
  5531  020F  0086               	movwf	6
  5532  0210  3001               	movlw	1	; select bank2/3
  5533  0211  0087               	movwf	7
  5534  0212  0DAA               	rlf	??_setSw_Main,f
  5535  0213  0801               	movf	1,w
  5536  0214  062A               	xorwf	??_setSw_Main,w
  5537  0215  39FD               	andlw	-3
  5538  0216  062A               	xorwf	??_setSw_Main,w
  5539  0217  0081               	movwf	1
  5540                           
  5541                           ;Switch_B1.c: 128: } else {
  5542  0218  2A2E               	goto	l2781
  5543  0219                     l9862:	
  5544                           
  5545                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5546  0219  0A7B               	incf	_Sw,w
  5547  021A  0086               	movwf	6
  5548  021B  3001               	movlw	1	; select bank2/3
  5549  021C  0087               	movwf	7
  5550  021D  1881               	btfsc	1,1
  5551  021E  2A2E               	goto	l2781
  5552                           
  5553                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5554  021F  0A7B               	incf	_Sw,w
  5555  0220  0086               	movwf	6
  5556  0221  3001               	movlw	1	; select bank2/3
  5557  0222  0087               	movwf	7
  5558  0223  1481               	bsf	1,1
  5559                           
  5560                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5561  0224  087B               	movf	_Sw,w
  5562  0225  0086               	movwf	6
  5563  0226  3001               	movlw	1	; select bank2/3
  5564  0227  0087               	movwf	7
  5565  0228  1081               	bcf	1,1
  5566                           
  5567                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5568  0229  087B               	movf	_Sw,w
  5569  022A  0086               	movwf	6
  5570  022B  3001               	movlw	1	; select bank2/3
  5571  022C  0087               	movwf	7
  5572  022D  1501               	bsf	1,2
  5573  022E                     l2781:	
  5574                           
  5575                           ;Switch_B1.c: 134: }
  5576                           ;Switch_B1.c: 135: }
  5577                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5578  022E  087B               	movf	_Sw,w
  5579  022F  0086               	movwf	6
  5580  0230  3001               	movlw	1	; select bank2/3
  5581  0231  0087               	movwf	7
  5582  0232  1C81               	btfss	1,1
  5583  0233  2AFE               	goto	l9912
  5584                           
  5585                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5586  0234  087B               	movf	_Sw,w
  5587  0235  0086               	movwf	6
  5588  0236  3001               	movlw	1	; select bank2/3
  5589  0237  0087               	movwf	7
  5590  0238  1901               	btfsc	1,2
  5591  0239  2A5C               	goto	l9878
  5592                           
  5593                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5594  023A  3001               	movlw	1
  5595  023B  0020               	movlb	0	; select bank0
  5596  023C  00AA               	movwf	??_setSw_Main
  5597  023D  087B               	movf	_Sw,w
  5598  023E  3E02               	addlw	2
  5599  023F  0086               	movwf	6
  5600  0240  3001               	movlw	1	; select bank2/3
  5601  0241  0087               	movwf	7
  5602  0242  082A               	movf	??_setSw_Main,w
  5603  0243  0781               	addwf	1,f
  5604                           
  5605                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5606  0244  087B               	movf	_Sw,w
  5607  0245  3E02               	addlw	2
  5608  0246  0086               	movwf	6
  5609  0247  3001               	movlw	1	; select bank2/3
  5610  0248  0087               	movwf	7
  5611  0249  3003               	movlw	3
  5612  024A  0201               	subwf	1,w
  5613  024B  1C03               	skipc
  5614  024C  0008               	return
  5615                           
  5616                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5617  024D  087B               	movf	_Sw,w
  5618  024E  3E02               	addlw	2
  5619  024F  0086               	movwf	6
  5620  0250  3001               	movlw	1	; select bank2/3
  5621  0251  0087               	movwf	7
  5622  0252  0181               	clrf	1
  5623                           
  5624                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5625  0253  087B               	movf	_Sw,w
  5626  0254  0086               	movwf	6
  5627  0255  3001               	movlw	1	; select bank2/3
  5628  0256  0087               	movwf	7
  5629  0257  1501               	bsf	1,2
  5630                           
  5631                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5632  0258  082C               	movf	setSw_Main@sw,w
  5633  0259  3196  2686         	fcall	_setDimmerLights_SwOn
  5634                           
  5635                           ;Switch_B1.c: 148: }
  5636                           ;Switch_B1.c: 149: } else {
  5637  025B  0008               	return
  5638  025C                     l9878:	
  5639                           
  5640                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5641  025C  087B               	movf	_Sw,w
  5642  025D  0086               	movwf	6
  5643  025E  3001               	movlw	1	; select bank2/3
  5644  025F  0087               	movwf	7
  5645  0260  1981               	btfsc	1,3
  5646  0261  2A8E               	goto	l9888
  5647                           
  5648                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5649  0262  087B               	movf	_Sw,w
  5650  0263  3E03               	addlw	3
  5651  0264  0086               	movwf	6
  5652  0265  3001               	movlw	1	; select bank2/3
  5653  0266  0087               	movwf	7
  5654  0267  3001               	movlw	1
  5655  0268  0781               	addwf	1,f
  5656  0269  3141               	addfsr 1,1
  5657  026A  1803               	skipnc
  5658  026B  0A81               	incf	1,f
  5659                           
  5660                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5661  026C  087B               	movf	_Sw,w
  5662  026D  3E03               	addlw	3
  5663  026E  0086               	movwf	6
  5664  026F  3001               	movlw	1	; select bank2/3
  5665  0270  0087               	movwf	7
  5666  0271  3F40               	moviw [0]fsr1
  5667  0272  0020               	movlb	0	; select bank0
  5668  0273  00AA               	movwf	??_setSw_Main
  5669  0274  3F41               	moviw [1]fsr1
  5670  0275  00AB               	movwf	??_setSw_Main+1
  5671  0276  3000               	movlw	0
  5672  0277  022B               	subwf	??_setSw_Main+1,w
  5673  0278  304B               	movlw	75
  5674  0279  1903               	skipnz
  5675  027A  022A               	subwf	??_setSw_Main,w
  5676  027B  1C03               	skipc
  5677  027C  0008               	return
  5678                           
  5679                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5680  027D  087B               	movf	_Sw,w
  5681  027E  3E03               	addlw	3
  5682  027F  0086               	movwf	6
  5683  0280  3001               	movlw	1	; select bank2/3
  5684  0281  0087               	movwf	7
  5685  0282  3000               	movlw	0
  5686  0283  3FC0               	movwi [0]fsr1
  5687  0284  3FC1               	movwi [1]fsr1
  5688                           
  5689                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5690  0285  087B               	movf	_Sw,w
  5691  0286  0086               	movwf	6
  5692  0287  3001               	movlw	1	; select bank2/3
  5693  0288  0087               	movwf	7
  5694  0289  1581               	bsf	1,3
  5695                           
  5696                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5697  028A  082C               	movf	setSw_Main@sw,w
  5698  028B  3190  20FF         	fcall	_setDimmerLights_DimmingOn
  5699                           
  5700                           ;Switch_B1.c: 160: }
  5701                           ;Switch_B1.c: 161: } else {
  5702  028D  0008               	return
  5703  028E                     l9888:	
  5704                           
  5705                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5706  028E  087B               	movf	_Sw,w
  5707  028F  0086               	movwf	6
  5708  0290  3001               	movlw	1	; select bank2/3
  5709  0291  0087               	movwf	7
  5710  0292  1A01               	btfsc	1,4
  5711  0293  2ACC               	goto	l9902
  5712                           
  5713                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5714  0294  087B               	movf	_Sw,w
  5715  0295  3E05               	addlw	5
  5716  0296  0086               	movwf	6
  5717  0297  3001               	movlw	1	; select bank2/3
  5718  0298  0087               	movwf	7
  5719  0299  3001               	movlw	1
  5720  029A  0781               	addwf	1,f
  5721  029B  3141               	addfsr 1,1
  5722  029C  1803               	skipnc
  5723  029D  0A81               	incf	1,f
  5724                           
  5725                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5726  029E  087B               	movf	_Sw,w
  5727  029F  3E05               	addlw	5
  5728  02A0  0086               	movwf	6
  5729  02A1  3001               	movlw	1	; select bank2/3
  5730  02A2  0087               	movwf	7
  5731  02A3  3F40               	moviw [0]fsr1
  5732  02A4  0020               	movlb	0	; select bank0
  5733  02A5  00AA               	movwf	??_setSw_Main
  5734  02A6  3F41               	moviw [1]fsr1
  5735  02A7  00AB               	movwf	??_setSw_Main+1
  5736  02A8  3000               	movlw	0
  5737  02A9  022B               	subwf	??_setSw_Main+1,w
  5738  02AA  304B               	movlw	75
  5739  02AB  1903               	skipnz
  5740  02AC  022A               	subwf	??_setSw_Main,w
  5741  02AD  1C03               	skipc
  5742  02AE  0008               	return
  5743                           
  5744                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5745  02AF  087B               	movf	_Sw,w
  5746  02B0  3E05               	addlw	5
  5747  02B1  0086               	movwf	6
  5748  02B2  3001               	movlw	1	; select bank2/3
  5749  02B3  0087               	movwf	7
  5750  02B4  3000               	movlw	0
  5751  02B5  3FC0               	movwi [0]fsr1
  5752  02B6  3FC1               	movwi [1]fsr1
  5753                           
  5754                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5755  02B7  087B               	movf	_Sw,w
  5756  02B8  0086               	movwf	6
  5757  02B9  3001               	movlw	1	; select bank2/3
  5758  02BA  0087               	movwf	7
  5759  02BB  1601               	bsf	1,4
  5760                           
  5761                           ;Switch_B1.c: 169: setRF_Learn(1);
  5762  02BC  3001               	movlw	1
  5763  02BD  319C  24E3  3181   	fcall	_setRF_Learn
  5764                           
  5765                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5766  02C0  0022               	movlb	2	; select bank2
  5767  02C1  1EA0               	btfss	_myMain^(0+256),5
  5768  02C2  0008               	return
  5769                           
  5770                           ;Switch_B1.c: 171: setBuz(2, 100);
  5771  02C3  3064               	movlw	100
  5772  02C4  0020               	movlb	0	; select bank0
  5773  02C5  00A4               	movwf	setBuz@time
  5774  02C6  3000               	movlw	0
  5775  02C7  00A5               	movwf	setBuz@time+1
  5776  02C8  3002               	movlw	2
  5777  02C9  3195  2584         	fcall	_setBuz
  5778                           
  5779                           ;Switch_B1.c: 172: }
  5780                           ;Switch_B1.c: 176: }
  5781                           ;Switch_B1.c: 177: } else {
  5782  02CB  0008               	return
  5783  02CC                     l9902:	
  5784                           
  5785                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5786  02CC  087B               	movf	_Sw,w
  5787  02CD  0086               	movwf	6
  5788  02CE  3001               	movlw	1	; select bank2/3
  5789  02CF  0087               	movwf	7
  5790  02D0  1A81               	btfsc	1,5
  5791  02D1  0008               	return
  5792                           
  5793                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5794  02D2  087B               	movf	_Sw,w
  5795  02D3  3E07               	addlw	7
  5796  02D4  0086               	movwf	6
  5797  02D5  3001               	movlw	1	; select bank2/3
  5798  02D6  0087               	movwf	7
  5799  02D7  3001               	movlw	1
  5800  02D8  0781               	addwf	1,f
  5801  02D9  3141               	addfsr 1,1
  5802  02DA  1803               	skipnc
  5803  02DB  0A81               	incf	1,f
  5804                           
  5805                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5806  02DC  087B               	movf	_Sw,w
  5807  02DD  3E07               	addlw	7
  5808  02DE  0086               	movwf	6
  5809  02DF  3001               	movlw	1	; select bank2/3
  5810  02E0  0087               	movwf	7
  5811  02E1  3F40               	moviw [0]fsr1
  5812  02E2  0020               	movlb	0	; select bank0
  5813  02E3  00AA               	movwf	??_setSw_Main
  5814  02E4  3F41               	moviw [1]fsr1
  5815  02E5  00AB               	movwf	??_setSw_Main+1
  5816  02E6  3000               	movlw	0
  5817  02E7  022B               	subwf	??_setSw_Main+1,w
  5818  02E8  3096               	movlw	150
  5819  02E9  1903               	skipnz
  5820  02EA  022A               	subwf	??_setSw_Main,w
  5821  02EB  1C03               	skipc
  5822  02EC  0008               	return
  5823                           
  5824                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5825  02ED  087B               	movf	_Sw,w
  5826  02EE  3E07               	addlw	7
  5827  02EF  0086               	movwf	6
  5828  02F0  3001               	movlw	1	; select bank2/3
  5829  02F1  0087               	movwf	7
  5830  02F2  3000               	movlw	0
  5831  02F3  3FC0               	movwi [0]fsr1
  5832  02F4  3FC1               	movwi [1]fsr1
  5833                           
  5834                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5835  02F5  087B               	movf	_Sw,w
  5836  02F6  0086               	movwf	6
  5837  02F7  3001               	movlw	1	; select bank2/3
  5838  02F8  0087               	movwf	7
  5839  02F9  1681               	bsf	1,5
  5840                           
  5841                           ;Switch_B1.c: 185: setRF_Learn(0);
  5842  02FA  3000               	movlw	0
  5843  02FB  319C  24E3         	fcall	_setRF_Learn
  5844                           
  5845                           ;Switch_B1.c: 188: }
  5846                           ;Switch_B1.c: 189: }
  5847                           ;Switch_B1.c: 190: }
  5848                           ;Switch_B1.c: 191: }
  5849                           ;Switch_B1.c: 192: }
  5850                           ;Switch_B1.c: 193: } else {
  5851  02FD  0008               	return
  5852  02FE                     l9912:	
  5853                           
  5854                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5855  02FE  087B               	movf	_Sw,w
  5856  02FF  0086               	movwf	6
  5857  0300  3001               	movlw	1	; select bank2/3
  5858  0301  0087               	movwf	7
  5859  0302  1D01               	btfss	1,2
  5860  0303  0008               	return
  5861                           
  5862                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5863  0304  3001               	movlw	1
  5864  0305  0020               	movlb	0	; select bank0
  5865  0306  00AA               	movwf	??_setSw_Main
  5866  0307  087B               	movf	_Sw,w
  5867  0308  3E02               	addlw	2
  5868  0309  0086               	movwf	6
  5869  030A  3001               	movlw	1	; select bank2/3
  5870  030B  0087               	movwf	7
  5871  030C  082A               	movf	??_setSw_Main,w
  5872  030D  0781               	addwf	1,f
  5873                           
  5874                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5875  030E  087B               	movf	_Sw,w
  5876  030F  3E02               	addlw	2
  5877  0310  0086               	movwf	6
  5878  0311  3001               	movlw	1	; select bank2/3
  5879  0312  0087               	movwf	7
  5880  0313  3003               	movlw	3
  5881  0314  0201               	subwf	1,w
  5882  0315  1C03               	skipc
  5883  0316  0008               	return
  5884                           
  5885                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5886  0317  087B               	movf	_Sw,w
  5887  0318  3E02               	addlw	2
  5888  0319  0086               	movwf	6
  5889  031A  3001               	movlw	1	; select bank2/3
  5890  031B  0087               	movwf	7
  5891  031C  0181               	clrf	1
  5892                           
  5893                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5894  031D  087B               	movf	_Sw,w
  5895  031E  0086               	movwf	6
  5896  031F  3001               	movlw	1	; select bank2/3
  5897  0320  0087               	movwf	7
  5898  0321  1101               	bcf	1,2
  5899                           
  5900                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5901  0322  087B               	movf	_Sw,w
  5902  0323  3E03               	addlw	3
  5903  0324  0086               	movwf	6
  5904  0325  3001               	movlw	1	; select bank2/3
  5905  0326  0087               	movwf	7
  5906  0327  3000               	movlw	0
  5907  0328  3FC0               	movwi [0]fsr1
  5908  0329  3FC1               	movwi [1]fsr1
  5909                           
  5910                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5911  032A  087B               	movf	_Sw,w
  5912  032B  0086               	movwf	6
  5913  032C  3001               	movlw	1	; select bank2/3
  5914  032D  0087               	movwf	7
  5915  032E  1181               	bcf	1,3
  5916                           
  5917                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5918  032F  087B               	movf	_Sw,w
  5919  0330  3E05               	addlw	5
  5920  0331  0086               	movwf	6
  5921  0332  3001               	movlw	1	; select bank2/3
  5922  0333  0087               	movwf	7
  5923  0334  3000               	movlw	0
  5924  0335  3FC0               	movwi [0]fsr1
  5925  0336  3FC1               	movwi [1]fsr1
  5926                           
  5927                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5928  0337  087B               	movf	_Sw,w
  5929  0338  0086               	movwf	6
  5930  0339  3001               	movlw	1	; select bank2/3
  5931  033A  0087               	movwf	7
  5932  033B  1201               	bcf	1,4
  5933                           
  5934                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5935  033C  087B               	movf	_Sw,w
  5936  033D  3E07               	addlw	7
  5937  033E  0086               	movwf	6
  5938  033F  3001               	movlw	1	; select bank2/3
  5939  0340  0087               	movwf	7
  5940  0341  3000               	movlw	0
  5941  0342  3FC0               	movwi [0]fsr1
  5942  0343  3FC1               	movwi [1]fsr1
  5943                           
  5944                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5945  0344  087B               	movf	_Sw,w
  5946  0345  0086               	movwf	6
  5947  0346  3001               	movlw	1	; select bank2/3
  5948  0347  0087               	movwf	7
  5949  0348  1281               	bcf	1,5
  5950                           
  5951                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5952  0349  082C               	movf	setSw_Main@sw,w
  5953  034A  3192  22CE  3181   	fcall	_setDimmerLights_SwOff
  5954                           
  5955                           ;Switch_B1.c: 210: setRF_Learn(0);
  5956  034D  3000               	movlw	0
  5957  034E  319C  24E3         	fcall	_setRF_Learn
  5958                           
  5959                           ;Switch_B1.c: 212: }
  5960                           ;Switch_B1.c: 213: }
  5961                           ;Switch_B1.c: 214: }
  5962                           ;Switch_B1.c: 215: } else {
  5963  0350  0008               	return
  5964  0351                     l2779:	
  5965                           
  5966                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5967  0351  0022               	movlb	2	; select bank2
  5968  0352  1C20               	btfss	_myMain^(0+256),0
  5969  0353  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5972  0354  087B               	movf	_Sw,w
  5973  0355  0086               	movwf	6
  5974  0356  3001               	movlw	1	; select bank2/3
  5975  0357  0087               	movwf	7
  5976  0358  1401               	bsf	1,0
  5977  0359  0008               	return
  5978  035A                     __end_of_setSw_Main:	
  5979                           
  5980                           	psect	text14
  5981  1CE3                     __ptext14:	
  5982 ;; *************** function _setRF_Learn *****************
  5983 ;; Defined at:
  5984 ;;		line 33 in file "../src/RF_Control_B1.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  command         1    wreg     unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  command         1    3[COMMON] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        2 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    3
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_setSw_Main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _setRF_Learn
  6014  1CE3                     _setRF_Learn:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6018                           ;setRF_Learn@command stored from wreg
  6019  1CE3  00F3               	movwf	setRF_Learn@command
  6020                           
  6021                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6022  1CE4  0873               	movf	setRF_Learn@command,w
  6023  1CE5  3A01               	xorlw	1
  6024  1CE6  3000               	movlw	0
  6025  1CE7  1903               	skipnz
  6026  1CE8  3001               	movlw	1
  6027  1CE9  00F2               	movwf	??_setRF_Learn
  6028  1CEA  0EF2               	swapf	??_setRF_Learn,f
  6029  1CEB  0DF2               	rlf	??_setRF_Learn,f
  6030  1CEC  0DF2               	rlf	??_setRF_Learn,f
  6031  1CED  0021               	movlb	1	; select bank1
  6032  1CEE  0820               	movf	_RF1^(0+128),w
  6033  1CEF  0672               	xorwf	??_setRF_Learn,w
  6034  1CF0  39BF               	andlw	-65
  6035  1CF1  0672               	xorwf	??_setRF_Learn,w
  6036  1CF2  00A0               	movwf	_RF1^(0+128)
  6037  1CF3  0008               	return
  6038  1CF4                     __end_of_setRF_Learn:	
  6039                           
  6040                           	psect	text15
  6041  10FF                     __ptext15:	
  6042 ;; *************** function _setDimmerLights_DimmingOn *****************
  6043 ;; Defined at:
  6044 ;;		line 711 in file "../src/Dimmer_B1.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  sw              1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  sw              1    4[COMMON] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;		None               void
  6051 ;; Registers used:
  6052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;Total ram usage:        1 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    4
  6065 ;; This function calls:
  6066 ;;		_DimmerLights_SelectPointer
  6067 ;; This function is called by:
  6068 ;;		_setSw_Main
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           
  6073                           ;psect for function _setDimmerLights_DimmingOn
  6074  10FF                     _setDimmerLights_DimmingOn:	
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6078                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6079  10FF  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6080                           
  6081                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6082  1100  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6083  1101  319D  2568  3190   	fcall	_DimmerLights_SelectPointer
  6084                           
  6085                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6086  1104  0021               	movlb	1	; select bank1
  6087  1105  0846               	movf	_DimmerLights^(0+128),w
  6088  1106  0086               	movwf	6
  6089  1107  3001               	movlw	1	; select bank2/3
  6090  1108  0087               	movwf	7
  6091  1109  1881               	btfsc	1,1
  6092  110A  0008               	return
  6093                           
  6094                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6095  110B  0846               	movf	_DimmerLights^(0+128),w
  6096  110C  0086               	movwf	6
  6097  110D  3001               	movlw	1	; select bank2/3
  6098  110E  0087               	movwf	7
  6099  110F  1C01               	btfss	1,0
  6100  1110  0008               	return
  6101                           
  6102                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6103  1111  0A46               	incf	_DimmerLights^(0+128),w
  6104  1112  0086               	movwf	6
  6105  1113  3001               	movlw	1	; select bank2/3
  6106  1114  0087               	movwf	7
  6107  1115  1401               	bsf	1,0
  6108                           
  6109                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6110  1116  0846               	movf	_DimmerLights^(0+128),w
  6111  1117  0086               	movwf	6
  6112  1118  3001               	movlw	1	; select bank2/3
  6113  1119  0087               	movwf	7
  6114  111A  1581               	bsf	1,3
  6115                           
  6116                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6117  111B  0846               	movf	_DimmerLights^(0+128),w
  6118  111C  0086               	movwf	6
  6119  111D  3001               	movlw	1	; select bank2/3
  6120  111E  0087               	movwf	7
  6121  111F  1601               	bsf	1,4
  6122                           
  6123                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6124  1120  0846               	movf	_DimmerLights^(0+128),w
  6125  1121  0086               	movwf	6
  6126  1122  3001               	movlw	1	; select bank2/3
  6127  1123  0087               	movwf	7
  6128  1124  1681               	bsf	1,5
  6129  1125  0008               	return
  6130  1126                     __end_of_setDimmerLights_DimmingOn:	
  6131                           
  6132                           	psect	text16
  6133  1F5B                     __ptext16:	
  6134 ;; *************** function _getSw_KeyStatus *****************
  6135 ;; Defined at:
  6136 ;;		line 223 in file "../src/Switch_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  sw              1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  sw              1    6[COMMON] unsigned char 
  6141 ;;  status          1    5[COMMON] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      unsigned char 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;Total ram usage:        5 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    3
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_setSw_Main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _getSw_KeyStatus
  6167  1F5B                     _getSw_KeyStatus:	
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6171                           ;getSw_KeyStatus@sw stored from wreg
  6172  1F5B  00F6               	movwf	getSw_KeyStatus@sw
  6173                           
  6174                           ;Switch_B1.c: 224: char status = 0;
  6175  1F5C  01F5               	clrf	getSw_KeyStatus@status
  6176                           
  6177                           ;Switch_B1.c: 236: if (sw == 1) {
  6178  1F5D  0876               	movf	getSw_KeyStatus@sw,w
  6179  1F5E  3A01               	xorlw	1
  6180  1F5F  1D03               	skipz
  6181  1F60  2F6A               	goto	l7610
  6182                           
  6183                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6184  1F61  01F3               	clrf	_getSw_KeyStatus$6284
  6185  1F62  0AF3               	incf	_getSw_KeyStatus$6284,f
  6186  1F63  0020               	movlb	0	; select bank0
  6187  1F64  1F0C               	btfss	12,6	;volatile
  6188  1F65  1A0C               	btfsc	12,4	;volatile
  6189  1F66  2F68               	goto	l7608
  6190  1F67  01F3               	clrf	_getSw_KeyStatus$6284
  6191  1F68                     l7608:	
  6192  1F68  0873               	movf	_getSw_KeyStatus$6284,w
  6193  1F69  2F76               	goto	L2
  6194  1F6A                     l7610:	
  6195                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6196                           
  6197  1F6A  0876               	movf	getSw_KeyStatus@sw,w
  6198  1F6B  3A02               	xorlw	2
  6199  1F6C  1D03               	skipz
  6200  1F6D  2F79               	goto	l7620
  6201                           
  6202                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6203  1F6E  01F4               	clrf	_getSw_KeyStatus$6285
  6204  1F6F  0AF4               	incf	_getSw_KeyStatus$6285,f
  6205  1F70  0020               	movlb	0	; select bank0
  6206  1F71  1C0C               	btfss	12,0	;volatile
  6207  1F72  188D               	btfsc	13,1	;volatile
  6208  1F73  2F75               	goto	l7618
  6209  1F74  01F4               	clrf	_getSw_KeyStatus$6285
  6210  1F75                     l7618:	
  6211  1F75  0874               	movf	_getSw_KeyStatus$6285,w
  6212  1F76                     L2:	
  6213  1F76  00F2               	movwf	??_getSw_KeyStatus
  6214  1F77  0872               	movf	??_getSw_KeyStatus,w
  6215  1F78  00F5               	movwf	getSw_KeyStatus@status
  6216  1F79                     l7620:	
  6217                           
  6218                           ;Switch_B1.c: 240: }
  6219                           ;Switch_B1.c: 247: return status;
  6220  1F79  0875               	movf	getSw_KeyStatus@status,w
  6221  1F7A  0008               	return
  6222  1F7B                     __end_of_getSw_KeyStatus:	
  6223                           
  6224                           	psect	text17
  6225  1D18                     __ptext17:	
  6226 ;; *************** function _SwPointSelect *****************
  6227 ;; Defined at:
  6228 ;;		line 25 in file "../src/Switch_B1.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  sw              1    wreg     unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  sw              1    3[COMMON] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;		None               void
  6235 ;; Registers used:
  6236 ;;		wreg
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;Total ram usage:        2 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    3
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_setSw_Main
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function _SwPointSelect
  6258  1D18                     _SwPointSelect:	
  6259                           
  6260                           ;incstack = 0
  6261                           ; Regs used in _SwPointSelect: [wreg]
  6262                           ;SwPointSelect@sw stored from wreg
  6263  1D18  00F3               	movwf	SwPointSelect@sw
  6264                           
  6265                           ;Switch_B1.c: 28: if (sw == 1) {
  6266  1D19  0873               	movf	SwPointSelect@sw,w
  6267  1D1A  3A01               	xorlw	1
  6268  1D1B  1D03               	skipz
  6269  1D1C  2D22               	goto	l7594
  6270                           
  6271                           ;Switch_B1.c: 29: Sw = &Sw1;
  6272  1D1D  30BE               	movlw	_Sw1& (0+255)
  6273  1D1E  00F2               	movwf	??_SwPointSelect
  6274  1D1F  0872               	movf	??_SwPointSelect,w
  6275  1D20  00FB               	movwf	_Sw
  6276                           
  6277                           ;Switch_B1.c: 30: }
  6278  1D21  0008               	return
  6279  1D22                     l7594:	
  6280                           
  6281                           ;Switch_B1.c: 33: else if (sw == 2) {
  6282  1D22  0873               	movf	SwPointSelect@sw,w
  6283  1D23  3A02               	xorlw	2
  6284  1D24  1D03               	skipz
  6285  1D25  0008               	return
  6286                           
  6287                           ;Switch_B1.c: 34: Sw = &Sw2;
  6288  1D26  30C7               	movlw	_Sw2& (0+255)
  6289  1D27  00F2               	movwf	??_SwPointSelect
  6290  1D28  0872               	movf	??_SwPointSelect,w
  6291  1D29  00FB               	movwf	_Sw
  6292  1D2A  0008               	return
  6293  1D2B                     __end_of_SwPointSelect:	
  6294                           
  6295                           	psect	text18
  6296  1BB0                     __ptext18:	
  6297 ;; *************** function _Switch_Initialization *****************
  6298 ;; Defined at:
  6299 ;;		line 46 in file "../src/Switch_B1.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;		None               void
  6306 ;; Registers used:
  6307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    6
  6320 ;; This function calls:
  6321 ;;		_TouchPower
  6322 ;;		_setSw_Initialization
  6323 ;; This function is called by:
  6324 ;;		_main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _Switch_Initialization
  6330  1BB0                     _Switch_Initialization:	
  6331                           
  6332                           ;Switch_B1.c: 47: TouchPower();
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6336  1BB0  319D  25D1  319B   	fcall	_TouchPower
  6337                           
  6338                           ;Switch_B1.c: 49: WPUB1 = 0;
  6339  1BB3  0024               	movlb	4	; select bank4
  6340  1BB4  108D               	bcf	13,1	;volatile
  6341                           
  6342                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6343  1BB5  3001               	movlw	1
  6344  1BB6  319B  230C  319B   	fcall	_setSw_Initialization
  6345                           
  6346                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6347  1BB9  3002               	movlw	2
  6348  1BBA  319B  230C         	fcall	_setSw_Initialization
  6349  1BBC  0008               	return
  6350  1BBD                     __end_of_Switch_Initialization:	
  6351                           
  6352                           	psect	text19
  6353  1B0C                     __ptext19:	
  6354 ;; *************** function _setSw_Initialization *****************
  6355 ;; Defined at:
  6356 ;;		line 93 in file "../src/Switch_B1.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  sw              1    wreg     unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  sw              1    6[COMMON] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;		None               void
  6363 ;; Registers used:
  6364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;Total ram usage:        1 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    5
  6377 ;; This function calls:
  6378 ;;		_setLED
  6379 ;; This function is called by:
  6380 ;;		_Switch_Initialization
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _setSw_Initialization
  6386  1B0C                     _setSw_Initialization:	
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6390                           ;setSw_Initialization@sw stored from wreg
  6391  1B0C  00F6               	movwf	setSw_Initialization@sw
  6392                           
  6393                           ;Switch_B1.c: 94: setLED(sw, 1);
  6394  1B0D  01F4               	clrf	setLED@command
  6395  1B0E  0AF4               	incf	setLED@command,f
  6396  1B0F  0876               	movf	setSw_Initialization@sw,w
  6397  1B10  3197  2741         	fcall	_setLED
  6398  1B12  0008               	return
  6399  1B13                     __end_of_setSw_Initialization:	
  6400                           
  6401                           	psect	text20
  6402  1DD1                     __ptext20:	
  6403 ;; *************** function _TouchPower *****************
  6404 ;; Defined at:
  6405 ;;		line 10 in file "../src/Switch_B1.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;		None
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        0 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    4
  6426 ;; This function calls:
  6427 ;;		_Timeout_Counter
  6428 ;;		_set_TimeoutCleared
  6429 ;; This function is called by:
  6430 ;;		_Switch_Initialization
  6431 ;;		_Switch_Main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _TouchPower
  6437  1DD1                     _TouchPower:	
  6438                           
  6439                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6440                           
  6441                           ;incstack = 0
  6442                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6443  1DD1  0022               	movlb	2	; select bank2
  6444  1DD2  1C20               	btfss	_myMain^(0+256),0
  6445  1DD3  0008               	return
  6446                           
  6447                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6448  1DD4  0020               	movlb	0	; select bank0
  6449  1DD5  1A8E               	btfsc	14,5	;volatile
  6450  1DD6  0008               	return
  6451  1DD7  2DDD               	goto	l9846
  6452  1DD8                     l2757:	
  6453                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6454                           
  6455                           
  6456                           ;Switch_B1.c: 14: RC5 = 1;
  6457  1DD8  0020               	movlb	0	; select bank0
  6458  1DD9  168E               	bsf	14,5	;volatile
  6459                           
  6460                           ;Switch_B1.c: 15: Timeout_Counter();
  6461  1DDA  319D  25E6  319D   	fcall	_Timeout_Counter
  6462  1DDD                     l9846:	
  6463  1DDD  0020               	movlb	0	; select bank0
  6464  1DDE  1A8E               	btfsc	14,5	;volatile
  6465  1DDF  2DE3               	goto	l9850
  6466  1DE0  0022               	movlb	2	; select bank2
  6467  1DE1  1D2B               	btfss	(_myMain^(0+256)+11),2
  6468  1DE2  2DD8               	goto	l2757
  6469  1DE3                     l9850:	
  6470                           
  6471                           ;Switch_B1.c: 16: }
  6472                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6473  1DE3  319A  22DF         	fcall	_set_TimeoutCleared
  6474  1DE5  0008               	return
  6475  1DE6                     __end_of_TouchPower:	
  6476                           
  6477                           	psect	text21
  6478  1ADF                     __ptext21:	
  6479 ;; *************** function _set_TimeoutCleared *****************
  6480 ;; Defined at:
  6481 ;;		line 282 in file "../src/Main_B1.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;		None               void
  6488 ;; Registers used:
  6489 ;;		status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_getAD
  6506 ;;		_TouchPower
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _set_TimeoutCleared
  6512  1ADF                     _set_TimeoutCleared:	
  6513                           
  6514                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _set_TimeoutCleared: [status,2]
  6518  1ADF  0022               	movlb	2	; select bank2
  6519  1AE0  112B               	bcf	(_myMain^(0+256)+11),2
  6520                           
  6521                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6522  1AE1  01AC               	clrf	(_myMain^(0+256)+12)
  6523  1AE2  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6524  1AE3  0008               	return
  6525  1AE4                     __end_of_set_TimeoutCleared:	
  6526                           
  6527                           	psect	text22
  6528  1DE6                     __ptext22:	
  6529 ;; *************** function _Timeout_Counter *****************
  6530 ;; Defined at:
  6531 ;;		line 273 in file "../src/Main_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    3
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_getAD
  6556 ;;		_TouchPower
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _Timeout_Counter
  6562  1DE6                     _Timeout_Counter:	
  6563                           
  6564                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6568  1DE6  3001               	movlw	1
  6569  1DE7  0022               	movlb	2	; select bank2
  6570  1DE8  07AC               	addwf	(_myMain^(0+256)+12),f
  6571  1DE9  3000               	movlw	0
  6572  1DEA  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6573                           
  6574                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6575  1DEB  300C               	movlw	12
  6576  1DEC  3E20               	addlw	_myMain& (0+255)
  6577  1DED  0086               	movwf	6
  6578  1DEE  3001               	movlw	1	; select bank2/3
  6579  1DEF  0087               	movwf	7
  6580  1DF0  3F40               	moviw [0]fsr1
  6581  1DF1  3AA8               	xorlw	168
  6582  1DF2  1D03               	skipz
  6583  1DF3  2DF6               	goto	u10775
  6584  1DF4  3F41               	moviw [1]fsr1
  6585  1DF5  3A61               	xorlw	97
  6586  1DF6                     u10775:	
  6587  1DF6  1D03               	skipz
  6588  1DF7  0008               	return
  6589                           
  6590                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6591  1DF8  01AC               	clrf	(_myMain^(0+256)+12)
  6592  1DF9  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6593                           
  6594                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6595  1DFA  152B               	bsf	(_myMain^(0+256)+11),2
  6596  1DFB  0008               	return
  6597  1DFC                     __end_of_Timeout_Counter:	
  6598                           
  6599                           	psect	text23
  6600  1ABD                     __ptext23:	
  6601 ;; *************** function _RF_Main *****************
  6602 ;; Defined at:
  6603 ;;		line 26 in file "../src/RF_Control_B1.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;		None               void
  6610 ;; Registers used:
  6611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:   10
  6624 ;; This function calls:
  6625 ;;		_setRF_Main
  6626 ;; This function is called by:
  6627 ;;		_main
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           
  6632                           ;psect for function _RF_Main
  6633  1ABD                     _RF_Main:	
  6634                           
  6635                           ;RF_Control_B1.c: 28: setRF_Main();
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6639  1ABD  3186  2600         	fcall	_setRF_Main
  6640  1ABF  0008               	return
  6641  1AC0                     __end_of_RF_Main:	
  6642                           
  6643                           	psect	text24
  6644  0600                     __ptext24:	
  6645 ;; *************** function _setRF_Main *****************
  6646 ;; Defined at:
  6647 ;;		line 53 in file "../src/RF_Control_B1.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  error           1   76[BANK0 ] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        2 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    9
  6668 ;; This function calls:
  6669 ;;		_CC2500_PowerOnInitial
  6670 ;;		_CC2500_RxData
  6671 ;;		_CC2500_TxData
  6672 ;;		_CC2500_WriteCommand
  6673 ;;		_RF_RxDisable
  6674 ;;		___lwdiv
  6675 ;;		_getBuz_GO
  6676 ;;		_getRF_KeyStatus
  6677 ;;		_getRxData
  6678 ;; This function is called by:
  6679 ;;		_RF_Main
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _setRF_Main
  6685  0600                     _setRF_Main:	
  6686                           
  6687                           ;RF_Control_B1.c: 54: char error = 0;
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6691  0600  0020               	movlb	0	; select bank0
  6692  0601  01EC               	clrf	setRF_Main@error
  6693                           
  6694                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6695  0602  0021               	movlb	1	; select bank1
  6696  0603  1C20               	btfss	_RF1^(0+128),0
  6697  0604  2EBC               	goto	l2364
  6698                           
  6699                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6700  0605  319C  2481  3186   	fcall	_getBuz_GO
  6701  0608  0873               	movf	?_getBuz_GO+1,w
  6702  0609  0472               	iorwf	?_getBuz_GO,w
  6703  060A  1D03               	skipz
  6704  060B  2E9D               	goto	l9816
  6705                           
  6706                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6707  060C  319C  24D2  3186   	fcall	_getRF_KeyStatus
  6708  060F  3A01               	xorlw	1
  6709  0610  3000               	movlw	0
  6710  0611  1903               	skipnz
  6711  0612  3001               	movlw	1
  6712  0613  0020               	movlb	0	; select bank0
  6713  0614  00EB               	movwf	??_setRF_Main
  6714  0615  0CEB               	rrf	??_setRF_Main,f
  6715  0616  0CEB               	rrf	??_setRF_Main,f
  6716  0617  0021               	movlb	1	; select bank1
  6717  0618  0820               	movf	_RF1^(0+128),w
  6718  0619  0020               	movlb	0	; select bank0
  6719  061A  066B               	xorwf	??_setRF_Main,w
  6720  061B  397F               	andlw	-129
  6721  061C  066B               	xorwf	??_setRF_Main,w
  6722  061D  0021               	movlb	1	; select bank1
  6723  061E  00A0               	movwf	_RF1^(0+128)
  6724                           
  6725                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6726  061F  1FA0               	btfss	_RF1^(0+128),7
  6727  0620  2E23               	goto	l2368
  6728  0621  1F20               	btfss	_RF1^(0+128),6
  6729  0622  2E9D               	goto	l9816
  6730  0623                     l2368:	
  6731                           
  6732                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6733  0623  1D20               	btfss	_RF1^(0+128),2
  6734  0624  2E64               	goto	l2369
  6735                           
  6736                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6737  0625  1B20               	btfsc	_RF1^(0+128),6
  6738  0626  2E5F               	goto	l9788
  6739                           
  6740                           ;RF_Control_B1.c: 68: RF1.Count++;
  6741  0627  3001               	movlw	1
  6742  0628  07A2               	addwf	(_RF1^(0+128)+2),f
  6743  0629  3000               	movlw	0
  6744  062A  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6745                           
  6746                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6747  062B  3014               	movlw	20
  6748  062C  00F2               	movwf	___lwdiv@divisor
  6749  062D  3000               	movlw	0
  6750  062E  00F3               	movwf	___lwdiv@divisor+1
  6751  062F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6752  0630  01F5               	clrf	___lwdiv@dividend+1
  6753  0631  07F5               	addwf	___lwdiv@dividend+1,f
  6754  0632  0827               	movf	(_RF1^(0+128)+7),w
  6755  0633  01F4               	clrf	___lwdiv@dividend
  6756  0634  07F4               	addwf	___lwdiv@dividend,f
  6757  0635  3192  2261  3186   	fcall	___lwdiv
  6758  0638  0873               	movf	?___lwdiv+1,w
  6759  0639  0021               	movlb	1	; select bank1
  6760  063A  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6761  063B  1D03               	skipz
  6762  063C  2E3F               	goto	u11285
  6763  063D  0872               	movf	?___lwdiv,w
  6764  063E  0222               	subwf	(_RF1^(0+128)+2),w
  6765  063F                     u11285:	
  6766  063F  1C03               	skipc
  6767  0640  2E9D               	goto	l9816
  6768                           
  6769                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6770  0641  3014               	movlw	20
  6771  0642  00F2               	movwf	___lwdiv@divisor
  6772  0643  3000               	movlw	0
  6773  0644  00F3               	movwf	___lwdiv@divisor+1
  6774  0645  0828               	movf	((_RF1+1)^(0+128)+7),w
  6775  0646  01F5               	clrf	___lwdiv@dividend+1
  6776  0647  07F5               	addwf	___lwdiv@dividend+1,f
  6777  0648  0827               	movf	(_RF1^(0+128)+7),w
  6778  0649  01F4               	clrf	___lwdiv@dividend
  6779  064A  07F4               	addwf	___lwdiv@dividend,f
  6780  064B  3192  2261  3186   	fcall	___lwdiv
  6781  064E  0873               	movf	?___lwdiv+1,w
  6782  064F  0021               	movlb	1	; select bank1
  6783  0650  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6784  0651  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6785  0652  0872               	movf	?___lwdiv,w
  6786  0653  01A2               	clrf	(_RF1^(0+128)+2)
  6787  0654  07A2               	addwf	(_RF1^(0+128)+2),f
  6788                           
  6789                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6790  0655  1120               	bcf	_RF1^(0+128),2
  6791                           
  6792                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6793  0656  01AA               	clrf	(_RF1^(0+128)+10)
  6794  0657  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6795                           
  6796                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6797  0658  319C  2423  3186   	fcall	_RF_RxDisable
  6798                           
  6799                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6800  065B  3189  216D  3186   	fcall	_CC2500_TxData
  6801                           
  6802                           ;RF_Control_B1.c: 77: }
  6803                           ;RF_Control_B1.c: 78: } else {
  6804  065E  2E9D               	goto	l9816
  6805  065F                     l9788:	
  6806                           
  6807                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6808  065F  0021               	movlb	1	; select bank1
  6809  0660  01A2               	clrf	(_RF1^(0+128)+2)
  6810  0661  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6811                           
  6812                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6813  0662  1120               	bcf	_RF1^(0+128),2
  6814                           
  6815                           ;RF_Control_B1.c: 81: }
  6816                           ;RF_Control_B1.c: 82: } else {
  6817  0663  2E9D               	goto	l9816
  6818  0664                     l2369:	
  6819                           
  6820                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6821  0664  1DA0               	btfss	_RF1^(0+128),3
  6822  0665  2E73               	goto	l9802
  6823                           
  6824                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6825  0666  3188  2042  3186   	fcall	_CC2500_RxData
  6826                           
  6827                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6828  0669  0021               	movlb	1	; select bank1
  6829  066A  1CA0               	btfss	_RF1^(0+128),1
  6830  066B  2E9D               	goto	l9816
  6831                           
  6832                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6833  066C  10A0               	bcf	_RF1^(0+128),1
  6834                           
  6835                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6836  066D  01AA               	clrf	(_RF1^(0+128)+10)
  6837  066E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6838                           
  6839                           ;RF_Control_B1.c: 97: getRxData();
  6840  066F  318A  22AD  3186   	fcall	_getRxData
  6841                           
  6842                           ;RF_Control_B1.c: 100: }
  6843                           ;RF_Control_B1.c: 101: } else {
  6844  0672  2E9D               	goto	l9816
  6845  0673                     l9802:	
  6846                           
  6847                           ;RF_Control_B1.c: 102: RF1.Count++;
  6848  0673  3001               	movlw	1
  6849  0674  0021               	movlb	1	; select bank1
  6850  0675  07A2               	addwf	(_RF1^(0+128)+2),f
  6851  0676  3000               	movlw	0
  6852  0677  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6853                           
  6854                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6855  0678  3014               	movlw	20
  6856  0679  00F2               	movwf	___lwdiv@divisor
  6857  067A  3000               	movlw	0
  6858  067B  00F3               	movwf	___lwdiv@divisor+1
  6859  067C  0828               	movf	((_RF1+1)^(0+128)+7),w
  6860  067D  01F5               	clrf	___lwdiv@dividend+1
  6861  067E  07F5               	addwf	___lwdiv@dividend+1,f
  6862  067F  0827               	movf	(_RF1^(0+128)+7),w
  6863  0680  01F4               	clrf	___lwdiv@dividend
  6864  0681  07F4               	addwf	___lwdiv@dividend,f
  6865  0682  3192  2261  3186   	fcall	___lwdiv
  6866  0685  0873               	movf	?___lwdiv+1,w
  6867  0686  0021               	movlb	1	; select bank1
  6868  0687  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6869  0688  1D03               	skipz
  6870  0689  2E8C               	goto	u11315
  6871  068A  0872               	movf	?___lwdiv,w
  6872  068B  0222               	subwf	(_RF1^(0+128)+2),w
  6873  068C                     u11315:	
  6874  068C  1C03               	skipc
  6875  068D  2E9D               	goto	l9816
  6876                           
  6877                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6878  068E  01A2               	clrf	(_RF1^(0+128)+2)
  6879  068F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6880                           
  6881                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6882  0690  15A0               	bsf	_RF1^(0+128),3
  6883                           
  6884                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6885  0691  3036               	movlw	54
  6886  0692  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6887                           
  6888                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6889  0695  303A               	movlw	58
  6890  0696  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6891                           
  6892                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6893  0699  3034               	movlw	52
  6894  069A  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6895  069D                     l9816:	
  6896                           
  6897                           ;RF_Control_B1.c: 111: }
  6898                           ;RF_Control_B1.c: 112: }
  6899                           ;RF_Control_B1.c: 113: }
  6900                           ;RF_Control_B1.c: 114: }
  6901                           ;RF_Control_B1.c: 115: }
  6902                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6903  069D  3001               	movlw	1
  6904  069E  0021               	movlb	1	; select bank1
  6905  069F  07AA               	addwf	(_RF1^(0+128)+10),f
  6906  06A0  3000               	movlw	0
  6907  06A1  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6908                           
  6909                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6910  06A2  300B               	movlw	11
  6911  06A3  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6912  06A4  30B9               	movlw	185
  6913  06A5  1903               	skipnz
  6914  06A6  022A               	subwf	(_RF1^(0+128)+10),w
  6915  06A7  1C03               	skipc
  6916  06A8  2EB5               	goto	l9830
  6917                           
  6918                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6919  06A9  01AA               	clrf	(_RF1^(0+128)+10)
  6920  06AA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6921                           
  6922                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6923  06AB  11A0               	bcf	_RF1^(0+128),3
  6924                           
  6925                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6926  06AC  10A0               	bcf	_RF1^(0+128),1
  6927                           
  6928                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6929  06AD  3036               	movlw	54
  6930  06AE  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6931                           
  6932                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6933  06B1  303A               	movlw	58
  6934  06B2  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6935  06B5                     l9830:	
  6936                           
  6937                           ;RF_Control_B1.c: 125: }
  6938                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6939  06B5  0021               	movlb	1	; select bank1
  6940  06B6  1F21               	btfss	(_RF1^(0+128)+1),6
  6941  06B7  0008               	return
  6942                           
  6943                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6944  06B8  1321               	bcf	(_RF1^(0+128)+1),6
  6945                           
  6946                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6947  06B9  319D  25BC         	fcall	_CC2500_PowerOnInitial
  6948                           
  6949                           ;RF_Control_B1.c: 130: }
  6950                           ;RF_Control_B1.c: 132: } else {
  6951  06BB  0008               	return
  6952  06BC                     l2364:	
  6953                           
  6954                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6955  06BC  0022               	movlb	2	; select bank2
  6956  06BD  1C20               	btfss	_myMain^(0+256),0
  6957  06BE  0008               	return
  6958                           
  6959                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6960  06BF  0021               	movlb	1	; select bank1
  6961  06C0  1420               	bsf	_RF1^(0+128),0
  6962  06C1  0008               	return
  6963  06C2                     __end_of_setRF_Main:	
  6964                           
  6965                           	psect	text25
  6966  0AAD                     __ptext25:	
  6967 ;; *************** function _getRxData *****************
  6968 ;; Defined at:
  6969 ;;		line 227 in file "../src/RF_Control_B1.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;		None
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  error           1   74[BANK0 ] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;		None               void
  6976 ;; Registers used:
  6977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:        2 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    8
  6990 ;; This function calls:
  6991 ;;		_getMain_All_Error_Status
  6992 ;;		_setControl_Lights_Table
  6993 ;;		_setLog_Code
  6994 ;;		_setTxData
  6995 ;; This function is called by:
  6996 ;;		_setRF_Main
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _getRxData
  7002  0AAD                     _getRxData:	
  7003                           
  7004                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7008  0AAD  0023               	movlb	3	; select bank3
  7009  0AAE  0820               	movf	_RF_Data^(0+384),w
  7010  0AAF  3AAA               	xorlw	170
  7011  0AB0  1D03               	skipz
  7012  0AB1  2AC3               	goto	l9596
  7013  0AB2  0821               	movf	(_RF_Data^(0+384)+1),w
  7014  0AB3  3A01               	xorlw	1
  7015  0AB4  1D03               	skipz
  7016  0AB5  2AC3               	goto	l9596
  7017                           
  7018                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7019  0AB6  3055               	movlw	85
  7020  0AB7  0020               	movlb	0	; select bank0
  7021  0AB8  00E9               	movwf	??_getRxData
  7022  0AB9  086D               	movf	_product,w
  7023  0ABA  3E02               	addlw	2
  7024  0ABB  0086               	movwf	6
  7025  0ABC  3002               	movlw	2	; select bank4/5
  7026  0ABD  0087               	movwf	7
  7027  0ABE  0869               	movf	??_getRxData,w
  7028  0ABF  0081               	movwf	1
  7029                           
  7030                           ;RF_Control_B1.c: 231: setTxData();
  7031  0AC0  318F  274A         	fcall	_setTxData
  7032                           
  7033                           ;RF_Control_B1.c: 235: } else {
  7034  0AC2  0008               	return
  7035  0AC3                     l9596:	
  7036                           
  7037                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7038  0AC3  3000               	movlw	0
  7039  0AC4  3191  21CC  318A   	fcall	_getMain_All_Error_Status
  7040  0AC7  0020               	movlb	0	; select bank0
  7041  0AC8  00E9               	movwf	??_getRxData
  7042  0AC9  0869               	movf	??_getRxData,w
  7043  0ACA  00EA               	movwf	getRxData@error
  7044                           
  7045                           ;RF_Control_B1.c: 237: if (error == 0) {
  7046  0ACB  08EA               	movf	getRxData@error,f
  7047  0ACC  1D03               	skipz
  7048  0ACD  2B1E               	goto	l2409
  7049                           
  7050                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7051  0ACE  0021               	movlb	1	; select bank1
  7052  0ACF  1F20               	btfss	_RF1^(0+128),6
  7053  0AD0  2ADC               	goto	l9608
  7054                           
  7055                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7056  0AD1  0023               	movlb	3	; select bank3
  7057  0AD2  08A0               	movf	_RF_Data^(0+384),f
  7058  0AD3  1D03               	skipz
  7059  0AD4  0008               	return
  7060  0AD5  0821               	movf	(_RF_Data^(0+384)+1),w
  7061  0AD6  3A64               	xorlw	100
  7062  0AD7  1D03               	skipz
  7063  0AD8  0008               	return
  7064                           
  7065                           ;RF_Control_B1.c: 241: setLog_Code();
  7066  0AD9  3192  222D         	fcall	_setLog_Code
  7067                           
  7068                           ;RF_Control_B1.c: 242: }
  7069                           ;RF_Control_B1.c: 243: } else {
  7070  0ADB  0008               	return
  7071  0ADC                     l9608:	
  7072                           
  7073                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7074  0ADC  0023               	movlb	3	; select bank3
  7075  0ADD  0834               	movf	(_RF_Data^(0+384)+20),w
  7076  0ADE  3AD2               	xorlw	210
  7077  0ADF  1903               	skipnz
  7078  0AE0  2AE5               	goto	l9612
  7079  0AE1  0834               	movf	(_RF_Data^(0+384)+20),w
  7080  0AE2  3A0A               	xorlw	10
  7081  0AE3  1D03               	skipz
  7082  0AE4  0008               	return
  7083  0AE5                     l9612:	
  7084                           
  7085                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7086  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7087  0AE6  1D03               	skipz
  7088  0AE7  0008               	return
  7089  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7090  0AE9  3A02               	xorlw	2
  7091  0AEA  1D03               	skipz
  7092  0AEB  0008               	return
  7093                           
  7094                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7095  0AEC  082C               	movf	(_RF_Data^(0+384)+12),w
  7096  0AED  3AFF               	xorlw	255
  7097  0AEE  1D03               	skipz
  7098  0AEF  2AFA               	goto	l9624
  7099  0AF0  082D               	movf	(_RF_Data^(0+384)+13),w
  7100  0AF1  3AFF               	xorlw	255
  7101  0AF2  1D03               	skipz
  7102  0AF3  2AFA               	goto	l9624
  7103  0AF4  082E               	movf	(_RF_Data^(0+384)+14),w
  7104  0AF5  3AFF               	xorlw	255
  7105  0AF6  1D03               	skipz
  7106  0AF7  2AFA               	goto	l9624
  7107                           
  7108                           ;RF_Control_B1.c: 249: __nop();
  7109  0AF8  0000               	nop
  7110                           
  7111                           ;RF_Control_B1.c: 250: } else {
  7112  0AF9  0008               	return
  7113  0AFA                     l9624:	
  7114                           
  7115                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7116  0AFA  0020               	movlb	0	; select bank0
  7117  0AFB  086D               	movf	_product,w
  7118  0AFC  3E0C               	addlw	12
  7119  0AFD  0086               	movwf	6
  7120  0AFE  3002               	movlw	2	; select bank4/5
  7121  0AFF  0087               	movwf	7
  7122  0B00  0023               	movlb	3	; select bank3
  7123  0B01  082C               	movf	(_RF_Data^(0+384)+12),w
  7124  0B02  0601               	xorwf	1,w
  7125  0B03  1D03               	skipz
  7126  0B04  0008               	return
  7127  0B05  0020               	movlb	0	; select bank0
  7128  0B06  086D               	movf	_product,w
  7129  0B07  3E0D               	addlw	13
  7130  0B08  0086               	movwf	6
  7131  0B09  3002               	movlw	2	; select bank4/5
  7132  0B0A  0087               	movwf	7
  7133  0B0B  0023               	movlb	3	; select bank3
  7134  0B0C  082D               	movf	(_RF_Data^(0+384)+13),w
  7135  0B0D  0601               	xorwf	1,w
  7136  0B0E  1D03               	skipz
  7137  0B0F  0008               	return
  7138  0B10  0020               	movlb	0	; select bank0
  7139  0B11  086D               	movf	_product,w
  7140  0B12  3E0E               	addlw	14
  7141  0B13  0086               	movwf	6
  7142  0B14  3002               	movlw	2	; select bank4/5
  7143  0B15  0087               	movwf	7
  7144  0B16  0023               	movlb	3	; select bank3
  7145  0B17  082E               	movf	(_RF_Data^(0+384)+14),w
  7146  0B18  0601               	xorwf	1,w
  7147  0B19  1D03               	skipz
  7148  0B1A  0008               	return
  7149                           
  7150                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7151  0B1B  318C  24AE         	fcall	_setControl_Lights_Table
  7152                           
  7153                           ;RF_Control_B1.c: 253: }
  7154                           ;RF_Control_B1.c: 254: }
  7155                           ;RF_Control_B1.c: 256: }
  7156                           ;RF_Control_B1.c: 267: }
  7157                           ;RF_Control_B1.c: 268: }
  7158                           ;RF_Control_B1.c: 269: } else {
  7159  0B1D  0008               	return
  7160  0B1E                     l2409:	
  7161                           
  7162                           ;RF_Control_B1.c: 270: __nop();
  7163  0B1E  0000               	nop
  7164  0B1F  0008               	return
  7165  0B20                     __end_of_getRxData:	
  7166                           
  7167                           	psect	text26
  7168  122D                     __ptext26:	
  7169 ;; *************** function _setLog_Code *****************
  7170 ;; Defined at:
  7171 ;;		line 276 in file "../src/RF_Control_B1.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;		None               void
  7178 ;; Registers used:
  7179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;Total ram usage:        1 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    5
  7192 ;; This function calls:
  7193 ;;		_setBuz
  7194 ;;		_setMemory_LoopSave
  7195 ;;		_setMemory_Modify
  7196 ;;		_setProductData
  7197 ;; This function is called by:
  7198 ;;		_getRxData
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _setLog_Code
  7204  122D                     _setLog_Code:	
  7205                           
  7206                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7210  122D  0021               	movlb	1	; select bank1
  7211  122E  1320               	bcf	_RF1^(0+128),6
  7212                           
  7213                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7214  122F  0023               	movlb	3	; select bank3
  7215  1230  082C               	movf	(_RF_Data^(0+384)+12),w
  7216  1231  0020               	movlb	0	; select bank0
  7217  1232  00DE               	movwf	??_setLog_Code
  7218  1233  085E               	movf	??_setLog_Code,w
  7219  1234  00DA               	movwf	setProductData@value
  7220  1235  300C               	movlw	12
  7221  1236  319B  23D9  3192   	fcall	_setProductData
  7222                           
  7223                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7224  1239  0023               	movlb	3	; select bank3
  7225  123A  082D               	movf	(_RF_Data^(0+384)+13),w
  7226  123B  0020               	movlb	0	; select bank0
  7227  123C  00DE               	movwf	??_setLog_Code
  7228  123D  085E               	movf	??_setLog_Code,w
  7229  123E  00DA               	movwf	setProductData@value
  7230  123F  300D               	movlw	13
  7231  1240  319B  23D9  3192   	fcall	_setProductData
  7232                           
  7233                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7234  1243  0023               	movlb	3	; select bank3
  7235  1244  082E               	movf	(_RF_Data^(0+384)+14),w
  7236  1245  0020               	movlb	0	; select bank0
  7237  1246  00DE               	movwf	??_setLog_Code
  7238  1247  085E               	movf	??_setLog_Code,w
  7239  1248  00DA               	movwf	setProductData@value
  7240  1249  300E               	movlw	14
  7241  124A  319B  23D9  3192   	fcall	_setProductData
  7242                           
  7243                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7244  124D  3064               	movlw	100
  7245  124E  0020               	movlb	0	; select bank0
  7246  124F  00A4               	movwf	setBuz@time
  7247  1250  3000               	movlw	0
  7248  1251  00A5               	movwf	setBuz@time+1
  7249  1252  3001               	movlw	1
  7250  1253  3195  2584  3192   	fcall	_setBuz
  7251                           
  7252                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7253  1256  0022               	movlb	2	; select bank2
  7254  1257  1EA0               	btfss	_myMain^(0+256),5
  7255  1258  2A5D               	goto	l2424
  7256                           
  7257                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7258  1259  3001               	movlw	1
  7259  125A  319C  24A1  3192   	fcall	_setMemory_LoopSave
  7260  125D                     l2424:	
  7261                           
  7262                           ;RF_Control_B1.c: 284: }
  7263                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7264  125D  3001               	movlw	1
  7265  125E  319C  2491         	fcall	_setMemory_Modify
  7266  1260  0008               	return
  7267  1261                     __end_of_setLog_Code:	
  7268                           
  7269                           	psect	text27
  7270  1CA1                     __ptext27:	
  7271 ;; *************** function _setMemory_LoopSave *****************
  7272 ;; Defined at:
  7273 ;;		line 1059 in file "../src/MCU_B1.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  command         1    wreg     unsigned char 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  command         1    3[COMMON] unsigned char 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;		None               void
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;Total ram usage:        2 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    3
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_setLog_Code
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function _setMemory_LoopSave
  7303  1CA1                     _setMemory_LoopSave:	
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7307                           ;setMemory_LoopSave@command stored from wreg
  7308  1CA1  00F3               	movwf	setMemory_LoopSave@command
  7309                           
  7310                           ;MCU_B1.c: 1060: Memory.LoopSave = command == 1 ? 1 : 0;
  7311  1CA2  0873               	movf	setMemory_LoopSave@command,w
  7312  1CA3  3A01               	xorlw	1
  7313  1CA4  3000               	movlw	0
  7314  1CA5  1903               	skipnz
  7315  1CA6  3001               	movlw	1
  7316  1CA7  00F2               	movwf	??_setMemory_LoopSave
  7317  1CA8  0DF2               	rlf	??_setMemory_LoopSave,f
  7318  1CA9  0DF2               	rlf	??_setMemory_LoopSave,f
  7319  1CAA  0024               	movlb	4	; select bank4
  7320  1CAB  0844               	movf	(_Memory^(0+512)+36),w
  7321  1CAC  0672               	xorwf	??_setMemory_LoopSave,w
  7322  1CAD  39FB               	andlw	-5
  7323  1CAE  0672               	xorwf	??_setMemory_LoopSave,w
  7324  1CAF  00C4               	movwf	(_Memory^(0+512)+36)
  7325  1CB0  0008               	return
  7326  1CB1                     __end_of_setMemory_LoopSave:	
  7327                           
  7328                           	psect	text28
  7329  0CAE                     __ptext28:	
  7330 ;; *************** function _setControl_Lights_Table *****************
  7331 ;; Defined at:
  7332 ;;		line 289 in file "../src/RF_Control_B1.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    7
  7353 ;; This function calls:
  7354 ;;		_getDimmerLights_Status
  7355 ;;		_getMain_All_LightsStatus
  7356 ;;		_setCmd_Status
  7357 ;;		_setDimmerLights_SwOff
  7358 ;;		_setDimmerLights_SwOn
  7359 ;;		_setProductData
  7360 ;;		_setRFSW_AdjControl
  7361 ;;		_setRFSW_Control
  7362 ;;		_setTxData
  7363 ;; This function is called by:
  7364 ;;		_getRxData
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _setControl_Lights_Table
  7370  0CAE                     _setControl_Lights_Table:	
  7371                           
  7372                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7376  0CAE  2D25               	goto	l9386
  7377  0CAF                     l9362:	
  7378                           ;RF_Control_B1.c: 292: case 0x00:
  7379                           
  7380                           
  7381                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7382  0CAF  319C  2405  318C   	fcall	_getMain_All_LightsStatus
  7383  0CB2  3A01               	xorlw	1
  7384  0CB3  1D03               	skipz
  7385  0CB4  2CD9               	goto	l9372
  7386                           
  7387                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7388  0CB5  3001               	movlw	1
  7389  0CB6  319B  23E7  318C   	fcall	_getDimmerLights_Status
  7390  0CB9  3A01               	xorlw	1
  7391  0CBA  1D03               	skipz
  7392  0CBB  2CC4               	goto	l2431
  7393                           
  7394                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7395  0CBC  3001               	movlw	1
  7396  0CBD  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7397                           
  7398                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7399  0CC0  3001               	movlw	1
  7400  0CC1  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7401  0CC4                     l2431:	
  7402                           
  7403                           ;RF_Control_B1.c: 299: }
  7404                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7405  0CC4  3002               	movlw	2
  7406  0CC5  319B  23E7  318C   	fcall	_getDimmerLights_Status
  7407  0CC8  3A01               	xorlw	1
  7408  0CC9  1D03               	skipz
  7409  0CCA  2CD3               	goto	l9370
  7410                           
  7411                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7412  0CCB  3002               	movlw	2
  7413  0CCC  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7414                           
  7415                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7416  0CCF  3002               	movlw	2
  7417  0CD0  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7418  0CD3                     l9370:	
  7419                           
  7420                           ;RF_Control_B1.c: 305: }
  7421                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7422  0CD3  01F2               	clrf	setCmd_Status@cmd
  7423  0CD4  0AF2               	incf	setCmd_Status@cmd,f
  7424  0CD5  3001               	movlw	1
  7425  0CD6  319D  257D         	fcall	_setCmd_Status
  7426                           
  7427                           ;RF_Control_B1.c: 315: } else {
  7428  0CD8  0008               	return
  7429  0CD9                     l9372:	
  7430                           
  7431                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7432  0CD9  0020               	movlb	0	; select bank0
  7433  0CDA  01DA               	clrf	setProductData@value
  7434  0CDB  3009               	movlw	9
  7435  0CDC  319B  23D9  318C   	fcall	_setProductData
  7436                           
  7437                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7438  0CDF  0020               	movlb	0	; select bank0
  7439  0CE0  01DA               	clrf	setProductData@value
  7440  0CE1  300B               	movlw	11
  7441  0CE2  319B  23D9  318C   	fcall	_setProductData
  7442                           
  7443                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7444  0CE5  0020               	movlb	0	; select bank0
  7445  0CE6  01DA               	clrf	setProductData@value
  7446  0CE7  300F               	movlw	15
  7447  0CE8  319B  23D9  318C   	fcall	_setProductData
  7448                           
  7449                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7450  0CEB  0020               	movlb	0	; select bank0
  7451  0CEC  01DA               	clrf	setProductData@value
  7452  0CED  3011               	movlw	17
  7453  0CEE  319B  23D9  318C   	fcall	_setProductData
  7454                           
  7455                           ;RF_Control_B1.c: 320: setTxData();
  7456  0CF1  318F  274A         	fcall	_setTxData
  7457                           
  7458                           ;RF_Control_B1.c: 321: }
  7459                           ;RF_Control_B1.c: 322: break;
  7460  0CF3  0008               	return
  7461  0CF4                     l9374:	
  7462                           ;RF_Control_B1.c: 324: case 0x20:
  7463                           
  7464                           
  7465                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7466  0CF4  0020               	movlb	0	; select bank0
  7467  0CF5  01DA               	clrf	setProductData@value
  7468  0CF6  3009               	movlw	9
  7469  0CF7  319B  23D9  318C   	fcall	_setProductData
  7470                           
  7471                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7472  0CFA  0020               	movlb	0	; select bank0
  7473  0CFB  01DA               	clrf	setProductData@value
  7474  0CFC  300B               	movlw	11
  7475  0CFD  319B  23D9  318C   	fcall	_setProductData
  7476                           
  7477                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7478  0D00  0020               	movlb	0	; select bank0
  7479  0D01  086D               	movf	_product,w
  7480  0D02  0086               	movwf	6
  7481  0D03  3002               	movlw	2	; select bank4/5
  7482  0D04  0087               	movwf	7
  7483  0D05  3002               	movlw	2	; select bank4/5
  7484  0D06  3F4F               	moviw [15]fsr1
  7485  0D07  00DA               	movwf	setProductData@value
  7486  0D08  300F               	movlw	15
  7487  0D09  319B  23D9  318C   	fcall	_setProductData
  7488                           
  7489                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7490  0D0C  0020               	movlb	0	; select bank0
  7491  0D0D  01DA               	clrf	setProductData@value
  7492  0D0E  3011               	movlw	17
  7493  0D0F  319B  23D9  318C   	fcall	_setProductData
  7494                           
  7495                           ;RF_Control_B1.c: 329: setTxData();
  7496  0D12  318F  274A         	fcall	_setTxData
  7497                           
  7498                           ;RF_Control_B1.c: 330: break;
  7499  0D14  0008               	return
  7500  0D15                     l9376:	
  7501                           ;RF_Control_B1.c: 333: case 0x01:
  7502                           
  7503                           
  7504                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7505  0D15  3001               	movlw	1
  7506  0D16  3193  2378         	fcall	_setRFSW_Control
  7507                           
  7508                           ;RF_Control_B1.c: 335: break;
  7509  0D18  0008               	return
  7510  0D19                     l9378:	
  7511                           ;RF_Control_B1.c: 339: case 0x11:
  7512                           
  7513                           
  7514                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7515  0D19  3001               	movlw	1
  7516  0D1A  3187  2781         	fcall	_setRFSW_AdjControl
  7517                           
  7518                           ;RF_Control_B1.c: 341: break;
  7519  0D1C  0008               	return
  7520  0D1D                     l9380:	
  7521                           ;RF_Control_B1.c: 346: case 0x02:
  7522                           
  7523                           
  7524                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7525  0D1D  3002               	movlw	2
  7526  0D1E  3193  2378         	fcall	_setRFSW_Control
  7527                           
  7528                           ;RF_Control_B1.c: 348: break;
  7529  0D20  0008               	return
  7530  0D21                     l9382:	
  7531                           ;RF_Control_B1.c: 351: case 0x21:
  7532                           
  7533                           
  7534                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7535  0D21  3002               	movlw	2
  7536  0D22  3187  2781         	fcall	_setRFSW_AdjControl
  7537                           
  7538                           ;RF_Control_B1.c: 370: }
  7539                           
  7540                           ;RF_Control_B1.c: 353: break;
  7541  0D24  0008               	return
  7542  0D25                     l9386:	
  7543  0D25  0023               	movlb	3	; select bank3
  7544  0D26  082F               	movf	(_RF_Data^(0+384)+15),w
  7545                           
  7546                           ; Switch size 1, requested type "space"
  7547                           ; Number of cases is 6, Range of values is 0 to 33
  7548                           ; switch strategies available:
  7549                           ; Name         Instructions Cycles
  7550                           ; simple_byte           19    10 (average)
  7551                           ; direct_byte           74     6 (fixed)
  7552                           ; jumptable            260     6 (fixed)
  7553                           ;	Chosen strategy is simple_byte
  7554  0D27  3A00               	xorlw	0	; case 0
  7555  0D28  1903               	skipnz
  7556  0D29  2CAF               	goto	l9362
  7557  0D2A  3A01               	xorlw	1	; case 1
  7558  0D2B  1903               	skipnz
  7559  0D2C  2D15               	goto	l9376
  7560  0D2D  3A03               	xorlw	3	; case 2
  7561  0D2E  1903               	skipnz
  7562  0D2F  2D1D               	goto	l9380
  7563  0D30  3A13               	xorlw	19	; case 17
  7564  0D31  1903               	skipnz
  7565  0D32  2D19               	goto	l9378
  7566  0D33  3A31               	xorlw	49	; case 32
  7567  0D34  1903               	skipnz
  7568  0D35  2CF4               	goto	l9374
  7569  0D36  3A01               	xorlw	1	; case 33
  7570  0D37  1903               	skipnz
  7571  0D38  2D21               	goto	l9382
  7572  0D39  2D3A               	goto	l2440
  7573  0D3A                     l2440:	
  7574  0D3A  0008               	return
  7575  0D3B                     __end_of_setControl_Lights_Table:	
  7576                           
  7577                           	psect	text29
  7578  1378                     __ptext29:	
  7579 ;; *************** function _setRFSW_Control *****************
  7580 ;; Defined at:
  7581 ;;		line 378 in file "../src/RF_Control_B1.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  sw              1    wreg     unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  sw              1   72[BANK0 ] unsigned char 
  7586 ;;  status          1   71[BANK0 ] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        3 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    6
  7603 ;; This function calls:
  7604 ;;		_getDimmerLights_Status
  7605 ;;		_setBuz
  7606 ;;		_setDelayOff_GO
  7607 ;;		_setDimmerLights_SwOff
  7608 ;;		_setDimmerLights_SwOn
  7609 ;;		_setRF_DimmerLights
  7610 ;;		_setTxData
  7611 ;; This function is called by:
  7612 ;;		_setControl_Lights_Table
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _setRFSW_Control
  7618  1378                     _setRFSW_Control:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7622                           ;setRFSW_Control@sw stored from wreg
  7623  1378  0020               	movlb	0	; select bank0
  7624  1379  00E8               	movwf	setRFSW_Control@sw
  7625                           
  7626                           ;RF_Control_B1.c: 379: char status = 0;
  7627  137A  01E7               	clrf	setRFSW_Control@status
  7628                           
  7629                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7630  137B  0023               	movlb	3	; select bank3
  7631  137C  0830               	movf	(_RF_Data^(0+384)+16),w
  7632  137D  3A80               	xorlw	128
  7633  137E  1D03               	skipz
  7634  137F  2BAB               	goto	l9220
  7635                           
  7636                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7637  1380  0020               	movlb	0	; select bank0
  7638  1381  01DE               	clrf	setDelayOff_GO@command
  7639  1382  0ADE               	incf	setDelayOff_GO@command,f
  7640  1383  0023               	movlb	3	; select bank3
  7641  1384  0831               	movf	(_RF_Data^(0+384)+17),w
  7642  1385  0020               	movlb	0	; select bank0
  7643  1386  00E6               	movwf	??_setRFSW_Control
  7644  1387  0866               	movf	??_setRFSW_Control,w
  7645  1388  00DF               	movwf	setDelayOff_GO@value
  7646  1389  0868               	movf	setRFSW_Control@sw,w
  7647  138A  318C  2422  3193   	fcall	_setDelayOff_GO
  7648                           
  7649                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7650  138D  0020               	movlb	0	; select bank0
  7651  138E  0868               	movf	setRFSW_Control@sw,w
  7652  138F  319B  23E7  3193   	fcall	_getDimmerLights_Status
  7653  1392  3A01               	xorlw	1
  7654  1393  1D03               	skipz
  7655  1394  2BAB               	goto	l9220
  7656                           
  7657                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7658  1395  3064               	movlw	100
  7659  1396  0020               	movlb	0	; select bank0
  7660  1397  00A4               	movwf	setBuz@time
  7661  1398  3000               	movlw	0
  7662  1399  00A5               	movwf	setBuz@time+1
  7663  139A  3001               	movlw	1
  7664  139B  3195  2584  3193   	fcall	_setBuz
  7665                           
  7666                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7667  139E  0020               	movlb	0	; select bank0
  7668  139F  01DE               	clrf	setRF_DimmerLights@on
  7669  13A0  0ADE               	incf	setRF_DimmerLights@on,f
  7670  13A1  0868               	movf	setRFSW_Control@sw,w
  7671  13A2  3196  26E2  3193   	fcall	_setRF_DimmerLights
  7672                           
  7673                           ;RF_Control_B1.c: 386: setTxData();
  7674  13A5  318F  274A  3193   	fcall	_setTxData
  7675                           
  7676                           ;RF_Control_B1.c: 387: status = 1;
  7677  13A8  0020               	movlb	0	; select bank0
  7678  13A9  01E7               	clrf	setRFSW_Control@status
  7679  13AA  0AE7               	incf	setRFSW_Control@status,f
  7680  13AB                     l9220:	
  7681                           
  7682                           ;RF_Control_B1.c: 388: }
  7683                           ;RF_Control_B1.c: 389: }
  7684                           ;RF_Control_B1.c: 391: if (status == 0) {
  7685  13AB  0020               	movlb	0	; select bank0
  7686  13AC  08E7               	movf	setRFSW_Control@status,f
  7687  13AD  1D03               	skipz
  7688  13AE  0008               	return
  7689                           
  7690                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7691  13AF  0868               	movf	setRFSW_Control@sw,w
  7692  13B0  3196  2686  3193   	fcall	_setDimmerLights_SwOn
  7693                           
  7694                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7695  13B3  0020               	movlb	0	; select bank0
  7696  13B4  0868               	movf	setRFSW_Control@sw,w
  7697  13B5  3192  22CE         	fcall	_setDimmerLights_SwOff
  7698  13B7  0008               	return
  7699  13B8                     __end_of_setRFSW_Control:	
  7700                           
  7701                           	psect	text30
  7702  0781                     __ptext30:	
  7703 ;; *************** function _setRFSW_AdjControl *****************
  7704 ;; Defined at:
  7705 ;;		line 400 in file "../src/RF_Control_B1.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  sw              1    wreg     unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  sw              1   65[BANK0 ] unsigned char 
  7710 ;;  status          1   64[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;		None               void
  7713 ;; Registers used:
  7714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        4 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    6
  7727 ;; This function calls:
  7728 ;;		_getDimmerLights_PercentToValue
  7729 ;;		_getDimmerLights_Status
  7730 ;;		_setDimmerIntr_Dimming_RF
  7731 ;;		_setDimmerIntr_MaxmumValue
  7732 ;;		_setDimmerLights_DimmingRun
  7733 ;;		_setDimmerLights_SwOff
  7734 ;;		_setDimmerLights_SwOn
  7735 ;;		_setMemory_Modify
  7736 ;;		_setProductData
  7737 ;;		_setTxData
  7738 ;; This function is called by:
  7739 ;;		_setControl_Lights_Table
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _setRFSW_AdjControl
  7745  0781                     _setRFSW_AdjControl:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7749                           ;setRFSW_AdjControl@sw stored from wreg
  7750  0781  0020               	movlb	0	; select bank0
  7751  0782  00E1               	movwf	setRFSW_AdjControl@sw
  7752                           
  7753                           ;RF_Control_B1.c: 401: char status = 0;
  7754  0783  01E0               	clrf	setRFSW_AdjControl@status
  7755                           
  7756                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7757  0784  0861               	movf	setRFSW_AdjControl@sw,w
  7758  0785  319B  23E7  3187   	fcall	_getDimmerLights_Status
  7759  0788  0020               	movlb	0	; select bank0
  7760  0789  00DE               	movwf	??_setRFSW_AdjControl
  7761  078A  085E               	movf	??_setRFSW_AdjControl,w
  7762  078B  00E0               	movwf	setRFSW_AdjControl@status
  7763                           
  7764                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7765  078C  3065               	movlw	101
  7766  078D  0023               	movlb	3	; select bank3
  7767  078E  0229               	subwf	(_RF_Data^(0+384)+9),w
  7768  078F  1C03               	skipc
  7769  0790  2F98               	goto	l9232
  7770                           
  7771                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7772  0791  3064               	movlw	100
  7773  0792  0020               	movlb	0	; select bank0
  7774  0793  00DE               	movwf	??_setRFSW_AdjControl
  7775  0794  085E               	movf	??_setRFSW_AdjControl,w
  7776  0795  0023               	movlb	3	; select bank3
  7777  0796  00A9               	movwf	(_RF_Data^(0+384)+9)
  7778                           
  7779                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7780  0797  2F9D               	goto	l9236
  7781  0798                     l9232:	
  7782  0798  08A9               	movf	(_RF_Data^(0+384)+9),f
  7783  0799  1D03               	skipz
  7784  079A  2F9D               	goto	l9236
  7785                           
  7786                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7787  079B  01A9               	clrf	(_RF_Data^(0+384)+9)
  7788  079C  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7789  079D                     l9236:	
  7790                           
  7791                           ;RF_Control_B1.c: 409: }
  7792                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7793  079D  0829               	movf	(_RF_Data^(0+384)+9),w
  7794  079E  0020               	movlb	0	; select bank0
  7795  079F  00DE               	movwf	??_setRFSW_AdjControl
  7796  07A0  085E               	movf	??_setRFSW_AdjControl,w
  7797  07A1  00DA               	movwf	setProductData@value
  7798  07A2  3009               	movlw	9
  7799  07A3  319B  23D9  3187   	fcall	_setProductData
  7800                           
  7801                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7802  07A6  0020               	movlb	0	; select bank0
  7803  07A7  0861               	movf	setRFSW_AdjControl@sw,w
  7804  07A8  00DE               	movwf	??_setRFSW_AdjControl
  7805  07A9  085E               	movf	??_setRFSW_AdjControl,w
  7806  07AA  00DA               	movwf	setProductData@value
  7807  07AB  300B               	movlw	11
  7808  07AC  319B  23D9  3187   	fcall	_setProductData
  7809                           
  7810                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7811  07AF  0020               	movlb	0	; select bank0
  7812  07B0  0861               	movf	setRFSW_AdjControl@sw,w
  7813  07B1  3E1A               	addlw	26
  7814  07B2  076D               	addwf	_product,w
  7815  07B3  00DE               	movwf	??_setRFSW_AdjControl
  7816  07B4  085E               	movf	??_setRFSW_AdjControl,w
  7817  07B5  0086               	movwf	6
  7818  07B6  3002               	movlw	2	; select bank4/5
  7819  07B7  0087               	movwf	7
  7820  07B8  0801               	movf	1,w
  7821  07B9  00DF               	movwf	??_setRFSW_AdjControl+1
  7822  07BA  085F               	movf	??_setRFSW_AdjControl+1,w
  7823  07BB  00DA               	movwf	setProductData@value
  7824  07BC  3011               	movlw	17
  7825  07BD  319B  23D9  3187   	fcall	_setProductData
  7826                           
  7827                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7828  07C0  0023               	movlb	3	; select bank3
  7829  07C1  0829               	movf	(_RF_Data^(0+384)+9),w
  7830  07C2  0020               	movlb	0	; select bank0
  7831  07C3  00DE               	movwf	??_setRFSW_AdjControl
  7832  07C4  085E               	movf	??_setRFSW_AdjControl,w
  7833  07C5  00DA               	movwf	setProductData@value
  7834  07C6  0861               	movf	setRFSW_AdjControl@sw,w
  7835  07C7  3E14               	addlw	20
  7836  07C8  319B  23D9  3187   	fcall	_setProductData
  7837                           
  7838                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7839  07CB  3001               	movlw	1
  7840  07CC  319C  2491  3187   	fcall	_setMemory_Modify
  7841                           
  7842                           ;RF_Control_B1.c: 416: if (status == 1) {
  7843  07CF  0020               	movlb	0	; select bank0
  7844  07D0  0860               	movf	setRFSW_AdjControl@status,w
  7845  07D1  3A01               	xorlw	1
  7846  07D2  1D03               	skipz
  7847  07D3  2FEB               	goto	l9246
  7848                           
  7849                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7850  07D4  0023               	movlb	3	; select bank3
  7851  07D5  0829               	movf	(_RF_Data^(0+384)+9),w
  7852  07D6  3189  2108  3187   	fcall	_getDimmerLights_PercentToValue
  7853  07D9  0020               	movlb	0	; select bank0
  7854  07DA  00DE               	movwf	??_setRFSW_AdjControl
  7855  07DB  085E               	movf	??_setRFSW_AdjControl,w
  7856  07DC  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7857  07DD  0861               	movf	setRFSW_AdjControl@sw,w
  7858  07DE  319D  25FC  3187   	fcall	_setDimmerIntr_MaxmumValue
  7859                           
  7860                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7861  07E1  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7862  07E2  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7863  07E3  0020               	movlb	0	; select bank0
  7864  07E4  0861               	movf	setRFSW_AdjControl@sw,w
  7865  07E5  3191  214F  3187   	fcall	_setDimmerIntr_Dimming_RF
  7866                           
  7867                           ;RF_Control_B1.c: 419: setTxData();
  7868  07E8  318F  274A         	fcall	_setTxData
  7869                           
  7870                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7871  07EA  0008               	return
  7872  07EB                     l9246:	
  7873  07EB  0020               	movlb	0	; select bank0
  7874  07EC  08E0               	movf	setRFSW_AdjControl@status,f
  7875  07ED  1D03               	skipz
  7876  07EE  0008               	return
  7877                           
  7878                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7879  07EF  01F4               	clrf	setDimmerLights_DimmingRun@command
  7880  07F0  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7881  07F1  0861               	movf	setRFSW_AdjControl@sw,w
  7882  07F2  319E  262B  3187   	fcall	_setDimmerLights_DimmingRun
  7883                           
  7884                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7885  07F5  0020               	movlb	0	; select bank0
  7886  07F6  0861               	movf	setRFSW_AdjControl@sw,w
  7887  07F7  3196  2686  3187   	fcall	_setDimmerLights_SwOn
  7888                           
  7889                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7890  07FA  0020               	movlb	0	; select bank0
  7891  07FB  0861               	movf	setRFSW_AdjControl@sw,w
  7892  07FC  3192  22CE         	fcall	_setDimmerLights_SwOff
  7893  07FE  0008               	return
  7894  07FF                     __end_of_setRFSW_AdjControl:	
  7895                           
  7896                           	psect	text31
  7897  1C91                     __ptext31:	
  7898 ;; *************** function _setMemory_Modify *****************
  7899 ;; Defined at:
  7900 ;;		line 1053 in file "../src/MCU_B1.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  command         1    wreg     unsigned char 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  command         1    3[COMMON] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;		None               void
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:        2 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    3
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_setLog_Code
  7925 ;;		_setRFSW_AdjControl
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function _setMemory_Modify
  7931  1C91                     _setMemory_Modify:	
  7932                           
  7933                           ;incstack = 0
  7934                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7935                           ;setMemory_Modify@command stored from wreg
  7936  1C91  00F3               	movwf	setMemory_Modify@command
  7937                           
  7938                           ;MCU_B1.c: 1054: Memory.Modify = command == 1 ? 1 : 0;
  7939  1C92  0873               	movf	setMemory_Modify@command,w
  7940  1C93  3A01               	xorlw	1
  7941  1C94  3000               	movlw	0
  7942  1C95  1903               	skipnz
  7943  1C96  3001               	movlw	1
  7944  1C97  00F2               	movwf	??_setMemory_Modify
  7945  1C98  0024               	movlb	4	; select bank4
  7946  1C99  0844               	movf	(_Memory^(0+512)+36),w
  7947  1C9A  0672               	xorwf	??_setMemory_Modify,w
  7948  1C9B  39FE               	andlw	-2
  7949  1C9C  0672               	xorwf	??_setMemory_Modify,w
  7950  1C9D  00C4               	movwf	(_Memory^(0+512)+36)
  7951                           
  7952                           ;MCU_B1.c: 1055: Memory.Time = 0;
  7953  1C9E  01C2               	clrf	(_Memory^(0+512)+34)
  7954  1C9F  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7955  1CA0  0008               	return
  7956  1CA1                     __end_of_setMemory_Modify:	
  7957                           
  7958                           	psect	text32
  7959  1E2B                     __ptext32:	
  7960 ;; *************** function _setDimmerLights_DimmingRun *****************
  7961 ;; Defined at:
  7962 ;;		line 1000 in file "../src/Dimmer_B1.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  lights          1    wreg     unsigned char 
  7965 ;;  command         1    4[COMMON] unsigned char 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  lights          1    6[COMMON] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7977 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;Total ram usage:        3 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    4
  7984 ;; This function calls:
  7985 ;;		_DimmerLights_SelectPointer
  7986 ;; This function is called by:
  7987 ;;		_setRFSW_AdjControl
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           
  7992                           ;psect for function _setDimmerLights_DimmingRun
  7993  1E2B                     _setDimmerLights_DimmingRun:	
  7994                           
  7995                           ;incstack = 0
  7996                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7997                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7998  1E2B  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7999                           
  8000                           ;Dimmer_B1.c: 1001: DimmerLights_SelectPointer(lights);
  8001  1E2C  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8002  1E2D  319D  2568         	fcall	_DimmerLights_SelectPointer
  8003                           
  8004                           ;Dimmer_B1.c: 1002: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8005  1E2F  0874               	movf	setDimmerLights_DimmingRun@command,w
  8006  1E30  3A01               	xorlw	1
  8007  1E31  3000               	movlw	0
  8008  1E32  1903               	skipnz
  8009  1E33  3001               	movlw	1
  8010  1E34  00F5               	movwf	??_setDimmerLights_DimmingRun
  8011  1E35  0021               	movlb	1	; select bank1
  8012  1E36  0A46               	incf	_DimmerLights^(0+128),w
  8013  1E37  0086               	movwf	6
  8014  1E38  3001               	movlw	1	; select bank2/3
  8015  1E39  0087               	movwf	7
  8016  1E3A  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8017  1E3B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8018  1E3C  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8019  1E3D  0801               	movf	1,w
  8020  1E3E  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8021  1E3F  39BF               	andlw	-65
  8022  1E40  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8023  1E41  0081               	movwf	1
  8024  1E42  0008               	return
  8025  1E43                     __end_of_setDimmerLights_DimmingRun:	
  8026                           
  8027                           	psect	text33
  8028  1CD2                     __ptext33:	
  8029 ;; *************** function _getRF_KeyStatus *****************
  8030 ;; Defined at:
  8031 ;;		line 166 in file "../src/RF_Control_B1.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  key             1    3[COMMON] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      unsigned char 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        3 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_setRF_Main
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _getRF_KeyStatus
  8061  1CD2                     _getRF_KeyStatus:	
  8062                           
  8063                           ;RF_Control_B1.c: 167: char key = 0;
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8067  1CD2  01F3               	clrf	getRF_KeyStatus@key
  8068                           
  8069                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8070  1CD3  01F4               	clrf	_getRF_KeyStatus$5283
  8071  1CD4  0AF4               	incf	_getRF_KeyStatus$5283,f
  8072  1CD5  0020               	movlb	0	; select bank0
  8073  1CD6  1F0C               	btfss	12,6	;volatile
  8074  1CD7  1A0C               	btfsc	12,4	;volatile
  8075  1CD8  2CDD               	goto	l7534
  8076  1CD9  1C0C               	btfss	12,0	;volatile
  8077  1CDA  188D               	btfsc	13,1	;volatile
  8078  1CDB  2CDD               	goto	l7534
  8079  1CDC  01F4               	clrf	_getRF_KeyStatus$5283
  8080  1CDD                     l7534:	
  8081  1CDD  0874               	movf	_getRF_KeyStatus$5283,w
  8082  1CDE  00F2               	movwf	??_getRF_KeyStatus
  8083  1CDF  0872               	movf	??_getRF_KeyStatus,w
  8084  1CE0  00F3               	movwf	getRF_KeyStatus@key
  8085                           
  8086                           ;RF_Control_B1.c: 179: return key;
  8087  1CE1  0873               	movf	getRF_KeyStatus@key,w
  8088  1CE2  0008               	return
  8089  1CE3                     __end_of_getRF_KeyStatus:	
  8090                           
  8091                           	psect	text34
  8092  1C81                     __ptext34:	
  8093 ;; *************** function _getBuz_GO *****************
  8094 ;; Defined at:
  8095 ;;		line 82 in file "../src/Buzzer_B1.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  i               2    6[COMMON] int 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  2    2[COMMON] int 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_setRF_Main
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _getBuz_GO
  8125  1C81                     _getBuz_GO:	
  8126                           
  8127                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8131  1C81  0021               	movlb	1	; select bank1
  8132  1C82  0C2E               	rrf	_Buz1^(0+128),w
  8133  1C83  3901               	andlw	1
  8134  1C84  00F4               	movwf	??_getBuz_GO
  8135  1C85  01F5               	clrf	??_getBuz_GO+1
  8136  1C86  0874               	movf	??_getBuz_GO,w
  8137  1C87  00F6               	movwf	getBuz_GO@i
  8138  1C88  0875               	movf	??_getBuz_GO+1,w
  8139  1C89  00F7               	movwf	getBuz_GO@i+1
  8140                           
  8141                           ;Buzzer_B1.c: 84: return i;
  8142  1C8A  0877               	movf	getBuz_GO@i+1,w
  8143  1C8B  01F3               	clrf	?_getBuz_GO+1
  8144  1C8C  07F3               	addwf	?_getBuz_GO+1,f
  8145  1C8D  0876               	movf	getBuz_GO@i,w
  8146  1C8E  01F2               	clrf	?_getBuz_GO
  8147  1C8F  07F2               	addwf	?_getBuz_GO,f
  8148  1C90  0008               	return
  8149  1C91                     __end_of_getBuz_GO:	
  8150                           
  8151                           	psect	text35
  8152  1C23                     __ptext35:	
  8153 ;; *************** function _RF_RxDisable *****************
  8154 ;; Defined at:
  8155 ;;		line 154 in file "../src/RF_Control_B1.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;		None               void
  8162 ;; Registers used:
  8163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    5
  8176 ;; This function calls:
  8177 ;;		_CC2500_WriteCommand
  8178 ;; This function is called by:
  8179 ;;		_setRF_Main
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           
  8184                           ;psect for function _RF_RxDisable
  8185  1C23                     _RF_RxDisable:	
  8186                           
  8187                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8188                           
  8189                           ;incstack = 0
  8190                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8191  1C23  0021               	movlb	1	; select bank1
  8192  1C24  18A0               	btfsc	_RF1^(0+128),1
  8193  1C25  2C28               	goto	l2394
  8194  1C26  1DA0               	btfss	_RF1^(0+128),3
  8195  1C27  0008               	return
  8196  1C28                     l2394:	
  8197                           
  8198                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8199  1C28  11A0               	bcf	_RF1^(0+128),3
  8200                           
  8201                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8202  1C29  10A0               	bcf	_RF1^(0+128),1
  8203                           
  8204                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8205  1C2A  3036               	movlw	54
  8206  1C2B  319E  265D  319C   	fcall	_CC2500_WriteCommand
  8207                           
  8208                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8209  1C2E  303A               	movlw	58
  8210  1C2F  319E  265D         	fcall	_CC2500_WriteCommand
  8211  1C31  0008               	return
  8212  1C32                     __end_of_RF_RxDisable:	
  8213                           
  8214                           	psect	text36
  8215  096D                     __ptext36:	
  8216 ;; *************** function _CC2500_TxData *****************
  8217 ;; Defined at:
  8218 ;;		line 32 in file "../src/CC2500_B1.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;		None
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;  loop_e          1    7[COMMON] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;		None               void
  8225 ;; Registers used:
  8226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;Total ram usage:        2 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    5
  8239 ;; This function calls:
  8240 ;;		_CC2500_WriteByte
  8241 ;;		_CC2500_WriteCommand
  8242 ;;		_RF_Timeout_Counter
  8243 ;;		_setRF_TimeoutCleared
  8244 ;; This function is called by:
  8245 ;;		_setRF_Main
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           
  8250                           ;psect for function _CC2500_TxData
  8251  096D                     _CC2500_TxData:	
  8252                           
  8253                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8254                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8258  096D  3036               	movlw	54
  8259  096E  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8260                           
  8261                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8262  0971  303B               	movlw	59
  8263  0972  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8264                           
  8265                           ;CC2500_B1.c: 38: RC4 = 0;
  8266  0975  0020               	movlb	0	; select bank0
  8267  0976  120E               	bcf	14,4	;volatile
  8268                           
  8269                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8270  0977  307F               	movlw	127
  8271  0978  00F6               	movwf	??_CC2500_TxData
  8272  0979  0876               	movf	??_CC2500_TxData,w
  8273  097A  0021               	movlb	1	; select bank1
  8274  097B  00CA               	movwf	_SPI0Buffer^(0+128)
  8275                           
  8276                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8277  097C  2980               	goto	l9396
  8278  097D                     l9394:	
  8279                           
  8280                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8281  097D  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8282  0980                     l9396:	
  8283  0980  0020               	movlb	0	; select bank0
  8284  0981  1D0E               	btfss	14,2	;volatile
  8285  0982  2986               	goto	l9400
  8286  0983  0021               	movlb	1	; select bank1
  8287  0984  1F21               	btfss	(_RF1^(0+128)+1),6
  8288  0985  297D               	goto	l9394
  8289  0986                     l9400:	
  8290                           
  8291                           ;CC2500_B1.c: 42: };
  8292                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8293  0986  319A  22CA  3189   	fcall	_setRF_TimeoutCleared
  8294                           
  8295                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8296  0989  319E  2613  3189   	fcall	_CC2500_WriteByte
  8297                           
  8298                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8299  098C  0021               	movlb	1	; select bank1
  8300  098D  084C               	movf	_Tx_Length^(0+128),w
  8301  098E  00F6               	movwf	??_CC2500_TxData
  8302  098F  0876               	movf	??_CC2500_TxData,w
  8303  0990  00CA               	movwf	_SPI0Buffer^(0+128)
  8304                           
  8305                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8306  0991  319E  2613  3189   	fcall	_CC2500_WriteByte
  8307                           
  8308                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8309  0994  01F7               	clrf	CC2500_TxData@loop_e
  8310  0995                     l9414:	
  8311  0995  0021               	movlb	1	; select bank1
  8312  0996  084C               	movf	_Tx_Length^(0+128),w
  8313  0997  0277               	subwf	CC2500_TxData@loop_e,w
  8314  0998  1803               	btfsc	3,0
  8315  0999  29AC               	goto	l255
  8316                           
  8317                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8318  099A  0877               	movf	CC2500_TxData@loop_e,w
  8319  099B  3EA0               	addlw	_RF_Data& (0+255)
  8320  099C  0086               	movwf	6
  8321  099D  3001               	movlw	1	; select bank3/4
  8322  099E  0087               	movwf	7
  8323  099F  0801               	movf	1,w
  8324  09A0  00F6               	movwf	??_CC2500_TxData
  8325  09A1  0876               	movf	??_CC2500_TxData,w
  8326  09A2  0021               	movlb	1	; select bank1
  8327  09A3  00CA               	movwf	_SPI0Buffer^(0+128)
  8328                           
  8329                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8330  09A4  319E  2613  3189   	fcall	_CC2500_WriteByte
  8331  09A7  3001               	movlw	1
  8332  09A8  00F6               	movwf	??_CC2500_TxData
  8333  09A9  0876               	movf	??_CC2500_TxData,w
  8334  09AA  07F7               	addwf	CC2500_TxData@loop_e,f
  8335  09AB  2995               	goto	l9414
  8336  09AC                     l255:	
  8337                           
  8338                           ;CC2500_B1.c: 51: }
  8339                           ;CC2500_B1.c: 52: RC4 = 1;
  8340  09AC  0020               	movlb	0	; select bank0
  8341  09AD  160E               	bsf	14,4	;volatile
  8342                           
  8343                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8344  09AE  3035               	movlw	53
  8345  09AF  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8346                           
  8347                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8348  09B2  29B6               	goto	l9420
  8349  09B3                     l9418:	
  8350                           
  8351                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8352  09B3  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8353  09B6                     l9420:	
  8354  09B6  0020               	movlb	0	; select bank0
  8355  09B7  180D               	btfsc	13,0	;volatile
  8356  09B8  29BC               	goto	l9424
  8357  09B9  0021               	movlb	1	; select bank1
  8358  09BA  1F21               	btfss	(_RF1^(0+128)+1),6
  8359  09BB  29B3               	goto	l9418
  8360  09BC                     l9424:	
  8361                           
  8362                           ;CC2500_B1.c: 56: };
  8363                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8364  09BC  319A  22CA  3189   	fcall	_setRF_TimeoutCleared
  8365                           
  8366                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8367  09BF  29C3               	goto	l9428
  8368  09C0                     l9426:	
  8369                           
  8370                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8371  09C0  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8372  09C3                     l9428:	
  8373  09C3  0020               	movlb	0	; select bank0
  8374  09C4  1C0D               	btfss	13,0	;volatile
  8375  09C5  29C9               	goto	l9432
  8376  09C6  0021               	movlb	1	; select bank1
  8377  09C7  1F21               	btfss	(_RF1^(0+128)+1),6
  8378  09C8  29C0               	goto	l9426
  8379  09C9                     l9432:	
  8380                           
  8381                           ;CC2500_B1.c: 61: };
  8382                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8383  09C9  319A  22CA  3189   	fcall	_setRF_TimeoutCleared
  8384                           
  8385                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8386  09CC  3036               	movlw	54
  8387  09CD  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8388                           
  8389                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8390  09D0  303B               	movlw	59
  8391  09D1  319E  265D         	fcall	_CC2500_WriteCommand
  8392                           
  8393                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8394  09D3  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8395  09D4  0008               	return
  8396  09D5                     __end_of_CC2500_TxData:	
  8397                           
  8398                           	psect	text37
  8399  0842                     __ptext37:	
  8400 ;; *************** function _CC2500_RxData *****************
  8401 ;; Defined at:
  8402 ;;		line 73 in file "../src/CC2500_B1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  loop_f          1    7[COMMON] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;		None               void
  8409 ;; Registers used:
  8410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    5
  8423 ;; This function calls:
  8424 ;;		_CC2500_ReadByte
  8425 ;;		_CC2500_ReadStatus
  8426 ;;		_CC2500_WriteByte
  8427 ;;		_CC2500_WriteCommand
  8428 ;;		_RF_Timeout_Counter
  8429 ;;		_setRF_TimeoutCleared
  8430 ;; This function is called by:
  8431 ;;		_setRF_Main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _CC2500_RxData
  8437  0842                     _CC2500_RxData:	
  8438                           
  8439                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8440                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8444  0842  0020               	movlb	0	; select bank0
  8445  0843  180D               	btfsc	13,0	;volatile
  8446  0844  0008               	return
  8447                           
  8448                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8449  0845  303B               	movlw	59
  8450  0846  3190  2092  3188   	fcall	_CC2500_ReadStatus
  8451                           
  8452                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8453  0849  0021               	movlb	1	; select bank1
  8454  084A  084F               	movf	_s_data^(0+128),w
  8455  084B  1903               	btfsc	3,2
  8456  084C  0008               	return
  8457                           
  8458                           ;CC2500_B1.c: 90: RC4 = 0;
  8459  084D  0020               	movlb	0	; select bank0
  8460  084E  120E               	bcf	14,4	;volatile
  8461                           
  8462                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8463  084F  30FF               	movlw	255
  8464  0850  00F6               	movwf	??_CC2500_RxData
  8465  0851  0876               	movf	??_CC2500_RxData,w
  8466  0852  0021               	movlb	1	; select bank1
  8467  0853  00CA               	movwf	_SPI0Buffer^(0+128)
  8468                           
  8469                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8470  0854  2858               	goto	l9452
  8471  0855                     l9450:	
  8472                           
  8473                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8474  0855  319D  25A7  3188   	fcall	_RF_Timeout_Counter
  8475  0858                     l9452:	
  8476  0858  0020               	movlb	0	; select bank0
  8477  0859  1D0E               	btfss	14,2	;volatile
  8478  085A  285E               	goto	l9456
  8479  085B  0021               	movlb	1	; select bank1
  8480  085C  1F21               	btfss	(_RF1^(0+128)+1),6
  8481  085D  2855               	goto	l9450
  8482  085E                     l9456:	
  8483                           
  8484                           ;CC2500_B1.c: 95: };
  8485                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8486  085E  319A  22CA  3188   	fcall	_setRF_TimeoutCleared
  8487                           
  8488                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8489  0861  319E  2613  3188   	fcall	_CC2500_WriteByte
  8490                           
  8491                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8492  0864  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8493                           
  8494                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8495  0867  0021               	movlb	1	; select bank1
  8496  0868  084A               	movf	_SPI0Buffer^(0+128),w
  8497  0869  00F6               	movwf	??_CC2500_RxData
  8498  086A  0876               	movf	??_CC2500_RxData,w
  8499  086B  00C9               	movwf	_Rx_Length^(0+128)
  8500                           
  8501                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8502  086C  01F7               	clrf	CC2500_RxData@loop_f
  8503  086D                     l9472:	
  8504  086D  0849               	movf	_Rx_Length^(0+128),w
  8505  086E  0277               	subwf	CC2500_RxData@loop_f,w
  8506  086F  1803               	btfsc	3,0
  8507  0870  2883               	goto	l9474
  8508                           
  8509                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8510  0871  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8513  0874  0021               	movlb	1	; select bank1
  8514  0875  084A               	movf	_SPI0Buffer^(0+128),w
  8515  0876  00F6               	movwf	??_CC2500_RxData
  8516  0877  0877               	movf	CC2500_RxData@loop_f,w
  8517  0878  3EA0               	addlw	_RF_Data& (0+255)
  8518  0879  0086               	movwf	6
  8519  087A  3001               	movlw	1	; select bank3/4
  8520  087B  0087               	movwf	7
  8521  087C  0876               	movf	??_CC2500_RxData,w
  8522  087D  0081               	movwf	1
  8523  087E  3001               	movlw	1
  8524  087F  00F6               	movwf	??_CC2500_RxData
  8525  0880  0876               	movf	??_CC2500_RxData,w
  8526  0881  07F7               	addwf	CC2500_RxData@loop_f,f
  8527  0882  286D               	goto	l9472
  8528  0883                     l9474:	
  8529                           
  8530                           ;CC2500_B1.c: 104: }
  8531                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8532  0883  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8533                           
  8534                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8535  0886  0021               	movlb	1	; select bank1
  8536  0887  084A               	movf	_SPI0Buffer^(0+128),w
  8537  0888  00F6               	movwf	??_CC2500_RxData
  8538  0889  0876               	movf	??_CC2500_RxData,w
  8539  088A  00C8               	movwf	_RSSI^(0+128)
  8540                           
  8541                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8542  088B  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8543                           
  8544                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8545  088E  0021               	movlb	1	; select bank1
  8546  088F  084A               	movf	_SPI0Buffer^(0+128),w
  8547  0890  00F6               	movwf	??_CC2500_RxData
  8548  0891  0876               	movf	??_CC2500_RxData,w
  8549  0892  00C2               	movwf	_CRC^(0+128)
  8550                           
  8551                           ;CC2500_B1.c: 109: RC4 = 1;
  8552  0893  0020               	movlb	0	; select bank0
  8553  0894  160E               	bsf	14,4	;volatile
  8554                           
  8555                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8556  0895  0021               	movlb	1	; select bank1
  8557  0896  1BC2               	btfsc	_CRC^(0+128),7
  8558                           
  8559                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8560  0897  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8561                           
  8562                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8563  0898  11A0               	bcf	_RF1^(0+128),3
  8564                           
  8565                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8566  0899  14A0               	bsf	_RF1^(0+128),1
  8567                           
  8568                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8569  089A  3036               	movlw	54
  8570  089B  319E  265D  3188   	fcall	_CC2500_WriteCommand
  8571                           
  8572                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8573  089E  303A               	movlw	58
  8574  089F  319E  265D         	fcall	_CC2500_WriteCommand
  8575  08A1  0021               	movlb	1	; select bank1
  8576  08A2  0008               	return
  8577  08A3                     __end_of_CC2500_RxData:	
  8578                           
  8579                           	psect	text38
  8580  1092                     __ptext38:	
  8581 ;; *************** function _CC2500_ReadStatus *****************
  8582 ;; Defined at:
  8583 ;;		line 308 in file "../src/CC2500_B1.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  status_addr     1    wreg     unsigned char 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  status_addr     1    5[COMMON] unsigned char 
  8588 ;; Return value:  Size  Location     Type
  8589 ;;		None               void
  8590 ;; Registers used:
  8591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;Total ram usage:        2 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    4
  8604 ;; This function calls:
  8605 ;;		_CC2500_ReadByte
  8606 ;;		_CC2500_WriteByte
  8607 ;;		_RF_Timeout_Counter
  8608 ;;		_setRF_TimeoutCleared
  8609 ;; This function is called by:
  8610 ;;		_CC2500_RxData
  8611 ;; This function uses a non-reentrant model
  8612 ;;
  8613                           
  8614                           
  8615                           ;psect for function _CC2500_ReadStatus
  8616  1092                     _CC2500_ReadStatus:	
  8617                           
  8618                           ;incstack = 0
  8619                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8620                           ;CC2500_ReadStatus@status_addr stored from wreg
  8621  1092  00F5               	movwf	CC2500_ReadStatus@status_addr
  8622                           
  8623                           ;CC2500_B1.c: 309: RC4 = 0;
  8624  1093  0020               	movlb	0	; select bank0
  8625  1094  120E               	bcf	14,4	;volatile
  8626                           
  8627                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8628  1095  0875               	movf	CC2500_ReadStatus@status_addr,w
  8629  1096  3EC0               	addlw	192
  8630  1097  00F4               	movwf	??_CC2500_ReadStatus
  8631  1098  0874               	movf	??_CC2500_ReadStatus,w
  8632  1099  0021               	movlb	1	; select bank1
  8633  109A  00CA               	movwf	_SPI0Buffer^(0+128)
  8634                           
  8635                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8636  109B  289F               	goto	l9256
  8637  109C                     l9254:	
  8638                           
  8639                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8640  109C  319D  25A7  3190   	fcall	_RF_Timeout_Counter
  8641  109F                     l9256:	
  8642  109F  0020               	movlb	0	; select bank0
  8643  10A0  1D0E               	btfss	14,2	;volatile
  8644  10A1  28A5               	goto	l9260
  8645  10A2  0021               	movlb	1	; select bank1
  8646  10A3  1F21               	btfss	(_RF1^(0+128)+1),6
  8647  10A4  289C               	goto	l9254
  8648  10A5                     l9260:	
  8649                           
  8650                           ;CC2500_B1.c: 314: };
  8651                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8652  10A5  319A  22CA  3190   	fcall	_setRF_TimeoutCleared
  8653                           
  8654                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8655  10A8  319E  2613  3190   	fcall	_CC2500_WriteByte
  8656                           
  8657                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8658  10AB  319E  26C8         	fcall	_CC2500_ReadByte
  8659                           
  8660                           ;CC2500_B1.c: 319: RC4 = 1;
  8661  10AD  0020               	movlb	0	; select bank0
  8662  10AE  160E               	bsf	14,4	;volatile
  8663                           
  8664                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8665  10AF  0021               	movlb	1	; select bank1
  8666  10B0  084A               	movf	_SPI0Buffer^(0+128),w
  8667  10B1  00F4               	movwf	??_CC2500_ReadStatus
  8668  10B2  0874               	movf	??_CC2500_ReadStatus,w
  8669  10B3  00CF               	movwf	_s_data^(0+128)
  8670  10B4  0008               	return
  8671  10B5                     __end_of_CC2500_ReadStatus:	
  8672                           
  8673                           	psect	text39
  8674  1EC8                     __ptext39:	
  8675 ;; *************** function _CC2500_ReadByte *****************
  8676 ;; Defined at:
  8677 ;;		line 242 in file "../src/CC2500_B1.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  loop_b          1    3[COMMON] unsigned char 
  8682 ;; Return value:  Size  Location     Type
  8683 ;;		None               void
  8684 ;; Registers used:
  8685 ;;		wreg, status,2, status,0
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;Total ram usage:        2 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    3
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_CC2500_RxData
  8702 ;;		_CC2500_ReadStatus
  8703 ;;		_CC2500_ReadREG
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function _CC2500_ReadByte
  8709  1EC8                     _CC2500_ReadByte:	
  8710                           
  8711                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8712                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8716  1EC8  01F3               	clrf	CC2500_ReadByte@loop_b
  8717  1EC9                     L3:	
  8718  1EC9  3008               	movlw	8
  8719  1ECA  0273               	subwf	CC2500_ReadByte@loop_b,w
  8720  1ECB  1803               	btfsc	3,0
  8721  1ECC  0008               	return
  8722                           
  8723                           ;CC2500_B1.c: 245: RC1 = 1;
  8724  1ECD  0020               	movlb	0	; select bank0
  8725  1ECE  148E               	bsf	14,1	;volatile
  8726                           
  8727                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8728  1ECF  1003               	clrc
  8729  1ED0  0021               	movlb	1	; select bank1
  8730  1ED1  0DCA               	rlf	_SPI0Buffer^(0+128),f
  8731                           
  8732                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8733  1ED2  0020               	movlb	0	; select bank0
  8734  1ED3  1D0E               	btfss	14,2	;volatile
  8735  1ED4  2ED8               	goto	l6802
  8736                           
  8737                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8738  1ED5  0021               	movlb	1	; select bank1
  8739  1ED6  144A               	bsf	_SPI0Buffer^(0+128),0
  8740  1ED7  2EDD               	goto	l6804
  8741  1ED8                     l6802:	
  8742                           
  8743                           ;CC2500_B1.c: 249: else
  8744                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8745  1ED8  30FE               	movlw	254
  8746  1ED9  00F2               	movwf	??_CC2500_ReadByte
  8747  1EDA  0872               	movf	??_CC2500_ReadByte,w
  8748  1EDB  0021               	movlb	1	; select bank1
  8749  1EDC  05CA               	andwf	_SPI0Buffer^(0+128),f
  8750  1EDD                     l6804:	
  8751                           
  8752                           ;CC2500_B1.c: 251: RC1 = 0;
  8753  1EDD  0020               	movlb	0	; select bank0
  8754  1EDE  108E               	bcf	14,1	;volatile
  8755  1EDF  3001               	movlw	1
  8756  1EE0  00F2               	movwf	??_CC2500_ReadByte
  8757  1EE1  0872               	movf	??_CC2500_ReadByte,w
  8758  1EE2  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8759  1EE3  2EC9               	goto	L3
  8760  1EE4                     __end_of_CC2500_ReadByte:	
  8761                           
  8762                           	psect	text40
  8763  1DBC                     __ptext40:	
  8764 ;; *************** function _CC2500_PowerOnInitial *****************
  8765 ;; Defined at:
  8766 ;;		line 126 in file "../src/CC2500_B1.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;		None
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;		None
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;Total ram usage:        0 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    6
  8787 ;; This function calls:
  8788 ;;		_CC2500_ClearRXFIFO
  8789 ;;		_CC2500_ClearTXFIFO
  8790 ;;		_CC2500_FrequencyCabr
  8791 ;;		_CC2500_InitPATable
  8792 ;;		_CC2500_InitSetREG
  8793 ;;		_CC2500_PowerRST
  8794 ;;		_CC2500_SIDLEMode
  8795 ;; This function is called by:
  8796 ;;		_main
  8797 ;;		_setRF_Main
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           
  8802                           ;psect for function _CC2500_PowerOnInitial
  8803  1DBC                     _CC2500_PowerOnInitial:	
  8804                           
  8805                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8806                           
  8807                           ;incstack = 0
  8808                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8809  1DBC  3193  23B8  319D   	fcall	_CC2500_PowerRST
  8810                           
  8811                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8812  1DBF  3191  21A2  319D   	fcall	_CC2500_InitSetREG
  8813                           
  8814                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8815  1DC2  319F  271E  319D   	fcall	_CC2500_InitPATable
  8816                           
  8817                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8818  1DC5  319A  22D2  319D   	fcall	_CC2500_ClearTXFIFO
  8819                           
  8820                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8821  1DC8  319A  22CE  319D   	fcall	_CC2500_ClearRXFIFO
  8822                           
  8823                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8824  1DCB  319B  235E  319D   	fcall	_CC2500_FrequencyCabr
  8825                           
  8826                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8827  1DCE  319A  22D6         	fcall	_CC2500_SIDLEMode
  8828  1DD0  0008               	return
  8829  1DD1                     __end_of_CC2500_PowerOnInitial:	
  8830                           
  8831                           	psect	text41
  8832  1AD6                     __ptext41:	
  8833 ;; *************** function _CC2500_SIDLEMode *****************
  8834 ;; Defined at:
  8835 ;;		line 216 in file "../src/CC2500_B1.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;		None               void
  8842 ;; Registers used:
  8843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;Total ram usage:        0 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    5
  8856 ;; This function calls:
  8857 ;;		_CC2500_WriteCommand
  8858 ;; This function is called by:
  8859 ;;		_CC2500_PowerOnInitial
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           
  8864                           ;psect for function _CC2500_SIDLEMode
  8865  1AD6                     _CC2500_SIDLEMode:	
  8866                           
  8867                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8868                           
  8869                           ;incstack = 0
  8870                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8871  1AD6  3036               	movlw	54
  8872  1AD7  319E  265D         	fcall	_CC2500_WriteCommand
  8873  1AD9  0008               	return
  8874  1ADA                     __end_of_CC2500_SIDLEMode:	
  8875                           
  8876                           	psect	text42
  8877  13B8                     __ptext42:	
  8878 ;; *************** function _CC2500_PowerRST *****************
  8879 ;; Defined at:
  8880 ;;		line 139 in file "../src/CC2500_B1.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:        1 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    4
  8901 ;; This function calls:
  8902 ;;		_CC2500_WriteByte
  8903 ;;		_DelayTime_1us
  8904 ;;		_RF_Timeout_Counter
  8905 ;;		_setRF_TimeoutCleared
  8906 ;; This function is called by:
  8907 ;;		_CC2500_PowerOnInitial
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           
  8912                           ;psect for function _CC2500_PowerRST
  8913  13B8                     _CC2500_PowerRST:	
  8914                           
  8915                           ;CC2500_B1.c: 140: RC1 = 0;
  8916                           
  8917                           ;incstack = 0
  8918                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8919  13B8  0020               	movlb	0	; select bank0
  8920  13B9  108E               	bcf	14,1	;volatile
  8921                           
  8922                           ;CC2500_B1.c: 141: RC0 = 0;
  8923  13BA  100E               	bcf	14,0	;volatile
  8924                           
  8925                           ;CC2500_B1.c: 142: RC4 = 1;
  8926  13BB  160E               	bsf	14,4	;volatile
  8927                           
  8928                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8929  13BC  300A               	movlw	10
  8930  13BD  00F2               	movwf	DelayTime_1us@count
  8931  13BE  3000               	movlw	0
  8932  13BF  00F3               	movwf	DelayTime_1us@count+1
  8933  13C0  3190  20DA  3193   	fcall	_DelayTime_1us
  8934                           
  8935                           ;CC2500_B1.c: 144: RC4 = 0;
  8936  13C3  0020               	movlb	0	; select bank0
  8937  13C4  120E               	bcf	14,4	;volatile
  8938                           
  8939                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8940  13C5  300A               	movlw	10
  8941  13C6  00F2               	movwf	DelayTime_1us@count
  8942  13C7  3000               	movlw	0
  8943  13C8  00F3               	movwf	DelayTime_1us@count+1
  8944  13C9  3190  20DA  3193   	fcall	_DelayTime_1us
  8945                           
  8946                           ;CC2500_B1.c: 146: RC4 = 1;
  8947  13CC  0020               	movlb	0	; select bank0
  8948  13CD  160E               	bsf	14,4	;volatile
  8949                           
  8950                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8951  13CE  3028               	movlw	40
  8952  13CF  00F2               	movwf	DelayTime_1us@count
  8953  13D0  3000               	movlw	0
  8954  13D1  00F3               	movwf	DelayTime_1us@count+1
  8955  13D2  3190  20DA  3193   	fcall	_DelayTime_1us
  8956                           
  8957                           ;CC2500_B1.c: 148: RC4 = 0;
  8958  13D5  0020               	movlb	0	; select bank0
  8959  13D6  120E               	bcf	14,4	;volatile
  8960                           
  8961                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8962  13D7  3030               	movlw	48
  8963  13D8  00F8               	movwf	??_CC2500_PowerRST
  8964  13D9  0878               	movf	??_CC2500_PowerRST,w
  8965  13DA  0021               	movlb	1	; select bank1
  8966  13DB  00CA               	movwf	_SPI0Buffer^(0+128)
  8967                           
  8968                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8969  13DC  2BE0               	goto	l9284
  8970  13DD                     l9282:	
  8971                           
  8972                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8973  13DD  319D  25A7  3193   	fcall	_RF_Timeout_Counter
  8974  13E0                     l9284:	
  8975  13E0  0020               	movlb	0	; select bank0
  8976  13E1  1D0E               	btfss	14,2	;volatile
  8977  13E2  2BE6               	goto	l9288
  8978  13E3  0021               	movlb	1	; select bank1
  8979  13E4  1F21               	btfss	(_RF1^(0+128)+1),6
  8980  13E5  2BDD               	goto	l9282
  8981  13E6                     l9288:	
  8982                           
  8983                           ;CC2500_B1.c: 152: };
  8984                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8985  13E6  319A  22CA  3193   	fcall	_setRF_TimeoutCleared
  8986                           
  8987                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8988  13E9  319E  2613  3193   	fcall	_CC2500_WriteByte
  8989                           
  8990                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8991  13EC  2BF0               	goto	l9294
  8992  13ED                     l9292:	
  8993                           
  8994                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8995  13ED  319D  25A7  3193   	fcall	_RF_Timeout_Counter
  8996  13F0                     l9294:	
  8997  13F0  0020               	movlb	0	; select bank0
  8998  13F1  1D0E               	btfss	14,2	;volatile
  8999  13F2  2BF6               	goto	l9298
  9000  13F3  0021               	movlb	1	; select bank1
  9001  13F4  1F21               	btfss	(_RF1^(0+128)+1),6
  9002  13F5  2BED               	goto	l9292
  9003  13F6                     l9298:	
  9004                           
  9005                           ;CC2500_B1.c: 157: };
  9006                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9007  13F6  319A  22CA         	fcall	_setRF_TimeoutCleared
  9008                           
  9009                           ;CC2500_B1.c: 159: RC0 = 0;
  9010  13F8  0020               	movlb	0	; select bank0
  9011  13F9  100E               	bcf	14,0	;volatile
  9012                           
  9013                           ;CC2500_B1.c: 160: RC4 = 1;
  9014  13FA  160E               	bsf	14,4	;volatile
  9015  13FB  0008               	return
  9016  13FC                     __end_of_CC2500_PowerRST:	
  9017                           
  9018                           	psect	text43
  9019  11A2                     __ptext43:	
  9020 ;; *************** function _CC2500_InitSetREG *****************
  9021 ;; Defined at:
  9022 ;;		line 166 in file "../src/CC2500_B1.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9027 ;;  temp2           1    1[BANK0 ] unsigned char 
  9028 ;;  temp1           1    0[BANK0 ] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        4 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    5
  9045 ;; This function calls:
  9046 ;;		_CC2500_WriteREG
  9047 ;; This function is called by:
  9048 ;;		_CC2500_PowerOnInitial
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _CC2500_InitSetREG
  9054  11A2                     _CC2500_InitSetREG:	
  9055                           
  9056                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9057                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9058                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9062  11A2  0020               	movlb	0	; select bank0
  9063  11A3  01A2               	clrf	CC2500_InitSetREG@loop_c
  9064  11A4                     L4:	
  9065  11A4  302F               	movlw	47
  9066  11A5  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9067  11A6  1803               	btfsc	3,0
  9068  11A7  0008               	return
  9069                           
  9070                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9071  11A8  0822               	movf	CC2500_InitSetREG@loop_c,w
  9072  11A9  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9073  11AA  0084               	movwf	4
  9074  11AB  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9075  11AC  1803               	skipnc
  9076  11AD  3E01               	addlw	1
  9077  11AE  0085               	movwf	5
  9078  11AF  0800               	movf	0,w	;code access
  9079  11B0  00F7               	movwf	??_CC2500_InitSetREG
  9080  11B1  0877               	movf	??_CC2500_InitSetREG,w
  9081  11B2  00A0               	movwf	CC2500_InitSetREG@temp1
  9082                           
  9083                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9084  11B3  0822               	movf	CC2500_InitSetREG@loop_c,w
  9085  11B4  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9086  11B5  0084               	movwf	4
  9087  11B6  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9088  11B7  1803               	skipnc
  9089  11B8  3E01               	addlw	1
  9090  11B9  0085               	movwf	5
  9091  11BA  0800               	movf	0,w	;code access
  9092  11BB  00F7               	movwf	??_CC2500_InitSetREG
  9093  11BC  0877               	movf	??_CC2500_InitSetREG,w
  9094  11BD  00A1               	movwf	CC2500_InitSetREG@temp2
  9095                           
  9096                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9097  11BE  0821               	movf	CC2500_InitSetREG@temp2,w
  9098  11BF  00F7               	movwf	??_CC2500_InitSetREG
  9099  11C0  0877               	movf	??_CC2500_InitSetREG,w
  9100  11C1  00F4               	movwf	CC2500_WriteREG@value
  9101  11C2  0820               	movf	CC2500_InitSetREG@temp1,w
  9102  11C3  3190  2070  3191   	fcall	_CC2500_WriteREG
  9103  11C6  3001               	movlw	1
  9104  11C7  00F7               	movwf	??_CC2500_InitSetREG
  9105  11C8  0877               	movf	??_CC2500_InitSetREG,w
  9106  11C9  0020               	movlb	0	; select bank0
  9107  11CA  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9108  11CB  29A4               	goto	L4
  9109  11CC                     __end_of_CC2500_InitSetREG:	
  9110                           
  9111                           	psect	text44
  9112  1F1E                     __ptext44:	
  9113 ;; *************** function _CC2500_InitPATable *****************
  9114 ;; Defined at:
  9115 ;;		line 181 in file "../src/CC2500_B1.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;		None
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  loop_d          1    9[COMMON] unsigned char 
  9120 ;;  temp            1    8[COMMON] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;Total ram usage:        3 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    5
  9137 ;; This function calls:
  9138 ;;		_CC2500_WriteREG
  9139 ;; This function is called by:
  9140 ;;		_CC2500_PowerOnInitial
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           
  9145                           ;psect for function _CC2500_InitPATable
  9146  1F1E                     _CC2500_InitPATable:	
  9147                           
  9148                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9149                           ;CC2500_B1.c: 183: unsigned char temp;
  9150                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9154  1F1E  01F9               	clrf	CC2500_InitPATable@loop_d
  9155  1F1F                     L5:	
  9156  1F1F  3008               	movlw	8
  9157  1F20  0279               	subwf	CC2500_InitPATable@loop_d,w
  9158  1F21  1803               	btfsc	3,0
  9159  1F22  0008               	return
  9160                           
  9161                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9162  1F23  0879               	movf	CC2500_InitPATable@loop_d,w
  9163  1F24  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9164  1F25  0084               	movwf	4
  9165  1F26  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9166  1F27  1803               	skipnc
  9167  1F28  3E01               	addlw	1
  9168  1F29  0085               	movwf	5
  9169  1F2A  0800               	movf	0,w	;code access
  9170  1F2B  00F7               	movwf	??_CC2500_InitPATable
  9171  1F2C  0877               	movf	??_CC2500_InitPATable,w
  9172  1F2D  00F8               	movwf	CC2500_InitPATable@temp
  9173                           
  9174                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9175  1F2E  0878               	movf	CC2500_InitPATable@temp,w
  9176  1F2F  00F7               	movwf	??_CC2500_InitPATable
  9177  1F30  0877               	movf	??_CC2500_InitPATable,w
  9178  1F31  00F4               	movwf	CC2500_WriteREG@value
  9179  1F32  303E               	movlw	62
  9180  1F33  3190  2070  319F   	fcall	_CC2500_WriteREG
  9181  1F36  3001               	movlw	1
  9182  1F37  00F7               	movwf	??_CC2500_InitPATable
  9183  1F38  0877               	movf	??_CC2500_InitPATable,w
  9184  1F39  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9185  1F3A  2F1F               	goto	L5
  9186  1F3B                     __end_of_CC2500_InitPATable:	
  9187                           
  9188                           	psect	text45
  9189  1070                     __ptext45:	
  9190 ;; *************** function _CC2500_WriteREG *****************
  9191 ;; Defined at:
  9192 ;;		line 258 in file "../src/CC2500_B1.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  w_addr          1    wreg     unsigned char 
  9195 ;;  value           1    4[COMMON] unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  w_addr          1    6[COMMON] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;		None               void
  9200 ;; Registers used:
  9201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9207 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;Total ram usage:        3 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    4
  9214 ;; This function calls:
  9215 ;;		_CC2500_WriteByte
  9216 ;;		_RF_Timeout_Counter
  9217 ;;		_setRF_TimeoutCleared
  9218 ;; This function is called by:
  9219 ;;		_CC2500_InitSetREG
  9220 ;;		_CC2500_InitPATable
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _CC2500_WriteREG
  9226  1070                     _CC2500_WriteREG:	
  9227                           
  9228                           ;incstack = 0
  9229                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9230                           ;CC2500_WriteREG@w_addr stored from wreg
  9231  1070  00F6               	movwf	CC2500_WriteREG@w_addr
  9232                           
  9233                           ;CC2500_B1.c: 259: RC4 = 0;
  9234  1071  0020               	movlb	0	; select bank0
  9235  1072  120E               	bcf	14,4	;volatile
  9236                           
  9237                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9238  1073  0876               	movf	CC2500_WriteREG@w_addr,w
  9239  1074  00F5               	movwf	??_CC2500_WriteREG
  9240  1075  0875               	movf	??_CC2500_WriteREG,w
  9241  1076  0021               	movlb	1	; select bank1
  9242  1077  00CA               	movwf	_SPI0Buffer^(0+128)
  9243                           
  9244                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9245  1078  287C               	goto	l9194
  9246  1079                     l9192:	
  9247                           
  9248                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9249  1079  319D  25A7  3190   	fcall	_RF_Timeout_Counter
  9250  107C                     l9194:	
  9251  107C  0020               	movlb	0	; select bank0
  9252  107D  1D0E               	btfss	14,2	;volatile
  9253  107E  2882               	goto	l9198
  9254  107F  0021               	movlb	1	; select bank1
  9255  1080  1F21               	btfss	(_RF1^(0+128)+1),6
  9256  1081  2879               	goto	l9192
  9257  1082                     l9198:	
  9258                           
  9259                           ;CC2500_B1.c: 263: };
  9260                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9261  1082  319A  22CA  3190   	fcall	_setRF_TimeoutCleared
  9262                           
  9263                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9264  1085  319E  2613  3190   	fcall	_CC2500_WriteByte
  9265                           
  9266                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9267  1088  0874               	movf	CC2500_WriteREG@value,w
  9268  1089  00F5               	movwf	??_CC2500_WriteREG
  9269  108A  0875               	movf	??_CC2500_WriteREG,w
  9270  108B  0021               	movlb	1	; select bank1
  9271  108C  00CA               	movwf	_SPI0Buffer^(0+128)
  9272                           
  9273                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9274  108D  319E  2613         	fcall	_CC2500_WriteByte
  9275                           
  9276                           ;CC2500_B1.c: 269: RC4 = 1;
  9277  108F  0020               	movlb	0	; select bank0
  9278  1090  160E               	bsf	14,4	;volatile
  9279  1091  0008               	return
  9280  1092                     __end_of_CC2500_WriteREG:	
  9281                           
  9282                           	psect	text46
  9283  1B5E                     __ptext46:	
  9284 ;; *************** function _CC2500_FrequencyCabr *****************
  9285 ;; Defined at:
  9286 ;;		line 208 in file "../src/CC2500_B1.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;		None
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;		None
  9291 ;; Return value:  Size  Location     Type
  9292 ;;		None               void
  9293 ;; Registers used:
  9294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9295 ;; Tracked objects:
  9296 ;;		On entry : 0/0
  9297 ;;		On exit  : 0/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;Total ram usage:        0 bytes
  9305 ;; Hardware stack levels used:    1
  9306 ;; Hardware stack levels required when called:    5
  9307 ;; This function calls:
  9308 ;;		_CC2500_WriteCommand
  9309 ;;		_DelayTime_1us
  9310 ;; This function is called by:
  9311 ;;		_CC2500_PowerOnInitial
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           
  9316                           ;psect for function _CC2500_FrequencyCabr
  9317  1B5E                     _CC2500_FrequencyCabr:	
  9318                           
  9319                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9323  1B5E  3033               	movlw	51
  9324  1B5F  319E  265D  319B   	fcall	_CC2500_WriteCommand
  9325                           
  9326                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9327  1B62  30E8               	movlw	232
  9328  1B63  00F2               	movwf	DelayTime_1us@count
  9329  1B64  3003               	movlw	3
  9330  1B65  00F3               	movwf	DelayTime_1us@count+1
  9331  1B66  3190  20DA         	fcall	_DelayTime_1us
  9332  1B68  0008               	return
  9333  1B69                     __end_of_CC2500_FrequencyCabr:	
  9334                           
  9335                           	psect	text47
  9336  10DA                     __ptext47:	
  9337 ;; *************** function _DelayTime_1us *****************
  9338 ;; Defined at:
  9339 ;;		line 327 in file "../src/CC2500_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  count           2    2[COMMON] int 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  j               2    6[COMMON] unsigned int 
  9344 ;;  i               2    4[COMMON] unsigned int 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;		None               void
  9347 ;; Registers used:
  9348 ;;		wreg, status,2
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;Total ram usage:        6 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    3
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_CC2500_PowerRST
  9365 ;;		_CC2500_FrequencyCabr
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _DelayTime_1us
  9371  10DA                     _DelayTime_1us:	
  9372                           
  9373                           ;CC2500_B1.c: 328: unsigned int i, j;
  9374                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9375                           
  9376                           ;incstack = 0
  9377                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9378  10DA  3001               	movlw	1
  9379  10DB  00F4               	movwf	DelayTime_1us@i
  9380  10DC  3000               	movlw	0
  9381  10DD  00F5               	movwf	DelayTime_1us@i+1
  9382  10DE                     l367:	
  9383  10DE  0873               	movf	DelayTime_1us@count+1,w
  9384  10DF  0275               	subwf	DelayTime_1us@i+1,w
  9385  10E0  1D03               	skipz
  9386  10E1  28E4               	goto	u6235
  9387  10E2  0872               	movf	DelayTime_1us@count,w
  9388  10E3  0274               	subwf	DelayTime_1us@i,w
  9389  10E4                     u6235:	
  9390  10E4  1803               	btfsc	3,0
  9391  10E5  0008               	return
  9392                           
  9393                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9394  10E6  01F6               	clrf	DelayTime_1us@j
  9395  10E7  01F7               	clrf	DelayTime_1us@j+1
  9396  10E8  3000               	movlw	0
  9397  10E9  0277               	subwf	DelayTime_1us@j+1,w
  9398  10EA  3002               	movlw	2
  9399  10EB  1903               	skipnz
  9400  10EC  0276               	subwf	DelayTime_1us@j,w
  9401  10ED  1803               	btfsc	3,0
  9402  10EE  28FA               	goto	l6818
  9403  10EF                     l6816:	
  9404  10EF  3001               	movlw	1
  9405  10F0  07F6               	addwf	DelayTime_1us@j,f
  9406  10F1  3000               	movlw	0
  9407  10F2  3DF7               	addwfc	DelayTime_1us@j+1,f
  9408  10F3  3000               	movlw	0
  9409  10F4  0277               	subwf	DelayTime_1us@j+1,w
  9410  10F5  3002               	movlw	2
  9411  10F6  1903               	skipnz
  9412  10F7  0276               	subwf	DelayTime_1us@j,w
  9413  10F8  1C03               	skipc
  9414  10F9  28EF               	goto	l6816
  9415  10FA                     l6818:	
  9416  10FA  3001               	movlw	1
  9417  10FB  07F4               	addwf	DelayTime_1us@i,f
  9418  10FC  3000               	movlw	0
  9419  10FD  3DF5               	addwfc	DelayTime_1us@i+1,f
  9420  10FE  28DE               	goto	l367
  9421  10FF                     __end_of_DelayTime_1us:	
  9422                           
  9423                           	psect	text48
  9424  1AD2                     __ptext48:	
  9425 ;; *************** function _CC2500_ClearTXFIFO *****************
  9426 ;; Defined at:
  9427 ;;		line 194 in file "../src/CC2500_B1.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;		None
  9432 ;; Return value:  Size  Location     Type
  9433 ;;		None               void
  9434 ;; Registers used:
  9435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;Total ram usage:        0 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    5
  9448 ;; This function calls:
  9449 ;;		_CC2500_WriteCommand
  9450 ;; This function is called by:
  9451 ;;		_CC2500_PowerOnInitial
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           
  9456                           ;psect for function _CC2500_ClearTXFIFO
  9457  1AD2                     _CC2500_ClearTXFIFO:	
  9458                           
  9459                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9463  1AD2  303B               	movlw	59
  9464  1AD3  319E  265D         	fcall	_CC2500_WriteCommand
  9465  1AD5  0008               	return
  9466  1AD6                     __end_of_CC2500_ClearTXFIFO:	
  9467                           
  9468                           	psect	text49
  9469  1ACE                     __ptext49:	
  9470 ;; *************** function _CC2500_ClearRXFIFO *****************
  9471 ;; Defined at:
  9472 ;;		line 201 in file "../src/CC2500_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        0 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    5
  9493 ;; This function calls:
  9494 ;;		_CC2500_WriteCommand
  9495 ;; This function is called by:
  9496 ;;		_CC2500_PowerOnInitial
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _CC2500_ClearRXFIFO
  9502  1ACE                     _CC2500_ClearRXFIFO:	
  9503                           
  9504                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9508  1ACE  303A               	movlw	58
  9509  1ACF  319E  265D         	fcall	_CC2500_WriteCommand
  9510  1AD1  0008               	return
  9511  1AD2                     __end_of_CC2500_ClearRXFIFO:	
  9512                           
  9513                           	psect	text50
  9514  1E5D                     __ptext50:	
  9515 ;; *************** function _CC2500_WriteCommand *****************
  9516 ;; Defined at:
  9517 ;;		line 292 in file "../src/CC2500_B1.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  command         1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  command         1    5[COMMON] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    4
  9538 ;; This function calls:
  9539 ;;		_CC2500_WriteByte
  9540 ;;		_RF_Timeout_Counter
  9541 ;;		_setRF_TimeoutCleared
  9542 ;; This function is called by:
  9543 ;;		_CC2500_TxData
  9544 ;;		_CC2500_RxData
  9545 ;;		_CC2500_ClearTXFIFO
  9546 ;;		_CC2500_ClearRXFIFO
  9547 ;;		_CC2500_FrequencyCabr
  9548 ;;		_CC2500_SIDLEMode
  9549 ;;		_setRF_Main
  9550 ;;		_RF_RxDisable
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _CC2500_WriteCommand
  9556  1E5D                     _CC2500_WriteCommand:	
  9557                           
  9558                           ;incstack = 0
  9559                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9560                           ;CC2500_WriteCommand@command stored from wreg
  9561  1E5D  00F5               	movwf	CC2500_WriteCommand@command
  9562                           
  9563                           ;CC2500_B1.c: 293: RC4 = 0;
  9564  1E5E  0020               	movlb	0	; select bank0
  9565  1E5F  120E               	bcf	14,4	;volatile
  9566                           
  9567                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9568  1E60  0875               	movf	CC2500_WriteCommand@command,w
  9569  1E61  00F4               	movwf	??_CC2500_WriteCommand
  9570  1E62  0874               	movf	??_CC2500_WriteCommand,w
  9571  1E63  0021               	movlb	1	; select bank1
  9572  1E64  00CA               	movwf	_SPI0Buffer^(0+128)
  9573                           
  9574                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9575  1E65  2E69               	goto	l9178
  9576  1E66                     l9176:	
  9577                           
  9578                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9579  1E66  319D  25A7  319E   	fcall	_RF_Timeout_Counter
  9580  1E69                     l9178:	
  9581  1E69  0020               	movlb	0	; select bank0
  9582  1E6A  1D0E               	btfss	14,2	;volatile
  9583  1E6B  2E6F               	goto	l9182
  9584  1E6C  0021               	movlb	1	; select bank1
  9585  1E6D  1F21               	btfss	(_RF1^(0+128)+1),6
  9586  1E6E  2E66               	goto	l9176
  9587  1E6F                     l9182:	
  9588                           
  9589                           ;CC2500_B1.c: 298: };
  9590                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9591  1E6F  319A  22CA  319E   	fcall	_setRF_TimeoutCleared
  9592                           
  9593                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9594  1E72  319E  2613         	fcall	_CC2500_WriteByte
  9595                           
  9596                           ;CC2500_B1.c: 302: RC4 = 1;
  9597  1E74  0020               	movlb	0	; select bank0
  9598  1E75  160E               	bsf	14,4	;volatile
  9599  1E76  0008               	return
  9600  1E77                     __end_of_CC2500_WriteCommand:	
  9601                           
  9602                           	psect	text51
  9603  1ACA                     __ptext51:	
  9604 ;; *************** function _setRF_TimeoutCleared *****************
  9605 ;; Defined at:
  9606 ;;		line 149 in file "../src/RF_Control_B1.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		status,2
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    3
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_CC2500_TxData
  9631 ;;		_CC2500_RxData
  9632 ;;		_CC2500_PowerRST
  9633 ;;		_CC2500_WriteREG
  9634 ;;		_CC2500_WriteCommand
  9635 ;;		_CC2500_ReadStatus
  9636 ;;		_CC2500_ReadREG
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _setRF_TimeoutCleared
  9642  1ACA                     _setRF_TimeoutCleared:	
  9643                           
  9644                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9645                           
  9646                           ;incstack = 0
  9647                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9648  1ACA  0021               	movlb	1	; select bank1
  9649  1ACB  01AC               	clrf	(_RF1^(0+128)+12)
  9650  1ACC  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9651  1ACD  0008               	return
  9652  1ACE                     __end_of_setRF_TimeoutCleared:	
  9653                           
  9654                           	psect	text52
  9655  1DA7                     __ptext52:	
  9656 ;; *************** function _RF_Timeout_Counter *****************
  9657 ;; Defined at:
  9658 ;;		line 141 in file "../src/RF_Control_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    3
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_PowerRST
  9685 ;;		_CC2500_WriteREG
  9686 ;;		_CC2500_WriteCommand
  9687 ;;		_CC2500_ReadStatus
  9688 ;;		_CC2500_ReadREG
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _RF_Timeout_Counter
  9694  1DA7                     _RF_Timeout_Counter:	
  9695                           
  9696                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9700  1DA7  3001               	movlw	1
  9701  1DA8  0021               	movlb	1	; select bank1
  9702  1DA9  07AC               	addwf	(_RF1^(0+128)+12),f
  9703  1DAA  3000               	movlw	0
  9704  1DAB  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9705                           
  9706                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9707  1DAC  300C               	movlw	12
  9708  1DAD  3EA0               	addlw	_RF1& (0+255)
  9709  1DAE  0086               	movwf	6
  9710  1DAF  0187               	clrf	7
  9711  1DB0  3F40               	moviw [0]fsr1
  9712  1DB1  3AA8               	xorlw	168
  9713  1DB2  1D03               	skipz
  9714  1DB3  2DB6               	goto	u10165
  9715  1DB4  3F41               	moviw [1]fsr1
  9716  1DB5  3A61               	xorlw	97
  9717  1DB6                     u10165:	
  9718  1DB6  1D03               	skipz
  9719  1DB7  0008               	return
  9720                           
  9721                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9722  1DB8  01AC               	clrf	(_RF1^(0+128)+12)
  9723  1DB9  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9724                           
  9725                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9726  1DBA  1721               	bsf	(_RF1^(0+128)+1),6
  9727  1DBB  0008               	return
  9728  1DBC                     __end_of_RF_Timeout_Counter:	
  9729                           
  9730                           	psect	text53
  9731  1E13                     __ptext53:	
  9732 ;; *************** function _CC2500_WriteByte *****************
  9733 ;; Defined at:
  9734 ;;		line 226 in file "../src/CC2500_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  loop_a          1    3[COMMON] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        2 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    3
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_CC2500_TxData
  9759 ;;		_CC2500_RxData
  9760 ;;		_CC2500_PowerRST
  9761 ;;		_CC2500_WriteREG
  9762 ;;		_CC2500_WriteCommand
  9763 ;;		_CC2500_ReadStatus
  9764 ;;		_CC2500_ReadREG
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _CC2500_WriteByte
  9770  1E13                     _CC2500_WriteByte:	
  9771                           
  9772                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9773                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9777  1E13  01F3               	clrf	CC2500_WriteByte@loop_a
  9778  1E14                     L6:	
  9779  1E14  3008               	movlw	8
  9780  1E15  0273               	subwf	CC2500_WriteByte@loop_a,w
  9781  1E16  1803               	btfsc	3,0
  9782  1E17  0008               	return
  9783                           
  9784                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9785  1E18  0021               	movlb	1	; select bank1
  9786  1E19  1FCA               	btfss	_SPI0Buffer^(0+128),7
  9787  1E1A  2E1E               	goto	l323
  9788                           
  9789                           ;CC2500_B1.c: 230: RC0 = 1;
  9790  1E1B  0020               	movlb	0	; select bank0
  9791  1E1C  140E               	bsf	14,0	;volatile
  9792  1E1D  2E20               	goto	l324
  9793  1E1E                     l323:	
  9794                           
  9795                           ;CC2500_B1.c: 231: else
  9796                           ;CC2500_B1.c: 232: RC0 = 0;
  9797  1E1E  0020               	movlb	0	; select bank0
  9798  1E1F  100E               	bcf	14,0	;volatile
  9799  1E20                     l324:	
  9800                           
  9801                           ;CC2500_B1.c: 233: RC1 = 1;
  9802  1E20  148E               	bsf	14,1	;volatile
  9803                           
  9804                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9805  1E21  1003               	clrc
  9806  1E22  0021               	movlb	1	; select bank1
  9807  1E23  0DCA               	rlf	_SPI0Buffer^(0+128),f
  9808                           
  9809                           ;CC2500_B1.c: 235: RC1 = 0;
  9810  1E24  0020               	movlb	0	; select bank0
  9811  1E25  108E               	bcf	14,1	;volatile
  9812  1E26  3001               	movlw	1
  9813  1E27  00F2               	movwf	??_CC2500_WriteByte
  9814  1E28  0872               	movf	??_CC2500_WriteByte,w
  9815  1E29  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9816  1E2A  2E14               	goto	L6
  9817  1E2B                     __end_of_CC2500_WriteByte:	
  9818                           
  9819                           	psect	text54
  9820  1ABA                     __ptext54:	
  9821 ;; *************** function _RF_Initialization *****************
  9822 ;; Defined at:
  9823 ;;		line 9 in file "../src/RF_Control_B1.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;		None
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;		None
  9828 ;; Return value:  Size  Location     Type
  9829 ;;		None               void
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, pclath, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;Total ram usage:        0 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    4
  9844 ;; This function calls:
  9845 ;;		_setRF_Initialization
  9846 ;; This function is called by:
  9847 ;;		_main
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _RF_Initialization
  9853  1ABA                     _RF_Initialization:	
  9854                           
  9855                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9859  1ABA  3190  2066         	fcall	_setRF_Initialization
  9860  1ABC  0008               	return
  9861  1ABD                     __end_of_RF_Initialization:	
  9862                           
  9863                           	psect	text55
  9864  1066                     __ptext55:	
  9865 ;; *************** function _setRF_Initialization *****************
  9866 ;; Defined at:
  9867 ;;		line 17 in file "../src/RF_Control_B1.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;		None               void
  9874 ;; Registers used:
  9875 ;;		wreg
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        1 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    3
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		_RF_Initialization
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function _setRF_Initialization
  9897  1066                     _setRF_Initialization:	
  9898                           
  9899                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in _setRF_Initialization: [wreg]
  9903  1066  3015               	movlw	21
  9904  1067  00F2               	movwf	??_setRF_Initialization
  9905  1068  0872               	movf	??_setRF_Initialization,w
  9906  1069  0021               	movlb	1	; select bank1
  9907  106A  00CC               	movwf	_Tx_Length^(0+128)
  9908                           
  9909                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9910  106B  3096               	movlw	150
  9911  106C  00A7               	movwf	(_RF1^(0+128)+7)
  9912  106D  3000               	movlw	0
  9913  106E  00A8               	movwf	(_RF1^(0+128)+8)
  9914  106F  0008               	return
  9915  1070                     __end_of_setRF_Initialization:	
  9916                           
  9917                           	psect	text56
  9918  1D06                     __ptext56:	
  9919 ;; *************** function _Mcu_Initialization *****************
  9920 ;; Defined at:
  9921 ;;		line 30 in file "../src/MCU_B1.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;		None               void
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        0 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    4
  9942 ;; This function calls:
  9943 ;;		_ADC_Set
  9944 ;;		_Fosc_Set
  9945 ;;		_IOC_Set
  9946 ;;		_IO_Set
  9947 ;;		_TMR1_Set
  9948 ;;		_WDT_Set
  9949 ;; This function is called by:
  9950 ;;		_main
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function _Mcu_Initialization
  9956  1D06                     _Mcu_Initialization:	
  9957                           
  9958                           ;MCU_B1.c: 32: Fosc_Set();
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9962  1D06  319A  22C6  319D   	fcall	_Fosc_Set
  9963                           
  9964                           ;MCU_B1.c: 34: IO_Set();
  9965  1D09  319E  2643  319D   	fcall	_IO_Set
  9966                           
  9967                           ;MCU_B1.c: 36: ;;
  9968                           ;MCU_B1.c: 38: TMR1_Set();
  9969  1D0C  319B  23A4  319D   	fcall	_TMR1_Set
  9970                           
  9971                           ;MCU_B1.c: 40: ADC_Set();
  9972  1D0F  319B  2305  319D   	fcall	_ADC_Set
  9973                           
  9974                           ;MCU_B1.c: 42: ;;
  9975                           ;MCU_B1.c: 44: ;;
  9976                           ;MCU_B1.c: 46: IOC_Set();
  9977  1D12  319B  233E  319D   	fcall	_IOC_Set
  9978                           
  9979                           ;MCU_B1.c: 48: ;;
  9980                           ;MCU_B1.c: 50: ;;
  9981                           ;MCU_B1.c: 52: WDT_Set();
  9982  1D15  319B  2335         	fcall	_WDT_Set
  9983  1D17  0008               	return
  9984  1D18                     __end_of_Mcu_Initialization:	
  9985                           
  9986                           	psect	text57
  9987  1B35                     __ptext57:	
  9988 ;; *************** function _WDT_Set *****************
  9989 ;; Defined at:
  9990 ;;		line 1072 in file "../src/MCU_B1.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;		None               void
  9997 ;; Registers used:
  9998 ;;		wreg
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        1 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    3
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_Mcu_Initialization
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _WDT_Set
 10020  1B35                     _WDT_Set:	
 10021                           
 10022                           ;MCU_B1.c: 1079: WDTCON = 0b00010111;;
 10023                           
 10024                           ;incstack = 0
 10025                           ; Regs used in _WDT_Set: [wreg]
 10026  1B35  3017               	movlw	23
 10027  1B36  0021               	movlb	1	; select bank1
 10028  1B37  0097               	movwf	23	;volatile
 10029                           
 10030                           ;MCU_B1.c: 1081: WDT.Enable = 1;
 10031  1B38  1440               	bsf	_WDT^(0+128),0
 10032                           
 10033                           ;MCU_B1.c: 1082: WDT.Timer = 10;
 10034  1B39  300A               	movlw	10
 10035  1B3A  00F2               	movwf	??_WDT_Set
 10036  1B3B  0872               	movf	??_WDT_Set,w
 10037  1B3C  00C1               	movwf	(_WDT^(0+128)+1)
 10038  1B3D  0008               	return
 10039  1B3E                     __end_of_WDT_Set:	
 10040                           
 10041                           	psect	text58
 10042  1BA4                     __ptext58:	
 10043 ;; *************** function _TMR1_Set *****************
 10044 ;; Defined at:
 10045 ;;		line 221 in file "../src/MCU_B1.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    3
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_Mcu_Initialization
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _TMR1_Set
 10075  1BA4                     _TMR1_Set:	
 10076                           
 10077                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _TMR1_Set: [wreg]
 10081  1BA4  3041               	movlw	65
 10082  1BA5  0020               	movlb	0	; select bank0
 10083  1BA6  0098               	movwf	24	;volatile
 10084                           
 10085                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10086  1BA7  30FA               	movlw	250
 10087  1BA8  0097               	movwf	23	;volatile
 10088                           
 10089                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10090  1BA9  3038               	movlw	56
 10091  1BAA  0096               	movwf	22	;volatile
 10092                           
 10093                           ;MCU_B1.c: 225: TMR1IE = 1;
 10094  1BAB  0021               	movlb	1	; select bank1
 10095  1BAC  1411               	bsf	17,0	;volatile
 10096                           
 10097                           ;MCU_B1.c: 226: PEIE = 1;
 10098  1BAD  170B               	bsf	11,6	;volatile
 10099                           
 10100                           ;MCU_B1.c: 227: GIE = 1;
 10101  1BAE  178B               	bsf	11,7	;volatile
 10102  1BAF  0008               	return
 10103  1BB0                     __end_of_TMR1_Set:	
 10104                           
 10105                           	psect	text59
 10106  1E43                     __ptext59:	
 10107 ;; *************** function _IO_Set *****************
 10108 ;; Defined at:
 10109 ;;		line 60 in file "../src/MCU_B1.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;		None
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;		None
 10114 ;; Return value:  Size  Location     Type
 10115 ;;		None               void
 10116 ;; Registers used:
 10117 ;;		wreg, status,2
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;Total ram usage:        0 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    3
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_Mcu_Initialization
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           
 10138                           ;psect for function _IO_Set
 10139  1E43                     _IO_Set:	
 10140                           
 10141                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10142                           
 10143                           ;incstack = 0
 10144                           ; Regs used in _IO_Set: [wreg+status,2]
 10145  1E43  3077               	movlw	119
 10146  1E44  0021               	movlb	1	; select bank1
 10147  1E45  008C               	movwf	12	;volatile
 10148                           
 10149                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10150  1E46  3007               	movlw	7
 10151  1E47  008D               	movwf	13	;volatile
 10152                           
 10153                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10154  1E48  300C               	movlw	12
 10155  1E49  008E               	movwf	14	;volatile
 10156                           
 10157                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10158  1E4A  0022               	movlb	2	; select bank2
 10159  1E4B  018C               	clrf	12	;volatile
 10160                           
 10161                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10162  1E4C  018D               	clrf	13	;volatile
 10163                           
 10164                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10165  1E4D  018E               	clrf	14	;volatile
 10166                           
 10167                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10168  1E4E  3022               	movlw	34
 10169  1E4F  0023               	movlb	3	; select bank3
 10170  1E50  008C               	movwf	12	;volatile
 10171                           
 10172                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10173  1E51  018D               	clrf	13	;volatile
 10174                           
 10175                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10176  1E52  018E               	clrf	14	;volatile
 10177                           
 10178                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10179  1E53  3077               	movlw	119
 10180  1E54  0020               	movlb	0	; select bank0
 10181  1E55  008C               	movwf	12	;volatile
 10182                           
 10183                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10184  1E56  3007               	movlw	7
 10185  1E57  008D               	movwf	13	;volatile
 10186                           
 10187                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10188  1E58  300C               	movlw	12
 10189  1E59  008E               	movwf	14	;volatile
 10190                           
 10191                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10192  1E5A  0024               	movlb	4	; select bank4
 10193  1E5B  018D               	clrf	13	;volatile
 10194  1E5C  0008               	return
 10195  1E5D                     __end_of_IO_Set:	
 10196                           
 10197                           	psect	text60
 10198  1B3E                     __ptext60:	
 10199 ;; *************** function _IOC_Set *****************
 10200 ;; Defined at:
 10201 ;;		line 362 in file "../src/MCU_B1.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;		None               void
 10208 ;; Registers used:
 10209 ;;		wreg, status,2
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        0 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    3
 10222 ;; This function calls:
 10223 ;;		Nothing
 10224 ;; This function is called by:
 10225 ;;		_Mcu_Initialization
 10226 ;; This function uses a non-reentrant model
 10227 ;;
 10228                           
 10229                           
 10230                           ;psect for function _IOC_Set
 10231  1B3E                     _IOC_Set:	
 10232                           
 10233                           ;MCU_B1.c: 364: IOCBP = 0b00000100;;
 10234                           
 10235                           ;incstack = 0
 10236                           ; Regs used in _IOC_Set: [wreg+status,2]
 10237  1B3E  3004               	movlw	4
 10238  1B3F  0027               	movlb	7	; select bank7
 10239  1B40  0094               	movwf	20	;volatile
 10240                           
 10241                           ;MCU_B1.c: 365: IOCBN = 0b00000000;;
 10242  1B41  0195               	clrf	21	;volatile
 10243                           
 10244                           ;MCU_B1.c: 367: IOCBF = 0b00000000;
 10245  1B42  0196               	clrf	22	;volatile
 10246                           
 10247                           ;MCU_B1.c: 369: IOCIE = 1;
 10248  1B43  158B               	bsf	11,3	;volatile
 10249                           
 10250                           ;MCU_B1.c: 370: IOCIF = 0;
 10251  1B44  100B               	bcf	11,0	;volatile
 10252                           
 10253                           ;MCU_B1.c: 371: PEIE = 1;
 10254  1B45  170B               	bsf	11,6	;volatile
 10255                           
 10256                           ;MCU_B1.c: 372: GIE = 1;
 10257  1B46  178B               	bsf	11,7	;volatile
 10258  1B47  0008               	return
 10259  1B48                     __end_of_IOC_Set:	
 10260                           
 10261                           	psect	text61
 10262  1AC6                     __ptext61:	
 10263 ;; *************** function _Fosc_Set *****************
 10264 ;; Defined at:
 10265 ;;		line 56 in file "../src/MCU_B1.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;		None
 10270 ;; Return value:  Size  Location     Type
 10271 ;;		None               void
 10272 ;; Registers used:
 10273 ;;		wreg
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;Total ram usage:        0 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    3
 10286 ;; This function calls:
 10287 ;;		Nothing
 10288 ;; This function is called by:
 10289 ;;		_Mcu_Initialization
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _Fosc_Set
 10295  1AC6                     _Fosc_Set:	
 10296                           
 10297                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10298                           
 10299                           ;incstack = 0
 10300                           ; Regs used in _Fosc_Set: [wreg]
 10301  1AC6  3078               	movlw	120
 10302  1AC7  0021               	movlb	1	; select bank1
 10303  1AC8  0099               	movwf	25	;volatile
 10304  1AC9  0008               	return
 10305  1ACA                     __end_of_Fosc_Set:	
 10306                           
 10307                           	psect	text62
 10308  1B05                     __ptext62:	
 10309 ;; *************** function _ADC_Set *****************
 10310 ;; Defined at:
 10311 ;;		line 408 in file "../src/MCU_B1.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;		None
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;		None
 10316 ;; Return value:  Size  Location     Type
 10317 ;;		None               void
 10318 ;; Registers used:
 10319 ;;		wreg
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;Total ram usage:        0 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    3
 10332 ;; This function calls:
 10333 ;;		Nothing
 10334 ;; This function is called by:
 10335 ;;		_Mcu_Initialization
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           
 10340                           ;psect for function _ADC_Set
 10341  1B05                     _ADC_Set:	
 10342                           
 10343                           ;MCU_B1.c: 409: ADCON1 = 0xf3;
 10344                           
 10345                           ;incstack = 0
 10346                           ; Regs used in _ADC_Set: [wreg]
 10347  1B05  30F3               	movlw	243
 10348  1B06  0021               	movlb	1	; select bank1
 10349  1B07  009E               	movwf	30	;volatile
 10350                           
 10351                           ;MCU_B1.c: 410: FVRCON = 0xc1;
 10352  1B08  30C1               	movlw	193
 10353  1B09  0022               	movlb	2	; select bank2
 10354  1B0A  0097               	movwf	23	;volatile
 10355  1B0B  0008               	return
 10356  1B0C                     __end_of_ADC_Set:	
 10357                           
 10358                           	psect	text63
 10359  0053                     __ptext63:	
 10360 ;; *************** function _Load_Main *****************
 10361 ;; Defined at:
 10362 ;;		line 39 in file "../src/OverLoad_B1.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;		None
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;  i               2    4[BANK0 ] int 
 10367 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10368 ;;  error           1    2[BANK0 ] unsigned char 
 10369 ;; Return value:  Size  Location     Type
 10370 ;;		None               void
 10371 ;; Registers used:
 10372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;Total ram usage:        6 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    4
 10385 ;; This function calls:
 10386 ;;		___lwdiv
 10387 ;;		___wmul
 10388 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10389 ;;		_getDimmer_LoadGO
 10390 ;;		_getDimmer_Load_Status
 10391 ;;		_getMain_All_Error_Status
 10392 ;;		_getMain_All_LightsStatus
 10393 ;;		_getMain_Lights_Count
 10394 ;;		_setLoad_AH_AL_Restore
 10395 ;; This function is called by:
 10396 ;;		_main
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _Load_Main
 10402  0053                     _Load_Main:	
 10403                           
 10404                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10408  0053  3000               	movlw	0
 10409  0054  3191  21CC  3180   	fcall	_getMain_All_Error_Status
 10410  0057  0020               	movlb	0	; select bank0
 10411  0058  00A0               	movwf	??_Load_Main
 10412  0059  0820               	movf	??_Load_Main,w
 10413  005A  00A2               	movwf	Load_Main@error
 10414                           
 10415                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10416  005B  01A3               	clrf	Load_Main@Load_Status
 10417                           
 10418                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10419  005C  0022               	movlb	2	; select bank2
 10420  005D  1C30               	btfss	_Load^(0+256),0
 10421  005E  29E7               	goto	l1840
 10422                           
 10423                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10424  005F  319C  2405  3180   	fcall	_getMain_All_LightsStatus
 10425  0062  3800               	iorlw	0
 10426  0063  1D03               	skipz
 10427  0064  2867               	goto	l10110
 10428                           
 10429                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10430  0065  0022               	movlb	2	; select bank2
 10431  0066  2888               	goto	l10128
 10432  0067                     l10110:	
 10433                           ;OverLoad_B1.c: 47: } else {
 10434                           
 10435                           
 10436                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10437  0067  0020               	movlb	0	; select bank0
 10438  0068  08A2               	movf	Load_Main@error,f
 10439  0069  1D03               	skipz
 10440  006A  2885               	goto	l1843
 10441  006B  319E  2692  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10442  006E  3800               	iorlw	0
 10443  006F  1D03               	skipz
 10444  0070  2885               	goto	l1843
 10445                           
 10446                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10447  0071  0022               	movlb	2	; select bank2
 10448  0072  14B0               	bsf	_Load^(0+256),1
 10449                           
 10450                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10451  0073  319A  22F7  3180   	fcall	_getDimmer_LoadGO
 10452  0076  3A01               	xorlw	1
 10453  0077  1D03               	skipz
 10454  0078  2880               	goto	l1844
 10455                           
 10456                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10457  0079  0022               	movlb	2	; select bank2
 10458  007A  1DB0               	btfss	_Load^(0+256),3
 10459  007B  1BB0               	btfsc	_Load^(0+256),7
 10460  007C  2889               	goto	l1842
 10461                           
 10462                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10463  007D  15B0               	bsf	_Load^(0+256),3
 10464                           
 10465                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10466  007E  01D9               	clrf	(_Load^(0+256)+41)
 10467                           
 10468                           ;OverLoad_B1.c: 57: }
 10469                           ;OverLoad_B1.c: 58: } else {
 10470  007F  2889               	goto	l1842
 10471  0080                     l1844:	
 10472                           
 10473                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10474  0080  0022               	movlb	2	; select bank2
 10475  0081  1FB0               	btfss	_Load^(0+256),7
 10476  0082  2889               	goto	l1842
 10477                           
 10478                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10479  0083  13B0               	bcf	_Load^(0+256),7
 10480                           
 10481                           ;OverLoad_B1.c: 61: }
 10482                           ;OverLoad_B1.c: 62: }
 10483                           ;OverLoad_B1.c: 63: } else {
 10484  0084  2889               	goto	l1842
 10485  0085                     l1843:	
 10486                           
 10487                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10488  0085  0022               	movlb	2	; select bank2
 10489  0086  1CB0               	btfss	_Load^(0+256),1
 10490  0087  2889               	goto	l1842
 10491  0088                     l10128:	
 10492                           
 10493                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10494  0088  10B0               	bcf	_Load^(0+256),1
 10495  0089                     l1842:	
 10496                           
 10497                           ;OverLoad_B1.c: 66: }
 10498                           ;OverLoad_B1.c: 67: }
 10499                           ;OverLoad_B1.c: 69: }
 10500                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10501  0089  1CB0               	btfss	_Load^(0+256),1
 10502  008A  29C3               	goto	l1850
 10503                           
 10504                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10505  008B  1530               	bsf	_Load^(0+256),2
 10506                           
 10507                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10508  008C  1E30               	btfss	_Load^(0+256),4
 10509  008D  29C1               	goto	l1851
 10510                           
 10511                           ;OverLoad_B1.c: 76: Load.Time++;
 10512  008E  3001               	movlw	1
 10513  008F  07B1               	addwf	(_Load^(0+256)+1),f
 10514  0090  3000               	movlw	0
 10515  0091  3DB2               	addwfc	((_Load+1)^(0+256)+1),f
 10516                           
 10517                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10518  0092  3000               	movlw	0
 10519  0093  0232               	subwf	((_Load+1)^(0+256)+1),w
 10520  0094  3002               	movlw	2
 10521  0095  1903               	skipnz
 10522  0096  0231               	subwf	(_Load^(0+256)+1),w
 10523  0097  1C03               	skipc
 10524  0098  0008               	return
 10525                           
 10526                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10527  0099  01B1               	clrf	(_Load^(0+256)+1)
 10528  009A  01B2               	clrf	((_Load+1)^(0+256)+1)
 10529                           
 10530                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10531  009B  1230               	bcf	_Load^(0+256),4
 10532                           
 10533                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10534  009C  3001               	movlw	1
 10535  009D  0020               	movlb	0	; select bank0
 10536  009E  00A4               	movwf	Load_Main@i
 10537  009F  3000               	movlw	0
 10538  00A0  00A5               	movwf	Load_Main@i+1
 10539  00A1  0825               	movf	Load_Main@i+1,w
 10540  00A2  3A80               	xorlw	128
 10541  00A3  00A0               	movwf	??_Load_Main
 10542  00A4  3080               	movlw	128
 10543  00A5  0220               	subwf	??_Load_Main,w
 10544  00A6  1D03               	skipz
 10545  00A7  28AA               	goto	u11945
 10546  00A8  3004               	movlw	4
 10547  00A9  0224               	subwf	Load_Main@i,w
 10548  00AA                     u11945:	
 10549  00AA  1803               	btfsc	3,0
 10550  00AB  28DE               	goto	l10150
 10551  00AC                     l10144:	
 10552                           
 10553                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10554  00AC  0020               	movlb	0	; select bank0
 10555  00AD  3524               	lslf	Load_Main@i,w
 10556  00AE  3E3B               	addlw	(_Load+11)& (0+255)
 10557  00AF  0086               	movwf	6
 10558  00B0  3001               	movlw	1	; select bank2/3
 10559  00B1  0087               	movwf	7
 10560  00B2  3F40               	moviw [0]fsr1
 10561  00B3  00A0               	movwf	??_Load_Main
 10562  00B4  3F41               	moviw [1]fsr1
 10563  00B5  00A1               	movwf	??_Load_Main+1
 10564  00B6  0820               	movf	??_Load_Main,w
 10565  00B7  0022               	movlb	2	; select bank2
 10566  00B8  07B5               	addwf	(_Load^(0+256)+5),f
 10567  00B9  0020               	movlb	0	; select bank0
 10568  00BA  0821               	movf	??_Load_Main+1,w
 10569  00BB  0022               	movlb	2	; select bank2
 10570  00BC  3DB6               	addwfc	((_Load+1)^(0+256)+5),f
 10571                           
 10572                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10573  00BD  0020               	movlb	0	; select bank0
 10574  00BE  3524               	lslf	Load_Main@i,w
 10575  00BF  3E45               	addlw	(_Load+21)& (0+255)
 10576  00C0  0086               	movwf	6
 10577  00C1  3001               	movlw	1	; select bank2/3
 10578  00C2  0087               	movwf	7
 10579  00C3  3F40               	moviw [0]fsr1
 10580  00C4  00A0               	movwf	??_Load_Main
 10581  00C5  3F41               	moviw [1]fsr1
 10582  00C6  00A1               	movwf	??_Load_Main+1
 10583  00C7  0820               	movf	??_Load_Main,w
 10584  00C8  0022               	movlb	2	; select bank2
 10585  00C9  07B7               	addwf	(_Load^(0+256)+7),f
 10586  00CA  0020               	movlb	0	; select bank0
 10587  00CB  0821               	movf	??_Load_Main+1,w
 10588  00CC  0022               	movlb	2	; select bank2
 10589  00CD  3DB8               	addwfc	((_Load+1)^(0+256)+7),f
 10590  00CE  3001               	movlw	1
 10591  00CF  0020               	movlb	0	; select bank0
 10592  00D0  07A4               	addwf	Load_Main@i,f
 10593  00D1  3000               	movlw	0
 10594  00D2  3DA5               	addwfc	Load_Main@i+1,f
 10595  00D3  0825               	movf	Load_Main@i+1,w
 10596  00D4  3A80               	xorlw	128
 10597  00D5  00A0               	movwf	??_Load_Main
 10598  00D6  3080               	movlw	128
 10599  00D7  0220               	subwf	??_Load_Main,w
 10600  00D8  1D03               	skipz
 10601  00D9  28DC               	goto	u11955
 10602  00DA  3004               	movlw	4
 10603  00DB  0224               	subwf	Load_Main@i,w
 10604  00DC                     u11955:	
 10605  00DC  1C03               	skipc
 10606  00DD  28AC               	goto	l10144
 10607  00DE                     l10150:	
 10608                           
 10609                           ;OverLoad_B1.c: 84: }
 10610                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10611  00DE  3003               	movlw	3
 10612  00DF  00F2               	movwf	___lwdiv@divisor
 10613  00E0  3000               	movlw	0
 10614  00E1  00F3               	movwf	___lwdiv@divisor+1
 10615  00E2  0022               	movlb	2	; select bank2
 10616  00E3  0836               	movf	((_Load+1)^(0+256)+5),w
 10617  00E4  01F5               	clrf	___lwdiv@dividend+1
 10618  00E5  07F5               	addwf	___lwdiv@dividend+1,f
 10619  00E6  0835               	movf	(_Load^(0+256)+5),w
 10620  00E7  01F4               	clrf	___lwdiv@dividend
 10621  00E8  07F4               	addwf	___lwdiv@dividend,f
 10622  00E9  3192  2261  3180   	fcall	___lwdiv
 10623  00EC  0873               	movf	?___lwdiv+1,w
 10624  00ED  0022               	movlb	2	; select bank2
 10625  00EE  01B6               	clrf	((_Load+1)^(0+256)+5)
 10626  00EF  07B6               	addwf	((_Load+1)^(0+256)+5),f
 10627  00F0  0872               	movf	?___lwdiv,w
 10628  00F1  01B5               	clrf	(_Load^(0+256)+5)
 10629  00F2  07B5               	addwf	(_Load^(0+256)+5),f
 10630                           
 10631                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10632  00F3  3003               	movlw	3
 10633  00F4  00F2               	movwf	___lwdiv@divisor
 10634  00F5  3000               	movlw	0
 10635  00F6  00F3               	movwf	___lwdiv@divisor+1
 10636  00F7  0838               	movf	((_Load+1)^(0+256)+7),w
 10637  00F8  01F5               	clrf	___lwdiv@dividend+1
 10638  00F9  07F5               	addwf	___lwdiv@dividend+1,f
 10639  00FA  0837               	movf	(_Load^(0+256)+7),w
 10640  00FB  01F4               	clrf	___lwdiv@dividend
 10641  00FC  07F4               	addwf	___lwdiv@dividend,f
 10642  00FD  3192  2261  3180   	fcall	___lwdiv
 10643  0100  0873               	movf	?___lwdiv+1,w
 10644  0101  0022               	movlb	2	; select bank2
 10645  0102  01B8               	clrf	((_Load+1)^(0+256)+7)
 10646  0103  07B8               	addwf	((_Load+1)^(0+256)+7),f
 10647  0104  0872               	movf	?___lwdiv,w
 10648  0105  01B7               	clrf	(_Load^(0+256)+7)
 10649  0106  07B7               	addwf	(_Load^(0+256)+7),f
 10650                           
 10651                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10652  0107  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10653                           
 10654                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10655  010A  0022               	movlb	2	; select bank2
 10656  010B  0838               	movf	((_Load+1)^(0+256)+7),w
 10657  010C  0236               	subwf	((_Load+1)^(0+256)+5),w
 10658  010D  1D03               	skipz
 10659  010E  2911               	goto	u11965
 10660  010F  0837               	movf	(_Load^(0+256)+7),w
 10661  0110  0235               	subwf	(_Load^(0+256)+5),w
 10662  0111                     u11965:	
 10663  0111  1C03               	skipc
 10664  0112  0008               	return
 10665                           
 10666                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10667  0113  3005               	movlw	5
 10668  0114  3E30               	addlw	_Load& (0+255)
 10669  0115  0086               	movwf	6
 10670  0116  3001               	movlw	1	; select bank2/3
 10671  0117  0087               	movwf	7
 10672  0118  0937               	comf	(_Load^(0+256)+7),w
 10673  0119  0020               	movlb	0	; select bank0
 10674  011A  00A0               	movwf	??_Load_Main
 10675  011B  0022               	movlb	2	; select bank2
 10676  011C  0938               	comf	((_Load+1)^(0+256)+7),w
 10677  011D  0020               	movlb	0	; select bank0
 10678  011E  00A1               	movwf	??_Load_Main+1
 10679  011F  0AA0               	incf	??_Load_Main,f
 10680  0120  1903               	skipnz
 10681  0121  0AA1               	incf	??_Load_Main+1,f
 10682  0122  3F40               	moviw [0]fsr1
 10683  0123  0720               	addwf	??_Load_Main,w
 10684  0124  0022               	movlb	2	; select bank2
 10685  0125  00CF               	movwf	(_Load^(0+256)+31)
 10686  0126  3F41               	moviw [1]fsr1
 10687  0127  0020               	movlb	0	; select bank0
 10688  0128  3D21               	addwfc	??_Load_Main+1,w
 10689  0129  0022               	movlb	2	; select bank2
 10690  012A  00D0               	movwf	(_Load^(0+256)+32)
 10691                           
 10692                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10693  012B  01B5               	clrf	(_Load^(0+256)+5)
 10694  012C  01B6               	clrf	((_Load+1)^(0+256)+5)
 10695                           
 10696                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10697  012D  01B7               	clrf	(_Load^(0+256)+7)
 10698  012E  01B8               	clrf	((_Load+1)^(0+256)+7)
 10699                           
 10700                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10701  012F  1DB0               	btfss	_Load^(0+256),3
 10702  0130  298D               	goto	l10190
 10703                           
 10704                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10705  0131  3002               	movlw	2
 10706  0132  0259               	subwf	(_Load^(0+256)+41),w
 10707  0133  1803               	skipnc
 10708  0134  298D               	goto	l10190
 10709                           
 10710                           ;OverLoad_B1.c: 96: Load.Count++;
 10711  0135  3001               	movlw	1
 10712  0136  0020               	movlb	0	; select bank0
 10713  0137  00A0               	movwf	??_Load_Main
 10714  0138  0820               	movf	??_Load_Main,w
 10715  0139  0022               	movlb	2	; select bank2
 10716  013A  07D9               	addwf	(_Load^(0+256)+41),f
 10717                           
 10718                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10719  013B  319A  22FE  3180   	fcall	_getDimmer_Load_Status
 10720  013E  0020               	movlb	0	; select bank0
 10721  013F  00A0               	movwf	??_Load_Main
 10722  0140  0820               	movf	??_Load_Main,w
 10723  0141  00A3               	movwf	Load_Main@Load_Status
 10724                           
 10725                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10726  0142  319C  2471  3180   	fcall	_getMain_Lights_Count
 10727  0145  0020               	movlb	0	; select bank0
 10728  0146  00A0               	movwf	??_Load_Main
 10729  0147  0820               	movf	??_Load_Main,w
 10730  0148  0022               	movlb	2	; select bank2
 10731  0149  00DC               	movwf	(_Load^(0+256)+44)
 10732                           
 10733                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10734  014A  0859               	movf	(_Load^(0+256)+41),w
 10735  014B  3A01               	xorlw	1
 10736  014C  1D03               	skipz
 10737  014D  2958               	goto	l10176
 10738                           
 10739                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10740  014E  3002               	movlw	2
 10741  014F  0020               	movlb	0	; select bank0
 10742  0150  00A0               	movwf	??_Load_Main
 10743  0151  0820               	movf	??_Load_Main,w
 10744  0152  0022               	movlb	2	; select bank2
 10745  0153  00DB               	movwf	(_Load^(0+256)+43)
 10746                           
 10747                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10748  0154  30E8               	movlw	232
 10749  0155  00D5               	movwf	(_Load^(0+256)+37)
 10750  0156  3003               	movlw	3
 10751  0157  2963               	goto	L7
 10752  0158                     l10176:	
 10753                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10754                           
 10755  0158  0859               	movf	(_Load^(0+256)+41),w
 10756  0159  3A02               	xorlw	2
 10757  015A  1D03               	skipz
 10758  015B  298D               	goto	l10190
 10759                           
 10760                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10761  015C  085C               	movf	(_Load^(0+256)+44),w
 10762  015D  3A01               	xorlw	1
 10763  015E  1D03               	skipz
 10764  015F  2965               	goto	l10182
 10765                           
 10766                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10767  0160  3037               	movlw	55
 10768  0161  00D5               	movwf	(_Load^(0+256)+37)
 10769  0162  3000               	movlw	0
 10770  0163                     L7:	
 10771  0163  00D6               	movwf	(_Load^(0+256)+38)
 10772                           
 10773                           ;OverLoad_B1.c: 105: } else {
 10774  0164  298D               	goto	l10190
 10775  0165                     l10182:	
 10776                           
 10777                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10778  0165  0020               	movlb	0	; select bank0
 10779  0166  08A3               	movf	Load_Main@Load_Status,f
 10780  0167  1D03               	skipz
 10781  0168  2981               	goto	l10186
 10782                           
 10783                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10784  0169  0022               	movlb	2	; select bank2
 10785  016A  085C               	movf	(_Load^(0+256)+44),w
 10786  016B  0020               	movlb	0	; select bank0
 10787  016C  00A0               	movwf	??_Load_Main
 10788  016D  01A1               	clrf	??_Load_Main+1
 10789  016E  0820               	movf	??_Load_Main,w
 10790  016F  00F2               	movwf	___wmul@multiplier
 10791  0170  0821               	movf	??_Load_Main+1,w
 10792  0171  00F3               	movwf	___wmul@multiplier+1
 10793  0172  3037               	movlw	55
 10794  0173  00F4               	movwf	___wmul@multiplicand
 10795  0174  3000               	movlw	0
 10796  0175  00F5               	movwf	___wmul@multiplicand+1
 10797  0176  319F  2701  3180   	fcall	___wmul
 10798  0179  0873               	movf	?___wmul+1,w
 10799  017A  0022               	movlb	2	; select bank2
 10800  017B  01D6               	clrf	((_Load+1)^(0+256)+37)
 10801  017C  07D6               	addwf	((_Load+1)^(0+256)+37),f
 10802  017D  0872               	movf	?___wmul,w
 10803  017E  01D5               	clrf	(_Load^(0+256)+37)
 10804  017F  07D5               	addwf	(_Load^(0+256)+37),f
 10805                           
 10806                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10807  0180  298D               	goto	l10190
 10808  0181                     l10186:	
 10809  0181  0020               	movlb	0	; select bank0
 10810  0182  0823               	movf	Load_Main@Load_Status,w
 10811  0183  3A01               	xorlw	1
 10812  0184  1D03               	skipz
 10813  0185  298D               	goto	l10190
 10814                           
 10815                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10816  0186  0022               	movlb	2	; select bank2
 10817  0187  0839               	movf	(_Load^(0+256)+9),w
 10818  0188  3E37               	addlw	55
 10819  0189  00D5               	movwf	(_Load^(0+256)+37)
 10820  018A  3000               	movlw	0
 10821  018B  3D3A               	addwfc	((_Load+1)^(0+256)+9),w
 10822  018C  00D6               	movwf	((_Load+1)^(0+256)+37)
 10823  018D                     l10190:	
 10824                           
 10825                           ;OverLoad_B1.c: 110: }
 10826                           ;OverLoad_B1.c: 111: }
 10827                           ;OverLoad_B1.c: 112: }
 10828                           ;OverLoad_B1.c: 113: }
 10829                           ;OverLoad_B1.c: 114: }
 10830                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10831  018D  0022               	movlb	2	; select bank2
 10832  018E  0856               	movf	((_Load+1)^(0+256)+37),w
 10833  018F  0250               	subwf	((_Load+1)^(0+256)+31),w
 10834  0190  1D03               	skipz
 10835  0191  2994               	goto	u12045
 10836  0192  0855               	movf	(_Load^(0+256)+37),w
 10837  0193  024F               	subwf	(_Load^(0+256)+31),w
 10838  0194                     u12045:	
 10839  0194  1C03               	skipc
 10840  0195  29A3               	goto	l10200
 10841                           
 10842                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10843  0196  3001               	movlw	1
 10844  0197  0020               	movlb	0	; select bank0
 10845  0198  00A0               	movwf	??_Load_Main
 10846  0199  0820               	movf	??_Load_Main,w
 10847  019A  0022               	movlb	2	; select bank2
 10848  019B  07DA               	addwf	(_Load^(0+256)+42),f
 10849                           
 10850                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10851  019C  085A               	movf	(_Load^(0+256)+42),w
 10852  019D  025B               	subwf	(_Load^(0+256)+43),w
 10853  019E  1803               	skipnc
 10854  019F  0008               	return
 10855                           
 10856                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10857  01A0  01DA               	clrf	(_Load^(0+256)+42)
 10858                           
 10859                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10860  01A1  16B0               	bsf	_Load^(0+256),5
 10861                           
 10862                           ;OverLoad_B1.c: 142: }
 10863                           ;OverLoad_B1.c: 143: } else {
 10864  01A2  0008               	return
 10865  01A3                     l10200:	
 10866                           
 10867                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10868  01A3  01DA               	clrf	(_Load^(0+256)+42)
 10869                           
 10870                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10871  01A4  1DB0               	btfss	_Load^(0+256),3
 10872  01A5  0008               	return
 10873                           
 10874                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10875  01A6  3001               	movlw	1
 10876  01A7  0020               	movlb	0	; select bank0
 10877  01A8  00A0               	movwf	??_Load_Main
 10878  01A9  0820               	movf	??_Load_Main,w
 10879  01AA  0022               	movlb	2	; select bank2
 10880  01AB  07DD               	addwf	(_Load^(0+256)+45),f
 10881                           
 10882                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10883  01AC  3003               	movlw	3
 10884  01AD  025D               	subwf	(_Load^(0+256)+45),w
 10885  01AE  1C03               	skipc
 10886  01AF  0008               	return
 10887                           
 10888                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10889  01B0  01DD               	clrf	(_Load^(0+256)+45)
 10890                           
 10891                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10892  01B1  17B0               	bsf	_Load^(0+256),7
 10893                           
 10894                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10895  01B2  11B0               	bcf	_Load^(0+256),3
 10896                           
 10897                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10898  01B3  01D9               	clrf	(_Load^(0+256)+41)
 10899                           
 10900                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10901  01B4  0850               	movf	((_Load+1)^(0+256)+31),w
 10902  01B5  01BA               	clrf	((_Load+1)^(0+256)+9)
 10903  01B6  07BA               	addwf	((_Load+1)^(0+256)+9),f
 10904  01B7  084F               	movf	(_Load^(0+256)+31),w
 10905  01B8  01B9               	clrf	(_Load^(0+256)+9)
 10906  01B9  07B9               	addwf	(_Load^(0+256)+9),f
 10907                           
 10908                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10909  01BA  3003               	movlw	3
 10910  01BB  0020               	movlb	0	; select bank0
 10911  01BC  00A0               	movwf	??_Load_Main
 10912  01BD  0820               	movf	??_Load_Main,w
 10913  01BE  0022               	movlb	2	; select bank2
 10914  01BF  00DB               	movwf	(_Load^(0+256)+43)
 10915                           
 10916                           ;OverLoad_B1.c: 156: }
 10917                           ;OverLoad_B1.c: 157: }
 10918                           ;OverLoad_B1.c: 180: }
 10919                           ;OverLoad_B1.c: 181: }
 10920                           ;OverLoad_B1.c: 182: }
 10921                           ;OverLoad_B1.c: 183: } else {
 10922  01C0  0008               	return
 10923  01C1                     l1851:	
 10924                           
 10925                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10926  01C1  1630               	bsf	_Load^(0+256),4
 10927                           
 10928                           ;OverLoad_B1.c: 185: }
 10929                           ;OverLoad_B1.c: 186: } else {
 10930  01C2  0008               	return
 10931  01C3                     l1850:	
 10932                           
 10933                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10934  01C3  1D30               	btfss	_Load^(0+256),2
 10935  01C4  29D6               	goto	l10238
 10936                           
 10937                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10938  01C5  1130               	bcf	_Load^(0+256),2
 10939                           
 10940                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10941  01C6  1230               	bcf	_Load^(0+256),4
 10942                           
 10943                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10944  01C7  01B1               	clrf	(_Load^(0+256)+1)
 10945  01C8  01B2               	clrf	((_Load+1)^(0+256)+1)
 10946                           
 10947                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10948  01C9  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10949                           
 10950                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10951  01CC  0022               	movlb	2	; select bank2
 10952  01CD  01DA               	clrf	(_Load^(0+256)+42)
 10953                           
 10954                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10955  01CE  01DD               	clrf	(_Load^(0+256)+45)
 10956                           
 10957                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10958  01CF  01B5               	clrf	(_Load^(0+256)+5)
 10959  01D0  01B6               	clrf	((_Load+1)^(0+256)+5)
 10960                           
 10961                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10962  01D1  01B7               	clrf	(_Load^(0+256)+7)
 10963  01D2  01B8               	clrf	((_Load+1)^(0+256)+7)
 10964                           
 10965                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10966  01D3  11B0               	bcf	_Load^(0+256),3
 10967                           
 10968                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10969  01D4  01D9               	clrf	(_Load^(0+256)+41)
 10970                           
 10971                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10972  01D5  13B0               	bcf	_Load^(0+256),7
 10973  01D6                     l10238:	
 10974                           
 10975                           ;OverLoad_B1.c: 229: }
 10976                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10977  01D6  1EB0               	btfss	_Load^(0+256),5
 10978  01D7  0008               	return
 10979                           
 10980                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10981  01D8  3001               	movlw	1
 10982  01D9  07B3               	addwf	(_Load^(0+256)+3),f
 10983  01DA  3000               	movlw	0
 10984  01DB  3DB4               	addwfc	((_Load+1)^(0+256)+3),f
 10985                           
 10986                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10987  01DC  3001               	movlw	1
 10988  01DD  0234               	subwf	((_Load+1)^(0+256)+3),w
 10989  01DE  30F4               	movlw	244
 10990  01DF  1903               	skipnz
 10991  01E0  0233               	subwf	(_Load^(0+256)+3),w
 10992  01E1  1C03               	skipc
 10993  01E2  0008               	return
 10994                           
 10995                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10996  01E3  01B3               	clrf	(_Load^(0+256)+3)
 10997  01E4  01B4               	clrf	((_Load+1)^(0+256)+3)
 10998                           
 10999                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 11000  01E5  12B0               	bcf	_Load^(0+256),5
 11001                           
 11002                           ;OverLoad_B1.c: 235: }
 11003                           ;OverLoad_B1.c: 236: }
 11004                           ;OverLoad_B1.c: 237: }
 11005                           ;OverLoad_B1.c: 238: } else {
 11006  01E6  0008               	return
 11007  01E7                     l1840:	
 11008                           
 11009                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 11010  01E7  1C20               	btfss	_myMain^(0+256),0
 11011  01E8  0008               	return
 11012                           
 11013                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 11014  01E9  1430               	bsf	_Load^(0+256),0
 11015  01EA  0008               	return
 11016  01EB                     __end_of_Load_Main:	
 11017                           
 11018                           	psect	text64
 11019  1C71                     __ptext64:	
 11020 ;; *************** function _getMain_Lights_Count *****************
 11021 ;; Defined at:
 11022 ;;		line 466 in file "../src/Main_B1.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;		None
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  status2         1    4[COMMON] unsigned char 
 11027 ;;  status1         1    3[COMMON] unsigned char 
 11028 ;;  count           1    2[COMMON] unsigned char 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      unsigned char 
 11031 ;; Registers used:
 11032 ;;		wreg, status,2, status,0
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        3 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    3
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_Load_Main
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _getMain_Lights_Count
 11054  1C71                     _getMain_Lights_Count:	
 11055                           
 11056                           ;Main_B1.c: 467: char count = 0;
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11060  1C71  01F2               	clrf	getMain_Lights_Count@count
 11061                           
 11062                           ;Main_B1.c: 471: char status1 = 0;
 11063  1C72  01F3               	clrf	getMain_Lights_Count@status1
 11064                           
 11065                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11066  1C73  3000               	movlw	0
 11067  1C74  0021               	movlb	1	; select bank1
 11068  1C75  19E2               	btfsc	_DimmerIntr1^(0+128),3
 11069  1C76  3001               	movlw	1
 11070  1C77  00F3               	movwf	getMain_Lights_Count@status1
 11071                           
 11072                           ;Main_B1.c: 475: char status2 = 0;
 11073  1C78  01F4               	clrf	getMain_Lights_Count@status2
 11074                           
 11075                           ;Main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11076  1C79  3000               	movlw	0
 11077  1C7A  19E9               	btfsc	_DimmerIntr2^(0+128),3
 11078  1C7B  3001               	movlw	1
 11079  1C7C  00F4               	movwf	getMain_Lights_Count@status2
 11080                           
 11081                           ;Main_B1.c: 500: return count = (status1 + status2);
 11082  1C7D  0873               	movf	getMain_Lights_Count@status1,w
 11083  1C7E  0774               	addwf	getMain_Lights_Count@status2,w
 11084  1C7F  00F2               	movwf	getMain_Lights_Count@count
 11085  1C80  0008               	return
 11086  1C81                     __end_of_getMain_Lights_Count:	
 11087                           
 11088                           	psect	text65
 11089  1AFE                     __ptext65:	
 11090 ;; *************** function _getDimmer_Load_Status *****************
 11091 ;; Defined at:
 11092 ;;		line 1069 in file "../src/Dimmer_B1.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;		None
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  status          1    2[COMMON] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  1    wreg      unsigned char 
 11099 ;; Registers used:
 11100 ;;		wreg, status,2
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;Total ram usage:        1 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    3
 11113 ;; This function calls:
 11114 ;;		Nothing
 11115 ;; This function is called by:
 11116 ;;		_Load_Main
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function _getDimmer_Load_Status
 11122  1AFE                     _getDimmer_Load_Status:	
 11123                           
 11124                           ;Dimmer_B1.c: 1070: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11125                           
 11126                           ;incstack = 0
 11127                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11128  1AFE  3000               	movlw	0
 11129  1AFF  0021               	movlb	1	; select bank1
 11130  1B00  193A               	btfsc	_Dimmer^(0+128),2
 11131  1B01  3001               	movlw	1
 11132  1B02  00F2               	movwf	getDimmer_Load_Status@status
 11133                           
 11134                           ;Dimmer_B1.c: 1071: return status;
 11135  1B03  0872               	movf	getDimmer_Load_Status@status,w
 11136  1B04  0008               	return
 11137  1B05                     __end_of_getDimmer_Load_Status:	
 11138                           
 11139                           	psect	text66
 11140  1AF7                     __ptext66:	
 11141 ;; *************** function _getDimmer_LoadGO *****************
 11142 ;; Defined at:
 11143 ;;		line 1063 in file "../src/Dimmer_B1.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;		None
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  loadgo          1    2[COMMON] unsigned char 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      unsigned char 
 11150 ;; Registers used:
 11151 ;;		wreg, status,2
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;Total ram usage:        1 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    3
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_Load_Main
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _getDimmer_LoadGO
 11173  1AF7                     _getDimmer_LoadGO:	
 11174                           
 11175                           ;Dimmer_B1.c: 1064: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11179  1AF7  3000               	movlw	0
 11180  1AF8  0021               	movlb	1	; select bank1
 11181  1AF9  18BA               	btfsc	_Dimmer^(0+128),1
 11182  1AFA  3001               	movlw	1
 11183  1AFB  00F2               	movwf	getDimmer_LoadGO@loadgo
 11184                           
 11185                           ;Dimmer_B1.c: 1065: return loadgo;
 11186  1AFC  0872               	movf	getDimmer_LoadGO@loadgo,w
 11187  1AFD  0008               	return
 11188  1AFE                     __end_of_getDimmer_LoadGO:	
 11189                           
 11190                           	psect	text67
 11191  1E92                     __ptext67:	
 11192 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11193 ;; Defined at:
 11194 ;;		line 238 in file "../src/Dimmer_B1.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  status          1    5[COMMON] unsigned char 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      unsigned char 
 11201 ;; Registers used:
 11202 ;;		wreg, status,2, status,0
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;Total ram usage:        4 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    3
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_Load_Main
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           
 11223                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11224  1E92                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11225                           
 11226                           ;Dimmer_B1.c: 239: char status = 0;
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11230  1E92  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11231                           
 11232                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11233  1E93  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2165
 11234  1E94  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2165,f
 11235  1E95  0021               	movlb	1	; select bank1
 11236  1E96  1E62               	btfss	_DimmerIntr1^(0+128),4
 11237  1E97  1A69               	btfsc	_DimmerIntr2^(0+128),4
 11238  1E98  2E9A               	goto	l7686
 11239  1E99  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2165
 11240  1E9A                     l7686:	
 11241  1E9A  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2165,w
 11242  1E9B  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11243  1E9C  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11244  1E9D  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11245                           
 11246                           ;Dimmer_B1.c: 254: if (status == 0) {
 11247  1E9E  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11248  1E9F  1D03               	skipz
 11249  1EA0  2EAB               	goto	l7698
 11250                           
 11251                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11252  1EA1  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2166
 11253  1EA2  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2166,f
 11254  1EA3  1F62               	btfss	_DimmerIntr1^(0+128),6
 11255  1EA4  1B69               	btfsc	_DimmerIntr2^(0+128),6
 11256  1EA5  2EA7               	goto	l7696
 11257  1EA6  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2166
 11258  1EA7                     l7696:	
 11259  1EA7  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2166,w
 11260  1EA8  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11261  1EA9  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11262  1EAA  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11263  1EAB                     l7698:	
 11264                           
 11265                           ;Dimmer_B1.c: 266: }
 11266                           ;Dimmer_B1.c: 268: return status;
 11267  1EAB  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11268  1EAC  0008               	return
 11269  1EAD                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11270                           
 11271                           	psect	text68
 11272  1F01                     __ptext68:	
 11273 ;; *************** function ___wmul *****************
 11274 ;; Defined at:
 11275 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11276 ;; Parameters:    Size  Location     Type
 11277 ;;  multiplier      2    2[COMMON] unsigned int 
 11278 ;;  multiplicand    2    4[COMMON] unsigned int 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;  product         2    6[COMMON] unsigned int 
 11281 ;; Return value:  Size  Location     Type
 11282 ;;                  2    2[COMMON] unsigned int 
 11283 ;; Registers used:
 11284 ;;		wreg, status,2, status,0
 11285 ;; Tracked objects:
 11286 ;;		On entry : 0/0
 11287 ;;		On exit  : 0/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11290 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;Total ram usage:        6 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; Hardware stack levels required when called:    3
 11297 ;; This function calls:
 11298 ;;		Nothing
 11299 ;; This function is called by:
 11300 ;;		_Load_Main
 11301 ;; This function uses a non-reentrant model
 11302 ;;
 11303                           
 11304                           
 11305                           ;psect for function ___wmul
 11306  1F01                     ___wmul:	
 11307                           
 11308                           ;incstack = 0
 11309                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11310  1F01  01F6               	clrf	___wmul@product
 11311  1F02  01F7               	clrf	___wmul@product+1
 11312  1F03                     l8244:	
 11313  1F03  1C72               	btfss	___wmul@multiplier,0
 11314  1F04  2F09               	goto	l2983
 11315  1F05  0874               	movf	___wmul@multiplicand,w
 11316  1F06  07F6               	addwf	___wmul@product,f
 11317  1F07  0875               	movf	___wmul@multiplicand+1,w
 11318  1F08  3DF7               	addwfc	___wmul@product+1,f
 11319  1F09                     l2983:	
 11320  1F09  3001               	movlw	1
 11321  1F0A                     u8655:	
 11322  1F0A  35F4               	lslf	___wmul@multiplicand,f
 11323  1F0B  0DF5               	rlf	___wmul@multiplicand+1,f
 11324  1F0C  0B89               	decfsz	9,f
 11325  1F0D  2F0A               	goto	u8655
 11326  1F0E  3001               	movlw	1
 11327  1F0F                     u8665:	
 11328  1F0F  36F3               	lsrf	___wmul@multiplier+1,f
 11329  1F10  0CF2               	rrf	___wmul@multiplier,f
 11330  1F11  0B89               	decfsz	9,f
 11331  1F12  2F0F               	goto	u8665
 11332  1F13  0873               	movf	___wmul@multiplier+1,w
 11333  1F14  0472               	iorwf	___wmul@multiplier,w
 11334  1F15  1D03               	skipz
 11335  1F16  2F03               	goto	l8244
 11336  1F17  0877               	movf	___wmul@product+1,w
 11337  1F18  01F3               	clrf	?___wmul+1
 11338  1F19  07F3               	addwf	?___wmul+1,f
 11339  1F1A  0876               	movf	___wmul@product,w
 11340  1F1B  01F2               	clrf	?___wmul
 11341  1F1C  07F2               	addwf	?___wmul,f
 11342  1F1D  0008               	return
 11343  1F1E                     __end_of___wmul:	
 11344                           
 11345                           	psect	text69
 11346  1261                     __ptext69:	
 11347 ;; *************** function ___lwdiv *****************
 11348 ;; Defined at:
 11349 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  divisor         2    2[COMMON] unsigned int 
 11352 ;;  dividend        2    4[COMMON] unsigned int 
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;  quotient        2    7[COMMON] unsigned int 
 11355 ;;  counter         1    9[COMMON] unsigned char 
 11356 ;; Return value:  Size  Location     Type
 11357 ;;                  2    2[COMMON] unsigned int 
 11358 ;; Registers used:
 11359 ;;		wreg, status,2, status,0
 11360 ;; Tracked objects:
 11361 ;;		On entry : 0/0
 11362 ;;		On exit  : 0/0
 11363 ;;		Unchanged: 0/0
 11364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;Total ram usage:        8 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; Hardware stack levels required when called:    3
 11372 ;; This function calls:
 11373 ;;		Nothing
 11374 ;; This function is called by:
 11375 ;;		_Load_Main
 11376 ;;		_setRF_Main
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           
 11381                           ;psect for function ___lwdiv
 11382  1261                     ___lwdiv:	
 11383                           
 11384                           ;incstack = 0
 11385                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11386  1261  01F7               	clrf	___lwdiv@quotient
 11387  1262  01F8               	clrf	___lwdiv@quotient+1
 11388  1263  0873               	movf	___lwdiv@divisor+1,w
 11389  1264  0472               	iorwf	___lwdiv@divisor,w
 11390  1265  1903               	skipnz
 11391  1266  2A90               	goto	l7646
 11392  1267  01F9               	clrf	___lwdiv@counter
 11393  1268  0AF9               	incf	___lwdiv@counter,f
 11394  1269                     l7634:	
 11395  1269  1BF3               	btfsc	___lwdiv@divisor+1,7
 11396  126A  2A75               	goto	l7636
 11397  126B  3001               	movlw	1
 11398  126C                     u7485:	
 11399  126C  35F2               	lslf	___lwdiv@divisor,f
 11400  126D  0DF3               	rlf	___lwdiv@divisor+1,f
 11401  126E  0B89               	decfsz	9,f
 11402  126F  2A6C               	goto	u7485
 11403  1270  3001               	movlw	1
 11404  1271  00F6               	movwf	??___lwdiv
 11405  1272  0876               	movf	??___lwdiv,w
 11406  1273  07F9               	addwf	___lwdiv@counter,f
 11407  1274  2A69               	goto	l7634
 11408  1275                     l7636:	
 11409  1275  3001               	movlw	1
 11410  1276                     u7505:	
 11411  1276  35F7               	lslf	___lwdiv@quotient,f
 11412  1277  0DF8               	rlf	___lwdiv@quotient+1,f
 11413  1278  0B89               	decfsz	9,f
 11414  1279  2A76               	goto	u7505
 11415  127A  0873               	movf	___lwdiv@divisor+1,w
 11416  127B  0275               	subwf	___lwdiv@dividend+1,w
 11417  127C  1D03               	skipz
 11418  127D  2A80               	goto	u7515
 11419  127E  0872               	movf	___lwdiv@divisor,w
 11420  127F  0274               	subwf	___lwdiv@dividend,w
 11421  1280                     u7515:	
 11422  1280  1C03               	skipc
 11423  1281  2A87               	goto	l7642
 11424  1282  0872               	movf	___lwdiv@divisor,w
 11425  1283  02F4               	subwf	___lwdiv@dividend,f
 11426  1284  0873               	movf	___lwdiv@divisor+1,w
 11427  1285  3BF5               	subwfb	___lwdiv@dividend+1,f
 11428  1286  1477               	bsf	___lwdiv@quotient,0
 11429  1287                     l7642:	
 11430  1287  3001               	movlw	1
 11431  1288                     u7525:	
 11432  1288  36F3               	lsrf	___lwdiv@divisor+1,f
 11433  1289  0CF2               	rrf	___lwdiv@divisor,f
 11434  128A  0B89               	decfsz	9,f
 11435  128B  2A88               	goto	u7525
 11436  128C  3001               	movlw	1
 11437  128D  02F9               	subwf	___lwdiv@counter,f
 11438  128E  1D03               	btfss	3,2
 11439  128F  2A75               	goto	l7636
 11440  1290                     l7646:	
 11441  1290  0878               	movf	___lwdiv@quotient+1,w
 11442  1291  01F3               	clrf	?___lwdiv+1
 11443  1292  07F3               	addwf	?___lwdiv+1,f
 11444  1293  0877               	movf	___lwdiv@quotient,w
 11445  1294  01F2               	clrf	?___lwdiv
 11446  1295  07F2               	addwf	?___lwdiv,f
 11447  1296  0008               	return
 11448  1297                     __end_of___lwdiv:	
 11449                           
 11450                           	psect	text70
 11451  1AB7                     __ptext70:	
 11452 ;; *************** function _Load_Initialization *****************
 11453 ;; Defined at:
 11454 ;;		line 9 in file "../src/OverLoad_B1.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;		None               void
 11461 ;; Registers used:
 11462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    4
 11475 ;; This function calls:
 11476 ;;		_setLoad_AH_AL_Restore
 11477 ;; This function is called by:
 11478 ;;		_main
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _Load_Initialization
 11484  1AB7                     _Load_Initialization:	
 11485                           
 11486                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11490  1AB7  319E  2677         	fcall	_setLoad_AH_AL_Restore
 11491  1AB9  0008               	return
 11492  1ABA                     __end_of_Load_Initialization:	
 11493                           
 11494                           	psect	text71
 11495  1E77                     __ptext71:	
 11496 ;; *************** function _setLoad_AH_AL_Restore *****************
 11497 ;; Defined at:
 11498 ;;		line 266 in file "../src/OverLoad_B1.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;		None
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;  i               1    3[COMMON] unsigned char 
 11503 ;; Return value:  Size  Location     Type
 11504 ;;		None               void
 11505 ;; Registers used:
 11506 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;Total ram usage:        2 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; Hardware stack levels required when called:    3
 11519 ;; This function calls:
 11520 ;;		Nothing
 11521 ;; This function is called by:
 11522 ;;		_Load_Initialization
 11523 ;;		_Load_Main
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           
 11528                           ;psect for function _setLoad_AH_AL_Restore
 11529  1E77                     _setLoad_AH_AL_Restore:	
 11530                           
 11531                           ;OverLoad_B1.c: 267: char i;
 11532                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11533                           
 11534                           ;incstack = 0
 11535                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11536  1E77  01F3               	clrf	setLoad_AH_AL_Restore@i
 11537  1E78                     L8:	
 11538  1E78  3005               	movlw	5
 11539  1E79  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11540  1E7A  1803               	btfsc	3,0
 11541  1E7B  0008               	return
 11542                           
 11543                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11544  1E7C  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11545  1E7D  3E3B               	addlw	(_Load+11)& (0+255)
 11546  1E7E  0086               	movwf	6
 11547  1E7F  3001               	movlw	1	; select bank2/3
 11548  1E80  0087               	movwf	7
 11549  1E81  3000               	movlw	0
 11550  1E82  3FC0               	movwi [0]fsr1
 11551  1E83  3FC1               	movwi [1]fsr1
 11552                           
 11553                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11554  1E84  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11555  1E85  3E45               	addlw	(_Load+21)& (0+255)
 11556  1E86  0086               	movwf	6
 11557  1E87  3001               	movlw	1	; select bank2/3
 11558  1E88  0087               	movwf	7
 11559  1E89  30FF               	movlw	255
 11560  1E8A  3FC0               	movwi [0]fsr1
 11561  1E8B  30FF               	movlw	255
 11562  1E8C  3FC1               	movwi [1]fsr1
 11563  1E8D  3001               	movlw	1
 11564  1E8E  00F2               	movwf	??_setLoad_AH_AL_Restore
 11565  1E8F  0872               	movf	??_setLoad_AH_AL_Restore,w
 11566  1E90  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11567  1E91  2E78               	goto	L8
 11568  1E92                     __end_of_setLoad_AH_AL_Restore:	
 11569                           
 11570                           	psect	text72
 11571  1B98                     __ptext72:	
 11572 ;; *************** function _LED_Main *****************
 11573 ;; Defined at:
 11574 ;;		line 47 in file "../src/LED_B1.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;		None
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;		None
 11579 ;; Return value:  Size  Location     Type
 11580 ;;		None               void
 11581 ;; Registers used:
 11582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;Total ram usage:        0 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    5
 11595 ;; This function calls:
 11596 ;;		_setLED_Main
 11597 ;; This function is called by:
 11598 ;;		_main
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           
 11603                           ;psect for function _LED_Main
 11604  1B98                     _LED_Main:	
 11605                           
 11606                           ;LED_B1.c: 53: setLED_Main(1);
 11607                           
 11608                           ;incstack = 0
 11609                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11610  1B98  3001               	movlw	1
 11611  1B99  3188  2001  319B   	fcall	_setLED_Main
 11612                           
 11613                           ;LED_B1.c: 56: setLED_Main(2);
 11614  1B9C  3002               	movlw	2
 11615  1B9D  3188  2001  319B   	fcall	_setLED_Main
 11616                           
 11617                           ;LED_B1.c: 62: setLED_Main(99);
 11618  1BA0  3063               	movlw	99
 11619  1BA1  3188  2001         	fcall	_setLED_Main
 11620  1BA3  0008               	return
 11621  1BA4                     __end_of_LED_Main:	
 11622                           
 11623                           	psect	text73
 11624  0801                     __ptext73:	
 11625 ;; *************** function _setLED_Main *****************
 11626 ;; Defined at:
 11627 ;;		line 221 in file "../src/LED_B1.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  led             1    wreg     unsigned char 
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  led             1    6[COMMON] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;		None               void
 11634 ;; Registers used:
 11635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;Total ram usage:        3 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    4
 11648 ;; This function calls:
 11649 ;;		_LedPointSelect
 11650 ;; This function is called by:
 11651 ;;		_LED_Main
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           
 11656                           ;psect for function _setLED_Main
 11657  0801                     _setLED_Main:	
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11661                           ;setLED_Main@led stored from wreg
 11662  0801  00F6               	movwf	setLED_Main@led
 11663                           
 11664                           ;LED_B1.c: 222: LedPointSelect(led);
 11665  0802  0876               	movf	setLED_Main@led,w
 11666  0803  319E  26E4  3188   	fcall	_LedPointSelect
 11667                           
 11668                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11669  0806  0021               	movlb	1	; select bank1
 11670  0807  0847               	movf	_LED^(0+128),w
 11671  0808  0086               	movwf	6
 11672  0809  3001               	movlw	1	; select bank2/3
 11673  080A  0087               	movwf	7
 11674  080B  1C81               	btfss	1,1
 11675  080C  0008               	return
 11676                           
 11677                           ;LED_B1.c: 224: LED->Time++;
 11678  080D  0A47               	incf	_LED^(0+128),w
 11679  080E  0086               	movwf	6
 11680  080F  3001               	movlw	1	; select bank2/3
 11681  0810  0087               	movwf	7
 11682  0811  3001               	movlw	1
 11683  0812  0781               	addwf	1,f
 11684  0813  3141               	addfsr 1,1
 11685  0814  1803               	skipnc
 11686  0815  0A81               	incf	1,f
 11687                           
 11688                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11689  0816  0A47               	incf	_LED^(0+128),w
 11690  0817  0086               	movwf	6
 11691  0818  3001               	movlw	1	; select bank2/3
 11692  0819  0087               	movwf	7
 11693  081A  3F40               	moviw [0]fsr1
 11694  081B  00F4               	movwf	??_setLED_Main
 11695  081C  3F41               	moviw [1]fsr1
 11696  081D  00F5               	movwf	??_setLED_Main+1
 11697  081E  3000               	movlw	0
 11698  081F  0275               	subwf	??_setLED_Main+1,w
 11699  0820  3019               	movlw	25
 11700  0821  1903               	skipnz
 11701  0822  0274               	subwf	??_setLED_Main,w
 11702  0823  1C03               	skipc
 11703  0824  0008               	return
 11704                           
 11705                           ;LED_B1.c: 226: LED->Time = 0;
 11706  0825  0A47               	incf	_LED^(0+128),w
 11707  0826  0086               	movwf	6
 11708  0827  3001               	movlw	1	; select bank2/3
 11709  0828  0087               	movwf	7
 11710  0829  3000               	movlw	0
 11711  082A  3FC0               	movwi [0]fsr1
 11712  082B  3FC1               	movwi [1]fsr1
 11713                           
 11714                           ;LED_B1.c: 228: if (led == 1) {
 11715  082C  0876               	movf	setLED_Main@led,w
 11716  082D  3A01               	xorlw	1
 11717  082E  1D03               	skipz
 11718  082F  2833               	goto	l1168
 11719                           
 11720                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11721  0830  3008               	movlw	8
 11722  0831  0020               	movlb	0	; select bank0
 11723  0832  068C               	xorwf	12,f
 11724  0833                     l1168:	
 11725                           
 11726                           ;LED_B1.c: 230: }
 11727                           ;LED_B1.c: 233: if (led == 2) {
 11728  0833  0876               	movf	setLED_Main@led,w
 11729  0834  3A02               	xorlw	2
 11730  0835  1D03               	skipz
 11731  0836  283A               	goto	l1169
 11732                           
 11733                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11734  0837  3080               	movlw	128
 11735  0838  0020               	movlb	0	; select bank0
 11736  0839  068E               	xorwf	14,f
 11737  083A                     l1169:	
 11738                           
 11739                           ;LED_B1.c: 235: }
 11740                           ;LED_B1.c: 243: if (led == 99) {
 11741  083A  0876               	movf	setLED_Main@led,w
 11742  083B  3A63               	xorlw	99
 11743  083C  1D03               	skipz
 11744  083D  0008               	return
 11745                           
 11746                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11747  083E  3020               	movlw	32
 11748  083F  0020               	movlb	0	; select bank0
 11749  0840  068D               	xorwf	13,f
 11750  0841  0008               	return
 11751  0842                     __end_of_setLED_Main:	
 11752                           
 11753                           	psect	text74
 11754  1B8C                     __ptext74:	
 11755 ;; *************** function _LED_Initialization *****************
 11756 ;; Defined at:
 11757 ;;		line 31 in file "../src/LED_B1.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;		None               void
 11764 ;; Registers used:
 11765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        0 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    6
 11778 ;; This function calls:
 11779 ;;		_setLED_Initialization
 11780 ;; This function is called by:
 11781 ;;		_main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _LED_Initialization
 11787  1B8C                     _LED_Initialization:	
 11788                           
 11789                           ;LED_B1.c: 33: setLED_Initialization(1);
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11793  1B8C  3001               	movlw	1
 11794  1B8D  319C  2461  319B   	fcall	_setLED_Initialization
 11795                           
 11796                           ;LED_B1.c: 36: setLED_Initialization(2);
 11797  1B90  3002               	movlw	2
 11798  1B91  319C  2461  319B   	fcall	_setLED_Initialization
 11799                           
 11800                           ;LED_B1.c: 42: setLED_Initialization(99);
 11801  1B94  3063               	movlw	99
 11802  1B95  319C  2461         	fcall	_setLED_Initialization
 11803  1B97  0008               	return
 11804  1B98                     __end_of_LED_Initialization:	
 11805                           
 11806                           	psect	text75
 11807  1C61                     __ptext75:	
 11808 ;; *************** function _setLED_Initialization *****************
 11809 ;; Defined at:
 11810 ;;		line 69 in file "../src/LED_B1.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;  led             1    wreg     unsigned char 
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;  led             1    6[COMMON] unsigned char 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;		None               void
 11817 ;; Registers used:
 11818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;Total ram usage:        1 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    5
 11831 ;; This function calls:
 11832 ;;		_LedPointSelect
 11833 ;;		_setLED
 11834 ;; This function is called by:
 11835 ;;		_LED_Initialization
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           
 11840                           ;psect for function _setLED_Initialization
 11841  1C61                     _setLED_Initialization:	
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11845                           ;setLED_Initialization@led stored from wreg
 11846  1C61  00F6               	movwf	setLED_Initialization@led
 11847                           
 11848                           ;LED_B1.c: 70: LedPointSelect(led);
 11849  1C62  0876               	movf	setLED_Initialization@led,w
 11850  1C63  319E  26E4  319C   	fcall	_LedPointSelect
 11851                           
 11852                           ;LED_B1.c: 71: LED->Enable = 1;
 11853  1C66  0021               	movlb	1	; select bank1
 11854  1C67  0847               	movf	_LED^(0+128),w
 11855  1C68  0086               	movwf	6
 11856  1C69  3001               	movlw	1	; select bank2/3
 11857  1C6A  0087               	movwf	7
 11858  1C6B  1401               	bsf	1,0
 11859                           
 11860                           ;LED_B1.c: 72: setLED(led, 0);
 11861  1C6C  01F4               	clrf	setLED@command
 11862  1C6D  0876               	movf	setLED_Initialization@led,w
 11863  1C6E  3197  2741         	fcall	_setLED
 11864  1C70  0008               	return
 11865  1C71                     __end_of_setLED_Initialization:	
 11866                           
 11867                           	psect	text76
 11868  11FA                     __ptext76:	
 11869 ;; *************** function _Flash_Memory_Main *****************
 11870 ;; Defined at:
 11871 ;;		line 954 in file "../src/MCU_B1.c"
 11872 ;; Parameters:    Size  Location     Type
 11873 ;;		None
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;		None               void
 11878 ;; Registers used:
 11879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;Total ram usage:        1 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    6
 11892 ;; This function calls:
 11893 ;;		_Flash_Memory_Modify
 11894 ;;		_getMain_All_LightsStatus
 11895 ;; This function is called by:
 11896 ;;		_main
 11897 ;; This function uses a non-reentrant model
 11898 ;;
 11899                           
 11900                           
 11901                           ;psect for function _Flash_Memory_Main
 11902  11FA                     _Flash_Memory_Main:	
 11903                           
 11904                           ;MCU_B1.c: 955: if (Memory.Modify == 1) {
 11905                           
 11906                           ;incstack = 0
 11907                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11908  11FA  0024               	movlb	4	; select bank4
 11909  11FB  1C44               	btfss	(_Memory^(0+512)+36),0
 11910  11FC  0008               	return
 11911                           
 11912                           ;MCU_B1.c: 956: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11913  11FD  319C  2405  3191   	fcall	_getMain_All_LightsStatus
 11914  1200  3A00               	xorlw	0
 11915  1201  3000               	movlw	0
 11916  1202  1903               	skipnz
 11917  1203  3001               	movlw	1
 11918  1204  00F8               	movwf	??_Flash_Memory_Main
 11919  1205  0DF8               	rlf	??_Flash_Memory_Main,f
 11920  1206  0024               	movlb	4	; select bank4
 11921  1207  0844               	movf	(_Memory^(0+512)+36),w
 11922  1208  0678               	xorwf	??_Flash_Memory_Main,w
 11923  1209  39FD               	andlw	-3
 11924  120A  0678               	xorwf	??_Flash_Memory_Main,w
 11925  120B  00C4               	movwf	(_Memory^(0+512)+36)
 11926                           
 11927                           ;MCU_B1.c: 957: if (Memory.GO == 1) {
 11928  120C  1CC4               	btfss	(_Memory^(0+512)+36),1
 11929  120D  2A27               	goto	l1439
 11930                           
 11931                           ;MCU_B1.c: 958: Memory.Runtime = 1;
 11932  120E  15C4               	bsf	(_Memory^(0+512)+36),3
 11933                           
 11934                           ;MCU_B1.c: 959: Memory.Time++;
 11935  120F  3001               	movlw	1
 11936  1210  07C2               	addwf	(_Memory^(0+512)+34),f
 11937  1211  3000               	movlw	0
 11938  1212  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11939                           
 11940                           ;MCU_B1.c: 960: if (Memory.Time == (200 / 20)) {
 11941  1213  3022               	movlw	34
 11942  1214  3E20               	addlw	_Memory& (0+255)
 11943  1215  0086               	movwf	6
 11944  1216  3002               	movlw	2	; select bank4/5
 11945  1217  0087               	movwf	7
 11946  1218  3F40               	moviw [0]fsr1
 11947  1219  3A0A               	xorlw	10
 11948  121A  1D03               	skipz
 11949  121B  2A1E               	goto	u8875
 11950  121C  3F41               	moviw [1]fsr1
 11951  121D  3A00               	xorlw	0
 11952  121E                     u8875:	
 11953  121E  1D03               	skipz
 11954  121F  0008               	return
 11955                           
 11956                           ;MCU_B1.c: 961: Memory.Time = 0;
 11957  1220  01C2               	clrf	(_Memory^(0+512)+34)
 11958  1221  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11959                           
 11960                           ;MCU_B1.c: 962: Memory.Modify = 0;
 11961  1222  1044               	bcf	(_Memory^(0+512)+36),0
 11962                           
 11963                           ;MCU_B1.c: 963: Memory.GO = 0;
 11964  1223  10C4               	bcf	(_Memory^(0+512)+36),1
 11965                           
 11966                           ;MCU_B1.c: 964: Flash_Memory_Modify();
 11967  1224  3194  2442         	fcall	_Flash_Memory_Modify
 11968                           
 11969                           ;MCU_B1.c: 965: }
 11970                           ;MCU_B1.c: 966: } else {
 11971  1226  0008               	return
 11972  1227                     l1439:	
 11973                           
 11974                           ;MCU_B1.c: 967: if (Memory.Runtime == 1) {
 11975  1227  1DC4               	btfss	(_Memory^(0+512)+36),3
 11976  1228  0008               	return
 11977                           
 11978                           ;MCU_B1.c: 968: Memory.Runtime = 0;
 11979  1229  11C4               	bcf	(_Memory^(0+512)+36),3
 11980                           
 11981                           ;MCU_B1.c: 969: Memory.Time = 0;
 11982  122A  01C2               	clrf	(_Memory^(0+512)+34)
 11983  122B  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11984  122C  0008               	return
 11985  122D                     __end_of_Flash_Memory_Main:	
 11986                           
 11987                           	psect	text77
 11988  1442                     __ptext77:	
 11989 ;; *************** function _Flash_Memory_Modify *****************
 11990 ;; Defined at:
 11991 ;;		line 1027 in file "../src/MCU_B1.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;  i               1    7[COMMON] unsigned char 
 11996 ;; Return value:  Size  Location     Type
 11997 ;;		None               void
 11998 ;; Registers used:
 11999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:        2 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    5
 12012 ;; This function calls:
 12013 ;;		_Flash_Memory_Erasing
 12014 ;;		_Flash_Memory_Read
 12015 ;;		_Flash_Memory_Write
 12016 ;;		_setMemory_Data
 12017 ;; This function is called by:
 12018 ;;		_Flash_Memory_Main
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _Flash_Memory_Modify
 12024  1442                     _Flash_Memory_Modify:	
 12025                           
 12026                           ;MCU_B1.c: 1028: char i = 0;
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12030  1442  01F7               	clrf	Flash_Memory_Modify@i
 12031                           
 12032                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 12033  1443  01F7               	clrf	Flash_Memory_Modify@i
 12034  1444  3020               	movlw	32
 12035  1445  0277               	subwf	Flash_Memory_Modify@i,w
 12036  1446  1803               	btfsc	3,0
 12037  1447  2C5C               	goto	l7960
 12038  1448                     l7954:	
 12039                           
 12040                           ;MCU_B1.c: 1030: Memory.Data[i] = Flash_Memory_Read(i);
 12041  1448  0877               	movf	Flash_Memory_Modify@i,w
 12042  1449  319D  253F  3194   	fcall	_Flash_Memory_Read
 12043  144C  00F6               	movwf	??_Flash_Memory_Modify
 12044  144D  0877               	movf	Flash_Memory_Modify@i,w
 12045  144E  3E20               	addlw	_Memory& (0+255)
 12046  144F  0086               	movwf	6
 12047  1450  3002               	movlw	2	; select bank4/5
 12048  1451  0087               	movwf	7
 12049  1452  0876               	movf	??_Flash_Memory_Modify,w
 12050  1453  0081               	movwf	1
 12051  1454  3001               	movlw	1
 12052  1455  00F6               	movwf	??_Flash_Memory_Modify
 12053  1456  0876               	movf	??_Flash_Memory_Modify,w
 12054  1457  07F7               	addwf	Flash_Memory_Modify@i,f
 12055  1458  3020               	movlw	32
 12056  1459  0277               	subwf	Flash_Memory_Modify@i,w
 12057  145A  1C03               	skipc
 12058  145B  2C48               	goto	l7954
 12059  145C                     l7960:	
 12060                           
 12061                           ;MCU_B1.c: 1031: }
 12062                           ;MCU_B1.c: 1032: setMemory_Data(0, product->Data[12]);
 12063  145C  0020               	movlb	0	; select bank0
 12064  145D  086D               	movf	_product,w
 12065  145E  0086               	movwf	6
 12066  145F  3002               	movlw	2	; select bank4/5
 12067  1460  0087               	movwf	7
 12068  1461  3002               	movlw	2	; select bank4/5
 12069  1462  3F4C               	moviw [12]fsr1
 12070  1463  00F2               	movwf	setMemory_Data@data
 12071  1464  3000               	movlw	0
 12072  1465  319B  2353  3194   	fcall	_setMemory_Data
 12073                           
 12074                           ;MCU_B1.c: 1033: setMemory_Data(1, product->Data[13]);
 12075  1468  0020               	movlb	0	; select bank0
 12076  1469  086D               	movf	_product,w
 12077  146A  0086               	movwf	6
 12078  146B  3002               	movlw	2	; select bank4/5
 12079  146C  0087               	movwf	7
 12080  146D  3002               	movlw	2	; select bank4/5
 12081  146E  3F4D               	moviw [13]fsr1
 12082  146F  00F2               	movwf	setMemory_Data@data
 12083  1470  3001               	movlw	1
 12084  1471  319B  2353  3194   	fcall	_setMemory_Data
 12085                           
 12086                           ;MCU_B1.c: 1034: setMemory_Data(2, product->Data[14]);
 12087  1474  0020               	movlb	0	; select bank0
 12088  1475  086D               	movf	_product,w
 12089  1476  0086               	movwf	6
 12090  1477  3002               	movlw	2	; select bank4/5
 12091  1478  0087               	movwf	7
 12092  1479  3002               	movlw	2	; select bank4/5
 12093  147A  3F4E               	moviw [14]fsr1
 12094  147B  00F2               	movwf	setMemory_Data@data
 12095  147C  3002               	movlw	2
 12096  147D  319B  2353  3194   	fcall	_setMemory_Data
 12097                           
 12098                           ;MCU_B1.c: 1040: if (Memory.LoopSave == 1) {
 12099  1480  0024               	movlb	4	; select bank4
 12100  1481  1D44               	btfss	(_Memory^(0+512)+36),2
 12101  1482  2C87               	goto	l1462
 12102                           
 12103                           ;MCU_B1.c: 1041: Memory.LoopSave = 0;
 12104  1483  1144               	bcf	(_Memory^(0+512)+36),2
 12105                           
 12106                           ;MCU_B1.c: 1042: myMain.FirstOpen = 0;
 12107  1484  0022               	movlb	2	; select bank2
 12108  1485  11A0               	bcf	_myMain^(0+256),3
 12109                           
 12110                           ;MCU_B1.c: 1043: myMain.First = 0;
 12111  1486  12A0               	bcf	_myMain^(0+256),5
 12112  1487                     l1462:	
 12113                           
 12114                           ;MCU_B1.c: 1045: }
 12115                           ;MCU_B1.c: 1046: GIE = 0;
 12116  1487  138B               	bcf	11,7	;volatile
 12117                           
 12118                           ;MCU_B1.c: 1047: Flash_Memory_Erasing();
 12119  1488  319B  2380  3194   	fcall	_Flash_Memory_Erasing
 12120                           
 12121                           ;MCU_B1.c: 1048: Flash_Memory_Write();
 12122  148B  3191  2178         	fcall	_Flash_Memory_Write
 12123                           
 12124                           ;MCU_B1.c: 1049: GIE = 1;
 12125  148D  178B               	bsf	11,7	;volatile
 12126  148E  0008               	return
 12127  148F                     __end_of_Flash_Memory_Modify:	
 12128                           
 12129                           	psect	text78
 12130  1B80                     __ptext78:	
 12131 ;; *************** function _Flash_Memory_Erasing *****************
 12132 ;; Defined at:
 12133 ;;		line 1016 in file "../src/MCU_B1.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;		None
 12136 ;; Auto vars:     Size  Location     Type
 12137 ;;		None
 12138 ;; Return value:  Size  Location     Type
 12139 ;;		None               void
 12140 ;; Registers used:
 12141 ;;		wreg, status,2, status,0, pclath, cstack
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;Total ram usage:        0 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:    4
 12154 ;; This function calls:
 12155 ;;		_Flash_Memory_Unlock
 12156 ;; This function is called by:
 12157 ;;		_Flash_Memory_Modify
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           
 12162                           ;psect for function _Flash_Memory_Erasing
 12163  1B80                     _Flash_Memory_Erasing:	
 12164                           
 12165                           ;MCU_B1.c: 1017: CFGS = 0;
 12166                           
 12167                           ;incstack = 0
 12168                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12169  1B80  0023               	movlb	3	; select bank3
 12170  1B81  1315               	bcf	21,6	;volatile
 12171                           
 12172                           ;MCU_B1.c: 1018: PMADRH = 0x30;
 12173  1B82  3030               	movlw	48
 12174  1B83  0092               	movwf	18	;volatile
 12175                           
 12176                           ;MCU_B1.c: 1019: PMADRL = 0x00;
 12177  1B84  0191               	clrf	17	;volatile
 12178                           
 12179                           ;MCU_B1.c: 1020: FREE = 1;
 12180  1B85  1615               	bsf	21,4	;volatile
 12181                           
 12182                           ;MCU_B1.c: 1021: WREN = 1;
 12183  1B86  1515               	bsf	21,2	;volatile
 12184                           
 12185                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12186  1B87  319B  232C         	fcall	_Flash_Memory_Unlock
 12187                           
 12188                           ;MCU_B1.c: 1023: WREN = 0;
 12189  1B89  0023               	movlb	3	; select bank3
 12190  1B8A  1115               	bcf	21,2	;volatile
 12191  1B8B  0008               	return
 12192  1B8C                     __end_of_Flash_Memory_Erasing:	
 12193                           
 12194                           	psect	text79
 12195  0450                     __ptext79:	
 12196 ;; *************** function _Flash_Memory_Initialization *****************
 12197 ;; Defined at:
 12198 ;;		line 913 in file "../src/MCU_B1.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;		None
 12201 ;; Auto vars:     Size  Location     Type
 12202 ;;  i               1   59[BANK0 ] unsigned char 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;		None               void
 12205 ;; Registers used:
 12206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;Total ram usage:        2 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    6
 12219 ;; This function calls:
 12220 ;;		_Flash_Memory_Read
 12221 ;;		_Flash_Memory_Write
 12222 ;;		_getDimmerLights_ValueToPercent
 12223 ;;		_setMemory_Data
 12224 ;; This function is called by:
 12225 ;;		_main
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           
 12230                           ;psect for function _Flash_Memory_Initialization
 12231  0450                     _Flash_Memory_Initialization:	
 12232                           
 12233                           ;MCU_B1.c: 914: char i = 0;
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12237  0450  0020               	movlb	0	; select bank0
 12238  0451  01DB               	clrf	Flash_Memory_Initialization@i
 12239                           
 12240                           ;MCU_B1.c: 915: if (Flash_Memory_Read(31) == 0xaa) {
 12241  0452  301F               	movlw	31
 12242  0453  319D  253F  3184   	fcall	_Flash_Memory_Read
 12243  0456  3AAA               	xorlw	170
 12244  0457  1D03               	skipz
 12245  0458  2CC2               	goto	l9974
 12246                           
 12247                           ;MCU_B1.c: 916: product->Data[12] = Flash_Memory_Read(0);
 12248  0459  3000               	movlw	0
 12249  045A  319D  253F  3184   	fcall	_Flash_Memory_Read
 12250  045D  0020               	movlb	0	; select bank0
 12251  045E  00DA               	movwf	??_Flash_Memory_Initialization
 12252  045F  086D               	movf	_product,w
 12253  0460  3E0C               	addlw	12
 12254  0461  0086               	movwf	6
 12255  0462  3002               	movlw	2	; select bank4/5
 12256  0463  0087               	movwf	7
 12257  0464  085A               	movf	??_Flash_Memory_Initialization,w
 12258  0465  0081               	movwf	1
 12259                           
 12260                           ;MCU_B1.c: 917: product->Data[13] = Flash_Memory_Read(1);
 12261  0466  3001               	movlw	1
 12262  0467  319D  253F  3184   	fcall	_Flash_Memory_Read
 12263  046A  0020               	movlb	0	; select bank0
 12264  046B  00DA               	movwf	??_Flash_Memory_Initialization
 12265  046C  086D               	movf	_product,w
 12266  046D  3E0D               	addlw	13
 12267  046E  0086               	movwf	6
 12268  046F  3002               	movlw	2	; select bank4/5
 12269  0470  0087               	movwf	7
 12270  0471  085A               	movf	??_Flash_Memory_Initialization,w
 12271  0472  0081               	movwf	1
 12272                           
 12273                           ;MCU_B1.c: 918: product->Data[14] = Flash_Memory_Read(2);
 12274  0473  3002               	movlw	2
 12275  0474  319D  253F  3184   	fcall	_Flash_Memory_Read
 12276  0477  0020               	movlb	0	; select bank0
 12277  0478  00DA               	movwf	??_Flash_Memory_Initialization
 12278  0479  086D               	movf	_product,w
 12279  047A  3E0E               	addlw	14
 12280  047B  0086               	movwf	6
 12281  047C  3002               	movlw	2	; select bank4/5
 12282  047D  0087               	movwf	7
 12283  047E  085A               	movf	??_Flash_Memory_Initialization,w
 12284  047F  0081               	movwf	1
 12285                           
 12286                           ;MCU_B1.c: 924: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12287  0480  3034               	movlw	52
 12288  0481  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12289  0484  0020               	movlb	0	; select bank0
 12290  0485  00DA               	movwf	??_Flash_Memory_Initialization
 12291  0486  085A               	movf	??_Flash_Memory_Initialization,w
 12292  0487  00DB               	movwf	Flash_Memory_Initialization@i
 12293                           
 12294                           ;MCU_B1.c: 925: product->Data[21] = i;
 12295  0488  085B               	movf	Flash_Memory_Initialization@i,w
 12296  0489  00DA               	movwf	??_Flash_Memory_Initialization
 12297  048A  086D               	movf	_product,w
 12298  048B  3E15               	addlw	21
 12299  048C  0086               	movwf	6
 12300  048D  3002               	movlw	2	; select bank4/5
 12301  048E  0087               	movwf	7
 12302  048F  085A               	movf	??_Flash_Memory_Initialization,w
 12303  0490  0081               	movwf	1
 12304                           
 12305                           ;MCU_B1.c: 926: product->Data[22] = i;
 12306  0491  085B               	movf	Flash_Memory_Initialization@i,w
 12307  0492  00DA               	movwf	??_Flash_Memory_Initialization
 12308  0493  086D               	movf	_product,w
 12309  0494  3E16               	addlw	22
 12310  0495  0086               	movwf	6
 12311  0496  3002               	movlw	2	; select bank4/5
 12312  0497  0087               	movwf	7
 12313  0498  085A               	movf	??_Flash_Memory_Initialization,w
 12314  0499  0081               	movwf	1
 12315                           
 12316                           ;MCU_B1.c: 927: product->Data[23] = i;
 12317  049A  085B               	movf	Flash_Memory_Initialization@i,w
 12318  049B  00DA               	movwf	??_Flash_Memory_Initialization
 12319  049C  086D               	movf	_product,w
 12320  049D  3E17               	addlw	23
 12321  049E  0086               	movwf	6
 12322  049F  3002               	movlw	2	; select bank4/5
 12323  04A0  0087               	movwf	7
 12324  04A1  085A               	movf	??_Flash_Memory_Initialization,w
 12325  04A2  0081               	movwf	1
 12326                           
 12327                           ;MCU_B1.c: 929: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12328  04A3  086D               	movf	_product,w
 12329  04A4  3E0C               	addlw	12
 12330  04A5  0086               	movwf	6
 12331  04A6  3002               	movlw	2	; select bank4/5
 12332  04A7  0087               	movwf	7
 12333  04A8  0801               	movf	1,w
 12334  04A9  3AFF               	xorlw	255
 12335  04AA  1D03               	skipz
 12336  04AB  0008               	return
 12337  04AC  086D               	movf	_product,w
 12338  04AD  3E0D               	addlw	13
 12339  04AE  0086               	movwf	6
 12340  04AF  3002               	movlw	2	; select bank4/5
 12341  04B0  0087               	movwf	7
 12342  04B1  0801               	movf	1,w
 12343  04B2  3AFF               	xorlw	255
 12344  04B3  1D03               	skipz
 12345  04B4  0008               	return
 12346  04B5  086D               	movf	_product,w
 12347  04B6  3E0E               	addlw	14
 12348  04B7  0086               	movwf	6
 12349  04B8  3002               	movlw	2	; select bank4/5
 12350  04B9  0087               	movwf	7
 12351  04BA  0801               	movf	1,w
 12352  04BB  3AFF               	xorlw	255
 12353  04BC  1D03               	skipz
 12354  04BD  0008               	return
 12355                           
 12356                           ;MCU_B1.c: 930: myMain.FirstOpen = 1;
 12357  04BE  0022               	movlb	2	; select bank2
 12358  04BF  15A0               	bsf	_myMain^(0+256),3
 12359                           
 12360                           ;MCU_B1.c: 931: myMain.First = 1;
 12361  04C0  16A0               	bsf	_myMain^(0+256),5
 12362                           
 12363                           ;MCU_B1.c: 932: }
 12364                           ;MCU_B1.c: 933: } else {
 12365  04C1  0008               	return
 12366  04C2                     l9974:	
 12367                           
 12368                           ;MCU_B1.c: 934: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12369  04C2  3034               	movlw	52
 12370  04C3  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12371  04C6  0020               	movlb	0	; select bank0
 12372  04C7  00DA               	movwf	??_Flash_Memory_Initialization
 12373  04C8  085A               	movf	??_Flash_Memory_Initialization,w
 12374  04C9  00DB               	movwf	Flash_Memory_Initialization@i
 12375                           
 12376                           ;MCU_B1.c: 935: setMemory_Data(0, 0xff);
 12377  04CA  30FF               	movlw	255
 12378  04CB  00DA               	movwf	??_Flash_Memory_Initialization
 12379  04CC  085A               	movf	??_Flash_Memory_Initialization,w
 12380  04CD  00F2               	movwf	setMemory_Data@data
 12381  04CE  3000               	movlw	0
 12382  04CF  319B  2353  3184   	fcall	_setMemory_Data
 12383                           
 12384                           ;MCU_B1.c: 936: setMemory_Data(1, 0xff);
 12385  04D2  30FF               	movlw	255
 12386  04D3  0020               	movlb	0	; select bank0
 12387  04D4  00DA               	movwf	??_Flash_Memory_Initialization
 12388  04D5  085A               	movf	??_Flash_Memory_Initialization,w
 12389  04D6  00F2               	movwf	setMemory_Data@data
 12390  04D7  3001               	movlw	1
 12391  04D8  319B  2353  3184   	fcall	_setMemory_Data
 12392                           
 12393                           ;MCU_B1.c: 937: setMemory_Data(2, 0xff);
 12394  04DB  30FF               	movlw	255
 12395  04DC  0020               	movlb	0	; select bank0
 12396  04DD  00DA               	movwf	??_Flash_Memory_Initialization
 12397  04DE  085A               	movf	??_Flash_Memory_Initialization,w
 12398  04DF  00F2               	movwf	setMemory_Data@data
 12399  04E0  3002               	movlw	2
 12400  04E1  319B  2353  3184   	fcall	_setMemory_Data
 12401                           
 12402                           ;MCU_B1.c: 938: setMemory_Data(3, 0xff);
 12403  04E4  30FF               	movlw	255
 12404  04E5  0020               	movlb	0	; select bank0
 12405  04E6  00DA               	movwf	??_Flash_Memory_Initialization
 12406  04E7  085A               	movf	??_Flash_Memory_Initialization,w
 12407  04E8  00F2               	movwf	setMemory_Data@data
 12408  04E9  3003               	movlw	3
 12409  04EA  319B  2353  3184   	fcall	_setMemory_Data
 12410                           
 12411                           ;MCU_B1.c: 939: setMemory_Data(4, 0xff);
 12412  04ED  30FF               	movlw	255
 12413  04EE  0020               	movlb	0	; select bank0
 12414  04EF  00DA               	movwf	??_Flash_Memory_Initialization
 12415  04F0  085A               	movf	??_Flash_Memory_Initialization,w
 12416  04F1  00F2               	movwf	setMemory_Data@data
 12417  04F2  3004               	movlw	4
 12418  04F3  319B  2353  3184   	fcall	_setMemory_Data
 12419                           
 12420                           ;MCU_B1.c: 940: setMemory_Data(5, 0xff);
 12421  04F6  30FF               	movlw	255
 12422  04F7  0020               	movlb	0	; select bank0
 12423  04F8  00DA               	movwf	??_Flash_Memory_Initialization
 12424  04F9  085A               	movf	??_Flash_Memory_Initialization,w
 12425  04FA  00F2               	movwf	setMemory_Data@data
 12426  04FB  3005               	movlw	5
 12427  04FC  319B  2353  3184   	fcall	_setMemory_Data
 12428                           
 12429                           ;MCU_B1.c: 941: setMemory_Data(31, 0xaa);
 12430  04FF  30AA               	movlw	170
 12431  0500  0020               	movlb	0	; select bank0
 12432  0501  00DA               	movwf	??_Flash_Memory_Initialization
 12433  0502  085A               	movf	??_Flash_Memory_Initialization,w
 12434  0503  00F2               	movwf	setMemory_Data@data
 12435  0504  301F               	movlw	31
 12436  0505  319B  2353  3184   	fcall	_setMemory_Data
 12437                           
 12438                           ;MCU_B1.c: 942: product->Data[21] = i;
 12439  0508  0020               	movlb	0	; select bank0
 12440  0509  085B               	movf	Flash_Memory_Initialization@i,w
 12441  050A  00DA               	movwf	??_Flash_Memory_Initialization
 12442  050B  086D               	movf	_product,w
 12443  050C  3E15               	addlw	21
 12444  050D  0086               	movwf	6
 12445  050E  3002               	movlw	2	; select bank4/5
 12446  050F  0087               	movwf	7
 12447  0510  085A               	movf	??_Flash_Memory_Initialization,w
 12448  0511  0081               	movwf	1
 12449                           
 12450                           ;MCU_B1.c: 943: product->Data[22] = i;
 12451  0512  085B               	movf	Flash_Memory_Initialization@i,w
 12452  0513  00DA               	movwf	??_Flash_Memory_Initialization
 12453  0514  086D               	movf	_product,w
 12454  0515  3E16               	addlw	22
 12455  0516  0086               	movwf	6
 12456  0517  3002               	movlw	2	; select bank4/5
 12457  0518  0087               	movwf	7
 12458  0519  085A               	movf	??_Flash_Memory_Initialization,w
 12459  051A  0081               	movwf	1
 12460                           
 12461                           ;MCU_B1.c: 944: product->Data[23] = i;
 12462  051B  085B               	movf	Flash_Memory_Initialization@i,w
 12463  051C  00DA               	movwf	??_Flash_Memory_Initialization
 12464  051D  086D               	movf	_product,w
 12465  051E  3E17               	addlw	23
 12466  051F  0086               	movwf	6
 12467  0520  3002               	movlw	2	; select bank4/5
 12468  0521  0087               	movwf	7
 12469  0522  085A               	movf	??_Flash_Memory_Initialization,w
 12470  0523  0081               	movwf	1
 12471                           
 12472                           ;MCU_B1.c: 945: GIE = 0;
 12473  0524  138B               	bcf	11,7	;volatile
 12474                           
 12475                           ;MCU_B1.c: 946: Flash_Memory_Write();
 12476  0525  3191  2178         	fcall	_Flash_Memory_Write
 12477                           
 12478                           ;MCU_B1.c: 947: GIE = 1;
 12479  0527  178B               	bsf	11,7	;volatile
 12480                           
 12481                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12482  0528  0022               	movlb	2	; select bank2
 12483  0529  15A0               	bsf	_myMain^(0+256),3
 12484                           
 12485                           ;MCU_B1.c: 949: myMain.First = 1;
 12486  052A  16A0               	bsf	_myMain^(0+256),5
 12487  052B  0008               	return
 12488  052C                     __end_of_Flash_Memory_Initialization:	
 12489                           
 12490                           	psect	text80
 12491  1B53                     __ptext80:	
 12492 ;; *************** function _setMemory_Data *****************
 12493 ;; Defined at:
 12494 ;;		line 1064 in file "../src/MCU_B1.c"
 12495 ;; Parameters:    Size  Location     Type
 12496 ;;  address         1    wreg     unsigned char 
 12497 ;;  data            1    2[COMMON] unsigned char 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  address         1    4[COMMON] unsigned char 
 12500 ;; Return value:  Size  Location     Type
 12501 ;;		None               void
 12502 ;; Registers used:
 12503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12504 ;; Tracked objects:
 12505 ;;		On entry : 0/0
 12506 ;;		On exit  : 0/0
 12507 ;;		Unchanged: 0/0
 12508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12509 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;Total ram usage:        3 bytes
 12514 ;; Hardware stack levels used:    1
 12515 ;; Hardware stack levels required when called:    3
 12516 ;; This function calls:
 12517 ;;		Nothing
 12518 ;; This function is called by:
 12519 ;;		_Flash_Memory_Initialization
 12520 ;;		_Flash_Memory_Modify
 12521 ;; This function uses a non-reentrant model
 12522 ;;
 12523                           
 12524                           
 12525                           ;psect for function _setMemory_Data
 12526  1B53                     _setMemory_Data:	
 12527                           
 12528                           ;incstack = 0
 12529                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12530                           ;setMemory_Data@address stored from wreg
 12531  1B53  00F4               	movwf	setMemory_Data@address
 12532                           
 12533                           ;MCU_B1.c: 1065: Memory.Data[address] = data;
 12534  1B54  0872               	movf	setMemory_Data@data,w
 12535  1B55  00F3               	movwf	??_setMemory_Data
 12536  1B56  0874               	movf	setMemory_Data@address,w
 12537  1B57  3E20               	addlw	_Memory& (0+255)
 12538  1B58  0086               	movwf	6
 12539  1B59  3002               	movlw	2	; select bank4/5
 12540  1B5A  0087               	movwf	7
 12541  1B5B  0873               	movf	??_setMemory_Data,w
 12542  1B5C  0081               	movwf	1
 12543  1B5D  0008               	return
 12544  1B5E                     __end_of_setMemory_Data:	
 12545                           
 12546                           	psect	text81
 12547  1178                     __ptext81:	
 12548 ;; *************** function _Flash_Memory_Write *****************
 12549 ;; Defined at:
 12550 ;;		line 997 in file "../src/MCU_B1.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;		None
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  i               1    3[COMMON] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;		None               void
 12557 ;; Registers used:
 12558 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 0/0
 12561 ;;		On exit  : 0/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;Total ram usage:        2 bytes
 12569 ;; Hardware stack levels used:    1
 12570 ;; Hardware stack levels required when called:    4
 12571 ;; This function calls:
 12572 ;;		_Flash_Memory_Unlock
 12573 ;; This function is called by:
 12574 ;;		_Flash_Memory_Initialization
 12575 ;;		_Flash_Memory_Modify
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           
 12580                           ;psect for function _Flash_Memory_Write
 12581  1178                     _Flash_Memory_Write:	
 12582                           
 12583                           ;MCU_B1.c: 998: char i = 0;
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12587  1178  01F3               	clrf	Flash_Memory_Write@i
 12588                           
 12589                           ;MCU_B1.c: 999: CFGS = 0;
 12590  1179  0023               	movlb	3	; select bank3
 12591  117A  1315               	bcf	21,6	;volatile
 12592                           
 12593                           ;MCU_B1.c: 1000: PMADRH = 0x30;
 12594  117B  3030               	movlw	48
 12595  117C  0092               	movwf	18	;volatile
 12596                           
 12597                           ;MCU_B1.c: 1001: PMDATH = 0;
 12598  117D  0194               	clrf	20	;volatile
 12599                           
 12600                           ;MCU_B1.c: 1002: FREE = 0;
 12601  117E  1215               	bcf	21,4	;volatile
 12602                           
 12603                           ;MCU_B1.c: 1003: LWLO = 1;
 12604  117F  1695               	bsf	21,5	;volatile
 12605                           
 12606                           ;MCU_B1.c: 1004: WREN = 1;
 12607  1180  1515               	bsf	21,2	;volatile
 12608                           
 12609                           ;MCU_B1.c: 1005: for (i = 0; i < 32; i++) {
 12610  1181  01F3               	clrf	Flash_Memory_Write@i
 12611  1182  3020               	movlw	32
 12612  1183  0273               	subwf	Flash_Memory_Write@i,w
 12613  1184  1803               	btfsc	3,0
 12614  1185  299B               	goto	l1453
 12615  1186                     l7490:	
 12616                           
 12617                           ;MCU_B1.c: 1006: PMADRL = i;
 12618  1186  0873               	movf	Flash_Memory_Write@i,w
 12619  1187  0023               	movlb	3	; select bank3
 12620  1188  0091               	movwf	17	;volatile
 12621                           
 12622                           ;MCU_B1.c: 1007: PMDATL = Memory.Data[i];
 12623  1189  0873               	movf	Flash_Memory_Write@i,w
 12624  118A  3E20               	addlw	_Memory& (0+255)
 12625  118B  0086               	movwf	6
 12626  118C  3002               	movlw	2	; select bank4/5
 12627  118D  0087               	movwf	7
 12628  118E  0801               	movf	1,w
 12629  118F  0093               	movwf	19	;volatile
 12630                           
 12631                           ;MCU_B1.c: 1008: Flash_Memory_Unlock();
 12632  1190  319B  232C  3191   	fcall	_Flash_Memory_Unlock
 12633  1193  3001               	movlw	1
 12634  1194  00F2               	movwf	??_Flash_Memory_Write
 12635  1195  0872               	movf	??_Flash_Memory_Write,w
 12636  1196  07F3               	addwf	Flash_Memory_Write@i,f
 12637  1197  3020               	movlw	32
 12638  1198  0273               	subwf	Flash_Memory_Write@i,w
 12639  1199  1C03               	skipc
 12640  119A  2986               	goto	l7490
 12641  119B                     l1453:	
 12642                           
 12643                           ;MCU_B1.c: 1009: }
 12644                           ;MCU_B1.c: 1010: LWLO = 0;
 12645  119B  0023               	movlb	3	; select bank3
 12646  119C  1295               	bcf	21,5	;volatile
 12647                           
 12648                           ;MCU_B1.c: 1011: Flash_Memory_Unlock();
 12649  119D  319B  232C         	fcall	_Flash_Memory_Unlock
 12650                           
 12651                           ;MCU_B1.c: 1012: WREN = 0;
 12652  119F  0023               	movlb	3	; select bank3
 12653  11A0  1115               	bcf	21,2	;volatile
 12654  11A1  0008               	return
 12655  11A2                     __end_of_Flash_Memory_Write:	
 12656                           
 12657                           	psect	text82
 12658  1B2C                     __ptext82:	
 12659 ;; *************** function _Flash_Memory_Unlock *****************
 12660 ;; Defined at:
 12661 ;;		line 976 in file "../src/MCU_B1.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;		None
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;		None
 12666 ;; Return value:  Size  Location     Type
 12667 ;;		None               void
 12668 ;; Registers used:
 12669 ;;		wreg
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;Total ram usage:        0 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; Hardware stack levels required when called:    3
 12682 ;; This function calls:
 12683 ;;		Nothing
 12684 ;; This function is called by:
 12685 ;;		_Flash_Memory_Write
 12686 ;;		_Flash_Memory_Erasing
 12687 ;; This function uses a non-reentrant model
 12688 ;;
 12689                           
 12690                           
 12691                           ;psect for function _Flash_Memory_Unlock
 12692  1B2C                     _Flash_Memory_Unlock:	
 12693                           
 12694                           ;MCU_B1.c: 977: PMCON2 = 0x55;
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12698  1B2C  3055               	movlw	85
 12699  1B2D  0023               	movlb	3	; select bank3
 12700  1B2E  0096               	movwf	22	;volatile
 12701                           
 12702                           ;MCU_B1.c: 978: PMCON2 = 0xaa;
 12703  1B2F  30AA               	movlw	170
 12704  1B30  0096               	movwf	22	;volatile
 12705                           
 12706                           ;MCU_B1.c: 979: WR = 1;
 12707  1B31  1495               	bsf	21,1	;volatile
 12708                           
 12709                           ;MCU_B1.c: 980: __nop();
 12710  1B32  0000               	nop
 12711                           
 12712                           ;MCU_B1.c: 981: __nop();
 12713  1B33  0000               	nop
 12714  1B34  0008               	return
 12715  1B35                     __end_of_Flash_Memory_Unlock:	
 12716                           
 12717                           	psect	text83
 12718  1D3F                     __ptext83:	
 12719 ;; *************** function _Flash_Memory_Read *****************
 12720 ;; Defined at:
 12721 ;;		line 985 in file "../src/MCU_B1.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  address         1    wreg     unsigned char 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  address         1    4[COMMON] unsigned char 
 12726 ;;  ret             1    5[COMMON] unsigned char 
 12727 ;;  i               1    3[COMMON] unsigned char 
 12728 ;; Return value:  Size  Location     Type
 12729 ;;                  1    wreg      unsigned char 
 12730 ;; Registers used:
 12731 ;;		wreg, status,2
 12732 ;; Tracked objects:
 12733 ;;		On entry : 0/0
 12734 ;;		On exit  : 0/0
 12735 ;;		Unchanged: 0/0
 12736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;Total ram usage:        4 bytes
 12742 ;; Hardware stack levels used:    1
 12743 ;; Hardware stack levels required when called:    3
 12744 ;; This function calls:
 12745 ;;		Nothing
 12746 ;; This function is called by:
 12747 ;;		_Flash_Memory_Initialization
 12748 ;;		_Flash_Memory_Modify
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _Flash_Memory_Read
 12754  1D3F                     _Flash_Memory_Read:	
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12758                           ;Flash_Memory_Read@address stored from wreg
 12759  1D3F  00F4               	movwf	Flash_Memory_Read@address
 12760                           
 12761                           ;MCU_B1.c: 986: char i = 0, ret = 0;
 12762  1D40  01F3               	clrf	Flash_Memory_Read@i
 12763  1D41  01F5               	clrf	Flash_Memory_Read@ret
 12764                           
 12765                           ;MCU_B1.c: 987: PMADRH = 0x30;
 12766  1D42  3030               	movlw	48
 12767  1D43  0023               	movlb	3	; select bank3
 12768  1D44  0092               	movwf	18	;volatile
 12769                           
 12770                           ;MCU_B1.c: 988: PMADRL = address;
 12771  1D45  0874               	movf	Flash_Memory_Read@address,w
 12772  1D46  0091               	movwf	17	;volatile
 12773                           
 12774                           ;MCU_B1.c: 989: CFGS = 0;
 12775  1D47  1315               	bcf	21,6	;volatile
 12776                           
 12777                           ;MCU_B1.c: 990: RD = 1;
 12778  1D48  1415               	bsf	21,0	;volatile
 12779                           
 12780                           ;MCU_B1.c: 991: i = PMDATH;
 12781  1D49  0814               	movf	20,w	;volatile
 12782  1D4A  00F2               	movwf	??_Flash_Memory_Read
 12783  1D4B  0872               	movf	??_Flash_Memory_Read,w
 12784  1D4C  00F3               	movwf	Flash_Memory_Read@i
 12785                           
 12786                           ;MCU_B1.c: 992: ret = PMDATL;
 12787  1D4D  0813               	movf	19,w	;volatile
 12788  1D4E  00F2               	movwf	??_Flash_Memory_Read
 12789  1D4F  0872               	movf	??_Flash_Memory_Read,w
 12790  1D50  00F5               	movwf	Flash_Memory_Read@ret
 12791                           
 12792                           ;MCU_B1.c: 993: return ret;
 12793  1D51  0875               	movf	Flash_Memory_Read@ret,w
 12794  1D52  0008               	return
 12795  1D53                     __end_of_Flash_Memory_Read:	
 12796                           
 12797                           	psect	text84
 12798  052C                     __ptext84:	
 12799 ;; *************** function _Exception_Main *****************
 12800 ;; Defined at:
 12801 ;;		line 509 in file "../src/Main_B1.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;		None
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;  i               2   10[BANK0 ] int 
 12806 ;;  i               2    8[BANK0 ] int 
 12807 ;;  lights          1   12[BANK0 ] unsigned char 
 12808 ;;  error           1    7[BANK0 ] unsigned char 
 12809 ;;  count           1    6[BANK0 ] unsigned char 
 12810 ;; Return value:  Size  Location     Type
 12811 ;;		None               void
 12812 ;; Registers used:
 12813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        8 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; Hardware stack levels required when called:    5
 12826 ;; This function calls:
 12827 ;;		_getDimmerLights_Line
 12828 ;;		_getDimmerLights_Status
 12829 ;;		_getMain_All_Error_Status
 12830 ;;		_getMain_All_LightsStatus
 12831 ;;		_setBuz
 12832 ;;		_setDimmerLights_SwOff
 12833 ;;		_setLED
 12834 ;; This function is called by:
 12835 ;;		_main
 12836 ;; This function uses a non-reentrant model
 12837 ;;
 12838                           
 12839                           
 12840                           ;psect for function _Exception_Main
 12841  052C                     _Exception_Main:	
 12842                           
 12843                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12844                           
 12845                           ;incstack = 0
 12846                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12847  052C  3000               	movlw	0
 12848  052D  3191  21CC  3185   	fcall	_getMain_All_Error_Status
 12849  0530  00F9               	movwf	??_Exception_Main
 12850  0531  0879               	movf	??_Exception_Main,w
 12851  0532  0020               	movlb	0	; select bank0
 12852  0533  00A7               	movwf	Exception_Main@error
 12853                           
 12854                           ;Main_B1.c: 511: char lights = 0, count = 2;
 12855  0534  01AC               	clrf	Exception_Main@lights
 12856  0535  3002               	movlw	2
 12857  0536  00F9               	movwf	??_Exception_Main
 12858  0537  0879               	movf	??_Exception_Main,w
 12859  0538  00A6               	movwf	Exception_Main@count
 12860                           
 12861                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12862  0539  0022               	movlb	2	; select bank2
 12863  053A  1DAB               	btfss	(_myMain^(0+256)+11),3
 12864  053B  2D4A               	goto	l10266
 12865                           
 12866                           ;Main_B1.c: 513: if (error == 0) {
 12867  053C  0020               	movlb	0	; select bank0
 12868  053D  08A7               	movf	Exception_Main@error,f
 12869  053E  1D03               	skipz
 12870  053F  0008               	return
 12871                           
 12872                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12873  0540  0022               	movlb	2	; select bank2
 12874  0541  11AB               	bcf	(_myMain^(0+256)+11),3
 12875                           
 12876                           ;Main_B1.c: 519: setLED(99, 10);
 12877  0542  300A               	movlw	10
 12878  0543  00F9               	movwf	??_Exception_Main
 12879  0544  0879               	movf	??_Exception_Main,w
 12880  0545  00F4               	movwf	setLED@command
 12881  0546  3063               	movlw	99
 12882  0547  3197  2741         	fcall	_setLED
 12883                           
 12884                           ;Main_B1.c: 521: }
 12885                           ;Main_B1.c: 522: } else {
 12886  0549  0008               	return
 12887  054A                     l10266:	
 12888                           
 12889                           ;Main_B1.c: 523: if (error != 0) {
 12890  054A  0020               	movlb	0	; select bank0
 12891  054B  0827               	movf	Exception_Main@error,w
 12892  054C  1903               	btfsc	3,2
 12893  054D  0008               	return
 12894                           
 12895                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12896  054E  0022               	movlb	2	; select bank2
 12897  054F  15AB               	bsf	(_myMain^(0+256)+11),3
 12898                           
 12899                           ;Main_B1.c: 527: setLED(99, 11);
 12900  0550  300B               	movlw	11
 12901  0551  00F9               	movwf	??_Exception_Main
 12902  0552  0879               	movf	??_Exception_Main,w
 12903  0553  00F4               	movwf	setLED@command
 12904  0554  3063               	movlw	99
 12905  0555  3197  2741  3185   	fcall	_setLED
 12906                           
 12907                           ;Main_B1.c: 529: switch (error) {
 12908  0558  2DF5               	goto	l10314
 12909  0559                     l10272:	
 12910                           ;Main_B1.c: 530: case 2:
 12911                           
 12912                           
 12913                           ;Main_B1.c: 531: if (getMain_All_LightsStatus() == 1) {
 12914  0559  319C  2405  3185   	fcall	_getMain_All_LightsStatus
 12915  055C  3A01               	xorlw	1
 12916  055D  1D03               	skipz
 12917  055E  2D68               	goto	l10276
 12918                           
 12919                           ;Main_B1.c: 532: setBuz(10, 300);
 12920  055F  302C               	movlw	44
 12921  0560  0020               	movlb	0	; select bank0
 12922  0561  00A4               	movwf	setBuz@time
 12923  0562  3001               	movlw	1
 12924  0563  00A5               	movwf	setBuz@time+1
 12925  0564  300A               	movlw	10
 12926  0565  3195  2584  3185   	fcall	_setBuz
 12927  0568                     l10276:	
 12928                           
 12929                           ;Main_B1.c: 533: }
 12930                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12931  0568  0020               	movlb	0	; select bank0
 12932  0569  01A8               	clrf	Exception_Main@i
 12933  056A  01A9               	clrf	Exception_Main@i+1
 12934  056B                     l10286:	
 12935  056B  0829               	movf	Exception_Main@i+1,w
 12936  056C  3A80               	xorlw	128
 12937  056D  00F9               	movwf	??_Exception_Main
 12938  056E  3080               	movlw	128
 12939  056F  0279               	subwf	??_Exception_Main,w
 12940  0570  1D03               	skipz
 12941  0571  2D74               	goto	u12175
 12942  0572  0826               	movf	Exception_Main@count,w
 12943  0573  0228               	subwf	Exception_Main@i,w
 12944  0574                     u12175:	
 12945  0574  1803               	btfsc	3,0
 12946  0575  2D96               	goto	u12170
 12947                           
 12948                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12949  0576  0020               	movlb	0	; select bank0
 12950  0577  0828               	movf	Exception_Main@i,w
 12951  0578  3E01               	addlw	1
 12952  0579  319B  23E7  3185   	fcall	_getDimmerLights_Status
 12953  057C  3A01               	xorlw	1
 12954  057D  1D03               	skipz
 12955  057E  2D90               	goto	l10284
 12956                           
 12957                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12958  057F  0021               	movlb	1	; select bank1
 12959  0580  0846               	movf	_DimmerLights^(0+128),w
 12960  0581  0086               	movwf	6
 12961  0582  3001               	movlw	1	; select bank2/3
 12962  0583  0087               	movwf	7
 12963  0584  1401               	bsf	1,0
 12964                           
 12965                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12966  0585  0A46               	incf	_DimmerLights^(0+128),w
 12967  0586  0086               	movwf	6
 12968  0587  3001               	movlw	1	; select bank2/3
 12969  0588  0087               	movwf	7
 12970  0589  1001               	bcf	1,0
 12971                           
 12972                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12973  058A  0020               	movlb	0	; select bank0
 12974  058B  0828               	movf	Exception_Main@i,w
 12975  058C  3E01               	addlw	1
 12976  058D  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 12977  0590                     l10284:	
 12978  0590  3001               	movlw	1
 12979  0591  0020               	movlb	0	; select bank0
 12980  0592  07A8               	addwf	Exception_Main@i,f
 12981  0593  3000               	movlw	0
 12982  0594  3DA9               	addwfc	Exception_Main@i+1,f
 12983  0595  2D6B               	goto	l10286
 12984  0596                     u12170:	
 12985  0596  0020               	movlb	0	; select bank0
 12986  0597  0008               	return
 12987  0598                     l10288:	
 12988                           ;Main_B1.c: 544: case 3:
 12989                           
 12990                           ;Main_B1.c: 541: }
 12991                           ;Main_B1.c: 542: }
 12992                           ;Main_B1.c: 543: break;
 12993                           
 12994                           
 12995                           ;Main_B1.c: 546: setBuz(5, 300);
 12996  0598  302C               	movlw	44
 12997  0599  0020               	movlb	0	; select bank0
 12998  059A  00A4               	movwf	setBuz@time
 12999  059B  3001               	movlw	1
 13000  059C  00A5               	movwf	setBuz@time+1
 13001  059D  3005               	movlw	5
 13002  059E  3195  2584  3185   	fcall	_setBuz
 13003                           
 13004                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 13005  05A1  319C  2414  3185   	fcall	_getDimmerLights_Line
 13006  05A4  00F9               	movwf	??_Exception_Main
 13007  05A5  0879               	movf	??_Exception_Main,w
 13008  05A6  0020               	movlb	0	; select bank0
 13009  05A7  00AC               	movwf	Exception_Main@lights
 13010                           
 13011                           ;Main_B1.c: 548: if (lights == 0) {
 13012  05A8  08AC               	movf	Exception_Main@lights,f
 13013  05A9  1D03               	skipz
 13014  05AA  2DDA               	goto	l10306
 13015                           
 13016                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13017  05AB  01AA               	clrf	Exception_Main@i_3600
 13018  05AC  01AB               	clrf	Exception_Main@i_3600+1
 13019  05AD                     l10304:	
 13020  05AD  082B               	movf	Exception_Main@i_3600+1,w
 13021  05AE  3A80               	xorlw	128
 13022  05AF  00F9               	movwf	??_Exception_Main
 13023  05B0  3080               	movlw	128
 13024  05B1  0279               	subwf	??_Exception_Main,w
 13025  05B2  1D03               	skipz
 13026  05B3  2DB6               	goto	u12205
 13027  05B4  0826               	movf	Exception_Main@count,w
 13028  05B5  022A               	subwf	Exception_Main@i_3600,w
 13029  05B6                     u12205:	
 13030  05B6  1803               	btfsc	3,0
 13031  05B7  2DD8               	goto	u12200
 13032                           
 13033                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13034  05B8  0020               	movlb	0	; select bank0
 13035  05B9  082A               	movf	Exception_Main@i_3600,w
 13036  05BA  3E01               	addlw	1
 13037  05BB  319B  23E7  3185   	fcall	_getDimmerLights_Status
 13038  05BE  3A01               	xorlw	1
 13039  05BF  1D03               	skipz
 13040  05C0  2DD2               	goto	l10302
 13041                           
 13042                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13043  05C1  0021               	movlb	1	; select bank1
 13044  05C2  0846               	movf	_DimmerLights^(0+128),w
 13045  05C3  0086               	movwf	6
 13046  05C4  3001               	movlw	1	; select bank2/3
 13047  05C5  0087               	movwf	7
 13048  05C6  1401               	bsf	1,0
 13049                           
 13050                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13051  05C7  0A46               	incf	_DimmerLights^(0+128),w
 13052  05C8  0086               	movwf	6
 13053  05C9  3001               	movlw	1	; select bank2/3
 13054  05CA  0087               	movwf	7
 13055  05CB  1001               	bcf	1,0
 13056                           
 13057                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13058  05CC  0020               	movlb	0	; select bank0
 13059  05CD  082A               	movf	Exception_Main@i_3600,w
 13060  05CE  3E01               	addlw	1
 13061  05CF  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 13062  05D2                     l10302:	
 13063  05D2  3001               	movlw	1
 13064  05D3  0020               	movlb	0	; select bank0
 13065  05D4  07AA               	addwf	Exception_Main@i_3600,f
 13066  05D5  3000               	movlw	0
 13067  05D6  3DAB               	addwfc	Exception_Main@i_3600+1,f
 13068  05D7  2DAD               	goto	l10304
 13069  05D8                     u12200:	
 13070  05D8  0020               	movlb	0	; select bank0
 13071  05D9  0008               	return
 13072  05DA                     l10306:	
 13073                           ;Main_B1.c: 556: }
 13074                           ;Main_B1.c: 557: }
 13075                           ;Main_B1.c: 558: } else {
 13076                           
 13077                           
 13078                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13079  05DA  0020               	movlb	0	; select bank0
 13080  05DB  082C               	movf	Exception_Main@lights,w
 13081  05DC  319B  23E7  3185   	fcall	_getDimmerLights_Status
 13082  05DF  3A01               	xorlw	1
 13083  05E0  1903               	btfsc	3,2
 13084  05E1  2DE4               	goto	l10308
 13085  05E2  0020               	movlb	0	; select bank0
 13086  05E3  0008               	return
 13087  05E4                     l10308:	
 13088                           
 13089                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 13090  05E4  0021               	movlb	1	; select bank1
 13091  05E5  0846               	movf	_DimmerLights^(0+128),w
 13092  05E6  0086               	movwf	6
 13093  05E7  3001               	movlw	1	; select bank2/3
 13094  05E8  0087               	movwf	7
 13095  05E9  1401               	bsf	1,0
 13096                           
 13097                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 13098  05EA  0A46               	incf	_DimmerLights^(0+128),w
 13099  05EB  0086               	movwf	6
 13100  05EC  3001               	movlw	1	; select bank2/3
 13101  05ED  0087               	movwf	7
 13102  05EE  1001               	bcf	1,0
 13103                           
 13104                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 13105  05EF  0020               	movlb	0	; select bank0
 13106  05F0  082C               	movf	Exception_Main@lights,w
 13107  05F1  3192  22CE         	fcall	_setDimmerLights_SwOff
 13108  05F3  0020               	movlb	0	; select bank0
 13109  05F4  0008               	return
 13110  05F5                     l10314:	
 13111                           ;Main_B1.c: 568: }
 13112                           
 13113                           ;Main_B1.c: 565: }
 13114                           ;Main_B1.c: 566: }
 13115                           ;Main_B1.c: 567: break;
 13116                           
 13117  05F5  0020               	movlb	0	; select bank0
 13118  05F6  0827               	movf	Exception_Main@error,w
 13119                           
 13120                           ; Switch size 1, requested type "space"
 13121                           ; Number of cases is 2, Range of values is 2 to 3
 13122                           ; switch strategies available:
 13123                           ; Name         Instructions Cycles
 13124                           ; simple_byte            7     4 (average)
 13125                           ; direct_byte           13     9 (fixed)
 13126                           ; jumptable            263     9 (fixed)
 13127                           ;	Chosen strategy is simple_byte
 13128  05F7  3A02               	xorlw	2	; case 2
 13129  05F8  1903               	skipnz
 13130  05F9  2D59               	goto	l10272
 13131  05FA  3A01               	xorlw	1	; case 3
 13132  05FB  1903               	skipnz
 13133  05FC  2D98               	goto	l10288
 13134  05FD  2DFF               	goto	l1708
 13135  05FE  0008               	return
 13136  05FF                     l1708:	
 13137  05FF  0008               	return
 13138  0600                     __end_of_Exception_Main:	
 13139                           
 13140                           	psect	text85
 13141  1C14                     __ptext85:	
 13142 ;; *************** function _getDimmerLights_Line *****************
 13143 ;; Defined at:
 13144 ;;		line 966 in file "../src/Dimmer_B1.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;		None
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  line            1    3[COMMON] unsigned char 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      unsigned char 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;Total ram usage:        2 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    3
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_Exception_Main
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           
 13173                           ;psect for function _getDimmerLights_Line
 13174  1C14                     _getDimmerLights_Line:	
 13175                           
 13176                           ;Dimmer_B1.c: 967: char line = 0;
 13177                           
 13178                           ;incstack = 0
 13179                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13180  1C14  01F3               	clrf	getDimmerLights_Line@line
 13181                           
 13182                           ;Dimmer_B1.c: 969: if (DimmerLights1.Line == 1) {
 13183  1C15  0022               	movlb	2	; select bank2
 13184  1C16  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13185  1C17  2C1B               	goto	l945
 13186                           
 13187                           ;Dimmer_B1.c: 970: line = 1;
 13188  1C18  01F3               	clrf	getDimmerLights_Line@line
 13189  1C19  0AF3               	incf	getDimmerLights_Line@line,f
 13190                           
 13191                           ;Dimmer_B1.c: 971: }
 13192  1C1A  2C21               	goto	l946
 13193  1C1B                     l945:	
 13194                           
 13195                           ;Dimmer_B1.c: 974: else if (DimmerLights2.Line == 1) {
 13196  1C1B  1CE7               	btfss	(_DimmerLights2^(0+256)+1),1
 13197  1C1C  2C21               	goto	l946
 13198                           
 13199                           ;Dimmer_B1.c: 975: line = 2;
 13200  1C1D  3002               	movlw	2
 13201  1C1E  00F2               	movwf	??_getDimmerLights_Line
 13202  1C1F  0872               	movf	??_getDimmerLights_Line,w
 13203  1C20  00F3               	movwf	getDimmerLights_Line@line
 13204  1C21                     l946:	
 13205                           
 13206                           ;Dimmer_B1.c: 976: }
 13207                           ;Dimmer_B1.c: 983: return line;
 13208  1C21  0873               	movf	getDimmerLights_Line@line,w
 13209  1C22  0008               	return
 13210  1C23                     __end_of_getDimmerLights_Line:	
 13211                           
 13212                           	psect	text86
 13213  1F3B                     __ptext86:	
 13214 ;; *************** function _DimmerLights_Main *****************
 13215 ;; Defined at:
 13216 ;;		line 732 in file "../src/Dimmer_B1.c"
 13217 ;; Parameters:    Size  Location     Type
 13218 ;;		None
 13219 ;; Auto vars:     Size  Location     Type
 13220 ;;		None
 13221 ;; Return value:  Size  Location     Type
 13222 ;;		None               void
 13223 ;; Registers used:
 13224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13225 ;; Tracked objects:
 13226 ;;		On entry : 0/0
 13227 ;;		On exit  : 0/0
 13228 ;;		Unchanged: 0/0
 13229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;Total ram usage:        0 bytes
 13235 ;; Hardware stack levels used:    1
 13236 ;; Hardware stack levels required when called:    8
 13237 ;; This function calls:
 13238 ;;		_getLoad_OK
 13239 ;;		_getMain_All_Error_Status
 13240 ;;		_getMain_All_LightsStatus
 13241 ;;		_setDimmerLights_Main
 13242 ;; This function is called by:
 13243 ;;		_main
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           
 13248                           ;psect for function _DimmerLights_Main
 13249  1F3B                     _DimmerLights_Main:	
 13250                           
 13251                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13252                           
 13253                           ;incstack = 0
 13254                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13255  1F3B  0021               	movlb	1	; select bank1
 13256  1F3C  1CBA               	btfss	_Dimmer^(0+128),1
 13257  1F3D  2F53               	goto	l9950
 13258                           
 13259                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13260  1F3E  319A  22F0  319F   	fcall	_getLoad_OK
 13261  1F41  3A01               	xorlw	1
 13262  1F42  1903               	skipnz
 13263  1F43  2F51               	goto	l886
 13264  1F44  3000               	movlw	0
 13265  1F45  3191  21CC  319F   	fcall	_getMain_All_Error_Status
 13266  1F48  3800               	iorlw	0
 13267  1F49  1D03               	skipz
 13268  1F4A  2F51               	goto	l886
 13269  1F4B  319C  2405  319F   	fcall	_getMain_All_LightsStatus
 13270  1F4E  3800               	iorlw	0
 13271  1F4F  1D03               	skipz
 13272  1F50  2F53               	goto	l9950
 13273  1F51                     l886:	
 13274                           
 13275                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13276  1F51  0021               	movlb	1	; select bank1
 13277  1F52  10BA               	bcf	_Dimmer^(0+128),1
 13278  1F53                     l9950:	
 13279                           
 13280                           ;Dimmer_B1.c: 738: }
 13281                           ;Dimmer_B1.c: 739: }
 13282                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13283  1F53  3001               	movlw	1
 13284  1F54  3189  21D5  319F   	fcall	_setDimmerLights_Main
 13285                           
 13286                           ;Dimmer_B1.c: 747: setDimmerLights_Main(2);
 13287  1F57  3002               	movlw	2
 13288  1F58  3189  21D5         	fcall	_setDimmerLights_Main
 13289  1F5A  0008               	return
 13290  1F5B                     __end_of_DimmerLights_Main:	
 13291                           
 13292                           	psect	text87
 13293  09D5                     __ptext87:	
 13294 ;; *************** function _setDimmerLights_Main *****************
 13295 ;; Defined at:
 13296 ;;		line 757 in file "../src/Dimmer_B1.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  lights          1    wreg     unsigned char 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  lights          1   74[BANK0 ] unsigned char 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;		None               void
 13303 ;; Registers used:
 13304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;Total ram usage:        1 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    7
 13317 ;; This function calls:
 13318 ;;		_DimmerLights_SelectPointer
 13319 ;;		_getDimmerLights_Allow_Condition
 13320 ;;		_getMain_All_LightsStatus
 13321 ;;		_setDimmerLights_Dimming
 13322 ;;		_setDimmerLights_OnOff
 13323 ;; This function is called by:
 13324 ;;		_DimmerLights_Main
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           
 13329                           ;psect for function _setDimmerLights_Main
 13330  09D5                     _setDimmerLights_Main:	
 13331                           
 13332                           ;incstack = 0
 13333                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13334                           ;setDimmerLights_Main@lights stored from wreg
 13335  09D5  0020               	movlb	0	; select bank0
 13336  09D6  00EA               	movwf	setDimmerLights_Main@lights
 13337                           
 13338                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13339  09D7  086A               	movf	setDimmerLights_Main@lights,w
 13340  09D8  319D  2568  3189   	fcall	_DimmerLights_SelectPointer
 13341                           
 13342                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13343  09DB  0021               	movlb	1	; select bank1
 13344  09DC  0846               	movf	_DimmerLights^(0+128),w
 13345  09DD  0086               	movwf	6
 13346  09DE  3001               	movlw	1	; select bank2/3
 13347  09DF  0087               	movwf	7
 13348  09E0  1C81               	btfss	1,1
 13349  09E1  2A03               	goto	l9666
 13350                           
 13351                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13352  09E2  0020               	movlb	0	; select bank0
 13353  09E3  086A               	movf	setDimmerLights_Main@lights,w
 13354  09E4  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13355  09E7  3800               	iorlw	0
 13356  09E8  1D03               	skipz
 13357  09E9  0008               	return
 13358                           
 13359                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13360  09EA  0021               	movlb	1	; select bank1
 13361  09EB  0846               	movf	_DimmerLights^(0+128),w
 13362  09EC  0086               	movwf	6
 13363  09ED  3001               	movlw	1	; select bank2/3
 13364  09EE  0087               	movwf	7
 13365  09EF  1081               	bcf	1,1
 13366                           
 13367                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13368  09F0  0846               	movf	_DimmerLights^(0+128),w
 13369  09F1  0086               	movwf	6
 13370  09F2  3001               	movlw	1	; select bank2/3
 13371  09F3  0087               	movwf	7
 13372  09F4  1D01               	btfss	1,2
 13373  09F5  29FD               	goto	l9664
 13374                           
 13375                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13376  09F6  0020               	movlb	0	; select bank0
 13377  09F7  01E6               	clrf	setDimmerLights_OnOff@command
 13378  09F8  0AE6               	incf	setDimmerLights_OnOff@command,f
 13379  09F9  086A               	movf	setDimmerLights_Main@lights,w
 13380  09FA  3186  26C2         	fcall	_setDimmerLights_OnOff
 13381                           
 13382                           ;Dimmer_B1.c: 765: } else {
 13383  09FC  0008               	return
 13384  09FD                     l9664:	
 13385                           
 13386                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13387  09FD  0020               	movlb	0	; select bank0
 13388  09FE  01E6               	clrf	setDimmerLights_OnOff@command
 13389  09FF  086A               	movf	setDimmerLights_Main@lights,w
 13390  0A00  3186  26C2         	fcall	_setDimmerLights_OnOff
 13391                           
 13392                           ;Dimmer_B1.c: 767: }
 13393                           ;Dimmer_B1.c: 768: }
 13394                           ;Dimmer_B1.c: 769: } else {
 13395  0A02  0008               	return
 13396  0A03                     l9666:	
 13397                           
 13398                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13399  0A03  319C  2405  3189   	fcall	_getMain_All_LightsStatus
 13400  0A06  3A01               	xorlw	1
 13401  0A07  1D03               	skipz
 13402  0A08  2A31               	goto	l9678
 13403                           
 13404                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13405  0A09  0021               	movlb	1	; select bank1
 13406  0A0A  0846               	movf	_DimmerLights^(0+128),w
 13407  0A0B  0086               	movwf	6
 13408  0A0C  3001               	movlw	1	; select bank2/3
 13409  0A0D  0087               	movwf	7
 13410  0A0E  1E01               	btfss	1,4
 13411  0A0F  0008               	return
 13412                           
 13413                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13414  0A10  0020               	movlb	0	; select bank0
 13415  0A11  086A               	movf	setDimmerLights_Main@lights,w
 13416  0A12  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13417  0A15  3800               	iorlw	0
 13418  0A16  1D03               	skipz
 13419  0A17  0008               	return
 13420                           
 13421                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13422  0A18  0021               	movlb	1	; select bank1
 13423  0A19  0846               	movf	_DimmerLights^(0+128),w
 13424  0A1A  0086               	movwf	6
 13425  0A1B  3001               	movlw	1	; select bank2/3
 13426  0A1C  0087               	movwf	7
 13427  0A1D  1201               	bcf	1,4
 13428                           
 13429                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13430  0A1E  0846               	movf	_DimmerLights^(0+128),w
 13431  0A1F  0086               	movwf	6
 13432  0A20  3001               	movlw	1	; select bank2/3
 13433  0A21  0087               	movwf	7
 13434  0A22  1E81               	btfss	1,5
 13435  0A23  2A2B               	goto	l9676
 13436                           
 13437                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13438  0A24  0020               	movlb	0	; select bank0
 13439  0A25  01E3               	clrf	setDimmerLights_Dimming@status
 13440  0A26  0AE3               	incf	setDimmerLights_Dimming@status,f
 13441  0A27  086A               	movf	setDimmerLights_Main@lights,w
 13442  0A28  3194  248F         	fcall	_setDimmerLights_Dimming
 13443                           
 13444                           ;Dimmer_B1.c: 776: } else {
 13445  0A2A  0008               	return
 13446  0A2B                     l9676:	
 13447                           
 13448                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13449  0A2B  0020               	movlb	0	; select bank0
 13450  0A2C  01E3               	clrf	setDimmerLights_Dimming@status
 13451  0A2D  086A               	movf	setDimmerLights_Main@lights,w
 13452  0A2E  3194  248F         	fcall	_setDimmerLights_Dimming
 13453                           
 13454                           ;Dimmer_B1.c: 778: }
 13455                           ;Dimmer_B1.c: 779: }
 13456                           ;Dimmer_B1.c: 780: }
 13457                           ;Dimmer_B1.c: 781: } else {
 13458  0A30  0008               	return
 13459  0A31                     l9678:	
 13460                           
 13461                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13462  0A31  0021               	movlb	1	; select bank1
 13463  0A32  0846               	movf	_DimmerLights^(0+128),w
 13464  0A33  0086               	movwf	6
 13465  0A34  3001               	movlw	1	; select bank2/3
 13466  0A35  0087               	movwf	7
 13467  0A36  1E01               	btfss	1,4
 13468  0A37  0008               	return
 13469                           
 13470                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13471  0A38  0846               	movf	_DimmerLights^(0+128),w
 13472  0A39  0086               	movwf	6
 13473  0A3A  3001               	movlw	1	; select bank2/3
 13474  0A3B  0087               	movwf	7
 13475  0A3C  1201               	bcf	1,4
 13476  0A3D  0008               	return
 13477  0A3E                     __end_of_setDimmerLights_Main:	
 13478                           
 13479                           	psect	text88
 13480  06C2                     __ptext88:	
 13481 ;; *************** function _setDimmerLights_OnOff *****************
 13482 ;; Defined at:
 13483 ;;		line 791 in file "../src/Dimmer_B1.c"
 13484 ;; Parameters:    Size  Location     Type
 13485 ;;  lights          1    wreg     unsigned char 
 13486 ;;  command         1   70[BANK0 ] unsigned char 
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;  lights          1   73[BANK0 ] unsigned char 
 13489 ;; Return value:  Size  Location     Type
 13490 ;;		None               void
 13491 ;; Registers used:
 13492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13493 ;; Tracked objects:
 13494 ;;		On entry : 0/0
 13495 ;;		On exit  : 0/0
 13496 ;;		Unchanged: 0/0
 13497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13498 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;Total ram usage:        4 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; Hardware stack levels required when called:    6
 13505 ;; This function calls:
 13506 ;;		_getCmd_Status
 13507 ;;		_getDelayOff_GO
 13508 ;;		_getDimmerLights_PercentToValue
 13509 ;;		_getDimmerLights_ValueToPercent
 13510 ;;		_getMain_All_LightsStatus
 13511 ;;		_setCmd_Status
 13512 ;;		_setDelayOff_GO
 13513 ;;		_setDimmerIntr_ControlStatus
 13514 ;;		_setDimmerIntr_DimmingValue
 13515 ;;		_setDimmerIntr_Dimming_RF
 13516 ;;		_setDimmerIntr_MaxmumValue
 13517 ;;		_setDimmerLights_Line
 13518 ;;		_setLED
 13519 ;;		_setProductData
 13520 ;;		_setRF_DimmerLights
 13521 ;;		_setTxData
 13522 ;; This function is called by:
 13523 ;;		_setDimmerLights_Main
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           
 13528                           ;psect for function _setDimmerLights_OnOff
 13529  06C2                     _setDimmerLights_OnOff:	
 13530                           
 13531                           ;incstack = 0
 13532                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13533                           ;setDimmerLights_OnOff@lights stored from wreg
 13534  06C2  0020               	movlb	0	; select bank0
 13535  06C3  00E9               	movwf	setDimmerLights_OnOff@lights
 13536                           
 13537                           ;Dimmer_B1.c: 793: if (command == 1) {
 13538  06C4  0866               	movf	setDimmerLights_OnOff@command,w
 13539  06C5  3A01               	xorlw	1
 13540  06C6  1D03               	skipz
 13541  06C7  2F24               	goto	l9518
 13542                           
 13543                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13544  06C8  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13545  06C9  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13546  06CA  0869               	movf	setDimmerLights_OnOff@lights,w
 13547  06CB  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13548                           
 13549                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13550  06CE  01F4               	clrf	setLED@command
 13551  06CF  0020               	movlb	0	; select bank0
 13552  06D0  0869               	movf	setDimmerLights_OnOff@lights,w
 13553  06D1  3197  2741  3186   	fcall	_setLED
 13554                           
 13555                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13556  06D4  0021               	movlb	1	; select bank1
 13557  06D5  153A               	bsf	_Dimmer^(0+128),2
 13558                           
 13559                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13560  06D6  0020               	movlb	0	; select bank0
 13561  06D7  0869               	movf	setDimmerLights_OnOff@lights,w
 13562  06D8  319C  24F4  3186   	fcall	_setDimmerLights_Line
 13563                           
 13564                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13565  06DB  3034               	movlw	52
 13566  06DC  0020               	movlb	0	; select bank0
 13567  06DD  00E7               	movwf	??_setDimmerLights_OnOff
 13568  06DE  0867               	movf	??_setDimmerLights_OnOff,w
 13569  06DF  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13570  06E0  0869               	movf	setDimmerLights_OnOff@lights,w
 13571  06E1  319D  2592  3186   	fcall	_setDimmerIntr_DimmingValue
 13572                           
 13573                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13574  06E4  0021               	movlb	1	; select bank1
 13575  06E5  0A46               	incf	_DimmerLights^(0+128),w
 13576  06E6  0086               	movwf	6
 13577  06E7  3001               	movlw	1	; select bank2/3
 13578  06E8  0087               	movwf	7
 13579  06E9  1F01               	btfss	1,6
 13580  06EA  2F0D               	goto	l9514
 13581                           
 13582                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13583  06EB  0A46               	incf	_DimmerLights^(0+128),w
 13584  06EC  0086               	movwf	6
 13585  06ED  3001               	movlw	1	; select bank2/3
 13586  06EE  0087               	movwf	7
 13587  06EF  1301               	bcf	1,6
 13588                           
 13589                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13590  06F0  0020               	movlb	0	; select bank0
 13591  06F1  0869               	movf	setDimmerLights_OnOff@lights,w
 13592  06F2  3E14               	addlw	20
 13593  06F3  076D               	addwf	_product,w
 13594  06F4  00E7               	movwf	??_setDimmerLights_OnOff
 13595  06F5  0867               	movf	??_setDimmerLights_OnOff,w
 13596  06F6  0086               	movwf	6
 13597  06F7  3002               	movlw	2	; select bank4/5
 13598  06F8  0087               	movwf	7
 13599  06F9  0801               	movf	1,w
 13600  06FA  3189  2108  3186   	fcall	_getDimmerLights_PercentToValue
 13601  06FD  0020               	movlb	0	; select bank0
 13602  06FE  00E8               	movwf	??_setDimmerLights_OnOff+1
 13603  06FF  0868               	movf	??_setDimmerLights_OnOff+1,w
 13604  0700  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13605  0701  0869               	movf	setDimmerLights_OnOff@lights,w
 13606  0702  319D  25FC  3186   	fcall	_setDimmerIntr_MaxmumValue
 13607                           
 13608                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13609  0705  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13610  0706  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13611  0707  0020               	movlb	0	; select bank0
 13612  0708  0869               	movf	setDimmerLights_OnOff@lights,w
 13613  0709  3191  214F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13614                           
 13615                           ;Dimmer_B1.c: 810: } else {
 13616  070C  2F54               	goto	l9538
 13617  070D                     l9514:	
 13618                           
 13619                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13620  070D  3034               	movlw	52
 13621  070E  0020               	movlb	0	; select bank0
 13622  070F  00E7               	movwf	??_setDimmerLights_OnOff
 13623  0710  0867               	movf	??_setDimmerLights_OnOff,w
 13624  0711  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13625  0712  0869               	movf	setDimmerLights_OnOff@lights,w
 13626  0713  319D  25FC  3186   	fcall	_setDimmerIntr_MaxmumValue
 13627                           
 13628                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13629  0716  3034               	movlw	52
 13630  0717  3188  20A3  3186   	fcall	_getDimmerLights_ValueToPercent
 13631  071A  0020               	movlb	0	; select bank0
 13632  071B  00E7               	movwf	??_setDimmerLights_OnOff
 13633  071C  0867               	movf	??_setDimmerLights_OnOff,w
 13634  071D  00DA               	movwf	setProductData@value
 13635  071E  0869               	movf	setDimmerLights_OnOff@lights,w
 13636  071F  3E14               	addlw	20
 13637  0720  319B  23D9  3186   	fcall	_setProductData
 13638                           
 13639                           ;Dimmer_B1.c: 813: }
 13640                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13641  0723  2F54               	goto	l9538
 13642  0724                     l9518:	
 13643  0724  0020               	movlb	0	; select bank0
 13644  0725  08E6               	movf	setDimmerLights_OnOff@command,f
 13645  0726  1D03               	skipz
 13646  0727  2F54               	goto	l9538
 13647                           
 13648                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13649  0728  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13650  0729  0869               	movf	setDimmerLights_OnOff@lights,w
 13651  072A  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13652                           
 13653                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13654  072D  01F4               	clrf	setLED@command
 13655  072E  0AF4               	incf	setLED@command,f
 13656  072F  0020               	movlb	0	; select bank0
 13657  0730  0869               	movf	setDimmerLights_OnOff@lights,w
 13658  0731  3197  2741  3186   	fcall	_setLED
 13659                           
 13660                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13661  0734  0020               	movlb	0	; select bank0
 13662  0735  0869               	movf	setDimmerLights_OnOff@lights,w
 13663  0736  319B  23F6  3186   	fcall	_getDelayOff_GO
 13664  0739  3A01               	xorlw	1
 13665  073A  1D03               	skipz
 13666  073B  2F43               	goto	l9528
 13667                           
 13668                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13669  073C  0020               	movlb	0	; select bank0
 13670  073D  01DE               	clrf	setDelayOff_GO@command
 13671  073E  01DF               	clrf	setDelayOff_GO@value
 13672  073F  0869               	movf	setDimmerLights_OnOff@lights,w
 13673  0740  318C  2422  3186   	fcall	_setDelayOff_GO
 13674  0743                     l9528:	
 13675                           
 13676                           ;Dimmer_B1.c: 823: }
 13677                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13678  0743  0020               	movlb	0	; select bank0
 13679  0744  0869               	movf	setDimmerLights_OnOff@lights,w
 13680  0745  3A01               	xorlw	1
 13681  0746  1D03               	skipz
 13682  0747  2F4A               	goto	l9532
 13683                           
 13684                           ;Dimmer_B1.c: 829: RA7 = 0;
 13685  0748  138C               	bcf	12,7	;volatile
 13686                           
 13687                           ;Dimmer_B1.c: 831: }
 13688  0749  2F4E               	goto	l912
 13689  074A                     l9532:	
 13690                           
 13691                           ;Dimmer_B1.c: 834: else if (lights == 2) {
 13692  074A  0869               	movf	setDimmerLights_OnOff@lights,w
 13693  074B  3A02               	xorlw	2
 13694  074C  1903               	btfsc	3,2
 13695                           
 13696                           ;Dimmer_B1.c: 835: RB4 = 0;
 13697  074D  120D               	bcf	13,4	;volatile
 13698  074E                     l912:	
 13699                           
 13700                           ;Dimmer_B1.c: 836: }
 13701                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13702  074E  0021               	movlb	1	; select bank1
 13703  074F  113A               	bcf	_Dimmer^(0+128),2
 13704                           
 13705                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13706  0750  3000               	movlw	0
 13707  0751  319C  24F4  3186   	fcall	_setDimmerLights_Line
 13708  0754                     l9538:	
 13709                           
 13710                           ;Dimmer_B1.c: 844: }
 13711                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13712  0754  0020               	movlb	0	; select bank0
 13713  0755  0866               	movf	setDimmerLights_OnOff@command,w
 13714  0756  00E7               	movwf	??_setDimmerLights_OnOff
 13715  0757  0867               	movf	??_setDimmerLights_OnOff,w
 13716  0758  00DE               	movwf	setRF_DimmerLights@on
 13717  0759  0869               	movf	setDimmerLights_OnOff@lights,w
 13718  075A  3196  26E2  3186   	fcall	_setRF_DimmerLights
 13719                           
 13720                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13721  075D  3001               	movlw	1
 13722  075E  319C  2451  3186   	fcall	_getCmd_Status
 13723  0761  3A01               	xorlw	1
 13724  0762  1D03               	skipz
 13725  0763  2F7E               	goto	l9552
 13726                           
 13727                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13728  0764  319C  2405  3186   	fcall	_getMain_All_LightsStatus
 13729  0767  3800               	iorlw	0
 13730  0768  1D03               	skipz
 13731  0769  0008               	return
 13732                           
 13733                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13734  076A  01F2               	clrf	setCmd_Status@cmd
 13735  076B  3001               	movlw	1
 13736  076C  319D  257D  3186   	fcall	_setCmd_Status
 13737                           
 13738                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13739  076F  0020               	movlb	0	; select bank0
 13740  0770  01DA               	clrf	setProductData@value
 13741  0771  300B               	movlw	11
 13742  0772  319B  23D9  3186   	fcall	_setProductData
 13743                           
 13744                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13745  0775  0020               	movlb	0	; select bank0
 13746  0776  01DA               	clrf	setProductData@value
 13747  0777  3011               	movlw	17
 13748  0778  319B  23D9  3186   	fcall	_setProductData
 13749                           
 13750                           ;Dimmer_B1.c: 854: setTxData();
 13751  077B  318F  274A         	fcall	_setTxData
 13752                           
 13753                           ;Dimmer_B1.c: 855: }
 13754                           ;Dimmer_B1.c: 856: } else {
 13755  077D  0008               	return
 13756  077E                     l9552:	
 13757                           
 13758                           ;Dimmer_B1.c: 857: setTxData();
 13759  077E  318F  274A         	fcall	_setTxData
 13760  0780  0008               	return
 13761  0781                     __end_of_setDimmerLights_OnOff:	
 13762                           
 13763                           	psect	text89
 13764  1741                     __ptext89:	
 13765 ;; *************** function _setLED *****************
 13766 ;; Defined at:
 13767 ;;		line 76 in file "../src/LED_B1.c"
 13768 ;; Parameters:    Size  Location     Type
 13769 ;;  led             1    wreg     unsigned char 
 13770 ;;  command         1    4[COMMON] unsigned char 
 13771 ;; Auto vars:     Size  Location     Type
 13772 ;;  led             1    5[COMMON] unsigned char 
 13773 ;; Return value:  Size  Location     Type
 13774 ;;		None               void
 13775 ;; Registers used:
 13776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13777 ;; Tracked objects:
 13778 ;;		On entry : 0/0
 13779 ;;		On exit  : 0/0
 13780 ;;		Unchanged: 0/0
 13781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13782 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13786 ;;Total ram usage:        2 bytes
 13787 ;; Hardware stack levels used:    1
 13788 ;; Hardware stack levels required when called:    4
 13789 ;; This function calls:
 13790 ;;		_LedPointSelect
 13791 ;; This function is called by:
 13792 ;;		_setDimmerLights_OnOff
 13793 ;;		_setLED_Initialization
 13794 ;;		_Exception_Main
 13795 ;;		_setSw_Initialization
 13796 ;; This function uses a non-reentrant model
 13797 ;;
 13798                           
 13799                           
 13800                           ;psect for function _setLED
 13801  1741                     _setLED:	
 13802                           
 13803                           ;incstack = 0
 13804                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13805                           ;setLED@led stored from wreg
 13806  1741  00F5               	movwf	setLED@led
 13807                           
 13808                           ;LED_B1.c: 77: LedPointSelect(led);
 13809  1742  0875               	movf	setLED@led,w
 13810  1743  319E  26E4  3197   	fcall	_LedPointSelect
 13811                           
 13812                           ;LED_B1.c: 78: if (command == 0) {
 13813  1746  08F4               	movf	setLED@command,f
 13814  1747  1D03               	skipz
 13815  1748  2F5B               	goto	l7094
 13816                           
 13817                           ;LED_B1.c: 80: if (led == 1) {
 13818  1749  0875               	movf	setLED@led,w
 13819  174A  3A01               	xorlw	1
 13820  174B  1D03               	skipz
 13821  174C  2F4F               	goto	l7086
 13822                           
 13823                           ;LED_B1.c: 84: RA3 = 1;
 13824  174D  0020               	movlb	0	; select bank0
 13825  174E  158C               	bsf	12,3	;volatile
 13826  174F                     l7086:	
 13827                           
 13828                           ;LED_B1.c: 86: }
 13829                           ;LED_B1.c: 89: if (led == 2) {
 13830  174F  0875               	movf	setLED@led,w
 13831  1750  3A02               	xorlw	2
 13832  1751  1D03               	skipz
 13833  1752  2F55               	goto	l7090
 13834                           
 13835                           ;LED_B1.c: 93: RC7 = 1;
 13836  1753  0020               	movlb	0	; select bank0
 13837  1754  178E               	bsf	14,7	;volatile
 13838  1755                     l7090:	
 13839                           
 13840                           ;LED_B1.c: 95: }
 13841                           ;LED_B1.c: 107: if (led == 99) {
 13842  1755  0875               	movf	setLED@led,w
 13843  1756  3A63               	xorlw	99
 13844  1757  1D03               	skipz
 13845  1758  2F5B               	goto	l7094
 13846                           
 13847                           ;LED_B1.c: 111: RB5 = 1;
 13848  1759  0020               	movlb	0	; select bank0
 13849  175A  168D               	bsf	13,5	;volatile
 13850  175B                     l7094:	
 13851                           
 13852                           ;LED_B1.c: 113: }
 13853                           ;LED_B1.c: 115: }
 13854                           ;LED_B1.c: 116: if (command == 1) {
 13855  175B  0874               	movf	setLED@command,w
 13856  175C  3A01               	xorlw	1
 13857  175D  1D03               	skipz
 13858  175E  2F71               	goto	l7108
 13859                           
 13860                           ;LED_B1.c: 118: if (led == 1) {
 13861  175F  0875               	movf	setLED@led,w
 13862  1760  3A01               	xorlw	1
 13863  1761  1D03               	skipz
 13864  1762  2F65               	goto	l7100
 13865                           
 13866                           ;LED_B1.c: 122: RA3 = 0;
 13867  1763  0020               	movlb	0	; select bank0
 13868  1764  118C               	bcf	12,3	;volatile
 13869  1765                     l7100:	
 13870                           
 13871                           ;LED_B1.c: 124: }
 13872                           ;LED_B1.c: 127: if (led == 2) {
 13873  1765  0875               	movf	setLED@led,w
 13874  1766  3A02               	xorlw	2
 13875  1767  1D03               	skipz
 13876  1768  2F6B               	goto	l7104
 13877                           
 13878                           ;LED_B1.c: 131: RC7 = 0;
 13879  1769  0020               	movlb	0	; select bank0
 13880  176A  138E               	bcf	14,7	;volatile
 13881  176B                     l7104:	
 13882                           
 13883                           ;LED_B1.c: 133: }
 13884                           ;LED_B1.c: 145: if (led == 99) {
 13885  176B  0875               	movf	setLED@led,w
 13886  176C  3A63               	xorlw	99
 13887  176D  1D03               	skipz
 13888  176E  2F71               	goto	l7108
 13889                           
 13890                           ;LED_B1.c: 149: RB5 = 0;
 13891  176F  0020               	movlb	0	; select bank0
 13892  1770  128D               	bcf	13,5	;volatile
 13893  1771                     l7108:	
 13894                           
 13895                           ;LED_B1.c: 151: }
 13896                           ;LED_B1.c: 153: }
 13897                           ;LED_B1.c: 154: if (command == 10) {
 13898  1771  0874               	movf	setLED@command,w
 13899  1772  3A0A               	xorlw	10
 13900  1773  1D03               	skipz
 13901  1774  2F95               	goto	l7124
 13902                           
 13903                           ;LED_B1.c: 155: LED->GO = 0;
 13904  1775  0021               	movlb	1	; select bank1
 13905  1776  0847               	movf	_LED^(0+128),w
 13906  1777  0086               	movwf	6
 13907  1778  3001               	movlw	1	; select bank2/3
 13908  1779  0087               	movwf	7
 13909  177A  1081               	bcf	1,1
 13910                           
 13911                           ;LED_B1.c: 156: LED->Time = 0;
 13912  177B  0A47               	incf	_LED^(0+128),w
 13913  177C  0086               	movwf	6
 13914  177D  3001               	movlw	1	; select bank2/3
 13915  177E  0087               	movwf	7
 13916  177F  3000               	movlw	0
 13917  1780  3FC0               	movwi [0]fsr1
 13918  1781  3FC1               	movwi [1]fsr1
 13919                           
 13920                           ;LED_B1.c: 158: if (led == 1) {
 13921  1782  0875               	movf	setLED@led,w
 13922  1783  3A01               	xorlw	1
 13923  1784  1D03               	skipz
 13924  1785  2F89               	goto	l7116
 13925                           
 13926                           ;LED_B1.c: 162: RA3 = 1;
 13927  1786  0020               	movlb	0	; select bank0
 13928  1787  158C               	bsf	12,3	;volatile
 13929                           
 13930                           ;LED_B1.c: 164: }
 13931  1788  2F8F               	goto	l7120
 13932  1789                     l7116:	
 13933                           
 13934                           ;LED_B1.c: 167: else if (led == 2) {
 13935  1789  0875               	movf	setLED@led,w
 13936  178A  3A02               	xorlw	2
 13937  178B  1D03               	skipz
 13938  178C  2F8F               	goto	l7120
 13939                           
 13940                           ;LED_B1.c: 171: RC7 = 1;
 13941  178D  0020               	movlb	0	; select bank0
 13942  178E  178E               	bsf	14,7	;volatile
 13943  178F                     l7120:	
 13944                           
 13945                           ;LED_B1.c: 173: }
 13946                           ;LED_B1.c: 185: if (led == 99) {
 13947  178F  0875               	movf	setLED@led,w
 13948  1790  3A63               	xorlw	99
 13949  1791  1D03               	skipz
 13950  1792  2F95               	goto	l7124
 13951                           
 13952                           ;LED_B1.c: 189: RB5 = 1;
 13953  1793  0020               	movlb	0	; select bank0
 13954  1794  168D               	bsf	13,5	;volatile
 13955  1795                     l7124:	
 13956                           
 13957                           ;LED_B1.c: 191: }
 13958                           ;LED_B1.c: 193: }
 13959                           ;LED_B1.c: 194: if (command == 11) {
 13960  1795  0874               	movf	setLED@command,w
 13961  1796  3A0B               	xorlw	11
 13962  1797  1D03               	skipz
 13963  1798  0008               	return
 13964                           
 13965                           ;LED_B1.c: 195: LED->GO = 1;
 13966  1799  0021               	movlb	1	; select bank1
 13967  179A  0847               	movf	_LED^(0+128),w
 13968  179B  0086               	movwf	6
 13969  179C  3001               	movlw	1	; select bank2/3
 13970  179D  0087               	movwf	7
 13971  179E  1481               	bsf	1,1
 13972  179F  0008               	return
 13973  17A0                     __end_of_setLED:	
 13974                           
 13975                           	psect	text90
 13976  1EE4                     __ptext90:	
 13977 ;; *************** function _LedPointSelect *****************
 13978 ;; Defined at:
 13979 ;;		line 7 in file "../src/LED_B1.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;  led             1    wreg     unsigned char 
 13982 ;; Auto vars:     Size  Location     Type
 13983 ;;  led             1    3[COMMON] unsigned char 
 13984 ;; Return value:  Size  Location     Type
 13985 ;;		None               void
 13986 ;; Registers used:
 13987 ;;		wreg
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;Total ram usage:        2 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    3
 14000 ;; This function calls:
 14001 ;;		Nothing
 14002 ;; This function is called by:
 14003 ;;		_setLED_Initialization
 14004 ;;		_setLED
 14005 ;;		_setLED_Main
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           
 14010                           ;psect for function _LedPointSelect
 14011  1EE4                     _LedPointSelect:	
 14012                           
 14013                           ;incstack = 0
 14014                           ; Regs used in _LedPointSelect: [wreg]
 14015                           ;LedPointSelect@led stored from wreg
 14016  1EE4  00F3               	movwf	LedPointSelect@led
 14017                           
 14018                           ;LED_B1.c: 9: if (led == 1) {
 14019  1EE5  0873               	movf	LedPointSelect@led,w
 14020  1EE6  3A01               	xorlw	1
 14021  1EE7  1D03               	skipz
 14022  1EE8  2EEE               	goto	l1134
 14023                           
 14024                           ;LED_B1.c: 10: LED = &VarLED1;
 14025  1EE9  30DE               	movlw	_VarLED1& (0+255)
 14026  1EEA  00F2               	movwf	??_LedPointSelect
 14027  1EEB  0872               	movf	??_LedPointSelect,w
 14028  1EEC  0021               	movlb	1	; select bank1
 14029  1EED  00C7               	movwf	_LED^(0+128)
 14030  1EEE                     l1134:	
 14031                           
 14032                           ;LED_B1.c: 11: }
 14033                           ;LED_B1.c: 14: if (led == 2) {
 14034  1EEE  0873               	movf	LedPointSelect@led,w
 14035  1EEF  3A02               	xorlw	2
 14036  1EF0  1D03               	skipz
 14037  1EF1  2EF7               	goto	l1135
 14038                           
 14039                           ;LED_B1.c: 15: LED = &VarLED2;
 14040  1EF2  30E2               	movlw	_VarLED2& (0+255)
 14041  1EF3  00F2               	movwf	??_LedPointSelect
 14042  1EF4  0872               	movf	??_LedPointSelect,w
 14043  1EF5  0021               	movlb	1	; select bank1
 14044  1EF6  00C7               	movwf	_LED^(0+128)
 14045  1EF7                     l1135:	
 14046                           
 14047                           ;LED_B1.c: 16: }
 14048                           ;LED_B1.c: 24: if (led == 99) {
 14049  1EF7  0873               	movf	LedPointSelect@led,w
 14050  1EF8  3A63               	xorlw	99
 14051  1EF9  1D03               	skipz
 14052  1EFA  0008               	return
 14053                           
 14054                           ;LED_B1.c: 25: LED = &VarErrLED;
 14055  1EFB  30DA               	movlw	_VarErrLED& (0+255)
 14056  1EFC  00F2               	movwf	??_LedPointSelect
 14057  1EFD  0872               	movf	??_LedPointSelect,w
 14058  1EFE  0021               	movlb	1	; select bank1
 14059  1EFF  00C7               	movwf	_LED^(0+128)
 14060  1F00  0008               	return
 14061  1F01                     __end_of_LedPointSelect:	
 14062                           
 14063                           	psect	text91
 14064  114F                     __ptext91:	
 14065 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14066 ;; Defined at:
 14067 ;;		line 180 in file "../src/Dimmer_B1.c"
 14068 ;; Parameters:    Size  Location     Type
 14069 ;;  lights          1    wreg     unsigned char 
 14070 ;;  command         1    2[COMMON] unsigned char 
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  lights          1    4[COMMON] unsigned char 
 14073 ;; Return value:  Size  Location     Type
 14074 ;;		None               void
 14075 ;; Registers used:
 14076 ;;		wreg, status,2, status,0
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14082 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;Total ram usage:        3 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:    3
 14089 ;; This function calls:
 14090 ;;		Nothing
 14091 ;; This function is called by:
 14092 ;;		_setDimmerLights_OnOff
 14093 ;;		_setRFSW_AdjControl
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097                           
 14098                           ;psect for function _setDimmerIntr_Dimming_RF
 14099  114F                     _setDimmerIntr_Dimming_RF:	
 14100                           
 14101                           ;incstack = 0
 14102                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14103                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14104  114F  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14105                           
 14106                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14107  1150  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14108  1151  3A01               	xorlw	1
 14109  1152  1D03               	skipz
 14110  1153  2964               	goto	l6692
 14111                           
 14112                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14113  1154  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14114  1155  3A01               	xorlw	1
 14115  1156  3000               	movlw	0
 14116  1157  1903               	skipnz
 14117  1158  3001               	movlw	1
 14118  1159  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14119  115A  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14120  115B  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14121  115C  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14122  115D  0021               	movlb	1	; select bank1
 14123  115E  0862               	movf	_DimmerIntr1^(0+128),w
 14124  115F  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14125  1160  39BF               	andlw	-65
 14126  1161  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14127  1162  00E2               	movwf	_DimmerIntr1^(0+128)
 14128                           
 14129                           ;Dimmer_B1.c: 184: }
 14130  1163  0008               	return
 14131  1164                     l6692:	
 14132                           
 14133                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14134  1164  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14135  1165  3A02               	xorlw	2
 14136  1166  1D03               	skipz
 14137  1167  0008               	return
 14138                           
 14139                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14140  1168  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14141  1169  3A01               	xorlw	1
 14142  116A  3000               	movlw	0
 14143  116B  1903               	skipnz
 14144  116C  3001               	movlw	1
 14145  116D  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14146  116E  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14147  116F  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14148  1170  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14149  1171  0021               	movlb	1	; select bank1
 14150  1172  0869               	movf	_DimmerIntr2^(0+128),w
 14151  1173  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14152  1174  39BF               	andlw	-65
 14153  1175  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14154  1176  00E9               	movwf	_DimmerIntr2^(0+128)
 14155  1177  0008               	return
 14156  1178                     __end_of_setDimmerIntr_Dimming_RF:	
 14157                           
 14158                           	psect	text92
 14159  1D92                     __ptext92:	
 14160 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14161 ;; Defined at:
 14162 ;;		line 48 in file "../src/Dimmer_B1.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;  lights          1    wreg     unsigned char 
 14165 ;;  value           1    2[COMMON] unsigned char 
 14166 ;; Auto vars:     Size  Location     Type
 14167 ;;  lights          1    4[COMMON] unsigned char 
 14168 ;; Return value:  Size  Location     Type
 14169 ;;		None               void
 14170 ;; Registers used:
 14171 ;;		wreg
 14172 ;; Tracked objects:
 14173 ;;		On entry : 0/0
 14174 ;;		On exit  : 0/0
 14175 ;;		Unchanged: 0/0
 14176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14177 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;Total ram usage:        3 bytes
 14182 ;; Hardware stack levels used:    1
 14183 ;; Hardware stack levels required when called:    3
 14184 ;; This function calls:
 14185 ;;		Nothing
 14186 ;; This function is called by:
 14187 ;;		_setDimmerLights_OnOff
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           
 14192                           ;psect for function _setDimmerIntr_DimmingValue
 14193  1D92                     _setDimmerIntr_DimmingValue:	
 14194                           
 14195                           ;incstack = 0
 14196                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14197                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14198  1D92  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14199                           
 14200                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14201  1D93  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14202  1D94  3A01               	xorlw	1
 14203  1D95  1D03               	skipz
 14204  1D96  2D9D               	goto	l7024
 14205                           
 14206                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14207  1D97  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14208  1D98  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14209  1D99  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14210  1D9A  0021               	movlb	1	; select bank1
 14211  1D9B  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 14212                           
 14213                           ;Dimmer_B1.c: 52: }
 14214  1D9C  0008               	return
 14215  1D9D                     l7024:	
 14216                           
 14217                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14218  1D9D  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14219  1D9E  3A02               	xorlw	2
 14220  1D9F  1D03               	skipz
 14221  1DA0  0008               	return
 14222                           
 14223                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14224  1DA1  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14225  1DA2  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14226  1DA3  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14227  1DA4  0021               	movlb	1	; select bank1
 14228  1DA5  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 14229  1DA6  0008               	return
 14230  1DA7                     __end_of_setDimmerIntr_DimmingValue:	
 14231                           
 14232                           	psect	text93
 14233  1126                     __ptext93:	
 14234 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14235 ;; Defined at:
 14236 ;;		line 30 in file "../src/Dimmer_B1.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;  lights          1    wreg     unsigned char 
 14239 ;;  command         1    2[COMMON] unsigned char 
 14240 ;; Auto vars:     Size  Location     Type
 14241 ;;  lights          1    4[COMMON] unsigned char 
 14242 ;; Return value:  Size  Location     Type
 14243 ;;		None               void
 14244 ;; Registers used:
 14245 ;;		wreg, status,2, status,0
 14246 ;; Tracked objects:
 14247 ;;		On entry : 0/0
 14248 ;;		On exit  : 0/0
 14249 ;;		Unchanged: 0/0
 14250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14251 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;Total ram usage:        3 bytes
 14256 ;; Hardware stack levels used:    1
 14257 ;; Hardware stack levels required when called:    3
 14258 ;; This function calls:
 14259 ;;		Nothing
 14260 ;; This function is called by:
 14261 ;;		_setDimmerLights_OnOff
 14262 ;; This function uses a non-reentrant model
 14263 ;;
 14264                           
 14265                           
 14266                           ;psect for function _setDimmerIntr_ControlStatus
 14267  1126                     _setDimmerIntr_ControlStatus:	
 14268                           
 14269                           ;incstack = 0
 14270                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14271                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14272  1126  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14273                           
 14274                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14275  1127  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14276  1128  3A01               	xorlw	1
 14277  1129  1D03               	skipz
 14278  112A  293B               	goto	l7016
 14279                           
 14280                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14281  112B  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14282  112C  3A01               	xorlw	1
 14283  112D  3000               	movlw	0
 14284  112E  1903               	skipnz
 14285  112F  3001               	movlw	1
 14286  1130  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14287  1131  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14288  1132  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14289  1133  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14290  1134  0021               	movlb	1	; select bank1
 14291  1135  0862               	movf	_DimmerIntr1^(0+128),w
 14292  1136  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14293  1137  39F7               	andlw	-9
 14294  1138  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14295  1139  00E2               	movwf	_DimmerIntr1^(0+128)
 14296                           
 14297                           ;Dimmer_B1.c: 34: }
 14298  113A  0008               	return
 14299  113B                     l7016:	
 14300                           
 14301                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14302  113B  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14303  113C  3A02               	xorlw	2
 14304  113D  1D03               	skipz
 14305  113E  0008               	return
 14306                           
 14307                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14308  113F  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14309  1140  3A01               	xorlw	1
 14310  1141  3000               	movlw	0
 14311  1142  1903               	skipnz
 14312  1143  3001               	movlw	1
 14313  1144  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14314  1145  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14315  1146  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14316  1147  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14317  1148  0021               	movlb	1	; select bank1
 14318  1149  0869               	movf	_DimmerIntr2^(0+128),w
 14319  114A  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14320  114B  39F7               	andlw	-9
 14321  114C  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14322  114D  00E9               	movwf	_DimmerIntr2^(0+128)
 14323  114E  0008               	return
 14324  114F                     __end_of_setDimmerIntr_ControlStatus:	
 14325                           
 14326                           	psect	text94
 14327  0C22                     __ptext94:	
 14328 ;; *************** function _setDelayOff_GO *****************
 14329 ;; Defined at:
 14330 ;;		line 87 in file "../src/DelayOff_B1.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;  sw              1    wreg     unsigned char 
 14333 ;;  command         1   62[BANK0 ] unsigned char 
 14334 ;;  value           1   63[BANK0 ] unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  sw              1   69[BANK0 ] unsigned char 
 14337 ;;  k               1   68[BANK0 ] unsigned char 
 14338 ;;  j               1   67[BANK0 ] unsigned char 
 14339 ;;  i               1   66[BANK0 ] unsigned char 
 14340 ;; Return value:  Size  Location     Type
 14341 ;;		None               void
 14342 ;; Registers used:
 14343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14344 ;; Tracked objects:
 14345 ;;		On entry : 0/0
 14346 ;;		On exit  : 0/0
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;Total ram usage:        8 bytes
 14354 ;; Hardware stack levels used:    1
 14355 ;; Hardware stack levels required when called:    4
 14356 ;; This function calls:
 14357 ;;		_DelayOffPointSelect
 14358 ;;		___bmul
 14359 ;;		_setProductData
 14360 ;; This function is called by:
 14361 ;;		_setDimmerLights_OnOff
 14362 ;;		_setRFSW_Control
 14363 ;; This function uses a non-reentrant model
 14364 ;;
 14365                           
 14366                           
 14367                           ;psect for function _setDelayOff_GO
 14368  0C22                     _setDelayOff_GO:	
 14369                           
 14370                           ;incstack = 0
 14371                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14372                           ;setDelayOff_GO@sw stored from wreg
 14373  0C22  0020               	movlb	0	; select bank0
 14374  0C23  00E5               	movwf	setDelayOff_GO@sw
 14375                           
 14376                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14377  0C24  0865               	movf	setDelayOff_GO@sw,w
 14378  0C25  319D  2553  318C   	fcall	_DelayOffPointSelect
 14379                           
 14380                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14381  0C28  0020               	movlb	0	; select bank0
 14382  0C29  085E               	movf	setDelayOff_GO@command,w
 14383  0C2A  3A01               	xorlw	1
 14384  0C2B  3000               	movlw	0
 14385  0C2C  1903               	skipnz
 14386  0C2D  3001               	movlw	1
 14387  0C2E  00E0               	movwf	??_setDelayOff_GO
 14388  0C2F  0021               	movlb	1	; select bank1
 14389  0C30  0844               	movf	_DelayOff^(0+128),w
 14390  0C31  0086               	movwf	6
 14391  0C32  3001               	movlw	1	; select bank2/3
 14392  0C33  0087               	movwf	7
 14393  0C34  0020               	movlb	0	; select bank0
 14394  0C35  0DE0               	rlf	??_setDelayOff_GO,f
 14395  0C36  0801               	movf	1,w
 14396  0C37  0660               	xorwf	??_setDelayOff_GO,w
 14397  0C38  39FD               	andlw	-3
 14398  0C39  0660               	xorwf	??_setDelayOff_GO,w
 14399  0C3A  0081               	movwf	1
 14400                           
 14401                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14402  0C3B  0021               	movlb	1	; select bank1
 14403  0C3C  0844               	movf	_DelayOff^(0+128),w
 14404  0C3D  3E02               	addlw	2
 14405  0C3E  0086               	movwf	6
 14406  0C3F  3001               	movlw	1	; select bank2/3
 14407  0C40  0087               	movwf	7
 14408  0C41  3000               	movlw	0
 14409  0C42  3FC0               	movwi [0]fsr1
 14410  0C43  3FC1               	movwi [1]fsr1
 14411                           
 14412                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14413  0C44  0844               	movf	_DelayOff^(0+128),w
 14414  0C45  3E04               	addlw	4
 14415  0C46  0086               	movwf	6
 14416  0C47  3001               	movlw	1	; select bank2/3
 14417  0C48  0087               	movwf	7
 14418  0C49  0181               	clrf	1
 14419                           
 14420                           ;DelayOff_B1.c: 94: if (command == 1) {
 14421  0C4A  0020               	movlb	0	; select bank0
 14422  0C4B  085E               	movf	setDelayOff_GO@command,w
 14423  0C4C  3A01               	xorlw	1
 14424  0C4D  1D03               	skipz
 14425  0C4E  2CA4               	goto	l6676
 14426                           
 14427                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14428  0C4F  3005               	movlw	5
 14429  0C50  00E0               	movwf	??_setDelayOff_GO
 14430  0C51  0860               	movf	??_setDelayOff_GO,w
 14431  0C52  00E2               	movwf	setDelayOff_GO@i
 14432  0C53  01E3               	clrf	setDelayOff_GO@j
 14433  0C54  01E4               	clrf	setDelayOff_GO@k
 14434                           
 14435                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14436  0C55  300F               	movlw	15
 14437  0C56  055F               	andwf	setDelayOff_GO@value,w
 14438  0C57  00E0               	movwf	??_setDelayOff_GO
 14439  0C58  0860               	movf	??_setDelayOff_GO,w
 14440  0C59  3A05               	xorlw	5
 14441  0C5A  1903               	skipnz
 14442  0C5B  2C60               	goto	l6662
 14443  0C5C  085F               	movf	setDelayOff_GO@value,w
 14444  0C5D  390F               	andlw	15
 14445  0C5E  1D03               	btfss	3,2
 14446  0C5F  2C90               	goto	l6672
 14447  0C60                     l6662:	
 14448  0C60  3031               	movlw	49
 14449  0C61  025F               	subwf	setDelayOff_GO@value,w
 14450  0C62  1803               	skipnc
 14451  0C63  2C90               	goto	l6672
 14452                           
 14453                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14454  0C64  085F               	movf	setDelayOff_GO@value,w
 14455  0C65  390F               	andlw	15
 14456  0C66  00E0               	movwf	??_setDelayOff_GO
 14457  0C67  0860               	movf	??_setDelayOff_GO,w
 14458  0C68  00E3               	movwf	setDelayOff_GO@j
 14459                           
 14460                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14461  0C69  085F               	movf	setDelayOff_GO@value,w
 14462  0C6A  00E0               	movwf	??_setDelayOff_GO
 14463  0C6B  3004               	movlw	4
 14464  0C6C                     u6075:	
 14465  0C6C  36E0               	lsrf	??_setDelayOff_GO,f
 14466  0C6D  0B89               	decfsz	9,f
 14467  0C6E  2C6C               	goto	u6075
 14468  0C6F  0860               	movf	??_setDelayOff_GO,w
 14469  0C70  390F               	andlw	15
 14470  0C71  00E1               	movwf	??_setDelayOff_GO+1
 14471  0C72  0861               	movf	??_setDelayOff_GO+1,w
 14472  0C73  00E4               	movwf	setDelayOff_GO@k
 14473                           
 14474                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14475  0C74  300A               	movlw	10
 14476  0C75  00E0               	movwf	??_setDelayOff_GO
 14477  0C76  0860               	movf	??_setDelayOff_GO,w
 14478  0C77  00F2               	movwf	___bmul@multiplicand
 14479  0C78  0864               	movf	setDelayOff_GO@k,w
 14480  0C79  319C  24C1  318C   	fcall	___bmul
 14481  0C7C  0020               	movlb	0	; select bank0
 14482  0C7D  0763               	addwf	setDelayOff_GO@j,w
 14483  0C7E  00E1               	movwf	??_setDelayOff_GO+1
 14484  0C7F  0021               	movlb	1	; select bank1
 14485  0C80  0A44               	incf	_DelayOff^(0+128),w
 14486  0C81  0086               	movwf	6
 14487  0C82  3001               	movlw	1	; select bank2/3
 14488  0C83  0087               	movwf	7
 14489  0C84  0020               	movlb	0	; select bank0
 14490  0C85  0861               	movf	??_setDelayOff_GO+1,w
 14491  0C86  0081               	movwf	1
 14492                           
 14493                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14494  0C87  085F               	movf	setDelayOff_GO@value,w
 14495  0C88  00E0               	movwf	??_setDelayOff_GO
 14496  0C89  0860               	movf	??_setDelayOff_GO,w
 14497  0C8A  00DA               	movwf	setProductData@value
 14498  0C8B  0865               	movf	setDelayOff_GO@sw,w
 14499  0C8C  3E1A               	addlw	26
 14500  0C8D  319B  23D9         	fcall	_setProductData
 14501                           
 14502                           ;DelayOff_B1.c: 103: } else {
 14503  0C8F  0008               	return
 14504  0C90                     l6672:	
 14505                           
 14506                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14507  0C90  3005               	movlw	5
 14508  0C91  0020               	movlb	0	; select bank0
 14509  0C92  00E0               	movwf	??_setDelayOff_GO
 14510  0C93  0021               	movlb	1	; select bank1
 14511  0C94  0A44               	incf	_DelayOff^(0+128),w
 14512  0C95  0086               	movwf	6
 14513  0C96  3001               	movlw	1	; select bank2/3
 14514  0C97  0087               	movwf	7
 14515  0C98  0020               	movlb	0	; select bank0
 14516  0C99  0860               	movf	??_setDelayOff_GO,w
 14517  0C9A  0081               	movwf	1
 14518                           
 14519                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14520  0C9B  3005               	movlw	5
 14521  0C9C  00E0               	movwf	??_setDelayOff_GO
 14522  0C9D  0860               	movf	??_setDelayOff_GO,w
 14523  0C9E  00DA               	movwf	setProductData@value
 14524  0C9F  0865               	movf	setDelayOff_GO@sw,w
 14525  0CA0  3E1A               	addlw	26
 14526  0CA1  319B  23D9         	fcall	_setProductData
 14527                           
 14528                           ;DelayOff_B1.c: 106: }
 14529                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14530  0CA3  0008               	return
 14531  0CA4                     l6676:	
 14532  0CA4  0020               	movlb	0	; select bank0
 14533  0CA5  08DE               	movf	setDelayOff_GO@command,f
 14534  0CA6  1D03               	skipz
 14535  0CA7  0008               	return
 14536                           
 14537                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14538  0CA8  01DA               	clrf	setProductData@value
 14539  0CA9  0865               	movf	setDelayOff_GO@sw,w
 14540  0CAA  3E1A               	addlw	26
 14541  0CAB  319B  23D9         	fcall	_setProductData
 14542  0CAD  0008               	return
 14543  0CAE                     __end_of_setDelayOff_GO:	
 14544                           
 14545                           	psect	text95
 14546  1CC1                     __ptext95:	
 14547 ;; *************** function ___bmul *****************
 14548 ;; Defined at:
 14549 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;  multiplier      1    wreg     unsigned char 
 14552 ;;  multiplicand    1    2[COMMON] unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;  multiplier      1    5[COMMON] unsigned char 
 14555 ;;  product         1    4[COMMON] unsigned char 
 14556 ;; Return value:  Size  Location     Type
 14557 ;;                  1    wreg      unsigned char 
 14558 ;; Registers used:
 14559 ;;		wreg, status,2, status,0
 14560 ;; Tracked objects:
 14561 ;;		On entry : 0/0
 14562 ;;		On exit  : 0/0
 14563 ;;		Unchanged: 0/0
 14564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14565 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;Total ram usage:        4 bytes
 14570 ;; Hardware stack levels used:    1
 14571 ;; Hardware stack levels required when called:    3
 14572 ;; This function calls:
 14573 ;;		Nothing
 14574 ;; This function is called by:
 14575 ;;		_setDelayOff_GO
 14576 ;;		_DelayTimejudge
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           
 14581                           ;psect for function ___bmul
 14582  1CC1                     ___bmul:	
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14586                           ;___bmul@multiplier stored from wreg
 14587  1CC1  00F5               	movwf	___bmul@multiplier
 14588  1CC2  01F4               	clrf	___bmul@product
 14589  1CC3                     l6318:	
 14590  1CC3  1C75               	btfss	___bmul@multiplier,0
 14591  1CC4  2CC9               	goto	l6322
 14592  1CC5  0872               	movf	___bmul@multiplicand,w
 14593  1CC6  00F3               	movwf	??___bmul
 14594  1CC7  0873               	movf	??___bmul,w
 14595  1CC8  07F4               	addwf	___bmul@product,f
 14596  1CC9                     l6322:	
 14597  1CC9  1003               	clrc
 14598  1CCA  0DF2               	rlf	___bmul@multiplicand,f
 14599  1CCB  1003               	clrc
 14600  1CCC  0CF5               	rrf	___bmul@multiplier,f
 14601  1CCD  08F5               	movf	___bmul@multiplier,f
 14602  1CCE  1D03               	skipz
 14603  1CCF  2CC3               	goto	l6318
 14604  1CD0  0874               	movf	___bmul@product,w
 14605  1CD1  0008               	return
 14606  1CD2                     __end_of___bmul:	
 14607                           
 14608                           	psect	text96
 14609  1D7D                     __ptext96:	
 14610 ;; *************** function _setCmd_Status *****************
 14611 ;; Defined at:
 14612 ;;		line 597 in file "../src/Main_B1.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  number          1    wreg     unsigned char 
 14615 ;;  cmd             1    2[COMMON] unsigned char 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;  number          1    4[COMMON] unsigned char 
 14618 ;; Return value:  Size  Location     Type
 14619 ;;		None               void
 14620 ;; Registers used:
 14621 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14627 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;Total ram usage:        3 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:    3
 14634 ;; This function calls:
 14635 ;;		Nothing
 14636 ;; This function is called by:
 14637 ;;		_setDimmerLights_OnOff
 14638 ;;		_setControl_Lights_Table
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           
 14643                           ;psect for function _setCmd_Status
 14644  1D7D                     _setCmd_Status:	
 14645                           
 14646                           ;incstack = 0
 14647                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14648                           ;setCmd_Status@number stored from wreg
 14649  1D7D  00F4               	movwf	setCmd_Status@number
 14650                           
 14651                           ;Main_B1.c: 598: switch (number) {
 14652  1D7E  2D8C               	goto	l6856
 14653  1D7F                     l6852:	
 14654                           ;Main_B1.c: 599: case 1:
 14655                           
 14656                           
 14657                           ;Main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14658  1D7F  0872               	movf	setCmd_Status@cmd,w
 14659  1D80  3A01               	xorlw	1
 14660  1D81  3000               	movlw	0
 14661  1D82  1903               	skipnz
 14662  1D83  3001               	movlw	1
 14663  1D84  00F3               	movwf	??_setCmd_Status
 14664  1D85  0021               	movlb	1	; select bank1
 14665  1D86  0843               	movf	_Cmd^(0+128),w
 14666  1D87  0673               	xorwf	??_setCmd_Status,w
 14667  1D88  39FE               	andlw	-2
 14668  1D89  0673               	xorwf	??_setCmd_Status,w
 14669  1D8A  00C3               	movwf	_Cmd^(0+128)
 14670                           
 14671                           ;Main_B1.c: 602: }
 14672                           
 14673                           ;Main_B1.c: 601: break;
 14674  1D8B  0008               	return
 14675  1D8C                     l6856:	
 14676  1D8C  0874               	movf	setCmd_Status@number,w
 14677                           
 14678                           ; Switch size 1, requested type "space"
 14679                           ; Number of cases is 1, Range of values is 1 to 1
 14680                           ; switch strategies available:
 14681                           ; Name         Instructions Cycles
 14682                           ; simple_byte            4     3 (average)
 14683                           ; direct_byte           11     9 (fixed)
 14684                           ; jumptable            263     9 (fixed)
 14685                           ;	Chosen strategy is simple_byte
 14686  1D8D  3A01               	xorlw	1	; case 1
 14687  1D8E  1903               	skipnz
 14688  1D8F  2D7F               	goto	l6852
 14689  1D90  2D91               	goto	l1717
 14690  1D91                     l1717:	
 14691  1D91  0008               	return
 14692  1D92                     __end_of_setCmd_Status:	
 14693                           
 14694                           	psect	text97
 14695  1C05                     __ptext97:	
 14696 ;; *************** function _getMain_All_LightsStatus *****************
 14697 ;; Defined at:
 14698 ;;		line 374 in file "../src/Main_B1.c"
 14699 ;; Parameters:    Size  Location     Type
 14700 ;;		None
 14701 ;; Auto vars:     Size  Location     Type
 14702 ;;  status          1    2[COMMON] unsigned char 
 14703 ;; Return value:  Size  Location     Type
 14704 ;;                  1    wreg      unsigned char 
 14705 ;; Registers used:
 14706 ;;		wreg, status,2, status,0
 14707 ;; Tracked objects:
 14708 ;;		On entry : 0/0
 14709 ;;		On exit  : 0/0
 14710 ;;		Unchanged: 0/0
 14711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;Total ram usage:        1 bytes
 14717 ;; Hardware stack levels used:    1
 14718 ;; Hardware stack levels required when called:    3
 14719 ;; This function calls:
 14720 ;;		Nothing
 14721 ;; This function is called by:
 14722 ;;		_DimmerLights_Main
 14723 ;;		_setDimmerLights_Main
 14724 ;;		_setDimmerLights_OnOff
 14725 ;;		_Flash_Memory_Main
 14726 ;;		_Exception_Main
 14727 ;;		_Load_Main
 14728 ;;		_setControl_Lights_Table
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           
 14733                           ;psect for function _getMain_All_LightsStatus
 14734  1C05                     _getMain_All_LightsStatus:	
 14735                           
 14736                           ;Main_B1.c: 375: char status = 0;
 14737                           
 14738                           ;incstack = 0
 14739                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14740  1C05  01F2               	clrf	getMain_All_LightsStatus@status
 14741                           
 14742                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 14743  1C06  3000               	movlw	0
 14744  1C07  0022               	movlb	2	; select bank2
 14745  1C08  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 14746  1C09  3001               	movlw	1
 14747  1C0A  00F2               	movwf	getMain_All_LightsStatus@status
 14748                           
 14749                           ;Main_B1.c: 395: if (status == 0) {
 14750  1C0B  08F2               	movf	getMain_All_LightsStatus@status,f
 14751  1C0C  1D03               	skipz
 14752  1C0D  2C12               	goto	l6846
 14753                           
 14754                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 14755  1C0E  3000               	movlw	0
 14756  1C0F  1867               	btfsc	(_DimmerLights2^(0+256)+1),0
 14757  1C10  3001               	movlw	1
 14758  1C11  00F2               	movwf	getMain_All_LightsStatus@status
 14759  1C12                     l6846:	
 14760                           
 14761                           ;Main_B1.c: 397: }
 14762                           ;Main_B1.c: 421: return status;
 14763  1C12  0872               	movf	getMain_All_LightsStatus@status,w
 14764  1C13  0008               	return
 14765  1C14                     __end_of_getMain_All_LightsStatus:	
 14766                           
 14767                           	psect	text98
 14768  0908                     __ptext98:	
 14769 ;; *************** function _getDimmerLights_PercentToValue *****************
 14770 ;; Defined at:
 14771 ;;		line 1026 in file "../src/Dimmer_B1.c"
 14772 ;; Parameters:    Size  Location     Type
 14773 ;;  value           1    wreg     unsigned char 
 14774 ;; Auto vars:     Size  Location     Type
 14775 ;;  value           1   54[BANK0 ] unsigned char 
 14776 ;;  i               3   55[BANK0 ] float 
 14777 ;; Return value:  Size  Location     Type
 14778 ;;                  1    wreg      unsigned char 
 14779 ;; Registers used:
 14780 ;;		wreg, status,2, status,0, pclath, cstack
 14781 ;; Tracked objects:
 14782 ;;		On entry : 0/0
 14783 ;;		On exit  : 0/0
 14784 ;;		Unchanged: 0/0
 14785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;Total ram usage:        6 bytes
 14791 ;; Hardware stack levels used:    1
 14792 ;; Hardware stack levels required when called:    5
 14793 ;; This function calls:
 14794 ;;		___awtoft
 14795 ;;		___ftadd
 14796 ;;		___ftdiv
 14797 ;;		___ftmul
 14798 ;;		___ftneg
 14799 ;;		___fttol
 14800 ;; This function is called by:
 14801 ;;		_setDimmerLights_OnOff
 14802 ;;		_setRFSW_AdjControl
 14803 ;; This function uses a non-reentrant model
 14804 ;;
 14805                           
 14806                           
 14807                           ;psect for function _getDimmerLights_PercentToValue
 14808  0908                     _getDimmerLights_PercentToValue:	
 14809                           
 14810                           ;incstack = 0
 14811                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14812                           ;getDimmerLights_PercentToValue@value stored from wreg
 14813  0908  0020               	movlb	0	; select bank0
 14814  0909  00D6               	movwf	getDimmerLights_PercentToValue@value
 14815                           
 14816                           ;Dimmer_B1.c: 1034: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14817  090A  3000               	movlw	0
 14818  090B  00D7               	movwf	getDimmerLights_PercentToValue@i
 14819  090C  3010               	movlw	16
 14820  090D  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14821  090E  3042               	movlw	66
 14822  090F  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14823                           
 14824                           ;Dimmer_B1.c: 1035: i /= 100;
 14825  0910  3000               	movlw	0
 14826  0911  00A6               	movwf	___ftdiv@f2
 14827  0912  30C8               	movlw	200
 14828  0913  00A7               	movwf	___ftdiv@f2+1
 14829  0914  3042               	movlw	66
 14830  0915  00A8               	movwf	___ftdiv@f2+2
 14831  0916  0857               	movf	getDimmerLights_PercentToValue@i,w
 14832  0917  00A9               	movwf	___ftdiv@f1
 14833  0918  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14834  0919  00AA               	movwf	___ftdiv@f1+1
 14835  091A  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14836  091B  00AB               	movwf	___ftdiv@f1+2
 14837  091C  318D  253B  3189   	fcall	___ftdiv
 14838  091F  0020               	movlb	0	; select bank0
 14839  0920  0826               	movf	?___ftdiv,w
 14840  0921  00D7               	movwf	getDimmerLights_PercentToValue@i
 14841  0922  0827               	movf	?___ftdiv+1,w
 14842  0923  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14843  0924  0828               	movf	?___ftdiv+2,w
 14844  0925  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14845                           
 14846                           ;Dimmer_B1.c: 1037: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14847  0926  0856               	movf	getDimmerLights_PercentToValue@value,w
 14848  0927  00D4               	movwf	??_getDimmerLights_PercentToValue
 14849  0928  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14850  0929  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14851  092A  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14852  092B  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14853  092C  1903               	skipnz
 14854  092D  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14855  092E  0854               	movf	??_getDimmerLights_PercentToValue,w
 14856  092F  3E64               	addlw	100
 14857  0930  00A0               	movwf	___awtoft@c
 14858  0931  3000               	movlw	0
 14859  0932  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14860  0933  00A1               	movwf	___awtoft@c+1
 14861  0934  319F  27DE  3189   	fcall	___awtoft
 14862  0937  0020               	movlb	0	; select bank0
 14863  0938  0820               	movf	?___awtoft,w
 14864  0939  00A9               	movwf	___ftmul@f2
 14865  093A  0821               	movf	?___awtoft+1,w
 14866  093B  00AA               	movwf	___ftmul@f2+1
 14867  093C  0822               	movf	?___awtoft+2,w
 14868  093D  00AB               	movwf	___ftmul@f2+2
 14869  093E  0857               	movf	getDimmerLights_PercentToValue@i,w
 14870  093F  00A6               	movwf	___ftmul@f1
 14871  0940  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14872  0941  00A7               	movwf	___ftmul@f1+1
 14873  0942  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14874  0943  00A8               	movwf	___ftmul@f1+2
 14875  0944  318E  2696  3189   	fcall	___ftmul
 14876  0947  0020               	movlb	0	; select bank0
 14877  0948  0826               	movf	?___ftmul,w
 14878  0949  00B6               	movwf	___ftneg@f1
 14879  094A  0827               	movf	?___ftmul+1,w
 14880  094B  00B7               	movwf	___ftneg@f1+1
 14881  094C  0828               	movf	?___ftmul+2,w
 14882  094D  00B8               	movwf	___ftneg@f1+2
 14883  094E  319B  2323  3189   	fcall	___ftneg
 14884  0951  0020               	movlb	0	; select bank0
 14885  0952  0836               	movf	?___ftneg,w
 14886  0953  00BC               	movwf	___ftadd@f2
 14887  0954  0837               	movf	?___ftneg+1,w
 14888  0955  00BD               	movwf	___ftadd@f2+1
 14889  0956  0838               	movf	?___ftneg+2,w
 14890  0957  00BE               	movwf	___ftadd@f2+2
 14891  0958  3000               	movlw	0
 14892  0959  00B9               	movwf	___ftadd@f1
 14893  095A  3050               	movlw	80
 14894  095B  00BA               	movwf	___ftadd@f1+1
 14895  095C  3042               	movlw	66
 14896  095D  00BB               	movwf	___ftadd@f1+2
 14897  095E  3183  235A  3189   	fcall	___ftadd
 14898  0961  0020               	movlb	0	; select bank0
 14899  0962  0839               	movf	?___ftadd,w
 14900  0963  00C6               	movwf	___fttol@f1
 14901  0964  083A               	movf	?___ftadd+1,w
 14902  0965  00C7               	movwf	___fttol@f1+1
 14903  0966  083B               	movf	?___ftadd+2,w
 14904  0967  00C8               	movwf	___fttol@f1+2
 14905  0968  318B  239B         	fcall	___fttol
 14906  096A  0020               	movlb	0	; select bank0
 14907  096B  0846               	movf	?___fttol,w
 14908  096C  0008               	return
 14909  096D                     __end_of_getDimmerLights_PercentToValue:	
 14910                           
 14911                           	psect	text99
 14912  0E96                     __ptext99:	
 14913 ;; *************** function ___ftmul *****************
 14914 ;; Defined at:
 14915 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14916 ;; Parameters:    Size  Location     Type
 14917 ;;  f1              3    6[BANK0 ] float 
 14918 ;;  f2              3    9[BANK0 ] float 
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14921 ;;  sign            1   21[BANK0 ] unsigned char 
 14922 ;;  cntr            1   20[BANK0 ] unsigned char 
 14923 ;;  exp             1   16[BANK0 ] unsigned char 
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  3    6[BANK0 ] float 
 14926 ;; Registers used:
 14927 ;;		wreg, status,2, status,0, pclath, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14933 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;Total ram usage:       16 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    4
 14940 ;; This function calls:
 14941 ;;		___ftpack
 14942 ;; This function is called by:
 14943 ;;		_getDimmerLights_PercentToValue
 14944 ;; This function uses a non-reentrant model
 14945 ;;
 14946                           
 14947                           
 14948                           ;psect for function ___ftmul
 14949  0E96                     ___ftmul:	
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14953  0E96  0020               	movlb	0	; select bank0
 14954  0E97  0826               	movf	___ftmul@f1,w
 14955  0E98  00AC               	movwf	??___ftmul
 14956  0E99  0827               	movf	___ftmul@f1+1,w
 14957  0E9A  00AD               	movwf	??___ftmul+1
 14958  0E9B  0828               	movf	___ftmul@f1+2,w
 14959  0E9C  00AE               	movwf	??___ftmul+2
 14960  0E9D  1003               	clrc
 14961  0E9E  0D2D               	rlf	??___ftmul+1,w
 14962  0E9F  0D2E               	rlf	??___ftmul+2,w
 14963  0EA0  00AF               	movwf	??___ftmul+3
 14964  0EA1  082F               	movf	??___ftmul+3,w
 14965  0EA2  00B0               	movwf	___ftmul@exp
 14966  0EA3  08B0               	movf	___ftmul@exp,f
 14967  0EA4  1D03               	skipz
 14968  0EA5  2EAD               	goto	l6464
 14969  0EA6  3000               	movlw	0
 14970  0EA7  00A6               	movwf	?___ftmul
 14971  0EA8  3000               	movlw	0
 14972  0EA9  00A7               	movwf	?___ftmul+1
 14973  0EAA  3000               	movlw	0
 14974  0EAB  00A8               	movwf	?___ftmul+2
 14975  0EAC  0008               	return
 14976  0EAD                     l6464:	
 14977  0EAD  0829               	movf	___ftmul@f2,w
 14978  0EAE  00AC               	movwf	??___ftmul
 14979  0EAF  082A               	movf	___ftmul@f2+1,w
 14980  0EB0  00AD               	movwf	??___ftmul+1
 14981  0EB1  082B               	movf	___ftmul@f2+2,w
 14982  0EB2  00AE               	movwf	??___ftmul+2
 14983  0EB3  1003               	clrc
 14984  0EB4  0D2D               	rlf	??___ftmul+1,w
 14985  0EB5  0D2E               	rlf	??___ftmul+2,w
 14986  0EB6  00AF               	movwf	??___ftmul+3
 14987  0EB7  082F               	movf	??___ftmul+3,w
 14988  0EB8  00B5               	movwf	___ftmul@sign
 14989  0EB9  08B5               	movf	___ftmul@sign,f
 14990  0EBA  1D03               	skipz
 14991  0EBB  2EC3               	goto	l6470
 14992  0EBC  3000               	movlw	0
 14993  0EBD  00A6               	movwf	?___ftmul
 14994  0EBE  3000               	movlw	0
 14995  0EBF  00A7               	movwf	?___ftmul+1
 14996  0EC0  3000               	movlw	0
 14997  0EC1  00A8               	movwf	?___ftmul+2
 14998  0EC2  0008               	return
 14999  0EC3                     l6470:	
 15000  0EC3  0835               	movf	___ftmul@sign,w
 15001  0EC4  3E7B               	addlw	123
 15002  0EC5  00AC               	movwf	??___ftmul
 15003  0EC6  082C               	movf	??___ftmul,w
 15004  0EC7  07B0               	addwf	___ftmul@exp,f
 15005  0EC8  0826               	movf	___ftmul@f1,w
 15006  0EC9  00AC               	movwf	??___ftmul
 15007  0ECA  0827               	movf	___ftmul@f1+1,w
 15008  0ECB  00AD               	movwf	??___ftmul+1
 15009  0ECC  0828               	movf	___ftmul@f1+2,w
 15010  0ECD  00AE               	movwf	??___ftmul+2
 15011  0ECE  3010               	movlw	16
 15012  0ECF                     u5665:	
 15013  0ECF  36AE               	lsrf	??___ftmul+2,f
 15014  0ED0  0CAD               	rrf	??___ftmul+1,f
 15015  0ED1  0CAC               	rrf	??___ftmul,f
 15016  0ED2  0B89               	decfsz	9,f
 15017  0ED3  2ECF               	goto	u5665
 15018  0ED4  082C               	movf	??___ftmul,w
 15019  0ED5  00AF               	movwf	??___ftmul+3
 15020  0ED6  082F               	movf	??___ftmul+3,w
 15021  0ED7  00B5               	movwf	___ftmul@sign
 15022  0ED8  0829               	movf	___ftmul@f2,w
 15023  0ED9  00AC               	movwf	??___ftmul
 15024  0EDA  082A               	movf	___ftmul@f2+1,w
 15025  0EDB  00AD               	movwf	??___ftmul+1
 15026  0EDC  082B               	movf	___ftmul@f2+2,w
 15027  0EDD  00AE               	movwf	??___ftmul+2
 15028  0EDE  3010               	movlw	16
 15029  0EDF                     u5675:	
 15030  0EDF  36AE               	lsrf	??___ftmul+2,f
 15031  0EE0  0CAD               	rrf	??___ftmul+1,f
 15032  0EE1  0CAC               	rrf	??___ftmul,f
 15033  0EE2  0B89               	decfsz	9,f
 15034  0EE3  2EDF               	goto	u5675
 15035  0EE4  082C               	movf	??___ftmul,w
 15036  0EE5  00AF               	movwf	??___ftmul+3
 15037  0EE6  082F               	movf	??___ftmul+3,w
 15038  0EE7  06B5               	xorwf	___ftmul@sign,f
 15039  0EE8  3080               	movlw	128
 15040  0EE9  00AC               	movwf	??___ftmul
 15041  0EEA  082C               	movf	??___ftmul,w
 15042  0EEB  05B5               	andwf	___ftmul@sign,f
 15043  0EEC  17A7               	bsf	___ftmul@f1+1,7
 15044  0EED  17AA               	bsf	___ftmul@f2+1,7
 15045  0EEE  30FF               	movlw	255
 15046  0EEF  05A9               	andwf	___ftmul@f2,f
 15047  0EF0  30FF               	movlw	255
 15048  0EF1  05AA               	andwf	___ftmul@f2+1,f
 15049  0EF2  3000               	movlw	0
 15050  0EF3  05AB               	andwf	___ftmul@f2+2,f
 15051  0EF4  3000               	movlw	0
 15052  0EF5  00B1               	movwf	___ftmul@f3_as_product
 15053  0EF6  3000               	movlw	0
 15054  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 15055  0EF8  3000               	movlw	0
 15056  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 15057  0EFA  3007               	movlw	7
 15058  0EFB  00AC               	movwf	??___ftmul
 15059  0EFC  082C               	movf	??___ftmul,w
 15060  0EFD  00B4               	movwf	___ftmul@cntr
 15061  0EFE                     l6482:	
 15062  0EFE  1C26               	btfss	___ftmul@f1,0
 15063  0EFF  2F06               	goto	l6486
 15064  0F00  0829               	movf	___ftmul@f2,w
 15065  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 15066  0F02  082A               	movf	___ftmul@f2+1,w
 15067  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15068  0F04  082B               	movf	___ftmul@f2+2,w
 15069  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15070  0F06                     l6486:	
 15071  0F06  3001               	movlw	1
 15072  0F07                     u5695:	
 15073  0F07  36A8               	lsrf	___ftmul@f1+2,f
 15074  0F08  0CA7               	rrf	___ftmul@f1+1,f
 15075  0F09  0CA6               	rrf	___ftmul@f1,f
 15076  0F0A  0B89               	decfsz	9,f
 15077  0F0B  2F07               	goto	u5695
 15078  0F0C  3001               	movlw	1
 15079  0F0D                     u5705:	
 15080  0F0D  35A9               	lslf	___ftmul@f2,f
 15081  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 15082  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 15083  0F10  0B89               	decfsz	9,f
 15084  0F11  2F0D               	goto	u5705
 15085  0F12  3001               	movlw	1
 15086  0F13  02B4               	subwf	___ftmul@cntr,f
 15087  0F14  1D03               	btfss	3,2
 15088  0F15  2EFE               	goto	l6482
 15089  0F16  3009               	movlw	9
 15090  0F17  00AC               	movwf	??___ftmul
 15091  0F18  082C               	movf	??___ftmul,w
 15092  0F19  00B4               	movwf	___ftmul@cntr
 15093  0F1A                     l6494:	
 15094  0F1A  1C26               	btfss	___ftmul@f1,0
 15095  0F1B  2F22               	goto	l6498
 15096  0F1C  0829               	movf	___ftmul@f2,w
 15097  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 15098  0F1E  082A               	movf	___ftmul@f2+1,w
 15099  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15100  0F20  082B               	movf	___ftmul@f2+2,w
 15101  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15102  0F22                     l6498:	
 15103  0F22  3001               	movlw	1
 15104  0F23                     u5735:	
 15105  0F23  36A8               	lsrf	___ftmul@f1+2,f
 15106  0F24  0CA7               	rrf	___ftmul@f1+1,f
 15107  0F25  0CA6               	rrf	___ftmul@f1,f
 15108  0F26  0B89               	decfsz	9,f
 15109  0F27  2F23               	goto	u5735
 15110  0F28  3001               	movlw	1
 15111  0F29                     u5745:	
 15112  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 15113  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 15114  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 15115  0F2C  0B89               	decfsz	9,f
 15116  0F2D  2F29               	goto	u5745
 15117  0F2E  3001               	movlw	1
 15118  0F2F  02B4               	subwf	___ftmul@cntr,f
 15119  0F30  1D03               	btfss	3,2
 15120  0F31  2F1A               	goto	l6494
 15121  0F32  0831               	movf	___ftmul@f3_as_product,w
 15122  0F33  00F2               	movwf	___ftpack@arg
 15123  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 15124  0F35  00F3               	movwf	___ftpack@arg+1
 15125  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 15126  0F37  00F4               	movwf	___ftpack@arg+2
 15127  0F38  0830               	movf	___ftmul@exp,w
 15128  0F39  00AC               	movwf	??___ftmul
 15129  0F3A  082C               	movf	??___ftmul,w
 15130  0F3B  00F5               	movwf	___ftpack@exp
 15131  0F3C  0835               	movf	___ftmul@sign,w
 15132  0F3D  00AD               	movwf	??___ftmul+1
 15133  0F3E  082D               	movf	??___ftmul+1,w
 15134  0F3F  00F6               	movwf	___ftpack@sign
 15135  0F40  3197  27A0         	fcall	___ftpack
 15136  0F42  0872               	movf	?___ftpack,w
 15137  0F43  0020               	movlb	0	; select bank0
 15138  0F44  00A6               	movwf	?___ftmul
 15139  0F45  0873               	movf	?___ftpack+1,w
 15140  0F46  00A7               	movwf	?___ftmul+1
 15141  0F47  0874               	movf	?___ftpack+2,w
 15142  0F48  00A8               	movwf	?___ftmul+2
 15143  0F49  0008               	return
 15144  0F4A                     __end_of___ftmul:	
 15145                           
 15146                           	psect	text100
 15147  1BF6                     __ptext100:	
 15148 ;; *************** function _getDelayOff_GO *****************
 15149 ;; Defined at:
 15150 ;;		line 114 in file "../src/DelayOff_B1.c"
 15151 ;; Parameters:    Size  Location     Type
 15152 ;;  sw              1    wreg     unsigned char 
 15153 ;; Auto vars:     Size  Location     Type
 15154 ;;  sw              1    4[COMMON] unsigned char 
 15155 ;;  go              1    5[COMMON] unsigned char 
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  1    wreg      unsigned char 
 15158 ;; Registers used:
 15159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15166 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;Total ram usage:        2 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:    4
 15172 ;; This function calls:
 15173 ;;		_DelayOffPointSelect
 15174 ;; This function is called by:
 15175 ;;		_setDimmerLights_OnOff
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           
 15180                           ;psect for function _getDelayOff_GO
 15181  1BF6                     _getDelayOff_GO:	
 15182                           
 15183                           ;incstack = 0
 15184                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15185                           ;getDelayOff_GO@sw stored from wreg
 15186  1BF6  00F4               	movwf	getDelayOff_GO@sw
 15187                           
 15188                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15189  1BF7  0874               	movf	getDelayOff_GO@sw,w
 15190  1BF8  319D  2553         	fcall	_DelayOffPointSelect
 15191                           
 15192                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15193  1BFA  0021               	movlb	1	; select bank1
 15194  1BFB  0844               	movf	_DelayOff^(0+128),w
 15195  1BFC  0086               	movwf	6
 15196  1BFD  3001               	movlw	1	; select bank2/3
 15197  1BFE  0087               	movwf	7
 15198  1BFF  3000               	movlw	0
 15199  1C00  1881               	btfsc	1,1
 15200  1C01  3001               	movlw	1
 15201  1C02  00F5               	movwf	getDelayOff_GO@go
 15202                           
 15203                           ;DelayOff_B1.c: 117: return go;
 15204  1C03  0875               	movf	getDelayOff_GO@go,w
 15205  1C04  0008               	return
 15206  1C05                     __end_of_getDelayOff_GO:	
 15207                           
 15208                           	psect	text101
 15209  1C51                     __ptext101:	
 15210 ;; *************** function _getCmd_Status *****************
 15211 ;; Defined at:
 15212 ;;		line 605 in file "../src/Main_B1.c"
 15213 ;; Parameters:    Size  Location     Type
 15214 ;;  number          1    wreg     unsigned char 
 15215 ;; Auto vars:     Size  Location     Type
 15216 ;;  number          1    2[COMMON] unsigned char 
 15217 ;;  cmd             1    3[COMMON] unsigned char 
 15218 ;; Return value:  Size  Location     Type
 15219 ;;                  1    wreg      unsigned char 
 15220 ;; Registers used:
 15221 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15222 ;; Tracked objects:
 15223 ;;		On entry : 0/0
 15224 ;;		On exit  : 0/0
 15225 ;;		Unchanged: 0/0
 15226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;Total ram usage:        2 bytes
 15232 ;; Hardware stack levels used:    1
 15233 ;; Hardware stack levels required when called:    3
 15234 ;; This function calls:
 15235 ;;		Nothing
 15236 ;; This function is called by:
 15237 ;;		_setDimmerLights_OnOff
 15238 ;; This function uses a non-reentrant model
 15239 ;;
 15240                           
 15241                           
 15242                           ;psect for function _getCmd_Status
 15243  1C51                     _getCmd_Status:	
 15244                           
 15245                           ;incstack = 0
 15246                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15247                           ;getCmd_Status@number stored from wreg
 15248  1C51  00F2               	movwf	getCmd_Status@number
 15249                           
 15250                           ;Main_B1.c: 606: char cmd = 0;
 15251  1C52  01F3               	clrf	getCmd_Status@cmd
 15252                           
 15253                           ;Main_B1.c: 607: switch (number) {
 15254  1C53  2C5A               	goto	l7152
 15255  1C54                     l7148:	
 15256                           ;Main_B1.c: 608: case 1:
 15257                           
 15258                           
 15259                           ;Main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 15260  1C54  3000               	movlw	0
 15261  1C55  0021               	movlb	1	; select bank1
 15262  1C56  1843               	btfsc	_Cmd^(0+128),0
 15263  1C57  3001               	movlw	1
 15264  1C58  00F3               	movwf	getCmd_Status@cmd
 15265                           
 15266                           ;Main_B1.c: 611: }
 15267                           
 15268                           ;Main_B1.c: 610: break;
 15269  1C59  2C5F               	goto	l7154
 15270  1C5A                     l7152:	
 15271  1C5A  0872               	movf	getCmd_Status@number,w
 15272                           
 15273                           ; Switch size 1, requested type "space"
 15274                           ; Number of cases is 1, Range of values is 1 to 1
 15275                           ; switch strategies available:
 15276                           ; Name         Instructions Cycles
 15277                           ; simple_byte            4     3 (average)
 15278                           ; direct_byte           11     9 (fixed)
 15279                           ; jumptable            263     9 (fixed)
 15280                           ;	Chosen strategy is simple_byte
 15281  1C5B  3A01               	xorlw	1	; case 1
 15282  1C5C  1903               	skipnz
 15283  1C5D  2C54               	goto	l7148
 15284  1C5E  2C5F               	goto	l7154
 15285  1C5F                     l7154:	
 15286                           
 15287                           ;Main_B1.c: 612: return cmd;
 15288  1C5F  0873               	movf	getCmd_Status@cmd,w
 15289  1C60  0008               	return
 15290  1C61                     __end_of_getCmd_Status:	
 15291                           
 15292                           	psect	text102
 15293  148F                     __ptext102:	
 15294 ;; *************** function _setDimmerLights_Dimming *****************
 15295 ;; Defined at:
 15296 ;;		line 864 in file "../src/Dimmer_B1.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  lights          1    wreg     unsigned char 
 15299 ;;  status          1   67[BANK0 ] unsigned char 
 15300 ;; Auto vars:     Size  Location     Type
 15301 ;;  lights          1   69[BANK0 ] unsigned char 
 15302 ;; Return value:  Size  Location     Type
 15303 ;;		None               void
 15304 ;; Registers used:
 15305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15306 ;; Tracked objects:
 15307 ;;		On entry : 0/0
 15308 ;;		On exit  : 0/0
 15309 ;;		Unchanged: 0/0
 15310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15311 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;Total ram usage:        3 bytes
 15316 ;; Hardware stack levels used:    1
 15317 ;; Hardware stack levels required when called:    6
 15318 ;; This function calls:
 15319 ;;		_getDimmerIntr_DimmingValue
 15320 ;;		_getDimmerLights_ValueToPercent
 15321 ;;		_setBuz
 15322 ;;		_setDimmerIntr_Dimming_Sw
 15323 ;;		_setDimmerIntr_MaxmumValue
 15324 ;;		_setDimmerLights_Line
 15325 ;;		_setProductData
 15326 ;;		_setRF_DimmerLights
 15327 ;;		_setRF_TransceiveGO
 15328 ;;		_setTxData
 15329 ;; This function is called by:
 15330 ;;		_setDimmerLights_Main
 15331 ;; This function uses a non-reentrant model
 15332 ;;
 15333                           
 15334                           
 15335                           ;psect for function _setDimmerLights_Dimming
 15336  148F                     _setDimmerLights_Dimming:	
 15337                           
 15338                           ;incstack = 0
 15339                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15340                           ;setDimmerLights_Dimming@lights stored from wreg
 15341  148F  0020               	movlb	0	; select bank0
 15342  1490  00E5               	movwf	setDimmerLights_Dimming@lights
 15343                           
 15344                           ;Dimmer_B1.c: 865: if (status == 1) {
 15345  1491  0863               	movf	setDimmerLights_Dimming@status,w
 15346  1492  3A01               	xorlw	1
 15347  1493  1D03               	skipz
 15348  1494  2CA8               	goto	l9558
 15349                           
 15350                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 15351  1495  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15352  1496  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15353  1497  0865               	movf	setDimmerLights_Dimming@lights,w
 15354  1498  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15355                           
 15356                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 15357  149B  3000               	movlw	0
 15358  149C  319C  2441  3194   	fcall	_setRF_TransceiveGO
 15359                           
 15360                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 15361  149F  3064               	movlw	100
 15362  14A0  0020               	movlb	0	; select bank0
 15363  14A1  00A4               	movwf	setBuz@time
 15364  14A2  3000               	movlw	0
 15365  14A3  00A5               	movwf	setBuz@time+1
 15366  14A4  3001               	movlw	1
 15367  14A5  3195  2584         	fcall	_setBuz
 15368                           
 15369                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 15370  14A7  0008               	return
 15371  14A8                     l9558:	
 15372  14A8  0020               	movlb	0	; select bank0
 15373  14A9  08E3               	movf	setDimmerLights_Dimming@status,f
 15374  14AA  1D03               	skipz
 15375  14AB  0008               	return
 15376                           
 15377                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 15378  14AC  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15379  14AD  0865               	movf	setDimmerLights_Dimming@lights,w
 15380  14AE  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15381                           
 15382                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 15383  14B1  0021               	movlb	1	; select bank1
 15384  14B2  113A               	bcf	_Dimmer^(0+128),2
 15385                           
 15386                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 15387  14B3  0020               	movlb	0	; select bank0
 15388  14B4  0865               	movf	setDimmerLights_Dimming@lights,w
 15389  14B5  319C  24F4  3194   	fcall	_setDimmerLights_Line
 15390                           
 15391                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15392  14B8  0020               	movlb	0	; select bank0
 15393  14B9  0865               	movf	setDimmerLights_Dimming@lights,w
 15394  14BA  319D  252B  3194   	fcall	_getDimmerIntr_DimmingValue
 15395  14BD  0020               	movlb	0	; select bank0
 15396  14BE  00E4               	movwf	??_setDimmerLights_Dimming
 15397  14BF  0864               	movf	??_setDimmerLights_Dimming,w
 15398  14C0  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15399  14C1  0865               	movf	setDimmerLights_Dimming@lights,w
 15400  14C2  319D  25FC  3194   	fcall	_setDimmerIntr_MaxmumValue
 15401                           
 15402                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15403  14C5  0020               	movlb	0	; select bank0
 15404  14C6  0865               	movf	setDimmerLights_Dimming@lights,w
 15405  14C7  319D  252B  3194   	fcall	_getDimmerIntr_DimmingValue
 15406  14CA  3188  20A3  3194   	fcall	_getDimmerLights_ValueToPercent
 15407  14CD  0020               	movlb	0	; select bank0
 15408  14CE  00E4               	movwf	??_setDimmerLights_Dimming
 15409  14CF  0864               	movf	??_setDimmerLights_Dimming,w
 15410  14D0  00DA               	movwf	setProductData@value
 15411  14D1  0865               	movf	setDimmerLights_Dimming@lights,w
 15412  14D2  3E14               	addlw	20
 15413  14D3  319B  23D9  3194   	fcall	_setProductData
 15414                           
 15415                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 15416  14D6  0020               	movlb	0	; select bank0
 15417  14D7  01DE               	clrf	setRF_DimmerLights@on
 15418  14D8  0ADE               	incf	setRF_DimmerLights@on,f
 15419  14D9  0865               	movf	setDimmerLights_Dimming@lights,w
 15420  14DA  3196  26E2  3194   	fcall	_setRF_DimmerLights
 15421                           
 15422                           ;Dimmer_B1.c: 892: setTxData();
 15423  14DD  318F  274A         	fcall	_setTxData
 15424  14DF  0008               	return
 15425  14E0                     __end_of_setDimmerLights_Dimming:	
 15426                           
 15427                           	psect	text103
 15428  0F4A                     __ptext103:	
 15429 ;; *************** function _setTxData *****************
 15430 ;; Defined at:
 15431 ;;		line 183 in file "../src/RF_Control_B1.c"
 15432 ;; Parameters:    Size  Location     Type
 15433 ;;		None
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  i               1    0        unsigned char 
 15436 ;; Return value:  Size  Location     Type
 15437 ;;		None               void
 15438 ;; Registers used:
 15439 ;;		wreg, fsr1l, fsr1h, status,2
 15440 ;; Tracked objects:
 15441 ;;		On entry : 0/0
 15442 ;;		On exit  : 0/0
 15443 ;;		Unchanged: 0/0
 15444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;Total ram usage:        1 bytes
 15450 ;; Hardware stack levels used:    1
 15451 ;; Hardware stack levels required when called:    3
 15452 ;; This function calls:
 15453 ;;		Nothing
 15454 ;; This function is called by:
 15455 ;;		_setDimmerLights_OnOff
 15456 ;;		_setDimmerLights_Dimming
 15457 ;;		_getRxData
 15458 ;;		_setControl_Lights_Table
 15459 ;;		_setRFSW_Control
 15460 ;;		_setRFSW_AdjControl
 15461 ;; This function uses a non-reentrant model
 15462 ;;
 15463                           
 15464                           
 15465                           ;psect for function _setTxData
 15466  0F4A                     _setTxData:	
 15467                           
 15468                           ;RF_Control_B1.c: 184: char i;
 15469                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15470                           
 15471                           ;incstack = 0
 15472                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15473  0F4A  0021               	movlb	1	; select bank1
 15474  0F4B  1C20               	btfss	_RF1^(0+128),0
 15475  0F4C  0008               	return
 15476                           
 15477                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15478  0F4D  1520               	bsf	_RF1^(0+128),2
 15479                           
 15480                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15481  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15482  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15483                           
 15484                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15485  0F50  3063               	movlw	99
 15486  0F51  00F2               	movwf	??_setTxData
 15487  0F52  0872               	movf	??_setTxData,w
 15488  0F53  0023               	movlb	3	; select bank3
 15489  0F54  00A0               	movwf	_RF_Data^(0+384)
 15490                           
 15491                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15492  0F55  3002               	movlw	2
 15493  0F56  00F2               	movwf	??_setTxData
 15494  0F57  0872               	movf	??_setTxData,w
 15495  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15496                           
 15497                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15498  0F59  0020               	movlb	0	; select bank0
 15499  0F5A  086D               	movf	_product,w
 15500  0F5B  0086               	movwf	6
 15501  0F5C  3002               	movlw	2	; select bank4/5
 15502  0F5D  0087               	movwf	7
 15503  0F5E  3002               	movlw	2	; select bank4/5
 15504  0F5F  3F42               	moviw [2]fsr1
 15505  0F60  0023               	movlb	3	; select bank3
 15506  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15507                           
 15508                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15509  0F62  0020               	movlb	0	; select bank0
 15510  0F63  086D               	movf	_product,w
 15511  0F64  0086               	movwf	6
 15512  0F65  3002               	movlw	2	; select bank4/5
 15513  0F66  0087               	movwf	7
 15514  0F67  3002               	movlw	2	; select bank4/5
 15515  0F68  3F43               	moviw [3]fsr1
 15516  0F69  0023               	movlb	3	; select bank3
 15517  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15518                           
 15519                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15520  0F6B  0020               	movlb	0	; select bank0
 15521  0F6C  086D               	movf	_product,w
 15522  0F6D  0086               	movwf	6
 15523  0F6E  3002               	movlw	2	; select bank4/5
 15524  0F6F  0087               	movwf	7
 15525  0F70  3002               	movlw	2	; select bank4/5
 15526  0F71  3F44               	moviw [4]fsr1
 15527  0F72  0023               	movlb	3	; select bank3
 15528  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15529                           
 15530                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15531  0F74  0020               	movlb	0	; select bank0
 15532  0F75  086D               	movf	_product,w
 15533  0F76  0086               	movwf	6
 15534  0F77  3002               	movlw	2	; select bank4/5
 15535  0F78  0087               	movwf	7
 15536  0F79  3002               	movlw	2	; select bank4/5
 15537  0F7A  3F45               	moviw [5]fsr1
 15538  0F7B  0023               	movlb	3	; select bank3
 15539  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15540                           
 15541                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15542  0F7D  0020               	movlb	0	; select bank0
 15543  0F7E  086D               	movf	_product,w
 15544  0F7F  0086               	movwf	6
 15545  0F80  3002               	movlw	2	; select bank4/5
 15546  0F81  0087               	movwf	7
 15547  0F82  3002               	movlw	2	; select bank4/5
 15548  0F83  3F46               	moviw [6]fsr1
 15549  0F84  0023               	movlb	3	; select bank3
 15550  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15551                           
 15552                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15553  0F86  0020               	movlb	0	; select bank0
 15554  0F87  086D               	movf	_product,w
 15555  0F88  0086               	movwf	6
 15556  0F89  3002               	movlw	2	; select bank4/5
 15557  0F8A  0087               	movwf	7
 15558  0F8B  3002               	movlw	2	; select bank4/5
 15559  0F8C  3F47               	moviw [7]fsr1
 15560  0F8D  0023               	movlb	3	; select bank3
 15561  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15562                           
 15563                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15564  0F8F  0020               	movlb	0	; select bank0
 15565  0F90  086D               	movf	_product,w
 15566  0F91  0086               	movwf	6
 15567  0F92  3002               	movlw	2	; select bank4/5
 15568  0F93  0087               	movwf	7
 15569  0F94  3002               	movlw	2	; select bank4/5
 15570  0F95  3F48               	moviw [8]fsr1
 15571  0F96  0023               	movlb	3	; select bank3
 15572  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15573                           
 15574                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15575  0F98  0020               	movlb	0	; select bank0
 15576  0F99  086D               	movf	_product,w
 15577  0F9A  0086               	movwf	6
 15578  0F9B  3002               	movlw	2	; select bank4/5
 15579  0F9C  0087               	movwf	7
 15580  0F9D  3002               	movlw	2	; select bank4/5
 15581  0F9E  3F49               	moviw [9]fsr1
 15582  0F9F  0023               	movlb	3	; select bank3
 15583  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15584                           
 15585                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15586  0FA1  0020               	movlb	0	; select bank0
 15587  0FA2  086D               	movf	_product,w
 15588  0FA3  0086               	movwf	6
 15589  0FA4  3002               	movlw	2	; select bank4/5
 15590  0FA5  0087               	movwf	7
 15591  0FA6  3002               	movlw	2	; select bank4/5
 15592  0FA7  3F4A               	moviw [10]fsr1
 15593  0FA8  0023               	movlb	3	; select bank3
 15594  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15595                           
 15596                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15597  0FAA  0020               	movlb	0	; select bank0
 15598  0FAB  086D               	movf	_product,w
 15599  0FAC  0086               	movwf	6
 15600  0FAD  3002               	movlw	2	; select bank4/5
 15601  0FAE  0087               	movwf	7
 15602  0FAF  3002               	movlw	2	; select bank4/5
 15603  0FB0  3F4B               	moviw [11]fsr1
 15604  0FB1  0023               	movlb	3	; select bank3
 15605  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15606                           
 15607                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15608  0FB3  0020               	movlb	0	; select bank0
 15609  0FB4  086D               	movf	_product,w
 15610  0FB5  0086               	movwf	6
 15611  0FB6  3002               	movlw	2	; select bank4/5
 15612  0FB7  0087               	movwf	7
 15613  0FB8  3002               	movlw	2	; select bank4/5
 15614  0FB9  3F4C               	moviw [12]fsr1
 15615  0FBA  0023               	movlb	3	; select bank3
 15616  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15617                           
 15618                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15619  0FBC  0020               	movlb	0	; select bank0
 15620  0FBD  086D               	movf	_product,w
 15621  0FBE  0086               	movwf	6
 15622  0FBF  3002               	movlw	2	; select bank4/5
 15623  0FC0  0087               	movwf	7
 15624  0FC1  3002               	movlw	2	; select bank4/5
 15625  0FC2  3F4D               	moviw [13]fsr1
 15626  0FC3  0023               	movlb	3	; select bank3
 15627  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15628                           
 15629                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15630  0FC5  0020               	movlb	0	; select bank0
 15631  0FC6  086D               	movf	_product,w
 15632  0FC7  0086               	movwf	6
 15633  0FC8  3002               	movlw	2	; select bank4/5
 15634  0FC9  0087               	movwf	7
 15635  0FCA  3002               	movlw	2	; select bank4/5
 15636  0FCB  3F4E               	moviw [14]fsr1
 15637  0FCC  0023               	movlb	3	; select bank3
 15638  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15639                           
 15640                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15641  0FCE  0020               	movlb	0	; select bank0
 15642  0FCF  086D               	movf	_product,w
 15643  0FD0  0086               	movwf	6
 15644  0FD1  3002               	movlw	2	; select bank4/5
 15645  0FD2  0087               	movwf	7
 15646  0FD3  3002               	movlw	2	; select bank4/5
 15647  0FD4  3F4F               	moviw [15]fsr1
 15648  0FD5  0023               	movlb	3	; select bank3
 15649  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15650                           
 15651                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15652  0FD7  0020               	movlb	0	; select bank0
 15653  0FD8  086D               	movf	_product,w
 15654  0FD9  0086               	movwf	6
 15655  0FDA  3002               	movlw	2	; select bank4/5
 15656  0FDB  0087               	movwf	7
 15657  0FDC  3002               	movlw	2	; select bank4/5
 15658  0FDD  3F50               	moviw [16]fsr1
 15659  0FDE  0023               	movlb	3	; select bank3
 15660  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15661                           
 15662                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15663  0FE0  0020               	movlb	0	; select bank0
 15664  0FE1  086D               	movf	_product,w
 15665  0FE2  0086               	movwf	6
 15666  0FE3  3002               	movlw	2	; select bank4/5
 15667  0FE4  0087               	movwf	7
 15668  0FE5  3002               	movlw	2	; select bank4/5
 15669  0FE6  3F51               	moviw [17]fsr1
 15670  0FE7  0023               	movlb	3	; select bank3
 15671  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15672                           
 15673                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15674  0FE9  0020               	movlb	0	; select bank0
 15675  0FEA  086D               	movf	_product,w
 15676  0FEB  0086               	movwf	6
 15677  0FEC  3002               	movlw	2	; select bank4/5
 15678  0FED  0087               	movwf	7
 15679  0FEE  3002               	movlw	2	; select bank4/5
 15680  0FEF  3F52               	moviw [18]fsr1
 15681  0FF0  0023               	movlb	3	; select bank3
 15682  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15683                           
 15684                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15685  0FF2  0020               	movlb	0	; select bank0
 15686  0FF3  086D               	movf	_product,w
 15687  0FF4  0086               	movwf	6
 15688  0FF5  3002               	movlw	2	; select bank4/5
 15689  0FF6  0087               	movwf	7
 15690  0FF7  3002               	movlw	2	; select bank4/5
 15691  0FF8  3F53               	moviw [19]fsr1
 15692  0FF9  0023               	movlb	3	; select bank3
 15693  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15694                           
 15695                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15696  0FFB  30D2               	movlw	210
 15697  0FFC  00F2               	movwf	??_setTxData
 15698  0FFD  0872               	movf	??_setTxData,w
 15699  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15700  0FFF  0008               	return
 15701  1000                     __end_of_setTxData:	
 15702                           
 15703                           	psect	text104
 15704  1C41                     __ptext104:	
 15705 ;; *************** function _setRF_TransceiveGO *****************
 15706 ;; Defined at:
 15707 ;;		line 461 in file "../src/RF_Control_B1.c"
 15708 ;; Parameters:    Size  Location     Type
 15709 ;;  command         1    wreg     unsigned char 
 15710 ;; Auto vars:     Size  Location     Type
 15711 ;;  command         1    3[COMMON] unsigned char 
 15712 ;; Return value:  Size  Location     Type
 15713 ;;		None               void
 15714 ;; Registers used:
 15715 ;;		wreg, status,2, status,0
 15716 ;; Tracked objects:
 15717 ;;		On entry : 0/0
 15718 ;;		On exit  : 0/0
 15719 ;;		Unchanged: 0/0
 15720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15725 ;;Total ram usage:        2 bytes
 15726 ;; Hardware stack levels used:    1
 15727 ;; Hardware stack levels required when called:    3
 15728 ;; This function calls:
 15729 ;;		Nothing
 15730 ;; This function is called by:
 15731 ;;		_setDimmerLights_Dimming
 15732 ;; This function uses a non-reentrant model
 15733 ;;
 15734                           
 15735                           
 15736                           ;psect for function _setRF_TransceiveGO
 15737  1C41                     _setRF_TransceiveGO:	
 15738                           
 15739                           ;incstack = 0
 15740                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15741                           ;setRF_TransceiveGO@command stored from wreg
 15742  1C41  00F3               	movwf	setRF_TransceiveGO@command
 15743                           
 15744                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15745  1C42  0873               	movf	setRF_TransceiveGO@command,w
 15746  1C43  3A01               	xorlw	1
 15747  1C44  3000               	movlw	0
 15748  1C45  1903               	skipnz
 15749  1C46  3001               	movlw	1
 15750  1C47  00F2               	movwf	??_setRF_TransceiveGO
 15751  1C48  0DF2               	rlf	??_setRF_TransceiveGO,f
 15752  1C49  0DF2               	rlf	??_setRF_TransceiveGO,f
 15753  1C4A  0021               	movlb	1	; select bank1
 15754  1C4B  0820               	movf	_RF1^(0+128),w
 15755  1C4C  0672               	xorwf	??_setRF_TransceiveGO,w
 15756  1C4D  39FB               	andlw	-5
 15757  1C4E  0672               	xorwf	??_setRF_TransceiveGO,w
 15758  1C4F  00A0               	movwf	_RF1^(0+128)
 15759  1C50  0008               	return
 15760  1C51                     __end_of_setRF_TransceiveGO:	
 15761                           
 15762                           	psect	text105
 15763  16E2                     __ptext105:	
 15764 ;; *************** function _setRF_DimmerLights *****************
 15765 ;; Defined at:
 15766 ;;		line 446 in file "../src/RF_Control_B1.c"
 15767 ;; Parameters:    Size  Location     Type
 15768 ;;  lights          1    wreg     unsigned char 
 15769 ;;  on              1   62[BANK0 ] unsigned char 
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;  lights          1   66[BANK0 ] unsigned char 
 15772 ;;  status          1   65[BANK0 ] unsigned char 
 15773 ;; Return value:  Size  Location     Type
 15774 ;;		None               void
 15775 ;; Registers used:
 15776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15777 ;; Tracked objects:
 15778 ;;		On entry : 0/0
 15779 ;;		On exit  : 0/0
 15780 ;;		Unchanged: 0/0
 15781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15782 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;Total ram usage:        5 bytes
 15787 ;; Hardware stack levels used:    1
 15788 ;; Hardware stack levels required when called:    4
 15789 ;; This function calls:
 15790 ;;		_setProductData
 15791 ;; This function is called by:
 15792 ;;		_setDimmerLights_OnOff
 15793 ;;		_setDimmerLights_Dimming
 15794 ;;		_setRFSW_Control
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           
 15799                           ;psect for function _setRF_DimmerLights
 15800  16E2                     _setRF_DimmerLights:	
 15801                           
 15802                           ;incstack = 0
 15803                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15804                           ;setRF_DimmerLights@lights stored from wreg
 15805  16E2  0020               	movlb	0	; select bank0
 15806  16E3  00E2               	movwf	setRF_DimmerLights@lights
 15807                           
 15808                           ;RF_Control_B1.c: 447: char status = 1;
 15809  16E4  01E1               	clrf	setRF_DimmerLights@status
 15810  16E5  0AE1               	incf	setRF_DimmerLights@status,f
 15811                           
 15812                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15813  16E6  0862               	movf	setRF_DimmerLights@lights,w
 15814  16E7  3EFF               	addlw	-1
 15815  16E8  0A89               	incf	9,f
 15816  16E9  2EEC               	goto	u6130
 15817  16EA                     u6135:	
 15818  16EA  1003               	clrc
 15819  16EB  0DE1               	rlf	setRF_DimmerLights@status,f
 15820  16EC                     u6130:	
 15821  16EC  3EFF               	addlw	-1
 15822  16ED  1D03               	skipz
 15823  16EE  2EEA               	goto	u6135
 15824                           
 15825                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15826  16EF  0862               	movf	setRF_DimmerLights@lights,w
 15827  16F0  00DF               	movwf	??_setRF_DimmerLights
 15828  16F1  085F               	movf	??_setRF_DimmerLights,w
 15829  16F2  00DA               	movwf	setProductData@value
 15830  16F3  300B               	movlw	11
 15831  16F4  319B  23D9  3196   	fcall	_setProductData
 15832                           
 15833                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15834  16F7  0020               	movlb	0	; select bank0
 15835  16F8  0862               	movf	setRF_DimmerLights@lights,w
 15836  16F9  3E1A               	addlw	26
 15837  16FA  076D               	addwf	_product,w
 15838  16FB  00DF               	movwf	??_setRF_DimmerLights
 15839  16FC  085F               	movf	??_setRF_DimmerLights,w
 15840  16FD  0086               	movwf	6
 15841  16FE  3002               	movlw	2	; select bank4/5
 15842  16FF  0087               	movwf	7
 15843  1700  0801               	movf	1,w
 15844  1701  00E0               	movwf	??_setRF_DimmerLights+1
 15845  1702  0860               	movf	??_setRF_DimmerLights+1,w
 15846  1703  00DA               	movwf	setProductData@value
 15847  1704  3011               	movlw	17
 15848  1705  319B  23D9  3196   	fcall	_setProductData
 15849                           
 15850                           ;RF_Control_B1.c: 451: if (on == 1) {
 15851  1708  0020               	movlb	0	; select bank0
 15852  1709  085E               	movf	setRF_DimmerLights@on,w
 15853  170A  3A01               	xorlw	1
 15854  170B  1D03               	skipz
 15855  170C  2F2C               	goto	l6716
 15856                           
 15857                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15858  170D  0862               	movf	setRF_DimmerLights@lights,w
 15859  170E  3E14               	addlw	20
 15860  170F  076D               	addwf	_product,w
 15861  1710  00DF               	movwf	??_setRF_DimmerLights
 15862  1711  085F               	movf	??_setRF_DimmerLights,w
 15863  1712  0086               	movwf	6
 15864  1713  3002               	movlw	2	; select bank4/5
 15865  1714  0087               	movwf	7
 15866  1715  0801               	movf	1,w
 15867  1716  00E0               	movwf	??_setRF_DimmerLights+1
 15868  1717  0860               	movf	??_setRF_DimmerLights+1,w
 15869  1718  00DA               	movwf	setProductData@value
 15870  1719  3009               	movlw	9
 15871  171A  319B  23D9  3196   	fcall	_setProductData
 15872                           
 15873                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15874  171D  0020               	movlb	0	; select bank0
 15875  171E  086D               	movf	_product,w
 15876  171F  3E0F               	addlw	15
 15877  1720  0086               	movwf	6
 15878  1721  3002               	movlw	2	; select bank4/5
 15879  1722  0087               	movwf	7
 15880  1723  0801               	movf	1,w
 15881  1724  0461               	iorwf	setRF_DimmerLights@status,w
 15882  1725  00DF               	movwf	??_setRF_DimmerLights
 15883  1726  085F               	movf	??_setRF_DimmerLights,w
 15884  1727  00DA               	movwf	setProductData@value
 15885  1728  300F               	movlw	15
 15886  1729  319B  23D9         	fcall	_setProductData
 15887                           
 15888                           ;RF_Control_B1.c: 454: } else {
 15889  172B  0008               	return
 15890  172C                     l6716:	
 15891                           
 15892                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15893  172C  0020               	movlb	0	; select bank0
 15894  172D  01DA               	clrf	setProductData@value
 15895  172E  3009               	movlw	9
 15896  172F  319B  23D9  3196   	fcall	_setProductData
 15897                           
 15898                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15899  1732  0020               	movlb	0	; select bank0
 15900  1733  086D               	movf	_product,w
 15901  1734  3E0F               	addlw	15
 15902  1735  0086               	movwf	6
 15903  1736  3002               	movlw	2	; select bank4/5
 15904  1737  0087               	movwf	7
 15905  1738  0961               	comf	setRF_DimmerLights@status,w
 15906  1739  0501               	andwf	1,w
 15907  173A  00DF               	movwf	??_setRF_DimmerLights
 15908  173B  085F               	movf	??_setRF_DimmerLights,w
 15909  173C  00DA               	movwf	setProductData@value
 15910  173D  300F               	movlw	15
 15911  173E  319B  23D9         	fcall	_setProductData
 15912  1740  0008               	return
 15913  1741                     __end_of_setRF_DimmerLights:	
 15914                           
 15915                           	psect	text106
 15916  1CF4                     __ptext106:	
 15917 ;; *************** function _setDimmerLights_Line *****************
 15918 ;; Defined at:
 15919 ;;		line 936 in file "../src/Dimmer_B1.c"
 15920 ;; Parameters:    Size  Location     Type
 15921 ;;  lights          1    wreg     unsigned char 
 15922 ;; Auto vars:     Size  Location     Type
 15923 ;;  lights          1    2[COMMON] unsigned char 
 15924 ;; Return value:  Size  Location     Type
 15925 ;;		None               void
 15926 ;; Registers used:
 15927 ;;		wreg
 15928 ;; Tracked objects:
 15929 ;;		On entry : 0/0
 15930 ;;		On exit  : 0/0
 15931 ;;		Unchanged: 0/0
 15932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;Total ram usage:        1 bytes
 15938 ;; Hardware stack levels used:    1
 15939 ;; Hardware stack levels required when called:    3
 15940 ;; This function calls:
 15941 ;;		Nothing
 15942 ;; This function is called by:
 15943 ;;		_setDimmerLights_OnOff
 15944 ;;		_setDimmerLights_Dimming
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           
 15949                           ;psect for function _setDimmerLights_Line
 15950  1CF4                     _setDimmerLights_Line:	
 15951                           
 15952                           ;incstack = 0
 15953                           ; Regs used in _setDimmerLights_Line: [wreg]
 15954                           ;setDimmerLights_Line@lights stored from wreg
 15955  1CF4  00F2               	movwf	setDimmerLights_Line@lights
 15956                           
 15957                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15958  1CF5  0021               	movlb	1	; select bank1
 15959  1CF6  14BA               	bsf	_Dimmer^(0+128),1
 15960                           
 15961                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15962  1CF7  0022               	movlb	2	; select bank2
 15963  1CF8  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15964                           
 15965                           ;Dimmer_B1.c: 942: DimmerLights2.Line = 0;
 15966  1CF9  10E7               	bcf	(_DimmerLights2^(0+256)+1),1
 15967                           
 15968                           ;Dimmer_B1.c: 948: if (lights == 1) {
 15969  1CFA  0872               	movf	setDimmerLights_Line@lights,w
 15970  1CFB  3A01               	xorlw	1
 15971  1CFC  1D03               	skipz
 15972  1CFD  2D00               	goto	l7134
 15973                           
 15974                           ;Dimmer_B1.c: 949: DimmerLights1.Line = 1;
 15975  1CFE  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15976                           
 15977                           ;Dimmer_B1.c: 950: }
 15978  1CFF  0008               	return
 15979  1D00                     l7134:	
 15980                           
 15981                           ;Dimmer_B1.c: 953: else if (lights == 2) {
 15982  1D00  0872               	movf	setDimmerLights_Line@lights,w
 15983  1D01  3A02               	xorlw	2
 15984  1D02  1D03               	skipz
 15985  1D03  0008               	return
 15986                           
 15987                           ;Dimmer_B1.c: 954: DimmerLights2.Line = 1;
 15988  1D04  14E7               	bsf	(_DimmerLights2^(0+256)+1),1
 15989  1D05  0008               	return
 15990  1D06                     __end_of_setDimmerLights_Line:	
 15991                           
 15992                           	psect	text107
 15993  1DFC                     __ptext107:	
 15994 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15995 ;; Defined at:
 15996 ;;		line 86 in file "../src/Dimmer_B1.c"
 15997 ;; Parameters:    Size  Location     Type
 15998 ;;  lights          1    wreg     unsigned char 
 15999 ;;  value           1   58[BANK0 ] unsigned char 
 16000 ;; Auto vars:     Size  Location     Type
 16001 ;;  lights          1   60[BANK0 ] unsigned char 
 16002 ;; Return value:  Size  Location     Type
 16003 ;;		None               void
 16004 ;; Registers used:
 16005 ;;		wreg
 16006 ;; Tracked objects:
 16007 ;;		On entry : 0/0
 16008 ;;		On exit  : 0/0
 16009 ;;		Unchanged: 0/0
 16010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16011 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;Total ram usage:        3 bytes
 16016 ;; Hardware stack levels used:    1
 16017 ;; Hardware stack levels required when called:    3
 16018 ;; This function calls:
 16019 ;;		Nothing
 16020 ;; This function is called by:
 16021 ;;		_setDimmerLights_OnOff
 16022 ;;		_setDimmerLights_Dimming
 16023 ;;		_setRFSW_AdjControl
 16024 ;; This function uses a non-reentrant model
 16025 ;;
 16026                           
 16027                           
 16028                           ;psect for function _setDimmerIntr_MaxmumValue
 16029  1DFC                     _setDimmerIntr_MaxmumValue:	
 16030                           
 16031                           ;incstack = 0
 16032                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16033                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16034  1DFC  0020               	movlb	0	; select bank0
 16035  1DFD  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16036                           
 16037                           ;Dimmer_B1.c: 88: if (lights == 1) {
 16038  1DFE  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16039  1DFF  3A01               	xorlw	1
 16040  1E00  1D03               	skipz
 16041  1E01  2E08               	goto	l6684
 16042                           
 16043                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 16044  1E02  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16045  1E03  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16046  1E04  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16047  1E05  0021               	movlb	1	; select bank1
 16048  1E06  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 16049                           
 16050                           ;Dimmer_B1.c: 90: }
 16051  1E07  0008               	return
 16052  1E08                     l6684:	
 16053                           
 16054                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 16055  1E08  0020               	movlb	0	; select bank0
 16056  1E09  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16057  1E0A  3A02               	xorlw	2
 16058  1E0B  1D03               	skipz
 16059  1E0C  0008               	return
 16060                           
 16061                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 16062  1E0D  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16063  1E0E  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16064  1E0F  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16065  1E10  0021               	movlb	1	; select bank1
 16066  1E11  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 16067  1E12  0008               	return
 16068  1E13                     __end_of_setDimmerIntr_MaxmumValue:	
 16069                           
 16070                           	psect	text108
 16071  10B5                     __ptext108:	
 16072 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16073 ;; Defined at:
 16074 ;;		line 162 in file "../src/Dimmer_B1.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;  lights          1    wreg     unsigned char 
 16077 ;;  command         1    2[COMMON] unsigned char 
 16078 ;; Auto vars:     Size  Location     Type
 16079 ;;  lights          1    4[COMMON] unsigned char 
 16080 ;; Return value:  Size  Location     Type
 16081 ;;		None               void
 16082 ;; Registers used:
 16083 ;;		wreg, status,2, status,0
 16084 ;; Tracked objects:
 16085 ;;		On entry : 0/0
 16086 ;;		On exit  : 0/0
 16087 ;;		Unchanged: 0/0
 16088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;Total ram usage:        3 bytes
 16094 ;; Hardware stack levels used:    1
 16095 ;; Hardware stack levels required when called:    3
 16096 ;; This function calls:
 16097 ;;		Nothing
 16098 ;; This function is called by:
 16099 ;;		_setDimmerLights_Dimming
 16100 ;; This function uses a non-reentrant model
 16101 ;;
 16102                           
 16103                           
 16104                           ;psect for function _setDimmerIntr_Dimming_Sw
 16105  10B5                     _setDimmerIntr_Dimming_Sw:	
 16106                           
 16107                           ;incstack = 0
 16108                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16109                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16110  10B5  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16111                           
 16112                           ;Dimmer_B1.c: 164: if (lights == 1) {
 16113  10B6  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16114  10B7  3A01               	xorlw	1
 16115  10B8  1D03               	skipz
 16116  10B9  28C8               	goto	l7044
 16117                           
 16118                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16119  10BA  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16120  10BB  3A01               	xorlw	1
 16121  10BC  3000               	movlw	0
 16122  10BD  1903               	skipnz
 16123  10BE  3001               	movlw	1
 16124  10BF  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16125  10C0  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16126  10C1  0021               	movlb	1	; select bank1
 16127  10C2  0862               	movf	_DimmerIntr1^(0+128),w
 16128  10C3  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16129  10C4  39EF               	andlw	-17
 16130  10C5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16131  10C6  00E2               	movwf	_DimmerIntr1^(0+128)
 16132                           
 16133                           ;Dimmer_B1.c: 166: }
 16134  10C7  0008               	return
 16135  10C8                     l7044:	
 16136                           
 16137                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16138  10C8  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16139  10C9  3A02               	xorlw	2
 16140  10CA  1D03               	skipz
 16141  10CB  0008               	return
 16142                           
 16143                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16144  10CC  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16145  10CD  3A01               	xorlw	1
 16146  10CE  3000               	movlw	0
 16147  10CF  1903               	skipnz
 16148  10D0  3001               	movlw	1
 16149  10D1  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16150  10D2  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16151  10D3  0021               	movlb	1	; select bank1
 16152  10D4  0869               	movf	_DimmerIntr2^(0+128),w
 16153  10D5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16154  10D6  39EF               	andlw	-17
 16155  10D7  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16156  10D8  00E9               	movwf	_DimmerIntr2^(0+128)
 16157  10D9  0008               	return
 16158  10DA                     __end_of_setDimmerIntr_Dimming_Sw:	
 16159                           
 16160                           	psect	text109
 16161  08A3                     __ptext109:	
 16162 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16163 ;; Defined at:
 16164 ;;		line 1042 in file "../src/Dimmer_B1.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;  value           1    wreg     unsigned char 
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;  value           1   54[BANK0 ] unsigned char 
 16169 ;;  i               3   55[BANK0 ] float 
 16170 ;; Return value:  Size  Location     Type
 16171 ;;                  1    wreg      unsigned char 
 16172 ;; Registers used:
 16173 ;;		wreg, status,2, status,0, pclath, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;Total ram usage:        6 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    5
 16186 ;; This function calls:
 16187 ;;		___awtoft
 16188 ;;		___ftadd
 16189 ;;		___ftdiv
 16190 ;;		___ftneg
 16191 ;;		___fttol
 16192 ;; This function is called by:
 16193 ;;		_setDimmerLights_OnOff
 16194 ;;		_setDimmerLights_Dimming
 16195 ;;		_Flash_Memory_Initialization
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           
 16200                           ;psect for function _getDimmerLights_ValueToPercent
 16201  08A3                     _getDimmerLights_ValueToPercent:	
 16202                           
 16203                           ;incstack = 0
 16204                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16205                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16206  08A3  0020               	movlb	0	; select bank0
 16207  08A4  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16208                           
 16209                           ;Dimmer_B1.c: 1050: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 16210  08A5  3000               	movlw	0
 16211  08A6  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16212  08A7  3010               	movlw	16
 16213  08A8  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16214  08A9  3042               	movlw	66
 16215  08AA  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16216                           
 16217                           ;Dimmer_B1.c: 1051: i /= 100;
 16218  08AB  3000               	movlw	0
 16219  08AC  00A6               	movwf	___ftdiv@f2
 16220  08AD  30C8               	movlw	200
 16221  08AE  00A7               	movwf	___ftdiv@f2+1
 16222  08AF  3042               	movlw	66
 16223  08B0  00A8               	movwf	___ftdiv@f2+2
 16224  08B1  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16225  08B2  00A9               	movwf	___ftdiv@f1
 16226  08B3  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16227  08B4  00AA               	movwf	___ftdiv@f1+1
 16228  08B5  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16229  08B6  00AB               	movwf	___ftdiv@f1+2
 16230  08B7  318D  253B  3188   	fcall	___ftdiv
 16231  08BA  0020               	movlb	0	; select bank0
 16232  08BB  0826               	movf	?___ftdiv,w
 16233  08BC  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16234  08BD  0827               	movf	?___ftdiv+1,w
 16235  08BE  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16236  08BF  0828               	movf	?___ftdiv+2,w
 16237  08C0  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16238                           
 16239                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 16240  08C1  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16241  08C2  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16242  08C3  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16243  08C4  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16244  08C5  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16245  08C6  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16246  08C7  1903               	skipnz
 16247  08C8  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16248  08C9  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16249  08CA  3E34               	addlw	52
 16250  08CB  00A0               	movwf	___awtoft@c
 16251  08CC  3000               	movlw	0
 16252  08CD  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16253  08CE  00A1               	movwf	___awtoft@c+1
 16254  08CF  319F  27DE  3188   	fcall	___awtoft
 16255  08D2  0020               	movlb	0	; select bank0
 16256  08D3  0820               	movf	?___awtoft,w
 16257  08D4  00A9               	movwf	___ftdiv@f1
 16258  08D5  0821               	movf	?___awtoft+1,w
 16259  08D6  00AA               	movwf	___ftdiv@f1+1
 16260  08D7  0822               	movf	?___awtoft+2,w
 16261  08D8  00AB               	movwf	___ftdiv@f1+2
 16262  08D9  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16263  08DA  00A6               	movwf	___ftdiv@f2
 16264  08DB  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16265  08DC  00A7               	movwf	___ftdiv@f2+1
 16266  08DD  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16267  08DE  00A8               	movwf	___ftdiv@f2+2
 16268  08DF  318D  253B  3188   	fcall	___ftdiv
 16269  08E2  0020               	movlb	0	; select bank0
 16270  08E3  0826               	movf	?___ftdiv,w
 16271  08E4  00B6               	movwf	___ftneg@f1
 16272  08E5  0827               	movf	?___ftdiv+1,w
 16273  08E6  00B7               	movwf	___ftneg@f1+1
 16274  08E7  0828               	movf	?___ftdiv+2,w
 16275  08E8  00B8               	movwf	___ftneg@f1+2
 16276  08E9  319B  2323  3188   	fcall	___ftneg
 16277  08EC  0020               	movlb	0	; select bank0
 16278  08ED  0836               	movf	?___ftneg,w
 16279  08EE  00BC               	movwf	___ftadd@f2
 16280  08EF  0837               	movf	?___ftneg+1,w
 16281  08F0  00BD               	movwf	___ftadd@f2+1
 16282  08F1  0838               	movf	?___ftneg+2,w
 16283  08F2  00BE               	movwf	___ftadd@f2+2
 16284  08F3  3000               	movlw	0
 16285  08F4  00B9               	movwf	___ftadd@f1
 16286  08F5  30C8               	movlw	200
 16287  08F6  00BA               	movwf	___ftadd@f1+1
 16288  08F7  3042               	movlw	66
 16289  08F8  00BB               	movwf	___ftadd@f1+2
 16290  08F9  3183  235A  3188   	fcall	___ftadd
 16291  08FC  0020               	movlb	0	; select bank0
 16292  08FD  0839               	movf	?___ftadd,w
 16293  08FE  00C6               	movwf	___fttol@f1
 16294  08FF  083A               	movf	?___ftadd+1,w
 16295  0900  00C7               	movwf	___fttol@f1+1
 16296  0901  083B               	movf	?___ftadd+2,w
 16297  0902  00C8               	movwf	___fttol@f1+2
 16298  0903  318B  239B         	fcall	___fttol
 16299  0905  0020               	movlb	0	; select bank0
 16300  0906  0846               	movf	?___fttol,w
 16301  0907  0008               	return
 16302  0908                     __end_of_getDimmerLights_ValueToPercent:	
 16303                           
 16304                           	psect	text110
 16305  0B9B                     __ptext110:	
 16306 ;; *************** function ___fttol *****************
 16307 ;; Defined at:
 16308 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;  f1              3   38[BANK0 ] float 
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;  lval            4   47[BANK0 ] unsigned long 
 16313 ;;  exp1            1   51[BANK0 ] unsigned char 
 16314 ;;  sign1           1   46[BANK0 ] unsigned char 
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  4   38[BANK0 ] long 
 16317 ;; Registers used:
 16318 ;;		wreg, status,2, status,0
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;Total ram usage:       14 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:    3
 16331 ;; This function calls:
 16332 ;;		Nothing
 16333 ;; This function is called by:
 16334 ;;		_getDimmerLights_PercentToValue
 16335 ;;		_getDimmerLights_ValueToPercent
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           
 16340                           ;psect for function ___fttol
 16341  0B9B                     ___fttol:	
 16342                           
 16343                           ;incstack = 0
 16344                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16345  0B9B  0020               	movlb	0	; select bank0
 16346  0B9C  0846               	movf	___fttol@f1,w
 16347  0B9D  00CA               	movwf	??___fttol
 16348  0B9E  0847               	movf	___fttol@f1+1,w
 16349  0B9F  00CB               	movwf	??___fttol+1
 16350  0BA0  0848               	movf	___fttol@f1+2,w
 16351  0BA1  00CC               	movwf	??___fttol+2
 16352  0BA2  1003               	clrc
 16353  0BA3  0D4B               	rlf	??___fttol+1,w
 16354  0BA4  0D4C               	rlf	??___fttol+2,w
 16355  0BA5  00CD               	movwf	??___fttol+3
 16356  0BA6  084D               	movf	??___fttol+3,w
 16357  0BA7  00D3               	movwf	___fttol@exp1
 16358  0BA8  08D3               	movf	___fttol@exp1,f
 16359  0BA9  1D03               	skipz
 16360  0BAA  2BB4               	goto	l6522
 16361  0BAB  3000               	movlw	0
 16362  0BAC  00C9               	movwf	?___fttol+3
 16363  0BAD  3000               	movlw	0
 16364  0BAE  00C8               	movwf	?___fttol+2
 16365  0BAF  3000               	movlw	0
 16366  0BB0  00C7               	movwf	?___fttol+1
 16367  0BB1  3000               	movlw	0
 16368  0BB2  00C6               	movwf	?___fttol
 16369  0BB3  0008               	return
 16370  0BB4                     l6522:	
 16371  0BB4  0846               	movf	___fttol@f1,w
 16372  0BB5  00CA               	movwf	??___fttol
 16373  0BB6  0847               	movf	___fttol@f1+1,w
 16374  0BB7  00CB               	movwf	??___fttol+1
 16375  0BB8  0848               	movf	___fttol@f1+2,w
 16376  0BB9  00CC               	movwf	??___fttol+2
 16377  0BBA  3017               	movlw	23
 16378  0BBB                     u5785:	
 16379  0BBB  36CC               	lsrf	??___fttol+2,f
 16380  0BBC  0CCB               	rrf	??___fttol+1,f
 16381  0BBD  0CCA               	rrf	??___fttol,f
 16382  0BBE  0B89               	decfsz	9,f
 16383  0BBF  2BBB               	goto	u5785
 16384  0BC0  084A               	movf	??___fttol,w
 16385  0BC1  00CD               	movwf	??___fttol+3
 16386  0BC2  084D               	movf	??___fttol+3,w
 16387  0BC3  00CE               	movwf	___fttol@sign1
 16388  0BC4  17C7               	bsf	___fttol@f1+1,7
 16389  0BC5  30FF               	movlw	255
 16390  0BC6  05C6               	andwf	___fttol@f1,f
 16391  0BC7  30FF               	movlw	255
 16392  0BC8  05C7               	andwf	___fttol@f1+1,f
 16393  0BC9  3000               	movlw	0
 16394  0BCA  05C8               	andwf	___fttol@f1+2,f
 16395  0BCB  0846               	movf	___fttol@f1,w
 16396  0BCC  00CF               	movwf	___fttol@lval
 16397  0BCD  0847               	movf	___fttol@f1+1,w
 16398  0BCE  00D0               	movwf	___fttol@lval+1
 16399  0BCF  0848               	movf	___fttol@f1+2,w
 16400  0BD0  00D1               	movwf	___fttol@lval+2
 16401  0BD1  01D2               	clrf	___fttol@lval+3
 16402  0BD2  308E               	movlw	142
 16403  0BD3  02D3               	subwf	___fttol@exp1,f
 16404  0BD4  1FD3               	btfss	___fttol@exp1,7
 16405  0BD5  2BF2               	goto	l6542
 16406  0BD6  0853               	movf	___fttol@exp1,w
 16407  0BD7  3A80               	xorlw	128
 16408  0BD8  3E8F               	addlw	143
 16409  0BD9  1803               	skipnc
 16410  0BDA  2BE4               	goto	l6540
 16411  0BDB  3000               	movlw	0
 16412  0BDC  00C9               	movwf	?___fttol+3
 16413  0BDD  3000               	movlw	0
 16414  0BDE  00C8               	movwf	?___fttol+2
 16415  0BDF  3000               	movlw	0
 16416  0BE0  00C7               	movwf	?___fttol+1
 16417  0BE1  3000               	movlw	0
 16418  0BE2  00C6               	movwf	?___fttol
 16419  0BE3  0008               	return
 16420  0BE4                     l6540:	
 16421  0BE4  3001               	movlw	1
 16422  0BE5                     u5815:	
 16423  0BE5  36D2               	lsrf	___fttol@lval+3,f
 16424  0BE6  0CD1               	rrf	___fttol@lval+2,f
 16425  0BE7  0CD0               	rrf	___fttol@lval+1,f
 16426  0BE8  0CCF               	rrf	___fttol@lval,f
 16427  0BE9  0B89               	decfsz	9,f
 16428  0BEA  2BE5               	goto	u5815
 16429  0BEB  3001               	movlw	1
 16430  0BEC  00CA               	movwf	??___fttol
 16431  0BED  084A               	movf	??___fttol,w
 16432  0BEE  07D3               	addwf	___fttol@exp1,f
 16433  0BEF  1903               	btfsc	3,2
 16434  0BF0  2C0B               	goto	l6552
 16435  0BF1  2BE4               	goto	l6540
 16436  0BF2                     l6542:	
 16437  0BF2  3018               	movlw	24
 16438  0BF3  0253               	subwf	___fttol@exp1,w
 16439  0BF4  1C03               	skipc
 16440  0BF5  2C08               	goto	l6550
 16441  0BF6  3000               	movlw	0
 16442  0BF7  00C9               	movwf	?___fttol+3
 16443  0BF8  3000               	movlw	0
 16444  0BF9  00C8               	movwf	?___fttol+2
 16445  0BFA  3000               	movlw	0
 16446  0BFB  00C7               	movwf	?___fttol+1
 16447  0BFC  3000               	movlw	0
 16448  0BFD  00C6               	movwf	?___fttol
 16449  0BFE  0008               	return
 16450  0BFF                     l6548:	
 16451  0BFF  3001               	movlw	1
 16452  0C00                     u5845:	
 16453  0C00  35CF               	lslf	___fttol@lval,f
 16454  0C01  0DD0               	rlf	___fttol@lval+1,f
 16455  0C02  0DD1               	rlf	___fttol@lval+2,f
 16456  0C03  0DD2               	rlf	___fttol@lval+3,f
 16457  0C04  0B89               	decfsz	9,f
 16458  0C05  2C00               	goto	u5845
 16459  0C06  3001               	movlw	1
 16460  0C07  02D3               	subwf	___fttol@exp1,f
 16461  0C08                     l6550:	
 16462  0C08  08D3               	movf	___fttol@exp1,f
 16463  0C09  1D03               	skipz
 16464  0C0A  2BFF               	goto	l6548
 16465  0C0B                     l6552:	
 16466  0C0B  084E               	movf	___fttol@sign1,w
 16467  0C0C  1903               	btfsc	3,2
 16468  0C0D  2C19               	goto	l6556
 16469  0C0E  09CF               	comf	___fttol@lval,f
 16470  0C0F  09D0               	comf	___fttol@lval+1,f
 16471  0C10  09D1               	comf	___fttol@lval+2,f
 16472  0C11  09D2               	comf	___fttol@lval+3,f
 16473  0C12  0ACF               	incf	___fttol@lval,f
 16474  0C13  1903               	skipnz
 16475  0C14  0AD0               	incf	___fttol@lval+1,f
 16476  0C15  1903               	skipnz
 16477  0C16  0AD1               	incf	___fttol@lval+2,f
 16478  0C17  1903               	skipnz
 16479  0C18  0AD2               	incf	___fttol@lval+3,f
 16480  0C19                     l6556:	
 16481  0C19  0852               	movf	___fttol@lval+3,w
 16482  0C1A  00C9               	movwf	?___fttol+3
 16483  0C1B  0851               	movf	___fttol@lval+2,w
 16484  0C1C  00C8               	movwf	?___fttol+2
 16485  0C1D  0850               	movf	___fttol@lval+1,w
 16486  0C1E  00C7               	movwf	?___fttol+1
 16487  0C1F  084F               	movf	___fttol@lval,w
 16488  0C20  00C6               	movwf	?___fttol
 16489  0C21  0008               	return
 16490  0C22                     __end_of___fttol:	
 16491                           
 16492                           	psect	text111
 16493  1B23                     __ptext111:	
 16494 ;; *************** function ___ftneg *****************
 16495 ;; Defined at:
 16496 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16497 ;; Parameters:    Size  Location     Type
 16498 ;;  f1              3   22[BANK0 ] float 
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;		None
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  3   22[BANK0 ] float 
 16503 ;; Registers used:
 16504 ;;		wreg
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16510 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;Total ram usage:        3 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:    3
 16517 ;; This function calls:
 16518 ;;		Nothing
 16519 ;; This function is called by:
 16520 ;;		_getDimmerLights_PercentToValue
 16521 ;;		_getDimmerLights_ValueToPercent
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           
 16526                           ;psect for function ___ftneg
 16527  1B23                     ___ftneg:	
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in ___ftneg: [wreg]
 16531  1B23  0020               	movlb	0	; select bank0
 16532  1B24  0838               	movf	___ftneg@f1+2,w
 16533  1B25  0437               	iorwf	___ftneg@f1+1,w
 16534  1B26  0436               	iorwf	___ftneg@f1,w
 16535  1B27  1903               	skipnz
 16536  1B28  0008               	return
 16537  1B29  3080               	movlw	128
 16538  1B2A  06B8               	xorwf	___ftneg@f1+2,f
 16539  1B2B  0008               	return
 16540  1B2C                     __end_of___ftneg:	
 16541                           
 16542                           	psect	text112
 16543  0D3B                     __ptext112:	
 16544 ;; *************** function ___ftdiv *****************
 16545 ;; Defined at:
 16546 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;  f2              3    6[BANK0 ] float 
 16549 ;;  f1              3    9[BANK0 ] float 
 16550 ;; Auto vars:     Size  Location     Type
 16551 ;;  f3              3   17[BANK0 ] float 
 16552 ;;  sign            1   21[BANK0 ] unsigned char 
 16553 ;;  exp             1   20[BANK0 ] unsigned char 
 16554 ;;  cntr            1   16[BANK0 ] unsigned char 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;                  3    6[BANK0 ] float 
 16557 ;; Registers used:
 16558 ;;		wreg, status,2, status,0, pclath, cstack
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/0
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16564 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16565 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;Total ram usage:       16 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; Hardware stack levels required when called:    4
 16571 ;; This function calls:
 16572 ;;		___ftpack
 16573 ;; This function is called by:
 16574 ;;		_getDimmerLights_PercentToValue
 16575 ;;		_getDimmerLights_ValueToPercent
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           
 16580                           ;psect for function ___ftdiv
 16581  0D3B                     ___ftdiv:	
 16582                           
 16583                           ;incstack = 0
 16584                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16585  0D3B  0020               	movlb	0	; select bank0
 16586  0D3C  0829               	movf	___ftdiv@f1,w
 16587  0D3D  00AC               	movwf	??___ftdiv
 16588  0D3E  082A               	movf	___ftdiv@f1+1,w
 16589  0D3F  00AD               	movwf	??___ftdiv+1
 16590  0D40  082B               	movf	___ftdiv@f1+2,w
 16591  0D41  00AE               	movwf	??___ftdiv+2
 16592  0D42  1003               	clrc
 16593  0D43  0D2D               	rlf	??___ftdiv+1,w
 16594  0D44  0D2E               	rlf	??___ftdiv+2,w
 16595  0D45  00AF               	movwf	??___ftdiv+3
 16596  0D46  082F               	movf	??___ftdiv+3,w
 16597  0D47  00B4               	movwf	___ftdiv@exp
 16598  0D48  08B4               	movf	___ftdiv@exp,f
 16599  0D49  1D03               	skipz
 16600  0D4A  2D52               	goto	l6422
 16601  0D4B  3000               	movlw	0
 16602  0D4C  00A6               	movwf	?___ftdiv
 16603  0D4D  3000               	movlw	0
 16604  0D4E  00A7               	movwf	?___ftdiv+1
 16605  0D4F  3000               	movlw	0
 16606  0D50  00A8               	movwf	?___ftdiv+2
 16607  0D51  0008               	return
 16608  0D52                     l6422:	
 16609  0D52  0826               	movf	___ftdiv@f2,w
 16610  0D53  00AC               	movwf	??___ftdiv
 16611  0D54  0827               	movf	___ftdiv@f2+1,w
 16612  0D55  00AD               	movwf	??___ftdiv+1
 16613  0D56  0828               	movf	___ftdiv@f2+2,w
 16614  0D57  00AE               	movwf	??___ftdiv+2
 16615  0D58  1003               	clrc
 16616  0D59  0D2D               	rlf	??___ftdiv+1,w
 16617  0D5A  0D2E               	rlf	??___ftdiv+2,w
 16618  0D5B  00AF               	movwf	??___ftdiv+3
 16619  0D5C  082F               	movf	??___ftdiv+3,w
 16620  0D5D  00B5               	movwf	___ftdiv@sign
 16621  0D5E  08B5               	movf	___ftdiv@sign,f
 16622  0D5F  1D03               	skipz
 16623  0D60  2D68               	goto	l6428
 16624  0D61  3000               	movlw	0
 16625  0D62  00A6               	movwf	?___ftdiv
 16626  0D63  3000               	movlw	0
 16627  0D64  00A7               	movwf	?___ftdiv+1
 16628  0D65  3000               	movlw	0
 16629  0D66  00A8               	movwf	?___ftdiv+2
 16630  0D67  0008               	return
 16631  0D68                     l6428:	
 16632  0D68  3000               	movlw	0
 16633  0D69  00B1               	movwf	___ftdiv@f3
 16634  0D6A  3000               	movlw	0
 16635  0D6B  00B2               	movwf	___ftdiv@f3+1
 16636  0D6C  3000               	movlw	0
 16637  0D6D  00B3               	movwf	___ftdiv@f3+2
 16638  0D6E  3089               	movlw	137
 16639  0D6F  0735               	addwf	___ftdiv@sign,w
 16640  0D70  00AC               	movwf	??___ftdiv
 16641  0D71  082C               	movf	??___ftdiv,w
 16642  0D72  02B4               	subwf	___ftdiv@exp,f
 16643  0D73  0829               	movf	___ftdiv@f1,w
 16644  0D74  00AC               	movwf	??___ftdiv
 16645  0D75  082A               	movf	___ftdiv@f1+1,w
 16646  0D76  00AD               	movwf	??___ftdiv+1
 16647  0D77  082B               	movf	___ftdiv@f1+2,w
 16648  0D78  00AE               	movwf	??___ftdiv+2
 16649  0D79  3010               	movlw	16
 16650  0D7A                     u5585:	
 16651  0D7A  36AE               	lsrf	??___ftdiv+2,f
 16652  0D7B  0CAD               	rrf	??___ftdiv+1,f
 16653  0D7C  0CAC               	rrf	??___ftdiv,f
 16654  0D7D  0B89               	decfsz	9,f
 16655  0D7E  2D7A               	goto	u5585
 16656  0D7F  082C               	movf	??___ftdiv,w
 16657  0D80  00AF               	movwf	??___ftdiv+3
 16658  0D81  082F               	movf	??___ftdiv+3,w
 16659  0D82  00B5               	movwf	___ftdiv@sign
 16660  0D83  0826               	movf	___ftdiv@f2,w
 16661  0D84  00AC               	movwf	??___ftdiv
 16662  0D85  0827               	movf	___ftdiv@f2+1,w
 16663  0D86  00AD               	movwf	??___ftdiv+1
 16664  0D87  0828               	movf	___ftdiv@f2+2,w
 16665  0D88  00AE               	movwf	??___ftdiv+2
 16666  0D89  3010               	movlw	16
 16667  0D8A                     u5595:	
 16668  0D8A  36AE               	lsrf	??___ftdiv+2,f
 16669  0D8B  0CAD               	rrf	??___ftdiv+1,f
 16670  0D8C  0CAC               	rrf	??___ftdiv,f
 16671  0D8D  0B89               	decfsz	9,f
 16672  0D8E  2D8A               	goto	u5595
 16673  0D8F  082C               	movf	??___ftdiv,w
 16674  0D90  00AF               	movwf	??___ftdiv+3
 16675  0D91  082F               	movf	??___ftdiv+3,w
 16676  0D92  06B5               	xorwf	___ftdiv@sign,f
 16677  0D93  3080               	movlw	128
 16678  0D94  00AC               	movwf	??___ftdiv
 16679  0D95  082C               	movf	??___ftdiv,w
 16680  0D96  05B5               	andwf	___ftdiv@sign,f
 16681  0D97  17AA               	bsf	___ftdiv@f1+1,7
 16682  0D98  30FF               	movlw	255
 16683  0D99  05A9               	andwf	___ftdiv@f1,f
 16684  0D9A  30FF               	movlw	255
 16685  0D9B  05AA               	andwf	___ftdiv@f1+1,f
 16686  0D9C  3000               	movlw	0
 16687  0D9D  05AB               	andwf	___ftdiv@f1+2,f
 16688  0D9E  17A7               	bsf	___ftdiv@f2+1,7
 16689  0D9F  30FF               	movlw	255
 16690  0DA0  05A6               	andwf	___ftdiv@f2,f
 16691  0DA1  30FF               	movlw	255
 16692  0DA2  05A7               	andwf	___ftdiv@f2+1,f
 16693  0DA3  3000               	movlw	0
 16694  0DA4  05A8               	andwf	___ftdiv@f2+2,f
 16695  0DA5  3018               	movlw	24
 16696  0DA6  00AC               	movwf	??___ftdiv
 16697  0DA7  082C               	movf	??___ftdiv,w
 16698  0DA8  00B0               	movwf	___ftdiv@cntr
 16699  0DA9                     l6442:	
 16700  0DA9  3001               	movlw	1
 16701  0DAA                     u5605:	
 16702  0DAA  35B1               	lslf	___ftdiv@f3,f
 16703  0DAB  0DB2               	rlf	___ftdiv@f3+1,f
 16704  0DAC  0DB3               	rlf	___ftdiv@f3+2,f
 16705  0DAD  0B89               	decfsz	9,f
 16706  0DAE  2DAA               	goto	u5605
 16707  0DAF  0828               	movf	___ftdiv@f2+2,w
 16708  0DB0  022B               	subwf	___ftdiv@f1+2,w
 16709  0DB1  1D03               	skipz
 16710  0DB2  2DB9               	goto	u5615
 16711  0DB3  0827               	movf	___ftdiv@f2+1,w
 16712  0DB4  022A               	subwf	___ftdiv@f1+1,w
 16713  0DB5  1D03               	skipz
 16714  0DB6  2DB9               	goto	u5615
 16715  0DB7  0826               	movf	___ftdiv@f2,w
 16716  0DB8  0229               	subwf	___ftdiv@f1,w
 16717  0DB9                     u5615:	
 16718  0DB9  1C03               	skipc
 16719  0DBA  2DC2               	goto	l6450
 16720  0DBB  0826               	movf	___ftdiv@f2,w
 16721  0DBC  02A9               	subwf	___ftdiv@f1,f
 16722  0DBD  0827               	movf	___ftdiv@f2+1,w
 16723  0DBE  3BAA               	subwfb	___ftdiv@f1+1,f
 16724  0DBF  0828               	movf	___ftdiv@f2+2,w
 16725  0DC0  3BAB               	subwfb	___ftdiv@f1+2,f
 16726  0DC1  1431               	bsf	___ftdiv@f3,0
 16727  0DC2                     l6450:	
 16728  0DC2  3001               	movlw	1
 16729  0DC3                     u5625:	
 16730  0DC3  35A9               	lslf	___ftdiv@f1,f
 16731  0DC4  0DAA               	rlf	___ftdiv@f1+1,f
 16732  0DC5  0DAB               	rlf	___ftdiv@f1+2,f
 16733  0DC6  0B89               	decfsz	9,f
 16734  0DC7  2DC3               	goto	u5625
 16735  0DC8  3001               	movlw	1
 16736  0DC9  02B0               	subwf	___ftdiv@cntr,f
 16737  0DCA  1D03               	btfss	3,2
 16738  0DCB  2DA9               	goto	l6442
 16739  0DCC  0831               	movf	___ftdiv@f3,w
 16740  0DCD  00F2               	movwf	___ftpack@arg
 16741  0DCE  0832               	movf	___ftdiv@f3+1,w
 16742  0DCF  00F3               	movwf	___ftpack@arg+1
 16743  0DD0  0833               	movf	___ftdiv@f3+2,w
 16744  0DD1  00F4               	movwf	___ftpack@arg+2
 16745  0DD2  0834               	movf	___ftdiv@exp,w
 16746  0DD3  00AC               	movwf	??___ftdiv
 16747  0DD4  082C               	movf	??___ftdiv,w
 16748  0DD5  00F5               	movwf	___ftpack@exp
 16749  0DD6  0835               	movf	___ftdiv@sign,w
 16750  0DD7  00AD               	movwf	??___ftdiv+1
 16751  0DD8  082D               	movf	??___ftdiv+1,w
 16752  0DD9  00F6               	movwf	___ftpack@sign
 16753  0DDA  3197  27A0         	fcall	___ftpack
 16754  0DDC  0872               	movf	?___ftpack,w
 16755  0DDD  0020               	movlb	0	; select bank0
 16756  0DDE  00A6               	movwf	?___ftdiv
 16757  0DDF  0873               	movf	?___ftpack+1,w
 16758  0DE0  00A7               	movwf	?___ftdiv+1
 16759  0DE1  0874               	movf	?___ftpack+2,w
 16760  0DE2  00A8               	movwf	?___ftdiv+2
 16761  0DE3  0008               	return
 16762  0DE4                     __end_of___ftdiv:	
 16763                           
 16764                           	psect	text113
 16765  035A                     __ptext113:	
 16766 ;; *************** function ___ftadd *****************
 16767 ;; Defined at:
 16768 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16769 ;; Parameters:    Size  Location     Type
 16770 ;;  f1              3   25[BANK0 ] float 
 16771 ;;  f2              3   28[BANK0 ] float 
 16772 ;; Auto vars:     Size  Location     Type
 16773 ;;  exp1            1   37[BANK0 ] unsigned char 
 16774 ;;  exp2            1   36[BANK0 ] unsigned char 
 16775 ;;  sign            1   35[BANK0 ] unsigned char 
 16776 ;; Return value:  Size  Location     Type
 16777 ;;                  3   25[BANK0 ] float 
 16778 ;; Registers used:
 16779 ;;		wreg, status,2, status,0, pclath, cstack
 16780 ;; Tracked objects:
 16781 ;;		On entry : 0/0
 16782 ;;		On exit  : 0/0
 16783 ;;		Unchanged: 0/0
 16784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16785 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;Total ram usage:       13 bytes
 16790 ;; Hardware stack levels used:    1
 16791 ;; Hardware stack levels required when called:    4
 16792 ;; This function calls:
 16793 ;;		___ftpack
 16794 ;; This function is called by:
 16795 ;;		_getDimmerLights_PercentToValue
 16796 ;;		_getDimmerLights_ValueToPercent
 16797 ;; This function uses a non-reentrant model
 16798 ;;
 16799                           
 16800                           
 16801                           ;psect for function ___ftadd
 16802  035A                     ___ftadd:	
 16803                           
 16804                           ;incstack = 0
 16805                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16806  035A  0020               	movlb	0	; select bank0
 16807  035B  0839               	movf	___ftadd@f1,w
 16808  035C  00BF               	movwf	??___ftadd
 16809  035D  083A               	movf	___ftadd@f1+1,w
 16810  035E  00C0               	movwf	??___ftadd+1
 16811  035F  083B               	movf	___ftadd@f1+2,w
 16812  0360  00C1               	movwf	??___ftadd+2
 16813  0361  1003               	clrc
 16814  0362  0D40               	rlf	??___ftadd+1,w
 16815  0363  0D41               	rlf	??___ftadd+2,w
 16816  0364  00C2               	movwf	??___ftadd+3
 16817  0365  0842               	movf	??___ftadd+3,w
 16818  0366  00C5               	movwf	___ftadd@exp1
 16819  0367  083C               	movf	___ftadd@f2,w
 16820  0368  00BF               	movwf	??___ftadd
 16821  0369  083D               	movf	___ftadd@f2+1,w
 16822  036A  00C0               	movwf	??___ftadd+1
 16823  036B  083E               	movf	___ftadd@f2+2,w
 16824  036C  00C1               	movwf	??___ftadd+2
 16825  036D  1003               	clrc
 16826  036E  0D40               	rlf	??___ftadd+1,w
 16827  036F  0D41               	rlf	??___ftadd+2,w
 16828  0370  00C2               	movwf	??___ftadd+3
 16829  0371  0842               	movf	??___ftadd+3,w
 16830  0372  00C4               	movwf	___ftadd@exp2
 16831  0373  0845               	movf	___ftadd@exp1,w
 16832  0374  1903               	btfsc	3,2
 16833  0375  2B82               	goto	l6352
 16834  0376  0844               	movf	___ftadd@exp2,w
 16835  0377  0245               	subwf	___ftadd@exp1,w
 16836  0378  1803               	skipnc
 16837  0379  2B89               	goto	l6356
 16838  037A  0345               	decf	___ftadd@exp1,w
 16839  037B  3AFF               	xorlw	255
 16840  037C  0744               	addwf	___ftadd@exp2,w
 16841  037D  00BF               	movwf	??___ftadd
 16842  037E  3019               	movlw	25
 16843  037F  023F               	subwf	??___ftadd,w
 16844  0380  1C03               	skipc
 16845  0381  2B89               	goto	l6356
 16846  0382                     l6352:	
 16847  0382  083C               	movf	___ftadd@f2,w
 16848  0383  00B9               	movwf	?___ftadd
 16849  0384  083D               	movf	___ftadd@f2+1,w
 16850  0385  00BA               	movwf	?___ftadd+1
 16851  0386  083E               	movf	___ftadd@f2+2,w
 16852  0387  00BB               	movwf	?___ftadd+2
 16853  0388  0008               	return
 16854  0389                     l6356:	
 16855  0389  0844               	movf	___ftadd@exp2,w
 16856  038A  1903               	btfsc	3,2
 16857  038B  0008               	return
 16858  038C  0845               	movf	___ftadd@exp1,w
 16859  038D  0244               	subwf	___ftadd@exp2,w
 16860  038E  1803               	skipnc
 16861  038F  2B98               	goto	l6362
 16862  0390  0344               	decf	___ftadd@exp2,w
 16863  0391  3AFF               	xorlw	255
 16864  0392  0745               	addwf	___ftadd@exp1,w
 16865  0393  00BF               	movwf	??___ftadd
 16866  0394  3019               	movlw	25
 16867  0395  023F               	subwf	??___ftadd,w
 16868  0396  1803               	btfsc	3,0
 16869  0397  0008               	return
 16870  0398                     l6362:	
 16871  0398  3006               	movlw	6
 16872  0399  00BF               	movwf	??___ftadd
 16873  039A  083F               	movf	??___ftadd,w
 16874  039B  00C3               	movwf	___ftadd@sign
 16875  039C  1BBB               	btfsc	___ftadd@f1+2,7
 16876  039D  17C3               	bsf	___ftadd@sign,7
 16877  039E  1BBE               	btfsc	___ftadd@f2+2,7
 16878  039F  1743               	bsf	___ftadd@sign,6
 16879  03A0  17BA               	bsf	___ftadd@f1+1,7
 16880  03A1  30FF               	movlw	255
 16881  03A2  05B9               	andwf	___ftadd@f1,f
 16882  03A3  30FF               	movlw	255
 16883  03A4  05BA               	andwf	___ftadd@f1+1,f
 16884  03A5  3000               	movlw	0
 16885  03A6  05BB               	andwf	___ftadd@f1+2,f
 16886  03A7  17BD               	bsf	___ftadd@f2+1,7
 16887  03A8  30FF               	movlw	255
 16888  03A9  05BC               	andwf	___ftadd@f2,f
 16889  03AA  30FF               	movlw	255
 16890  03AB  05BD               	andwf	___ftadd@f2+1,f
 16891  03AC  3000               	movlw	0
 16892  03AD  05BE               	andwf	___ftadd@f2+2,f
 16893  03AE  0844               	movf	___ftadd@exp2,w
 16894  03AF  0245               	subwf	___ftadd@exp1,w
 16895  03B0  1803               	skipnc
 16896  03B1  2BD4               	goto	l6384
 16897  03B2                     l6374:	
 16898  03B2  3001               	movlw	1
 16899  03B3                     u5425:	
 16900  03B3  35BC               	lslf	___ftadd@f2,f
 16901  03B4  0DBD               	rlf	___ftadd@f2+1,f
 16902  03B5  0DBE               	rlf	___ftadd@f2+2,f
 16903  03B6  0B89               	decfsz	9,f
 16904  03B7  2BB3               	goto	u5425
 16905  03B8  3001               	movlw	1
 16906  03B9  02C4               	subwf	___ftadd@exp2,f
 16907  03BA  0844               	movf	___ftadd@exp2,w
 16908  03BB  0645               	xorwf	___ftadd@exp1,w
 16909  03BC  1903               	skipnz
 16910  03BD  2BCF               	goto	l6382
 16911  03BE  3001               	movlw	1
 16912  03BF  02C3               	subwf	___ftadd@sign,f
 16913  03C0  0843               	movf	___ftadd@sign,w
 16914  03C1  3907               	andlw	7
 16915  03C2  1903               	btfsc	3,2
 16916  03C3  2BCF               	goto	l6382
 16917  03C4  2BB2               	goto	l6374
 16918  03C5                     l6380:	
 16919  03C5  3001               	movlw	1
 16920  03C6                     u5455:	
 16921  03C6  36BB               	lsrf	___ftadd@f1+2,f
 16922  03C7  0CBA               	rrf	___ftadd@f1+1,f
 16923  03C8  0CB9               	rrf	___ftadd@f1,f
 16924  03C9  0B89               	decfsz	9,f
 16925  03CA  2BC6               	goto	u5455
 16926  03CB  3001               	movlw	1
 16927  03CC  00BF               	movwf	??___ftadd
 16928  03CD  083F               	movf	??___ftadd,w
 16929  03CE  07C5               	addwf	___ftadd@exp1,f
 16930  03CF                     l6382:	
 16931  03CF  0845               	movf	___ftadd@exp1,w
 16932  03D0  0644               	xorwf	___ftadd@exp2,w
 16933  03D1  1903               	btfsc	3,2
 16934  03D2  2BF9               	goto	l3173
 16935  03D3  2BC5               	goto	l6380
 16936  03D4                     l6384:	
 16937  03D4  0845               	movf	___ftadd@exp1,w
 16938  03D5  0244               	subwf	___ftadd@exp2,w
 16939  03D6  1803               	skipnc
 16940  03D7  2BF9               	goto	l3173
 16941  03D8                     l6386:	
 16942  03D8  3001               	movlw	1
 16943  03D9                     u5485:	
 16944  03D9  35B9               	lslf	___ftadd@f1,f
 16945  03DA  0DBA               	rlf	___ftadd@f1+1,f
 16946  03DB  0DBB               	rlf	___ftadd@f1+2,f
 16947  03DC  0B89               	decfsz	9,f
 16948  03DD  2BD9               	goto	u5485
 16949  03DE  3001               	movlw	1
 16950  03DF  02C5               	subwf	___ftadd@exp1,f
 16951  03E0  0844               	movf	___ftadd@exp2,w
 16952  03E1  0645               	xorwf	___ftadd@exp1,w
 16953  03E2  1903               	skipnz
 16954  03E3  2BF5               	goto	l6394
 16955  03E4  3001               	movlw	1
 16956  03E5  02C3               	subwf	___ftadd@sign,f
 16957  03E6  0843               	movf	___ftadd@sign,w
 16958  03E7  3907               	andlw	7
 16959  03E8  1903               	btfsc	3,2
 16960  03E9  2BF5               	goto	l6394
 16961  03EA  2BD8               	goto	l6386
 16962  03EB                     l6392:	
 16963  03EB  3001               	movlw	1
 16964  03EC                     u5515:	
 16965  03EC  36BE               	lsrf	___ftadd@f2+2,f
 16966  03ED  0CBD               	rrf	___ftadd@f2+1,f
 16967  03EE  0CBC               	rrf	___ftadd@f2,f
 16968  03EF  0B89               	decfsz	9,f
 16969  03F0  2BEC               	goto	u5515
 16970  03F1  3001               	movlw	1
 16971  03F2  00BF               	movwf	??___ftadd
 16972  03F3  083F               	movf	??___ftadd,w
 16973  03F4  07C4               	addwf	___ftadd@exp2,f
 16974  03F5                     l6394:	
 16975  03F5  0845               	movf	___ftadd@exp1,w
 16976  03F6  0644               	xorwf	___ftadd@exp2,w
 16977  03F7  1D03               	skipz
 16978  03F8  2BEB               	goto	l6392
 16979  03F9                     l3173:	
 16980  03F9  1FC3               	btfss	___ftadd@sign,7
 16981  03FA  2C0B               	goto	l6398
 16982  03FB  30FF               	movlw	255
 16983  03FC  06B9               	xorwf	___ftadd@f1,f
 16984  03FD  30FF               	movlw	255
 16985  03FE  06BA               	xorwf	___ftadd@f1+1,f
 16986  03FF  30FF               	movlw	255
 16987  0400  06BB               	xorwf	___ftadd@f1+2,f
 16988  0401  3001               	movlw	1
 16989  0402  07B9               	addwf	___ftadd@f1,f
 16990  0403  3000               	movlw	0
 16991  0404  1803               	skipnc
 16992  0405  3001               	movlw	1
 16993  0406  07BA               	addwf	___ftadd@f1+1,f
 16994  0407  3000               	movlw	0
 16995  0408  1803               	skipnc
 16996  0409  3001               	movlw	1
 16997  040A  07BB               	addwf	___ftadd@f1+2,f
 16998  040B                     l6398:	
 16999  040B  1F43               	btfss	___ftadd@sign,6
 17000  040C  2C1D               	goto	l6402
 17001  040D  30FF               	movlw	255
 17002  040E  06BC               	xorwf	___ftadd@f2,f
 17003  040F  30FF               	movlw	255
 17004  0410  06BD               	xorwf	___ftadd@f2+1,f
 17005  0411  30FF               	movlw	255
 17006  0412  06BE               	xorwf	___ftadd@f2+2,f
 17007  0413  3001               	movlw	1
 17008  0414  07BC               	addwf	___ftadd@f2,f
 17009  0415  3000               	movlw	0
 17010  0416  1803               	skipnc
 17011  0417  3001               	movlw	1
 17012  0418  07BD               	addwf	___ftadd@f2+1,f
 17013  0419  3000               	movlw	0
 17014  041A  1803               	skipnc
 17015  041B  3001               	movlw	1
 17016  041C  07BE               	addwf	___ftadd@f2+2,f
 17017  041D                     l6402:	
 17018  041D  01C3               	clrf	___ftadd@sign
 17019  041E  0839               	movf	___ftadd@f1,w
 17020  041F  07BC               	addwf	___ftadd@f2,f
 17021  0420  083A               	movf	___ftadd@f1+1,w
 17022  0421  3DBD               	addwfc	___ftadd@f2+1,f
 17023  0422  083B               	movf	___ftadd@f1+2,w
 17024  0423  3DBE               	addwfc	___ftadd@f2+2,f
 17025  0424  1FBE               	btfss	___ftadd@f2+2,7
 17026  0425  2C38               	goto	l6412
 17027  0426  30FF               	movlw	255
 17028  0427  06BC               	xorwf	___ftadd@f2,f
 17029  0428  30FF               	movlw	255
 17030  0429  06BD               	xorwf	___ftadd@f2+1,f
 17031  042A  30FF               	movlw	255
 17032  042B  06BE               	xorwf	___ftadd@f2+2,f
 17033  042C  3001               	movlw	1
 17034  042D  07BC               	addwf	___ftadd@f2,f
 17035  042E  3000               	movlw	0
 17036  042F  1803               	skipnc
 17037  0430  3001               	movlw	1
 17038  0431  07BD               	addwf	___ftadd@f2+1,f
 17039  0432  3000               	movlw	0
 17040  0433  1803               	skipnc
 17041  0434  3001               	movlw	1
 17042  0435  07BE               	addwf	___ftadd@f2+2,f
 17043  0436  01C3               	clrf	___ftadd@sign
 17044  0437  0AC3               	incf	___ftadd@sign,f
 17045  0438                     l6412:	
 17046  0438  083C               	movf	___ftadd@f2,w
 17047  0439  00F2               	movwf	___ftpack@arg
 17048  043A  083D               	movf	___ftadd@f2+1,w
 17049  043B  00F3               	movwf	___ftpack@arg+1
 17050  043C  083E               	movf	___ftadd@f2+2,w
 17051  043D  00F4               	movwf	___ftpack@arg+2
 17052  043E  0845               	movf	___ftadd@exp1,w
 17053  043F  00BF               	movwf	??___ftadd
 17054  0440  083F               	movf	??___ftadd,w
 17055  0441  00F5               	movwf	___ftpack@exp
 17056  0442  0843               	movf	___ftadd@sign,w
 17057  0443  00C0               	movwf	??___ftadd+1
 17058  0444  0840               	movf	??___ftadd+1,w
 17059  0445  00F6               	movwf	___ftpack@sign
 17060  0446  3197  27A0         	fcall	___ftpack
 17061  0448  0872               	movf	?___ftpack,w
 17062  0449  0020               	movlb	0	; select bank0
 17063  044A  00B9               	movwf	?___ftadd
 17064  044B  0873               	movf	?___ftpack+1,w
 17065  044C  00BA               	movwf	?___ftadd+1
 17066  044D  0874               	movf	?___ftpack+2,w
 17067  044E  00BB               	movwf	?___ftadd+2
 17068  044F  0008               	return
 17069  0450                     __end_of___ftadd:	
 17070                           
 17071                           	psect	text114
 17072  1FDE                     __ptext114:	
 17073 ;; *************** function ___awtoft *****************
 17074 ;; Defined at:
 17075 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;  c               2    0[BANK0 ] int 
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  sign            1    5[BANK0 ] unsigned char 
 17080 ;; Return value:  Size  Location     Type
 17081 ;;                  3    0[BANK0 ] float 
 17082 ;; Registers used:
 17083 ;;		wreg, status,2, status,0, pclath, cstack
 17084 ;; Tracked objects:
 17085 ;;		On entry : 0/0
 17086 ;;		On exit  : 0/0
 17087 ;;		Unchanged: 0/0
 17088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;Total ram usage:        6 bytes
 17094 ;; Hardware stack levels used:    1
 17095 ;; Hardware stack levels required when called:    4
 17096 ;; This function calls:
 17097 ;;		___ftpack
 17098 ;; This function is called by:
 17099 ;;		_getDimmerLights_PercentToValue
 17100 ;;		_getDimmerLights_ValueToPercent
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           
 17105                           ;psect for function ___awtoft
 17106  1FDE                     ___awtoft:	
 17107                           
 17108                           ;incstack = 0
 17109                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17110  1FDE  0020               	movlb	0	; select bank0
 17111  1FDF  01A5               	clrf	___awtoft@sign
 17112  1FE0  1FA1               	btfss	___awtoft@c+1,7
 17113  1FE1  2FE9               	goto	l9098
 17114  1FE2  09A0               	comf	___awtoft@c,f
 17115  1FE3  09A1               	comf	___awtoft@c+1,f
 17116  1FE4  0AA0               	incf	___awtoft@c,f
 17117  1FE5  1903               	skipnz
 17118  1FE6  0AA1               	incf	___awtoft@c+1,f
 17119  1FE7  01A5               	clrf	___awtoft@sign
 17120  1FE8  0AA5               	incf	___awtoft@sign,f
 17121  1FE9                     l9098:	
 17122  1FE9  0820               	movf	___awtoft@c,w
 17123  1FEA  00F2               	movwf	___ftpack@arg
 17124  1FEB  0821               	movf	___awtoft@c+1,w
 17125  1FEC  00F3               	movwf	___ftpack@arg+1
 17126  1FED  01F4               	clrf	___ftpack@arg+2
 17127  1FEE  308E               	movlw	142
 17128  1FEF  00A3               	movwf	??___awtoft
 17129  1FF0  0823               	movf	??___awtoft,w
 17130  1FF1  00F5               	movwf	___ftpack@exp
 17131  1FF2  0825               	movf	___awtoft@sign,w
 17132  1FF3  00A4               	movwf	??___awtoft+1
 17133  1FF4  0824               	movf	??___awtoft+1,w
 17134  1FF5  00F6               	movwf	___ftpack@sign
 17135  1FF6  3197  27A0         	fcall	___ftpack
 17136  1FF8  0872               	movf	?___ftpack,w
 17137  1FF9  0020               	movlb	0	; select bank0
 17138  1FFA  00A0               	movwf	?___awtoft
 17139  1FFB  0873               	movf	?___ftpack+1,w
 17140  1FFC  00A1               	movwf	?___awtoft+1
 17141  1FFD  0874               	movf	?___ftpack+2,w
 17142  1FFE  00A2               	movwf	?___awtoft+2
 17143  1FFF  0008               	return
 17144  2000                     __end_of___awtoft:	
 17145                           
 17146                           	psect	text115
 17147  17A0                     __ptext115:	
 17148 ;; *************** function ___ftpack *****************
 17149 ;; Defined at:
 17150 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;  arg             3    2[COMMON] unsigned um
 17153 ;;  exp             1    5[COMMON] unsigned char 
 17154 ;;  sign            1    6[COMMON] unsigned char 
 17155 ;; Auto vars:     Size  Location     Type
 17156 ;;		None
 17157 ;; Return value:  Size  Location     Type
 17158 ;;                  3    2[COMMON] float 
 17159 ;; Registers used:
 17160 ;;		wreg, status,2, status,0
 17161 ;; Tracked objects:
 17162 ;;		On entry : 0/0
 17163 ;;		On exit  : 0/0
 17164 ;;		Unchanged: 0/0
 17165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17166 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;Total ram usage:        8 bytes
 17171 ;; Hardware stack levels used:    1
 17172 ;; Hardware stack levels required when called:    3
 17173 ;; This function calls:
 17174 ;;		Nothing
 17175 ;; This function is called by:
 17176 ;;		___awtoft
 17177 ;;		___ftadd
 17178 ;;		___ftdiv
 17179 ;;		___ftmul
 17180 ;; This function uses a non-reentrant model
 17181 ;;
 17182                           
 17183                           
 17184                           ;psect for function ___ftpack
 17185  17A0                     ___ftpack:	
 17186                           
 17187                           ;incstack = 0
 17188                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17189  17A0  0875               	movf	___ftpack@exp,w
 17190  17A1  1903               	btfsc	3,2
 17191  17A2  2FA8               	goto	l6200
 17192  17A3  0874               	movf	___ftpack@arg+2,w
 17193  17A4  0473               	iorwf	___ftpack@arg+1,w
 17194  17A5  0472               	iorwf	___ftpack@arg,w
 17195  17A6  1D03               	skipz
 17196  17A7  2FB9               	goto	l6206
 17197  17A8                     l6200:	
 17198  17A8  3000               	movlw	0
 17199  17A9  00F2               	movwf	?___ftpack
 17200  17AA  3000               	movlw	0
 17201  17AB  00F3               	movwf	?___ftpack+1
 17202  17AC  3000               	movlw	0
 17203  17AD  00F4               	movwf	?___ftpack+2
 17204  17AE  0008               	return
 17205  17AF                     l6204:	
 17206  17AF  3001               	movlw	1
 17207  17B0  00F7               	movwf	??___ftpack
 17208  17B1  0877               	movf	??___ftpack,w
 17209  17B2  07F5               	addwf	___ftpack@exp,f
 17210  17B3  3001               	movlw	1
 17211  17B4                     u5035:	
 17212  17B4  36F4               	lsrf	___ftpack@arg+2,f
 17213  17B5  0CF3               	rrf	___ftpack@arg+1,f
 17214  17B6  0CF2               	rrf	___ftpack@arg,f
 17215  17B7  0B89               	decfsz	9,f
 17216  17B8  2FB4               	goto	u5035
 17217  17B9                     l6206:	
 17218  17B9  30FE               	movlw	254
 17219  17BA  0574               	andwf	___ftpack@arg+2,w
 17220  17BB  1903               	btfsc	3,2
 17221  17BC  2FD2               	goto	l3144
 17222  17BD  2FAF               	goto	l6204
 17223  17BE                     l6208:	
 17224  17BE  3001               	movlw	1
 17225  17BF  00F7               	movwf	??___ftpack
 17226  17C0  0877               	movf	??___ftpack,w
 17227  17C1  07F5               	addwf	___ftpack@exp,f
 17228  17C2  3001               	movlw	1
 17229  17C3  07F2               	addwf	___ftpack@arg,f
 17230  17C4  3000               	movlw	0
 17231  17C5  1803               	skipnc
 17232  17C6  3001               	movlw	1
 17233  17C7  07F3               	addwf	___ftpack@arg+1,f
 17234  17C8  3000               	movlw	0
 17235  17C9  1803               	skipnc
 17236  17CA  3001               	movlw	1
 17237  17CB  07F4               	addwf	___ftpack@arg+2,f
 17238  17CC  3001               	movlw	1
 17239  17CD                     u5055:	
 17240  17CD  36F4               	lsrf	___ftpack@arg+2,f
 17241  17CE  0CF3               	rrf	___ftpack@arg+1,f
 17242  17CF  0CF2               	rrf	___ftpack@arg,f
 17243  17D0  0B89               	decfsz	9,f
 17244  17D1  2FCD               	goto	u5055
 17245  17D2                     l3144:	
 17246  17D2  30FF               	movlw	255
 17247  17D3  0574               	andwf	___ftpack@arg+2,w
 17248  17D4  1903               	btfsc	3,2
 17249  17D5  2FDF               	goto	l6216
 17250  17D6  2FBE               	goto	l6208
 17251  17D7                     l6214:	
 17252  17D7  3001               	movlw	1
 17253  17D8  02F5               	subwf	___ftpack@exp,f
 17254  17D9  3001               	movlw	1
 17255  17DA                     u5075:	
 17256  17DA  35F2               	lslf	___ftpack@arg,f
 17257  17DB  0DF3               	rlf	___ftpack@arg+1,f
 17258  17DC  0DF4               	rlf	___ftpack@arg+2,f
 17259  17DD  0B89               	decfsz	9,f
 17260  17DE  2FDA               	goto	u5075
 17261  17DF                     l6216:	
 17262  17DF  1FF3               	btfss	___ftpack@arg+1,7
 17263  17E0  2FD7               	goto	l6214
 17264  17E1  1875               	btfsc	___ftpack@exp,0
 17265  17E2  2FE9               	goto	l3150
 17266  17E3  30FF               	movlw	255
 17267  17E4  05F2               	andwf	___ftpack@arg,f
 17268  17E5  307F               	movlw	127
 17269  17E6  05F3               	andwf	___ftpack@arg+1,f
 17270  17E7  30FF               	movlw	255
 17271  17E8  05F4               	andwf	___ftpack@arg+2,f
 17272  17E9                     l3150:	
 17273  17E9  1003               	clrc
 17274  17EA  0CF5               	rrf	___ftpack@exp,f
 17275  17EB  0875               	movf	___ftpack@exp,w
 17276  17EC  00F7               	movwf	??___ftpack
 17277  17ED  01F8               	clrf	??___ftpack+1
 17278  17EE  01F9               	clrf	??___ftpack+2
 17279  17EF  3010               	movlw	16
 17280  17F0                     u5105:	
 17281  17F0  35F7               	lslf	??___ftpack,f
 17282  17F1  0DF8               	rlf	??___ftpack+1,f
 17283  17F2  0DF9               	rlf	??___ftpack+2,f
 17284  17F3  0B89               	decfsz	9,f
 17285  17F4  2FF0               	goto	u5105
 17286  17F5  0877               	movf	??___ftpack,w
 17287  17F6  04F2               	iorwf	___ftpack@arg,f
 17288  17F7  0878               	movf	??___ftpack+1,w
 17289  17F8  04F3               	iorwf	___ftpack@arg+1,f
 17290  17F9  0879               	movf	??___ftpack+2,w
 17291  17FA  04F4               	iorwf	___ftpack@arg+2,f
 17292  17FB  0876               	movf	___ftpack@sign,w
 17293  17FC  1903               	btfsc	3,2
 17294  17FD  0008               	return
 17295  17FE  17F4               	bsf	___ftpack@arg+2,7
 17296  17FF  0008               	return
 17297  1800                     __end_of___ftpack:	
 17298                           
 17299                           	psect	text116
 17300  1D2B                     __ptext116:	
 17301 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17302 ;; Defined at:
 17303 ;;		line 66 in file "../src/Dimmer_B1.c"
 17304 ;; Parameters:    Size  Location     Type
 17305 ;;  lights          1    wreg     unsigned char 
 17306 ;; Auto vars:     Size  Location     Type
 17307 ;;  lights          1    4[COMMON] unsigned char 
 17308 ;;  value           1    3[COMMON] unsigned char 
 17309 ;; Return value:  Size  Location     Type
 17310 ;;                  1    wreg      unsigned char 
 17311 ;; Registers used:
 17312 ;;		wreg, status,2
 17313 ;; Tracked objects:
 17314 ;;		On entry : 0/0
 17315 ;;		On exit  : 0/0
 17316 ;;		Unchanged: 0/0
 17317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;Total ram usage:        3 bytes
 17323 ;; Hardware stack levels used:    1
 17324 ;; Hardware stack levels required when called:    3
 17325 ;; This function calls:
 17326 ;;		Nothing
 17327 ;; This function is called by:
 17328 ;;		_setDimmerLights_Dimming
 17329 ;; This function uses a non-reentrant model
 17330 ;;
 17331                           
 17332                           
 17333                           ;psect for function _getDimmerIntr_DimmingValue
 17334  1D2B                     _getDimmerIntr_DimmingValue:	
 17335                           
 17336                           ;incstack = 0
 17337                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17338                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17339  1D2B  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 17340                           
 17341                           ;Dimmer_B1.c: 67: char value = 0;
 17342  1D2C  01F3               	clrf	getDimmerIntr_DimmingValue@value
 17343                           
 17344                           ;Dimmer_B1.c: 69: if (lights == 1) {
 17345  1D2D  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17346  1D2E  3A01               	xorlw	1
 17347  1D2F  1D03               	skipz
 17348  1D30  2D34               	goto	l7034
 17349                           
 17350                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 17351  1D31  0021               	movlb	1	; select bank1
 17352  1D32  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 17353  1D33  2D3A               	goto	L9
 17354  1D34                     l7034:	
 17355                           ;Dimmer_B1.c: 71: }
 17356                           
 17357                           
 17358                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 17359  1D34  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17360  1D35  3A02               	xorlw	2
 17361  1D36  1D03               	skipz
 17362  1D37  2D3D               	goto	l742
 17363                           
 17364                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 17365  1D38  0021               	movlb	1	; select bank1
 17366  1D39  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 17367  1D3A                     L9:	
 17368  1D3A  00F2               	movwf	??_getDimmerIntr_DimmingValue
 17369  1D3B  0872               	movf	??_getDimmerIntr_DimmingValue,w
 17370  1D3C  00F3               	movwf	getDimmerIntr_DimmingValue@value
 17371  1D3D                     l742:	
 17372                           
 17373                           ;Dimmer_B1.c: 76: }
 17374                           ;Dimmer_B1.c: 83: return value;
 17375  1D3D  0873               	movf	getDimmerIntr_DimmingValue@value,w
 17376  1D3E  0008               	return
 17377  1D3F                     __end_of_getDimmerIntr_DimmingValue:	
 17378                           
 17379                           	psect	text117
 17380  1297                     __ptext117:	
 17381 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17382 ;; Defined at:
 17383 ;;		line 897 in file "../src/Dimmer_B1.c"
 17384 ;; Parameters:    Size  Location     Type
 17385 ;;  lights          1    wreg     unsigned char 
 17386 ;; Auto vars:     Size  Location     Type
 17387 ;;  lights          1    7[COMMON] unsigned char 
 17388 ;;  allow           1    8[COMMON] unsigned char 
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  1    wreg      unsigned char 
 17391 ;; Registers used:
 17392 ;;		wreg, status,2, status,0, pclath, cstack
 17393 ;; Tracked objects:
 17394 ;;		On entry : 0/0
 17395 ;;		On exit  : 0/0
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17399 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17400 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17401 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;Total ram usage:        6 bytes
 17403 ;; Hardware stack levels used:    1
 17404 ;; Hardware stack levels required when called:    4
 17405 ;; This function calls:
 17406 ;;		_getLoad_OK
 17407 ;; This function is called by:
 17408 ;;		_setDimmerLights_Main
 17409 ;; This function uses a non-reentrant model
 17410 ;;
 17411                           
 17412                           
 17413                           ;psect for function _getDimmerLights_Allow_Condition
 17414  1297                     _getDimmerLights_Allow_Condition:	
 17415                           
 17416                           ;incstack = 0
 17417                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17418                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17419  1297  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 17420                           
 17421                           ;Dimmer_B1.c: 898: char allow = 0;
 17422  1298  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 17423                           
 17424                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17425  1299  01F4               	clrf	_getDimmerLights_Allow_Condition$2298
 17426  129A  0AF4               	incf	_getDimmerLights_Allow_Condition$2298,f
 17427  129B  319A  22F0  3192   	fcall	_getLoad_OK
 17428  129E  3800               	iorlw	0
 17429  129F  1D03               	skipz
 17430  12A0  2AA5               	goto	l7334
 17431  12A1  0021               	movlb	1	; select bank1
 17432  12A2  18BA               	btfsc	_Dimmer^(0+128),1
 17433  12A3  2AA5               	goto	l7334
 17434  12A4  01F4               	clrf	_getDimmerLights_Allow_Condition$2298
 17435  12A5                     l7334:	
 17436  12A5  0874               	movf	_getDimmerLights_Allow_Condition$2298,w
 17437  12A6  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17438  12A7  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17439  12A8  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17440                           
 17441                           ;Dimmer_B1.c: 908: if (allow == 0) {
 17442  12A9  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 17443  12AA  1D03               	skipz
 17444  12AB  2ACC               	goto	l7358
 17445                           
 17446                           ;Dimmer_B1.c: 909: if (lights == 1) {
 17447  12AC  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17448  12AD  3A01               	xorlw	1
 17449  12AE  1D03               	skipz
 17450  12AF  2ABB               	goto	l7348
 17451                           
 17452                           ;Dimmer_B1.c: 910: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17453  12B0  01F5               	clrf	_getDimmerLights_Allow_Condition$2299
 17454  12B1  0AF5               	incf	_getDimmerLights_Allow_Condition$2299,f
 17455  12B2  0022               	movlb	2	; select bank2
 17456  12B3  1A66               	btfsc	_DimmerLights2^(0+256),4
 17457  12B4  2AB9               	goto	l7346
 17458  12B5  0021               	movlb	1	; select bank1
 17459  12B6  1A69               	btfsc	_DimmerIntr2^(0+128),4
 17460  12B7  2AB9               	goto	l7346
 17461  12B8  01F5               	clrf	_getDimmerLights_Allow_Condition$2299
 17462  12B9                     l7346:	
 17463  12B9  0875               	movf	_getDimmerLights_Allow_Condition$2299,w
 17464  12BA  2AC9               	goto	L10
 17465  12BB                     l7348:	
 17466                           ;Dimmer_B1.c: 911: } else if (lights == 2) {
 17467                           
 17468  12BB  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17469  12BC  3A02               	xorlw	2
 17470  12BD  1D03               	skipz
 17471  12BE  2ACC               	goto	l7358
 17472                           
 17473                           ;Dimmer_B1.c: 912: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17474  12BF  01F6               	clrf	_getDimmerLights_Allow_Condition$2300
 17475  12C0  0AF6               	incf	_getDimmerLights_Allow_Condition$2300,f
 17476  12C1  0022               	movlb	2	; select bank2
 17477  12C2  1A5E               	btfsc	_DimmerLights1^(0+256),4
 17478  12C3  2AC8               	goto	l7356
 17479  12C4  0021               	movlb	1	; select bank1
 17480  12C5  1A62               	btfsc	_DimmerIntr1^(0+128),4
 17481  12C6  2AC8               	goto	l7356
 17482  12C7  01F6               	clrf	_getDimmerLights_Allow_Condition$2300
 17483  12C8                     l7356:	
 17484  12C8  0876               	movf	_getDimmerLights_Allow_Condition$2300,w
 17485  12C9                     L10:	
 17486  12C9  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17487  12CA  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17488  12CB  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17489  12CC                     l7358:	
 17490                           
 17491                           ;Dimmer_B1.c: 913: }
 17492                           ;Dimmer_B1.c: 914: }
 17493                           ;Dimmer_B1.c: 931: return allow;
 17494  12CC  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 17495  12CD  0008               	return
 17496  12CE                     __end_of_getDimmerLights_Allow_Condition:	
 17497                           
 17498                           	psect	text118
 17499  1AF0                     __ptext118:	
 17500 ;; *************** function _getLoad_OK *****************
 17501 ;; Defined at:
 17502 ;;		line 246 in file "../src/OverLoad_B1.c"
 17503 ;; Parameters:    Size  Location     Type
 17504 ;;		None
 17505 ;; Auto vars:     Size  Location     Type
 17506 ;;  ok              1    2[COMMON] unsigned char 
 17507 ;; Return value:  Size  Location     Type
 17508 ;;                  1    wreg      unsigned char 
 17509 ;; Registers used:
 17510 ;;		wreg, status,2
 17511 ;; Tracked objects:
 17512 ;;		On entry : 0/0
 17513 ;;		On exit  : 0/0
 17514 ;;		Unchanged: 0/0
 17515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;Total ram usage:        1 bytes
 17521 ;; Hardware stack levels used:    1
 17522 ;; Hardware stack levels required when called:    3
 17523 ;; This function calls:
 17524 ;;		Nothing
 17525 ;; This function is called by:
 17526 ;;		_DimmerLights_Main
 17527 ;;		_getDimmerLights_Allow_Condition
 17528 ;; This function uses a non-reentrant model
 17529 ;;
 17530                           
 17531                           
 17532                           ;psect for function _getLoad_OK
 17533  1AF0                     _getLoad_OK:	
 17534                           
 17535                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 17536                           
 17537                           ;incstack = 0
 17538                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17539  1AF0  3000               	movlw	0
 17540  1AF1  0022               	movlb	2	; select bank2
 17541  1AF2  1BB0               	btfsc	_Load^(0+256),7
 17542  1AF3  3001               	movlw	1
 17543  1AF4  00F2               	movwf	getLoad_OK@ok
 17544                           
 17545                           ;OverLoad_B1.c: 248: return ok;
 17546  1AF5  0872               	movf	getLoad_OK@ok,w
 17547  1AF6  0008               	return
 17548  1AF7                     __end_of_getLoad_OK:	
 17549                           
 17550                           	psect	text119
 17551  11CC                     __ptext119:	
 17552 ;; *************** function _getMain_All_Error_Status *****************
 17553 ;; Defined at:
 17554 ;;		line 425 in file "../src/Main_B1.c"
 17555 ;; Parameters:    Size  Location     Type
 17556 ;;  command         1    wreg     unsigned char 
 17557 ;; Auto vars:     Size  Location     Type
 17558 ;;  command         1    7[COMMON] unsigned char 
 17559 ;;  status          1    8[COMMON] unsigned char 
 17560 ;; Return value:  Size  Location     Type
 17561 ;;                  1    wreg      unsigned char 
 17562 ;; Registers used:
 17563 ;;		wreg, status,2, status,0
 17564 ;; Tracked objects:
 17565 ;;		On entry : 0/0
 17566 ;;		On exit  : 0/0
 17567 ;;		Unchanged: 0/0
 17568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17570 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;Total ram usage:        7 bytes
 17574 ;; Hardware stack levels used:    1
 17575 ;; Hardware stack levels required when called:    3
 17576 ;; This function calls:
 17577 ;;		Nothing
 17578 ;; This function is called by:
 17579 ;;		_DimmerLights_Main
 17580 ;;		_Exception_Main
 17581 ;;		_Load_Main
 17582 ;;		_setTemp_Main
 17583 ;;		_getRxData
 17584 ;;		_setSw_Main
 17585 ;; This function uses a non-reentrant model
 17586 ;;
 17587                           
 17588                           
 17589                           ;psect for function _getMain_All_Error_Status
 17590  11CC                     _getMain_All_Error_Status:	
 17591                           
 17592                           ;incstack = 0
 17593                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17594                           ;getMain_All_Error_Status@command stored from wreg
 17595  11CC  00F7               	movwf	getMain_All_Error_Status@command
 17596                           
 17597                           ;Main_B1.c: 426: char status = 0;
 17598  11CD  01F8               	clrf	getMain_All_Error_Status@status
 17599                           
 17600                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17601  11CE  08F8               	movf	getMain_All_Error_Status@status,f
 17602  11CF  1D03               	skipz
 17603  11D0  29E3               	goto	l7066
 17604  11D1  0877               	movf	getMain_All_Error_Status@command,w
 17605  11D2  3A02               	xorlw	2
 17606  11D3  1903               	skipnz
 17607  11D4  29E3               	goto	l7066
 17608                           
 17609                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17610  11D5  0021               	movlb	1	; select bank1
 17611  11D6  18D0               	btfsc	_Temp^(0+128),1
 17612  11D7  29DB               	goto	l7064
 17613  11D8  01F3               	clrf	_getMain_All_Error_Status$3588
 17614  11D9  01F4               	clrf	_getMain_All_Error_Status$3588+1
 17615  11DA  29DF               	goto	l1676
 17616  11DB                     l7064:	
 17617  11DB  3002               	movlw	2
 17618  11DC  00F3               	movwf	_getMain_All_Error_Status$3588
 17619  11DD  3000               	movlw	0
 17620  11DE  00F4               	movwf	_getMain_All_Error_Status$3588+1
 17621  11DF                     l1676:	
 17622  11DF  0873               	movf	_getMain_All_Error_Status$3588,w
 17623  11E0  00F2               	movwf	??_getMain_All_Error_Status
 17624  11E1  0872               	movf	??_getMain_All_Error_Status,w
 17625  11E2  00F8               	movwf	getMain_All_Error_Status@status
 17626  11E3                     l7066:	
 17627                           
 17628                           ;Main_B1.c: 439: }
 17629                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17630  11E3  08F8               	movf	getMain_All_Error_Status@status,f
 17631  11E4  1D03               	skipz
 17632  11E5  29F8               	goto	l1677
 17633  11E6  0877               	movf	getMain_All_Error_Status@command,w
 17634  11E7  3A03               	xorlw	3
 17635  11E8  1903               	skipnz
 17636  11E9  29F8               	goto	l1677
 17637                           
 17638                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17639  11EA  0022               	movlb	2	; select bank2
 17640  11EB  1AB0               	btfsc	_Load^(0+256),5
 17641  11EC  29F0               	goto	l7074
 17642  11ED  01F5               	clrf	_getMain_All_Error_Status$3589
 17643  11EE  01F6               	clrf	_getMain_All_Error_Status$3589+1
 17644  11EF  29F4               	goto	l1681
 17645  11F0                     l7074:	
 17646  11F0  3003               	movlw	3
 17647  11F1  00F5               	movwf	_getMain_All_Error_Status$3589
 17648  11F2  3000               	movlw	0
 17649  11F3  00F6               	movwf	_getMain_All_Error_Status$3589+1
 17650  11F4                     l1681:	
 17651  11F4  0875               	movf	_getMain_All_Error_Status$3589,w
 17652  11F5  00F2               	movwf	??_getMain_All_Error_Status
 17653  11F6  0872               	movf	??_getMain_All_Error_Status,w
 17654  11F7  00F8               	movwf	getMain_All_Error_Status@status
 17655  11F8                     l1677:	
 17656                           
 17657                           ;Main_B1.c: 446: }
 17658                           ;Main_B1.c: 462: return status;
 17659  11F8  0878               	movf	getMain_All_Error_Status@status,w
 17660  11F9  0008               	return
 17661  11FA                     __end_of_getMain_All_Error_Status:	
 17662                           
 17663                           	psect	text120
 17664  1B48                     __ptext120:	
 17665 ;; *************** function _DimmerLights_Initialization *****************
 17666 ;; Defined at:
 17667 ;;		line 593 in file "../src/Dimmer_B1.c"
 17668 ;; Parameters:    Size  Location     Type
 17669 ;;		None
 17670 ;; Auto vars:     Size  Location     Type
 17671 ;;		None
 17672 ;; Return value:  Size  Location     Type
 17673 ;;		None               void
 17674 ;; Registers used:
 17675 ;;		wreg, status,2, status,0, pclath, cstack
 17676 ;; Tracked objects:
 17677 ;;		On entry : 0/0
 17678 ;;		On exit  : 0/0
 17679 ;;		Unchanged: 0/0
 17680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;Total ram usage:        0 bytes
 17686 ;; Hardware stack levels used:    1
 17687 ;; Hardware stack levels required when called:    4
 17688 ;; This function calls:
 17689 ;;		_DimmerIntr_Initialization
 17690 ;;		_setDimmerLights_Initialization
 17691 ;; This function is called by:
 17692 ;;		_main
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           
 17697                           ;psect for function _DimmerLights_Initialization
 17698  1B48                     _DimmerLights_Initialization:	
 17699                           
 17700                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17701                           
 17702                           ;incstack = 0
 17703                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17704  1B48  3001               	movlw	1
 17705  1B49  3188  2000  319B   	fcall	_setDimmerLights_Initialization
 17706                           
 17707                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17708  1B4C  3002               	movlw	2
 17709  1B4D  3188  2000  319B   	fcall	_setDimmerLights_Initialization
 17710                           
 17711                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17712  1B50  319F  27BC         	fcall	_DimmerIntr_Initialization
 17713  1B52  0008               	return
 17714  1B53                     __end_of_DimmerLights_Initialization:	
 17715                           
 17716                           	psect	text121
 17717  0800                     __ptext121:	
 17718 ;; *************** function _setDimmerLights_Initialization *****************
 17719 ;; Defined at:
 17720 ;;		line 609 in file "../src/Dimmer_B1.c"
 17721 ;; Parameters:    Size  Location     Type
 17722 ;;  lights          1    wreg     unsigned char 
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;  lights          1    0[COMMON] unsigned char 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;		None               void
 17727 ;; Registers used:
 17728 ;;		wreg
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;Total ram usage:        0 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    3
 17741 ;; This function calls:
 17742 ;;		Nothing
 17743 ;; This function is called by:
 17744 ;;		_DimmerLights_Initialization
 17745 ;; This function uses a non-reentrant model
 17746 ;;
 17747                           
 17748                           
 17749                           ;psect for function _setDimmerLights_Initialization
 17750  0800                     _setDimmerLights_Initialization:	
 17751                           
 17752                           ;incstack = 0
 17753                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17754  0800  0008               	return
 17755  0801                     __end_of_setDimmerLights_Initialization:	
 17756                           
 17757                           	psect	text122
 17758  1FBC                     __ptext122:	
 17759 ;; *************** function _DimmerIntr_Initialization *****************
 17760 ;; Defined at:
 17761 ;;		line 7 in file "../src/Dimmer_B1.c"
 17762 ;; Parameters:    Size  Location     Type
 17763 ;;		None
 17764 ;; Auto vars:     Size  Location     Type
 17765 ;;		None
 17766 ;; Return value:  Size  Location     Type
 17767 ;;		None               void
 17768 ;; Registers used:
 17769 ;;		wreg
 17770 ;; Tracked objects:
 17771 ;;		On entry : 0/0
 17772 ;;		On exit  : 0/0
 17773 ;;		Unchanged: 0/0
 17774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17779 ;;Total ram usage:        1 bytes
 17780 ;; Hardware stack levels used:    1
 17781 ;; Hardware stack levels required when called:    3
 17782 ;; This function calls:
 17783 ;;		Nothing
 17784 ;; This function is called by:
 17785 ;;		_DimmerLights_Initialization
 17786 ;; This function uses a non-reentrant model
 17787 ;;
 17788                           
 17789                           
 17790                           ;psect for function _DimmerIntr_Initialization
 17791  1FBC                     _DimmerIntr_Initialization:	
 17792                           
 17793                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17794                           
 17795                           ;incstack = 0
 17796                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17797  1FBC  3007               	movlw	7
 17798  1FBD  00F2               	movwf	??_DimmerIntr_Initialization
 17799  1FBE  0872               	movf	??_DimmerIntr_Initialization,w
 17800  1FBF  0021               	movlb	1	; select bank1
 17801  1FC0  00E5               	movwf	(_DimmerIntr1^(0+128)+3)
 17802                           
 17803                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17804  1FC1  3034               	movlw	52
 17805  1FC2  00F2               	movwf	??_DimmerIntr_Initialization
 17806  1FC3  0872               	movf	??_DimmerIntr_Initialization,w
 17807  1FC4  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 17808                           
 17809                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17810  1FC5  3010               	movlw	16
 17811  1FC6  00F2               	movwf	??_DimmerIntr_Initialization
 17812  1FC7  0872               	movf	??_DimmerIntr_Initialization,w
 17813  1FC8  00E8               	movwf	(_DimmerIntr1^(0+128)+6)
 17814                           
 17815                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17816  1FC9  3034               	movlw	52
 17817  1FCA  00F2               	movwf	??_DimmerIntr_Initialization
 17818  1FCB  0872               	movf	??_DimmerIntr_Initialization,w
 17819  1FCC  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 17820                           
 17821                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17822  1FCD  3007               	movlw	7
 17823  1FCE  00F2               	movwf	??_DimmerIntr_Initialization
 17824  1FCF  0872               	movf	??_DimmerIntr_Initialization,w
 17825  1FD0  00EC               	movwf	(_DimmerIntr2^(0+128)+3)
 17826                           
 17827                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17828  1FD1  3034               	movlw	52
 17829  1FD2  00F2               	movwf	??_DimmerIntr_Initialization
 17830  1FD3  0872               	movf	??_DimmerIntr_Initialization,w
 17831  1FD4  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 17832                           
 17833                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17834  1FD5  3010               	movlw	16
 17835  1FD6  00F2               	movwf	??_DimmerIntr_Initialization
 17836  1FD7  0872               	movf	??_DimmerIntr_Initialization,w
 17837  1FD8  00EF               	movwf	(_DimmerIntr2^(0+128)+6)
 17838                           
 17839                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17840  1FD9  3034               	movlw	52
 17841  1FDA  00F2               	movwf	??_DimmerIntr_Initialization
 17842  1FDB  0872               	movf	??_DimmerIntr_Initialization,w
 17843  1FDC  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 17844  1FDD  0008               	return
 17845  1FDE                     __end_of_DimmerIntr_Initialization:	
 17846                           
 17847                           	psect	text123
 17848  1B1B                     __ptext123:	
 17849 ;; *************** function _DelayOff_Main *****************
 17850 ;; Defined at:
 17851 ;;		line 41 in file "../src/DelayOff_B1.c"
 17852 ;; Parameters:    Size  Location     Type
 17853 ;;		None
 17854 ;; Auto vars:     Size  Location     Type
 17855 ;;		None
 17856 ;; Return value:  Size  Location     Type
 17857 ;;		None               void
 17858 ;; Registers used:
 17859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17860 ;; Tracked objects:
 17861 ;;		On entry : 0/0
 17862 ;;		On exit  : 0/0
 17863 ;;		Unchanged: 0/0
 17864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;Total ram usage:        0 bytes
 17870 ;; Hardware stack levels used:    1
 17871 ;; Hardware stack levels required when called:    7
 17872 ;; This function calls:
 17873 ;;		_DlyOff_Main
 17874 ;; This function is called by:
 17875 ;;		_main
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           
 17880                           ;psect for function _DelayOff_Main
 17881  1B1B                     _DelayOff_Main:	
 17882                           
 17883                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17884                           
 17885                           ;incstack = 0
 17886                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17887  1B1B  3001               	movlw	1
 17888  1B1C  318A  223E  319B   	fcall	_DlyOff_Main
 17889                           
 17890                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17891  1B1F  3002               	movlw	2
 17892  1B20  318A  223E         	fcall	_DlyOff_Main
 17893  1B22  0008               	return
 17894  1B23                     __end_of_DelayOff_Main:	
 17895                           
 17896                           	psect	text124
 17897  0A3E                     __ptext124:	
 17898 ;; *************** function _DlyOff_Main *****************
 17899 ;; Defined at:
 17900 ;;		line 61 in file "../src/DelayOff_B1.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;  sw              1    wreg     unsigned char 
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;  sw              1   64[BANK0 ] unsigned char 
 17905 ;; Return value:  Size  Location     Type
 17906 ;;		None               void
 17907 ;; Registers used:
 17908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;Total ram usage:        3 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    6
 17921 ;; This function calls:
 17922 ;;		_DelayOffPointSelect
 17923 ;;		_getDimmerLights_Status
 17924 ;;		_setDimmerLights_SwOff
 17925 ;;		_setDimmerLights_SwOn
 17926 ;;		_setProductData
 17927 ;; This function is called by:
 17928 ;;		_DelayOff_Main
 17929 ;; This function uses a non-reentrant model
 17930 ;;
 17931                           
 17932                           
 17933                           ;psect for function _DlyOff_Main
 17934  0A3E                     _DlyOff_Main:	
 17935                           
 17936                           ;incstack = 0
 17937                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17938                           ;DlyOff_Main@sw stored from wreg
 17939  0A3E  0020               	movlb	0	; select bank0
 17940  0A3F  00E0               	movwf	DlyOff_Main@sw
 17941                           
 17942                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17943  0A40  0860               	movf	DlyOff_Main@sw,w
 17944  0A41  319D  2553  318A   	fcall	_DelayOffPointSelect
 17945                           
 17946                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17947  0A44  0021               	movlb	1	; select bank1
 17948  0A45  0844               	movf	_DelayOff^(0+128),w
 17949  0A46  0086               	movwf	6
 17950  0A47  3001               	movlw	1	; select bank2/3
 17951  0A48  0087               	movwf	7
 17952  0A49  1C81               	btfss	1,1
 17953  0A4A  0008               	return
 17954                           
 17955                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17956  0A4B  0844               	movf	_DelayOff^(0+128),w
 17957  0A4C  3E02               	addlw	2
 17958  0A4D  0086               	movwf	6
 17959  0A4E  3001               	movlw	1	; select bank2/3
 17960  0A4F  0087               	movwf	7
 17961  0A50  3001               	movlw	1
 17962  0A51  0781               	addwf	1,f
 17963  0A52  3141               	addfsr 1,1
 17964  0A53  1803               	skipnc
 17965  0A54  0A81               	incf	1,f
 17966                           
 17967                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17968  0A55  0844               	movf	_DelayOff^(0+128),w
 17969  0A56  3E02               	addlw	2
 17970  0A57  0086               	movwf	6
 17971  0A58  3001               	movlw	1	; select bank2/3
 17972  0A59  0087               	movwf	7
 17973  0A5A  3F40               	moviw [0]fsr1
 17974  0A5B  0020               	movlb	0	; select bank0
 17975  0A5C  00DE               	movwf	??_DlyOff_Main
 17976  0A5D  3F41               	moviw [1]fsr1
 17977  0A5E  00DF               	movwf	??_DlyOff_Main+1
 17978  0A5F  300B               	movlw	11
 17979  0A60  025F               	subwf	??_DlyOff_Main+1,w
 17980  0A61  30B8               	movlw	184
 17981  0A62  1903               	skipnz
 17982  0A63  025E               	subwf	??_DlyOff_Main,w
 17983  0A64  1C03               	skipc
 17984  0A65  0008               	return
 17985                           
 17986                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17987  0A66  0021               	movlb	1	; select bank1
 17988  0A67  0844               	movf	_DelayOff^(0+128),w
 17989  0A68  3E02               	addlw	2
 17990  0A69  0086               	movwf	6
 17991  0A6A  3001               	movlw	1	; select bank2/3
 17992  0A6B  0087               	movwf	7
 17993  0A6C  3000               	movlw	0
 17994  0A6D  3FC0               	movwi [0]fsr1
 17995  0A6E  3FC1               	movwi [1]fsr1
 17996                           
 17997                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17998  0A6F  3001               	movlw	1
 17999  0A70  0020               	movlb	0	; select bank0
 18000  0A71  00DE               	movwf	??_DlyOff_Main
 18001  0A72  0021               	movlb	1	; select bank1
 18002  0A73  0844               	movf	_DelayOff^(0+128),w
 18003  0A74  3E04               	addlw	4
 18004  0A75  0086               	movwf	6
 18005  0A76  3001               	movlw	1	; select bank2/3
 18006  0A77  0087               	movwf	7
 18007  0A78  0020               	movlb	0	; select bank0
 18008  0A79  085E               	movf	??_DlyOff_Main,w
 18009  0A7A  0781               	addwf	1,f
 18010                           
 18011                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18012  0A7B  0021               	movlb	1	; select bank1
 18013  0A7C  0844               	movf	_DelayOff^(0+128),w
 18014  0A7D  3E04               	addlw	4
 18015  0A7E  0086               	movwf	6
 18016  0A7F  3001               	movlw	1	; select bank2/3
 18017  0A80  0087               	movwf	7
 18018  0A81  0A44               	incf	_DelayOff^(0+128),w
 18019  0A82  0084               	movwf	4
 18020  0A83  3001               	movlw	1	; select bank2/3
 18021  0A84  0085               	movwf	5
 18022  0A85  0800               	movf	0,w
 18023  0A86  0201               	subwf	1,w
 18024  0A87  1C03               	skipc
 18025  0A88  0008               	return
 18026                           
 18027                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18028  0A89  0844               	movf	_DelayOff^(0+128),w
 18029  0A8A  3E04               	addlw	4
 18030  0A8B  0086               	movwf	6
 18031  0A8C  3001               	movlw	1	; select bank2/3
 18032  0A8D  0087               	movwf	7
 18033  0A8E  0181               	clrf	1
 18034                           
 18035                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18036  0A8F  0844               	movf	_DelayOff^(0+128),w
 18037  0A90  0086               	movwf	6
 18038  0A91  3001               	movlw	1	; select bank2/3
 18039  0A92  0087               	movwf	7
 18040  0A93  1081               	bcf	1,1
 18041                           
 18042                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18043  0A94  0020               	movlb	0	; select bank0
 18044  0A95  0860               	movf	DlyOff_Main@sw,w
 18045  0A96  319B  23E7  318A   	fcall	_getDimmerLights_Status
 18046  0A99  3A01               	xorlw	1
 18047  0A9A  1D03               	skipz
 18048  0A9B  2AA6               	goto	l573
 18049                           
 18050                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18051  0A9C  0020               	movlb	0	; select bank0
 18052  0A9D  0860               	movf	DlyOff_Main@sw,w
 18053  0A9E  3196  2686  318A   	fcall	_setDimmerLights_SwOn
 18054                           
 18055                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18056  0AA1  0020               	movlb	0	; select bank0
 18057  0AA2  0860               	movf	DlyOff_Main@sw,w
 18058  0AA3  3192  22CE  318A   	fcall	_setDimmerLights_SwOff
 18059  0AA6                     l573:	
 18060                           
 18061                           ;DelayOff_B1.c: 78: }
 18062                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18063  0AA6  0020               	movlb	0	; select bank0
 18064  0AA7  01DA               	clrf	setProductData@value
 18065  0AA8  0860               	movf	DlyOff_Main@sw,w
 18066  0AA9  3E1A               	addlw	26
 18067  0AAA  319B  23D9         	fcall	_setProductData
 18068  0AAC  0008               	return
 18069  0AAD                     __end_of_DlyOff_Main:	
 18070                           
 18071                           	psect	text125
 18072  1BD9                     __ptext125:	
 18073 ;; *************** function _setProductData *****************
 18074 ;; Defined at:
 18075 ;;		line 592 in file "../src/Main_B1.c"
 18076 ;; Parameters:    Size  Location     Type
 18077 ;;  address         1    wreg     unsigned char 
 18078 ;;  value           1   58[BANK0 ] unsigned char 
 18079 ;; Auto vars:     Size  Location     Type
 18080 ;;  address         1   61[BANK0 ] unsigned char 
 18081 ;; Return value:  Size  Location     Type
 18082 ;;		None               void
 18083 ;; Registers used:
 18084 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;Total ram usage:        4 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    3
 18097 ;; This function calls:
 18098 ;;		Nothing
 18099 ;; This function is called by:
 18100 ;;		_DlyOff_Main
 18101 ;;		_setDelayOff_GO
 18102 ;;		_setDimmerLights_OnOff
 18103 ;;		_setDimmerLights_Dimming
 18104 ;;		_setTemp_Main
 18105 ;;		_setLog_Code
 18106 ;;		_setControl_Lights_Table
 18107 ;;		_setRFSW_AdjControl
 18108 ;;		_setRF_DimmerLights
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112                           
 18113                           ;psect for function _setProductData
 18114  1BD9                     _setProductData:	
 18115                           
 18116                           ;incstack = 0
 18117                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18118                           ;setProductData@address stored from wreg
 18119  1BD9  0020               	movlb	0	; select bank0
 18120  1BDA  00DD               	movwf	setProductData@address
 18121                           
 18122                           ;Main_B1.c: 593: product->Data[address] = value;
 18123  1BDB  085A               	movf	setProductData@value,w
 18124  1BDC  00DB               	movwf	??_setProductData
 18125  1BDD  085D               	movf	setProductData@address,w
 18126  1BDE  076D               	addwf	_product,w
 18127  1BDF  00DC               	movwf	??_setProductData+1
 18128  1BE0  085C               	movf	??_setProductData+1,w
 18129  1BE1  0086               	movwf	6
 18130  1BE2  3002               	movlw	2	; select bank4/5
 18131  1BE3  0087               	movwf	7
 18132  1BE4  085B               	movf	??_setProductData,w
 18133  1BE5  0081               	movwf	1
 18134  1BE6  0008               	return
 18135  1BE7                     __end_of_setProductData:	
 18136                           
 18137                           	psect	text126
 18138  1686                     __ptext126:	
 18139 ;; *************** function _setDimmerLights_SwOn *****************
 18140 ;; Defined at:
 18141 ;;		line 649 in file "../src/Dimmer_B1.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;  sw              1    wreg     unsigned char 
 18144 ;; Auto vars:     Size  Location     Type
 18145 ;;  sw              1    9[BANK0 ] unsigned char 
 18146 ;;  idle            1    8[BANK0 ] unsigned char 
 18147 ;; Return value:  Size  Location     Type
 18148 ;;		None               void
 18149 ;; Registers used:
 18150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;Total ram usage:        5 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    5
 18163 ;; This function calls:
 18164 ;;		_DimmerLights_SelectPointer
 18165 ;;		_setBuz
 18166 ;; This function is called by:
 18167 ;;		_DlyOff_Main
 18168 ;;		_setControl_Lights_Table
 18169 ;;		_setRFSW_Control
 18170 ;;		_setRFSW_AdjControl
 18171 ;;		_setSw_Main
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           
 18176                           ;psect for function _setDimmerLights_SwOn
 18177  1686                     _setDimmerLights_SwOn:	
 18178                           
 18179                           ;incstack = 0
 18180                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18181                           ;setDimmerLights_SwOn@sw stored from wreg
 18182  1686  0020               	movlb	0	; select bank0
 18183  1687  00A9               	movwf	setDimmerLights_SwOn@sw
 18184                           
 18185                           ;Dimmer_B1.c: 650: char idle = 0;
 18186  1688  01A8               	clrf	setDimmerLights_SwOn@idle
 18187                           
 18188                           ;Dimmer_B1.c: 652: if (idle == 0) {
 18189  1689  08A8               	movf	setDimmerLights_SwOn@idle,f
 18190  168A  1D03               	skipz
 18191  168B  2EB0               	goto	l9152
 18192                           
 18193                           ;Dimmer_B1.c: 653: if (sw == 1) {
 18194  168C  0829               	movf	setDimmerLights_SwOn@sw,w
 18195  168D  3A01               	xorlw	1
 18196  168E  1D03               	skipz
 18197  168F  2E9D               	goto	l9142
 18198                           
 18199                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18200  1690  01A6               	clrf	_setDimmerLights_SwOn$2241
 18201  1691  0AA6               	incf	_setDimmerLights_SwOn$2241,f
 18202  1692  0022               	movlb	2	; select bank2
 18203  1693  1A66               	btfsc	_DimmerLights2^(0+256),4
 18204  1694  2E9A               	goto	l9140
 18205  1695  0021               	movlb	1	; select bank1
 18206  1696  1A69               	btfsc	_DimmerIntr2^(0+128),4
 18207  1697  2E9A               	goto	l9140
 18208  1698  0020               	movlb	0	; select bank0
 18209  1699  01A6               	clrf	_setDimmerLights_SwOn$2241
 18210  169A                     l9140:	
 18211  169A  0020               	movlb	0	; select bank0
 18212  169B  0826               	movf	_setDimmerLights_SwOn$2241,w
 18213  169C  2EAD               	goto	L11
 18214  169D                     l9142:	
 18215                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 18216                           
 18217  169D  0829               	movf	setDimmerLights_SwOn@sw,w
 18218  169E  3A02               	xorlw	2
 18219  169F  1D03               	skipz
 18220  16A0  2EB0               	goto	l9152
 18221                           
 18222                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18223  16A1  01A7               	clrf	_setDimmerLights_SwOn$2250
 18224  16A2  0AA7               	incf	_setDimmerLights_SwOn$2250,f
 18225  16A3  0022               	movlb	2	; select bank2
 18226  16A4  1A5E               	btfsc	_DimmerLights1^(0+256),4
 18227  16A5  2EAB               	goto	l9150
 18228  16A6  0021               	movlb	1	; select bank1
 18229  16A7  1A62               	btfsc	_DimmerIntr1^(0+128),4
 18230  16A8  2EAB               	goto	l9150
 18231  16A9  0020               	movlb	0	; select bank0
 18232  16AA  01A7               	clrf	_setDimmerLights_SwOn$2250
 18233  16AB                     l9150:	
 18234  16AB  0020               	movlb	0	; select bank0
 18235  16AC  0827               	movf	_setDimmerLights_SwOn$2250,w
 18236  16AD                     L11:	
 18237  16AD  00F9               	movwf	??_setDimmerLights_SwOn
 18238  16AE  0879               	movf	??_setDimmerLights_SwOn,w
 18239  16AF  00A8               	movwf	setDimmerLights_SwOn@idle
 18240  16B0                     l9152:	
 18241                           
 18242                           ;Dimmer_B1.c: 657: }
 18243                           ;Dimmer_B1.c: 658: }
 18244                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 18245  16B0  0829               	movf	setDimmerLights_SwOn@sw,w
 18246  16B1  319D  2568  3196   	fcall	_DimmerLights_SelectPointer
 18247                           
 18248                           ;Dimmer_B1.c: 676: if (idle == 0) {
 18249  16B4  0020               	movlb	0	; select bank0
 18250  16B5  08A8               	movf	setDimmerLights_SwOn@idle,f
 18251  16B6  1D03               	skipz
 18252  16B7  0008               	return
 18253                           
 18254                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 18255  16B8  0021               	movlb	1	; select bank1
 18256  16B9  0846               	movf	_DimmerLights^(0+128),w
 18257  16BA  0086               	movwf	6
 18258  16BB  3001               	movlw	1	; select bank2/3
 18259  16BC  0087               	movwf	7
 18260  16BD  1401               	bsf	1,0
 18261                           
 18262                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 18263  16BE  0A46               	incf	_DimmerLights^(0+128),w
 18264  16BF  0086               	movwf	6
 18265  16C0  3001               	movlw	1	; select bank2/3
 18266  16C1  0087               	movwf	7
 18267  16C2  1801               	btfsc	1,0
 18268  16C3  2ED4               	goto	l9160
 18269                           
 18270                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 18271  16C4  0A46               	incf	_DimmerLights^(0+128),w
 18272  16C5  0086               	movwf	6
 18273  16C6  3001               	movlw	1	; select bank2/3
 18274  16C7  0087               	movwf	7
 18275  16C8  1401               	bsf	1,0
 18276                           
 18277                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 18278  16C9  0846               	movf	_DimmerLights^(0+128),w
 18279  16CA  0086               	movwf	6
 18280  16CB  3001               	movlw	1	; select bank2/3
 18281  16CC  0087               	movwf	7
 18282  16CD  1481               	bsf	1,1
 18283                           
 18284                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 18285  16CE  0846               	movf	_DimmerLights^(0+128),w
 18286  16CF  0086               	movwf	6
 18287  16D0  3001               	movlw	1	; select bank2/3
 18288  16D1  0087               	movwf	7
 18289  16D2  1501               	bsf	1,2
 18290                           
 18291                           ;Dimmer_B1.c: 682: } else {
 18292  16D3  2ED9               	goto	l9162
 18293  16D4                     l9160:	
 18294                           
 18295                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 18296  16D4  0A46               	incf	_DimmerLights^(0+128),w
 18297  16D5  0086               	movwf	6
 18298  16D6  3001               	movlw	1	; select bank2/3
 18299  16D7  0087               	movwf	7
 18300  16D8  1001               	bcf	1,0
 18301  16D9                     l9162:	
 18302                           
 18303                           ;Dimmer_B1.c: 684: }
 18304                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 18305  16D9  3064               	movlw	100
 18306  16DA  0020               	movlb	0	; select bank0
 18307  16DB  00A4               	movwf	setBuz@time
 18308  16DC  3000               	movlw	0
 18309  16DD  00A5               	movwf	setBuz@time+1
 18310  16DE  3001               	movlw	1
 18311  16DF  3195  2584         	fcall	_setBuz
 18312  16E1  0008               	return
 18313  16E2                     __end_of_setDimmerLights_SwOn:	
 18314                           
 18315                           	psect	text127
 18316  1584                     __ptext127:	
 18317 ;; *************** function _setBuz *****************
 18318 ;; Defined at:
 18319 ;;		line 22 in file "../src/Buzzer_B1.c"
 18320 ;; Parameters:    Size  Location     Type
 18321 ;;  count           1    wreg     unsigned char 
 18322 ;;  time            2    4[BANK0 ] int 
 18323 ;; Auto vars:     Size  Location     Type
 18324 ;;  count           1    8[COMMON] unsigned char 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;		None               void
 18327 ;; Registers used:
 18328 ;;		wreg, status,2, status,0, pclath, cstack
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;Total ram usage:        4 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    4
 18341 ;; This function calls:
 18342 ;;		___awdiv
 18343 ;; This function is called by:
 18344 ;;		_setDimmerLights_SwOn
 18345 ;;		_setDimmerLights_Dimming
 18346 ;;		_my_MainTimer
 18347 ;;		_Exception_Main
 18348 ;;		_setTemp_Main
 18349 ;;		_setLog_Code
 18350 ;;		_setRFSW_Control
 18351 ;;		_setSw_Main
 18352 ;; This function uses a non-reentrant model
 18353 ;;
 18354                           
 18355                           
 18356                           ;psect for function _setBuz
 18357  1584                     _setBuz:	
 18358                           
 18359                           ;incstack = 0
 18360                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18361                           ;setBuz@count stored from wreg
 18362  1584  00F8               	movwf	setBuz@count
 18363                           
 18364                           ;Buzzer_B1.c: 23: time /= 20;
 18365  1585  3014               	movlw	20
 18366  1586  00F2               	movwf	___awdiv@divisor
 18367  1587  3000               	movlw	0
 18368  1588  00F3               	movwf	___awdiv@divisor+1
 18369  1589  0020               	movlb	0	; select bank0
 18370  158A  0825               	movf	setBuz@time+1,w
 18371  158B  01F5               	clrf	___awdiv@dividend+1
 18372  158C  07F5               	addwf	___awdiv@dividend+1,f
 18373  158D  0824               	movf	setBuz@time,w
 18374  158E  01F4               	clrf	___awdiv@dividend
 18375  158F  07F4               	addwf	___awdiv@dividend,f
 18376  1590  3195  25D7  3195   	fcall	___awdiv
 18377  1593  0873               	movf	?___awdiv+1,w
 18378  1594  0020               	movlb	0	; select bank0
 18379  1595  01A5               	clrf	setBuz@time+1
 18380  1596  07A5               	addwf	setBuz@time+1,f
 18381  1597  0872               	movf	?___awdiv,w
 18382  1598  01A4               	clrf	setBuz@time
 18383  1599  07A4               	addwf	setBuz@time,f
 18384                           
 18385                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18386  159A  0021               	movlb	1	; select bank1
 18387  159B  1C2E               	btfss	_Buz1^(0+128),0
 18388  159C  0008               	return
 18389                           
 18390                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18391  159D  18AE               	btfsc	_Buz1^(0+128),1
 18392  159E  2DB3               	goto	l96
 18393                           
 18394                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18395  159F  14AE               	bsf	_Buz1^(0+128),1
 18396                           
 18397                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18398  15A0  01AF               	clrf	(_Buz1^(0+128)+1)
 18399  15A1  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18400                           
 18401                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18402  15A2  0878               	movf	setBuz@count,w
 18403  15A3  00F7               	movwf	??_setBuz
 18404  15A4  0877               	movf	??_setBuz,w
 18405  15A5  00B1               	movwf	(_Buz1^(0+128)+3)
 18406                           
 18407                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18408  15A6  0020               	movlb	0	; select bank0
 18409  15A7  0825               	movf	setBuz@time+1,w
 18410  15A8  0021               	movlb	1	; select bank1
 18411  15A9  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18412  15AA  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18413  15AB  0020               	movlb	0	; select bank0
 18414  15AC  0824               	movf	setBuz@time,w
 18415  15AD  0021               	movlb	1	; select bank1
 18416  15AE  01B4               	clrf	(_Buz1^(0+128)+6)
 18417  15AF  07B4               	addwf	(_Buz1^(0+128)+6),f
 18418                           
 18419                           ;Buzzer_B1.c: 30: RB3 = 1;
 18420  15B0  0020               	movlb	0	; select bank0
 18421  15B1  158D               	bsf	13,3	;volatile
 18422                           
 18423                           ;Buzzer_B1.c: 31: } else {
 18424  15B2  0008               	return
 18425  15B3                     l96:	
 18426                           
 18427                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18428  15B3  19AE               	btfsc	_Buz1^(0+128),3
 18429  15B4  2DC5               	goto	l98
 18430                           
 18431                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18432  15B5  15AE               	bsf	_Buz1^(0+128),3
 18433                           
 18434                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18435  15B6  0878               	movf	setBuz@count,w
 18436  15B7  00F7               	movwf	??_setBuz
 18437  15B8  0877               	movf	??_setBuz,w
 18438  15B9  00B2               	movwf	(_Buz1^(0+128)+4)
 18439                           
 18440                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18441  15BA  0020               	movlb	0	; select bank0
 18442  15BB  0825               	movf	setBuz@time+1,w
 18443  15BC  0021               	movlb	1	; select bank1
 18444  15BD  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18445  15BE  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18446  15BF  0020               	movlb	0	; select bank0
 18447  15C0  0824               	movf	setBuz@time,w
 18448  15C1  0021               	movlb	1	; select bank1
 18449  15C2  01B6               	clrf	(_Buz1^(0+128)+8)
 18450  15C3  07B6               	addwf	(_Buz1^(0+128)+8),f
 18451                           
 18452                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18453  15C4  0008               	return
 18454  15C5                     l98:	
 18455  15C5  1A2E               	btfsc	_Buz1^(0+128),4
 18456  15C6  0008               	return
 18457                           
 18458                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18459  15C7  162E               	bsf	_Buz1^(0+128),4
 18460                           
 18461                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18462  15C8  0878               	movf	setBuz@count,w
 18463  15C9  00F7               	movwf	??_setBuz
 18464  15CA  0877               	movf	??_setBuz,w
 18465  15CB  00B3               	movwf	(_Buz1^(0+128)+5)
 18466                           
 18467                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18468  15CC  0020               	movlb	0	; select bank0
 18469  15CD  0825               	movf	setBuz@time+1,w
 18470  15CE  0021               	movlb	1	; select bank1
 18471  15CF  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18472  15D0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18473  15D1  0020               	movlb	0	; select bank0
 18474  15D2  0824               	movf	setBuz@time,w
 18475  15D3  0021               	movlb	1	; select bank1
 18476  15D4  01B8               	clrf	(_Buz1^(0+128)+10)
 18477  15D5  07B8               	addwf	(_Buz1^(0+128)+10),f
 18478  15D6  0008               	return
 18479  15D7                     __end_of_setBuz:	
 18480                           
 18481                           	psect	text128
 18482  15D7                     __ptext128:	
 18483 ;; *************** function ___awdiv *****************
 18484 ;; Defined at:
 18485 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;  divisor         2    2[COMMON] int 
 18488 ;;  dividend        2    4[COMMON] int 
 18489 ;; Auto vars:     Size  Location     Type
 18490 ;;  quotient        2    2[BANK0 ] int 
 18491 ;;  sign            1    1[BANK0 ] unsigned char 
 18492 ;;  counter         1    0[BANK0 ] unsigned char 
 18493 ;; Return value:  Size  Location     Type
 18494 ;;                  2    2[COMMON] int 
 18495 ;; Registers used:
 18496 ;;		wreg, status,2, status,0
 18497 ;; Tracked objects:
 18498 ;;		On entry : 0/0
 18499 ;;		On exit  : 0/0
 18500 ;;		Unchanged: 0/0
 18501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18503 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;Total ram usage:        9 bytes
 18507 ;; Hardware stack levels used:    1
 18508 ;; Hardware stack levels required when called:    3
 18509 ;; This function calls:
 18510 ;;		Nothing
 18511 ;; This function is called by:
 18512 ;;		_setBuz
 18513 ;; This function uses a non-reentrant model
 18514 ;;
 18515                           
 18516                           
 18517                           ;psect for function ___awdiv
 18518  15D7                     ___awdiv:	
 18519                           
 18520                           ;incstack = 0
 18521                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18522  15D7  0020               	movlb	0	; select bank0
 18523  15D8  01A1               	clrf	___awdiv@sign
 18524  15D9  1FF3               	btfss	___awdiv@divisor+1,7
 18525  15DA  2DE2               	goto	l9026
 18526  15DB  09F2               	comf	___awdiv@divisor,f
 18527  15DC  09F3               	comf	___awdiv@divisor+1,f
 18528  15DD  0AF2               	incf	___awdiv@divisor,f
 18529  15DE  1903               	skipnz
 18530  15DF  0AF3               	incf	___awdiv@divisor+1,f
 18531  15E0  01A1               	clrf	___awdiv@sign
 18532  15E1  0AA1               	incf	___awdiv@sign,f
 18533  15E2                     l9026:	
 18534  15E2  1FF5               	btfss	___awdiv@dividend+1,7
 18535  15E3  2DED               	goto	l9032
 18536  15E4  09F4               	comf	___awdiv@dividend,f
 18537  15E5  09F5               	comf	___awdiv@dividend+1,f
 18538  15E6  0AF4               	incf	___awdiv@dividend,f
 18539  15E7  1903               	skipnz
 18540  15E8  0AF5               	incf	___awdiv@dividend+1,f
 18541  15E9  3001               	movlw	1
 18542  15EA  00F6               	movwf	??___awdiv
 18543  15EB  0876               	movf	??___awdiv,w
 18544  15EC  06A1               	xorwf	___awdiv@sign,f
 18545  15ED                     l9032:	
 18546  15ED  01A2               	clrf	___awdiv@quotient
 18547  15EE  01A3               	clrf	___awdiv@quotient+1
 18548  15EF  0873               	movf	___awdiv@divisor+1,w
 18549  15F0  0472               	iorwf	___awdiv@divisor,w
 18550  15F1  1903               	skipnz
 18551  15F2  2E1C               	goto	l9054
 18552  15F3  01A0               	clrf	___awdiv@counter
 18553  15F4  0AA0               	incf	___awdiv@counter,f
 18554  15F5                     l9042:	
 18555  15F5  1BF3               	btfsc	___awdiv@divisor+1,7
 18556  15F6  2E01               	goto	l9044
 18557  15F7  3001               	movlw	1
 18558  15F8                     u10045:	
 18559  15F8  35F2               	lslf	___awdiv@divisor,f
 18560  15F9  0DF3               	rlf	___awdiv@divisor+1,f
 18561  15FA  0B89               	decfsz	9,f
 18562  15FB  2DF8               	goto	u10045
 18563  15FC  3001               	movlw	1
 18564  15FD  00F6               	movwf	??___awdiv
 18565  15FE  0876               	movf	??___awdiv,w
 18566  15FF  07A0               	addwf	___awdiv@counter,f
 18567  1600  2DF5               	goto	l9042
 18568  1601                     l9044:	
 18569  1601  3001               	movlw	1
 18570  1602                     u10065:	
 18571  1602  35A2               	lslf	___awdiv@quotient,f
 18572  1603  0DA3               	rlf	___awdiv@quotient+1,f
 18573  1604  0B89               	decfsz	9,f
 18574  1605  2E02               	goto	u10065
 18575  1606  0873               	movf	___awdiv@divisor+1,w
 18576  1607  0275               	subwf	___awdiv@dividend+1,w
 18577  1608  1D03               	skipz
 18578  1609  2E0C               	goto	u10075
 18579  160A  0872               	movf	___awdiv@divisor,w
 18580  160B  0274               	subwf	___awdiv@dividend,w
 18581  160C                     u10075:	
 18582  160C  1C03               	skipc
 18583  160D  2E13               	goto	l9050
 18584  160E  0872               	movf	___awdiv@divisor,w
 18585  160F  02F4               	subwf	___awdiv@dividend,f
 18586  1610  0873               	movf	___awdiv@divisor+1,w
 18587  1611  3BF5               	subwfb	___awdiv@dividend+1,f
 18588  1612  1422               	bsf	___awdiv@quotient,0
 18589  1613                     l9050:	
 18590  1613  3001               	movlw	1
 18591  1614                     u10085:	
 18592  1614  36F3               	lsrf	___awdiv@divisor+1,f
 18593  1615  0CF2               	rrf	___awdiv@divisor,f
 18594  1616  0B89               	decfsz	9,f
 18595  1617  2E14               	goto	u10085
 18596  1618  3001               	movlw	1
 18597  1619  02A0               	subwf	___awdiv@counter,f
 18598  161A  1D03               	btfss	3,2
 18599  161B  2E01               	goto	l9044
 18600  161C                     l9054:	
 18601  161C  0821               	movf	___awdiv@sign,w
 18602  161D  1903               	btfsc	3,2
 18603  161E  2E24               	goto	l9058
 18604  161F  09A2               	comf	___awdiv@quotient,f
 18605  1620  09A3               	comf	___awdiv@quotient+1,f
 18606  1621  0AA2               	incf	___awdiv@quotient,f
 18607  1622  1903               	skipnz
 18608  1623  0AA3               	incf	___awdiv@quotient+1,f
 18609  1624                     l9058:	
 18610  1624  0823               	movf	___awdiv@quotient+1,w
 18611  1625  01F3               	clrf	?___awdiv+1
 18612  1626  07F3               	addwf	?___awdiv+1,f
 18613  1627  0822               	movf	___awdiv@quotient,w
 18614  1628  01F2               	clrf	?___awdiv
 18615  1629  07F2               	addwf	?___awdiv,f
 18616  162A  0008               	return
 18617  162B                     __end_of___awdiv:	
 18618                           
 18619                           	psect	text129
 18620  12CE                     __ptext129:	
 18621 ;; *************** function _setDimmerLights_SwOff *****************
 18622 ;; Defined at:
 18623 ;;		line 690 in file "../src/Dimmer_B1.c"
 18624 ;; Parameters:    Size  Location     Type
 18625 ;;  sw              1    wreg     unsigned char 
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;  sw              1    4[COMMON] unsigned char 
 18628 ;; Return value:  Size  Location     Type
 18629 ;;		None               void
 18630 ;; Registers used:
 18631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;Total ram usage:        1 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    4
 18644 ;; This function calls:
 18645 ;;		_DimmerLights_SelectPointer
 18646 ;; This function is called by:
 18647 ;;		_DlyOff_Main
 18648 ;;		_Exception_Main
 18649 ;;		_setControl_Lights_Table
 18650 ;;		_setRFSW_Control
 18651 ;;		_setRFSW_AdjControl
 18652 ;;		_setSw_Main
 18653 ;; This function uses a non-reentrant model
 18654 ;;
 18655                           
 18656                           
 18657                           ;psect for function _setDimmerLights_SwOff
 18658  12CE                     _setDimmerLights_SwOff:	
 18659                           
 18660                           ;incstack = 0
 18661                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18662                           ;setDimmerLights_SwOff@sw stored from wreg
 18663  12CE  00F4               	movwf	setDimmerLights_SwOff@sw
 18664                           
 18665                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18666  12CF  0874               	movf	setDimmerLights_SwOff@sw,w
 18667  12D0  319D  2568  3192   	fcall	_DimmerLights_SelectPointer
 18668                           
 18669                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18670  12D3  0021               	movlb	1	; select bank1
 18671  12D4  0846               	movf	_DimmerLights^(0+128),w
 18672  12D5  0086               	movwf	6
 18673  12D6  3001               	movlw	1	; select bank2/3
 18674  12D7  0087               	movwf	7
 18675  12D8  1C01               	btfss	1,0
 18676  12D9  0008               	return
 18677                           
 18678                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18679  12DA  0846               	movf	_DimmerLights^(0+128),w
 18680  12DB  0086               	movwf	6
 18681  12DC  3001               	movlw	1	; select bank2/3
 18682  12DD  0087               	movwf	7
 18683  12DE  1001               	bcf	1,0
 18684                           
 18685                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18686  12DF  0A46               	incf	_DimmerLights^(0+128),w
 18687  12E0  0086               	movwf	6
 18688  12E1  3001               	movlw	1	; select bank2/3
 18689  12E2  0087               	movwf	7
 18690  12E3  1C01               	btfss	1,0
 18691  12E4  2AFB               	goto	l6640
 18692                           
 18693                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18694  12E5  0846               	movf	_DimmerLights^(0+128),w
 18695  12E6  0086               	movwf	6
 18696  12E7  3001               	movlw	1	; select bank2/3
 18697  12E8  0087               	movwf	7
 18698  12E9  1D81               	btfss	1,3
 18699  12EA  0008               	return
 18700                           
 18701                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18702  12EB  0846               	movf	_DimmerLights^(0+128),w
 18703  12EC  0086               	movwf	6
 18704  12ED  3001               	movlw	1	; select bank2/3
 18705  12EE  0087               	movwf	7
 18706  12EF  1181               	bcf	1,3
 18707                           
 18708                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18709  12F0  0846               	movf	_DimmerLights^(0+128),w
 18710  12F1  0086               	movwf	6
 18711  12F2  3001               	movlw	1	; select bank2/3
 18712  12F3  0087               	movwf	7
 18713  12F4  1601               	bsf	1,4
 18714                           
 18715                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18716  12F5  0846               	movf	_DimmerLights^(0+128),w
 18717  12F6  0086               	movwf	6
 18718  12F7  3001               	movlw	1	; select bank2/3
 18719  12F8  0087               	movwf	7
 18720  12F9  1281               	bcf	1,5
 18721                           
 18722                           ;Dimmer_B1.c: 701: }
 18723                           ;Dimmer_B1.c: 702: } else {
 18724  12FA  0008               	return
 18725  12FB                     l6640:	
 18726                           
 18727                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18728  12FB  0846               	movf	_DimmerLights^(0+128),w
 18729  12FC  0086               	movwf	6
 18730  12FD  3001               	movlw	1	; select bank2/3
 18731  12FE  0087               	movwf	7
 18732  12FF  1481               	bsf	1,1
 18733                           
 18734                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18735  1300  0846               	movf	_DimmerLights^(0+128),w
 18736  1301  0086               	movwf	6
 18737  1302  3001               	movlw	1	; select bank2/3
 18738  1303  0087               	movwf	7
 18739  1304  1101               	bcf	1,2
 18740  1305  0008               	return
 18741  1306                     __end_of_setDimmerLights_SwOff:	
 18742                           
 18743                           	psect	text130
 18744  1BE7                     __ptext130:	
 18745 ;; *************** function _getDimmerLights_Status *****************
 18746 ;; Defined at:
 18747 ;;		line 994 in file "../src/Dimmer_B1.c"
 18748 ;; Parameters:    Size  Location     Type
 18749 ;;  lights          1    wreg     unsigned char 
 18750 ;; Auto vars:     Size  Location     Type
 18751 ;;  lights          1    4[COMMON] unsigned char 
 18752 ;;  status          1    5[COMMON] unsigned char 
 18753 ;; Return value:  Size  Location     Type
 18754 ;;                  1    wreg      unsigned char 
 18755 ;; Registers used:
 18756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18757 ;; Tracked objects:
 18758 ;;		On entry : 0/0
 18759 ;;		On exit  : 0/0
 18760 ;;		Unchanged: 0/0
 18761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18763 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18765 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18766 ;;Total ram usage:        2 bytes
 18767 ;; Hardware stack levels used:    1
 18768 ;; Hardware stack levels required when called:    4
 18769 ;; This function calls:
 18770 ;;		_DimmerLights_SelectPointer
 18771 ;; This function is called by:
 18772 ;;		_DlyOff_Main
 18773 ;;		_Exception_Main
 18774 ;;		_setControl_Lights_Table
 18775 ;;		_setRFSW_Control
 18776 ;;		_setRFSW_AdjControl
 18777 ;; This function uses a non-reentrant model
 18778 ;;
 18779                           
 18780                           
 18781                           ;psect for function _getDimmerLights_Status
 18782  1BE7                     _getDimmerLights_Status:	
 18783                           
 18784                           ;incstack = 0
 18785                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18786                           ;getDimmerLights_Status@lights stored from wreg
 18787  1BE7  00F4               	movwf	getDimmerLights_Status@lights
 18788                           
 18789                           ;Dimmer_B1.c: 995: DimmerLights_SelectPointer(lights);
 18790  1BE8  0874               	movf	getDimmerLights_Status@lights,w
 18791  1BE9  319D  2568         	fcall	_DimmerLights_SelectPointer
 18792                           
 18793                           ;Dimmer_B1.c: 996: char status = DimmerLights->Status == 1 ? 1 : 0;
 18794  1BEB  0021               	movlb	1	; select bank1
 18795  1BEC  0A46               	incf	_DimmerLights^(0+128),w
 18796  1BED  0086               	movwf	6
 18797  1BEE  3001               	movlw	1	; select bank2/3
 18798  1BEF  0087               	movwf	7
 18799  1BF0  3000               	movlw	0
 18800  1BF1  1801               	btfsc	1,0
 18801  1BF2  3001               	movlw	1
 18802  1BF3  00F5               	movwf	getDimmerLights_Status@status
 18803                           
 18804                           ;Dimmer_B1.c: 997: return status;
 18805  1BF4  0875               	movf	getDimmerLights_Status@status,w
 18806  1BF5  0008               	return
 18807  1BF6                     __end_of_getDimmerLights_Status:	
 18808                           
 18809                           	psect	text131
 18810  1D68                     __ptext131:	
 18811 ;; *************** function _DimmerLights_SelectPointer *****************
 18812 ;; Defined at:
 18813 ;;		line 572 in file "../src/Dimmer_B1.c"
 18814 ;; Parameters:    Size  Location     Type
 18815 ;;  lights          1    wreg     unsigned char 
 18816 ;; Auto vars:     Size  Location     Type
 18817 ;;  lights          1    3[COMMON] unsigned char 
 18818 ;; Return value:  Size  Location     Type
 18819 ;;		None               void
 18820 ;; Registers used:
 18821 ;;		wreg
 18822 ;; Tracked objects:
 18823 ;;		On entry : 0/0
 18824 ;;		On exit  : 0/0
 18825 ;;		Unchanged: 0/0
 18826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;Total ram usage:        2 bytes
 18832 ;; Hardware stack levels used:    1
 18833 ;; Hardware stack levels required when called:    3
 18834 ;; This function calls:
 18835 ;;		Nothing
 18836 ;; This function is called by:
 18837 ;;		_setDimmerLights_SwOn
 18838 ;;		_setDimmerLights_SwOff
 18839 ;;		_setDimmerLights_DimmingOn
 18840 ;;		_setDimmerLights_Main
 18841 ;;		_getDimmerLights_Status
 18842 ;;		_setDimmerLights_DimmingRun
 18843 ;;		_setDimmerLights_Status
 18844 ;; This function uses a non-reentrant model
 18845 ;;
 18846                           
 18847                           
 18848                           ;psect for function _DimmerLights_SelectPointer
 18849  1D68                     _DimmerLights_SelectPointer:	
 18850                           
 18851                           ;incstack = 0
 18852                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18853                           ;DimmerLights_SelectPointer@lights stored from wreg
 18854  1D68  00F3               	movwf	DimmerLights_SelectPointer@lights
 18855                           
 18856                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18857  1D69  0873               	movf	DimmerLights_SelectPointer@lights,w
 18858  1D6A  3A01               	xorlw	1
 18859  1D6B  1D03               	skipz
 18860  1D6C  2D73               	goto	l6312
 18861                           
 18862                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18863  1D6D  305E               	movlw	_DimmerLights1& (0+255)
 18864  1D6E  00F2               	movwf	??_DimmerLights_SelectPointer
 18865  1D6F  0872               	movf	??_DimmerLights_SelectPointer,w
 18866  1D70  0021               	movlb	1	; select bank1
 18867  1D71  00C6               	movwf	_DimmerLights^(0+128)
 18868                           
 18869                           ;Dimmer_B1.c: 576: }
 18870  1D72  0008               	return
 18871  1D73                     l6312:	
 18872                           
 18873                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18874  1D73  0873               	movf	DimmerLights_SelectPointer@lights,w
 18875  1D74  3A02               	xorlw	2
 18876  1D75  1D03               	skipz
 18877  1D76  0008               	return
 18878                           
 18879                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18880  1D77  3066               	movlw	_DimmerLights2& (0+255)
 18881  1D78  00F2               	movwf	??_DimmerLights_SelectPointer
 18882  1D79  0872               	movf	??_DimmerLights_SelectPointer,w
 18883  1D7A  0021               	movlb	1	; select bank1
 18884  1D7B  00C6               	movwf	_DimmerLights^(0+128)
 18885  1D7C  0008               	return
 18886  1D7D                     __end_of_DimmerLights_SelectPointer:	
 18887                           
 18888                           	psect	text132
 18889  1B13                     __ptext132:	
 18890 ;; *************** function _DelayOff_Initialization *****************
 18891 ;; Defined at:
 18892 ;;		line 26 in file "../src/DelayOff_B1.c"
 18893 ;; Parameters:    Size  Location     Type
 18894 ;;		None
 18895 ;; Auto vars:     Size  Location     Type
 18896 ;;		None
 18897 ;; Return value:  Size  Location     Type
 18898 ;;		None               void
 18899 ;; Registers used:
 18900 ;;		wreg, status,2, status,0, pclath, cstack
 18901 ;; Tracked objects:
 18902 ;;		On entry : 0/0
 18903 ;;		On exit  : 0/0
 18904 ;;		Unchanged: 0/0
 18905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;Total ram usage:        0 bytes
 18911 ;; Hardware stack levels used:    1
 18912 ;; Hardware stack levels required when called:    5
 18913 ;; This function calls:
 18914 ;;		_DlyOff_Initialization
 18915 ;; This function is called by:
 18916 ;;		_main
 18917 ;; This function uses a non-reentrant model
 18918 ;;
 18919                           
 18920                           
 18921                           ;psect for function _DelayOff_Initialization
 18922  1B13                     _DelayOff_Initialization:	
 18923                           
 18924                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18925                           
 18926                           ;incstack = 0
 18927                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18928  1B13  3001               	movlw	1
 18929  1B14  319A  22DA  319B   	fcall	_DlyOff_Initialization
 18930                           
 18931                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18932  1B17  3002               	movlw	2
 18933  1B18  319A  22DA         	fcall	_DlyOff_Initialization
 18934  1B1A  0008               	return
 18935  1B1B                     __end_of_DelayOff_Initialization:	
 18936                           
 18937                           	psect	text133
 18938  1ADA                     __ptext133:	
 18939 ;; *************** function _DlyOff_Initialization *****************
 18940 ;; Defined at:
 18941 ;;		line 56 in file "../src/DelayOff_B1.c"
 18942 ;; Parameters:    Size  Location     Type
 18943 ;;  sw              1    wreg     unsigned char 
 18944 ;; Auto vars:     Size  Location     Type
 18945 ;;  sw              1    4[COMMON] unsigned char 
 18946 ;; Return value:  Size  Location     Type
 18947 ;;		None               void
 18948 ;; Registers used:
 18949 ;;		wreg, status,2, status,0, pclath, cstack
 18950 ;; Tracked objects:
 18951 ;;		On entry : 0/0
 18952 ;;		On exit  : 0/0
 18953 ;;		Unchanged: 0/0
 18954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18958 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18959 ;;Total ram usage:        1 bytes
 18960 ;; Hardware stack levels used:    1
 18961 ;; Hardware stack levels required when called:    4
 18962 ;; This function calls:
 18963 ;;		_DelayOffPointSelect
 18964 ;; This function is called by:
 18965 ;;		_DelayOff_Initialization
 18966 ;; This function uses a non-reentrant model
 18967 ;;
 18968                           
 18969                           
 18970                           ;psect for function _DlyOff_Initialization
 18971  1ADA                     _DlyOff_Initialization:	
 18972                           
 18973                           ;incstack = 0
 18974                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18975                           ;DlyOff_Initialization@sw stored from wreg
 18976  1ADA  00F4               	movwf	DlyOff_Initialization@sw
 18977                           
 18978                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18979  1ADB  0874               	movf	DlyOff_Initialization@sw,w
 18980  1ADC  319D  2553         	fcall	_DelayOffPointSelect
 18981  1ADE  0008               	return
 18982  1ADF                     __end_of_DlyOff_Initialization:	
 18983                           
 18984                           	psect	text134
 18985  1D53                     __ptext134:	
 18986 ;; *************** function _DelayOffPointSelect *****************
 18987 ;; Defined at:
 18988 ;;		line 7 in file "../src/DelayOff_B1.c"
 18989 ;; Parameters:    Size  Location     Type
 18990 ;;  sw              1    wreg     unsigned char 
 18991 ;; Auto vars:     Size  Location     Type
 18992 ;;  sw              1    3[COMMON] unsigned char 
 18993 ;; Return value:  Size  Location     Type
 18994 ;;		None               void
 18995 ;; Registers used:
 18996 ;;		wreg
 18997 ;; Tracked objects:
 18998 ;;		On entry : 0/0
 18999 ;;		On exit  : 0/0
 19000 ;;		Unchanged: 0/0
 19001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19006 ;;Total ram usage:        2 bytes
 19007 ;; Hardware stack levels used:    1
 19008 ;; Hardware stack levels required when called:    3
 19009 ;; This function calls:
 19010 ;;		Nothing
 19011 ;; This function is called by:
 19012 ;;		_DlyOff_Initialization
 19013 ;;		_DlyOff_Main
 19014 ;;		_setDelayOff_GO
 19015 ;;		_getDelayOff_GO
 19016 ;; This function uses a non-reentrant model
 19017 ;;
 19018                           
 19019                           
 19020                           ;psect for function _DelayOffPointSelect
 19021  1D53                     _DelayOffPointSelect:	
 19022                           
 19023                           ;incstack = 0
 19024                           ; Regs used in _DelayOffPointSelect: [wreg]
 19025                           ;DelayOffPointSelect@sw stored from wreg
 19026  1D53  00F3               	movwf	DelayOffPointSelect@sw
 19027                           
 19028                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19029  1D54  0873               	movf	DelayOffPointSelect@sw,w
 19030  1D55  3A01               	xorlw	1
 19031  1D56  1D03               	skipz
 19032  1D57  2D5E               	goto	l6302
 19033                           
 19034                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19035  1D58  30D0               	movlw	_DlySw1& (0+255)
 19036  1D59  00F2               	movwf	??_DelayOffPointSelect
 19037  1D5A  0872               	movf	??_DelayOffPointSelect,w
 19038  1D5B  0021               	movlb	1	; select bank1
 19039  1D5C  00C4               	movwf	_DelayOff^(0+128)
 19040                           
 19041                           ;DelayOff_B1.c: 11: }
 19042  1D5D  0008               	return
 19043  1D5E                     l6302:	
 19044                           
 19045                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19046  1D5E  0873               	movf	DelayOffPointSelect@sw,w
 19047  1D5F  3A02               	xorlw	2
 19048  1D60  1D03               	skipz
 19049  1D61  0008               	return
 19050                           
 19051                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19052  1D62  30D5               	movlw	_DlySw2& (0+255)
 19053  1D63  00F2               	movwf	??_DelayOffPointSelect
 19054  1D64  0872               	movf	??_DelayOffPointSelect,w
 19055  1D65  0021               	movlb	1	; select bank1
 19056  1D66  00C4               	movwf	_DelayOff^(0+128)
 19057  1D67  0008               	return
 19058  1D68                     __end_of_DelayOffPointSelect:	
 19059                           
 19060                           	psect	text135
 19061  13FC                     __ptext135:	
 19062 ;; *************** function _Buzzer_Main *****************
 19063 ;; Defined at:
 19064 ;;		line 46 in file "../src/Buzzer_B1.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;		None
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;		None
 19069 ;; Return value:  Size  Location     Type
 19070 ;;		None               void
 19071 ;; Registers used:
 19072 ;;		wreg, status,2, status,0
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19082 ;;Total ram usage:        1 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; Hardware stack levels required when called:    3
 19085 ;; This function calls:
 19086 ;;		Nothing
 19087 ;; This function is called by:
 19088 ;;		_main
 19089 ;; This function uses a non-reentrant model
 19090 ;;
 19091                           
 19092                           
 19093                           ;psect for function _Buzzer_Main
 19094  13FC                     _Buzzer_Main:	
 19095                           
 19096                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19097                           
 19098                           ;incstack = 0
 19099                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19100  13FC  0021               	movlb	1	; select bank1
 19101  13FD  1CAE               	btfss	_Buz1^(0+128),1
 19102  13FE  0008               	return
 19103                           
 19104                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19105  13FF  3001               	movlw	1
 19106  1400  07AF               	addwf	(_Buz1^(0+128)+1),f
 19107  1401  3000               	movlw	0
 19108  1402  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 19109                           
 19110                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19111  1403  0835               	movf	((_Buz1+1)^(0+128)+6),w
 19112  1404  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 19113  1405  1D03               	skipz
 19114  1406  2C09               	goto	u8695
 19115  1407  0834               	movf	(_Buz1^(0+128)+6),w
 19116  1408  022F               	subwf	(_Buz1^(0+128)+1),w
 19117  1409                     u8695:	
 19118  1409  1C03               	skipc
 19119  140A  0008               	return
 19120                           
 19121                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19122  140B  01AF               	clrf	(_Buz1^(0+128)+1)
 19123  140C  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 19124                           
 19125                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19126  140D  12AE               	bcf	_Buz1^(0+128),5
 19127  140E  0020               	movlb	0	; select bank0
 19128  140F  1D8D               	btfss	13,3	;volatile
 19129  1410  2C13               	goto	l8264
 19130  1411  0021               	movlb	1	; select bank1
 19131  1412  16AE               	bsf	_Buz1^(0+128),5
 19132  1413                     l8264:	
 19133                           
 19134                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19135  1413  0021               	movlb	1	; select bank1
 19136  1414  1AAE               	btfsc	_Buz1^(0+128),5
 19137  1415  2C3B               	goto	l106
 19138                           
 19139                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19140  1416  08B1               	movf	(_Buz1^(0+128)+3),f
 19141  1417  1D03               	skipz
 19142  1418  2C37               	goto	l107
 19143                           
 19144                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19145  1419  1DAE               	btfss	_Buz1^(0+128),3
 19146  141A  2C27               	goto	l108
 19147                           
 19148                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19149  141B  11AE               	bcf	_Buz1^(0+128),3
 19150                           
 19151                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19152  141C  0832               	movf	(_Buz1^(0+128)+4),w
 19153  141D  00F2               	movwf	??_Buzzer_Main
 19154  141E  0872               	movf	??_Buzzer_Main,w
 19155  141F  00B1               	movwf	(_Buz1^(0+128)+3)
 19156                           
 19157                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19158  1420  0837               	movf	((_Buz1+1)^(0+128)+8),w
 19159  1421  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19160  1422  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19161  1423  0836               	movf	(_Buz1^(0+128)+8),w
 19162  1424  01B4               	clrf	(_Buz1^(0+128)+6)
 19163  1425  07B4               	addwf	(_Buz1^(0+128)+6),f
 19164                           
 19165                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19166  1426  0008               	return
 19167  1427                     l108:	
 19168  1427  1E2E               	btfss	_Buz1^(0+128),4
 19169  1428  2C35               	goto	l110
 19170                           
 19171                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19172  1429  122E               	bcf	_Buz1^(0+128),4
 19173                           
 19174                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19175  142A  0833               	movf	(_Buz1^(0+128)+5),w
 19176  142B  00F2               	movwf	??_Buzzer_Main
 19177  142C  0872               	movf	??_Buzzer_Main,w
 19178  142D  00B1               	movwf	(_Buz1^(0+128)+3)
 19179                           
 19180                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19181  142E  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19182  142F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19183  1430  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19184  1431  0838               	movf	(_Buz1^(0+128)+10),w
 19185  1432  01B4               	clrf	(_Buz1^(0+128)+6)
 19186  1433  07B4               	addwf	(_Buz1^(0+128)+6),f
 19187                           
 19188                           ;Buzzer_B1.c: 62: } else {
 19189  1434  0008               	return
 19190  1435                     l110:	
 19191                           
 19192                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19193  1435  10AE               	bcf	_Buz1^(0+128),1
 19194                           
 19195                           ;Buzzer_B1.c: 64: }
 19196                           ;Buzzer_B1.c: 65: } else {
 19197  1436  0008               	return
 19198  1437                     l107:	
 19199                           
 19200                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19201  1437  16AE               	bsf	_Buz1^(0+128),5
 19202                           
 19203                           ;Buzzer_B1.c: 68: RB3 = 1;
 19204  1438  0020               	movlb	0	; select bank0
 19205  1439  158D               	bsf	13,3	;volatile
 19206                           
 19207                           ;Buzzer_B1.c: 69: }
 19208                           ;Buzzer_B1.c: 70: } else {
 19209  143A  0008               	return
 19210  143B                     l106:	
 19211                           
 19212                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19213  143B  12AE               	bcf	_Buz1^(0+128),5
 19214                           
 19215                           ;Buzzer_B1.c: 73: RB3 = 0;
 19216  143C  0020               	movlb	0	; select bank0
 19217  143D  118D               	bcf	13,3	;volatile
 19218                           
 19219                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19220  143E  3001               	movlw	1
 19221  143F  0021               	movlb	1	; select bank1
 19222  1440  02B1               	subwf	(_Buz1^(0+128)+3),f
 19223  1441  0008               	return
 19224  1442                     __end_of_Buzzer_Main:	
 19225                           
 19226                           	psect	text136
 19227  1AB4                     __ptext136:	
 19228 ;; *************** function _Buzzer_Initialization *****************
 19229 ;; Defined at:
 19230 ;;		line 11 in file "../src/Buzzer_B1.c"
 19231 ;; Parameters:    Size  Location     Type
 19232 ;;		None
 19233 ;; Auto vars:     Size  Location     Type
 19234 ;;		None
 19235 ;; Return value:  Size  Location     Type
 19236 ;;		None               void
 19237 ;; Registers used:
 19238 ;;		None
 19239 ;; Tracked objects:
 19240 ;;		On entry : 0/0
 19241 ;;		On exit  : 0/0
 19242 ;;		Unchanged: 0/0
 19243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19248 ;;Total ram usage:        0 bytes
 19249 ;; Hardware stack levels used:    1
 19250 ;; Hardware stack levels required when called:    3
 19251 ;; This function calls:
 19252 ;;		Nothing
 19253 ;; This function is called by:
 19254 ;;		_main
 19255 ;; This function uses a non-reentrant model
 19256 ;;
 19257                           
 19258                           
 19259                           ;psect for function _Buzzer_Initialization
 19260  1AB4                     _Buzzer_Initialization:	
 19261                           
 19262                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19263                           
 19264                           ;incstack = 0
 19265                           ; Regs used in _Buzzer_Initialization: []
 19266  1AB4  0021               	movlb	1	; select bank1
 19267  1AB5  142E               	bsf	_Buz1^(0+128),0
 19268  1AB6  0008               	return
 19269  1AB7                     __end_of_Buzzer_Initialization:	
 19270                           
 19271                           	psect	intentry
 19272  0004                     __pintentry:	
 19273 ;; *************** function _ISR *****************
 19274 ;; Defined at:
 19275 ;;		line 112 in file "../src/MCU_B1.c"
 19276 ;; Parameters:    Size  Location     Type
 19277 ;;		None
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;		None
 19280 ;; Return value:  Size  Location     Type
 19281 ;;		None               void
 19282 ;; Registers used:
 19283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;Total ram usage:        1 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:    2
 19296 ;; This function calls:
 19297 ;;		_IOC_ISR
 19298 ;;		_TMR1_ISR
 19299 ;; This function is called by:
 19300 ;;		Interrupt level 1
 19301 ;; This function uses a non-reentrant model
 19302 ;;
 19303                           
 19304  0004                     _ISR:	
 19305                           
 19306                           ;incstack = 0
 19307                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19308  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19309  0005  3180               	pagesel	$
 19310  0006  0020               	movlb	0	; select bank0
 19311  0007  087F               	movf	127,w
 19312  0008  00F1               	movwf	??_ISR
 19313                           
 19314                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19315  0009  198B               	btfsc	11,3	;volatile
 19316  000A  1C0B               	btfss	11,0	;volatile
 19317  000B  2813               	goto	i1l1401
 19318  000C  0027               	movlb	7	; select bank7
 19319  000D  1D16               	btfss	22,2	;volatile
 19320  000E  2813               	goto	i1l1401
 19321                           
 19322                           ;MCU_B1.c: 116: IOC_ISR();
 19323  000F  319B  2374  3180   	fcall	_IOC_ISR
 19324                           
 19325                           ;MCU_B1.c: 117: }
 19326  0012  281B               	goto	i1l1404
 19327  0013                     i1l1401:	
 19328                           
 19329                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 19330  0013  0021               	movlb	1	; select bank1
 19331  0014  1C11               	btfss	17,0	;volatile
 19332  0015  281B               	goto	i1l1404
 19333  0016  0020               	movlb	0	; select bank0
 19334  0017  1C11               	btfss	17,0	;volatile
 19335  0018  281B               	goto	i1l1404
 19336                           
 19337                           ;MCU_B1.c: 126: TMR1_ISR();
 19338  0019  319F  279B         	fcall	_TMR1_ISR
 19339  001B                     i1l1404:	
 19340                           ;MCU_B1.c: 127: }
 19341                           ;MCU_B1.c: 143: return;
 19342                           
 19343  001B  0871               	movf	??_ISR,w
 19344  001C  0020               	movlb	0	; select bank0
 19345  001D  00FF               	movwf	127
 19346  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19347  001F  0009               	retfie
 19348  0020                     __end_of_ISR:	
 19349                           
 19350                           	psect	text138
 19351  1F9B                     __ptext138:	
 19352 ;; *************** function _TMR1_ISR *****************
 19353 ;; Defined at:
 19354 ;;		line 231 in file "../src/MCU_B1.c"
 19355 ;; Parameters:    Size  Location     Type
 19356 ;;		None
 19357 ;; Auto vars:     Size  Location     Type
 19358 ;;		None
 19359 ;; Return value:  Size  Location     Type
 19360 ;;		None               void
 19361 ;; Registers used:
 19362 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19363 ;; Tracked objects:
 19364 ;;		On entry : 0/0
 19365 ;;		On exit  : 0/0
 19366 ;;		Unchanged: 0/0
 19367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19372 ;;Total ram usage:        0 bytes
 19373 ;; Hardware stack levels used:    1
 19374 ;; Hardware stack levels required when called:    1
 19375 ;; This function calls:
 19376 ;;		_DimmerLights_MOSFET_TMR_1
 19377 ;;		_DimmerLights_MOSFET_TMR_2
 19378 ;; This function is called by:
 19379 ;;		_ISR
 19380 ;; This function uses a non-reentrant model
 19381 ;;
 19382                           
 19383                           
 19384                           ;psect for function _TMR1_ISR
 19385  1F9B                     _TMR1_ISR:	
 19386                           
 19387                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 19388                           
 19389                           ;incstack = 0
 19390                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19391  1F9B  30FA               	movlw	250
 19392  1F9C  0020               	movlb	0	; select bank0
 19393  1F9D  0097               	movwf	23	;volatile
 19394                           
 19395                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 19396  1F9E  3038               	movlw	56
 19397  1F9F  0096               	movwf	22	;volatile
 19398                           
 19399                           ;MCU_B1.c: 235: TMR1IF = 0;
 19400  1FA0  1011               	bcf	17,0	;volatile
 19401                           
 19402                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 19403  1FA1  3194  24E0  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19404                           
 19405                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 19406  1FA4  3195  2532  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19407                           
 19408                           ;MCU_B1.c: 254: Timer1.Count++;
 19409  1FA7  3001               	movlw	1
 19410  1FA8  0021               	movlb	1	; select bank1
 19411  1FA9  07BE               	addwf	(_Timer1^(0+128)+1),f
 19412  1FAA  3000               	movlw	0
 19413  1FAB  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 19414                           
 19415                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 19416  1FAC  3001               	movlw	1
 19417  1FAD  3EBD               	addlw	_Timer1& (0+255)
 19418  1FAE  0086               	movwf	6
 19419  1FAF  0187               	clrf	7
 19420  1FB0  3F40               	moviw [0]fsr1
 19421  1FB1  3AC8               	xorlw	200
 19422  1FB2  1D03               	skipz
 19423  1FB3  2FB6               	goto	u880_25
 19424  1FB4  3F41               	moviw [1]fsr1
 19425  1FB5  3A00               	xorlw	0
 19426  1FB6                     u880_25:	
 19427  1FB6  1D03               	skipz
 19428  1FB7  0008               	return
 19429                           
 19430                           ;MCU_B1.c: 256: Timer1.Count = 0;
 19431  1FB8  01BE               	clrf	(_Timer1^(0+128)+1)
 19432  1FB9  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 19433                           
 19434                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 19435  1FBA  143D               	bsf	_Timer1^(0+128),0
 19436  1FBB  0008               	return
 19437  1FBC                     __end_of_TMR1_ISR:	
 19438                           
 19439                           	psect	text139
 19440  1532                     __ptext139:	
 19441 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19442 ;; Defined at:
 19443 ;;		line 1262 in file "../src/Dimmer_B1.c"
 19444 ;; Parameters:    Size  Location     Type
 19445 ;;		None
 19446 ;; Auto vars:     Size  Location     Type
 19447 ;;		None
 19448 ;; Return value:  Size  Location     Type
 19449 ;;		None               void
 19450 ;; Registers used:
 19451 ;;		wreg, status,2, status,0
 19452 ;; Tracked objects:
 19453 ;;		On entry : 0/0
 19454 ;;		On exit  : 0/0
 19455 ;;		Unchanged: 0/0
 19456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19460 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19461 ;;Total ram usage:        1 bytes
 19462 ;; Hardware stack levels used:    1
 19463 ;; This function calls:
 19464 ;;		Nothing
 19465 ;; This function is called by:
 19466 ;;		_TMR1_ISR
 19467 ;; This function uses a non-reentrant model
 19468 ;;
 19469                           
 19470                           
 19471                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19472  1532                     _DimmerLights_MOSFET_TMR_2:	
 19473                           
 19474                           ;Dimmer_B1.c: 1263: if (DimmerIntr2.Start == 1) {
 19475                           
 19476                           ;incstack = 0
 19477                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19478  1532  0021               	movlb	1	; select bank1
 19479  1533  1D69               	btfss	_DimmerIntr2^(0+128),2
 19480  1534  2D3F               	goto	i1l7816
 19481                           
 19482                           ;Dimmer_B1.c: 1264: DimmerIntr2.Count++;
 19483  1535  3001               	movlw	1
 19484  1536  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19485  1537  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19486  1538  07EA               	addwf	(_DimmerIntr2^(0+128)+1),f
 19487                           
 19488                           ;Dimmer_B1.c: 1265: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19489  1539  3035               	movlw	53
 19490  153A  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19491  153B  1C03               	skipc
 19492  153C  2D3F               	goto	i1l7816
 19493                           
 19494                           ;Dimmer_B1.c: 1266: DimmerIntr2.Count = 0;
 19495  153D  01EA               	clrf	(_DimmerIntr2^(0+128)+1)
 19496                           
 19497                           ;Dimmer_B1.c: 1267: DimmerIntr2.Start = 0;
 19498  153E  1169               	bcf	_DimmerIntr2^(0+128),2
 19499  153F                     i1l7816:	
 19500                           
 19501                           ;Dimmer_B1.c: 1268: }
 19502                           ;Dimmer_B1.c: 1269: }
 19503                           ;Dimmer_B1.c: 1271: if (DimmerIntr2.GO == 1) {
 19504  153F  1C69               	btfss	_DimmerIntr2^(0+128),0
 19505  1540  2D4C               	goto	i1l1011
 19506                           
 19507                           ;Dimmer_B1.c: 1272: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19508  1541  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19509  1542  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19510  1543  1C03               	skipc
 19511  1544  0008               	return
 19512                           
 19513                           ;Dimmer_B1.c: 1273: DimmerIntr2.GO = 0;
 19514  1545  1069               	bcf	_DimmerIntr2^(0+128),0
 19515                           
 19516                           ;Dimmer_B1.c: 1274: DimmerIntr2.Tune = 1;
 19517  1546  14E9               	bsf	_DimmerIntr2^(0+128),1
 19518                           
 19519                           ;Dimmer_B1.c: 1276: if (DimmerIntr2.ControlStatus == 1) {
 19520  1547  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19521  1548  0008               	return
 19522                           
 19523                           ;Dimmer_B1.c: 1277: RB4 = 0;
 19524  1549  0020               	movlb	0	; select bank0
 19525  154A  120D               	bcf	13,4	;volatile
 19526                           
 19527                           ;Dimmer_B1.c: 1279: }
 19528                           ;Dimmer_B1.c: 1280: }
 19529                           ;Dimmer_B1.c: 1281: } else {
 19530  154B  0008               	return
 19531  154C                     i1l1011:	
 19532                           
 19533                           ;Dimmer_B1.c: 1282: if (DimmerIntr2.Tune == 1) {
 19534  154C  1CE9               	btfss	_DimmerIntr2^(0+128),1
 19535  154D  0008               	return
 19536                           
 19537                           ;Dimmer_B1.c: 1283: DimmerIntr2.Tune = 0;
 19538  154E  10E9               	bcf	_DimmerIntr2^(0+128),1
 19539                           
 19540                           ;Dimmer_B1.c: 1284: DimmerIntr2.TuneTime++;
 19541  154F  3001               	movlw	1
 19542  1550  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19543  1551  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19544  1552  07EB               	addwf	(_DimmerIntr2^(0+128)+2),f
 19545                           
 19546                           ;Dimmer_B1.c: 1285: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19547  1553  086C               	movf	(_DimmerIntr2^(0+128)+3),w
 19548  1554  026B               	subwf	(_DimmerIntr2^(0+128)+2),w
 19549  1555  1C03               	skipc
 19550  1556  0008               	return
 19551                           
 19552                           ;Dimmer_B1.c: 1286: DimmerIntr2.TuneTime = 0;
 19553  1557  01EB               	clrf	(_DimmerIntr2^(0+128)+2)
 19554                           
 19555                           ;Dimmer_B1.c: 1287: if (DimmerIntr2.Dimming_Sw == 1) {
 19556  1558  1E69               	btfss	_DimmerIntr2^(0+128),4
 19557  1559  2D70               	goto	i1l1017
 19558                           
 19559                           ;Dimmer_B1.c: 1288: if (DimmerIntr2.Dimming_Status == 0) {
 19560  155A  1AE9               	btfsc	_DimmerIntr2^(0+128),5
 19561  155B  2D67               	goto	i1l7840
 19562                           
 19563                           ;Dimmer_B1.c: 1289: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19564  155C  3034               	movlw	52
 19565  155D  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19566  155E  1803               	skipnc
 19567  155F  2D65               	goto	i1l1019
 19568                           
 19569                           ;Dimmer_B1.c: 1290: DimmerIntr2.DimmingValue++;
 19570  1560  3001               	movlw	1
 19571  1561  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19572  1562  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19573  1563  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19574                           
 19575                           ;Dimmer_B1.c: 1291: } else {
 19576  1564  0008               	return
 19577  1565                     i1l1019:	
 19578                           
 19579                           ;Dimmer_B1.c: 1292: DimmerIntr2.Dimming_Status = 1;
 19580  1565  16E9               	bsf	_DimmerIntr2^(0+128),5
 19581                           
 19582                           ;Dimmer_B1.c: 1293: }
 19583                           ;Dimmer_B1.c: 1294: } else {
 19584  1566  0008               	return
 19585  1567                     i1l7840:	
 19586                           
 19587                           ;Dimmer_B1.c: 1295: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19588  1567  3011               	movlw	17
 19589  1568  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19590  1569  1C03               	skipc
 19591  156A  2D6E               	goto	i1l1022
 19592                           
 19593                           ;Dimmer_B1.c: 1296: DimmerIntr2.DimmingValue--;
 19594  156B  3001               	movlw	1
 19595  156C  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19596                           
 19597                           ;Dimmer_B1.c: 1297: } else {
 19598  156D  0008               	return
 19599  156E                     i1l1022:	
 19600                           
 19601                           ;Dimmer_B1.c: 1298: DimmerIntr2.Dimming_Status = 0;
 19602  156E  12E9               	bcf	_DimmerIntr2^(0+128),5
 19603                           
 19604                           ;Dimmer_B1.c: 1299: }
 19605                           ;Dimmer_B1.c: 1300: }
 19606                           ;Dimmer_B1.c: 1301: } else if (DimmerIntr2.Dimming_RF == 1) {
 19607  156F  0008               	return
 19608  1570                     i1l1017:	
 19609  1570  1F69               	btfss	_DimmerIntr2^(0+128),6
 19610  1571  0008               	return
 19611                           
 19612                           ;Dimmer_B1.c: 1302: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19613  1572  086E               	movf	(_DimmerIntr2^(0+128)+5),w
 19614  1573  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19615  1574  1803               	skipnc
 19616  1575  2D7B               	goto	i1l7848
 19617                           
 19618                           ;Dimmer_B1.c: 1303: DimmerIntr2.DimmingValue++;
 19619  1576  3001               	movlw	1
 19620  1577  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19621  1578  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19622  1579  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19623                           
 19624                           ;Dimmer_B1.c: 1304: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19625  157A  0008               	return
 19626  157B                     i1l7848:	
 19627  157B  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19628  157C  026E               	subwf	(_DimmerIntr2^(0+128)+5),w
 19629  157D  1803               	skipnc
 19630  157E  2D82               	goto	i1l1028
 19631                           
 19632                           ;Dimmer_B1.c: 1305: DimmerIntr2.DimmingValue--;
 19633  157F  3001               	movlw	1
 19634  1580  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19635                           
 19636                           ;Dimmer_B1.c: 1306: } else {
 19637  1581  0008               	return
 19638  1582                     i1l1028:	
 19639                           
 19640                           ;Dimmer_B1.c: 1307: DimmerIntr2.Dimming_RF = 0;
 19641  1582  1369               	bcf	_DimmerIntr2^(0+128),6
 19642  1583  0008               	return
 19643  1584                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19644                           
 19645                           	psect	text140
 19646  14E0                     __ptext140:	
 19647 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19648 ;; Defined at:
 19649 ;;		line 1192 in file "../src/Dimmer_B1.c"
 19650 ;; Parameters:    Size  Location     Type
 19651 ;;		None
 19652 ;; Auto vars:     Size  Location     Type
 19653 ;;		None
 19654 ;; Return value:  Size  Location     Type
 19655 ;;		None               void
 19656 ;; Registers used:
 19657 ;;		wreg, status,2, status,0
 19658 ;; Tracked objects:
 19659 ;;		On entry : 0/0
 19660 ;;		On exit  : 0/0
 19661 ;;		Unchanged: 0/0
 19662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;Total ram usage:        1 bytes
 19668 ;; Hardware stack levels used:    1
 19669 ;; This function calls:
 19670 ;;		Nothing
 19671 ;; This function is called by:
 19672 ;;		_TMR1_ISR
 19673 ;; This function uses a non-reentrant model
 19674 ;;
 19675                           
 19676                           
 19677                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19678  14E0                     _DimmerLights_MOSFET_TMR_1:	
 19679                           
 19680                           ;Dimmer_B1.c: 1193: if (DimmerIntr1.Start == 1) {
 19681                           
 19682                           ;incstack = 0
 19683                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19684  14E0  0021               	movlb	1	; select bank1
 19685  14E1  1D62               	btfss	_DimmerIntr1^(0+128),2
 19686  14E2  2CED               	goto	i1l7762
 19687                           
 19688                           ;Dimmer_B1.c: 1194: DimmerIntr1.Count++;
 19689  14E3  3001               	movlw	1
 19690  14E4  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19691  14E5  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19692  14E6  07E3               	addwf	(_DimmerIntr1^(0+128)+1),f
 19693                           
 19694                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19695  14E7  3035               	movlw	53
 19696  14E8  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19697  14E9  1C03               	skipc
 19698  14EA  2CED               	goto	i1l7762
 19699                           
 19700                           ;Dimmer_B1.c: 1196: DimmerIntr1.Count = 0;
 19701  14EB  01E3               	clrf	(_DimmerIntr1^(0+128)+1)
 19702                           
 19703                           ;Dimmer_B1.c: 1197: DimmerIntr1.Start = 0;
 19704  14EC  1162               	bcf	_DimmerIntr1^(0+128),2
 19705  14ED                     i1l7762:	
 19706                           
 19707                           ;Dimmer_B1.c: 1198: }
 19708                           ;Dimmer_B1.c: 1199: }
 19709                           ;Dimmer_B1.c: 1201: if (DimmerIntr1.GO == 1) {
 19710  14ED  1C62               	btfss	_DimmerIntr1^(0+128),0
 19711  14EE  2CFA               	goto	i1l982
 19712                           
 19713                           ;Dimmer_B1.c: 1202: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19714  14EF  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19715  14F0  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19716  14F1  1C03               	skipc
 19717  14F2  0008               	return
 19718                           
 19719                           ;Dimmer_B1.c: 1203: DimmerIntr1.GO = 0;
 19720  14F3  1062               	bcf	_DimmerIntr1^(0+128),0
 19721                           
 19722                           ;Dimmer_B1.c: 1204: DimmerIntr1.Tune = 1;
 19723  14F4  14E2               	bsf	_DimmerIntr1^(0+128),1
 19724                           
 19725                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.ControlStatus == 1) {
 19726  14F5  1DE2               	btfss	_DimmerIntr1^(0+128),3
 19727  14F6  0008               	return
 19728                           
 19729                           ;Dimmer_B1.c: 1207: RA7 = 0;
 19730  14F7  0020               	movlb	0	; select bank0
 19731  14F8  138C               	bcf	12,7	;volatile
 19732                           
 19733                           ;Dimmer_B1.c: 1209: }
 19734                           ;Dimmer_B1.c: 1210: }
 19735                           ;Dimmer_B1.c: 1211: } else {
 19736  14F9  0008               	return
 19737  14FA                     i1l982:	
 19738                           
 19739                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.Tune == 1) {
 19740  14FA  1CE2               	btfss	_DimmerIntr1^(0+128),1
 19741  14FB  0008               	return
 19742                           
 19743                           ;Dimmer_B1.c: 1213: DimmerIntr1.Tune = 0;
 19744  14FC  10E2               	bcf	_DimmerIntr1^(0+128),1
 19745                           
 19746                           ;Dimmer_B1.c: 1214: DimmerIntr1.TuneTime++;
 19747  14FD  3001               	movlw	1
 19748  14FE  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19749  14FF  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19750  1500  07E4               	addwf	(_DimmerIntr1^(0+128)+2),f
 19751                           
 19752                           ;Dimmer_B1.c: 1215: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19753  1501  0865               	movf	(_DimmerIntr1^(0+128)+3),w
 19754  1502  0264               	subwf	(_DimmerIntr1^(0+128)+2),w
 19755  1503  1C03               	skipc
 19756  1504  0008               	return
 19757                           
 19758                           ;Dimmer_B1.c: 1216: DimmerIntr1.TuneTime = 0;
 19759  1505  01E4               	clrf	(_DimmerIntr1^(0+128)+2)
 19760                           
 19761                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.Dimming_Sw == 1) {
 19762  1506  1E62               	btfss	_DimmerIntr1^(0+128),4
 19763  1507  2D1E               	goto	i1l988
 19764                           
 19765                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.Dimming_Status == 0) {
 19766  1508  1AE2               	btfsc	_DimmerIntr1^(0+128),5
 19767  1509  2D15               	goto	i1l7786
 19768                           
 19769                           ;Dimmer_B1.c: 1219: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19770  150A  3034               	movlw	52
 19771  150B  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19772  150C  1803               	skipnc
 19773  150D  2D13               	goto	i1l990
 19774                           
 19775                           ;Dimmer_B1.c: 1220: DimmerIntr1.DimmingValue++;
 19776  150E  3001               	movlw	1
 19777  150F  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19778  1510  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19779  1511  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19780                           
 19781                           ;Dimmer_B1.c: 1221: } else {
 19782  1512  0008               	return
 19783  1513                     i1l990:	
 19784                           
 19785                           ;Dimmer_B1.c: 1222: DimmerIntr1.Dimming_Status = 1;
 19786  1513  16E2               	bsf	_DimmerIntr1^(0+128),5
 19787                           
 19788                           ;Dimmer_B1.c: 1223: }
 19789                           ;Dimmer_B1.c: 1224: } else {
 19790  1514  0008               	return
 19791  1515                     i1l7786:	
 19792                           
 19793                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19794  1515  3011               	movlw	17
 19795  1516  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19796  1517  1C03               	skipc
 19797  1518  2D1C               	goto	i1l993
 19798                           
 19799                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue--;
 19800  1519  3001               	movlw	1
 19801  151A  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19802                           
 19803                           ;Dimmer_B1.c: 1227: } else {
 19804  151B  0008               	return
 19805  151C                     i1l993:	
 19806                           
 19807                           ;Dimmer_B1.c: 1228: DimmerIntr1.Dimming_Status = 0;
 19808  151C  12E2               	bcf	_DimmerIntr1^(0+128),5
 19809                           
 19810                           ;Dimmer_B1.c: 1229: }
 19811                           ;Dimmer_B1.c: 1230: }
 19812                           ;Dimmer_B1.c: 1231: } else if (DimmerIntr1.Dimming_RF == 1) {
 19813  151D  0008               	return
 19814  151E                     i1l988:	
 19815  151E  1F62               	btfss	_DimmerIntr1^(0+128),6
 19816  151F  0008               	return
 19817                           
 19818                           ;Dimmer_B1.c: 1232: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19819  1520  0867               	movf	(_DimmerIntr1^(0+128)+5),w
 19820  1521  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19821  1522  1803               	skipnc
 19822  1523  2D29               	goto	i1l7794
 19823                           
 19824                           ;Dimmer_B1.c: 1233: DimmerIntr1.DimmingValue++;
 19825  1524  3001               	movlw	1
 19826  1525  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19827  1526  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19828  1527  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19829                           
 19830                           ;Dimmer_B1.c: 1234: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19831  1528  0008               	return
 19832  1529                     i1l7794:	
 19833  1529  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19834  152A  0267               	subwf	(_DimmerIntr1^(0+128)+5),w
 19835  152B  1803               	skipnc
 19836  152C  2D30               	goto	i1l999
 19837                           
 19838                           ;Dimmer_B1.c: 1235: DimmerIntr1.DimmingValue--;
 19839  152D  3001               	movlw	1
 19840  152E  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19841                           
 19842                           ;Dimmer_B1.c: 1236: } else {
 19843  152F  0008               	return
 19844  1530                     i1l999:	
 19845                           
 19846                           ;Dimmer_B1.c: 1237: DimmerIntr1.Dimming_RF = 0;
 19847  1530  1362               	bcf	_DimmerIntr1^(0+128),6
 19848  1531  0008               	return
 19849  1532                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19850                           
 19851                           	psect	text141
 19852  1B74                     __ptext141:	
 19853 ;; *************** function _IOC_ISR *****************
 19854 ;; Defined at:
 19855 ;;		line 377 in file "../src/MCU_B1.c"
 19856 ;; Parameters:    Size  Location     Type
 19857 ;;		None
 19858 ;; Auto vars:     Size  Location     Type
 19859 ;;		None
 19860 ;; Return value:  Size  Location     Type
 19861 ;;		None               void
 19862 ;; Registers used:
 19863 ;;		status,2, status,0, pclath, cstack
 19864 ;; Tracked objects:
 19865 ;;		On entry : 0/0
 19866 ;;		On exit  : 0/0
 19867 ;;		Unchanged: 0/0
 19868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19873 ;;Total ram usage:        0 bytes
 19874 ;; Hardware stack levels used:    1
 19875 ;; Hardware stack levels required when called:    1
 19876 ;; This function calls:
 19877 ;;		_DimmerLights_MOSFET_IOC_1
 19878 ;;		_DimmerLights_MOSFET_IOC_2
 19879 ;; This function is called by:
 19880 ;;		_ISR
 19881 ;; This function uses a non-reentrant model
 19882 ;;
 19883                           
 19884                           
 19885                           ;psect for function _IOC_ISR
 19886  1B74                     _IOC_ISR:	
 19887                           
 19888                           ;MCU_B1.c: 378: IOCBF2 = 0;
 19889                           
 19890                           ;incstack = 0
 19891                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19892  1B74  0027               	movlb	7	; select bank7
 19893  1B75  1116               	bcf	22,2	;volatile
 19894                           
 19895                           ;MCU_B1.c: 379: IOCIF = 0;
 19896  1B76  100B               	bcf	11,0	;volatile
 19897                           
 19898                           ;MCU_B1.c: 381: if (myMain.PowerON == 1) {
 19899  1B77  0022               	movlb	2	; select bank2
 19900  1B78  1C20               	btfss	_myMain^(0+256),0
 19901  1B79  0008               	return
 19902                           
 19903                           ;MCU_B1.c: 387: DimmerLights_MOSFET_IOC_1();
 19904  1B7A  319B  23BD  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19905                           
 19906                           ;MCU_B1.c: 392: DimmerLights_MOSFET_IOC_2();
 19907  1B7D  319B  23CB         	fcall	_DimmerLights_MOSFET_IOC_2
 19908  1B7F  0008               	return
 19909  1B80                     __end_of_IOC_ISR:	
 19910                           
 19911                           	psect	text142
 19912  1BCB                     __ptext142:	
 19913 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19914 ;; Defined at:
 19915 ;;		line 1315 in file "../src/Dimmer_B1.c"
 19916 ;; Parameters:    Size  Location     Type
 19917 ;;		None
 19918 ;; Auto vars:     Size  Location     Type
 19919 ;;		None
 19920 ;; Return value:  Size  Location     Type
 19921 ;;		None               void
 19922 ;; Registers used:
 19923 ;;		None
 19924 ;; Tracked objects:
 19925 ;;		On entry : 0/0
 19926 ;;		On exit  : 0/0
 19927 ;;		Unchanged: 0/0
 19928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19933 ;;Total ram usage:        0 bytes
 19934 ;; Hardware stack levels used:    1
 19935 ;; This function calls:
 19936 ;;		Nothing
 19937 ;; This function is called by:
 19938 ;;		_IOC_ISR
 19939 ;; This function uses a non-reentrant model
 19940 ;;
 19941                           
 19942                           
 19943                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19944  1BCB                     _DimmerLights_MOSFET_IOC_2:	
 19945                           
 19946                           ;Dimmer_B1.c: 1316: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19947                           
 19948                           ;incstack = 0
 19949                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19950  1BCB  0021               	movlb	1	; select bank1
 19951  1BCC  1969               	btfsc	_DimmerIntr2^(0+128),2
 19952  1BCD  0008               	return
 19953  1BCE  0020               	movlb	0	; select bank0
 19954  1BCF  1D0D               	btfss	13,2	;volatile
 19955  1BD0  0008               	return
 19956                           
 19957                           ;Dimmer_B1.c: 1317: DimmerIntr2.Start = 1;
 19958  1BD1  0021               	movlb	1	; select bank1
 19959  1BD2  1569               	bsf	_DimmerIntr2^(0+128),2
 19960                           
 19961                           ;Dimmer_B1.c: 1318: DimmerIntr2.GO = 1;
 19962  1BD3  1469               	bsf	_DimmerIntr2^(0+128),0
 19963                           
 19964                           ;Dimmer_B1.c: 1320: if (DimmerIntr2.ControlStatus == 1) {
 19965  1BD4  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19966  1BD5  0008               	return
 19967                           
 19968                           ;Dimmer_B1.c: 1321: RB4 = 1;
 19969  1BD6  0020               	movlb	0	; select bank0
 19970  1BD7  160D               	bsf	13,4	;volatile
 19971  1BD8  0008               	return
 19972  1BD9                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19973                           
 19974                           	psect	text143
 19975  1BBD                     __ptext143:	
 19976 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19977 ;; Defined at:
 19978 ;;		line 1245 in file "../src/Dimmer_B1.c"
 19979 ;; Parameters:    Size  Location     Type
 19980 ;;		None
 19981 ;; Auto vars:     Size  Location     Type
 19982 ;;		None
 19983 ;; Return value:  Size  Location     Type
 19984 ;;		None               void
 19985 ;; Registers used:
 19986 ;;		None
 19987 ;; Tracked objects:
 19988 ;;		On entry : 0/0
 19989 ;;		On exit  : 0/0
 19990 ;;		Unchanged: 0/0
 19991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19996 ;;Total ram usage:        0 bytes
 19997 ;; Hardware stack levels used:    1
 19998 ;; This function calls:
 19999 ;;		Nothing
 20000 ;; This function is called by:
 20001 ;;		_IOC_ISR
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           
 20006                           ;psect for function _DimmerLights_MOSFET_IOC_1
 20007  1BBD                     _DimmerLights_MOSFET_IOC_1:	
 20008                           
 20009                           ;Dimmer_B1.c: 1246: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 20010                           
 20011                           ;incstack = 0
 20012                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 20013  1BBD  0021               	movlb	1	; select bank1
 20014  1BBE  1962               	btfsc	_DimmerIntr1^(0+128),2
 20015  1BBF  0008               	return
 20016  1BC0  0020               	movlb	0	; select bank0
 20017  1BC1  1D0D               	btfss	13,2	;volatile
 20018  1BC2  0008               	return
 20019                           
 20020                           ;Dimmer_B1.c: 1247: DimmerIntr1.Start = 1;
 20021  1BC3  0021               	movlb	1	; select bank1
 20022  1BC4  1562               	bsf	_DimmerIntr1^(0+128),2
 20023                           
 20024                           ;Dimmer_B1.c: 1248: DimmerIntr1.GO = 1;
 20025  1BC5  1462               	bsf	_DimmerIntr1^(0+128),0
 20026                           
 20027                           ;Dimmer_B1.c: 1250: if (DimmerIntr1.ControlStatus == 1) {
 20028  1BC6  1DE2               	btfss	_DimmerIntr1^(0+128),3
 20029  1BC7  0008               	return
 20030                           
 20031                           ;Dimmer_B1.c: 1251: RA7 = 1;
 20032  1BC8  0020               	movlb	0	; select bank0
 20033  1BC9  178C               	bsf	12,7	;volatile
 20034  1BCA  0008               	return
 20035  1BCB                     __end_of_DimmerLights_MOSFET_IOC_1:	
 20036  007E                     btemp	set	126	;btemp
 20037  007E                     pic14e$flags	set	126
 20038  007E                     wtemp	set	126
 20039  007E                     wtemp0	set	126
 20040  0080                     wtemp1	set	128
 20041  0082                     wtemp2	set	130
 20042  0084                     wtemp3	set	132
 20043  0086                     wtemp4	set	134
 20044  0088                     wtemp5	set	136
 20045  007F                     wtemp6	set	127
 20046  007E                     ttemp	set	126
 20047  007E                     ttemp0	set	126
 20048  0081                     ttemp1	set	129
 20049  0084                     ttemp2	set	132
 20050  0087                     ttemp3	set	135
 20051  007F                     ttemp4	set	127
 20052  007E                     ltemp	set	126
 20053  007E                     ltemp0	set	126
 20054  0082                     ltemp1	set	130
 20055  0086                     ltemp2	set	134
 20056  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      74
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK2[8]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  151345
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4776
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4776
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4531
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4531
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   47358
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   47358
                                             75 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   43006
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4656
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   38155
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11281
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21556
                                             62 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2043
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1211
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   13142
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3563
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   62069
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   61838
                                             74 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   40268
                                             70 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3808
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21075
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5248
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5248
                                             62 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2803
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Jan 05 11:51:36 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1D92  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l96 15B3                                        l98 15C5  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1092  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _Sw 007B                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1C14                    __end_of_setDelayOff_GO 0CAE  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 09D5  
                    _setDimmerLights_Line 1CF4                              ___ftadd@sign 0043  
                                     l110 1435                                       l106 143B  
                                     l107 1437                                       l108 1427  
                                     l323 1E1E                      _setDimmerLights_SwOn 1686  
                                     l324 1E20                                       l255 09AC  
                                     l367 10DE                                       l573 0AA6  
                                     l742 1D3D                                       l912 074E  
                                     l945 1C1B                                       l946 1C21  
                                     l886 1F51                                       _GIE 005F  
                                     _CRC 00C2                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C7  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C0                                       _Cmd 00C3  
            getDimmerLights_Status@lights 0074                                       _Sw1 01BE  
                                     _Sw2 01C7                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 1E2B                     _Buzzer_Initialization 1AB4  
                         __end_of_ADC_Set 1B0C                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 114F               _setDimmerIntr_ControlStatus 1126  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 1B80  
                   _setDimmerLights_OnOff 06C2          setDimmerLights_DimmingRun@lights 0076  
                              Load_Main@i 0024                              ___ftdiv@sign 0035  
                                    l2013 0E8A                                      l1134 1EEE  
                                    l1135 1EF7                                      l2008 0E90  
                                    l1168 0833                                      l1169 083A  
                                    l1453 119B                                      l3150 17E9  
                                    l1462 1487                                      l1439 1227  
                                    l2431 0CC4                                      l3144 17D2  
                                    l2440 0D3A                                      l2424 125D  
                                    l2409 0B1E                                      l1708 05FF  
                                    l2364 06BC                                      l3173 03F9  
                                    l1717 1D91                           __end_of_IOC_Set 1B48  
                                    l1840 01E7                                      l2368 0623  
                                    l1681 11F4                                      l2369 0664  
                                    l1649 1376                                      l1850 01C3  
                                    l1842 0089                                      l2394 1C28  
                                    l1851 01C1                                      l1843 0085  
                                    l1676 11DF                                      l1844 0080  
                                    l1677 11F8                                      l6200 17A8  
                                    l6204 17AF                                      l7100 1765  
                                    l2757 1DD8                                      l2781 022E  
                                    l6302 1D5E                                      l6214 17D7  
                                    l6206 17B9                                      l6312 1D73  
                                    l6216 17DF                                      l6208 17BE  
                                    l7016 113B                                      l7024 1D9D  
                                    l7120 178F                                      l7104 176B  
                                    l7034 1D34                                      l6402 041D  
                                    l6322 1CC9                                      l2779 0351  
                                    l6412 0438                                      l7044 10C8  
                                    l7116 1789                                      l7124 1795  
                                    l7108 1771                                      l6422 0D52  
                                    l7134 1D00                                      l6318 1CC3  
                                    l2983 1F09                                      l7064 11DB  
                                    l6352 0382                                      l7152 1C5A  
                                    l7074 11F0                                      l7066 11E3  
                                    l6362 0398                                      l6450 0DC2  
                                    l6442 0DA9                                      l6522 0BB4  
                                    l7154 1C5F                                      l7090 1755  
                                    l6380 03C5                                      l6356 0389  
                                    l6428 0D68                                      l6540 0BE4  
                                    l7148 1C54                     _setDimmerLights_SwOff 12CE  
                                    l7334 12A5                                      l6382 03CF  
                                    l6374 03B2                                      l6550 0C08  
                                    l6542 0BF2                                      l6470 0EC3  
                                    l7086 174F                                      l7094 175B  
                                    l6640 12FB                                      l9032 15ED  
                                    l6392 03EB                                      l6384 03D4  
                                    l6552 0C0B                                      l6464 0EAD  
                                    l9050 1613                                      l9042 15F5  
                                    l9026 15E2                                      l7346 12B9  
                                    l6394 03F5                                      l6386 03D8  
                                    l6482 0EFE                                      l6802 1ED8  
                                    l7610 1F6A                                      l9044 1601  
                                    l9140 169A                                      l7356 12C8  
                                    l7348 12BB                                      l6556 0C19  
                                    l6548 0BFF                                      l6716 172C  
                                    l8244 1F03                                      l6804 1EDD  
                                    l9220 13AB                                      l7620 1F79  
                                    l9054 161C                                      l9150 16AB  
                                    l9142 169D                                      l7358 12CC  
                                    l6398 040B                                      l6494 0F1A  
                                    l6486 0F06                                      l6662 0C60  
                                    l7534 1CDD                                      l8264 1413  
                                    l9160 16D4                                      l9152 16B0  
                                    l6672 0C90                                      l6816 10EF  
                                    l9400 0986                                      l9232 0798  
                                    l7608 1F68                                      l9058 1624  
                                    l9162 16D9                                      l6498 0F22  
                                    l7490 1186                                      l7642 1287  
                                    l7634 1269                                      l6818 10FA  
                                    l7618 1F75                                      l6684 1E08  
                                    l6852 1D7F                                      l6676 0CA4  
                                    l6692 1164                                      l7636 1275  
                                    l9260 10A5                                      l9420 09B6  
                                    l9236 079D                                      l6846 1C12  
                                    l7646 1290                                      l9182 1E6F  
                                    l9254 109C                                      l9414 0995  
                                    l9246 07EB                                      l6856 1D8C  
                                    l9176 1E66                                      l9192 1079  
                                    l9256 109F                                      l9432 09C9  
                                    l9424 09BC                                      l9098 1FE9  
                                    l9514 070D                                      l9178 1E69  
                                    l9194 107C                                      l9282 13DD  
                                    l9450 0855                                      l9426 09C0  
                                    l9418 09B3                                      l9370 0CD3  
                                    l9362 0CAF                                      l7594 1D22  
                                    l9532 074A                                      l9292 13ED  
                                    l9284 13E0                                      l9452 0858  
                                    l9428 09C3                                      l9380 0D1D  
                                    l9372 0CD9                                      l9612 0AE5  
                   _myMain_Initialization 1C32                                      l9518 0724  
                                    l7686 1E9A                                      l9198 1082  
                                    l9294 13F0                                      l9382 0D21  
                                    l9374 0CF4                                      l9710 0E00  
                                    l9552 077E                                      l9528 0743  
                                    l7960 145C                                      l7696 1EA7  
                                    l9288 13E6                                      l9472 086D  
                                    l9456 085E                                      l9376 0D15  
                                    l9624 0AFA                                      l9608 0ADC  
                                    l9538 0754                                      l7954 1448  
                                    l7698 1EAB                                      l9298 13F6  
                                    l9474 0883                                      l9394 097D  
                                    l9378 0D19                                      l9386 0D25  
                                    l9802 0673                                      l9396 0980  
                                    l9740 0E5F                                      l9558 14A8  
                                    l9830 06B5                                      l9902 02CC  
                                    l9742 0E61                                      l9664 09FD  
                                    l9816 069D                                      l9912 02FE  
                                    l9752 0E76                                      _CFGS 0CAE  
                                    l9666 0A03                                      l9850 1DE3  
                                    l9754 0E77                                      l9676 0A2B  
                                    l9596 0AC3                                      l9692 1EBE  
                                    l9678 0A31                                      l9950 1F53  
                                    l9846 1DDD                                      l9862 0219  
                                    l9686 1EB5                                      l9688 1EB8  
                            __CFG_WDTE$ON 0000                                      l9788 065F  
                                    l9974 04C2                                      l9878 025C  
                                    l9888 028E                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5105 17F0  
                                    u5035 17B4                                      u5055 17CD  
                                    u6130 16EC                                      u5075 17DA  
                                    _PEIE 005E                                      u6135 16EA  
                                    u5425 03B3                                      u5515 03EC  
                                    u6075 0C6C                                      u6235 10E4  
                                    u5605 0DAA                                      u5455 03C6  
                                    u5615 0DB9                                      u5625 0DC3  
                                    u5705 0F0D                                      u5485 03D9  
                                    u5815 0BE5                                      u5735 0F23  
                                    u5585 0D7A                                      u5745 0F29  
                                    u5665 0ECF                                      u7505 1276  
                                    u5595 0D8A                                      u5675 0EDF  
                                    u7515 1280                                      u5845 0C00  
                                    u7525 1288                                      u5695 0F07  
                                    u5785 0BBB                                      u7485 126C  
                                    u8655 1F0A                                      u8665 1F0F  
                                    u8695 1409                                      u8875 121E  
                                    _LWLO 0CAD                                      _RSSI 00C8  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E43                _setDimmerLights_DimmingRun 1E2B  
                                    _Buz1 00AE                                      _Load 0130  
                                    _Temp 00D0                                      _main 162B  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0AAD  
                         __end_of_RF_Main 1AC0                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B3E  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 07FF  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2300 0076      _getDimmerLights_Allow_Condition$2298 0074  
    _getDimmerLights_Allow_Condition$2299 0075                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 12CE  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1297                    _getDimmerLights_Status 1BE7  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1BA4  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00C5  
                                   l10110 0067                                     l10030 0B61  
                                   l10022 0B3E                                     l10200 01A3  
                                   l10050 0B95                                     l10034 0B6A  
                                   l10302 05D2                                     l10150 00DE  
                                   l10304 05AD                                     l10144 00AC  
                                   l10128 0088                                     l10064 1330  
                                   l10306 05DA                                     l10314 05F5  
                                   l10082 1357                                     l10308 05E4  
                                   l10238 01D6                                     l10182 0165  
                                   l10190 018D                                     l10272 0559  
                                   l10176 0158                                     l10360 165A  
                                   l10266 054A                                     l10186 0181  
                                   l10284 0590                                     l10276 0568  
                                   l10356 164F                                     l10286 056B  
                                   l10288 0598                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005E  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E6  
                         __end_of___awdiv 162B                           __end_of___ftadd 0450  
                         __end_of___ftdiv 0DE4                           __end_of___ftneg 1B2C  
                                   u10045 15F8                                     u10065 1602  
                                   u10075 160C                                     u10085 1614  
                         __end_of___ftmul 0F4A                                     u10165 1DB6  
                                   u12200 05D8                                     u11315 068C  
                         ___awdiv@divisor 0072                                     u12205 05B6  
                                   u12045 0194                                     u11175 0E47  
                                   _T1CON 0018                                     u12170 0596  
                                   u11195 0E67                           __end_of___fttol 0C22  
                                   u11285 063F                                     u12175 0574  
                                   u11705 0B82                                     u11805 136E  
                                   u10775 1DF6                                     u11655 0B4E  
                                   u11755 1327                                     u11765 1336  
                                   u11945 00AA                                     u11955 00DC  
                                   u11965 0111                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1297                                     i1l990 1513  
                                   i1l982 14FA                                     i1l993 151C  
                                   i1l988 151E                                     i1l999 1530  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                   __end_of_Timeout_Counter 1DFC  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0908  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 08A3  
                        __end_of_TMR1_ISR 1FBC                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1BB0  
                                   _getAD 1EAD                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1CC1  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1C81                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 1C71                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 16E2  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0060  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 1686                       ?_setRF_DimmerLights 005E  
                        __end_of_Fosc_Set 1ACA            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0066  
                          _Exception_Main 052C                          ?_CC2500_WriteREG 0074  
                               ??_ADC_Set 0072                      _setSw_Initialization 1B0C  
                                  ??_main 007A                             ___fttol@sign1 004E  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0CAE  
                          _setMemory_Data 1B53                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 148F  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00E2                               _DimmerIntr2 00E9  
                _getMain_All_LightsStatus 1C05                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1DA7                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0066                      ??_setRF_DimmerLights 005F  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0A3E  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1AFE  
                               ??_WDT_Set 0072                          __end_of___awtoft 2000  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1800  
                _getMain_All_Error_Status 11CC                                    _IOCBF2 1CB2  
                                  i1l1011 154C                                    i1l1022 156E  
                                  i1l1017 1570                                    i1l1019 1565  
                                  i1l1028 1582                                    i1l1401 0013  
                                  i1l1404 001B                                    i1l7840 1567  
                                  i1l7816 153F                                    i1l7762 14ED  
                                  i1l7848 157B                                    i1l7794 1529  
                                  i1l7786 1515                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0198                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E43  
                                  u880_25 1FB6                                    _WDTCON 0097  
                    Exception_Main@i_3600 002A                        DelayTime_1us@count 0072  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1DD1                                    _Dimmer 00BA  
                                  _DlySw1 01D0                                    _DlySw2 01D5  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C61  
              __end_of_Mcu_Initialization 1D18                       __end_of_Buzzer_Main 1442  
                                  _Memory 0220                                    _Timer1 00BD  
                                  ___bmul 1CC1                    __end_of_Exception_Main 0600  
                    Load_Main@Load_Status 0023                      Exception_Main@lights 002C  
                                  ___wmul 1F01                                 ??___awdiv 0076  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00CE  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1EAD  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0072          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E92                                    _s_data 00CF  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 1741  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1B5E                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 1584  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1ABA  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1178          __end_of_setDimmerIntr_Dimming_Sw 10DA  
                   ___ftmul@f3_as_product 0031                 _setDimmerLights_DimmingOn 10FF  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1CB1               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074                     __end_of_SwPointSelect 1D2B  
            __size_of_Flash_Memory_Modify 004D                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1DD1  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$5283 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2241 0026  
               _setDimmerLights_SwOn$2250 0027                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1F7B                             __end_of_getAD 1EC8  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1B8C                           _getSw_KeyStatus 1F5B  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0064  
           ??_Flash_Memory_Initialization 005A                ?_DimmerLights_MOSFET_IOC_1 0070  
              ?_DimmerLights_MOSFET_IOC_2 0070                      _getMain_Lights_Count 1C71  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01EB  
       setDimmerIntr_ControlStatus@lights 0074                ?_DimmerLights_MOSFET_TMR_1 0070  
              ?_DimmerLights_MOSFET_TMR_2 0070                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1DFC                __end_of_set_TimeoutCleared 1AE4  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0073  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BD9                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1AC0                        ??_CC2500_WriteByte 0072  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13FC  
                       ??_setRFSW_Control 0066               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1AC6                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B13  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 00C6                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 162B  
                          _getDelayOff_GO 1BF6                       _CC2500_WriteCommand 1E5D  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1FDE  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0B20                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1AF0                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B05  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 1306  
      __end_of_DimmerLights_SelectPointer 1D7D                _DimmerLights_SelectPointer 1D68  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1070  
       __end_of_DimmerLights_MOSFET_IOC_1 1BCB         __end_of_DimmerLights_MOSFET_IOC_2 1BD9  
                      _setRFSW_AdjControl 0781                    __end_of_setProductData 1BE7  
       __end_of_DimmerLights_MOSFET_TMR_1 1532         __end_of_DimmerLights_MOSFET_TMR_2 1584  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1B74  
                                 _IOC_Set 1B3E                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0063     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11FA  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D3F  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1ABD                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B35  
         __end_of_setControl_Lights_Table 0D3B                           setRF_Main@error 006C  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14E0  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1B69                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1C91  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C05                                   _VarLED1 01DE  
                                 _VarLED2 01E2            __end_of_getDimmerLights_Status 1BF6  
                       __end_of_getRxData 0B20                   __end_of_getSw_KeyStatus 1F7B  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005E                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 15D7                                   ___ftadd 035A  
                                 ___ftdiv 0D3B                                   ___ftneg 1B23  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0B9B                       __end_of_Switch_Main 1B74  
                                 ___lwdiv 1261                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1CD2  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0061  
                         __size_of_setBuz 0053                                   __ptext1 133F  
                                 __ptext2 1C32                                   __ptext3 1306  
                                 __ptext4 0B20                                   __ptext5 1EAD  
                                 __ptext6 1CB1                                   __ptext7 0002  
                                 __ptext8 1AC3                                   __ptext9 0DE4  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0067  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 122D  
               __end_of_Flash_Memory_Read 1D53                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 0600                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B1B                         _DimmerLights_Main 1F3B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1ADF  
              __end_of_CC2500_ClearRXFIFO 1AD2                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1AD6                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006D  
                          _LedPointSelect 1EE4                       _DelayOffPointSelect 1D53  
                                 clrloop0 1AEB            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BBD                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 11A2  
                           _DelayTime_1us 10DA                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11A2        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1AE4                __end_of_setRF_TransceiveGO 1C51  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1AE5  
                              _setSw_Main 01EB                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 1092  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1C61  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0842                             _CC2500_TxData 096D  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1442  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1D7D                       _Flash_Memory_Unlock 1B2C  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F5B                        _Mcu_Initialization 1D06  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1ACE  
                    __end_of_my_MainTimer 1378                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1F01  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 11CC  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 10B5                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1126  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1E5D  
                    _setRF_Initialization 1066                        _setMemory_LoopSave 1CA1  
                             _Switch_Main 1B69                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1CE3  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1DBC               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CD2  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 1F1E                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0069  
                          __end_of_setLED 17A0             __size_of_setDimmerLights_Line 0012  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 15D7  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1B5E                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 1378  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1AF7                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1F3B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 096D   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0908                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1ADF  
       __end_of_setDimmerIntr_MaxmumValue 1E13                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 01DA  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1AC3                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C9  
                   setProductData@address 005D                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0013  
        __end_of_getMain_All_LightsStatus 1C14                                 _Tx_Length 00CC  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11FA  
                        _CC2500_SIDLEMode 1AD6                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1C91                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK3 01E6                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1FBC                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0060  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1BBD  
               _DimmerLights_MOSFET_IOC_2 1BCB                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 015E  
                           _DimmerLights2 0166                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 14E0                 _DimmerLights_MOSFET_TMR_2 1532  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1E92  
                setRFSW_AdjControl@status 0060                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006D                            getRxData@error 006A  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1ACA  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0028  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00C2  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1C51                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1C81                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 052C               _Flash_Memory_Initialization 0450  
                                ?___awdiv 0072                                 __ptext100 1BF6  
                               __ptext101 1C51                                 __ptext110 0B9B  
                               __ptext102 148F                                 __ptext111 1B23  
                               __ptext103 0F4A                                 __ptext120 1B48  
                               __ptext112 0D3B                                 __ptext104 1C41  
                               __ptext121 0800                                 __ptext113 035A  
                               __ptext105 16E2                                 __ptext130 1BE7  
                               __ptext122 1FBC                                 __ptext114 1FDE  
                               __ptext106 1CF4                                 __ptext131 1D68  
                               __ptext123 1B1B                                 __ptext115 17A0  
                               __ptext107 1DFC                                 __ptext140 14E0  
                               __ptext132 1B13                                 __ptext124 0A3E  
                               __ptext116 1D2B                                 __ptext108 10B5  
                               __ptext141 1B74                                 __ptext133 1ADA  
                               __ptext125 1BD9                                 __ptext117 1297  
                               __ptext109 08A3                                  ?___ftadd 0039  
                               __ptext142 1BCB                                 __ptext134 1D53  
                               __ptext126 1686                                 __ptext118 1AF0  
                               __ptext143 1BBD                                 __ptext135 13FC  
                               __ptext127 1584                                 __ptext119 11CC  
                               __ptext136 1AB4                                 __ptext128 15D7  
                               __ptext129 12CE                                 __ptext138 1F9B  
                               __ptext139 1532                                 _getRxData 0AAD  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 13B8                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AB7                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1DE6  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D3F              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D2B                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00BF                                 _r_address 00CD  
           __end_of_setDimmerLights_OnOff 0781            __size_of_setDimmerLights_SwOff 0038  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1306  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C41  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0077  
                           _SwPointSelect 1D18                       __end_of_setLED_Main 0842  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1AC3                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1B98  
                         SwPointSelect@sw 0073                                 clear_ram0 1AEA  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 133F                                 _setTxData 0F4A  
     __end_of_DimmerLights_Initialization 1B53               _DimmerLights_Initialization 1B48  
                      _CC2500_ClearRXFIFO 1ACE                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1AD2                  setRF_DimmerLights@lights 0062  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CF4  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0061      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 007E       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1178                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1F9B  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1BA4  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C41                                  _RF_Count 012E  
                    __end_of_RF_RxDisable 1C32                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1E77                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1CB1                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C4  
                            setSw_Main@sw 002C                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1B8C  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1261  
                   _DlyOff_Initialization 1ADA         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 114F  
             setDimmerLights_OnOff@lights 0069                  _setDimmerIntr_Dimming_Sw 10B5  
                                _Fosc_Set 1AC6                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0067                        __end_of_getLoad_AD 0B9B  
                      __end_of_getLoad_OK 1AF7                     _Switch_Initialization 1BB0  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 133F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E13  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0015  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00CB                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0068             _getMain_All_Error_Status$3588 0073  
           _getMain_All_Error_Status$3589 0075                  __end_of_getDimmer_LoadGO 1AFE  
                     _Load_Initialization 1AB7          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0DE4                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1FDE                          ??_LedPointSelect 0072  
                                ___ftpack 17A0             __size_of_getMain_Lights_Count 0010  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006B                      CC2500_WriteREG@value 0074  
                             _setLED_Main 0801                __end_of_setRF_DimmerLights 1741  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B05                          setDelayOff_GO@sw 0065  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1AC0  
                                __ptext11 07FF                                  __ptext20 1DD1  
                                __ptext12 1B69                                  __ptext21 1ADF  
                                __ptext13 01EB                                  __ptext30 0781  
                                __ptext22 1DE6                                  __ptext14 1CE3  
                                __ptext31 1C91                                  __ptext23 1ABD  
                                __ptext15 10FF                                  __ptext40 1DBC  
                                __ptext32 1E2B                                  __ptext24 0600  
                                __ptext16 1F5B                                  __ptext41 1AD6  
                                __ptext33 1CD2                                  __ptext25 0AAD  
                                __ptext17 1D18                                  __ptext50 1E5D  
                                __ptext42 13B8                                  __ptext34 1C81  
                                __ptext26 122D                                  __ptext18 1BB0  
                                __ptext51 1ACA                                  __ptext43 11A2  
                                __ptext35 1C23                                  __ptext27 1CA1  
                                __ptext19 1B0C                                  __ptext60 1B3E  
                                __ptext52 1DA7                                  __ptext44 1F1E  
                                __ptext36 096D                                  __ptext28 0CAE  
                                __ptext61 1AC6                                  __ptext53 1E13  
                                __ptext45 1070                                  __ptext37 0842  
                                __ptext29 1378                                  __ptext70 1AB7  
                                __ptext62 1B05                                  __ptext54 1ABA  
                                __ptext46 1B5E                                  __ptext38 1092  
                                __ptext71 1E77                                  __ptext63 0053  
                                __ptext55 1066                                  __ptext47 10DA  
                                __ptext39 1EC8                                  __ptext80 1B53  
                                __ptext72 1B98                                  __ptext64 1C71  
                                __ptext56 1D06                                  __ptext48 1AD2  
                                __ptext81 1178                                  __ptext73 0801  
                                __ptext65 1AFE                                  __ptext57 1B35  
                                __ptext49 1ACE                                  __ptext90 1EE4  
                                __ptext82 1B2C                                  __ptext74 1B8C  
                                __ptext66 1AF7                                  __ptext58 1BA4  
                                __ptext91 114F                                  __ptext83 1D3F  
                                __ptext75 1C61                                  __ptext67 1E92  
                                __ptext59 1E43                                  __ptext92 1D92  
                                __ptext84 052C                                  __ptext76 11FA  
                                __ptext68 1F01                                  __ptext93 1126  
                                __ptext85 1C14                                  __ptext77 1442  
                                __ptext69 1261                                  __ptext94 0C22  
                                __ptext86 1F3B                                  __ptext78 1B80  
                                __ptext95 1CC1                                  __ptext87 09D5  
                                __ptext79 0450                                  __ptext96 1D7D  
                                __ptext88 06C2                                  __ptext97 1C05  
                                __ptext89 1741                                  __ptext98 0908  
                                __ptext99 0E96                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C23              __end_of_setDimmerLights_Main 0A3E  
            __end_of_setDimmerLights_Line 1D06              __end_of_setDimmerLights_SwOn 16E2  
                            ??_setSw_Main 002A                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1CE3  
      __size_of_DimmerIntr_Initialization 0022                           ??_getCmd_Status 0072  
                __end_of_CC2500_SIDLEMode 1ADA                setDimmerLights_Main@lights 006A  
             __end_of_DelayOffPointSelect 1D68                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1EC8                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1F1E                  __end_of_setMemory_Modify 1CA1  
    _getAll_DimmerIntr_Dimming_Sw_RF$2165 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2166 0074  
                      __end_of_setRF_Main 06C2                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 000E  
      __size_of_DimmerLights_MOSFET_IOC_2 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0069                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1DBC        __size_of_DimmerLights_MOSFET_TMR_1 0052  
      __size_of_DimmerLights_MOSFET_TMR_2 0052                                  main@argc 01E6  
                                main@argv 01E8                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6284 0073                      _getSw_KeyStatus$6285 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 13B8  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1DA7  
              _setDimmerIntr_DimmingValue 1D92               __end_of_Flash_Memory_Modify 148F  
                             _setLog_Code 122D               __end_of_Flash_Memory_Unlock 1B35  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1070  
                      __end_of_setSw_Main 035A                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0062                           setDelayOff_GO@j 0063  
                         setDelayOff_GO@k 0064                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 0801   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0800                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1ABA                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1B80                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00CA                   __size_of_Exception_Main 00D4  
         __end_of_DelayOff_Initialization 1B1B                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B23                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0C22  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008D  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005E                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 10FF                   __end_of_CC2500_ReadByte 1EE4  
            __end_of_setSw_Initialization 1B13                           _Timeout_Counter 1DE6  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1C23                __end_of_LED_Initialization 1B98  
          __end_of_setTemp_Initialization 0800                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1ABD                     __end_of_CC2500_RxData 08A3  
                   __end_of_CC2500_TxData 09D5                     _setLoad_AH_AL_Restore 1E77  
                 __end_of_CC2500_PowerRST 13FC  
