

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Jan 03 15:19:32 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  0010                     	;# 
  2068  0011                     	;# 
  2069  0012                     	;# 
  2070  0015                     	;# 
  2071  0016                     	;# 
  2072  0016                     	;# 
  2073  0017                     	;# 
  2074  0018                     	;# 
  2075  0019                     	;# 
  2076  001A                     	;# 
  2077  001B                     	;# 
  2078  001C                     	;# 
  2079  008C                     	;# 
  2080  008D                     	;# 
  2081  008E                     	;# 
  2082  0090                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  010C                     	;# 
  2096  010D                     	;# 
  2097  010E                     	;# 
  2098  0116                     	;# 
  2099  0117                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0197                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019C                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020D                     	;# 
  2125  0210                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  0394                     	;# 
  2150  0395                     	;# 
  2151  0396                     	;# 
  2152  0FE4                     	;# 
  2153  0FE5                     	;# 
  2154  0FE6                     	;# 
  2155  0FE7                     	;# 
  2156  0FE8                     	;# 
  2157  0FE9                     	;# 
  2158  0FEA                     	;# 
  2159  0FEB                     	;# 
  2160  0FED                     	;# 
  2161  0FEE                     	;# 
  2162  0FEF                     	;# 
  2163                           
  2164                           	psect	idataBANK4
  2165  1F7B                     __pidataBANK4:	
  2166                           
  2167                           ;initializer for __product
  2168  1F7B  3463               	retlw	99
  2169  1F7C  3402               	retlw	2
  2170  1F7D  3400               	retlw	0
  2171  1F7E  3400               	retlw	0
  2172  1F7F  3400               	retlw	0
  2173  1F80  3400               	retlw	0
  2174  1F81  3400               	retlw	0
  2175  1F82  3400               	retlw	0
  2176  1F83  3400               	retlw	0
  2177  1F84  3400               	retlw	0
  2178  1F85  3400               	retlw	0
  2179  1F86  3400               	retlw	0
  2180  1F87  34FF               	retlw	255
  2181  1F88  34FF               	retlw	255
  2182  1F89  34FF               	retlw	255
  2183  1F8A  3400               	retlw	0
  2184  1F8B  3400               	retlw	0
  2185  1F8C  3400               	retlw	0
  2186  1F8D  3400               	retlw	0
  2187  1F8E  3400               	retlw	0
  2188  1F8F  3400               	retlw	0
  2189  1F90  3400               	retlw	0
  2190  1F91  3400               	retlw	0
  2191  1F92  3400               	retlw	0
  2192  1F93  3400               	retlw	0
  2193  1F94  3400               	retlw	0
  2194  1F95  3400               	retlw	0
  2195  1F96  3400               	retlw	0
  2196  1F97  3400               	retlw	0
  2197  1F98  3400               	retlw	0
  2198  1F99  3400               	retlw	0
  2199  1F9A  3400               	retlw	0
  2200                           
  2201                           	psect	stringtext
  2202  1000                     __pstringtext:	
  2203  1000                     _CC2500_registers_address:	
  2204  1000  3403               	retlw	3
  2205  1001  3416               	retlw	22
  2206  1002  3417               	retlw	23
  2207  1003  341E               	retlw	30
  2208  1004  341F               	retlw	31
  2209  1005  3420               	retlw	32
  2210  1006  342A               	retlw	42
  2211  1007  342B               	retlw	43
  2212  1008  340B               	retlw	11
  2213  1009  340C               	retlw	12
  2214  100A  340D               	retlw	13
  2215  100B  340E               	retlw	14
  2216  100C  340F               	retlw	15
  2217  100D  3410               	retlw	16
  2218  100E  3411               	retlw	17
  2219  100F  3412               	retlw	18
  2220  1010  3413               	retlw	19
  2221  1011  3414               	retlw	20
  2222  1012  340A               	retlw	10
  2223  1013  3415               	retlw	21
  2224  1014  3421               	retlw	33
  2225  1015  3422               	retlw	34
  2226  1016  3418               	retlw	24
  2227  1017  3419               	retlw	25
  2228  1018  341A               	retlw	26
  2229  1019  341B               	retlw	27
  2230  101A  341C               	retlw	28
  2231  101B  341D               	retlw	29
  2232  101C  3423               	retlw	35
  2233  101D  3424               	retlw	36
  2234  101E  3425               	retlw	37
  2235  101F  3426               	retlw	38
  2236  1020  3429               	retlw	41
  2237  1021  342C               	retlw	44
  2238  1022  342D               	retlw	45
  2239  1023  342E               	retlw	46
  2240  1024  3400               	retlw	0
  2241  1025  3401               	retlw	1
  2242  1026  3402               	retlw	2
  2243  1027  3407               	retlw	7
  2244  1028  3408               	retlw	8
  2245  1029  3409               	retlw	9
  2246  102A  3406               	retlw	6
  2247  102B  3404               	retlw	4
  2248  102C  3405               	retlw	5
  2249  102D  3427               	retlw	39
  2250  102E  3428               	retlw	40
  2251  102F                     __end_of_CC2500_registers_address:	
  2252  102F                     _CC2500_rfSettings:	
  2253  102F  3407               	retlw	7
  2254  1030  3407               	retlw	7
  2255  1031  3430               	retlw	48
  2256  1032  3487               	retlw	135
  2257  1033  346B               	retlw	107
  2258  1034  34F8               	retlw	248
  2259  1035  347F               	retlw	127
  2260  1036  343F               	retlw	63
  2261  1037  3409               	retlw	9
  2262  1038  3400               	retlw	0
  2263  1039  345C               	retlw	92
  2264  103A  34A7               	retlw	167
  2265  103B  3462               	retlw	98
  2266  103C  3486               	retlw	134
  2267  103D  3483               	retlw	131
  2268  103E  3403               	retlw	3
  2269  103F  3422               	retlw	34
  2270  1040  34F8               	retlw	248
  2271  1041  3400               	retlw	0
  2272  1042  3444               	retlw	68
  2273  1043  34B6               	retlw	182
  2274  1044  3410               	retlw	16
  2275  1045  3418               	retlw	24
  2276  1046  341D               	retlw	29
  2277  1047  341C               	retlw	28
  2278  1048  34C7               	retlw	199
  2279  1049  3400               	retlw	0
  2280  104A  34B2               	retlw	178
  2281  104B  34EA               	retlw	234
  2282  104C  340A               	retlw	10
  2283  104D  3400               	retlw	0
  2284  104E  3411               	retlw	17
  2285  104F  3459               	retlw	89
  2286  1050  3488               	retlw	136
  2287  1051  3431               	retlw	49
  2288  1052  340B               	retlw	11
  2289  1053  342F               	retlw	47
  2290  1054  342E               	retlw	46
  2291  1055  3406               	retlw	6
  2292  1056  3404               	retlw	4
  2293  1057  3405               	retlw	5
  2294  1058  3400               	retlw	0
  2295  1059  3430               	retlw	48
  2296  105A  34D3               	retlw	211
  2297  105B  3491               	retlw	145
  2298  105C  3441               	retlw	65
  2299  105D  3400               	retlw	0
  2300  105E                     __end_of_CC2500_rfSettings:	
  2301  105E                     _CC2500_patable_vaule:	
  2302  105E  34FE               	retlw	254
  2303  105F  34FE               	retlw	254
  2304  1060  34FE               	retlw	254
  2305  1061  34FE               	retlw	254
  2306  1062  34FE               	retlw	254
  2307  1063  34FE               	retlw	254
  2308  1064  34FE               	retlw	254
  2309  1065  34FE               	retlw	254
  2310  1066                     __end_of_CC2500_patable_vaule:	
  2311                           
  2312                           	psect	nvBANK0
  2313  006D                     __pnvBANK0:	
  2314  006D                     _product:	
  2315  006D                     	ds	1
  2316  000C                     _PORTA	set	12
  2317  000D                     _PORTB	set	13
  2318  000E                     _PORTC	set	14
  2319  0018                     _T1CON	set	24
  2320  0017                     _TMR1H	set	23
  2321  0016                     _TMR1L	set	22
  2322  005F                     _GIE	set	95
  2323  005B                     _IOCIE	set	91
  2324  0058                     _IOCIF	set	88
  2325  005E                     _PEIE	set	94
  2326  0060                     _RA0	set	96
  2327  0063                     _RA3	set	99
  2328  0064                     _RA4	set	100
  2329  0066                     _RA6	set	102
  2330  0067                     _RA7	set	103
  2331  0068                     _RB0	set	104
  2332  0069                     _RB1	set	105
  2333  006A                     _RB2	set	106
  2334  006B                     _RB3	set	107
  2335  006C                     _RB4	set	108
  2336  006D                     _RB5	set	109
  2337  0070                     _RC0	set	112
  2338  0071                     _RC1	set	113
  2339  0072                     _RC2	set	114
  2340  0074                     _RC4	set	116
  2341  0075                     _RC5	set	117
  2342  0077                     _RC7	set	119
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  1069                     _WPUB1	set	4201
  2375  106A                     _WPUB2	set	4202
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0022                     start_initialization:	
  2385  0022                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITCOMMON
  2388  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to COMMON
  2391  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK1
  2394  0024  30A0               	movlw	low __pbssBANK1
  2395  0025  0084               	movwf	4
  2396  0026  3000               	movlw	high __pbssBANK1
  2397  0027  0085               	movwf	5
  2398  0028  3050               	movlw	80
  2399  0029  319A  22E8  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK2
  2402  002C  3020               	movlw	low __pbssBANK2
  2403  002D  0084               	movwf	4
  2404  002E  3001               	movlw	high __pbssBANK2
  2405  002F  0085               	movwf	5
  2406  0030  304F               	movlw	79
  2407  0031  319A  22E8  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Clear objects allocated to BANK3
  2410  0034  30A0               	movlw	low __pbssBANK3
  2411  0035  0084               	movwf	4
  2412  0036  3001               	movlw	high __pbssBANK3
  2413  0037  0085               	movwf	5
  2414  0038  3047               	movlw	71
  2415  0039  319A  22E8  3180   	fcall	clear_ram0
  2416                           
  2417                           ; Clear objects allocated to BANK4
  2418  003C  3020               	movlw	low __pbssBANK4
  2419  003D  0084               	movwf	4
  2420  003E  3002               	movlw	high __pbssBANK4
  2421  003F  0085               	movwf	5
  2422  0040  3025               	movlw	37
  2423  0041  319A  22E8  3180   	fcall	clear_ram0
  2424                           
  2425                           ; Initialize objects allocated to BANK4
  2426  0044  307B               	movlw	low __pidataBANK4
  2427  0045  0084               	movwf	4
  2428  0046  309F               	movlw	(high __pidataBANK4)| (0+128)
  2429  0047  0085               	movwf	5
  2430  0048  3045               	movlw	low __pdataBANK4
  2431  0049  0086               	movwf	6
  2432  004A  3002               	movlw	high __pdataBANK4
  2433  004B  0087               	movwf	7
  2434  004C  3020               	movlw	32
  2435  004D  319A  22E2         	fcall	init_ram
  2436  004F                     end_of_initialization:	
  2437                           ;End of C runtime variable initialization code
  2438                           
  2439  004F                     __end_of__initialization:	
  2440  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2441  0050  0020               	movlb	0
  2442  0051  3196  2E2B         	ljmp	_main	;jump to C main() function
  2443                           
  2444                           	psect	bitbssCOMMON
  2445  03D0                     __pbitbssCOMMON:	
  2446  03D0                     _Receive_OK:	
  2447  03D0                     	ds	1
  2448  03D1                     _Transceive_OK:	
  2449  03D1                     	ds	1
  2450                           
  2451                           	psect	bssCOMMON
  2452  007B                     __pbssCOMMON:	
  2453  007B                     _Sw:	
  2454  007B                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _RF1:	
  2459  00A0                     	ds	14
  2460  00AE                     _Buz1:	
  2461  00AE                     	ds	12
  2462  00BA                     _Dimmer:	
  2463  00BA                     	ds	3
  2464  00BD                     _Timer1:	
  2465  00BD                     	ds	3
  2466  00C0                     _WDT:	
  2467  00C0                     	ds	2
  2468  00C2                     _CRC:	
  2469  00C2                     	ds	1
  2470  00C3                     _Cmd:	
  2471  00C3                     	ds	1
  2472  00C4                     _DelayOff:	
  2473  00C4                     	ds	1
  2474  00C5                     _DimmerIntr:	
  2475  00C5                     	ds	1
  2476  00C6                     _DimmerLights:	
  2477  00C6                     	ds	1
  2478  00C7                     _LED:	
  2479  00C7                     	ds	1
  2480  00C8                     _RSSI:	
  2481  00C8                     	ds	1
  2482  00C9                     _Rx_Length:	
  2483  00C9                     	ds	1
  2484  00CA                     _SPI0Buffer:	
  2485  00CA                     	ds	1
  2486  00CB                     _SwDetect:	
  2487  00CB                     	ds	1
  2488  00CC                     _Tx_Length:	
  2489  00CC                     	ds	1
  2490  00CD                     _r_address:	
  2491  00CD                     	ds	1
  2492  00CE                     _r_data:	
  2493  00CE                     	ds	1
  2494  00CF                     _s_data:	
  2495  00CF                     	ds	1
  2496  00D0                     _Temp:	
  2497  00D0                     	ds	18
  2498  00E2                     _DimmerIntr1:	
  2499  00E2                     	ds	7
  2500  00E9                     _DimmerIntr2:	
  2501  00E9                     	ds	7
  2502                           
  2503                           	psect	bssBANK2
  2504  0120                     __pbssBANK2:	
  2505  0120                     _myMain:	
  2506  0120                     	ds	14
  2507  012E                     _RF_Count:	
  2508  012E                     	ds	2
  2509  0130                     _Load:	
  2510  0130                     	ds	46
  2511  015E                     _DlySw1:	
  2512  015E                     	ds	5
  2513  0163                     _VarErrLED:	
  2514  0163                     	ds	4
  2515  0167                     _VarLED1:	
  2516  0167                     	ds	4
  2517  016B                     _VarLED2:	
  2518  016B                     	ds	4
  2519                           
  2520                           	psect	bssBANK3
  2521  01A0                     __pbssBANK3:	
  2522  01A0                     _RF_Data:	
  2523  01A0                     	ds	30
  2524  01BE                     _DimmerLights1:	
  2525  01BE                     	ds	9
  2526  01C7                     _DimmerLights2:	
  2527  01C7                     	ds	9
  2528  01D0                     _Sw1:	
  2529  01D0                     	ds	9
  2530  01D9                     _Sw2:	
  2531  01D9                     	ds	9
  2532  01E2                     _DlySw2:	
  2533  01E2                     	ds	5
  2534                           
  2535                           	psect	bssBANK4
  2536  0220                     __pbssBANK4:	
  2537  0220                     _Memory:	
  2538  0220                     	ds	37
  2539                           
  2540                           	psect	dataBANK4
  2541  0245                     __pdataBANK4:	
  2542  0245                     __product:	
  2543  0245                     	ds	32
  2544                           
  2545                           	psect	clrtext
  2546  1AE8                     clear_ram0:	
  2547                           ;	Called with FSR0 containing the base address, and
  2548                           ;	WREG with the size to clear
  2549                           
  2550  1AE8  0064               	clrwdt	;clear the watchdog before getting into this loop
  2551  1AE9                     clrloop0:	
  2552  1AE9  0180               	clrf	0	;clear RAM location pointed to by FSR
  2553  1AEA  3101               	addfsr 0,1
  2554  1AEB  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2555  1AEC  2AE9               	goto	clrloop0	;have we reached the end yet?
  2556  1AED  3400               	retlw	0	;all done for this memory range, return
  2557                           
  2558                           	psect	inittext
  2559  1AE2                     init_ram:	
  2560  1AE2  00FE               	movwf	126
  2561  1AE3                     initloop:	
  2562  1AE3  0012               	moviw fsr0++
  2563  1AE4  001E               	movwi fsr1++
  2564  1AE5  0BFE               	decfsz	126,f
  2565  1AE6  2AE3               	goto	initloop
  2566  1AE7  3400               	retlw	0
  2567                           
  2568                           	psect	cstackBANK3
  2569  01E7                     __pcstackBANK3:	
  2570  01E7                     ?_main:	
  2571  01E7                     main@argc:	
  2572                           ; 2 bytes @ 0x0
  2573                           
  2574                           
  2575                           ; 2 bytes @ 0x0
  2576  01E7                     	ds	2
  2577  01E9                     main@argv:	
  2578                           
  2579                           ; 2 bytes @ 0x2
  2580  01E9                     	ds	2
  2581                           
  2582                           	psect	cstackCOMMON
  2583  0070                     __pcstackCOMMON:	
  2584  0070                     ?_CC2500_WriteCommand:	
  2585  0070                     ?_RF_Timeout_Counter:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_TimeoutCleared:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_WriteByte:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_ReadStatus:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ReadByte:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_PowerRST:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_InitSetREG:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_InitPATable:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ClearTXFIFO:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ClearRXFIFO:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_FrequencyCabr:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_SIDLEMode:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DlyOff_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DlyOff_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_SwOn:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_SwOff:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_Initialization:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_Main:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_Line:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setTxData:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setRF_TransceiveGO:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setLED_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLED_Main:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_Fosc_Set:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_IO_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_TMR1_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_ADC_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_IOC_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_WDT_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_IOC_ISR:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ??_IOC_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_TMR1_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Timeout_Counter:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_set_TimeoutCleared:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Write:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Modify:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Clearing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_myMain_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Temp_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Load_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getLoad_AD:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getTemp_AD:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_my_MainTimer:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Temp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Load_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Switch_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_RF_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Exception_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setLoad_AH_AL_Restore:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setTemp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setTemp_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRF_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setRF_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_RxDisable:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_getRxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setLog_Code:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setControl_Lights_Table:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRFSW_Control:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRFSW_AdjControl:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setSw_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setSw_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_Buzzer_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Buzzer_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_CC2500_TxData:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_CC2500_RxData:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_CC2500_PowerOnInitial:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DelayOffPointSelect:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DelayOff_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DelayOff_Main:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DimmerIntr_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerLights_SelectPointer:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DimmerLights_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_setDimmerLights_DimmingOn:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_Main:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_LedPointSelect:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_LED_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_LED_Main:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Mcu_Initialization:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_ISR:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_Flash_Memory_Initialization:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Flash_Memory_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_Flash_Memory_Unlock:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Flash_Memory_Erasing:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_setMemory_Modify:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_setMemory_LoopSave:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_WDT_Main:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setRF_Learn:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_TouchPower:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_SwPointSelect:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_getDimmerLights_Status:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_getLoad_OK:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getMain_All_Error_Status:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getMain_All_LightsStatus:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getDimmerLights_Allow_Condition:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmerLights_PercentToValue:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getDimmerLights_ValueToPercent:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getCmd_Status:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_Flash_Memory_Read:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getRF_KeyStatus:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getSw_KeyStatus:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getDelayOff_GO:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmerIntr_DimmingValue:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmerLights_Line:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getDimmer_LoadGO:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmer_Load_Status:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getMain_Lights_Count:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     setDimmerLights_Initialization@lights:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x0
  2941  0070                     	ds	1
  2942  0071                     ??_TMR1_ISR:	
  2943  0071                     ??_ISR:	
  2944                           ; 0 bytes @ 0x1
  2945                           
  2946                           
  2947                           ; 0 bytes @ 0x1
  2948  0071                     	ds	1
  2949  0072                     ??_RF_Timeout_Counter:	
  2950  0072                     ??_setRF_TimeoutCleared:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0072                     ??_CC2500_WriteByte:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     ??_CC2500_ReadByte:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0072                     ?_DelayTime_1us:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0072                     ??_setDimmerLights_Initialization:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0072                     ??_getLoad_OK:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     ??_getMain_All_Error_Status:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0072                     ??_getMain_All_LightsStatus:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0072                     ??_setDimmerLights_Line:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0072                     ??_getCmd_Status:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0072                     ?_setCmd_Status:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0072                     ??_setTxData:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     ??_setRF_TransceiveGO:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0072                     ??_Fosc_Set:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0072                     ??_IO_Set:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     ??_TMR1_Set:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_ADC_Set:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_IOC_Set:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ??_WDT_Set:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_Timeout_Counter:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_set_TimeoutCleared:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_Flash_Memory_Read:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ?_setMemory_Data:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_Flash_Memory_Write:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_WDT_Clearing:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_myMain_Initialization:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ??_Temp_Initialization:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ??_setLoad_AH_AL_Restore:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ??_setTemp_Initialization:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_setRF_Initialization:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_getRF_KeyStatus:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_getSw_KeyStatus:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_Buzzer_Initialization:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_Buzzer_Main:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_DelayOffPointSelect:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ??_DimmerIntr_Initialization:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ?_setDimmerIntr_ControlStatus:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ?_setDimmerIntr_DimmingValue:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ??_getDimmerIntr_DimmingValue:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ?_setDimmerIntr_Dimming_RF:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_DimmerLights_SelectPointer:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_getDimmerLights_Line:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ??_getDimmer_LoadGO:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ??_getDimmer_Load_Status:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0072                     ??_LedPointSelect:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0072                     ??_Flash_Memory_Unlock:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0072                     ??_Flash_Memory_Erasing:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0072                     ??_setMemory_Modify:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0072                     ??_setMemory_LoopSave:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0072                     ??_WDT_Main:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0072                     ??_getMain_Lights_Count:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0072                     ??_setRF_Learn:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0072                     ??_TouchPower:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0072                     ??_SwPointSelect:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0072                     ?___bmul:	
  3119                           ; 0 bytes @ 0x2
  3120                           
  3121  0072                     ?_getBuz_GO:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0072                     ?_getAD:	
  3125                           ; 2 bytes @ 0x2
  3126                           
  3127  0072                     ?___wmul:	
  3128                           ; 2 bytes @ 0x2
  3129                           
  3130  0072                     ?___awdiv:	
  3131                           ; 2 bytes @ 0x2
  3132                           
  3133  0072                     ?___lwdiv:	
  3134                           ; 2 bytes @ 0x2
  3135                           
  3136  0072                     ?___ftpack:	
  3137                           ; 2 bytes @ 0x2
  3138                           
  3139  0072                     setDimmerIntr_ControlStatus@command:	
  3140                           ; 3 bytes @ 0x2
  3141                           
  3142  0072                     setDimmerIntr_DimmingValue@value:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0072                     setDimmerIntr_Dimming_Sw@command:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0072                     setDimmerIntr_Dimming_RF@command:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0072                     setDimmerLights_Line@lights:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0072                     getDimmer_LoadGO@loadgo:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0072                     getDimmer_Load_Status@status:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0072                     getAD@adcon1:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0072                     setMemory_Data@data:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0072                     getMain_All_LightsStatus@status:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0072                     getMain_Lights_Count@count:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0072                     setCmd_Status@cmd:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0072                     getCmd_Status@number:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0072                     getLoad_OK@ok:	
  3179                           ; 1 bytes @ 0x2
  3180                           
  3181  0072                     ___bmul@multiplicand:	
  3182                           ; 1 bytes @ 0x2
  3183                           
  3184  0072                     DelayTime_1us@count:	
  3185                           ; 1 bytes @ 0x2
  3186                           
  3187  0072                     ___wmul@multiplier:	
  3188                           ; 2 bytes @ 0x2
  3189                           
  3190  0072                     ___awdiv@divisor:	
  3191                           ; 2 bytes @ 0x2
  3192                           
  3193  0072                     ___lwdiv@divisor:	
  3194                           ; 2 bytes @ 0x2
  3195                           
  3196  0072                     ___ftpack@arg:	
  3197                           ; 2 bytes @ 0x2
  3198                           
  3199                           
  3200                           ; 3 bytes @ 0x2
  3201  0072                     	ds	1
  3202  0073                     ??_getDimmerLights_Allow_Condition:	
  3203  0073                     ??_setCmd_Status:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0073                     ??_setMemory_Data:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0073                     ??_RF_Initialization:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0073                     ??_setDimmerIntr_ControlStatus:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0073                     ??_setDimmerIntr_DimmingValue:	
  3216                           ; 0 bytes @ 0x3
  3217                           
  3218  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3219                           ; 0 bytes @ 0x3
  3220                           
  3221  0073                     ??_setDimmerIntr_Dimming_RF:	
  3222                           ; 0 bytes @ 0x3
  3223                           
  3224  0073                     ??_DimmerLights_Initialization:	
  3225                           ; 0 bytes @ 0x3
  3226                           
  3227  0073                     ??_Mcu_Initialization:	
  3228                           ; 0 bytes @ 0x3
  3229                           
  3230  0073                     ??___bmul:	
  3231                           ; 0 bytes @ 0x3
  3232                           
  3233  0073                     CC2500_WriteByte@loop_a:	
  3234                           ; 0 bytes @ 0x3
  3235                           
  3236  0073                     CC2500_ReadByte@loop_b:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0073                     DelayOffPointSelect@sw:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0073                     getDimmerIntr_DimmingValue@value:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2102:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0073                     DimmerLights_SelectPointer@lights:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0073                     getDimmerLights_Line@line:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0073                     LedPointSelect@led:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0073                     Flash_Memory_Read@i:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0073                     Flash_Memory_Write@i:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0073                     setMemory_Modify@command:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0073                     setMemory_LoopSave@command:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269  0073                     getMain_Lights_Count@status1:	
  3270                           ; 1 bytes @ 0x3
  3271                           
  3272  0073                     getCmd_Status@cmd:	
  3273                           ; 1 bytes @ 0x3
  3274                           
  3275  0073                     setLoad_AH_AL_Restore@i:	
  3276                           ; 1 bytes @ 0x3
  3277                           
  3278  0073                     setRF_Learn@command:	
  3279                           ; 1 bytes @ 0x3
  3280                           
  3281  0073                     getRF_KeyStatus@key:	
  3282                           ; 1 bytes @ 0x3
  3283                           
  3284  0073                     setRF_TransceiveGO@command:	
  3285                           ; 1 bytes @ 0x3
  3286                           
  3287  0073                     SwPointSelect@sw:	
  3288                           ; 1 bytes @ 0x3
  3289                           
  3290  0073                     _getSw_KeyStatus$6071:	
  3291                           ; 1 bytes @ 0x3
  3292                           
  3293  0073                     _getMain_All_Error_Status$3439:	
  3294                           ; 1 bytes @ 0x3
  3295                           
  3296                           
  3297                           ; 2 bytes @ 0x3
  3298  0073                     	ds	1
  3299  0074                     ??_CC2500_WriteCommand:	
  3300  0074                     ??_CC2500_ReadStatus:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0074                     ??_DelayTime_1us:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0074                     ?_CC2500_WriteREG:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0074                     ??_DlyOff_Initialization:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0074                     ??_getDimmerLights_Status:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0074                     ??_setDimmerLights_SwOff:	
  3316                           ; 0 bytes @ 0x4
  3317                           
  3318  0074                     ?_setLED:	
  3319                           ; 0 bytes @ 0x4
  3320                           
  3321  0074                     ??_setLED_Main:	
  3322                           ; 0 bytes @ 0x4
  3323                           
  3324  0074                     ??_Load_Initialization:	
  3325                           ; 0 bytes @ 0x4
  3326                           
  3327  0074                     ??_getBuz_GO:	
  3328                           ; 0 bytes @ 0x4
  3329                           
  3330  0074                     ??_getDelayOff_GO:	
  3331                           ; 0 bytes @ 0x4
  3332                           
  3333  0074                     ??_setDimmerLights_DimmingOn:	
  3334                           ; 0 bytes @ 0x4
  3335                           
  3336  0074                     ?_setDimmerLights_DimmingRun:	
  3337                           ; 0 bytes @ 0x4
  3338                           
  3339  0074                     CC2500_WriteREG@value:	
  3340                           ; 0 bytes @ 0x4
  3341                           
  3342  0074                     DlyOff_Initialization@sw:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0074                     getDelayOff_GO@sw:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0074                     setDimmerIntr_ControlStatus@lights:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0074                     setDimmerIntr_DimmingValue@lights:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0074                     getDimmerIntr_DimmingValue@lights:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3358                           ; 1 bytes @ 0x4
  3359                           
  3360  0074                     setDimmerIntr_Dimming_RF@lights:	
  3361                           ; 1 bytes @ 0x4
  3362                           
  3363  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2103:	
  3364                           ; 1 bytes @ 0x4
  3365                           
  3366  0074                     setDimmerLights_SwOff@sw:	
  3367                           ; 1 bytes @ 0x4
  3368                           
  3369  0074                     setDimmerLights_DimmingOn@sw:	
  3370                           ; 1 bytes @ 0x4
  3371                           
  3372  0074                     _getDimmerLights_Allow_Condition$2188:	
  3373                           ; 1 bytes @ 0x4
  3374                           
  3375  0074                     getDimmerLights_Status@lights:	
  3376                           ; 1 bytes @ 0x4
  3377                           
  3378  0074                     setDimmerLights_DimmingRun@command:	
  3379                           ; 1 bytes @ 0x4
  3380                           
  3381  0074                     setLED@command:	
  3382                           ; 1 bytes @ 0x4
  3383                           
  3384  0074                     Flash_Memory_Read@address:	
  3385                           ; 1 bytes @ 0x4
  3386                           
  3387  0074                     setMemory_Data@address:	
  3388                           ; 1 bytes @ 0x4
  3389                           
  3390  0074                     getMain_Lights_Count@status2:	
  3391                           ; 1 bytes @ 0x4
  3392                           
  3393  0074                     setCmd_Status@number:	
  3394                           ; 1 bytes @ 0x4
  3395                           
  3396  0074                     _getRF_KeyStatus$5094:	
  3397                           ; 1 bytes @ 0x4
  3398                           
  3399  0074                     _getSw_KeyStatus$6072:	
  3400                           ; 1 bytes @ 0x4
  3401                           
  3402  0074                     ___bmul@product:	
  3403                           ; 1 bytes @ 0x4
  3404                           
  3405  0074                     DelayTime_1us@i:	
  3406                           ; 1 bytes @ 0x4
  3407                           
  3408  0074                     ___wmul@multiplicand:	
  3409                           ; 2 bytes @ 0x4
  3410                           
  3411  0074                     ___awdiv@dividend:	
  3412                           ; 2 bytes @ 0x4
  3413                           
  3414  0074                     ___lwdiv@dividend:	
  3415                           ; 2 bytes @ 0x4
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x4
  3419  0074                     	ds	1
  3420  0075                     ??_CC2500_WriteREG:	
  3421  0075                     ??_setLED:	
  3422                           ; 0 bytes @ 0x5
  3423                           
  3424  0075                     ??_DelayOff_Initialization:	
  3425                           ; 0 bytes @ 0x5
  3426                           
  3427  0075                     ??_setDimmerLights_DimmingRun:	
  3428                           ; 0 bytes @ 0x5
  3429                           
  3430  0075                     ??_getAD:	
  3431                           ; 0 bytes @ 0x5
  3432                           
  3433  0075                     CC2500_WriteCommand@command:	
  3434                           ; 0 bytes @ 0x5
  3435                           
  3436  0075                     CC2500_ReadStatus@status_addr:	
  3437                           ; 1 bytes @ 0x5
  3438                           
  3439  0075                     getDelayOff_GO@go:	
  3440                           ; 1 bytes @ 0x5
  3441                           
  3442  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3443                           ; 1 bytes @ 0x5
  3444                           
  3445  0075                     _getDimmerLights_Allow_Condition$2189:	
  3446                           ; 1 bytes @ 0x5
  3447                           
  3448  0075                     getDimmerLights_Status@status:	
  3449                           ; 1 bytes @ 0x5
  3450                           
  3451  0075                     setLED@led:	
  3452                           ; 1 bytes @ 0x5
  3453                           
  3454  0075                     getAD@adcon0:	
  3455                           ; 1 bytes @ 0x5
  3456                           
  3457  0075                     Flash_Memory_Read@ret:	
  3458                           ; 1 bytes @ 0x5
  3459                           
  3460  0075                     getSw_KeyStatus@status:	
  3461                           ; 1 bytes @ 0x5
  3462                           
  3463  0075                     ___bmul@multiplier:	
  3464                           ; 1 bytes @ 0x5
  3465                           
  3466  0075                     ___ftpack@exp:	
  3467                           ; 1 bytes @ 0x5
  3468                           
  3469  0075                     _getMain_All_Error_Status$3440:	
  3470                           ; 1 bytes @ 0x5
  3471                           
  3472                           
  3473                           ; 2 bytes @ 0x5
  3474  0075                     	ds	1
  3475  0076                     ??_CC2500_ClearTXFIFO:	
  3476  0076                     ??_CC2500_ClearRXFIFO:	
  3477                           ; 0 bytes @ 0x6
  3478                           
  3479  0076                     ??_CC2500_SIDLEMode:	
  3480                           ; 0 bytes @ 0x6
  3481                           
  3482  0076                     ??_setLED_Initialization:	
  3483                           ; 0 bytes @ 0x6
  3484                           
  3485  0076                     ??_Flash_Memory_Modify:	
  3486                           ; 0 bytes @ 0x6
  3487                           
  3488  0076                     ??_getLoad_AD:	
  3489                           ; 0 bytes @ 0x6
  3490                           
  3491  0076                     ??_getTemp_AD:	
  3492                           ; 0 bytes @ 0x6
  3493                           
  3494  0076                     ??_RF_RxDisable:	
  3495                           ; 0 bytes @ 0x6
  3496                           
  3497  0076                     ??_setSw_Initialization:	
  3498                           ; 0 bytes @ 0x6
  3499                           
  3500  0076                     ??_CC2500_TxData:	
  3501                           ; 0 bytes @ 0x6
  3502                           
  3503  0076                     ??_CC2500_RxData:	
  3504                           ; 0 bytes @ 0x6
  3505                           
  3506  0076                     ??___wmul:	
  3507                           ; 0 bytes @ 0x6
  3508                           
  3509  0076                     ??___awdiv:	
  3510                           ; 0 bytes @ 0x6
  3511                           
  3512  0076                     ??___lwdiv:	
  3513                           ; 0 bytes @ 0x6
  3514                           
  3515  0076                     CC2500_WriteREG@w_addr:	
  3516                           ; 0 bytes @ 0x6
  3517                           
  3518  0076                     _getDimmerLights_Allow_Condition$2190:	
  3519                           ; 1 bytes @ 0x6
  3520                           
  3521  0076                     setDimmerLights_DimmingRun@lights:	
  3522                           ; 1 bytes @ 0x6
  3523                           
  3524  0076                     setLED_Initialization@led:	
  3525                           ; 1 bytes @ 0x6
  3526                           
  3527  0076                     setLED_Main@led:	
  3528                           ; 1 bytes @ 0x6
  3529                           
  3530  0076                     setSw_Initialization@sw:	
  3531                           ; 1 bytes @ 0x6
  3532                           
  3533  0076                     getSw_KeyStatus@sw:	
  3534                           ; 1 bytes @ 0x6
  3535                           
  3536  0076                     ___ftpack@sign:	
  3537                           ; 1 bytes @ 0x6
  3538                           
  3539  0076                     getBuz_GO@i:	
  3540                           ; 1 bytes @ 0x6
  3541                           
  3542  0076                     DelayTime_1us@j:	
  3543                           ; 2 bytes @ 0x6
  3544                           
  3545  0076                     ___wmul@product:	
  3546                           ; 2 bytes @ 0x6
  3547                           
  3548                           
  3549                           ; 2 bytes @ 0x6
  3550  0076                     	ds	1
  3551  0077                     ??_CC2500_InitSetREG:	
  3552  0077                     ??_CC2500_InitPATable:	
  3553                           ; 0 bytes @ 0x7
  3554                           
  3555  0077                     ??_Switch_Initialization:	
  3556                           ; 0 bytes @ 0x7
  3557                           
  3558  0077                     ??___ftpack:	
  3559                           ; 0 bytes @ 0x7
  3560                           
  3561  0077                     ??_setBuz:	
  3562                           ; 0 bytes @ 0x7
  3563                           
  3564  0077                     ??_LED_Initialization:	
  3565                           ; 0 bytes @ 0x7
  3566                           
  3567  0077                     ??_LED_Main:	
  3568                           ; 0 bytes @ 0x7
  3569                           
  3570  0077                     CC2500_TxData@loop_e:	
  3571                           ; 0 bytes @ 0x7
  3572                           
  3573  0077                     CC2500_RxData@loop_f:	
  3574                           ; 1 bytes @ 0x7
  3575                           
  3576  0077                     getDimmerLights_Allow_Condition@lights:	
  3577                           ; 1 bytes @ 0x7
  3578                           
  3579  0077                     Flash_Memory_Modify@i:	
  3580                           ; 1 bytes @ 0x7
  3581                           
  3582  0077                     getMain_All_Error_Status@command:	
  3583                           ; 1 bytes @ 0x7
  3584                           
  3585  0077                     getTemp_AD@channel:	
  3586                           ; 1 bytes @ 0x7
  3587                           
  3588  0077                     ___lwdiv@quotient:	
  3589                           ; 1 bytes @ 0x7
  3590                           
  3591                           
  3592                           ; 2 bytes @ 0x7
  3593  0077                     	ds	1
  3594  0078                     ??_CC2500_PowerRST:	
  3595  0078                     ??_CC2500_FrequencyCabr:	
  3596                           ; 0 bytes @ 0x8
  3597                           
  3598  0078                     ??_Flash_Memory_Main:	
  3599                           ; 0 bytes @ 0x8
  3600                           
  3601  0078                     setBuz@count:	
  3602                           ; 0 bytes @ 0x8
  3603                           
  3604  0078                     CC2500_InitPATable@temp:	
  3605                           ; 1 bytes @ 0x8
  3606                           
  3607  0078                     getDimmerLights_Allow_Condition@allow:	
  3608                           ; 1 bytes @ 0x8
  3609                           
  3610  0078                     getMain_All_Error_Status@status:	
  3611                           ; 1 bytes @ 0x8
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x8
  3615  0078                     	ds	1
  3616  0079                     ??_setDimmerLights_SwOn:	
  3617  0079                     ??_my_MainTimer:	
  3618                           ; 0 bytes @ 0x9
  3619                           
  3620  0079                     ??_Exception_Main:	
  3621                           ; 0 bytes @ 0x9
  3622                           
  3623  0079                     CC2500_InitPATable@loop_d:	
  3624                           ; 0 bytes @ 0x9
  3625                           
  3626  0079                     ___lwdiv@counter:	
  3627                           ; 1 bytes @ 0x9
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0x9
  3631  0079                     	ds	1
  3632  007A                     ??_setDimmerLights_Main:	
  3633  007A                     ??_Temp_Main:	
  3634                           ; 0 bytes @ 0xA
  3635                           
  3636  007A                     ??_Switch_Main:	
  3637                           ; 0 bytes @ 0xA
  3638                           
  3639  007A                     ??_RF_Main:	
  3640                           ; 0 bytes @ 0xA
  3641                           
  3642  007A                     ??_setControl_Lights_Table:	
  3643                           ; 0 bytes @ 0xA
  3644                           
  3645  007A                     ??_CC2500_PowerOnInitial:	
  3646                           ; 0 bytes @ 0xA
  3647                           
  3648  007A                     ??_DelayOff_Main:	
  3649                           ; 0 bytes @ 0xA
  3650                           
  3651  007A                     ??_DimmerLights_Main:	
  3652                           ; 0 bytes @ 0xA
  3653                           
  3654  007A                     ??_main:	
  3655                           ; 0 bytes @ 0xA
  3656                           
  3657  007A                     ??___ftneg:	
  3658                           ; 0 bytes @ 0xA
  3659                           
  3660                           
  3661                           	psect	cstackBANK0
  3662  0020                     __pcstackBANK0:	
  3663                           ; 0 bytes @ 0xA
  3664                           
  3665  0020                     ??_Load_Main:	
  3666  0020                     ?___awtoft:	
  3667                           ; 0 bytes @ 0x0
  3668                           
  3669  0020                     CC2500_InitSetREG@temp1:	
  3670                           ; 3 bytes @ 0x0
  3671                           
  3672  0020                     getLoad_AD@channel:	
  3673                           ; 1 bytes @ 0x0
  3674                           
  3675  0020                     ___awdiv@counter:	
  3676                           ; 1 bytes @ 0x0
  3677                           
  3678  0020                     ___awtoft@c:	
  3679                           ; 1 bytes @ 0x0
  3680                           
  3681                           
  3682                           ; 2 bytes @ 0x0
  3683  0020                     	ds	1
  3684  0021                     CC2500_InitSetREG@temp2:	
  3685  0021                     getLoad_AD@k:	
  3686                           ; 1 bytes @ 0x1
  3687                           
  3688  0021                     ___awdiv@sign:	
  3689                           ; 1 bytes @ 0x1
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x1
  3693  0021                     	ds	1
  3694  0022                     CC2500_InitSetREG@loop_c:	
  3695  0022                     getLoad_AD@j:	
  3696                           ; 1 bytes @ 0x2
  3697                           
  3698  0022                     Load_Main@error:	
  3699                           ; 1 bytes @ 0x2
  3700                           
  3701  0022                     ___awdiv@quotient:	
  3702                           ; 1 bytes @ 0x2
  3703                           
  3704                           
  3705                           ; 2 bytes @ 0x2
  3706  0022                     	ds	1
  3707  0023                     ??___awtoft:	
  3708  0023                     getLoad_AD@i:	
  3709                           ; 0 bytes @ 0x3
  3710                           
  3711  0023                     Load_Main@Load_Status:	
  3712                           ; 1 bytes @ 0x3
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x3
  3716  0023                     	ds	1
  3717  0024                     ?_setBuz:	
  3718  0024                     setBuz@time:	
  3719                           ; 0 bytes @ 0x4
  3720                           
  3721  0024                     Load_Main@i:	
  3722                           ; 2 bytes @ 0x4
  3723                           
  3724                           
  3725                           ; 2 bytes @ 0x4
  3726  0024                     	ds	1
  3727  0025                     ___awtoft@sign:	
  3728                           
  3729                           ; 1 bytes @ 0x5
  3730  0025                     	ds	1
  3731  0026                     ?___ftdiv:	
  3732  0026                     ?___ftmul:	
  3733                           ; 3 bytes @ 0x6
  3734                           
  3735  0026                     _setDimmerLights_SwOn$2159:	
  3736                           ; 3 bytes @ 0x6
  3737                           
  3738  0026                     Exception_Main@count:	
  3739                           ; 1 bytes @ 0x6
  3740                           
  3741  0026                     ___ftdiv@f2:	
  3742                           ; 1 bytes @ 0x6
  3743                           
  3744  0026                     ___ftmul@f1:	
  3745                           ; 3 bytes @ 0x6
  3746                           
  3747                           
  3748                           ; 3 bytes @ 0x6
  3749  0026                     	ds	1
  3750  0027                     _setDimmerLights_SwOn$2160:	
  3751  0027                     Exception_Main@error:	
  3752                           ; 1 bytes @ 0x7
  3753                           
  3754                           
  3755                           ; 1 bytes @ 0x7
  3756  0027                     	ds	1
  3757  0028                     setDimmerLights_SwOn@idle:	
  3758  0028                     Exception_Main@i:	
  3759                           ; 1 bytes @ 0x8
  3760                           
  3761                           
  3762                           ; 2 bytes @ 0x8
  3763  0028                     	ds	1
  3764  0029                     setDimmerLights_SwOn@sw:	
  3765  0029                     ___ftdiv@f1:	
  3766                           ; 1 bytes @ 0x9
  3767                           
  3768  0029                     ___ftmul@f2:	
  3769                           ; 3 bytes @ 0x9
  3770                           
  3771                           
  3772                           ; 3 bytes @ 0x9
  3773  0029                     	ds	1
  3774  002A                     ??_setSw_Main:	
  3775  002A                     Exception_Main@i_3451:	
  3776                           ; 0 bytes @ 0xA
  3777                           
  3778                           
  3779                           ; 2 bytes @ 0xA
  3780  002A                     	ds	2
  3781  002C                     ??___ftdiv:	
  3782  002C                     ??___ftmul:	
  3783                           ; 0 bytes @ 0xC
  3784                           
  3785  002C                     Exception_Main@lights:	
  3786                           ; 0 bytes @ 0xC
  3787                           
  3788  002C                     setSw_Main@sw:	
  3789                           ; 1 bytes @ 0xC
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0xC
  3793  002C                     	ds	4
  3794  0030                     ___ftdiv@cntr:	
  3795  0030                     ___ftmul@exp:	
  3796                           ; 1 bytes @ 0x10
  3797                           
  3798                           
  3799                           ; 1 bytes @ 0x10
  3800  0030                     	ds	1
  3801  0031                     ___ftdiv@f3:	
  3802  0031                     ___ftmul@f3_as_product:	
  3803                           ; 3 bytes @ 0x11
  3804                           
  3805                           
  3806                           ; 3 bytes @ 0x11
  3807  0031                     	ds	3
  3808  0034                     ___ftdiv@exp:	
  3809  0034                     ___ftmul@cntr:	
  3810                           ; 1 bytes @ 0x14
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x14
  3814  0034                     	ds	1
  3815  0035                     ___ftdiv@sign:	
  3816  0035                     ___ftmul@sign:	
  3817                           ; 1 bytes @ 0x15
  3818                           
  3819                           
  3820                           ; 1 bytes @ 0x15
  3821  0035                     	ds	1
  3822  0036                     ?___ftneg:	
  3823  0036                     ___ftneg@f1:	
  3824                           ; 3 bytes @ 0x16
  3825                           
  3826                           
  3827                           ; 3 bytes @ 0x16
  3828  0036                     	ds	3
  3829  0039                     ?___ftadd:	
  3830  0039                     ___ftadd@f1:	
  3831                           ; 3 bytes @ 0x19
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x19
  3835  0039                     	ds	3
  3836  003C                     ___ftadd@f2:	
  3837                           
  3838                           ; 3 bytes @ 0x1C
  3839  003C                     	ds	3
  3840  003F                     ??___ftadd:	
  3841                           
  3842                           ; 0 bytes @ 0x1F
  3843  003F                     	ds	4
  3844  0043                     ___ftadd@sign:	
  3845                           
  3846                           ; 1 bytes @ 0x23
  3847  0043                     	ds	1
  3848  0044                     ___ftadd@exp2:	
  3849                           
  3850                           ; 1 bytes @ 0x24
  3851  0044                     	ds	1
  3852  0045                     ___ftadd@exp1:	
  3853                           
  3854                           ; 1 bytes @ 0x25
  3855  0045                     	ds	1
  3856  0046                     ?___fttol:	
  3857  0046                     ___fttol@f1:	
  3858                           ; 4 bytes @ 0x26
  3859                           
  3860                           
  3861                           ; 3 bytes @ 0x26
  3862  0046                     	ds	4
  3863  004A                     ??___fttol:	
  3864                           
  3865                           ; 0 bytes @ 0x2A
  3866  004A                     	ds	4
  3867  004E                     ___fttol@sign1:	
  3868                           
  3869                           ; 1 bytes @ 0x2E
  3870  004E                     	ds	1
  3871  004F                     ___fttol@lval:	
  3872                           
  3873                           ; 4 bytes @ 0x2F
  3874  004F                     	ds	4
  3875  0053                     ___fttol@exp1:	
  3876                           
  3877                           ; 1 bytes @ 0x33
  3878  0053                     	ds	1
  3879  0054                     ??_getDimmerLights_PercentToValue:	
  3880  0054                     ??_getDimmerLights_ValueToPercent:	
  3881                           ; 0 bytes @ 0x34
  3882                           
  3883                           
  3884                           ; 0 bytes @ 0x34
  3885  0054                     	ds	2
  3886  0056                     getDimmerLights_PercentToValue@value:	
  3887  0056                     getDimmerLights_ValueToPercent@value:	
  3888                           ; 1 bytes @ 0x36
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x36
  3892  0056                     	ds	1
  3893  0057                     getDimmerLights_PercentToValue@i:	
  3894  0057                     getDimmerLights_ValueToPercent@i:	
  3895                           ; 3 bytes @ 0x37
  3896                           
  3897                           
  3898                           ; 3 bytes @ 0x37
  3899  0057                     	ds	3
  3900  005A                     ?_setProductData:	
  3901  005A                     ?_setDimmerIntr_MaxmumValue:	
  3902                           ; 0 bytes @ 0x3A
  3903                           
  3904  005A                     ??_Flash_Memory_Initialization:	
  3905                           ; 0 bytes @ 0x3A
  3906                           
  3907  005A                     setDimmerIntr_MaxmumValue@value:	
  3908                           ; 0 bytes @ 0x3A
  3909                           
  3910  005A                     setProductData@value:	
  3911                           ; 1 bytes @ 0x3A
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x3A
  3915  005A                     	ds	1
  3916  005B                     ??_setProductData:	
  3917  005B                     ??_setDimmerIntr_MaxmumValue:	
  3918                           ; 0 bytes @ 0x3B
  3919                           
  3920  005B                     Flash_Memory_Initialization@i:	
  3921                           ; 0 bytes @ 0x3B
  3922                           
  3923                           
  3924                           ; 1 bytes @ 0x3B
  3925  005B                     	ds	1
  3926  005C                     setDimmerIntr_MaxmumValue@lights:	
  3927                           
  3928                           ; 1 bytes @ 0x3C
  3929  005C                     	ds	1
  3930  005D                     setProductData@address:	
  3931                           
  3932                           ; 1 bytes @ 0x3D
  3933  005D                     	ds	1
  3934  005E                     ??_DlyOff_Main:	
  3935  005E                     ?_setRF_DimmerLights:	
  3936                           ; 0 bytes @ 0x3E
  3937                           
  3938  005E                     ??_setTemp_Main:	
  3939                           ; 0 bytes @ 0x3E
  3940                           
  3941  005E                     ??_setLog_Code:	
  3942                           ; 0 bytes @ 0x3E
  3943                           
  3944  005E                     ??_setRFSW_AdjControl:	
  3945                           ; 0 bytes @ 0x3E
  3946                           
  3947  005E                     ?_setDelayOff_GO:	
  3948                           ; 0 bytes @ 0x3E
  3949                           
  3950  005E                     setDelayOff_GO@command:	
  3951                           ; 0 bytes @ 0x3E
  3952                           
  3953  005E                     setRF_DimmerLights@on:	
  3954                           ; 1 bytes @ 0x3E
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x3E
  3958  005E                     	ds	1
  3959  005F                     ??_setRF_DimmerLights:	
  3960  005F                     setDelayOff_GO@value:	
  3961                           ; 0 bytes @ 0x3F
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x3F
  3965  005F                     	ds	1
  3966  0060                     ??_setDelayOff_GO:	
  3967  0060                     DlyOff_Main@sw:	
  3968                           ; 0 bytes @ 0x40
  3969                           
  3970  0060                     setTemp_Main@error:	
  3971                           ; 1 bytes @ 0x40
  3972                           
  3973  0060                     setRFSW_AdjControl@status:	
  3974                           ; 1 bytes @ 0x40
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x40
  3978  0060                     	ds	1
  3979  0061                     setRFSW_AdjControl@sw:	
  3980  0061                     setRF_DimmerLights@status:	
  3981                           ; 1 bytes @ 0x41
  3982                           
  3983                           
  3984                           ; 1 bytes @ 0x41
  3985  0061                     	ds	1
  3986  0062                     setDelayOff_GO@i:	
  3987  0062                     setRF_DimmerLights@lights:	
  3988                           ; 1 bytes @ 0x42
  3989                           
  3990                           
  3991                           ; 1 bytes @ 0x42
  3992  0062                     	ds	1
  3993  0063                     ?_setDimmerLights_Dimming:	
  3994  0063                     setDelayOff_GO@j:	
  3995                           ; 0 bytes @ 0x43
  3996                           
  3997  0063                     setDimmerLights_Dimming@status:	
  3998                           ; 1 bytes @ 0x43
  3999                           
  4000                           
  4001                           ; 1 bytes @ 0x43
  4002  0063                     	ds	1
  4003  0064                     ??_setDimmerLights_Dimming:	
  4004  0064                     setDelayOff_GO@k:	
  4005                           ; 0 bytes @ 0x44
  4006                           
  4007                           
  4008                           ; 1 bytes @ 0x44
  4009  0064                     	ds	1
  4010  0065                     setDelayOff_GO@sw:	
  4011  0065                     setDimmerLights_Dimming@lights:	
  4012                           ; 1 bytes @ 0x45
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x45
  4016  0065                     	ds	1
  4017  0066                     ?_setDimmerLights_OnOff:	
  4018  0066                     ??_setRFSW_Control:	
  4019                           ; 0 bytes @ 0x46
  4020                           
  4021  0066                     setDimmerLights_OnOff@command:	
  4022                           ; 0 bytes @ 0x46
  4023                           
  4024                           
  4025                           ; 1 bytes @ 0x46
  4026  0066                     	ds	1
  4027  0067                     ??_setDimmerLights_OnOff:	
  4028  0067                     setRFSW_Control@status:	
  4029                           ; 0 bytes @ 0x47
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x47
  4033  0067                     	ds	1
  4034  0068                     setRFSW_Control@sw:	
  4035                           
  4036                           ; 1 bytes @ 0x48
  4037  0068                     	ds	1
  4038  0069                     ??_getRxData:	
  4039  0069                     setDimmerLights_OnOff@lights:	
  4040                           ; 0 bytes @ 0x49
  4041                           
  4042                           
  4043                           ; 1 bytes @ 0x49
  4044  0069                     	ds	1
  4045  006A                     setDimmerLights_Main@lights:	
  4046  006A                     getRxData@error:	
  4047                           ; 1 bytes @ 0x4A
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x4A
  4051  006A                     	ds	1
  4052  006B                     ??_setRF_Main:	
  4053                           
  4054                           ; 0 bytes @ 0x4B
  4055  006B                     	ds	1
  4056  006C                     setRF_Main@error:	
  4057                           
  4058                           ; 1 bytes @ 0x4C
  4059  006C                     	ds	1
  4060                           
  4061                           	psect	maintext
  4062  162B                     __pmaintext:	
  4063 ;;
  4064 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4065 ;;
  4066 ;; *************** function _main *****************
  4067 ;; Defined at:
  4068 ;;		line 7 in file "../src/Main_B1.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  argc            2    0[BANK3 ] int 
  4071 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  2    0[BANK3 ] int 
  4076 ;; Registers used:
  4077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 17F/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4083 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4087 ;;Total ram usage:        4 bytes
  4088 ;; Hardware stack levels required when called:   11
  4089 ;; This function calls:
  4090 ;;		_Buzzer_Initialization
  4091 ;;		_Buzzer_Main
  4092 ;;		_CC2500_PowerOnInitial
  4093 ;;		_DelayOff_Initialization
  4094 ;;		_DelayOff_Main
  4095 ;;		_DimmerLights_Initialization
  4096 ;;		_DimmerLights_Main
  4097 ;;		_Exception_Main
  4098 ;;		_Flash_Memory_Initialization
  4099 ;;		_Flash_Memory_Main
  4100 ;;		_LED_Initialization
  4101 ;;		_LED_Main
  4102 ;;		_Load_Initialization
  4103 ;;		_Load_Main
  4104 ;;		_Mcu_Initialization
  4105 ;;		_RF_Initialization
  4106 ;;		_RF_Main
  4107 ;;		_Switch_Initialization
  4108 ;;		_Switch_Main
  4109 ;;		_Temp_Initialization
  4110 ;;		_Temp_Main
  4111 ;;		_WDT_Main
  4112 ;;		_getLoad_AD
  4113 ;;		_getTemp_AD
  4114 ;;		_myMain_Initialization
  4115 ;;		_my_MainTimer
  4116 ;; This function is called by:
  4117 ;;		Startup code after reset
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           
  4122                           ;psect for function _main
  4123  162B                     _main:	
  4124                           
  4125                           ;Main_B1.c: 8: myMain_Initialization();
  4126                           
  4127                           ;incstack = 0
  4128                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4129  162B  319C  2432  3196   	fcall	_myMain_Initialization
  4130                           
  4131                           ;Main_B1.c: 9: Mcu_Initialization();
  4132  162E  319D  2506  3196   	fcall	_Mcu_Initialization
  4133                           
  4134                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4135  1631  3184  2450  3196   	fcall	_Flash_Memory_Initialization
  4136                           
  4137                           ;Main_B1.c: 11: LED_Initialization();
  4138  1634  319B  2380  3196   	fcall	_LED_Initialization
  4139                           
  4140                           ;Main_B1.c: 12: Buzzer_Initialization();
  4141  1637  319A  22B2  3196   	fcall	_Buzzer_Initialization
  4142                           
  4143                           ;Main_B1.c: 14: ;;
  4144                           ;Main_B1.c: 15: Temp_Initialization();
  4145  163A  319A  22BE  3196   	fcall	_Temp_Initialization
  4146                           
  4147                           ;Main_B1.c: 16: Load_Initialization();
  4148  163D  319A  22B5  3196   	fcall	_Load_Initialization
  4149                           
  4150                           ;Main_B1.c: 17: ;;
  4151                           ;Main_B1.c: 18: DelayOff_Initialization();
  4152  1640  319B  2311  3196   	fcall	_DelayOff_Initialization
  4153                           
  4154                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4155  1643  319B  233C  3196   	fcall	_DimmerLights_Initialization
  4156                           
  4157                           ;Main_B1.c: 21: ;;
  4158                           ;Main_B1.c: 22: ;;
  4159                           ;Main_B1.c: 23: ;;
  4160                           ;Main_B1.c: 24: Switch_Initialization();
  4161  1646  319B  23B0  3196   	fcall	_Switch_Initialization
  4162                           
  4163                           ;Main_B1.c: 25: RF_Initialization();
  4164  1649  319A  22B8  3196   	fcall	_RF_Initialization
  4165                           
  4166                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4167  164C  319D  25BC  3196   	fcall	_CC2500_PowerOnInitial
  4168  164F                     l10354:	
  4169                           ;Main_B1.c: 27: ;;
  4170                           ;Main_B1.c: 28: ;;
  4171                           ;Main_B1.c: 30: while (1) {
  4172                           
  4173                           
  4174                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4175  164F  0022               	movlb	2	; select bank2
  4176  1650  1C20               	btfss	_myMain^(0+256),0
  4177  1651  2E5A               	goto	l10358
  4178                           
  4179                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4180  1652  3005               	movlw	5
  4181  1653  318B  2320  3196   	fcall	_getLoad_AD
  4182                           
  4183                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4184  1656  3009               	movlw	9
  4185  1657  3193  2306  3196   	fcall	_getTemp_AD
  4186  165A                     l10358:	
  4187                           
  4188                           ;Main_B1.c: 57: }
  4189                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4190  165A  0021               	movlb	1	; select bank1
  4191  165B  1C3D               	btfss	_Timer1^(0+128),0
  4192  165C  2E4F               	goto	l10354
  4193                           
  4194                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4195  165D  103D               	bcf	_Timer1^(0+128),0
  4196                           
  4197                           ;Main_B1.c: 96: my_MainTimer();
  4198  165E  3193  233F  3196   	fcall	_my_MainTimer
  4199                           
  4200                           ;Main_B1.c: 97: WDT_Main();
  4201  1661  319C  24B1  3196   	fcall	_WDT_Main
  4202                           
  4203                           ;Main_B1.c: 98: ;;
  4204                           ;Main_B1.c: 99: ;;
  4205                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4206  1664  0022               	movlb	2	; select bank2
  4207  1665  1C20               	btfss	_myMain^(0+256),0
  4208  1666  2E4F               	goto	l10354
  4209                           
  4210                           ;Main_B1.c: 101: Flash_Memory_Main();
  4211  1667  3191  21FA  3196   	fcall	_Flash_Memory_Main
  4212                           
  4213                           ;Main_B1.c: 103: LED_Main();
  4214  166A  319B  238C  3196   	fcall	_LED_Main
  4215                           
  4216                           ;Main_B1.c: 104: Buzzer_Main();
  4217  166D  3193  23FC  3196   	fcall	_Buzzer_Main
  4218                           
  4219                           ;Main_B1.c: 106: ;;
  4220                           ;Main_B1.c: 107: Temp_Main();
  4221  1670  319A  22C1  3196   	fcall	_Temp_Main
  4222                           
  4223                           ;Main_B1.c: 108: Load_Main();
  4224  1673  3180  2053  3196   	fcall	_Load_Main
  4225                           
  4226                           ;Main_B1.c: 109: ;;
  4227                           ;Main_B1.c: 111: ;;
  4228                           ;Main_B1.c: 112: DimmerLights_Main();
  4229  1676  319F  273B  3196   	fcall	_DimmerLights_Main
  4230                           
  4231                           ;Main_B1.c: 113: Switch_Main();
  4232  1679  319B  235D  3196   	fcall	_Switch_Main
  4233                           
  4234                           ;Main_B1.c: 114: ;;
  4235                           ;Main_B1.c: 115: ;;
  4236                           ;Main_B1.c: 117: RF_Main();
  4237  167C  319A  22BB  3196   	fcall	_RF_Main
  4238                           
  4239                           ;Main_B1.c: 118: DelayOff_Main();
  4240  167F  319B  2319  3196   	fcall	_DelayOff_Main
  4241                           
  4242                           ;Main_B1.c: 119: ;;
  4243                           ;Main_B1.c: 120: ;;
  4244                           ;Main_B1.c: 121: Exception_Main();
  4245  1682  3185  252C  3196   	fcall	_Exception_Main
  4246  1685  2E4F               	goto	l10354
  4247  1686                     __end_of_main:	
  4248                           ;Main_B1.c: 128: }
  4249                           ;Main_B1.c: 129: }
  4250                           ;Main_B1.c: 163: }
  4251                           ;Main_B1.c: 164: return (0);
  4252                           ;	Return value of _main is never used
  4253                           
  4254                           
  4255                           	psect	text1
  4256  133F                     __ptext1:	
  4257 ;; *************** function _my_MainTimer *****************
  4258 ;; Defined at:
  4259 ;;		line 185 in file "../src/Main_B1.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;		None               void
  4266 ;; Registers used:
  4267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:    5
  4280 ;; This function calls:
  4281 ;;		_setBuz
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _my_MainTimer
  4289  133F                     _my_MainTimer:	
  4290                           
  4291                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4292                           
  4293                           ;incstack = 0
  4294                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4295  133F  0022               	movlb	2	; select bank2
  4296  1340  1820               	btfsc	_myMain^(0+256),0
  4297  1341  2B57               	goto	l10080
  4298                           
  4299                           ;Main_B1.c: 189: myMain.PowerCount++;
  4300  1342  3001               	movlw	1
  4301  1343  00F9               	movwf	??_my_MainTimer
  4302  1344  0879               	movf	??_my_MainTimer,w
  4303  1345  07A1               	addwf	(_myMain^(0+256)+1),f
  4304                           
  4305                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4306  1346  0821               	movf	(_myMain^(0+256)+1),w
  4307  1347  3A4B               	xorlw	75
  4308  1348  1D03               	skipz
  4309  1349  0008               	return
  4310                           
  4311                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4312  134A  01A1               	clrf	(_myMain^(0+256)+1)
  4313                           
  4314                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4315  134B  1420               	bsf	_myMain^(0+256),0
  4316                           
  4317                           ;Main_B1.c: 197: setBuz(3, 50);
  4318  134C  3032               	movlw	50
  4319  134D  0020               	movlb	0	; select bank0
  4320  134E  00A4               	movwf	setBuz@time
  4321  134F  3000               	movlw	0
  4322  1350  00A5               	movwf	setBuz@time+1
  4323  1351  3003               	movlw	3
  4324  1352  3195  2584         	fcall	_setBuz
  4325                           
  4326                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4327  1354  0022               	movlb	2	; select bank2
  4328  1355  1620               	bsf	_myMain^(0+256),4
  4329                           
  4330                           ;Main_B1.c: 207: }
  4331                           ;Main_B1.c: 208: } else {
  4332  1356  0008               	return
  4333  1357                     l10080:	
  4334                           
  4335                           ;Main_B1.c: 209: myMain.PowerCount++;
  4336  1357  3001               	movlw	1
  4337  1358  00F9               	movwf	??_my_MainTimer
  4338  1359  0879               	movf	??_my_MainTimer,w
  4339  135A  07A1               	addwf	(_myMain^(0+256)+1),f
  4340                           
  4341                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4342  135B  0821               	movf	(_myMain^(0+256)+1),w
  4343  135C  3A32               	xorlw	50
  4344  135D  1903               	btfsc	3,2
  4345                           
  4346                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4347  135E  01A1               	clrf	(_myMain^(0+256)+1)
  4348                           
  4349                           ;Main_B1.c: 226: }
  4350                           ;Main_B1.c: 228: myMain.Count1++;
  4351  135F  3001               	movlw	1
  4352  1360  07A4               	addwf	(_myMain^(0+256)+4),f
  4353  1361  3000               	movlw	0
  4354  1362  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4355                           
  4356                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4357  1363  3004               	movlw	4
  4358  1364  3E20               	addlw	_myMain& (0+255)
  4359  1365  0086               	movwf	6
  4360  1366  3001               	movlw	1	; select bank2/3
  4361  1367  0087               	movwf	7
  4362  1368  3F40               	moviw [0]fsr1
  4363  1369  3A32               	xorlw	50
  4364  136A  1D03               	skipz
  4365  136B  2B6E               	goto	u11805
  4366  136C  3F41               	moviw [1]fsr1
  4367  136D  3A00               	xorlw	0
  4368  136E                     u11805:	
  4369  136E  1D03               	skipz
  4370  136F  0008               	return
  4371                           
  4372                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4373  1370  01A4               	clrf	(_myMain^(0+256)+4)
  4374  1371  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4375                           
  4376                           ;Main_B1.c: 242: if (myMain.Flag) {
  4377  1372  1CA0               	btfss	_myMain^(0+256),1
  4378  1373  2B76               	goto	l1651
  4379                           
  4380                           ;Main_B1.c: 243: myMain.Flag = 0;
  4381  1374  10A0               	bcf	_myMain^(0+256),1
  4382                           
  4383                           ;Main_B1.c: 252: } else {
  4384  1375  0008               	return
  4385  1376                     l1651:	
  4386                           
  4387                           ;Main_B1.c: 253: myMain.Flag = 1;
  4388  1376  14A0               	bsf	_myMain^(0+256),1
  4389  1377  0008               	return
  4390  1378                     __end_of_my_MainTimer:	
  4391                           
  4392                           	psect	text2
  4393  1C32                     __ptext2:	
  4394 ;; *************** function _myMain_Initialization *****************
  4395 ;; Defined at:
  4396 ;;		line 170 in file "../src/Main_B1.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr1l, fsr1h
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        1 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    3
  4417 ;; This function calls:
  4418 ;;		Nothing
  4419 ;; This function is called by:
  4420 ;;		_main
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _myMain_Initialization
  4426  1C32                     _myMain_Initialization:	
  4427                           
  4428                           ;Main_B1.c: 173: product = &_product;
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4432  1C32  3045               	movlw	__product& (0+255)
  4433  1C33  00F2               	movwf	??_myMain_Initialization
  4434  1C34  0872               	movf	??_myMain_Initialization,w
  4435  1C35  0020               	movlb	0	; select bank0
  4436  1C36  00ED               	movwf	_product
  4437                           
  4438                           ;Main_B1.c: 174: product->Data[20] = 210;
  4439  1C37  30D2               	movlw	210
  4440  1C38  00F2               	movwf	??_myMain_Initialization
  4441  1C39  086D               	movf	_product,w
  4442  1C3A  3E14               	addlw	20
  4443  1C3B  0086               	movwf	6
  4444  1C3C  3002               	movlw	2	; select bank4/5
  4445  1C3D  0087               	movwf	7
  4446  1C3E  0872               	movf	??_myMain_Initialization,w
  4447  1C3F  0081               	movwf	1
  4448  1C40  0008               	return
  4449  1C41                     __end_of_myMain_Initialization:	
  4450                           
  4451                           	psect	text3
  4452  1306                     __ptext3:	
  4453 ;; *************** function _getTemp_AD *****************
  4454 ;; Defined at:
  4455 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;  channel         1    wreg     unsigned char 
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;  channel         1    7[COMMON] unsigned char 
  4460 ;; Return value:  Size  Location     Type
  4461 ;;		None               void
  4462 ;; Registers used:
  4463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;Total ram usage:        2 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    5
  4476 ;; This function calls:
  4477 ;;		_getAD
  4478 ;; This function is called by:
  4479 ;;		_main
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _getTemp_AD
  4485  1306                     _getTemp_AD:	
  4486                           
  4487                           ;incstack = 0
  4488                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4489                           ;getTemp_AD@channel stored from wreg
  4490  1306  00F7               	movwf	getTemp_AD@channel
  4491                           
  4492                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4493  1307  0021               	movlb	1	; select bank1
  4494  1308  1D50               	btfss	_Temp^(0+128),2
  4495  1309  0008               	return
  4496                           
  4497                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4498  130A  30F0               	movlw	240
  4499  130B  00F6               	movwf	??_getTemp_AD
  4500  130C  0876               	movf	??_getTemp_AD,w
  4501  130D  00F2               	movwf	getAD@adcon1
  4502  130E  0877               	movf	getTemp_AD@channel,w
  4503  130F  319E  26AD  3193   	fcall	_getAD
  4504  1312  0873               	movf	?_getAD+1,w
  4505  1313  0021               	movlb	1	; select bank1
  4506  1314  01DD               	clrf	((_Temp+1)^(0+128)+12)
  4507  1315  07DD               	addwf	((_Temp+1)^(0+128)+12),f
  4508  1316  0872               	movf	?_getAD,w
  4509  1317  01DC               	clrf	(_Temp^(0+128)+12)
  4510  1318  07DC               	addwf	(_Temp^(0+128)+12),f
  4511                           
  4512                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4513  1319  300C               	movlw	12
  4514  131A  3ED0               	addlw	_Temp& (0+255)
  4515  131B  0086               	movwf	6
  4516  131C  0187               	clrf	7
  4517  131D  0016               	moviw fsr1++
  4518  131E  0401               	iorwf	1,w
  4519  131F  1903               	skipnz
  4520  1320  0008               	return
  4521                           
  4522                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4523  1321  085D               	movf	((_Temp+1)^(0+128)+12),w
  4524  1322  0259               	subwf	((_Temp+1)^(0+128)+8),w
  4525  1323  1D03               	skipz
  4526  1324  2B27               	goto	u11755
  4527  1325  085C               	movf	(_Temp^(0+128)+12),w
  4528  1326  0258               	subwf	(_Temp^(0+128)+8),w
  4529  1327                     u11755:	
  4530  1327  1803               	skipnc
  4531  1328  2B30               	goto	l10062
  4532                           
  4533                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4534  1329  085D               	movf	((_Temp+1)^(0+128)+12),w
  4535  132A  01D9               	clrf	((_Temp+1)^(0+128)+8)
  4536  132B  07D9               	addwf	((_Temp+1)^(0+128)+8),f
  4537  132C  085C               	movf	(_Temp^(0+128)+12),w
  4538  132D  01D8               	clrf	(_Temp^(0+128)+8)
  4539  132E  07D8               	addwf	(_Temp^(0+128)+8),f
  4540                           
  4541                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4542  132F  0008               	return
  4543  1330                     l10062:	
  4544  1330  085D               	movf	((_Temp+1)^(0+128)+12),w
  4545  1331  025B               	subwf	((_Temp+1)^(0+128)+10),w
  4546  1332  1D03               	skipz
  4547  1333  2B36               	goto	u11765
  4548  1334  085C               	movf	(_Temp^(0+128)+12),w
  4549  1335  025A               	subwf	(_Temp^(0+128)+10),w
  4550  1336                     u11765:	
  4551  1336  1803               	skipnc
  4552  1337  0008               	return
  4553                           
  4554                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4555  1338  085D               	movf	((_Temp+1)^(0+128)+12),w
  4556  1339  01DB               	clrf	((_Temp+1)^(0+128)+10)
  4557  133A  07DB               	addwf	((_Temp+1)^(0+128)+10),f
  4558  133B  085C               	movf	(_Temp^(0+128)+12),w
  4559  133C  01DA               	clrf	(_Temp^(0+128)+10)
  4560  133D  07DA               	addwf	(_Temp^(0+128)+10),f
  4561  133E  0008               	return
  4562  133F                     __end_of_getTemp_AD:	
  4563                           
  4564                           	psect	text4
  4565  0B20                     __ptext4:	
  4566 ;; *************** function _getLoad_AD *****************
  4567 ;; Defined at:
  4568 ;;		line 15 in file "../src/OverLoad_B1.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  channel         1    wreg     unsigned char 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  channel         1    0[BANK0 ] unsigned char 
  4573 ;;  i               1    3[BANK0 ] unsigned char 
  4574 ;;  j               1    2[BANK0 ] unsigned char 
  4575 ;;  k               1    1[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;		None               void
  4578 ;; Registers used:
  4579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4589 ;;Total ram usage:        6 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    5
  4592 ;; This function calls:
  4593 ;;		_getAD
  4594 ;; This function is called by:
  4595 ;;		_main
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           
  4600                           ;psect for function _getLoad_AD
  4601  0B20                     _getLoad_AD:	
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4605                           ;getLoad_AD@channel stored from wreg
  4606  0B20  0020               	movlb	0	; select bank0
  4607  0B21  00A0               	movwf	getLoad_AD@channel
  4608                           
  4609                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4610  0B22  01A3               	clrf	getLoad_AD@i
  4611  0B23  01A2               	clrf	getLoad_AD@j
  4612  0B24  01A1               	clrf	getLoad_AD@k
  4613                           
  4614                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4615  0B25  0022               	movlb	2	; select bank2
  4616  0B26  1E30               	btfss	_Load^(0+256),4
  4617  0B27  0008               	return
  4618                           
  4619                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4620  0B28  30F3               	movlw	243
  4621  0B29  00F6               	movwf	??_getLoad_AD
  4622  0B2A  0876               	movf	??_getLoad_AD,w
  4623  0B2B  00F2               	movwf	getAD@adcon1
  4624  0B2C  0020               	movlb	0	; select bank0
  4625  0B2D  0820               	movf	getLoad_AD@channel,w
  4626  0B2E  319E  26AD  318B   	fcall	_getAD
  4627  0B31  0873               	movf	?_getAD+1,w
  4628  0B32  0022               	movlb	2	; select bank2
  4629  0B33  01D2               	clrf	((_Load+1)^(0+256)+33)
  4630  0B34  07D2               	addwf	((_Load+1)^(0+256)+33),f
  4631  0B35  0872               	movf	?_getAD,w
  4632  0B36  01D1               	clrf	(_Load^(0+256)+33)
  4633  0B37  07D1               	addwf	(_Load^(0+256)+33),f
  4634                           
  4635                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4636  0B38  0020               	movlb	0	; select bank0
  4637  0B39  01A3               	clrf	getLoad_AD@i
  4638  0B3A  3004               	movlw	4
  4639  0B3B  0223               	subwf	getLoad_AD@i,w
  4640  0B3C  1803               	btfsc	3,0
  4641  0B3D  2B6A               	goto	l10032
  4642  0B3E                     l10020:	
  4643                           
  4644                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4645  0B3E  3523               	lslf	getLoad_AD@i,w
  4646  0B3F  3E3B               	addlw	(_Load+11)& (0+255)
  4647  0B40  0086               	movwf	6
  4648  0B41  3001               	movlw	1	; select bank2/3
  4649  0B42  0087               	movwf	7
  4650  0B43  3F40               	moviw [0]fsr1
  4651  0B44  00F6               	movwf	??_getLoad_AD
  4652  0B45  3F41               	moviw [1]fsr1
  4653  0B46  00F7               	movwf	??_getLoad_AD+1
  4654  0B47  0022               	movlb	2	; select bank2
  4655  0B48  0852               	movf	((_Load+1)^(0+256)+33),w
  4656  0B49  0277               	subwf	??_getLoad_AD+1,w
  4657  0B4A  1D03               	skipz
  4658  0B4B  2B4E               	goto	u11655
  4659  0B4C  0851               	movf	(_Load^(0+256)+33),w
  4660  0B4D  0276               	subwf	??_getLoad_AD,w
  4661  0B4E                     u11655:	
  4662  0B4E  1803               	skipnc
  4663  0B4F  2B61               	goto	l10028
  4664  0B50  0020               	movlb	0	; select bank0
  4665  0B51  08A2               	movf	getLoad_AD@j,f
  4666  0B52  1D03               	skipz
  4667  0B53  2B61               	goto	l10028
  4668                           
  4669                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4670  0B54  3523               	lslf	getLoad_AD@i,w
  4671  0B55  3E3B               	addlw	(_Load+11)& (0+255)
  4672  0B56  0086               	movwf	6
  4673  0B57  3001               	movlw	1	; select bank2/3
  4674  0B58  0087               	movwf	7
  4675  0B59  0022               	movlb	2	; select bank2
  4676  0B5A  0851               	movf	(_Load^(0+256)+33),w
  4677  0B5B  3FC0               	movwi [0]fsr1
  4678  0B5C  0852               	movf	((_Load+1)^(0+256)+33),w
  4679  0B5D  3FC1               	movwi [1]fsr1
  4680                           
  4681                           ;OverLoad_B1.c: 24: j = 1;
  4682  0B5E  0020               	movlb	0	; select bank0
  4683  0B5F  01A2               	clrf	getLoad_AD@j
  4684  0B60  0AA2               	incf	getLoad_AD@j,f
  4685  0B61                     l10028:	
  4686  0B61  3001               	movlw	1
  4687  0B62  00F6               	movwf	??_getLoad_AD
  4688  0B63  0876               	movf	??_getLoad_AD,w
  4689  0B64  0020               	movlb	0	; select bank0
  4690  0B65  07A3               	addwf	getLoad_AD@i,f
  4691  0B66  3004               	movlw	4
  4692  0B67  0223               	subwf	getLoad_AD@i,w
  4693  0B68  1C03               	skipc
  4694  0B69  2B3E               	goto	l10020
  4695  0B6A                     l10032:	
  4696                           
  4697                           ;OverLoad_B1.c: 25: }
  4698                           ;OverLoad_B1.c: 26: }
  4699                           ;OverLoad_B1.c: 27: if (j == 0) {
  4700  0B6A  08A2               	movf	getLoad_AD@j,f
  4701  0B6B  1D03               	skipz
  4702  0B6C  0008               	return
  4703                           
  4704                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4705  0B6D  01A3               	clrf	getLoad_AD@i
  4706  0B6E                     L1:	
  4707  0B6E  3004               	movlw	4
  4708  0B6F  0223               	subwf	getLoad_AD@i,w
  4709  0B70  1803               	btfsc	3,0
  4710  0B71  0008               	return
  4711                           
  4712                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4713  0B72  3523               	lslf	getLoad_AD@i,w
  4714  0B73  3E45               	addlw	(_Load+21)& (0+255)
  4715  0B74  0086               	movwf	6
  4716  0B75  3001               	movlw	1	; select bank2/3
  4717  0B76  0087               	movwf	7
  4718  0B77  3F40               	moviw [0]fsr1
  4719  0B78  00F6               	movwf	??_getLoad_AD
  4720  0B79  3F41               	moviw [1]fsr1
  4721  0B7A  00F7               	movwf	??_getLoad_AD+1
  4722  0B7B  0877               	movf	??_getLoad_AD+1,w
  4723  0B7C  0022               	movlb	2	; select bank2
  4724  0B7D  0252               	subwf	((_Load+1)^(0+256)+33),w
  4725  0B7E  1D03               	skipz
  4726  0B7F  2B82               	goto	u11705
  4727  0B80  0876               	movf	??_getLoad_AD,w
  4728  0B81  0251               	subwf	(_Load^(0+256)+33),w
  4729  0B82                     u11705:	
  4730  0B82  1803               	skipnc
  4731  0B83  2B95               	goto	l10048
  4732  0B84  0020               	movlb	0	; select bank0
  4733  0B85  08A1               	movf	getLoad_AD@k,f
  4734  0B86  1D03               	skipz
  4735  0B87  2B95               	goto	l10048
  4736                           
  4737                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4738  0B88  3523               	lslf	getLoad_AD@i,w
  4739  0B89  3E45               	addlw	(_Load+21)& (0+255)
  4740  0B8A  0086               	movwf	6
  4741  0B8B  3001               	movlw	1	; select bank2/3
  4742  0B8C  0087               	movwf	7
  4743  0B8D  0022               	movlb	2	; select bank2
  4744  0B8E  0851               	movf	(_Load^(0+256)+33),w
  4745  0B8F  3FC0               	movwi [0]fsr1
  4746  0B90  0852               	movf	((_Load+1)^(0+256)+33),w
  4747  0B91  3FC1               	movwi [1]fsr1
  4748                           
  4749                           ;OverLoad_B1.c: 31: k = 1;
  4750  0B92  0020               	movlb	0	; select bank0
  4751  0B93  01A1               	clrf	getLoad_AD@k
  4752  0B94  0AA1               	incf	getLoad_AD@k,f
  4753  0B95                     l10048:	
  4754  0B95  3001               	movlw	1
  4755  0B96  00F6               	movwf	??_getLoad_AD
  4756  0B97  0876               	movf	??_getLoad_AD,w
  4757  0B98  0020               	movlb	0	; select bank0
  4758  0B99  07A3               	addwf	getLoad_AD@i,f
  4759  0B9A  2B6E               	goto	L1
  4760  0B9B                     __end_of_getLoad_AD:	
  4761                           
  4762                           	psect	text5
  4763  1EAD                     __ptext5:	
  4764 ;; *************** function _getAD *****************
  4765 ;; Defined at:
  4766 ;;		line 462 in file "../src/MCU_B1.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  adcon0          1    wreg     unsigned char 
  4769 ;;  adcon1          1    2[COMMON] unsigned char 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  adcon0          1    5[COMMON] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;                  2    2[COMMON] int 
  4774 ;; Registers used:
  4775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4781 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;Total ram usage:        4 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    4
  4788 ;; This function calls:
  4789 ;;		_Timeout_Counter
  4790 ;;		_set_TimeoutCleared
  4791 ;; This function is called by:
  4792 ;;		_getLoad_AD
  4793 ;;		_getTemp_AD
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           
  4798                           ;psect for function _getAD
  4799  1EAD                     _getAD:	
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4803                           ;getAD@adcon0 stored from wreg
  4804  1EAD  00F5               	movwf	getAD@adcon0
  4805                           
  4806                           ;MCU_B1.c: 463: ADCON0 = adcon0;
  4807  1EAE  0875               	movf	getAD@adcon0,w
  4808  1EAF  0021               	movlb	1	; select bank1
  4809  1EB0  009D               	movwf	29	;volatile
  4810                           
  4811                           ;MCU_B1.c: 464: ADCON1 = adcon1;
  4812  1EB1  0872               	movf	getAD@adcon1,w
  4813  1EB2  009E               	movwf	30	;volatile
  4814                           
  4815                           ;MCU_B1.c: 465: GO_nDONE = 1;
  4816  1EB3  149D               	bsf	29,1	;volatile
  4817                           
  4818                           ;MCU_B1.c: 466: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4819  1EB4  2EB8               	goto	l9686
  4820  1EB5                     l9684:	
  4821                           
  4822                           ;MCU_B1.c: 467: Timeout_Counter();
  4823  1EB5  319D  25E6  319E   	fcall	_Timeout_Counter
  4824  1EB8                     l9686:	
  4825  1EB8  0021               	movlb	1	; select bank1
  4826  1EB9  1C9D               	btfss	29,1	;volatile
  4827  1EBA  2EBE               	goto	l9690
  4828  1EBB  0022               	movlb	2	; select bank2
  4829  1EBC  1D2B               	btfss	(_myMain^(0+256)+11),2
  4830  1EBD  2EB5               	goto	l9684
  4831  1EBE                     l9690:	
  4832                           
  4833                           ;MCU_B1.c: 468: };
  4834                           ;MCU_B1.c: 469: set_TimeoutCleared();
  4835  1EBE  319A  22DD         	fcall	_set_TimeoutCleared
  4836                           
  4837                           ;MCU_B1.c: 470: return ((ADRESH*256)+ADRESL);
  4838  1EC0  0021               	movlb	1	; select bank1
  4839  1EC1  081C               	movf	28,w	;volatile
  4840  1EC2  01F3               	clrf	?_getAD+1
  4841  1EC3  07F3               	addwf	?_getAD+1,f
  4842  1EC4  081B               	movf	27,w	;volatile
  4843  1EC5  01F2               	clrf	?_getAD
  4844  1EC6  07F2               	addwf	?_getAD,f
  4845  1EC7  0008               	return
  4846  1EC8                     __end_of_getAD:	
  4847                           
  4848                           	psect	text6
  4849  1CB1                     __ptext6:	
  4850 ;; *************** function _WDT_Main *****************
  4851 ;; Defined at:
  4852 ;;		line 1106 in file "../src/MCU_B1.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;		None               void
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0, pclath, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        1 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:    4
  4873 ;; This function calls:
  4874 ;;		_WDT_Clearing
  4875 ;; This function is called by:
  4876 ;;		_main
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _WDT_Main
  4882  1CB1                     _WDT_Main:	
  4883                           
  4884                           ;MCU_B1.c: 1107: if (WDT.Enable == 1) {
  4885                           
  4886                           ;incstack = 0
  4887                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4888  1CB1  0021               	movlb	1	; select bank1
  4889  1CB2  1C40               	btfss	_WDT^(0+128),0
  4890  1CB3  0008               	return
  4891                           
  4892                           ;MCU_B1.c: 1108: if (WDT.Timer-- > 0) {
  4893  1CB4  3001               	movlw	1
  4894  1CB5  02C1               	subwf	(_WDT^(0+128)+1),f
  4895  1CB6  0841               	movf	(_WDT^(0+128)+1),w
  4896  1CB7  3AFF               	xorlw	255
  4897  1CB8  1903               	skipnz
  4898  1CB9  0008               	return
  4899                           
  4900                           ;MCU_B1.c: 1109: WDT.Timer = 100;
  4901  1CBA  3064               	movlw	100
  4902  1CBB  00F2               	movwf	??_WDT_Main
  4903  1CBC  0872               	movf	??_WDT_Main,w
  4904  1CBD  00C1               	movwf	(_WDT^(0+128)+1)
  4905                           
  4906                           ;MCU_B1.c: 1110: WDT_Clearing();
  4907  1CBE  3180  2002         	fcall	_WDT_Clearing
  4908  1CC0  0008               	return
  4909  1CC1                     __end_of_WDT_Main:	
  4910                           
  4911                           	psect	text7
  4912  0002                     __ptext7:	
  4913 ;; *************** function _WDT_Clearing *****************
  4914 ;; Defined at:
  4915 ;;		line 1116 in file "../src/MCU_B1.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		None
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    3
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_WDT_Main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _WDT_Clearing
  4945  0002                     _WDT_Clearing:	
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _WDT_Clearing: []
  4949  0002  0064               	clrwdt	;# 
  4950  0003  0008               	return
  4951  0004                     __end_of_WDT_Clearing:	
  4952                           
  4953                           	psect	text8
  4954  1AC1                     __ptext8:	
  4955 ;; *************** function _Temp_Main *****************
  4956 ;; Defined at:
  4957 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4958 ;; Parameters:    Size  Location     Type
  4959 ;;		None
  4960 ;; Auto vars:     Size  Location     Type
  4961 ;;		None
  4962 ;; Return value:  Size  Location     Type
  4963 ;;		None               void
  4964 ;; Registers used:
  4965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;Total ram usage:        0 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    6
  4978 ;; This function calls:
  4979 ;;		_setTemp_Main
  4980 ;; This function is called by:
  4981 ;;		_main
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           
  4986                           ;psect for function _Temp_Main
  4987  1AC1                     _Temp_Main:	
  4988                           
  4989                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4990                           
  4991                           ;incstack = 0
  4992                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4993  1AC1  318D  25E4         	fcall	_setTemp_Main
  4994  1AC3  0008               	return
  4995  1AC4                     __end_of_Temp_Main:	
  4996                           
  4997                           	psect	text9
  4998  0DE4                     __ptext9:	
  4999 ;; *************** function _setTemp_Main *****************
  5000 ;; Defined at:
  5001 ;;		line 56 in file "../src/OverTemperature_B1.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  error           1   64[BANK0 ] unsigned char 
  5006 ;; Return value:  Size  Location     Type
  5007 ;;		None               void
  5008 ;; Registers used:
  5009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;Total ram usage:        3 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    5
  5022 ;; This function calls:
  5023 ;;		_getMain_All_Error_Status
  5024 ;;		_setBuz
  5025 ;;		_setProductData
  5026 ;; This function is called by:
  5027 ;;		_Temp_Main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           
  5032                           ;psect for function _setTemp_Main
  5033  0DE4                     _setTemp_Main:	
  5034                           
  5035                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5036                           
  5037                           ;incstack = 0
  5038                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5039  0DE4  3000               	movlw	0
  5040  0DE5  3191  21CC  318D   	fcall	_getMain_All_Error_Status
  5041  0DE8  0020               	movlb	0	; select bank0
  5042  0DE9  00DE               	movwf	??_setTemp_Main
  5043  0DEA  085E               	movf	??_setTemp_Main,w
  5044  0DEB  00E0               	movwf	setTemp_Main@error
  5045                           
  5046                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5047  0DEC  0021               	movlb	1	; select bank1
  5048  0DED  1C50               	btfss	_Temp^(0+128),0
  5049  0DEE  2E90               	goto	l2010
  5050                           
  5051                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5052  0DEF  1950               	btfsc	_Temp^(0+128),2
  5053  0DF0  2E00               	goto	l9708
  5054                           
  5055                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5056  0DF1  3001               	movlw	1
  5057  0DF2  07D1               	addwf	(_Temp^(0+128)+1),f
  5058  0DF3  3000               	movlw	0
  5059  0DF4  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5060                           
  5061                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5062  0DF5  3000               	movlw	0
  5063  0DF6  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5064  0DF7  30FA               	movlw	250
  5065  0DF8  1903               	skipnz
  5066  0DF9  0251               	subwf	(_Temp^(0+128)+1),w
  5067  0DFA  1C03               	skipc
  5068  0DFB  0008               	return
  5069                           
  5070                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5071  0DFC  01D1               	clrf	(_Temp^(0+128)+1)
  5072  0DFD  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5073                           
  5074                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5075  0DFE  1550               	bsf	_Temp^(0+128),2
  5076                           
  5077                           ;OverTemperature_B1.c: 70: }
  5078                           ;OverTemperature_B1.c: 71: } else {
  5079  0DFF  0008               	return
  5080  0E00                     l9708:	
  5081                           
  5082                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5083  0E00  3001               	movlw	1
  5084  0E01  07D1               	addwf	(_Temp^(0+128)+1),f
  5085  0E02  3000               	movlw	0
  5086  0E03  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5087                           
  5088                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5089  0E04  3000               	movlw	0
  5090  0E05  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5091  0E06  3002               	movlw	2
  5092  0E07  1903               	skipnz
  5093  0E08  0251               	subwf	(_Temp^(0+128)+1),w
  5094  0E09  1C03               	skipc
  5095  0E0A  0008               	return
  5096                           
  5097                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5098  0E0B  01D1               	clrf	(_Temp^(0+128)+1)
  5099  0E0C  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5100                           
  5101                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5102  0E0D  3008               	movlw	8
  5103  0E0E  3ED0               	addlw	_Temp& (0+255)
  5104  0E0F  0086               	movwf	6
  5105  0E10  0187               	clrf	7
  5106  0E11  0016               	moviw fsr1++
  5107  0E12  0401               	iorwf	1,w
  5108  0E13  1903               	skipnz
  5109  0E14  2E8A               	goto	l2015
  5110  0E15  300A               	movlw	10
  5111  0E16  3ED0               	addlw	_Temp& (0+255)
  5112  0E17  0086               	movwf	6
  5113  0E18  0187               	clrf	7
  5114  0E19  0016               	moviw fsr1++
  5115  0E1A  0401               	iorwf	1,w
  5116  0E1B  1903               	skipnz
  5117  0E1C  2E8A               	goto	l2015
  5118                           
  5119                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5120  0E1D  1150               	bcf	_Temp^(0+128),2
  5121                           
  5122                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5123  0E1E  300A               	movlw	10
  5124  0E1F  3ED0               	addlw	_Temp& (0+255)
  5125  0E20  0086               	movwf	6
  5126  0E21  0187               	clrf	7
  5127  0E22  3008               	movlw	8
  5128  0E23  3ED0               	addlw	_Temp& (0+255)
  5129  0E24  0084               	movwf	4
  5130  0E25  0185               	clrf	5
  5131  0E26  3F40               	moviw [0]fsr1
  5132  0E27  0700               	addwf	0,w
  5133  0E28  0020               	movlb	0	; select bank0
  5134  0E29  00DE               	movwf	??_setTemp_Main
  5135  0E2A  3101               	addfsr 0,1
  5136  0E2B  3F41               	moviw [1]fsr1
  5137  0E2C  3D00               	addwfc	0,w
  5138  0E2D  00DF               	movwf	??_setTemp_Main+1
  5139  0E2E  36DF               	lsrf	??_setTemp_Main+1,f
  5140  0E2F  0CDE               	rrf	??_setTemp_Main,f
  5141  0E30  085E               	movf	??_setTemp_Main,w
  5142  0E31  0021               	movlb	1	; select bank1
  5143  0E32  00D6               	movwf	(_Temp^(0+128)+6)
  5144  0E33  0020               	movlb	0	; select bank0
  5145  0E34  085F               	movf	??_setTemp_Main+1,w
  5146  0E35  0021               	movlb	1	; select bank1
  5147  0E36  00D7               	movwf	((_Temp+1)^(0+128)+6)
  5148                           
  5149                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5150  0E37  30C7               	movlw	199
  5151  0E38  00DE               	movwf	(_Temp^(0+128)+14)
  5152  0E39  3001               	movlw	1
  5153  0E3A  00DF               	movwf	(_Temp^(0+128)+15)
  5154                           
  5155                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5156  0E3B  309F               	movlw	159
  5157  0E3C  00E0               	movwf	(_Temp^(0+128)+16)
  5158  0E3D  3001               	movlw	1
  5159  0E3E  00E1               	movwf	(_Temp^(0+128)+17)
  5160                           
  5161                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5162  0E3F  1CD0               	btfss	_Temp^(0+128),1
  5163  0E40  2E61               	goto	l9740
  5164                           
  5165                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5166  0E41  085F               	movf	((_Temp+1)^(0+128)+14),w
  5167  0E42  0257               	subwf	((_Temp+1)^(0+128)+6),w
  5168  0E43  1D03               	skipz
  5169  0E44  2E47               	goto	u11175
  5170  0E45  085E               	movf	(_Temp^(0+128)+14),w
  5171  0E46  0256               	subwf	(_Temp^(0+128)+6),w
  5172  0E47                     u11175:	
  5173  0E47  1C03               	skipc
  5174  0E48  2E5F               	goto	l9738
  5175                           
  5176                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5177  0E49  3001               	movlw	1
  5178  0E4A  0020               	movlb	0	; select bank0
  5179  0E4B  00DE               	movwf	??_setTemp_Main
  5180  0E4C  085E               	movf	??_setTemp_Main,w
  5181  0E4D  0021               	movlb	1	; select bank1
  5182  0E4E  07D3               	addwf	(_Temp^(0+128)+3),f
  5183                           
  5184                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5185  0E4F  3003               	movlw	3
  5186  0E50  0253               	subwf	(_Temp^(0+128)+3),w
  5187  0E51  1C03               	skipc
  5188  0E52  2E77               	goto	l9752
  5189                           
  5190                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5191  0E53  01D3               	clrf	(_Temp^(0+128)+3)
  5192                           
  5193                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5194  0E54  10D0               	bcf	_Temp^(0+128),1
  5195                           
  5196                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5197  0E55  3064               	movlw	100
  5198  0E56  0020               	movlb	0	; select bank0
  5199  0E57  00A4               	movwf	setBuz@time
  5200  0E58  3000               	movlw	0
  5201  0E59  00A5               	movwf	setBuz@time+1
  5202  0E5A  3002               	movlw	2
  5203  0E5B  3195  2584  318D   	fcall	_setBuz
  5204                           
  5205                           ;OverTemperature_B1.c: 103: }
  5206                           ;OverTemperature_B1.c: 104: } else {
  5207  0E5E  2E77               	goto	l9752
  5208  0E5F                     l9738:	
  5209                           
  5210                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5211  0E5F  0021               	movlb	1	; select bank1
  5212  0E60  2E76               	goto	l9750
  5213  0E61                     l9740:	
  5214                           ;OverTemperature_B1.c: 106: }
  5215                           ;OverTemperature_B1.c: 107: } else {
  5216                           
  5217                           
  5218                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5219  0E61  0857               	movf	((_Temp+1)^(0+128)+6),w
  5220  0E62  0261               	subwf	((_Temp+1)^(0+128)+16),w
  5221  0E63  1D03               	skipz
  5222  0E64  2E67               	goto	u11195
  5223  0E65  0856               	movf	(_Temp^(0+128)+6),w
  5224  0E66  0260               	subwf	(_Temp^(0+128)+16),w
  5225  0E67                     u11195:	
  5226  0E67  1C03               	skipc
  5227  0E68  2E76               	goto	l9750
  5228                           
  5229                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5230  0E69  3001               	movlw	1
  5231  0E6A  0020               	movlb	0	; select bank0
  5232  0E6B  00DE               	movwf	??_setTemp_Main
  5233  0E6C  085E               	movf	??_setTemp_Main,w
  5234  0E6D  0021               	movlb	1	; select bank1
  5235  0E6E  07D3               	addwf	(_Temp^(0+128)+3),f
  5236                           
  5237                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5238  0E6F  3003               	movlw	3
  5239  0E70  0253               	subwf	(_Temp^(0+128)+3),w
  5240  0E71  1C03               	skipc
  5241  0E72  2E77               	goto	l9752
  5242                           
  5243                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5244  0E73  01D3               	clrf	(_Temp^(0+128)+3)
  5245                           
  5246                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5247  0E74  14D0               	bsf	_Temp^(0+128),1
  5248                           
  5249                           ;OverTemperature_B1.c: 113: }
  5250                           ;OverTemperature_B1.c: 114: } else {
  5251  0E75  2E77               	goto	l9752
  5252  0E76                     l9750:	
  5253                           
  5254                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5255  0E76  01D3               	clrf	(_Temp^(0+128)+3)
  5256  0E77                     l9752:	
  5257                           
  5258                           ;OverTemperature_B1.c: 116: }
  5259                           ;OverTemperature_B1.c: 117: }
  5260                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5261  0E77  0021               	movlb	1	; select bank1
  5262  0E78  0857               	movf	((_Temp+1)^(0+128)+6),w
  5263  0E79  0020               	movlb	0	; select bank0
  5264  0E7A  00DE               	movwf	??_setTemp_Main
  5265  0E7B  085E               	movf	??_setTemp_Main,w
  5266  0E7C  00DA               	movwf	setProductData@value
  5267  0E7D  3018               	movlw	24
  5268  0E7E  319B  23D9  318D   	fcall	_setProductData
  5269                           
  5270                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5271  0E81  0021               	movlb	1	; select bank1
  5272  0E82  0856               	movf	(_Temp^(0+128)+6),w
  5273  0E83  0020               	movlb	0	; select bank0
  5274  0E84  00DE               	movwf	??_setTemp_Main
  5275  0E85  085E               	movf	??_setTemp_Main,w
  5276  0E86  00DA               	movwf	setProductData@value
  5277  0E87  3019               	movlw	25
  5278  0E88  319B  23D9         	fcall	_setProductData
  5279  0E8A                     l2015:	
  5280                           
  5281                           ;OverTemperature_B1.c: 135: }
  5282                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5283  0E8A  0021               	movlb	1	; select bank1
  5284  0E8B  01D8               	clrf	(_Temp^(0+128)+8)
  5285  0E8C  01D9               	clrf	((_Temp+1)^(0+128)+8)
  5286                           
  5287                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5288  0E8D  01DA               	clrf	(_Temp^(0+128)+10)
  5289  0E8E  01DB               	clrf	((_Temp+1)^(0+128)+10)
  5290                           
  5291                           ;OverTemperature_B1.c: 138: }
  5292                           ;OverTemperature_B1.c: 139: }
  5293                           ;OverTemperature_B1.c: 141: } else {
  5294  0E8F  0008               	return
  5295  0E90                     l2010:	
  5296                           
  5297                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5298  0E90  0022               	movlb	2	; select bank2
  5299  0E91  1C20               	btfss	_myMain^(0+256),0
  5300  0E92  0008               	return
  5301                           
  5302                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5303  0E93  0021               	movlb	1	; select bank1
  5304  0E94  1450               	bsf	_Temp^(0+128),0
  5305  0E95  0008               	return
  5306  0E96                     __end_of_setTemp_Main:	
  5307                           
  5308                           	psect	text10
  5309  1ABE                     __ptext10:	
  5310 ;; *************** function _Temp_Initialization *****************
  5311 ;; Defined at:
  5312 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		status,2, status,0, pclath, cstack
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    4
  5333 ;; This function calls:
  5334 ;;		_setTemp_Initialization
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _Temp_Initialization
  5342  1ABE                     _Temp_Initialization:	
  5343                           
  5344                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5348  1ABE  3188  2000         	fcall	_setTemp_Initialization
  5349  1AC0  0008               	return
  5350  1AC1                     __end_of_Temp_Initialization:	
  5351                           
  5352                           	psect	text11
  5353  0800                     __ptext11:	
  5354 ;; *************** function _setTemp_Initialization *****************
  5355 ;; Defined at:
  5356 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;		None               void
  5363 ;; Registers used:
  5364 ;;		None
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;Total ram usage:        0 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    3
  5377 ;; This function calls:
  5378 ;;		Nothing
  5379 ;; This function is called by:
  5380 ;;		_Temp_Initialization
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _setTemp_Initialization
  5386  0800                     _setTemp_Initialization:	
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in _setTemp_Initialization: []
  5390  0800  0008               	return
  5391  0801                     __end_of_setTemp_Initialization:	
  5392                           
  5393                           	psect	text12
  5394  1B5D                     __ptext12:	
  5395 ;; *************** function _Switch_Main *****************
  5396 ;; Defined at:
  5397 ;;		line 72 in file "../src/Switch_B1.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;		None
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;		None
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5415 ;;Total ram usage:        0 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    7
  5418 ;; This function calls:
  5419 ;;		_TouchPower
  5420 ;;		_setSw_Main
  5421 ;; This function is called by:
  5422 ;;		_main
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           
  5427                           ;psect for function _Switch_Main
  5428  1B5D                     _Switch_Main:	
  5429                           
  5430                           ;Switch_B1.c: 75: setSw_Main(1);
  5431                           
  5432                           ;incstack = 0
  5433                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5434  1B5D  3001               	movlw	1
  5435  1B5E  3181  21EB  319B   	fcall	_setSw_Main
  5436                           
  5437                           ;Switch_B1.c: 79: setSw_Main(2);
  5438  1B61  3002               	movlw	2
  5439  1B62  3181  21EB  319B   	fcall	_setSw_Main
  5440                           
  5441                           ;Switch_B1.c: 87: TouchPower();
  5442  1B65  319D  25D1         	fcall	_TouchPower
  5443  1B67  0008               	return
  5444  1B68                     __end_of_Switch_Main:	
  5445                           
  5446                           	psect	text13
  5447  01EB                     __ptext13:	
  5448 ;; *************** function _setSw_Main *****************
  5449 ;; Defined at:
  5450 ;;		line 121 in file "../src/Switch_B1.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  sw              1    wreg     unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  sw              1   12[BANK0 ] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;Total ram usage:        3 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    6
  5471 ;; This function calls:
  5472 ;;		_SwPointSelect
  5473 ;;		_getMain_All_Error_Status
  5474 ;;		_getSw_KeyStatus
  5475 ;;		_setBuz
  5476 ;;		_setDimmerLights_DimmingOn
  5477 ;;		_setDimmerLights_SwOff
  5478 ;;		_setDimmerLights_SwOn
  5479 ;;		_setRF_Learn
  5480 ;; This function is called by:
  5481 ;;		_Switch_Main
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _setSw_Main
  5487  01EB                     _setSw_Main:	
  5488                           
  5489                           ;incstack = 0
  5490                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5491                           ;setSw_Main@sw stored from wreg
  5492  01EB  0020               	movlb	0	; select bank0
  5493  01EC  00AC               	movwf	setSw_Main@sw
  5494                           
  5495                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5496  01ED  082C               	movf	setSw_Main@sw,w
  5497  01EE  319D  2518  3181   	fcall	_SwPointSelect
  5498                           
  5499                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5500  01F1  087B               	movf	_Sw,w
  5501  01F2  0086               	movwf	6
  5502  01F3  3001               	movlw	1	; select bank2/3
  5503  01F4  0087               	movwf	7
  5504  01F5  1C01               	btfss	1,0
  5505  01F6  2B51               	goto	l2781
  5506                           
  5507                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5508  01F7  3000               	movlw	0
  5509  01F8  3191  21CC  3181   	fcall	_getMain_All_Error_Status
  5510  01FB  3800               	iorlw	0
  5511  01FC  1D03               	skipz
  5512  01FD  2A19               	goto	l9860
  5513                           
  5514                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5515  01FE  0A7B               	incf	_Sw,w
  5516  01FF  0086               	movwf	6
  5517  0200  3001               	movlw	1	; select bank2/3
  5518  0201  0087               	movwf	7
  5519  0202  1081               	bcf	1,1
  5520                           
  5521                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5522  0203  0020               	movlb	0	; select bank0
  5523  0204  082C               	movf	setSw_Main@sw,w
  5524  0205  319F  275B  3181   	fcall	_getSw_KeyStatus
  5525  0208  3A01               	xorlw	1
  5526  0209  3000               	movlw	0
  5527  020A  1903               	skipnz
  5528  020B  3001               	movlw	1
  5529  020C  0020               	movlb	0	; select bank0
  5530  020D  00AA               	movwf	??_setSw_Main
  5531  020E  087B               	movf	_Sw,w
  5532  020F  0086               	movwf	6
  5533  0210  3001               	movlw	1	; select bank2/3
  5534  0211  0087               	movwf	7
  5535  0212  0DAA               	rlf	??_setSw_Main,f
  5536  0213  0801               	movf	1,w
  5537  0214  062A               	xorwf	??_setSw_Main,w
  5538  0215  39FD               	andlw	-3
  5539  0216  062A               	xorwf	??_setSw_Main,w
  5540  0217  0081               	movwf	1
  5541                           
  5542                           ;Switch_B1.c: 128: } else {
  5543  0218  2A2E               	goto	l2783
  5544  0219                     l9860:	
  5545                           
  5546                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5547  0219  0A7B               	incf	_Sw,w
  5548  021A  0086               	movwf	6
  5549  021B  3001               	movlw	1	; select bank2/3
  5550  021C  0087               	movwf	7
  5551  021D  1881               	btfsc	1,1
  5552  021E  2A2E               	goto	l2783
  5553                           
  5554                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5555  021F  0A7B               	incf	_Sw,w
  5556  0220  0086               	movwf	6
  5557  0221  3001               	movlw	1	; select bank2/3
  5558  0222  0087               	movwf	7
  5559  0223  1481               	bsf	1,1
  5560                           
  5561                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5562  0224  087B               	movf	_Sw,w
  5563  0225  0086               	movwf	6
  5564  0226  3001               	movlw	1	; select bank2/3
  5565  0227  0087               	movwf	7
  5566  0228  1081               	bcf	1,1
  5567                           
  5568                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5569  0229  087B               	movf	_Sw,w
  5570  022A  0086               	movwf	6
  5571  022B  3001               	movlw	1	; select bank2/3
  5572  022C  0087               	movwf	7
  5573  022D  1501               	bsf	1,2
  5574  022E                     l2783:	
  5575                           
  5576                           ;Switch_B1.c: 134: }
  5577                           ;Switch_B1.c: 135: }
  5578                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5579  022E  087B               	movf	_Sw,w
  5580  022F  0086               	movwf	6
  5581  0230  3001               	movlw	1	; select bank2/3
  5582  0231  0087               	movwf	7
  5583  0232  1C81               	btfss	1,1
  5584  0233  2AFE               	goto	l9910
  5585                           
  5586                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5587  0234  087B               	movf	_Sw,w
  5588  0235  0086               	movwf	6
  5589  0236  3001               	movlw	1	; select bank2/3
  5590  0237  0087               	movwf	7
  5591  0238  1901               	btfsc	1,2
  5592  0239  2A5C               	goto	l9876
  5593                           
  5594                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5595  023A  3001               	movlw	1
  5596  023B  0020               	movlb	0	; select bank0
  5597  023C  00AA               	movwf	??_setSw_Main
  5598  023D  087B               	movf	_Sw,w
  5599  023E  3E02               	addlw	2
  5600  023F  0086               	movwf	6
  5601  0240  3001               	movlw	1	; select bank2/3
  5602  0241  0087               	movwf	7
  5603  0242  082A               	movf	??_setSw_Main,w
  5604  0243  0781               	addwf	1,f
  5605                           
  5606                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5607  0244  087B               	movf	_Sw,w
  5608  0245  3E02               	addlw	2
  5609  0246  0086               	movwf	6
  5610  0247  3001               	movlw	1	; select bank2/3
  5611  0248  0087               	movwf	7
  5612  0249  3003               	movlw	3
  5613  024A  0201               	subwf	1,w
  5614  024B  1C03               	skipc
  5615  024C  0008               	return
  5616                           
  5617                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5618  024D  087B               	movf	_Sw,w
  5619  024E  3E02               	addlw	2
  5620  024F  0086               	movwf	6
  5621  0250  3001               	movlw	1	; select bank2/3
  5622  0251  0087               	movwf	7
  5623  0252  0181               	clrf	1
  5624                           
  5625                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5626  0253  087B               	movf	_Sw,w
  5627  0254  0086               	movwf	6
  5628  0255  3001               	movlw	1	; select bank2/3
  5629  0256  0087               	movwf	7
  5630  0257  1501               	bsf	1,2
  5631                           
  5632                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5633  0258  082C               	movf	setSw_Main@sw,w
  5634  0259  3196  2686         	fcall	_setDimmerLights_SwOn
  5635                           
  5636                           ;Switch_B1.c: 148: }
  5637                           ;Switch_B1.c: 149: } else {
  5638  025B  0008               	return
  5639  025C                     l9876:	
  5640                           
  5641                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5642  025C  087B               	movf	_Sw,w
  5643  025D  0086               	movwf	6
  5644  025E  3001               	movlw	1	; select bank2/3
  5645  025F  0087               	movwf	7
  5646  0260  1981               	btfsc	1,3
  5647  0261  2A8E               	goto	l9886
  5648                           
  5649                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5650  0262  087B               	movf	_Sw,w
  5651  0263  3E03               	addlw	3
  5652  0264  0086               	movwf	6
  5653  0265  3001               	movlw	1	; select bank2/3
  5654  0266  0087               	movwf	7
  5655  0267  3001               	movlw	1
  5656  0268  0781               	addwf	1,f
  5657  0269  3141               	addfsr 1,1
  5658  026A  1803               	skipnc
  5659  026B  0A81               	incf	1,f
  5660                           
  5661                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5662  026C  087B               	movf	_Sw,w
  5663  026D  3E03               	addlw	3
  5664  026E  0086               	movwf	6
  5665  026F  3001               	movlw	1	; select bank2/3
  5666  0270  0087               	movwf	7
  5667  0271  3F40               	moviw [0]fsr1
  5668  0272  0020               	movlb	0	; select bank0
  5669  0273  00AA               	movwf	??_setSw_Main
  5670  0274  3F41               	moviw [1]fsr1
  5671  0275  00AB               	movwf	??_setSw_Main+1
  5672  0276  3000               	movlw	0
  5673  0277  022B               	subwf	??_setSw_Main+1,w
  5674  0278  304B               	movlw	75
  5675  0279  1903               	skipnz
  5676  027A  022A               	subwf	??_setSw_Main,w
  5677  027B  1C03               	skipc
  5678  027C  0008               	return
  5679                           
  5680                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5681  027D  087B               	movf	_Sw,w
  5682  027E  3E03               	addlw	3
  5683  027F  0086               	movwf	6
  5684  0280  3001               	movlw	1	; select bank2/3
  5685  0281  0087               	movwf	7
  5686  0282  3000               	movlw	0
  5687  0283  3FC0               	movwi [0]fsr1
  5688  0284  3FC1               	movwi [1]fsr1
  5689                           
  5690                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5691  0285  087B               	movf	_Sw,w
  5692  0286  0086               	movwf	6
  5693  0287  3001               	movlw	1	; select bank2/3
  5694  0288  0087               	movwf	7
  5695  0289  1581               	bsf	1,3
  5696                           
  5697                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5698  028A  082C               	movf	setSw_Main@sw,w
  5699  028B  3190  20FF         	fcall	_setDimmerLights_DimmingOn
  5700                           
  5701                           ;Switch_B1.c: 160: }
  5702                           ;Switch_B1.c: 161: } else {
  5703  028D  0008               	return
  5704  028E                     l9886:	
  5705                           
  5706                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5707  028E  087B               	movf	_Sw,w
  5708  028F  0086               	movwf	6
  5709  0290  3001               	movlw	1	; select bank2/3
  5710  0291  0087               	movwf	7
  5711  0292  1A01               	btfsc	1,4
  5712  0293  2ACC               	goto	l9900
  5713                           
  5714                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5715  0294  087B               	movf	_Sw,w
  5716  0295  3E05               	addlw	5
  5717  0296  0086               	movwf	6
  5718  0297  3001               	movlw	1	; select bank2/3
  5719  0298  0087               	movwf	7
  5720  0299  3001               	movlw	1
  5721  029A  0781               	addwf	1,f
  5722  029B  3141               	addfsr 1,1
  5723  029C  1803               	skipnc
  5724  029D  0A81               	incf	1,f
  5725                           
  5726                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5727  029E  087B               	movf	_Sw,w
  5728  029F  3E05               	addlw	5
  5729  02A0  0086               	movwf	6
  5730  02A1  3001               	movlw	1	; select bank2/3
  5731  02A2  0087               	movwf	7
  5732  02A3  3F40               	moviw [0]fsr1
  5733  02A4  0020               	movlb	0	; select bank0
  5734  02A5  00AA               	movwf	??_setSw_Main
  5735  02A6  3F41               	moviw [1]fsr1
  5736  02A7  00AB               	movwf	??_setSw_Main+1
  5737  02A8  3000               	movlw	0
  5738  02A9  022B               	subwf	??_setSw_Main+1,w
  5739  02AA  304B               	movlw	75
  5740  02AB  1903               	skipnz
  5741  02AC  022A               	subwf	??_setSw_Main,w
  5742  02AD  1C03               	skipc
  5743  02AE  0008               	return
  5744                           
  5745                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5746  02AF  087B               	movf	_Sw,w
  5747  02B0  3E05               	addlw	5
  5748  02B1  0086               	movwf	6
  5749  02B2  3001               	movlw	1	; select bank2/3
  5750  02B3  0087               	movwf	7
  5751  02B4  3000               	movlw	0
  5752  02B5  3FC0               	movwi [0]fsr1
  5753  02B6  3FC1               	movwi [1]fsr1
  5754                           
  5755                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5756  02B7  087B               	movf	_Sw,w
  5757  02B8  0086               	movwf	6
  5758  02B9  3001               	movlw	1	; select bank2/3
  5759  02BA  0087               	movwf	7
  5760  02BB  1601               	bsf	1,4
  5761                           
  5762                           ;Switch_B1.c: 169: setRF_Learn(1);
  5763  02BC  3001               	movlw	1
  5764  02BD  319C  24E3  3181   	fcall	_setRF_Learn
  5765                           
  5766                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5767  02C0  0022               	movlb	2	; select bank2
  5768  02C1  1EA0               	btfss	_myMain^(0+256),5
  5769  02C2  0008               	return
  5770                           
  5771                           ;Switch_B1.c: 171: setBuz(2, 100);
  5772  02C3  3064               	movlw	100
  5773  02C4  0020               	movlb	0	; select bank0
  5774  02C5  00A4               	movwf	setBuz@time
  5775  02C6  3000               	movlw	0
  5776  02C7  00A5               	movwf	setBuz@time+1
  5777  02C8  3002               	movlw	2
  5778  02C9  3195  2584         	fcall	_setBuz
  5779                           
  5780                           ;Switch_B1.c: 172: }
  5781                           ;Switch_B1.c: 176: }
  5782                           ;Switch_B1.c: 177: } else {
  5783  02CB  0008               	return
  5784  02CC                     l9900:	
  5785                           
  5786                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5787  02CC  087B               	movf	_Sw,w
  5788  02CD  0086               	movwf	6
  5789  02CE  3001               	movlw	1	; select bank2/3
  5790  02CF  0087               	movwf	7
  5791  02D0  1A81               	btfsc	1,5
  5792  02D1  0008               	return
  5793                           
  5794                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5795  02D2  087B               	movf	_Sw,w
  5796  02D3  3E07               	addlw	7
  5797  02D4  0086               	movwf	6
  5798  02D5  3001               	movlw	1	; select bank2/3
  5799  02D6  0087               	movwf	7
  5800  02D7  3001               	movlw	1
  5801  02D8  0781               	addwf	1,f
  5802  02D9  3141               	addfsr 1,1
  5803  02DA  1803               	skipnc
  5804  02DB  0A81               	incf	1,f
  5805                           
  5806                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5807  02DC  087B               	movf	_Sw,w
  5808  02DD  3E07               	addlw	7
  5809  02DE  0086               	movwf	6
  5810  02DF  3001               	movlw	1	; select bank2/3
  5811  02E0  0087               	movwf	7
  5812  02E1  3F40               	moviw [0]fsr1
  5813  02E2  0020               	movlb	0	; select bank0
  5814  02E3  00AA               	movwf	??_setSw_Main
  5815  02E4  3F41               	moviw [1]fsr1
  5816  02E5  00AB               	movwf	??_setSw_Main+1
  5817  02E6  3000               	movlw	0
  5818  02E7  022B               	subwf	??_setSw_Main+1,w
  5819  02E8  3096               	movlw	150
  5820  02E9  1903               	skipnz
  5821  02EA  022A               	subwf	??_setSw_Main,w
  5822  02EB  1C03               	skipc
  5823  02EC  0008               	return
  5824                           
  5825                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5826  02ED  087B               	movf	_Sw,w
  5827  02EE  3E07               	addlw	7
  5828  02EF  0086               	movwf	6
  5829  02F0  3001               	movlw	1	; select bank2/3
  5830  02F1  0087               	movwf	7
  5831  02F2  3000               	movlw	0
  5832  02F3  3FC0               	movwi [0]fsr1
  5833  02F4  3FC1               	movwi [1]fsr1
  5834                           
  5835                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5836  02F5  087B               	movf	_Sw,w
  5837  02F6  0086               	movwf	6
  5838  02F7  3001               	movlw	1	; select bank2/3
  5839  02F8  0087               	movwf	7
  5840  02F9  1681               	bsf	1,5
  5841                           
  5842                           ;Switch_B1.c: 185: setRF_Learn(0);
  5843  02FA  3000               	movlw	0
  5844  02FB  319C  24E3         	fcall	_setRF_Learn
  5845                           
  5846                           ;Switch_B1.c: 188: }
  5847                           ;Switch_B1.c: 189: }
  5848                           ;Switch_B1.c: 190: }
  5849                           ;Switch_B1.c: 191: }
  5850                           ;Switch_B1.c: 192: }
  5851                           ;Switch_B1.c: 193: } else {
  5852  02FD  0008               	return
  5853  02FE                     l9910:	
  5854                           
  5855                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5856  02FE  087B               	movf	_Sw,w
  5857  02FF  0086               	movwf	6
  5858  0300  3001               	movlw	1	; select bank2/3
  5859  0301  0087               	movwf	7
  5860  0302  1D01               	btfss	1,2
  5861  0303  0008               	return
  5862                           
  5863                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5864  0304  3001               	movlw	1
  5865  0305  0020               	movlb	0	; select bank0
  5866  0306  00AA               	movwf	??_setSw_Main
  5867  0307  087B               	movf	_Sw,w
  5868  0308  3E02               	addlw	2
  5869  0309  0086               	movwf	6
  5870  030A  3001               	movlw	1	; select bank2/3
  5871  030B  0087               	movwf	7
  5872  030C  082A               	movf	??_setSw_Main,w
  5873  030D  0781               	addwf	1,f
  5874                           
  5875                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5876  030E  087B               	movf	_Sw,w
  5877  030F  3E02               	addlw	2
  5878  0310  0086               	movwf	6
  5879  0311  3001               	movlw	1	; select bank2/3
  5880  0312  0087               	movwf	7
  5881  0313  3003               	movlw	3
  5882  0314  0201               	subwf	1,w
  5883  0315  1C03               	skipc
  5884  0316  0008               	return
  5885                           
  5886                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5887  0317  087B               	movf	_Sw,w
  5888  0318  3E02               	addlw	2
  5889  0319  0086               	movwf	6
  5890  031A  3001               	movlw	1	; select bank2/3
  5891  031B  0087               	movwf	7
  5892  031C  0181               	clrf	1
  5893                           
  5894                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5895  031D  087B               	movf	_Sw,w
  5896  031E  0086               	movwf	6
  5897  031F  3001               	movlw	1	; select bank2/3
  5898  0320  0087               	movwf	7
  5899  0321  1101               	bcf	1,2
  5900                           
  5901                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5902  0322  087B               	movf	_Sw,w
  5903  0323  3E03               	addlw	3
  5904  0324  0086               	movwf	6
  5905  0325  3001               	movlw	1	; select bank2/3
  5906  0326  0087               	movwf	7
  5907  0327  3000               	movlw	0
  5908  0328  3FC0               	movwi [0]fsr1
  5909  0329  3FC1               	movwi [1]fsr1
  5910                           
  5911                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5912  032A  087B               	movf	_Sw,w
  5913  032B  0086               	movwf	6
  5914  032C  3001               	movlw	1	; select bank2/3
  5915  032D  0087               	movwf	7
  5916  032E  1181               	bcf	1,3
  5917                           
  5918                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5919  032F  087B               	movf	_Sw,w
  5920  0330  3E05               	addlw	5
  5921  0331  0086               	movwf	6
  5922  0332  3001               	movlw	1	; select bank2/3
  5923  0333  0087               	movwf	7
  5924  0334  3000               	movlw	0
  5925  0335  3FC0               	movwi [0]fsr1
  5926  0336  3FC1               	movwi [1]fsr1
  5927                           
  5928                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5929  0337  087B               	movf	_Sw,w
  5930  0338  0086               	movwf	6
  5931  0339  3001               	movlw	1	; select bank2/3
  5932  033A  0087               	movwf	7
  5933  033B  1201               	bcf	1,4
  5934                           
  5935                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5936  033C  087B               	movf	_Sw,w
  5937  033D  3E07               	addlw	7
  5938  033E  0086               	movwf	6
  5939  033F  3001               	movlw	1	; select bank2/3
  5940  0340  0087               	movwf	7
  5941  0341  3000               	movlw	0
  5942  0342  3FC0               	movwi [0]fsr1
  5943  0343  3FC1               	movwi [1]fsr1
  5944                           
  5945                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5946  0344  087B               	movf	_Sw,w
  5947  0345  0086               	movwf	6
  5948  0346  3001               	movlw	1	; select bank2/3
  5949  0347  0087               	movwf	7
  5950  0348  1281               	bcf	1,5
  5951                           
  5952                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5953  0349  082C               	movf	setSw_Main@sw,w
  5954  034A  3192  22CE  3181   	fcall	_setDimmerLights_SwOff
  5955                           
  5956                           ;Switch_B1.c: 210: setRF_Learn(0);
  5957  034D  3000               	movlw	0
  5958  034E  319C  24E3         	fcall	_setRF_Learn
  5959                           
  5960                           ;Switch_B1.c: 212: }
  5961                           ;Switch_B1.c: 213: }
  5962                           ;Switch_B1.c: 214: }
  5963                           ;Switch_B1.c: 215: } else {
  5964  0350  0008               	return
  5965  0351                     l2781:	
  5966                           
  5967                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5968  0351  0022               	movlb	2	; select bank2
  5969  0352  1C20               	btfss	_myMain^(0+256),0
  5970  0353  0008               	return
  5971                           
  5972                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5973  0354  087B               	movf	_Sw,w
  5974  0355  0086               	movwf	6
  5975  0356  3001               	movlw	1	; select bank2/3
  5976  0357  0087               	movwf	7
  5977  0358  1401               	bsf	1,0
  5978  0359  0008               	return
  5979  035A                     __end_of_setSw_Main:	
  5980                           
  5981                           	psect	text14
  5982  1CE3                     __ptext14:	
  5983 ;; *************** function _setRF_Learn *****************
  5984 ;; Defined at:
  5985 ;;		line 33 in file "../src/RF_Control_B1.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  command         1    wreg     unsigned char 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  command         1    3[COMMON] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;		None               void
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;Total ram usage:        2 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    3
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_setSw_Main
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           
  6014                           ;psect for function _setRF_Learn
  6015  1CE3                     _setRF_Learn:	
  6016                           
  6017                           ;incstack = 0
  6018                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6019                           ;setRF_Learn@command stored from wreg
  6020  1CE3  00F3               	movwf	setRF_Learn@command
  6021                           
  6022                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6023  1CE4  0873               	movf	setRF_Learn@command,w
  6024  1CE5  3A01               	xorlw	1
  6025  1CE6  3000               	movlw	0
  6026  1CE7  1903               	skipnz
  6027  1CE8  3001               	movlw	1
  6028  1CE9  00F2               	movwf	??_setRF_Learn
  6029  1CEA  0EF2               	swapf	??_setRF_Learn,f
  6030  1CEB  0DF2               	rlf	??_setRF_Learn,f
  6031  1CEC  0DF2               	rlf	??_setRF_Learn,f
  6032  1CED  0021               	movlb	1	; select bank1
  6033  1CEE  0820               	movf	_RF1^(0+128),w
  6034  1CEF  0672               	xorwf	??_setRF_Learn,w
  6035  1CF0  39BF               	andlw	-65
  6036  1CF1  0672               	xorwf	??_setRF_Learn,w
  6037  1CF2  00A0               	movwf	_RF1^(0+128)
  6038  1CF3  0008               	return
  6039  1CF4                     __end_of_setRF_Learn:	
  6040                           
  6041                           	psect	text15
  6042  10FF                     __ptext15:	
  6043 ;; *************** function _setDimmerLights_DimmingOn *****************
  6044 ;; Defined at:
  6045 ;;		line 711 in file "../src/Dimmer_B1.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  sw              1    wreg     unsigned char 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;  sw              1    4[COMMON] unsigned char 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;		None               void
  6052 ;; Registers used:
  6053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;Total ram usage:        1 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    4
  6066 ;; This function calls:
  6067 ;;		_DimmerLights_SelectPointer
  6068 ;; This function is called by:
  6069 ;;		_setSw_Main
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           
  6074                           ;psect for function _setDimmerLights_DimmingOn
  6075  10FF                     _setDimmerLights_DimmingOn:	
  6076                           
  6077                           ;incstack = 0
  6078                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6079                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6080  10FF  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6081                           
  6082                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6083  1100  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6084  1101  319D  2568  3190   	fcall	_DimmerLights_SelectPointer
  6085                           
  6086                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6087  1104  0021               	movlb	1	; select bank1
  6088  1105  0846               	movf	_DimmerLights^(0+128),w
  6089  1106  0086               	movwf	6
  6090  1107  3001               	movlw	1	; select bank2/3
  6091  1108  0087               	movwf	7
  6092  1109  1881               	btfsc	1,1
  6093  110A  0008               	return
  6094                           
  6095                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6096  110B  0846               	movf	_DimmerLights^(0+128),w
  6097  110C  0086               	movwf	6
  6098  110D  3001               	movlw	1	; select bank2/3
  6099  110E  0087               	movwf	7
  6100  110F  1C01               	btfss	1,0
  6101  1110  0008               	return
  6102                           
  6103                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6104  1111  0A46               	incf	_DimmerLights^(0+128),w
  6105  1112  0086               	movwf	6
  6106  1113  3001               	movlw	1	; select bank2/3
  6107  1114  0087               	movwf	7
  6108  1115  1401               	bsf	1,0
  6109                           
  6110                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6111  1116  0846               	movf	_DimmerLights^(0+128),w
  6112  1117  0086               	movwf	6
  6113  1118  3001               	movlw	1	; select bank2/3
  6114  1119  0087               	movwf	7
  6115  111A  1581               	bsf	1,3
  6116                           
  6117                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6118  111B  0846               	movf	_DimmerLights^(0+128),w
  6119  111C  0086               	movwf	6
  6120  111D  3001               	movlw	1	; select bank2/3
  6121  111E  0087               	movwf	7
  6122  111F  1601               	bsf	1,4
  6123                           
  6124                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6125  1120  0846               	movf	_DimmerLights^(0+128),w
  6126  1121  0086               	movwf	6
  6127  1122  3001               	movlw	1	; select bank2/3
  6128  1123  0087               	movwf	7
  6129  1124  1681               	bsf	1,5
  6130  1125  0008               	return
  6131  1126                     __end_of_setDimmerLights_DimmingOn:	
  6132                           
  6133                           	psect	text16
  6134  1F5B                     __ptext16:	
  6135 ;; *************** function _getSw_KeyStatus *****************
  6136 ;; Defined at:
  6137 ;;		line 223 in file "../src/Switch_B1.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  sw              1    wreg     unsigned char 
  6140 ;; Auto vars:     Size  Location     Type
  6141 ;;  sw              1    6[COMMON] unsigned char 
  6142 ;;  status          1    5[COMMON] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      unsigned char 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;Total ram usage:        5 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    3
  6159 ;; This function calls:
  6160 ;;		Nothing
  6161 ;; This function is called by:
  6162 ;;		_setSw_Main
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           
  6167                           ;psect for function _getSw_KeyStatus
  6168  1F5B                     _getSw_KeyStatus:	
  6169                           
  6170                           ;incstack = 0
  6171                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6172                           ;getSw_KeyStatus@sw stored from wreg
  6173  1F5B  00F6               	movwf	getSw_KeyStatus@sw
  6174                           
  6175                           ;Switch_B1.c: 224: char status = 0;
  6176  1F5C  01F5               	clrf	getSw_KeyStatus@status
  6177                           
  6178                           ;Switch_B1.c: 236: if (sw == 1) {
  6179  1F5D  0876               	movf	getSw_KeyStatus@sw,w
  6180  1F5E  3A01               	xorlw	1
  6181  1F5F  1D03               	skipz
  6182  1F60  2F6A               	goto	l7606
  6183                           
  6184                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6185  1F61  01F3               	clrf	_getSw_KeyStatus$6071
  6186  1F62  0AF3               	incf	_getSw_KeyStatus$6071,f
  6187  1F63  0020               	movlb	0	; select bank0
  6188  1F64  1F0C               	btfss	12,6	;volatile
  6189  1F65  1A0C               	btfsc	12,4	;volatile
  6190  1F66  2F68               	goto	l7604
  6191  1F67  01F3               	clrf	_getSw_KeyStatus$6071
  6192  1F68                     l7604:	
  6193  1F68  0873               	movf	_getSw_KeyStatus$6071,w
  6194  1F69  2F76               	goto	L2
  6195  1F6A                     l7606:	
  6196                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6197                           
  6198  1F6A  0876               	movf	getSw_KeyStatus@sw,w
  6199  1F6B  3A02               	xorlw	2
  6200  1F6C  1D03               	skipz
  6201  1F6D  2F79               	goto	l7616
  6202                           
  6203                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6204  1F6E  01F4               	clrf	_getSw_KeyStatus$6072
  6205  1F6F  0AF4               	incf	_getSw_KeyStatus$6072,f
  6206  1F70  0020               	movlb	0	; select bank0
  6207  1F71  1C0C               	btfss	12,0	;volatile
  6208  1F72  188D               	btfsc	13,1	;volatile
  6209  1F73  2F75               	goto	l7614
  6210  1F74  01F4               	clrf	_getSw_KeyStatus$6072
  6211  1F75                     l7614:	
  6212  1F75  0874               	movf	_getSw_KeyStatus$6072,w
  6213  1F76                     L2:	
  6214  1F76  00F2               	movwf	??_getSw_KeyStatus
  6215  1F77  0872               	movf	??_getSw_KeyStatus,w
  6216  1F78  00F5               	movwf	getSw_KeyStatus@status
  6217  1F79                     l7616:	
  6218                           
  6219                           ;Switch_B1.c: 240: }
  6220                           ;Switch_B1.c: 247: return status;
  6221  1F79  0875               	movf	getSw_KeyStatus@status,w
  6222  1F7A  0008               	return
  6223  1F7B                     __end_of_getSw_KeyStatus:	
  6224                           
  6225                           	psect	text17
  6226  1D18                     __ptext17:	
  6227 ;; *************** function _SwPointSelect *****************
  6228 ;; Defined at:
  6229 ;;		line 25 in file "../src/Switch_B1.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;  sw              1    wreg     unsigned char 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  sw              1    3[COMMON] unsigned char 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;		None               void
  6236 ;; Registers used:
  6237 ;;		wreg
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;Total ram usage:        2 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    3
  6250 ;; This function calls:
  6251 ;;		Nothing
  6252 ;; This function is called by:
  6253 ;;		_setSw_Main
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           
  6258                           ;psect for function _SwPointSelect
  6259  1D18                     _SwPointSelect:	
  6260                           
  6261                           ;incstack = 0
  6262                           ; Regs used in _SwPointSelect: [wreg]
  6263                           ;SwPointSelect@sw stored from wreg
  6264  1D18  00F3               	movwf	SwPointSelect@sw
  6265                           
  6266                           ;Switch_B1.c: 28: if (sw == 1) {
  6267  1D19  0873               	movf	SwPointSelect@sw,w
  6268  1D1A  3A01               	xorlw	1
  6269  1D1B  1D03               	skipz
  6270  1D1C  2D22               	goto	l7590
  6271                           
  6272                           ;Switch_B1.c: 29: Sw = &Sw1;
  6273  1D1D  30D0               	movlw	_Sw1& (0+255)
  6274  1D1E  00F2               	movwf	??_SwPointSelect
  6275  1D1F  0872               	movf	??_SwPointSelect,w
  6276  1D20  00FB               	movwf	_Sw
  6277                           
  6278                           ;Switch_B1.c: 30: }
  6279  1D21  0008               	return
  6280  1D22                     l7590:	
  6281                           
  6282                           ;Switch_B1.c: 33: else if (sw == 2) {
  6283  1D22  0873               	movf	SwPointSelect@sw,w
  6284  1D23  3A02               	xorlw	2
  6285  1D24  1D03               	skipz
  6286  1D25  0008               	return
  6287                           
  6288                           ;Switch_B1.c: 34: Sw = &Sw2;
  6289  1D26  30D9               	movlw	_Sw2& (0+255)
  6290  1D27  00F2               	movwf	??_SwPointSelect
  6291  1D28  0872               	movf	??_SwPointSelect,w
  6292  1D29  00FB               	movwf	_Sw
  6293  1D2A  0008               	return
  6294  1D2B                     __end_of_SwPointSelect:	
  6295                           
  6296                           	psect	text18
  6297  1BB0                     __ptext18:	
  6298 ;; *************** function _Switch_Initialization *****************
  6299 ;; Defined at:
  6300 ;;		line 46 in file "../src/Switch_B1.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    6
  6321 ;; This function calls:
  6322 ;;		_TouchPower
  6323 ;;		_setSw_Initialization
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _Switch_Initialization
  6331  1BB0                     _Switch_Initialization:	
  6332                           
  6333                           ;Switch_B1.c: 47: TouchPower();
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6337  1BB0  319D  25D1  319B   	fcall	_TouchPower
  6338                           
  6339                           ;Switch_B1.c: 49: WPUB1 = 0;
  6340  1BB3  0024               	movlb	4	; select bank4
  6341  1BB4  108D               	bcf	13,1	;volatile
  6342                           
  6343                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6344  1BB5  3001               	movlw	1
  6345  1BB6  319B  230A  319B   	fcall	_setSw_Initialization
  6346                           
  6347                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6348  1BB9  3002               	movlw	2
  6349  1BBA  319B  230A         	fcall	_setSw_Initialization
  6350  1BBC  0008               	return
  6351  1BBD                     __end_of_Switch_Initialization:	
  6352                           
  6353                           	psect	text19
  6354  1B0A                     __ptext19:	
  6355 ;; *************** function _setSw_Initialization *****************
  6356 ;; Defined at:
  6357 ;;		line 93 in file "../src/Switch_B1.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;  sw              1    wreg     unsigned char 
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;  sw              1    6[COMMON] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;Total ram usage:        1 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    5
  6378 ;; This function calls:
  6379 ;;		_setLED
  6380 ;; This function is called by:
  6381 ;;		_Switch_Initialization
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _setSw_Initialization
  6387  1B0A                     _setSw_Initialization:	
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6391                           ;setSw_Initialization@sw stored from wreg
  6392  1B0A  00F6               	movwf	setSw_Initialization@sw
  6393                           
  6394                           ;Switch_B1.c: 94: setLED(sw, 1);
  6395  1B0B  01F4               	clrf	setLED@command
  6396  1B0C  0AF4               	incf	setLED@command,f
  6397  1B0D  0876               	movf	setSw_Initialization@sw,w
  6398  1B0E  3197  2741         	fcall	_setLED
  6399  1B10  0008               	return
  6400  1B11                     __end_of_setSw_Initialization:	
  6401                           
  6402                           	psect	text20
  6403  1DD1                     __ptext20:	
  6404 ;; *************** function _TouchPower *****************
  6405 ;; Defined at:
  6406 ;;		line 10 in file "../src/Switch_B1.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;		None
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;		None
  6411 ;; Return value:  Size  Location     Type
  6412 ;;		None               void
  6413 ;; Registers used:
  6414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;Total ram usage:        0 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    4
  6427 ;; This function calls:
  6428 ;;		_Timeout_Counter
  6429 ;;		_set_TimeoutCleared
  6430 ;; This function is called by:
  6431 ;;		_Switch_Initialization
  6432 ;;		_Switch_Main
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           
  6437                           ;psect for function _TouchPower
  6438  1DD1                     _TouchPower:	
  6439                           
  6440                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6441                           
  6442                           ;incstack = 0
  6443                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6444  1DD1  0022               	movlb	2	; select bank2
  6445  1DD2  1C20               	btfss	_myMain^(0+256),0
  6446  1DD3  0008               	return
  6447                           
  6448                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6449  1DD4  0020               	movlb	0	; select bank0
  6450  1DD5  1A8E               	btfsc	14,5	;volatile
  6451  1DD6  0008               	return
  6452  1DD7  2DDD               	goto	l9844
  6453  1DD8                     l2759:	
  6454                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6455                           
  6456                           
  6457                           ;Switch_B1.c: 14: RC5 = 1;
  6458  1DD8  0020               	movlb	0	; select bank0
  6459  1DD9  168E               	bsf	14,5	;volatile
  6460                           
  6461                           ;Switch_B1.c: 15: Timeout_Counter();
  6462  1DDA  319D  25E6  319D   	fcall	_Timeout_Counter
  6463  1DDD                     l9844:	
  6464  1DDD  0020               	movlb	0	; select bank0
  6465  1DDE  1A8E               	btfsc	14,5	;volatile
  6466  1DDF  2DE3               	goto	l9848
  6467  1DE0  0022               	movlb	2	; select bank2
  6468  1DE1  1D2B               	btfss	(_myMain^(0+256)+11),2
  6469  1DE2  2DD8               	goto	l2759
  6470  1DE3                     l9848:	
  6471                           
  6472                           ;Switch_B1.c: 16: }
  6473                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6474  1DE3  319A  22DD         	fcall	_set_TimeoutCleared
  6475  1DE5  0008               	return
  6476  1DE6                     __end_of_TouchPower:	
  6477                           
  6478                           	psect	text21
  6479  1ADD                     __ptext21:	
  6480 ;; *************** function _set_TimeoutCleared *****************
  6481 ;; Defined at:
  6482 ;;		line 282 in file "../src/Main_B1.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		status,2
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    3
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_getAD
  6507 ;;		_TouchPower
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function _set_TimeoutCleared
  6513  1ADD                     _set_TimeoutCleared:	
  6514                           
  6515                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6516                           
  6517                           ;incstack = 0
  6518                           ; Regs used in _set_TimeoutCleared: [status,2]
  6519  1ADD  0022               	movlb	2	; select bank2
  6520  1ADE  112B               	bcf	(_myMain^(0+256)+11),2
  6521                           
  6522                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6523  1ADF  01AC               	clrf	(_myMain^(0+256)+12)
  6524  1AE0  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6525  1AE1  0008               	return
  6526  1AE2                     __end_of_set_TimeoutCleared:	
  6527                           
  6528                           	psect	text22
  6529  1DE6                     __ptext22:	
  6530 ;; *************** function _Timeout_Counter *****************
  6531 ;; Defined at:
  6532 ;;		line 273 in file "../src/Main_B1.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    3
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_getAD
  6557 ;;		_TouchPower
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           
  6562                           ;psect for function _Timeout_Counter
  6563  1DE6                     _Timeout_Counter:	
  6564                           
  6565                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6569  1DE6  3001               	movlw	1
  6570  1DE7  0022               	movlb	2	; select bank2
  6571  1DE8  07AC               	addwf	(_myMain^(0+256)+12),f
  6572  1DE9  3000               	movlw	0
  6573  1DEA  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6574                           
  6575                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6576  1DEB  300C               	movlw	12
  6577  1DEC  3E20               	addlw	_myMain& (0+255)
  6578  1DED  0086               	movwf	6
  6579  1DEE  3001               	movlw	1	; select bank2/3
  6580  1DEF  0087               	movwf	7
  6581  1DF0  3F40               	moviw [0]fsr1
  6582  1DF1  3AA8               	xorlw	168
  6583  1DF2  1D03               	skipz
  6584  1DF3  2DF6               	goto	u10775
  6585  1DF4  3F41               	moviw [1]fsr1
  6586  1DF5  3A61               	xorlw	97
  6587  1DF6                     u10775:	
  6588  1DF6  1D03               	skipz
  6589  1DF7  0008               	return
  6590                           
  6591                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6592  1DF8  01AC               	clrf	(_myMain^(0+256)+12)
  6593  1DF9  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6594                           
  6595                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6596  1DFA  152B               	bsf	(_myMain^(0+256)+11),2
  6597  1DFB  0008               	return
  6598  1DFC                     __end_of_Timeout_Counter:	
  6599                           
  6600                           	psect	text23
  6601  1ABB                     __ptext23:	
  6602 ;; *************** function _RF_Main *****************
  6603 ;; Defined at:
  6604 ;;		line 26 in file "../src/RF_Control_B1.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;		None
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;		None
  6609 ;; Return value:  Size  Location     Type
  6610 ;;		None               void
  6611 ;; Registers used:
  6612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;Total ram usage:        0 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:   10
  6625 ;; This function calls:
  6626 ;;		_setRF_Main
  6627 ;; This function is called by:
  6628 ;;		_main
  6629 ;; This function uses a non-reentrant model
  6630 ;;
  6631                           
  6632                           
  6633                           ;psect for function _RF_Main
  6634  1ABB                     _RF_Main:	
  6635                           
  6636                           ;RF_Control_B1.c: 28: setRF_Main();
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6640  1ABB  3186  2600         	fcall	_setRF_Main
  6641  1ABD  0008               	return
  6642  1ABE                     __end_of_RF_Main:	
  6643                           
  6644                           	psect	text24
  6645  0600                     __ptext24:	
  6646 ;; *************** function _setRF_Main *****************
  6647 ;; Defined at:
  6648 ;;		line 53 in file "../src/RF_Control_B1.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;  error           1   76[BANK0 ] unsigned char 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;		None               void
  6655 ;; Registers used:
  6656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;Total ram usage:        2 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    9
  6669 ;; This function calls:
  6670 ;;		_CC2500_PowerOnInitial
  6671 ;;		_CC2500_RxData
  6672 ;;		_CC2500_TxData
  6673 ;;		_CC2500_WriteCommand
  6674 ;;		_RF_RxDisable
  6675 ;;		___lwdiv
  6676 ;;		_getBuz_GO
  6677 ;;		_getRF_KeyStatus
  6678 ;;		_getRxData
  6679 ;; This function is called by:
  6680 ;;		_RF_Main
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _setRF_Main
  6686  0600                     _setRF_Main:	
  6687                           
  6688                           ;RF_Control_B1.c: 54: char error = 0;
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6692  0600  0020               	movlb	0	; select bank0
  6693  0601  01EC               	clrf	setRF_Main@error
  6694                           
  6695                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6696  0602  0021               	movlb	1	; select bank1
  6697  0603  1C20               	btfss	_RF1^(0+128),0
  6698  0604  2EBC               	goto	l2366
  6699                           
  6700                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6701  0605  319C  2481  3186   	fcall	_getBuz_GO
  6702  0608  0873               	movf	?_getBuz_GO+1,w
  6703  0609  0472               	iorwf	?_getBuz_GO,w
  6704  060A  1D03               	skipz
  6705  060B  2E9D               	goto	l9814
  6706                           
  6707                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6708  060C  319C  24D2  3186   	fcall	_getRF_KeyStatus
  6709  060F  3A01               	xorlw	1
  6710  0610  3000               	movlw	0
  6711  0611  1903               	skipnz
  6712  0612  3001               	movlw	1
  6713  0613  0020               	movlb	0	; select bank0
  6714  0614  00EB               	movwf	??_setRF_Main
  6715  0615  0CEB               	rrf	??_setRF_Main,f
  6716  0616  0CEB               	rrf	??_setRF_Main,f
  6717  0617  0021               	movlb	1	; select bank1
  6718  0618  0820               	movf	_RF1^(0+128),w
  6719  0619  0020               	movlb	0	; select bank0
  6720  061A  066B               	xorwf	??_setRF_Main,w
  6721  061B  397F               	andlw	-129
  6722  061C  066B               	xorwf	??_setRF_Main,w
  6723  061D  0021               	movlb	1	; select bank1
  6724  061E  00A0               	movwf	_RF1^(0+128)
  6725                           
  6726                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6727  061F  1FA0               	btfss	_RF1^(0+128),7
  6728  0620  2E23               	goto	l2370
  6729  0621  1F20               	btfss	_RF1^(0+128),6
  6730  0622  2E9D               	goto	l9814
  6731  0623                     l2370:	
  6732                           
  6733                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6734  0623  1D20               	btfss	_RF1^(0+128),2
  6735  0624  2E64               	goto	l2371
  6736                           
  6737                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6738  0625  1B20               	btfsc	_RF1^(0+128),6
  6739  0626  2E5F               	goto	l9786
  6740                           
  6741                           ;RF_Control_B1.c: 68: RF1.Count++;
  6742  0627  3001               	movlw	1
  6743  0628  07A2               	addwf	(_RF1^(0+128)+2),f
  6744  0629  3000               	movlw	0
  6745  062A  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6746                           
  6747                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6748  062B  3014               	movlw	20
  6749  062C  00F2               	movwf	___lwdiv@divisor
  6750  062D  3000               	movlw	0
  6751  062E  00F3               	movwf	___lwdiv@divisor+1
  6752  062F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6753  0630  01F5               	clrf	___lwdiv@dividend+1
  6754  0631  07F5               	addwf	___lwdiv@dividend+1,f
  6755  0632  0827               	movf	(_RF1^(0+128)+7),w
  6756  0633  01F4               	clrf	___lwdiv@dividend
  6757  0634  07F4               	addwf	___lwdiv@dividend,f
  6758  0635  3192  2261  3186   	fcall	___lwdiv
  6759  0638  0873               	movf	?___lwdiv+1,w
  6760  0639  0021               	movlb	1	; select bank1
  6761  063A  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6762  063B  1D03               	skipz
  6763  063C  2E3F               	goto	u11285
  6764  063D  0872               	movf	?___lwdiv,w
  6765  063E  0222               	subwf	(_RF1^(0+128)+2),w
  6766  063F                     u11285:	
  6767  063F  1C03               	skipc
  6768  0640  2E9D               	goto	l9814
  6769                           
  6770                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6771  0641  3014               	movlw	20
  6772  0642  00F2               	movwf	___lwdiv@divisor
  6773  0643  3000               	movlw	0
  6774  0644  00F3               	movwf	___lwdiv@divisor+1
  6775  0645  0828               	movf	((_RF1+1)^(0+128)+7),w
  6776  0646  01F5               	clrf	___lwdiv@dividend+1
  6777  0647  07F5               	addwf	___lwdiv@dividend+1,f
  6778  0648  0827               	movf	(_RF1^(0+128)+7),w
  6779  0649  01F4               	clrf	___lwdiv@dividend
  6780  064A  07F4               	addwf	___lwdiv@dividend,f
  6781  064B  3192  2261  3186   	fcall	___lwdiv
  6782  064E  0873               	movf	?___lwdiv+1,w
  6783  064F  0021               	movlb	1	; select bank1
  6784  0650  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6785  0651  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6786  0652  0872               	movf	?___lwdiv,w
  6787  0653  01A2               	clrf	(_RF1^(0+128)+2)
  6788  0654  07A2               	addwf	(_RF1^(0+128)+2),f
  6789                           
  6790                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6791  0655  1120               	bcf	_RF1^(0+128),2
  6792                           
  6793                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6794  0656  01AA               	clrf	(_RF1^(0+128)+10)
  6795  0657  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6796                           
  6797                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6798  0658  319C  2423  3186   	fcall	_RF_RxDisable
  6799                           
  6800                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6801  065B  3189  216D  3186   	fcall	_CC2500_TxData
  6802                           
  6803                           ;RF_Control_B1.c: 77: }
  6804                           ;RF_Control_B1.c: 78: } else {
  6805  065E  2E9D               	goto	l9814
  6806  065F                     l9786:	
  6807                           
  6808                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6809  065F  0021               	movlb	1	; select bank1
  6810  0660  01A2               	clrf	(_RF1^(0+128)+2)
  6811  0661  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6812                           
  6813                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6814  0662  1120               	bcf	_RF1^(0+128),2
  6815                           
  6816                           ;RF_Control_B1.c: 81: }
  6817                           ;RF_Control_B1.c: 82: } else {
  6818  0663  2E9D               	goto	l9814
  6819  0664                     l2371:	
  6820                           
  6821                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6822  0664  1DA0               	btfss	_RF1^(0+128),3
  6823  0665  2E73               	goto	l9800
  6824                           
  6825                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6826  0666  3188  2042  3186   	fcall	_CC2500_RxData
  6827                           
  6828                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6829  0669  0021               	movlb	1	; select bank1
  6830  066A  1CA0               	btfss	_RF1^(0+128),1
  6831  066B  2E9D               	goto	l9814
  6832                           
  6833                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6834  066C  10A0               	bcf	_RF1^(0+128),1
  6835                           
  6836                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6837  066D  01AA               	clrf	(_RF1^(0+128)+10)
  6838  066E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6839                           
  6840                           ;RF_Control_B1.c: 97: getRxData();
  6841  066F  318A  22AD  3186   	fcall	_getRxData
  6842                           
  6843                           ;RF_Control_B1.c: 100: }
  6844                           ;RF_Control_B1.c: 101: } else {
  6845  0672  2E9D               	goto	l9814
  6846  0673                     l9800:	
  6847                           
  6848                           ;RF_Control_B1.c: 102: RF1.Count++;
  6849  0673  3001               	movlw	1
  6850  0674  0021               	movlb	1	; select bank1
  6851  0675  07A2               	addwf	(_RF1^(0+128)+2),f
  6852  0676  3000               	movlw	0
  6853  0677  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6854                           
  6855                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6856  0678  3014               	movlw	20
  6857  0679  00F2               	movwf	___lwdiv@divisor
  6858  067A  3000               	movlw	0
  6859  067B  00F3               	movwf	___lwdiv@divisor+1
  6860  067C  0828               	movf	((_RF1+1)^(0+128)+7),w
  6861  067D  01F5               	clrf	___lwdiv@dividend+1
  6862  067E  07F5               	addwf	___lwdiv@dividend+1,f
  6863  067F  0827               	movf	(_RF1^(0+128)+7),w
  6864  0680  01F4               	clrf	___lwdiv@dividend
  6865  0681  07F4               	addwf	___lwdiv@dividend,f
  6866  0682  3192  2261  3186   	fcall	___lwdiv
  6867  0685  0873               	movf	?___lwdiv+1,w
  6868  0686  0021               	movlb	1	; select bank1
  6869  0687  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6870  0688  1D03               	skipz
  6871  0689  2E8C               	goto	u11315
  6872  068A  0872               	movf	?___lwdiv,w
  6873  068B  0222               	subwf	(_RF1^(0+128)+2),w
  6874  068C                     u11315:	
  6875  068C  1C03               	skipc
  6876  068D  2E9D               	goto	l9814
  6877                           
  6878                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6879  068E  01A2               	clrf	(_RF1^(0+128)+2)
  6880  068F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6881                           
  6882                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6883  0690  15A0               	bsf	_RF1^(0+128),3
  6884                           
  6885                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6886  0691  3036               	movlw	54
  6887  0692  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6888                           
  6889                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6890  0695  303A               	movlw	58
  6891  0696  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6892                           
  6893                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6894  0699  3034               	movlw	52
  6895  069A  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6896  069D                     l9814:	
  6897                           
  6898                           ;RF_Control_B1.c: 111: }
  6899                           ;RF_Control_B1.c: 112: }
  6900                           ;RF_Control_B1.c: 113: }
  6901                           ;RF_Control_B1.c: 114: }
  6902                           ;RF_Control_B1.c: 115: }
  6903                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6904  069D  3001               	movlw	1
  6905  069E  0021               	movlb	1	; select bank1
  6906  069F  07AA               	addwf	(_RF1^(0+128)+10),f
  6907  06A0  3000               	movlw	0
  6908  06A1  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6909                           
  6910                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6911  06A2  300B               	movlw	11
  6912  06A3  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6913  06A4  30B9               	movlw	185
  6914  06A5  1903               	skipnz
  6915  06A6  022A               	subwf	(_RF1^(0+128)+10),w
  6916  06A7  1C03               	skipc
  6917  06A8  2EB5               	goto	l9828
  6918                           
  6919                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6920  06A9  01AA               	clrf	(_RF1^(0+128)+10)
  6921  06AA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6922                           
  6923                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6924  06AB  11A0               	bcf	_RF1^(0+128),3
  6925                           
  6926                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6927  06AC  10A0               	bcf	_RF1^(0+128),1
  6928                           
  6929                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6930  06AD  3036               	movlw	54
  6931  06AE  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6932                           
  6933                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6934  06B1  303A               	movlw	58
  6935  06B2  319E  265D  3186   	fcall	_CC2500_WriteCommand
  6936  06B5                     l9828:	
  6937                           
  6938                           ;RF_Control_B1.c: 125: }
  6939                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6940  06B5  0021               	movlb	1	; select bank1
  6941  06B6  1F21               	btfss	(_RF1^(0+128)+1),6
  6942  06B7  0008               	return
  6943                           
  6944                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6945  06B8  1321               	bcf	(_RF1^(0+128)+1),6
  6946                           
  6947                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6948  06B9  319D  25BC         	fcall	_CC2500_PowerOnInitial
  6949                           
  6950                           ;RF_Control_B1.c: 130: }
  6951                           ;RF_Control_B1.c: 132: } else {
  6952  06BB  0008               	return
  6953  06BC                     l2366:	
  6954                           
  6955                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6956  06BC  0022               	movlb	2	; select bank2
  6957  06BD  1C20               	btfss	_myMain^(0+256),0
  6958  06BE  0008               	return
  6959                           
  6960                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6961  06BF  0021               	movlb	1	; select bank1
  6962  06C0  1420               	bsf	_RF1^(0+128),0
  6963  06C1  0008               	return
  6964  06C2                     __end_of_setRF_Main:	
  6965                           
  6966                           	psect	text25
  6967  0AAD                     __ptext25:	
  6968 ;; *************** function _getRxData *****************
  6969 ;; Defined at:
  6970 ;;		line 227 in file "../src/RF_Control_B1.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;		None
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  error           1   74[BANK0 ] unsigned char 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;		None               void
  6977 ;; Registers used:
  6978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6988 ;;Total ram usage:        2 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    8
  6991 ;; This function calls:
  6992 ;;		_getMain_All_Error_Status
  6993 ;;		_setControl_Lights_Table
  6994 ;;		_setLog_Code
  6995 ;;		_setTxData
  6996 ;; This function is called by:
  6997 ;;		_setRF_Main
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           
  7002                           ;psect for function _getRxData
  7003  0AAD                     _getRxData:	
  7004                           
  7005                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7006                           
  7007                           ;incstack = 0
  7008                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7009  0AAD  0023               	movlb	3	; select bank3
  7010  0AAE  0820               	movf	_RF_Data^(0+384),w
  7011  0AAF  3AAA               	xorlw	170
  7012  0AB0  1D03               	skipz
  7013  0AB1  2AC3               	goto	l9594
  7014  0AB2  0821               	movf	(_RF_Data^(0+384)+1),w
  7015  0AB3  3A01               	xorlw	1
  7016  0AB4  1D03               	skipz
  7017  0AB5  2AC3               	goto	l9594
  7018                           
  7019                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7020  0AB6  3055               	movlw	85
  7021  0AB7  0020               	movlb	0	; select bank0
  7022  0AB8  00E9               	movwf	??_getRxData
  7023  0AB9  086D               	movf	_product,w
  7024  0ABA  3E02               	addlw	2
  7025  0ABB  0086               	movwf	6
  7026  0ABC  3002               	movlw	2	; select bank4/5
  7027  0ABD  0087               	movwf	7
  7028  0ABE  0869               	movf	??_getRxData,w
  7029  0ABF  0081               	movwf	1
  7030                           
  7031                           ;RF_Control_B1.c: 231: setTxData();
  7032  0AC0  318F  274A         	fcall	_setTxData
  7033                           
  7034                           ;RF_Control_B1.c: 235: } else {
  7035  0AC2  0008               	return
  7036  0AC3                     l9594:	
  7037                           
  7038                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7039  0AC3  3000               	movlw	0
  7040  0AC4  3191  21CC  318A   	fcall	_getMain_All_Error_Status
  7041  0AC7  0020               	movlb	0	; select bank0
  7042  0AC8  00E9               	movwf	??_getRxData
  7043  0AC9  0869               	movf	??_getRxData,w
  7044  0ACA  00EA               	movwf	getRxData@error
  7045                           
  7046                           ;RF_Control_B1.c: 237: if (error == 0) {
  7047  0ACB  08EA               	movf	getRxData@error,f
  7048  0ACC  1D03               	skipz
  7049  0ACD  2B1E               	goto	l2411
  7050                           
  7051                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7052  0ACE  0021               	movlb	1	; select bank1
  7053  0ACF  1F20               	btfss	_RF1^(0+128),6
  7054  0AD0  2ADC               	goto	l9606
  7055                           
  7056                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7057  0AD1  0023               	movlb	3	; select bank3
  7058  0AD2  08A0               	movf	_RF_Data^(0+384),f
  7059  0AD3  1D03               	skipz
  7060  0AD4  0008               	return
  7061  0AD5  0821               	movf	(_RF_Data^(0+384)+1),w
  7062  0AD6  3A64               	xorlw	100
  7063  0AD7  1D03               	skipz
  7064  0AD8  0008               	return
  7065                           
  7066                           ;RF_Control_B1.c: 241: setLog_Code();
  7067  0AD9  3192  222D         	fcall	_setLog_Code
  7068                           
  7069                           ;RF_Control_B1.c: 242: }
  7070                           ;RF_Control_B1.c: 243: } else {
  7071  0ADB  0008               	return
  7072  0ADC                     l9606:	
  7073                           
  7074                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7075  0ADC  0023               	movlb	3	; select bank3
  7076  0ADD  0834               	movf	(_RF_Data^(0+384)+20),w
  7077  0ADE  3AD2               	xorlw	210
  7078  0ADF  1903               	skipnz
  7079  0AE0  2AE5               	goto	l9610
  7080  0AE1  0834               	movf	(_RF_Data^(0+384)+20),w
  7081  0AE2  3A0A               	xorlw	10
  7082  0AE3  1D03               	skipz
  7083  0AE4  0008               	return
  7084  0AE5                     l9610:	
  7085                           
  7086                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7087  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7088  0AE6  1D03               	skipz
  7089  0AE7  0008               	return
  7090  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7091  0AE9  3A02               	xorlw	2
  7092  0AEA  1D03               	skipz
  7093  0AEB  0008               	return
  7094                           
  7095                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7096  0AEC  082C               	movf	(_RF_Data^(0+384)+12),w
  7097  0AED  3AFF               	xorlw	255
  7098  0AEE  1D03               	skipz
  7099  0AEF  2AFA               	goto	l9622
  7100  0AF0  082D               	movf	(_RF_Data^(0+384)+13),w
  7101  0AF1  3AFF               	xorlw	255
  7102  0AF2  1D03               	skipz
  7103  0AF3  2AFA               	goto	l9622
  7104  0AF4  082E               	movf	(_RF_Data^(0+384)+14),w
  7105  0AF5  3AFF               	xorlw	255
  7106  0AF6  1D03               	skipz
  7107  0AF7  2AFA               	goto	l9622
  7108                           
  7109                           ;RF_Control_B1.c: 249: __nop();
  7110  0AF8  0000               	nop
  7111                           
  7112                           ;RF_Control_B1.c: 250: } else {
  7113  0AF9  0008               	return
  7114  0AFA                     l9622:	
  7115                           
  7116                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7117  0AFA  0020               	movlb	0	; select bank0
  7118  0AFB  086D               	movf	_product,w
  7119  0AFC  3E0C               	addlw	12
  7120  0AFD  0086               	movwf	6
  7121  0AFE  3002               	movlw	2	; select bank4/5
  7122  0AFF  0087               	movwf	7
  7123  0B00  0023               	movlb	3	; select bank3
  7124  0B01  082C               	movf	(_RF_Data^(0+384)+12),w
  7125  0B02  0601               	xorwf	1,w
  7126  0B03  1D03               	skipz
  7127  0B04  0008               	return
  7128  0B05  0020               	movlb	0	; select bank0
  7129  0B06  086D               	movf	_product,w
  7130  0B07  3E0D               	addlw	13
  7131  0B08  0086               	movwf	6
  7132  0B09  3002               	movlw	2	; select bank4/5
  7133  0B0A  0087               	movwf	7
  7134  0B0B  0023               	movlb	3	; select bank3
  7135  0B0C  082D               	movf	(_RF_Data^(0+384)+13),w
  7136  0B0D  0601               	xorwf	1,w
  7137  0B0E  1D03               	skipz
  7138  0B0F  0008               	return
  7139  0B10  0020               	movlb	0	; select bank0
  7140  0B11  086D               	movf	_product,w
  7141  0B12  3E0E               	addlw	14
  7142  0B13  0086               	movwf	6
  7143  0B14  3002               	movlw	2	; select bank4/5
  7144  0B15  0087               	movwf	7
  7145  0B16  0023               	movlb	3	; select bank3
  7146  0B17  082E               	movf	(_RF_Data^(0+384)+14),w
  7147  0B18  0601               	xorwf	1,w
  7148  0B19  1D03               	skipz
  7149  0B1A  0008               	return
  7150                           
  7151                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7152  0B1B  318C  24AE         	fcall	_setControl_Lights_Table
  7153                           
  7154                           ;RF_Control_B1.c: 253: }
  7155                           ;RF_Control_B1.c: 254: }
  7156                           ;RF_Control_B1.c: 256: }
  7157                           ;RF_Control_B1.c: 267: }
  7158                           ;RF_Control_B1.c: 268: }
  7159                           ;RF_Control_B1.c: 269: } else {
  7160  0B1D  0008               	return
  7161  0B1E                     l2411:	
  7162                           
  7163                           ;RF_Control_B1.c: 270: __nop();
  7164  0B1E  0000               	nop
  7165  0B1F  0008               	return
  7166  0B20                     __end_of_getRxData:	
  7167                           
  7168                           	psect	text26
  7169  122D                     __ptext26:	
  7170 ;; *************** function _setLog_Code *****************
  7171 ;; Defined at:
  7172 ;;		line 276 in file "../src/RF_Control_B1.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;		None
  7177 ;; Return value:  Size  Location     Type
  7178 ;;		None               void
  7179 ;; Registers used:
  7180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;Total ram usage:        1 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    5
  7193 ;; This function calls:
  7194 ;;		_setBuz
  7195 ;;		_setMemory_LoopSave
  7196 ;;		_setMemory_Modify
  7197 ;;		_setProductData
  7198 ;; This function is called by:
  7199 ;;		_getRxData
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           
  7204                           ;psect for function _setLog_Code
  7205  122D                     _setLog_Code:	
  7206                           
  7207                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7208                           
  7209                           ;incstack = 0
  7210                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7211  122D  0021               	movlb	1	; select bank1
  7212  122E  1320               	bcf	_RF1^(0+128),6
  7213                           
  7214                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7215  122F  0023               	movlb	3	; select bank3
  7216  1230  082C               	movf	(_RF_Data^(0+384)+12),w
  7217  1231  0020               	movlb	0	; select bank0
  7218  1232  00DE               	movwf	??_setLog_Code
  7219  1233  085E               	movf	??_setLog_Code,w
  7220  1234  00DA               	movwf	setProductData@value
  7221  1235  300C               	movlw	12
  7222  1236  319B  23D9  3192   	fcall	_setProductData
  7223                           
  7224                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7225  1239  0023               	movlb	3	; select bank3
  7226  123A  082D               	movf	(_RF_Data^(0+384)+13),w
  7227  123B  0020               	movlb	0	; select bank0
  7228  123C  00DE               	movwf	??_setLog_Code
  7229  123D  085E               	movf	??_setLog_Code,w
  7230  123E  00DA               	movwf	setProductData@value
  7231  123F  300D               	movlw	13
  7232  1240  319B  23D9  3192   	fcall	_setProductData
  7233                           
  7234                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7235  1243  0023               	movlb	3	; select bank3
  7236  1244  082E               	movf	(_RF_Data^(0+384)+14),w
  7237  1245  0020               	movlb	0	; select bank0
  7238  1246  00DE               	movwf	??_setLog_Code
  7239  1247  085E               	movf	??_setLog_Code,w
  7240  1248  00DA               	movwf	setProductData@value
  7241  1249  300E               	movlw	14
  7242  124A  319B  23D9  3192   	fcall	_setProductData
  7243                           
  7244                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7245  124D  3064               	movlw	100
  7246  124E  0020               	movlb	0	; select bank0
  7247  124F  00A4               	movwf	setBuz@time
  7248  1250  3000               	movlw	0
  7249  1251  00A5               	movwf	setBuz@time+1
  7250  1252  3001               	movlw	1
  7251  1253  3195  2584  3192   	fcall	_setBuz
  7252                           
  7253                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7254  1256  0022               	movlb	2	; select bank2
  7255  1257  1EA0               	btfss	_myMain^(0+256),5
  7256  1258  2A5D               	goto	l2426
  7257                           
  7258                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7259  1259  3001               	movlw	1
  7260  125A  319C  24A1  3192   	fcall	_setMemory_LoopSave
  7261  125D                     l2426:	
  7262                           
  7263                           ;RF_Control_B1.c: 284: }
  7264                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7265  125D  3001               	movlw	1
  7266  125E  319C  2491         	fcall	_setMemory_Modify
  7267  1260  0008               	return
  7268  1261                     __end_of_setLog_Code:	
  7269                           
  7270                           	psect	text27
  7271  1CA1                     __ptext27:	
  7272 ;; *************** function _setMemory_LoopSave *****************
  7273 ;; Defined at:
  7274 ;;		line 1079 in file "../src/MCU_B1.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  command         1    wreg     unsigned char 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  command         1    3[COMMON] unsigned char 
  7279 ;; Return value:  Size  Location     Type
  7280 ;;		None               void
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;Total ram usage:        2 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    3
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_setLog_Code
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           
  7303                           ;psect for function _setMemory_LoopSave
  7304  1CA1                     _setMemory_LoopSave:	
  7305                           
  7306                           ;incstack = 0
  7307                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7308                           ;setMemory_LoopSave@command stored from wreg
  7309  1CA1  00F3               	movwf	setMemory_LoopSave@command
  7310                           
  7311                           ;MCU_B1.c: 1080: Memory.LoopSave = command == 1 ? 1 : 0;
  7312  1CA2  0873               	movf	setMemory_LoopSave@command,w
  7313  1CA3  3A01               	xorlw	1
  7314  1CA4  3000               	movlw	0
  7315  1CA5  1903               	skipnz
  7316  1CA6  3001               	movlw	1
  7317  1CA7  00F2               	movwf	??_setMemory_LoopSave
  7318  1CA8  0DF2               	rlf	??_setMemory_LoopSave,f
  7319  1CA9  0DF2               	rlf	??_setMemory_LoopSave,f
  7320  1CAA  0024               	movlb	4	; select bank4
  7321  1CAB  0844               	movf	(_Memory^(0+512)+36),w
  7322  1CAC  0672               	xorwf	??_setMemory_LoopSave,w
  7323  1CAD  39FB               	andlw	-5
  7324  1CAE  0672               	xorwf	??_setMemory_LoopSave,w
  7325  1CAF  00C4               	movwf	(_Memory^(0+512)+36)
  7326  1CB0  0008               	return
  7327  1CB1                     __end_of_setMemory_LoopSave:	
  7328                           
  7329                           	psect	text28
  7330  0CAE                     __ptext28:	
  7331 ;; *************** function _setControl_Lights_Table *****************
  7332 ;; Defined at:
  7333 ;;		line 289 in file "../src/RF_Control_B1.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;		None
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;		None               void
  7340 ;; Registers used:
  7341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    7
  7354 ;; This function calls:
  7355 ;;		_getDimmerLights_Status
  7356 ;;		_getMain_All_LightsStatus
  7357 ;;		_setCmd_Status
  7358 ;;		_setDimmerLights_SwOff
  7359 ;;		_setDimmerLights_SwOn
  7360 ;;		_setProductData
  7361 ;;		_setRFSW_AdjControl
  7362 ;;		_setRFSW_Control
  7363 ;;		_setTxData
  7364 ;; This function is called by:
  7365 ;;		_getRxData
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           
  7370                           ;psect for function _setControl_Lights_Table
  7371  0CAE                     _setControl_Lights_Table:	
  7372                           
  7373                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7374                           
  7375                           ;incstack = 0
  7376                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7377  0CAE  2D25               	goto	l9384
  7378  0CAF                     l9360:	
  7379                           ;RF_Control_B1.c: 292: case 0x00:
  7380                           
  7381                           
  7382                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7383  0CAF  319C  2405  318C   	fcall	_getMain_All_LightsStatus
  7384  0CB2  3A01               	xorlw	1
  7385  0CB3  1D03               	skipz
  7386  0CB4  2CD9               	goto	l9370
  7387                           
  7388                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7389  0CB5  3001               	movlw	1
  7390  0CB6  319B  23E7  318C   	fcall	_getDimmerLights_Status
  7391  0CB9  3A01               	xorlw	1
  7392  0CBA  1D03               	skipz
  7393  0CBB  2CC4               	goto	l2433
  7394                           
  7395                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7396  0CBC  3001               	movlw	1
  7397  0CBD  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7398                           
  7399                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7400  0CC0  3001               	movlw	1
  7401  0CC1  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7402  0CC4                     l2433:	
  7403                           
  7404                           ;RF_Control_B1.c: 299: }
  7405                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7406  0CC4  3002               	movlw	2
  7407  0CC5  319B  23E7  318C   	fcall	_getDimmerLights_Status
  7408  0CC8  3A01               	xorlw	1
  7409  0CC9  1D03               	skipz
  7410  0CCA  2CD3               	goto	l9368
  7411                           
  7412                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7413  0CCB  3002               	movlw	2
  7414  0CCC  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7415                           
  7416                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7417  0CCF  3002               	movlw	2
  7418  0CD0  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7419  0CD3                     l9368:	
  7420                           
  7421                           ;RF_Control_B1.c: 305: }
  7422                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7423  0CD3  01F2               	clrf	setCmd_Status@cmd
  7424  0CD4  0AF2               	incf	setCmd_Status@cmd,f
  7425  0CD5  3001               	movlw	1
  7426  0CD6  319D  257D         	fcall	_setCmd_Status
  7427                           
  7428                           ;RF_Control_B1.c: 315: } else {
  7429  0CD8  0008               	return
  7430  0CD9                     l9370:	
  7431                           
  7432                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7433  0CD9  0020               	movlb	0	; select bank0
  7434  0CDA  01DA               	clrf	setProductData@value
  7435  0CDB  3009               	movlw	9
  7436  0CDC  319B  23D9  318C   	fcall	_setProductData
  7437                           
  7438                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7439  0CDF  0020               	movlb	0	; select bank0
  7440  0CE0  01DA               	clrf	setProductData@value
  7441  0CE1  300B               	movlw	11
  7442  0CE2  319B  23D9  318C   	fcall	_setProductData
  7443                           
  7444                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7445  0CE5  0020               	movlb	0	; select bank0
  7446  0CE6  01DA               	clrf	setProductData@value
  7447  0CE7  300F               	movlw	15
  7448  0CE8  319B  23D9  318C   	fcall	_setProductData
  7449                           
  7450                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7451  0CEB  0020               	movlb	0	; select bank0
  7452  0CEC  01DA               	clrf	setProductData@value
  7453  0CED  3011               	movlw	17
  7454  0CEE  319B  23D9  318C   	fcall	_setProductData
  7455                           
  7456                           ;RF_Control_B1.c: 320: setTxData();
  7457  0CF1  318F  274A         	fcall	_setTxData
  7458                           
  7459                           ;RF_Control_B1.c: 321: }
  7460                           ;RF_Control_B1.c: 322: break;
  7461  0CF3  0008               	return
  7462  0CF4                     l9372:	
  7463                           ;RF_Control_B1.c: 324: case 0x20:
  7464                           
  7465                           
  7466                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7467  0CF4  0020               	movlb	0	; select bank0
  7468  0CF5  01DA               	clrf	setProductData@value
  7469  0CF6  3009               	movlw	9
  7470  0CF7  319B  23D9  318C   	fcall	_setProductData
  7471                           
  7472                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7473  0CFA  0020               	movlb	0	; select bank0
  7474  0CFB  01DA               	clrf	setProductData@value
  7475  0CFC  300B               	movlw	11
  7476  0CFD  319B  23D9  318C   	fcall	_setProductData
  7477                           
  7478                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7479  0D00  0020               	movlb	0	; select bank0
  7480  0D01  086D               	movf	_product,w
  7481  0D02  0086               	movwf	6
  7482  0D03  3002               	movlw	2	; select bank4/5
  7483  0D04  0087               	movwf	7
  7484  0D05  3002               	movlw	2	; select bank4/5
  7485  0D06  3F4F               	moviw [15]fsr1
  7486  0D07  00DA               	movwf	setProductData@value
  7487  0D08  300F               	movlw	15
  7488  0D09  319B  23D9  318C   	fcall	_setProductData
  7489                           
  7490                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7491  0D0C  0020               	movlb	0	; select bank0
  7492  0D0D  01DA               	clrf	setProductData@value
  7493  0D0E  3011               	movlw	17
  7494  0D0F  319B  23D9  318C   	fcall	_setProductData
  7495                           
  7496                           ;RF_Control_B1.c: 329: setTxData();
  7497  0D12  318F  274A         	fcall	_setTxData
  7498                           
  7499                           ;RF_Control_B1.c: 330: break;
  7500  0D14  0008               	return
  7501  0D15                     l9374:	
  7502                           ;RF_Control_B1.c: 333: case 0x01:
  7503                           
  7504                           
  7505                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7506  0D15  3001               	movlw	1
  7507  0D16  3193  2378         	fcall	_setRFSW_Control
  7508                           
  7509                           ;RF_Control_B1.c: 335: break;
  7510  0D18  0008               	return
  7511  0D19                     l9376:	
  7512                           ;RF_Control_B1.c: 339: case 0x11:
  7513                           
  7514                           
  7515                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7516  0D19  3001               	movlw	1
  7517  0D1A  3187  2781         	fcall	_setRFSW_AdjControl
  7518                           
  7519                           ;RF_Control_B1.c: 341: break;
  7520  0D1C  0008               	return
  7521  0D1D                     l9378:	
  7522                           ;RF_Control_B1.c: 346: case 0x02:
  7523                           
  7524                           
  7525                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7526  0D1D  3002               	movlw	2
  7527  0D1E  3193  2378         	fcall	_setRFSW_Control
  7528                           
  7529                           ;RF_Control_B1.c: 348: break;
  7530  0D20  0008               	return
  7531  0D21                     l9380:	
  7532                           ;RF_Control_B1.c: 351: case 0x21:
  7533                           
  7534                           
  7535                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7536  0D21  3002               	movlw	2
  7537  0D22  3187  2781         	fcall	_setRFSW_AdjControl
  7538                           
  7539                           ;RF_Control_B1.c: 370: }
  7540                           
  7541                           ;RF_Control_B1.c: 353: break;
  7542  0D24  0008               	return
  7543  0D25                     l9384:	
  7544  0D25  0023               	movlb	3	; select bank3
  7545  0D26  082F               	movf	(_RF_Data^(0+384)+15),w
  7546                           
  7547                           ; Switch size 1, requested type "space"
  7548                           ; Number of cases is 6, Range of values is 0 to 33
  7549                           ; switch strategies available:
  7550                           ; Name         Instructions Cycles
  7551                           ; simple_byte           19    10 (average)
  7552                           ; direct_byte           74     6 (fixed)
  7553                           ; jumptable            260     6 (fixed)
  7554                           ;	Chosen strategy is simple_byte
  7555  0D27  3A00               	xorlw	0	; case 0
  7556  0D28  1903               	skipnz
  7557  0D29  2CAF               	goto	l9360
  7558  0D2A  3A01               	xorlw	1	; case 1
  7559  0D2B  1903               	skipnz
  7560  0D2C  2D15               	goto	l9374
  7561  0D2D  3A03               	xorlw	3	; case 2
  7562  0D2E  1903               	skipnz
  7563  0D2F  2D1D               	goto	l9378
  7564  0D30  3A13               	xorlw	19	; case 17
  7565  0D31  1903               	skipnz
  7566  0D32  2D19               	goto	l9376
  7567  0D33  3A31               	xorlw	49	; case 32
  7568  0D34  1903               	skipnz
  7569  0D35  2CF4               	goto	l9372
  7570  0D36  3A01               	xorlw	1	; case 33
  7571  0D37  1903               	skipnz
  7572  0D38  2D21               	goto	l9380
  7573  0D39  2D3A               	goto	l2442
  7574  0D3A                     l2442:	
  7575  0D3A  0008               	return
  7576  0D3B                     __end_of_setControl_Lights_Table:	
  7577                           
  7578                           	psect	text29
  7579  1378                     __ptext29:	
  7580 ;; *************** function _setRFSW_Control *****************
  7581 ;; Defined at:
  7582 ;;		line 378 in file "../src/RF_Control_B1.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;  sw              1    wreg     unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  sw              1   72[BANK0 ] unsigned char 
  7587 ;;  status          1   71[BANK0 ] unsigned char 
  7588 ;; Return value:  Size  Location     Type
  7589 ;;		None               void
  7590 ;; Registers used:
  7591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;Total ram usage:        3 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    6
  7604 ;; This function calls:
  7605 ;;		_getDimmerLights_Status
  7606 ;;		_setBuz
  7607 ;;		_setDelayOff_GO
  7608 ;;		_setDimmerLights_SwOff
  7609 ;;		_setDimmerLights_SwOn
  7610 ;;		_setRF_DimmerLights
  7611 ;;		_setTxData
  7612 ;; This function is called by:
  7613 ;;		_setControl_Lights_Table
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           
  7618                           ;psect for function _setRFSW_Control
  7619  1378                     _setRFSW_Control:	
  7620                           
  7621                           ;incstack = 0
  7622                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7623                           ;setRFSW_Control@sw stored from wreg
  7624  1378  0020               	movlb	0	; select bank0
  7625  1379  00E8               	movwf	setRFSW_Control@sw
  7626                           
  7627                           ;RF_Control_B1.c: 379: char status = 0;
  7628  137A  01E7               	clrf	setRFSW_Control@status
  7629                           
  7630                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7631  137B  0023               	movlb	3	; select bank3
  7632  137C  0830               	movf	(_RF_Data^(0+384)+16),w
  7633  137D  3A80               	xorlw	128
  7634  137E  1D03               	skipz
  7635  137F  2BAB               	goto	l9218
  7636                           
  7637                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7638  1380  0020               	movlb	0	; select bank0
  7639  1381  01DE               	clrf	setDelayOff_GO@command
  7640  1382  0ADE               	incf	setDelayOff_GO@command,f
  7641  1383  0023               	movlb	3	; select bank3
  7642  1384  0831               	movf	(_RF_Data^(0+384)+17),w
  7643  1385  0020               	movlb	0	; select bank0
  7644  1386  00E6               	movwf	??_setRFSW_Control
  7645  1387  0866               	movf	??_setRFSW_Control,w
  7646  1388  00DF               	movwf	setDelayOff_GO@value
  7647  1389  0868               	movf	setRFSW_Control@sw,w
  7648  138A  318C  2422  3193   	fcall	_setDelayOff_GO
  7649                           
  7650                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7651  138D  0020               	movlb	0	; select bank0
  7652  138E  0868               	movf	setRFSW_Control@sw,w
  7653  138F  319B  23E7  3193   	fcall	_getDimmerLights_Status
  7654  1392  3A01               	xorlw	1
  7655  1393  1D03               	skipz
  7656  1394  2BAB               	goto	l9218
  7657                           
  7658                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7659  1395  3064               	movlw	100
  7660  1396  0020               	movlb	0	; select bank0
  7661  1397  00A4               	movwf	setBuz@time
  7662  1398  3000               	movlw	0
  7663  1399  00A5               	movwf	setBuz@time+1
  7664  139A  3001               	movlw	1
  7665  139B  3195  2584  3193   	fcall	_setBuz
  7666                           
  7667                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7668  139E  0020               	movlb	0	; select bank0
  7669  139F  01DE               	clrf	setRF_DimmerLights@on
  7670  13A0  0ADE               	incf	setRF_DimmerLights@on,f
  7671  13A1  0868               	movf	setRFSW_Control@sw,w
  7672  13A2  3196  26E2  3193   	fcall	_setRF_DimmerLights
  7673                           
  7674                           ;RF_Control_B1.c: 386: setTxData();
  7675  13A5  318F  274A  3193   	fcall	_setTxData
  7676                           
  7677                           ;RF_Control_B1.c: 387: status = 1;
  7678  13A8  0020               	movlb	0	; select bank0
  7679  13A9  01E7               	clrf	setRFSW_Control@status
  7680  13AA  0AE7               	incf	setRFSW_Control@status,f
  7681  13AB                     l9218:	
  7682                           
  7683                           ;RF_Control_B1.c: 388: }
  7684                           ;RF_Control_B1.c: 389: }
  7685                           ;RF_Control_B1.c: 391: if (status == 0) {
  7686  13AB  0020               	movlb	0	; select bank0
  7687  13AC  08E7               	movf	setRFSW_Control@status,f
  7688  13AD  1D03               	skipz
  7689  13AE  0008               	return
  7690                           
  7691                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7692  13AF  0868               	movf	setRFSW_Control@sw,w
  7693  13B0  3196  2686  3193   	fcall	_setDimmerLights_SwOn
  7694                           
  7695                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7696  13B3  0020               	movlb	0	; select bank0
  7697  13B4  0868               	movf	setRFSW_Control@sw,w
  7698  13B5  3192  22CE         	fcall	_setDimmerLights_SwOff
  7699  13B7  0008               	return
  7700  13B8                     __end_of_setRFSW_Control:	
  7701                           
  7702                           	psect	text30
  7703  0781                     __ptext30:	
  7704 ;; *************** function _setRFSW_AdjControl *****************
  7705 ;; Defined at:
  7706 ;;		line 400 in file "../src/RF_Control_B1.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  sw              1    wreg     unsigned char 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  sw              1   65[BANK0 ] unsigned char 
  7711 ;;  status          1   64[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;		None               void
  7714 ;; Registers used:
  7715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;Total ram usage:        4 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    6
  7728 ;; This function calls:
  7729 ;;		_getDimmerLights_PercentToValue
  7730 ;;		_getDimmerLights_Status
  7731 ;;		_setDimmerIntr_Dimming_RF
  7732 ;;		_setDimmerIntr_MaxmumValue
  7733 ;;		_setDimmerLights_DimmingRun
  7734 ;;		_setDimmerLights_SwOff
  7735 ;;		_setDimmerLights_SwOn
  7736 ;;		_setMemory_Modify
  7737 ;;		_setProductData
  7738 ;;		_setTxData
  7739 ;; This function is called by:
  7740 ;;		_setControl_Lights_Table
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           
  7745                           ;psect for function _setRFSW_AdjControl
  7746  0781                     _setRFSW_AdjControl:	
  7747                           
  7748                           ;incstack = 0
  7749                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7750                           ;setRFSW_AdjControl@sw stored from wreg
  7751  0781  0020               	movlb	0	; select bank0
  7752  0782  00E1               	movwf	setRFSW_AdjControl@sw
  7753                           
  7754                           ;RF_Control_B1.c: 401: char status = 0;
  7755  0783  01E0               	clrf	setRFSW_AdjControl@status
  7756                           
  7757                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7758  0784  0861               	movf	setRFSW_AdjControl@sw,w
  7759  0785  319B  23E7  3187   	fcall	_getDimmerLights_Status
  7760  0788  0020               	movlb	0	; select bank0
  7761  0789  00DE               	movwf	??_setRFSW_AdjControl
  7762  078A  085E               	movf	??_setRFSW_AdjControl,w
  7763  078B  00E0               	movwf	setRFSW_AdjControl@status
  7764                           
  7765                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7766  078C  3065               	movlw	101
  7767  078D  0023               	movlb	3	; select bank3
  7768  078E  0229               	subwf	(_RF_Data^(0+384)+9),w
  7769  078F  1C03               	skipc
  7770  0790  2F98               	goto	l9230
  7771                           
  7772                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7773  0791  3064               	movlw	100
  7774  0792  0020               	movlb	0	; select bank0
  7775  0793  00DE               	movwf	??_setRFSW_AdjControl
  7776  0794  085E               	movf	??_setRFSW_AdjControl,w
  7777  0795  0023               	movlb	3	; select bank3
  7778  0796  00A9               	movwf	(_RF_Data^(0+384)+9)
  7779                           
  7780                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7781  0797  2F9D               	goto	l9234
  7782  0798                     l9230:	
  7783  0798  08A9               	movf	(_RF_Data^(0+384)+9),f
  7784  0799  1D03               	skipz
  7785  079A  2F9D               	goto	l9234
  7786                           
  7787                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7788  079B  01A9               	clrf	(_RF_Data^(0+384)+9)
  7789  079C  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7790  079D                     l9234:	
  7791                           
  7792                           ;RF_Control_B1.c: 409: }
  7793                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7794  079D  0829               	movf	(_RF_Data^(0+384)+9),w
  7795  079E  0020               	movlb	0	; select bank0
  7796  079F  00DE               	movwf	??_setRFSW_AdjControl
  7797  07A0  085E               	movf	??_setRFSW_AdjControl,w
  7798  07A1  00DA               	movwf	setProductData@value
  7799  07A2  3009               	movlw	9
  7800  07A3  319B  23D9  3187   	fcall	_setProductData
  7801                           
  7802                           ;RF_Control_B1.c: 411: setProductData((20 + sw), RF_Data[9]);
  7803  07A6  0023               	movlb	3	; select bank3
  7804  07A7  0829               	movf	(_RF_Data^(0+384)+9),w
  7805  07A8  0020               	movlb	0	; select bank0
  7806  07A9  00DE               	movwf	??_setRFSW_AdjControl
  7807  07AA  085E               	movf	??_setRFSW_AdjControl,w
  7808  07AB  00DA               	movwf	setProductData@value
  7809  07AC  0861               	movf	setRFSW_AdjControl@sw,w
  7810  07AD  3E14               	addlw	20
  7811  07AE  319B  23D9  3187   	fcall	_setProductData
  7812                           
  7813                           ;RF_Control_B1.c: 413: if (status == 1) {
  7814  07B1  0020               	movlb	0	; select bank0
  7815  07B2  0860               	movf	setRFSW_AdjControl@status,w
  7816  07B3  3A01               	xorlw	1
  7817  07B4  1D03               	skipz
  7818  07B5  2FCE               	goto	l9242
  7819                           
  7820                           ;RF_Control_B1.c: 414: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7821  07B6  0023               	movlb	3	; select bank3
  7822  07B7  0829               	movf	(_RF_Data^(0+384)+9),w
  7823  07B8  3189  2108  3187   	fcall	_getDimmerLights_PercentToValue
  7824  07BB  0020               	movlb	0	; select bank0
  7825  07BC  00DE               	movwf	??_setRFSW_AdjControl
  7826  07BD  085E               	movf	??_setRFSW_AdjControl,w
  7827  07BE  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7828  07BF  0861               	movf	setRFSW_AdjControl@sw,w
  7829  07C0  319D  25FC  3187   	fcall	_setDimmerIntr_MaxmumValue
  7830                           
  7831                           ;RF_Control_B1.c: 415: setDimmerIntr_Dimming_RF(sw, 1);
  7832  07C3  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7833  07C4  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7834  07C5  0020               	movlb	0	; select bank0
  7835  07C6  0861               	movf	setRFSW_AdjControl@sw,w
  7836  07C7  3191  214F  3187   	fcall	_setDimmerIntr_Dimming_RF
  7837                           
  7838                           ;RF_Control_B1.c: 416: setTxData();
  7839  07CA  318F  274A  3187   	fcall	_setTxData
  7840                           
  7841                           ;RF_Control_B1.c: 418: } else if (status == 0) {
  7842  07CD  2FE2               	goto	l2455
  7843  07CE                     l9242:	
  7844  07CE  0020               	movlb	0	; select bank0
  7845  07CF  08E0               	movf	setRFSW_AdjControl@status,f
  7846  07D0  1D03               	skipz
  7847  07D1  2FE2               	goto	l2455
  7848                           
  7849                           ;RF_Control_B1.c: 422: setDimmerLights_DimmingRun(sw, 1);
  7850  07D2  01F4               	clrf	setDimmerLights_DimmingRun@command
  7851  07D3  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7852  07D4  0861               	movf	setRFSW_AdjControl@sw,w
  7853  07D5  319E  262B  3187   	fcall	_setDimmerLights_DimmingRun
  7854                           
  7855                           ;RF_Control_B1.c: 423: setDimmerLights_SwOn(sw);
  7856  07D8  0020               	movlb	0	; select bank0
  7857  07D9  0861               	movf	setRFSW_AdjControl@sw,w
  7858  07DA  3196  2686  3187   	fcall	_setDimmerLights_SwOn
  7859                           
  7860                           ;RF_Control_B1.c: 424: setDimmerLights_SwOff(sw);
  7861  07DD  0020               	movlb	0	; select bank0
  7862  07DE  0861               	movf	setRFSW_AdjControl@sw,w
  7863  07DF  3192  22CE  3187   	fcall	_setDimmerLights_SwOff
  7864  07E2                     l2455:	
  7865                           
  7866                           ;RF_Control_B1.c: 425: }
  7867                           ;RF_Control_B1.c: 427: setProductData(11, sw);
  7868  07E2  0020               	movlb	0	; select bank0
  7869  07E3  0861               	movf	setRFSW_AdjControl@sw,w
  7870  07E4  00DE               	movwf	??_setRFSW_AdjControl
  7871  07E5  085E               	movf	??_setRFSW_AdjControl,w
  7872  07E6  00DA               	movwf	setProductData@value
  7873  07E7  300B               	movlw	11
  7874  07E8  319B  23D9  3187   	fcall	_setProductData
  7875                           
  7876                           ;RF_Control_B1.c: 428: setProductData(17, product->Data[26 + sw]);
  7877  07EB  0020               	movlb	0	; select bank0
  7878  07EC  0861               	movf	setRFSW_AdjControl@sw,w
  7879  07ED  3E1A               	addlw	26
  7880  07EE  076D               	addwf	_product,w
  7881  07EF  00DE               	movwf	??_setRFSW_AdjControl
  7882  07F0  085E               	movf	??_setRFSW_AdjControl,w
  7883  07F1  0086               	movwf	6
  7884  07F2  3002               	movlw	2	; select bank4/5
  7885  07F3  0087               	movwf	7
  7886  07F4  0801               	movf	1,w
  7887  07F5  00DF               	movwf	??_setRFSW_AdjControl+1
  7888  07F6  085F               	movf	??_setRFSW_AdjControl+1,w
  7889  07F7  00DA               	movwf	setProductData@value
  7890  07F8  3011               	movlw	17
  7891  07F9  319B  23D9  3187   	fcall	_setProductData
  7892                           
  7893                           ;RF_Control_B1.c: 430: setMemory_Modify(1);
  7894  07FC  3001               	movlw	1
  7895  07FD  319C  2491         	fcall	_setMemory_Modify
  7896  07FF  0008               	return
  7897  0800                     __end_of_setRFSW_AdjControl:	
  7898                           
  7899                           	psect	text31
  7900  1C91                     __ptext31:	
  7901 ;; *************** function _setMemory_Modify *****************
  7902 ;; Defined at:
  7903 ;;		line 1073 in file "../src/MCU_B1.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  command         1    wreg     unsigned char 
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;  command         1    3[COMMON] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;		None               void
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, status,0
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;Total ram usage:        2 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    3
  7924 ;; This function calls:
  7925 ;;		Nothing
  7926 ;; This function is called by:
  7927 ;;		_setLog_Code
  7928 ;;		_setRFSW_AdjControl
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _setMemory_Modify
  7934  1C91                     _setMemory_Modify:	
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7938                           ;setMemory_Modify@command stored from wreg
  7939  1C91  00F3               	movwf	setMemory_Modify@command
  7940                           
  7941                           ;MCU_B1.c: 1074: Memory.Modify = command == 1 ? 1 : 0;
  7942  1C92  0873               	movf	setMemory_Modify@command,w
  7943  1C93  3A01               	xorlw	1
  7944  1C94  3000               	movlw	0
  7945  1C95  1903               	skipnz
  7946  1C96  3001               	movlw	1
  7947  1C97  00F2               	movwf	??_setMemory_Modify
  7948  1C98  0024               	movlb	4	; select bank4
  7949  1C99  0844               	movf	(_Memory^(0+512)+36),w
  7950  1C9A  0672               	xorwf	??_setMemory_Modify,w
  7951  1C9B  39FE               	andlw	-2
  7952  1C9C  0672               	xorwf	??_setMemory_Modify,w
  7953  1C9D  00C4               	movwf	(_Memory^(0+512)+36)
  7954                           
  7955                           ;MCU_B1.c: 1075: Memory.Time = 0;
  7956  1C9E  01C2               	clrf	(_Memory^(0+512)+34)
  7957  1C9F  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7958  1CA0  0008               	return
  7959  1CA1                     __end_of_setMemory_Modify:	
  7960                           
  7961                           	psect	text32
  7962  1E2B                     __ptext32:	
  7963 ;; *************** function _setDimmerLights_DimmingRun *****************
  7964 ;; Defined at:
  7965 ;;		line 1000 in file "../src/Dimmer_B1.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  lights          1    wreg     unsigned char 
  7968 ;;  command         1    4[COMMON] unsigned char 
  7969 ;; Auto vars:     Size  Location     Type
  7970 ;;  lights          1    6[COMMON] unsigned char 
  7971 ;; Return value:  Size  Location     Type
  7972 ;;		None               void
  7973 ;; Registers used:
  7974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7975 ;; Tracked objects:
  7976 ;;		On entry : 0/0
  7977 ;;		On exit  : 0/0
  7978 ;;		Unchanged: 0/0
  7979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7980 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7984 ;;Total ram usage:        3 bytes
  7985 ;; Hardware stack levels used:    1
  7986 ;; Hardware stack levels required when called:    4
  7987 ;; This function calls:
  7988 ;;		_DimmerLights_SelectPointer
  7989 ;; This function is called by:
  7990 ;;		_setRFSW_AdjControl
  7991 ;; This function uses a non-reentrant model
  7992 ;;
  7993                           
  7994                           
  7995                           ;psect for function _setDimmerLights_DimmingRun
  7996  1E2B                     _setDimmerLights_DimmingRun:	
  7997                           
  7998                           ;incstack = 0
  7999                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8000                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8001  1E2B  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8002                           
  8003                           ;Dimmer_B1.c: 1001: DimmerLights_SelectPointer(lights);
  8004  1E2C  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8005  1E2D  319D  2568         	fcall	_DimmerLights_SelectPointer
  8006                           
  8007                           ;Dimmer_B1.c: 1002: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8008  1E2F  0874               	movf	setDimmerLights_DimmingRun@command,w
  8009  1E30  3A01               	xorlw	1
  8010  1E31  3000               	movlw	0
  8011  1E32  1903               	skipnz
  8012  1E33  3001               	movlw	1
  8013  1E34  00F5               	movwf	??_setDimmerLights_DimmingRun
  8014  1E35  0021               	movlb	1	; select bank1
  8015  1E36  0A46               	incf	_DimmerLights^(0+128),w
  8016  1E37  0086               	movwf	6
  8017  1E38  3001               	movlw	1	; select bank2/3
  8018  1E39  0087               	movwf	7
  8019  1E3A  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8020  1E3B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8021  1E3C  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8022  1E3D  0801               	movf	1,w
  8023  1E3E  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8024  1E3F  39BF               	andlw	-65
  8025  1E40  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8026  1E41  0081               	movwf	1
  8027  1E42  0008               	return
  8028  1E43                     __end_of_setDimmerLights_DimmingRun:	
  8029                           
  8030                           	psect	text33
  8031  1CD2                     __ptext33:	
  8032 ;; *************** function _getRF_KeyStatus *****************
  8033 ;; Defined at:
  8034 ;;		line 166 in file "../src/RF_Control_B1.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;		None
  8037 ;; Auto vars:     Size  Location     Type
  8038 ;;  key             1    3[COMMON] unsigned char 
  8039 ;; Return value:  Size  Location     Type
  8040 ;;                  1    wreg      unsigned char 
  8041 ;; Registers used:
  8042 ;;		wreg, status,2
  8043 ;; Tracked objects:
  8044 ;;		On entry : 0/0
  8045 ;;		On exit  : 0/0
  8046 ;;		Unchanged: 0/0
  8047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;Total ram usage:        3 bytes
  8053 ;; Hardware stack levels used:    1
  8054 ;; Hardware stack levels required when called:    3
  8055 ;; This function calls:
  8056 ;;		Nothing
  8057 ;; This function is called by:
  8058 ;;		_setRF_Main
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _getRF_KeyStatus
  8064  1CD2                     _getRF_KeyStatus:	
  8065                           
  8066                           ;RF_Control_B1.c: 167: char key = 0;
  8067                           
  8068                           ;incstack = 0
  8069                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8070  1CD2  01F3               	clrf	getRF_KeyStatus@key
  8071                           
  8072                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8073  1CD3  01F4               	clrf	_getRF_KeyStatus$5094
  8074  1CD4  0AF4               	incf	_getRF_KeyStatus$5094,f
  8075  1CD5  0020               	movlb	0	; select bank0
  8076  1CD6  1F0C               	btfss	12,6	;volatile
  8077  1CD7  1A0C               	btfsc	12,4	;volatile
  8078  1CD8  2CDD               	goto	l7530
  8079  1CD9  1C0C               	btfss	12,0	;volatile
  8080  1CDA  188D               	btfsc	13,1	;volatile
  8081  1CDB  2CDD               	goto	l7530
  8082  1CDC  01F4               	clrf	_getRF_KeyStatus$5094
  8083  1CDD                     l7530:	
  8084  1CDD  0874               	movf	_getRF_KeyStatus$5094,w
  8085  1CDE  00F2               	movwf	??_getRF_KeyStatus
  8086  1CDF  0872               	movf	??_getRF_KeyStatus,w
  8087  1CE0  00F3               	movwf	getRF_KeyStatus@key
  8088                           
  8089                           ;RF_Control_B1.c: 179: return key;
  8090  1CE1  0873               	movf	getRF_KeyStatus@key,w
  8091  1CE2  0008               	return
  8092  1CE3                     __end_of_getRF_KeyStatus:	
  8093                           
  8094                           	psect	text34
  8095  1C81                     __ptext34:	
  8096 ;; *************** function _getBuz_GO *****************
  8097 ;; Defined at:
  8098 ;;		line 82 in file "../src/Buzzer_B1.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;  i               2    6[COMMON] int 
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  2    2[COMMON] int 
  8105 ;; Registers used:
  8106 ;;		wreg, status,2, status,0
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;Total ram usage:        6 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    3
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_setRF_Main
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           
  8127                           ;psect for function _getBuz_GO
  8128  1C81                     _getBuz_GO:	
  8129                           
  8130                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8134  1C81  0021               	movlb	1	; select bank1
  8135  1C82  0C2E               	rrf	_Buz1^(0+128),w
  8136  1C83  3901               	andlw	1
  8137  1C84  00F4               	movwf	??_getBuz_GO
  8138  1C85  01F5               	clrf	??_getBuz_GO+1
  8139  1C86  0874               	movf	??_getBuz_GO,w
  8140  1C87  00F6               	movwf	getBuz_GO@i
  8141  1C88  0875               	movf	??_getBuz_GO+1,w
  8142  1C89  00F7               	movwf	getBuz_GO@i+1
  8143                           
  8144                           ;Buzzer_B1.c: 84: return i;
  8145  1C8A  0877               	movf	getBuz_GO@i+1,w
  8146  1C8B  01F3               	clrf	?_getBuz_GO+1
  8147  1C8C  07F3               	addwf	?_getBuz_GO+1,f
  8148  1C8D  0876               	movf	getBuz_GO@i,w
  8149  1C8E  01F2               	clrf	?_getBuz_GO
  8150  1C8F  07F2               	addwf	?_getBuz_GO,f
  8151  1C90  0008               	return
  8152  1C91                     __end_of_getBuz_GO:	
  8153                           
  8154                           	psect	text35
  8155  1C23                     __ptext35:	
  8156 ;; *************** function _RF_RxDisable *****************
  8157 ;; Defined at:
  8158 ;;		line 154 in file "../src/RF_Control_B1.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;		None               void
  8165 ;; Registers used:
  8166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        0 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    5
  8179 ;; This function calls:
  8180 ;;		_CC2500_WriteCommand
  8181 ;; This function is called by:
  8182 ;;		_setRF_Main
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           
  8187                           ;psect for function _RF_RxDisable
  8188  1C23                     _RF_RxDisable:	
  8189                           
  8190                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8194  1C23  0021               	movlb	1	; select bank1
  8195  1C24  18A0               	btfsc	_RF1^(0+128),1
  8196  1C25  2C28               	goto	l2396
  8197  1C26  1DA0               	btfss	_RF1^(0+128),3
  8198  1C27  0008               	return
  8199  1C28                     l2396:	
  8200                           
  8201                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8202  1C28  11A0               	bcf	_RF1^(0+128),3
  8203                           
  8204                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8205  1C29  10A0               	bcf	_RF1^(0+128),1
  8206                           
  8207                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8208  1C2A  3036               	movlw	54
  8209  1C2B  319E  265D  319C   	fcall	_CC2500_WriteCommand
  8210                           
  8211                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8212  1C2E  303A               	movlw	58
  8213  1C2F  319E  265D         	fcall	_CC2500_WriteCommand
  8214  1C31  0008               	return
  8215  1C32                     __end_of_RF_RxDisable:	
  8216                           
  8217                           	psect	text36
  8218  096D                     __ptext36:	
  8219 ;; *************** function _CC2500_TxData *****************
  8220 ;; Defined at:
  8221 ;;		line 32 in file "../src/CC2500_B1.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;  loop_e          1    7[COMMON] unsigned char 
  8226 ;; Return value:  Size  Location     Type
  8227 ;;		None               void
  8228 ;; Registers used:
  8229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8237 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8238 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;Total ram usage:        2 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    5
  8242 ;; This function calls:
  8243 ;;		_CC2500_WriteByte
  8244 ;;		_CC2500_WriteCommand
  8245 ;;		_RF_Timeout_Counter
  8246 ;;		_setRF_TimeoutCleared
  8247 ;; This function is called by:
  8248 ;;		_setRF_Main
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _CC2500_TxData
  8254  096D                     _CC2500_TxData:	
  8255                           
  8256                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8257                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8261  096D  3036               	movlw	54
  8262  096E  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8263                           
  8264                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8265  0971  303B               	movlw	59
  8266  0972  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8267                           
  8268                           ;CC2500_B1.c: 38: RC4 = 0;
  8269  0975  0020               	movlb	0	; select bank0
  8270  0976  120E               	bcf	14,4	;volatile
  8271                           
  8272                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8273  0977  307F               	movlw	127
  8274  0978  00F6               	movwf	??_CC2500_TxData
  8275  0979  0876               	movf	??_CC2500_TxData,w
  8276  097A  0021               	movlb	1	; select bank1
  8277  097B  00CA               	movwf	_SPI0Buffer^(0+128)
  8278                           
  8279                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8280  097C  2980               	goto	l9394
  8281  097D                     l9392:	
  8282                           
  8283                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8284  097D  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8285  0980                     l9394:	
  8286  0980  0020               	movlb	0	; select bank0
  8287  0981  1D0E               	btfss	14,2	;volatile
  8288  0982  2986               	goto	l9398
  8289  0983  0021               	movlb	1	; select bank1
  8290  0984  1F21               	btfss	(_RF1^(0+128)+1),6
  8291  0985  297D               	goto	l9392
  8292  0986                     l9398:	
  8293                           
  8294                           ;CC2500_B1.c: 42: };
  8295                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8296  0986  319A  22C8  3189   	fcall	_setRF_TimeoutCleared
  8297                           
  8298                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8299  0989  319E  2613  3189   	fcall	_CC2500_WriteByte
  8300                           
  8301                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8302  098C  0021               	movlb	1	; select bank1
  8303  098D  084C               	movf	_Tx_Length^(0+128),w
  8304  098E  00F6               	movwf	??_CC2500_TxData
  8305  098F  0876               	movf	??_CC2500_TxData,w
  8306  0990  00CA               	movwf	_SPI0Buffer^(0+128)
  8307                           
  8308                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8309  0991  319E  2613  3189   	fcall	_CC2500_WriteByte
  8310                           
  8311                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8312  0994  01F7               	clrf	CC2500_TxData@loop_e
  8313  0995                     l9412:	
  8314  0995  0021               	movlb	1	; select bank1
  8315  0996  084C               	movf	_Tx_Length^(0+128),w
  8316  0997  0277               	subwf	CC2500_TxData@loop_e,w
  8317  0998  1803               	btfsc	3,0
  8318  0999  29AC               	goto	l255
  8319                           
  8320                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8321  099A  0877               	movf	CC2500_TxData@loop_e,w
  8322  099B  3EA0               	addlw	_RF_Data& (0+255)
  8323  099C  0086               	movwf	6
  8324  099D  3001               	movlw	1	; select bank3/4
  8325  099E  0087               	movwf	7
  8326  099F  0801               	movf	1,w
  8327  09A0  00F6               	movwf	??_CC2500_TxData
  8328  09A1  0876               	movf	??_CC2500_TxData,w
  8329  09A2  0021               	movlb	1	; select bank1
  8330  09A3  00CA               	movwf	_SPI0Buffer^(0+128)
  8331                           
  8332                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8333  09A4  319E  2613  3189   	fcall	_CC2500_WriteByte
  8334  09A7  3001               	movlw	1
  8335  09A8  00F6               	movwf	??_CC2500_TxData
  8336  09A9  0876               	movf	??_CC2500_TxData,w
  8337  09AA  07F7               	addwf	CC2500_TxData@loop_e,f
  8338  09AB  2995               	goto	l9412
  8339  09AC                     l255:	
  8340                           
  8341                           ;CC2500_B1.c: 51: }
  8342                           ;CC2500_B1.c: 52: RC4 = 1;
  8343  09AC  0020               	movlb	0	; select bank0
  8344  09AD  160E               	bsf	14,4	;volatile
  8345                           
  8346                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8347  09AE  3035               	movlw	53
  8348  09AF  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8349                           
  8350                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8351  09B2  29B6               	goto	l9418
  8352  09B3                     l9416:	
  8353                           
  8354                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8355  09B3  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8356  09B6                     l9418:	
  8357  09B6  0020               	movlb	0	; select bank0
  8358  09B7  180D               	btfsc	13,0	;volatile
  8359  09B8  29BC               	goto	l9422
  8360  09B9  0021               	movlb	1	; select bank1
  8361  09BA  1F21               	btfss	(_RF1^(0+128)+1),6
  8362  09BB  29B3               	goto	l9416
  8363  09BC                     l9422:	
  8364                           
  8365                           ;CC2500_B1.c: 56: };
  8366                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8367  09BC  319A  22C8  3189   	fcall	_setRF_TimeoutCleared
  8368                           
  8369                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8370  09BF  29C3               	goto	l9426
  8371  09C0                     l9424:	
  8372                           
  8373                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8374  09C0  319D  25A7  3189   	fcall	_RF_Timeout_Counter
  8375  09C3                     l9426:	
  8376  09C3  0020               	movlb	0	; select bank0
  8377  09C4  1C0D               	btfss	13,0	;volatile
  8378  09C5  29C9               	goto	l9430
  8379  09C6  0021               	movlb	1	; select bank1
  8380  09C7  1F21               	btfss	(_RF1^(0+128)+1),6
  8381  09C8  29C0               	goto	l9424
  8382  09C9                     l9430:	
  8383                           
  8384                           ;CC2500_B1.c: 61: };
  8385                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8386  09C9  319A  22C8  3189   	fcall	_setRF_TimeoutCleared
  8387                           
  8388                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8389  09CC  3036               	movlw	54
  8390  09CD  319E  265D  3189   	fcall	_CC2500_WriteCommand
  8391                           
  8392                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8393  09D0  303B               	movlw	59
  8394  09D1  319E  265D         	fcall	_CC2500_WriteCommand
  8395                           
  8396                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8397  09D3  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8398  09D4  0008               	return
  8399  09D5                     __end_of_CC2500_TxData:	
  8400                           
  8401                           	psect	text37
  8402  0842                     __ptext37:	
  8403 ;; *************** function _CC2500_RxData *****************
  8404 ;; Defined at:
  8405 ;;		line 73 in file "../src/CC2500_B1.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;		None
  8408 ;; Auto vars:     Size  Location     Type
  8409 ;;  loop_f          1    7[COMMON] unsigned char 
  8410 ;; Return value:  Size  Location     Type
  8411 ;;		None               void
  8412 ;; Registers used:
  8413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8414 ;; Tracked objects:
  8415 ;;		On entry : 0/0
  8416 ;;		On exit  : 0/0
  8417 ;;		Unchanged: 0/0
  8418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;Total ram usage:        2 bytes
  8424 ;; Hardware stack levels used:    1
  8425 ;; Hardware stack levels required when called:    5
  8426 ;; This function calls:
  8427 ;;		_CC2500_ReadByte
  8428 ;;		_CC2500_ReadStatus
  8429 ;;		_CC2500_WriteByte
  8430 ;;		_CC2500_WriteCommand
  8431 ;;		_RF_Timeout_Counter
  8432 ;;		_setRF_TimeoutCleared
  8433 ;; This function is called by:
  8434 ;;		_setRF_Main
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _CC2500_RxData
  8440  0842                     _CC2500_RxData:	
  8441                           
  8442                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8443                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8447  0842  0020               	movlb	0	; select bank0
  8448  0843  180D               	btfsc	13,0	;volatile
  8449  0844  0008               	return
  8450                           
  8451                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8452  0845  303B               	movlw	59
  8453  0846  3190  2092  3188   	fcall	_CC2500_ReadStatus
  8454                           
  8455                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8456  0849  0021               	movlb	1	; select bank1
  8457  084A  084F               	movf	_s_data^(0+128),w
  8458  084B  1903               	btfsc	3,2
  8459  084C  0008               	return
  8460                           
  8461                           ;CC2500_B1.c: 90: RC4 = 0;
  8462  084D  0020               	movlb	0	; select bank0
  8463  084E  120E               	bcf	14,4	;volatile
  8464                           
  8465                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8466  084F  30FF               	movlw	255
  8467  0850  00F6               	movwf	??_CC2500_RxData
  8468  0851  0876               	movf	??_CC2500_RxData,w
  8469  0852  0021               	movlb	1	; select bank1
  8470  0853  00CA               	movwf	_SPI0Buffer^(0+128)
  8471                           
  8472                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8473  0854  2858               	goto	l9450
  8474  0855                     l9448:	
  8475                           
  8476                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8477  0855  319D  25A7  3188   	fcall	_RF_Timeout_Counter
  8478  0858                     l9450:	
  8479  0858  0020               	movlb	0	; select bank0
  8480  0859  1D0E               	btfss	14,2	;volatile
  8481  085A  285E               	goto	l9454
  8482  085B  0021               	movlb	1	; select bank1
  8483  085C  1F21               	btfss	(_RF1^(0+128)+1),6
  8484  085D  2855               	goto	l9448
  8485  085E                     l9454:	
  8486                           
  8487                           ;CC2500_B1.c: 95: };
  8488                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8489  085E  319A  22C8  3188   	fcall	_setRF_TimeoutCleared
  8490                           
  8491                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8492  0861  319E  2613  3188   	fcall	_CC2500_WriteByte
  8493                           
  8494                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8495  0864  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8496                           
  8497                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8498  0867  0021               	movlb	1	; select bank1
  8499  0868  084A               	movf	_SPI0Buffer^(0+128),w
  8500  0869  00F6               	movwf	??_CC2500_RxData
  8501  086A  0876               	movf	??_CC2500_RxData,w
  8502  086B  00C9               	movwf	_Rx_Length^(0+128)
  8503                           
  8504                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8505  086C  01F7               	clrf	CC2500_RxData@loop_f
  8506  086D                     l9470:	
  8507  086D  0849               	movf	_Rx_Length^(0+128),w
  8508  086E  0277               	subwf	CC2500_RxData@loop_f,w
  8509  086F  1803               	btfsc	3,0
  8510  0870  2883               	goto	l9472
  8511                           
  8512                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8513  0871  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8514                           
  8515                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8516  0874  0021               	movlb	1	; select bank1
  8517  0875  084A               	movf	_SPI0Buffer^(0+128),w
  8518  0876  00F6               	movwf	??_CC2500_RxData
  8519  0877  0877               	movf	CC2500_RxData@loop_f,w
  8520  0878  3EA0               	addlw	_RF_Data& (0+255)
  8521  0879  0086               	movwf	6
  8522  087A  3001               	movlw	1	; select bank3/4
  8523  087B  0087               	movwf	7
  8524  087C  0876               	movf	??_CC2500_RxData,w
  8525  087D  0081               	movwf	1
  8526  087E  3001               	movlw	1
  8527  087F  00F6               	movwf	??_CC2500_RxData
  8528  0880  0876               	movf	??_CC2500_RxData,w
  8529  0881  07F7               	addwf	CC2500_RxData@loop_f,f
  8530  0882  286D               	goto	l9470
  8531  0883                     l9472:	
  8532                           
  8533                           ;CC2500_B1.c: 104: }
  8534                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8535  0883  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8536                           
  8537                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8538  0886  0021               	movlb	1	; select bank1
  8539  0887  084A               	movf	_SPI0Buffer^(0+128),w
  8540  0888  00F6               	movwf	??_CC2500_RxData
  8541  0889  0876               	movf	??_CC2500_RxData,w
  8542  088A  00C8               	movwf	_RSSI^(0+128)
  8543                           
  8544                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8545  088B  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8546                           
  8547                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8548  088E  0021               	movlb	1	; select bank1
  8549  088F  084A               	movf	_SPI0Buffer^(0+128),w
  8550  0890  00F6               	movwf	??_CC2500_RxData
  8551  0891  0876               	movf	??_CC2500_RxData,w
  8552  0892  00C2               	movwf	_CRC^(0+128)
  8553                           
  8554                           ;CC2500_B1.c: 109: RC4 = 1;
  8555  0893  0020               	movlb	0	; select bank0
  8556  0894  160E               	bsf	14,4	;volatile
  8557                           
  8558                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8559  0895  0021               	movlb	1	; select bank1
  8560  0896  1BC2               	btfsc	_CRC^(0+128),7
  8561                           
  8562                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8563  0897  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8564                           
  8565                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8566  0898  11A0               	bcf	_RF1^(0+128),3
  8567                           
  8568                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8569  0899  14A0               	bsf	_RF1^(0+128),1
  8570                           
  8571                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8572  089A  3036               	movlw	54
  8573  089B  319E  265D  3188   	fcall	_CC2500_WriteCommand
  8574                           
  8575                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8576  089E  303A               	movlw	58
  8577  089F  319E  265D         	fcall	_CC2500_WriteCommand
  8578  08A1  0021               	movlb	1	; select bank1
  8579  08A2  0008               	return
  8580  08A3                     __end_of_CC2500_RxData:	
  8581                           
  8582                           	psect	text38
  8583  1092                     __ptext38:	
  8584 ;; *************** function _CC2500_ReadStatus *****************
  8585 ;; Defined at:
  8586 ;;		line 308 in file "../src/CC2500_B1.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  status_addr     1    wreg     unsigned char 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  status_addr     1    5[COMMON] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;		None               void
  8593 ;; Registers used:
  8594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;Total ram usage:        2 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    4
  8607 ;; This function calls:
  8608 ;;		_CC2500_ReadByte
  8609 ;;		_CC2500_WriteByte
  8610 ;;		_RF_Timeout_Counter
  8611 ;;		_setRF_TimeoutCleared
  8612 ;; This function is called by:
  8613 ;;		_CC2500_RxData
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function _CC2500_ReadStatus
  8619  1092                     _CC2500_ReadStatus:	
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8623                           ;CC2500_ReadStatus@status_addr stored from wreg
  8624  1092  00F5               	movwf	CC2500_ReadStatus@status_addr
  8625                           
  8626                           ;CC2500_B1.c: 309: RC4 = 0;
  8627  1093  0020               	movlb	0	; select bank0
  8628  1094  120E               	bcf	14,4	;volatile
  8629                           
  8630                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8631  1095  0875               	movf	CC2500_ReadStatus@status_addr,w
  8632  1096  3EC0               	addlw	192
  8633  1097  00F4               	movwf	??_CC2500_ReadStatus
  8634  1098  0874               	movf	??_CC2500_ReadStatus,w
  8635  1099  0021               	movlb	1	; select bank1
  8636  109A  00CA               	movwf	_SPI0Buffer^(0+128)
  8637                           
  8638                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8639  109B  289F               	goto	l9254
  8640  109C                     l9252:	
  8641                           
  8642                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8643  109C  319D  25A7  3190   	fcall	_RF_Timeout_Counter
  8644  109F                     l9254:	
  8645  109F  0020               	movlb	0	; select bank0
  8646  10A0  1D0E               	btfss	14,2	;volatile
  8647  10A1  28A5               	goto	l9258
  8648  10A2  0021               	movlb	1	; select bank1
  8649  10A3  1F21               	btfss	(_RF1^(0+128)+1),6
  8650  10A4  289C               	goto	l9252
  8651  10A5                     l9258:	
  8652                           
  8653                           ;CC2500_B1.c: 314: };
  8654                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8655  10A5  319A  22C8  3190   	fcall	_setRF_TimeoutCleared
  8656                           
  8657                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8658  10A8  319E  2613  3190   	fcall	_CC2500_WriteByte
  8659                           
  8660                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8661  10AB  319E  26C8         	fcall	_CC2500_ReadByte
  8662                           
  8663                           ;CC2500_B1.c: 319: RC4 = 1;
  8664  10AD  0020               	movlb	0	; select bank0
  8665  10AE  160E               	bsf	14,4	;volatile
  8666                           
  8667                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8668  10AF  0021               	movlb	1	; select bank1
  8669  10B0  084A               	movf	_SPI0Buffer^(0+128),w
  8670  10B1  00F4               	movwf	??_CC2500_ReadStatus
  8671  10B2  0874               	movf	??_CC2500_ReadStatus,w
  8672  10B3  00CF               	movwf	_s_data^(0+128)
  8673  10B4  0008               	return
  8674  10B5                     __end_of_CC2500_ReadStatus:	
  8675                           
  8676                           	psect	text39
  8677  1EC8                     __ptext39:	
  8678 ;; *************** function _CC2500_ReadByte *****************
  8679 ;; Defined at:
  8680 ;;		line 242 in file "../src/CC2500_B1.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;		None
  8683 ;; Auto vars:     Size  Location     Type
  8684 ;;  loop_b          1    3[COMMON] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;		None               void
  8687 ;; Registers used:
  8688 ;;		wreg, status,2, status,0
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8698 ;;Total ram usage:        2 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    3
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_CC2500_RxData
  8705 ;;		_CC2500_ReadStatus
  8706 ;;		_CC2500_ReadREG
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _CC2500_ReadByte
  8712  1EC8                     _CC2500_ReadByte:	
  8713                           
  8714                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8715                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8716                           
  8717                           ;incstack = 0
  8718                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8719  1EC8  01F3               	clrf	CC2500_ReadByte@loop_b
  8720  1EC9                     L3:	
  8721  1EC9  3008               	movlw	8
  8722  1ECA  0273               	subwf	CC2500_ReadByte@loop_b,w
  8723  1ECB  1803               	btfsc	3,0
  8724  1ECC  0008               	return
  8725                           
  8726                           ;CC2500_B1.c: 245: RC1 = 1;
  8727  1ECD  0020               	movlb	0	; select bank0
  8728  1ECE  148E               	bsf	14,1	;volatile
  8729                           
  8730                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8731  1ECF  1003               	clrc
  8732  1ED0  0021               	movlb	1	; select bank1
  8733  1ED1  0DCA               	rlf	_SPI0Buffer^(0+128),f
  8734                           
  8735                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8736  1ED2  0020               	movlb	0	; select bank0
  8737  1ED3  1D0E               	btfss	14,2	;volatile
  8738  1ED4  2ED8               	goto	l6798
  8739                           
  8740                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8741  1ED5  0021               	movlb	1	; select bank1
  8742  1ED6  144A               	bsf	_SPI0Buffer^(0+128),0
  8743  1ED7  2EDD               	goto	l6800
  8744  1ED8                     l6798:	
  8745                           
  8746                           ;CC2500_B1.c: 249: else
  8747                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8748  1ED8  30FE               	movlw	254
  8749  1ED9  00F2               	movwf	??_CC2500_ReadByte
  8750  1EDA  0872               	movf	??_CC2500_ReadByte,w
  8751  1EDB  0021               	movlb	1	; select bank1
  8752  1EDC  05CA               	andwf	_SPI0Buffer^(0+128),f
  8753  1EDD                     l6800:	
  8754                           
  8755                           ;CC2500_B1.c: 251: RC1 = 0;
  8756  1EDD  0020               	movlb	0	; select bank0
  8757  1EDE  108E               	bcf	14,1	;volatile
  8758  1EDF  3001               	movlw	1
  8759  1EE0  00F2               	movwf	??_CC2500_ReadByte
  8760  1EE1  0872               	movf	??_CC2500_ReadByte,w
  8761  1EE2  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8762  1EE3  2EC9               	goto	L3
  8763  1EE4                     __end_of_CC2500_ReadByte:	
  8764                           
  8765                           	psect	text40
  8766  1DBC                     __ptext40:	
  8767 ;; *************** function _CC2500_PowerOnInitial *****************
  8768 ;; Defined at:
  8769 ;;		line 126 in file "../src/CC2500_B1.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;		None
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;		None
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        0 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    6
  8790 ;; This function calls:
  8791 ;;		_CC2500_ClearRXFIFO
  8792 ;;		_CC2500_ClearTXFIFO
  8793 ;;		_CC2500_FrequencyCabr
  8794 ;;		_CC2500_InitPATable
  8795 ;;		_CC2500_InitSetREG
  8796 ;;		_CC2500_PowerRST
  8797 ;;		_CC2500_SIDLEMode
  8798 ;; This function is called by:
  8799 ;;		_main
  8800 ;;		_setRF_Main
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _CC2500_PowerOnInitial
  8806  1DBC                     _CC2500_PowerOnInitial:	
  8807                           
  8808                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8812  1DBC  3193  23B8  319D   	fcall	_CC2500_PowerRST
  8813                           
  8814                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8815  1DBF  3191  21A2  319D   	fcall	_CC2500_InitSetREG
  8816                           
  8817                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8818  1DC2  319F  271E  319D   	fcall	_CC2500_InitPATable
  8819                           
  8820                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8821  1DC5  319A  22D0  319D   	fcall	_CC2500_ClearTXFIFO
  8822                           
  8823                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8824  1DC8  319A  22CC  319D   	fcall	_CC2500_ClearRXFIFO
  8825                           
  8826                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8827  1DCB  319B  2352  319D   	fcall	_CC2500_FrequencyCabr
  8828                           
  8829                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8830  1DCE  319A  22D4         	fcall	_CC2500_SIDLEMode
  8831  1DD0  0008               	return
  8832  1DD1                     __end_of_CC2500_PowerOnInitial:	
  8833                           
  8834                           	psect	text41
  8835  1AD4                     __ptext41:	
  8836 ;; *************** function _CC2500_SIDLEMode *****************
  8837 ;; Defined at:
  8838 ;;		line 216 in file "../src/CC2500_B1.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;		None               void
  8845 ;; Registers used:
  8846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;Total ram usage:        0 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    5
  8859 ;; This function calls:
  8860 ;;		_CC2500_WriteCommand
  8861 ;; This function is called by:
  8862 ;;		_CC2500_PowerOnInitial
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           
  8867                           ;psect for function _CC2500_SIDLEMode
  8868  1AD4                     _CC2500_SIDLEMode:	
  8869                           
  8870                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8871                           
  8872                           ;incstack = 0
  8873                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8874  1AD4  3036               	movlw	54
  8875  1AD5  319E  265D         	fcall	_CC2500_WriteCommand
  8876  1AD7  0008               	return
  8877  1AD8                     __end_of_CC2500_SIDLEMode:	
  8878                           
  8879                           	psect	text42
  8880  13B8                     __ptext42:	
  8881 ;; *************** function _CC2500_PowerRST *****************
  8882 ;; Defined at:
  8883 ;;		line 139 in file "../src/CC2500_B1.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;		None
  8888 ;; Return value:  Size  Location     Type
  8889 ;;		None               void
  8890 ;; Registers used:
  8891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;Total ram usage:        1 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    4
  8904 ;; This function calls:
  8905 ;;		_CC2500_WriteByte
  8906 ;;		_DelayTime_1us
  8907 ;;		_RF_Timeout_Counter
  8908 ;;		_setRF_TimeoutCleared
  8909 ;; This function is called by:
  8910 ;;		_CC2500_PowerOnInitial
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           
  8915                           ;psect for function _CC2500_PowerRST
  8916  13B8                     _CC2500_PowerRST:	
  8917                           
  8918                           ;CC2500_B1.c: 140: RC1 = 0;
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8922  13B8  0020               	movlb	0	; select bank0
  8923  13B9  108E               	bcf	14,1	;volatile
  8924                           
  8925                           ;CC2500_B1.c: 141: RC0 = 0;
  8926  13BA  100E               	bcf	14,0	;volatile
  8927                           
  8928                           ;CC2500_B1.c: 142: RC4 = 1;
  8929  13BB  160E               	bsf	14,4	;volatile
  8930                           
  8931                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8932  13BC  300A               	movlw	10
  8933  13BD  00F2               	movwf	DelayTime_1us@count
  8934  13BE  3000               	movlw	0
  8935  13BF  00F3               	movwf	DelayTime_1us@count+1
  8936  13C0  3190  20DA  3193   	fcall	_DelayTime_1us
  8937                           
  8938                           ;CC2500_B1.c: 144: RC4 = 0;
  8939  13C3  0020               	movlb	0	; select bank0
  8940  13C4  120E               	bcf	14,4	;volatile
  8941                           
  8942                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8943  13C5  300A               	movlw	10
  8944  13C6  00F2               	movwf	DelayTime_1us@count
  8945  13C7  3000               	movlw	0
  8946  13C8  00F3               	movwf	DelayTime_1us@count+1
  8947  13C9  3190  20DA  3193   	fcall	_DelayTime_1us
  8948                           
  8949                           ;CC2500_B1.c: 146: RC4 = 1;
  8950  13CC  0020               	movlb	0	; select bank0
  8951  13CD  160E               	bsf	14,4	;volatile
  8952                           
  8953                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8954  13CE  3028               	movlw	40
  8955  13CF  00F2               	movwf	DelayTime_1us@count
  8956  13D0  3000               	movlw	0
  8957  13D1  00F3               	movwf	DelayTime_1us@count+1
  8958  13D2  3190  20DA  3193   	fcall	_DelayTime_1us
  8959                           
  8960                           ;CC2500_B1.c: 148: RC4 = 0;
  8961  13D5  0020               	movlb	0	; select bank0
  8962  13D6  120E               	bcf	14,4	;volatile
  8963                           
  8964                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8965  13D7  3030               	movlw	48
  8966  13D8  00F8               	movwf	??_CC2500_PowerRST
  8967  13D9  0878               	movf	??_CC2500_PowerRST,w
  8968  13DA  0021               	movlb	1	; select bank1
  8969  13DB  00CA               	movwf	_SPI0Buffer^(0+128)
  8970                           
  8971                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8972  13DC  2BE0               	goto	l9282
  8973  13DD                     l9280:	
  8974                           
  8975                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8976  13DD  319D  25A7  3193   	fcall	_RF_Timeout_Counter
  8977  13E0                     l9282:	
  8978  13E0  0020               	movlb	0	; select bank0
  8979  13E1  1D0E               	btfss	14,2	;volatile
  8980  13E2  2BE6               	goto	l9286
  8981  13E3  0021               	movlb	1	; select bank1
  8982  13E4  1F21               	btfss	(_RF1^(0+128)+1),6
  8983  13E5  2BDD               	goto	l9280
  8984  13E6                     l9286:	
  8985                           
  8986                           ;CC2500_B1.c: 152: };
  8987                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8988  13E6  319A  22C8  3193   	fcall	_setRF_TimeoutCleared
  8989                           
  8990                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8991  13E9  319E  2613  3193   	fcall	_CC2500_WriteByte
  8992                           
  8993                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8994  13EC  2BF0               	goto	l9292
  8995  13ED                     l9290:	
  8996                           
  8997                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8998  13ED  319D  25A7  3193   	fcall	_RF_Timeout_Counter
  8999  13F0                     l9292:	
  9000  13F0  0020               	movlb	0	; select bank0
  9001  13F1  1D0E               	btfss	14,2	;volatile
  9002  13F2  2BF6               	goto	l9296
  9003  13F3  0021               	movlb	1	; select bank1
  9004  13F4  1F21               	btfss	(_RF1^(0+128)+1),6
  9005  13F5  2BED               	goto	l9290
  9006  13F6                     l9296:	
  9007                           
  9008                           ;CC2500_B1.c: 157: };
  9009                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9010  13F6  319A  22C8         	fcall	_setRF_TimeoutCleared
  9011                           
  9012                           ;CC2500_B1.c: 159: RC0 = 0;
  9013  13F8  0020               	movlb	0	; select bank0
  9014  13F9  100E               	bcf	14,0	;volatile
  9015                           
  9016                           ;CC2500_B1.c: 160: RC4 = 1;
  9017  13FA  160E               	bsf	14,4	;volatile
  9018  13FB  0008               	return
  9019  13FC                     __end_of_CC2500_PowerRST:	
  9020                           
  9021                           	psect	text43
  9022  11A2                     __ptext43:	
  9023 ;; *************** function _CC2500_InitSetREG *****************
  9024 ;; Defined at:
  9025 ;;		line 166 in file "../src/CC2500_B1.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9030 ;;  temp2           1    1[BANK0 ] unsigned char 
  9031 ;;  temp1           1    0[BANK0 ] unsigned char 
  9032 ;; Return value:  Size  Location     Type
  9033 ;;		None               void
  9034 ;; Registers used:
  9035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;Total ram usage:        4 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:    5
  9048 ;; This function calls:
  9049 ;;		_CC2500_WriteREG
  9050 ;; This function is called by:
  9051 ;;		_CC2500_PowerOnInitial
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function _CC2500_InitSetREG
  9057  11A2                     _CC2500_InitSetREG:	
  9058                           
  9059                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9060                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9061                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9065  11A2  0020               	movlb	0	; select bank0
  9066  11A3  01A2               	clrf	CC2500_InitSetREG@loop_c
  9067  11A4                     L4:	
  9068  11A4  302F               	movlw	47
  9069  11A5  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9070  11A6  1803               	btfsc	3,0
  9071  11A7  0008               	return
  9072                           
  9073                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9074  11A8  0822               	movf	CC2500_InitSetREG@loop_c,w
  9075  11A9  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9076  11AA  0084               	movwf	4
  9077  11AB  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9078  11AC  1803               	skipnc
  9079  11AD  3E01               	addlw	1
  9080  11AE  0085               	movwf	5
  9081  11AF  0800               	movf	0,w	;code access
  9082  11B0  00F7               	movwf	??_CC2500_InitSetREG
  9083  11B1  0877               	movf	??_CC2500_InitSetREG,w
  9084  11B2  00A0               	movwf	CC2500_InitSetREG@temp1
  9085                           
  9086                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9087  11B3  0822               	movf	CC2500_InitSetREG@loop_c,w
  9088  11B4  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9089  11B5  0084               	movwf	4
  9090  11B6  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9091  11B7  1803               	skipnc
  9092  11B8  3E01               	addlw	1
  9093  11B9  0085               	movwf	5
  9094  11BA  0800               	movf	0,w	;code access
  9095  11BB  00F7               	movwf	??_CC2500_InitSetREG
  9096  11BC  0877               	movf	??_CC2500_InitSetREG,w
  9097  11BD  00A1               	movwf	CC2500_InitSetREG@temp2
  9098                           
  9099                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9100  11BE  0821               	movf	CC2500_InitSetREG@temp2,w
  9101  11BF  00F7               	movwf	??_CC2500_InitSetREG
  9102  11C0  0877               	movf	??_CC2500_InitSetREG,w
  9103  11C1  00F4               	movwf	CC2500_WriteREG@value
  9104  11C2  0820               	movf	CC2500_InitSetREG@temp1,w
  9105  11C3  3190  2070  3191   	fcall	_CC2500_WriteREG
  9106  11C6  3001               	movlw	1
  9107  11C7  00F7               	movwf	??_CC2500_InitSetREG
  9108  11C8  0877               	movf	??_CC2500_InitSetREG,w
  9109  11C9  0020               	movlb	0	; select bank0
  9110  11CA  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9111  11CB  29A4               	goto	L4
  9112  11CC                     __end_of_CC2500_InitSetREG:	
  9113                           
  9114                           	psect	text44
  9115  1F1E                     __ptext44:	
  9116 ;; *************** function _CC2500_InitPATable *****************
  9117 ;; Defined at:
  9118 ;;		line 181 in file "../src/CC2500_B1.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  loop_d          1    9[COMMON] unsigned char 
  9123 ;;  temp            1    8[COMMON] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;		None               void
  9126 ;; Registers used:
  9127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        3 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    5
  9140 ;; This function calls:
  9141 ;;		_CC2500_WriteREG
  9142 ;; This function is called by:
  9143 ;;		_CC2500_PowerOnInitial
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           
  9148                           ;psect for function _CC2500_InitPATable
  9149  1F1E                     _CC2500_InitPATable:	
  9150                           
  9151                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9152                           ;CC2500_B1.c: 183: unsigned char temp;
  9153                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9157  1F1E  01F9               	clrf	CC2500_InitPATable@loop_d
  9158  1F1F                     L5:	
  9159  1F1F  3008               	movlw	8
  9160  1F20  0279               	subwf	CC2500_InitPATable@loop_d,w
  9161  1F21  1803               	btfsc	3,0
  9162  1F22  0008               	return
  9163                           
  9164                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9165  1F23  0879               	movf	CC2500_InitPATable@loop_d,w
  9166  1F24  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9167  1F25  0084               	movwf	4
  9168  1F26  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9169  1F27  1803               	skipnc
  9170  1F28  3E01               	addlw	1
  9171  1F29  0085               	movwf	5
  9172  1F2A  0800               	movf	0,w	;code access
  9173  1F2B  00F7               	movwf	??_CC2500_InitPATable
  9174  1F2C  0877               	movf	??_CC2500_InitPATable,w
  9175  1F2D  00F8               	movwf	CC2500_InitPATable@temp
  9176                           
  9177                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9178  1F2E  0878               	movf	CC2500_InitPATable@temp,w
  9179  1F2F  00F7               	movwf	??_CC2500_InitPATable
  9180  1F30  0877               	movf	??_CC2500_InitPATable,w
  9181  1F31  00F4               	movwf	CC2500_WriteREG@value
  9182  1F32  303E               	movlw	62
  9183  1F33  3190  2070  319F   	fcall	_CC2500_WriteREG
  9184  1F36  3001               	movlw	1
  9185  1F37  00F7               	movwf	??_CC2500_InitPATable
  9186  1F38  0877               	movf	??_CC2500_InitPATable,w
  9187  1F39  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9188  1F3A  2F1F               	goto	L5
  9189  1F3B                     __end_of_CC2500_InitPATable:	
  9190                           
  9191                           	psect	text45
  9192  1070                     __ptext45:	
  9193 ;; *************** function _CC2500_WriteREG *****************
  9194 ;; Defined at:
  9195 ;;		line 258 in file "../src/CC2500_B1.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  w_addr          1    wreg     unsigned char 
  9198 ;;  value           1    4[COMMON] unsigned char 
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  w_addr          1    6[COMMON] unsigned char 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;		None               void
  9203 ;; Registers used:
  9204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9205 ;; Tracked objects:
  9206 ;;		On entry : 0/0
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9210 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;Total ram usage:        3 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    4
  9217 ;; This function calls:
  9218 ;;		_CC2500_WriteByte
  9219 ;;		_RF_Timeout_Counter
  9220 ;;		_setRF_TimeoutCleared
  9221 ;; This function is called by:
  9222 ;;		_CC2500_InitSetREG
  9223 ;;		_CC2500_InitPATable
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           
  9228                           ;psect for function _CC2500_WriteREG
  9229  1070                     _CC2500_WriteREG:	
  9230                           
  9231                           ;incstack = 0
  9232                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9233                           ;CC2500_WriteREG@w_addr stored from wreg
  9234  1070  00F6               	movwf	CC2500_WriteREG@w_addr
  9235                           
  9236                           ;CC2500_B1.c: 259: RC4 = 0;
  9237  1071  0020               	movlb	0	; select bank0
  9238  1072  120E               	bcf	14,4	;volatile
  9239                           
  9240                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9241  1073  0876               	movf	CC2500_WriteREG@w_addr,w
  9242  1074  00F5               	movwf	??_CC2500_WriteREG
  9243  1075  0875               	movf	??_CC2500_WriteREG,w
  9244  1076  0021               	movlb	1	; select bank1
  9245  1077  00CA               	movwf	_SPI0Buffer^(0+128)
  9246                           
  9247                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9248  1078  287C               	goto	l9192
  9249  1079                     l9190:	
  9250                           
  9251                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9252  1079  319D  25A7  3190   	fcall	_RF_Timeout_Counter
  9253  107C                     l9192:	
  9254  107C  0020               	movlb	0	; select bank0
  9255  107D  1D0E               	btfss	14,2	;volatile
  9256  107E  2882               	goto	l9196
  9257  107F  0021               	movlb	1	; select bank1
  9258  1080  1F21               	btfss	(_RF1^(0+128)+1),6
  9259  1081  2879               	goto	l9190
  9260  1082                     l9196:	
  9261                           
  9262                           ;CC2500_B1.c: 263: };
  9263                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9264  1082  319A  22C8  3190   	fcall	_setRF_TimeoutCleared
  9265                           
  9266                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9267  1085  319E  2613  3190   	fcall	_CC2500_WriteByte
  9268                           
  9269                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9270  1088  0874               	movf	CC2500_WriteREG@value,w
  9271  1089  00F5               	movwf	??_CC2500_WriteREG
  9272  108A  0875               	movf	??_CC2500_WriteREG,w
  9273  108B  0021               	movlb	1	; select bank1
  9274  108C  00CA               	movwf	_SPI0Buffer^(0+128)
  9275                           
  9276                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9277  108D  319E  2613         	fcall	_CC2500_WriteByte
  9278                           
  9279                           ;CC2500_B1.c: 269: RC4 = 1;
  9280  108F  0020               	movlb	0	; select bank0
  9281  1090  160E               	bsf	14,4	;volatile
  9282  1091  0008               	return
  9283  1092                     __end_of_CC2500_WriteREG:	
  9284                           
  9285                           	psect	text46
  9286  1B52                     __ptext46:	
  9287 ;; *************** function _CC2500_FrequencyCabr *****************
  9288 ;; Defined at:
  9289 ;;		line 208 in file "../src/CC2500_B1.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;		None               void
  9296 ;; Registers used:
  9297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;Total ram usage:        0 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    5
  9310 ;; This function calls:
  9311 ;;		_CC2500_WriteCommand
  9312 ;;		_DelayTime_1us
  9313 ;; This function is called by:
  9314 ;;		_CC2500_PowerOnInitial
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _CC2500_FrequencyCabr
  9320  1B52                     _CC2500_FrequencyCabr:	
  9321                           
  9322                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9326  1B52  3033               	movlw	51
  9327  1B53  319E  265D  319B   	fcall	_CC2500_WriteCommand
  9328                           
  9329                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9330  1B56  30E8               	movlw	232
  9331  1B57  00F2               	movwf	DelayTime_1us@count
  9332  1B58  3003               	movlw	3
  9333  1B59  00F3               	movwf	DelayTime_1us@count+1
  9334  1B5A  3190  20DA         	fcall	_DelayTime_1us
  9335  1B5C  0008               	return
  9336  1B5D                     __end_of_CC2500_FrequencyCabr:	
  9337                           
  9338                           	psect	text47
  9339  10DA                     __ptext47:	
  9340 ;; *************** function _DelayTime_1us *****************
  9341 ;; Defined at:
  9342 ;;		line 327 in file "../src/CC2500_B1.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  count           2    2[COMMON] int 
  9345 ;; Auto vars:     Size  Location     Type
  9346 ;;  j               2    6[COMMON] unsigned int 
  9347 ;;  i               2    4[COMMON] unsigned int 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;		None               void
  9350 ;; Registers used:
  9351 ;;		wreg, status,2
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:        6 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    3
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_CC2500_PowerRST
  9368 ;;		_CC2500_FrequencyCabr
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           
  9373                           ;psect for function _DelayTime_1us
  9374  10DA                     _DelayTime_1us:	
  9375                           
  9376                           ;CC2500_B1.c: 328: unsigned int i, j;
  9377                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9378                           
  9379                           ;incstack = 0
  9380                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9381  10DA  3001               	movlw	1
  9382  10DB  00F4               	movwf	DelayTime_1us@i
  9383  10DC  3000               	movlw	0
  9384  10DD  00F5               	movwf	DelayTime_1us@i+1
  9385  10DE                     l367:	
  9386  10DE  0873               	movf	DelayTime_1us@count+1,w
  9387  10DF  0275               	subwf	DelayTime_1us@i+1,w
  9388  10E0  1D03               	skipz
  9389  10E1  28E4               	goto	u6235
  9390  10E2  0872               	movf	DelayTime_1us@count,w
  9391  10E3  0274               	subwf	DelayTime_1us@i,w
  9392  10E4                     u6235:	
  9393  10E4  1803               	btfsc	3,0
  9394  10E5  0008               	return
  9395                           
  9396                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9397  10E6  01F6               	clrf	DelayTime_1us@j
  9398  10E7  01F7               	clrf	DelayTime_1us@j+1
  9399  10E8  3000               	movlw	0
  9400  10E9  0277               	subwf	DelayTime_1us@j+1,w
  9401  10EA  3002               	movlw	2
  9402  10EB  1903               	skipnz
  9403  10EC  0276               	subwf	DelayTime_1us@j,w
  9404  10ED  1803               	btfsc	3,0
  9405  10EE  28FA               	goto	l6814
  9406  10EF                     l6812:	
  9407  10EF  3001               	movlw	1
  9408  10F0  07F6               	addwf	DelayTime_1us@j,f
  9409  10F1  3000               	movlw	0
  9410  10F2  3DF7               	addwfc	DelayTime_1us@j+1,f
  9411  10F3  3000               	movlw	0
  9412  10F4  0277               	subwf	DelayTime_1us@j+1,w
  9413  10F5  3002               	movlw	2
  9414  10F6  1903               	skipnz
  9415  10F7  0276               	subwf	DelayTime_1us@j,w
  9416  10F8  1C03               	skipc
  9417  10F9  28EF               	goto	l6812
  9418  10FA                     l6814:	
  9419  10FA  3001               	movlw	1
  9420  10FB  07F4               	addwf	DelayTime_1us@i,f
  9421  10FC  3000               	movlw	0
  9422  10FD  3DF5               	addwfc	DelayTime_1us@i+1,f
  9423  10FE  28DE               	goto	l367
  9424  10FF                     __end_of_DelayTime_1us:	
  9425                           
  9426                           	psect	text48
  9427  1AD0                     __ptext48:	
  9428 ;; *************** function _CC2500_ClearTXFIFO *****************
  9429 ;; Defined at:
  9430 ;;		line 194 in file "../src/CC2500_B1.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;		None
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;		None
  9435 ;; Return value:  Size  Location     Type
  9436 ;;		None               void
  9437 ;; Registers used:
  9438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:        0 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    5
  9451 ;; This function calls:
  9452 ;;		_CC2500_WriteCommand
  9453 ;; This function is called by:
  9454 ;;		_CC2500_PowerOnInitial
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _CC2500_ClearTXFIFO
  9460  1AD0                     _CC2500_ClearTXFIFO:	
  9461                           
  9462                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9463                           
  9464                           ;incstack = 0
  9465                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9466  1AD0  303B               	movlw	59
  9467  1AD1  319E  265D         	fcall	_CC2500_WriteCommand
  9468  1AD3  0008               	return
  9469  1AD4                     __end_of_CC2500_ClearTXFIFO:	
  9470                           
  9471                           	psect	text49
  9472  1ACC                     __ptext49:	
  9473 ;; *************** function _CC2500_ClearRXFIFO *****************
  9474 ;; Defined at:
  9475 ;;		line 201 in file "../src/CC2500_B1.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    5
  9496 ;; This function calls:
  9497 ;;		_CC2500_WriteCommand
  9498 ;; This function is called by:
  9499 ;;		_CC2500_PowerOnInitial
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _CC2500_ClearRXFIFO
  9505  1ACC                     _CC2500_ClearRXFIFO:	
  9506                           
  9507                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9511  1ACC  303A               	movlw	58
  9512  1ACD  319E  265D         	fcall	_CC2500_WriteCommand
  9513  1ACF  0008               	return
  9514  1AD0                     __end_of_CC2500_ClearRXFIFO:	
  9515                           
  9516                           	psect	text50
  9517  1E5D                     __ptext50:	
  9518 ;; *************** function _CC2500_WriteCommand *****************
  9519 ;; Defined at:
  9520 ;;		line 292 in file "../src/CC2500_B1.c"
  9521 ;; Parameters:    Size  Location     Type
  9522 ;;  command         1    wreg     unsigned char 
  9523 ;; Auto vars:     Size  Location     Type
  9524 ;;  command         1    5[COMMON] unsigned char 
  9525 ;; Return value:  Size  Location     Type
  9526 ;;		None               void
  9527 ;; Registers used:
  9528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9529 ;; Tracked objects:
  9530 ;;		On entry : 0/0
  9531 ;;		On exit  : 0/0
  9532 ;;		Unchanged: 0/0
  9533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9537 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;Total ram usage:        2 bytes
  9539 ;; Hardware stack levels used:    1
  9540 ;; Hardware stack levels required when called:    4
  9541 ;; This function calls:
  9542 ;;		_CC2500_WriteByte
  9543 ;;		_RF_Timeout_Counter
  9544 ;;		_setRF_TimeoutCleared
  9545 ;; This function is called by:
  9546 ;;		_CC2500_TxData
  9547 ;;		_CC2500_RxData
  9548 ;;		_CC2500_ClearTXFIFO
  9549 ;;		_CC2500_ClearRXFIFO
  9550 ;;		_CC2500_FrequencyCabr
  9551 ;;		_CC2500_SIDLEMode
  9552 ;;		_setRF_Main
  9553 ;;		_RF_RxDisable
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _CC2500_WriteCommand
  9559  1E5D                     _CC2500_WriteCommand:	
  9560                           
  9561                           ;incstack = 0
  9562                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9563                           ;CC2500_WriteCommand@command stored from wreg
  9564  1E5D  00F5               	movwf	CC2500_WriteCommand@command
  9565                           
  9566                           ;CC2500_B1.c: 293: RC4 = 0;
  9567  1E5E  0020               	movlb	0	; select bank0
  9568  1E5F  120E               	bcf	14,4	;volatile
  9569                           
  9570                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9571  1E60  0875               	movf	CC2500_WriteCommand@command,w
  9572  1E61  00F4               	movwf	??_CC2500_WriteCommand
  9573  1E62  0874               	movf	??_CC2500_WriteCommand,w
  9574  1E63  0021               	movlb	1	; select bank1
  9575  1E64  00CA               	movwf	_SPI0Buffer^(0+128)
  9576                           
  9577                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9578  1E65  2E69               	goto	l9176
  9579  1E66                     l9174:	
  9580                           
  9581                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9582  1E66  319D  25A7  319E   	fcall	_RF_Timeout_Counter
  9583  1E69                     l9176:	
  9584  1E69  0020               	movlb	0	; select bank0
  9585  1E6A  1D0E               	btfss	14,2	;volatile
  9586  1E6B  2E6F               	goto	l9180
  9587  1E6C  0021               	movlb	1	; select bank1
  9588  1E6D  1F21               	btfss	(_RF1^(0+128)+1),6
  9589  1E6E  2E66               	goto	l9174
  9590  1E6F                     l9180:	
  9591                           
  9592                           ;CC2500_B1.c: 298: };
  9593                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9594  1E6F  319A  22C8  319E   	fcall	_setRF_TimeoutCleared
  9595                           
  9596                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9597  1E72  319E  2613         	fcall	_CC2500_WriteByte
  9598                           
  9599                           ;CC2500_B1.c: 302: RC4 = 1;
  9600  1E74  0020               	movlb	0	; select bank0
  9601  1E75  160E               	bsf	14,4	;volatile
  9602  1E76  0008               	return
  9603  1E77                     __end_of_CC2500_WriteCommand:	
  9604                           
  9605                           	psect	text51
  9606  1AC8                     __ptext51:	
  9607 ;; *************** function _setRF_TimeoutCleared *****************
  9608 ;; Defined at:
  9609 ;;		line 149 in file "../src/RF_Control_B1.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;		None               void
  9616 ;; Registers used:
  9617 ;;		status,2
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    3
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_CC2500_TxData
  9634 ;;		_CC2500_RxData
  9635 ;;		_CC2500_PowerRST
  9636 ;;		_CC2500_WriteREG
  9637 ;;		_CC2500_WriteCommand
  9638 ;;		_CC2500_ReadStatus
  9639 ;;		_CC2500_ReadREG
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function _setRF_TimeoutCleared
  9645  1AC8                     _setRF_TimeoutCleared:	
  9646                           
  9647                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9648                           
  9649                           ;incstack = 0
  9650                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9651  1AC8  0021               	movlb	1	; select bank1
  9652  1AC9  01AC               	clrf	(_RF1^(0+128)+12)
  9653  1ACA  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9654  1ACB  0008               	return
  9655  1ACC                     __end_of_setRF_TimeoutCleared:	
  9656                           
  9657                           	psect	text52
  9658  1DA7                     __ptext52:	
  9659 ;; *************** function _RF_Timeout_Counter *****************
  9660 ;; Defined at:
  9661 ;;		line 141 in file "../src/RF_Control_B1.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;		None
  9664 ;; Auto vars:     Size  Location     Type
  9665 ;;		None
  9666 ;; Return value:  Size  Location     Type
  9667 ;;		None               void
  9668 ;; Registers used:
  9669 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;Total ram usage:        0 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    3
  9682 ;; This function calls:
  9683 ;;		Nothing
  9684 ;; This function is called by:
  9685 ;;		_CC2500_TxData
  9686 ;;		_CC2500_RxData
  9687 ;;		_CC2500_PowerRST
  9688 ;;		_CC2500_WriteREG
  9689 ;;		_CC2500_WriteCommand
  9690 ;;		_CC2500_ReadStatus
  9691 ;;		_CC2500_ReadREG
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           
  9696                           ;psect for function _RF_Timeout_Counter
  9697  1DA7                     _RF_Timeout_Counter:	
  9698                           
  9699                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9703  1DA7  3001               	movlw	1
  9704  1DA8  0021               	movlb	1	; select bank1
  9705  1DA9  07AC               	addwf	(_RF1^(0+128)+12),f
  9706  1DAA  3000               	movlw	0
  9707  1DAB  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9708                           
  9709                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9710  1DAC  300C               	movlw	12
  9711  1DAD  3EA0               	addlw	_RF1& (0+255)
  9712  1DAE  0086               	movwf	6
  9713  1DAF  0187               	clrf	7
  9714  1DB0  3F40               	moviw [0]fsr1
  9715  1DB1  3AA8               	xorlw	168
  9716  1DB2  1D03               	skipz
  9717  1DB3  2DB6               	goto	u10165
  9718  1DB4  3F41               	moviw [1]fsr1
  9719  1DB5  3A61               	xorlw	97
  9720  1DB6                     u10165:	
  9721  1DB6  1D03               	skipz
  9722  1DB7  0008               	return
  9723                           
  9724                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9725  1DB8  01AC               	clrf	(_RF1^(0+128)+12)
  9726  1DB9  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9727                           
  9728                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9729  1DBA  1721               	bsf	(_RF1^(0+128)+1),6
  9730  1DBB  0008               	return
  9731  1DBC                     __end_of_RF_Timeout_Counter:	
  9732                           
  9733                           	psect	text53
  9734  1E13                     __ptext53:	
  9735 ;; *************** function _CC2500_WriteByte *****************
  9736 ;; Defined at:
  9737 ;;		line 226 in file "../src/CC2500_B1.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;  loop_a          1    3[COMMON] unsigned char 
  9742 ;; Return value:  Size  Location     Type
  9743 ;;		None               void
  9744 ;; Registers used:
  9745 ;;		wreg, status,2, status,0
  9746 ;; Tracked objects:
  9747 ;;		On entry : 0/0
  9748 ;;		On exit  : 0/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;Total ram usage:        2 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    3
  9758 ;; This function calls:
  9759 ;;		Nothing
  9760 ;; This function is called by:
  9761 ;;		_CC2500_TxData
  9762 ;;		_CC2500_RxData
  9763 ;;		_CC2500_PowerRST
  9764 ;;		_CC2500_WriteREG
  9765 ;;		_CC2500_WriteCommand
  9766 ;;		_CC2500_ReadStatus
  9767 ;;		_CC2500_ReadREG
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function _CC2500_WriteByte
  9773  1E13                     _CC2500_WriteByte:	
  9774                           
  9775                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9776                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9780  1E13  01F3               	clrf	CC2500_WriteByte@loop_a
  9781  1E14                     L6:	
  9782  1E14  3008               	movlw	8
  9783  1E15  0273               	subwf	CC2500_WriteByte@loop_a,w
  9784  1E16  1803               	btfsc	3,0
  9785  1E17  0008               	return
  9786                           
  9787                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9788  1E18  0021               	movlb	1	; select bank1
  9789  1E19  1FCA               	btfss	_SPI0Buffer^(0+128),7
  9790  1E1A  2E1E               	goto	l323
  9791                           
  9792                           ;CC2500_B1.c: 230: RC0 = 1;
  9793  1E1B  0020               	movlb	0	; select bank0
  9794  1E1C  140E               	bsf	14,0	;volatile
  9795  1E1D  2E20               	goto	l324
  9796  1E1E                     l323:	
  9797                           
  9798                           ;CC2500_B1.c: 231: else
  9799                           ;CC2500_B1.c: 232: RC0 = 0;
  9800  1E1E  0020               	movlb	0	; select bank0
  9801  1E1F  100E               	bcf	14,0	;volatile
  9802  1E20                     l324:	
  9803                           
  9804                           ;CC2500_B1.c: 233: RC1 = 1;
  9805  1E20  148E               	bsf	14,1	;volatile
  9806                           
  9807                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9808  1E21  1003               	clrc
  9809  1E22  0021               	movlb	1	; select bank1
  9810  1E23  0DCA               	rlf	_SPI0Buffer^(0+128),f
  9811                           
  9812                           ;CC2500_B1.c: 235: RC1 = 0;
  9813  1E24  0020               	movlb	0	; select bank0
  9814  1E25  108E               	bcf	14,1	;volatile
  9815  1E26  3001               	movlw	1
  9816  1E27  00F2               	movwf	??_CC2500_WriteByte
  9817  1E28  0872               	movf	??_CC2500_WriteByte,w
  9818  1E29  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9819  1E2A  2E14               	goto	L6
  9820  1E2B                     __end_of_CC2500_WriteByte:	
  9821                           
  9822                           	psect	text54
  9823  1AB8                     __ptext54:	
  9824 ;; *************** function _RF_Initialization *****************
  9825 ;; Defined at:
  9826 ;;		line 9 in file "../src/RF_Control_B1.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;		None
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;		None
  9831 ;; Return value:  Size  Location     Type
  9832 ;;		None               void
  9833 ;; Registers used:
  9834 ;;		wreg, status,2, status,0, pclath, cstack
  9835 ;; Tracked objects:
  9836 ;;		On entry : 0/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;Total ram usage:        0 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    4
  9847 ;; This function calls:
  9848 ;;		_setRF_Initialization
  9849 ;; This function is called by:
  9850 ;;		_main
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           
  9855                           ;psect for function _RF_Initialization
  9856  1AB8                     _RF_Initialization:	
  9857                           
  9858                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9859                           
  9860                           ;incstack = 0
  9861                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9862  1AB8  3190  2066         	fcall	_setRF_Initialization
  9863  1ABA  0008               	return
  9864  1ABB                     __end_of_RF_Initialization:	
  9865                           
  9866                           	psect	text55
  9867  1066                     __ptext55:	
  9868 ;; *************** function _setRF_Initialization *****************
  9869 ;; Defined at:
  9870 ;;		line 17 in file "../src/RF_Control_B1.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;		None               void
  9877 ;; Registers used:
  9878 ;;		wreg
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        1 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    3
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_RF_Initialization
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           
  9899                           ;psect for function _setRF_Initialization
  9900  1066                     _setRF_Initialization:	
  9901                           
  9902                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _setRF_Initialization: [wreg]
  9906  1066  3015               	movlw	21
  9907  1067  00F2               	movwf	??_setRF_Initialization
  9908  1068  0872               	movf	??_setRF_Initialization,w
  9909  1069  0021               	movlb	1	; select bank1
  9910  106A  00CC               	movwf	_Tx_Length^(0+128)
  9911                           
  9912                           ;RF_Control_B1.c: 20: RF1.RunTime = 40;
  9913  106B  3028               	movlw	40
  9914  106C  00A7               	movwf	(_RF1^(0+128)+7)
  9915  106D  3000               	movlw	0
  9916  106E  00A8               	movwf	(_RF1^(0+128)+8)
  9917  106F  0008               	return
  9918  1070                     __end_of_setRF_Initialization:	
  9919                           
  9920                           	psect	text56
  9921  1D06                     __ptext56:	
  9922 ;; *************** function _Mcu_Initialization *****************
  9923 ;; Defined at:
  9924 ;;		line 30 in file "../src/MCU_B1.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;		None
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;		None
  9929 ;; Return value:  Size  Location     Type
  9930 ;;		None               void
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0, pclath, cstack
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;Total ram usage:        0 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:    4
  9945 ;; This function calls:
  9946 ;;		_ADC_Set
  9947 ;;		_Fosc_Set
  9948 ;;		_IOC_Set
  9949 ;;		_IO_Set
  9950 ;;		_TMR1_Set
  9951 ;;		_WDT_Set
  9952 ;; This function is called by:
  9953 ;;		_main
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           
  9958                           ;psect for function _Mcu_Initialization
  9959  1D06                     _Mcu_Initialization:	
  9960                           
  9961                           ;MCU_B1.c: 32: Fosc_Set();
  9962                           
  9963                           ;incstack = 0
  9964                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9965  1D06  319A  22C4  319D   	fcall	_Fosc_Set
  9966                           
  9967                           ;MCU_B1.c: 34: IO_Set();
  9968  1D09  319E  2643  319D   	fcall	_IO_Set
  9969                           
  9970                           ;MCU_B1.c: 36: ;;
  9971                           ;MCU_B1.c: 38: TMR1_Set();
  9972  1D0C  319B  23A4  319D   	fcall	_TMR1_Set
  9973                           
  9974                           ;MCU_B1.c: 40: ADC_Set();
  9975  1D0F  319B  2303  319D   	fcall	_ADC_Set
  9976                           
  9977                           ;MCU_B1.c: 42: ;;
  9978                           ;MCU_B1.c: 44: ;;
  9979                           ;MCU_B1.c: 46: IOC_Set();
  9980  1D12  319B  2398  319D   	fcall	_IOC_Set
  9981                           
  9982                           ;MCU_B1.c: 48: ;;
  9983                           ;MCU_B1.c: 50: ;;
  9984                           ;MCU_B1.c: 52: WDT_Set();
  9985  1D15  319B  2333         	fcall	_WDT_Set
  9986  1D17  0008               	return
  9987  1D18                     __end_of_Mcu_Initialization:	
  9988                           
  9989                           	psect	text57
  9990  1B33                     __ptext57:	
  9991 ;; *************** function _WDT_Set *****************
  9992 ;; Defined at:
  9993 ;;		line 1092 in file "../src/MCU_B1.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;Total ram usage:        1 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    3
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_Mcu_Initialization
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           
 10022                           ;psect for function _WDT_Set
 10023  1B33                     _WDT_Set:	
 10024                           
 10025                           ;MCU_B1.c: 1099: WDTCON = 0b00010111;;
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _WDT_Set: [wreg]
 10029  1B33  3017               	movlw	23
 10030  1B34  0021               	movlb	1	; select bank1
 10031  1B35  0097               	movwf	23	;volatile
 10032                           
 10033                           ;MCU_B1.c: 1101: WDT.Enable = 1;
 10034  1B36  1440               	bsf	_WDT^(0+128),0
 10035                           
 10036                           ;MCU_B1.c: 1102: WDT.Timer = 10;
 10037  1B37  300A               	movlw	10
 10038  1B38  00F2               	movwf	??_WDT_Set
 10039  1B39  0872               	movf	??_WDT_Set,w
 10040  1B3A  00C1               	movwf	(_WDT^(0+128)+1)
 10041  1B3B  0008               	return
 10042  1B3C                     __end_of_WDT_Set:	
 10043                           
 10044                           	psect	text58
 10045  1BA4                     __ptext58:	
 10046 ;; *************** function _TMR1_Set *****************
 10047 ;; Defined at:
 10048 ;;		line 221 in file "../src/MCU_B1.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;		None               void
 10055 ;; Registers used:
 10056 ;;		wreg
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10066 ;;Total ram usage:        0 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    3
 10069 ;; This function calls:
 10070 ;;		Nothing
 10071 ;; This function is called by:
 10072 ;;		_Mcu_Initialization
 10073 ;; This function uses a non-reentrant model
 10074 ;;
 10075                           
 10076                           
 10077                           ;psect for function _TMR1_Set
 10078  1BA4                     _TMR1_Set:	
 10079                           
 10080                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _TMR1_Set: [wreg]
 10084  1BA4  3041               	movlw	65
 10085  1BA5  0020               	movlb	0	; select bank0
 10086  1BA6  0098               	movwf	24	;volatile
 10087                           
 10088                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10089  1BA7  30FA               	movlw	250
 10090  1BA8  0097               	movwf	23	;volatile
 10091                           
 10092                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10093  1BA9  3038               	movlw	56
 10094  1BAA  0096               	movwf	22	;volatile
 10095                           
 10096                           ;MCU_B1.c: 225: TMR1IE = 1;
 10097  1BAB  0021               	movlb	1	; select bank1
 10098  1BAC  1411               	bsf	17,0	;volatile
 10099                           
 10100                           ;MCU_B1.c: 226: PEIE = 1;
 10101  1BAD  170B               	bsf	11,6	;volatile
 10102                           
 10103                           ;MCU_B1.c: 227: GIE = 1;
 10104  1BAE  178B               	bsf	11,7	;volatile
 10105  1BAF  0008               	return
 10106  1BB0                     __end_of_TMR1_Set:	
 10107                           
 10108                           	psect	text59
 10109  1E43                     __ptext59:	
 10110 ;; *************** function _IO_Set *****************
 10111 ;; Defined at:
 10112 ;;		line 60 in file "../src/MCU_B1.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;		None
 10115 ;; Auto vars:     Size  Location     Type
 10116 ;;		None
 10117 ;; Return value:  Size  Location     Type
 10118 ;;		None               void
 10119 ;; Registers used:
 10120 ;;		wreg, status,2
 10121 ;; Tracked objects:
 10122 ;;		On entry : 0/0
 10123 ;;		On exit  : 0/0
 10124 ;;		Unchanged: 0/0
 10125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;Total ram usage:        0 bytes
 10131 ;; Hardware stack levels used:    1
 10132 ;; Hardware stack levels required when called:    3
 10133 ;; This function calls:
 10134 ;;		Nothing
 10135 ;; This function is called by:
 10136 ;;		_Mcu_Initialization
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           
 10141                           ;psect for function _IO_Set
 10142  1E43                     _IO_Set:	
 10143                           
 10144                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10145                           
 10146                           ;incstack = 0
 10147                           ; Regs used in _IO_Set: [wreg+status,2]
 10148  1E43  3077               	movlw	119
 10149  1E44  0021               	movlb	1	; select bank1
 10150  1E45  008C               	movwf	12	;volatile
 10151                           
 10152                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10153  1E46  3007               	movlw	7
 10154  1E47  008D               	movwf	13	;volatile
 10155                           
 10156                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10157  1E48  300C               	movlw	12
 10158  1E49  008E               	movwf	14	;volatile
 10159                           
 10160                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10161  1E4A  0022               	movlb	2	; select bank2
 10162  1E4B  018C               	clrf	12	;volatile
 10163                           
 10164                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10165  1E4C  018D               	clrf	13	;volatile
 10166                           
 10167                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10168  1E4D  018E               	clrf	14	;volatile
 10169                           
 10170                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10171  1E4E  3022               	movlw	34
 10172  1E4F  0023               	movlb	3	; select bank3
 10173  1E50  008C               	movwf	12	;volatile
 10174                           
 10175                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10176  1E51  018D               	clrf	13	;volatile
 10177                           
 10178                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10179  1E52  018E               	clrf	14	;volatile
 10180                           
 10181                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10182  1E53  3077               	movlw	119
 10183  1E54  0020               	movlb	0	; select bank0
 10184  1E55  008C               	movwf	12	;volatile
 10185                           
 10186                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10187  1E56  3007               	movlw	7
 10188  1E57  008D               	movwf	13	;volatile
 10189                           
 10190                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10191  1E58  300C               	movlw	12
 10192  1E59  008E               	movwf	14	;volatile
 10193                           
 10194                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10195  1E5A  0024               	movlb	4	; select bank4
 10196  1E5B  018D               	clrf	13	;volatile
 10197  1E5C  0008               	return
 10198  1E5D                     __end_of_IO_Set:	
 10199                           
 10200                           	psect	text60
 10201  1B98                     __ptext60:	
 10202 ;; *************** function _IOC_Set *****************
 10203 ;; Defined at:
 10204 ;;		line 362 in file "../src/MCU_B1.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;		None
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;		None
 10209 ;; Return value:  Size  Location     Type
 10210 ;;		None               void
 10211 ;; Registers used:
 10212 ;;		wreg, status,2
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        0 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    3
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		_Mcu_Initialization
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           
 10233                           ;psect for function _IOC_Set
 10234  1B98                     _IOC_Set:	
 10235                           
 10236                           ;MCU_B1.c: 363: WPUB2 = 0;
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _IOC_Set: [wreg+status,2]
 10240  1B98  0024               	movlb	4	; select bank4
 10241  1B99  110D               	bcf	13,2	;volatile
 10242                           
 10243                           ;MCU_B1.c: 383: IOCBP = 0b00000100;
 10244  1B9A  3004               	movlw	4
 10245  1B9B  0027               	movlb	7	; select bank7
 10246  1B9C  0094               	movwf	20	;volatile
 10247                           
 10248                           ;MCU_B1.c: 384: IOCBN = 0b00000000;
 10249  1B9D  0195               	clrf	21	;volatile
 10250                           
 10251                           ;MCU_B1.c: 388: IOCBF = 0b00000000;
 10252  1B9E  0196               	clrf	22	;volatile
 10253                           
 10254                           ;MCU_B1.c: 390: IOCIE = 1;
 10255  1B9F  158B               	bsf	11,3	;volatile
 10256                           
 10257                           ;MCU_B1.c: 391: IOCIF = 0;
 10258  1BA0  100B               	bcf	11,0	;volatile
 10259                           
 10260                           ;MCU_B1.c: 392: PEIE = 1;
 10261  1BA1  170B               	bsf	11,6	;volatile
 10262                           
 10263                           ;MCU_B1.c: 393: GIE = 1;
 10264  1BA2  178B               	bsf	11,7	;volatile
 10265  1BA3  0008               	return
 10266  1BA4                     __end_of_IOC_Set:	
 10267                           
 10268                           	psect	text61
 10269  1AC4                     __ptext61:	
 10270 ;; *************** function _Fosc_Set *****************
 10271 ;; Defined at:
 10272 ;;		line 56 in file "../src/MCU_B1.c"
 10273 ;; Parameters:    Size  Location     Type
 10274 ;;		None
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;		None
 10277 ;; Return value:  Size  Location     Type
 10278 ;;		None               void
 10279 ;; Registers used:
 10280 ;;		wreg
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;Total ram usage:        0 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    3
 10293 ;; This function calls:
 10294 ;;		Nothing
 10295 ;; This function is called by:
 10296 ;;		_Mcu_Initialization
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           
 10301                           ;psect for function _Fosc_Set
 10302  1AC4                     _Fosc_Set:	
 10303                           
 10304                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10305                           
 10306                           ;incstack = 0
 10307                           ; Regs used in _Fosc_Set: [wreg]
 10308  1AC4  3078               	movlw	120
 10309  1AC5  0021               	movlb	1	; select bank1
 10310  1AC6  0099               	movwf	25	;volatile
 10311  1AC7  0008               	return
 10312  1AC8                     __end_of_Fosc_Set:	
 10313                           
 10314                           	psect	text62
 10315  1B03                     __ptext62:	
 10316 ;; *************** function _ADC_Set *****************
 10317 ;; Defined at:
 10318 ;;		line 428 in file "../src/MCU_B1.c"
 10319 ;; Parameters:    Size  Location     Type
 10320 ;;		None
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;		None
 10323 ;; Return value:  Size  Location     Type
 10324 ;;		None               void
 10325 ;; Registers used:
 10326 ;;		wreg
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;Total ram usage:        0 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; Hardware stack levels required when called:    3
 10339 ;; This function calls:
 10340 ;;		Nothing
 10341 ;; This function is called by:
 10342 ;;		_Mcu_Initialization
 10343 ;; This function uses a non-reentrant model
 10344 ;;
 10345                           
 10346                           
 10347                           ;psect for function _ADC_Set
 10348  1B03                     _ADC_Set:	
 10349                           
 10350                           ;MCU_B1.c: 429: ADCON1 = 0xf3;
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in _ADC_Set: [wreg]
 10354  1B03  30F3               	movlw	243
 10355  1B04  0021               	movlb	1	; select bank1
 10356  1B05  009E               	movwf	30	;volatile
 10357                           
 10358                           ;MCU_B1.c: 430: FVRCON = 0xc1;
 10359  1B06  30C1               	movlw	193
 10360  1B07  0022               	movlb	2	; select bank2
 10361  1B08  0097               	movwf	23	;volatile
 10362  1B09  0008               	return
 10363  1B0A                     __end_of_ADC_Set:	
 10364                           
 10365                           	psect	text63
 10366  0053                     __ptext63:	
 10367 ;; *************** function _Load_Main *****************
 10368 ;; Defined at:
 10369 ;;		line 39 in file "../src/OverLoad_B1.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;		None
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  i               2    4[BANK0 ] int 
 10374 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10375 ;;  error           1    2[BANK0 ] unsigned char 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;		None               void
 10378 ;; Registers used:
 10379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;Total ram usage:        6 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    4
 10392 ;; This function calls:
 10393 ;;		___lwdiv
 10394 ;;		___wmul
 10395 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10396 ;;		_getDimmer_LoadGO
 10397 ;;		_getDimmer_Load_Status
 10398 ;;		_getMain_All_Error_Status
 10399 ;;		_getMain_All_LightsStatus
 10400 ;;		_getMain_Lights_Count
 10401 ;;		_setLoad_AH_AL_Restore
 10402 ;; This function is called by:
 10403 ;;		_main
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function _Load_Main
 10409  0053                     _Load_Main:	
 10410                           
 10411                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10412                           
 10413                           ;incstack = 0
 10414                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10415  0053  3000               	movlw	0
 10416  0054  3191  21CC  3180   	fcall	_getMain_All_Error_Status
 10417  0057  0020               	movlb	0	; select bank0
 10418  0058  00A0               	movwf	??_Load_Main
 10419  0059  0820               	movf	??_Load_Main,w
 10420  005A  00A2               	movwf	Load_Main@error
 10421                           
 10422                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10423  005B  01A3               	clrf	Load_Main@Load_Status
 10424                           
 10425                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10426  005C  0022               	movlb	2	; select bank2
 10427  005D  1C30               	btfss	_Load^(0+256),0
 10428  005E  29E7               	goto	l1842
 10429                           
 10430                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10431  005F  319C  2405  3180   	fcall	_getMain_All_LightsStatus
 10432  0062  3800               	iorlw	0
 10433  0063  1D03               	skipz
 10434  0064  2867               	goto	l10108
 10435                           
 10436                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10437  0065  0022               	movlb	2	; select bank2
 10438  0066  2888               	goto	l10126
 10439  0067                     l10108:	
 10440                           ;OverLoad_B1.c: 47: } else {
 10441                           
 10442                           
 10443                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10444  0067  0020               	movlb	0	; select bank0
 10445  0068  08A2               	movf	Load_Main@error,f
 10446  0069  1D03               	skipz
 10447  006A  2885               	goto	l1845
 10448  006B  319E  2692  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10449  006E  3800               	iorlw	0
 10450  006F  1D03               	skipz
 10451  0070  2885               	goto	l1845
 10452                           
 10453                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10454  0071  0022               	movlb	2	; select bank2
 10455  0072  14B0               	bsf	_Load^(0+256),1
 10456                           
 10457                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10458  0073  319A  22F5  3180   	fcall	_getDimmer_LoadGO
 10459  0076  3A01               	xorlw	1
 10460  0077  1D03               	skipz
 10461  0078  2880               	goto	l1846
 10462                           
 10463                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10464  0079  0022               	movlb	2	; select bank2
 10465  007A  1DB0               	btfss	_Load^(0+256),3
 10466  007B  1BB0               	btfsc	_Load^(0+256),7
 10467  007C  2889               	goto	l1844
 10468                           
 10469                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10470  007D  15B0               	bsf	_Load^(0+256),3
 10471                           
 10472                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10473  007E  01D9               	clrf	(_Load^(0+256)+41)
 10474                           
 10475                           ;OverLoad_B1.c: 57: }
 10476                           ;OverLoad_B1.c: 58: } else {
 10477  007F  2889               	goto	l1844
 10478  0080                     l1846:	
 10479                           
 10480                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10481  0080  0022               	movlb	2	; select bank2
 10482  0081  1FB0               	btfss	_Load^(0+256),7
 10483  0082  2889               	goto	l1844
 10484                           
 10485                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10486  0083  13B0               	bcf	_Load^(0+256),7
 10487                           
 10488                           ;OverLoad_B1.c: 61: }
 10489                           ;OverLoad_B1.c: 62: }
 10490                           ;OverLoad_B1.c: 63: } else {
 10491  0084  2889               	goto	l1844
 10492  0085                     l1845:	
 10493                           
 10494                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10495  0085  0022               	movlb	2	; select bank2
 10496  0086  1CB0               	btfss	_Load^(0+256),1
 10497  0087  2889               	goto	l1844
 10498  0088                     l10126:	
 10499                           
 10500                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10501  0088  10B0               	bcf	_Load^(0+256),1
 10502  0089                     l1844:	
 10503                           
 10504                           ;OverLoad_B1.c: 66: }
 10505                           ;OverLoad_B1.c: 67: }
 10506                           ;OverLoad_B1.c: 69: }
 10507                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10508  0089  1CB0               	btfss	_Load^(0+256),1
 10509  008A  29C3               	goto	l1852
 10510                           
 10511                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10512  008B  1530               	bsf	_Load^(0+256),2
 10513                           
 10514                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10515  008C  1E30               	btfss	_Load^(0+256),4
 10516  008D  29C1               	goto	l1853
 10517                           
 10518                           ;OverLoad_B1.c: 76: Load.Time++;
 10519  008E  3001               	movlw	1
 10520  008F  07B1               	addwf	(_Load^(0+256)+1),f
 10521  0090  3000               	movlw	0
 10522  0091  3DB2               	addwfc	((_Load+1)^(0+256)+1),f
 10523                           
 10524                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10525  0092  3000               	movlw	0
 10526  0093  0232               	subwf	((_Load+1)^(0+256)+1),w
 10527  0094  3002               	movlw	2
 10528  0095  1903               	skipnz
 10529  0096  0231               	subwf	(_Load^(0+256)+1),w
 10530  0097  1C03               	skipc
 10531  0098  0008               	return
 10532                           
 10533                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10534  0099  01B1               	clrf	(_Load^(0+256)+1)
 10535  009A  01B2               	clrf	((_Load+1)^(0+256)+1)
 10536                           
 10537                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10538  009B  1230               	bcf	_Load^(0+256),4
 10539                           
 10540                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10541  009C  3001               	movlw	1
 10542  009D  0020               	movlb	0	; select bank0
 10543  009E  00A4               	movwf	Load_Main@i
 10544  009F  3000               	movlw	0
 10545  00A0  00A5               	movwf	Load_Main@i+1
 10546  00A1  0825               	movf	Load_Main@i+1,w
 10547  00A2  3A80               	xorlw	128
 10548  00A3  00A0               	movwf	??_Load_Main
 10549  00A4  3080               	movlw	128
 10550  00A5  0220               	subwf	??_Load_Main,w
 10551  00A6  1D03               	skipz
 10552  00A7  28AA               	goto	u11945
 10553  00A8  3004               	movlw	4
 10554  00A9  0224               	subwf	Load_Main@i,w
 10555  00AA                     u11945:	
 10556  00AA  1803               	btfsc	3,0
 10557  00AB  28DE               	goto	l10148
 10558  00AC                     l10142:	
 10559                           
 10560                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10561  00AC  0020               	movlb	0	; select bank0
 10562  00AD  3524               	lslf	Load_Main@i,w
 10563  00AE  3E3B               	addlw	(_Load+11)& (0+255)
 10564  00AF  0086               	movwf	6
 10565  00B0  3001               	movlw	1	; select bank2/3
 10566  00B1  0087               	movwf	7
 10567  00B2  3F40               	moviw [0]fsr1
 10568  00B3  00A0               	movwf	??_Load_Main
 10569  00B4  3F41               	moviw [1]fsr1
 10570  00B5  00A1               	movwf	??_Load_Main+1
 10571  00B6  0820               	movf	??_Load_Main,w
 10572  00B7  0022               	movlb	2	; select bank2
 10573  00B8  07B5               	addwf	(_Load^(0+256)+5),f
 10574  00B9  0020               	movlb	0	; select bank0
 10575  00BA  0821               	movf	??_Load_Main+1,w
 10576  00BB  0022               	movlb	2	; select bank2
 10577  00BC  3DB6               	addwfc	((_Load+1)^(0+256)+5),f
 10578                           
 10579                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10580  00BD  0020               	movlb	0	; select bank0
 10581  00BE  3524               	lslf	Load_Main@i,w
 10582  00BF  3E45               	addlw	(_Load+21)& (0+255)
 10583  00C0  0086               	movwf	6
 10584  00C1  3001               	movlw	1	; select bank2/3
 10585  00C2  0087               	movwf	7
 10586  00C3  3F40               	moviw [0]fsr1
 10587  00C4  00A0               	movwf	??_Load_Main
 10588  00C5  3F41               	moviw [1]fsr1
 10589  00C6  00A1               	movwf	??_Load_Main+1
 10590  00C7  0820               	movf	??_Load_Main,w
 10591  00C8  0022               	movlb	2	; select bank2
 10592  00C9  07B7               	addwf	(_Load^(0+256)+7),f
 10593  00CA  0020               	movlb	0	; select bank0
 10594  00CB  0821               	movf	??_Load_Main+1,w
 10595  00CC  0022               	movlb	2	; select bank2
 10596  00CD  3DB8               	addwfc	((_Load+1)^(0+256)+7),f
 10597  00CE  3001               	movlw	1
 10598  00CF  0020               	movlb	0	; select bank0
 10599  00D0  07A4               	addwf	Load_Main@i,f
 10600  00D1  3000               	movlw	0
 10601  00D2  3DA5               	addwfc	Load_Main@i+1,f
 10602  00D3  0825               	movf	Load_Main@i+1,w
 10603  00D4  3A80               	xorlw	128
 10604  00D5  00A0               	movwf	??_Load_Main
 10605  00D6  3080               	movlw	128
 10606  00D7  0220               	subwf	??_Load_Main,w
 10607  00D8  1D03               	skipz
 10608  00D9  28DC               	goto	u11955
 10609  00DA  3004               	movlw	4
 10610  00DB  0224               	subwf	Load_Main@i,w
 10611  00DC                     u11955:	
 10612  00DC  1C03               	skipc
 10613  00DD  28AC               	goto	l10142
 10614  00DE                     l10148:	
 10615                           
 10616                           ;OverLoad_B1.c: 84: }
 10617                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10618  00DE  3003               	movlw	3
 10619  00DF  00F2               	movwf	___lwdiv@divisor
 10620  00E0  3000               	movlw	0
 10621  00E1  00F3               	movwf	___lwdiv@divisor+1
 10622  00E2  0022               	movlb	2	; select bank2
 10623  00E3  0836               	movf	((_Load+1)^(0+256)+5),w
 10624  00E4  01F5               	clrf	___lwdiv@dividend+1
 10625  00E5  07F5               	addwf	___lwdiv@dividend+1,f
 10626  00E6  0835               	movf	(_Load^(0+256)+5),w
 10627  00E7  01F4               	clrf	___lwdiv@dividend
 10628  00E8  07F4               	addwf	___lwdiv@dividend,f
 10629  00E9  3192  2261  3180   	fcall	___lwdiv
 10630  00EC  0873               	movf	?___lwdiv+1,w
 10631  00ED  0022               	movlb	2	; select bank2
 10632  00EE  01B6               	clrf	((_Load+1)^(0+256)+5)
 10633  00EF  07B6               	addwf	((_Load+1)^(0+256)+5),f
 10634  00F0  0872               	movf	?___lwdiv,w
 10635  00F1  01B5               	clrf	(_Load^(0+256)+5)
 10636  00F2  07B5               	addwf	(_Load^(0+256)+5),f
 10637                           
 10638                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10639  00F3  3003               	movlw	3
 10640  00F4  00F2               	movwf	___lwdiv@divisor
 10641  00F5  3000               	movlw	0
 10642  00F6  00F3               	movwf	___lwdiv@divisor+1
 10643  00F7  0838               	movf	((_Load+1)^(0+256)+7),w
 10644  00F8  01F5               	clrf	___lwdiv@dividend+1
 10645  00F9  07F5               	addwf	___lwdiv@dividend+1,f
 10646  00FA  0837               	movf	(_Load^(0+256)+7),w
 10647  00FB  01F4               	clrf	___lwdiv@dividend
 10648  00FC  07F4               	addwf	___lwdiv@dividend,f
 10649  00FD  3192  2261  3180   	fcall	___lwdiv
 10650  0100  0873               	movf	?___lwdiv+1,w
 10651  0101  0022               	movlb	2	; select bank2
 10652  0102  01B8               	clrf	((_Load+1)^(0+256)+7)
 10653  0103  07B8               	addwf	((_Load+1)^(0+256)+7),f
 10654  0104  0872               	movf	?___lwdiv,w
 10655  0105  01B7               	clrf	(_Load^(0+256)+7)
 10656  0106  07B7               	addwf	(_Load^(0+256)+7),f
 10657                           
 10658                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10659  0107  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10660                           
 10661                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10662  010A  0022               	movlb	2	; select bank2
 10663  010B  0838               	movf	((_Load+1)^(0+256)+7),w
 10664  010C  0236               	subwf	((_Load+1)^(0+256)+5),w
 10665  010D  1D03               	skipz
 10666  010E  2911               	goto	u11965
 10667  010F  0837               	movf	(_Load^(0+256)+7),w
 10668  0110  0235               	subwf	(_Load^(0+256)+5),w
 10669  0111                     u11965:	
 10670  0111  1C03               	skipc
 10671  0112  0008               	return
 10672                           
 10673                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10674  0113  3005               	movlw	5
 10675  0114  3E30               	addlw	_Load& (0+255)
 10676  0115  0086               	movwf	6
 10677  0116  3001               	movlw	1	; select bank2/3
 10678  0117  0087               	movwf	7
 10679  0118  0937               	comf	(_Load^(0+256)+7),w
 10680  0119  0020               	movlb	0	; select bank0
 10681  011A  00A0               	movwf	??_Load_Main
 10682  011B  0022               	movlb	2	; select bank2
 10683  011C  0938               	comf	((_Load+1)^(0+256)+7),w
 10684  011D  0020               	movlb	0	; select bank0
 10685  011E  00A1               	movwf	??_Load_Main+1
 10686  011F  0AA0               	incf	??_Load_Main,f
 10687  0120  1903               	skipnz
 10688  0121  0AA1               	incf	??_Load_Main+1,f
 10689  0122  3F40               	moviw [0]fsr1
 10690  0123  0720               	addwf	??_Load_Main,w
 10691  0124  0022               	movlb	2	; select bank2
 10692  0125  00CF               	movwf	(_Load^(0+256)+31)
 10693  0126  3F41               	moviw [1]fsr1
 10694  0127  0020               	movlb	0	; select bank0
 10695  0128  3D21               	addwfc	??_Load_Main+1,w
 10696  0129  0022               	movlb	2	; select bank2
 10697  012A  00D0               	movwf	(_Load^(0+256)+32)
 10698                           
 10699                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10700  012B  01B5               	clrf	(_Load^(0+256)+5)
 10701  012C  01B6               	clrf	((_Load+1)^(0+256)+5)
 10702                           
 10703                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10704  012D  01B7               	clrf	(_Load^(0+256)+7)
 10705  012E  01B8               	clrf	((_Load+1)^(0+256)+7)
 10706                           
 10707                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10708  012F  1DB0               	btfss	_Load^(0+256),3
 10709  0130  298D               	goto	l10188
 10710                           
 10711                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10712  0131  3002               	movlw	2
 10713  0132  0259               	subwf	(_Load^(0+256)+41),w
 10714  0133  1803               	skipnc
 10715  0134  298D               	goto	l10188
 10716                           
 10717                           ;OverLoad_B1.c: 96: Load.Count++;
 10718  0135  3001               	movlw	1
 10719  0136  0020               	movlb	0	; select bank0
 10720  0137  00A0               	movwf	??_Load_Main
 10721  0138  0820               	movf	??_Load_Main,w
 10722  0139  0022               	movlb	2	; select bank2
 10723  013A  07D9               	addwf	(_Load^(0+256)+41),f
 10724                           
 10725                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10726  013B  319A  22FC  3180   	fcall	_getDimmer_Load_Status
 10727  013E  0020               	movlb	0	; select bank0
 10728  013F  00A0               	movwf	??_Load_Main
 10729  0140  0820               	movf	??_Load_Main,w
 10730  0141  00A3               	movwf	Load_Main@Load_Status
 10731                           
 10732                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10733  0142  319C  2471  3180   	fcall	_getMain_Lights_Count
 10734  0145  0020               	movlb	0	; select bank0
 10735  0146  00A0               	movwf	??_Load_Main
 10736  0147  0820               	movf	??_Load_Main,w
 10737  0148  0022               	movlb	2	; select bank2
 10738  0149  00DC               	movwf	(_Load^(0+256)+44)
 10739                           
 10740                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10741  014A  0859               	movf	(_Load^(0+256)+41),w
 10742  014B  3A01               	xorlw	1
 10743  014C  1D03               	skipz
 10744  014D  2958               	goto	l10174
 10745                           
 10746                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10747  014E  3002               	movlw	2
 10748  014F  0020               	movlb	0	; select bank0
 10749  0150  00A0               	movwf	??_Load_Main
 10750  0151  0820               	movf	??_Load_Main,w
 10751  0152  0022               	movlb	2	; select bank2
 10752  0153  00DB               	movwf	(_Load^(0+256)+43)
 10753                           
 10754                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10755  0154  30E8               	movlw	232
 10756  0155  00D5               	movwf	(_Load^(0+256)+37)
 10757  0156  3003               	movlw	3
 10758  0157  2963               	goto	L7
 10759  0158                     l10174:	
 10760                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10761                           
 10762  0158  0859               	movf	(_Load^(0+256)+41),w
 10763  0159  3A02               	xorlw	2
 10764  015A  1D03               	skipz
 10765  015B  298D               	goto	l10188
 10766                           
 10767                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10768  015C  085C               	movf	(_Load^(0+256)+44),w
 10769  015D  3A01               	xorlw	1
 10770  015E  1D03               	skipz
 10771  015F  2965               	goto	l10180
 10772                           
 10773                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10774  0160  3037               	movlw	55
 10775  0161  00D5               	movwf	(_Load^(0+256)+37)
 10776  0162  3000               	movlw	0
 10777  0163                     L7:	
 10778  0163  00D6               	movwf	(_Load^(0+256)+38)
 10779                           
 10780                           ;OverLoad_B1.c: 105: } else {
 10781  0164  298D               	goto	l10188
 10782  0165                     l10180:	
 10783                           
 10784                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10785  0165  0020               	movlb	0	; select bank0
 10786  0166  08A3               	movf	Load_Main@Load_Status,f
 10787  0167  1D03               	skipz
 10788  0168  2981               	goto	l10184
 10789                           
 10790                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10791  0169  0022               	movlb	2	; select bank2
 10792  016A  085C               	movf	(_Load^(0+256)+44),w
 10793  016B  0020               	movlb	0	; select bank0
 10794  016C  00A0               	movwf	??_Load_Main
 10795  016D  01A1               	clrf	??_Load_Main+1
 10796  016E  0820               	movf	??_Load_Main,w
 10797  016F  00F2               	movwf	___wmul@multiplier
 10798  0170  0821               	movf	??_Load_Main+1,w
 10799  0171  00F3               	movwf	___wmul@multiplier+1
 10800  0172  3037               	movlw	55
 10801  0173  00F4               	movwf	___wmul@multiplicand
 10802  0174  3000               	movlw	0
 10803  0175  00F5               	movwf	___wmul@multiplicand+1
 10804  0176  319F  2701  3180   	fcall	___wmul
 10805  0179  0873               	movf	?___wmul+1,w
 10806  017A  0022               	movlb	2	; select bank2
 10807  017B  01D6               	clrf	((_Load+1)^(0+256)+37)
 10808  017C  07D6               	addwf	((_Load+1)^(0+256)+37),f
 10809  017D  0872               	movf	?___wmul,w
 10810  017E  01D5               	clrf	(_Load^(0+256)+37)
 10811  017F  07D5               	addwf	(_Load^(0+256)+37),f
 10812                           
 10813                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10814  0180  298D               	goto	l10188
 10815  0181                     l10184:	
 10816  0181  0020               	movlb	0	; select bank0
 10817  0182  0823               	movf	Load_Main@Load_Status,w
 10818  0183  3A01               	xorlw	1
 10819  0184  1D03               	skipz
 10820  0185  298D               	goto	l10188
 10821                           
 10822                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10823  0186  0022               	movlb	2	; select bank2
 10824  0187  0839               	movf	(_Load^(0+256)+9),w
 10825  0188  3E37               	addlw	55
 10826  0189  00D5               	movwf	(_Load^(0+256)+37)
 10827  018A  3000               	movlw	0
 10828  018B  3D3A               	addwfc	((_Load+1)^(0+256)+9),w
 10829  018C  00D6               	movwf	((_Load+1)^(0+256)+37)
 10830  018D                     l10188:	
 10831                           
 10832                           ;OverLoad_B1.c: 110: }
 10833                           ;OverLoad_B1.c: 111: }
 10834                           ;OverLoad_B1.c: 112: }
 10835                           ;OverLoad_B1.c: 113: }
 10836                           ;OverLoad_B1.c: 114: }
 10837                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10838  018D  0022               	movlb	2	; select bank2
 10839  018E  0856               	movf	((_Load+1)^(0+256)+37),w
 10840  018F  0250               	subwf	((_Load+1)^(0+256)+31),w
 10841  0190  1D03               	skipz
 10842  0191  2994               	goto	u12045
 10843  0192  0855               	movf	(_Load^(0+256)+37),w
 10844  0193  024F               	subwf	(_Load^(0+256)+31),w
 10845  0194                     u12045:	
 10846  0194  1C03               	skipc
 10847  0195  29A3               	goto	l10198
 10848                           
 10849                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10850  0196  3001               	movlw	1
 10851  0197  0020               	movlb	0	; select bank0
 10852  0198  00A0               	movwf	??_Load_Main
 10853  0199  0820               	movf	??_Load_Main,w
 10854  019A  0022               	movlb	2	; select bank2
 10855  019B  07DA               	addwf	(_Load^(0+256)+42),f
 10856                           
 10857                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10858  019C  085A               	movf	(_Load^(0+256)+42),w
 10859  019D  025B               	subwf	(_Load^(0+256)+43),w
 10860  019E  1803               	skipnc
 10861  019F  0008               	return
 10862                           
 10863                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10864  01A0  01DA               	clrf	(_Load^(0+256)+42)
 10865                           
 10866                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10867  01A1  16B0               	bsf	_Load^(0+256),5
 10868                           
 10869                           ;OverLoad_B1.c: 142: }
 10870                           ;OverLoad_B1.c: 143: } else {
 10871  01A2  0008               	return
 10872  01A3                     l10198:	
 10873                           
 10874                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10875  01A3  01DA               	clrf	(_Load^(0+256)+42)
 10876                           
 10877                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10878  01A4  1DB0               	btfss	_Load^(0+256),3
 10879  01A5  0008               	return
 10880                           
 10881                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10882  01A6  3001               	movlw	1
 10883  01A7  0020               	movlb	0	; select bank0
 10884  01A8  00A0               	movwf	??_Load_Main
 10885  01A9  0820               	movf	??_Load_Main,w
 10886  01AA  0022               	movlb	2	; select bank2
 10887  01AB  07DD               	addwf	(_Load^(0+256)+45),f
 10888                           
 10889                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10890  01AC  3003               	movlw	3
 10891  01AD  025D               	subwf	(_Load^(0+256)+45),w
 10892  01AE  1C03               	skipc
 10893  01AF  0008               	return
 10894                           
 10895                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10896  01B0  01DD               	clrf	(_Load^(0+256)+45)
 10897                           
 10898                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10899  01B1  17B0               	bsf	_Load^(0+256),7
 10900                           
 10901                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10902  01B2  11B0               	bcf	_Load^(0+256),3
 10903                           
 10904                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10905  01B3  01D9               	clrf	(_Load^(0+256)+41)
 10906                           
 10907                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10908  01B4  0850               	movf	((_Load+1)^(0+256)+31),w
 10909  01B5  01BA               	clrf	((_Load+1)^(0+256)+9)
 10910  01B6  07BA               	addwf	((_Load+1)^(0+256)+9),f
 10911  01B7  084F               	movf	(_Load^(0+256)+31),w
 10912  01B8  01B9               	clrf	(_Load^(0+256)+9)
 10913  01B9  07B9               	addwf	(_Load^(0+256)+9),f
 10914                           
 10915                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10916  01BA  3003               	movlw	3
 10917  01BB  0020               	movlb	0	; select bank0
 10918  01BC  00A0               	movwf	??_Load_Main
 10919  01BD  0820               	movf	??_Load_Main,w
 10920  01BE  0022               	movlb	2	; select bank2
 10921  01BF  00DB               	movwf	(_Load^(0+256)+43)
 10922                           
 10923                           ;OverLoad_B1.c: 156: }
 10924                           ;OverLoad_B1.c: 157: }
 10925                           ;OverLoad_B1.c: 180: }
 10926                           ;OverLoad_B1.c: 181: }
 10927                           ;OverLoad_B1.c: 182: }
 10928                           ;OverLoad_B1.c: 183: } else {
 10929  01C0  0008               	return
 10930  01C1                     l1853:	
 10931                           
 10932                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10933  01C1  1630               	bsf	_Load^(0+256),4
 10934                           
 10935                           ;OverLoad_B1.c: 185: }
 10936                           ;OverLoad_B1.c: 186: } else {
 10937  01C2  0008               	return
 10938  01C3                     l1852:	
 10939                           
 10940                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10941  01C3  1D30               	btfss	_Load^(0+256),2
 10942  01C4  29D6               	goto	l10236
 10943                           
 10944                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10945  01C5  1130               	bcf	_Load^(0+256),2
 10946                           
 10947                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10948  01C6  1230               	bcf	_Load^(0+256),4
 10949                           
 10950                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10951  01C7  01B1               	clrf	(_Load^(0+256)+1)
 10952  01C8  01B2               	clrf	((_Load+1)^(0+256)+1)
 10953                           
 10954                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10955  01C9  319E  2677  3180   	fcall	_setLoad_AH_AL_Restore
 10956                           
 10957                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10958  01CC  0022               	movlb	2	; select bank2
 10959  01CD  01DA               	clrf	(_Load^(0+256)+42)
 10960                           
 10961                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10962  01CE  01DD               	clrf	(_Load^(0+256)+45)
 10963                           
 10964                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10965  01CF  01B5               	clrf	(_Load^(0+256)+5)
 10966  01D0  01B6               	clrf	((_Load+1)^(0+256)+5)
 10967                           
 10968                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10969  01D1  01B7               	clrf	(_Load^(0+256)+7)
 10970  01D2  01B8               	clrf	((_Load+1)^(0+256)+7)
 10971                           
 10972                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10973  01D3  11B0               	bcf	_Load^(0+256),3
 10974                           
 10975                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10976  01D4  01D9               	clrf	(_Load^(0+256)+41)
 10977                           
 10978                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10979  01D5  13B0               	bcf	_Load^(0+256),7
 10980  01D6                     l10236:	
 10981                           
 10982                           ;OverLoad_B1.c: 229: }
 10983                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10984  01D6  1EB0               	btfss	_Load^(0+256),5
 10985  01D7  0008               	return
 10986                           
 10987                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10988  01D8  3001               	movlw	1
 10989  01D9  07B3               	addwf	(_Load^(0+256)+3),f
 10990  01DA  3000               	movlw	0
 10991  01DB  3DB4               	addwfc	((_Load+1)^(0+256)+3),f
 10992                           
 10993                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10994  01DC  3001               	movlw	1
 10995  01DD  0234               	subwf	((_Load+1)^(0+256)+3),w
 10996  01DE  30F4               	movlw	244
 10997  01DF  1903               	skipnz
 10998  01E0  0233               	subwf	(_Load^(0+256)+3),w
 10999  01E1  1C03               	skipc
 11000  01E2  0008               	return
 11001                           
 11002                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 11003  01E3  01B3               	clrf	(_Load^(0+256)+3)
 11004  01E4  01B4               	clrf	((_Load+1)^(0+256)+3)
 11005                           
 11006                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 11007  01E5  12B0               	bcf	_Load^(0+256),5
 11008                           
 11009                           ;OverLoad_B1.c: 235: }
 11010                           ;OverLoad_B1.c: 236: }
 11011                           ;OverLoad_B1.c: 237: }
 11012                           ;OverLoad_B1.c: 238: } else {
 11013  01E6  0008               	return
 11014  01E7                     l1842:	
 11015                           
 11016                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 11017  01E7  1C20               	btfss	_myMain^(0+256),0
 11018  01E8  0008               	return
 11019                           
 11020                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 11021  01E9  1430               	bsf	_Load^(0+256),0
 11022  01EA  0008               	return
 11023  01EB                     __end_of_Load_Main:	
 11024                           
 11025                           	psect	text64
 11026  1C71                     __ptext64:	
 11027 ;; *************** function _getMain_Lights_Count *****************
 11028 ;; Defined at:
 11029 ;;		line 466 in file "../src/Main_B1.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;  status2         1    4[COMMON] unsigned char 
 11034 ;;  status1         1    3[COMMON] unsigned char 
 11035 ;;  count           1    2[COMMON] unsigned char 
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      unsigned char 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2, status,0
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;Total ram usage:        3 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    3
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_Load_Main
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           
 11060                           ;psect for function _getMain_Lights_Count
 11061  1C71                     _getMain_Lights_Count:	
 11062                           
 11063                           ;Main_B1.c: 467: char count = 0;
 11064                           
 11065                           ;incstack = 0
 11066                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11067  1C71  01F2               	clrf	getMain_Lights_Count@count
 11068                           
 11069                           ;Main_B1.c: 471: char status1 = 0;
 11070  1C72  01F3               	clrf	getMain_Lights_Count@status1
 11071                           
 11072                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11073  1C73  3000               	movlw	0
 11074  1C74  0021               	movlb	1	; select bank1
 11075  1C75  19E2               	btfsc	_DimmerIntr1^(0+128),3
 11076  1C76  3001               	movlw	1
 11077  1C77  00F3               	movwf	getMain_Lights_Count@status1
 11078                           
 11079                           ;Main_B1.c: 475: char status2 = 0;
 11080  1C78  01F4               	clrf	getMain_Lights_Count@status2
 11081                           
 11082                           ;Main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11083  1C79  3000               	movlw	0
 11084  1C7A  19E9               	btfsc	_DimmerIntr2^(0+128),3
 11085  1C7B  3001               	movlw	1
 11086  1C7C  00F4               	movwf	getMain_Lights_Count@status2
 11087                           
 11088                           ;Main_B1.c: 500: return count = (status1 + status2);
 11089  1C7D  0873               	movf	getMain_Lights_Count@status1,w
 11090  1C7E  0774               	addwf	getMain_Lights_Count@status2,w
 11091  1C7F  00F2               	movwf	getMain_Lights_Count@count
 11092  1C80  0008               	return
 11093  1C81                     __end_of_getMain_Lights_Count:	
 11094                           
 11095                           	psect	text65
 11096  1AFC                     __ptext65:	
 11097 ;; *************** function _getDimmer_Load_Status *****************
 11098 ;; Defined at:
 11099 ;;		line 1069 in file "../src/Dimmer_B1.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  status          1    2[COMMON] unsigned char 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  1    wreg      unsigned char 
 11106 ;; Registers used:
 11107 ;;		wreg, status,2
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;Total ram usage:        1 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    3
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_Load_Main
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           
 11128                           ;psect for function _getDimmer_Load_Status
 11129  1AFC                     _getDimmer_Load_Status:	
 11130                           
 11131                           ;Dimmer_B1.c: 1070: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11132                           
 11133                           ;incstack = 0
 11134                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11135  1AFC  3000               	movlw	0
 11136  1AFD  0021               	movlb	1	; select bank1
 11137  1AFE  193A               	btfsc	_Dimmer^(0+128),2	;volatile
 11138  1AFF  3001               	movlw	1
 11139  1B00  00F2               	movwf	getDimmer_Load_Status@status
 11140                           
 11141                           ;Dimmer_B1.c: 1071: return status;
 11142  1B01  0872               	movf	getDimmer_Load_Status@status,w
 11143  1B02  0008               	return
 11144  1B03                     __end_of_getDimmer_Load_Status:	
 11145                           
 11146                           	psect	text66
 11147  1AF5                     __ptext66:	
 11148 ;; *************** function _getDimmer_LoadGO *****************
 11149 ;; Defined at:
 11150 ;;		line 1063 in file "../src/Dimmer_B1.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;		None
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  loadgo          1    2[COMMON] unsigned char 
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      unsigned char 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;Total ram usage:        1 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    3
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_Load_Main
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _getDimmer_LoadGO
 11180  1AF5                     _getDimmer_LoadGO:	
 11181                           
 11182                           ;Dimmer_B1.c: 1064: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11186  1AF5  3000               	movlw	0
 11187  1AF6  0021               	movlb	1	; select bank1
 11188  1AF7  18BA               	btfsc	_Dimmer^(0+128),1	;volatile
 11189  1AF8  3001               	movlw	1
 11190  1AF9  00F2               	movwf	getDimmer_LoadGO@loadgo
 11191                           
 11192                           ;Dimmer_B1.c: 1065: return loadgo;
 11193  1AFA  0872               	movf	getDimmer_LoadGO@loadgo,w
 11194  1AFB  0008               	return
 11195  1AFC                     __end_of_getDimmer_LoadGO:	
 11196                           
 11197                           	psect	text67
 11198  1E92                     __ptext67:	
 11199 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11200 ;; Defined at:
 11201 ;;		line 238 in file "../src/Dimmer_B1.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  status          1    5[COMMON] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      unsigned char 
 11208 ;; Registers used:
 11209 ;;		wreg, status,2, status,0
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        4 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    3
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_Load_Main
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11231  1E92                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11232                           
 11233                           ;Dimmer_B1.c: 239: char status = 0;
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11237  1E92  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11238                           
 11239                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11240  1E93  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2102
 11241  1E94  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2102,f
 11242  1E95  0021               	movlb	1	; select bank1
 11243  1E96  1E62               	btfss	_DimmerIntr1^(0+128),4
 11244  1E97  1A69               	btfsc	_DimmerIntr2^(0+128),4
 11245  1E98  2E9A               	goto	l7682
 11246  1E99  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2102
 11247  1E9A                     l7682:	
 11248  1E9A  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2102,w
 11249  1E9B  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11250  1E9C  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11251  1E9D  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11252                           
 11253                           ;Dimmer_B1.c: 254: if (status == 0) {
 11254  1E9E  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11255  1E9F  1D03               	skipz
 11256  1EA0  2EAB               	goto	l7694
 11257                           
 11258                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11259  1EA1  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2103
 11260  1EA2  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2103,f
 11261  1EA3  1F62               	btfss	_DimmerIntr1^(0+128),6
 11262  1EA4  1B69               	btfsc	_DimmerIntr2^(0+128),6
 11263  1EA5  2EA7               	goto	l7692
 11264  1EA6  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2103
 11265  1EA7                     l7692:	
 11266  1EA7  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2103,w
 11267  1EA8  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11268  1EA9  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11269  1EAA  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11270  1EAB                     l7694:	
 11271                           
 11272                           ;Dimmer_B1.c: 266: }
 11273                           ;Dimmer_B1.c: 268: return status;
 11274  1EAB  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11275  1EAC  0008               	return
 11276  1EAD                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11277                           
 11278                           	psect	text68
 11279  1F01                     __ptext68:	
 11280 ;; *************** function ___wmul *****************
 11281 ;; Defined at:
 11282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  multiplier      2    2[COMMON] unsigned int 
 11285 ;;  multiplicand    2    4[COMMON] unsigned int 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  product         2    6[COMMON] unsigned int 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  2    2[COMMON] unsigned int 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11301 ;;Total ram usage:        6 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    3
 11304 ;; This function calls:
 11305 ;;		Nothing
 11306 ;; This function is called by:
 11307 ;;		_Load_Main
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           
 11312                           ;psect for function ___wmul
 11313  1F01                     ___wmul:	
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11317  1F01  01F6               	clrf	___wmul@product
 11318  1F02  01F7               	clrf	___wmul@product+1
 11319  1F03                     l8242:	
 11320  1F03  1C72               	btfss	___wmul@multiplier,0
 11321  1F04  2F09               	goto	l2985
 11322  1F05  0874               	movf	___wmul@multiplicand,w
 11323  1F06  07F6               	addwf	___wmul@product,f
 11324  1F07  0875               	movf	___wmul@multiplicand+1,w
 11325  1F08  3DF7               	addwfc	___wmul@product+1,f
 11326  1F09                     l2985:	
 11327  1F09  3001               	movlw	1
 11328  1F0A                     u8655:	
 11329  1F0A  35F4               	lslf	___wmul@multiplicand,f
 11330  1F0B  0DF5               	rlf	___wmul@multiplicand+1,f
 11331  1F0C  0B89               	decfsz	9,f
 11332  1F0D  2F0A               	goto	u8655
 11333  1F0E  3001               	movlw	1
 11334  1F0F                     u8665:	
 11335  1F0F  36F3               	lsrf	___wmul@multiplier+1,f
 11336  1F10  0CF2               	rrf	___wmul@multiplier,f
 11337  1F11  0B89               	decfsz	9,f
 11338  1F12  2F0F               	goto	u8665
 11339  1F13  0873               	movf	___wmul@multiplier+1,w
 11340  1F14  0472               	iorwf	___wmul@multiplier,w
 11341  1F15  1D03               	skipz
 11342  1F16  2F03               	goto	l8242
 11343  1F17  0877               	movf	___wmul@product+1,w
 11344  1F18  01F3               	clrf	?___wmul+1
 11345  1F19  07F3               	addwf	?___wmul+1,f
 11346  1F1A  0876               	movf	___wmul@product,w
 11347  1F1B  01F2               	clrf	?___wmul
 11348  1F1C  07F2               	addwf	?___wmul,f
 11349  1F1D  0008               	return
 11350  1F1E                     __end_of___wmul:	
 11351                           
 11352                           	psect	text69
 11353  1261                     __ptext69:	
 11354 ;; *************** function ___lwdiv *****************
 11355 ;; Defined at:
 11356 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11357 ;; Parameters:    Size  Location     Type
 11358 ;;  divisor         2    2[COMMON] unsigned int 
 11359 ;;  dividend        2    4[COMMON] unsigned int 
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  quotient        2    7[COMMON] unsigned int 
 11362 ;;  counter         1    9[COMMON] unsigned char 
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  2    2[COMMON] unsigned int 
 11365 ;; Registers used:
 11366 ;;		wreg, status,2, status,0
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;Total ram usage:        8 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; Hardware stack levels required when called:    3
 11379 ;; This function calls:
 11380 ;;		Nothing
 11381 ;; This function is called by:
 11382 ;;		_Load_Main
 11383 ;;		_setRF_Main
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           
 11388                           ;psect for function ___lwdiv
 11389  1261                     ___lwdiv:	
 11390                           
 11391                           ;incstack = 0
 11392                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11393  1261  01F7               	clrf	___lwdiv@quotient
 11394  1262  01F8               	clrf	___lwdiv@quotient+1
 11395  1263  0873               	movf	___lwdiv@divisor+1,w
 11396  1264  0472               	iorwf	___lwdiv@divisor,w
 11397  1265  1903               	skipnz
 11398  1266  2A90               	goto	l7642
 11399  1267  01F9               	clrf	___lwdiv@counter
 11400  1268  0AF9               	incf	___lwdiv@counter,f
 11401  1269                     l7630:	
 11402  1269  1BF3               	btfsc	___lwdiv@divisor+1,7
 11403  126A  2A75               	goto	l7632
 11404  126B  3001               	movlw	1
 11405  126C                     u7485:	
 11406  126C  35F2               	lslf	___lwdiv@divisor,f
 11407  126D  0DF3               	rlf	___lwdiv@divisor+1,f
 11408  126E  0B89               	decfsz	9,f
 11409  126F  2A6C               	goto	u7485
 11410  1270  3001               	movlw	1
 11411  1271  00F6               	movwf	??___lwdiv
 11412  1272  0876               	movf	??___lwdiv,w
 11413  1273  07F9               	addwf	___lwdiv@counter,f
 11414  1274  2A69               	goto	l7630
 11415  1275                     l7632:	
 11416  1275  3001               	movlw	1
 11417  1276                     u7505:	
 11418  1276  35F7               	lslf	___lwdiv@quotient,f
 11419  1277  0DF8               	rlf	___lwdiv@quotient+1,f
 11420  1278  0B89               	decfsz	9,f
 11421  1279  2A76               	goto	u7505
 11422  127A  0873               	movf	___lwdiv@divisor+1,w
 11423  127B  0275               	subwf	___lwdiv@dividend+1,w
 11424  127C  1D03               	skipz
 11425  127D  2A80               	goto	u7515
 11426  127E  0872               	movf	___lwdiv@divisor,w
 11427  127F  0274               	subwf	___lwdiv@dividend,w
 11428  1280                     u7515:	
 11429  1280  1C03               	skipc
 11430  1281  2A87               	goto	l7638
 11431  1282  0872               	movf	___lwdiv@divisor,w
 11432  1283  02F4               	subwf	___lwdiv@dividend,f
 11433  1284  0873               	movf	___lwdiv@divisor+1,w
 11434  1285  3BF5               	subwfb	___lwdiv@dividend+1,f
 11435  1286  1477               	bsf	___lwdiv@quotient,0
 11436  1287                     l7638:	
 11437  1287  3001               	movlw	1
 11438  1288                     u7525:	
 11439  1288  36F3               	lsrf	___lwdiv@divisor+1,f
 11440  1289  0CF2               	rrf	___lwdiv@divisor,f
 11441  128A  0B89               	decfsz	9,f
 11442  128B  2A88               	goto	u7525
 11443  128C  3001               	movlw	1
 11444  128D  02F9               	subwf	___lwdiv@counter,f
 11445  128E  1D03               	btfss	3,2
 11446  128F  2A75               	goto	l7632
 11447  1290                     l7642:	
 11448  1290  0878               	movf	___lwdiv@quotient+1,w
 11449  1291  01F3               	clrf	?___lwdiv+1
 11450  1292  07F3               	addwf	?___lwdiv+1,f
 11451  1293  0877               	movf	___lwdiv@quotient,w
 11452  1294  01F2               	clrf	?___lwdiv
 11453  1295  07F2               	addwf	?___lwdiv,f
 11454  1296  0008               	return
 11455  1297                     __end_of___lwdiv:	
 11456                           
 11457                           	psect	text70
 11458  1AB5                     __ptext70:	
 11459 ;; *************** function _Load_Initialization *****************
 11460 ;; Defined at:
 11461 ;;		line 9 in file "../src/OverLoad_B1.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;		None
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;		None
 11466 ;; Return value:  Size  Location     Type
 11467 ;;		None               void
 11468 ;; Registers used:
 11469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;Total ram usage:        0 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    4
 11482 ;; This function calls:
 11483 ;;		_setLoad_AH_AL_Restore
 11484 ;; This function is called by:
 11485 ;;		_main
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _Load_Initialization
 11491  1AB5                     _Load_Initialization:	
 11492                           
 11493                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11494                           
 11495                           ;incstack = 0
 11496                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11497  1AB5  319E  2677         	fcall	_setLoad_AH_AL_Restore
 11498  1AB7  0008               	return
 11499  1AB8                     __end_of_Load_Initialization:	
 11500                           
 11501                           	psect	text71
 11502  1E77                     __ptext71:	
 11503 ;; *************** function _setLoad_AH_AL_Restore *****************
 11504 ;; Defined at:
 11505 ;;		line 266 in file "../src/OverLoad_B1.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;		None
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  i               1    3[COMMON] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;		None               void
 11512 ;; Registers used:
 11513 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;Total ram usage:        2 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    3
 11526 ;; This function calls:
 11527 ;;		Nothing
 11528 ;; This function is called by:
 11529 ;;		_Load_Initialization
 11530 ;;		_Load_Main
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           
 11535                           ;psect for function _setLoad_AH_AL_Restore
 11536  1E77                     _setLoad_AH_AL_Restore:	
 11537                           
 11538                           ;OverLoad_B1.c: 267: char i;
 11539                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11543  1E77  01F3               	clrf	setLoad_AH_AL_Restore@i
 11544  1E78                     L8:	
 11545  1E78  3005               	movlw	5
 11546  1E79  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11547  1E7A  1803               	btfsc	3,0
 11548  1E7B  0008               	return
 11549                           
 11550                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11551  1E7C  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11552  1E7D  3E3B               	addlw	(_Load+11)& (0+255)
 11553  1E7E  0086               	movwf	6
 11554  1E7F  3001               	movlw	1	; select bank2/3
 11555  1E80  0087               	movwf	7
 11556  1E81  3000               	movlw	0
 11557  1E82  3FC0               	movwi [0]fsr1
 11558  1E83  3FC1               	movwi [1]fsr1
 11559                           
 11560                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11561  1E84  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11562  1E85  3E45               	addlw	(_Load+21)& (0+255)
 11563  1E86  0086               	movwf	6
 11564  1E87  3001               	movlw	1	; select bank2/3
 11565  1E88  0087               	movwf	7
 11566  1E89  30FF               	movlw	255
 11567  1E8A  3FC0               	movwi [0]fsr1
 11568  1E8B  30FF               	movlw	255
 11569  1E8C  3FC1               	movwi [1]fsr1
 11570  1E8D  3001               	movlw	1
 11571  1E8E  00F2               	movwf	??_setLoad_AH_AL_Restore
 11572  1E8F  0872               	movf	??_setLoad_AH_AL_Restore,w
 11573  1E90  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11574  1E91  2E78               	goto	L8
 11575  1E92                     __end_of_setLoad_AH_AL_Restore:	
 11576                           
 11577                           	psect	text72
 11578  1B8C                     __ptext72:	
 11579 ;; *************** function _LED_Main *****************
 11580 ;; Defined at:
 11581 ;;		line 47 in file "../src/LED_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;		None
 11586 ;; Return value:  Size  Location     Type
 11587 ;;		None               void
 11588 ;; Registers used:
 11589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        0 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    5
 11602 ;; This function calls:
 11603 ;;		_setLED_Main
 11604 ;; This function is called by:
 11605 ;;		_main
 11606 ;; This function uses a non-reentrant model
 11607 ;;
 11608                           
 11609                           
 11610                           ;psect for function _LED_Main
 11611  1B8C                     _LED_Main:	
 11612                           
 11613                           ;LED_B1.c: 53: setLED_Main(1);
 11614                           
 11615                           ;incstack = 0
 11616                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11617  1B8C  3001               	movlw	1
 11618  1B8D  3188  2001  319B   	fcall	_setLED_Main
 11619                           
 11620                           ;LED_B1.c: 56: setLED_Main(2);
 11621  1B90  3002               	movlw	2
 11622  1B91  3188  2001  319B   	fcall	_setLED_Main
 11623                           
 11624                           ;LED_B1.c: 62: setLED_Main(99);
 11625  1B94  3063               	movlw	99
 11626  1B95  3188  2001         	fcall	_setLED_Main
 11627  1B97  0008               	return
 11628  1B98                     __end_of_LED_Main:	
 11629                           
 11630                           	psect	text73
 11631  0801                     __ptext73:	
 11632 ;; *************** function _setLED_Main *****************
 11633 ;; Defined at:
 11634 ;;		line 221 in file "../src/LED_B1.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;  led             1    wreg     unsigned char 
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  led             1    6[COMMON] unsigned char 
 11639 ;; Return value:  Size  Location     Type
 11640 ;;		None               void
 11641 ;; Registers used:
 11642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;Total ram usage:        3 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    4
 11655 ;; This function calls:
 11656 ;;		_LedPointSelect
 11657 ;; This function is called by:
 11658 ;;		_LED_Main
 11659 ;; This function uses a non-reentrant model
 11660 ;;
 11661                           
 11662                           
 11663                           ;psect for function _setLED_Main
 11664  0801                     _setLED_Main:	
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11668                           ;setLED_Main@led stored from wreg
 11669  0801  00F6               	movwf	setLED_Main@led
 11670                           
 11671                           ;LED_B1.c: 222: LedPointSelect(led);
 11672  0802  0876               	movf	setLED_Main@led,w
 11673  0803  319E  26E4  3188   	fcall	_LedPointSelect
 11674                           
 11675                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11676  0806  0021               	movlb	1	; select bank1
 11677  0807  0847               	movf	_LED^(0+128),w
 11678  0808  0086               	movwf	6
 11679  0809  3001               	movlw	1	; select bank2/3
 11680  080A  0087               	movwf	7
 11681  080B  1C81               	btfss	1,1
 11682  080C  0008               	return
 11683                           
 11684                           ;LED_B1.c: 224: LED->Time++;
 11685  080D  0A47               	incf	_LED^(0+128),w
 11686  080E  0086               	movwf	6
 11687  080F  3001               	movlw	1	; select bank2/3
 11688  0810  0087               	movwf	7
 11689  0811  3001               	movlw	1
 11690  0812  0781               	addwf	1,f
 11691  0813  3141               	addfsr 1,1
 11692  0814  1803               	skipnc
 11693  0815  0A81               	incf	1,f
 11694                           
 11695                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11696  0816  0A47               	incf	_LED^(0+128),w
 11697  0817  0086               	movwf	6
 11698  0818  3001               	movlw	1	; select bank2/3
 11699  0819  0087               	movwf	7
 11700  081A  3F40               	moviw [0]fsr1
 11701  081B  00F4               	movwf	??_setLED_Main
 11702  081C  3F41               	moviw [1]fsr1
 11703  081D  00F5               	movwf	??_setLED_Main+1
 11704  081E  3000               	movlw	0
 11705  081F  0275               	subwf	??_setLED_Main+1,w
 11706  0820  3019               	movlw	25
 11707  0821  1903               	skipnz
 11708  0822  0274               	subwf	??_setLED_Main,w
 11709  0823  1C03               	skipc
 11710  0824  0008               	return
 11711                           
 11712                           ;LED_B1.c: 226: LED->Time = 0;
 11713  0825  0A47               	incf	_LED^(0+128),w
 11714  0826  0086               	movwf	6
 11715  0827  3001               	movlw	1	; select bank2/3
 11716  0828  0087               	movwf	7
 11717  0829  3000               	movlw	0
 11718  082A  3FC0               	movwi [0]fsr1
 11719  082B  3FC1               	movwi [1]fsr1
 11720                           
 11721                           ;LED_B1.c: 228: if (led == 1) {
 11722  082C  0876               	movf	setLED_Main@led,w
 11723  082D  3A01               	xorlw	1
 11724  082E  1D03               	skipz
 11725  082F  2833               	goto	l1168
 11726                           
 11727                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11728  0830  3008               	movlw	8
 11729  0831  0020               	movlb	0	; select bank0
 11730  0832  068C               	xorwf	12,f
 11731  0833                     l1168:	
 11732                           
 11733                           ;LED_B1.c: 230: }
 11734                           ;LED_B1.c: 233: if (led == 2) {
 11735  0833  0876               	movf	setLED_Main@led,w
 11736  0834  3A02               	xorlw	2
 11737  0835  1D03               	skipz
 11738  0836  283A               	goto	l1169
 11739                           
 11740                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11741  0837  3080               	movlw	128
 11742  0838  0020               	movlb	0	; select bank0
 11743  0839  068E               	xorwf	14,f
 11744  083A                     l1169:	
 11745                           
 11746                           ;LED_B1.c: 235: }
 11747                           ;LED_B1.c: 243: if (led == 99) {
 11748  083A  0876               	movf	setLED_Main@led,w
 11749  083B  3A63               	xorlw	99
 11750  083C  1D03               	skipz
 11751  083D  0008               	return
 11752                           
 11753                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11754  083E  3020               	movlw	32
 11755  083F  0020               	movlb	0	; select bank0
 11756  0840  068D               	xorwf	13,f
 11757  0841  0008               	return
 11758  0842                     __end_of_setLED_Main:	
 11759                           
 11760                           	psect	text74
 11761  1B80                     __ptext74:	
 11762 ;; *************** function _LED_Initialization *****************
 11763 ;; Defined at:
 11764 ;;		line 31 in file "../src/LED_B1.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;		None
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;		None
 11769 ;; Return value:  Size  Location     Type
 11770 ;;		None               void
 11771 ;; Registers used:
 11772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;Total ram usage:        0 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; Hardware stack levels required when called:    6
 11785 ;; This function calls:
 11786 ;;		_setLED_Initialization
 11787 ;; This function is called by:
 11788 ;;		_main
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _LED_Initialization
 11794  1B80                     _LED_Initialization:	
 11795                           
 11796                           ;LED_B1.c: 33: setLED_Initialization(1);
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11800  1B80  3001               	movlw	1
 11801  1B81  319C  2461  319B   	fcall	_setLED_Initialization
 11802                           
 11803                           ;LED_B1.c: 36: setLED_Initialization(2);
 11804  1B84  3002               	movlw	2
 11805  1B85  319C  2461  319B   	fcall	_setLED_Initialization
 11806                           
 11807                           ;LED_B1.c: 42: setLED_Initialization(99);
 11808  1B88  3063               	movlw	99
 11809  1B89  319C  2461         	fcall	_setLED_Initialization
 11810  1B8B  0008               	return
 11811  1B8C                     __end_of_LED_Initialization:	
 11812                           
 11813                           	psect	text75
 11814  1C61                     __ptext75:	
 11815 ;; *************** function _setLED_Initialization *****************
 11816 ;; Defined at:
 11817 ;;		line 69 in file "../src/LED_B1.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;  led             1    wreg     unsigned char 
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  led             1    6[COMMON] unsigned char 
 11822 ;; Return value:  Size  Location     Type
 11823 ;;		None               void
 11824 ;; Registers used:
 11825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11826 ;; Tracked objects:
 11827 ;;		On entry : 0/0
 11828 ;;		On exit  : 0/0
 11829 ;;		Unchanged: 0/0
 11830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;Total ram usage:        1 bytes
 11836 ;; Hardware stack levels used:    1
 11837 ;; Hardware stack levels required when called:    5
 11838 ;; This function calls:
 11839 ;;		_LedPointSelect
 11840 ;;		_setLED
 11841 ;; This function is called by:
 11842 ;;		_LED_Initialization
 11843 ;; This function uses a non-reentrant model
 11844 ;;
 11845                           
 11846                           
 11847                           ;psect for function _setLED_Initialization
 11848  1C61                     _setLED_Initialization:	
 11849                           
 11850                           ;incstack = 0
 11851                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11852                           ;setLED_Initialization@led stored from wreg
 11853  1C61  00F6               	movwf	setLED_Initialization@led
 11854                           
 11855                           ;LED_B1.c: 70: LedPointSelect(led);
 11856  1C62  0876               	movf	setLED_Initialization@led,w
 11857  1C63  319E  26E4  319C   	fcall	_LedPointSelect
 11858                           
 11859                           ;LED_B1.c: 71: LED->Enable = 1;
 11860  1C66  0021               	movlb	1	; select bank1
 11861  1C67  0847               	movf	_LED^(0+128),w
 11862  1C68  0086               	movwf	6
 11863  1C69  3001               	movlw	1	; select bank2/3
 11864  1C6A  0087               	movwf	7
 11865  1C6B  1401               	bsf	1,0
 11866                           
 11867                           ;LED_B1.c: 72: setLED(led, 0);
 11868  1C6C  01F4               	clrf	setLED@command
 11869  1C6D  0876               	movf	setLED_Initialization@led,w
 11870  1C6E  3197  2741         	fcall	_setLED
 11871  1C70  0008               	return
 11872  1C71                     __end_of_setLED_Initialization:	
 11873                           
 11874                           	psect	text76
 11875  11FA                     __ptext76:	
 11876 ;; *************** function _Flash_Memory_Main *****************
 11877 ;; Defined at:
 11878 ;;		line 974 in file "../src/MCU_B1.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;		None
 11881 ;; Auto vars:     Size  Location     Type
 11882 ;;		None
 11883 ;; Return value:  Size  Location     Type
 11884 ;;		None               void
 11885 ;; Registers used:
 11886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11887 ;; Tracked objects:
 11888 ;;		On entry : 0/0
 11889 ;;		On exit  : 0/0
 11890 ;;		Unchanged: 0/0
 11891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;Total ram usage:        1 bytes
 11897 ;; Hardware stack levels used:    1
 11898 ;; Hardware stack levels required when called:    6
 11899 ;; This function calls:
 11900 ;;		_Flash_Memory_Modify
 11901 ;;		_getMain_All_LightsStatus
 11902 ;; This function is called by:
 11903 ;;		_main
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           
 11908                           ;psect for function _Flash_Memory_Main
 11909  11FA                     _Flash_Memory_Main:	
 11910                           
 11911                           ;MCU_B1.c: 975: if (Memory.Modify == 1) {
 11912                           
 11913                           ;incstack = 0
 11914                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11915  11FA  0024               	movlb	4	; select bank4
 11916  11FB  1C44               	btfss	(_Memory^(0+512)+36),0
 11917  11FC  0008               	return
 11918                           
 11919                           ;MCU_B1.c: 976: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11920  11FD  319C  2405  3191   	fcall	_getMain_All_LightsStatus
 11921  1200  3A00               	xorlw	0
 11922  1201  3000               	movlw	0
 11923  1202  1903               	skipnz
 11924  1203  3001               	movlw	1
 11925  1204  00F8               	movwf	??_Flash_Memory_Main
 11926  1205  0DF8               	rlf	??_Flash_Memory_Main,f
 11927  1206  0024               	movlb	4	; select bank4
 11928  1207  0844               	movf	(_Memory^(0+512)+36),w
 11929  1208  0678               	xorwf	??_Flash_Memory_Main,w
 11930  1209  39FD               	andlw	-3
 11931  120A  0678               	xorwf	??_Flash_Memory_Main,w
 11932  120B  00C4               	movwf	(_Memory^(0+512)+36)
 11933                           
 11934                           ;MCU_B1.c: 977: if (Memory.GO == 1) {
 11935  120C  1CC4               	btfss	(_Memory^(0+512)+36),1
 11936  120D  2A27               	goto	l1441
 11937                           
 11938                           ;MCU_B1.c: 978: Memory.Runtime = 1;
 11939  120E  15C4               	bsf	(_Memory^(0+512)+36),3
 11940                           
 11941                           ;MCU_B1.c: 979: Memory.Time++;
 11942  120F  3001               	movlw	1
 11943  1210  07C2               	addwf	(_Memory^(0+512)+34),f
 11944  1211  3000               	movlw	0
 11945  1212  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11946                           
 11947                           ;MCU_B1.c: 980: if (Memory.Time == (200 / 20)) {
 11948  1213  3022               	movlw	34
 11949  1214  3E20               	addlw	_Memory& (0+255)
 11950  1215  0086               	movwf	6
 11951  1216  3002               	movlw	2	; select bank4/5
 11952  1217  0087               	movwf	7
 11953  1218  3F40               	moviw [0]fsr1
 11954  1219  3A0A               	xorlw	10
 11955  121A  1D03               	skipz
 11956  121B  2A1E               	goto	u8875
 11957  121C  3F41               	moviw [1]fsr1
 11958  121D  3A00               	xorlw	0
 11959  121E                     u8875:	
 11960  121E  1D03               	skipz
 11961  121F  0008               	return
 11962                           
 11963                           ;MCU_B1.c: 981: Memory.Time = 0;
 11964  1220  01C2               	clrf	(_Memory^(0+512)+34)
 11965  1221  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11966                           
 11967                           ;MCU_B1.c: 982: Memory.Modify = 0;
 11968  1222  1044               	bcf	(_Memory^(0+512)+36),0
 11969                           
 11970                           ;MCU_B1.c: 983: Memory.GO = 0;
 11971  1223  10C4               	bcf	(_Memory^(0+512)+36),1
 11972                           
 11973                           ;MCU_B1.c: 984: Flash_Memory_Modify();
 11974  1224  3194  2442         	fcall	_Flash_Memory_Modify
 11975                           
 11976                           ;MCU_B1.c: 985: }
 11977                           ;MCU_B1.c: 986: } else {
 11978  1226  0008               	return
 11979  1227                     l1441:	
 11980                           
 11981                           ;MCU_B1.c: 987: if (Memory.Runtime == 1) {
 11982  1227  1DC4               	btfss	(_Memory^(0+512)+36),3
 11983  1228  0008               	return
 11984                           
 11985                           ;MCU_B1.c: 988: Memory.Runtime = 0;
 11986  1229  11C4               	bcf	(_Memory^(0+512)+36),3
 11987                           
 11988                           ;MCU_B1.c: 989: Memory.Time = 0;
 11989  122A  01C2               	clrf	(_Memory^(0+512)+34)
 11990  122B  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11991  122C  0008               	return
 11992  122D                     __end_of_Flash_Memory_Main:	
 11993                           
 11994                           	psect	text77
 11995  1442                     __ptext77:	
 11996 ;; *************** function _Flash_Memory_Modify *****************
 11997 ;; Defined at:
 11998 ;;		line 1047 in file "../src/MCU_B1.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;		None
 12001 ;; Auto vars:     Size  Location     Type
 12002 ;;  i               1    7[COMMON] unsigned char 
 12003 ;; Return value:  Size  Location     Type
 12004 ;;		None               void
 12005 ;; Registers used:
 12006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12007 ;; Tracked objects:
 12008 ;;		On entry : 0/0
 12009 ;;		On exit  : 0/0
 12010 ;;		Unchanged: 0/0
 12011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;Total ram usage:        2 bytes
 12017 ;; Hardware stack levels used:    1
 12018 ;; Hardware stack levels required when called:    5
 12019 ;; This function calls:
 12020 ;;		_Flash_Memory_Erasing
 12021 ;;		_Flash_Memory_Read
 12022 ;;		_Flash_Memory_Write
 12023 ;;		_setMemory_Data
 12024 ;; This function is called by:
 12025 ;;		_Flash_Memory_Main
 12026 ;; This function uses a non-reentrant model
 12027 ;;
 12028                           
 12029                           
 12030                           ;psect for function _Flash_Memory_Modify
 12031  1442                     _Flash_Memory_Modify:	
 12032                           
 12033                           ;MCU_B1.c: 1048: char i = 0;
 12034                           
 12035                           ;incstack = 0
 12036                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12037  1442  01F7               	clrf	Flash_Memory_Modify@i
 12038                           
 12039                           ;MCU_B1.c: 1049: for (i = 0; i < 32; i++) {
 12040  1443  01F7               	clrf	Flash_Memory_Modify@i
 12041  1444  3020               	movlw	32
 12042  1445  0277               	subwf	Flash_Memory_Modify@i,w
 12043  1446  1803               	btfsc	3,0
 12044  1447  2C5C               	goto	l7958
 12045  1448                     l7952:	
 12046                           
 12047                           ;MCU_B1.c: 1050: Memory.Data[i] = Flash_Memory_Read(i);
 12048  1448  0877               	movf	Flash_Memory_Modify@i,w
 12049  1449  319D  253F  3194   	fcall	_Flash_Memory_Read
 12050  144C  00F6               	movwf	??_Flash_Memory_Modify
 12051  144D  0877               	movf	Flash_Memory_Modify@i,w
 12052  144E  3E20               	addlw	_Memory& (0+255)
 12053  144F  0086               	movwf	6
 12054  1450  3002               	movlw	2	; select bank4/5
 12055  1451  0087               	movwf	7
 12056  1452  0876               	movf	??_Flash_Memory_Modify,w
 12057  1453  0081               	movwf	1
 12058  1454  3001               	movlw	1
 12059  1455  00F6               	movwf	??_Flash_Memory_Modify
 12060  1456  0876               	movf	??_Flash_Memory_Modify,w
 12061  1457  07F7               	addwf	Flash_Memory_Modify@i,f
 12062  1458  3020               	movlw	32
 12063  1459  0277               	subwf	Flash_Memory_Modify@i,w
 12064  145A  1C03               	skipc
 12065  145B  2C48               	goto	l7952
 12066  145C                     l7958:	
 12067                           
 12068                           ;MCU_B1.c: 1051: }
 12069                           ;MCU_B1.c: 1052: setMemory_Data(0, product->Data[12]);
 12070  145C  0020               	movlb	0	; select bank0
 12071  145D  086D               	movf	_product,w
 12072  145E  0086               	movwf	6
 12073  145F  3002               	movlw	2	; select bank4/5
 12074  1460  0087               	movwf	7
 12075  1461  3002               	movlw	2	; select bank4/5
 12076  1462  3F4C               	moviw [12]fsr1
 12077  1463  00F2               	movwf	setMemory_Data@data
 12078  1464  3000               	movlw	0
 12079  1465  319B  2347  3194   	fcall	_setMemory_Data
 12080                           
 12081                           ;MCU_B1.c: 1053: setMemory_Data(1, product->Data[13]);
 12082  1468  0020               	movlb	0	; select bank0
 12083  1469  086D               	movf	_product,w
 12084  146A  0086               	movwf	6
 12085  146B  3002               	movlw	2	; select bank4/5
 12086  146C  0087               	movwf	7
 12087  146D  3002               	movlw	2	; select bank4/5
 12088  146E  3F4D               	moviw [13]fsr1
 12089  146F  00F2               	movwf	setMemory_Data@data
 12090  1470  3001               	movlw	1
 12091  1471  319B  2347  3194   	fcall	_setMemory_Data
 12092                           
 12093                           ;MCU_B1.c: 1054: setMemory_Data(2, product->Data[14]);
 12094  1474  0020               	movlb	0	; select bank0
 12095  1475  086D               	movf	_product,w
 12096  1476  0086               	movwf	6
 12097  1477  3002               	movlw	2	; select bank4/5
 12098  1478  0087               	movwf	7
 12099  1479  3002               	movlw	2	; select bank4/5
 12100  147A  3F4E               	moviw [14]fsr1
 12101  147B  00F2               	movwf	setMemory_Data@data
 12102  147C  3002               	movlw	2
 12103  147D  319B  2347  3194   	fcall	_setMemory_Data
 12104                           
 12105                           ;MCU_B1.c: 1060: if (Memory.LoopSave == 1) {
 12106  1480  0024               	movlb	4	; select bank4
 12107  1481  1D44               	btfss	(_Memory^(0+512)+36),2
 12108  1482  2C87               	goto	l1464
 12109                           
 12110                           ;MCU_B1.c: 1061: Memory.LoopSave = 0;
 12111  1483  1144               	bcf	(_Memory^(0+512)+36),2
 12112                           
 12113                           ;MCU_B1.c: 1062: myMain.FirstOpen = 0;
 12114  1484  0022               	movlb	2	; select bank2
 12115  1485  11A0               	bcf	_myMain^(0+256),3
 12116                           
 12117                           ;MCU_B1.c: 1063: myMain.First = 0;
 12118  1486  12A0               	bcf	_myMain^(0+256),5
 12119  1487                     l1464:	
 12120                           
 12121                           ;MCU_B1.c: 1065: }
 12122                           ;MCU_B1.c: 1066: GIE = 0;
 12123  1487  138B               	bcf	11,7	;volatile
 12124                           
 12125                           ;MCU_B1.c: 1067: Flash_Memory_Erasing();
 12126  1488  319B  2374  3194   	fcall	_Flash_Memory_Erasing
 12127                           
 12128                           ;MCU_B1.c: 1068: Flash_Memory_Write();
 12129  148B  3191  2178         	fcall	_Flash_Memory_Write
 12130                           
 12131                           ;MCU_B1.c: 1069: GIE = 1;
 12132  148D  178B               	bsf	11,7	;volatile
 12133  148E  0008               	return
 12134  148F                     __end_of_Flash_Memory_Modify:	
 12135                           
 12136                           	psect	text78
 12137  1B74                     __ptext78:	
 12138 ;; *************** function _Flash_Memory_Erasing *****************
 12139 ;; Defined at:
 12140 ;;		line 1036 in file "../src/MCU_B1.c"
 12141 ;; Parameters:    Size  Location     Type
 12142 ;;		None
 12143 ;; Auto vars:     Size  Location     Type
 12144 ;;		None
 12145 ;; Return value:  Size  Location     Type
 12146 ;;		None               void
 12147 ;; Registers used:
 12148 ;;		wreg, status,2, status,0, pclath, cstack
 12149 ;; Tracked objects:
 12150 ;;		On entry : 0/0
 12151 ;;		On exit  : 0/0
 12152 ;;		Unchanged: 0/0
 12153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;Total ram usage:        0 bytes
 12159 ;; Hardware stack levels used:    1
 12160 ;; Hardware stack levels required when called:    4
 12161 ;; This function calls:
 12162 ;;		_Flash_Memory_Unlock
 12163 ;; This function is called by:
 12164 ;;		_Flash_Memory_Modify
 12165 ;; This function uses a non-reentrant model
 12166 ;;
 12167                           
 12168                           
 12169                           ;psect for function _Flash_Memory_Erasing
 12170  1B74                     _Flash_Memory_Erasing:	
 12171                           
 12172                           ;MCU_B1.c: 1037: CFGS = 0;
 12173                           
 12174                           ;incstack = 0
 12175                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12176  1B74  0023               	movlb	3	; select bank3
 12177  1B75  1315               	bcf	21,6	;volatile
 12178                           
 12179                           ;MCU_B1.c: 1038: PMADRH = 0x30;
 12180  1B76  3030               	movlw	48
 12181  1B77  0092               	movwf	18	;volatile
 12182                           
 12183                           ;MCU_B1.c: 1039: PMADRL = 0x00;
 12184  1B78  0191               	clrf	17	;volatile
 12185                           
 12186                           ;MCU_B1.c: 1040: FREE = 1;
 12187  1B79  1615               	bsf	21,4	;volatile
 12188                           
 12189                           ;MCU_B1.c: 1041: WREN = 1;
 12190  1B7A  1515               	bsf	21,2	;volatile
 12191                           
 12192                           ;MCU_B1.c: 1042: Flash_Memory_Unlock();
 12193  1B7B  319B  232A         	fcall	_Flash_Memory_Unlock
 12194                           
 12195                           ;MCU_B1.c: 1043: WREN = 0;
 12196  1B7D  0023               	movlb	3	; select bank3
 12197  1B7E  1115               	bcf	21,2	;volatile
 12198  1B7F  0008               	return
 12199  1B80                     __end_of_Flash_Memory_Erasing:	
 12200                           
 12201                           	psect	text79
 12202  0450                     __ptext79:	
 12203 ;; *************** function _Flash_Memory_Initialization *****************
 12204 ;; Defined at:
 12205 ;;		line 933 in file "../src/MCU_B1.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;		None
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  i               1   59[BANK0 ] unsigned char 
 12210 ;; Return value:  Size  Location     Type
 12211 ;;		None               void
 12212 ;; Registers used:
 12213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12214 ;; Tracked objects:
 12215 ;;		On entry : 0/0
 12216 ;;		On exit  : 0/0
 12217 ;;		Unchanged: 0/0
 12218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;Total ram usage:        2 bytes
 12224 ;; Hardware stack levels used:    1
 12225 ;; Hardware stack levels required when called:    6
 12226 ;; This function calls:
 12227 ;;		_Flash_Memory_Read
 12228 ;;		_Flash_Memory_Write
 12229 ;;		_getDimmerLights_ValueToPercent
 12230 ;;		_setMemory_Data
 12231 ;; This function is called by:
 12232 ;;		_main
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _Flash_Memory_Initialization
 12238  0450                     _Flash_Memory_Initialization:	
 12239                           
 12240                           ;MCU_B1.c: 934: char i = 0;
 12241                           
 12242                           ;incstack = 0
 12243                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12244  0450  0020               	movlb	0	; select bank0
 12245  0451  01DB               	clrf	Flash_Memory_Initialization@i
 12246                           
 12247                           ;MCU_B1.c: 935: if (Flash_Memory_Read(31) == 0xaa) {
 12248  0452  301F               	movlw	31
 12249  0453  319D  253F  3184   	fcall	_Flash_Memory_Read
 12250  0456  3AAA               	xorlw	170
 12251  0457  1D03               	skipz
 12252  0458  2CC2               	goto	l9972
 12253                           
 12254                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12255  0459  3000               	movlw	0
 12256  045A  319D  253F  3184   	fcall	_Flash_Memory_Read
 12257  045D  0020               	movlb	0	; select bank0
 12258  045E  00DA               	movwf	??_Flash_Memory_Initialization
 12259  045F  086D               	movf	_product,w
 12260  0460  3E0C               	addlw	12
 12261  0461  0086               	movwf	6
 12262  0462  3002               	movlw	2	; select bank4/5
 12263  0463  0087               	movwf	7
 12264  0464  085A               	movf	??_Flash_Memory_Initialization,w
 12265  0465  0081               	movwf	1
 12266                           
 12267                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12268  0466  3001               	movlw	1
 12269  0467  319D  253F  3184   	fcall	_Flash_Memory_Read
 12270  046A  0020               	movlb	0	; select bank0
 12271  046B  00DA               	movwf	??_Flash_Memory_Initialization
 12272  046C  086D               	movf	_product,w
 12273  046D  3E0D               	addlw	13
 12274  046E  0086               	movwf	6
 12275  046F  3002               	movlw	2	; select bank4/5
 12276  0470  0087               	movwf	7
 12277  0471  085A               	movf	??_Flash_Memory_Initialization,w
 12278  0472  0081               	movwf	1
 12279                           
 12280                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12281  0473  3002               	movlw	2
 12282  0474  319D  253F  3184   	fcall	_Flash_Memory_Read
 12283  0477  0020               	movlb	0	; select bank0
 12284  0478  00DA               	movwf	??_Flash_Memory_Initialization
 12285  0479  086D               	movf	_product,w
 12286  047A  3E0E               	addlw	14
 12287  047B  0086               	movwf	6
 12288  047C  3002               	movlw	2	; select bank4/5
 12289  047D  0087               	movwf	7
 12290  047E  085A               	movf	??_Flash_Memory_Initialization,w
 12291  047F  0081               	movwf	1
 12292                           
 12293                           ;MCU_B1.c: 944: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12294  0480  3034               	movlw	52
 12295  0481  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12296  0484  0020               	movlb	0	; select bank0
 12297  0485  00DA               	movwf	??_Flash_Memory_Initialization
 12298  0486  085A               	movf	??_Flash_Memory_Initialization,w
 12299  0487  00DB               	movwf	Flash_Memory_Initialization@i
 12300                           
 12301                           ;MCU_B1.c: 945: product->Data[21] = i;
 12302  0488  085B               	movf	Flash_Memory_Initialization@i,w
 12303  0489  00DA               	movwf	??_Flash_Memory_Initialization
 12304  048A  086D               	movf	_product,w
 12305  048B  3E15               	addlw	21
 12306  048C  0086               	movwf	6
 12307  048D  3002               	movlw	2	; select bank4/5
 12308  048E  0087               	movwf	7
 12309  048F  085A               	movf	??_Flash_Memory_Initialization,w
 12310  0490  0081               	movwf	1
 12311                           
 12312                           ;MCU_B1.c: 946: product->Data[22] = i;
 12313  0491  085B               	movf	Flash_Memory_Initialization@i,w
 12314  0492  00DA               	movwf	??_Flash_Memory_Initialization
 12315  0493  086D               	movf	_product,w
 12316  0494  3E16               	addlw	22
 12317  0495  0086               	movwf	6
 12318  0496  3002               	movlw	2	; select bank4/5
 12319  0497  0087               	movwf	7
 12320  0498  085A               	movf	??_Flash_Memory_Initialization,w
 12321  0499  0081               	movwf	1
 12322                           
 12323                           ;MCU_B1.c: 947: product->Data[23] = i;
 12324  049A  085B               	movf	Flash_Memory_Initialization@i,w
 12325  049B  00DA               	movwf	??_Flash_Memory_Initialization
 12326  049C  086D               	movf	_product,w
 12327  049D  3E17               	addlw	23
 12328  049E  0086               	movwf	6
 12329  049F  3002               	movlw	2	; select bank4/5
 12330  04A0  0087               	movwf	7
 12331  04A1  085A               	movf	??_Flash_Memory_Initialization,w
 12332  04A2  0081               	movwf	1
 12333                           
 12334                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12335  04A3  086D               	movf	_product,w
 12336  04A4  3E0C               	addlw	12
 12337  04A5  0086               	movwf	6
 12338  04A6  3002               	movlw	2	; select bank4/5
 12339  04A7  0087               	movwf	7
 12340  04A8  0801               	movf	1,w
 12341  04A9  3AFF               	xorlw	255
 12342  04AA  1D03               	skipz
 12343  04AB  0008               	return
 12344  04AC  086D               	movf	_product,w
 12345  04AD  3E0D               	addlw	13
 12346  04AE  0086               	movwf	6
 12347  04AF  3002               	movlw	2	; select bank4/5
 12348  04B0  0087               	movwf	7
 12349  04B1  0801               	movf	1,w
 12350  04B2  3AFF               	xorlw	255
 12351  04B3  1D03               	skipz
 12352  04B4  0008               	return
 12353  04B5  086D               	movf	_product,w
 12354  04B6  3E0E               	addlw	14
 12355  04B7  0086               	movwf	6
 12356  04B8  3002               	movlw	2	; select bank4/5
 12357  04B9  0087               	movwf	7
 12358  04BA  0801               	movf	1,w
 12359  04BB  3AFF               	xorlw	255
 12360  04BC  1D03               	skipz
 12361  04BD  0008               	return
 12362                           
 12363                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12364  04BE  0022               	movlb	2	; select bank2
 12365  04BF  15A0               	bsf	_myMain^(0+256),3
 12366                           
 12367                           ;MCU_B1.c: 951: myMain.First = 1;
 12368  04C0  16A0               	bsf	_myMain^(0+256),5
 12369                           
 12370                           ;MCU_B1.c: 952: }
 12371                           ;MCU_B1.c: 953: } else {
 12372  04C1  0008               	return
 12373  04C2                     l9972:	
 12374                           
 12375                           ;MCU_B1.c: 954: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12376  04C2  3034               	movlw	52
 12377  04C3  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12378  04C6  0020               	movlb	0	; select bank0
 12379  04C7  00DA               	movwf	??_Flash_Memory_Initialization
 12380  04C8  085A               	movf	??_Flash_Memory_Initialization,w
 12381  04C9  00DB               	movwf	Flash_Memory_Initialization@i
 12382                           
 12383                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12384  04CA  30FF               	movlw	255
 12385  04CB  00DA               	movwf	??_Flash_Memory_Initialization
 12386  04CC  085A               	movf	??_Flash_Memory_Initialization,w
 12387  04CD  00F2               	movwf	setMemory_Data@data
 12388  04CE  3000               	movlw	0
 12389  04CF  319B  2347  3184   	fcall	_setMemory_Data
 12390                           
 12391                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12392  04D2  30FF               	movlw	255
 12393  04D3  0020               	movlb	0	; select bank0
 12394  04D4  00DA               	movwf	??_Flash_Memory_Initialization
 12395  04D5  085A               	movf	??_Flash_Memory_Initialization,w
 12396  04D6  00F2               	movwf	setMemory_Data@data
 12397  04D7  3001               	movlw	1
 12398  04D8  319B  2347  3184   	fcall	_setMemory_Data
 12399                           
 12400                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12401  04DB  30FF               	movlw	255
 12402  04DC  0020               	movlb	0	; select bank0
 12403  04DD  00DA               	movwf	??_Flash_Memory_Initialization
 12404  04DE  085A               	movf	??_Flash_Memory_Initialization,w
 12405  04DF  00F2               	movwf	setMemory_Data@data
 12406  04E0  3002               	movlw	2
 12407  04E1  319B  2347  3184   	fcall	_setMemory_Data
 12408                           
 12409                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12410  04E4  30FF               	movlw	255
 12411  04E5  0020               	movlb	0	; select bank0
 12412  04E6  00DA               	movwf	??_Flash_Memory_Initialization
 12413  04E7  085A               	movf	??_Flash_Memory_Initialization,w
 12414  04E8  00F2               	movwf	setMemory_Data@data
 12415  04E9  3003               	movlw	3
 12416  04EA  319B  2347  3184   	fcall	_setMemory_Data
 12417                           
 12418                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12419  04ED  30FF               	movlw	255
 12420  04EE  0020               	movlb	0	; select bank0
 12421  04EF  00DA               	movwf	??_Flash_Memory_Initialization
 12422  04F0  085A               	movf	??_Flash_Memory_Initialization,w
 12423  04F1  00F2               	movwf	setMemory_Data@data
 12424  04F2  3004               	movlw	4
 12425  04F3  319B  2347  3184   	fcall	_setMemory_Data
 12426                           
 12427                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12428  04F6  30FF               	movlw	255
 12429  04F7  0020               	movlb	0	; select bank0
 12430  04F8  00DA               	movwf	??_Flash_Memory_Initialization
 12431  04F9  085A               	movf	??_Flash_Memory_Initialization,w
 12432  04FA  00F2               	movwf	setMemory_Data@data
 12433  04FB  3005               	movlw	5
 12434  04FC  319B  2347  3184   	fcall	_setMemory_Data
 12435                           
 12436                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12437  04FF  30AA               	movlw	170
 12438  0500  0020               	movlb	0	; select bank0
 12439  0501  00DA               	movwf	??_Flash_Memory_Initialization
 12440  0502  085A               	movf	??_Flash_Memory_Initialization,w
 12441  0503  00F2               	movwf	setMemory_Data@data
 12442  0504  301F               	movlw	31
 12443  0505  319B  2347  3184   	fcall	_setMemory_Data
 12444                           
 12445                           ;MCU_B1.c: 962: product->Data[21] = i;
 12446  0508  0020               	movlb	0	; select bank0
 12447  0509  085B               	movf	Flash_Memory_Initialization@i,w
 12448  050A  00DA               	movwf	??_Flash_Memory_Initialization
 12449  050B  086D               	movf	_product,w
 12450  050C  3E15               	addlw	21
 12451  050D  0086               	movwf	6
 12452  050E  3002               	movlw	2	; select bank4/5
 12453  050F  0087               	movwf	7
 12454  0510  085A               	movf	??_Flash_Memory_Initialization,w
 12455  0511  0081               	movwf	1
 12456                           
 12457                           ;MCU_B1.c: 963: product->Data[22] = i;
 12458  0512  085B               	movf	Flash_Memory_Initialization@i,w
 12459  0513  00DA               	movwf	??_Flash_Memory_Initialization
 12460  0514  086D               	movf	_product,w
 12461  0515  3E16               	addlw	22
 12462  0516  0086               	movwf	6
 12463  0517  3002               	movlw	2	; select bank4/5
 12464  0518  0087               	movwf	7
 12465  0519  085A               	movf	??_Flash_Memory_Initialization,w
 12466  051A  0081               	movwf	1
 12467                           
 12468                           ;MCU_B1.c: 964: product->Data[23] = i;
 12469  051B  085B               	movf	Flash_Memory_Initialization@i,w
 12470  051C  00DA               	movwf	??_Flash_Memory_Initialization
 12471  051D  086D               	movf	_product,w
 12472  051E  3E17               	addlw	23
 12473  051F  0086               	movwf	6
 12474  0520  3002               	movlw	2	; select bank4/5
 12475  0521  0087               	movwf	7
 12476  0522  085A               	movf	??_Flash_Memory_Initialization,w
 12477  0523  0081               	movwf	1
 12478                           
 12479                           ;MCU_B1.c: 965: GIE = 0;
 12480  0524  138B               	bcf	11,7	;volatile
 12481                           
 12482                           ;MCU_B1.c: 966: Flash_Memory_Write();
 12483  0525  3191  2178         	fcall	_Flash_Memory_Write
 12484                           
 12485                           ;MCU_B1.c: 967: GIE = 1;
 12486  0527  178B               	bsf	11,7	;volatile
 12487                           
 12488                           ;MCU_B1.c: 968: myMain.FirstOpen = 1;
 12489  0528  0022               	movlb	2	; select bank2
 12490  0529  15A0               	bsf	_myMain^(0+256),3
 12491                           
 12492                           ;MCU_B1.c: 969: myMain.First = 1;
 12493  052A  16A0               	bsf	_myMain^(0+256),5
 12494  052B  0008               	return
 12495  052C                     __end_of_Flash_Memory_Initialization:	
 12496                           
 12497                           	psect	text80
 12498  1B47                     __ptext80:	
 12499 ;; *************** function _setMemory_Data *****************
 12500 ;; Defined at:
 12501 ;;		line 1084 in file "../src/MCU_B1.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;  address         1    wreg     unsigned char 
 12504 ;;  data            1    2[COMMON] unsigned char 
 12505 ;; Auto vars:     Size  Location     Type
 12506 ;;  address         1    4[COMMON] unsigned char 
 12507 ;; Return value:  Size  Location     Type
 12508 ;;		None               void
 12509 ;; Registers used:
 12510 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12511 ;; Tracked objects:
 12512 ;;		On entry : 0/0
 12513 ;;		On exit  : 0/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;Total ram usage:        3 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; Hardware stack levels required when called:    3
 12523 ;; This function calls:
 12524 ;;		Nothing
 12525 ;; This function is called by:
 12526 ;;		_Flash_Memory_Initialization
 12527 ;;		_Flash_Memory_Modify
 12528 ;; This function uses a non-reentrant model
 12529 ;;
 12530                           
 12531                           
 12532                           ;psect for function _setMemory_Data
 12533  1B47                     _setMemory_Data:	
 12534                           
 12535                           ;incstack = 0
 12536                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12537                           ;setMemory_Data@address stored from wreg
 12538  1B47  00F4               	movwf	setMemory_Data@address
 12539                           
 12540                           ;MCU_B1.c: 1085: Memory.Data[address] = data;
 12541  1B48  0872               	movf	setMemory_Data@data,w
 12542  1B49  00F3               	movwf	??_setMemory_Data
 12543  1B4A  0874               	movf	setMemory_Data@address,w
 12544  1B4B  3E20               	addlw	_Memory& (0+255)
 12545  1B4C  0086               	movwf	6
 12546  1B4D  3002               	movlw	2	; select bank4/5
 12547  1B4E  0087               	movwf	7
 12548  1B4F  0873               	movf	??_setMemory_Data,w
 12549  1B50  0081               	movwf	1
 12550  1B51  0008               	return
 12551  1B52                     __end_of_setMemory_Data:	
 12552                           
 12553                           	psect	text81
 12554  1178                     __ptext81:	
 12555 ;; *************** function _Flash_Memory_Write *****************
 12556 ;; Defined at:
 12557 ;;		line 1017 in file "../src/MCU_B1.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;		None
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  i               1    3[COMMON] unsigned char 
 12562 ;; Return value:  Size  Location     Type
 12563 ;;		None               void
 12564 ;; Registers used:
 12565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;Total ram usage:        2 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:    4
 12578 ;; This function calls:
 12579 ;;		_Flash_Memory_Unlock
 12580 ;; This function is called by:
 12581 ;;		_Flash_Memory_Initialization
 12582 ;;		_Flash_Memory_Modify
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586                           
 12587                           ;psect for function _Flash_Memory_Write
 12588  1178                     _Flash_Memory_Write:	
 12589                           
 12590                           ;MCU_B1.c: 1018: char i = 0;
 12591                           
 12592                           ;incstack = 0
 12593                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12594  1178  01F3               	clrf	Flash_Memory_Write@i
 12595                           
 12596                           ;MCU_B1.c: 1019: CFGS = 0;
 12597  1179  0023               	movlb	3	; select bank3
 12598  117A  1315               	bcf	21,6	;volatile
 12599                           
 12600                           ;MCU_B1.c: 1020: PMADRH = 0x30;
 12601  117B  3030               	movlw	48
 12602  117C  0092               	movwf	18	;volatile
 12603                           
 12604                           ;MCU_B1.c: 1021: PMDATH = 0;
 12605  117D  0194               	clrf	20	;volatile
 12606                           
 12607                           ;MCU_B1.c: 1022: FREE = 0;
 12608  117E  1215               	bcf	21,4	;volatile
 12609                           
 12610                           ;MCU_B1.c: 1023: LWLO = 1;
 12611  117F  1695               	bsf	21,5	;volatile
 12612                           
 12613                           ;MCU_B1.c: 1024: WREN = 1;
 12614  1180  1515               	bsf	21,2	;volatile
 12615                           
 12616                           ;MCU_B1.c: 1025: for (i = 0; i < 32; i++) {
 12617  1181  01F3               	clrf	Flash_Memory_Write@i
 12618  1182  3020               	movlw	32
 12619  1183  0273               	subwf	Flash_Memory_Write@i,w
 12620  1184  1803               	btfsc	3,0
 12621  1185  299B               	goto	l1455
 12622  1186                     l7486:	
 12623                           
 12624                           ;MCU_B1.c: 1026: PMADRL = i;
 12625  1186  0873               	movf	Flash_Memory_Write@i,w
 12626  1187  0023               	movlb	3	; select bank3
 12627  1188  0091               	movwf	17	;volatile
 12628                           
 12629                           ;MCU_B1.c: 1027: PMDATL = Memory.Data[i];
 12630  1189  0873               	movf	Flash_Memory_Write@i,w
 12631  118A  3E20               	addlw	_Memory& (0+255)
 12632  118B  0086               	movwf	6
 12633  118C  3002               	movlw	2	; select bank4/5
 12634  118D  0087               	movwf	7
 12635  118E  0801               	movf	1,w
 12636  118F  0093               	movwf	19	;volatile
 12637                           
 12638                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12639  1190  319B  232A  3191   	fcall	_Flash_Memory_Unlock
 12640  1193  3001               	movlw	1
 12641  1194  00F2               	movwf	??_Flash_Memory_Write
 12642  1195  0872               	movf	??_Flash_Memory_Write,w
 12643  1196  07F3               	addwf	Flash_Memory_Write@i,f
 12644  1197  3020               	movlw	32
 12645  1198  0273               	subwf	Flash_Memory_Write@i,w
 12646  1199  1C03               	skipc
 12647  119A  2986               	goto	l7486
 12648  119B                     l1455:	
 12649                           
 12650                           ;MCU_B1.c: 1029: }
 12651                           ;MCU_B1.c: 1030: LWLO = 0;
 12652  119B  0023               	movlb	3	; select bank3
 12653  119C  1295               	bcf	21,5	;volatile
 12654                           
 12655                           ;MCU_B1.c: 1031: Flash_Memory_Unlock();
 12656  119D  319B  232A         	fcall	_Flash_Memory_Unlock
 12657                           
 12658                           ;MCU_B1.c: 1032: WREN = 0;
 12659  119F  0023               	movlb	3	; select bank3
 12660  11A0  1115               	bcf	21,2	;volatile
 12661  11A1  0008               	return
 12662  11A2                     __end_of_Flash_Memory_Write:	
 12663                           
 12664                           	psect	text82
 12665  1B2A                     __ptext82:	
 12666 ;; *************** function _Flash_Memory_Unlock *****************
 12667 ;; Defined at:
 12668 ;;		line 996 in file "../src/MCU_B1.c"
 12669 ;; Parameters:    Size  Location     Type
 12670 ;;		None
 12671 ;; Auto vars:     Size  Location     Type
 12672 ;;		None
 12673 ;; Return value:  Size  Location     Type
 12674 ;;		None               void
 12675 ;; Registers used:
 12676 ;;		wreg
 12677 ;; Tracked objects:
 12678 ;;		On entry : 0/0
 12679 ;;		On exit  : 0/0
 12680 ;;		Unchanged: 0/0
 12681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;Total ram usage:        0 bytes
 12687 ;; Hardware stack levels used:    1
 12688 ;; Hardware stack levels required when called:    3
 12689 ;; This function calls:
 12690 ;;		Nothing
 12691 ;; This function is called by:
 12692 ;;		_Flash_Memory_Write
 12693 ;;		_Flash_Memory_Erasing
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697                           
 12698                           ;psect for function _Flash_Memory_Unlock
 12699  1B2A                     _Flash_Memory_Unlock:	
 12700                           
 12701                           ;MCU_B1.c: 997: PMCON2 = 0x55;
 12702                           
 12703                           ;incstack = 0
 12704                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12705  1B2A  3055               	movlw	85
 12706  1B2B  0023               	movlb	3	; select bank3
 12707  1B2C  0096               	movwf	22	;volatile
 12708                           
 12709                           ;MCU_B1.c: 998: PMCON2 = 0xaa;
 12710  1B2D  30AA               	movlw	170
 12711  1B2E  0096               	movwf	22	;volatile
 12712                           
 12713                           ;MCU_B1.c: 999: WR = 1;
 12714  1B2F  1495               	bsf	21,1	;volatile
 12715                           
 12716                           ;MCU_B1.c: 1000: __nop();
 12717  1B30  0000               	nop
 12718                           
 12719                           ;MCU_B1.c: 1001: __nop();
 12720  1B31  0000               	nop
 12721  1B32  0008               	return
 12722  1B33                     __end_of_Flash_Memory_Unlock:	
 12723                           
 12724                           	psect	text83
 12725  1D3F                     __ptext83:	
 12726 ;; *************** function _Flash_Memory_Read *****************
 12727 ;; Defined at:
 12728 ;;		line 1005 in file "../src/MCU_B1.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;  address         1    wreg     unsigned char 
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;  address         1    4[COMMON] unsigned char 
 12733 ;;  ret             1    5[COMMON] unsigned char 
 12734 ;;  i               1    3[COMMON] unsigned char 
 12735 ;; Return value:  Size  Location     Type
 12736 ;;                  1    wreg      unsigned char 
 12737 ;; Registers used:
 12738 ;;		wreg, status,2
 12739 ;; Tracked objects:
 12740 ;;		On entry : 0/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;Total ram usage:        4 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    3
 12751 ;; This function calls:
 12752 ;;		Nothing
 12753 ;; This function is called by:
 12754 ;;		_Flash_Memory_Initialization
 12755 ;;		_Flash_Memory_Modify
 12756 ;; This function uses a non-reentrant model
 12757 ;;
 12758                           
 12759                           
 12760                           ;psect for function _Flash_Memory_Read
 12761  1D3F                     _Flash_Memory_Read:	
 12762                           
 12763                           ;incstack = 0
 12764                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12765                           ;Flash_Memory_Read@address stored from wreg
 12766  1D3F  00F4               	movwf	Flash_Memory_Read@address
 12767                           
 12768                           ;MCU_B1.c: 1006: char i = 0, ret = 0;
 12769  1D40  01F3               	clrf	Flash_Memory_Read@i
 12770  1D41  01F5               	clrf	Flash_Memory_Read@ret
 12771                           
 12772                           ;MCU_B1.c: 1007: PMADRH = 0x30;
 12773  1D42  3030               	movlw	48
 12774  1D43  0023               	movlb	3	; select bank3
 12775  1D44  0092               	movwf	18	;volatile
 12776                           
 12777                           ;MCU_B1.c: 1008: PMADRL = address;
 12778  1D45  0874               	movf	Flash_Memory_Read@address,w
 12779  1D46  0091               	movwf	17	;volatile
 12780                           
 12781                           ;MCU_B1.c: 1009: CFGS = 0;
 12782  1D47  1315               	bcf	21,6	;volatile
 12783                           
 12784                           ;MCU_B1.c: 1010: RD = 1;
 12785  1D48  1415               	bsf	21,0	;volatile
 12786                           
 12787                           ;MCU_B1.c: 1011: i = PMDATH;
 12788  1D49  0814               	movf	20,w	;volatile
 12789  1D4A  00F2               	movwf	??_Flash_Memory_Read
 12790  1D4B  0872               	movf	??_Flash_Memory_Read,w
 12791  1D4C  00F3               	movwf	Flash_Memory_Read@i
 12792                           
 12793                           ;MCU_B1.c: 1012: ret = PMDATL;
 12794  1D4D  0813               	movf	19,w	;volatile
 12795  1D4E  00F2               	movwf	??_Flash_Memory_Read
 12796  1D4F  0872               	movf	??_Flash_Memory_Read,w
 12797  1D50  00F5               	movwf	Flash_Memory_Read@ret
 12798                           
 12799                           ;MCU_B1.c: 1013: return ret;
 12800  1D51  0875               	movf	Flash_Memory_Read@ret,w
 12801  1D52  0008               	return
 12802  1D53                     __end_of_Flash_Memory_Read:	
 12803                           
 12804                           	psect	text84
 12805  052C                     __ptext84:	
 12806 ;; *************** function _Exception_Main *****************
 12807 ;; Defined at:
 12808 ;;		line 509 in file "../src/Main_B1.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;		None
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  i               2   10[BANK0 ] int 
 12813 ;;  i               2    8[BANK0 ] int 
 12814 ;;  lights          1   12[BANK0 ] unsigned char 
 12815 ;;  error           1    7[BANK0 ] unsigned char 
 12816 ;;  count           1    6[BANK0 ] unsigned char 
 12817 ;; Return value:  Size  Location     Type
 12818 ;;		None               void
 12819 ;; Registers used:
 12820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;Total ram usage:        8 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		_getDimmerLights_Line
 12835 ;;		_getDimmerLights_Status
 12836 ;;		_getMain_All_Error_Status
 12837 ;;		_getMain_All_LightsStatus
 12838 ;;		_setBuz
 12839 ;;		_setDimmerLights_SwOff
 12840 ;;		_setLED
 12841 ;; This function is called by:
 12842 ;;		_main
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           
 12847                           ;psect for function _Exception_Main
 12848  052C                     _Exception_Main:	
 12849                           
 12850                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12851                           
 12852                           ;incstack = 0
 12853                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12854  052C  3000               	movlw	0
 12855  052D  3191  21CC  3185   	fcall	_getMain_All_Error_Status
 12856  0530  00F9               	movwf	??_Exception_Main
 12857  0531  0879               	movf	??_Exception_Main,w
 12858  0532  0020               	movlb	0	; select bank0
 12859  0533  00A7               	movwf	Exception_Main@error
 12860                           
 12861                           ;Main_B1.c: 511: char lights = 0, count = 2;
 12862  0534  01AC               	clrf	Exception_Main@lights
 12863  0535  3002               	movlw	2
 12864  0536  00F9               	movwf	??_Exception_Main
 12865  0537  0879               	movf	??_Exception_Main,w
 12866  0538  00A6               	movwf	Exception_Main@count
 12867                           
 12868                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12869  0539  0022               	movlb	2	; select bank2
 12870  053A  1DAB               	btfss	(_myMain^(0+256)+11),3
 12871  053B  2D4A               	goto	l10264
 12872                           
 12873                           ;Main_B1.c: 513: if (error == 0) {
 12874  053C  0020               	movlb	0	; select bank0
 12875  053D  08A7               	movf	Exception_Main@error,f
 12876  053E  1D03               	skipz
 12877  053F  0008               	return
 12878                           
 12879                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12880  0540  0022               	movlb	2	; select bank2
 12881  0541  11AB               	bcf	(_myMain^(0+256)+11),3
 12882                           
 12883                           ;Main_B1.c: 519: setLED(99, 10);
 12884  0542  300A               	movlw	10
 12885  0543  00F9               	movwf	??_Exception_Main
 12886  0544  0879               	movf	??_Exception_Main,w
 12887  0545  00F4               	movwf	setLED@command
 12888  0546  3063               	movlw	99
 12889  0547  3197  2741         	fcall	_setLED
 12890                           
 12891                           ;Main_B1.c: 521: }
 12892                           ;Main_B1.c: 522: } else {
 12893  0549  0008               	return
 12894  054A                     l10264:	
 12895                           
 12896                           ;Main_B1.c: 523: if (error != 0) {
 12897  054A  0020               	movlb	0	; select bank0
 12898  054B  0827               	movf	Exception_Main@error,w
 12899  054C  1903               	btfsc	3,2
 12900  054D  0008               	return
 12901                           
 12902                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12903  054E  0022               	movlb	2	; select bank2
 12904  054F  15AB               	bsf	(_myMain^(0+256)+11),3
 12905                           
 12906                           ;Main_B1.c: 527: setLED(99, 11);
 12907  0550  300B               	movlw	11
 12908  0551  00F9               	movwf	??_Exception_Main
 12909  0552  0879               	movf	??_Exception_Main,w
 12910  0553  00F4               	movwf	setLED@command
 12911  0554  3063               	movlw	99
 12912  0555  3197  2741  3185   	fcall	_setLED
 12913                           
 12914                           ;Main_B1.c: 529: switch (error) {
 12915  0558  2DF5               	goto	l10312
 12916  0559                     l10270:	
 12917                           ;Main_B1.c: 530: case 2:
 12918                           
 12919                           
 12920                           ;Main_B1.c: 531: if (getMain_All_LightsStatus() == 1) {
 12921  0559  319C  2405  3185   	fcall	_getMain_All_LightsStatus
 12922  055C  3A01               	xorlw	1
 12923  055D  1D03               	skipz
 12924  055E  2D68               	goto	l10274
 12925                           
 12926                           ;Main_B1.c: 532: setBuz(10, 300);
 12927  055F  302C               	movlw	44
 12928  0560  0020               	movlb	0	; select bank0
 12929  0561  00A4               	movwf	setBuz@time
 12930  0562  3001               	movlw	1
 12931  0563  00A5               	movwf	setBuz@time+1
 12932  0564  300A               	movlw	10
 12933  0565  3195  2584  3185   	fcall	_setBuz
 12934  0568                     l10274:	
 12935                           
 12936                           ;Main_B1.c: 533: }
 12937                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12938  0568  0020               	movlb	0	; select bank0
 12939  0569  01A8               	clrf	Exception_Main@i
 12940  056A  01A9               	clrf	Exception_Main@i+1
 12941  056B                     l10284:	
 12942  056B  0829               	movf	Exception_Main@i+1,w
 12943  056C  3A80               	xorlw	128
 12944  056D  00F9               	movwf	??_Exception_Main
 12945  056E  3080               	movlw	128
 12946  056F  0279               	subwf	??_Exception_Main,w
 12947  0570  1D03               	skipz
 12948  0571  2D74               	goto	u12175
 12949  0572  0826               	movf	Exception_Main@count,w
 12950  0573  0228               	subwf	Exception_Main@i,w
 12951  0574                     u12175:	
 12952  0574  1803               	btfsc	3,0
 12953  0575  2D96               	goto	u12170
 12954                           
 12955                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12956  0576  0020               	movlb	0	; select bank0
 12957  0577  0828               	movf	Exception_Main@i,w
 12958  0578  3E01               	addlw	1
 12959  0579  319B  23E7  3185   	fcall	_getDimmerLights_Status
 12960  057C  3A01               	xorlw	1
 12961  057D  1D03               	skipz
 12962  057E  2D90               	goto	l10282
 12963                           
 12964                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12965  057F  0021               	movlb	1	; select bank1
 12966  0580  0846               	movf	_DimmerLights^(0+128),w
 12967  0581  0086               	movwf	6
 12968  0582  3001               	movlw	1	; select bank2/3
 12969  0583  0087               	movwf	7
 12970  0584  1401               	bsf	1,0
 12971                           
 12972                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12973  0585  0A46               	incf	_DimmerLights^(0+128),w
 12974  0586  0086               	movwf	6
 12975  0587  3001               	movlw	1	; select bank2/3
 12976  0588  0087               	movwf	7
 12977  0589  1001               	bcf	1,0
 12978                           
 12979                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12980  058A  0020               	movlb	0	; select bank0
 12981  058B  0828               	movf	Exception_Main@i,w
 12982  058C  3E01               	addlw	1
 12983  058D  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 12984  0590                     l10282:	
 12985  0590  3001               	movlw	1
 12986  0591  0020               	movlb	0	; select bank0
 12987  0592  07A8               	addwf	Exception_Main@i,f
 12988  0593  3000               	movlw	0
 12989  0594  3DA9               	addwfc	Exception_Main@i+1,f
 12990  0595  2D6B               	goto	l10284
 12991  0596                     u12170:	
 12992  0596  0020               	movlb	0	; select bank0
 12993  0597  0008               	return
 12994  0598                     l10286:	
 12995                           ;Main_B1.c: 544: case 3:
 12996                           
 12997                           ;Main_B1.c: 541: }
 12998                           ;Main_B1.c: 542: }
 12999                           ;Main_B1.c: 543: break;
 13000                           
 13001                           
 13002                           ;Main_B1.c: 546: setBuz(5, 300);
 13003  0598  302C               	movlw	44
 13004  0599  0020               	movlb	0	; select bank0
 13005  059A  00A4               	movwf	setBuz@time
 13006  059B  3001               	movlw	1
 13007  059C  00A5               	movwf	setBuz@time+1
 13008  059D  3005               	movlw	5
 13009  059E  3195  2584  3185   	fcall	_setBuz
 13010                           
 13011                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 13012  05A1  319C  2414  3185   	fcall	_getDimmerLights_Line
 13013  05A4  00F9               	movwf	??_Exception_Main
 13014  05A5  0879               	movf	??_Exception_Main,w
 13015  05A6  0020               	movlb	0	; select bank0
 13016  05A7  00AC               	movwf	Exception_Main@lights
 13017                           
 13018                           ;Main_B1.c: 548: if (lights == 0) {
 13019  05A8  08AC               	movf	Exception_Main@lights,f
 13020  05A9  1D03               	skipz
 13021  05AA  2DDA               	goto	l10304
 13022                           
 13023                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13024  05AB  01AA               	clrf	Exception_Main@i_3451
 13025  05AC  01AB               	clrf	Exception_Main@i_3451+1
 13026  05AD                     l10302:	
 13027  05AD  082B               	movf	Exception_Main@i_3451+1,w
 13028  05AE  3A80               	xorlw	128
 13029  05AF  00F9               	movwf	??_Exception_Main
 13030  05B0  3080               	movlw	128
 13031  05B1  0279               	subwf	??_Exception_Main,w
 13032  05B2  1D03               	skipz
 13033  05B3  2DB6               	goto	u12205
 13034  05B4  0826               	movf	Exception_Main@count,w
 13035  05B5  022A               	subwf	Exception_Main@i_3451,w
 13036  05B6                     u12205:	
 13037  05B6  1803               	btfsc	3,0
 13038  05B7  2DD8               	goto	u12200
 13039                           
 13040                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13041  05B8  0020               	movlb	0	; select bank0
 13042  05B9  082A               	movf	Exception_Main@i_3451,w
 13043  05BA  3E01               	addlw	1
 13044  05BB  319B  23E7  3185   	fcall	_getDimmerLights_Status
 13045  05BE  3A01               	xorlw	1
 13046  05BF  1D03               	skipz
 13047  05C0  2DD2               	goto	l10300
 13048                           
 13049                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13050  05C1  0021               	movlb	1	; select bank1
 13051  05C2  0846               	movf	_DimmerLights^(0+128),w
 13052  05C3  0086               	movwf	6
 13053  05C4  3001               	movlw	1	; select bank2/3
 13054  05C5  0087               	movwf	7
 13055  05C6  1401               	bsf	1,0
 13056                           
 13057                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13058  05C7  0A46               	incf	_DimmerLights^(0+128),w
 13059  05C8  0086               	movwf	6
 13060  05C9  3001               	movlw	1	; select bank2/3
 13061  05CA  0087               	movwf	7
 13062  05CB  1001               	bcf	1,0
 13063                           
 13064                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13065  05CC  0020               	movlb	0	; select bank0
 13066  05CD  082A               	movf	Exception_Main@i_3451,w
 13067  05CE  3E01               	addlw	1
 13068  05CF  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 13069  05D2                     l10300:	
 13070  05D2  3001               	movlw	1
 13071  05D3  0020               	movlb	0	; select bank0
 13072  05D4  07AA               	addwf	Exception_Main@i_3451,f
 13073  05D5  3000               	movlw	0
 13074  05D6  3DAB               	addwfc	Exception_Main@i_3451+1,f
 13075  05D7  2DAD               	goto	l10302
 13076  05D8                     u12200:	
 13077  05D8  0020               	movlb	0	; select bank0
 13078  05D9  0008               	return
 13079  05DA                     l10304:	
 13080                           ;Main_B1.c: 556: }
 13081                           ;Main_B1.c: 557: }
 13082                           ;Main_B1.c: 558: } else {
 13083                           
 13084                           
 13085                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13086  05DA  0020               	movlb	0	; select bank0
 13087  05DB  082C               	movf	Exception_Main@lights,w
 13088  05DC  319B  23E7  3185   	fcall	_getDimmerLights_Status
 13089  05DF  3A01               	xorlw	1
 13090  05E0  1903               	btfsc	3,2
 13091  05E1  2DE4               	goto	l10306
 13092  05E2  0020               	movlb	0	; select bank0
 13093  05E3  0008               	return
 13094  05E4                     l10306:	
 13095                           
 13096                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 13097  05E4  0021               	movlb	1	; select bank1
 13098  05E5  0846               	movf	_DimmerLights^(0+128),w
 13099  05E6  0086               	movwf	6
 13100  05E7  3001               	movlw	1	; select bank2/3
 13101  05E8  0087               	movwf	7
 13102  05E9  1401               	bsf	1,0
 13103                           
 13104                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 13105  05EA  0A46               	incf	_DimmerLights^(0+128),w
 13106  05EB  0086               	movwf	6
 13107  05EC  3001               	movlw	1	; select bank2/3
 13108  05ED  0087               	movwf	7
 13109  05EE  1001               	bcf	1,0
 13110                           
 13111                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 13112  05EF  0020               	movlb	0	; select bank0
 13113  05F0  082C               	movf	Exception_Main@lights,w
 13114  05F1  3192  22CE         	fcall	_setDimmerLights_SwOff
 13115  05F3  0020               	movlb	0	; select bank0
 13116  05F4  0008               	return
 13117  05F5                     l10312:	
 13118                           ;Main_B1.c: 568: }
 13119                           
 13120                           ;Main_B1.c: 565: }
 13121                           ;Main_B1.c: 566: }
 13122                           ;Main_B1.c: 567: break;
 13123                           
 13124  05F5  0020               	movlb	0	; select bank0
 13125  05F6  0827               	movf	Exception_Main@error,w
 13126                           
 13127                           ; Switch size 1, requested type "space"
 13128                           ; Number of cases is 2, Range of values is 2 to 3
 13129                           ; switch strategies available:
 13130                           ; Name         Instructions Cycles
 13131                           ; simple_byte            7     4 (average)
 13132                           ; direct_byte           13     9 (fixed)
 13133                           ; jumptable            263     9 (fixed)
 13134                           ;	Chosen strategy is simple_byte
 13135  05F7  3A02               	xorlw	2	; case 2
 13136  05F8  1903               	skipnz
 13137  05F9  2D59               	goto	l10270
 13138  05FA  3A01               	xorlw	1	; case 3
 13139  05FB  1903               	skipnz
 13140  05FC  2D98               	goto	l10286
 13141  05FD  2DFF               	goto	l1710
 13142  05FE  0008               	return
 13143  05FF                     l1710:	
 13144  05FF  0008               	return
 13145  0600                     __end_of_Exception_Main:	
 13146                           
 13147                           	psect	text85
 13148  1C14                     __ptext85:	
 13149 ;; *************** function _getDimmerLights_Line *****************
 13150 ;; Defined at:
 13151 ;;		line 966 in file "../src/Dimmer_B1.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;		None
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;  line            1    3[COMMON] unsigned char 
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      unsigned char 
 13158 ;; Registers used:
 13159 ;;		wreg, status,2
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;Total ram usage:        2 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    3
 13172 ;; This function calls:
 13173 ;;		Nothing
 13174 ;; This function is called by:
 13175 ;;		_Exception_Main
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           
 13180                           ;psect for function _getDimmerLights_Line
 13181  1C14                     _getDimmerLights_Line:	
 13182                           
 13183                           ;Dimmer_B1.c: 967: char line = 0;
 13184                           
 13185                           ;incstack = 0
 13186                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13187  1C14  01F3               	clrf	getDimmerLights_Line@line
 13188                           
 13189                           ;Dimmer_B1.c: 969: if (DimmerLights1.Line == 1) {
 13190  1C15  0023               	movlb	3	; select bank3
 13191  1C16  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13192  1C17  2C1B               	goto	l945
 13193                           
 13194                           ;Dimmer_B1.c: 970: line = 1;
 13195  1C18  01F3               	clrf	getDimmerLights_Line@line
 13196  1C19  0AF3               	incf	getDimmerLights_Line@line,f
 13197                           
 13198                           ;Dimmer_B1.c: 971: }
 13199  1C1A  2C21               	goto	l946
 13200  1C1B                     l945:	
 13201                           
 13202                           ;Dimmer_B1.c: 974: else if (DimmerLights2.Line == 1) {
 13203  1C1B  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13204  1C1C  2C21               	goto	l946
 13205                           
 13206                           ;Dimmer_B1.c: 975: line = 2;
 13207  1C1D  3002               	movlw	2
 13208  1C1E  00F2               	movwf	??_getDimmerLights_Line
 13209  1C1F  0872               	movf	??_getDimmerLights_Line,w
 13210  1C20  00F3               	movwf	getDimmerLights_Line@line
 13211  1C21                     l946:	
 13212                           
 13213                           ;Dimmer_B1.c: 976: }
 13214                           ;Dimmer_B1.c: 983: return line;
 13215  1C21  0873               	movf	getDimmerLights_Line@line,w
 13216  1C22  0008               	return
 13217  1C23                     __end_of_getDimmerLights_Line:	
 13218                           
 13219                           	psect	text86
 13220  1F3B                     __ptext86:	
 13221 ;; *************** function _DimmerLights_Main *****************
 13222 ;; Defined at:
 13223 ;;		line 732 in file "../src/Dimmer_B1.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;		None
 13226 ;; Auto vars:     Size  Location     Type
 13227 ;;		None
 13228 ;; Return value:  Size  Location     Type
 13229 ;;		None               void
 13230 ;; Registers used:
 13231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13232 ;; Tracked objects:
 13233 ;;		On entry : 0/0
 13234 ;;		On exit  : 0/0
 13235 ;;		Unchanged: 0/0
 13236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;Total ram usage:        0 bytes
 13242 ;; Hardware stack levels used:    1
 13243 ;; Hardware stack levels required when called:    8
 13244 ;; This function calls:
 13245 ;;		_getLoad_OK
 13246 ;;		_getMain_All_Error_Status
 13247 ;;		_getMain_All_LightsStatus
 13248 ;;		_setDimmerLights_Main
 13249 ;; This function is called by:
 13250 ;;		_main
 13251 ;; This function uses a non-reentrant model
 13252 ;;
 13253                           
 13254                           
 13255                           ;psect for function _DimmerLights_Main
 13256  1F3B                     _DimmerLights_Main:	
 13257                           
 13258                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13259                           
 13260                           ;incstack = 0
 13261                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13262  1F3B  0021               	movlb	1	; select bank1
 13263  1F3C  1CBA               	btfss	_Dimmer^(0+128),1	;volatile
 13264  1F3D  2F53               	goto	l9948
 13265                           
 13266                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13267  1F3E  319A  22EE  319F   	fcall	_getLoad_OK
 13268  1F41  3A01               	xorlw	1
 13269  1F42  1903               	skipnz
 13270  1F43  2F51               	goto	l886
 13271  1F44  3000               	movlw	0
 13272  1F45  3191  21CC  319F   	fcall	_getMain_All_Error_Status
 13273  1F48  3800               	iorlw	0
 13274  1F49  1D03               	skipz
 13275  1F4A  2F51               	goto	l886
 13276  1F4B  319C  2405  319F   	fcall	_getMain_All_LightsStatus
 13277  1F4E  3800               	iorlw	0
 13278  1F4F  1D03               	skipz
 13279  1F50  2F53               	goto	l9948
 13280  1F51                     l886:	
 13281                           
 13282                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13283  1F51  0021               	movlb	1	; select bank1
 13284  1F52  10BA               	bcf	_Dimmer^(0+128),1	;volatile
 13285  1F53                     l9948:	
 13286                           
 13287                           ;Dimmer_B1.c: 738: }
 13288                           ;Dimmer_B1.c: 739: }
 13289                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13290  1F53  3001               	movlw	1
 13291  1F54  3189  21D5  319F   	fcall	_setDimmerLights_Main
 13292                           
 13293                           ;Dimmer_B1.c: 747: setDimmerLights_Main(2);
 13294  1F57  3002               	movlw	2
 13295  1F58  3189  21D5         	fcall	_setDimmerLights_Main
 13296  1F5A  0008               	return
 13297  1F5B                     __end_of_DimmerLights_Main:	
 13298                           
 13299                           	psect	text87
 13300  09D5                     __ptext87:	
 13301 ;; *************** function _setDimmerLights_Main *****************
 13302 ;; Defined at:
 13303 ;;		line 757 in file "../src/Dimmer_B1.c"
 13304 ;; Parameters:    Size  Location     Type
 13305 ;;  lights          1    wreg     unsigned char 
 13306 ;; Auto vars:     Size  Location     Type
 13307 ;;  lights          1   74[BANK0 ] unsigned char 
 13308 ;; Return value:  Size  Location     Type
 13309 ;;		None               void
 13310 ;; Registers used:
 13311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13312 ;; Tracked objects:
 13313 ;;		On entry : 0/0
 13314 ;;		On exit  : 0/0
 13315 ;;		Unchanged: 0/0
 13316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;Total ram usage:        1 bytes
 13322 ;; Hardware stack levels used:    1
 13323 ;; Hardware stack levels required when called:    7
 13324 ;; This function calls:
 13325 ;;		_DimmerLights_SelectPointer
 13326 ;;		_getDimmerLights_Allow_Condition
 13327 ;;		_getMain_All_LightsStatus
 13328 ;;		_setDimmerLights_Dimming
 13329 ;;		_setDimmerLights_OnOff
 13330 ;; This function is called by:
 13331 ;;		_DimmerLights_Main
 13332 ;; This function uses a non-reentrant model
 13333 ;;
 13334                           
 13335                           
 13336                           ;psect for function _setDimmerLights_Main
 13337  09D5                     _setDimmerLights_Main:	
 13338                           
 13339                           ;incstack = 0
 13340                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13341                           ;setDimmerLights_Main@lights stored from wreg
 13342  09D5  0020               	movlb	0	; select bank0
 13343  09D6  00EA               	movwf	setDimmerLights_Main@lights
 13344                           
 13345                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13346  09D7  086A               	movf	setDimmerLights_Main@lights,w
 13347  09D8  319D  2568  3189   	fcall	_DimmerLights_SelectPointer
 13348                           
 13349                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13350  09DB  0021               	movlb	1	; select bank1
 13351  09DC  0846               	movf	_DimmerLights^(0+128),w
 13352  09DD  0086               	movwf	6
 13353  09DE  3001               	movlw	1	; select bank2/3
 13354  09DF  0087               	movwf	7
 13355  09E0  1C81               	btfss	1,1
 13356  09E1  2A03               	goto	l9664
 13357                           
 13358                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13359  09E2  0020               	movlb	0	; select bank0
 13360  09E3  086A               	movf	setDimmerLights_Main@lights,w
 13361  09E4  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13362  09E7  3800               	iorlw	0
 13363  09E8  1D03               	skipz
 13364  09E9  0008               	return
 13365                           
 13366                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13367  09EA  0021               	movlb	1	; select bank1
 13368  09EB  0846               	movf	_DimmerLights^(0+128),w
 13369  09EC  0086               	movwf	6
 13370  09ED  3001               	movlw	1	; select bank2/3
 13371  09EE  0087               	movwf	7
 13372  09EF  1081               	bcf	1,1
 13373                           
 13374                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13375  09F0  0846               	movf	_DimmerLights^(0+128),w
 13376  09F1  0086               	movwf	6
 13377  09F2  3001               	movlw	1	; select bank2/3
 13378  09F3  0087               	movwf	7
 13379  09F4  1D01               	btfss	1,2
 13380  09F5  29FD               	goto	l9662
 13381                           
 13382                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13383  09F6  0020               	movlb	0	; select bank0
 13384  09F7  01E6               	clrf	setDimmerLights_OnOff@command
 13385  09F8  0AE6               	incf	setDimmerLights_OnOff@command,f
 13386  09F9  086A               	movf	setDimmerLights_Main@lights,w
 13387  09FA  3186  26C2         	fcall	_setDimmerLights_OnOff
 13388                           
 13389                           ;Dimmer_B1.c: 765: } else {
 13390  09FC  0008               	return
 13391  09FD                     l9662:	
 13392                           
 13393                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13394  09FD  0020               	movlb	0	; select bank0
 13395  09FE  01E6               	clrf	setDimmerLights_OnOff@command
 13396  09FF  086A               	movf	setDimmerLights_Main@lights,w
 13397  0A00  3186  26C2         	fcall	_setDimmerLights_OnOff
 13398                           
 13399                           ;Dimmer_B1.c: 767: }
 13400                           ;Dimmer_B1.c: 768: }
 13401                           ;Dimmer_B1.c: 769: } else {
 13402  0A02  0008               	return
 13403  0A03                     l9664:	
 13404                           
 13405                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13406  0A03  319C  2405  3189   	fcall	_getMain_All_LightsStatus
 13407  0A06  3A01               	xorlw	1
 13408  0A07  1D03               	skipz
 13409  0A08  2A31               	goto	l9676
 13410                           
 13411                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13412  0A09  0021               	movlb	1	; select bank1
 13413  0A0A  0846               	movf	_DimmerLights^(0+128),w
 13414  0A0B  0086               	movwf	6
 13415  0A0C  3001               	movlw	1	; select bank2/3
 13416  0A0D  0087               	movwf	7
 13417  0A0E  1E01               	btfss	1,4
 13418  0A0F  0008               	return
 13419                           
 13420                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13421  0A10  0020               	movlb	0	; select bank0
 13422  0A11  086A               	movf	setDimmerLights_Main@lights,w
 13423  0A12  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13424  0A15  3800               	iorlw	0
 13425  0A16  1D03               	skipz
 13426  0A17  0008               	return
 13427                           
 13428                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13429  0A18  0021               	movlb	1	; select bank1
 13430  0A19  0846               	movf	_DimmerLights^(0+128),w
 13431  0A1A  0086               	movwf	6
 13432  0A1B  3001               	movlw	1	; select bank2/3
 13433  0A1C  0087               	movwf	7
 13434  0A1D  1201               	bcf	1,4
 13435                           
 13436                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13437  0A1E  0846               	movf	_DimmerLights^(0+128),w
 13438  0A1F  0086               	movwf	6
 13439  0A20  3001               	movlw	1	; select bank2/3
 13440  0A21  0087               	movwf	7
 13441  0A22  1E81               	btfss	1,5
 13442  0A23  2A2B               	goto	l9674
 13443                           
 13444                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13445  0A24  0020               	movlb	0	; select bank0
 13446  0A25  01E3               	clrf	setDimmerLights_Dimming@status
 13447  0A26  0AE3               	incf	setDimmerLights_Dimming@status,f
 13448  0A27  086A               	movf	setDimmerLights_Main@lights,w
 13449  0A28  3194  248F         	fcall	_setDimmerLights_Dimming
 13450                           
 13451                           ;Dimmer_B1.c: 776: } else {
 13452  0A2A  0008               	return
 13453  0A2B                     l9674:	
 13454                           
 13455                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13456  0A2B  0020               	movlb	0	; select bank0
 13457  0A2C  01E3               	clrf	setDimmerLights_Dimming@status
 13458  0A2D  086A               	movf	setDimmerLights_Main@lights,w
 13459  0A2E  3194  248F         	fcall	_setDimmerLights_Dimming
 13460                           
 13461                           ;Dimmer_B1.c: 778: }
 13462                           ;Dimmer_B1.c: 779: }
 13463                           ;Dimmer_B1.c: 780: }
 13464                           ;Dimmer_B1.c: 781: } else {
 13465  0A30  0008               	return
 13466  0A31                     l9676:	
 13467                           
 13468                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13469  0A31  0021               	movlb	1	; select bank1
 13470  0A32  0846               	movf	_DimmerLights^(0+128),w
 13471  0A33  0086               	movwf	6
 13472  0A34  3001               	movlw	1	; select bank2/3
 13473  0A35  0087               	movwf	7
 13474  0A36  1E01               	btfss	1,4
 13475  0A37  0008               	return
 13476                           
 13477                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13478  0A38  0846               	movf	_DimmerLights^(0+128),w
 13479  0A39  0086               	movwf	6
 13480  0A3A  3001               	movlw	1	; select bank2/3
 13481  0A3B  0087               	movwf	7
 13482  0A3C  1201               	bcf	1,4
 13483  0A3D  0008               	return
 13484  0A3E                     __end_of_setDimmerLights_Main:	
 13485                           
 13486                           	psect	text88
 13487  06C2                     __ptext88:	
 13488 ;; *************** function _setDimmerLights_OnOff *****************
 13489 ;; Defined at:
 13490 ;;		line 791 in file "../src/Dimmer_B1.c"
 13491 ;; Parameters:    Size  Location     Type
 13492 ;;  lights          1    wreg     unsigned char 
 13493 ;;  command         1   70[BANK0 ] unsigned char 
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;  lights          1   73[BANK0 ] unsigned char 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;		None               void
 13498 ;; Registers used:
 13499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13505 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13508 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13509 ;;Total ram usage:        4 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    6
 13512 ;; This function calls:
 13513 ;;		_getCmd_Status
 13514 ;;		_getDelayOff_GO
 13515 ;;		_getDimmerLights_PercentToValue
 13516 ;;		_getDimmerLights_ValueToPercent
 13517 ;;		_getMain_All_LightsStatus
 13518 ;;		_setCmd_Status
 13519 ;;		_setDelayOff_GO
 13520 ;;		_setDimmerIntr_ControlStatus
 13521 ;;		_setDimmerIntr_DimmingValue
 13522 ;;		_setDimmerIntr_Dimming_RF
 13523 ;;		_setDimmerIntr_MaxmumValue
 13524 ;;		_setDimmerLights_Line
 13525 ;;		_setLED
 13526 ;;		_setProductData
 13527 ;;		_setRF_DimmerLights
 13528 ;;		_setTxData
 13529 ;; This function is called by:
 13530 ;;		_setDimmerLights_Main
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _setDimmerLights_OnOff
 13536  06C2                     _setDimmerLights_OnOff:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13540                           ;setDimmerLights_OnOff@lights stored from wreg
 13541  06C2  0020               	movlb	0	; select bank0
 13542  06C3  00E9               	movwf	setDimmerLights_OnOff@lights
 13543                           
 13544                           ;Dimmer_B1.c: 793: if (command == 1) {
 13545  06C4  0866               	movf	setDimmerLights_OnOff@command,w
 13546  06C5  3A01               	xorlw	1
 13547  06C6  1D03               	skipz
 13548  06C7  2F24               	goto	l9516
 13549                           
 13550                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13551  06C8  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13552  06C9  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13553  06CA  0869               	movf	setDimmerLights_OnOff@lights,w
 13554  06CB  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13555                           
 13556                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13557  06CE  01F4               	clrf	setLED@command
 13558  06CF  0020               	movlb	0	; select bank0
 13559  06D0  0869               	movf	setDimmerLights_OnOff@lights,w
 13560  06D1  3197  2741  3186   	fcall	_setLED
 13561                           
 13562                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13563  06D4  0021               	movlb	1	; select bank1
 13564  06D5  153A               	bsf	_Dimmer^(0+128),2	;volatile
 13565                           
 13566                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13567  06D6  0020               	movlb	0	; select bank0
 13568  06D7  0869               	movf	setDimmerLights_OnOff@lights,w
 13569  06D8  319C  24F4  3186   	fcall	_setDimmerLights_Line
 13570                           
 13571                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13572  06DB  3034               	movlw	52
 13573  06DC  0020               	movlb	0	; select bank0
 13574  06DD  00E7               	movwf	??_setDimmerLights_OnOff
 13575  06DE  0867               	movf	??_setDimmerLights_OnOff,w
 13576  06DF  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13577  06E0  0869               	movf	setDimmerLights_OnOff@lights,w
 13578  06E1  319D  2592  3186   	fcall	_setDimmerIntr_DimmingValue
 13579                           
 13580                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13581  06E4  0021               	movlb	1	; select bank1
 13582  06E5  0A46               	incf	_DimmerLights^(0+128),w
 13583  06E6  0086               	movwf	6
 13584  06E7  3001               	movlw	1	; select bank2/3
 13585  06E8  0087               	movwf	7
 13586  06E9  1F01               	btfss	1,6
 13587  06EA  2F0D               	goto	l9512
 13588                           
 13589                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13590  06EB  0A46               	incf	_DimmerLights^(0+128),w
 13591  06EC  0086               	movwf	6
 13592  06ED  3001               	movlw	1	; select bank2/3
 13593  06EE  0087               	movwf	7
 13594  06EF  1301               	bcf	1,6
 13595                           
 13596                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13597  06F0  0020               	movlb	0	; select bank0
 13598  06F1  0869               	movf	setDimmerLights_OnOff@lights,w
 13599  06F2  3E14               	addlw	20
 13600  06F3  076D               	addwf	_product,w
 13601  06F4  00E7               	movwf	??_setDimmerLights_OnOff
 13602  06F5  0867               	movf	??_setDimmerLights_OnOff,w
 13603  06F6  0086               	movwf	6
 13604  06F7  3002               	movlw	2	; select bank4/5
 13605  06F8  0087               	movwf	7
 13606  06F9  0801               	movf	1,w
 13607  06FA  3189  2108  3186   	fcall	_getDimmerLights_PercentToValue
 13608  06FD  0020               	movlb	0	; select bank0
 13609  06FE  00E8               	movwf	??_setDimmerLights_OnOff+1
 13610  06FF  0868               	movf	??_setDimmerLights_OnOff+1,w
 13611  0700  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13612  0701  0869               	movf	setDimmerLights_OnOff@lights,w
 13613  0702  319D  25FC  3186   	fcall	_setDimmerIntr_MaxmumValue
 13614                           
 13615                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13616  0705  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13617  0706  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13618  0707  0020               	movlb	0	; select bank0
 13619  0708  0869               	movf	setDimmerLights_OnOff@lights,w
 13620  0709  3191  214F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13621                           
 13622                           ;Dimmer_B1.c: 810: } else {
 13623  070C  2F54               	goto	l9536
 13624  070D                     l9512:	
 13625                           
 13626                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13627  070D  3034               	movlw	52
 13628  070E  0020               	movlb	0	; select bank0
 13629  070F  00E7               	movwf	??_setDimmerLights_OnOff
 13630  0710  0867               	movf	??_setDimmerLights_OnOff,w
 13631  0711  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13632  0712  0869               	movf	setDimmerLights_OnOff@lights,w
 13633  0713  319D  25FC  3186   	fcall	_setDimmerIntr_MaxmumValue
 13634                           
 13635                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13636  0716  3034               	movlw	52
 13637  0717  3188  20A3  3186   	fcall	_getDimmerLights_ValueToPercent
 13638  071A  0020               	movlb	0	; select bank0
 13639  071B  00E7               	movwf	??_setDimmerLights_OnOff
 13640  071C  0867               	movf	??_setDimmerLights_OnOff,w
 13641  071D  00DA               	movwf	setProductData@value
 13642  071E  0869               	movf	setDimmerLights_OnOff@lights,w
 13643  071F  3E14               	addlw	20
 13644  0720  319B  23D9  3186   	fcall	_setProductData
 13645                           
 13646                           ;Dimmer_B1.c: 813: }
 13647                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13648  0723  2F54               	goto	l9536
 13649  0724                     l9516:	
 13650  0724  0020               	movlb	0	; select bank0
 13651  0725  08E6               	movf	setDimmerLights_OnOff@command,f
 13652  0726  1D03               	skipz
 13653  0727  2F54               	goto	l9536
 13654                           
 13655                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13656  0728  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13657  0729  0869               	movf	setDimmerLights_OnOff@lights,w
 13658  072A  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13659                           
 13660                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13661  072D  01F4               	clrf	setLED@command
 13662  072E  0AF4               	incf	setLED@command,f
 13663  072F  0020               	movlb	0	; select bank0
 13664  0730  0869               	movf	setDimmerLights_OnOff@lights,w
 13665  0731  3197  2741  3186   	fcall	_setLED
 13666                           
 13667                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13668  0734  0020               	movlb	0	; select bank0
 13669  0735  0869               	movf	setDimmerLights_OnOff@lights,w
 13670  0736  319B  23F6  3186   	fcall	_getDelayOff_GO
 13671  0739  3A01               	xorlw	1
 13672  073A  1D03               	skipz
 13673  073B  2F43               	goto	l9526
 13674                           
 13675                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13676  073C  0020               	movlb	0	; select bank0
 13677  073D  01DE               	clrf	setDelayOff_GO@command
 13678  073E  01DF               	clrf	setDelayOff_GO@value
 13679  073F  0869               	movf	setDimmerLights_OnOff@lights,w
 13680  0740  318C  2422  3186   	fcall	_setDelayOff_GO
 13681  0743                     l9526:	
 13682                           
 13683                           ;Dimmer_B1.c: 823: }
 13684                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13685  0743  0020               	movlb	0	; select bank0
 13686  0744  0869               	movf	setDimmerLights_OnOff@lights,w
 13687  0745  3A01               	xorlw	1
 13688  0746  1D03               	skipz
 13689  0747  2F4A               	goto	l9530
 13690                           
 13691                           ;Dimmer_B1.c: 829: RA7 = 0;
 13692  0748  138C               	bcf	12,7	;volatile
 13693                           
 13694                           ;Dimmer_B1.c: 831: }
 13695  0749  2F4E               	goto	l912
 13696  074A                     l9530:	
 13697                           
 13698                           ;Dimmer_B1.c: 834: else if (lights == 2) {
 13699  074A  0869               	movf	setDimmerLights_OnOff@lights,w
 13700  074B  3A02               	xorlw	2
 13701  074C  1903               	btfsc	3,2
 13702                           
 13703                           ;Dimmer_B1.c: 835: RB4 = 0;
 13704  074D  120D               	bcf	13,4	;volatile
 13705  074E                     l912:	
 13706                           
 13707                           ;Dimmer_B1.c: 836: }
 13708                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13709  074E  0021               	movlb	1	; select bank1
 13710  074F  113A               	bcf	_Dimmer^(0+128),2	;volatile
 13711                           
 13712                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13713  0750  3000               	movlw	0
 13714  0751  319C  24F4  3186   	fcall	_setDimmerLights_Line
 13715  0754                     l9536:	
 13716                           
 13717                           ;Dimmer_B1.c: 844: }
 13718                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13719  0754  0020               	movlb	0	; select bank0
 13720  0755  0866               	movf	setDimmerLights_OnOff@command,w
 13721  0756  00E7               	movwf	??_setDimmerLights_OnOff
 13722  0757  0867               	movf	??_setDimmerLights_OnOff,w
 13723  0758  00DE               	movwf	setRF_DimmerLights@on
 13724  0759  0869               	movf	setDimmerLights_OnOff@lights,w
 13725  075A  3196  26E2  3186   	fcall	_setRF_DimmerLights
 13726                           
 13727                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13728  075D  3001               	movlw	1
 13729  075E  319C  2451  3186   	fcall	_getCmd_Status
 13730  0761  3A01               	xorlw	1
 13731  0762  1D03               	skipz
 13732  0763  2F7E               	goto	l9550
 13733                           
 13734                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13735  0764  319C  2405  3186   	fcall	_getMain_All_LightsStatus
 13736  0767  3800               	iorlw	0
 13737  0768  1D03               	skipz
 13738  0769  0008               	return
 13739                           
 13740                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13741  076A  01F2               	clrf	setCmd_Status@cmd
 13742  076B  3001               	movlw	1
 13743  076C  319D  257D  3186   	fcall	_setCmd_Status
 13744                           
 13745                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13746  076F  0020               	movlb	0	; select bank0
 13747  0770  01DA               	clrf	setProductData@value
 13748  0771  300B               	movlw	11
 13749  0772  319B  23D9  3186   	fcall	_setProductData
 13750                           
 13751                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13752  0775  0020               	movlb	0	; select bank0
 13753  0776  01DA               	clrf	setProductData@value
 13754  0777  3011               	movlw	17
 13755  0778  319B  23D9  3186   	fcall	_setProductData
 13756                           
 13757                           ;Dimmer_B1.c: 854: setTxData();
 13758  077B  318F  274A         	fcall	_setTxData
 13759                           
 13760                           ;Dimmer_B1.c: 855: }
 13761                           ;Dimmer_B1.c: 856: } else {
 13762  077D  0008               	return
 13763  077E                     l9550:	
 13764                           
 13765                           ;Dimmer_B1.c: 857: setTxData();
 13766  077E  318F  274A         	fcall	_setTxData
 13767  0780  0008               	return
 13768  0781                     __end_of_setDimmerLights_OnOff:	
 13769                           
 13770                           	psect	text89
 13771  1741                     __ptext89:	
 13772 ;; *************** function _setLED *****************
 13773 ;; Defined at:
 13774 ;;		line 76 in file "../src/LED_B1.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  led             1    wreg     unsigned char 
 13777 ;;  command         1    4[COMMON] unsigned char 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  led             1    5[COMMON] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;		None               void
 13782 ;; Registers used:
 13783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:        2 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    4
 13796 ;; This function calls:
 13797 ;;		_LedPointSelect
 13798 ;; This function is called by:
 13799 ;;		_setDimmerLights_OnOff
 13800 ;;		_setLED_Initialization
 13801 ;;		_Exception_Main
 13802 ;;		_setSw_Initialization
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806                           
 13807                           ;psect for function _setLED
 13808  1741                     _setLED:	
 13809                           
 13810                           ;incstack = 0
 13811                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13812                           ;setLED@led stored from wreg
 13813  1741  00F5               	movwf	setLED@led
 13814                           
 13815                           ;LED_B1.c: 77: LedPointSelect(led);
 13816  1742  0875               	movf	setLED@led,w
 13817  1743  319E  26E4  3197   	fcall	_LedPointSelect
 13818                           
 13819                           ;LED_B1.c: 78: if (command == 0) {
 13820  1746  08F4               	movf	setLED@command,f
 13821  1747  1D03               	skipz
 13822  1748  2F5B               	goto	l7090
 13823                           
 13824                           ;LED_B1.c: 80: if (led == 1) {
 13825  1749  0875               	movf	setLED@led,w
 13826  174A  3A01               	xorlw	1
 13827  174B  1D03               	skipz
 13828  174C  2F4F               	goto	l7082
 13829                           
 13830                           ;LED_B1.c: 84: RA3 = 1;
 13831  174D  0020               	movlb	0	; select bank0
 13832  174E  158C               	bsf	12,3	;volatile
 13833  174F                     l7082:	
 13834                           
 13835                           ;LED_B1.c: 86: }
 13836                           ;LED_B1.c: 89: if (led == 2) {
 13837  174F  0875               	movf	setLED@led,w
 13838  1750  3A02               	xorlw	2
 13839  1751  1D03               	skipz
 13840  1752  2F55               	goto	l7086
 13841                           
 13842                           ;LED_B1.c: 93: RC7 = 1;
 13843  1753  0020               	movlb	0	; select bank0
 13844  1754  178E               	bsf	14,7	;volatile
 13845  1755                     l7086:	
 13846                           
 13847                           ;LED_B1.c: 95: }
 13848                           ;LED_B1.c: 107: if (led == 99) {
 13849  1755  0875               	movf	setLED@led,w
 13850  1756  3A63               	xorlw	99
 13851  1757  1D03               	skipz
 13852  1758  2F5B               	goto	l7090
 13853                           
 13854                           ;LED_B1.c: 111: RB5 = 1;
 13855  1759  0020               	movlb	0	; select bank0
 13856  175A  168D               	bsf	13,5	;volatile
 13857  175B                     l7090:	
 13858                           
 13859                           ;LED_B1.c: 113: }
 13860                           ;LED_B1.c: 115: }
 13861                           ;LED_B1.c: 116: if (command == 1) {
 13862  175B  0874               	movf	setLED@command,w
 13863  175C  3A01               	xorlw	1
 13864  175D  1D03               	skipz
 13865  175E  2F71               	goto	l7104
 13866                           
 13867                           ;LED_B1.c: 118: if (led == 1) {
 13868  175F  0875               	movf	setLED@led,w
 13869  1760  3A01               	xorlw	1
 13870  1761  1D03               	skipz
 13871  1762  2F65               	goto	l7096
 13872                           
 13873                           ;LED_B1.c: 122: RA3 = 0;
 13874  1763  0020               	movlb	0	; select bank0
 13875  1764  118C               	bcf	12,3	;volatile
 13876  1765                     l7096:	
 13877                           
 13878                           ;LED_B1.c: 124: }
 13879                           ;LED_B1.c: 127: if (led == 2) {
 13880  1765  0875               	movf	setLED@led,w
 13881  1766  3A02               	xorlw	2
 13882  1767  1D03               	skipz
 13883  1768  2F6B               	goto	l7100
 13884                           
 13885                           ;LED_B1.c: 131: RC7 = 0;
 13886  1769  0020               	movlb	0	; select bank0
 13887  176A  138E               	bcf	14,7	;volatile
 13888  176B                     l7100:	
 13889                           
 13890                           ;LED_B1.c: 133: }
 13891                           ;LED_B1.c: 145: if (led == 99) {
 13892  176B  0875               	movf	setLED@led,w
 13893  176C  3A63               	xorlw	99
 13894  176D  1D03               	skipz
 13895  176E  2F71               	goto	l7104
 13896                           
 13897                           ;LED_B1.c: 149: RB5 = 0;
 13898  176F  0020               	movlb	0	; select bank0
 13899  1770  128D               	bcf	13,5	;volatile
 13900  1771                     l7104:	
 13901                           
 13902                           ;LED_B1.c: 151: }
 13903                           ;LED_B1.c: 153: }
 13904                           ;LED_B1.c: 154: if (command == 10) {
 13905  1771  0874               	movf	setLED@command,w
 13906  1772  3A0A               	xorlw	10
 13907  1773  1D03               	skipz
 13908  1774  2F95               	goto	l7120
 13909                           
 13910                           ;LED_B1.c: 155: LED->GO = 0;
 13911  1775  0021               	movlb	1	; select bank1
 13912  1776  0847               	movf	_LED^(0+128),w
 13913  1777  0086               	movwf	6
 13914  1778  3001               	movlw	1	; select bank2/3
 13915  1779  0087               	movwf	7
 13916  177A  1081               	bcf	1,1
 13917                           
 13918                           ;LED_B1.c: 156: LED->Time = 0;
 13919  177B  0A47               	incf	_LED^(0+128),w
 13920  177C  0086               	movwf	6
 13921  177D  3001               	movlw	1	; select bank2/3
 13922  177E  0087               	movwf	7
 13923  177F  3000               	movlw	0
 13924  1780  3FC0               	movwi [0]fsr1
 13925  1781  3FC1               	movwi [1]fsr1
 13926                           
 13927                           ;LED_B1.c: 158: if (led == 1) {
 13928  1782  0875               	movf	setLED@led,w
 13929  1783  3A01               	xorlw	1
 13930  1784  1D03               	skipz
 13931  1785  2F89               	goto	l7112
 13932                           
 13933                           ;LED_B1.c: 162: RA3 = 1;
 13934  1786  0020               	movlb	0	; select bank0
 13935  1787  158C               	bsf	12,3	;volatile
 13936                           
 13937                           ;LED_B1.c: 164: }
 13938  1788  2F8F               	goto	l7116
 13939  1789                     l7112:	
 13940                           
 13941                           ;LED_B1.c: 167: else if (led == 2) {
 13942  1789  0875               	movf	setLED@led,w
 13943  178A  3A02               	xorlw	2
 13944  178B  1D03               	skipz
 13945  178C  2F8F               	goto	l7116
 13946                           
 13947                           ;LED_B1.c: 171: RC7 = 1;
 13948  178D  0020               	movlb	0	; select bank0
 13949  178E  178E               	bsf	14,7	;volatile
 13950  178F                     l7116:	
 13951                           
 13952                           ;LED_B1.c: 173: }
 13953                           ;LED_B1.c: 185: if (led == 99) {
 13954  178F  0875               	movf	setLED@led,w
 13955  1790  3A63               	xorlw	99
 13956  1791  1D03               	skipz
 13957  1792  2F95               	goto	l7120
 13958                           
 13959                           ;LED_B1.c: 189: RB5 = 1;
 13960  1793  0020               	movlb	0	; select bank0
 13961  1794  168D               	bsf	13,5	;volatile
 13962  1795                     l7120:	
 13963                           
 13964                           ;LED_B1.c: 191: }
 13965                           ;LED_B1.c: 193: }
 13966                           ;LED_B1.c: 194: if (command == 11) {
 13967  1795  0874               	movf	setLED@command,w
 13968  1796  3A0B               	xorlw	11
 13969  1797  1D03               	skipz
 13970  1798  0008               	return
 13971                           
 13972                           ;LED_B1.c: 195: LED->GO = 1;
 13973  1799  0021               	movlb	1	; select bank1
 13974  179A  0847               	movf	_LED^(0+128),w
 13975  179B  0086               	movwf	6
 13976  179C  3001               	movlw	1	; select bank2/3
 13977  179D  0087               	movwf	7
 13978  179E  1481               	bsf	1,1
 13979  179F  0008               	return
 13980  17A0                     __end_of_setLED:	
 13981                           
 13982                           	psect	text90
 13983  1EE4                     __ptext90:	
 13984 ;; *************** function _LedPointSelect *****************
 13985 ;; Defined at:
 13986 ;;		line 7 in file "../src/LED_B1.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  led             1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  led             1    3[COMMON] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;Total ram usage:        2 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    3
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_setLED_Initialization
 14011 ;;		_setLED
 14012 ;;		_setLED_Main
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           
 14017                           ;psect for function _LedPointSelect
 14018  1EE4                     _LedPointSelect:	
 14019                           
 14020                           ;incstack = 0
 14021                           ; Regs used in _LedPointSelect: [wreg]
 14022                           ;LedPointSelect@led stored from wreg
 14023  1EE4  00F3               	movwf	LedPointSelect@led
 14024                           
 14025                           ;LED_B1.c: 9: if (led == 1) {
 14026  1EE5  0873               	movf	LedPointSelect@led,w
 14027  1EE6  3A01               	xorlw	1
 14028  1EE7  1D03               	skipz
 14029  1EE8  2EEE               	goto	l1134
 14030                           
 14031                           ;LED_B1.c: 10: LED = &VarLED1;
 14032  1EE9  3067               	movlw	_VarLED1& (0+255)
 14033  1EEA  00F2               	movwf	??_LedPointSelect
 14034  1EEB  0872               	movf	??_LedPointSelect,w
 14035  1EEC  0021               	movlb	1	; select bank1
 14036  1EED  00C7               	movwf	_LED^(0+128)
 14037  1EEE                     l1134:	
 14038                           
 14039                           ;LED_B1.c: 11: }
 14040                           ;LED_B1.c: 14: if (led == 2) {
 14041  1EEE  0873               	movf	LedPointSelect@led,w
 14042  1EEF  3A02               	xorlw	2
 14043  1EF0  1D03               	skipz
 14044  1EF1  2EF7               	goto	l1135
 14045                           
 14046                           ;LED_B1.c: 15: LED = &VarLED2;
 14047  1EF2  306B               	movlw	_VarLED2& (0+255)
 14048  1EF3  00F2               	movwf	??_LedPointSelect
 14049  1EF4  0872               	movf	??_LedPointSelect,w
 14050  1EF5  0021               	movlb	1	; select bank1
 14051  1EF6  00C7               	movwf	_LED^(0+128)
 14052  1EF7                     l1135:	
 14053                           
 14054                           ;LED_B1.c: 16: }
 14055                           ;LED_B1.c: 24: if (led == 99) {
 14056  1EF7  0873               	movf	LedPointSelect@led,w
 14057  1EF8  3A63               	xorlw	99
 14058  1EF9  1D03               	skipz
 14059  1EFA  0008               	return
 14060                           
 14061                           ;LED_B1.c: 25: LED = &VarErrLED;
 14062  1EFB  3063               	movlw	_VarErrLED& (0+255)
 14063  1EFC  00F2               	movwf	??_LedPointSelect
 14064  1EFD  0872               	movf	??_LedPointSelect,w
 14065  1EFE  0021               	movlb	1	; select bank1
 14066  1EFF  00C7               	movwf	_LED^(0+128)
 14067  1F00  0008               	return
 14068  1F01                     __end_of_LedPointSelect:	
 14069                           
 14070                           	psect	text91
 14071  114F                     __ptext91:	
 14072 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14073 ;; Defined at:
 14074 ;;		line 180 in file "../src/Dimmer_B1.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;  lights          1    wreg     unsigned char 
 14077 ;;  command         1    2[COMMON] unsigned char 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  lights          1    4[COMMON] unsigned char 
 14080 ;; Return value:  Size  Location     Type
 14081 ;;		None               void
 14082 ;; Registers used:
 14083 ;;		wreg, status,2, status,0
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;Total ram usage:        3 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    3
 14096 ;; This function calls:
 14097 ;;		Nothing
 14098 ;; This function is called by:
 14099 ;;		_setDimmerLights_OnOff
 14100 ;;		_setRFSW_AdjControl
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           
 14105                           ;psect for function _setDimmerIntr_Dimming_RF
 14106  114F                     _setDimmerIntr_Dimming_RF:	
 14107                           
 14108                           ;incstack = 0
 14109                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14110                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14111  114F  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14112                           
 14113                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14114  1150  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14115  1151  3A01               	xorlw	1
 14116  1152  1D03               	skipz
 14117  1153  2964               	goto	l6688
 14118                           
 14119                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14120  1154  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14121  1155  3A01               	xorlw	1
 14122  1156  3000               	movlw	0
 14123  1157  1903               	skipnz
 14124  1158  3001               	movlw	1
 14125  1159  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14126  115A  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14127  115B  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14128  115C  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14129  115D  0021               	movlb	1	; select bank1
 14130  115E  0862               	movf	_DimmerIntr1^(0+128),w
 14131  115F  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14132  1160  39BF               	andlw	-65
 14133  1161  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14134  1162  00E2               	movwf	_DimmerIntr1^(0+128)
 14135                           
 14136                           ;Dimmer_B1.c: 184: }
 14137  1163  0008               	return
 14138  1164                     l6688:	
 14139                           
 14140                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14141  1164  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14142  1165  3A02               	xorlw	2
 14143  1166  1D03               	skipz
 14144  1167  0008               	return
 14145                           
 14146                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14147  1168  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14148  1169  3A01               	xorlw	1
 14149  116A  3000               	movlw	0
 14150  116B  1903               	skipnz
 14151  116C  3001               	movlw	1
 14152  116D  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14153  116E  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14154  116F  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14155  1170  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14156  1171  0021               	movlb	1	; select bank1
 14157  1172  0869               	movf	_DimmerIntr2^(0+128),w
 14158  1173  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14159  1174  39BF               	andlw	-65
 14160  1175  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14161  1176  00E9               	movwf	_DimmerIntr2^(0+128)
 14162  1177  0008               	return
 14163  1178                     __end_of_setDimmerIntr_Dimming_RF:	
 14164                           
 14165                           	psect	text92
 14166  1D92                     __ptext92:	
 14167 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14168 ;; Defined at:
 14169 ;;		line 48 in file "../src/Dimmer_B1.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  lights          1    wreg     unsigned char 
 14172 ;;  value           1    2[COMMON] unsigned char 
 14173 ;; Auto vars:     Size  Location     Type
 14174 ;;  lights          1    4[COMMON] unsigned char 
 14175 ;; Return value:  Size  Location     Type
 14176 ;;		None               void
 14177 ;; Registers used:
 14178 ;;		wreg
 14179 ;; Tracked objects:
 14180 ;;		On entry : 0/0
 14181 ;;		On exit  : 0/0
 14182 ;;		Unchanged: 0/0
 14183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14184 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14187 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14188 ;;Total ram usage:        3 bytes
 14189 ;; Hardware stack levels used:    1
 14190 ;; Hardware stack levels required when called:    3
 14191 ;; This function calls:
 14192 ;;		Nothing
 14193 ;; This function is called by:
 14194 ;;		_setDimmerLights_OnOff
 14195 ;; This function uses a non-reentrant model
 14196 ;;
 14197                           
 14198                           
 14199                           ;psect for function _setDimmerIntr_DimmingValue
 14200  1D92                     _setDimmerIntr_DimmingValue:	
 14201                           
 14202                           ;incstack = 0
 14203                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14204                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14205  1D92  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14206                           
 14207                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14208  1D93  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14209  1D94  3A01               	xorlw	1
 14210  1D95  1D03               	skipz
 14211  1D96  2D9D               	goto	l7020
 14212                           
 14213                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14214  1D97  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14215  1D98  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14216  1D99  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14217  1D9A  0021               	movlb	1	; select bank1
 14218  1D9B  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 14219                           
 14220                           ;Dimmer_B1.c: 52: }
 14221  1D9C  0008               	return
 14222  1D9D                     l7020:	
 14223                           
 14224                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14225  1D9D  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14226  1D9E  3A02               	xorlw	2
 14227  1D9F  1D03               	skipz
 14228  1DA0  0008               	return
 14229                           
 14230                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14231  1DA1  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14232  1DA2  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14233  1DA3  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14234  1DA4  0021               	movlb	1	; select bank1
 14235  1DA5  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 14236  1DA6  0008               	return
 14237  1DA7                     __end_of_setDimmerIntr_DimmingValue:	
 14238                           
 14239                           	psect	text93
 14240  1126                     __ptext93:	
 14241 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14242 ;; Defined at:
 14243 ;;		line 30 in file "../src/Dimmer_B1.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  lights          1    wreg     unsigned char 
 14246 ;;  command         1    2[COMMON] unsigned char 
 14247 ;; Auto vars:     Size  Location     Type
 14248 ;;  lights          1    4[COMMON] unsigned char 
 14249 ;; Return value:  Size  Location     Type
 14250 ;;		None               void
 14251 ;; Registers used:
 14252 ;;		wreg, status,2, status,0
 14253 ;; Tracked objects:
 14254 ;;		On entry : 0/0
 14255 ;;		On exit  : 0/0
 14256 ;;		Unchanged: 0/0
 14257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14258 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;Total ram usage:        3 bytes
 14263 ;; Hardware stack levels used:    1
 14264 ;; Hardware stack levels required when called:    3
 14265 ;; This function calls:
 14266 ;;		Nothing
 14267 ;; This function is called by:
 14268 ;;		_setDimmerLights_OnOff
 14269 ;; This function uses a non-reentrant model
 14270 ;;
 14271                           
 14272                           
 14273                           ;psect for function _setDimmerIntr_ControlStatus
 14274  1126                     _setDimmerIntr_ControlStatus:	
 14275                           
 14276                           ;incstack = 0
 14277                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14278                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14279  1126  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14280                           
 14281                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14282  1127  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14283  1128  3A01               	xorlw	1
 14284  1129  1D03               	skipz
 14285  112A  293B               	goto	l7012
 14286                           
 14287                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14288  112B  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14289  112C  3A01               	xorlw	1
 14290  112D  3000               	movlw	0
 14291  112E  1903               	skipnz
 14292  112F  3001               	movlw	1
 14293  1130  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14294  1131  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14295  1132  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14296  1133  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14297  1134  0021               	movlb	1	; select bank1
 14298  1135  0862               	movf	_DimmerIntr1^(0+128),w
 14299  1136  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14300  1137  39F7               	andlw	-9
 14301  1138  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14302  1139  00E2               	movwf	_DimmerIntr1^(0+128)
 14303                           
 14304                           ;Dimmer_B1.c: 34: }
 14305  113A  0008               	return
 14306  113B                     l7012:	
 14307                           
 14308                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14309  113B  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14310  113C  3A02               	xorlw	2
 14311  113D  1D03               	skipz
 14312  113E  0008               	return
 14313                           
 14314                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14315  113F  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14316  1140  3A01               	xorlw	1
 14317  1141  3000               	movlw	0
 14318  1142  1903               	skipnz
 14319  1143  3001               	movlw	1
 14320  1144  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14321  1145  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14322  1146  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14323  1147  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14324  1148  0021               	movlb	1	; select bank1
 14325  1149  0869               	movf	_DimmerIntr2^(0+128),w
 14326  114A  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14327  114B  39F7               	andlw	-9
 14328  114C  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14329  114D  00E9               	movwf	_DimmerIntr2^(0+128)
 14330  114E  0008               	return
 14331  114F                     __end_of_setDimmerIntr_ControlStatus:	
 14332                           
 14333                           	psect	text94
 14334  0C22                     __ptext94:	
 14335 ;; *************** function _setDelayOff_GO *****************
 14336 ;; Defined at:
 14337 ;;		line 87 in file "../src/DelayOff_B1.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;  sw              1    wreg     unsigned char 
 14340 ;;  command         1   62[BANK0 ] unsigned char 
 14341 ;;  value           1   63[BANK0 ] unsigned char 
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;  sw              1   69[BANK0 ] unsigned char 
 14344 ;;  k               1   68[BANK0 ] unsigned char 
 14345 ;;  j               1   67[BANK0 ] unsigned char 
 14346 ;;  i               1   66[BANK0 ] unsigned char 
 14347 ;; Return value:  Size  Location     Type
 14348 ;;		None               void
 14349 ;; Registers used:
 14350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14356 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;Total ram usage:        8 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    4
 14363 ;; This function calls:
 14364 ;;		_DelayOffPointSelect
 14365 ;;		___bmul
 14366 ;;		_setProductData
 14367 ;; This function is called by:
 14368 ;;		_setDimmerLights_OnOff
 14369 ;;		_setRFSW_Control
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _setDelayOff_GO
 14375  0C22                     _setDelayOff_GO:	
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14379                           ;setDelayOff_GO@sw stored from wreg
 14380  0C22  0020               	movlb	0	; select bank0
 14381  0C23  00E5               	movwf	setDelayOff_GO@sw
 14382                           
 14383                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14384  0C24  0865               	movf	setDelayOff_GO@sw,w
 14385  0C25  319D  2553  318C   	fcall	_DelayOffPointSelect
 14386                           
 14387                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14388  0C28  0020               	movlb	0	; select bank0
 14389  0C29  085E               	movf	setDelayOff_GO@command,w
 14390  0C2A  3A01               	xorlw	1
 14391  0C2B  3000               	movlw	0
 14392  0C2C  1903               	skipnz
 14393  0C2D  3001               	movlw	1
 14394  0C2E  00E0               	movwf	??_setDelayOff_GO
 14395  0C2F  0021               	movlb	1	; select bank1
 14396  0C30  0844               	movf	_DelayOff^(0+128),w
 14397  0C31  0086               	movwf	6
 14398  0C32  3001               	movlw	1	; select bank2/3
 14399  0C33  0087               	movwf	7
 14400  0C34  0020               	movlb	0	; select bank0
 14401  0C35  0DE0               	rlf	??_setDelayOff_GO,f
 14402  0C36  0801               	movf	1,w
 14403  0C37  0660               	xorwf	??_setDelayOff_GO,w
 14404  0C38  39FD               	andlw	-3
 14405  0C39  0660               	xorwf	??_setDelayOff_GO,w
 14406  0C3A  0081               	movwf	1
 14407                           
 14408                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14409  0C3B  0021               	movlb	1	; select bank1
 14410  0C3C  0844               	movf	_DelayOff^(0+128),w
 14411  0C3D  3E02               	addlw	2
 14412  0C3E  0086               	movwf	6
 14413  0C3F  3001               	movlw	1	; select bank2/3
 14414  0C40  0087               	movwf	7
 14415  0C41  3000               	movlw	0
 14416  0C42  3FC0               	movwi [0]fsr1
 14417  0C43  3FC1               	movwi [1]fsr1
 14418                           
 14419                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14420  0C44  0844               	movf	_DelayOff^(0+128),w
 14421  0C45  3E04               	addlw	4
 14422  0C46  0086               	movwf	6
 14423  0C47  3001               	movlw	1	; select bank2/3
 14424  0C48  0087               	movwf	7
 14425  0C49  0181               	clrf	1
 14426                           
 14427                           ;DelayOff_B1.c: 94: if (command == 1) {
 14428  0C4A  0020               	movlb	0	; select bank0
 14429  0C4B  085E               	movf	setDelayOff_GO@command,w
 14430  0C4C  3A01               	xorlw	1
 14431  0C4D  1D03               	skipz
 14432  0C4E  2CA4               	goto	l6672
 14433                           
 14434                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14435  0C4F  3005               	movlw	5
 14436  0C50  00E0               	movwf	??_setDelayOff_GO
 14437  0C51  0860               	movf	??_setDelayOff_GO,w
 14438  0C52  00E2               	movwf	setDelayOff_GO@i
 14439  0C53  01E3               	clrf	setDelayOff_GO@j
 14440  0C54  01E4               	clrf	setDelayOff_GO@k
 14441                           
 14442                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14443  0C55  300F               	movlw	15
 14444  0C56  055F               	andwf	setDelayOff_GO@value,w
 14445  0C57  00E0               	movwf	??_setDelayOff_GO
 14446  0C58  0860               	movf	??_setDelayOff_GO,w
 14447  0C59  3A05               	xorlw	5
 14448  0C5A  1903               	skipnz
 14449  0C5B  2C60               	goto	l6658
 14450  0C5C  085F               	movf	setDelayOff_GO@value,w
 14451  0C5D  390F               	andlw	15
 14452  0C5E  1D03               	btfss	3,2
 14453  0C5F  2C90               	goto	l6668
 14454  0C60                     l6658:	
 14455  0C60  3031               	movlw	49
 14456  0C61  025F               	subwf	setDelayOff_GO@value,w
 14457  0C62  1803               	skipnc
 14458  0C63  2C90               	goto	l6668
 14459                           
 14460                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14461  0C64  085F               	movf	setDelayOff_GO@value,w
 14462  0C65  390F               	andlw	15
 14463  0C66  00E0               	movwf	??_setDelayOff_GO
 14464  0C67  0860               	movf	??_setDelayOff_GO,w
 14465  0C68  00E3               	movwf	setDelayOff_GO@j
 14466                           
 14467                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14468  0C69  085F               	movf	setDelayOff_GO@value,w
 14469  0C6A  00E0               	movwf	??_setDelayOff_GO
 14470  0C6B  3004               	movlw	4
 14471  0C6C                     u6075:	
 14472  0C6C  36E0               	lsrf	??_setDelayOff_GO,f
 14473  0C6D  0B89               	decfsz	9,f
 14474  0C6E  2C6C               	goto	u6075
 14475  0C6F  0860               	movf	??_setDelayOff_GO,w
 14476  0C70  390F               	andlw	15
 14477  0C71  00E1               	movwf	??_setDelayOff_GO+1
 14478  0C72  0861               	movf	??_setDelayOff_GO+1,w
 14479  0C73  00E4               	movwf	setDelayOff_GO@k
 14480                           
 14481                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14482  0C74  300A               	movlw	10
 14483  0C75  00E0               	movwf	??_setDelayOff_GO
 14484  0C76  0860               	movf	??_setDelayOff_GO,w
 14485  0C77  00F2               	movwf	___bmul@multiplicand
 14486  0C78  0864               	movf	setDelayOff_GO@k,w
 14487  0C79  319C  24C1  318C   	fcall	___bmul
 14488  0C7C  0020               	movlb	0	; select bank0
 14489  0C7D  0763               	addwf	setDelayOff_GO@j,w
 14490  0C7E  00E1               	movwf	??_setDelayOff_GO+1
 14491  0C7F  0021               	movlb	1	; select bank1
 14492  0C80  0A44               	incf	_DelayOff^(0+128),w
 14493  0C81  0086               	movwf	6
 14494  0C82  3001               	movlw	1	; select bank2/3
 14495  0C83  0087               	movwf	7
 14496  0C84  0020               	movlb	0	; select bank0
 14497  0C85  0861               	movf	??_setDelayOff_GO+1,w
 14498  0C86  0081               	movwf	1
 14499                           
 14500                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14501  0C87  085F               	movf	setDelayOff_GO@value,w
 14502  0C88  00E0               	movwf	??_setDelayOff_GO
 14503  0C89  0860               	movf	??_setDelayOff_GO,w
 14504  0C8A  00DA               	movwf	setProductData@value
 14505  0C8B  0865               	movf	setDelayOff_GO@sw,w
 14506  0C8C  3E1A               	addlw	26
 14507  0C8D  319B  23D9         	fcall	_setProductData
 14508                           
 14509                           ;DelayOff_B1.c: 103: } else {
 14510  0C8F  0008               	return
 14511  0C90                     l6668:	
 14512                           
 14513                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14514  0C90  3005               	movlw	5
 14515  0C91  0020               	movlb	0	; select bank0
 14516  0C92  00E0               	movwf	??_setDelayOff_GO
 14517  0C93  0021               	movlb	1	; select bank1
 14518  0C94  0A44               	incf	_DelayOff^(0+128),w
 14519  0C95  0086               	movwf	6
 14520  0C96  3001               	movlw	1	; select bank2/3
 14521  0C97  0087               	movwf	7
 14522  0C98  0020               	movlb	0	; select bank0
 14523  0C99  0860               	movf	??_setDelayOff_GO,w
 14524  0C9A  0081               	movwf	1
 14525                           
 14526                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14527  0C9B  3005               	movlw	5
 14528  0C9C  00E0               	movwf	??_setDelayOff_GO
 14529  0C9D  0860               	movf	??_setDelayOff_GO,w
 14530  0C9E  00DA               	movwf	setProductData@value
 14531  0C9F  0865               	movf	setDelayOff_GO@sw,w
 14532  0CA0  3E1A               	addlw	26
 14533  0CA1  319B  23D9         	fcall	_setProductData
 14534                           
 14535                           ;DelayOff_B1.c: 106: }
 14536                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14537  0CA3  0008               	return
 14538  0CA4                     l6672:	
 14539  0CA4  0020               	movlb	0	; select bank0
 14540  0CA5  08DE               	movf	setDelayOff_GO@command,f
 14541  0CA6  1D03               	skipz
 14542  0CA7  0008               	return
 14543                           
 14544                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14545  0CA8  01DA               	clrf	setProductData@value
 14546  0CA9  0865               	movf	setDelayOff_GO@sw,w
 14547  0CAA  3E1A               	addlw	26
 14548  0CAB  319B  23D9         	fcall	_setProductData
 14549  0CAD  0008               	return
 14550  0CAE                     __end_of_setDelayOff_GO:	
 14551                           
 14552                           	psect	text95
 14553  1CC1                     __ptext95:	
 14554 ;; *************** function ___bmul *****************
 14555 ;; Defined at:
 14556 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  multiplier      1    wreg     unsigned char 
 14559 ;;  multiplicand    1    2[COMMON] unsigned char 
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;  multiplier      1    5[COMMON] unsigned char 
 14562 ;;  product         1    4[COMMON] unsigned char 
 14563 ;; Return value:  Size  Location     Type
 14564 ;;                  1    wreg      unsigned char 
 14565 ;; Registers used:
 14566 ;;		wreg, status,2, status,0
 14567 ;; Tracked objects:
 14568 ;;		On entry : 0/0
 14569 ;;		On exit  : 0/0
 14570 ;;		Unchanged: 0/0
 14571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14572 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;Total ram usage:        4 bytes
 14577 ;; Hardware stack levels used:    1
 14578 ;; Hardware stack levels required when called:    3
 14579 ;; This function calls:
 14580 ;;		Nothing
 14581 ;; This function is called by:
 14582 ;;		_setDelayOff_GO
 14583 ;;		_DelayTimejudge
 14584 ;; This function uses a non-reentrant model
 14585 ;;
 14586                           
 14587                           
 14588                           ;psect for function ___bmul
 14589  1CC1                     ___bmul:	
 14590                           
 14591                           ;incstack = 0
 14592                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14593                           ;___bmul@multiplier stored from wreg
 14594  1CC1  00F5               	movwf	___bmul@multiplier
 14595  1CC2  01F4               	clrf	___bmul@product
 14596  1CC3                     l6314:	
 14597  1CC3  1C75               	btfss	___bmul@multiplier,0
 14598  1CC4  2CC9               	goto	l6318
 14599  1CC5  0872               	movf	___bmul@multiplicand,w
 14600  1CC6  00F3               	movwf	??___bmul
 14601  1CC7  0873               	movf	??___bmul,w
 14602  1CC8  07F4               	addwf	___bmul@product,f
 14603  1CC9                     l6318:	
 14604  1CC9  1003               	clrc
 14605  1CCA  0DF2               	rlf	___bmul@multiplicand,f
 14606  1CCB  1003               	clrc
 14607  1CCC  0CF5               	rrf	___bmul@multiplier,f
 14608  1CCD  08F5               	movf	___bmul@multiplier,f
 14609  1CCE  1D03               	skipz
 14610  1CCF  2CC3               	goto	l6314
 14611  1CD0  0874               	movf	___bmul@product,w
 14612  1CD1  0008               	return
 14613  1CD2                     __end_of___bmul:	
 14614                           
 14615                           	psect	text96
 14616  1D7D                     __ptext96:	
 14617 ;; *************** function _setCmd_Status *****************
 14618 ;; Defined at:
 14619 ;;		line 597 in file "../src/Main_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;  number          1    wreg     unsigned char 
 14622 ;;  cmd             1    2[COMMON] unsigned char 
 14623 ;; Auto vars:     Size  Location     Type
 14624 ;;  number          1    4[COMMON] unsigned char 
 14625 ;; Return value:  Size  Location     Type
 14626 ;;		None               void
 14627 ;; Registers used:
 14628 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14629 ;; Tracked objects:
 14630 ;;		On entry : 0/0
 14631 ;;		On exit  : 0/0
 14632 ;;		Unchanged: 0/0
 14633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14634 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;Total ram usage:        3 bytes
 14639 ;; Hardware stack levels used:    1
 14640 ;; Hardware stack levels required when called:    3
 14641 ;; This function calls:
 14642 ;;		Nothing
 14643 ;; This function is called by:
 14644 ;;		_setDimmerLights_OnOff
 14645 ;;		_setControl_Lights_Table
 14646 ;; This function uses a non-reentrant model
 14647 ;;
 14648                           
 14649                           
 14650                           ;psect for function _setCmd_Status
 14651  1D7D                     _setCmd_Status:	
 14652                           
 14653                           ;incstack = 0
 14654                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14655                           ;setCmd_Status@number stored from wreg
 14656  1D7D  00F4               	movwf	setCmd_Status@number
 14657                           
 14658                           ;Main_B1.c: 598: switch (number) {
 14659  1D7E  2D8C               	goto	l6852
 14660  1D7F                     l6848:	
 14661                           ;Main_B1.c: 599: case 1:
 14662                           
 14663                           
 14664                           ;Main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14665  1D7F  0872               	movf	setCmd_Status@cmd,w
 14666  1D80  3A01               	xorlw	1
 14667  1D81  3000               	movlw	0
 14668  1D82  1903               	skipnz
 14669  1D83  3001               	movlw	1
 14670  1D84  00F3               	movwf	??_setCmd_Status
 14671  1D85  0021               	movlb	1	; select bank1
 14672  1D86  0843               	movf	_Cmd^(0+128),w
 14673  1D87  0673               	xorwf	??_setCmd_Status,w
 14674  1D88  39FE               	andlw	-2
 14675  1D89  0673               	xorwf	??_setCmd_Status,w
 14676  1D8A  00C3               	movwf	_Cmd^(0+128)
 14677                           
 14678                           ;Main_B1.c: 602: }
 14679                           
 14680                           ;Main_B1.c: 601: break;
 14681  1D8B  0008               	return
 14682  1D8C                     l6852:	
 14683  1D8C  0874               	movf	setCmd_Status@number,w
 14684                           
 14685                           ; Switch size 1, requested type "space"
 14686                           ; Number of cases is 1, Range of values is 1 to 1
 14687                           ; switch strategies available:
 14688                           ; Name         Instructions Cycles
 14689                           ; simple_byte            4     3 (average)
 14690                           ; direct_byte           11     9 (fixed)
 14691                           ; jumptable            263     9 (fixed)
 14692                           ;	Chosen strategy is simple_byte
 14693  1D8D  3A01               	xorlw	1	; case 1
 14694  1D8E  1903               	skipnz
 14695  1D8F  2D7F               	goto	l6848
 14696  1D90  2D91               	goto	l1719
 14697  1D91                     l1719:	
 14698  1D91  0008               	return
 14699  1D92                     __end_of_setCmd_Status:	
 14700                           
 14701                           	psect	text97
 14702  1C05                     __ptext97:	
 14703 ;; *************** function _getMain_All_LightsStatus *****************
 14704 ;; Defined at:
 14705 ;;		line 374 in file "../src/Main_B1.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;		None
 14708 ;; Auto vars:     Size  Location     Type
 14709 ;;  status          1    2[COMMON] unsigned char 
 14710 ;; Return value:  Size  Location     Type
 14711 ;;                  1    wreg      unsigned char 
 14712 ;; Registers used:
 14713 ;;		wreg, status,2, status,0
 14714 ;; Tracked objects:
 14715 ;;		On entry : 0/0
 14716 ;;		On exit  : 0/0
 14717 ;;		Unchanged: 0/0
 14718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;Total ram usage:        1 bytes
 14724 ;; Hardware stack levels used:    1
 14725 ;; Hardware stack levels required when called:    3
 14726 ;; This function calls:
 14727 ;;		Nothing
 14728 ;; This function is called by:
 14729 ;;		_DimmerLights_Main
 14730 ;;		_setDimmerLights_Main
 14731 ;;		_setDimmerLights_OnOff
 14732 ;;		_Flash_Memory_Main
 14733 ;;		_Exception_Main
 14734 ;;		_Load_Main
 14735 ;;		_setControl_Lights_Table
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           
 14740                           ;psect for function _getMain_All_LightsStatus
 14741  1C05                     _getMain_All_LightsStatus:	
 14742                           
 14743                           ;Main_B1.c: 375: char status = 0;
 14744                           
 14745                           ;incstack = 0
 14746                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14747  1C05  01F2               	clrf	getMain_All_LightsStatus@status
 14748                           
 14749                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 14750  1C06  3000               	movlw	0
 14751  1C07  0023               	movlb	3	; select bank3
 14752  1C08  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 14753  1C09  3001               	movlw	1
 14754  1C0A  00F2               	movwf	getMain_All_LightsStatus@status
 14755                           
 14756                           ;Main_B1.c: 395: if (status == 0) {
 14757  1C0B  08F2               	movf	getMain_All_LightsStatus@status,f
 14758  1C0C  1D03               	skipz
 14759  1C0D  2C12               	goto	l6842
 14760                           
 14761                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 14762  1C0E  3000               	movlw	0
 14763  1C0F  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 14764  1C10  3001               	movlw	1
 14765  1C11  00F2               	movwf	getMain_All_LightsStatus@status
 14766  1C12                     l6842:	
 14767                           
 14768                           ;Main_B1.c: 397: }
 14769                           ;Main_B1.c: 421: return status;
 14770  1C12  0872               	movf	getMain_All_LightsStatus@status,w
 14771  1C13  0008               	return
 14772  1C14                     __end_of_getMain_All_LightsStatus:	
 14773                           
 14774                           	psect	text98
 14775  0908                     __ptext98:	
 14776 ;; *************** function _getDimmerLights_PercentToValue *****************
 14777 ;; Defined at:
 14778 ;;		line 1026 in file "../src/Dimmer_B1.c"
 14779 ;; Parameters:    Size  Location     Type
 14780 ;;  value           1    wreg     unsigned char 
 14781 ;; Auto vars:     Size  Location     Type
 14782 ;;  value           1   54[BANK0 ] unsigned char 
 14783 ;;  i               3   55[BANK0 ] float 
 14784 ;; Return value:  Size  Location     Type
 14785 ;;                  1    wreg      unsigned char 
 14786 ;; Registers used:
 14787 ;;		wreg, status,2, status,0, pclath, cstack
 14788 ;; Tracked objects:
 14789 ;;		On entry : 0/0
 14790 ;;		On exit  : 0/0
 14791 ;;		Unchanged: 0/0
 14792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;Total ram usage:        6 bytes
 14798 ;; Hardware stack levels used:    1
 14799 ;; Hardware stack levels required when called:    5
 14800 ;; This function calls:
 14801 ;;		___awtoft
 14802 ;;		___ftadd
 14803 ;;		___ftdiv
 14804 ;;		___ftmul
 14805 ;;		___ftneg
 14806 ;;		___fttol
 14807 ;; This function is called by:
 14808 ;;		_setDimmerLights_OnOff
 14809 ;;		_setRFSW_AdjControl
 14810 ;; This function uses a non-reentrant model
 14811 ;;
 14812                           
 14813                           
 14814                           ;psect for function _getDimmerLights_PercentToValue
 14815  0908                     _getDimmerLights_PercentToValue:	
 14816                           
 14817                           ;incstack = 0
 14818                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14819                           ;getDimmerLights_PercentToValue@value stored from wreg
 14820  0908  0020               	movlb	0	; select bank0
 14821  0909  00D6               	movwf	getDimmerLights_PercentToValue@value
 14822                           
 14823                           ;Dimmer_B1.c: 1034: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14824  090A  3000               	movlw	0
 14825  090B  00D7               	movwf	getDimmerLights_PercentToValue@i
 14826  090C  3010               	movlw	16
 14827  090D  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14828  090E  3042               	movlw	66
 14829  090F  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14830                           
 14831                           ;Dimmer_B1.c: 1035: i /= 100;
 14832  0910  3000               	movlw	0
 14833  0911  00A6               	movwf	___ftdiv@f2
 14834  0912  30C8               	movlw	200
 14835  0913  00A7               	movwf	___ftdiv@f2+1
 14836  0914  3042               	movlw	66
 14837  0915  00A8               	movwf	___ftdiv@f2+2
 14838  0916  0857               	movf	getDimmerLights_PercentToValue@i,w
 14839  0917  00A9               	movwf	___ftdiv@f1
 14840  0918  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14841  0919  00AA               	movwf	___ftdiv@f1+1
 14842  091A  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14843  091B  00AB               	movwf	___ftdiv@f1+2
 14844  091C  318D  253B  3189   	fcall	___ftdiv
 14845  091F  0020               	movlb	0	; select bank0
 14846  0920  0826               	movf	?___ftdiv,w
 14847  0921  00D7               	movwf	getDimmerLights_PercentToValue@i
 14848  0922  0827               	movf	?___ftdiv+1,w
 14849  0923  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14850  0924  0828               	movf	?___ftdiv+2,w
 14851  0925  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14852                           
 14853                           ;Dimmer_B1.c: 1037: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14854  0926  0856               	movf	getDimmerLights_PercentToValue@value,w
 14855  0927  00D4               	movwf	??_getDimmerLights_PercentToValue
 14856  0928  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14857  0929  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14858  092A  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14859  092B  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14860  092C  1903               	skipnz
 14861  092D  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14862  092E  0854               	movf	??_getDimmerLights_PercentToValue,w
 14863  092F  3E64               	addlw	100
 14864  0930  00A0               	movwf	___awtoft@c
 14865  0931  3000               	movlw	0
 14866  0932  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14867  0933  00A1               	movwf	___awtoft@c+1
 14868  0934  319F  27DE  3189   	fcall	___awtoft
 14869  0937  0020               	movlb	0	; select bank0
 14870  0938  0820               	movf	?___awtoft,w
 14871  0939  00A9               	movwf	___ftmul@f2
 14872  093A  0821               	movf	?___awtoft+1,w
 14873  093B  00AA               	movwf	___ftmul@f2+1
 14874  093C  0822               	movf	?___awtoft+2,w
 14875  093D  00AB               	movwf	___ftmul@f2+2
 14876  093E  0857               	movf	getDimmerLights_PercentToValue@i,w
 14877  093F  00A6               	movwf	___ftmul@f1
 14878  0940  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14879  0941  00A7               	movwf	___ftmul@f1+1
 14880  0942  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14881  0943  00A8               	movwf	___ftmul@f1+2
 14882  0944  318E  2696  3189   	fcall	___ftmul
 14883  0947  0020               	movlb	0	; select bank0
 14884  0948  0826               	movf	?___ftmul,w
 14885  0949  00B6               	movwf	___ftneg@f1
 14886  094A  0827               	movf	?___ftmul+1,w
 14887  094B  00B7               	movwf	___ftneg@f1+1
 14888  094C  0828               	movf	?___ftmul+2,w
 14889  094D  00B8               	movwf	___ftneg@f1+2
 14890  094E  319B  2321  3189   	fcall	___ftneg
 14891  0951  0020               	movlb	0	; select bank0
 14892  0952  0836               	movf	?___ftneg,w
 14893  0953  00BC               	movwf	___ftadd@f2
 14894  0954  0837               	movf	?___ftneg+1,w
 14895  0955  00BD               	movwf	___ftadd@f2+1
 14896  0956  0838               	movf	?___ftneg+2,w
 14897  0957  00BE               	movwf	___ftadd@f2+2
 14898  0958  3000               	movlw	0
 14899  0959  00B9               	movwf	___ftadd@f1
 14900  095A  3050               	movlw	80
 14901  095B  00BA               	movwf	___ftadd@f1+1
 14902  095C  3042               	movlw	66
 14903  095D  00BB               	movwf	___ftadd@f1+2
 14904  095E  3183  235A  3189   	fcall	___ftadd
 14905  0961  0020               	movlb	0	; select bank0
 14906  0962  0839               	movf	?___ftadd,w
 14907  0963  00C6               	movwf	___fttol@f1
 14908  0964  083A               	movf	?___ftadd+1,w
 14909  0965  00C7               	movwf	___fttol@f1+1
 14910  0966  083B               	movf	?___ftadd+2,w
 14911  0967  00C8               	movwf	___fttol@f1+2
 14912  0968  318B  239B         	fcall	___fttol
 14913  096A  0020               	movlb	0	; select bank0
 14914  096B  0846               	movf	?___fttol,w
 14915  096C  0008               	return
 14916  096D                     __end_of_getDimmerLights_PercentToValue:	
 14917                           
 14918                           	psect	text99
 14919  0E96                     __ptext99:	
 14920 ;; *************** function ___ftmul *****************
 14921 ;; Defined at:
 14922 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14923 ;; Parameters:    Size  Location     Type
 14924 ;;  f1              3    6[BANK0 ] float 
 14925 ;;  f2              3    9[BANK0 ] float 
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14928 ;;  sign            1   21[BANK0 ] unsigned char 
 14929 ;;  cntr            1   20[BANK0 ] unsigned char 
 14930 ;;  exp             1   16[BANK0 ] unsigned char 
 14931 ;; Return value:  Size  Location     Type
 14932 ;;                  3    6[BANK0 ] float 
 14933 ;; Registers used:
 14934 ;;		wreg, status,2, status,0, pclath, cstack
 14935 ;; Tracked objects:
 14936 ;;		On entry : 0/0
 14937 ;;		On exit  : 0/0
 14938 ;;		Unchanged: 0/0
 14939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14940 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14941 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;Total ram usage:       16 bytes
 14945 ;; Hardware stack levels used:    1
 14946 ;; Hardware stack levels required when called:    4
 14947 ;; This function calls:
 14948 ;;		___ftpack
 14949 ;; This function is called by:
 14950 ;;		_getDimmerLights_PercentToValue
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           
 14955                           ;psect for function ___ftmul
 14956  0E96                     ___ftmul:	
 14957                           
 14958                           ;incstack = 0
 14959                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14960  0E96  0020               	movlb	0	; select bank0
 14961  0E97  0826               	movf	___ftmul@f1,w
 14962  0E98  00AC               	movwf	??___ftmul
 14963  0E99  0827               	movf	___ftmul@f1+1,w
 14964  0E9A  00AD               	movwf	??___ftmul+1
 14965  0E9B  0828               	movf	___ftmul@f1+2,w
 14966  0E9C  00AE               	movwf	??___ftmul+2
 14967  0E9D  1003               	clrc
 14968  0E9E  0D2D               	rlf	??___ftmul+1,w
 14969  0E9F  0D2E               	rlf	??___ftmul+2,w
 14970  0EA0  00AF               	movwf	??___ftmul+3
 14971  0EA1  082F               	movf	??___ftmul+3,w
 14972  0EA2  00B0               	movwf	___ftmul@exp
 14973  0EA3  08B0               	movf	___ftmul@exp,f
 14974  0EA4  1D03               	skipz
 14975  0EA5  2EAD               	goto	l6460
 14976  0EA6  3000               	movlw	0
 14977  0EA7  00A6               	movwf	?___ftmul
 14978  0EA8  3000               	movlw	0
 14979  0EA9  00A7               	movwf	?___ftmul+1
 14980  0EAA  3000               	movlw	0
 14981  0EAB  00A8               	movwf	?___ftmul+2
 14982  0EAC  0008               	return
 14983  0EAD                     l6460:	
 14984  0EAD  0829               	movf	___ftmul@f2,w
 14985  0EAE  00AC               	movwf	??___ftmul
 14986  0EAF  082A               	movf	___ftmul@f2+1,w
 14987  0EB0  00AD               	movwf	??___ftmul+1
 14988  0EB1  082B               	movf	___ftmul@f2+2,w
 14989  0EB2  00AE               	movwf	??___ftmul+2
 14990  0EB3  1003               	clrc
 14991  0EB4  0D2D               	rlf	??___ftmul+1,w
 14992  0EB5  0D2E               	rlf	??___ftmul+2,w
 14993  0EB6  00AF               	movwf	??___ftmul+3
 14994  0EB7  082F               	movf	??___ftmul+3,w
 14995  0EB8  00B5               	movwf	___ftmul@sign
 14996  0EB9  08B5               	movf	___ftmul@sign,f
 14997  0EBA  1D03               	skipz
 14998  0EBB  2EC3               	goto	l6466
 14999  0EBC  3000               	movlw	0
 15000  0EBD  00A6               	movwf	?___ftmul
 15001  0EBE  3000               	movlw	0
 15002  0EBF  00A7               	movwf	?___ftmul+1
 15003  0EC0  3000               	movlw	0
 15004  0EC1  00A8               	movwf	?___ftmul+2
 15005  0EC2  0008               	return
 15006  0EC3                     l6466:	
 15007  0EC3  0835               	movf	___ftmul@sign,w
 15008  0EC4  3E7B               	addlw	123
 15009  0EC5  00AC               	movwf	??___ftmul
 15010  0EC6  082C               	movf	??___ftmul,w
 15011  0EC7  07B0               	addwf	___ftmul@exp,f
 15012  0EC8  0826               	movf	___ftmul@f1,w
 15013  0EC9  00AC               	movwf	??___ftmul
 15014  0ECA  0827               	movf	___ftmul@f1+1,w
 15015  0ECB  00AD               	movwf	??___ftmul+1
 15016  0ECC  0828               	movf	___ftmul@f1+2,w
 15017  0ECD  00AE               	movwf	??___ftmul+2
 15018  0ECE  3010               	movlw	16
 15019  0ECF                     u5665:	
 15020  0ECF  36AE               	lsrf	??___ftmul+2,f
 15021  0ED0  0CAD               	rrf	??___ftmul+1,f
 15022  0ED1  0CAC               	rrf	??___ftmul,f
 15023  0ED2  0B89               	decfsz	9,f
 15024  0ED3  2ECF               	goto	u5665
 15025  0ED4  082C               	movf	??___ftmul,w
 15026  0ED5  00AF               	movwf	??___ftmul+3
 15027  0ED6  082F               	movf	??___ftmul+3,w
 15028  0ED7  00B5               	movwf	___ftmul@sign
 15029  0ED8  0829               	movf	___ftmul@f2,w
 15030  0ED9  00AC               	movwf	??___ftmul
 15031  0EDA  082A               	movf	___ftmul@f2+1,w
 15032  0EDB  00AD               	movwf	??___ftmul+1
 15033  0EDC  082B               	movf	___ftmul@f2+2,w
 15034  0EDD  00AE               	movwf	??___ftmul+2
 15035  0EDE  3010               	movlw	16
 15036  0EDF                     u5675:	
 15037  0EDF  36AE               	lsrf	??___ftmul+2,f
 15038  0EE0  0CAD               	rrf	??___ftmul+1,f
 15039  0EE1  0CAC               	rrf	??___ftmul,f
 15040  0EE2  0B89               	decfsz	9,f
 15041  0EE3  2EDF               	goto	u5675
 15042  0EE4  082C               	movf	??___ftmul,w
 15043  0EE5  00AF               	movwf	??___ftmul+3
 15044  0EE6  082F               	movf	??___ftmul+3,w
 15045  0EE7  06B5               	xorwf	___ftmul@sign,f
 15046  0EE8  3080               	movlw	128
 15047  0EE9  00AC               	movwf	??___ftmul
 15048  0EEA  082C               	movf	??___ftmul,w
 15049  0EEB  05B5               	andwf	___ftmul@sign,f
 15050  0EEC  17A7               	bsf	___ftmul@f1+1,7
 15051  0EED  17AA               	bsf	___ftmul@f2+1,7
 15052  0EEE  30FF               	movlw	255
 15053  0EEF  05A9               	andwf	___ftmul@f2,f
 15054  0EF0  30FF               	movlw	255
 15055  0EF1  05AA               	andwf	___ftmul@f2+1,f
 15056  0EF2  3000               	movlw	0
 15057  0EF3  05AB               	andwf	___ftmul@f2+2,f
 15058  0EF4  3000               	movlw	0
 15059  0EF5  00B1               	movwf	___ftmul@f3_as_product
 15060  0EF6  3000               	movlw	0
 15061  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 15062  0EF8  3000               	movlw	0
 15063  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 15064  0EFA  3007               	movlw	7
 15065  0EFB  00AC               	movwf	??___ftmul
 15066  0EFC  082C               	movf	??___ftmul,w
 15067  0EFD  00B4               	movwf	___ftmul@cntr
 15068  0EFE                     l6478:	
 15069  0EFE  1C26               	btfss	___ftmul@f1,0
 15070  0EFF  2F06               	goto	l6482
 15071  0F00  0829               	movf	___ftmul@f2,w
 15072  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 15073  0F02  082A               	movf	___ftmul@f2+1,w
 15074  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15075  0F04  082B               	movf	___ftmul@f2+2,w
 15076  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15077  0F06                     l6482:	
 15078  0F06  3001               	movlw	1
 15079  0F07                     u5695:	
 15080  0F07  36A8               	lsrf	___ftmul@f1+2,f
 15081  0F08  0CA7               	rrf	___ftmul@f1+1,f
 15082  0F09  0CA6               	rrf	___ftmul@f1,f
 15083  0F0A  0B89               	decfsz	9,f
 15084  0F0B  2F07               	goto	u5695
 15085  0F0C  3001               	movlw	1
 15086  0F0D                     u5705:	
 15087  0F0D  35A9               	lslf	___ftmul@f2,f
 15088  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 15089  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 15090  0F10  0B89               	decfsz	9,f
 15091  0F11  2F0D               	goto	u5705
 15092  0F12  3001               	movlw	1
 15093  0F13  02B4               	subwf	___ftmul@cntr,f
 15094  0F14  1D03               	btfss	3,2
 15095  0F15  2EFE               	goto	l6478
 15096  0F16  3009               	movlw	9
 15097  0F17  00AC               	movwf	??___ftmul
 15098  0F18  082C               	movf	??___ftmul,w
 15099  0F19  00B4               	movwf	___ftmul@cntr
 15100  0F1A                     l6490:	
 15101  0F1A  1C26               	btfss	___ftmul@f1,0
 15102  0F1B  2F22               	goto	l6494
 15103  0F1C  0829               	movf	___ftmul@f2,w
 15104  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 15105  0F1E  082A               	movf	___ftmul@f2+1,w
 15106  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15107  0F20  082B               	movf	___ftmul@f2+2,w
 15108  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15109  0F22                     l6494:	
 15110  0F22  3001               	movlw	1
 15111  0F23                     u5735:	
 15112  0F23  36A8               	lsrf	___ftmul@f1+2,f
 15113  0F24  0CA7               	rrf	___ftmul@f1+1,f
 15114  0F25  0CA6               	rrf	___ftmul@f1,f
 15115  0F26  0B89               	decfsz	9,f
 15116  0F27  2F23               	goto	u5735
 15117  0F28  3001               	movlw	1
 15118  0F29                     u5745:	
 15119  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 15120  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 15121  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 15122  0F2C  0B89               	decfsz	9,f
 15123  0F2D  2F29               	goto	u5745
 15124  0F2E  3001               	movlw	1
 15125  0F2F  02B4               	subwf	___ftmul@cntr,f
 15126  0F30  1D03               	btfss	3,2
 15127  0F31  2F1A               	goto	l6490
 15128  0F32  0831               	movf	___ftmul@f3_as_product,w
 15129  0F33  00F2               	movwf	___ftpack@arg
 15130  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 15131  0F35  00F3               	movwf	___ftpack@arg+1
 15132  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 15133  0F37  00F4               	movwf	___ftpack@arg+2
 15134  0F38  0830               	movf	___ftmul@exp,w
 15135  0F39  00AC               	movwf	??___ftmul
 15136  0F3A  082C               	movf	??___ftmul,w
 15137  0F3B  00F5               	movwf	___ftpack@exp
 15138  0F3C  0835               	movf	___ftmul@sign,w
 15139  0F3D  00AD               	movwf	??___ftmul+1
 15140  0F3E  082D               	movf	??___ftmul+1,w
 15141  0F3F  00F6               	movwf	___ftpack@sign
 15142  0F40  3197  27A0         	fcall	___ftpack
 15143  0F42  0872               	movf	?___ftpack,w
 15144  0F43  0020               	movlb	0	; select bank0
 15145  0F44  00A6               	movwf	?___ftmul
 15146  0F45  0873               	movf	?___ftpack+1,w
 15147  0F46  00A7               	movwf	?___ftmul+1
 15148  0F47  0874               	movf	?___ftpack+2,w
 15149  0F48  00A8               	movwf	?___ftmul+2
 15150  0F49  0008               	return
 15151  0F4A                     __end_of___ftmul:	
 15152                           
 15153                           	psect	text100
 15154  1BF6                     __ptext100:	
 15155 ;; *************** function _getDelayOff_GO *****************
 15156 ;; Defined at:
 15157 ;;		line 114 in file "../src/DelayOff_B1.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  sw              1    wreg     unsigned char 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  sw              1    4[COMMON] unsigned char 
 15162 ;;  go              1    5[COMMON] unsigned char 
 15163 ;; Return value:  Size  Location     Type
 15164 ;;                  1    wreg      unsigned char 
 15165 ;; Registers used:
 15166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15167 ;; Tracked objects:
 15168 ;;		On entry : 0/0
 15169 ;;		On exit  : 0/0
 15170 ;;		Unchanged: 0/0
 15171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;Total ram usage:        2 bytes
 15177 ;; Hardware stack levels used:    1
 15178 ;; Hardware stack levels required when called:    4
 15179 ;; This function calls:
 15180 ;;		_DelayOffPointSelect
 15181 ;; This function is called by:
 15182 ;;		_setDimmerLights_OnOff
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           
 15187                           ;psect for function _getDelayOff_GO
 15188  1BF6                     _getDelayOff_GO:	
 15189                           
 15190                           ;incstack = 0
 15191                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15192                           ;getDelayOff_GO@sw stored from wreg
 15193  1BF6  00F4               	movwf	getDelayOff_GO@sw
 15194                           
 15195                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15196  1BF7  0874               	movf	getDelayOff_GO@sw,w
 15197  1BF8  319D  2553         	fcall	_DelayOffPointSelect
 15198                           
 15199                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15200  1BFA  0021               	movlb	1	; select bank1
 15201  1BFB  0844               	movf	_DelayOff^(0+128),w
 15202  1BFC  0086               	movwf	6
 15203  1BFD  3001               	movlw	1	; select bank2/3
 15204  1BFE  0087               	movwf	7
 15205  1BFF  3000               	movlw	0
 15206  1C00  1881               	btfsc	1,1
 15207  1C01  3001               	movlw	1
 15208  1C02  00F5               	movwf	getDelayOff_GO@go
 15209                           
 15210                           ;DelayOff_B1.c: 117: return go;
 15211  1C03  0875               	movf	getDelayOff_GO@go,w
 15212  1C04  0008               	return
 15213  1C05                     __end_of_getDelayOff_GO:	
 15214                           
 15215                           	psect	text101
 15216  1C51                     __ptext101:	
 15217 ;; *************** function _getCmd_Status *****************
 15218 ;; Defined at:
 15219 ;;		line 605 in file "../src/Main_B1.c"
 15220 ;; Parameters:    Size  Location     Type
 15221 ;;  number          1    wreg     unsigned char 
 15222 ;; Auto vars:     Size  Location     Type
 15223 ;;  number          1    2[COMMON] unsigned char 
 15224 ;;  cmd             1    3[COMMON] unsigned char 
 15225 ;; Return value:  Size  Location     Type
 15226 ;;                  1    wreg      unsigned char 
 15227 ;; Registers used:
 15228 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15229 ;; Tracked objects:
 15230 ;;		On entry : 0/0
 15231 ;;		On exit  : 0/0
 15232 ;;		Unchanged: 0/0
 15233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;Total ram usage:        2 bytes
 15239 ;; Hardware stack levels used:    1
 15240 ;; Hardware stack levels required when called:    3
 15241 ;; This function calls:
 15242 ;;		Nothing
 15243 ;; This function is called by:
 15244 ;;		_setDimmerLights_OnOff
 15245 ;; This function uses a non-reentrant model
 15246 ;;
 15247                           
 15248                           
 15249                           ;psect for function _getCmd_Status
 15250  1C51                     _getCmd_Status:	
 15251                           
 15252                           ;incstack = 0
 15253                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15254                           ;getCmd_Status@number stored from wreg
 15255  1C51  00F2               	movwf	getCmd_Status@number
 15256                           
 15257                           ;Main_B1.c: 606: char cmd = 0;
 15258  1C52  01F3               	clrf	getCmd_Status@cmd
 15259                           
 15260                           ;Main_B1.c: 607: switch (number) {
 15261  1C53  2C5A               	goto	l7148
 15262  1C54                     l7144:	
 15263                           ;Main_B1.c: 608: case 1:
 15264                           
 15265                           
 15266                           ;Main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 15267  1C54  3000               	movlw	0
 15268  1C55  0021               	movlb	1	; select bank1
 15269  1C56  1843               	btfsc	_Cmd^(0+128),0
 15270  1C57  3001               	movlw	1
 15271  1C58  00F3               	movwf	getCmd_Status@cmd
 15272                           
 15273                           ;Main_B1.c: 611: }
 15274                           
 15275                           ;Main_B1.c: 610: break;
 15276  1C59  2C5F               	goto	l7150
 15277  1C5A                     l7148:	
 15278  1C5A  0872               	movf	getCmd_Status@number,w
 15279                           
 15280                           ; Switch size 1, requested type "space"
 15281                           ; Number of cases is 1, Range of values is 1 to 1
 15282                           ; switch strategies available:
 15283                           ; Name         Instructions Cycles
 15284                           ; simple_byte            4     3 (average)
 15285                           ; direct_byte           11     9 (fixed)
 15286                           ; jumptable            263     9 (fixed)
 15287                           ;	Chosen strategy is simple_byte
 15288  1C5B  3A01               	xorlw	1	; case 1
 15289  1C5C  1903               	skipnz
 15290  1C5D  2C54               	goto	l7144
 15291  1C5E  2C5F               	goto	l7150
 15292  1C5F                     l7150:	
 15293                           
 15294                           ;Main_B1.c: 612: return cmd;
 15295  1C5F  0873               	movf	getCmd_Status@cmd,w
 15296  1C60  0008               	return
 15297  1C61                     __end_of_getCmd_Status:	
 15298                           
 15299                           	psect	text102
 15300  148F                     __ptext102:	
 15301 ;; *************** function _setDimmerLights_Dimming *****************
 15302 ;; Defined at:
 15303 ;;		line 864 in file "../src/Dimmer_B1.c"
 15304 ;; Parameters:    Size  Location     Type
 15305 ;;  lights          1    wreg     unsigned char 
 15306 ;;  status          1   67[BANK0 ] unsigned char 
 15307 ;; Auto vars:     Size  Location     Type
 15308 ;;  lights          1   69[BANK0 ] unsigned char 
 15309 ;; Return value:  Size  Location     Type
 15310 ;;		None               void
 15311 ;; Registers used:
 15312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15313 ;; Tracked objects:
 15314 ;;		On entry : 0/0
 15315 ;;		On exit  : 0/0
 15316 ;;		Unchanged: 0/0
 15317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15318 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;Total ram usage:        3 bytes
 15323 ;; Hardware stack levels used:    1
 15324 ;; Hardware stack levels required when called:    6
 15325 ;; This function calls:
 15326 ;;		_getDimmerIntr_DimmingValue
 15327 ;;		_getDimmerLights_ValueToPercent
 15328 ;;		_setBuz
 15329 ;;		_setDimmerIntr_Dimming_Sw
 15330 ;;		_setDimmerIntr_MaxmumValue
 15331 ;;		_setDimmerLights_Line
 15332 ;;		_setProductData
 15333 ;;		_setRF_DimmerLights
 15334 ;;		_setRF_TransceiveGO
 15335 ;;		_setTxData
 15336 ;; This function is called by:
 15337 ;;		_setDimmerLights_Main
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           
 15342                           ;psect for function _setDimmerLights_Dimming
 15343  148F                     _setDimmerLights_Dimming:	
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15347                           ;setDimmerLights_Dimming@lights stored from wreg
 15348  148F  0020               	movlb	0	; select bank0
 15349  1490  00E5               	movwf	setDimmerLights_Dimming@lights
 15350                           
 15351                           ;Dimmer_B1.c: 865: if (status == 1) {
 15352  1491  0863               	movf	setDimmerLights_Dimming@status,w
 15353  1492  3A01               	xorlw	1
 15354  1493  1D03               	skipz
 15355  1494  2CA8               	goto	l9556
 15356                           
 15357                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 15358  1495  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15359  1496  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15360  1497  0865               	movf	setDimmerLights_Dimming@lights,w
 15361  1498  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15362                           
 15363                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 15364  149B  3000               	movlw	0
 15365  149C  319C  2441  3194   	fcall	_setRF_TransceiveGO
 15366                           
 15367                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 15368  149F  3064               	movlw	100
 15369  14A0  0020               	movlb	0	; select bank0
 15370  14A1  00A4               	movwf	setBuz@time
 15371  14A2  3000               	movlw	0
 15372  14A3  00A5               	movwf	setBuz@time+1
 15373  14A4  3001               	movlw	1
 15374  14A5  3195  2584         	fcall	_setBuz
 15375                           
 15376                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 15377  14A7  0008               	return
 15378  14A8                     l9556:	
 15379  14A8  0020               	movlb	0	; select bank0
 15380  14A9  08E3               	movf	setDimmerLights_Dimming@status,f
 15381  14AA  1D03               	skipz
 15382  14AB  0008               	return
 15383                           
 15384                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 15385  14AC  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15386  14AD  0865               	movf	setDimmerLights_Dimming@lights,w
 15387  14AE  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15388                           
 15389                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 15390  14B1  0021               	movlb	1	; select bank1
 15391  14B2  113A               	bcf	_Dimmer^(0+128),2	;volatile
 15392                           
 15393                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 15394  14B3  0020               	movlb	0	; select bank0
 15395  14B4  0865               	movf	setDimmerLights_Dimming@lights,w
 15396  14B5  319C  24F4  3194   	fcall	_setDimmerLights_Line
 15397                           
 15398                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15399  14B8  0020               	movlb	0	; select bank0
 15400  14B9  0865               	movf	setDimmerLights_Dimming@lights,w
 15401  14BA  319D  252B  3194   	fcall	_getDimmerIntr_DimmingValue
 15402  14BD  0020               	movlb	0	; select bank0
 15403  14BE  00E4               	movwf	??_setDimmerLights_Dimming
 15404  14BF  0864               	movf	??_setDimmerLights_Dimming,w
 15405  14C0  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15406  14C1  0865               	movf	setDimmerLights_Dimming@lights,w
 15407  14C2  319D  25FC  3194   	fcall	_setDimmerIntr_MaxmumValue
 15408                           
 15409                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15410  14C5  0020               	movlb	0	; select bank0
 15411  14C6  0865               	movf	setDimmerLights_Dimming@lights,w
 15412  14C7  319D  252B  3194   	fcall	_getDimmerIntr_DimmingValue
 15413  14CA  3188  20A3  3194   	fcall	_getDimmerLights_ValueToPercent
 15414  14CD  0020               	movlb	0	; select bank0
 15415  14CE  00E4               	movwf	??_setDimmerLights_Dimming
 15416  14CF  0864               	movf	??_setDimmerLights_Dimming,w
 15417  14D0  00DA               	movwf	setProductData@value
 15418  14D1  0865               	movf	setDimmerLights_Dimming@lights,w
 15419  14D2  3E14               	addlw	20
 15420  14D3  319B  23D9  3194   	fcall	_setProductData
 15421                           
 15422                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 15423  14D6  0020               	movlb	0	; select bank0
 15424  14D7  01DE               	clrf	setRF_DimmerLights@on
 15425  14D8  0ADE               	incf	setRF_DimmerLights@on,f
 15426  14D9  0865               	movf	setDimmerLights_Dimming@lights,w
 15427  14DA  3196  26E2  3194   	fcall	_setRF_DimmerLights
 15428                           
 15429                           ;Dimmer_B1.c: 892: setTxData();
 15430  14DD  318F  274A         	fcall	_setTxData
 15431  14DF  0008               	return
 15432  14E0                     __end_of_setDimmerLights_Dimming:	
 15433                           
 15434                           	psect	text103
 15435  0F4A                     __ptext103:	
 15436 ;; *************** function _setTxData *****************
 15437 ;; Defined at:
 15438 ;;		line 183 in file "../src/RF_Control_B1.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;		None
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;  i               1    0        unsigned char 
 15443 ;; Return value:  Size  Location     Type
 15444 ;;		None               void
 15445 ;; Registers used:
 15446 ;;		wreg, fsr1l, fsr1h, status,2
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;Total ram usage:        1 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; Hardware stack levels required when called:    3
 15459 ;; This function calls:
 15460 ;;		Nothing
 15461 ;; This function is called by:
 15462 ;;		_setDimmerLights_OnOff
 15463 ;;		_setDimmerLights_Dimming
 15464 ;;		_getRxData
 15465 ;;		_setControl_Lights_Table
 15466 ;;		_setRFSW_Control
 15467 ;;		_setRFSW_AdjControl
 15468 ;; This function uses a non-reentrant model
 15469 ;;
 15470                           
 15471                           
 15472                           ;psect for function _setTxData
 15473  0F4A                     _setTxData:	
 15474                           
 15475                           ;RF_Control_B1.c: 184: char i;
 15476                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15477                           
 15478                           ;incstack = 0
 15479                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15480  0F4A  0021               	movlb	1	; select bank1
 15481  0F4B  1C20               	btfss	_RF1^(0+128),0
 15482  0F4C  0008               	return
 15483                           
 15484                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15485  0F4D  1520               	bsf	_RF1^(0+128),2
 15486                           
 15487                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15488  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15489  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15490                           
 15491                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15492  0F50  3063               	movlw	99
 15493  0F51  00F2               	movwf	??_setTxData
 15494  0F52  0872               	movf	??_setTxData,w
 15495  0F53  0023               	movlb	3	; select bank3
 15496  0F54  00A0               	movwf	_RF_Data^(0+384)
 15497                           
 15498                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15499  0F55  3002               	movlw	2
 15500  0F56  00F2               	movwf	??_setTxData
 15501  0F57  0872               	movf	??_setTxData,w
 15502  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15503                           
 15504                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15505  0F59  0020               	movlb	0	; select bank0
 15506  0F5A  086D               	movf	_product,w
 15507  0F5B  0086               	movwf	6
 15508  0F5C  3002               	movlw	2	; select bank4/5
 15509  0F5D  0087               	movwf	7
 15510  0F5E  3002               	movlw	2	; select bank4/5
 15511  0F5F  3F42               	moviw [2]fsr1
 15512  0F60  0023               	movlb	3	; select bank3
 15513  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15514                           
 15515                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15516  0F62  0020               	movlb	0	; select bank0
 15517  0F63  086D               	movf	_product,w
 15518  0F64  0086               	movwf	6
 15519  0F65  3002               	movlw	2	; select bank4/5
 15520  0F66  0087               	movwf	7
 15521  0F67  3002               	movlw	2	; select bank4/5
 15522  0F68  3F43               	moviw [3]fsr1
 15523  0F69  0023               	movlb	3	; select bank3
 15524  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15525                           
 15526                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15527  0F6B  0020               	movlb	0	; select bank0
 15528  0F6C  086D               	movf	_product,w
 15529  0F6D  0086               	movwf	6
 15530  0F6E  3002               	movlw	2	; select bank4/5
 15531  0F6F  0087               	movwf	7
 15532  0F70  3002               	movlw	2	; select bank4/5
 15533  0F71  3F44               	moviw [4]fsr1
 15534  0F72  0023               	movlb	3	; select bank3
 15535  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15536                           
 15537                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15538  0F74  0020               	movlb	0	; select bank0
 15539  0F75  086D               	movf	_product,w
 15540  0F76  0086               	movwf	6
 15541  0F77  3002               	movlw	2	; select bank4/5
 15542  0F78  0087               	movwf	7
 15543  0F79  3002               	movlw	2	; select bank4/5
 15544  0F7A  3F45               	moviw [5]fsr1
 15545  0F7B  0023               	movlb	3	; select bank3
 15546  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15547                           
 15548                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15549  0F7D  0020               	movlb	0	; select bank0
 15550  0F7E  086D               	movf	_product,w
 15551  0F7F  0086               	movwf	6
 15552  0F80  3002               	movlw	2	; select bank4/5
 15553  0F81  0087               	movwf	7
 15554  0F82  3002               	movlw	2	; select bank4/5
 15555  0F83  3F46               	moviw [6]fsr1
 15556  0F84  0023               	movlb	3	; select bank3
 15557  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15558                           
 15559                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15560  0F86  0020               	movlb	0	; select bank0
 15561  0F87  086D               	movf	_product,w
 15562  0F88  0086               	movwf	6
 15563  0F89  3002               	movlw	2	; select bank4/5
 15564  0F8A  0087               	movwf	7
 15565  0F8B  3002               	movlw	2	; select bank4/5
 15566  0F8C  3F47               	moviw [7]fsr1
 15567  0F8D  0023               	movlb	3	; select bank3
 15568  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15569                           
 15570                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15571  0F8F  0020               	movlb	0	; select bank0
 15572  0F90  086D               	movf	_product,w
 15573  0F91  0086               	movwf	6
 15574  0F92  3002               	movlw	2	; select bank4/5
 15575  0F93  0087               	movwf	7
 15576  0F94  3002               	movlw	2	; select bank4/5
 15577  0F95  3F48               	moviw [8]fsr1
 15578  0F96  0023               	movlb	3	; select bank3
 15579  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15580                           
 15581                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15582  0F98  0020               	movlb	0	; select bank0
 15583  0F99  086D               	movf	_product,w
 15584  0F9A  0086               	movwf	6
 15585  0F9B  3002               	movlw	2	; select bank4/5
 15586  0F9C  0087               	movwf	7
 15587  0F9D  3002               	movlw	2	; select bank4/5
 15588  0F9E  3F49               	moviw [9]fsr1
 15589  0F9F  0023               	movlb	3	; select bank3
 15590  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15591                           
 15592                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15593  0FA1  0020               	movlb	0	; select bank0
 15594  0FA2  086D               	movf	_product,w
 15595  0FA3  0086               	movwf	6
 15596  0FA4  3002               	movlw	2	; select bank4/5
 15597  0FA5  0087               	movwf	7
 15598  0FA6  3002               	movlw	2	; select bank4/5
 15599  0FA7  3F4A               	moviw [10]fsr1
 15600  0FA8  0023               	movlb	3	; select bank3
 15601  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15602                           
 15603                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15604  0FAA  0020               	movlb	0	; select bank0
 15605  0FAB  086D               	movf	_product,w
 15606  0FAC  0086               	movwf	6
 15607  0FAD  3002               	movlw	2	; select bank4/5
 15608  0FAE  0087               	movwf	7
 15609  0FAF  3002               	movlw	2	; select bank4/5
 15610  0FB0  3F4B               	moviw [11]fsr1
 15611  0FB1  0023               	movlb	3	; select bank3
 15612  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15613                           
 15614                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15615  0FB3  0020               	movlb	0	; select bank0
 15616  0FB4  086D               	movf	_product,w
 15617  0FB5  0086               	movwf	6
 15618  0FB6  3002               	movlw	2	; select bank4/5
 15619  0FB7  0087               	movwf	7
 15620  0FB8  3002               	movlw	2	; select bank4/5
 15621  0FB9  3F4C               	moviw [12]fsr1
 15622  0FBA  0023               	movlb	3	; select bank3
 15623  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15624                           
 15625                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15626  0FBC  0020               	movlb	0	; select bank0
 15627  0FBD  086D               	movf	_product,w
 15628  0FBE  0086               	movwf	6
 15629  0FBF  3002               	movlw	2	; select bank4/5
 15630  0FC0  0087               	movwf	7
 15631  0FC1  3002               	movlw	2	; select bank4/5
 15632  0FC2  3F4D               	moviw [13]fsr1
 15633  0FC3  0023               	movlb	3	; select bank3
 15634  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15635                           
 15636                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15637  0FC5  0020               	movlb	0	; select bank0
 15638  0FC6  086D               	movf	_product,w
 15639  0FC7  0086               	movwf	6
 15640  0FC8  3002               	movlw	2	; select bank4/5
 15641  0FC9  0087               	movwf	7
 15642  0FCA  3002               	movlw	2	; select bank4/5
 15643  0FCB  3F4E               	moviw [14]fsr1
 15644  0FCC  0023               	movlb	3	; select bank3
 15645  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15646                           
 15647                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15648  0FCE  0020               	movlb	0	; select bank0
 15649  0FCF  086D               	movf	_product,w
 15650  0FD0  0086               	movwf	6
 15651  0FD1  3002               	movlw	2	; select bank4/5
 15652  0FD2  0087               	movwf	7
 15653  0FD3  3002               	movlw	2	; select bank4/5
 15654  0FD4  3F4F               	moviw [15]fsr1
 15655  0FD5  0023               	movlb	3	; select bank3
 15656  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15657                           
 15658                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15659  0FD7  0020               	movlb	0	; select bank0
 15660  0FD8  086D               	movf	_product,w
 15661  0FD9  0086               	movwf	6
 15662  0FDA  3002               	movlw	2	; select bank4/5
 15663  0FDB  0087               	movwf	7
 15664  0FDC  3002               	movlw	2	; select bank4/5
 15665  0FDD  3F50               	moviw [16]fsr1
 15666  0FDE  0023               	movlb	3	; select bank3
 15667  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15668                           
 15669                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15670  0FE0  0020               	movlb	0	; select bank0
 15671  0FE1  086D               	movf	_product,w
 15672  0FE2  0086               	movwf	6
 15673  0FE3  3002               	movlw	2	; select bank4/5
 15674  0FE4  0087               	movwf	7
 15675  0FE5  3002               	movlw	2	; select bank4/5
 15676  0FE6  3F51               	moviw [17]fsr1
 15677  0FE7  0023               	movlb	3	; select bank3
 15678  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15679                           
 15680                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15681  0FE9  0020               	movlb	0	; select bank0
 15682  0FEA  086D               	movf	_product,w
 15683  0FEB  0086               	movwf	6
 15684  0FEC  3002               	movlw	2	; select bank4/5
 15685  0FED  0087               	movwf	7
 15686  0FEE  3002               	movlw	2	; select bank4/5
 15687  0FEF  3F52               	moviw [18]fsr1
 15688  0FF0  0023               	movlb	3	; select bank3
 15689  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15690                           
 15691                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15692  0FF2  0020               	movlb	0	; select bank0
 15693  0FF3  086D               	movf	_product,w
 15694  0FF4  0086               	movwf	6
 15695  0FF5  3002               	movlw	2	; select bank4/5
 15696  0FF6  0087               	movwf	7
 15697  0FF7  3002               	movlw	2	; select bank4/5
 15698  0FF8  3F53               	moviw [19]fsr1
 15699  0FF9  0023               	movlb	3	; select bank3
 15700  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15701                           
 15702                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15703  0FFB  30D2               	movlw	210
 15704  0FFC  00F2               	movwf	??_setTxData
 15705  0FFD  0872               	movf	??_setTxData,w
 15706  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15707  0FFF  0008               	return
 15708  1000                     __end_of_setTxData:	
 15709                           
 15710                           	psect	text104
 15711  1C41                     __ptext104:	
 15712 ;; *************** function _setRF_TransceiveGO *****************
 15713 ;; Defined at:
 15714 ;;		line 463 in file "../src/RF_Control_B1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  command         1    wreg     unsigned char 
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  command         1    3[COMMON] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;		None               void
 15721 ;; Registers used:
 15722 ;;		wreg, status,2, status,0
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;Total ram usage:        2 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    3
 15735 ;; This function calls:
 15736 ;;		Nothing
 15737 ;; This function is called by:
 15738 ;;		_setDimmerLights_Dimming
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           
 15743                           ;psect for function _setRF_TransceiveGO
 15744  1C41                     _setRF_TransceiveGO:	
 15745                           
 15746                           ;incstack = 0
 15747                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15748                           ;setRF_TransceiveGO@command stored from wreg
 15749  1C41  00F3               	movwf	setRF_TransceiveGO@command
 15750                           
 15751                           ;RF_Control_B1.c: 464: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15752  1C42  0873               	movf	setRF_TransceiveGO@command,w
 15753  1C43  3A01               	xorlw	1
 15754  1C44  3000               	movlw	0
 15755  1C45  1903               	skipnz
 15756  1C46  3001               	movlw	1
 15757  1C47  00F2               	movwf	??_setRF_TransceiveGO
 15758  1C48  0DF2               	rlf	??_setRF_TransceiveGO,f
 15759  1C49  0DF2               	rlf	??_setRF_TransceiveGO,f
 15760  1C4A  0021               	movlb	1	; select bank1
 15761  1C4B  0820               	movf	_RF1^(0+128),w
 15762  1C4C  0672               	xorwf	??_setRF_TransceiveGO,w
 15763  1C4D  39FB               	andlw	-5
 15764  1C4E  0672               	xorwf	??_setRF_TransceiveGO,w
 15765  1C4F  00A0               	movwf	_RF1^(0+128)
 15766  1C50  0008               	return
 15767  1C51                     __end_of_setRF_TransceiveGO:	
 15768                           
 15769                           	psect	text105
 15770  16E2                     __ptext105:	
 15771 ;; *************** function _setRF_DimmerLights *****************
 15772 ;; Defined at:
 15773 ;;		line 448 in file "../src/RF_Control_B1.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;  lights          1    wreg     unsigned char 
 15776 ;;  on              1   62[BANK0 ] unsigned char 
 15777 ;; Auto vars:     Size  Location     Type
 15778 ;;  lights          1   66[BANK0 ] unsigned char 
 15779 ;;  status          1   65[BANK0 ] unsigned char 
 15780 ;; Return value:  Size  Location     Type
 15781 ;;		None               void
 15782 ;; Registers used:
 15783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15784 ;; Tracked objects:
 15785 ;;		On entry : 0/0
 15786 ;;		On exit  : 0/0
 15787 ;;		Unchanged: 0/0
 15788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15789 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;Total ram usage:        5 bytes
 15794 ;; Hardware stack levels used:    1
 15795 ;; Hardware stack levels required when called:    4
 15796 ;; This function calls:
 15797 ;;		_setProductData
 15798 ;; This function is called by:
 15799 ;;		_setDimmerLights_OnOff
 15800 ;;		_setDimmerLights_Dimming
 15801 ;;		_setRFSW_Control
 15802 ;; This function uses a non-reentrant model
 15803 ;;
 15804                           
 15805                           
 15806                           ;psect for function _setRF_DimmerLights
 15807  16E2                     _setRF_DimmerLights:	
 15808                           
 15809                           ;incstack = 0
 15810                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15811                           ;setRF_DimmerLights@lights stored from wreg
 15812  16E2  0020               	movlb	0	; select bank0
 15813  16E3  00E2               	movwf	setRF_DimmerLights@lights
 15814                           
 15815                           ;RF_Control_B1.c: 449: char status = 1;
 15816  16E4  01E1               	clrf	setRF_DimmerLights@status
 15817  16E5  0AE1               	incf	setRF_DimmerLights@status,f
 15818                           
 15819                           ;RF_Control_B1.c: 450: status <<= (lights - 1);
 15820  16E6  0862               	movf	setRF_DimmerLights@lights,w
 15821  16E7  3EFF               	addlw	-1
 15822  16E8  0A89               	incf	9,f
 15823  16E9  2EEC               	goto	u6130
 15824  16EA                     u6135:	
 15825  16EA  1003               	clrc
 15826  16EB  0DE1               	rlf	setRF_DimmerLights@status,f
 15827  16EC                     u6130:	
 15828  16EC  3EFF               	addlw	-1
 15829  16ED  1D03               	skipz
 15830  16EE  2EEA               	goto	u6135
 15831                           
 15832                           ;RF_Control_B1.c: 451: setProductData(11, lights);
 15833  16EF  0862               	movf	setRF_DimmerLights@lights,w
 15834  16F0  00DF               	movwf	??_setRF_DimmerLights
 15835  16F1  085F               	movf	??_setRF_DimmerLights,w
 15836  16F2  00DA               	movwf	setProductData@value
 15837  16F3  300B               	movlw	11
 15838  16F4  319B  23D9  3196   	fcall	_setProductData
 15839                           
 15840                           ;RF_Control_B1.c: 452: setProductData(17, product->Data[26 + lights]);
 15841  16F7  0020               	movlb	0	; select bank0
 15842  16F8  0862               	movf	setRF_DimmerLights@lights,w
 15843  16F9  3E1A               	addlw	26
 15844  16FA  076D               	addwf	_product,w
 15845  16FB  00DF               	movwf	??_setRF_DimmerLights
 15846  16FC  085F               	movf	??_setRF_DimmerLights,w
 15847  16FD  0086               	movwf	6
 15848  16FE  3002               	movlw	2	; select bank4/5
 15849  16FF  0087               	movwf	7
 15850  1700  0801               	movf	1,w
 15851  1701  00E0               	movwf	??_setRF_DimmerLights+1
 15852  1702  0860               	movf	??_setRF_DimmerLights+1,w
 15853  1703  00DA               	movwf	setProductData@value
 15854  1704  3011               	movlw	17
 15855  1705  319B  23D9  3196   	fcall	_setProductData
 15856                           
 15857                           ;RF_Control_B1.c: 453: if (on == 1) {
 15858  1708  0020               	movlb	0	; select bank0
 15859  1709  085E               	movf	setRF_DimmerLights@on,w
 15860  170A  3A01               	xorlw	1
 15861  170B  1D03               	skipz
 15862  170C  2F2C               	goto	l6712
 15863                           
 15864                           ;RF_Control_B1.c: 454: setProductData(9, product->Data[20 + lights]);
 15865  170D  0862               	movf	setRF_DimmerLights@lights,w
 15866  170E  3E14               	addlw	20
 15867  170F  076D               	addwf	_product,w
 15868  1710  00DF               	movwf	??_setRF_DimmerLights
 15869  1711  085F               	movf	??_setRF_DimmerLights,w
 15870  1712  0086               	movwf	6
 15871  1713  3002               	movlw	2	; select bank4/5
 15872  1714  0087               	movwf	7
 15873  1715  0801               	movf	1,w
 15874  1716  00E0               	movwf	??_setRF_DimmerLights+1
 15875  1717  0860               	movf	??_setRF_DimmerLights+1,w
 15876  1718  00DA               	movwf	setProductData@value
 15877  1719  3009               	movlw	9
 15878  171A  319B  23D9  3196   	fcall	_setProductData
 15879                           
 15880                           ;RF_Control_B1.c: 455: setProductData(15, (product->Data[15] | status));
 15881  171D  0020               	movlb	0	; select bank0
 15882  171E  086D               	movf	_product,w
 15883  171F  3E0F               	addlw	15
 15884  1720  0086               	movwf	6
 15885  1721  3002               	movlw	2	; select bank4/5
 15886  1722  0087               	movwf	7
 15887  1723  0801               	movf	1,w
 15888  1724  0461               	iorwf	setRF_DimmerLights@status,w
 15889  1725  00DF               	movwf	??_setRF_DimmerLights
 15890  1726  085F               	movf	??_setRF_DimmerLights,w
 15891  1727  00DA               	movwf	setProductData@value
 15892  1728  300F               	movlw	15
 15893  1729  319B  23D9         	fcall	_setProductData
 15894                           
 15895                           ;RF_Control_B1.c: 456: } else {
 15896  172B  0008               	return
 15897  172C                     l6712:	
 15898                           
 15899                           ;RF_Control_B1.c: 457: setProductData(9, 0x00);
 15900  172C  0020               	movlb	0	; select bank0
 15901  172D  01DA               	clrf	setProductData@value
 15902  172E  3009               	movlw	9
 15903  172F  319B  23D9  3196   	fcall	_setProductData
 15904                           
 15905                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15]&(~status)));
 15906  1732  0020               	movlb	0	; select bank0
 15907  1733  086D               	movf	_product,w
 15908  1734  3E0F               	addlw	15
 15909  1735  0086               	movwf	6
 15910  1736  3002               	movlw	2	; select bank4/5
 15911  1737  0087               	movwf	7
 15912  1738  0961               	comf	setRF_DimmerLights@status,w
 15913  1739  0501               	andwf	1,w
 15914  173A  00DF               	movwf	??_setRF_DimmerLights
 15915  173B  085F               	movf	??_setRF_DimmerLights,w
 15916  173C  00DA               	movwf	setProductData@value
 15917  173D  300F               	movlw	15
 15918  173E  319B  23D9         	fcall	_setProductData
 15919  1740  0008               	return
 15920  1741                     __end_of_setRF_DimmerLights:	
 15921                           
 15922                           	psect	text106
 15923  1CF4                     __ptext106:	
 15924 ;; *************** function _setDimmerLights_Line *****************
 15925 ;; Defined at:
 15926 ;;		line 936 in file "../src/Dimmer_B1.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;  lights          1    wreg     unsigned char 
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  lights          1    2[COMMON] unsigned char 
 15931 ;; Return value:  Size  Location     Type
 15932 ;;		None               void
 15933 ;; Registers used:
 15934 ;;		wreg
 15935 ;; Tracked objects:
 15936 ;;		On entry : 0/0
 15937 ;;		On exit  : 0/0
 15938 ;;		Unchanged: 0/0
 15939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;Total ram usage:        1 bytes
 15945 ;; Hardware stack levels used:    1
 15946 ;; Hardware stack levels required when called:    3
 15947 ;; This function calls:
 15948 ;;		Nothing
 15949 ;; This function is called by:
 15950 ;;		_setDimmerLights_OnOff
 15951 ;;		_setDimmerLights_Dimming
 15952 ;; This function uses a non-reentrant model
 15953 ;;
 15954                           
 15955                           
 15956                           ;psect for function _setDimmerLights_Line
 15957  1CF4                     _setDimmerLights_Line:	
 15958                           
 15959                           ;incstack = 0
 15960                           ; Regs used in _setDimmerLights_Line: [wreg]
 15961                           ;setDimmerLights_Line@lights stored from wreg
 15962  1CF4  00F2               	movwf	setDimmerLights_Line@lights
 15963                           
 15964                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15965  1CF5  0021               	movlb	1	; select bank1
 15966  1CF6  14BA               	bsf	_Dimmer^(0+128),1	;volatile
 15967                           
 15968                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15969  1CF7  0023               	movlb	3	; select bank3
 15970  1CF8  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 15971                           
 15972                           ;Dimmer_B1.c: 942: DimmerLights2.Line = 0;
 15973  1CF9  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 15974                           
 15975                           ;Dimmer_B1.c: 948: if (lights == 1) {
 15976  1CFA  0872               	movf	setDimmerLights_Line@lights,w
 15977  1CFB  3A01               	xorlw	1
 15978  1CFC  1D03               	skipz
 15979  1CFD  2D00               	goto	l7130
 15980                           
 15981                           ;Dimmer_B1.c: 949: DimmerLights1.Line = 1;
 15982  1CFE  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 15983                           
 15984                           ;Dimmer_B1.c: 950: }
 15985  1CFF  0008               	return
 15986  1D00                     l7130:	
 15987                           
 15988                           ;Dimmer_B1.c: 953: else if (lights == 2) {
 15989  1D00  0872               	movf	setDimmerLights_Line@lights,w
 15990  1D01  3A02               	xorlw	2
 15991  1D02  1D03               	skipz
 15992  1D03  0008               	return
 15993                           
 15994                           ;Dimmer_B1.c: 954: DimmerLights2.Line = 1;
 15995  1D04  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 15996  1D05  0008               	return
 15997  1D06                     __end_of_setDimmerLights_Line:	
 15998                           
 15999                           	psect	text107
 16000  1DFC                     __ptext107:	
 16001 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16002 ;; Defined at:
 16003 ;;		line 86 in file "../src/Dimmer_B1.c"
 16004 ;; Parameters:    Size  Location     Type
 16005 ;;  lights          1    wreg     unsigned char 
 16006 ;;  value           1   58[BANK0 ] unsigned char 
 16007 ;; Auto vars:     Size  Location     Type
 16008 ;;  lights          1   60[BANK0 ] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;		None               void
 16011 ;; Registers used:
 16012 ;;		wreg
 16013 ;; Tracked objects:
 16014 ;;		On entry : 0/0
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16018 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;Total ram usage:        3 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:    3
 16025 ;; This function calls:
 16026 ;;		Nothing
 16027 ;; This function is called by:
 16028 ;;		_setDimmerLights_OnOff
 16029 ;;		_setDimmerLights_Dimming
 16030 ;;		_setRFSW_AdjControl
 16031 ;; This function uses a non-reentrant model
 16032 ;;
 16033                           
 16034                           
 16035                           ;psect for function _setDimmerIntr_MaxmumValue
 16036  1DFC                     _setDimmerIntr_MaxmumValue:	
 16037                           
 16038                           ;incstack = 0
 16039                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16040                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16041  1DFC  0020               	movlb	0	; select bank0
 16042  1DFD  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16043                           
 16044                           ;Dimmer_B1.c: 88: if (lights == 1) {
 16045  1DFE  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16046  1DFF  3A01               	xorlw	1
 16047  1E00  1D03               	skipz
 16048  1E01  2E08               	goto	l6680
 16049                           
 16050                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 16051  1E02  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16052  1E03  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16053  1E04  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16054  1E05  0021               	movlb	1	; select bank1
 16055  1E06  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 16056                           
 16057                           ;Dimmer_B1.c: 90: }
 16058  1E07  0008               	return
 16059  1E08                     l6680:	
 16060                           
 16061                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 16062  1E08  0020               	movlb	0	; select bank0
 16063  1E09  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16064  1E0A  3A02               	xorlw	2
 16065  1E0B  1D03               	skipz
 16066  1E0C  0008               	return
 16067                           
 16068                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 16069  1E0D  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16070  1E0E  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16071  1E0F  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16072  1E10  0021               	movlb	1	; select bank1
 16073  1E11  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 16074  1E12  0008               	return
 16075  1E13                     __end_of_setDimmerIntr_MaxmumValue:	
 16076                           
 16077                           	psect	text108
 16078  10B5                     __ptext108:	
 16079 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16080 ;; Defined at:
 16081 ;;		line 162 in file "../src/Dimmer_B1.c"
 16082 ;; Parameters:    Size  Location     Type
 16083 ;;  lights          1    wreg     unsigned char 
 16084 ;;  command         1    2[COMMON] unsigned char 
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;  lights          1    4[COMMON] unsigned char 
 16087 ;; Return value:  Size  Location     Type
 16088 ;;		None               void
 16089 ;; Registers used:
 16090 ;;		wreg, status,2, status,0
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16096 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;Total ram usage:        3 bytes
 16101 ;; Hardware stack levels used:    1
 16102 ;; Hardware stack levels required when called:    3
 16103 ;; This function calls:
 16104 ;;		Nothing
 16105 ;; This function is called by:
 16106 ;;		_setDimmerLights_Dimming
 16107 ;; This function uses a non-reentrant model
 16108 ;;
 16109                           
 16110                           
 16111                           ;psect for function _setDimmerIntr_Dimming_Sw
 16112  10B5                     _setDimmerIntr_Dimming_Sw:	
 16113                           
 16114                           ;incstack = 0
 16115                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16116                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16117  10B5  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16118                           
 16119                           ;Dimmer_B1.c: 164: if (lights == 1) {
 16120  10B6  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16121  10B7  3A01               	xorlw	1
 16122  10B8  1D03               	skipz
 16123  10B9  28C8               	goto	l7040
 16124                           
 16125                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16126  10BA  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16127  10BB  3A01               	xorlw	1
 16128  10BC  3000               	movlw	0
 16129  10BD  1903               	skipnz
 16130  10BE  3001               	movlw	1
 16131  10BF  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16132  10C0  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16133  10C1  0021               	movlb	1	; select bank1
 16134  10C2  0862               	movf	_DimmerIntr1^(0+128),w
 16135  10C3  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16136  10C4  39EF               	andlw	-17
 16137  10C5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16138  10C6  00E2               	movwf	_DimmerIntr1^(0+128)
 16139                           
 16140                           ;Dimmer_B1.c: 166: }
 16141  10C7  0008               	return
 16142  10C8                     l7040:	
 16143                           
 16144                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16145  10C8  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16146  10C9  3A02               	xorlw	2
 16147  10CA  1D03               	skipz
 16148  10CB  0008               	return
 16149                           
 16150                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16151  10CC  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16152  10CD  3A01               	xorlw	1
 16153  10CE  3000               	movlw	0
 16154  10CF  1903               	skipnz
 16155  10D0  3001               	movlw	1
 16156  10D1  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16157  10D2  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16158  10D3  0021               	movlb	1	; select bank1
 16159  10D4  0869               	movf	_DimmerIntr2^(0+128),w
 16160  10D5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16161  10D6  39EF               	andlw	-17
 16162  10D7  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16163  10D8  00E9               	movwf	_DimmerIntr2^(0+128)
 16164  10D9  0008               	return
 16165  10DA                     __end_of_setDimmerIntr_Dimming_Sw:	
 16166                           
 16167                           	psect	text109
 16168  08A3                     __ptext109:	
 16169 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16170 ;; Defined at:
 16171 ;;		line 1042 in file "../src/Dimmer_B1.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;  value           1    wreg     unsigned char 
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;  value           1   54[BANK0 ] unsigned char 
 16176 ;;  i               3   55[BANK0 ] float 
 16177 ;; Return value:  Size  Location     Type
 16178 ;;                  1    wreg      unsigned char 
 16179 ;; Registers used:
 16180 ;;		wreg, status,2, status,0, pclath, cstack
 16181 ;; Tracked objects:
 16182 ;;		On entry : 0/0
 16183 ;;		On exit  : 0/0
 16184 ;;		Unchanged: 0/0
 16185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16190 ;;Total ram usage:        6 bytes
 16191 ;; Hardware stack levels used:    1
 16192 ;; Hardware stack levels required when called:    5
 16193 ;; This function calls:
 16194 ;;		___awtoft
 16195 ;;		___ftadd
 16196 ;;		___ftdiv
 16197 ;;		___ftneg
 16198 ;;		___fttol
 16199 ;; This function is called by:
 16200 ;;		_setDimmerLights_OnOff
 16201 ;;		_setDimmerLights_Dimming
 16202 ;;		_Flash_Memory_Initialization
 16203 ;; This function uses a non-reentrant model
 16204 ;;
 16205                           
 16206                           
 16207                           ;psect for function _getDimmerLights_ValueToPercent
 16208  08A3                     _getDimmerLights_ValueToPercent:	
 16209                           
 16210                           ;incstack = 0
 16211                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16212                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16213  08A3  0020               	movlb	0	; select bank0
 16214  08A4  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16215                           
 16216                           ;Dimmer_B1.c: 1050: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 16217  08A5  3000               	movlw	0
 16218  08A6  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16219  08A7  3010               	movlw	16
 16220  08A8  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16221  08A9  3042               	movlw	66
 16222  08AA  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16223                           
 16224                           ;Dimmer_B1.c: 1051: i /= 100;
 16225  08AB  3000               	movlw	0
 16226  08AC  00A6               	movwf	___ftdiv@f2
 16227  08AD  30C8               	movlw	200
 16228  08AE  00A7               	movwf	___ftdiv@f2+1
 16229  08AF  3042               	movlw	66
 16230  08B0  00A8               	movwf	___ftdiv@f2+2
 16231  08B1  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16232  08B2  00A9               	movwf	___ftdiv@f1
 16233  08B3  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16234  08B4  00AA               	movwf	___ftdiv@f1+1
 16235  08B5  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16236  08B6  00AB               	movwf	___ftdiv@f1+2
 16237  08B7  318D  253B  3188   	fcall	___ftdiv
 16238  08BA  0020               	movlb	0	; select bank0
 16239  08BB  0826               	movf	?___ftdiv,w
 16240  08BC  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16241  08BD  0827               	movf	?___ftdiv+1,w
 16242  08BE  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16243  08BF  0828               	movf	?___ftdiv+2,w
 16244  08C0  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16245                           
 16246                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 16247  08C1  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16248  08C2  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16249  08C3  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16250  08C4  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16251  08C5  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16252  08C6  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16253  08C7  1903               	skipnz
 16254  08C8  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16255  08C9  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16256  08CA  3E34               	addlw	52
 16257  08CB  00A0               	movwf	___awtoft@c
 16258  08CC  3000               	movlw	0
 16259  08CD  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16260  08CE  00A1               	movwf	___awtoft@c+1
 16261  08CF  319F  27DE  3188   	fcall	___awtoft
 16262  08D2  0020               	movlb	0	; select bank0
 16263  08D3  0820               	movf	?___awtoft,w
 16264  08D4  00A9               	movwf	___ftdiv@f1
 16265  08D5  0821               	movf	?___awtoft+1,w
 16266  08D6  00AA               	movwf	___ftdiv@f1+1
 16267  08D7  0822               	movf	?___awtoft+2,w
 16268  08D8  00AB               	movwf	___ftdiv@f1+2
 16269  08D9  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16270  08DA  00A6               	movwf	___ftdiv@f2
 16271  08DB  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16272  08DC  00A7               	movwf	___ftdiv@f2+1
 16273  08DD  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16274  08DE  00A8               	movwf	___ftdiv@f2+2
 16275  08DF  318D  253B  3188   	fcall	___ftdiv
 16276  08E2  0020               	movlb	0	; select bank0
 16277  08E3  0826               	movf	?___ftdiv,w
 16278  08E4  00B6               	movwf	___ftneg@f1
 16279  08E5  0827               	movf	?___ftdiv+1,w
 16280  08E6  00B7               	movwf	___ftneg@f1+1
 16281  08E7  0828               	movf	?___ftdiv+2,w
 16282  08E8  00B8               	movwf	___ftneg@f1+2
 16283  08E9  319B  2321  3188   	fcall	___ftneg
 16284  08EC  0020               	movlb	0	; select bank0
 16285  08ED  0836               	movf	?___ftneg,w
 16286  08EE  00BC               	movwf	___ftadd@f2
 16287  08EF  0837               	movf	?___ftneg+1,w
 16288  08F0  00BD               	movwf	___ftadd@f2+1
 16289  08F1  0838               	movf	?___ftneg+2,w
 16290  08F2  00BE               	movwf	___ftadd@f2+2
 16291  08F3  3000               	movlw	0
 16292  08F4  00B9               	movwf	___ftadd@f1
 16293  08F5  30C8               	movlw	200
 16294  08F6  00BA               	movwf	___ftadd@f1+1
 16295  08F7  3042               	movlw	66
 16296  08F8  00BB               	movwf	___ftadd@f1+2
 16297  08F9  3183  235A  3188   	fcall	___ftadd
 16298  08FC  0020               	movlb	0	; select bank0
 16299  08FD  0839               	movf	?___ftadd,w
 16300  08FE  00C6               	movwf	___fttol@f1
 16301  08FF  083A               	movf	?___ftadd+1,w
 16302  0900  00C7               	movwf	___fttol@f1+1
 16303  0901  083B               	movf	?___ftadd+2,w
 16304  0902  00C8               	movwf	___fttol@f1+2
 16305  0903  318B  239B         	fcall	___fttol
 16306  0905  0020               	movlb	0	; select bank0
 16307  0906  0846               	movf	?___fttol,w
 16308  0907  0008               	return
 16309  0908                     __end_of_getDimmerLights_ValueToPercent:	
 16310                           
 16311                           	psect	text110
 16312  0B9B                     __ptext110:	
 16313 ;; *************** function ___fttol *****************
 16314 ;; Defined at:
 16315 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;  f1              3   38[BANK0 ] float 
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  lval            4   47[BANK0 ] unsigned long 
 16320 ;;  exp1            1   51[BANK0 ] unsigned char 
 16321 ;;  sign1           1   46[BANK0 ] unsigned char 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  4   38[BANK0 ] long 
 16324 ;; Registers used:
 16325 ;;		wreg, status,2, status,0
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;Total ram usage:       14 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    3
 16338 ;; This function calls:
 16339 ;;		Nothing
 16340 ;; This function is called by:
 16341 ;;		_getDimmerLights_PercentToValue
 16342 ;;		_getDimmerLights_ValueToPercent
 16343 ;; This function uses a non-reentrant model
 16344 ;;
 16345                           
 16346                           
 16347                           ;psect for function ___fttol
 16348  0B9B                     ___fttol:	
 16349                           
 16350                           ;incstack = 0
 16351                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16352  0B9B  0020               	movlb	0	; select bank0
 16353  0B9C  0846               	movf	___fttol@f1,w
 16354  0B9D  00CA               	movwf	??___fttol
 16355  0B9E  0847               	movf	___fttol@f1+1,w
 16356  0B9F  00CB               	movwf	??___fttol+1
 16357  0BA0  0848               	movf	___fttol@f1+2,w
 16358  0BA1  00CC               	movwf	??___fttol+2
 16359  0BA2  1003               	clrc
 16360  0BA3  0D4B               	rlf	??___fttol+1,w
 16361  0BA4  0D4C               	rlf	??___fttol+2,w
 16362  0BA5  00CD               	movwf	??___fttol+3
 16363  0BA6  084D               	movf	??___fttol+3,w
 16364  0BA7  00D3               	movwf	___fttol@exp1
 16365  0BA8  08D3               	movf	___fttol@exp1,f
 16366  0BA9  1D03               	skipz
 16367  0BAA  2BB4               	goto	l6518
 16368  0BAB  3000               	movlw	0
 16369  0BAC  00C9               	movwf	?___fttol+3
 16370  0BAD  3000               	movlw	0
 16371  0BAE  00C8               	movwf	?___fttol+2
 16372  0BAF  3000               	movlw	0
 16373  0BB0  00C7               	movwf	?___fttol+1
 16374  0BB1  3000               	movlw	0
 16375  0BB2  00C6               	movwf	?___fttol
 16376  0BB3  0008               	return
 16377  0BB4                     l6518:	
 16378  0BB4  0846               	movf	___fttol@f1,w
 16379  0BB5  00CA               	movwf	??___fttol
 16380  0BB6  0847               	movf	___fttol@f1+1,w
 16381  0BB7  00CB               	movwf	??___fttol+1
 16382  0BB8  0848               	movf	___fttol@f1+2,w
 16383  0BB9  00CC               	movwf	??___fttol+2
 16384  0BBA  3017               	movlw	23
 16385  0BBB                     u5785:	
 16386  0BBB  36CC               	lsrf	??___fttol+2,f
 16387  0BBC  0CCB               	rrf	??___fttol+1,f
 16388  0BBD  0CCA               	rrf	??___fttol,f
 16389  0BBE  0B89               	decfsz	9,f
 16390  0BBF  2BBB               	goto	u5785
 16391  0BC0  084A               	movf	??___fttol,w
 16392  0BC1  00CD               	movwf	??___fttol+3
 16393  0BC2  084D               	movf	??___fttol+3,w
 16394  0BC3  00CE               	movwf	___fttol@sign1
 16395  0BC4  17C7               	bsf	___fttol@f1+1,7
 16396  0BC5  30FF               	movlw	255
 16397  0BC6  05C6               	andwf	___fttol@f1,f
 16398  0BC7  30FF               	movlw	255
 16399  0BC8  05C7               	andwf	___fttol@f1+1,f
 16400  0BC9  3000               	movlw	0
 16401  0BCA  05C8               	andwf	___fttol@f1+2,f
 16402  0BCB  0846               	movf	___fttol@f1,w
 16403  0BCC  00CF               	movwf	___fttol@lval
 16404  0BCD  0847               	movf	___fttol@f1+1,w
 16405  0BCE  00D0               	movwf	___fttol@lval+1
 16406  0BCF  0848               	movf	___fttol@f1+2,w
 16407  0BD0  00D1               	movwf	___fttol@lval+2
 16408  0BD1  01D2               	clrf	___fttol@lval+3
 16409  0BD2  308E               	movlw	142
 16410  0BD3  02D3               	subwf	___fttol@exp1,f
 16411  0BD4  1FD3               	btfss	___fttol@exp1,7
 16412  0BD5  2BF2               	goto	l6538
 16413  0BD6  0853               	movf	___fttol@exp1,w
 16414  0BD7  3A80               	xorlw	128
 16415  0BD8  3E8F               	addlw	143
 16416  0BD9  1803               	skipnc
 16417  0BDA  2BE4               	goto	l6536
 16418  0BDB  3000               	movlw	0
 16419  0BDC  00C9               	movwf	?___fttol+3
 16420  0BDD  3000               	movlw	0
 16421  0BDE  00C8               	movwf	?___fttol+2
 16422  0BDF  3000               	movlw	0
 16423  0BE0  00C7               	movwf	?___fttol+1
 16424  0BE1  3000               	movlw	0
 16425  0BE2  00C6               	movwf	?___fttol
 16426  0BE3  0008               	return
 16427  0BE4                     l6536:	
 16428  0BE4  3001               	movlw	1
 16429  0BE5                     u5815:	
 16430  0BE5  36D2               	lsrf	___fttol@lval+3,f
 16431  0BE6  0CD1               	rrf	___fttol@lval+2,f
 16432  0BE7  0CD0               	rrf	___fttol@lval+1,f
 16433  0BE8  0CCF               	rrf	___fttol@lval,f
 16434  0BE9  0B89               	decfsz	9,f
 16435  0BEA  2BE5               	goto	u5815
 16436  0BEB  3001               	movlw	1
 16437  0BEC  00CA               	movwf	??___fttol
 16438  0BED  084A               	movf	??___fttol,w
 16439  0BEE  07D3               	addwf	___fttol@exp1,f
 16440  0BEF  1903               	btfsc	3,2
 16441  0BF0  2C0B               	goto	l6548
 16442  0BF1  2BE4               	goto	l6536
 16443  0BF2                     l6538:	
 16444  0BF2  3018               	movlw	24
 16445  0BF3  0253               	subwf	___fttol@exp1,w
 16446  0BF4  1C03               	skipc
 16447  0BF5  2C08               	goto	l6546
 16448  0BF6  3000               	movlw	0
 16449  0BF7  00C9               	movwf	?___fttol+3
 16450  0BF8  3000               	movlw	0
 16451  0BF9  00C8               	movwf	?___fttol+2
 16452  0BFA  3000               	movlw	0
 16453  0BFB  00C7               	movwf	?___fttol+1
 16454  0BFC  3000               	movlw	0
 16455  0BFD  00C6               	movwf	?___fttol
 16456  0BFE  0008               	return
 16457  0BFF                     l6544:	
 16458  0BFF  3001               	movlw	1
 16459  0C00                     u5845:	
 16460  0C00  35CF               	lslf	___fttol@lval,f
 16461  0C01  0DD0               	rlf	___fttol@lval+1,f
 16462  0C02  0DD1               	rlf	___fttol@lval+2,f
 16463  0C03  0DD2               	rlf	___fttol@lval+3,f
 16464  0C04  0B89               	decfsz	9,f
 16465  0C05  2C00               	goto	u5845
 16466  0C06  3001               	movlw	1
 16467  0C07  02D3               	subwf	___fttol@exp1,f
 16468  0C08                     l6546:	
 16469  0C08  08D3               	movf	___fttol@exp1,f
 16470  0C09  1D03               	skipz
 16471  0C0A  2BFF               	goto	l6544
 16472  0C0B                     l6548:	
 16473  0C0B  084E               	movf	___fttol@sign1,w
 16474  0C0C  1903               	btfsc	3,2
 16475  0C0D  2C19               	goto	l6552
 16476  0C0E  09CF               	comf	___fttol@lval,f
 16477  0C0F  09D0               	comf	___fttol@lval+1,f
 16478  0C10  09D1               	comf	___fttol@lval+2,f
 16479  0C11  09D2               	comf	___fttol@lval+3,f
 16480  0C12  0ACF               	incf	___fttol@lval,f
 16481  0C13  1903               	skipnz
 16482  0C14  0AD0               	incf	___fttol@lval+1,f
 16483  0C15  1903               	skipnz
 16484  0C16  0AD1               	incf	___fttol@lval+2,f
 16485  0C17  1903               	skipnz
 16486  0C18  0AD2               	incf	___fttol@lval+3,f
 16487  0C19                     l6552:	
 16488  0C19  0852               	movf	___fttol@lval+3,w
 16489  0C1A  00C9               	movwf	?___fttol+3
 16490  0C1B  0851               	movf	___fttol@lval+2,w
 16491  0C1C  00C8               	movwf	?___fttol+2
 16492  0C1D  0850               	movf	___fttol@lval+1,w
 16493  0C1E  00C7               	movwf	?___fttol+1
 16494  0C1F  084F               	movf	___fttol@lval,w
 16495  0C20  00C6               	movwf	?___fttol
 16496  0C21  0008               	return
 16497  0C22                     __end_of___fttol:	
 16498                           
 16499                           	psect	text111
 16500  1B21                     __ptext111:	
 16501 ;; *************** function ___ftneg *****************
 16502 ;; Defined at:
 16503 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16504 ;; Parameters:    Size  Location     Type
 16505 ;;  f1              3   22[BANK0 ] float 
 16506 ;; Auto vars:     Size  Location     Type
 16507 ;;		None
 16508 ;; Return value:  Size  Location     Type
 16509 ;;                  3   22[BANK0 ] float 
 16510 ;; Registers used:
 16511 ;;		wreg
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16517 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;Total ram usage:        3 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    3
 16524 ;; This function calls:
 16525 ;;		Nothing
 16526 ;; This function is called by:
 16527 ;;		_getDimmerLights_PercentToValue
 16528 ;;		_getDimmerLights_ValueToPercent
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           
 16533                           ;psect for function ___ftneg
 16534  1B21                     ___ftneg:	
 16535                           
 16536                           ;incstack = 0
 16537                           ; Regs used in ___ftneg: [wreg]
 16538  1B21  0020               	movlb	0	; select bank0
 16539  1B22  0838               	movf	___ftneg@f1+2,w
 16540  1B23  0437               	iorwf	___ftneg@f1+1,w
 16541  1B24  0436               	iorwf	___ftneg@f1,w
 16542  1B25  1903               	skipnz
 16543  1B26  0008               	return
 16544  1B27  3080               	movlw	128
 16545  1B28  06B8               	xorwf	___ftneg@f1+2,f
 16546  1B29  0008               	return
 16547  1B2A                     __end_of___ftneg:	
 16548                           
 16549                           	psect	text112
 16550  0D3B                     __ptext112:	
 16551 ;; *************** function ___ftdiv *****************
 16552 ;; Defined at:
 16553 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  f2              3    6[BANK0 ] float 
 16556 ;;  f1              3    9[BANK0 ] float 
 16557 ;; Auto vars:     Size  Location     Type
 16558 ;;  f3              3   17[BANK0 ] float 
 16559 ;;  sign            1   21[BANK0 ] unsigned char 
 16560 ;;  exp             1   20[BANK0 ] unsigned char 
 16561 ;;  cntr            1   16[BANK0 ] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  3    6[BANK0 ] float 
 16564 ;; Registers used:
 16565 ;;		wreg, status,2, status,0, pclath, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16571 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;Total ram usage:       16 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    4
 16578 ;; This function calls:
 16579 ;;		___ftpack
 16580 ;; This function is called by:
 16581 ;;		_getDimmerLights_PercentToValue
 16582 ;;		_getDimmerLights_ValueToPercent
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function ___ftdiv
 16588  0D3B                     ___ftdiv:	
 16589                           
 16590                           ;incstack = 0
 16591                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16592  0D3B  0020               	movlb	0	; select bank0
 16593  0D3C  0829               	movf	___ftdiv@f1,w
 16594  0D3D  00AC               	movwf	??___ftdiv
 16595  0D3E  082A               	movf	___ftdiv@f1+1,w
 16596  0D3F  00AD               	movwf	??___ftdiv+1
 16597  0D40  082B               	movf	___ftdiv@f1+2,w
 16598  0D41  00AE               	movwf	??___ftdiv+2
 16599  0D42  1003               	clrc
 16600  0D43  0D2D               	rlf	??___ftdiv+1,w
 16601  0D44  0D2E               	rlf	??___ftdiv+2,w
 16602  0D45  00AF               	movwf	??___ftdiv+3
 16603  0D46  082F               	movf	??___ftdiv+3,w
 16604  0D47  00B4               	movwf	___ftdiv@exp
 16605  0D48  08B4               	movf	___ftdiv@exp,f
 16606  0D49  1D03               	skipz
 16607  0D4A  2D52               	goto	l6418
 16608  0D4B  3000               	movlw	0
 16609  0D4C  00A6               	movwf	?___ftdiv
 16610  0D4D  3000               	movlw	0
 16611  0D4E  00A7               	movwf	?___ftdiv+1
 16612  0D4F  3000               	movlw	0
 16613  0D50  00A8               	movwf	?___ftdiv+2
 16614  0D51  0008               	return
 16615  0D52                     l6418:	
 16616  0D52  0826               	movf	___ftdiv@f2,w
 16617  0D53  00AC               	movwf	??___ftdiv
 16618  0D54  0827               	movf	___ftdiv@f2+1,w
 16619  0D55  00AD               	movwf	??___ftdiv+1
 16620  0D56  0828               	movf	___ftdiv@f2+2,w
 16621  0D57  00AE               	movwf	??___ftdiv+2
 16622  0D58  1003               	clrc
 16623  0D59  0D2D               	rlf	??___ftdiv+1,w
 16624  0D5A  0D2E               	rlf	??___ftdiv+2,w
 16625  0D5B  00AF               	movwf	??___ftdiv+3
 16626  0D5C  082F               	movf	??___ftdiv+3,w
 16627  0D5D  00B5               	movwf	___ftdiv@sign
 16628  0D5E  08B5               	movf	___ftdiv@sign,f
 16629  0D5F  1D03               	skipz
 16630  0D60  2D68               	goto	l6424
 16631  0D61  3000               	movlw	0
 16632  0D62  00A6               	movwf	?___ftdiv
 16633  0D63  3000               	movlw	0
 16634  0D64  00A7               	movwf	?___ftdiv+1
 16635  0D65  3000               	movlw	0
 16636  0D66  00A8               	movwf	?___ftdiv+2
 16637  0D67  0008               	return
 16638  0D68                     l6424:	
 16639  0D68  3000               	movlw	0
 16640  0D69  00B1               	movwf	___ftdiv@f3
 16641  0D6A  3000               	movlw	0
 16642  0D6B  00B2               	movwf	___ftdiv@f3+1
 16643  0D6C  3000               	movlw	0
 16644  0D6D  00B3               	movwf	___ftdiv@f3+2
 16645  0D6E  3089               	movlw	137
 16646  0D6F  0735               	addwf	___ftdiv@sign,w
 16647  0D70  00AC               	movwf	??___ftdiv
 16648  0D71  082C               	movf	??___ftdiv,w
 16649  0D72  02B4               	subwf	___ftdiv@exp,f
 16650  0D73  0829               	movf	___ftdiv@f1,w
 16651  0D74  00AC               	movwf	??___ftdiv
 16652  0D75  082A               	movf	___ftdiv@f1+1,w
 16653  0D76  00AD               	movwf	??___ftdiv+1
 16654  0D77  082B               	movf	___ftdiv@f1+2,w
 16655  0D78  00AE               	movwf	??___ftdiv+2
 16656  0D79  3010               	movlw	16
 16657  0D7A                     u5585:	
 16658  0D7A  36AE               	lsrf	??___ftdiv+2,f
 16659  0D7B  0CAD               	rrf	??___ftdiv+1,f
 16660  0D7C  0CAC               	rrf	??___ftdiv,f
 16661  0D7D  0B89               	decfsz	9,f
 16662  0D7E  2D7A               	goto	u5585
 16663  0D7F  082C               	movf	??___ftdiv,w
 16664  0D80  00AF               	movwf	??___ftdiv+3
 16665  0D81  082F               	movf	??___ftdiv+3,w
 16666  0D82  00B5               	movwf	___ftdiv@sign
 16667  0D83  0826               	movf	___ftdiv@f2,w
 16668  0D84  00AC               	movwf	??___ftdiv
 16669  0D85  0827               	movf	___ftdiv@f2+1,w
 16670  0D86  00AD               	movwf	??___ftdiv+1
 16671  0D87  0828               	movf	___ftdiv@f2+2,w
 16672  0D88  00AE               	movwf	??___ftdiv+2
 16673  0D89  3010               	movlw	16
 16674  0D8A                     u5595:	
 16675  0D8A  36AE               	lsrf	??___ftdiv+2,f
 16676  0D8B  0CAD               	rrf	??___ftdiv+1,f
 16677  0D8C  0CAC               	rrf	??___ftdiv,f
 16678  0D8D  0B89               	decfsz	9,f
 16679  0D8E  2D8A               	goto	u5595
 16680  0D8F  082C               	movf	??___ftdiv,w
 16681  0D90  00AF               	movwf	??___ftdiv+3
 16682  0D91  082F               	movf	??___ftdiv+3,w
 16683  0D92  06B5               	xorwf	___ftdiv@sign,f
 16684  0D93  3080               	movlw	128
 16685  0D94  00AC               	movwf	??___ftdiv
 16686  0D95  082C               	movf	??___ftdiv,w
 16687  0D96  05B5               	andwf	___ftdiv@sign,f
 16688  0D97  17AA               	bsf	___ftdiv@f1+1,7
 16689  0D98  30FF               	movlw	255
 16690  0D99  05A9               	andwf	___ftdiv@f1,f
 16691  0D9A  30FF               	movlw	255
 16692  0D9B  05AA               	andwf	___ftdiv@f1+1,f
 16693  0D9C  3000               	movlw	0
 16694  0D9D  05AB               	andwf	___ftdiv@f1+2,f
 16695  0D9E  17A7               	bsf	___ftdiv@f2+1,7
 16696  0D9F  30FF               	movlw	255
 16697  0DA0  05A6               	andwf	___ftdiv@f2,f
 16698  0DA1  30FF               	movlw	255
 16699  0DA2  05A7               	andwf	___ftdiv@f2+1,f
 16700  0DA3  3000               	movlw	0
 16701  0DA4  05A8               	andwf	___ftdiv@f2+2,f
 16702  0DA5  3018               	movlw	24
 16703  0DA6  00AC               	movwf	??___ftdiv
 16704  0DA7  082C               	movf	??___ftdiv,w
 16705  0DA8  00B0               	movwf	___ftdiv@cntr
 16706  0DA9                     l6438:	
 16707  0DA9  3001               	movlw	1
 16708  0DAA                     u5605:	
 16709  0DAA  35B1               	lslf	___ftdiv@f3,f
 16710  0DAB  0DB2               	rlf	___ftdiv@f3+1,f
 16711  0DAC  0DB3               	rlf	___ftdiv@f3+2,f
 16712  0DAD  0B89               	decfsz	9,f
 16713  0DAE  2DAA               	goto	u5605
 16714  0DAF  0828               	movf	___ftdiv@f2+2,w
 16715  0DB0  022B               	subwf	___ftdiv@f1+2,w
 16716  0DB1  1D03               	skipz
 16717  0DB2  2DB9               	goto	u5615
 16718  0DB3  0827               	movf	___ftdiv@f2+1,w
 16719  0DB4  022A               	subwf	___ftdiv@f1+1,w
 16720  0DB5  1D03               	skipz
 16721  0DB6  2DB9               	goto	u5615
 16722  0DB7  0826               	movf	___ftdiv@f2,w
 16723  0DB8  0229               	subwf	___ftdiv@f1,w
 16724  0DB9                     u5615:	
 16725  0DB9  1C03               	skipc
 16726  0DBA  2DC2               	goto	l6446
 16727  0DBB  0826               	movf	___ftdiv@f2,w
 16728  0DBC  02A9               	subwf	___ftdiv@f1,f
 16729  0DBD  0827               	movf	___ftdiv@f2+1,w
 16730  0DBE  3BAA               	subwfb	___ftdiv@f1+1,f
 16731  0DBF  0828               	movf	___ftdiv@f2+2,w
 16732  0DC0  3BAB               	subwfb	___ftdiv@f1+2,f
 16733  0DC1  1431               	bsf	___ftdiv@f3,0
 16734  0DC2                     l6446:	
 16735  0DC2  3001               	movlw	1
 16736  0DC3                     u5625:	
 16737  0DC3  35A9               	lslf	___ftdiv@f1,f
 16738  0DC4  0DAA               	rlf	___ftdiv@f1+1,f
 16739  0DC5  0DAB               	rlf	___ftdiv@f1+2,f
 16740  0DC6  0B89               	decfsz	9,f
 16741  0DC7  2DC3               	goto	u5625
 16742  0DC8  3001               	movlw	1
 16743  0DC9  02B0               	subwf	___ftdiv@cntr,f
 16744  0DCA  1D03               	btfss	3,2
 16745  0DCB  2DA9               	goto	l6438
 16746  0DCC  0831               	movf	___ftdiv@f3,w
 16747  0DCD  00F2               	movwf	___ftpack@arg
 16748  0DCE  0832               	movf	___ftdiv@f3+1,w
 16749  0DCF  00F3               	movwf	___ftpack@arg+1
 16750  0DD0  0833               	movf	___ftdiv@f3+2,w
 16751  0DD1  00F4               	movwf	___ftpack@arg+2
 16752  0DD2  0834               	movf	___ftdiv@exp,w
 16753  0DD3  00AC               	movwf	??___ftdiv
 16754  0DD4  082C               	movf	??___ftdiv,w
 16755  0DD5  00F5               	movwf	___ftpack@exp
 16756  0DD6  0835               	movf	___ftdiv@sign,w
 16757  0DD7  00AD               	movwf	??___ftdiv+1
 16758  0DD8  082D               	movf	??___ftdiv+1,w
 16759  0DD9  00F6               	movwf	___ftpack@sign
 16760  0DDA  3197  27A0         	fcall	___ftpack
 16761  0DDC  0872               	movf	?___ftpack,w
 16762  0DDD  0020               	movlb	0	; select bank0
 16763  0DDE  00A6               	movwf	?___ftdiv
 16764  0DDF  0873               	movf	?___ftpack+1,w
 16765  0DE0  00A7               	movwf	?___ftdiv+1
 16766  0DE1  0874               	movf	?___ftpack+2,w
 16767  0DE2  00A8               	movwf	?___ftdiv+2
 16768  0DE3  0008               	return
 16769  0DE4                     __end_of___ftdiv:	
 16770                           
 16771                           	psect	text113
 16772  035A                     __ptext113:	
 16773 ;; *************** function ___ftadd *****************
 16774 ;; Defined at:
 16775 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16776 ;; Parameters:    Size  Location     Type
 16777 ;;  f1              3   25[BANK0 ] float 
 16778 ;;  f2              3   28[BANK0 ] float 
 16779 ;; Auto vars:     Size  Location     Type
 16780 ;;  exp1            1   37[BANK0 ] unsigned char 
 16781 ;;  exp2            1   36[BANK0 ] unsigned char 
 16782 ;;  sign            1   35[BANK0 ] unsigned char 
 16783 ;; Return value:  Size  Location     Type
 16784 ;;                  3   25[BANK0 ] float 
 16785 ;; Registers used:
 16786 ;;		wreg, status,2, status,0, pclath, cstack
 16787 ;; Tracked objects:
 16788 ;;		On entry : 0/0
 16789 ;;		On exit  : 0/0
 16790 ;;		Unchanged: 0/0
 16791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16792 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16793 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16794 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;Total ram usage:       13 bytes
 16797 ;; Hardware stack levels used:    1
 16798 ;; Hardware stack levels required when called:    4
 16799 ;; This function calls:
 16800 ;;		___ftpack
 16801 ;; This function is called by:
 16802 ;;		_getDimmerLights_PercentToValue
 16803 ;;		_getDimmerLights_ValueToPercent
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           
 16808                           ;psect for function ___ftadd
 16809  035A                     ___ftadd:	
 16810                           
 16811                           ;incstack = 0
 16812                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16813  035A  0020               	movlb	0	; select bank0
 16814  035B  0839               	movf	___ftadd@f1,w
 16815  035C  00BF               	movwf	??___ftadd
 16816  035D  083A               	movf	___ftadd@f1+1,w
 16817  035E  00C0               	movwf	??___ftadd+1
 16818  035F  083B               	movf	___ftadd@f1+2,w
 16819  0360  00C1               	movwf	??___ftadd+2
 16820  0361  1003               	clrc
 16821  0362  0D40               	rlf	??___ftadd+1,w
 16822  0363  0D41               	rlf	??___ftadd+2,w
 16823  0364  00C2               	movwf	??___ftadd+3
 16824  0365  0842               	movf	??___ftadd+3,w
 16825  0366  00C5               	movwf	___ftadd@exp1
 16826  0367  083C               	movf	___ftadd@f2,w
 16827  0368  00BF               	movwf	??___ftadd
 16828  0369  083D               	movf	___ftadd@f2+1,w
 16829  036A  00C0               	movwf	??___ftadd+1
 16830  036B  083E               	movf	___ftadd@f2+2,w
 16831  036C  00C1               	movwf	??___ftadd+2
 16832  036D  1003               	clrc
 16833  036E  0D40               	rlf	??___ftadd+1,w
 16834  036F  0D41               	rlf	??___ftadd+2,w
 16835  0370  00C2               	movwf	??___ftadd+3
 16836  0371  0842               	movf	??___ftadd+3,w
 16837  0372  00C4               	movwf	___ftadd@exp2
 16838  0373  0845               	movf	___ftadd@exp1,w
 16839  0374  1903               	btfsc	3,2
 16840  0375  2B82               	goto	l6348
 16841  0376  0844               	movf	___ftadd@exp2,w
 16842  0377  0245               	subwf	___ftadd@exp1,w
 16843  0378  1803               	skipnc
 16844  0379  2B89               	goto	l6352
 16845  037A  0345               	decf	___ftadd@exp1,w
 16846  037B  3AFF               	xorlw	255
 16847  037C  0744               	addwf	___ftadd@exp2,w
 16848  037D  00BF               	movwf	??___ftadd
 16849  037E  3019               	movlw	25
 16850  037F  023F               	subwf	??___ftadd,w
 16851  0380  1C03               	skipc
 16852  0381  2B89               	goto	l6352
 16853  0382                     l6348:	
 16854  0382  083C               	movf	___ftadd@f2,w
 16855  0383  00B9               	movwf	?___ftadd
 16856  0384  083D               	movf	___ftadd@f2+1,w
 16857  0385  00BA               	movwf	?___ftadd+1
 16858  0386  083E               	movf	___ftadd@f2+2,w
 16859  0387  00BB               	movwf	?___ftadd+2
 16860  0388  0008               	return
 16861  0389                     l6352:	
 16862  0389  0844               	movf	___ftadd@exp2,w
 16863  038A  1903               	btfsc	3,2
 16864  038B  0008               	return
 16865  038C  0845               	movf	___ftadd@exp1,w
 16866  038D  0244               	subwf	___ftadd@exp2,w
 16867  038E  1803               	skipnc
 16868  038F  2B98               	goto	l6358
 16869  0390  0344               	decf	___ftadd@exp2,w
 16870  0391  3AFF               	xorlw	255
 16871  0392  0745               	addwf	___ftadd@exp1,w
 16872  0393  00BF               	movwf	??___ftadd
 16873  0394  3019               	movlw	25
 16874  0395  023F               	subwf	??___ftadd,w
 16875  0396  1803               	btfsc	3,0
 16876  0397  0008               	return
 16877  0398                     l6358:	
 16878  0398  3006               	movlw	6
 16879  0399  00BF               	movwf	??___ftadd
 16880  039A  083F               	movf	??___ftadd,w
 16881  039B  00C3               	movwf	___ftadd@sign
 16882  039C  1BBB               	btfsc	___ftadd@f1+2,7
 16883  039D  17C3               	bsf	___ftadd@sign,7
 16884  039E  1BBE               	btfsc	___ftadd@f2+2,7
 16885  039F  1743               	bsf	___ftadd@sign,6
 16886  03A0  17BA               	bsf	___ftadd@f1+1,7
 16887  03A1  30FF               	movlw	255
 16888  03A2  05B9               	andwf	___ftadd@f1,f
 16889  03A3  30FF               	movlw	255
 16890  03A4  05BA               	andwf	___ftadd@f1+1,f
 16891  03A5  3000               	movlw	0
 16892  03A6  05BB               	andwf	___ftadd@f1+2,f
 16893  03A7  17BD               	bsf	___ftadd@f2+1,7
 16894  03A8  30FF               	movlw	255
 16895  03A9  05BC               	andwf	___ftadd@f2,f
 16896  03AA  30FF               	movlw	255
 16897  03AB  05BD               	andwf	___ftadd@f2+1,f
 16898  03AC  3000               	movlw	0
 16899  03AD  05BE               	andwf	___ftadd@f2+2,f
 16900  03AE  0844               	movf	___ftadd@exp2,w
 16901  03AF  0245               	subwf	___ftadd@exp1,w
 16902  03B0  1803               	skipnc
 16903  03B1  2BD4               	goto	l6380
 16904  03B2                     l6370:	
 16905  03B2  3001               	movlw	1
 16906  03B3                     u5425:	
 16907  03B3  35BC               	lslf	___ftadd@f2,f
 16908  03B4  0DBD               	rlf	___ftadd@f2+1,f
 16909  03B5  0DBE               	rlf	___ftadd@f2+2,f
 16910  03B6  0B89               	decfsz	9,f
 16911  03B7  2BB3               	goto	u5425
 16912  03B8  3001               	movlw	1
 16913  03B9  02C4               	subwf	___ftadd@exp2,f
 16914  03BA  0844               	movf	___ftadd@exp2,w
 16915  03BB  0645               	xorwf	___ftadd@exp1,w
 16916  03BC  1903               	skipnz
 16917  03BD  2BCF               	goto	l6378
 16918  03BE  3001               	movlw	1
 16919  03BF  02C3               	subwf	___ftadd@sign,f
 16920  03C0  0843               	movf	___ftadd@sign,w
 16921  03C1  3907               	andlw	7
 16922  03C2  1903               	btfsc	3,2
 16923  03C3  2BCF               	goto	l6378
 16924  03C4  2BB2               	goto	l6370
 16925  03C5                     l6376:	
 16926  03C5  3001               	movlw	1
 16927  03C6                     u5455:	
 16928  03C6  36BB               	lsrf	___ftadd@f1+2,f
 16929  03C7  0CBA               	rrf	___ftadd@f1+1,f
 16930  03C8  0CB9               	rrf	___ftadd@f1,f
 16931  03C9  0B89               	decfsz	9,f
 16932  03CA  2BC6               	goto	u5455
 16933  03CB  3001               	movlw	1
 16934  03CC  00BF               	movwf	??___ftadd
 16935  03CD  083F               	movf	??___ftadd,w
 16936  03CE  07C5               	addwf	___ftadd@exp1,f
 16937  03CF                     l6378:	
 16938  03CF  0845               	movf	___ftadd@exp1,w
 16939  03D0  0644               	xorwf	___ftadd@exp2,w
 16940  03D1  1903               	btfsc	3,2
 16941  03D2  2BF9               	goto	l3175
 16942  03D3  2BC5               	goto	l6376
 16943  03D4                     l6380:	
 16944  03D4  0845               	movf	___ftadd@exp1,w
 16945  03D5  0244               	subwf	___ftadd@exp2,w
 16946  03D6  1803               	skipnc
 16947  03D7  2BF9               	goto	l3175
 16948  03D8                     l6382:	
 16949  03D8  3001               	movlw	1
 16950  03D9                     u5485:	
 16951  03D9  35B9               	lslf	___ftadd@f1,f
 16952  03DA  0DBA               	rlf	___ftadd@f1+1,f
 16953  03DB  0DBB               	rlf	___ftadd@f1+2,f
 16954  03DC  0B89               	decfsz	9,f
 16955  03DD  2BD9               	goto	u5485
 16956  03DE  3001               	movlw	1
 16957  03DF  02C5               	subwf	___ftadd@exp1,f
 16958  03E0  0844               	movf	___ftadd@exp2,w
 16959  03E1  0645               	xorwf	___ftadd@exp1,w
 16960  03E2  1903               	skipnz
 16961  03E3  2BF5               	goto	l6390
 16962  03E4  3001               	movlw	1
 16963  03E5  02C3               	subwf	___ftadd@sign,f
 16964  03E6  0843               	movf	___ftadd@sign,w
 16965  03E7  3907               	andlw	7
 16966  03E8  1903               	btfsc	3,2
 16967  03E9  2BF5               	goto	l6390
 16968  03EA  2BD8               	goto	l6382
 16969  03EB                     l6388:	
 16970  03EB  3001               	movlw	1
 16971  03EC                     u5515:	
 16972  03EC  36BE               	lsrf	___ftadd@f2+2,f
 16973  03ED  0CBD               	rrf	___ftadd@f2+1,f
 16974  03EE  0CBC               	rrf	___ftadd@f2,f
 16975  03EF  0B89               	decfsz	9,f
 16976  03F0  2BEC               	goto	u5515
 16977  03F1  3001               	movlw	1
 16978  03F2  00BF               	movwf	??___ftadd
 16979  03F3  083F               	movf	??___ftadd,w
 16980  03F4  07C4               	addwf	___ftadd@exp2,f
 16981  03F5                     l6390:	
 16982  03F5  0845               	movf	___ftadd@exp1,w
 16983  03F6  0644               	xorwf	___ftadd@exp2,w
 16984  03F7  1D03               	skipz
 16985  03F8  2BEB               	goto	l6388
 16986  03F9                     l3175:	
 16987  03F9  1FC3               	btfss	___ftadd@sign,7
 16988  03FA  2C0B               	goto	l6394
 16989  03FB  30FF               	movlw	255
 16990  03FC  06B9               	xorwf	___ftadd@f1,f
 16991  03FD  30FF               	movlw	255
 16992  03FE  06BA               	xorwf	___ftadd@f1+1,f
 16993  03FF  30FF               	movlw	255
 16994  0400  06BB               	xorwf	___ftadd@f1+2,f
 16995  0401  3001               	movlw	1
 16996  0402  07B9               	addwf	___ftadd@f1,f
 16997  0403  3000               	movlw	0
 16998  0404  1803               	skipnc
 16999  0405  3001               	movlw	1
 17000  0406  07BA               	addwf	___ftadd@f1+1,f
 17001  0407  3000               	movlw	0
 17002  0408  1803               	skipnc
 17003  0409  3001               	movlw	1
 17004  040A  07BB               	addwf	___ftadd@f1+2,f
 17005  040B                     l6394:	
 17006  040B  1F43               	btfss	___ftadd@sign,6
 17007  040C  2C1D               	goto	l6398
 17008  040D  30FF               	movlw	255
 17009  040E  06BC               	xorwf	___ftadd@f2,f
 17010  040F  30FF               	movlw	255
 17011  0410  06BD               	xorwf	___ftadd@f2+1,f
 17012  0411  30FF               	movlw	255
 17013  0412  06BE               	xorwf	___ftadd@f2+2,f
 17014  0413  3001               	movlw	1
 17015  0414  07BC               	addwf	___ftadd@f2,f
 17016  0415  3000               	movlw	0
 17017  0416  1803               	skipnc
 17018  0417  3001               	movlw	1
 17019  0418  07BD               	addwf	___ftadd@f2+1,f
 17020  0419  3000               	movlw	0
 17021  041A  1803               	skipnc
 17022  041B  3001               	movlw	1
 17023  041C  07BE               	addwf	___ftadd@f2+2,f
 17024  041D                     l6398:	
 17025  041D  01C3               	clrf	___ftadd@sign
 17026  041E  0839               	movf	___ftadd@f1,w
 17027  041F  07BC               	addwf	___ftadd@f2,f
 17028  0420  083A               	movf	___ftadd@f1+1,w
 17029  0421  3DBD               	addwfc	___ftadd@f2+1,f
 17030  0422  083B               	movf	___ftadd@f1+2,w
 17031  0423  3DBE               	addwfc	___ftadd@f2+2,f
 17032  0424  1FBE               	btfss	___ftadd@f2+2,7
 17033  0425  2C38               	goto	l6408
 17034  0426  30FF               	movlw	255
 17035  0427  06BC               	xorwf	___ftadd@f2,f
 17036  0428  30FF               	movlw	255
 17037  0429  06BD               	xorwf	___ftadd@f2+1,f
 17038  042A  30FF               	movlw	255
 17039  042B  06BE               	xorwf	___ftadd@f2+2,f
 17040  042C  3001               	movlw	1
 17041  042D  07BC               	addwf	___ftadd@f2,f
 17042  042E  3000               	movlw	0
 17043  042F  1803               	skipnc
 17044  0430  3001               	movlw	1
 17045  0431  07BD               	addwf	___ftadd@f2+1,f
 17046  0432  3000               	movlw	0
 17047  0433  1803               	skipnc
 17048  0434  3001               	movlw	1
 17049  0435  07BE               	addwf	___ftadd@f2+2,f
 17050  0436  01C3               	clrf	___ftadd@sign
 17051  0437  0AC3               	incf	___ftadd@sign,f
 17052  0438                     l6408:	
 17053  0438  083C               	movf	___ftadd@f2,w
 17054  0439  00F2               	movwf	___ftpack@arg
 17055  043A  083D               	movf	___ftadd@f2+1,w
 17056  043B  00F3               	movwf	___ftpack@arg+1
 17057  043C  083E               	movf	___ftadd@f2+2,w
 17058  043D  00F4               	movwf	___ftpack@arg+2
 17059  043E  0845               	movf	___ftadd@exp1,w
 17060  043F  00BF               	movwf	??___ftadd
 17061  0440  083F               	movf	??___ftadd,w
 17062  0441  00F5               	movwf	___ftpack@exp
 17063  0442  0843               	movf	___ftadd@sign,w
 17064  0443  00C0               	movwf	??___ftadd+1
 17065  0444  0840               	movf	??___ftadd+1,w
 17066  0445  00F6               	movwf	___ftpack@sign
 17067  0446  3197  27A0         	fcall	___ftpack
 17068  0448  0872               	movf	?___ftpack,w
 17069  0449  0020               	movlb	0	; select bank0
 17070  044A  00B9               	movwf	?___ftadd
 17071  044B  0873               	movf	?___ftpack+1,w
 17072  044C  00BA               	movwf	?___ftadd+1
 17073  044D  0874               	movf	?___ftpack+2,w
 17074  044E  00BB               	movwf	?___ftadd+2
 17075  044F  0008               	return
 17076  0450                     __end_of___ftadd:	
 17077                           
 17078                           	psect	text114
 17079  1FDE                     __ptext114:	
 17080 ;; *************** function ___awtoft *****************
 17081 ;; Defined at:
 17082 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17083 ;; Parameters:    Size  Location     Type
 17084 ;;  c               2    0[BANK0 ] int 
 17085 ;; Auto vars:     Size  Location     Type
 17086 ;;  sign            1    5[BANK0 ] unsigned char 
 17087 ;; Return value:  Size  Location     Type
 17088 ;;                  3    0[BANK0 ] float 
 17089 ;; Registers used:
 17090 ;;		wreg, status,2, status,0, pclath, cstack
 17091 ;; Tracked objects:
 17092 ;;		On entry : 0/0
 17093 ;;		On exit  : 0/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17096 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17100 ;;Total ram usage:        6 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    4
 17103 ;; This function calls:
 17104 ;;		___ftpack
 17105 ;; This function is called by:
 17106 ;;		_getDimmerLights_PercentToValue
 17107 ;;		_getDimmerLights_ValueToPercent
 17108 ;; This function uses a non-reentrant model
 17109 ;;
 17110                           
 17111                           
 17112                           ;psect for function ___awtoft
 17113  1FDE                     ___awtoft:	
 17114                           
 17115                           ;incstack = 0
 17116                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17117  1FDE  0020               	movlb	0	; select bank0
 17118  1FDF  01A5               	clrf	___awtoft@sign
 17119  1FE0  1FA1               	btfss	___awtoft@c+1,7
 17120  1FE1  2FE9               	goto	l9096
 17121  1FE2  09A0               	comf	___awtoft@c,f
 17122  1FE3  09A1               	comf	___awtoft@c+1,f
 17123  1FE4  0AA0               	incf	___awtoft@c,f
 17124  1FE5  1903               	skipnz
 17125  1FE6  0AA1               	incf	___awtoft@c+1,f
 17126  1FE7  01A5               	clrf	___awtoft@sign
 17127  1FE8  0AA5               	incf	___awtoft@sign,f
 17128  1FE9                     l9096:	
 17129  1FE9  0820               	movf	___awtoft@c,w
 17130  1FEA  00F2               	movwf	___ftpack@arg
 17131  1FEB  0821               	movf	___awtoft@c+1,w
 17132  1FEC  00F3               	movwf	___ftpack@arg+1
 17133  1FED  01F4               	clrf	___ftpack@arg+2
 17134  1FEE  308E               	movlw	142
 17135  1FEF  00A3               	movwf	??___awtoft
 17136  1FF0  0823               	movf	??___awtoft,w
 17137  1FF1  00F5               	movwf	___ftpack@exp
 17138  1FF2  0825               	movf	___awtoft@sign,w
 17139  1FF3  00A4               	movwf	??___awtoft+1
 17140  1FF4  0824               	movf	??___awtoft+1,w
 17141  1FF5  00F6               	movwf	___ftpack@sign
 17142  1FF6  3197  27A0         	fcall	___ftpack
 17143  1FF8  0872               	movf	?___ftpack,w
 17144  1FF9  0020               	movlb	0	; select bank0
 17145  1FFA  00A0               	movwf	?___awtoft
 17146  1FFB  0873               	movf	?___ftpack+1,w
 17147  1FFC  00A1               	movwf	?___awtoft+1
 17148  1FFD  0874               	movf	?___ftpack+2,w
 17149  1FFE  00A2               	movwf	?___awtoft+2
 17150  1FFF  0008               	return
 17151  2000                     __end_of___awtoft:	
 17152                           
 17153                           	psect	text115
 17154  17A0                     __ptext115:	
 17155 ;; *************** function ___ftpack *****************
 17156 ;; Defined at:
 17157 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17158 ;; Parameters:    Size  Location     Type
 17159 ;;  arg             3    2[COMMON] unsigned um
 17160 ;;  exp             1    5[COMMON] unsigned char 
 17161 ;;  sign            1    6[COMMON] unsigned char 
 17162 ;; Auto vars:     Size  Location     Type
 17163 ;;		None
 17164 ;; Return value:  Size  Location     Type
 17165 ;;                  3    2[COMMON] float 
 17166 ;; Registers used:
 17167 ;;		wreg, status,2, status,0
 17168 ;; Tracked objects:
 17169 ;;		On entry : 0/0
 17170 ;;		On exit  : 0/0
 17171 ;;		Unchanged: 0/0
 17172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17173 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17175 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17176 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17177 ;;Total ram usage:        8 bytes
 17178 ;; Hardware stack levels used:    1
 17179 ;; Hardware stack levels required when called:    3
 17180 ;; This function calls:
 17181 ;;		Nothing
 17182 ;; This function is called by:
 17183 ;;		___awtoft
 17184 ;;		___ftadd
 17185 ;;		___ftdiv
 17186 ;;		___ftmul
 17187 ;; This function uses a non-reentrant model
 17188 ;;
 17189                           
 17190                           
 17191                           ;psect for function ___ftpack
 17192  17A0                     ___ftpack:	
 17193                           
 17194                           ;incstack = 0
 17195                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17196  17A0  0875               	movf	___ftpack@exp,w
 17197  17A1  1903               	btfsc	3,2
 17198  17A2  2FA8               	goto	l6196
 17199  17A3  0874               	movf	___ftpack@arg+2,w
 17200  17A4  0473               	iorwf	___ftpack@arg+1,w
 17201  17A5  0472               	iorwf	___ftpack@arg,w
 17202  17A6  1D03               	skipz
 17203  17A7  2FB9               	goto	l6202
 17204  17A8                     l6196:	
 17205  17A8  3000               	movlw	0
 17206  17A9  00F2               	movwf	?___ftpack
 17207  17AA  3000               	movlw	0
 17208  17AB  00F3               	movwf	?___ftpack+1
 17209  17AC  3000               	movlw	0
 17210  17AD  00F4               	movwf	?___ftpack+2
 17211  17AE  0008               	return
 17212  17AF                     l6200:	
 17213  17AF  3001               	movlw	1
 17214  17B0  00F7               	movwf	??___ftpack
 17215  17B1  0877               	movf	??___ftpack,w
 17216  17B2  07F5               	addwf	___ftpack@exp,f
 17217  17B3  3001               	movlw	1
 17218  17B4                     u5035:	
 17219  17B4  36F4               	lsrf	___ftpack@arg+2,f
 17220  17B5  0CF3               	rrf	___ftpack@arg+1,f
 17221  17B6  0CF2               	rrf	___ftpack@arg,f
 17222  17B7  0B89               	decfsz	9,f
 17223  17B8  2FB4               	goto	u5035
 17224  17B9                     l6202:	
 17225  17B9  30FE               	movlw	254
 17226  17BA  0574               	andwf	___ftpack@arg+2,w
 17227  17BB  1903               	btfsc	3,2
 17228  17BC  2FD2               	goto	l3146
 17229  17BD  2FAF               	goto	l6200
 17230  17BE                     l6204:	
 17231  17BE  3001               	movlw	1
 17232  17BF  00F7               	movwf	??___ftpack
 17233  17C0  0877               	movf	??___ftpack,w
 17234  17C1  07F5               	addwf	___ftpack@exp,f
 17235  17C2  3001               	movlw	1
 17236  17C3  07F2               	addwf	___ftpack@arg,f
 17237  17C4  3000               	movlw	0
 17238  17C5  1803               	skipnc
 17239  17C6  3001               	movlw	1
 17240  17C7  07F3               	addwf	___ftpack@arg+1,f
 17241  17C8  3000               	movlw	0
 17242  17C9  1803               	skipnc
 17243  17CA  3001               	movlw	1
 17244  17CB  07F4               	addwf	___ftpack@arg+2,f
 17245  17CC  3001               	movlw	1
 17246  17CD                     u5055:	
 17247  17CD  36F4               	lsrf	___ftpack@arg+2,f
 17248  17CE  0CF3               	rrf	___ftpack@arg+1,f
 17249  17CF  0CF2               	rrf	___ftpack@arg,f
 17250  17D0  0B89               	decfsz	9,f
 17251  17D1  2FCD               	goto	u5055
 17252  17D2                     l3146:	
 17253  17D2  30FF               	movlw	255
 17254  17D3  0574               	andwf	___ftpack@arg+2,w
 17255  17D4  1903               	btfsc	3,2
 17256  17D5  2FDF               	goto	l6212
 17257  17D6  2FBE               	goto	l6204
 17258  17D7                     l6210:	
 17259  17D7  3001               	movlw	1
 17260  17D8  02F5               	subwf	___ftpack@exp,f
 17261  17D9  3001               	movlw	1
 17262  17DA                     u5075:	
 17263  17DA  35F2               	lslf	___ftpack@arg,f
 17264  17DB  0DF3               	rlf	___ftpack@arg+1,f
 17265  17DC  0DF4               	rlf	___ftpack@arg+2,f
 17266  17DD  0B89               	decfsz	9,f
 17267  17DE  2FDA               	goto	u5075
 17268  17DF                     l6212:	
 17269  17DF  1FF3               	btfss	___ftpack@arg+1,7
 17270  17E0  2FD7               	goto	l6210
 17271  17E1  1875               	btfsc	___ftpack@exp,0
 17272  17E2  2FE9               	goto	l3152
 17273  17E3  30FF               	movlw	255
 17274  17E4  05F2               	andwf	___ftpack@arg,f
 17275  17E5  307F               	movlw	127
 17276  17E6  05F3               	andwf	___ftpack@arg+1,f
 17277  17E7  30FF               	movlw	255
 17278  17E8  05F4               	andwf	___ftpack@arg+2,f
 17279  17E9                     l3152:	
 17280  17E9  1003               	clrc
 17281  17EA  0CF5               	rrf	___ftpack@exp,f
 17282  17EB  0875               	movf	___ftpack@exp,w
 17283  17EC  00F7               	movwf	??___ftpack
 17284  17ED  01F8               	clrf	??___ftpack+1
 17285  17EE  01F9               	clrf	??___ftpack+2
 17286  17EF  3010               	movlw	16
 17287  17F0                     u5105:	
 17288  17F0  35F7               	lslf	??___ftpack,f
 17289  17F1  0DF8               	rlf	??___ftpack+1,f
 17290  17F2  0DF9               	rlf	??___ftpack+2,f
 17291  17F3  0B89               	decfsz	9,f
 17292  17F4  2FF0               	goto	u5105
 17293  17F5  0877               	movf	??___ftpack,w
 17294  17F6  04F2               	iorwf	___ftpack@arg,f
 17295  17F7  0878               	movf	??___ftpack+1,w
 17296  17F8  04F3               	iorwf	___ftpack@arg+1,f
 17297  17F9  0879               	movf	??___ftpack+2,w
 17298  17FA  04F4               	iorwf	___ftpack@arg+2,f
 17299  17FB  0876               	movf	___ftpack@sign,w
 17300  17FC  1903               	btfsc	3,2
 17301  17FD  0008               	return
 17302  17FE  17F4               	bsf	___ftpack@arg+2,7
 17303  17FF  0008               	return
 17304  1800                     __end_of___ftpack:	
 17305                           
 17306                           	psect	text116
 17307  1D2B                     __ptext116:	
 17308 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17309 ;; Defined at:
 17310 ;;		line 66 in file "../src/Dimmer_B1.c"
 17311 ;; Parameters:    Size  Location     Type
 17312 ;;  lights          1    wreg     unsigned char 
 17313 ;; Auto vars:     Size  Location     Type
 17314 ;;  lights          1    4[COMMON] unsigned char 
 17315 ;;  value           1    3[COMMON] unsigned char 
 17316 ;; Return value:  Size  Location     Type
 17317 ;;                  1    wreg      unsigned char 
 17318 ;; Registers used:
 17319 ;;		wreg, status,2
 17320 ;; Tracked objects:
 17321 ;;		On entry : 0/0
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17328 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17329 ;;Total ram usage:        3 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:    3
 17332 ;; This function calls:
 17333 ;;		Nothing
 17334 ;; This function is called by:
 17335 ;;		_setDimmerLights_Dimming
 17336 ;; This function uses a non-reentrant model
 17337 ;;
 17338                           
 17339                           
 17340                           ;psect for function _getDimmerIntr_DimmingValue
 17341  1D2B                     _getDimmerIntr_DimmingValue:	
 17342                           
 17343                           ;incstack = 0
 17344                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17345                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17346  1D2B  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 17347                           
 17348                           ;Dimmer_B1.c: 67: char value = 0;
 17349  1D2C  01F3               	clrf	getDimmerIntr_DimmingValue@value
 17350                           
 17351                           ;Dimmer_B1.c: 69: if (lights == 1) {
 17352  1D2D  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17353  1D2E  3A01               	xorlw	1
 17354  1D2F  1D03               	skipz
 17355  1D30  2D34               	goto	l7030
 17356                           
 17357                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 17358  1D31  0021               	movlb	1	; select bank1
 17359  1D32  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 17360  1D33  2D3A               	goto	L9
 17361  1D34                     l7030:	
 17362                           ;Dimmer_B1.c: 71: }
 17363                           
 17364                           
 17365                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 17366  1D34  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17367  1D35  3A02               	xorlw	2
 17368  1D36  1D03               	skipz
 17369  1D37  2D3D               	goto	l742
 17370                           
 17371                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 17372  1D38  0021               	movlb	1	; select bank1
 17373  1D39  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 17374  1D3A                     L9:	
 17375  1D3A  00F2               	movwf	??_getDimmerIntr_DimmingValue
 17376  1D3B  0872               	movf	??_getDimmerIntr_DimmingValue,w
 17377  1D3C  00F3               	movwf	getDimmerIntr_DimmingValue@value
 17378  1D3D                     l742:	
 17379                           
 17380                           ;Dimmer_B1.c: 76: }
 17381                           ;Dimmer_B1.c: 83: return value;
 17382  1D3D  0873               	movf	getDimmerIntr_DimmingValue@value,w
 17383  1D3E  0008               	return
 17384  1D3F                     __end_of_getDimmerIntr_DimmingValue:	
 17385                           
 17386                           	psect	text117
 17387  1297                     __ptext117:	
 17388 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17389 ;; Defined at:
 17390 ;;		line 897 in file "../src/Dimmer_B1.c"
 17391 ;; Parameters:    Size  Location     Type
 17392 ;;  lights          1    wreg     unsigned char 
 17393 ;; Auto vars:     Size  Location     Type
 17394 ;;  lights          1    7[COMMON] unsigned char 
 17395 ;;  allow           1    8[COMMON] unsigned char 
 17396 ;; Return value:  Size  Location     Type
 17397 ;;                  1    wreg      unsigned char 
 17398 ;; Registers used:
 17399 ;;		wreg, status,2, status,0, pclath, cstack
 17400 ;; Tracked objects:
 17401 ;;		On entry : 0/0
 17402 ;;		On exit  : 0/0
 17403 ;;		Unchanged: 0/0
 17404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17408 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17409 ;;Total ram usage:        6 bytes
 17410 ;; Hardware stack levels used:    1
 17411 ;; Hardware stack levels required when called:    4
 17412 ;; This function calls:
 17413 ;;		_getLoad_OK
 17414 ;; This function is called by:
 17415 ;;		_setDimmerLights_Main
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           
 17420                           ;psect for function _getDimmerLights_Allow_Condition
 17421  1297                     _getDimmerLights_Allow_Condition:	
 17422                           
 17423                           ;incstack = 0
 17424                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17425                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17426  1297  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 17427                           
 17428                           ;Dimmer_B1.c: 898: char allow = 0;
 17429  1298  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 17430                           
 17431                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17432  1299  01F4               	clrf	_getDimmerLights_Allow_Condition$2188
 17433  129A  0AF4               	incf	_getDimmerLights_Allow_Condition$2188,f
 17434  129B  319A  22EE  3192   	fcall	_getLoad_OK
 17435  129E  3800               	iorlw	0
 17436  129F  1D03               	skipz
 17437  12A0  2AA5               	goto	l7330
 17438  12A1  0021               	movlb	1	; select bank1
 17439  12A2  18BA               	btfsc	_Dimmer^(0+128),1	;volatile
 17440  12A3  2AA5               	goto	l7330
 17441  12A4  01F4               	clrf	_getDimmerLights_Allow_Condition$2188
 17442  12A5                     l7330:	
 17443  12A5  0874               	movf	_getDimmerLights_Allow_Condition$2188,w
 17444  12A6  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17445  12A7  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17446  12A8  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17447                           
 17448                           ;Dimmer_B1.c: 908: if (allow == 0) {
 17449  12A9  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 17450  12AA  1D03               	skipz
 17451  12AB  2ACC               	goto	l7354
 17452                           
 17453                           ;Dimmer_B1.c: 909: if (lights == 1) {
 17454  12AC  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17455  12AD  3A01               	xorlw	1
 17456  12AE  1D03               	skipz
 17457  12AF  2ABB               	goto	l7344
 17458                           
 17459                           ;Dimmer_B1.c: 910: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17460  12B0  01F5               	clrf	_getDimmerLights_Allow_Condition$2189
 17461  12B1  0AF5               	incf	_getDimmerLights_Allow_Condition$2189,f
 17462  12B2  0023               	movlb	3	; select bank3
 17463  12B3  1A47               	btfsc	_DimmerLights2^(0+384),4
 17464  12B4  2AB9               	goto	l7342
 17465  12B5  0021               	movlb	1	; select bank1
 17466  12B6  1A69               	btfsc	_DimmerIntr2^(0+128),4
 17467  12B7  2AB9               	goto	l7342
 17468  12B8  01F5               	clrf	_getDimmerLights_Allow_Condition$2189
 17469  12B9                     l7342:	
 17470  12B9  0875               	movf	_getDimmerLights_Allow_Condition$2189,w
 17471  12BA  2AC9               	goto	L10
 17472  12BB                     l7344:	
 17473                           ;Dimmer_B1.c: 911: } else if (lights == 2) {
 17474                           
 17475  12BB  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17476  12BC  3A02               	xorlw	2
 17477  12BD  1D03               	skipz
 17478  12BE  2ACC               	goto	l7354
 17479                           
 17480                           ;Dimmer_B1.c: 912: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17481  12BF  01F6               	clrf	_getDimmerLights_Allow_Condition$2190
 17482  12C0  0AF6               	incf	_getDimmerLights_Allow_Condition$2190,f
 17483  12C1  0023               	movlb	3	; select bank3
 17484  12C2  1A3E               	btfsc	_DimmerLights1^(0+384),4
 17485  12C3  2AC8               	goto	l7352
 17486  12C4  0021               	movlb	1	; select bank1
 17487  12C5  1A62               	btfsc	_DimmerIntr1^(0+128),4
 17488  12C6  2AC8               	goto	l7352
 17489  12C7  01F6               	clrf	_getDimmerLights_Allow_Condition$2190
 17490  12C8                     l7352:	
 17491  12C8  0876               	movf	_getDimmerLights_Allow_Condition$2190,w
 17492  12C9                     L10:	
 17493  12C9  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17494  12CA  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17495  12CB  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17496  12CC                     l7354:	
 17497                           
 17498                           ;Dimmer_B1.c: 913: }
 17499                           ;Dimmer_B1.c: 914: }
 17500                           ;Dimmer_B1.c: 931: return allow;
 17501  12CC  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 17502  12CD  0008               	return
 17503  12CE                     __end_of_getDimmerLights_Allow_Condition:	
 17504                           
 17505                           	psect	text118
 17506  1AEE                     __ptext118:	
 17507 ;; *************** function _getLoad_OK *****************
 17508 ;; Defined at:
 17509 ;;		line 246 in file "../src/OverLoad_B1.c"
 17510 ;; Parameters:    Size  Location     Type
 17511 ;;		None
 17512 ;; Auto vars:     Size  Location     Type
 17513 ;;  ok              1    2[COMMON] unsigned char 
 17514 ;; Return value:  Size  Location     Type
 17515 ;;                  1    wreg      unsigned char 
 17516 ;; Registers used:
 17517 ;;		wreg, status,2
 17518 ;; Tracked objects:
 17519 ;;		On entry : 0/0
 17520 ;;		On exit  : 0/0
 17521 ;;		Unchanged: 0/0
 17522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;Total ram usage:        1 bytes
 17528 ;; Hardware stack levels used:    1
 17529 ;; Hardware stack levels required when called:    3
 17530 ;; This function calls:
 17531 ;;		Nothing
 17532 ;; This function is called by:
 17533 ;;		_DimmerLights_Main
 17534 ;;		_getDimmerLights_Allow_Condition
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           
 17539                           ;psect for function _getLoad_OK
 17540  1AEE                     _getLoad_OK:	
 17541                           
 17542                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 17543                           
 17544                           ;incstack = 0
 17545                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17546  1AEE  3000               	movlw	0
 17547  1AEF  0022               	movlb	2	; select bank2
 17548  1AF0  1BB0               	btfsc	_Load^(0+256),7
 17549  1AF1  3001               	movlw	1
 17550  1AF2  00F2               	movwf	getLoad_OK@ok
 17551                           
 17552                           ;OverLoad_B1.c: 248: return ok;
 17553  1AF3  0872               	movf	getLoad_OK@ok,w
 17554  1AF4  0008               	return
 17555  1AF5                     __end_of_getLoad_OK:	
 17556                           
 17557                           	psect	text119
 17558  11CC                     __ptext119:	
 17559 ;; *************** function _getMain_All_Error_Status *****************
 17560 ;; Defined at:
 17561 ;;		line 425 in file "../src/Main_B1.c"
 17562 ;; Parameters:    Size  Location     Type
 17563 ;;  command         1    wreg     unsigned char 
 17564 ;; Auto vars:     Size  Location     Type
 17565 ;;  command         1    7[COMMON] unsigned char 
 17566 ;;  status          1    8[COMMON] unsigned char 
 17567 ;; Return value:  Size  Location     Type
 17568 ;;                  1    wreg      unsigned char 
 17569 ;; Registers used:
 17570 ;;		wreg, status,2, status,0
 17571 ;; Tracked objects:
 17572 ;;		On entry : 0/0
 17573 ;;		On exit  : 0/0
 17574 ;;		Unchanged: 0/0
 17575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17578 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17579 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17580 ;;Total ram usage:        7 bytes
 17581 ;; Hardware stack levels used:    1
 17582 ;; Hardware stack levels required when called:    3
 17583 ;; This function calls:
 17584 ;;		Nothing
 17585 ;; This function is called by:
 17586 ;;		_DimmerLights_Main
 17587 ;;		_Exception_Main
 17588 ;;		_Load_Main
 17589 ;;		_setTemp_Main
 17590 ;;		_getRxData
 17591 ;;		_setSw_Main
 17592 ;; This function uses a non-reentrant model
 17593 ;;
 17594                           
 17595                           
 17596                           ;psect for function _getMain_All_Error_Status
 17597  11CC                     _getMain_All_Error_Status:	
 17598                           
 17599                           ;incstack = 0
 17600                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17601                           ;getMain_All_Error_Status@command stored from wreg
 17602  11CC  00F7               	movwf	getMain_All_Error_Status@command
 17603                           
 17604                           ;Main_B1.c: 426: char status = 0;
 17605  11CD  01F8               	clrf	getMain_All_Error_Status@status
 17606                           
 17607                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17608  11CE  08F8               	movf	getMain_All_Error_Status@status,f
 17609  11CF  1D03               	skipz
 17610  11D0  29E3               	goto	l7062
 17611  11D1  0877               	movf	getMain_All_Error_Status@command,w
 17612  11D2  3A02               	xorlw	2
 17613  11D3  1903               	skipnz
 17614  11D4  29E3               	goto	l7062
 17615                           
 17616                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17617  11D5  0021               	movlb	1	; select bank1
 17618  11D6  18D0               	btfsc	_Temp^(0+128),1
 17619  11D7  29DB               	goto	l7060
 17620  11D8  01F3               	clrf	_getMain_All_Error_Status$3439
 17621  11D9  01F4               	clrf	_getMain_All_Error_Status$3439+1
 17622  11DA  29DF               	goto	l1678
 17623  11DB                     l7060:	
 17624  11DB  3002               	movlw	2
 17625  11DC  00F3               	movwf	_getMain_All_Error_Status$3439
 17626  11DD  3000               	movlw	0
 17627  11DE  00F4               	movwf	_getMain_All_Error_Status$3439+1
 17628  11DF                     l1678:	
 17629  11DF  0873               	movf	_getMain_All_Error_Status$3439,w
 17630  11E0  00F2               	movwf	??_getMain_All_Error_Status
 17631  11E1  0872               	movf	??_getMain_All_Error_Status,w
 17632  11E2  00F8               	movwf	getMain_All_Error_Status@status
 17633  11E3                     l7062:	
 17634                           
 17635                           ;Main_B1.c: 439: }
 17636                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17637  11E3  08F8               	movf	getMain_All_Error_Status@status,f
 17638  11E4  1D03               	skipz
 17639  11E5  29F8               	goto	l1679
 17640  11E6  0877               	movf	getMain_All_Error_Status@command,w
 17641  11E7  3A03               	xorlw	3
 17642  11E8  1903               	skipnz
 17643  11E9  29F8               	goto	l1679
 17644                           
 17645                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17646  11EA  0022               	movlb	2	; select bank2
 17647  11EB  1AB0               	btfsc	_Load^(0+256),5
 17648  11EC  29F0               	goto	l7070
 17649  11ED  01F5               	clrf	_getMain_All_Error_Status$3440
 17650  11EE  01F6               	clrf	_getMain_All_Error_Status$3440+1
 17651  11EF  29F4               	goto	l1683
 17652  11F0                     l7070:	
 17653  11F0  3003               	movlw	3
 17654  11F1  00F5               	movwf	_getMain_All_Error_Status$3440
 17655  11F2  3000               	movlw	0
 17656  11F3  00F6               	movwf	_getMain_All_Error_Status$3440+1
 17657  11F4                     l1683:	
 17658  11F4  0875               	movf	_getMain_All_Error_Status$3440,w
 17659  11F5  00F2               	movwf	??_getMain_All_Error_Status
 17660  11F6  0872               	movf	??_getMain_All_Error_Status,w
 17661  11F7  00F8               	movwf	getMain_All_Error_Status@status
 17662  11F8                     l1679:	
 17663                           
 17664                           ;Main_B1.c: 446: }
 17665                           ;Main_B1.c: 462: return status;
 17666  11F8  0878               	movf	getMain_All_Error_Status@status,w
 17667  11F9  0008               	return
 17668  11FA                     __end_of_getMain_All_Error_Status:	
 17669                           
 17670                           	psect	text120
 17671  1B3C                     __ptext120:	
 17672 ;; *************** function _DimmerLights_Initialization *****************
 17673 ;; Defined at:
 17674 ;;		line 593 in file "../src/Dimmer_B1.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;		None
 17677 ;; Auto vars:     Size  Location     Type
 17678 ;;		None
 17679 ;; Return value:  Size  Location     Type
 17680 ;;		None               void
 17681 ;; Registers used:
 17682 ;;		wreg, status,2, status,0, pclath, cstack
 17683 ;; Tracked objects:
 17684 ;;		On entry : 0/0
 17685 ;;		On exit  : 0/0
 17686 ;;		Unchanged: 0/0
 17687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;Total ram usage:        0 bytes
 17693 ;; Hardware stack levels used:    1
 17694 ;; Hardware stack levels required when called:    4
 17695 ;; This function calls:
 17696 ;;		_DimmerIntr_Initialization
 17697 ;;		_setDimmerLights_Initialization
 17698 ;; This function is called by:
 17699 ;;		_main
 17700 ;; This function uses a non-reentrant model
 17701 ;;
 17702                           
 17703                           
 17704                           ;psect for function _DimmerLights_Initialization
 17705  1B3C                     _DimmerLights_Initialization:	
 17706                           
 17707                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17708                           
 17709                           ;incstack = 0
 17710                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17711  1B3C  3001               	movlw	1
 17712  1B3D  319A  22B1  319B   	fcall	_setDimmerLights_Initialization
 17713                           
 17714                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17715  1B40  3002               	movlw	2
 17716  1B41  319A  22B1  319B   	fcall	_setDimmerLights_Initialization
 17717                           
 17718                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17719  1B44  319F  27BC         	fcall	_DimmerIntr_Initialization
 17720  1B46  0008               	return
 17721  1B47                     __end_of_DimmerLights_Initialization:	
 17722                           
 17723                           	psect	text121
 17724  1AB1                     __ptext121:	
 17725 ;; *************** function _setDimmerLights_Initialization *****************
 17726 ;; Defined at:
 17727 ;;		line 609 in file "../src/Dimmer_B1.c"
 17728 ;; Parameters:    Size  Location     Type
 17729 ;;  lights          1    wreg     unsigned char 
 17730 ;; Auto vars:     Size  Location     Type
 17731 ;;  lights          1    0[COMMON] unsigned char 
 17732 ;; Return value:  Size  Location     Type
 17733 ;;		None               void
 17734 ;; Registers used:
 17735 ;;		wreg
 17736 ;; Tracked objects:
 17737 ;;		On entry : 0/0
 17738 ;;		On exit  : 0/0
 17739 ;;		Unchanged: 0/0
 17740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;Total ram usage:        0 bytes
 17746 ;; Hardware stack levels used:    1
 17747 ;; Hardware stack levels required when called:    3
 17748 ;; This function calls:
 17749 ;;		Nothing
 17750 ;; This function is called by:
 17751 ;;		_DimmerLights_Initialization
 17752 ;; This function uses a non-reentrant model
 17753 ;;
 17754                           
 17755                           
 17756                           ;psect for function _setDimmerLights_Initialization
 17757  1AB1                     _setDimmerLights_Initialization:	
 17758                           
 17759                           ;incstack = 0
 17760                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17761  1AB1  0008               	return
 17762  1AB2                     __end_of_setDimmerLights_Initialization:	
 17763                           
 17764                           	psect	text122
 17765  1FBC                     __ptext122:	
 17766 ;; *************** function _DimmerIntr_Initialization *****************
 17767 ;; Defined at:
 17768 ;;		line 7 in file "../src/Dimmer_B1.c"
 17769 ;; Parameters:    Size  Location     Type
 17770 ;;		None
 17771 ;; Auto vars:     Size  Location     Type
 17772 ;;		None
 17773 ;; Return value:  Size  Location     Type
 17774 ;;		None               void
 17775 ;; Registers used:
 17776 ;;		wreg
 17777 ;; Tracked objects:
 17778 ;;		On entry : 0/0
 17779 ;;		On exit  : 0/0
 17780 ;;		Unchanged: 0/0
 17781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;Total ram usage:        1 bytes
 17787 ;; Hardware stack levels used:    1
 17788 ;; Hardware stack levels required when called:    3
 17789 ;; This function calls:
 17790 ;;		Nothing
 17791 ;; This function is called by:
 17792 ;;		_DimmerLights_Initialization
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           
 17797                           ;psect for function _DimmerIntr_Initialization
 17798  1FBC                     _DimmerIntr_Initialization:	
 17799                           
 17800                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17801                           
 17802                           ;incstack = 0
 17803                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17804  1FBC  3007               	movlw	7
 17805  1FBD  00F2               	movwf	??_DimmerIntr_Initialization
 17806  1FBE  0872               	movf	??_DimmerIntr_Initialization,w
 17807  1FBF  0021               	movlb	1	; select bank1
 17808  1FC0  00E5               	movwf	(_DimmerIntr1^(0+128)+3)
 17809                           
 17810                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17811  1FC1  3034               	movlw	52
 17812  1FC2  00F2               	movwf	??_DimmerIntr_Initialization
 17813  1FC3  0872               	movf	??_DimmerIntr_Initialization,w
 17814  1FC4  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 17815                           
 17816                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17817  1FC5  3010               	movlw	16
 17818  1FC6  00F2               	movwf	??_DimmerIntr_Initialization
 17819  1FC7  0872               	movf	??_DimmerIntr_Initialization,w
 17820  1FC8  00E8               	movwf	(_DimmerIntr1^(0+128)+6)
 17821                           
 17822                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17823  1FC9  3034               	movlw	52
 17824  1FCA  00F2               	movwf	??_DimmerIntr_Initialization
 17825  1FCB  0872               	movf	??_DimmerIntr_Initialization,w
 17826  1FCC  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 17827                           
 17828                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17829  1FCD  3007               	movlw	7
 17830  1FCE  00F2               	movwf	??_DimmerIntr_Initialization
 17831  1FCF  0872               	movf	??_DimmerIntr_Initialization,w
 17832  1FD0  00EC               	movwf	(_DimmerIntr2^(0+128)+3)
 17833                           
 17834                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17835  1FD1  3034               	movlw	52
 17836  1FD2  00F2               	movwf	??_DimmerIntr_Initialization
 17837  1FD3  0872               	movf	??_DimmerIntr_Initialization,w
 17838  1FD4  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 17839                           
 17840                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17841  1FD5  3010               	movlw	16
 17842  1FD6  00F2               	movwf	??_DimmerIntr_Initialization
 17843  1FD7  0872               	movf	??_DimmerIntr_Initialization,w
 17844  1FD8  00EF               	movwf	(_DimmerIntr2^(0+128)+6)
 17845                           
 17846                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17847  1FD9  3034               	movlw	52
 17848  1FDA  00F2               	movwf	??_DimmerIntr_Initialization
 17849  1FDB  0872               	movf	??_DimmerIntr_Initialization,w
 17850  1FDC  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 17851  1FDD  0008               	return
 17852  1FDE                     __end_of_DimmerIntr_Initialization:	
 17853                           
 17854                           	psect	text123
 17855  1B19                     __ptext123:	
 17856 ;; *************** function _DelayOff_Main *****************
 17857 ;; Defined at:
 17858 ;;		line 41 in file "../src/DelayOff_B1.c"
 17859 ;; Parameters:    Size  Location     Type
 17860 ;;		None
 17861 ;; Auto vars:     Size  Location     Type
 17862 ;;		None
 17863 ;; Return value:  Size  Location     Type
 17864 ;;		None               void
 17865 ;; Registers used:
 17866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17867 ;; Tracked objects:
 17868 ;;		On entry : 0/0
 17869 ;;		On exit  : 0/0
 17870 ;;		Unchanged: 0/0
 17871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;Total ram usage:        0 bytes
 17877 ;; Hardware stack levels used:    1
 17878 ;; Hardware stack levels required when called:    7
 17879 ;; This function calls:
 17880 ;;		_DlyOff_Main
 17881 ;; This function is called by:
 17882 ;;		_main
 17883 ;; This function uses a non-reentrant model
 17884 ;;
 17885                           
 17886                           
 17887                           ;psect for function _DelayOff_Main
 17888  1B19                     _DelayOff_Main:	
 17889                           
 17890                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17891                           
 17892                           ;incstack = 0
 17893                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17894  1B19  3001               	movlw	1
 17895  1B1A  318A  223E  319B   	fcall	_DlyOff_Main
 17896                           
 17897                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17898  1B1D  3002               	movlw	2
 17899  1B1E  318A  223E         	fcall	_DlyOff_Main
 17900  1B20  0008               	return
 17901  1B21                     __end_of_DelayOff_Main:	
 17902                           
 17903                           	psect	text124
 17904  0A3E                     __ptext124:	
 17905 ;; *************** function _DlyOff_Main *****************
 17906 ;; Defined at:
 17907 ;;		line 61 in file "../src/DelayOff_B1.c"
 17908 ;; Parameters:    Size  Location     Type
 17909 ;;  sw              1    wreg     unsigned char 
 17910 ;; Auto vars:     Size  Location     Type
 17911 ;;  sw              1   64[BANK0 ] unsigned char 
 17912 ;; Return value:  Size  Location     Type
 17913 ;;		None               void
 17914 ;; Registers used:
 17915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17916 ;; Tracked objects:
 17917 ;;		On entry : 0/0
 17918 ;;		On exit  : 0/0
 17919 ;;		Unchanged: 0/0
 17920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;Total ram usage:        3 bytes
 17926 ;; Hardware stack levels used:    1
 17927 ;; Hardware stack levels required when called:    6
 17928 ;; This function calls:
 17929 ;;		_DelayOffPointSelect
 17930 ;;		_getDimmerLights_Status
 17931 ;;		_setDimmerLights_SwOff
 17932 ;;		_setDimmerLights_SwOn
 17933 ;;		_setProductData
 17934 ;; This function is called by:
 17935 ;;		_DelayOff_Main
 17936 ;; This function uses a non-reentrant model
 17937 ;;
 17938                           
 17939                           
 17940                           ;psect for function _DlyOff_Main
 17941  0A3E                     _DlyOff_Main:	
 17942                           
 17943                           ;incstack = 0
 17944                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17945                           ;DlyOff_Main@sw stored from wreg
 17946  0A3E  0020               	movlb	0	; select bank0
 17947  0A3F  00E0               	movwf	DlyOff_Main@sw
 17948                           
 17949                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17950  0A40  0860               	movf	DlyOff_Main@sw,w
 17951  0A41  319D  2553  318A   	fcall	_DelayOffPointSelect
 17952                           
 17953                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17954  0A44  0021               	movlb	1	; select bank1
 17955  0A45  0844               	movf	_DelayOff^(0+128),w
 17956  0A46  0086               	movwf	6
 17957  0A47  3001               	movlw	1	; select bank2/3
 17958  0A48  0087               	movwf	7
 17959  0A49  1C81               	btfss	1,1
 17960  0A4A  0008               	return
 17961                           
 17962                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17963  0A4B  0844               	movf	_DelayOff^(0+128),w
 17964  0A4C  3E02               	addlw	2
 17965  0A4D  0086               	movwf	6
 17966  0A4E  3001               	movlw	1	; select bank2/3
 17967  0A4F  0087               	movwf	7
 17968  0A50  3001               	movlw	1
 17969  0A51  0781               	addwf	1,f
 17970  0A52  3141               	addfsr 1,1
 17971  0A53  1803               	skipnc
 17972  0A54  0A81               	incf	1,f
 17973                           
 17974                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17975  0A55  0844               	movf	_DelayOff^(0+128),w
 17976  0A56  3E02               	addlw	2
 17977  0A57  0086               	movwf	6
 17978  0A58  3001               	movlw	1	; select bank2/3
 17979  0A59  0087               	movwf	7
 17980  0A5A  3F40               	moviw [0]fsr1
 17981  0A5B  0020               	movlb	0	; select bank0
 17982  0A5C  00DE               	movwf	??_DlyOff_Main
 17983  0A5D  3F41               	moviw [1]fsr1
 17984  0A5E  00DF               	movwf	??_DlyOff_Main+1
 17985  0A5F  300B               	movlw	11
 17986  0A60  025F               	subwf	??_DlyOff_Main+1,w
 17987  0A61  30B8               	movlw	184
 17988  0A62  1903               	skipnz
 17989  0A63  025E               	subwf	??_DlyOff_Main,w
 17990  0A64  1C03               	skipc
 17991  0A65  0008               	return
 17992                           
 17993                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17994  0A66  0021               	movlb	1	; select bank1
 17995  0A67  0844               	movf	_DelayOff^(0+128),w
 17996  0A68  3E02               	addlw	2
 17997  0A69  0086               	movwf	6
 17998  0A6A  3001               	movlw	1	; select bank2/3
 17999  0A6B  0087               	movwf	7
 18000  0A6C  3000               	movlw	0
 18001  0A6D  3FC0               	movwi [0]fsr1
 18002  0A6E  3FC1               	movwi [1]fsr1
 18003                           
 18004                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18005  0A6F  3001               	movlw	1
 18006  0A70  0020               	movlb	0	; select bank0
 18007  0A71  00DE               	movwf	??_DlyOff_Main
 18008  0A72  0021               	movlb	1	; select bank1
 18009  0A73  0844               	movf	_DelayOff^(0+128),w
 18010  0A74  3E04               	addlw	4
 18011  0A75  0086               	movwf	6
 18012  0A76  3001               	movlw	1	; select bank2/3
 18013  0A77  0087               	movwf	7
 18014  0A78  0020               	movlb	0	; select bank0
 18015  0A79  085E               	movf	??_DlyOff_Main,w
 18016  0A7A  0781               	addwf	1,f
 18017                           
 18018                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18019  0A7B  0021               	movlb	1	; select bank1
 18020  0A7C  0844               	movf	_DelayOff^(0+128),w
 18021  0A7D  3E04               	addlw	4
 18022  0A7E  0086               	movwf	6
 18023  0A7F  3001               	movlw	1	; select bank2/3
 18024  0A80  0087               	movwf	7
 18025  0A81  0A44               	incf	_DelayOff^(0+128),w
 18026  0A82  0084               	movwf	4
 18027  0A83  3001               	movlw	1	; select bank2/3
 18028  0A84  0085               	movwf	5
 18029  0A85  0800               	movf	0,w
 18030  0A86  0201               	subwf	1,w
 18031  0A87  1C03               	skipc
 18032  0A88  0008               	return
 18033                           
 18034                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18035  0A89  0844               	movf	_DelayOff^(0+128),w
 18036  0A8A  3E04               	addlw	4
 18037  0A8B  0086               	movwf	6
 18038  0A8C  3001               	movlw	1	; select bank2/3
 18039  0A8D  0087               	movwf	7
 18040  0A8E  0181               	clrf	1
 18041                           
 18042                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18043  0A8F  0844               	movf	_DelayOff^(0+128),w
 18044  0A90  0086               	movwf	6
 18045  0A91  3001               	movlw	1	; select bank2/3
 18046  0A92  0087               	movwf	7
 18047  0A93  1081               	bcf	1,1
 18048                           
 18049                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18050  0A94  0020               	movlb	0	; select bank0
 18051  0A95  0860               	movf	DlyOff_Main@sw,w
 18052  0A96  319B  23E7  318A   	fcall	_getDimmerLights_Status
 18053  0A99  3A01               	xorlw	1
 18054  0A9A  1D03               	skipz
 18055  0A9B  2AA6               	goto	l573
 18056                           
 18057                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18058  0A9C  0020               	movlb	0	; select bank0
 18059  0A9D  0860               	movf	DlyOff_Main@sw,w
 18060  0A9E  3196  2686  318A   	fcall	_setDimmerLights_SwOn
 18061                           
 18062                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18063  0AA1  0020               	movlb	0	; select bank0
 18064  0AA2  0860               	movf	DlyOff_Main@sw,w
 18065  0AA3  3192  22CE  318A   	fcall	_setDimmerLights_SwOff
 18066  0AA6                     l573:	
 18067                           
 18068                           ;DelayOff_B1.c: 78: }
 18069                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18070  0AA6  0020               	movlb	0	; select bank0
 18071  0AA7  01DA               	clrf	setProductData@value
 18072  0AA8  0860               	movf	DlyOff_Main@sw,w
 18073  0AA9  3E1A               	addlw	26
 18074  0AAA  319B  23D9         	fcall	_setProductData
 18075  0AAC  0008               	return
 18076  0AAD                     __end_of_DlyOff_Main:	
 18077                           
 18078                           	psect	text125
 18079  1BD9                     __ptext125:	
 18080 ;; *************** function _setProductData *****************
 18081 ;; Defined at:
 18082 ;;		line 592 in file "../src/Main_B1.c"
 18083 ;; Parameters:    Size  Location     Type
 18084 ;;  address         1    wreg     unsigned char 
 18085 ;;  value           1   58[BANK0 ] unsigned char 
 18086 ;; Auto vars:     Size  Location     Type
 18087 ;;  address         1   61[BANK0 ] unsigned char 
 18088 ;; Return value:  Size  Location     Type
 18089 ;;		None               void
 18090 ;; Registers used:
 18091 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18092 ;; Tracked objects:
 18093 ;;		On entry : 0/0
 18094 ;;		On exit  : 0/0
 18095 ;;		Unchanged: 0/0
 18096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18097 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;Total ram usage:        4 bytes
 18102 ;; Hardware stack levels used:    1
 18103 ;; Hardware stack levels required when called:    3
 18104 ;; This function calls:
 18105 ;;		Nothing
 18106 ;; This function is called by:
 18107 ;;		_DlyOff_Main
 18108 ;;		_setDelayOff_GO
 18109 ;;		_setDimmerLights_OnOff
 18110 ;;		_setDimmerLights_Dimming
 18111 ;;		_setTemp_Main
 18112 ;;		_setLog_Code
 18113 ;;		_setControl_Lights_Table
 18114 ;;		_setRFSW_AdjControl
 18115 ;;		_setRF_DimmerLights
 18116 ;; This function uses a non-reentrant model
 18117 ;;
 18118                           
 18119                           
 18120                           ;psect for function _setProductData
 18121  1BD9                     _setProductData:	
 18122                           
 18123                           ;incstack = 0
 18124                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18125                           ;setProductData@address stored from wreg
 18126  1BD9  0020               	movlb	0	; select bank0
 18127  1BDA  00DD               	movwf	setProductData@address
 18128                           
 18129                           ;Main_B1.c: 593: product->Data[address] = value;
 18130  1BDB  085A               	movf	setProductData@value,w
 18131  1BDC  00DB               	movwf	??_setProductData
 18132  1BDD  085D               	movf	setProductData@address,w
 18133  1BDE  076D               	addwf	_product,w
 18134  1BDF  00DC               	movwf	??_setProductData+1
 18135  1BE0  085C               	movf	??_setProductData+1,w
 18136  1BE1  0086               	movwf	6
 18137  1BE2  3002               	movlw	2	; select bank4/5
 18138  1BE3  0087               	movwf	7
 18139  1BE4  085B               	movf	??_setProductData,w
 18140  1BE5  0081               	movwf	1
 18141  1BE6  0008               	return
 18142  1BE7                     __end_of_setProductData:	
 18143                           
 18144                           	psect	text126
 18145  1686                     __ptext126:	
 18146 ;; *************** function _setDimmerLights_SwOn *****************
 18147 ;; Defined at:
 18148 ;;		line 649 in file "../src/Dimmer_B1.c"
 18149 ;; Parameters:    Size  Location     Type
 18150 ;;  sw              1    wreg     unsigned char 
 18151 ;; Auto vars:     Size  Location     Type
 18152 ;;  sw              1    9[BANK0 ] unsigned char 
 18153 ;;  idle            1    8[BANK0 ] unsigned char 
 18154 ;; Return value:  Size  Location     Type
 18155 ;;		None               void
 18156 ;; Registers used:
 18157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;Total ram usage:        5 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    5
 18170 ;; This function calls:
 18171 ;;		_DimmerLights_SelectPointer
 18172 ;;		_setBuz
 18173 ;; This function is called by:
 18174 ;;		_DlyOff_Main
 18175 ;;		_setControl_Lights_Table
 18176 ;;		_setRFSW_Control
 18177 ;;		_setRFSW_AdjControl
 18178 ;;		_setSw_Main
 18179 ;; This function uses a non-reentrant model
 18180 ;;
 18181                           
 18182                           
 18183                           ;psect for function _setDimmerLights_SwOn
 18184  1686                     _setDimmerLights_SwOn:	
 18185                           
 18186                           ;incstack = 0
 18187                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18188                           ;setDimmerLights_SwOn@sw stored from wreg
 18189  1686  0020               	movlb	0	; select bank0
 18190  1687  00A9               	movwf	setDimmerLights_SwOn@sw
 18191                           
 18192                           ;Dimmer_B1.c: 650: char idle = 0;
 18193  1688  01A8               	clrf	setDimmerLights_SwOn@idle
 18194                           
 18195                           ;Dimmer_B1.c: 652: if (idle == 0) {
 18196  1689  08A8               	movf	setDimmerLights_SwOn@idle,f
 18197  168A  1D03               	skipz
 18198  168B  2EB0               	goto	l9150
 18199                           
 18200                           ;Dimmer_B1.c: 653: if (sw == 1) {
 18201  168C  0829               	movf	setDimmerLights_SwOn@sw,w
 18202  168D  3A01               	xorlw	1
 18203  168E  1D03               	skipz
 18204  168F  2E9D               	goto	l9140
 18205                           
 18206                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18207  1690  01A6               	clrf	_setDimmerLights_SwOn$2159
 18208  1691  0AA6               	incf	_setDimmerLights_SwOn$2159,f
 18209  1692  0023               	movlb	3	; select bank3
 18210  1693  1A47               	btfsc	_DimmerLights2^(0+384),4
 18211  1694  2E9A               	goto	l9138
 18212  1695  0021               	movlb	1	; select bank1
 18213  1696  1A69               	btfsc	_DimmerIntr2^(0+128),4
 18214  1697  2E9A               	goto	l9138
 18215  1698  0020               	movlb	0	; select bank0
 18216  1699  01A6               	clrf	_setDimmerLights_SwOn$2159
 18217  169A                     l9138:	
 18218  169A  0020               	movlb	0	; select bank0
 18219  169B  0826               	movf	_setDimmerLights_SwOn$2159,w
 18220  169C  2EAD               	goto	L11
 18221  169D                     l9140:	
 18222                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 18223                           
 18224  169D  0829               	movf	setDimmerLights_SwOn@sw,w
 18225  169E  3A02               	xorlw	2
 18226  169F  1D03               	skipz
 18227  16A0  2EB0               	goto	l9150
 18228                           
 18229                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18230  16A1  01A7               	clrf	_setDimmerLights_SwOn$2160
 18231  16A2  0AA7               	incf	_setDimmerLights_SwOn$2160,f
 18232  16A3  0023               	movlb	3	; select bank3
 18233  16A4  1A3E               	btfsc	_DimmerLights1^(0+384),4
 18234  16A5  2EAB               	goto	l9148
 18235  16A6  0021               	movlb	1	; select bank1
 18236  16A7  1A62               	btfsc	_DimmerIntr1^(0+128),4
 18237  16A8  2EAB               	goto	l9148
 18238  16A9  0020               	movlb	0	; select bank0
 18239  16AA  01A7               	clrf	_setDimmerLights_SwOn$2160
 18240  16AB                     l9148:	
 18241  16AB  0020               	movlb	0	; select bank0
 18242  16AC  0827               	movf	_setDimmerLights_SwOn$2160,w
 18243  16AD                     L11:	
 18244  16AD  00F9               	movwf	??_setDimmerLights_SwOn
 18245  16AE  0879               	movf	??_setDimmerLights_SwOn,w
 18246  16AF  00A8               	movwf	setDimmerLights_SwOn@idle
 18247  16B0                     l9150:	
 18248                           
 18249                           ;Dimmer_B1.c: 657: }
 18250                           ;Dimmer_B1.c: 658: }
 18251                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 18252  16B0  0829               	movf	setDimmerLights_SwOn@sw,w
 18253  16B1  319D  2568  3196   	fcall	_DimmerLights_SelectPointer
 18254                           
 18255                           ;Dimmer_B1.c: 676: if (idle == 0) {
 18256  16B4  0020               	movlb	0	; select bank0
 18257  16B5  08A8               	movf	setDimmerLights_SwOn@idle,f
 18258  16B6  1D03               	skipz
 18259  16B7  0008               	return
 18260                           
 18261                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 18262  16B8  0021               	movlb	1	; select bank1
 18263  16B9  0846               	movf	_DimmerLights^(0+128),w
 18264  16BA  0086               	movwf	6
 18265  16BB  3001               	movlw	1	; select bank2/3
 18266  16BC  0087               	movwf	7
 18267  16BD  1401               	bsf	1,0
 18268                           
 18269                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 18270  16BE  0A46               	incf	_DimmerLights^(0+128),w
 18271  16BF  0086               	movwf	6
 18272  16C0  3001               	movlw	1	; select bank2/3
 18273  16C1  0087               	movwf	7
 18274  16C2  1801               	btfsc	1,0
 18275  16C3  2ED4               	goto	l9158
 18276                           
 18277                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 18278  16C4  0A46               	incf	_DimmerLights^(0+128),w
 18279  16C5  0086               	movwf	6
 18280  16C6  3001               	movlw	1	; select bank2/3
 18281  16C7  0087               	movwf	7
 18282  16C8  1401               	bsf	1,0
 18283                           
 18284                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 18285  16C9  0846               	movf	_DimmerLights^(0+128),w
 18286  16CA  0086               	movwf	6
 18287  16CB  3001               	movlw	1	; select bank2/3
 18288  16CC  0087               	movwf	7
 18289  16CD  1481               	bsf	1,1
 18290                           
 18291                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 18292  16CE  0846               	movf	_DimmerLights^(0+128),w
 18293  16CF  0086               	movwf	6
 18294  16D0  3001               	movlw	1	; select bank2/3
 18295  16D1  0087               	movwf	7
 18296  16D2  1501               	bsf	1,2
 18297                           
 18298                           ;Dimmer_B1.c: 682: } else {
 18299  16D3  2ED9               	goto	l9160
 18300  16D4                     l9158:	
 18301                           
 18302                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 18303  16D4  0A46               	incf	_DimmerLights^(0+128),w
 18304  16D5  0086               	movwf	6
 18305  16D6  3001               	movlw	1	; select bank2/3
 18306  16D7  0087               	movwf	7
 18307  16D8  1001               	bcf	1,0
 18308  16D9                     l9160:	
 18309                           
 18310                           ;Dimmer_B1.c: 684: }
 18311                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 18312  16D9  3064               	movlw	100
 18313  16DA  0020               	movlb	0	; select bank0
 18314  16DB  00A4               	movwf	setBuz@time
 18315  16DC  3000               	movlw	0
 18316  16DD  00A5               	movwf	setBuz@time+1
 18317  16DE  3001               	movlw	1
 18318  16DF  3195  2584         	fcall	_setBuz
 18319  16E1  0008               	return
 18320  16E2                     __end_of_setDimmerLights_SwOn:	
 18321                           
 18322                           	psect	text127
 18323  1584                     __ptext127:	
 18324 ;; *************** function _setBuz *****************
 18325 ;; Defined at:
 18326 ;;		line 22 in file "../src/Buzzer_B1.c"
 18327 ;; Parameters:    Size  Location     Type
 18328 ;;  count           1    wreg     unsigned char 
 18329 ;;  time            2    4[BANK0 ] int 
 18330 ;; Auto vars:     Size  Location     Type
 18331 ;;  count           1    8[COMMON] unsigned char 
 18332 ;; Return value:  Size  Location     Type
 18333 ;;		None               void
 18334 ;; Registers used:
 18335 ;;		wreg, status,2, status,0, pclath, cstack
 18336 ;; Tracked objects:
 18337 ;;		On entry : 0/0
 18338 ;;		On exit  : 0/0
 18339 ;;		Unchanged: 0/0
 18340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18344 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18345 ;;Total ram usage:        4 bytes
 18346 ;; Hardware stack levels used:    1
 18347 ;; Hardware stack levels required when called:    4
 18348 ;; This function calls:
 18349 ;;		___awdiv
 18350 ;; This function is called by:
 18351 ;;		_setDimmerLights_SwOn
 18352 ;;		_setDimmerLights_Dimming
 18353 ;;		_my_MainTimer
 18354 ;;		_Exception_Main
 18355 ;;		_setTemp_Main
 18356 ;;		_setLog_Code
 18357 ;;		_setRFSW_Control
 18358 ;;		_setSw_Main
 18359 ;; This function uses a non-reentrant model
 18360 ;;
 18361                           
 18362                           
 18363                           ;psect for function _setBuz
 18364  1584                     _setBuz:	
 18365                           
 18366                           ;incstack = 0
 18367                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18368                           ;setBuz@count stored from wreg
 18369  1584  00F8               	movwf	setBuz@count
 18370                           
 18371                           ;Buzzer_B1.c: 23: time /= 20;
 18372  1585  3014               	movlw	20
 18373  1586  00F2               	movwf	___awdiv@divisor
 18374  1587  3000               	movlw	0
 18375  1588  00F3               	movwf	___awdiv@divisor+1
 18376  1589  0020               	movlb	0	; select bank0
 18377  158A  0825               	movf	setBuz@time+1,w
 18378  158B  01F5               	clrf	___awdiv@dividend+1
 18379  158C  07F5               	addwf	___awdiv@dividend+1,f
 18380  158D  0824               	movf	setBuz@time,w
 18381  158E  01F4               	clrf	___awdiv@dividend
 18382  158F  07F4               	addwf	___awdiv@dividend,f
 18383  1590  3195  25D7  3195   	fcall	___awdiv
 18384  1593  0873               	movf	?___awdiv+1,w
 18385  1594  0020               	movlb	0	; select bank0
 18386  1595  01A5               	clrf	setBuz@time+1
 18387  1596  07A5               	addwf	setBuz@time+1,f
 18388  1597  0872               	movf	?___awdiv,w
 18389  1598  01A4               	clrf	setBuz@time
 18390  1599  07A4               	addwf	setBuz@time,f
 18391                           
 18392                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18393  159A  0021               	movlb	1	; select bank1
 18394  159B  1C2E               	btfss	_Buz1^(0+128),0
 18395  159C  0008               	return
 18396                           
 18397                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18398  159D  18AE               	btfsc	_Buz1^(0+128),1
 18399  159E  2DB3               	goto	l96
 18400                           
 18401                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18402  159F  14AE               	bsf	_Buz1^(0+128),1
 18403                           
 18404                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18405  15A0  01AF               	clrf	(_Buz1^(0+128)+1)
 18406  15A1  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18407                           
 18408                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18409  15A2  0878               	movf	setBuz@count,w
 18410  15A3  00F7               	movwf	??_setBuz
 18411  15A4  0877               	movf	??_setBuz,w
 18412  15A5  00B1               	movwf	(_Buz1^(0+128)+3)
 18413                           
 18414                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18415  15A6  0020               	movlb	0	; select bank0
 18416  15A7  0825               	movf	setBuz@time+1,w
 18417  15A8  0021               	movlb	1	; select bank1
 18418  15A9  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18419  15AA  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18420  15AB  0020               	movlb	0	; select bank0
 18421  15AC  0824               	movf	setBuz@time,w
 18422  15AD  0021               	movlb	1	; select bank1
 18423  15AE  01B4               	clrf	(_Buz1^(0+128)+6)
 18424  15AF  07B4               	addwf	(_Buz1^(0+128)+6),f
 18425                           
 18426                           ;Buzzer_B1.c: 30: RB3 = 1;
 18427  15B0  0020               	movlb	0	; select bank0
 18428  15B1  158D               	bsf	13,3	;volatile
 18429                           
 18430                           ;Buzzer_B1.c: 31: } else {
 18431  15B2  0008               	return
 18432  15B3                     l96:	
 18433                           
 18434                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18435  15B3  19AE               	btfsc	_Buz1^(0+128),3
 18436  15B4  2DC5               	goto	l98
 18437                           
 18438                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18439  15B5  15AE               	bsf	_Buz1^(0+128),3
 18440                           
 18441                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18442  15B6  0878               	movf	setBuz@count,w
 18443  15B7  00F7               	movwf	??_setBuz
 18444  15B8  0877               	movf	??_setBuz,w
 18445  15B9  00B2               	movwf	(_Buz1^(0+128)+4)
 18446                           
 18447                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18448  15BA  0020               	movlb	0	; select bank0
 18449  15BB  0825               	movf	setBuz@time+1,w
 18450  15BC  0021               	movlb	1	; select bank1
 18451  15BD  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18452  15BE  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18453  15BF  0020               	movlb	0	; select bank0
 18454  15C0  0824               	movf	setBuz@time,w
 18455  15C1  0021               	movlb	1	; select bank1
 18456  15C2  01B6               	clrf	(_Buz1^(0+128)+8)
 18457  15C3  07B6               	addwf	(_Buz1^(0+128)+8),f
 18458                           
 18459                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18460  15C4  0008               	return
 18461  15C5                     l98:	
 18462  15C5  1A2E               	btfsc	_Buz1^(0+128),4
 18463  15C6  0008               	return
 18464                           
 18465                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18466  15C7  162E               	bsf	_Buz1^(0+128),4
 18467                           
 18468                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18469  15C8  0878               	movf	setBuz@count,w
 18470  15C9  00F7               	movwf	??_setBuz
 18471  15CA  0877               	movf	??_setBuz,w
 18472  15CB  00B3               	movwf	(_Buz1^(0+128)+5)
 18473                           
 18474                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18475  15CC  0020               	movlb	0	; select bank0
 18476  15CD  0825               	movf	setBuz@time+1,w
 18477  15CE  0021               	movlb	1	; select bank1
 18478  15CF  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18479  15D0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18480  15D1  0020               	movlb	0	; select bank0
 18481  15D2  0824               	movf	setBuz@time,w
 18482  15D3  0021               	movlb	1	; select bank1
 18483  15D4  01B8               	clrf	(_Buz1^(0+128)+10)
 18484  15D5  07B8               	addwf	(_Buz1^(0+128)+10),f
 18485  15D6  0008               	return
 18486  15D7                     __end_of_setBuz:	
 18487                           
 18488                           	psect	text128
 18489  15D7                     __ptext128:	
 18490 ;; *************** function ___awdiv *****************
 18491 ;; Defined at:
 18492 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18493 ;; Parameters:    Size  Location     Type
 18494 ;;  divisor         2    2[COMMON] int 
 18495 ;;  dividend        2    4[COMMON] int 
 18496 ;; Auto vars:     Size  Location     Type
 18497 ;;  quotient        2    2[BANK0 ] int 
 18498 ;;  sign            1    1[BANK0 ] unsigned char 
 18499 ;;  counter         1    0[BANK0 ] unsigned char 
 18500 ;; Return value:  Size  Location     Type
 18501 ;;                  2    2[COMMON] int 
 18502 ;; Registers used:
 18503 ;;		wreg, status,2, status,0
 18504 ;; Tracked objects:
 18505 ;;		On entry : 0/0
 18506 ;;		On exit  : 0/0
 18507 ;;		Unchanged: 0/0
 18508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18509 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18510 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;Total ram usage:        9 bytes
 18514 ;; Hardware stack levels used:    1
 18515 ;; Hardware stack levels required when called:    3
 18516 ;; This function calls:
 18517 ;;		Nothing
 18518 ;; This function is called by:
 18519 ;;		_setBuz
 18520 ;; This function uses a non-reentrant model
 18521 ;;
 18522                           
 18523                           
 18524                           ;psect for function ___awdiv
 18525  15D7                     ___awdiv:	
 18526                           
 18527                           ;incstack = 0
 18528                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18529  15D7  0020               	movlb	0	; select bank0
 18530  15D8  01A1               	clrf	___awdiv@sign
 18531  15D9  1FF3               	btfss	___awdiv@divisor+1,7
 18532  15DA  2DE2               	goto	l9024
 18533  15DB  09F2               	comf	___awdiv@divisor,f
 18534  15DC  09F3               	comf	___awdiv@divisor+1,f
 18535  15DD  0AF2               	incf	___awdiv@divisor,f
 18536  15DE  1903               	skipnz
 18537  15DF  0AF3               	incf	___awdiv@divisor+1,f
 18538  15E0  01A1               	clrf	___awdiv@sign
 18539  15E1  0AA1               	incf	___awdiv@sign,f
 18540  15E2                     l9024:	
 18541  15E2  1FF5               	btfss	___awdiv@dividend+1,7
 18542  15E3  2DED               	goto	l9030
 18543  15E4  09F4               	comf	___awdiv@dividend,f
 18544  15E5  09F5               	comf	___awdiv@dividend+1,f
 18545  15E6  0AF4               	incf	___awdiv@dividend,f
 18546  15E7  1903               	skipnz
 18547  15E8  0AF5               	incf	___awdiv@dividend+1,f
 18548  15E9  3001               	movlw	1
 18549  15EA  00F6               	movwf	??___awdiv
 18550  15EB  0876               	movf	??___awdiv,w
 18551  15EC  06A1               	xorwf	___awdiv@sign,f
 18552  15ED                     l9030:	
 18553  15ED  01A2               	clrf	___awdiv@quotient
 18554  15EE  01A3               	clrf	___awdiv@quotient+1
 18555  15EF  0873               	movf	___awdiv@divisor+1,w
 18556  15F0  0472               	iorwf	___awdiv@divisor,w
 18557  15F1  1903               	skipnz
 18558  15F2  2E1C               	goto	l9052
 18559  15F3  01A0               	clrf	___awdiv@counter
 18560  15F4  0AA0               	incf	___awdiv@counter,f
 18561  15F5                     l9040:	
 18562  15F5  1BF3               	btfsc	___awdiv@divisor+1,7
 18563  15F6  2E01               	goto	l9042
 18564  15F7  3001               	movlw	1
 18565  15F8                     u10045:	
 18566  15F8  35F2               	lslf	___awdiv@divisor,f
 18567  15F9  0DF3               	rlf	___awdiv@divisor+1,f
 18568  15FA  0B89               	decfsz	9,f
 18569  15FB  2DF8               	goto	u10045
 18570  15FC  3001               	movlw	1
 18571  15FD  00F6               	movwf	??___awdiv
 18572  15FE  0876               	movf	??___awdiv,w
 18573  15FF  07A0               	addwf	___awdiv@counter,f
 18574  1600  2DF5               	goto	l9040
 18575  1601                     l9042:	
 18576  1601  3001               	movlw	1
 18577  1602                     u10065:	
 18578  1602  35A2               	lslf	___awdiv@quotient,f
 18579  1603  0DA3               	rlf	___awdiv@quotient+1,f
 18580  1604  0B89               	decfsz	9,f
 18581  1605  2E02               	goto	u10065
 18582  1606  0873               	movf	___awdiv@divisor+1,w
 18583  1607  0275               	subwf	___awdiv@dividend+1,w
 18584  1608  1D03               	skipz
 18585  1609  2E0C               	goto	u10075
 18586  160A  0872               	movf	___awdiv@divisor,w
 18587  160B  0274               	subwf	___awdiv@dividend,w
 18588  160C                     u10075:	
 18589  160C  1C03               	skipc
 18590  160D  2E13               	goto	l9048
 18591  160E  0872               	movf	___awdiv@divisor,w
 18592  160F  02F4               	subwf	___awdiv@dividend,f
 18593  1610  0873               	movf	___awdiv@divisor+1,w
 18594  1611  3BF5               	subwfb	___awdiv@dividend+1,f
 18595  1612  1422               	bsf	___awdiv@quotient,0
 18596  1613                     l9048:	
 18597  1613  3001               	movlw	1
 18598  1614                     u10085:	
 18599  1614  36F3               	lsrf	___awdiv@divisor+1,f
 18600  1615  0CF2               	rrf	___awdiv@divisor,f
 18601  1616  0B89               	decfsz	9,f
 18602  1617  2E14               	goto	u10085
 18603  1618  3001               	movlw	1
 18604  1619  02A0               	subwf	___awdiv@counter,f
 18605  161A  1D03               	btfss	3,2
 18606  161B  2E01               	goto	l9042
 18607  161C                     l9052:	
 18608  161C  0821               	movf	___awdiv@sign,w
 18609  161D  1903               	btfsc	3,2
 18610  161E  2E24               	goto	l9056
 18611  161F  09A2               	comf	___awdiv@quotient,f
 18612  1620  09A3               	comf	___awdiv@quotient+1,f
 18613  1621  0AA2               	incf	___awdiv@quotient,f
 18614  1622  1903               	skipnz
 18615  1623  0AA3               	incf	___awdiv@quotient+1,f
 18616  1624                     l9056:	
 18617  1624  0823               	movf	___awdiv@quotient+1,w
 18618  1625  01F3               	clrf	?___awdiv+1
 18619  1626  07F3               	addwf	?___awdiv+1,f
 18620  1627  0822               	movf	___awdiv@quotient,w
 18621  1628  01F2               	clrf	?___awdiv
 18622  1629  07F2               	addwf	?___awdiv,f
 18623  162A  0008               	return
 18624  162B                     __end_of___awdiv:	
 18625                           
 18626                           	psect	text129
 18627  12CE                     __ptext129:	
 18628 ;; *************** function _setDimmerLights_SwOff *****************
 18629 ;; Defined at:
 18630 ;;		line 690 in file "../src/Dimmer_B1.c"
 18631 ;; Parameters:    Size  Location     Type
 18632 ;;  sw              1    wreg     unsigned char 
 18633 ;; Auto vars:     Size  Location     Type
 18634 ;;  sw              1    4[COMMON] unsigned char 
 18635 ;; Return value:  Size  Location     Type
 18636 ;;		None               void
 18637 ;; Registers used:
 18638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18639 ;; Tracked objects:
 18640 ;;		On entry : 0/0
 18641 ;;		On exit  : 0/0
 18642 ;;		Unchanged: 0/0
 18643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;Total ram usage:        1 bytes
 18649 ;; Hardware stack levels used:    1
 18650 ;; Hardware stack levels required when called:    4
 18651 ;; This function calls:
 18652 ;;		_DimmerLights_SelectPointer
 18653 ;; This function is called by:
 18654 ;;		_DlyOff_Main
 18655 ;;		_Exception_Main
 18656 ;;		_setControl_Lights_Table
 18657 ;;		_setRFSW_Control
 18658 ;;		_setRFSW_AdjControl
 18659 ;;		_setSw_Main
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           
 18664                           ;psect for function _setDimmerLights_SwOff
 18665  12CE                     _setDimmerLights_SwOff:	
 18666                           
 18667                           ;incstack = 0
 18668                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18669                           ;setDimmerLights_SwOff@sw stored from wreg
 18670  12CE  00F4               	movwf	setDimmerLights_SwOff@sw
 18671                           
 18672                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18673  12CF  0874               	movf	setDimmerLights_SwOff@sw,w
 18674  12D0  319D  2568  3192   	fcall	_DimmerLights_SelectPointer
 18675                           
 18676                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18677  12D3  0021               	movlb	1	; select bank1
 18678  12D4  0846               	movf	_DimmerLights^(0+128),w
 18679  12D5  0086               	movwf	6
 18680  12D6  3001               	movlw	1	; select bank2/3
 18681  12D7  0087               	movwf	7
 18682  12D8  1C01               	btfss	1,0
 18683  12D9  0008               	return
 18684                           
 18685                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18686  12DA  0846               	movf	_DimmerLights^(0+128),w
 18687  12DB  0086               	movwf	6
 18688  12DC  3001               	movlw	1	; select bank2/3
 18689  12DD  0087               	movwf	7
 18690  12DE  1001               	bcf	1,0
 18691                           
 18692                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18693  12DF  0A46               	incf	_DimmerLights^(0+128),w
 18694  12E0  0086               	movwf	6
 18695  12E1  3001               	movlw	1	; select bank2/3
 18696  12E2  0087               	movwf	7
 18697  12E3  1C01               	btfss	1,0
 18698  12E4  2AFB               	goto	l6636
 18699                           
 18700                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18701  12E5  0846               	movf	_DimmerLights^(0+128),w
 18702  12E6  0086               	movwf	6
 18703  12E7  3001               	movlw	1	; select bank2/3
 18704  12E8  0087               	movwf	7
 18705  12E9  1D81               	btfss	1,3
 18706  12EA  0008               	return
 18707                           
 18708                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18709  12EB  0846               	movf	_DimmerLights^(0+128),w
 18710  12EC  0086               	movwf	6
 18711  12ED  3001               	movlw	1	; select bank2/3
 18712  12EE  0087               	movwf	7
 18713  12EF  1181               	bcf	1,3
 18714                           
 18715                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18716  12F0  0846               	movf	_DimmerLights^(0+128),w
 18717  12F1  0086               	movwf	6
 18718  12F2  3001               	movlw	1	; select bank2/3
 18719  12F3  0087               	movwf	7
 18720  12F4  1601               	bsf	1,4
 18721                           
 18722                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18723  12F5  0846               	movf	_DimmerLights^(0+128),w
 18724  12F6  0086               	movwf	6
 18725  12F7  3001               	movlw	1	; select bank2/3
 18726  12F8  0087               	movwf	7
 18727  12F9  1281               	bcf	1,5
 18728                           
 18729                           ;Dimmer_B1.c: 701: }
 18730                           ;Dimmer_B1.c: 702: } else {
 18731  12FA  0008               	return
 18732  12FB                     l6636:	
 18733                           
 18734                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18735  12FB  0846               	movf	_DimmerLights^(0+128),w
 18736  12FC  0086               	movwf	6
 18737  12FD  3001               	movlw	1	; select bank2/3
 18738  12FE  0087               	movwf	7
 18739  12FF  1481               	bsf	1,1
 18740                           
 18741                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18742  1300  0846               	movf	_DimmerLights^(0+128),w
 18743  1301  0086               	movwf	6
 18744  1302  3001               	movlw	1	; select bank2/3
 18745  1303  0087               	movwf	7
 18746  1304  1101               	bcf	1,2
 18747  1305  0008               	return
 18748  1306                     __end_of_setDimmerLights_SwOff:	
 18749                           
 18750                           	psect	text130
 18751  1BE7                     __ptext130:	
 18752 ;; *************** function _getDimmerLights_Status *****************
 18753 ;; Defined at:
 18754 ;;		line 994 in file "../src/Dimmer_B1.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;  lights          1    wreg     unsigned char 
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;  lights          1    4[COMMON] unsigned char 
 18759 ;;  status          1    5[COMMON] unsigned char 
 18760 ;; Return value:  Size  Location     Type
 18761 ;;                  1    wreg      unsigned char 
 18762 ;; Registers used:
 18763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18764 ;; Tracked objects:
 18765 ;;		On entry : 0/0
 18766 ;;		On exit  : 0/0
 18767 ;;		Unchanged: 0/0
 18768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;Total ram usage:        2 bytes
 18774 ;; Hardware stack levels used:    1
 18775 ;; Hardware stack levels required when called:    4
 18776 ;; This function calls:
 18777 ;;		_DimmerLights_SelectPointer
 18778 ;; This function is called by:
 18779 ;;		_DlyOff_Main
 18780 ;;		_Exception_Main
 18781 ;;		_setControl_Lights_Table
 18782 ;;		_setRFSW_Control
 18783 ;;		_setRFSW_AdjControl
 18784 ;; This function uses a non-reentrant model
 18785 ;;
 18786                           
 18787                           
 18788                           ;psect for function _getDimmerLights_Status
 18789  1BE7                     _getDimmerLights_Status:	
 18790                           
 18791                           ;incstack = 0
 18792                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18793                           ;getDimmerLights_Status@lights stored from wreg
 18794  1BE7  00F4               	movwf	getDimmerLights_Status@lights
 18795                           
 18796                           ;Dimmer_B1.c: 995: DimmerLights_SelectPointer(lights);
 18797  1BE8  0874               	movf	getDimmerLights_Status@lights,w
 18798  1BE9  319D  2568         	fcall	_DimmerLights_SelectPointer
 18799                           
 18800                           ;Dimmer_B1.c: 996: char status = DimmerLights->Status == 1 ? 1 : 0;
 18801  1BEB  0021               	movlb	1	; select bank1
 18802  1BEC  0A46               	incf	_DimmerLights^(0+128),w
 18803  1BED  0086               	movwf	6
 18804  1BEE  3001               	movlw	1	; select bank2/3
 18805  1BEF  0087               	movwf	7
 18806  1BF0  3000               	movlw	0
 18807  1BF1  1801               	btfsc	1,0
 18808  1BF2  3001               	movlw	1
 18809  1BF3  00F5               	movwf	getDimmerLights_Status@status
 18810                           
 18811                           ;Dimmer_B1.c: 997: return status;
 18812  1BF4  0875               	movf	getDimmerLights_Status@status,w
 18813  1BF5  0008               	return
 18814  1BF6                     __end_of_getDimmerLights_Status:	
 18815                           
 18816                           	psect	text131
 18817  1D68                     __ptext131:	
 18818 ;; *************** function _DimmerLights_SelectPointer *****************
 18819 ;; Defined at:
 18820 ;;		line 572 in file "../src/Dimmer_B1.c"
 18821 ;; Parameters:    Size  Location     Type
 18822 ;;  lights          1    wreg     unsigned char 
 18823 ;; Auto vars:     Size  Location     Type
 18824 ;;  lights          1    3[COMMON] unsigned char 
 18825 ;; Return value:  Size  Location     Type
 18826 ;;		None               void
 18827 ;; Registers used:
 18828 ;;		wreg
 18829 ;; Tracked objects:
 18830 ;;		On entry : 0/0
 18831 ;;		On exit  : 0/0
 18832 ;;		Unchanged: 0/0
 18833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18835 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18837 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18838 ;;Total ram usage:        2 bytes
 18839 ;; Hardware stack levels used:    1
 18840 ;; Hardware stack levels required when called:    3
 18841 ;; This function calls:
 18842 ;;		Nothing
 18843 ;; This function is called by:
 18844 ;;		_setDimmerLights_SwOn
 18845 ;;		_setDimmerLights_SwOff
 18846 ;;		_setDimmerLights_DimmingOn
 18847 ;;		_setDimmerLights_Main
 18848 ;;		_getDimmerLights_Status
 18849 ;;		_setDimmerLights_DimmingRun
 18850 ;;		_setDimmerLights_Status
 18851 ;; This function uses a non-reentrant model
 18852 ;;
 18853                           
 18854                           
 18855                           ;psect for function _DimmerLights_SelectPointer
 18856  1D68                     _DimmerLights_SelectPointer:	
 18857                           
 18858                           ;incstack = 0
 18859                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18860                           ;DimmerLights_SelectPointer@lights stored from wreg
 18861  1D68  00F3               	movwf	DimmerLights_SelectPointer@lights
 18862                           
 18863                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18864  1D69  0873               	movf	DimmerLights_SelectPointer@lights,w
 18865  1D6A  3A01               	xorlw	1
 18866  1D6B  1D03               	skipz
 18867  1D6C  2D73               	goto	l6308
 18868                           
 18869                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18870  1D6D  30BE               	movlw	_DimmerLights1& (0+255)
 18871  1D6E  00F2               	movwf	??_DimmerLights_SelectPointer
 18872  1D6F  0872               	movf	??_DimmerLights_SelectPointer,w
 18873  1D70  0021               	movlb	1	; select bank1
 18874  1D71  00C6               	movwf	_DimmerLights^(0+128)
 18875                           
 18876                           ;Dimmer_B1.c: 576: }
 18877  1D72  0008               	return
 18878  1D73                     l6308:	
 18879                           
 18880                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18881  1D73  0873               	movf	DimmerLights_SelectPointer@lights,w
 18882  1D74  3A02               	xorlw	2
 18883  1D75  1D03               	skipz
 18884  1D76  0008               	return
 18885                           
 18886                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18887  1D77  30C7               	movlw	_DimmerLights2& (0+255)
 18888  1D78  00F2               	movwf	??_DimmerLights_SelectPointer
 18889  1D79  0872               	movf	??_DimmerLights_SelectPointer,w
 18890  1D7A  0021               	movlb	1	; select bank1
 18891  1D7B  00C6               	movwf	_DimmerLights^(0+128)
 18892  1D7C  0008               	return
 18893  1D7D                     __end_of_DimmerLights_SelectPointer:	
 18894                           
 18895                           	psect	text132
 18896  1B11                     __ptext132:	
 18897 ;; *************** function _DelayOff_Initialization *****************
 18898 ;; Defined at:
 18899 ;;		line 26 in file "../src/DelayOff_B1.c"
 18900 ;; Parameters:    Size  Location     Type
 18901 ;;		None
 18902 ;; Auto vars:     Size  Location     Type
 18903 ;;		None
 18904 ;; Return value:  Size  Location     Type
 18905 ;;		None               void
 18906 ;; Registers used:
 18907 ;;		wreg, status,2, status,0, pclath, cstack
 18908 ;; Tracked objects:
 18909 ;;		On entry : 0/0
 18910 ;;		On exit  : 0/0
 18911 ;;		Unchanged: 0/0
 18912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18917 ;;Total ram usage:        0 bytes
 18918 ;; Hardware stack levels used:    1
 18919 ;; Hardware stack levels required when called:    5
 18920 ;; This function calls:
 18921 ;;		_DlyOff_Initialization
 18922 ;; This function is called by:
 18923 ;;		_main
 18924 ;; This function uses a non-reentrant model
 18925 ;;
 18926                           
 18927                           
 18928                           ;psect for function _DelayOff_Initialization
 18929  1B11                     _DelayOff_Initialization:	
 18930                           
 18931                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18932                           
 18933                           ;incstack = 0
 18934                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18935  1B11  3001               	movlw	1
 18936  1B12  319A  22D8  319B   	fcall	_DlyOff_Initialization
 18937                           
 18938                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18939  1B15  3002               	movlw	2
 18940  1B16  319A  22D8         	fcall	_DlyOff_Initialization
 18941  1B18  0008               	return
 18942  1B19                     __end_of_DelayOff_Initialization:	
 18943                           
 18944                           	psect	text133
 18945  1AD8                     __ptext133:	
 18946 ;; *************** function _DlyOff_Initialization *****************
 18947 ;; Defined at:
 18948 ;;		line 56 in file "../src/DelayOff_B1.c"
 18949 ;; Parameters:    Size  Location     Type
 18950 ;;  sw              1    wreg     unsigned char 
 18951 ;; Auto vars:     Size  Location     Type
 18952 ;;  sw              1    4[COMMON] unsigned char 
 18953 ;; Return value:  Size  Location     Type
 18954 ;;		None               void
 18955 ;; Registers used:
 18956 ;;		wreg, status,2, status,0, pclath, cstack
 18957 ;; Tracked objects:
 18958 ;;		On entry : 0/0
 18959 ;;		On exit  : 0/0
 18960 ;;		Unchanged: 0/0
 18961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18966 ;;Total ram usage:        1 bytes
 18967 ;; Hardware stack levels used:    1
 18968 ;; Hardware stack levels required when called:    4
 18969 ;; This function calls:
 18970 ;;		_DelayOffPointSelect
 18971 ;; This function is called by:
 18972 ;;		_DelayOff_Initialization
 18973 ;; This function uses a non-reentrant model
 18974 ;;
 18975                           
 18976                           
 18977                           ;psect for function _DlyOff_Initialization
 18978  1AD8                     _DlyOff_Initialization:	
 18979                           
 18980                           ;incstack = 0
 18981                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18982                           ;DlyOff_Initialization@sw stored from wreg
 18983  1AD8  00F4               	movwf	DlyOff_Initialization@sw
 18984                           
 18985                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18986  1AD9  0874               	movf	DlyOff_Initialization@sw,w
 18987  1ADA  319D  2553         	fcall	_DelayOffPointSelect
 18988  1ADC  0008               	return
 18989  1ADD                     __end_of_DlyOff_Initialization:	
 18990                           
 18991                           	psect	text134
 18992  1D53                     __ptext134:	
 18993 ;; *************** function _DelayOffPointSelect *****************
 18994 ;; Defined at:
 18995 ;;		line 7 in file "../src/DelayOff_B1.c"
 18996 ;; Parameters:    Size  Location     Type
 18997 ;;  sw              1    wreg     unsigned char 
 18998 ;; Auto vars:     Size  Location     Type
 18999 ;;  sw              1    3[COMMON] unsigned char 
 19000 ;; Return value:  Size  Location     Type
 19001 ;;		None               void
 19002 ;; Registers used:
 19003 ;;		wreg
 19004 ;; Tracked objects:
 19005 ;;		On entry : 0/0
 19006 ;;		On exit  : 0/0
 19007 ;;		Unchanged: 0/0
 19008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19012 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19013 ;;Total ram usage:        2 bytes
 19014 ;; Hardware stack levels used:    1
 19015 ;; Hardware stack levels required when called:    3
 19016 ;; This function calls:
 19017 ;;		Nothing
 19018 ;; This function is called by:
 19019 ;;		_DlyOff_Initialization
 19020 ;;		_DlyOff_Main
 19021 ;;		_setDelayOff_GO
 19022 ;;		_getDelayOff_GO
 19023 ;; This function uses a non-reentrant model
 19024 ;;
 19025                           
 19026                           
 19027                           ;psect for function _DelayOffPointSelect
 19028  1D53                     _DelayOffPointSelect:	
 19029                           
 19030                           ;incstack = 0
 19031                           ; Regs used in _DelayOffPointSelect: [wreg]
 19032                           ;DelayOffPointSelect@sw stored from wreg
 19033  1D53  00F3               	movwf	DelayOffPointSelect@sw
 19034                           
 19035                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19036  1D54  0873               	movf	DelayOffPointSelect@sw,w
 19037  1D55  3A01               	xorlw	1
 19038  1D56  1D03               	skipz
 19039  1D57  2D5E               	goto	l6298
 19040                           
 19041                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19042  1D58  305E               	movlw	_DlySw1& (0+255)
 19043  1D59  00F2               	movwf	??_DelayOffPointSelect
 19044  1D5A  0872               	movf	??_DelayOffPointSelect,w
 19045  1D5B  0021               	movlb	1	; select bank1
 19046  1D5C  00C4               	movwf	_DelayOff^(0+128)
 19047                           
 19048                           ;DelayOff_B1.c: 11: }
 19049  1D5D  0008               	return
 19050  1D5E                     l6298:	
 19051                           
 19052                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19053  1D5E  0873               	movf	DelayOffPointSelect@sw,w
 19054  1D5F  3A02               	xorlw	2
 19055  1D60  1D03               	skipz
 19056  1D61  0008               	return
 19057                           
 19058                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19059  1D62  30E2               	movlw	_DlySw2& (0+255)
 19060  1D63  00F2               	movwf	??_DelayOffPointSelect
 19061  1D64  0872               	movf	??_DelayOffPointSelect,w
 19062  1D65  0021               	movlb	1	; select bank1
 19063  1D66  00C4               	movwf	_DelayOff^(0+128)
 19064  1D67  0008               	return
 19065  1D68                     __end_of_DelayOffPointSelect:	
 19066                           
 19067                           	psect	text135
 19068  13FC                     __ptext135:	
 19069 ;; *************** function _Buzzer_Main *****************
 19070 ;; Defined at:
 19071 ;;		line 46 in file "../src/Buzzer_B1.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;		None               void
 19078 ;; Registers used:
 19079 ;;		wreg, status,2, status,0
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;Total ram usage:        1 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    3
 19092 ;; This function calls:
 19093 ;;		Nothing
 19094 ;; This function is called by:
 19095 ;;		_main
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           
 19100                           ;psect for function _Buzzer_Main
 19101  13FC                     _Buzzer_Main:	
 19102                           
 19103                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19104                           
 19105                           ;incstack = 0
 19106                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19107  13FC  0021               	movlb	1	; select bank1
 19108  13FD  1CAE               	btfss	_Buz1^(0+128),1
 19109  13FE  0008               	return
 19110                           
 19111                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19112  13FF  3001               	movlw	1
 19113  1400  07AF               	addwf	(_Buz1^(0+128)+1),f
 19114  1401  3000               	movlw	0
 19115  1402  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 19116                           
 19117                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19118  1403  0835               	movf	((_Buz1+1)^(0+128)+6),w
 19119  1404  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 19120  1405  1D03               	skipz
 19121  1406  2C09               	goto	u8695
 19122  1407  0834               	movf	(_Buz1^(0+128)+6),w
 19123  1408  022F               	subwf	(_Buz1^(0+128)+1),w
 19124  1409                     u8695:	
 19125  1409  1C03               	skipc
 19126  140A  0008               	return
 19127                           
 19128                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19129  140B  01AF               	clrf	(_Buz1^(0+128)+1)
 19130  140C  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 19131                           
 19132                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19133  140D  12AE               	bcf	_Buz1^(0+128),5
 19134  140E  0020               	movlb	0	; select bank0
 19135  140F  1D8D               	btfss	13,3	;volatile
 19136  1410  2C13               	goto	l8262
 19137  1411  0021               	movlb	1	; select bank1
 19138  1412  16AE               	bsf	_Buz1^(0+128),5
 19139  1413                     l8262:	
 19140                           
 19141                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19142  1413  0021               	movlb	1	; select bank1
 19143  1414  1AAE               	btfsc	_Buz1^(0+128),5
 19144  1415  2C3B               	goto	l106
 19145                           
 19146                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19147  1416  08B1               	movf	(_Buz1^(0+128)+3),f
 19148  1417  1D03               	skipz
 19149  1418  2C37               	goto	l107
 19150                           
 19151                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19152  1419  1DAE               	btfss	_Buz1^(0+128),3
 19153  141A  2C27               	goto	l108
 19154                           
 19155                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19156  141B  11AE               	bcf	_Buz1^(0+128),3
 19157                           
 19158                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19159  141C  0832               	movf	(_Buz1^(0+128)+4),w
 19160  141D  00F2               	movwf	??_Buzzer_Main
 19161  141E  0872               	movf	??_Buzzer_Main,w
 19162  141F  00B1               	movwf	(_Buz1^(0+128)+3)
 19163                           
 19164                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19165  1420  0837               	movf	((_Buz1+1)^(0+128)+8),w
 19166  1421  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19167  1422  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19168  1423  0836               	movf	(_Buz1^(0+128)+8),w
 19169  1424  01B4               	clrf	(_Buz1^(0+128)+6)
 19170  1425  07B4               	addwf	(_Buz1^(0+128)+6),f
 19171                           
 19172                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19173  1426  0008               	return
 19174  1427                     l108:	
 19175  1427  1E2E               	btfss	_Buz1^(0+128),4
 19176  1428  2C35               	goto	l110
 19177                           
 19178                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19179  1429  122E               	bcf	_Buz1^(0+128),4
 19180                           
 19181                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19182  142A  0833               	movf	(_Buz1^(0+128)+5),w
 19183  142B  00F2               	movwf	??_Buzzer_Main
 19184  142C  0872               	movf	??_Buzzer_Main,w
 19185  142D  00B1               	movwf	(_Buz1^(0+128)+3)
 19186                           
 19187                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19188  142E  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19189  142F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19190  1430  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19191  1431  0838               	movf	(_Buz1^(0+128)+10),w
 19192  1432  01B4               	clrf	(_Buz1^(0+128)+6)
 19193  1433  07B4               	addwf	(_Buz1^(0+128)+6),f
 19194                           
 19195                           ;Buzzer_B1.c: 62: } else {
 19196  1434  0008               	return
 19197  1435                     l110:	
 19198                           
 19199                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19200  1435  10AE               	bcf	_Buz1^(0+128),1
 19201                           
 19202                           ;Buzzer_B1.c: 64: }
 19203                           ;Buzzer_B1.c: 65: } else {
 19204  1436  0008               	return
 19205  1437                     l107:	
 19206                           
 19207                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19208  1437  16AE               	bsf	_Buz1^(0+128),5
 19209                           
 19210                           ;Buzzer_B1.c: 68: RB3 = 1;
 19211  1438  0020               	movlb	0	; select bank0
 19212  1439  158D               	bsf	13,3	;volatile
 19213                           
 19214                           ;Buzzer_B1.c: 69: }
 19215                           ;Buzzer_B1.c: 70: } else {
 19216  143A  0008               	return
 19217  143B                     l106:	
 19218                           
 19219                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19220  143B  12AE               	bcf	_Buz1^(0+128),5
 19221                           
 19222                           ;Buzzer_B1.c: 73: RB3 = 0;
 19223  143C  0020               	movlb	0	; select bank0
 19224  143D  118D               	bcf	13,3	;volatile
 19225                           
 19226                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19227  143E  3001               	movlw	1
 19228  143F  0021               	movlb	1	; select bank1
 19229  1440  02B1               	subwf	(_Buz1^(0+128)+3),f
 19230  1441  0008               	return
 19231  1442                     __end_of_Buzzer_Main:	
 19232                           
 19233                           	psect	text136
 19234  1AB2                     __ptext136:	
 19235 ;; *************** function _Buzzer_Initialization *****************
 19236 ;; Defined at:
 19237 ;;		line 11 in file "../src/Buzzer_B1.c"
 19238 ;; Parameters:    Size  Location     Type
 19239 ;;		None
 19240 ;; Auto vars:     Size  Location     Type
 19241 ;;		None
 19242 ;; Return value:  Size  Location     Type
 19243 ;;		None               void
 19244 ;; Registers used:
 19245 ;;		None
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19255 ;;Total ram usage:        0 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:    3
 19258 ;; This function calls:
 19259 ;;		Nothing
 19260 ;; This function is called by:
 19261 ;;		_main
 19262 ;; This function uses a non-reentrant model
 19263 ;;
 19264                           
 19265                           
 19266                           ;psect for function _Buzzer_Initialization
 19267  1AB2                     _Buzzer_Initialization:	
 19268                           
 19269                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19270                           
 19271                           ;incstack = 0
 19272                           ; Regs used in _Buzzer_Initialization: []
 19273  1AB2  0021               	movlb	1	; select bank1
 19274  1AB3  142E               	bsf	_Buz1^(0+128),0
 19275  1AB4  0008               	return
 19276  1AB5                     __end_of_Buzzer_Initialization:	
 19277                           
 19278                           	psect	intentry
 19279  0004                     __pintentry:	
 19280 ;; *************** function _ISR *****************
 19281 ;; Defined at:
 19282 ;;		line 112 in file "../src/MCU_B1.c"
 19283 ;; Parameters:    Size  Location     Type
 19284 ;;		None
 19285 ;; Auto vars:     Size  Location     Type
 19286 ;;		None
 19287 ;; Return value:  Size  Location     Type
 19288 ;;		None               void
 19289 ;; Registers used:
 19290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19291 ;; Tracked objects:
 19292 ;;		On entry : 0/0
 19293 ;;		On exit  : 0/0
 19294 ;;		Unchanged: 0/0
 19295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;Total ram usage:        1 bytes
 19301 ;; Hardware stack levels used:    1
 19302 ;; Hardware stack levels required when called:    2
 19303 ;; This function calls:
 19304 ;;		_IOC_ISR
 19305 ;;		_TMR1_ISR
 19306 ;; This function is called by:
 19307 ;;		Interrupt level 1
 19308 ;; This function uses a non-reentrant model
 19309 ;;
 19310                           
 19311  0004                     _ISR:	
 19312                           
 19313                           ;incstack = 0
 19314                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19315  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19316  0005  3180               	pagesel	$
 19317  0006  0020               	movlb	0	; select bank0
 19318  0007  087F               	movf	127,w
 19319  0008  00F1               	movwf	??_ISR
 19320                           
 19321                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19322  0009  198B               	btfsc	11,3	;volatile
 19323  000A  1C0B               	btfss	11,0	;volatile
 19324  000B  2813               	goto	i1l1403
 19325  000C  0027               	movlb	7	; select bank7
 19326  000D  1D16               	btfss	22,2	;volatile
 19327  000E  2813               	goto	i1l1403
 19328                           
 19329                           ;MCU_B1.c: 116: IOC_ISR();
 19330  000F  319B  2368  3180   	fcall	_IOC_ISR
 19331                           
 19332                           ;MCU_B1.c: 117: }
 19333  0012  281B               	goto	i1l1406
 19334  0013                     i1l1403:	
 19335                           
 19336                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 19337  0013  0021               	movlb	1	; select bank1
 19338  0014  1C11               	btfss	17,0	;volatile
 19339  0015  281B               	goto	i1l1406
 19340  0016  0020               	movlb	0	; select bank0
 19341  0017  1C11               	btfss	17,0	;volatile
 19342  0018  281B               	goto	i1l1406
 19343                           
 19344                           ;MCU_B1.c: 126: TMR1_ISR();
 19345  0019  319F  279B         	fcall	_TMR1_ISR
 19346  001B                     i1l1406:	
 19347                           ;MCU_B1.c: 127: }
 19348                           ;MCU_B1.c: 143: return;
 19349                           
 19350  001B  0871               	movf	??_ISR,w
 19351  001C  0020               	movlb	0	; select bank0
 19352  001D  00FF               	movwf	127
 19353  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19354  001F  0009               	retfie
 19355  0020                     __end_of_ISR:	
 19356                           
 19357                           	psect	text138
 19358  1F9B                     __ptext138:	
 19359 ;; *************** function _TMR1_ISR *****************
 19360 ;; Defined at:
 19361 ;;		line 231 in file "../src/MCU_B1.c"
 19362 ;; Parameters:    Size  Location     Type
 19363 ;;		None
 19364 ;; Auto vars:     Size  Location     Type
 19365 ;;		None
 19366 ;; Return value:  Size  Location     Type
 19367 ;;		None               void
 19368 ;; Registers used:
 19369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19370 ;; Tracked objects:
 19371 ;;		On entry : 0/0
 19372 ;;		On exit  : 0/0
 19373 ;;		Unchanged: 0/0
 19374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19379 ;;Total ram usage:        0 bytes
 19380 ;; Hardware stack levels used:    1
 19381 ;; Hardware stack levels required when called:    1
 19382 ;; This function calls:
 19383 ;;		_DimmerLights_MOSFET_TMR_1
 19384 ;;		_DimmerLights_MOSFET_TMR_2
 19385 ;; This function is called by:
 19386 ;;		_ISR
 19387 ;; This function uses a non-reentrant model
 19388 ;;
 19389                           
 19390                           
 19391                           ;psect for function _TMR1_ISR
 19392  1F9B                     _TMR1_ISR:	
 19393                           
 19394                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 19395                           
 19396                           ;incstack = 0
 19397                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19398  1F9B  30FA               	movlw	250
 19399  1F9C  0020               	movlb	0	; select bank0
 19400  1F9D  0097               	movwf	23	;volatile
 19401                           
 19402                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 19403  1F9E  3038               	movlw	56
 19404  1F9F  0096               	movwf	22	;volatile
 19405                           
 19406                           ;MCU_B1.c: 235: TMR1IF = 0;
 19407  1FA0  1011               	bcf	17,0	;volatile
 19408                           
 19409                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 19410  1FA1  3194  24E0  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19411                           
 19412                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 19413  1FA4  3195  2532  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19414                           
 19415                           ;MCU_B1.c: 254: Timer1.Count++;
 19416  1FA7  3001               	movlw	1
 19417  1FA8  0021               	movlb	1	; select bank1
 19418  1FA9  07BE               	addwf	(_Timer1^(0+128)+1),f
 19419  1FAA  3000               	movlw	0
 19420  1FAB  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 19421                           
 19422                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 19423  1FAC  3001               	movlw	1
 19424  1FAD  3EBD               	addlw	_Timer1& (0+255)
 19425  1FAE  0086               	movwf	6
 19426  1FAF  0187               	clrf	7
 19427  1FB0  3F40               	moviw [0]fsr1
 19428  1FB1  3AC8               	xorlw	200
 19429  1FB2  1D03               	skipz
 19430  1FB3  2FB6               	goto	u880_25
 19431  1FB4  3F41               	moviw [1]fsr1
 19432  1FB5  3A00               	xorlw	0
 19433  1FB6                     u880_25:	
 19434  1FB6  1D03               	skipz
 19435  1FB7  0008               	return
 19436                           
 19437                           ;MCU_B1.c: 256: Timer1.Count = 0;
 19438  1FB8  01BE               	clrf	(_Timer1^(0+128)+1)
 19439  1FB9  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 19440                           
 19441                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 19442  1FBA  143D               	bsf	_Timer1^(0+128),0
 19443  1FBB  0008               	return
 19444  1FBC                     __end_of_TMR1_ISR:	
 19445                           
 19446                           	psect	text139
 19447  1532                     __ptext139:	
 19448 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19449 ;; Defined at:
 19450 ;;		line 1261 in file "../src/Dimmer_B1.c"
 19451 ;; Parameters:    Size  Location     Type
 19452 ;;		None
 19453 ;; Auto vars:     Size  Location     Type
 19454 ;;		None
 19455 ;; Return value:  Size  Location     Type
 19456 ;;		None               void
 19457 ;; Registers used:
 19458 ;;		wreg, status,2, status,0
 19459 ;; Tracked objects:
 19460 ;;		On entry : 0/0
 19461 ;;		On exit  : 0/0
 19462 ;;		Unchanged: 0/0
 19463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19467 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19468 ;;Total ram usage:        1 bytes
 19469 ;; Hardware stack levels used:    1
 19470 ;; This function calls:
 19471 ;;		Nothing
 19472 ;; This function is called by:
 19473 ;;		_TMR1_ISR
 19474 ;; This function uses a non-reentrant model
 19475 ;;
 19476                           
 19477                           
 19478                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19479  1532                     _DimmerLights_MOSFET_TMR_2:	
 19480                           
 19481                           ;Dimmer_B1.c: 1262: if (DimmerIntr2.Start == 1) {
 19482                           
 19483                           ;incstack = 0
 19484                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19485  1532  0021               	movlb	1	; select bank1
 19486  1533  1D69               	btfss	_DimmerIntr2^(0+128),2
 19487  1534  2D3F               	goto	i1l7812
 19488                           
 19489                           ;Dimmer_B1.c: 1263: DimmerIntr2.Count++;
 19490  1535  3001               	movlw	1
 19491  1536  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19492  1537  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19493  1538  07EA               	addwf	(_DimmerIntr2^(0+128)+1),f
 19494                           
 19495                           ;Dimmer_B1.c: 1264: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19496  1539  3035               	movlw	53
 19497  153A  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19498  153B  1C03               	skipc
 19499  153C  2D3F               	goto	i1l7812
 19500                           
 19501                           ;Dimmer_B1.c: 1265: DimmerIntr2.Count = 0;
 19502  153D  01EA               	clrf	(_DimmerIntr2^(0+128)+1)
 19503                           
 19504                           ;Dimmer_B1.c: 1266: DimmerIntr2.Start = 0;
 19505  153E  1169               	bcf	_DimmerIntr2^(0+128),2
 19506  153F                     i1l7812:	
 19507                           
 19508                           ;Dimmer_B1.c: 1267: }
 19509                           ;Dimmer_B1.c: 1268: }
 19510                           ;Dimmer_B1.c: 1270: if (DimmerIntr2.GO == 1) {
 19511  153F  1C69               	btfss	_DimmerIntr2^(0+128),0
 19512  1540  2D4C               	goto	i1l1011
 19513                           
 19514                           ;Dimmer_B1.c: 1271: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19515  1541  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19516  1542  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19517  1543  1C03               	skipc
 19518  1544  0008               	return
 19519                           
 19520                           ;Dimmer_B1.c: 1272: DimmerIntr2.GO = 0;
 19521  1545  1069               	bcf	_DimmerIntr2^(0+128),0
 19522                           
 19523                           ;Dimmer_B1.c: 1273: DimmerIntr2.Tune = 1;
 19524  1546  14E9               	bsf	_DimmerIntr2^(0+128),1
 19525                           
 19526                           ;Dimmer_B1.c: 1275: if (DimmerIntr2.ControlStatus == 1) {
 19527  1547  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19528  1548  0008               	return
 19529                           
 19530                           ;Dimmer_B1.c: 1276: RB4 = 0;
 19531  1549  0020               	movlb	0	; select bank0
 19532  154A  120D               	bcf	13,4	;volatile
 19533                           
 19534                           ;Dimmer_B1.c: 1278: }
 19535                           ;Dimmer_B1.c: 1279: }
 19536                           ;Dimmer_B1.c: 1280: } else {
 19537  154B  0008               	return
 19538  154C                     i1l1011:	
 19539                           
 19540                           ;Dimmer_B1.c: 1281: if (DimmerIntr2.Tune == 1) {
 19541  154C  1CE9               	btfss	_DimmerIntr2^(0+128),1
 19542  154D  0008               	return
 19543                           
 19544                           ;Dimmer_B1.c: 1282: DimmerIntr2.Tune = 0;
 19545  154E  10E9               	bcf	_DimmerIntr2^(0+128),1
 19546                           
 19547                           ;Dimmer_B1.c: 1283: DimmerIntr2.TuneTime++;
 19548  154F  3001               	movlw	1
 19549  1550  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19550  1551  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19551  1552  07EB               	addwf	(_DimmerIntr2^(0+128)+2),f
 19552                           
 19553                           ;Dimmer_B1.c: 1284: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19554  1553  086C               	movf	(_DimmerIntr2^(0+128)+3),w
 19555  1554  026B               	subwf	(_DimmerIntr2^(0+128)+2),w
 19556  1555  1C03               	skipc
 19557  1556  0008               	return
 19558                           
 19559                           ;Dimmer_B1.c: 1285: DimmerIntr2.TuneTime = 0;
 19560  1557  01EB               	clrf	(_DimmerIntr2^(0+128)+2)
 19561                           
 19562                           ;Dimmer_B1.c: 1286: if (DimmerIntr2.Dimming_Sw == 1) {
 19563  1558  1E69               	btfss	_DimmerIntr2^(0+128),4
 19564  1559  2D70               	goto	i1l1017
 19565                           
 19566                           ;Dimmer_B1.c: 1287: if (DimmerIntr2.Dimming_Status == 0) {
 19567  155A  1AE9               	btfsc	_DimmerIntr2^(0+128),5
 19568  155B  2D67               	goto	i1l7836
 19569                           
 19570                           ;Dimmer_B1.c: 1288: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19571  155C  3034               	movlw	52
 19572  155D  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19573  155E  1803               	skipnc
 19574  155F  2D65               	goto	i1l1019
 19575                           
 19576                           ;Dimmer_B1.c: 1289: DimmerIntr2.DimmingValue++;
 19577  1560  3001               	movlw	1
 19578  1561  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19579  1562  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19580  1563  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19581                           
 19582                           ;Dimmer_B1.c: 1290: } else {
 19583  1564  0008               	return
 19584  1565                     i1l1019:	
 19585                           
 19586                           ;Dimmer_B1.c: 1291: DimmerIntr2.Dimming_Status = 1;
 19587  1565  16E9               	bsf	_DimmerIntr2^(0+128),5
 19588                           
 19589                           ;Dimmer_B1.c: 1292: }
 19590                           ;Dimmer_B1.c: 1293: } else {
 19591  1566  0008               	return
 19592  1567                     i1l7836:	
 19593                           
 19594                           ;Dimmer_B1.c: 1294: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19595  1567  3011               	movlw	17
 19596  1568  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19597  1569  1C03               	skipc
 19598  156A  2D6E               	goto	i1l1022
 19599                           
 19600                           ;Dimmer_B1.c: 1295: DimmerIntr2.DimmingValue--;
 19601  156B  3001               	movlw	1
 19602  156C  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19603                           
 19604                           ;Dimmer_B1.c: 1296: } else {
 19605  156D  0008               	return
 19606  156E                     i1l1022:	
 19607                           
 19608                           ;Dimmer_B1.c: 1297: DimmerIntr2.Dimming_Status = 0;
 19609  156E  12E9               	bcf	_DimmerIntr2^(0+128),5
 19610                           
 19611                           ;Dimmer_B1.c: 1298: }
 19612                           ;Dimmer_B1.c: 1299: }
 19613                           ;Dimmer_B1.c: 1300: } else if (DimmerIntr2.Dimming_RF == 1) {
 19614  156F  0008               	return
 19615  1570                     i1l1017:	
 19616  1570  1F69               	btfss	_DimmerIntr2^(0+128),6
 19617  1571  0008               	return
 19618                           
 19619                           ;Dimmer_B1.c: 1301: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19620  1572  086E               	movf	(_DimmerIntr2^(0+128)+5),w
 19621  1573  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19622  1574  1803               	skipnc
 19623  1575  2D7B               	goto	i1l7844
 19624                           
 19625                           ;Dimmer_B1.c: 1302: DimmerIntr2.DimmingValue++;
 19626  1576  3001               	movlw	1
 19627  1577  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19628  1578  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19629  1579  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19630                           
 19631                           ;Dimmer_B1.c: 1303: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19632  157A  0008               	return
 19633  157B                     i1l7844:	
 19634  157B  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19635  157C  026E               	subwf	(_DimmerIntr2^(0+128)+5),w
 19636  157D  1803               	skipnc
 19637  157E  2D82               	goto	i1l1028
 19638                           
 19639                           ;Dimmer_B1.c: 1304: DimmerIntr2.DimmingValue--;
 19640  157F  3001               	movlw	1
 19641  1580  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19642                           
 19643                           ;Dimmer_B1.c: 1305: } else {
 19644  1581  0008               	return
 19645  1582                     i1l1028:	
 19646                           
 19647                           ;Dimmer_B1.c: 1306: DimmerIntr2.Dimming_RF = 0;
 19648  1582  1369               	bcf	_DimmerIntr2^(0+128),6
 19649  1583  0008               	return
 19650  1584                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19651                           
 19652                           	psect	text140
 19653  14E0                     __ptext140:	
 19654 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19655 ;; Defined at:
 19656 ;;		line 1192 in file "../src/Dimmer_B1.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;		None
 19659 ;; Auto vars:     Size  Location     Type
 19660 ;;		None
 19661 ;; Return value:  Size  Location     Type
 19662 ;;		None               void
 19663 ;; Registers used:
 19664 ;;		wreg, status,2, status,0
 19665 ;; Tracked objects:
 19666 ;;		On entry : 0/0
 19667 ;;		On exit  : 0/0
 19668 ;;		Unchanged: 0/0
 19669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;Total ram usage:        1 bytes
 19675 ;; Hardware stack levels used:    1
 19676 ;; This function calls:
 19677 ;;		Nothing
 19678 ;; This function is called by:
 19679 ;;		_TMR1_ISR
 19680 ;; This function uses a non-reentrant model
 19681 ;;
 19682                           
 19683                           
 19684                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19685  14E0                     _DimmerLights_MOSFET_TMR_1:	
 19686                           
 19687                           ;Dimmer_B1.c: 1193: if (DimmerIntr1.Start == 1) {
 19688                           
 19689                           ;incstack = 0
 19690                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19691  14E0  0021               	movlb	1	; select bank1
 19692  14E1  1D62               	btfss	_DimmerIntr1^(0+128),2
 19693  14E2  2CED               	goto	i1l7758
 19694                           
 19695                           ;Dimmer_B1.c: 1194: DimmerIntr1.Count++;
 19696  14E3  3001               	movlw	1
 19697  14E4  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19698  14E5  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19699  14E6  07E3               	addwf	(_DimmerIntr1^(0+128)+1),f
 19700                           
 19701                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19702  14E7  3035               	movlw	53
 19703  14E8  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19704  14E9  1C03               	skipc
 19705  14EA  2CED               	goto	i1l7758
 19706                           
 19707                           ;Dimmer_B1.c: 1196: DimmerIntr1.Count = 0;
 19708  14EB  01E3               	clrf	(_DimmerIntr1^(0+128)+1)
 19709                           
 19710                           ;Dimmer_B1.c: 1197: DimmerIntr1.Start = 0;
 19711  14EC  1162               	bcf	_DimmerIntr1^(0+128),2
 19712  14ED                     i1l7758:	
 19713                           
 19714                           ;Dimmer_B1.c: 1198: }
 19715                           ;Dimmer_B1.c: 1199: }
 19716                           ;Dimmer_B1.c: 1201: if (DimmerIntr1.GO == 1) {
 19717  14ED  1C62               	btfss	_DimmerIntr1^(0+128),0
 19718  14EE  2CFA               	goto	i1l982
 19719                           
 19720                           ;Dimmer_B1.c: 1202: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19721  14EF  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19722  14F0  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19723  14F1  1C03               	skipc
 19724  14F2  0008               	return
 19725                           
 19726                           ;Dimmer_B1.c: 1203: DimmerIntr1.GO = 0;
 19727  14F3  1062               	bcf	_DimmerIntr1^(0+128),0
 19728                           
 19729                           ;Dimmer_B1.c: 1204: DimmerIntr1.Tune = 1;
 19730  14F4  14E2               	bsf	_DimmerIntr1^(0+128),1
 19731                           
 19732                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.ControlStatus == 1) {
 19733  14F5  1DE2               	btfss	_DimmerIntr1^(0+128),3
 19734  14F6  0008               	return
 19735                           
 19736                           ;Dimmer_B1.c: 1207: RA7 = 0;
 19737  14F7  0020               	movlb	0	; select bank0
 19738  14F8  138C               	bcf	12,7	;volatile
 19739                           
 19740                           ;Dimmer_B1.c: 1209: }
 19741                           ;Dimmer_B1.c: 1210: }
 19742                           ;Dimmer_B1.c: 1211: } else {
 19743  14F9  0008               	return
 19744  14FA                     i1l982:	
 19745                           
 19746                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.Tune == 1) {
 19747  14FA  1CE2               	btfss	_DimmerIntr1^(0+128),1
 19748  14FB  0008               	return
 19749                           
 19750                           ;Dimmer_B1.c: 1213: DimmerIntr1.Tune = 0;
 19751  14FC  10E2               	bcf	_DimmerIntr1^(0+128),1
 19752                           
 19753                           ;Dimmer_B1.c: 1214: DimmerIntr1.TuneTime++;
 19754  14FD  3001               	movlw	1
 19755  14FE  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19756  14FF  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19757  1500  07E4               	addwf	(_DimmerIntr1^(0+128)+2),f
 19758                           
 19759                           ;Dimmer_B1.c: 1215: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19760  1501  0865               	movf	(_DimmerIntr1^(0+128)+3),w
 19761  1502  0264               	subwf	(_DimmerIntr1^(0+128)+2),w
 19762  1503  1C03               	skipc
 19763  1504  0008               	return
 19764                           
 19765                           ;Dimmer_B1.c: 1216: DimmerIntr1.TuneTime = 0;
 19766  1505  01E4               	clrf	(_DimmerIntr1^(0+128)+2)
 19767                           
 19768                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.Dimming_Sw == 1) {
 19769  1506  1E62               	btfss	_DimmerIntr1^(0+128),4
 19770  1507  2D1E               	goto	i1l988
 19771                           
 19772                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.Dimming_Status == 0) {
 19773  1508  1AE2               	btfsc	_DimmerIntr1^(0+128),5
 19774  1509  2D15               	goto	i1l7782
 19775                           
 19776                           ;Dimmer_B1.c: 1219: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19777  150A  3034               	movlw	52
 19778  150B  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19779  150C  1803               	skipnc
 19780  150D  2D13               	goto	i1l990
 19781                           
 19782                           ;Dimmer_B1.c: 1220: DimmerIntr1.DimmingValue++;
 19783  150E  3001               	movlw	1
 19784  150F  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19785  1510  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19786  1511  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19787                           
 19788                           ;Dimmer_B1.c: 1221: } else {
 19789  1512  0008               	return
 19790  1513                     i1l990:	
 19791                           
 19792                           ;Dimmer_B1.c: 1222: DimmerIntr1.Dimming_Status = 1;
 19793  1513  16E2               	bsf	_DimmerIntr1^(0+128),5
 19794                           
 19795                           ;Dimmer_B1.c: 1223: }
 19796                           ;Dimmer_B1.c: 1224: } else {
 19797  1514  0008               	return
 19798  1515                     i1l7782:	
 19799                           
 19800                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19801  1515  3011               	movlw	17
 19802  1516  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19803  1517  1C03               	skipc
 19804  1518  2D1C               	goto	i1l993
 19805                           
 19806                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue--;
 19807  1519  3001               	movlw	1
 19808  151A  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19809                           
 19810                           ;Dimmer_B1.c: 1227: } else {
 19811  151B  0008               	return
 19812  151C                     i1l993:	
 19813                           
 19814                           ;Dimmer_B1.c: 1228: DimmerIntr1.Dimming_Status = 0;
 19815  151C  12E2               	bcf	_DimmerIntr1^(0+128),5
 19816                           
 19817                           ;Dimmer_B1.c: 1229: }
 19818                           ;Dimmer_B1.c: 1230: }
 19819                           ;Dimmer_B1.c: 1231: } else if (DimmerIntr1.Dimming_RF == 1) {
 19820  151D  0008               	return
 19821  151E                     i1l988:	
 19822  151E  1F62               	btfss	_DimmerIntr1^(0+128),6
 19823  151F  0008               	return
 19824                           
 19825                           ;Dimmer_B1.c: 1232: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19826  1520  0867               	movf	(_DimmerIntr1^(0+128)+5),w
 19827  1521  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19828  1522  1803               	skipnc
 19829  1523  2D29               	goto	i1l7790
 19830                           
 19831                           ;Dimmer_B1.c: 1233: DimmerIntr1.DimmingValue++;
 19832  1524  3001               	movlw	1
 19833  1525  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19834  1526  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19835  1527  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19836                           
 19837                           ;Dimmer_B1.c: 1234: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19838  1528  0008               	return
 19839  1529                     i1l7790:	
 19840  1529  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19841  152A  0267               	subwf	(_DimmerIntr1^(0+128)+5),w
 19842  152B  1803               	skipnc
 19843  152C  2D30               	goto	i1l999
 19844                           
 19845                           ;Dimmer_B1.c: 1235: DimmerIntr1.DimmingValue--;
 19846  152D  3001               	movlw	1
 19847  152E  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19848                           
 19849                           ;Dimmer_B1.c: 1236: } else {
 19850  152F  0008               	return
 19851  1530                     i1l999:	
 19852                           
 19853                           ;Dimmer_B1.c: 1237: DimmerIntr1.Dimming_RF = 0;
 19854  1530  1362               	bcf	_DimmerIntr1^(0+128),6
 19855  1531  0008               	return
 19856  1532                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19857                           
 19858                           	psect	text141
 19859  1B68                     __ptext141:	
 19860 ;; *************** function _IOC_ISR *****************
 19861 ;; Defined at:
 19862 ;;		line 397 in file "../src/MCU_B1.c"
 19863 ;; Parameters:    Size  Location     Type
 19864 ;;		None
 19865 ;; Auto vars:     Size  Location     Type
 19866 ;;		None
 19867 ;; Return value:  Size  Location     Type
 19868 ;;		None               void
 19869 ;; Registers used:
 19870 ;;		status,2, status,0, pclath, cstack
 19871 ;; Tracked objects:
 19872 ;;		On entry : 0/0
 19873 ;;		On exit  : 0/0
 19874 ;;		Unchanged: 0/0
 19875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19880 ;;Total ram usage:        0 bytes
 19881 ;; Hardware stack levels used:    1
 19882 ;; Hardware stack levels required when called:    1
 19883 ;; This function calls:
 19884 ;;		_DimmerLights_MOSFET_IOC_1
 19885 ;;		_DimmerLights_MOSFET_IOC_2
 19886 ;; This function is called by:
 19887 ;;		_ISR
 19888 ;; This function uses a non-reentrant model
 19889 ;;
 19890                           
 19891                           
 19892                           ;psect for function _IOC_ISR
 19893  1B68                     _IOC_ISR:	
 19894                           
 19895                           ;MCU_B1.c: 398: IOCBF2 = 0;
 19896                           
 19897                           ;incstack = 0
 19898                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19899  1B68  0027               	movlb	7	; select bank7
 19900  1B69  1116               	bcf	22,2	;volatile
 19901                           
 19902                           ;MCU_B1.c: 399: IOCIF = 0;
 19903  1B6A  100B               	bcf	11,0	;volatile
 19904                           
 19905                           ;MCU_B1.c: 401: if (myMain.PowerON == 1) {
 19906  1B6B  0022               	movlb	2	; select bank2
 19907  1B6C  1C20               	btfss	_myMain^(0+256),0
 19908  1B6D  0008               	return
 19909                           
 19910                           ;MCU_B1.c: 407: DimmerLights_MOSFET_IOC_1();
 19911  1B6E  319B  23BD  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19912                           
 19913                           ;MCU_B1.c: 412: DimmerLights_MOSFET_IOC_2();
 19914  1B71  319B  23CB         	fcall	_DimmerLights_MOSFET_IOC_2
 19915  1B73  0008               	return
 19916  1B74                     __end_of_IOC_ISR:	
 19917                           
 19918                           	psect	text142
 19919  1BCB                     __ptext142:	
 19920 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19921 ;; Defined at:
 19922 ;;		line 1314 in file "../src/Dimmer_B1.c"
 19923 ;; Parameters:    Size  Location     Type
 19924 ;;		None
 19925 ;; Auto vars:     Size  Location     Type
 19926 ;;		None
 19927 ;; Return value:  Size  Location     Type
 19928 ;;		None               void
 19929 ;; Registers used:
 19930 ;;		None
 19931 ;; Tracked objects:
 19932 ;;		On entry : 0/0
 19933 ;;		On exit  : 0/0
 19934 ;;		Unchanged: 0/0
 19935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19940 ;;Total ram usage:        0 bytes
 19941 ;; Hardware stack levels used:    1
 19942 ;; This function calls:
 19943 ;;		Nothing
 19944 ;; This function is called by:
 19945 ;;		_IOC_ISR
 19946 ;; This function uses a non-reentrant model
 19947 ;;
 19948                           
 19949                           
 19950                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19951  1BCB                     _DimmerLights_MOSFET_IOC_2:	
 19952                           
 19953                           ;Dimmer_B1.c: 1315: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19954                           
 19955                           ;incstack = 0
 19956                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19957  1BCB  0021               	movlb	1	; select bank1
 19958  1BCC  1969               	btfsc	_DimmerIntr2^(0+128),2
 19959  1BCD  0008               	return
 19960  1BCE  0020               	movlb	0	; select bank0
 19961  1BCF  1D0D               	btfss	13,2	;volatile
 19962  1BD0  0008               	return
 19963                           
 19964                           ;Dimmer_B1.c: 1316: DimmerIntr2.Start = 1;
 19965  1BD1  0021               	movlb	1	; select bank1
 19966  1BD2  1569               	bsf	_DimmerIntr2^(0+128),2
 19967                           
 19968                           ;Dimmer_B1.c: 1317: DimmerIntr2.GO = 1;
 19969  1BD3  1469               	bsf	_DimmerIntr2^(0+128),0
 19970                           
 19971                           ;Dimmer_B1.c: 1319: if (DimmerIntr2.ControlStatus == 1) {
 19972  1BD4  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19973  1BD5  0008               	return
 19974                           
 19975                           ;Dimmer_B1.c: 1320: RB4 = 1;
 19976  1BD6  0020               	movlb	0	; select bank0
 19977  1BD7  160D               	bsf	13,4	;volatile
 19978  1BD8  0008               	return
 19979  1BD9                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19980                           
 19981                           	psect	text143
 19982  1BBD                     __ptext143:	
 19983 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19984 ;; Defined at:
 19985 ;;		line 1245 in file "../src/Dimmer_B1.c"
 19986 ;; Parameters:    Size  Location     Type
 19987 ;;		None
 19988 ;; Auto vars:     Size  Location     Type
 19989 ;;		None
 19990 ;; Return value:  Size  Location     Type
 19991 ;;		None               void
 19992 ;; Registers used:
 19993 ;;		None
 19994 ;; Tracked objects:
 19995 ;;		On entry : 0/0
 19996 ;;		On exit  : 0/0
 19997 ;;		Unchanged: 0/0
 19998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20003 ;;Total ram usage:        0 bytes
 20004 ;; Hardware stack levels used:    1
 20005 ;; This function calls:
 20006 ;;		Nothing
 20007 ;; This function is called by:
 20008 ;;		_IOC_ISR
 20009 ;; This function uses a non-reentrant model
 20010 ;;
 20011                           
 20012                           
 20013                           ;psect for function _DimmerLights_MOSFET_IOC_1
 20014  1BBD                     _DimmerLights_MOSFET_IOC_1:	
 20015                           
 20016                           ;Dimmer_B1.c: 1246: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 20017                           
 20018                           ;incstack = 0
 20019                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 20020  1BBD  0021               	movlb	1	; select bank1
 20021  1BBE  1962               	btfsc	_DimmerIntr1^(0+128),2
 20022  1BBF  0008               	return
 20023  1BC0  0020               	movlb	0	; select bank0
 20024  1BC1  1D0D               	btfss	13,2	;volatile
 20025  1BC2  0008               	return
 20026                           
 20027                           ;Dimmer_B1.c: 1247: DimmerIntr1.Start = 1;
 20028  1BC3  0021               	movlb	1	; select bank1
 20029  1BC4  1562               	bsf	_DimmerIntr1^(0+128),2
 20030                           
 20031                           ;Dimmer_B1.c: 1248: DimmerIntr1.GO = 1;
 20032  1BC5  1462               	bsf	_DimmerIntr1^(0+128),0
 20033                           
 20034                           ;Dimmer_B1.c: 1250: if (DimmerIntr1.ControlStatus == 1) {
 20035  1BC6  1DE2               	btfss	_DimmerIntr1^(0+128),3
 20036  1BC7  0008               	return
 20037                           
 20038                           ;Dimmer_B1.c: 1251: RA7 = 1;
 20039  1BC8  0020               	movlb	0	; select bank0
 20040  1BC9  178C               	bsf	12,7	;volatile
 20041  1BCA  0008               	return
 20042  1BCB                     __end_of_DimmerLights_MOSFET_IOC_1:	
 20043  007E                     btemp	set	126	;btemp
 20044  007E                     pic14e$flags	set	126
 20045  007E                     wtemp	set	126
 20046  007E                     wtemp0	set	126
 20047  0080                     wtemp1	set	128
 20048  0082                     wtemp2	set	130
 20049  0084                     wtemp3	set	132
 20050  0086                     wtemp4	set	134
 20051  0088                     wtemp5	set	136
 20052  007F                     wtemp6	set	127
 20053  007E                     ttemp	set	126
 20054  007E                     ttemp0	set	126
 20055  0081                     ttemp1	set	129
 20056  0084                     ttemp2	set	132
 20057  0087                     ttemp3	set	135
 20058  007F                     ttemp4	set	127
 20059  007E                     ltemp	set	126
 20060  007E                     ltemp0	set	126
 20061  0082                     ltemp1	set	130
 20062  0086                     ltemp2	set	134
 20063  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         268
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      78
    BANK1            80      0      80
    BANK2            80      0      79
    BANK3            80      4      75
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    DimmerIntr	PTR struct Dimmer_Interrut size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  118429
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1512
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3704
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    3704
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3937
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3937
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   37186
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   37186
                                             75 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   33392
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3584
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   29613
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    8912
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   16505
                                             62 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     152
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2059
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     416
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     447
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     348
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1743
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     802
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0     961
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9963
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3116
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   47252
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   47021
                                             74 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   30506
                                             70 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     758
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     152
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    2883
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     220
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     172
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   11447
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    2502
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   16020
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2376
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     344
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0    8945
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     380
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     173
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    2712
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    3246
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    2335
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2048
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4176
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4176
                                             62 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2028
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1794
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1512
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     189      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     189      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Jan 03 15:19:32 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1D92  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l96 15B3                                        l98 15C5  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1092  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _Sw 007B                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1C14                    __end_of_setDelayOff_GO 0CAE  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 09D5  
                    _setDimmerLights_Line 1CF4                              ___ftadd@sign 0043  
                                     l110 1435                                       l106 143B  
                                     l107 1437                                       l108 1427  
                                     l323 1E1E                      _setDimmerLights_SwOn 1686  
                                     l324 1E20                                       l255 09AC  
                                     l367 10DE                                       l573 0AA6  
                                     l742 1D3D                                       l912 074E  
                                     l945 1C1B                                       l946 1C21  
                                     l886 1F51                                       _GIE 005F  
                                     _CRC 00C2                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C7  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C0                                       _Cmd 00C3  
            getDimmerLights_Status@lights 0074                                       _Sw1 01D0  
                                     _Sw2 01D9                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 1E2B                     _Buzzer_Initialization 1AB2  
                         __end_of_ADC_Set 1B0A                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 114F               _setDimmerIntr_ControlStatus 1126  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 1B74  
                   _setDimmerLights_OnOff 06C2          setDimmerLights_DimmingRun@lights 0076  
                              Load_Main@i 0024                              ___ftdiv@sign 0035  
                                    l2010 0E90                                      l1134 1EEE  
                                    l1135 1EF7                                      l2015 0E8A  
                                    l1168 0833                                      l1441 1227  
                                    l1169 083A                                      l2411 0B1E  
                                    l1710 05FF                                      l1455 119B  
                                    l3152 17E9                                      l1464 1487  
                                    l2433 0CC4                                      l3146 17D2  
                                    l2442 0D3A                                      l2426 125D  
                                    l2370 0623                                      l2371 0664  
                                    l1651 1376                           __end_of_IOC_Set 1BA4  
                                    l2366 06BC                                      l3175 03F9  
                                    l1719 1D91                                      l2455 07E2  
                                    l1842 01E7                                      l1683 11F4  
                                    l1852 01C3                                      l1844 0089  
                                    l2396 1C28                                      l1853 01C1  
                                    l1845 0085                                      l1678 11DF  
                                    l1846 0080                                      l1679 11F8  
                                    l6200 17AF                                      l6210 17D7  
                                    l6202 17B9                                      l6212 17DF  
                                    l6204 17BE                                      l7012 113B  
                                    l7020 1D9D                                      l7100 176B  
                                    l2781 0351                                      l7030 1D34  
                                    l2759 1DD8                                      l2783 022E  
                                    l7040 10C8                                      l7112 1789  
                                    l7120 1795                                      l7104 1771  
                                    l7130 1D00                                      l6314 1CC3  
                                    l6308 1D73                                      l7060 11DB  
                                    l7116 178F                                      l7070 11F0  
                                    l7062 11E3                                      l7150 1C5F  
                                    l6318 1CC9                                      l6408 0438  
                                    l6352 0389                                      l6424 0D68  
                                    l7144 1C54                                      l2985 1F09  
                                    l7330 12A5                                      l6370 03B2  
                                    l6418 0D52                                      l7082 174F  
                                    l7090 175B                                      l6196 17A8  
                                    l6380 03D4                                      l6348 0382  
                                    l7148 1C5A                                      l6460 0EAD  
                   _setDimmerLights_SwOff 12CE                                      l9030 15ED  
                                    l7342 12B9                                      l6390 03F5  
                                    l6382 03D8                                      l6358 0398  
                                    l6446 0DC2                                      l6438 0DA9  
                                    l6518 0BB4                                      l7086 1755  
                                    l9040 15F5                                      l9024 15E2  
                                    l7352 12C8                                      l7344 12BB  
                                    l6376 03C5                                      l6552 0C19  
                                    l6544 0BFF                                      l6536 0BE4  
                                    l6712 172C                                      l7096 1765  
                                    l6800 1EDD                                      l6298 1D5E  
                                    l9042 1601                                      l7354 12CC  
                                    l6394 040B                                      l6378 03CF  
                                    l6546 0C08                                      l6538 0BF2  
                                    l6490 0F1A                                      l6482 0F06  
                                    l6466 0EC3                                      l8242 1F03  
                                    l7530 1CDD                                      l6636 12FB  
                                    l9052 161C                                      l9140 169D  
                                    l6388 03EB                                      l6548 0C0B  
                                    l6812 10EF                                      l7604 1F68  
                                    l8262 1413                                      l9150 16B0  
                                    l6398 041D                                      l6494 0F22  
                                    l6478 0EFE                                      l7630 1269  
                                    l6814 10FA                                      l9230 0798  
                                    l7614 1F75                                      l7606 1F6A  
                                    l9056 1624                                      l9048 1613  
                                    l9160 16D9                                      l6680 1E08  
                                    l6672 0CA4                                      l7632 1275  
                                    l7616 1F79                                      l9138 169A  
                                    l6842 1C12                                      l6658 0C60  
                                    l7642 1290                                      l9242 07CE  
                                    l9234 079D                                      l9218 13AB  
                                    l9148 16AB                                      l6852 1D8C  
                                    l6668 0C90                                      l9180 1E6F  
                                    l9252 109C                                      l9412 0995  
                                    l9158 16D4                                      l7486 1186  
                                    l7638 1287                                      l9174 1E66  
                                    l9190 1079                                      l9254 109F  
                                    l9430 09C9                                      l9422 09BC  
                                    l7590 1D22                                      l9096 1FE9  
                                    l6848 1D7F                                      l6688 1164  
                                    l9512 070D                                      l9176 1E69  
                                    l9192 107C                                      l9280 13DD  
                                    l9424 09C0                                      l9416 09B3  
                                    l9360 0CAF                                      l9530 074A  
                                    l7682 1E9A                                      l9290 13ED  
                                    l9282 13E0                                      l9258 10A5  
                                    l9450 0858                                      l9426 09C3  
                                    l9418 09B6                                      l9370 0CD9  
                                    l9610 0AE5                                      l9516 0724  
                                    l7692 1EA7                                      l9196 1082  
                                    l9292 13F0                                      l9380 0D21  
                                    l9372 0CF4                     _myMain_Initialization 1C32  
                                    l9550 077E                                      l9526 0743  
                                    l7694 1EAB                                      l9286 13E6  
                                    l6798 1ED8                                      l9470 086D  
                                    l9454 085E                                      l9374 0D15  
                                    l9622 0AFA                                      l9606 0ADC  
                                    l9536 0754                                      l7952 1448  
                                    l9296 13F6                                      l9472 0883  
                                    l9448 0855                                      l9392 097D  
                                    l9376 0D19                                      l9368 0CD3  
                                    l9384 0D25                                      l9800 0673  
                                    l9394 0980                                      l9378 0D1D  
                                    l9556 14A8                                      l9900 02CC  
                                    l9740 0E61                                      l9708 0E00  
                                    l9662 09FD                                      l7958 145C  
                                    l9398 0986                                      l9814 069D  
                                    l9910 02FE                                      l9750 0E76  
                                    l9664 0A03                                      l9752 0E77  
                                    _CFGS 0CAE                                      l9674 0A2B  
                                    l9594 0AC3                                      l9738 0E5F  
                                    l9690 1EBE                                      l9676 0A31  
                                    l9828 06B5                                      l9844 1DDD  
                                    l9860 0219                                      l9684 1EB5  
                                    l9686 1EB8                                      l9848 1DE3  
                            __CFG_WDTE$ON 0000                                      l9786 065F  
                                    l9948 1F53                                      l9972 04C2  
                                    l9876 025C                                      l9886 028E  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5105 17F0                                      u5035 17B4  
                                    u5055 17CD                                      u6130 16EC  
                                    u5075 17DA                                      _PEIE 005E  
                                    u6135 16EA                                      u5425 03B3  
                                    u5515 03EC                                      u6075 0C6C  
                                    u6235 10E4                                      u5605 0DAA  
                                    u5455 03C6                                      u5615 0DB9  
                                    u5625 0DC3                                      u5705 0F0D  
                                    u5485 03D9                                      u5815 0BE5  
                                    u5735 0F23                                      u5585 0D7A  
                                    u5745 0F29                                      u5665 0ECF  
                                    u7505 1276                                      u5595 0D8A  
                                    u5675 0EDF                                      u7515 1280  
                                    u5845 0C00                                      u7525 1288  
                                    u5695 0F07                                      u5785 0BBB  
                                    u7485 126C                                      u8655 1F0A  
                                    u8665 1F0F                                      u8695 1409  
                                    u8875 121E                                      _LWLO 0CAD  
                                    _RSSI 00C8                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1E43  
              _setDimmerLights_DimmingRun 1E2B                                      _Buz1 00AE  
                                    _Load 0130                                      _Temp 00D0  
                                    _main 162B                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0AAD                           __end_of_RF_Main 1ABE  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B3C                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0800                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2190 0076  
    _getDimmerLights_Allow_Condition$2188 0074      _getDimmerLights_Allow_Condition$2189 0075  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 12CE  
__size_of_getDimmerLights_Allow_Condition 0037         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1297  
                  _getDimmerLights_Status 1BE7                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 1B98                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00C5                                     l10020 0B3E  
                                   l10032 0B6A                                     l10300 05D2  
                                   l10108 0067                                     l10028 0B61  
                                   l10302 05AD                                     l10142 00AC  
                                   l10126 0088                                     l10062 1330  
                                   l10304 05DA                                     l10312 05F5  
                                   l10048 0B95                                     l10080 1357  
                                   l10306 05E4                                     l10236 01D6  
                                   l10180 0165                                     l10148 00DE  
                                   l10270 0559                                     l10174 0158  
                                   l10264 054A                                     l10184 0181  
                                   l10282 0590                                     l10274 0568  
                                   l10354 164F                                     l10284 056B  
                                   l10188 018D                                     l10286 0598  
                                   l10198 01A3                                     l10358 165A  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 005E                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01E7                           __end_of___awdiv 162B  
                         __end_of___ftadd 0450                           __end_of___ftdiv 0DE4  
                         __end_of___ftneg 1B2A                                     u10045 15F8  
                                   u10065 1602                                     u10075 160C  
                                   u10085 1614                           __end_of___ftmul 0F4A  
                                   u10165 1DB6                                     u12200 05D8  
                                   u11315 068C                           ___awdiv@divisor 0072  
                                   u12205 05B6                                     u12045 0194  
                                   u11175 0E47                                     _T1CON 0018  
                                   u12170 0596                                     u11195 0E67  
                         __end_of___fttol 0C22                                     u11285 063F  
                                   u12175 0574                                     u11705 0B82  
                                   u11805 136E                                     u10775 1DF6  
                                   u11655 0B4E                                     u11755 1327  
                                   u11765 1336                                     u11945 00AA  
                                   u11955 00DC                                     u11965 0111  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1297  
                                   i1l990 1513                                     i1l982 14FA  
                                   i1l993 151C                                     i1l988 151E  
                                   i1l999 1530                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1DFC  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0908  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 08A3  
                        __end_of_TMR1_ISR 1FBC                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1BB0  
                                   _getAD 1EAD                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1CC1  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1C81                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 1C71                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 16E2  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0060  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 1686                       ?_setRF_DimmerLights 005E  
                        __end_of_Fosc_Set 1AC8            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0066  
                          _Exception_Main 052C                          ?_CC2500_WriteREG 0074  
                               ??_ADC_Set 0072                      _setSw_Initialization 1B0A  
                                  ??_main 007A                             ___fttol@sign1 004E  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0CAE  
                          _setMemory_Data 1B47                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 148F  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00E2                               _DimmerIntr2 00E9  
                _getMain_All_LightsStatus 1C05                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1DA7                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0066                      ??_setRF_DimmerLights 005F  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0A3E  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1AFC  
                               ??_WDT_Set 0072                          __end_of___awtoft 2000  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1800  
                _getMain_All_Error_Status 11CC                                    _IOCBF2 1CB2  
                                  i1l1011 154C                                    i1l1022 156E  
                                  i1l1017 1570                                    i1l1019 1565  
                                  i1l1028 1582                                    i1l1403 0013  
                                  i1l1406 001B                                    i1l7812 153F  
                                  i1l7844 157B                                    i1l7836 1567  
                                  i1l7790 1529                                    i1l7782 1515  
                                  i1l7758 14ED                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0198                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E43  
                                  u880_25 1FB6                                    _WDTCON 0097  
                    Exception_Main@i_3451 002A                        DelayTime_1us@count 0072  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1DD1                                    _Dimmer 00BA  
                                  _DlySw1 015E                                    _DlySw2 01E2  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C61  
              __end_of_Mcu_Initialization 1D18                       __end_of_Buzzer_Main 1442  
                                  _Memory 0220                                    _Timer1 00BD  
                                  ___bmul 1CC1                    __end_of_Exception_Main 0600  
                    Load_Main@Load_Status 0023                      Exception_Main@lights 002C  
                                  ___wmul 1F01                                 ??___awdiv 0076  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00CE  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1EAD  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0072          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E92                                    _s_data 00CF  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 1741  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1B52                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 1584  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AB8  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1178          __end_of_setDimmerIntr_Dimming_Sw 10DA  
                   ___ftmul@f3_as_product 0031                 _setDimmerLights_DimmingOn 10FF  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1CB1               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074                     __end_of_SwPointSelect 1D2B  
            __size_of_Flash_Memory_Modify 004D                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1DD1  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$5094 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2160 0027  
               _setDimmerLights_SwOn$2159 0026                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1F7B                             __end_of_getAD 1EC8  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1B80                           _getSw_KeyStatus 1F5B  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0064  
           ??_Flash_Memory_Initialization 005A                ?_DimmerLights_MOSFET_IOC_1 0070  
              ?_DimmerLights_MOSFET_IOC_2 0070                      _getMain_Lights_Count 1C71  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01EB  
       setDimmerIntr_ControlStatus@lights 0074                ?_DimmerLights_MOSFET_TMR_1 0070  
              ?_DimmerLights_MOSFET_TMR_2 0070                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1DFC                __end_of_set_TimeoutCleared 1AE2  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0073  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BD9                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1ABE                        ??_CC2500_WriteByte 0072  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13FC  
                       ??_setRFSW_Control 0066               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1AC4                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B11  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 00C6                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 162B  
                          _getDelayOff_GO 1BF6                       _CC2500_WriteCommand 1E5D  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1FDE  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0B20                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1AEE                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B03  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 1306  
      __end_of_DimmerLights_SelectPointer 1D7D                _DimmerLights_SelectPointer 1D68  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1070  
       __end_of_DimmerLights_MOSFET_IOC_1 1BCB         __end_of_DimmerLights_MOSFET_IOC_2 1BD9  
                      _setRFSW_AdjControl 0781                    __end_of_setProductData 1BE7  
       __end_of_DimmerLights_MOSFET_TMR_1 1532         __end_of_DimmerLights_MOSFET_TMR_2 1584  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1B68  
                                 _IOC_Set 1B98                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0063     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11FA  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D3F  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1ABB                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B33  
         __end_of_setControl_Lights_Table 0D3B                           setRF_Main@error 006C  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14E0  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1B5D                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1C91  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C05                                   _VarLED1 0167  
                                 _VarLED2 016B            __end_of_getDimmerLights_Status 1BF6  
                       __end_of_getRxData 0B20                   __end_of_getSw_KeyStatus 1F7B  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005E                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 15D7                                   ___ftadd 035A  
                                 ___ftdiv 0D3B                                   ___ftneg 1B21  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0B9B                       __end_of_Switch_Main 1B68  
                                 ___lwdiv 1261                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1CD2  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0061  
                         __size_of_setBuz 0053                                   __ptext1 133F  
                                 __ptext2 1C32                                   __ptext3 1306  
                                 __ptext4 0B20                                   __ptext5 1EAD  
                                 __ptext6 1CB1                                   __ptext7 0002  
                                 __ptext8 1AC1                                   __ptext9 0DE4  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0067  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 122D  
               __end_of_Flash_Memory_Read 1D53                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 0600                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B19                         _DimmerLights_Main 1F3B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1ADD  
              __end_of_CC2500_ClearRXFIFO 1AD0                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1AD4                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006D  
                          _LedPointSelect 1EE4                       _DelayOffPointSelect 1D53  
                                 clrloop0 1AE9            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BBD                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 11A2  
                           _DelayTime_1us 10DA                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11A2        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1AE2                __end_of_setRF_TransceiveGO 1C51  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1AE3  
                              _setSw_Main 01EB                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 1092  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1C61  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0842                             _CC2500_TxData 096D  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1442  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1D7D                       _Flash_Memory_Unlock 1B2A  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F5B                        _Mcu_Initialization 1D06  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1ACC  
                    __end_of_my_MainTimer 1378                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1F01  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 11CC  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 10B5                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1126  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1E5D  
                    _setRF_Initialization 1066                        _setMemory_LoopSave 1CA1  
                             _Switch_Main 1B5D                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1CE3  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1DBC               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CD2  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 1F1E                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0069  
                          __end_of_setLED 17A0             __size_of_setDimmerLights_Line 0012  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 15D7  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1B52                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 1378  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1AF5                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1F3B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 096D   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0908                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1ADD  
       __end_of_setDimmerIntr_MaxmumValue 1E13                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 0163  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1AC1                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C9  
                   setProductData@address 005D                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0013  
        __end_of_getMain_All_LightsStatus 1C14                                 _Tx_Length 00CC  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11FA  
                        _CC2500_SIDLEMode 1AD4                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1C91                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK3 01E7                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1FBC                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0060  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1BBD  
               _DimmerLights_MOSFET_IOC_2 1BCB                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 14E0                 _DimmerLights_MOSFET_TMR_2 1532  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1E92  
                setRFSW_AdjControl@status 0060                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006D                            getRxData@error 006A  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1AC8  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0028  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00C2  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1C51                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 0800  
                               _getBuz_GO 1C81                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 052C               _Flash_Memory_Initialization 0450  
                                ?___awdiv 0072                                 __ptext100 1BF6  
                               __ptext101 1C51                                 __ptext110 0B9B  
                               __ptext102 148F                                 __ptext111 1B21  
                               __ptext103 0F4A                                 __ptext120 1B3C  
                               __ptext112 0D3B                                 __ptext104 1C41  
                               __ptext121 1AB1                                 __ptext113 035A  
                               __ptext105 16E2                                 __ptext130 1BE7  
                               __ptext122 1FBC                                 __ptext114 1FDE  
                               __ptext106 1CF4                                 __ptext131 1D68  
                               __ptext123 1B19                                 __ptext115 17A0  
                               __ptext107 1DFC                                 __ptext140 14E0  
                               __ptext132 1B11                                 __ptext124 0A3E  
                               __ptext116 1D2B                                 __ptext108 10B5  
                               __ptext141 1B68                                 __ptext133 1AD8  
                               __ptext125 1BD9                                 __ptext117 1297  
                               __ptext109 08A3                                  ?___ftadd 0039  
                               __ptext142 1BCB                                 __ptext134 1D53  
                               __ptext126 1686                                 __ptext118 1AEE  
                               __ptext143 1BBD                                 __ptext135 13FC  
                               __ptext127 1584                                 __ptext119 11CC  
                               __ptext136 1AB2                                 __ptext128 15D7  
                               __ptext129 12CE                                 __ptext138 1F9B  
                               __ptext139 1532                                 _getRxData 0AAD  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 13B8                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AB5                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1DE6  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D3F              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D2B                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00BF                                 _r_address 00CD  
           __end_of_setDimmerLights_OnOff 0781            __size_of_setDimmerLights_SwOff 0038  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1306  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C41  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0077  
                           _SwPointSelect 1D18                       __end_of_setLED_Main 0842  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1AC1                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1B8C  
                         SwPointSelect@sw 0073                                 clear_ram0 1AE8  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 133F                                 _setTxData 0F4A  
     __end_of_DimmerLights_Initialization 1B47               _DimmerLights_Initialization 1B3C  
                      _CC2500_ClearRXFIFO 1ACC                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1AD0                  setRF_DimmerLights@lights 0062  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CF4  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0061      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 007F       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1178                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1F9B  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1BA4  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C41                                  _RF_Count 012E  
                    __end_of_RF_RxDisable 1C32                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1E77                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1CB1                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C4  
                            setSw_Main@sw 002C                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B80  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1261  
                   _DlyOff_Initialization 1AD8         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 114F  
             setDimmerLights_OnOff@lights 0069                  _setDimmerIntr_Dimming_Sw 10B5  
                                _Fosc_Set 1AC4                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0067                        __end_of_getLoad_AD 0B9B  
                      __end_of_getLoad_OK 1AF5                     _Switch_Initialization 1BB0  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 133F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E13  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0015  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00CB                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0068             _getMain_All_Error_Status$3440 0075  
           _getMain_All_Error_Status$3439 0073                  __end_of_getDimmer_LoadGO 1AFC  
                     _Load_Initialization 1AB5          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0DE4                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1FDE                          ??_LedPointSelect 0072  
                                ___ftpack 17A0             __size_of_getMain_Lights_Count 0010  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006B                      CC2500_WriteREG@value 0074  
                             _setLED_Main 0801                __end_of_setRF_DimmerLights 1741  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B03                          setDelayOff_GO@sw 0065  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1ABE  
                                __ptext11 0800                                  __ptext20 1DD1  
                                __ptext12 1B5D                                  __ptext21 1ADD  
                                __ptext13 01EB                                  __ptext30 0781  
                                __ptext22 1DE6                                  __ptext14 1CE3  
                                __ptext31 1C91                                  __ptext23 1ABB  
                                __ptext15 10FF                                  __ptext40 1DBC  
                                __ptext32 1E2B                                  __ptext24 0600  
                                __ptext16 1F5B                                  __ptext41 1AD4  
                                __ptext33 1CD2                                  __ptext25 0AAD  
                                __ptext17 1D18                                  __ptext50 1E5D  
                                __ptext42 13B8                                  __ptext34 1C81  
                                __ptext26 122D                                  __ptext18 1BB0  
                                __ptext51 1AC8                                  __ptext43 11A2  
                                __ptext35 1C23                                  __ptext27 1CA1  
                                __ptext19 1B0A                                  __ptext60 1B98  
                                __ptext52 1DA7                                  __ptext44 1F1E  
                                __ptext36 096D                                  __ptext28 0CAE  
                                __ptext61 1AC4                                  __ptext53 1E13  
                                __ptext45 1070                                  __ptext37 0842  
                                __ptext29 1378                                  __ptext70 1AB5  
                                __ptext62 1B03                                  __ptext54 1AB8  
                                __ptext46 1B52                                  __ptext38 1092  
                                __ptext71 1E77                                  __ptext63 0053  
                                __ptext55 1066                                  __ptext47 10DA  
                                __ptext39 1EC8                                  __ptext80 1B47  
                                __ptext72 1B8C                                  __ptext64 1C71  
                                __ptext56 1D06                                  __ptext48 1AD0  
                                __ptext81 1178                                  __ptext73 0801  
                                __ptext65 1AFC                                  __ptext57 1B33  
                                __ptext49 1ACC                                  __ptext90 1EE4  
                                __ptext82 1B2A                                  __ptext74 1B80  
                                __ptext66 1AF5                                  __ptext58 1BA4  
                                __ptext91 114F                                  __ptext83 1D3F  
                                __ptext75 1C61                                  __ptext67 1E92  
                                __ptext59 1E43                                  __ptext92 1D92  
                                __ptext84 052C                                  __ptext76 11FA  
                                __ptext68 1F01                                  __ptext93 1126  
                                __ptext85 1C14                                  __ptext77 1442  
                                __ptext69 1261                                  __ptext94 0C22  
                                __ptext86 1F3B                                  __ptext78 1B74  
                                __ptext95 1CC1                                  __ptext87 09D5  
                                __ptext79 0450                                  __ptext96 1D7D  
                                __ptext88 06C2                                  __ptext97 1C05  
                                __ptext89 1741                                  __ptext98 0908  
                                __ptext99 0E96                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C23              __end_of_setDimmerLights_Main 0A3E  
            __end_of_setDimmerLights_Line 1D06              __end_of_setDimmerLights_SwOn 16E2  
                            ??_setSw_Main 002A                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1CE3  
      __size_of_DimmerIntr_Initialization 0022                           ??_getCmd_Status 0072  
                __end_of_CC2500_SIDLEMode 1AD8                setDimmerLights_Main@lights 006A  
             __end_of_DelayOffPointSelect 1D68                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1EC8                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1F1E                  __end_of_setMemory_Modify 1CA1  
    _getAll_DimmerIntr_Dimming_Sw_RF$2102 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2103 0074  
                      __end_of_setRF_Main 06C2                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 000E  
      __size_of_DimmerLights_MOSFET_IOC_2 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0069                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1DBC        __size_of_DimmerLights_MOSFET_TMR_1 0052  
      __size_of_DimmerLights_MOSFET_TMR_2 0052                                  main@argc 01E7  
                                main@argv 01E9                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6071 0073                      _getSw_KeyStatus$6072 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 13B8  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1DA7  
              _setDimmerIntr_DimmingValue 1D92               __end_of_Flash_Memory_Modify 148F  
                             _setLog_Code 122D               __end_of_Flash_Memory_Unlock 1B33  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1070  
                      __end_of_setSw_Main 035A                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0062                           setDelayOff_GO@j 0063  
                         setDelayOff_GO@k 0064                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 1AB2   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1AB1                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AB8                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1B74                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00CA                   __size_of_Exception_Main 00D4  
         __end_of_DelayOff_Initialization 1B19                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B21                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0C22  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008D  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005E                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 10FF                   __end_of_CC2500_ReadByte 1EE4  
            __end_of_setSw_Initialization 1B11                           _Timeout_Counter 1DE6  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1C23                __end_of_LED_Initialization 1B8C  
          __end_of_setTemp_Initialization 0801                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1ABB                     __end_of_CC2500_RxData 08A3  
                   __end_of_CC2500_TxData 09D5                     _setLoad_AH_AL_Restore 1E77  
                 __end_of_CC2500_PowerRST 13FC  
