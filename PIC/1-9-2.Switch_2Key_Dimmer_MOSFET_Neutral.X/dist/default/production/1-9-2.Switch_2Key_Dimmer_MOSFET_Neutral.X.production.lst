

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Dec 30 17:02:49 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text131,local,class=CODE,merge=1,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942  0000                     	;# 
  1943  0001                     	;# 
  1944  0002                     	;# 
  1945  0003                     	;# 
  1946  0004                     	;# 
  1947  0005                     	;# 
  1948  0006                     	;# 
  1949  0007                     	;# 
  1950  0008                     	;# 
  1951  0009                     	;# 
  1952  000A                     	;# 
  1953  000B                     	;# 
  1954  000C                     	;# 
  1955  000D                     	;# 
  1956  000E                     	;# 
  1957  0010                     	;# 
  1958  0011                     	;# 
  1959  0012                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0095                     	;# 
  1976  0096                     	;# 
  1977  0097                     	;# 
  1978  0099                     	;# 
  1979  009A                     	;# 
  1980  009B                     	;# 
  1981  009B                     	;# 
  1982  009C                     	;# 
  1983  009D                     	;# 
  1984  009E                     	;# 
  1985  010C                     	;# 
  1986  010D                     	;# 
  1987  010E                     	;# 
  1988  0116                     	;# 
  1989  0117                     	;# 
  1990  011D                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0191                     	;# 
  1995  0191                     	;# 
  1996  0192                     	;# 
  1997  0193                     	;# 
  1998  0193                     	;# 
  1999  0194                     	;# 
  2000  0195                     	;# 
  2001  0196                     	;# 
  2002  0197                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019F                     	;# 
  2014  020D                     	;# 
  2015  0210                     	;# 
  2016  0211                     	;# 
  2017  0211                     	;# 
  2018  0212                     	;# 
  2019  0212                     	;# 
  2020  0213                     	;# 
  2021  0213                     	;# 
  2022  0214                     	;# 
  2023  0214                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  0291                     	;# 
  2032  0291                     	;# 
  2033  0292                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  0394                     	;# 
  2040  0395                     	;# 
  2041  0396                     	;# 
  2042  0FE4                     	;# 
  2043  0FE5                     	;# 
  2044  0FE6                     	;# 
  2045  0FE7                     	;# 
  2046  0FE8                     	;# 
  2047  0FE9                     	;# 
  2048  0FEA                     	;# 
  2049  0FEB                     	;# 
  2050  0FED                     	;# 
  2051  0FEE                     	;# 
  2052  0FEF                     	;# 
  2053  0000                     	;# 
  2054  0001                     	;# 
  2055  0002                     	;# 
  2056  0003                     	;# 
  2057  0004                     	;# 
  2058  0005                     	;# 
  2059  0006                     	;# 
  2060  0007                     	;# 
  2061  0008                     	;# 
  2062  0009                     	;# 
  2063  000A                     	;# 
  2064  000B                     	;# 
  2065  000C                     	;# 
  2066  000D                     	;# 
  2067  000E                     	;# 
  2068  0010                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0015                     	;# 
  2072  0016                     	;# 
  2073  0016                     	;# 
  2074  0017                     	;# 
  2075  0018                     	;# 
  2076  0019                     	;# 
  2077  001A                     	;# 
  2078  001B                     	;# 
  2079  001C                     	;# 
  2080  008C                     	;# 
  2081  008D                     	;# 
  2082  008E                     	;# 
  2083  0090                     	;# 
  2084  0091                     	;# 
  2085  0092                     	;# 
  2086  0095                     	;# 
  2087  0096                     	;# 
  2088  0097                     	;# 
  2089  0099                     	;# 
  2090  009A                     	;# 
  2091  009B                     	;# 
  2092  009B                     	;# 
  2093  009C                     	;# 
  2094  009D                     	;# 
  2095  009E                     	;# 
  2096  010C                     	;# 
  2097  010D                     	;# 
  2098  010E                     	;# 
  2099  0116                     	;# 
  2100  0117                     	;# 
  2101  011D                     	;# 
  2102  018C                     	;# 
  2103  018D                     	;# 
  2104  018E                     	;# 
  2105  0191                     	;# 
  2106  0191                     	;# 
  2107  0192                     	;# 
  2108  0193                     	;# 
  2109  0193                     	;# 
  2110  0194                     	;# 
  2111  0195                     	;# 
  2112  0196                     	;# 
  2113  0197                     	;# 
  2114  0199                     	;# 
  2115  019A                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019C                     	;# 
  2122  019D                     	;# 
  2123  019E                     	;# 
  2124  019F                     	;# 
  2125  020D                     	;# 
  2126  0210                     	;# 
  2127  0211                     	;# 
  2128  0211                     	;# 
  2129  0212                     	;# 
  2130  0212                     	;# 
  2131  0213                     	;# 
  2132  0213                     	;# 
  2133  0214                     	;# 
  2134  0214                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0216                     	;# 
  2139  0216                     	;# 
  2140  0217                     	;# 
  2141  0217                     	;# 
  2142  0291                     	;# 
  2143  0291                     	;# 
  2144  0292                     	;# 
  2145  0293                     	;# 
  2146  0298                     	;# 
  2147  0298                     	;# 
  2148  0299                     	;# 
  2149  029A                     	;# 
  2150  0394                     	;# 
  2151  0395                     	;# 
  2152  0396                     	;# 
  2153  0FE4                     	;# 
  2154  0FE5                     	;# 
  2155  0FE6                     	;# 
  2156  0FE7                     	;# 
  2157  0FE8                     	;# 
  2158  0FE9                     	;# 
  2159  0FEA                     	;# 
  2160  0FEB                     	;# 
  2161  0FED                     	;# 
  2162  0FEE                     	;# 
  2163  0FEF                     	;# 
  2164                           
  2165                           	psect	idataBANK4
  2166  1FBF                     __pidataBANK4:	
  2167                           
  2168                           ;initializer for __product
  2169  1FBF  3463               	retlw	99
  2170  1FC0  3402               	retlw	2
  2171  1FC1  3400               	retlw	0
  2172  1FC2  3400               	retlw	0
  2173  1FC3  3400               	retlw	0
  2174  1FC4  3400               	retlw	0
  2175  1FC5  3400               	retlw	0
  2176  1FC6  3400               	retlw	0
  2177  1FC7  3400               	retlw	0
  2178  1FC8  3400               	retlw	0
  2179  1FC9  3400               	retlw	0
  2180  1FCA  3400               	retlw	0
  2181  1FCB  34FF               	retlw	255
  2182  1FCC  34FF               	retlw	255
  2183  1FCD  34FF               	retlw	255
  2184  1FCE  3400               	retlw	0
  2185  1FCF  3400               	retlw	0
  2186  1FD0  3400               	retlw	0
  2187  1FD1  3400               	retlw	0
  2188  1FD2  3400               	retlw	0
  2189  1FD3  3400               	retlw	0
  2190  1FD4  3400               	retlw	0
  2191  1FD5  3400               	retlw	0
  2192  1FD6  3400               	retlw	0
  2193  1FD7  3400               	retlw	0
  2194  1FD8  3400               	retlw	0
  2195  1FD9  3400               	retlw	0
  2196  1FDA  3400               	retlw	0
  2197  1FDB  3400               	retlw	0
  2198  1FDC  3400               	retlw	0
  2199  1FDD  3400               	retlw	0
  2200  1FDE  3400               	retlw	0
  2201                           
  2202                           	psect	stringtext
  2203  1000                     __pstringtext:	
  2204  1000                     _CC2500_registers_address:	
  2205  1000  3403               	retlw	3
  2206  1001  3416               	retlw	22
  2207  1002  3417               	retlw	23
  2208  1003  341E               	retlw	30
  2209  1004  341F               	retlw	31
  2210  1005  3420               	retlw	32
  2211  1006  342A               	retlw	42
  2212  1007  342B               	retlw	43
  2213  1008  340B               	retlw	11
  2214  1009  340C               	retlw	12
  2215  100A  340D               	retlw	13
  2216  100B  340E               	retlw	14
  2217  100C  340F               	retlw	15
  2218  100D  3410               	retlw	16
  2219  100E  3411               	retlw	17
  2220  100F  3412               	retlw	18
  2221  1010  3413               	retlw	19
  2222  1011  3414               	retlw	20
  2223  1012  340A               	retlw	10
  2224  1013  3415               	retlw	21
  2225  1014  3421               	retlw	33
  2226  1015  3422               	retlw	34
  2227  1016  3418               	retlw	24
  2228  1017  3419               	retlw	25
  2229  1018  341A               	retlw	26
  2230  1019  341B               	retlw	27
  2231  101A  341C               	retlw	28
  2232  101B  341D               	retlw	29
  2233  101C  3423               	retlw	35
  2234  101D  3424               	retlw	36
  2235  101E  3425               	retlw	37
  2236  101F  3426               	retlw	38
  2237  1020  3429               	retlw	41
  2238  1021  342C               	retlw	44
  2239  1022  342D               	retlw	45
  2240  1023  342E               	retlw	46
  2241  1024  3400               	retlw	0
  2242  1025  3401               	retlw	1
  2243  1026  3402               	retlw	2
  2244  1027  3407               	retlw	7
  2245  1028  3408               	retlw	8
  2246  1029  3409               	retlw	9
  2247  102A  3406               	retlw	6
  2248  102B  3404               	retlw	4
  2249  102C  3405               	retlw	5
  2250  102D  3427               	retlw	39
  2251  102E  3428               	retlw	40
  2252  102F                     __end_of_CC2500_registers_address:	
  2253  102F                     _CC2500_rfSettings:	
  2254  102F  3407               	retlw	7
  2255  1030  3407               	retlw	7
  2256  1031  3430               	retlw	48
  2257  1032  3487               	retlw	135
  2258  1033  346B               	retlw	107
  2259  1034  34F8               	retlw	248
  2260  1035  347F               	retlw	127
  2261  1036  343F               	retlw	63
  2262  1037  3409               	retlw	9
  2263  1038  3400               	retlw	0
  2264  1039  345C               	retlw	92
  2265  103A  34A7               	retlw	167
  2266  103B  3462               	retlw	98
  2267  103C  3486               	retlw	134
  2268  103D  3483               	retlw	131
  2269  103E  3403               	retlw	3
  2270  103F  3422               	retlw	34
  2271  1040  34F8               	retlw	248
  2272  1041  3400               	retlw	0
  2273  1042  3444               	retlw	68
  2274  1043  34B6               	retlw	182
  2275  1044  3410               	retlw	16
  2276  1045  3418               	retlw	24
  2277  1046  341D               	retlw	29
  2278  1047  341C               	retlw	28
  2279  1048  34C7               	retlw	199
  2280  1049  3400               	retlw	0
  2281  104A  34B2               	retlw	178
  2282  104B  34EA               	retlw	234
  2283  104C  340A               	retlw	10
  2284  104D  3400               	retlw	0
  2285  104E  3411               	retlw	17
  2286  104F  3459               	retlw	89
  2287  1050  3488               	retlw	136
  2288  1051  3431               	retlw	49
  2289  1052  340B               	retlw	11
  2290  1053  342F               	retlw	47
  2291  1054  342E               	retlw	46
  2292  1055  3406               	retlw	6
  2293  1056  3404               	retlw	4
  2294  1057  3405               	retlw	5
  2295  1058  3400               	retlw	0
  2296  1059  3430               	retlw	48
  2297  105A  34D3               	retlw	211
  2298  105B  3491               	retlw	145
  2299  105C  3441               	retlw	65
  2300  105D  3400               	retlw	0
  2301  105E                     __end_of_CC2500_rfSettings:	
  2302  105E                     _CC2500_patable_vaule:	
  2303  105E  34FE               	retlw	254
  2304  105F  34FE               	retlw	254
  2305  1060  34FE               	retlw	254
  2306  1061  34FE               	retlw	254
  2307  1062  34FE               	retlw	254
  2308  1063  34FE               	retlw	254
  2309  1064  34FE               	retlw	254
  2310  1065  34FE               	retlw	254
  2311  1066                     __end_of_CC2500_patable_vaule:	
  2312                           
  2313                           	psect	nvBANK0
  2314  006F                     __pnvBANK0:	
  2315  006F                     _product:	
  2316  006F                     	ds	1
  2317  000C                     _PORTA	set	12
  2318  000D                     _PORTB	set	13
  2319  000E                     _PORTC	set	14
  2320  0018                     _T1CON	set	24
  2321  0017                     _TMR1H	set	23
  2322  0016                     _TMR1L	set	22
  2323  005F                     _GIE	set	95
  2324  005B                     _IOCIE	set	91
  2325  0058                     _IOCIF	set	88
  2326  005E                     _PEIE	set	94
  2327  0060                     _RA0	set	96
  2328  0063                     _RA3	set	99
  2329  0064                     _RA4	set	100
  2330  0066                     _RA6	set	102
  2331  0067                     _RA7	set	103
  2332  0068                     _RB0	set	104
  2333  0069                     _RB1	set	105
  2334  006A                     _RB2	set	106
  2335  006B                     _RB3	set	107
  2336  006C                     _RB4	set	108
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0072                     _RC2	set	114
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0077                     _RC7	set	119
  2344  0088                     _TMR1IF	set	136
  2345  009D                     _ADCON0	set	157
  2346  009E                     _ADCON1	set	158
  2347  009C                     _ADRESH	set	156
  2348  009B                     _ADRESL	set	155
  2349  0099                     _OSCCON	set	153
  2350  008C                     _TRISA	set	140
  2351  008D                     _TRISB	set	141
  2352  008E                     _TRISC	set	142
  2353  0097                     _WDTCON	set	151
  2354  04E9                     _GO_nDONE	set	1257
  2355  0488                     _TMR1IE	set	1160
  2356  0117                     _FVRCON	set	279
  2357  010C                     _LATA	set	268
  2358  010D                     _LATB	set	269
  2359  010E                     _LATC	set	270
  2360  018C                     _ANSELA	set	396
  2361  018D                     _ANSELB	set	397
  2362  018E                     _ANSELC	set	398
  2363  0192                     _PMADRH	set	402
  2364  0191                     _PMADRL	set	401
  2365  0196                     _PMCON2	set	406
  2366  0194                     _PMDATH	set	404
  2367  0193                     _PMDATL	set	403
  2368  0CAE                     _CFGS	set	3246
  2369  0CAC                     _FREE	set	3244
  2370  0CAD                     _LWLO	set	3245
  2371  0CA8                     _RD	set	3240
  2372  0CA9                     _WR	set	3241
  2373  0CAA                     _WREN	set	3242
  2374  020D                     _WPUB	set	525
  2375  1069                     _WPUB1	set	4201
  2376  106A                     _WPUB2	set	4202
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0022                     start_initialization:	
  2386  0022                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITCOMMON
  2389  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to COMMON
  2392  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2393                           
  2394                           ; Clear objects allocated to BANK0
  2395  0024  01ED               	clrf	__pbssBANK0& (0+127)
  2396  0025  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2397                           
  2398                           ; Clear objects allocated to BANK1
  2399  0026  30A0               	movlw	low __pbssBANK1
  2400  0027  0084               	movwf	4
  2401  0028  3000               	movlw	high __pbssBANK1
  2402  0029  0085               	movwf	5
  2403  002A  304C               	movlw	76
  2404  002B  319B  2345  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK2
  2407  002E  3020               	movlw	low __pbssBANK2
  2408  002F  0084               	movwf	4
  2409  0030  3001               	movlw	high __pbssBANK2
  2410  0031  0085               	movwf	5
  2411  0032  3050               	movlw	80
  2412  0033  319B  2345  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK3
  2415  0036  30A0               	movlw	low __pbssBANK3
  2416  0037  0084               	movwf	4
  2417  0038  3001               	movlw	high __pbssBANK3
  2418  0039  0085               	movwf	5
  2419  003A  3047               	movlw	71
  2420  003B  319B  2345  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Clear objects allocated to BANK4
  2423  003E  3020               	movlw	low __pbssBANK4
  2424  003F  0084               	movwf	4
  2425  0040  3002               	movlw	high __pbssBANK4
  2426  0041  0085               	movwf	5
  2427  0042  3025               	movlw	37
  2428  0043  319B  2345  3180   	fcall	clear_ram0
  2429                           
  2430                           ; Initialize objects allocated to BANK4
  2431  0046  30BF               	movlw	low __pidataBANK4
  2432  0047  0084               	movwf	4
  2433  0048  309F               	movlw	(high __pidataBANK4)| (0+128)
  2434  0049  0085               	movwf	5
  2435  004A  3045               	movlw	low __pdataBANK4
  2436  004B  0086               	movwf	6
  2437  004C  3002               	movlw	high __pdataBANK4
  2438  004D  0087               	movwf	7
  2439  004E  3020               	movlw	32
  2440  004F  319B  233F         	fcall	init_ram
  2441  0051                     end_of_initialization:	
  2442                           ;End of C runtime variable initialization code
  2443                           
  2444  0051                     __end_of__initialization:	
  2445  0051  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2446  0052  0020               	movlb	0
  2447  0053  3196  2EE7         	ljmp	_main	;jump to C main() function
  2448                           
  2449                           	psect	bitbssCOMMON
  2450  03D0                     __pbitbssCOMMON:	
  2451  03D0                     _Receive_OK:	
  2452  03D0                     	ds	1
  2453  03D1                     _Transceive_OK:	
  2454  03D1                     	ds	1
  2455                           
  2456                           	psect	bssCOMMON
  2457  007B                     __pbssCOMMON:	
  2458  007B                     _DimmerIntr:	
  2459  007B                     	ds	1
  2460                           
  2461                           	psect	bssBANK0
  2462  006D                     __pbssBANK0:	
  2463  006D                     _DimmerLights:	
  2464  006D                     	ds	1
  2465  006E                     _Sw:	
  2466  006E                     	ds	1
  2467                           
  2468                           	psect	bssBANK1
  2469  00A0                     __pbssBANK1:	
  2470  00A0                     _RF1:	
  2471  00A0                     	ds	14
  2472  00AE                     _Buz1:	
  2473  00AE                     	ds	12
  2474  00BA                     _Timer1:	
  2475  00BA                     	ds	3
  2476  00BD                     _RF_Count:	
  2477  00BD                     	ds	2
  2478  00BF                     _WDT:	
  2479  00BF                     	ds	2
  2480  00C1                     _CRC:	
  2481  00C1                     	ds	1
  2482  00C2                     _DelayOff:	
  2483  00C2                     	ds	1
  2484  00C3                     _LED:	
  2485  00C3                     	ds	1
  2486  00C4                     _RSSI:	
  2487  00C4                     	ds	1
  2488  00C5                     _Rx_Length:	
  2489  00C5                     	ds	1
  2490  00C6                     _SPI0Buffer:	
  2491  00C6                     	ds	1
  2492  00C7                     _SwDetect:	
  2493  00C7                     	ds	1
  2494  00C8                     _Tx_Length:	
  2495  00C8                     	ds	1
  2496  00C9                     _r_address:	
  2497  00C9                     	ds	1
  2498  00CA                     _r_data:	
  2499  00CA                     	ds	1
  2500  00CB                     _s_data:	
  2501  00CB                     	ds	1
  2502  00CC                     _Temp:	
  2503  00CC                     	ds	18
  2504  00DE                     _DimmerIntr1:	
  2505  00DE                     	ds	7
  2506  00E5                     _DimmerIntr2:	
  2507  00E5                     	ds	7
  2508                           
  2509                           	psect	bssBANK2
  2510  0120                     __pbssBANK2:	
  2511  0120                     _myMain:	
  2512  0120                     	ds	14
  2513  012E                     _Dimmer:	
  2514  012E                     	ds	3
  2515  0131                     _Load:	
  2516  0131                     	ds	46
  2517  015F                     _DlySw1:	
  2518  015F                     	ds	5
  2519  0164                     _VarErrLED:	
  2520  0164                     	ds	4
  2521  0168                     _VarLED1:	
  2522  0168                     	ds	4
  2523  016C                     _VarLED2:	
  2524  016C                     	ds	4
  2525                           
  2526                           	psect	bssBANK3
  2527  01A0                     __pbssBANK3:	
  2528  01A0                     _RF_Data:	
  2529  01A0                     	ds	30
  2530  01BE                     _DimmerLights1:	
  2531  01BE                     	ds	9
  2532  01C7                     _DimmerLights2:	
  2533  01C7                     	ds	9
  2534  01D0                     _Sw1:	
  2535  01D0                     	ds	9
  2536  01D9                     _Sw2:	
  2537  01D9                     	ds	9
  2538  01E2                     _DlySw2:	
  2539  01E2                     	ds	5
  2540                           
  2541                           	psect	bssBANK4
  2542  0220                     __pbssBANK4:	
  2543  0220                     _Memory:	
  2544  0220                     	ds	37
  2545                           
  2546                           	psect	dataBANK4
  2547  0245                     __pdataBANK4:	
  2548  0245                     __product:	
  2549  0245                     	ds	32
  2550                           
  2551                           	psect	clrtext
  2552  1B45                     clear_ram0:	
  2553                           ;	Called with FSR0 containing the base address, and
  2554                           ;	WREG with the size to clear
  2555                           
  2556  1B45  0064               	clrwdt	;clear the watchdog before getting into this loop
  2557  1B46                     clrloop0:	
  2558  1B46  0180               	clrf	0	;clear RAM location pointed to by FSR
  2559  1B47  3101               	addfsr 0,1
  2560  1B48  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2561  1B49  2B46               	goto	clrloop0	;have we reached the end yet?
  2562  1B4A  3400               	retlw	0	;all done for this memory range, return
  2563                           
  2564                           	psect	inittext
  2565  1B3F                     init_ram:	
  2566  1B3F  00FE               	movwf	126
  2567  1B40                     initloop:	
  2568  1B40  0012               	moviw fsr0++
  2569  1B41  001E               	movwi fsr1++
  2570  1B42  0BFE               	decfsz	126,f
  2571  1B43  2B40               	goto	initloop
  2572  1B44  3400               	retlw	0
  2573                           
  2574                           	psect	cstackBANK4
  2575  0265                     __pcstackBANK4:	
  2576  0265                     ?_main:	
  2577  0265                     main@argc:	
  2578                           ; 2 bytes @ 0x0
  2579                           
  2580                           
  2581                           ; 2 bytes @ 0x0
  2582  0265                     	ds	2
  2583  0267                     main@argv:	
  2584                           
  2585                           ; 2 bytes @ 0x2
  2586  0267                     	ds	2
  2587                           
  2588                           	psect	cstackBANK3
  2589  01E7                     __pcstackBANK3:	
  2590  01E7                     Exception_Main@count:	
  2591                           
  2592                           ; 1 bytes @ 0x0
  2593  01E7                     	ds	1
  2594  01E8                     Exception_Main@error:	
  2595                           
  2596                           ; 1 bytes @ 0x1
  2597  01E8                     	ds	1
  2598  01E9                     Exception_Main@i:	
  2599                           
  2600                           ; 2 bytes @ 0x2
  2601  01E9                     	ds	2
  2602  01EB                     Exception_Main@i_3390:	
  2603                           
  2604                           ; 2 bytes @ 0x4
  2605  01EB                     	ds	2
  2606  01ED                     Exception_Main@lights:	
  2607                           
  2608                           ; 1 bytes @ 0x6
  2609  01ED                     	ds	1
  2610                           
  2611                           	psect	cstackBANK1
  2612  00EC                     __pcstackBANK1:	
  2613  00EC                     ??_setRF_Main:	
  2614                           
  2615                           ; 0 bytes @ 0x0
  2616  00EC                     	ds	1
  2617  00ED                     setRF_Main@error:	
  2618                           
  2619                           ; 1 bytes @ 0x1
  2620  00ED                     	ds	1
  2621                           
  2622                           	psect	cstackCOMMON
  2623  0070                     __pcstackCOMMON:	
  2624  0070                     ?_CC2500_WriteCommand:	
  2625  0070                     ?_RF_Timeout_Counter:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setRF_TimeoutCleared:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_WriteByte:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_ReadStatus:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_ReadByte:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_PowerRST:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_InitSetREG:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_InitPATable:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ClearTXFIFO:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_ClearRXFIFO:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_FrequencyCabr:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_SIDLEMode:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_DlyOff_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_DlyOff_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setDimmerLights_SwOn:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setDimmerLights_SwOff:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setDimmerLights_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setDimmerLights_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setDimmerLights_Line:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setTxData:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setRF_TransceiveGO:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setLED_Initialization:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setLED_Main:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_Fosc_Set:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_IO_Set:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_TMR1_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_ADC_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_IOC_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_WDT_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_ISR:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ??_IOC_ISR:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_TMR1_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_Timeout_Counter:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_set_TimeoutCleared:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Write:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Flash_Memory_Modify:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_WDT_Clearing:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_myMain_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Temp_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Load_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Switch_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_RF_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_getLoad_AD:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_getTemp_AD:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_my_MainTimer:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Temp_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Load_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Switch_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_RF_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_Exception_Main:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setLoad_AH_AL_Restore:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setTemp_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setTemp_Main:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setRF_Main:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_RF_RxDisable:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_getRxData:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setLog_Code:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setControl_Lights_Table:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRFSW_Control:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setRFSW_AdjControl:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setSw_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Buzzer_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_TxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_RxData:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_CC2500_PowerOnInitial:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOffPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DelayOff_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerIntr_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_DimmerLights_SelectPointer:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DimmerLights_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_setDimmerLights_DimmingOn:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_DimmerLights_Main:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Mcu_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_ISR:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_Flash_Memory_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Main:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Unlock:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Erasing:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_setMemory_Modify:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_LoopSave:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_WDT_Main:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_setRF_Learn:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_TouchPower:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_SwPointSelect:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerLights_Status:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_getLoad_OK:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getMain_All_Error_Status:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getMain_LightsStatus:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Allow_Condition:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmerLights_PercentToValue:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmerLights_ValueToPercent:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_Flash_Memory_Read:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getRF_KeyStatus:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getSw_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getDelayOff_GO:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDimmerIntr_DimmingValue:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerLights_Line:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmer_LoadGO:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getDimmer_Load_Status:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getMain_Lights_Count:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     setDimmerLights_Initialization@lights:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x0
  2978  0070                     	ds	1
  2979  0071                     ??_TMR1_ISR:	
  2980  0071                     ??_ISR:	
  2981                           ; 0 bytes @ 0x1
  2982                           
  2983                           
  2984                           ; 0 bytes @ 0x1
  2985  0071                     	ds	1
  2986  0072                     ??_RF_Timeout_Counter:	
  2987  0072                     ??_setRF_TimeoutCleared:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     ??_CC2500_WriteByte:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0072                     ??_CC2500_ReadByte:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0072                     ?_DelayTime_1us:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0072                     ??_setDimmerLights_Initialization:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0072                     ??_getLoad_OK:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0072                     ??_getMain_All_Error_Status:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0072                     ??_getMain_LightsStatus:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0072                     ??_setDimmerLights_Line:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0072                     ??_setTxData:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0072                     ??_setRF_TransceiveGO:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0072                     ??_Fosc_Set:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0072                     ??_IO_Set:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0072                     ??_TMR1_Set:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0072                     ??_ADC_Set:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0072                     ??_IOC_Set:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0072                     ??_WDT_Set:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0072                     ??_Timeout_Counter:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0072                     ??_set_TimeoutCleared:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0072                     ??_Flash_Memory_Read:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0072                     ?_setMemory_Data:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0072                     ??_Flash_Memory_Write:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0072                     ??_WDT_Clearing:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0072                     ??_myMain_Initialization:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0072                     ??_Temp_Initialization:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0072                     ??_setLoad_AH_AL_Restore:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0072                     ??_setTemp_Initialization:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0072                     ??_setRF_Initialization:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0072                     ??_getRF_KeyStatus:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0072                     ??_getSw_KeyStatus:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0072                     ??_Buzzer_Initialization:	
  3078                           ; 0 bytes @ 0x2
  3079                           
  3080  0072                     ??_Buzzer_Main:	
  3081                           ; 0 bytes @ 0x2
  3082                           
  3083  0072                     ??_DelayOffPointSelect:	
  3084                           ; 0 bytes @ 0x2
  3085                           
  3086  0072                     ??_DimmerIntr_Initialization:	
  3087                           ; 0 bytes @ 0x2
  3088                           
  3089  0072                     ?_setDimmerIntr_ControlStatus:	
  3090                           ; 0 bytes @ 0x2
  3091                           
  3092  0072                     ?_setDimmerIntr_DimmingValue:	
  3093                           ; 0 bytes @ 0x2
  3094                           
  3095  0072                     ??_getDimmerIntr_DimmingValue:	
  3096                           ; 0 bytes @ 0x2
  3097                           
  3098  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3099                           ; 0 bytes @ 0x2
  3100                           
  3101  0072                     ?_setDimmerIntr_Dimming_RF:	
  3102                           ; 0 bytes @ 0x2
  3103                           
  3104  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3105                           ; 0 bytes @ 0x2
  3106                           
  3107  0072                     ??_DimmerLights_SelectPointer:	
  3108                           ; 0 bytes @ 0x2
  3109                           
  3110  0072                     ??_getDimmerLights_Line:	
  3111                           ; 0 bytes @ 0x2
  3112                           
  3113  0072                     ??_getDimmer_LoadGO:	
  3114                           ; 0 bytes @ 0x2
  3115                           
  3116  0072                     ??_getDimmer_Load_Status:	
  3117                           ; 0 bytes @ 0x2
  3118                           
  3119  0072                     ??_LedPointSelect:	
  3120                           ; 0 bytes @ 0x2
  3121                           
  3122  0072                     ??_Flash_Memory_Unlock:	
  3123                           ; 0 bytes @ 0x2
  3124                           
  3125  0072                     ??_Flash_Memory_Erasing:	
  3126                           ; 0 bytes @ 0x2
  3127                           
  3128  0072                     ??_setMemory_Modify:	
  3129                           ; 0 bytes @ 0x2
  3130                           
  3131  0072                     ??_setMemory_LoopSave:	
  3132                           ; 0 bytes @ 0x2
  3133                           
  3134  0072                     ??_WDT_Main:	
  3135                           ; 0 bytes @ 0x2
  3136                           
  3137  0072                     ??_getMain_Lights_Count:	
  3138                           ; 0 bytes @ 0x2
  3139                           
  3140  0072                     ??_setRF_Learn:	
  3141                           ; 0 bytes @ 0x2
  3142                           
  3143  0072                     ??_TouchPower:	
  3144                           ; 0 bytes @ 0x2
  3145                           
  3146  0072                     ??_SwPointSelect:	
  3147                           ; 0 bytes @ 0x2
  3148                           
  3149  0072                     ?___bmul:	
  3150                           ; 0 bytes @ 0x2
  3151                           
  3152  0072                     ?_getBuz_GO:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155  0072                     ?_getAD:	
  3156                           ; 2 bytes @ 0x2
  3157                           
  3158  0072                     ?___wmul:	
  3159                           ; 2 bytes @ 0x2
  3160                           
  3161  0072                     ?___awdiv:	
  3162                           ; 2 bytes @ 0x2
  3163                           
  3164  0072                     ?___lwdiv:	
  3165                           ; 2 bytes @ 0x2
  3166                           
  3167  0072                     ?___ftpack:	
  3168                           ; 2 bytes @ 0x2
  3169                           
  3170  0072                     setDimmerIntr_ControlStatus@command:	
  3171                           ; 3 bytes @ 0x2
  3172                           
  3173  0072                     setDimmerIntr_DimmingValue@value:	
  3174                           ; 1 bytes @ 0x2
  3175                           
  3176  0072                     setDimmerIntr_Dimming_Sw@command:	
  3177                           ; 1 bytes @ 0x2
  3178                           
  3179  0072                     setDimmerIntr_Dimming_RF@command:	
  3180                           ; 1 bytes @ 0x2
  3181                           
  3182  0072                     setDimmerLights_Line@lights:	
  3183                           ; 1 bytes @ 0x2
  3184                           
  3185  0072                     getDimmer_LoadGO@loadgo:	
  3186                           ; 1 bytes @ 0x2
  3187                           
  3188  0072                     getDimmer_Load_Status@status:	
  3189                           ; 1 bytes @ 0x2
  3190                           
  3191  0072                     getAD@adcon1:	
  3192                           ; 1 bytes @ 0x2
  3193                           
  3194  0072                     setMemory_Data@data:	
  3195                           ; 1 bytes @ 0x2
  3196                           
  3197  0072                     getMain_LightsStatus@status:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0072                     getMain_Lights_Count@count:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0072                     getLoad_OK@ok:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0072                     ___bmul@multiplicand:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0072                     DelayTime_1us@count:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0072                     ___wmul@multiplier:	
  3213                           ; 2 bytes @ 0x2
  3214                           
  3215  0072                     ___awdiv@divisor:	
  3216                           ; 2 bytes @ 0x2
  3217                           
  3218  0072                     ___lwdiv@divisor:	
  3219                           ; 2 bytes @ 0x2
  3220                           
  3221  0072                     ___ftpack@arg:	
  3222                           ; 2 bytes @ 0x2
  3223                           
  3224                           
  3225                           ; 3 bytes @ 0x2
  3226  0072                     	ds	1
  3227  0073                     ??_getDimmerLights_Allow_Condition:	
  3228  0073                     ??_setMemory_Data:	
  3229                           ; 0 bytes @ 0x3
  3230                           
  3231  0073                     ??_RF_Initialization:	
  3232                           ; 0 bytes @ 0x3
  3233                           
  3234  0073                     ??_setDimmerIntr_ControlStatus:	
  3235                           ; 0 bytes @ 0x3
  3236                           
  3237  0073                     ??_setDimmerIntr_DimmingValue:	
  3238                           ; 0 bytes @ 0x3
  3239                           
  3240  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3241                           ; 0 bytes @ 0x3
  3242                           
  3243  0073                     ??_setDimmerIntr_Dimming_RF:	
  3244                           ; 0 bytes @ 0x3
  3245                           
  3246  0073                     ??_DimmerLights_Initialization:	
  3247                           ; 0 bytes @ 0x3
  3248                           
  3249  0073                     ??_Mcu_Initialization:	
  3250                           ; 0 bytes @ 0x3
  3251                           
  3252  0073                     ??___bmul:	
  3253                           ; 0 bytes @ 0x3
  3254                           
  3255  0073                     CC2500_WriteByte@loop_a:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0073                     CC2500_ReadByte@loop_b:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0073                     DelayOffPointSelect@sw:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0073                     getDimmerIntr_DimmingValue@value:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2060:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0073                     DimmerLights_SelectPointer@lights:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0073                     getDimmerLights_Line@line:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0073                     LedPointSelect@led:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0073                     Flash_Memory_Read@i:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0073                     Flash_Memory_Write@i:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0073                     setMemory_Modify@command:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0073                     setMemory_LoopSave@command:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291  0073                     getMain_Lights_Count@status1:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294  0073                     setLoad_AH_AL_Restore@i:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297  0073                     setRF_Learn@command:	
  3298                           ; 1 bytes @ 0x3
  3299                           
  3300  0073                     getRF_KeyStatus@key:	
  3301                           ; 1 bytes @ 0x3
  3302                           
  3303  0073                     setRF_TransceiveGO@command:	
  3304                           ; 1 bytes @ 0x3
  3305                           
  3306  0073                     SwPointSelect@sw:	
  3307                           ; 1 bytes @ 0x3
  3308                           
  3309  0073                     _getSw_KeyStatus$5955:	
  3310                           ; 1 bytes @ 0x3
  3311                           
  3312  0073                     _getMain_All_Error_Status$3378:	
  3313                           ; 1 bytes @ 0x3
  3314                           
  3315                           
  3316                           ; 2 bytes @ 0x3
  3317  0073                     	ds	1
  3318  0074                     ??_CC2500_WriteCommand:	
  3319  0074                     ??_CC2500_ReadStatus:	
  3320                           ; 0 bytes @ 0x4
  3321                           
  3322  0074                     ??_DelayTime_1us:	
  3323                           ; 0 bytes @ 0x4
  3324                           
  3325  0074                     ?_CC2500_WriteREG:	
  3326                           ; 0 bytes @ 0x4
  3327                           
  3328  0074                     ??_DlyOff_Initialization:	
  3329                           ; 0 bytes @ 0x4
  3330                           
  3331  0074                     ??_getDimmerLights_Status:	
  3332                           ; 0 bytes @ 0x4
  3333                           
  3334  0074                     ?_setLED:	
  3335                           ; 0 bytes @ 0x4
  3336                           
  3337  0074                     ??_setLED_Main:	
  3338                           ; 0 bytes @ 0x4
  3339                           
  3340  0074                     ??_Load_Initialization:	
  3341                           ; 0 bytes @ 0x4
  3342                           
  3343  0074                     ??_getBuz_GO:	
  3344                           ; 0 bytes @ 0x4
  3345                           
  3346  0074                     ??_getDelayOff_GO:	
  3347                           ; 0 bytes @ 0x4
  3348                           
  3349  0074                     ??_setDimmerLights_DimmingOn:	
  3350                           ; 0 bytes @ 0x4
  3351                           
  3352  0074                     ?_setDimmerLights_DimmingRun:	
  3353                           ; 0 bytes @ 0x4
  3354                           
  3355  0074                     CC2500_WriteREG@value:	
  3356                           ; 0 bytes @ 0x4
  3357                           
  3358  0074                     DlyOff_Initialization@sw:	
  3359                           ; 1 bytes @ 0x4
  3360                           
  3361  0074                     getDelayOff_GO@sw:	
  3362                           ; 1 bytes @ 0x4
  3363                           
  3364  0074                     setDimmerIntr_ControlStatus@lights:	
  3365                           ; 1 bytes @ 0x4
  3366                           
  3367  0074                     setDimmerIntr_DimmingValue@lights:	
  3368                           ; 1 bytes @ 0x4
  3369                           
  3370  0074                     getDimmerIntr_DimmingValue@lights:	
  3371                           ; 1 bytes @ 0x4
  3372                           
  3373  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3374                           ; 1 bytes @ 0x4
  3375                           
  3376  0074                     setDimmerIntr_Dimming_RF@lights:	
  3377                           ; 1 bytes @ 0x4
  3378                           
  3379  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2061:	
  3380                           ; 1 bytes @ 0x4
  3381                           
  3382  0074                     setDimmerLights_DimmingOn@sw:	
  3383                           ; 1 bytes @ 0x4
  3384                           
  3385  0074                     _getDimmerLights_Allow_Condition$2145:	
  3386                           ; 1 bytes @ 0x4
  3387                           
  3388  0074                     getDimmerLights_Status@lights:	
  3389                           ; 1 bytes @ 0x4
  3390                           
  3391  0074                     setDimmerLights_DimmingRun@command:	
  3392                           ; 1 bytes @ 0x4
  3393                           
  3394  0074                     setLED@command:	
  3395                           ; 1 bytes @ 0x4
  3396                           
  3397  0074                     Flash_Memory_Read@address:	
  3398                           ; 1 bytes @ 0x4
  3399                           
  3400  0074                     setMemory_Data@address:	
  3401                           ; 1 bytes @ 0x4
  3402                           
  3403  0074                     getMain_Lights_Count@status2:	
  3404                           ; 1 bytes @ 0x4
  3405                           
  3406  0074                     _getRF_KeyStatus$4996:	
  3407                           ; 1 bytes @ 0x4
  3408                           
  3409  0074                     _getSw_KeyStatus$5956:	
  3410                           ; 1 bytes @ 0x4
  3411                           
  3412  0074                     ___bmul@product:	
  3413                           ; 1 bytes @ 0x4
  3414                           
  3415  0074                     DelayTime_1us@i:	
  3416                           ; 1 bytes @ 0x4
  3417                           
  3418  0074                     ___wmul@multiplicand:	
  3419                           ; 2 bytes @ 0x4
  3420                           
  3421  0074                     ___awdiv@dividend:	
  3422                           ; 2 bytes @ 0x4
  3423                           
  3424  0074                     ___lwdiv@dividend:	
  3425                           ; 2 bytes @ 0x4
  3426                           
  3427                           
  3428                           ; 2 bytes @ 0x4
  3429  0074                     	ds	1
  3430  0075                     ??_CC2500_WriteREG:	
  3431  0075                     ??_setLED:	
  3432                           ; 0 bytes @ 0x5
  3433                           
  3434  0075                     ??_DelayOff_Initialization:	
  3435                           ; 0 bytes @ 0x5
  3436                           
  3437  0075                     ??_setDimmerLights_DimmingRun:	
  3438                           ; 0 bytes @ 0x5
  3439                           
  3440  0075                     ??_getAD:	
  3441                           ; 0 bytes @ 0x5
  3442                           
  3443  0075                     CC2500_WriteCommand@command:	
  3444                           ; 0 bytes @ 0x5
  3445                           
  3446  0075                     CC2500_ReadStatus@status_addr:	
  3447                           ; 1 bytes @ 0x5
  3448                           
  3449  0075                     getDelayOff_GO@go:	
  3450                           ; 1 bytes @ 0x5
  3451                           
  3452  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3453                           ; 1 bytes @ 0x5
  3454                           
  3455  0075                     _getDimmerLights_Allow_Condition$2146:	
  3456                           ; 1 bytes @ 0x5
  3457                           
  3458  0075                     getDimmerLights_Status@status:	
  3459                           ; 1 bytes @ 0x5
  3460                           
  3461  0075                     setLED@led:	
  3462                           ; 1 bytes @ 0x5
  3463                           
  3464  0075                     getAD@adcon0:	
  3465                           ; 1 bytes @ 0x5
  3466                           
  3467  0075                     Flash_Memory_Read@ret:	
  3468                           ; 1 bytes @ 0x5
  3469                           
  3470  0075                     getSw_KeyStatus@status:	
  3471                           ; 1 bytes @ 0x5
  3472                           
  3473  0075                     ___bmul@multiplier:	
  3474                           ; 1 bytes @ 0x5
  3475                           
  3476  0075                     ___ftpack@exp:	
  3477                           ; 1 bytes @ 0x5
  3478                           
  3479  0075                     _getMain_All_Error_Status$3379:	
  3480                           ; 1 bytes @ 0x5
  3481                           
  3482                           
  3483                           ; 2 bytes @ 0x5
  3484  0075                     	ds	1
  3485  0076                     ??_CC2500_ClearTXFIFO:	
  3486  0076                     ??_CC2500_ClearRXFIFO:	
  3487                           ; 0 bytes @ 0x6
  3488                           
  3489  0076                     ??_CC2500_SIDLEMode:	
  3490                           ; 0 bytes @ 0x6
  3491                           
  3492  0076                     ??_setLED_Initialization:	
  3493                           ; 0 bytes @ 0x6
  3494                           
  3495  0076                     ??_Flash_Memory_Modify:	
  3496                           ; 0 bytes @ 0x6
  3497                           
  3498  0076                     ??_getLoad_AD:	
  3499                           ; 0 bytes @ 0x6
  3500                           
  3501  0076                     ??_getTemp_AD:	
  3502                           ; 0 bytes @ 0x6
  3503                           
  3504  0076                     ??_RF_RxDisable:	
  3505                           ; 0 bytes @ 0x6
  3506                           
  3507  0076                     ??_setSw_Initialization:	
  3508                           ; 0 bytes @ 0x6
  3509                           
  3510  0076                     ??_CC2500_TxData:	
  3511                           ; 0 bytes @ 0x6
  3512                           
  3513  0076                     ??_CC2500_RxData:	
  3514                           ; 0 bytes @ 0x6
  3515                           
  3516  0076                     ??___wmul:	
  3517                           ; 0 bytes @ 0x6
  3518                           
  3519  0076                     ??___awdiv:	
  3520                           ; 0 bytes @ 0x6
  3521                           
  3522  0076                     ??___lwdiv:	
  3523                           ; 0 bytes @ 0x6
  3524                           
  3525  0076                     CC2500_WriteREG@w_addr:	
  3526                           ; 0 bytes @ 0x6
  3527                           
  3528  0076                     _getDimmerLights_Allow_Condition$2147:	
  3529                           ; 1 bytes @ 0x6
  3530                           
  3531  0076                     setDimmerLights_DimmingRun@lights:	
  3532                           ; 1 bytes @ 0x6
  3533                           
  3534  0076                     setLED_Initialization@led:	
  3535                           ; 1 bytes @ 0x6
  3536                           
  3537  0076                     setLED_Main@led:	
  3538                           ; 1 bytes @ 0x6
  3539                           
  3540  0076                     setSw_Initialization@sw:	
  3541                           ; 1 bytes @ 0x6
  3542                           
  3543  0076                     getSw_KeyStatus@sw:	
  3544                           ; 1 bytes @ 0x6
  3545                           
  3546  0076                     ___ftpack@sign:	
  3547                           ; 1 bytes @ 0x6
  3548                           
  3549  0076                     getBuz_GO@i:	
  3550                           ; 1 bytes @ 0x6
  3551                           
  3552  0076                     DelayTime_1us@j:	
  3553                           ; 2 bytes @ 0x6
  3554                           
  3555  0076                     ___wmul@product:	
  3556                           ; 2 bytes @ 0x6
  3557                           
  3558                           
  3559                           ; 2 bytes @ 0x6
  3560  0076                     	ds	1
  3561  0077                     ??_CC2500_InitSetREG:	
  3562  0077                     ??_CC2500_InitPATable:	
  3563                           ; 0 bytes @ 0x7
  3564                           
  3565  0077                     ??_Switch_Initialization:	
  3566                           ; 0 bytes @ 0x7
  3567                           
  3568  0077                     ??___ftpack:	
  3569                           ; 0 bytes @ 0x7
  3570                           
  3571  0077                     ??_setBuz:	
  3572                           ; 0 bytes @ 0x7
  3573                           
  3574  0077                     ??_LED_Initialization:	
  3575                           ; 0 bytes @ 0x7
  3576                           
  3577  0077                     ??_LED_Main:	
  3578                           ; 0 bytes @ 0x7
  3579                           
  3580  0077                     CC2500_TxData@loop_e:	
  3581                           ; 0 bytes @ 0x7
  3582                           
  3583  0077                     CC2500_RxData@loop_f:	
  3584                           ; 1 bytes @ 0x7
  3585                           
  3586  0077                     getDimmerLights_Allow_Condition@lights:	
  3587                           ; 1 bytes @ 0x7
  3588                           
  3589  0077                     Flash_Memory_Modify@i:	
  3590                           ; 1 bytes @ 0x7
  3591                           
  3592  0077                     getMain_All_Error_Status@command:	
  3593                           ; 1 bytes @ 0x7
  3594                           
  3595  0077                     getTemp_AD@channel:	
  3596                           ; 1 bytes @ 0x7
  3597                           
  3598  0077                     ___lwdiv@counter:	
  3599                           ; 1 bytes @ 0x7
  3600                           
  3601                           
  3602                           ; 1 bytes @ 0x7
  3603  0077                     	ds	1
  3604  0078                     ??_CC2500_PowerRST:	
  3605  0078                     ??_CC2500_FrequencyCabr:	
  3606                           ; 0 bytes @ 0x8
  3607                           
  3608  0078                     ??_Flash_Memory_Main:	
  3609                           ; 0 bytes @ 0x8
  3610                           
  3611  0078                     setBuz@count:	
  3612                           ; 0 bytes @ 0x8
  3613                           
  3614  0078                     CC2500_InitPATable@temp:	
  3615                           ; 1 bytes @ 0x8
  3616                           
  3617  0078                     getDimmerLights_Allow_Condition@allow:	
  3618                           ; 1 bytes @ 0x8
  3619                           
  3620  0078                     getMain_All_Error_Status@status:	
  3621                           ; 1 bytes @ 0x8
  3622                           
  3623  0078                     ___lwdiv@quotient:	
  3624                           ; 1 bytes @ 0x8
  3625                           
  3626                           
  3627                           ; 2 bytes @ 0x8
  3628  0078                     	ds	1
  3629  0079                     ??_setDimmerLights_SwOn:	
  3630  0079                     ??_my_MainTimer:	
  3631                           ; 0 bytes @ 0x9
  3632                           
  3633  0079                     CC2500_InitPATable@loop_d:	
  3634                           ; 0 bytes @ 0x9
  3635                           
  3636                           
  3637                           ; 1 bytes @ 0x9
  3638  0079                     	ds	1
  3639  007A                     ??_setDimmerLights_SwOff:	
  3640  007A                     ??_setDimmerLights_Main:	
  3641                           ; 0 bytes @ 0xA
  3642                           
  3643  007A                     ??_Temp_Main:	
  3644                           ; 0 bytes @ 0xA
  3645                           
  3646  007A                     ??_Switch_Main:	
  3647                           ; 0 bytes @ 0xA
  3648                           
  3649  007A                     ??_RF_Main:	
  3650                           ; 0 bytes @ 0xA
  3651                           
  3652  007A                     ??_setControl_Lights_Table:	
  3653                           ; 0 bytes @ 0xA
  3654                           
  3655  007A                     ??_CC2500_PowerOnInitial:	
  3656                           ; 0 bytes @ 0xA
  3657                           
  3658  007A                     ??_DelayOff_Main:	
  3659                           ; 0 bytes @ 0xA
  3660                           
  3661  007A                     ??_DimmerLights_Main:	
  3662                           ; 0 bytes @ 0xA
  3663                           
  3664  007A                     ??_main:	
  3665                           ; 0 bytes @ 0xA
  3666                           
  3667  007A                     ??___ftneg:	
  3668                           ; 0 bytes @ 0xA
  3669                           
  3670                           
  3671                           	psect	cstackBANK0
  3672  0020                     __pcstackBANK0:	
  3673                           ; 0 bytes @ 0xA
  3674                           
  3675  0020                     ??_Load_Main:	
  3676  0020                     ?___awtoft:	
  3677                           ; 0 bytes @ 0x0
  3678                           
  3679  0020                     CC2500_InitSetREG@temp1:	
  3680                           ; 3 bytes @ 0x0
  3681                           
  3682  0020                     getLoad_AD@channel:	
  3683                           ; 1 bytes @ 0x0
  3684                           
  3685  0020                     ___awdiv@counter:	
  3686                           ; 1 bytes @ 0x0
  3687                           
  3688  0020                     ___awtoft@c:	
  3689                           ; 1 bytes @ 0x0
  3690                           
  3691                           
  3692                           ; 2 bytes @ 0x0
  3693  0020                     	ds	1
  3694  0021                     CC2500_InitSetREG@temp2:	
  3695  0021                     getLoad_AD@k:	
  3696                           ; 1 bytes @ 0x1
  3697                           
  3698  0021                     ___awdiv@sign:	
  3699                           ; 1 bytes @ 0x1
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x1
  3703  0021                     	ds	1
  3704  0022                     CC2500_InitSetREG@loop_c:	
  3705  0022                     getLoad_AD@j:	
  3706                           ; 1 bytes @ 0x2
  3707                           
  3708  0022                     Load_Main@error:	
  3709                           ; 1 bytes @ 0x2
  3710                           
  3711  0022                     ___awdiv@quotient:	
  3712                           ; 1 bytes @ 0x2
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0x2
  3716  0022                     	ds	1
  3717  0023                     ??___awtoft:	
  3718  0023                     getLoad_AD@i:	
  3719                           ; 0 bytes @ 0x3
  3720                           
  3721  0023                     Load_Main@Load_Status:	
  3722                           ; 1 bytes @ 0x3
  3723                           
  3724                           
  3725                           ; 1 bytes @ 0x3
  3726  0023                     	ds	1
  3727  0024                     ?_setBuz:	
  3728  0024                     setBuz@time:	
  3729                           ; 0 bytes @ 0x4
  3730                           
  3731  0024                     Load_Main@i:	
  3732                           ; 2 bytes @ 0x4
  3733                           
  3734                           
  3735                           ; 2 bytes @ 0x4
  3736  0024                     	ds	1
  3737  0025                     ___awtoft@sign:	
  3738                           
  3739                           ; 1 bytes @ 0x5
  3740  0025                     	ds	1
  3741  0026                     ?___ftdiv:	
  3742  0026                     ?___ftmul:	
  3743                           ; 3 bytes @ 0x6
  3744                           
  3745  0026                     _setDimmerLights_SwOn$2117:	
  3746                           ; 3 bytes @ 0x6
  3747                           
  3748  0026                     ___ftdiv@f2:	
  3749                           ; 1 bytes @ 0x6
  3750                           
  3751  0026                     ___ftmul@f1:	
  3752                           ; 3 bytes @ 0x6
  3753                           
  3754                           
  3755                           ; 3 bytes @ 0x6
  3756  0026                     	ds	1
  3757  0027                     _setDimmerLights_SwOn$2118:	
  3758                           
  3759                           ; 1 bytes @ 0x7
  3760  0027                     	ds	1
  3761  0028                     setDimmerLights_SwOn@idle:	
  3762                           
  3763                           ; 1 bytes @ 0x8
  3764  0028                     	ds	1
  3765  0029                     setDimmerLights_SwOn@sw:	
  3766  0029                     ___ftdiv@f1:	
  3767                           ; 1 bytes @ 0x9
  3768                           
  3769  0029                     ___ftmul@f2:	
  3770                           ; 3 bytes @ 0x9
  3771                           
  3772                           
  3773                           ; 3 bytes @ 0x9
  3774  0029                     	ds	3
  3775  002C                     ??___ftdiv:	
  3776  002C                     ??___ftmul:	
  3777                           ; 0 bytes @ 0xC
  3778                           
  3779                           
  3780                           ; 0 bytes @ 0xC
  3781  002C                     	ds	4
  3782  0030                     ___ftdiv@cntr:	
  3783  0030                     ___ftmul@exp:	
  3784                           ; 1 bytes @ 0x10
  3785                           
  3786                           
  3787                           ; 1 bytes @ 0x10
  3788  0030                     	ds	1
  3789  0031                     ___ftdiv@f3:	
  3790  0031                     ___ftmul@f3_as_product:	
  3791                           ; 3 bytes @ 0x11
  3792                           
  3793                           
  3794                           ; 3 bytes @ 0x11
  3795  0031                     	ds	3
  3796  0034                     ___ftdiv@exp:	
  3797  0034                     ___ftmul@cntr:	
  3798                           ; 1 bytes @ 0x14
  3799                           
  3800                           
  3801                           ; 1 bytes @ 0x14
  3802  0034                     	ds	1
  3803  0035                     ___ftdiv@sign:	
  3804  0035                     ___ftmul@sign:	
  3805                           ; 1 bytes @ 0x15
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x15
  3809  0035                     	ds	1
  3810  0036                     ?___ftneg:	
  3811  0036                     ___ftneg@f1:	
  3812                           ; 3 bytes @ 0x16
  3813                           
  3814                           
  3815                           ; 3 bytes @ 0x16
  3816  0036                     	ds	3
  3817  0039                     ?___ftadd:	
  3818  0039                     ___ftadd@f1:	
  3819                           ; 3 bytes @ 0x19
  3820                           
  3821                           
  3822                           ; 3 bytes @ 0x19
  3823  0039                     	ds	3
  3824  003C                     ___ftadd@f2:	
  3825                           
  3826                           ; 3 bytes @ 0x1C
  3827  003C                     	ds	3
  3828  003F                     ??___ftadd:	
  3829                           
  3830                           ; 0 bytes @ 0x1F
  3831  003F                     	ds	4
  3832  0043                     ___ftadd@sign:	
  3833                           
  3834                           ; 1 bytes @ 0x23
  3835  0043                     	ds	1
  3836  0044                     ___ftadd@exp2:	
  3837                           
  3838                           ; 1 bytes @ 0x24
  3839  0044                     	ds	1
  3840  0045                     ___ftadd@exp1:	
  3841                           
  3842                           ; 1 bytes @ 0x25
  3843  0045                     	ds	1
  3844  0046                     ?___fttol:	
  3845  0046                     ___fttol@f1:	
  3846                           ; 4 bytes @ 0x26
  3847                           
  3848                           
  3849                           ; 3 bytes @ 0x26
  3850  0046                     	ds	4
  3851  004A                     ??___fttol:	
  3852                           
  3853                           ; 0 bytes @ 0x2A
  3854  004A                     	ds	4
  3855  004E                     ___fttol@sign1:	
  3856                           
  3857                           ; 1 bytes @ 0x2E
  3858  004E                     	ds	1
  3859  004F                     ___fttol@lval:	
  3860                           
  3861                           ; 4 bytes @ 0x2F
  3862  004F                     	ds	4
  3863  0053                     ___fttol@exp1:	
  3864                           
  3865                           ; 1 bytes @ 0x33
  3866  0053                     	ds	1
  3867  0054                     ??_getDimmerLights_PercentToValue:	
  3868  0054                     ??_getDimmerLights_ValueToPercent:	
  3869                           ; 0 bytes @ 0x34
  3870                           
  3871                           
  3872                           ; 0 bytes @ 0x34
  3873  0054                     	ds	2
  3874  0056                     getDimmerLights_PercentToValue@value:	
  3875  0056                     getDimmerLights_ValueToPercent@value:	
  3876                           ; 1 bytes @ 0x36
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x36
  3880  0056                     	ds	1
  3881  0057                     getDimmerLights_PercentToValue@i:	
  3882  0057                     getDimmerLights_ValueToPercent@i:	
  3883                           ; 3 bytes @ 0x37
  3884                           
  3885                           
  3886                           ; 3 bytes @ 0x37
  3887  0057                     	ds	3
  3888  005A                     ?_setProductData:	
  3889  005A                     ?_setDimmerIntr_MaxmumValue:	
  3890                           ; 0 bytes @ 0x3A
  3891                           
  3892  005A                     ??_Flash_Memory_Initialization:	
  3893                           ; 0 bytes @ 0x3A
  3894                           
  3895  005A                     setDimmerIntr_MaxmumValue@value:	
  3896                           ; 0 bytes @ 0x3A
  3897                           
  3898  005A                     setProductData@value:	
  3899                           ; 1 bytes @ 0x3A
  3900                           
  3901                           
  3902                           ; 1 bytes @ 0x3A
  3903  005A                     	ds	1
  3904  005B                     ??_setProductData:	
  3905  005B                     ??_setDimmerIntr_MaxmumValue:	
  3906                           ; 0 bytes @ 0x3B
  3907                           
  3908  005B                     Flash_Memory_Initialization@i:	
  3909                           ; 0 bytes @ 0x3B
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x3B
  3913  005B                     	ds	1
  3914  005C                     setDimmerIntr_MaxmumValue@lights:	
  3915                           
  3916                           ; 1 bytes @ 0x3C
  3917  005C                     	ds	1
  3918  005D                     setProductData@address:	
  3919                           
  3920                           ; 1 bytes @ 0x3D
  3921  005D                     	ds	1
  3922  005E                     ?_setRF_DimmerLights:	
  3923  005E                     ??_setTemp_Main:	
  3924                           ; 0 bytes @ 0x3E
  3925                           
  3926  005E                     ??_setLog_Code:	
  3927                           ; 0 bytes @ 0x3E
  3928                           
  3929  005E                     ?_setDelayOff_GO:	
  3930                           ; 0 bytes @ 0x3E
  3931                           
  3932  005E                     setDelayOff_GO@command:	
  3933                           ; 0 bytes @ 0x3E
  3934                           
  3935  005E                     setRF_DimmerLights@on:	
  3936                           ; 1 bytes @ 0x3E
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0x3E
  3940  005E                     	ds	1
  3941  005F                     ??_setRF_DimmerLights:	
  3942  005F                     setDelayOff_GO@value:	
  3943                           ; 0 bytes @ 0x3F
  3944                           
  3945                           
  3946                           ; 1 bytes @ 0x3F
  3947  005F                     	ds	1
  3948  0060                     ??_setDelayOff_GO:	
  3949  0060                     setTemp_Main@error:	
  3950                           ; 0 bytes @ 0x40
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x40
  3954  0060                     	ds	1
  3955  0061                     setRF_DimmerLights@status:	
  3956                           
  3957                           ; 1 bytes @ 0x41
  3958  0061                     	ds	1
  3959  0062                     setDelayOff_GO@i:	
  3960  0062                     setRF_DimmerLights@lights:	
  3961                           ; 1 bytes @ 0x42
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x42
  3965  0062                     	ds	1
  3966  0063                     ?_setDimmerLights_OnOff:	
  3967  0063                     ?_setDimmerLights_Dimming:	
  3968                           ; 0 bytes @ 0x43
  3969                           
  3970  0063                     setDelayOff_GO@j:	
  3971                           ; 0 bytes @ 0x43
  3972                           
  3973  0063                     setDimmerLights_OnOff@command:	
  3974                           ; 1 bytes @ 0x43
  3975                           
  3976  0063                     setDimmerLights_Dimming@status:	
  3977                           ; 1 bytes @ 0x43
  3978                           
  3979                           
  3980                           ; 1 bytes @ 0x43
  3981  0063                     	ds	1
  3982  0064                     ??_setDimmerLights_OnOff:	
  3983  0064                     ??_setDimmerLights_Dimming:	
  3984                           ; 0 bytes @ 0x44
  3985                           
  3986  0064                     setDelayOff_GO@k:	
  3987                           ; 0 bytes @ 0x44
  3988                           
  3989                           
  3990                           ; 1 bytes @ 0x44
  3991  0064                     	ds	1
  3992  0065                     setDelayOff_GO@sw:	
  3993  0065                     setDimmerLights_Dimming@lights:	
  3994                           ; 1 bytes @ 0x45
  3995                           
  3996                           
  3997                           ; 1 bytes @ 0x45
  3998  0065                     	ds	1
  3999  0066                     setDimmerLights_SwOff@sw:	
  4000  0066                     setDimmerLights_OnOff@lights:	
  4001                           ; 1 bytes @ 0x46
  4002                           
  4003                           
  4004                           ; 1 bytes @ 0x46
  4005  0066                     	ds	1
  4006  0067                     ??_DlyOff_Main:	
  4007  0067                     ??_Exception_Main:	
  4008                           ; 0 bytes @ 0x47
  4009                           
  4010  0067                     ??_setRFSW_Control:	
  4011                           ; 0 bytes @ 0x47
  4012                           
  4013  0067                     ??_setRFSW_AdjControl:	
  4014                           ; 0 bytes @ 0x47
  4015                           
  4016  0067                     ??_setSw_Main:	
  4017                           ; 0 bytes @ 0x47
  4018                           
  4019  0067                     setDimmerLights_Main@lights:	
  4020                           ; 0 bytes @ 0x47
  4021                           
  4022                           
  4023                           ; 1 bytes @ 0x47
  4024  0067                     	ds	1
  4025  0068                     setRFSW_Control@status:	
  4026                           
  4027                           ; 1 bytes @ 0x48
  4028  0068                     	ds	1
  4029  0069                     DlyOff_Main@sw:	
  4030  0069                     setRFSW_Control@sw:	
  4031                           ; 1 bytes @ 0x49
  4032                           
  4033  0069                     setRFSW_AdjControl@status:	
  4034                           ; 1 bytes @ 0x49
  4035                           
  4036  0069                     setSw_Main@sw:	
  4037                           ; 1 bytes @ 0x49
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x49
  4041  0069                     	ds	1
  4042  006A                     setRFSW_AdjControl@sw:	
  4043                           
  4044                           ; 1 bytes @ 0x4A
  4045  006A                     	ds	1
  4046  006B                     ??_getRxData:	
  4047                           
  4048                           ; 0 bytes @ 0x4B
  4049  006B                     	ds	1
  4050  006C                     getRxData@error:	
  4051                           
  4052                           ; 1 bytes @ 0x4C
  4053  006C                     	ds	1
  4054                           
  4055                           	psect	maintext
  4056  16E7                     __pmaintext:	
  4057 ;;
  4058 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4059 ;;
  4060 ;; *************** function _main *****************
  4061 ;; Defined at:
  4062 ;;		line 7 in file "../src/Main_B1.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  argc            2    0[BANK4 ] int 
  4065 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  2    0[BANK4 ] int 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 17F/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4077 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4081 ;;Total ram usage:        4 bytes
  4082 ;; Hardware stack levels required when called:   11
  4083 ;; This function calls:
  4084 ;;		_Buzzer_Initialization
  4085 ;;		_Buzzer_Main
  4086 ;;		_CC2500_PowerOnInitial
  4087 ;;		_DelayOff_Initialization
  4088 ;;		_DelayOff_Main
  4089 ;;		_DimmerLights_Initialization
  4090 ;;		_DimmerLights_Main
  4091 ;;		_Exception_Main
  4092 ;;		_Flash_Memory_Initialization
  4093 ;;		_Flash_Memory_Main
  4094 ;;		_LED_Initialization
  4095 ;;		_LED_Main
  4096 ;;		_Load_Initialization
  4097 ;;		_Load_Main
  4098 ;;		_Mcu_Initialization
  4099 ;;		_RF_Initialization
  4100 ;;		_RF_Main
  4101 ;;		_Switch_Initialization
  4102 ;;		_Switch_Main
  4103 ;;		_Temp_Initialization
  4104 ;;		_Temp_Main
  4105 ;;		_WDT_Main
  4106 ;;		_getLoad_AD
  4107 ;;		_getTemp_AD
  4108 ;;		_myMain_Initialization
  4109 ;;		_my_MainTimer
  4110 ;; This function is called by:
  4111 ;;		Startup code after reset
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           
  4116                           ;psect for function _main
  4117  16E7                     _main:	
  4118                           
  4119                           ;Main_B1.c: 8: myMain_Initialization();
  4120                           
  4121                           ;incstack = 0
  4122                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4123  16E7  319C  2499  3196   	fcall	_myMain_Initialization
  4124                           
  4125                           ;Main_B1.c: 9: Mcu_Initialization();
  4126  16EA  319D  255D  3196   	fcall	_Mcu_Initialization
  4127                           
  4128                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4129  16ED  3185  2532  3196   	fcall	_Flash_Memory_Initialization
  4130                           
  4131                           ;Main_B1.c: 11: LED_Initialization();
  4132  16F0  319B  23E7  3196   	fcall	_LED_Initialization
  4133                           
  4134                           ;Main_B1.c: 12: Buzzer_Initialization();
  4135  16F3  319B  2313  3196   	fcall	_Buzzer_Initialization
  4136                           
  4137                           ;Main_B1.c: 14: ;;
  4138                           ;Main_B1.c: 15: Temp_Initialization();
  4139  16F6  319B  231F  3196   	fcall	_Temp_Initialization
  4140                           
  4141                           ;Main_B1.c: 16: Load_Initialization();
  4142  16F9  319B  2316  3196   	fcall	_Load_Initialization
  4143                           
  4144                           ;Main_B1.c: 17: ;;
  4145                           ;Main_B1.c: 18: DelayOff_Initialization();
  4146  16FC  319B  236E  3196   	fcall	_DelayOff_Initialization
  4147                           
  4148                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4149  16FF  319B  23A3  3196   	fcall	_DimmerLights_Initialization
  4150                           
  4151                           ;Main_B1.c: 21: ;;
  4152                           ;Main_B1.c: 22: ;;
  4153                           ;Main_B1.c: 23: ;;
  4154                           ;Main_B1.c: 24: Switch_Initialization();
  4155  1702  319C  2417  3196   	fcall	_Switch_Initialization
  4156                           
  4157                           ;Main_B1.c: 25: RF_Initialization();
  4158  1705  319B  2319  3196   	fcall	_RF_Initialization
  4159                           
  4160                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4161  1708  319D  25EB  3196   	fcall	_CC2500_PowerOnInitial
  4162  170B                     l10886:	
  4163                           ;Main_B1.c: 27: ;;
  4164                           ;Main_B1.c: 28: ;;
  4165                           ;Main_B1.c: 30: while (1) {
  4166                           
  4167                           
  4168                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4169  170B  0022               	movlb	2	; select bank2
  4170  170C  1C20               	btfss	_myMain^(0+256),0
  4171  170D  2F16               	goto	l10890
  4172                           
  4173                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4174  170E  3005               	movlw	5
  4175  170F  318C  2461  3196   	fcall	_getLoad_AD
  4176                           
  4177                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4178  1712  3009               	movlw	9
  4179  1713  3193  230A  3196   	fcall	_getTemp_AD
  4180  1716                     l10890:	
  4181                           
  4182                           ;Main_B1.c: 57: }
  4183                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4184  1716  0021               	movlb	1	; select bank1
  4185  1717  1C3A               	btfss	_Timer1^(0+128),0
  4186  1718  2F0B               	goto	l10886
  4187                           
  4188                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4189  1719  103A               	bcf	_Timer1^(0+128),0
  4190                           
  4191                           ;Main_B1.c: 96: my_MainTimer();
  4192  171A  3188  2004  3196   	fcall	_my_MainTimer
  4193                           
  4194                           ;Main_B1.c: 97: WDT_Main();
  4195  171D  319D  2508  3196   	fcall	_WDT_Main
  4196                           
  4197                           ;Main_B1.c: 98: ;;
  4198                           ;Main_B1.c: 99: ;;
  4199                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4200  1720  0022               	movlb	2	; select bank2
  4201  1721  1C20               	btfss	_myMain^(0+256),0
  4202  1722  2F0B               	goto	l10886
  4203                           
  4204                           ;Main_B1.c: 101: Flash_Memory_Main();
  4205  1723  3192  2236  3196   	fcall	_Flash_Memory_Main
  4206                           
  4207                           ;Main_B1.c: 103: LED_Main();
  4208  1726  319B  23F3  3196   	fcall	_LED_Main
  4209                           
  4210                           ;Main_B1.c: 104: Buzzer_Main();
  4211  1729  3193  23C8  3196   	fcall	_Buzzer_Main
  4212                           
  4213                           ;Main_B1.c: 106: ;;
  4214                           ;Main_B1.c: 107: Temp_Main();
  4215  172C  319B  2322  3196   	fcall	_Temp_Main
  4216                           
  4217                           ;Main_B1.c: 108: Load_Main();
  4218  172F  3180  2055  3196   	fcall	_Load_Main
  4219                           
  4220                           ;Main_B1.c: 109: ;;
  4221                           ;Main_B1.c: 111: ;;
  4222                           ;Main_B1.c: 112: DimmerLights_Main();
  4223  1732  319F  277F  3196   	fcall	_DimmerLights_Main
  4224                           
  4225                           ;Main_B1.c: 113: Switch_Main();
  4226  1735  319B  23C4  3196   	fcall	_Switch_Main
  4227                           
  4228                           ;Main_B1.c: 114: ;;
  4229                           ;Main_B1.c: 115: ;;
  4230                           ;Main_B1.c: 117: RF_Main();
  4231  1738  319B  231C  3196   	fcall	_RF_Main
  4232                           
  4233                           ;Main_B1.c: 118: DelayOff_Main();
  4234  173B  319B  2376  3196   	fcall	_DelayOff_Main
  4235                           
  4236                           ;Main_B1.c: 119: ;;
  4237                           ;Main_B1.c: 120: ;;
  4238                           ;Main_B1.c: 121: Exception_Main();
  4239  173E  3184  2454  3196   	fcall	_Exception_Main
  4240  1741  2F0B               	goto	l10886
  4241  1742                     __end_of_main:	
  4242                           ;Main_B1.c: 128: }
  4243                           ;Main_B1.c: 129: }
  4244                           ;Main_B1.c: 163: }
  4245                           ;Main_B1.c: 164: return (0);
  4246                           ;	Return value of _main is never used
  4247                           
  4248                           
  4249                           	psect	text1
  4250  0804                     __ptext1:	
  4251 ;; *************** function _my_MainTimer *****************
  4252 ;; Defined at:
  4253 ;;		line 185 in file "../src/Main_B1.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;		None
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;		None               void
  4260 ;; Registers used:
  4261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4271 ;;Total ram usage:        1 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    5
  4274 ;; This function calls:
  4275 ;;		_setBuz
  4276 ;; This function is called by:
  4277 ;;		_main
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           
  4282                           ;psect for function _my_MainTimer
  4283  0804                     _my_MainTimer:	
  4284                           
  4285                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4286                           
  4287                           ;incstack = 0
  4288                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4289  0804  0022               	movlb	2	; select bank2
  4290  0805  1820               	btfsc	_myMain^(0+256),0
  4291  0806  281C               	goto	l10594
  4292                           
  4293                           ;Main_B1.c: 189: myMain.PowerCount++;
  4294  0807  3001               	movlw	1
  4295  0808  00F9               	movwf	??_my_MainTimer
  4296  0809  0879               	movf	??_my_MainTimer,w
  4297  080A  07A1               	addwf	(_myMain^(0+256)+1),f
  4298                           
  4299                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4300  080B  0821               	movf	(_myMain^(0+256)+1),w
  4301  080C  3A4B               	xorlw	75
  4302  080D  1D03               	skipz
  4303  080E  0008               	return
  4304                           
  4305                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4306  080F  01A1               	clrf	(_myMain^(0+256)+1)
  4307                           
  4308                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4309  0810  1420               	bsf	_myMain^(0+256),0
  4310                           
  4311                           ;Main_B1.c: 197: setBuz(3, 50);
  4312  0811  3032               	movlw	50
  4313  0812  0020               	movlb	0	; select bank0
  4314  0813  00A4               	movwf	setBuz@time
  4315  0814  3000               	movlw	0
  4316  0815  00A5               	movwf	setBuz@time+1
  4317  0816  3003               	movlw	3
  4318  0817  3195  25E6         	fcall	_setBuz
  4319                           
  4320                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4321  0819  0022               	movlb	2	; select bank2
  4322  081A  1620               	bsf	_myMain^(0+256),4
  4323                           
  4324                           ;Main_B1.c: 207: }
  4325                           ;Main_B1.c: 208: } else {
  4326  081B  0008               	return
  4327  081C                     l10594:	
  4328                           
  4329                           ;Main_B1.c: 209: myMain.PowerCount++;
  4330  081C  3001               	movlw	1
  4331  081D  00F9               	movwf	??_my_MainTimer
  4332  081E  0879               	movf	??_my_MainTimer,w
  4333  081F  07A1               	addwf	(_myMain^(0+256)+1),f
  4334                           
  4335                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4336  0820  0821               	movf	(_myMain^(0+256)+1),w
  4337  0821  3A32               	xorlw	50
  4338  0822  1903               	btfsc	3,2
  4339                           
  4340                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4341  0823  01A1               	clrf	(_myMain^(0+256)+1)
  4342                           
  4343                           ;Main_B1.c: 226: }
  4344                           ;Main_B1.c: 228: myMain.Count1++;
  4345  0824  3001               	movlw	1
  4346  0825  07A4               	addwf	(_myMain^(0+256)+4),f
  4347  0826  3000               	movlw	0
  4348  0827  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4349                           
  4350                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4351  0828  3004               	movlw	4
  4352  0829  3E20               	addlw	_myMain& (0+255)
  4353  082A  0086               	movwf	6
  4354  082B  3001               	movlw	1	; select bank2/3
  4355  082C  0087               	movwf	7
  4356  082D  3F40               	moviw [0]fsr1
  4357  082E  3A32               	xorlw	50
  4358  082F  1D03               	skipz
  4359  0830  2833               	goto	u13085
  4360  0831  3F41               	moviw [1]fsr1
  4361  0832  3A00               	xorlw	0
  4362  0833                     u13085:	
  4363  0833  1D03               	skipz
  4364  0834  0008               	return
  4365                           
  4366                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4367  0835  01A4               	clrf	(_myMain^(0+256)+4)
  4368  0836  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4369                           
  4370                           ;Main_B1.c: 242: if (myMain.Flag) {
  4371  0837  1CA0               	btfss	_myMain^(0+256),1
  4372  0838  283B               	goto	l1630
  4373                           
  4374                           ;Main_B1.c: 243: myMain.Flag = 0;
  4375  0839  10A0               	bcf	_myMain^(0+256),1
  4376                           
  4377                           ;Main_B1.c: 252: } else {
  4378  083A  0008               	return
  4379  083B                     l1630:	
  4380                           
  4381                           ;Main_B1.c: 253: myMain.Flag = 1;
  4382  083B  14A0               	bsf	_myMain^(0+256),1
  4383  083C  0008               	return
  4384  083D                     __end_of_my_MainTimer:	
  4385                           
  4386                           	psect	text2
  4387  1C99                     __ptext2:	
  4388 ;; *************** function _myMain_Initialization *****************
  4389 ;; Defined at:
  4390 ;;		line 170 in file "../src/Main_B1.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;		None
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;		None
  4395 ;; Return value:  Size  Location     Type
  4396 ;;		None               void
  4397 ;; Registers used:
  4398 ;;		wreg, fsr1l, fsr1h
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;Total ram usage:        1 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    3
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           
  4419                           ;psect for function _myMain_Initialization
  4420  1C99                     _myMain_Initialization:	
  4421                           
  4422                           ;Main_B1.c: 173: product = &_product;
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4426  1C99  3045               	movlw	__product& (0+255)
  4427  1C9A  00F2               	movwf	??_myMain_Initialization
  4428  1C9B  0872               	movf	??_myMain_Initialization,w
  4429  1C9C  0020               	movlb	0	; select bank0
  4430  1C9D  00EF               	movwf	_product
  4431                           
  4432                           ;Main_B1.c: 174: product->Data[20] = 210;
  4433  1C9E  30D2               	movlw	210
  4434  1C9F  00F2               	movwf	??_myMain_Initialization
  4435  1CA0  086F               	movf	_product,w
  4436  1CA1  3E14               	addlw	20
  4437  1CA2  0086               	movwf	6
  4438  1CA3  3002               	movlw	2	; select bank4/5
  4439  1CA4  0087               	movwf	7
  4440  1CA5  0872               	movf	??_myMain_Initialization,w
  4441  1CA6  0081               	movwf	1
  4442  1CA7  0008               	return
  4443  1CA8                     __end_of_myMain_Initialization:	
  4444                           
  4445                           	psect	text3
  4446  130A                     __ptext3:	
  4447 ;; *************** function _getTemp_AD *****************
  4448 ;; Defined at:
  4449 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  channel         1    wreg     unsigned char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  channel         1    7[COMMON] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;Total ram usage:        2 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    5
  4470 ;; This function calls:
  4471 ;;		_getAD
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           
  4478                           ;psect for function _getTemp_AD
  4479  130A                     _getTemp_AD:	
  4480                           
  4481                           ;incstack = 0
  4482                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4483                           ;getTemp_AD@channel stored from wreg
  4484  130A  00F7               	movwf	getTemp_AD@channel
  4485                           
  4486                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4487  130B  0021               	movlb	1	; select bank1
  4488  130C  1D4C               	btfss	_Temp^(0+128),2
  4489  130D  0008               	return
  4490                           
  4491                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4492  130E  30F0               	movlw	240
  4493  130F  00F6               	movwf	??_getTemp_AD
  4494  1310  0876               	movf	??_getTemp_AD,w
  4495  1311  00F2               	movwf	getAD@adcon1
  4496  1312  0877               	movf	getTemp_AD@channel,w
  4497  1313  319E  26F1  3193   	fcall	_getAD
  4498  1316  0873               	movf	?_getAD+1,w
  4499  1317  0021               	movlb	1	; select bank1
  4500  1318  01D9               	clrf	((_Temp+1)^(0+128)+12)
  4501  1319  07D9               	addwf	((_Temp+1)^(0+128)+12),f
  4502  131A  0872               	movf	?_getAD,w
  4503  131B  01D8               	clrf	(_Temp^(0+128)+12)
  4504  131C  07D8               	addwf	(_Temp^(0+128)+12),f
  4505                           
  4506                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4507  131D  300C               	movlw	12
  4508  131E  3ECC               	addlw	_Temp& (0+255)
  4509  131F  0086               	movwf	6
  4510  1320  0187               	clrf	7
  4511  1321  0016               	moviw fsr1++
  4512  1322  0401               	iorwf	1,w
  4513  1323  1903               	skipnz
  4514  1324  0008               	return
  4515                           
  4516                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4517  1325  0859               	movf	((_Temp+1)^(0+128)+12),w
  4518  1326  0255               	subwf	((_Temp+1)^(0+128)+8),w
  4519  1327  1D03               	skipz
  4520  1328  2B2B               	goto	u13035
  4521  1329  0858               	movf	(_Temp^(0+128)+12),w
  4522  132A  0254               	subwf	(_Temp^(0+128)+8),w
  4523  132B                     u13035:	
  4524  132B  1803               	skipnc
  4525  132C  2B34               	goto	l10576
  4526                           
  4527                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4528  132D  0859               	movf	((_Temp+1)^(0+128)+12),w
  4529  132E  01D5               	clrf	((_Temp+1)^(0+128)+8)
  4530  132F  07D5               	addwf	((_Temp+1)^(0+128)+8),f
  4531  1330  0858               	movf	(_Temp^(0+128)+12),w
  4532  1331  01D4               	clrf	(_Temp^(0+128)+8)
  4533  1332  07D4               	addwf	(_Temp^(0+128)+8),f
  4534                           
  4535                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4536  1333  0008               	return
  4537  1334                     l10576:	
  4538  1334  0859               	movf	((_Temp+1)^(0+128)+12),w
  4539  1335  0257               	subwf	((_Temp+1)^(0+128)+10),w
  4540  1336  1D03               	skipz
  4541  1337  2B3A               	goto	u13045
  4542  1338  0858               	movf	(_Temp^(0+128)+12),w
  4543  1339  0256               	subwf	(_Temp^(0+128)+10),w
  4544  133A                     u13045:	
  4545  133A  1803               	skipnc
  4546  133B  0008               	return
  4547                           
  4548                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4549  133C  0859               	movf	((_Temp+1)^(0+128)+12),w
  4550  133D  01D7               	clrf	((_Temp+1)^(0+128)+10)
  4551  133E  07D7               	addwf	((_Temp+1)^(0+128)+10),f
  4552  133F  0858               	movf	(_Temp^(0+128)+12),w
  4553  1340  01D6               	clrf	(_Temp^(0+128)+10)
  4554  1341  07D6               	addwf	(_Temp^(0+128)+10),f
  4555  1342  0008               	return
  4556  1343                     __end_of_getTemp_AD:	
  4557                           
  4558                           	psect	text4
  4559  0C61                     __ptext4:	
  4560 ;; *************** function _getLoad_AD *****************
  4561 ;; Defined at:
  4562 ;;		line 15 in file "../src/OverLoad_B1.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  channel         1    wreg     unsigned char 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  channel         1    0[BANK0 ] unsigned char 
  4567 ;;  i               1    3[BANK0 ] unsigned char 
  4568 ;;  j               1    2[BANK0 ] unsigned char 
  4569 ;;  k               1    1[BANK0 ] unsigned char 
  4570 ;; Return value:  Size  Location     Type
  4571 ;;		None               void
  4572 ;; Registers used:
  4573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4574 ;; Tracked objects:
  4575 ;;		On entry : 0/0
  4576 ;;		On exit  : 0/0
  4577 ;;		Unchanged: 0/0
  4578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;Total ram usage:        6 bytes
  4584 ;; Hardware stack levels used:    1
  4585 ;; Hardware stack levels required when called:    5
  4586 ;; This function calls:
  4587 ;;		_getAD
  4588 ;; This function is called by:
  4589 ;;		_main
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           
  4594                           ;psect for function _getLoad_AD
  4595  0C61                     _getLoad_AD:	
  4596                           
  4597                           ;incstack = 0
  4598                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4599                           ;getLoad_AD@channel stored from wreg
  4600  0C61  0020               	movlb	0	; select bank0
  4601  0C62  00A0               	movwf	getLoad_AD@channel
  4602                           
  4603                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4604  0C63  01A3               	clrf	getLoad_AD@i
  4605  0C64  01A2               	clrf	getLoad_AD@j
  4606  0C65  01A1               	clrf	getLoad_AD@k
  4607                           
  4608                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4609  0C66  0022               	movlb	2	; select bank2
  4610  0C67  1E31               	btfss	_Load^(0+256),4
  4611  0C68  0008               	return
  4612                           
  4613                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4614  0C69  30F3               	movlw	243
  4615  0C6A  00F6               	movwf	??_getLoad_AD
  4616  0C6B  0876               	movf	??_getLoad_AD,w
  4617  0C6C  00F2               	movwf	getAD@adcon1
  4618  0C6D  0020               	movlb	0	; select bank0
  4619  0C6E  0820               	movf	getLoad_AD@channel,w
  4620  0C6F  319E  26F1  318C   	fcall	_getAD
  4621  0C72  0873               	movf	?_getAD+1,w
  4622  0C73  0022               	movlb	2	; select bank2
  4623  0C74  01D3               	clrf	((_Load+1)^(0+256)+33)
  4624  0C75  07D3               	addwf	((_Load+1)^(0+256)+33),f
  4625  0C76  0872               	movf	?_getAD,w
  4626  0C77  01D2               	clrf	(_Load^(0+256)+33)
  4627  0C78  07D2               	addwf	(_Load^(0+256)+33),f
  4628                           
  4629                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4630  0C79  0020               	movlb	0	; select bank0
  4631  0C7A  01A3               	clrf	getLoad_AD@i
  4632  0C7B  3004               	movlw	4
  4633  0C7C  0223               	subwf	getLoad_AD@i,w
  4634  0C7D  1803               	btfsc	3,0
  4635  0C7E  2CAB               	goto	l10546
  4636  0C7F                     l10534:	
  4637                           
  4638                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4639  0C7F  3523               	lslf	getLoad_AD@i,w
  4640  0C80  3E3C               	addlw	(_Load+11)& (0+255)
  4641  0C81  0086               	movwf	6
  4642  0C82  3001               	movlw	1	; select bank2/3
  4643  0C83  0087               	movwf	7
  4644  0C84  3F40               	moviw [0]fsr1
  4645  0C85  00F6               	movwf	??_getLoad_AD
  4646  0C86  3F41               	moviw [1]fsr1
  4647  0C87  00F7               	movwf	??_getLoad_AD+1
  4648  0C88  0022               	movlb	2	; select bank2
  4649  0C89  0853               	movf	((_Load+1)^(0+256)+33),w
  4650  0C8A  0277               	subwf	??_getLoad_AD+1,w
  4651  0C8B  1D03               	skipz
  4652  0C8C  2C8F               	goto	u12935
  4653  0C8D  0852               	movf	(_Load^(0+256)+33),w
  4654  0C8E  0276               	subwf	??_getLoad_AD,w
  4655  0C8F                     u12935:	
  4656  0C8F  1803               	skipnc
  4657  0C90  2CA2               	goto	l10542
  4658  0C91  0020               	movlb	0	; select bank0
  4659  0C92  08A2               	movf	getLoad_AD@j,f
  4660  0C93  1D03               	skipz
  4661  0C94  2CA2               	goto	l10542
  4662                           
  4663                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4664  0C95  3523               	lslf	getLoad_AD@i,w
  4665  0C96  3E3C               	addlw	(_Load+11)& (0+255)
  4666  0C97  0086               	movwf	6
  4667  0C98  3001               	movlw	1	; select bank2/3
  4668  0C99  0087               	movwf	7
  4669  0C9A  0022               	movlb	2	; select bank2
  4670  0C9B  0852               	movf	(_Load^(0+256)+33),w
  4671  0C9C  3FC0               	movwi [0]fsr1
  4672  0C9D  0853               	movf	((_Load+1)^(0+256)+33),w
  4673  0C9E  3FC1               	movwi [1]fsr1
  4674                           
  4675                           ;OverLoad_B1.c: 24: j = 1;
  4676  0C9F  0020               	movlb	0	; select bank0
  4677  0CA0  01A2               	clrf	getLoad_AD@j
  4678  0CA1  0AA2               	incf	getLoad_AD@j,f
  4679  0CA2                     l10542:	
  4680  0CA2  3001               	movlw	1
  4681  0CA3  00F6               	movwf	??_getLoad_AD
  4682  0CA4  0876               	movf	??_getLoad_AD,w
  4683  0CA5  0020               	movlb	0	; select bank0
  4684  0CA6  07A3               	addwf	getLoad_AD@i,f
  4685  0CA7  3004               	movlw	4
  4686  0CA8  0223               	subwf	getLoad_AD@i,w
  4687  0CA9  1C03               	skipc
  4688  0CAA  2C7F               	goto	l10534
  4689  0CAB                     l10546:	
  4690                           
  4691                           ;OverLoad_B1.c: 25: }
  4692                           ;OverLoad_B1.c: 26: }
  4693                           ;OverLoad_B1.c: 27: if (j == 0) {
  4694  0CAB  08A2               	movf	getLoad_AD@j,f
  4695  0CAC  1D03               	skipz
  4696  0CAD  0008               	return
  4697                           
  4698                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4699  0CAE  01A3               	clrf	getLoad_AD@i
  4700  0CAF                     L1:	
  4701  0CAF  3004               	movlw	4
  4702  0CB0  0223               	subwf	getLoad_AD@i,w
  4703  0CB1  1803               	btfsc	3,0
  4704  0CB2  0008               	return
  4705                           
  4706                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4707  0CB3  3523               	lslf	getLoad_AD@i,w
  4708  0CB4  3E46               	addlw	(_Load+21)& (0+255)
  4709  0CB5  0086               	movwf	6
  4710  0CB6  3001               	movlw	1	; select bank2/3
  4711  0CB7  0087               	movwf	7
  4712  0CB8  3F40               	moviw [0]fsr1
  4713  0CB9  00F6               	movwf	??_getLoad_AD
  4714  0CBA  3F41               	moviw [1]fsr1
  4715  0CBB  00F7               	movwf	??_getLoad_AD+1
  4716  0CBC  0877               	movf	??_getLoad_AD+1,w
  4717  0CBD  0022               	movlb	2	; select bank2
  4718  0CBE  0253               	subwf	((_Load+1)^(0+256)+33),w
  4719  0CBF  1D03               	skipz
  4720  0CC0  2CC3               	goto	u12985
  4721  0CC1  0876               	movf	??_getLoad_AD,w
  4722  0CC2  0252               	subwf	(_Load^(0+256)+33),w
  4723  0CC3                     u12985:	
  4724  0CC3  1803               	skipnc
  4725  0CC4  2CD6               	goto	l10562
  4726  0CC5  0020               	movlb	0	; select bank0
  4727  0CC6  08A1               	movf	getLoad_AD@k,f
  4728  0CC7  1D03               	skipz
  4729  0CC8  2CD6               	goto	l10562
  4730                           
  4731                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4732  0CC9  3523               	lslf	getLoad_AD@i,w
  4733  0CCA  3E46               	addlw	(_Load+21)& (0+255)
  4734  0CCB  0086               	movwf	6
  4735  0CCC  3001               	movlw	1	; select bank2/3
  4736  0CCD  0087               	movwf	7
  4737  0CCE  0022               	movlb	2	; select bank2
  4738  0CCF  0852               	movf	(_Load^(0+256)+33),w
  4739  0CD0  3FC0               	movwi [0]fsr1
  4740  0CD1  0853               	movf	((_Load+1)^(0+256)+33),w
  4741  0CD2  3FC1               	movwi [1]fsr1
  4742                           
  4743                           ;OverLoad_B1.c: 31: k = 1;
  4744  0CD3  0020               	movlb	0	; select bank0
  4745  0CD4  01A1               	clrf	getLoad_AD@k
  4746  0CD5  0AA1               	incf	getLoad_AD@k,f
  4747  0CD6                     l10562:	
  4748  0CD6  3001               	movlw	1
  4749  0CD7  00F6               	movwf	??_getLoad_AD
  4750  0CD8  0876               	movf	??_getLoad_AD,w
  4751  0CD9  0020               	movlb	0	; select bank0
  4752  0CDA  07A3               	addwf	getLoad_AD@i,f
  4753  0CDB  2CAF               	goto	L1
  4754  0CDC                     __end_of_getLoad_AD:	
  4755                           
  4756                           	psect	text5
  4757  1EF1                     __ptext5:	
  4758 ;; *************** function _getAD *****************
  4759 ;; Defined at:
  4760 ;;		line 462 in file "../src/MCU_B1.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  adcon0          1    wreg     unsigned char 
  4763 ;;  adcon1          1    2[COMMON] unsigned char 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  adcon0          1    5[COMMON] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  2    2[COMMON] int 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4775 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4778 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;Total ram usage:        4 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    4
  4782 ;; This function calls:
  4783 ;;		_Timeout_Counter
  4784 ;;		_set_TimeoutCleared
  4785 ;; This function is called by:
  4786 ;;		_getLoad_AD
  4787 ;;		_getTemp_AD
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           
  4792                           ;psect for function _getAD
  4793  1EF1                     _getAD:	
  4794                           
  4795                           ;incstack = 0
  4796                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4797                           ;getAD@adcon0 stored from wreg
  4798  1EF1  00F5               	movwf	getAD@adcon0
  4799                           
  4800                           ;MCU_B1.c: 463: ADCON0 = adcon0;
  4801  1EF2  0875               	movf	getAD@adcon0,w
  4802  1EF3  0021               	movlb	1	; select bank1
  4803  1EF4  009D               	movwf	29	;volatile
  4804                           
  4805                           ;MCU_B1.c: 464: ADCON1 = adcon1;
  4806  1EF5  0872               	movf	getAD@adcon1,w
  4807  1EF6  009E               	movwf	30	;volatile
  4808                           
  4809                           ;MCU_B1.c: 465: GO_nDONE = 1;
  4810  1EF7  149D               	bsf	29,1	;volatile
  4811                           
  4812                           ;MCU_B1.c: 466: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4813  1EF8  2EFC               	goto	l10168
  4814  1EF9                     l10166:	
  4815                           
  4816                           ;MCU_B1.c: 467: Timeout_Counter();
  4817  1EF9  319E  262A  319E   	fcall	_Timeout_Counter
  4818  1EFC                     l10168:	
  4819  1EFC  0021               	movlb	1	; select bank1
  4820  1EFD  1C9D               	btfss	29,1	;volatile
  4821  1EFE  2F02               	goto	l10172
  4822  1EFF  0022               	movlb	2	; select bank2
  4823  1F00  1D2B               	btfss	(_myMain^(0+256)+11),2
  4824  1F01  2EF9               	goto	l10166
  4825  1F02                     l10172:	
  4826                           
  4827                           ;MCU_B1.c: 468: };
  4828                           ;MCU_B1.c: 469: set_TimeoutCleared();
  4829  1F02  319B  233A         	fcall	_set_TimeoutCleared
  4830                           
  4831                           ;MCU_B1.c: 470: return ((ADRESH*256)+ADRESL);
  4832  1F04  0021               	movlb	1	; select bank1
  4833  1F05  081C               	movf	28,w	;volatile
  4834  1F06  01F3               	clrf	?_getAD+1
  4835  1F07  07F3               	addwf	?_getAD+1,f
  4836  1F08  081B               	movf	27,w	;volatile
  4837  1F09  01F2               	clrf	?_getAD
  4838  1F0A  07F2               	addwf	?_getAD,f
  4839  1F0B  0008               	return
  4840  1F0C                     __end_of_getAD:	
  4841                           
  4842                           	psect	text6
  4843  1D08                     __ptext6:	
  4844 ;; *************** function _WDT_Main *****************
  4845 ;; Defined at:
  4846 ;;		line 1106 in file "../src/MCU_B1.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;		None               void
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0, pclath, cstack
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;Total ram usage:        1 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    4
  4867 ;; This function calls:
  4868 ;;		_WDT_Clearing
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           
  4875                           ;psect for function _WDT_Main
  4876  1D08                     _WDT_Main:	
  4877                           
  4878                           ;MCU_B1.c: 1107: if (WDT.Enable == 1) {
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4882  1D08  0021               	movlb	1	; select bank1
  4883  1D09  1C3F               	btfss	_WDT^(0+128),0
  4884  1D0A  0008               	return
  4885                           
  4886                           ;MCU_B1.c: 1108: if (WDT.Timer-- > 0) {
  4887  1D0B  3001               	movlw	1
  4888  1D0C  02C0               	subwf	(_WDT^(0+128)+1),f
  4889  1D0D  0840               	movf	(_WDT^(0+128)+1),w
  4890  1D0E  3AFF               	xorlw	255
  4891  1D0F  1903               	skipnz
  4892  1D10  0008               	return
  4893                           
  4894                           ;MCU_B1.c: 1109: WDT.Timer = 100;
  4895  1D11  3064               	movlw	100
  4896  1D12  00F2               	movwf	??_WDT_Main
  4897  1D13  0872               	movf	??_WDT_Main,w
  4898  1D14  00C0               	movwf	(_WDT^(0+128)+1)
  4899                           
  4900                           ;MCU_B1.c: 1110: WDT_Clearing();
  4901  1D15  3180  2002         	fcall	_WDT_Clearing
  4902  1D17  0008               	return
  4903  1D18                     __end_of_WDT_Main:	
  4904                           
  4905                           	psect	text7
  4906  0002                     __ptext7:	
  4907 ;; *************** function _WDT_Clearing *****************
  4908 ;; Defined at:
  4909 ;;		line 1116 in file "../src/MCU_B1.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;		None
  4912 ;; Auto vars:     Size  Location     Type
  4913 ;;		None
  4914 ;; Return value:  Size  Location     Type
  4915 ;;		None               void
  4916 ;; Registers used:
  4917 ;;		None
  4918 ;; Tracked objects:
  4919 ;;		On entry : 0/0
  4920 ;;		On exit  : 0/0
  4921 ;;		Unchanged: 0/0
  4922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;Total ram usage:        0 bytes
  4928 ;; Hardware stack levels used:    1
  4929 ;; Hardware stack levels required when called:    3
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		_WDT_Main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _WDT_Clearing
  4939  0002                     _WDT_Clearing:	
  4940                           
  4941                           ;incstack = 0
  4942                           ; Regs used in _WDT_Clearing: []
  4943  0002  0064               	clrwdt	;# 
  4944  0003  0008               	return
  4945  0004                     __end_of_WDT_Clearing:	
  4946                           
  4947                           	psect	text8
  4948  1B22                     __ptext8:	
  4949 ;; *************** function _Temp_Main *****************
  4950 ;; Defined at:
  4951 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;		None               void
  4958 ;; Registers used:
  4959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;Total ram usage:        0 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    6
  4972 ;; This function calls:
  4973 ;;		_setTemp_Main
  4974 ;; This function is called by:
  4975 ;;		_main
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           
  4980                           ;psect for function _Temp_Main
  4981  1B22                     _Temp_Main:	
  4982                           
  4983                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4984                           
  4985                           ;incstack = 0
  4986                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4987  1B22  318E  269A         	fcall	_setTemp_Main
  4988  1B24  0008               	return
  4989  1B25                     __end_of_Temp_Main:	
  4990                           
  4991                           	psect	text9
  4992  0E9A                     __ptext9:	
  4993 ;; *************** function _setTemp_Main *****************
  4994 ;; Defined at:
  4995 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  error           1   64[BANK0 ] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;Total ram usage:        3 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    5
  5016 ;; This function calls:
  5017 ;;		_getMain_All_Error_Status
  5018 ;;		_setBuz
  5019 ;;		_setProductData
  5020 ;; This function is called by:
  5021 ;;		_Temp_Main
  5022 ;; This function uses a non-reentrant model
  5023 ;;
  5024                           
  5025                           
  5026                           ;psect for function _setTemp_Main
  5027  0E9A                     _setTemp_Main:	
  5028                           
  5029                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5033  0E9A  3000               	movlw	0
  5034  0E9B  3192  2208  318E   	fcall	_getMain_All_Error_Status
  5035  0E9E  0020               	movlb	0	; select bank0
  5036  0E9F  00DE               	movwf	??_setTemp_Main
  5037  0EA0  085E               	movf	??_setTemp_Main,w
  5038  0EA1  00E0               	movwf	setTemp_Main@error
  5039                           
  5040                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5041  0EA2  0021               	movlb	1	; select bank1
  5042  0EA3  1C4C               	btfss	_Temp^(0+128),0
  5043  0EA4  2F46               	goto	l1973
  5044                           
  5045                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5046  0EA5  194C               	btfsc	_Temp^(0+128),2
  5047  0EA6  2EB6               	goto	l10190
  5048                           
  5049                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5050  0EA7  3001               	movlw	1
  5051  0EA8  07CD               	addwf	(_Temp^(0+128)+1),f
  5052  0EA9  3000               	movlw	0
  5053  0EAA  3DCE               	addwfc	((_Temp+1)^(0+128)+1),f
  5054                           
  5055                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5056  0EAB  3000               	movlw	0
  5057  0EAC  024E               	subwf	((_Temp+1)^(0+128)+1),w
  5058  0EAD  30FA               	movlw	250
  5059  0EAE  1903               	skipnz
  5060  0EAF  024D               	subwf	(_Temp^(0+128)+1),w
  5061  0EB0  1C03               	skipc
  5062  0EB1  0008               	return
  5063                           
  5064                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5065  0EB2  01CD               	clrf	(_Temp^(0+128)+1)
  5066  0EB3  01CE               	clrf	((_Temp+1)^(0+128)+1)
  5067                           
  5068                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5069  0EB4  154C               	bsf	_Temp^(0+128),2
  5070                           
  5071                           ;OverTemperature_B1.c: 70: }
  5072                           ;OverTemperature_B1.c: 71: } else {
  5073  0EB5  0008               	return
  5074  0EB6                     l10190:	
  5075                           
  5076                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5077  0EB6  3001               	movlw	1
  5078  0EB7  07CD               	addwf	(_Temp^(0+128)+1),f
  5079  0EB8  3000               	movlw	0
  5080  0EB9  3DCE               	addwfc	((_Temp+1)^(0+128)+1),f
  5081                           
  5082                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5083  0EBA  3000               	movlw	0
  5084  0EBB  024E               	subwf	((_Temp+1)^(0+128)+1),w
  5085  0EBC  3002               	movlw	2
  5086  0EBD  1903               	skipnz
  5087  0EBE  024D               	subwf	(_Temp^(0+128)+1),w
  5088  0EBF  1C03               	skipc
  5089  0EC0  0008               	return
  5090                           
  5091                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5092  0EC1  01CD               	clrf	(_Temp^(0+128)+1)
  5093  0EC2  01CE               	clrf	((_Temp+1)^(0+128)+1)
  5094                           
  5095                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5096  0EC3  3008               	movlw	8
  5097  0EC4  3ECC               	addlw	_Temp& (0+255)
  5098  0EC5  0086               	movwf	6
  5099  0EC6  0187               	clrf	7
  5100  0EC7  0016               	moviw fsr1++
  5101  0EC8  0401               	iorwf	1,w
  5102  0EC9  1903               	skipnz
  5103  0ECA  2F40               	goto	l1978
  5104  0ECB  300A               	movlw	10
  5105  0ECC  3ECC               	addlw	_Temp& (0+255)
  5106  0ECD  0086               	movwf	6
  5107  0ECE  0187               	clrf	7
  5108  0ECF  0016               	moviw fsr1++
  5109  0ED0  0401               	iorwf	1,w
  5110  0ED1  1903               	skipnz
  5111  0ED2  2F40               	goto	l1978
  5112                           
  5113                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5114  0ED3  114C               	bcf	_Temp^(0+128),2
  5115                           
  5116                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5117  0ED4  300A               	movlw	10
  5118  0ED5  3ECC               	addlw	_Temp& (0+255)
  5119  0ED6  0086               	movwf	6
  5120  0ED7  0187               	clrf	7
  5121  0ED8  3008               	movlw	8
  5122  0ED9  3ECC               	addlw	_Temp& (0+255)
  5123  0EDA  0084               	movwf	4
  5124  0EDB  0185               	clrf	5
  5125  0EDC  3F40               	moviw [0]fsr1
  5126  0EDD  0700               	addwf	0,w
  5127  0EDE  0020               	movlb	0	; select bank0
  5128  0EDF  00DE               	movwf	??_setTemp_Main
  5129  0EE0  3101               	addfsr 0,1
  5130  0EE1  3F41               	moviw [1]fsr1
  5131  0EE2  3D00               	addwfc	0,w
  5132  0EE3  00DF               	movwf	??_setTemp_Main+1
  5133  0EE4  36DF               	lsrf	??_setTemp_Main+1,f
  5134  0EE5  0CDE               	rrf	??_setTemp_Main,f
  5135  0EE6  085E               	movf	??_setTemp_Main,w
  5136  0EE7  0021               	movlb	1	; select bank1
  5137  0EE8  00D2               	movwf	(_Temp^(0+128)+6)
  5138  0EE9  0020               	movlb	0	; select bank0
  5139  0EEA  085F               	movf	??_setTemp_Main+1,w
  5140  0EEB  0021               	movlb	1	; select bank1
  5141  0EEC  00D3               	movwf	((_Temp+1)^(0+128)+6)
  5142                           
  5143                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5144  0EED  30C7               	movlw	199
  5145  0EEE  00DA               	movwf	(_Temp^(0+128)+14)
  5146  0EEF  3001               	movlw	1
  5147  0EF0  00DB               	movwf	(_Temp^(0+128)+15)
  5148                           
  5149                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5150  0EF1  309F               	movlw	159
  5151  0EF2  00DC               	movwf	(_Temp^(0+128)+16)
  5152  0EF3  3001               	movlw	1
  5153  0EF4  00DD               	movwf	(_Temp^(0+128)+17)
  5154                           
  5155                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5156  0EF5  1CCC               	btfss	_Temp^(0+128),1
  5157  0EF6  2F17               	goto	l10222
  5158                           
  5159                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5160  0EF7  085B               	movf	((_Temp+1)^(0+128)+14),w
  5161  0EF8  0253               	subwf	((_Temp+1)^(0+128)+6),w
  5162  0EF9  1D03               	skipz
  5163  0EFA  2EFD               	goto	u12415
  5164  0EFB  085A               	movf	(_Temp^(0+128)+14),w
  5165  0EFC  0252               	subwf	(_Temp^(0+128)+6),w
  5166  0EFD                     u12415:	
  5167  0EFD  1C03               	skipc
  5168  0EFE  2F15               	goto	l10220
  5169                           
  5170                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5171  0EFF  3001               	movlw	1
  5172  0F00  0020               	movlb	0	; select bank0
  5173  0F01  00DE               	movwf	??_setTemp_Main
  5174  0F02  085E               	movf	??_setTemp_Main,w
  5175  0F03  0021               	movlb	1	; select bank1
  5176  0F04  07CF               	addwf	(_Temp^(0+128)+3),f
  5177                           
  5178                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5179  0F05  3003               	movlw	3
  5180  0F06  024F               	subwf	(_Temp^(0+128)+3),w
  5181  0F07  1C03               	skipc
  5182  0F08  2F2D               	goto	l10234
  5183                           
  5184                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5185  0F09  01CF               	clrf	(_Temp^(0+128)+3)
  5186                           
  5187                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5188  0F0A  10CC               	bcf	_Temp^(0+128),1
  5189                           
  5190                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5191  0F0B  3064               	movlw	100
  5192  0F0C  0020               	movlb	0	; select bank0
  5193  0F0D  00A4               	movwf	setBuz@time
  5194  0F0E  3000               	movlw	0
  5195  0F0F  00A5               	movwf	setBuz@time+1
  5196  0F10  3002               	movlw	2
  5197  0F11  3195  25E6  318E   	fcall	_setBuz
  5198                           
  5199                           ;OverTemperature_B1.c: 103: }
  5200                           ;OverTemperature_B1.c: 104: } else {
  5201  0F14  2F2D               	goto	l10234
  5202  0F15                     l10220:	
  5203                           
  5204                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5205  0F15  0021               	movlb	1	; select bank1
  5206  0F16  2F2C               	goto	l10232
  5207  0F17                     l10222:	
  5208                           ;OverTemperature_B1.c: 106: }
  5209                           ;OverTemperature_B1.c: 107: } else {
  5210                           
  5211                           
  5212                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5213  0F17  0853               	movf	((_Temp+1)^(0+128)+6),w
  5214  0F18  025D               	subwf	((_Temp+1)^(0+128)+16),w
  5215  0F19  1D03               	skipz
  5216  0F1A  2F1D               	goto	u12435
  5217  0F1B  0852               	movf	(_Temp^(0+128)+6),w
  5218  0F1C  025C               	subwf	(_Temp^(0+128)+16),w
  5219  0F1D                     u12435:	
  5220  0F1D  1C03               	skipc
  5221  0F1E  2F2C               	goto	l10232
  5222                           
  5223                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5224  0F1F  3001               	movlw	1
  5225  0F20  0020               	movlb	0	; select bank0
  5226  0F21  00DE               	movwf	??_setTemp_Main
  5227  0F22  085E               	movf	??_setTemp_Main,w
  5228  0F23  0021               	movlb	1	; select bank1
  5229  0F24  07CF               	addwf	(_Temp^(0+128)+3),f
  5230                           
  5231                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5232  0F25  3003               	movlw	3
  5233  0F26  024F               	subwf	(_Temp^(0+128)+3),w
  5234  0F27  1C03               	skipc
  5235  0F28  2F2D               	goto	l10234
  5236                           
  5237                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5238  0F29  01CF               	clrf	(_Temp^(0+128)+3)
  5239                           
  5240                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5241  0F2A  14CC               	bsf	_Temp^(0+128),1
  5242                           
  5243                           ;OverTemperature_B1.c: 113: }
  5244                           ;OverTemperature_B1.c: 114: } else {
  5245  0F2B  2F2D               	goto	l10234
  5246  0F2C                     l10232:	
  5247                           
  5248                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5249  0F2C  01CF               	clrf	(_Temp^(0+128)+3)
  5250  0F2D                     l10234:	
  5251                           
  5252                           ;OverTemperature_B1.c: 116: }
  5253                           ;OverTemperature_B1.c: 117: }
  5254                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5255  0F2D  0021               	movlb	1	; select bank1
  5256  0F2E  0853               	movf	((_Temp+1)^(0+128)+6),w
  5257  0F2F  0020               	movlb	0	; select bank0
  5258  0F30  00DE               	movwf	??_setTemp_Main
  5259  0F31  085E               	movf	??_setTemp_Main,w
  5260  0F32  00DA               	movwf	setProductData@value
  5261  0F33  3018               	movlw	24
  5262  0F34  319C  2440  318E   	fcall	_setProductData
  5263                           
  5264                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5265  0F37  0021               	movlb	1	; select bank1
  5266  0F38  0852               	movf	(_Temp^(0+128)+6),w
  5267  0F39  0020               	movlb	0	; select bank0
  5268  0F3A  00DE               	movwf	??_setTemp_Main
  5269  0F3B  085E               	movf	??_setTemp_Main,w
  5270  0F3C  00DA               	movwf	setProductData@value
  5271  0F3D  3019               	movlw	25
  5272  0F3E  319C  2440         	fcall	_setProductData
  5273  0F40                     l1978:	
  5274                           
  5275                           ;OverTemperature_B1.c: 135: }
  5276                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5277  0F40  0021               	movlb	1	; select bank1
  5278  0F41  01D4               	clrf	(_Temp^(0+128)+8)
  5279  0F42  01D5               	clrf	((_Temp+1)^(0+128)+8)
  5280                           
  5281                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5282  0F43  01D6               	clrf	(_Temp^(0+128)+10)
  5283  0F44  01D7               	clrf	((_Temp+1)^(0+128)+10)
  5284                           
  5285                           ;OverTemperature_B1.c: 138: }
  5286                           ;OverTemperature_B1.c: 139: }
  5287                           ;OverTemperature_B1.c: 141: } else {
  5288  0F45  0008               	return
  5289  0F46                     l1973:	
  5290                           
  5291                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5292  0F46  0022               	movlb	2	; select bank2
  5293  0F47  1C20               	btfss	_myMain^(0+256),0
  5294  0F48  0008               	return
  5295                           
  5296                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5297  0F49  0021               	movlb	1	; select bank1
  5298  0F4A  144C               	bsf	_Temp^(0+128),0
  5299  0F4B  0008               	return
  5300  0F4C                     __end_of_setTemp_Main:	
  5301                           
  5302                           	psect	text10
  5303  1B1F                     __ptext10:	
  5304 ;; *************** function _Temp_Initialization *****************
  5305 ;; Defined at:
  5306 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;		None
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;		None
  5311 ;; Return value:  Size  Location     Type
  5312 ;;		None               void
  5313 ;; Registers used:
  5314 ;;		status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;Total ram usage:        0 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    4
  5327 ;; This function calls:
  5328 ;;		_setTemp_Initialization
  5329 ;; This function is called by:
  5330 ;;		_main
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _Temp_Initialization
  5336  1B1F                     _Temp_Initialization:	
  5337                           
  5338                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5339                           
  5340                           ;incstack = 0
  5341                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5342  1B1F  3187  27FF         	fcall	_setTemp_Initialization
  5343  1B21  0008               	return
  5344  1B22                     __end_of_Temp_Initialization:	
  5345                           
  5346                           	psect	text11
  5347  07FF                     __ptext11:	
  5348 ;; *************** function _setTemp_Initialization *****************
  5349 ;; Defined at:
  5350 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		None
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;Total ram usage:        0 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    3
  5371 ;; This function calls:
  5372 ;;		Nothing
  5373 ;; This function is called by:
  5374 ;;		_Temp_Initialization
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           
  5379                           ;psect for function _setTemp_Initialization
  5380  07FF                     _setTemp_Initialization:	
  5381                           
  5382                           ;incstack = 0
  5383                           ; Regs used in _setTemp_Initialization: []
  5384  07FF  0008               	return
  5385  0800                     __end_of_setTemp_Initialization:	
  5386                           
  5387                           	psect	text12
  5388  1BC4                     __ptext12:	
  5389 ;; *************** function _Switch_Main *****************
  5390 ;; Defined at:
  5391 ;;		line 72 in file "../src/Switch_B1.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;		None
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;		None
  5396 ;; Return value:  Size  Location     Type
  5397 ;;		None               void
  5398 ;; Registers used:
  5399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5409 ;;Total ram usage:        0 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    7
  5412 ;; This function calls:
  5413 ;;		_TouchPower
  5414 ;;		_setSw_Main
  5415 ;; This function is called by:
  5416 ;;		_main
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           
  5421                           ;psect for function _Switch_Main
  5422  1BC4                     _Switch_Main:	
  5423                           
  5424                           ;Switch_B1.c: 75: setSw_Main(1);
  5425                           
  5426                           ;incstack = 0
  5427                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5428  1BC4  3001               	movlw	1
  5429  1BC5  3181  21ED  319B   	fcall	_setSw_Main
  5430                           
  5431                           ;Switch_B1.c: 79: setSw_Main(2);
  5432  1BC8  3002               	movlw	2
  5433  1BC9  3181  21ED  319B   	fcall	_setSw_Main
  5434                           
  5435                           ;Switch_B1.c: 87: TouchPower();
  5436  1BCC  319E  2600         	fcall	_TouchPower
  5437  1BCE  0008               	return
  5438  1BCF                     __end_of_Switch_Main:	
  5439                           
  5440                           	psect	text13
  5441  01ED                     __ptext13:	
  5442 ;; *************** function _setSw_Main *****************
  5443 ;; Defined at:
  5444 ;;		line 121 in file "../src/Switch_B1.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;  sw              1    wreg     unsigned char 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  sw              1   73[BANK0 ] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;		None               void
  5451 ;; Registers used:
  5452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;Total ram usage:        3 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    6
  5465 ;; This function calls:
  5466 ;;		_SwPointSelect
  5467 ;;		_getMain_All_Error_Status
  5468 ;;		_getSw_KeyStatus
  5469 ;;		_setBuz
  5470 ;;		_setDimmerLights_DimmingOn
  5471 ;;		_setDimmerLights_SwOff
  5472 ;;		_setDimmerLights_SwOn
  5473 ;;		_setRF_Learn
  5474 ;; This function is called by:
  5475 ;;		_Switch_Main
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _setSw_Main
  5481  01ED                     _setSw_Main:	
  5482                           
  5483                           ;incstack = 0
  5484                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5485                           ;setSw_Main@sw stored from wreg
  5486  01ED  0020               	movlb	0	; select bank0
  5487  01EE  00E9               	movwf	setSw_Main@sw
  5488                           
  5489                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5490  01EF  0869               	movf	setSw_Main@sw,w
  5491  01F0  319E  2615  3181   	fcall	_SwPointSelect
  5492                           
  5493                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5494  01F3  0020               	movlb	0	; select bank0
  5495  01F4  086E               	movf	_Sw,w
  5496  01F5  0086               	movwf	6
  5497  01F6  3001               	movlw	1	; select bank2/3
  5498  01F7  0087               	movwf	7
  5499  01F8  1C01               	btfss	1,0
  5500  01F9  2B54               	goto	l2727
  5501                           
  5502                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5503  01FA  3000               	movlw	0
  5504  01FB  3192  2208  3181   	fcall	_getMain_All_Error_Status
  5505  01FE  3800               	iorlw	0
  5506  01FF  1D03               	skipz
  5507  0200  2A1C               	goto	l10344
  5508                           
  5509                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5510  0201  0020               	movlb	0	; select bank0
  5511  0202  0A6E               	incf	_Sw,w
  5512  0203  0086               	movwf	6
  5513  0204  3001               	movlw	1	; select bank2/3
  5514  0205  0087               	movwf	7
  5515  0206  1081               	bcf	1,1
  5516                           
  5517                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5518  0207  0869               	movf	setSw_Main@sw,w
  5519  0208  319F  279F  3181   	fcall	_getSw_KeyStatus
  5520  020B  3A01               	xorlw	1
  5521  020C  3000               	movlw	0
  5522  020D  1903               	skipnz
  5523  020E  3001               	movlw	1
  5524  020F  0020               	movlb	0	; select bank0
  5525  0210  00E7               	movwf	??_setSw_Main
  5526  0211  086E               	movf	_Sw,w
  5527  0212  0086               	movwf	6
  5528  0213  3001               	movlw	1	; select bank2/3
  5529  0214  0087               	movwf	7
  5530  0215  0DE7               	rlf	??_setSw_Main,f
  5531  0216  0801               	movf	1,w
  5532  0217  0667               	xorwf	??_setSw_Main,w
  5533  0218  39FD               	andlw	-3
  5534  0219  0667               	xorwf	??_setSw_Main,w
  5535  021A  0081               	movwf	1
  5536                           
  5537                           ;Switch_B1.c: 128: } else {
  5538  021B  2A32               	goto	l2729
  5539  021C                     l10344:	
  5540                           
  5541                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5542  021C  0020               	movlb	0	; select bank0
  5543  021D  0A6E               	incf	_Sw,w
  5544  021E  0086               	movwf	6
  5545  021F  3001               	movlw	1	; select bank2/3
  5546  0220  0087               	movwf	7
  5547  0221  1881               	btfsc	1,1
  5548  0222  2A32               	goto	l2729
  5549                           
  5550                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5551  0223  0A6E               	incf	_Sw,w
  5552  0224  0086               	movwf	6
  5553  0225  3001               	movlw	1	; select bank2/3
  5554  0226  0087               	movwf	7
  5555  0227  1481               	bsf	1,1
  5556                           
  5557                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5558  0228  086E               	movf	_Sw,w
  5559  0229  0086               	movwf	6
  5560  022A  3001               	movlw	1	; select bank2/3
  5561  022B  0087               	movwf	7
  5562  022C  1081               	bcf	1,1
  5563                           
  5564                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5565  022D  086E               	movf	_Sw,w
  5566  022E  0086               	movwf	6
  5567  022F  3001               	movlw	1	; select bank2/3
  5568  0230  0087               	movwf	7
  5569  0231  1501               	bsf	1,2
  5570  0232                     l2729:	
  5571                           
  5572                           ;Switch_B1.c: 134: }
  5573                           ;Switch_B1.c: 135: }
  5574                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5575  0232  086E               	movf	_Sw,w
  5576  0233  0086               	movwf	6
  5577  0234  3001               	movlw	1	; select bank2/3
  5578  0235  0087               	movwf	7
  5579  0236  1C81               	btfss	1,1
  5580  0237  2B01               	goto	l10394
  5581                           
  5582                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5583  0238  086E               	movf	_Sw,w
  5584  0239  0086               	movwf	6
  5585  023A  3001               	movlw	1	; select bank2/3
  5586  023B  0087               	movwf	7
  5587  023C  1901               	btfsc	1,2
  5588  023D  2A5F               	goto	l10360
  5589                           
  5590                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5591  023E  3001               	movlw	1
  5592  023F  00E7               	movwf	??_setSw_Main
  5593  0240  086E               	movf	_Sw,w
  5594  0241  3E02               	addlw	2
  5595  0242  0086               	movwf	6
  5596  0243  3001               	movlw	1	; select bank2/3
  5597  0244  0087               	movwf	7
  5598  0245  0867               	movf	??_setSw_Main,w
  5599  0246  0781               	addwf	1,f
  5600                           
  5601                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5602  0247  086E               	movf	_Sw,w
  5603  0248  3E02               	addlw	2
  5604  0249  0086               	movwf	6
  5605  024A  3001               	movlw	1	; select bank2/3
  5606  024B  0087               	movwf	7
  5607  024C  3003               	movlw	3
  5608  024D  0201               	subwf	1,w
  5609  024E  1C03               	skipc
  5610  024F  0008               	return
  5611                           
  5612                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5613  0250  086E               	movf	_Sw,w
  5614  0251  3E02               	addlw	2
  5615  0252  0086               	movwf	6
  5616  0253  3001               	movlw	1	; select bank2/3
  5617  0254  0087               	movwf	7
  5618  0255  0181               	clrf	1
  5619                           
  5620                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5621  0256  086E               	movf	_Sw,w
  5622  0257  0086               	movwf	6
  5623  0258  3001               	movlw	1	; select bank2/3
  5624  0259  0087               	movwf	7
  5625  025A  1501               	bsf	1,2
  5626                           
  5627                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5628  025B  0869               	movf	setSw_Main@sw,w
  5629  025C  3196  268D         	fcall	_setDimmerLights_SwOn
  5630                           
  5631                           ;Switch_B1.c: 148: }
  5632                           ;Switch_B1.c: 149: } else {
  5633  025E  0008               	return
  5634  025F                     l10360:	
  5635                           
  5636                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5637  025F  0020               	movlb	0	; select bank0
  5638  0260  086E               	movf	_Sw,w
  5639  0261  0086               	movwf	6
  5640  0262  3001               	movlw	1	; select bank2/3
  5641  0263  0087               	movwf	7
  5642  0264  1981               	btfsc	1,3
  5643  0265  2A91               	goto	l10370
  5644                           
  5645                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5646  0266  086E               	movf	_Sw,w
  5647  0267  3E03               	addlw	3
  5648  0268  0086               	movwf	6
  5649  0269  3001               	movlw	1	; select bank2/3
  5650  026A  0087               	movwf	7
  5651  026B  3001               	movlw	1
  5652  026C  0781               	addwf	1,f
  5653  026D  3141               	addfsr 1,1
  5654  026E  1803               	skipnc
  5655  026F  0A81               	incf	1,f
  5656                           
  5657                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5658  0270  086E               	movf	_Sw,w
  5659  0271  3E03               	addlw	3
  5660  0272  0086               	movwf	6
  5661  0273  3001               	movlw	1	; select bank2/3
  5662  0274  0087               	movwf	7
  5663  0275  3F40               	moviw [0]fsr1
  5664  0276  00E7               	movwf	??_setSw_Main
  5665  0277  3F41               	moviw [1]fsr1
  5666  0278  00E8               	movwf	??_setSw_Main+1
  5667  0279  3000               	movlw	0
  5668  027A  0268               	subwf	??_setSw_Main+1,w
  5669  027B  304B               	movlw	75
  5670  027C  1903               	skipnz
  5671  027D  0267               	subwf	??_setSw_Main,w
  5672  027E  1C03               	skipc
  5673  027F  0008               	return
  5674                           
  5675                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5676  0280  086E               	movf	_Sw,w
  5677  0281  3E03               	addlw	3
  5678  0282  0086               	movwf	6
  5679  0283  3001               	movlw	1	; select bank2/3
  5680  0284  0087               	movwf	7
  5681  0285  3000               	movlw	0
  5682  0286  3FC0               	movwi [0]fsr1
  5683  0287  3FC1               	movwi [1]fsr1
  5684                           
  5685                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5686  0288  086E               	movf	_Sw,w
  5687  0289  0086               	movwf	6
  5688  028A  3001               	movlw	1	; select bank2/3
  5689  028B  0087               	movwf	7
  5690  028C  1581               	bsf	1,3
  5691                           
  5692                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5693  028D  0869               	movf	setSw_Main@sw,w
  5694  028E  3191  213B         	fcall	_setDimmerLights_DimmingOn
  5695                           
  5696                           ;Switch_B1.c: 160: }
  5697                           ;Switch_B1.c: 161: } else {
  5698  0290  0008               	return
  5699  0291                     l10370:	
  5700                           
  5701                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5702  0291  0020               	movlb	0	; select bank0
  5703  0292  086E               	movf	_Sw,w
  5704  0293  0086               	movwf	6
  5705  0294  3001               	movlw	1	; select bank2/3
  5706  0295  0087               	movwf	7
  5707  0296  1A01               	btfsc	1,4
  5708  0297  2ACF               	goto	l10384
  5709                           
  5710                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5711  0298  086E               	movf	_Sw,w
  5712  0299  3E05               	addlw	5
  5713  029A  0086               	movwf	6
  5714  029B  3001               	movlw	1	; select bank2/3
  5715  029C  0087               	movwf	7
  5716  029D  3001               	movlw	1
  5717  029E  0781               	addwf	1,f
  5718  029F  3141               	addfsr 1,1
  5719  02A0  1803               	skipnc
  5720  02A1  0A81               	incf	1,f
  5721                           
  5722                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5723  02A2  086E               	movf	_Sw,w
  5724  02A3  3E05               	addlw	5
  5725  02A4  0086               	movwf	6
  5726  02A5  3001               	movlw	1	; select bank2/3
  5727  02A6  0087               	movwf	7
  5728  02A7  3F40               	moviw [0]fsr1
  5729  02A8  00E7               	movwf	??_setSw_Main
  5730  02A9  3F41               	moviw [1]fsr1
  5731  02AA  00E8               	movwf	??_setSw_Main+1
  5732  02AB  3000               	movlw	0
  5733  02AC  0268               	subwf	??_setSw_Main+1,w
  5734  02AD  304B               	movlw	75
  5735  02AE  1903               	skipnz
  5736  02AF  0267               	subwf	??_setSw_Main,w
  5737  02B0  1C03               	skipc
  5738  02B1  0008               	return
  5739                           
  5740                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5741  02B2  086E               	movf	_Sw,w
  5742  02B3  3E05               	addlw	5
  5743  02B4  0086               	movwf	6
  5744  02B5  3001               	movlw	1	; select bank2/3
  5745  02B6  0087               	movwf	7
  5746  02B7  3000               	movlw	0
  5747  02B8  3FC0               	movwi [0]fsr1
  5748  02B9  3FC1               	movwi [1]fsr1
  5749                           
  5750                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5751  02BA  086E               	movf	_Sw,w
  5752  02BB  0086               	movwf	6
  5753  02BC  3001               	movlw	1	; select bank2/3
  5754  02BD  0087               	movwf	7
  5755  02BE  1601               	bsf	1,4
  5756                           
  5757                           ;Switch_B1.c: 169: setRF_Learn(1);
  5758  02BF  3001               	movlw	1
  5759  02C0  319D  253A  3181   	fcall	_setRF_Learn
  5760                           
  5761                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5762  02C3  0022               	movlb	2	; select bank2
  5763  02C4  1EA0               	btfss	_myMain^(0+256),5
  5764  02C5  0008               	return
  5765                           
  5766                           ;Switch_B1.c: 171: setBuz(2, 100);
  5767  02C6  3064               	movlw	100
  5768  02C7  0020               	movlb	0	; select bank0
  5769  02C8  00A4               	movwf	setBuz@time
  5770  02C9  3000               	movlw	0
  5771  02CA  00A5               	movwf	setBuz@time+1
  5772  02CB  3002               	movlw	2
  5773  02CC  3195  25E6         	fcall	_setBuz
  5774                           
  5775                           ;Switch_B1.c: 172: }
  5776                           ;Switch_B1.c: 176: }
  5777                           ;Switch_B1.c: 177: } else {
  5778  02CE  0008               	return
  5779  02CF                     l10384:	
  5780                           
  5781                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5782  02CF  0020               	movlb	0	; select bank0
  5783  02D0  086E               	movf	_Sw,w
  5784  02D1  0086               	movwf	6
  5785  02D2  3001               	movlw	1	; select bank2/3
  5786  02D3  0087               	movwf	7
  5787  02D4  1A81               	btfsc	1,5
  5788  02D5  0008               	return
  5789                           
  5790                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5791  02D6  086E               	movf	_Sw,w
  5792  02D7  3E07               	addlw	7
  5793  02D8  0086               	movwf	6
  5794  02D9  3001               	movlw	1	; select bank2/3
  5795  02DA  0087               	movwf	7
  5796  02DB  3001               	movlw	1
  5797  02DC  0781               	addwf	1,f
  5798  02DD  3141               	addfsr 1,1
  5799  02DE  1803               	skipnc
  5800  02DF  0A81               	incf	1,f
  5801                           
  5802                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5803  02E0  086E               	movf	_Sw,w
  5804  02E1  3E07               	addlw	7
  5805  02E2  0086               	movwf	6
  5806  02E3  3001               	movlw	1	; select bank2/3
  5807  02E4  0087               	movwf	7
  5808  02E5  3F40               	moviw [0]fsr1
  5809  02E6  00E7               	movwf	??_setSw_Main
  5810  02E7  3F41               	moviw [1]fsr1
  5811  02E8  00E8               	movwf	??_setSw_Main+1
  5812  02E9  3000               	movlw	0
  5813  02EA  0268               	subwf	??_setSw_Main+1,w
  5814  02EB  3096               	movlw	150
  5815  02EC  1903               	skipnz
  5816  02ED  0267               	subwf	??_setSw_Main,w
  5817  02EE  1C03               	skipc
  5818  02EF  0008               	return
  5819                           
  5820                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5821  02F0  086E               	movf	_Sw,w
  5822  02F1  3E07               	addlw	7
  5823  02F2  0086               	movwf	6
  5824  02F3  3001               	movlw	1	; select bank2/3
  5825  02F4  0087               	movwf	7
  5826  02F5  3000               	movlw	0
  5827  02F6  3FC0               	movwi [0]fsr1
  5828  02F7  3FC1               	movwi [1]fsr1
  5829                           
  5830                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5831  02F8  086E               	movf	_Sw,w
  5832  02F9  0086               	movwf	6
  5833  02FA  3001               	movlw	1	; select bank2/3
  5834  02FB  0087               	movwf	7
  5835  02FC  1681               	bsf	1,5
  5836                           
  5837                           ;Switch_B1.c: 185: setRF_Learn(0);
  5838  02FD  3000               	movlw	0
  5839  02FE  319D  253A         	fcall	_setRF_Learn
  5840                           
  5841                           ;Switch_B1.c: 188: }
  5842                           ;Switch_B1.c: 189: }
  5843                           ;Switch_B1.c: 190: }
  5844                           ;Switch_B1.c: 191: }
  5845                           ;Switch_B1.c: 192: }
  5846                           ;Switch_B1.c: 193: } else {
  5847  0300  0008               	return
  5848  0301                     l10394:	
  5849                           
  5850                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5851  0301  0020               	movlb	0	; select bank0
  5852  0302  086E               	movf	_Sw,w
  5853  0303  0086               	movwf	6
  5854  0304  3001               	movlw	1	; select bank2/3
  5855  0305  0087               	movwf	7
  5856  0306  1D01               	btfss	1,2
  5857  0307  0008               	return
  5858                           
  5859                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5860  0308  3001               	movlw	1
  5861  0309  00E7               	movwf	??_setSw_Main
  5862  030A  086E               	movf	_Sw,w
  5863  030B  3E02               	addlw	2
  5864  030C  0086               	movwf	6
  5865  030D  3001               	movlw	1	; select bank2/3
  5866  030E  0087               	movwf	7
  5867  030F  0867               	movf	??_setSw_Main,w
  5868  0310  0781               	addwf	1,f
  5869                           
  5870                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5871  0311  086E               	movf	_Sw,w
  5872  0312  3E02               	addlw	2
  5873  0313  0086               	movwf	6
  5874  0314  3001               	movlw	1	; select bank2/3
  5875  0315  0087               	movwf	7
  5876  0316  3003               	movlw	3
  5877  0317  0201               	subwf	1,w
  5878  0318  1C03               	skipc
  5879  0319  0008               	return
  5880                           
  5881                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5882  031A  086E               	movf	_Sw,w
  5883  031B  3E02               	addlw	2
  5884  031C  0086               	movwf	6
  5885  031D  3001               	movlw	1	; select bank2/3
  5886  031E  0087               	movwf	7
  5887  031F  0181               	clrf	1
  5888                           
  5889                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5890  0320  086E               	movf	_Sw,w
  5891  0321  0086               	movwf	6
  5892  0322  3001               	movlw	1	; select bank2/3
  5893  0323  0087               	movwf	7
  5894  0324  1101               	bcf	1,2
  5895                           
  5896                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5897  0325  086E               	movf	_Sw,w
  5898  0326  3E03               	addlw	3
  5899  0327  0086               	movwf	6
  5900  0328  3001               	movlw	1	; select bank2/3
  5901  0329  0087               	movwf	7
  5902  032A  3000               	movlw	0
  5903  032B  3FC0               	movwi [0]fsr1
  5904  032C  3FC1               	movwi [1]fsr1
  5905                           
  5906                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5907  032D  086E               	movf	_Sw,w
  5908  032E  0086               	movwf	6
  5909  032F  3001               	movlw	1	; select bank2/3
  5910  0330  0087               	movwf	7
  5911  0331  1181               	bcf	1,3
  5912                           
  5913                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5914  0332  086E               	movf	_Sw,w
  5915  0333  3E05               	addlw	5
  5916  0334  0086               	movwf	6
  5917  0335  3001               	movlw	1	; select bank2/3
  5918  0336  0087               	movwf	7
  5919  0337  3000               	movlw	0
  5920  0338  3FC0               	movwi [0]fsr1
  5921  0339  3FC1               	movwi [1]fsr1
  5922                           
  5923                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5924  033A  086E               	movf	_Sw,w
  5925  033B  0086               	movwf	6
  5926  033C  3001               	movlw	1	; select bank2/3
  5927  033D  0087               	movwf	7
  5928  033E  1201               	bcf	1,4
  5929                           
  5930                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5931  033F  086E               	movf	_Sw,w
  5932  0340  3E07               	addlw	7
  5933  0341  0086               	movwf	6
  5934  0342  3001               	movlw	1	; select bank2/3
  5935  0343  0087               	movwf	7
  5936  0344  3000               	movlw	0
  5937  0345  3FC0               	movwi [0]fsr1
  5938  0346  3FC1               	movwi [1]fsr1
  5939                           
  5940                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5941  0347  086E               	movf	_Sw,w
  5942  0348  0086               	movwf	6
  5943  0349  3001               	movlw	1	; select bank2/3
  5944  034A  0087               	movwf	7
  5945  034B  1281               	bcf	1,5
  5946                           
  5947                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5948  034C  0869               	movf	setSw_Main@sw,w
  5949  034D  3194  240E  3181   	fcall	_setDimmerLights_SwOff
  5950                           
  5951                           ;Switch_B1.c: 210: setRF_Learn(0);
  5952  0350  3000               	movlw	0
  5953  0351  319D  253A         	fcall	_setRF_Learn
  5954                           
  5955                           ;Switch_B1.c: 212: }
  5956                           ;Switch_B1.c: 213: }
  5957                           ;Switch_B1.c: 214: }
  5958                           ;Switch_B1.c: 215: } else {
  5959  0353  0008               	return
  5960  0354                     l2727:	
  5961                           
  5962                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5963  0354  0022               	movlb	2	; select bank2
  5964  0355  1C20               	btfss	_myMain^(0+256),0
  5965  0356  0008               	return
  5966                           
  5967                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5968  0357  0020               	movlb	0	; select bank0
  5969  0358  086E               	movf	_Sw,w
  5970  0359  0086               	movwf	6
  5971  035A  3001               	movlw	1	; select bank2/3
  5972  035B  0087               	movwf	7
  5973  035C  1401               	bsf	1,0
  5974  035D  0008               	return
  5975  035E                     __end_of_setSw_Main:	
  5976                           
  5977                           	psect	text14
  5978  1D3A                     __ptext14:	
  5979 ;; *************** function _setRF_Learn *****************
  5980 ;; Defined at:
  5981 ;;		line 33 in file "../src/RF_Control_B1.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  command         1    wreg     unsigned char 
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;  command         1    3[COMMON] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;		None               void
  5988 ;; Registers used:
  5989 ;;		wreg, status,2, status,0
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;Total ram usage:        2 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    3
  6002 ;; This function calls:
  6003 ;;		Nothing
  6004 ;; This function is called by:
  6005 ;;		_setSw_Main
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           
  6010                           ;psect for function _setRF_Learn
  6011  1D3A                     _setRF_Learn:	
  6012                           
  6013                           ;incstack = 0
  6014                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6015                           ;setRF_Learn@command stored from wreg
  6016  1D3A  00F3               	movwf	setRF_Learn@command
  6017                           
  6018                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6019  1D3B  0873               	movf	setRF_Learn@command,w
  6020  1D3C  3A01               	xorlw	1
  6021  1D3D  3000               	movlw	0
  6022  1D3E  1903               	skipnz
  6023  1D3F  3001               	movlw	1
  6024  1D40  00F2               	movwf	??_setRF_Learn
  6025  1D41  0EF2               	swapf	??_setRF_Learn,f
  6026  1D42  0DF2               	rlf	??_setRF_Learn,f
  6027  1D43  0DF2               	rlf	??_setRF_Learn,f
  6028  1D44  0021               	movlb	1	; select bank1
  6029  1D45  0820               	movf	_RF1^(0+128),w
  6030  1D46  0672               	xorwf	??_setRF_Learn,w
  6031  1D47  39BF               	andlw	-65
  6032  1D48  0672               	xorwf	??_setRF_Learn,w
  6033  1D49  00A0               	movwf	_RF1^(0+128)
  6034  1D4A  0008               	return
  6035  1D4B                     __end_of_setRF_Learn:	
  6036                           
  6037                           	psect	text15
  6038  113B                     __ptext15:	
  6039 ;; *************** function _setDimmerLights_DimmingOn *****************
  6040 ;; Defined at:
  6041 ;;		line 716 in file "../src/Dimmer_B1.c"
  6042 ;; Parameters:    Size  Location     Type
  6043 ;;  sw              1    wreg     unsigned char 
  6044 ;; Auto vars:     Size  Location     Type
  6045 ;;  sw              1    4[COMMON] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        1 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    4
  6062 ;; This function calls:
  6063 ;;		_DimmerLights_SelectPointer
  6064 ;; This function is called by:
  6065 ;;		_setSw_Main
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function _setDimmerLights_DimmingOn
  6071  113B                     _setDimmerLights_DimmingOn:	
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6075                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6076  113B  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6077                           
  6078                           ;Dimmer_B1.c: 722: DimmerLights_SelectPointer(sw);
  6079  113C  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6080  113D  319D  25AC  3191   	fcall	_DimmerLights_SelectPointer
  6081                           
  6082                           ;Dimmer_B1.c: 723: if (DimmerLights->Trigger == 0) {
  6083  1140  0020               	movlb	0	; select bank0
  6084  1141  086D               	movf	_DimmerLights,w
  6085  1142  0086               	movwf	6
  6086  1143  3001               	movlw	1	; select bank2/3
  6087  1144  0087               	movwf	7
  6088  1145  1881               	btfsc	1,1
  6089  1146  0008               	return
  6090                           
  6091                           ;Dimmer_B1.c: 724: if (DimmerLights->SwFlag == 1) {
  6092  1147  086D               	movf	_DimmerLights,w
  6093  1148  0086               	movwf	6
  6094  1149  3001               	movlw	1	; select bank2/3
  6095  114A  0087               	movwf	7
  6096  114B  1C01               	btfss	1,0
  6097  114C  0008               	return
  6098                           
  6099                           ;Dimmer_B1.c: 725: DimmerLights->Status = 1;
  6100  114D  0A6D               	incf	_DimmerLights,w
  6101  114E  0086               	movwf	6
  6102  114F  3001               	movlw	1	; select bank2/3
  6103  1150  0087               	movwf	7
  6104  1151  1401               	bsf	1,0
  6105                           
  6106                           ;Dimmer_B1.c: 727: DimmerLights->DimmingSwFlag = 1;
  6107  1152  086D               	movf	_DimmerLights,w
  6108  1153  0086               	movwf	6
  6109  1154  3001               	movlw	1	; select bank2/3
  6110  1155  0087               	movwf	7
  6111  1156  1581               	bsf	1,3
  6112                           
  6113                           ;Dimmer_B1.c: 728: DimmerLights->DimmingTrigger = 1;
  6114  1157  086D               	movf	_DimmerLights,w
  6115  1158  0086               	movwf	6
  6116  1159  3001               	movlw	1	; select bank2/3
  6117  115A  0087               	movwf	7
  6118  115B  1601               	bsf	1,4
  6119                           
  6120                           ;Dimmer_B1.c: 729: DimmerLights->DimmingSwitch = 1;
  6121  115C  086D               	movf	_DimmerLights,w
  6122  115D  0086               	movwf	6
  6123  115E  3001               	movlw	1	; select bank2/3
  6124  115F  0087               	movwf	7
  6125  1160  1681               	bsf	1,5
  6126  1161  0008               	return
  6127  1162                     __end_of_setDimmerLights_DimmingOn:	
  6128                           
  6129                           	psect	text16
  6130  1F9F                     __ptext16:	
  6131 ;; *************** function _getSw_KeyStatus *****************
  6132 ;; Defined at:
  6133 ;;		line 223 in file "../src/Switch_B1.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  sw              1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  sw              1    6[COMMON] unsigned char 
  6138 ;;  status          1    5[COMMON] unsigned char 
  6139 ;; Return value:  Size  Location     Type
  6140 ;;                  1    wreg      unsigned char 
  6141 ;; Registers used:
  6142 ;;		wreg, status,2
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;Total ram usage:        5 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    3
  6155 ;; This function calls:
  6156 ;;		Nothing
  6157 ;; This function is called by:
  6158 ;;		_setSw_Main
  6159 ;; This function uses a non-reentrant model
  6160 ;;
  6161                           
  6162                           
  6163                           ;psect for function _getSw_KeyStatus
  6164  1F9F                     _getSw_KeyStatus:	
  6165                           
  6166                           ;incstack = 0
  6167                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6168                           ;getSw_KeyStatus@sw stored from wreg
  6169  1F9F  00F6               	movwf	getSw_KeyStatus@sw
  6170                           
  6171                           ;Switch_B1.c: 224: char status = 0;
  6172  1FA0  01F5               	clrf	getSw_KeyStatus@status
  6173                           
  6174                           ;Switch_B1.c: 236: if (sw == 1) {
  6175  1FA1  0876               	movf	getSw_KeyStatus@sw,w
  6176  1FA2  3A01               	xorlw	1
  6177  1FA3  1D03               	skipz
  6178  1FA4  2FAE               	goto	l7458
  6179                           
  6180                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6181  1FA5  01F3               	clrf	_getSw_KeyStatus$5955
  6182  1FA6  0AF3               	incf	_getSw_KeyStatus$5955,f
  6183  1FA7  0020               	movlb	0	; select bank0
  6184  1FA8  1F0C               	btfss	12,6	;volatile
  6185  1FA9  1A0C               	btfsc	12,4	;volatile
  6186  1FAA  2FAC               	goto	l7456
  6187  1FAB  01F3               	clrf	_getSw_KeyStatus$5955
  6188  1FAC                     l7456:	
  6189  1FAC  0873               	movf	_getSw_KeyStatus$5955,w
  6190  1FAD  2FBA               	goto	L2
  6191  1FAE                     l7458:	
  6192                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6193                           
  6194  1FAE  0876               	movf	getSw_KeyStatus@sw,w
  6195  1FAF  3A02               	xorlw	2
  6196  1FB0  1D03               	skipz
  6197  1FB1  2FBD               	goto	l7468
  6198                           
  6199                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6200  1FB2  01F4               	clrf	_getSw_KeyStatus$5956
  6201  1FB3  0AF4               	incf	_getSw_KeyStatus$5956,f
  6202  1FB4  0020               	movlb	0	; select bank0
  6203  1FB5  1C0C               	btfss	12,0	;volatile
  6204  1FB6  188D               	btfsc	13,1	;volatile
  6205  1FB7  2FB9               	goto	l7466
  6206  1FB8  01F4               	clrf	_getSw_KeyStatus$5956
  6207  1FB9                     l7466:	
  6208  1FB9  0874               	movf	_getSw_KeyStatus$5956,w
  6209  1FBA                     L2:	
  6210  1FBA  00F2               	movwf	??_getSw_KeyStatus
  6211  1FBB  0872               	movf	??_getSw_KeyStatus,w
  6212  1FBC  00F5               	movwf	getSw_KeyStatus@status
  6213  1FBD                     l7468:	
  6214                           
  6215                           ;Switch_B1.c: 240: }
  6216                           ;Switch_B1.c: 247: return status;
  6217  1FBD  0875               	movf	getSw_KeyStatus@status,w
  6218  1FBE  0008               	return
  6219  1FBF                     __end_of_getSw_KeyStatus:	
  6220                           
  6221                           	psect	text17
  6222  1E15                     __ptext17:	
  6223 ;; *************** function _SwPointSelect *****************
  6224 ;; Defined at:
  6225 ;;		line 25 in file "../src/Switch_B1.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  sw              1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  sw              1    3[COMMON] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;Total ram usage:        2 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    3
  6246 ;; This function calls:
  6247 ;;		Nothing
  6248 ;; This function is called by:
  6249 ;;		_setSw_Main
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _SwPointSelect
  6255  1E15                     _SwPointSelect:	
  6256                           
  6257                           ;incstack = 0
  6258                           ; Regs used in _SwPointSelect: [wreg]
  6259                           ;SwPointSelect@sw stored from wreg
  6260  1E15  00F3               	movwf	SwPointSelect@sw
  6261                           
  6262                           ;Switch_B1.c: 28: if (sw == 1) {
  6263  1E16  0873               	movf	SwPointSelect@sw,w
  6264  1E17  3A01               	xorlw	1
  6265  1E18  1D03               	skipz
  6266  1E19  2E20               	goto	l7442
  6267                           
  6268                           ;Switch_B1.c: 29: Sw = &Sw1;
  6269  1E1A  30D0               	movlw	_Sw1& (0+255)
  6270  1E1B  00F2               	movwf	??_SwPointSelect
  6271  1E1C  0872               	movf	??_SwPointSelect,w
  6272  1E1D  0020               	movlb	0	; select bank0
  6273  1E1E  00EE               	movwf	_Sw
  6274                           
  6275                           ;Switch_B1.c: 30: }
  6276  1E1F  0008               	return
  6277  1E20                     l7442:	
  6278                           
  6279                           ;Switch_B1.c: 33: else if (sw == 2) {
  6280  1E20  0873               	movf	SwPointSelect@sw,w
  6281  1E21  3A02               	xorlw	2
  6282  1E22  1D03               	skipz
  6283  1E23  0008               	return
  6284                           
  6285                           ;Switch_B1.c: 34: Sw = &Sw2;
  6286  1E24  30D9               	movlw	_Sw2& (0+255)
  6287  1E25  00F2               	movwf	??_SwPointSelect
  6288  1E26  0872               	movf	??_SwPointSelect,w
  6289  1E27  0020               	movlb	0	; select bank0
  6290  1E28  00EE               	movwf	_Sw
  6291  1E29  0008               	return
  6292  1E2A                     __end_of_SwPointSelect:	
  6293                           
  6294                           	psect	text18
  6295  1C17                     __ptext18:	
  6296 ;; *************** function _Switch_Initialization *****************
  6297 ;; Defined at:
  6298 ;;		line 46 in file "../src/Switch_B1.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;		None               void
  6305 ;; Registers used:
  6306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : 0/0
  6309 ;;		On exit  : 0/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;Total ram usage:        0 bytes
  6317 ;; Hardware stack levels used:    1
  6318 ;; Hardware stack levels required when called:    6
  6319 ;; This function calls:
  6320 ;;		_TouchPower
  6321 ;;		_setSw_Initialization
  6322 ;; This function is called by:
  6323 ;;		_main
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _Switch_Initialization
  6329  1C17                     _Switch_Initialization:	
  6330                           
  6331                           ;Switch_B1.c: 47: TouchPower();
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6335  1C17  319E  2600  319C   	fcall	_TouchPower
  6336                           
  6337                           ;Switch_B1.c: 49: WPUB1 = 0;
  6338  1C1A  0024               	movlb	4	; select bank4
  6339  1C1B  108D               	bcf	13,1	;volatile
  6340                           
  6341                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6342  1C1C  3001               	movlw	1
  6343  1C1D  319B  2367  319C   	fcall	_setSw_Initialization
  6344                           
  6345                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6346  1C20  3002               	movlw	2
  6347  1C21  319B  2367         	fcall	_setSw_Initialization
  6348  1C23  0008               	return
  6349  1C24                     __end_of_Switch_Initialization:	
  6350                           
  6351                           	psect	text19
  6352  1B67                     __ptext19:	
  6353 ;; *************** function _setSw_Initialization *****************
  6354 ;; Defined at:
  6355 ;;		line 93 in file "../src/Switch_B1.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  sw              1    wreg     unsigned char 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  sw              1    6[COMMON] unsigned char 
  6360 ;; Return value:  Size  Location     Type
  6361 ;;		None               void
  6362 ;; Registers used:
  6363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        1 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    5
  6376 ;; This function calls:
  6377 ;;		_setLED
  6378 ;; This function is called by:
  6379 ;;		_Switch_Initialization
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function _setSw_Initialization
  6385  1B67                     _setSw_Initialization:	
  6386                           
  6387                           ;incstack = 0
  6388                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6389                           ;setSw_Initialization@sw stored from wreg
  6390  1B67  00F6               	movwf	setSw_Initialization@sw
  6391                           
  6392                           ;Switch_B1.c: 94: setLED(sw, 1);
  6393  1B68  01F4               	clrf	setLED@command
  6394  1B69  0AF4               	incf	setLED@command,f
  6395  1B6A  0876               	movf	setSw_Initialization@sw,w
  6396  1B6B  3197  27A1         	fcall	_setLED
  6397  1B6D  0008               	return
  6398  1B6E                     __end_of_setSw_Initialization:	
  6399                           
  6400                           	psect	text20
  6401  1E00                     __ptext20:	
  6402 ;; *************** function _TouchPower *****************
  6403 ;; Defined at:
  6404 ;;		line 10 in file "../src/Switch_B1.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;		None
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;		None               void
  6411 ;; Registers used:
  6412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;Total ram usage:        0 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    4
  6425 ;; This function calls:
  6426 ;;		_Timeout_Counter
  6427 ;;		_set_TimeoutCleared
  6428 ;; This function is called by:
  6429 ;;		_Switch_Initialization
  6430 ;;		_Switch_Main
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           
  6435                           ;psect for function _TouchPower
  6436  1E00                     _TouchPower:	
  6437                           
  6438                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6439                           
  6440                           ;incstack = 0
  6441                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6442  1E00  0022               	movlb	2	; select bank2
  6443  1E01  1C20               	btfss	_myMain^(0+256),0
  6444  1E02  0008               	return
  6445                           
  6446                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6447  1E03  0020               	movlb	0	; select bank0
  6448  1E04  1A8E               	btfsc	14,5	;volatile
  6449  1E05  0008               	return
  6450  1E06  2E0C               	goto	l10326
  6451  1E07                     l2705:	
  6452                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6453                           
  6454                           
  6455                           ;Switch_B1.c: 14: RC5 = 1;
  6456  1E07  0020               	movlb	0	; select bank0
  6457  1E08  168E               	bsf	14,5	;volatile
  6458                           
  6459                           ;Switch_B1.c: 15: Timeout_Counter();
  6460  1E09  319E  262A  319E   	fcall	_Timeout_Counter
  6461  1E0C                     l10326:	
  6462  1E0C  0020               	movlb	0	; select bank0
  6463  1E0D  1A8E               	btfsc	14,5	;volatile
  6464  1E0E  2E12               	goto	l10330
  6465  1E0F  0022               	movlb	2	; select bank2
  6466  1E10  1D2B               	btfss	(_myMain^(0+256)+11),2
  6467  1E11  2E07               	goto	l2705
  6468  1E12                     l10330:	
  6469                           
  6470                           ;Switch_B1.c: 16: }
  6471                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6472  1E12  319B  233A         	fcall	_set_TimeoutCleared
  6473  1E14  0008               	return
  6474  1E15                     __end_of_TouchPower:	
  6475                           
  6476                           	psect	text21
  6477  1B3A                     __ptext21:	
  6478 ;; *************** function _set_TimeoutCleared *****************
  6479 ;; Defined at:
  6480 ;;		line 282 in file "../src/Main_B1.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		status,2
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    3
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		_getAD
  6505 ;;		_TouchPower
  6506 ;; This function uses a non-reentrant model
  6507 ;;
  6508                           
  6509                           
  6510                           ;psect for function _set_TimeoutCleared
  6511  1B3A                     _set_TimeoutCleared:	
  6512                           
  6513                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in _set_TimeoutCleared: [status,2]
  6517  1B3A  0022               	movlb	2	; select bank2
  6518  1B3B  112B               	bcf	(_myMain^(0+256)+11),2
  6519                           
  6520                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6521  1B3C  01AC               	clrf	(_myMain^(0+256)+12)
  6522  1B3D  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6523  1B3E  0008               	return
  6524  1B3F                     __end_of_set_TimeoutCleared:	
  6525                           
  6526                           	psect	text22
  6527  1E2A                     __ptext22:	
  6528 ;; *************** function _Timeout_Counter *****************
  6529 ;; Defined at:
  6530 ;;		line 273 in file "../src/Main_B1.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;		None               void
  6537 ;; Registers used:
  6538 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    3
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_getAD
  6555 ;;		_TouchPower
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           
  6560                           ;psect for function _Timeout_Counter
  6561  1E2A                     _Timeout_Counter:	
  6562                           
  6563                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6564                           
  6565                           ;incstack = 0
  6566                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6567  1E2A  3001               	movlw	1
  6568  1E2B  0022               	movlb	2	; select bank2
  6569  1E2C  07AC               	addwf	(_myMain^(0+256)+12),f
  6570  1E2D  3000               	movlw	0
  6571  1E2E  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6572                           
  6573                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6574  1E2F  300C               	movlw	12
  6575  1E30  3E20               	addlw	_myMain& (0+255)
  6576  1E31  0086               	movwf	6
  6577  1E32  3001               	movlw	1	; select bank2/3
  6578  1E33  0087               	movwf	7
  6579  1E34  3F40               	moviw [0]fsr1
  6580  1E35  3AA8               	xorlw	168
  6581  1E36  1D03               	skipz
  6582  1E37  2E3A               	goto	u11855
  6583  1E38  3F41               	moviw [1]fsr1
  6584  1E39  3A61               	xorlw	97
  6585  1E3A                     u11855:	
  6586  1E3A  1D03               	skipz
  6587  1E3B  0008               	return
  6588                           
  6589                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6590  1E3C  01AC               	clrf	(_myMain^(0+256)+12)
  6591  1E3D  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6592                           
  6593                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6594  1E3E  152B               	bsf	(_myMain^(0+256)+11),2
  6595  1E3F  0008               	return
  6596  1E40                     __end_of_Timeout_Counter:	
  6597                           
  6598                           	psect	text23
  6599  1B1C                     __ptext23:	
  6600 ;; *************** function _RF_Main *****************
  6601 ;; Defined at:
  6602 ;;		line 26 in file "../src/RF_Control_B1.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;		None
  6605 ;; Auto vars:     Size  Location     Type
  6606 ;;		None
  6607 ;; Return value:  Size  Location     Type
  6608 ;;		None               void
  6609 ;; Registers used:
  6610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6611 ;; Tracked objects:
  6612 ;;		On entry : 0/0
  6613 ;;		On exit  : 0/0
  6614 ;;		Unchanged: 0/0
  6615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;Total ram usage:        0 bytes
  6621 ;; Hardware stack levels used:    1
  6622 ;; Hardware stack levels required when called:   10
  6623 ;; This function calls:
  6624 ;;		_setRF_Main
  6625 ;; This function is called by:
  6626 ;;		_main
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           
  6631                           ;psect for function _RF_Main
  6632  1B1C                     _RF_Main:	
  6633                           
  6634                           ;RF_Control_B1.c: 28: setRF_Main();
  6635                           
  6636                           ;incstack = 0
  6637                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6638  1B1C  3186  260E         	fcall	_setRF_Main
  6639  1B1E  0008               	return
  6640  1B1F                     __end_of_RF_Main:	
  6641                           
  6642                           	psect	text24
  6643  060E                     __ptext24:	
  6644 ;; *************** function _setRF_Main *****************
  6645 ;; Defined at:
  6646 ;;		line 53 in file "../src/RF_Control_B1.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;		None
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;  error           1    1[BANK1 ] unsigned char 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;		None               void
  6653 ;; Registers used:
  6654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;Total ram usage:        2 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    9
  6667 ;; This function calls:
  6668 ;;		_CC2500_PowerOnInitial
  6669 ;;		_CC2500_RxData
  6670 ;;		_CC2500_TxData
  6671 ;;		_CC2500_WriteCommand
  6672 ;;		_RF_RxDisable
  6673 ;;		___lwdiv
  6674 ;;		_getBuz_GO
  6675 ;;		_getRF_KeyStatus
  6676 ;;		_getRxData
  6677 ;; This function is called by:
  6678 ;;		_RF_Main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _setRF_Main
  6684  060E                     _setRF_Main:	
  6685                           
  6686                           ;RF_Control_B1.c: 54: char error = 0;
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6690  060E  0021               	movlb	1	; select bank1
  6691  060F  01ED               	clrf	setRF_Main@error^(0+128)
  6692                           
  6693                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6694  0610  1C20               	btfss	_RF1^(0+128),0
  6695  0611  2EC6               	goto	l2321
  6696                           
  6697                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6698  0612  319C  24D8  3186   	fcall	_getBuz_GO
  6699  0615  0873               	movf	?_getBuz_GO+1,w
  6700  0616  0472               	iorwf	?_getBuz_GO,w
  6701  0617  1D03               	skipz
  6702  0618  2EA7               	goto	l10296
  6703                           
  6704                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6705  0619  319D  2529  3186   	fcall	_getRF_KeyStatus
  6706  061C  3A01               	xorlw	1
  6707  061D  3000               	movlw	0
  6708  061E  1903               	skipnz
  6709  061F  3001               	movlw	1
  6710  0620  0021               	movlb	1	; select bank1
  6711  0621  00EC               	movwf	??_setRF_Main^(0+128)
  6712  0622  0CEC               	rrf	??_setRF_Main^(0+128),f
  6713  0623  0CEC               	rrf	??_setRF_Main^(0+128),f
  6714  0624  0820               	movf	_RF1^(0+128),w
  6715  0625  066C               	xorwf	??_setRF_Main^(0+128),w
  6716  0626  397F               	andlw	-129
  6717  0627  066C               	xorwf	??_setRF_Main^(0+128),w
  6718  0628  00A0               	movwf	_RF1^(0+128)
  6719                           
  6720                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6721  0629  1FA0               	btfss	_RF1^(0+128),7
  6722  062A  2E2D               	goto	l2325
  6723  062B  1F20               	btfss	_RF1^(0+128),6
  6724  062C  2EA7               	goto	l10296
  6725  062D                     l2325:	
  6726                           
  6727                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6728  062D  1D20               	btfss	_RF1^(0+128),2
  6729  062E  2E6E               	goto	l2326
  6730                           
  6731                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6732  062F  1B20               	btfsc	_RF1^(0+128),6
  6733  0630  2E69               	goto	l10268
  6734                           
  6735                           ;RF_Control_B1.c: 68: RF1.Count++;
  6736  0631  3001               	movlw	1
  6737  0632  07A2               	addwf	(_RF1^(0+128)+2),f
  6738  0633  3000               	movlw	0
  6739  0634  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6740                           
  6741                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6742  0635  3014               	movlw	20
  6743  0636  00F2               	movwf	___lwdiv@divisor
  6744  0637  3000               	movlw	0
  6745  0638  00F3               	movwf	___lwdiv@divisor+1
  6746  0639  0828               	movf	((_RF1+1)^(0+128)+7),w
  6747  063A  01F5               	clrf	___lwdiv@dividend+1
  6748  063B  07F5               	addwf	___lwdiv@dividend+1,f
  6749  063C  0827               	movf	(_RF1^(0+128)+7),w
  6750  063D  01F4               	clrf	___lwdiv@dividend
  6751  063E  07F4               	addwf	___lwdiv@dividend,f
  6752  063F  3192  229D  3186   	fcall	___lwdiv
  6753  0642  0873               	movf	?___lwdiv+1,w
  6754  0643  0021               	movlb	1	; select bank1
  6755  0644  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6756  0645  1D03               	skipz
  6757  0646  2E49               	goto	u12525
  6758  0647  0872               	movf	?___lwdiv,w
  6759  0648  0222               	subwf	(_RF1^(0+128)+2),w
  6760  0649                     u12525:	
  6761  0649  1C03               	skipc
  6762  064A  2EA7               	goto	l10296
  6763                           
  6764                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6765  064B  3014               	movlw	20
  6766  064C  00F2               	movwf	___lwdiv@divisor
  6767  064D  3000               	movlw	0
  6768  064E  00F3               	movwf	___lwdiv@divisor+1
  6769  064F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6770  0650  01F5               	clrf	___lwdiv@dividend+1
  6771  0651  07F5               	addwf	___lwdiv@dividend+1,f
  6772  0652  0827               	movf	(_RF1^(0+128)+7),w
  6773  0653  01F4               	clrf	___lwdiv@dividend
  6774  0654  07F4               	addwf	___lwdiv@dividend,f
  6775  0655  3192  229D  3186   	fcall	___lwdiv
  6776  0658  0873               	movf	?___lwdiv+1,w
  6777  0659  0021               	movlb	1	; select bank1
  6778  065A  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6779  065B  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6780  065C  0872               	movf	?___lwdiv,w
  6781  065D  01A2               	clrf	(_RF1^(0+128)+2)
  6782  065E  07A2               	addwf	(_RF1^(0+128)+2),f
  6783                           
  6784                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6785  065F  1120               	bcf	_RF1^(0+128),2
  6786                           
  6787                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6788  0660  01AA               	clrf	(_RF1^(0+128)+10)
  6789  0661  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6790                           
  6791                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6792  0662  319C  248A  3186   	fcall	_RF_RxDisable
  6793                           
  6794                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6795  0665  318A  222D  3186   	fcall	_CC2500_TxData
  6796                           
  6797                           ;RF_Control_B1.c: 77: }
  6798                           ;RF_Control_B1.c: 78: } else {
  6799  0668  2EA7               	goto	l10296
  6800  0669                     l10268:	
  6801                           
  6802                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6803  0669  0021               	movlb	1	; select bank1
  6804  066A  01A2               	clrf	(_RF1^(0+128)+2)
  6805  066B  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6806                           
  6807                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6808  066C  1120               	bcf	_RF1^(0+128),2
  6809                           
  6810                           ;RF_Control_B1.c: 81: }
  6811                           ;RF_Control_B1.c: 82: } else {
  6812  066D  2EA7               	goto	l10296
  6813  066E                     l2326:	
  6814                           
  6815                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6816  066E  1DA0               	btfss	_RF1^(0+128),3
  6817  066F  2E7D               	goto	l10282
  6818                           
  6819                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6820  0670  3188  209D  3186   	fcall	_CC2500_RxData
  6821                           
  6822                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6823  0673  0021               	movlb	1	; select bank1
  6824  0674  1CA0               	btfss	_RF1^(0+128),1
  6825  0675  2EA7               	goto	l10296
  6826                           
  6827                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6828  0676  10A0               	bcf	_RF1^(0+128),1
  6829                           
  6830                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6831  0677  01AA               	clrf	(_RF1^(0+128)+10)
  6832  0678  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6833                           
  6834                           ;RF_Control_B1.c: 97: getRxData();
  6835  0679  318A  2295  3186   	fcall	_getRxData
  6836                           
  6837                           ;RF_Control_B1.c: 100: }
  6838                           ;RF_Control_B1.c: 101: } else {
  6839  067C  2EA7               	goto	l10296
  6840  067D                     l10282:	
  6841                           
  6842                           ;RF_Control_B1.c: 102: RF1.Count++;
  6843  067D  3001               	movlw	1
  6844  067E  0021               	movlb	1	; select bank1
  6845  067F  07A2               	addwf	(_RF1^(0+128)+2),f
  6846  0680  3000               	movlw	0
  6847  0681  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6848                           
  6849                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6850  0682  3014               	movlw	20
  6851  0683  00F2               	movwf	___lwdiv@divisor
  6852  0684  3000               	movlw	0
  6853  0685  00F3               	movwf	___lwdiv@divisor+1
  6854  0686  0828               	movf	((_RF1+1)^(0+128)+7),w
  6855  0687  01F5               	clrf	___lwdiv@dividend+1
  6856  0688  07F5               	addwf	___lwdiv@dividend+1,f
  6857  0689  0827               	movf	(_RF1^(0+128)+7),w
  6858  068A  01F4               	clrf	___lwdiv@dividend
  6859  068B  07F4               	addwf	___lwdiv@dividend,f
  6860  068C  3192  229D  3186   	fcall	___lwdiv
  6861  068F  0873               	movf	?___lwdiv+1,w
  6862  0690  0021               	movlb	1	; select bank1
  6863  0691  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6864  0692  1D03               	skipz
  6865  0693  2E96               	goto	u12555
  6866  0694  0872               	movf	?___lwdiv,w
  6867  0695  0222               	subwf	(_RF1^(0+128)+2),w
  6868  0696                     u12555:	
  6869  0696  1C03               	skipc
  6870  0697  2EA7               	goto	l10296
  6871                           
  6872                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6873  0698  01A2               	clrf	(_RF1^(0+128)+2)
  6874  0699  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6875                           
  6876                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6877  069A  15A0               	bsf	_RF1^(0+128),3
  6878                           
  6879                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6880  069B  3036               	movlw	54
  6881  069C  319E  26A1  3186   	fcall	_CC2500_WriteCommand
  6882                           
  6883                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6884  069F  303A               	movlw	58
  6885  06A0  319E  26A1  3186   	fcall	_CC2500_WriteCommand
  6886                           
  6887                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6888  06A3  3034               	movlw	52
  6889  06A4  319E  26A1  3186   	fcall	_CC2500_WriteCommand
  6890  06A7                     l10296:	
  6891                           
  6892                           ;RF_Control_B1.c: 111: }
  6893                           ;RF_Control_B1.c: 112: }
  6894                           ;RF_Control_B1.c: 113: }
  6895                           ;RF_Control_B1.c: 114: }
  6896                           ;RF_Control_B1.c: 115: }
  6897                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6898  06A7  3001               	movlw	1
  6899  06A8  0021               	movlb	1	; select bank1
  6900  06A9  07AA               	addwf	(_RF1^(0+128)+10),f
  6901  06AA  3000               	movlw	0
  6902  06AB  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6903                           
  6904                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6905  06AC  300B               	movlw	11
  6906  06AD  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6907  06AE  30B9               	movlw	185
  6908  06AF  1903               	skipnz
  6909  06B0  022A               	subwf	(_RF1^(0+128)+10),w
  6910  06B1  1C03               	skipc
  6911  06B2  2EBF               	goto	l10310
  6912                           
  6913                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6914  06B3  01AA               	clrf	(_RF1^(0+128)+10)
  6915  06B4  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6916                           
  6917                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6918  06B5  11A0               	bcf	_RF1^(0+128),3
  6919                           
  6920                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6921  06B6  10A0               	bcf	_RF1^(0+128),1
  6922                           
  6923                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6924  06B7  3036               	movlw	54
  6925  06B8  319E  26A1  3186   	fcall	_CC2500_WriteCommand
  6926                           
  6927                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6928  06BB  303A               	movlw	58
  6929  06BC  319E  26A1  3186   	fcall	_CC2500_WriteCommand
  6930  06BF                     l10310:	
  6931                           
  6932                           ;RF_Control_B1.c: 125: }
  6933                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6934  06BF  0021               	movlb	1	; select bank1
  6935  06C0  1F21               	btfss	(_RF1^(0+128)+1),6
  6936  06C1  0008               	return
  6937                           
  6938                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6939  06C2  1321               	bcf	(_RF1^(0+128)+1),6
  6940                           
  6941                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6942  06C3  319D  25EB         	fcall	_CC2500_PowerOnInitial
  6943                           
  6944                           ;RF_Control_B1.c: 130: }
  6945                           ;RF_Control_B1.c: 132: } else {
  6946  06C5  0008               	return
  6947  06C6                     l2321:	
  6948                           
  6949                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6950  06C6  0022               	movlb	2	; select bank2
  6951  06C7  1C20               	btfss	_myMain^(0+256),0
  6952  06C8  0008               	return
  6953                           
  6954                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6955  06C9  0021               	movlb	1	; select bank1
  6956  06CA  1420               	bsf	_RF1^(0+128),0
  6957  06CB  0008               	return
  6958  06CC                     __end_of_setRF_Main:	
  6959                           
  6960                           	psect	text25
  6961  0A95                     __ptext25:	
  6962 ;; *************** function _getRxData *****************
  6963 ;; Defined at:
  6964 ;;		line 226 in file "../src/RF_Control_B1.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  error           1   76[BANK0 ] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        2 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    8
  6985 ;; This function calls:
  6986 ;;		_getMain_All_Error_Status
  6987 ;;		_setControl_Lights_Table
  6988 ;;		_setLog_Code
  6989 ;;		_setTxData
  6990 ;; This function is called by:
  6991 ;;		_setRF_Main
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _getRxData
  6997  0A95                     _getRxData:	
  6998                           
  6999                           ;RF_Control_B1.c: 228: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7003  0A95  0023               	movlb	3	; select bank3
  7004  0A96  0820               	movf	_RF_Data^(0+384),w
  7005  0A97  3AAA               	xorlw	170
  7006  0A98  1D03               	skipz
  7007  0A99  2AAB               	goto	l10016
  7008  0A9A  0821               	movf	(_RF_Data^(0+384)+1),w
  7009  0A9B  3A01               	xorlw	1
  7010  0A9C  1D03               	skipz
  7011  0A9D  2AAB               	goto	l10016
  7012                           
  7013                           ;RF_Control_B1.c: 229: product->Data[2] = 0x55;
  7014  0A9E  3055               	movlw	85
  7015  0A9F  0020               	movlb	0	; select bank0
  7016  0AA0  00EB               	movwf	??_getRxData
  7017  0AA1  086F               	movf	_product,w
  7018  0AA2  3E02               	addlw	2
  7019  0AA3  0086               	movwf	6
  7020  0AA4  3002               	movlw	2	; select bank4/5
  7021  0AA5  0087               	movwf	7
  7022  0AA6  086B               	movf	??_getRxData,w
  7023  0AA7  0081               	movwf	1
  7024                           
  7025                           ;RF_Control_B1.c: 230: setTxData();
  7026  0AA8  318F  274C         	fcall	_setTxData
  7027                           
  7028                           ;RF_Control_B1.c: 234: } else {
  7029  0AAA  0008               	return
  7030  0AAB                     l10016:	
  7031                           
  7032                           ;RF_Control_B1.c: 235: char error = getMain_All_Error_Status(0);
  7033  0AAB  3000               	movlw	0
  7034  0AAC  3192  2208  318A   	fcall	_getMain_All_Error_Status
  7035  0AAF  0020               	movlb	0	; select bank0
  7036  0AB0  00EB               	movwf	??_getRxData
  7037  0AB1  086B               	movf	??_getRxData,w
  7038  0AB2  00EC               	movwf	getRxData@error
  7039                           
  7040                           ;RF_Control_B1.c: 236: if (error == 0) {
  7041  0AB3  08EC               	movf	getRxData@error,f
  7042  0AB4  1D03               	skipz
  7043  0AB5  2AFE               	goto	l2366
  7044                           
  7045                           ;RF_Control_B1.c: 237: if (RF1.Learn == 1) {
  7046  0AB6  0021               	movlb	1	; select bank1
  7047  0AB7  1F20               	btfss	_RF1^(0+128),6
  7048  0AB8  2AC4               	goto	l10028
  7049                           
  7050                           ;RF_Control_B1.c: 239: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7051  0AB9  0023               	movlb	3	; select bank3
  7052  0ABA  08A0               	movf	_RF_Data^(0+384),f
  7053  0ABB  1D03               	skipz
  7054  0ABC  0008               	return
  7055  0ABD  0821               	movf	(_RF_Data^(0+384)+1),w
  7056  0ABE  3A64               	xorlw	100
  7057  0ABF  1D03               	skipz
  7058  0AC0  0008               	return
  7059                           
  7060                           ;RF_Control_B1.c: 240: setLog_Code();
  7061  0AC1  3192  2269         	fcall	_setLog_Code
  7062                           
  7063                           ;RF_Control_B1.c: 241: }
  7064                           ;RF_Control_B1.c: 242: } else {
  7065  0AC3  0008               	return
  7066  0AC4                     l10028:	
  7067                           
  7068                           ;RF_Control_B1.c: 244: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7069  0AC4  0023               	movlb	3	; select bank3
  7070  0AC5  08A0               	movf	_RF_Data^(0+384),f
  7071  0AC6  1D03               	skipz
  7072  0AC7  0008               	return
  7073  0AC8  0821               	movf	(_RF_Data^(0+384)+1),w
  7074  0AC9  3A02               	xorlw	2
  7075  0ACA  1D03               	skipz
  7076  0ACB  0008               	return
  7077                           
  7078                           ;RF_Control_B1.c: 246: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7079  0ACC  082C               	movf	(_RF_Data^(0+384)+12),w
  7080  0ACD  3AFF               	xorlw	255
  7081  0ACE  1D03               	skipz
  7082  0ACF  2ADA               	goto	l10040
  7083  0AD0  082D               	movf	(_RF_Data^(0+384)+13),w
  7084  0AD1  3AFF               	xorlw	255
  7085  0AD2  1D03               	skipz
  7086  0AD3  2ADA               	goto	l10040
  7087  0AD4  082E               	movf	(_RF_Data^(0+384)+14),w
  7088  0AD5  3AFF               	xorlw	255
  7089  0AD6  1D03               	skipz
  7090  0AD7  2ADA               	goto	l10040
  7091                           
  7092                           ;RF_Control_B1.c: 247: __nop();
  7093  0AD8  0000               	nop
  7094                           
  7095                           ;RF_Control_B1.c: 248: } else {
  7096  0AD9  0008               	return
  7097  0ADA                     l10040:	
  7098                           
  7099                           ;RF_Control_B1.c: 249: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7100  0ADA  0020               	movlb	0	; select bank0
  7101  0ADB  086F               	movf	_product,w
  7102  0ADC  3E0C               	addlw	12
  7103  0ADD  0086               	movwf	6
  7104  0ADE  3002               	movlw	2	; select bank4/5
  7105  0ADF  0087               	movwf	7
  7106  0AE0  0023               	movlb	3	; select bank3
  7107  0AE1  082C               	movf	(_RF_Data^(0+384)+12),w
  7108  0AE2  0601               	xorwf	1,w
  7109  0AE3  1D03               	skipz
  7110  0AE4  0008               	return
  7111  0AE5  0020               	movlb	0	; select bank0
  7112  0AE6  086F               	movf	_product,w
  7113  0AE7  3E0D               	addlw	13
  7114  0AE8  0086               	movwf	6
  7115  0AE9  3002               	movlw	2	; select bank4/5
  7116  0AEA  0087               	movwf	7
  7117  0AEB  0023               	movlb	3	; select bank3
  7118  0AEC  082D               	movf	(_RF_Data^(0+384)+13),w
  7119  0AED  0601               	xorwf	1,w
  7120  0AEE  1D03               	skipz
  7121  0AEF  0008               	return
  7122  0AF0  0020               	movlb	0	; select bank0
  7123  0AF1  086F               	movf	_product,w
  7124  0AF2  3E0E               	addlw	14
  7125  0AF3  0086               	movwf	6
  7126  0AF4  3002               	movlw	2	; select bank4/5
  7127  0AF5  0087               	movwf	7
  7128  0AF6  0023               	movlb	3	; select bank3
  7129  0AF7  082E               	movf	(_RF_Data^(0+384)+14),w
  7130  0AF8  0601               	xorwf	1,w
  7131  0AF9  1D03               	skipz
  7132  0AFA  0008               	return
  7133                           
  7134                           ;RF_Control_B1.c: 250: setControl_Lights_Table();
  7135  0AFB  318B  2371         	fcall	_setControl_Lights_Table
  7136                           
  7137                           ;RF_Control_B1.c: 251: }
  7138                           ;RF_Control_B1.c: 252: }
  7139                           ;RF_Control_B1.c: 254: }
  7140                           ;RF_Control_B1.c: 265: }
  7141                           ;RF_Control_B1.c: 266: } else {
  7142  0AFD  0008               	return
  7143  0AFE                     l2366:	
  7144                           
  7145                           ;RF_Control_B1.c: 267: __nop();
  7146  0AFE  0000               	nop
  7147  0AFF  0008               	return
  7148  0B00                     __end_of_getRxData:	
  7149                           
  7150                           	psect	text26
  7151  1269                     __ptext26:	
  7152 ;; *************** function _setLog_Code *****************
  7153 ;; Defined at:
  7154 ;;		line 273 in file "../src/RF_Control_B1.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;		None
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;		None
  7159 ;; Return value:  Size  Location     Type
  7160 ;;		None               void
  7161 ;; Registers used:
  7162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;Total ram usage:        1 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    5
  7175 ;; This function calls:
  7176 ;;		_setBuz
  7177 ;;		_setMemory_LoopSave
  7178 ;;		_setMemory_Modify
  7179 ;;		_setProductData
  7180 ;; This function is called by:
  7181 ;;		_getRxData
  7182 ;; This function uses a non-reentrant model
  7183 ;;
  7184                           
  7185                           
  7186                           ;psect for function _setLog_Code
  7187  1269                     _setLog_Code:	
  7188                           
  7189                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7190                           
  7191                           ;incstack = 0
  7192                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7193  1269  0021               	movlb	1	; select bank1
  7194  126A  1320               	bcf	_RF1^(0+128),6
  7195                           
  7196                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7197  126B  0023               	movlb	3	; select bank3
  7198  126C  082C               	movf	(_RF_Data^(0+384)+12),w
  7199  126D  0020               	movlb	0	; select bank0
  7200  126E  00DE               	movwf	??_setLog_Code
  7201  126F  085E               	movf	??_setLog_Code,w
  7202  1270  00DA               	movwf	setProductData@value
  7203  1271  300C               	movlw	12
  7204  1272  319C  2440  3192   	fcall	_setProductData
  7205                           
  7206                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7207  1275  0023               	movlb	3	; select bank3
  7208  1276  082D               	movf	(_RF_Data^(0+384)+13),w
  7209  1277  0020               	movlb	0	; select bank0
  7210  1278  00DE               	movwf	??_setLog_Code
  7211  1279  085E               	movf	??_setLog_Code,w
  7212  127A  00DA               	movwf	setProductData@value
  7213  127B  300D               	movlw	13
  7214  127C  319C  2440  3192   	fcall	_setProductData
  7215                           
  7216                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7217  127F  0023               	movlb	3	; select bank3
  7218  1280  082E               	movf	(_RF_Data^(0+384)+14),w
  7219  1281  0020               	movlb	0	; select bank0
  7220  1282  00DE               	movwf	??_setLog_Code
  7221  1283  085E               	movf	??_setLog_Code,w
  7222  1284  00DA               	movwf	setProductData@value
  7223  1285  300E               	movlw	14
  7224  1286  319C  2440  3192   	fcall	_setProductData
  7225                           
  7226                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7227  1289  3064               	movlw	100
  7228  128A  0020               	movlb	0	; select bank0
  7229  128B  00A4               	movwf	setBuz@time
  7230  128C  3000               	movlw	0
  7231  128D  00A5               	movwf	setBuz@time+1
  7232  128E  3001               	movlw	1
  7233  128F  3195  25E6  3192   	fcall	_setBuz
  7234                           
  7235                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7236  1292  0022               	movlb	2	; select bank2
  7237  1293  1EA0               	btfss	_myMain^(0+256),5
  7238  1294  2A99               	goto	l2378
  7239                           
  7240                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7241  1295  3001               	movlw	1
  7242  1296  319C  24F8  3192   	fcall	_setMemory_LoopSave
  7243  1299                     l2378:	
  7244                           
  7245                           ;RF_Control_B1.c: 281: }
  7246                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7247  1299  3001               	movlw	1
  7248  129A  319C  24E8         	fcall	_setMemory_Modify
  7249  129C  0008               	return
  7250  129D                     __end_of_setLog_Code:	
  7251                           
  7252                           	psect	text27
  7253  1CF8                     __ptext27:	
  7254 ;; *************** function _setMemory_LoopSave *****************
  7255 ;; Defined at:
  7256 ;;		line 1079 in file "../src/MCU_B1.c"
  7257 ;; Parameters:    Size  Location     Type
  7258 ;;  command         1    wreg     unsigned char 
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;  command         1    3[COMMON] unsigned char 
  7261 ;; Return value:  Size  Location     Type
  7262 ;;		None               void
  7263 ;; Registers used:
  7264 ;;		wreg, status,2, status,0
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;Total ram usage:        2 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    3
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		_setLog_Code
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           
  7285                           ;psect for function _setMemory_LoopSave
  7286  1CF8                     _setMemory_LoopSave:	
  7287                           
  7288                           ;incstack = 0
  7289                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7290                           ;setMemory_LoopSave@command stored from wreg
  7291  1CF8  00F3               	movwf	setMemory_LoopSave@command
  7292                           
  7293                           ;MCU_B1.c: 1080: Memory.LoopSave = command == 1 ? 1 : 0;
  7294  1CF9  0873               	movf	setMemory_LoopSave@command,w
  7295  1CFA  3A01               	xorlw	1
  7296  1CFB  3000               	movlw	0
  7297  1CFC  1903               	skipnz
  7298  1CFD  3001               	movlw	1
  7299  1CFE  00F2               	movwf	??_setMemory_LoopSave
  7300  1CFF  0DF2               	rlf	??_setMemory_LoopSave,f
  7301  1D00  0DF2               	rlf	??_setMemory_LoopSave,f
  7302  1D01  0024               	movlb	4	; select bank4
  7303  1D02  0844               	movf	(_Memory^(0+512)+36),w
  7304  1D03  0672               	xorwf	??_setMemory_LoopSave,w
  7305  1D04  39FB               	andlw	-5
  7306  1D05  0672               	xorwf	??_setMemory_LoopSave,w
  7307  1D06  00C4               	movwf	(_Memory^(0+512)+36)
  7308  1D07  0008               	return
  7309  1D08                     __end_of_setMemory_LoopSave:	
  7310                           
  7311                           	psect	text28
  7312  0B71                     __ptext28:	
  7313 ;; *************** function _setControl_Lights_Table *****************
  7314 ;; Defined at:
  7315 ;;		line 286 in file "../src/RF_Control_B1.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;		None               void
  7322 ;; Registers used:
  7323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;Total ram usage:        0 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    7
  7336 ;; This function calls:
  7337 ;;		_getDimmerLights_Status
  7338 ;;		_setDimmerLights_SwOff
  7339 ;;		_setDimmerLights_SwOn
  7340 ;;		_setProductData
  7341 ;;		_setRFSW_AdjControl
  7342 ;;		_setRFSW_Control
  7343 ;;		_setTxData
  7344 ;; This function is called by:
  7345 ;;		_getRxData
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           
  7350                           ;psect for function _setControl_Lights_Table
  7351  0B71                     _setControl_Lights_Table:	
  7352                           
  7353                           ;RF_Control_B1.c: 287: switch (RF_Data[15]) {
  7354                           
  7355                           ;incstack = 0
  7356                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7357  0B71  2BD0               	goto	l9778
  7358  0B72                     l9760:	
  7359                           ;RF_Control_B1.c: 289: case 0x00:
  7360                           
  7361                           
  7362                           ;RF_Control_B1.c: 292: if (getDimmerLights_Status(1) == 1) {
  7363  0B72  3001               	movlw	1
  7364  0B73  319C  244E  318B   	fcall	_getDimmerLights_Status
  7365  0B76  3A01               	xorlw	1
  7366  0B77  1D03               	skipz
  7367  0B78  2B81               	goto	l2384
  7368                           
  7369                           ;RF_Control_B1.c: 293: setDimmerLights_SwOn(1);
  7370  0B79  3001               	movlw	1
  7371  0B7A  3196  268D  318B   	fcall	_setDimmerLights_SwOn
  7372                           
  7373                           ;RF_Control_B1.c: 294: setDimmerLights_SwOff(1);
  7374  0B7D  3001               	movlw	1
  7375  0B7E  3194  240E  318B   	fcall	_setDimmerLights_SwOff
  7376  0B81                     l2384:	
  7377                           
  7378                           ;RF_Control_B1.c: 295: }
  7379                           ;RF_Control_B1.c: 298: if (getDimmerLights_Status(2) == 1) {
  7380  0B81  3002               	movlw	2
  7381  0B82  319C  244E  318B   	fcall	_getDimmerLights_Status
  7382  0B85  3A01               	xorlw	1
  7383  0B86  1D03               	skipz
  7384  0B87  2B90               	goto	l2385
  7385                           
  7386                           ;RF_Control_B1.c: 299: setDimmerLights_SwOn(2);
  7387  0B88  3002               	movlw	2
  7388  0B89  3196  268D  318B   	fcall	_setDimmerLights_SwOn
  7389                           
  7390                           ;RF_Control_B1.c: 300: setDimmerLights_SwOff(2);
  7391  0B8C  3002               	movlw	2
  7392  0B8D  3194  240E  318B   	fcall	_setDimmerLights_SwOff
  7393  0B90                     l2385:	
  7394                           
  7395                           ;RF_Control_B1.c: 301: }
  7396                           ;RF_Control_B1.c: 310: setProductData(9, 0);
  7397  0B90  0020               	movlb	0	; select bank0
  7398  0B91  01DA               	clrf	setProductData@value
  7399  0B92  3009               	movlw	9
  7400  0B93  319C  2440  318B   	fcall	_setProductData
  7401                           
  7402                           ;RF_Control_B1.c: 311: setProductData(11, 0);
  7403  0B96  0020               	movlb	0	; select bank0
  7404  0B97  01DA               	clrf	setProductData@value
  7405  0B98  300B               	movlw	11
  7406  0B99  319C  2440  318B   	fcall	_setProductData
  7407                           
  7408                           ;RF_Control_B1.c: 312: setProductData(15, 0);
  7409  0B9C  0020               	movlb	0	; select bank0
  7410  0B9D  01DA               	clrf	setProductData@value
  7411  0B9E  300F               	movlw	15
  7412  0B9F  319C  2440  318B   	fcall	_setProductData
  7413                           
  7414                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7415  0BA2  0020               	movlb	0	; select bank0
  7416  0BA3  01DA               	clrf	setProductData@value
  7417  0BA4  3011               	movlw	17
  7418  0BA5  319C  2440  318B   	fcall	_setProductData
  7419                           
  7420                           ;RF_Control_B1.c: 315: setTxData();
  7421  0BA8  318F  274C         	fcall	_setTxData
  7422                           
  7423                           ;RF_Control_B1.c: 316: break;
  7424  0BAA  0008               	return
  7425  0BAB                     l9766:	
  7426                           ;RF_Control_B1.c: 318: case 0x20:
  7427                           
  7428                           
  7429                           ;RF_Control_B1.c: 319: setProductData(9, 0);
  7430  0BAB  0020               	movlb	0	; select bank0
  7431  0BAC  01DA               	clrf	setProductData@value
  7432  0BAD  3009               	movlw	9
  7433  0BAE  319C  2440  318B   	fcall	_setProductData
  7434                           
  7435                           ;RF_Control_B1.c: 320: setProductData(11, 0);
  7436  0BB1  0020               	movlb	0	; select bank0
  7437  0BB2  01DA               	clrf	setProductData@value
  7438  0BB3  300B               	movlw	11
  7439  0BB4  319C  2440  318B   	fcall	_setProductData
  7440                           
  7441                           ;RF_Control_B1.c: 321: setProductData(17, 0);
  7442  0BB7  0020               	movlb	0	; select bank0
  7443  0BB8  01DA               	clrf	setProductData@value
  7444  0BB9  3011               	movlw	17
  7445  0BBA  319C  2440  318B   	fcall	_setProductData
  7446                           
  7447                           ;RF_Control_B1.c: 322: setTxData();
  7448  0BBD  318F  274C         	fcall	_setTxData
  7449                           
  7450                           ;RF_Control_B1.c: 323: break;
  7451  0BBF  0008               	return
  7452  0BC0                     l9768:	
  7453                           ;RF_Control_B1.c: 326: case 0x01:
  7454                           
  7455                           
  7456                           ;RF_Control_B1.c: 327: setRFSW_Control(1);
  7457  0BC0  3001               	movlw	1
  7458  0BC1  3194  24A1         	fcall	_setRFSW_Control
  7459                           
  7460                           ;RF_Control_B1.c: 328: break;
  7461  0BC3  0008               	return
  7462  0BC4                     l9770:	
  7463                           ;RF_Control_B1.c: 333: case 0x02:
  7464                           
  7465                           
  7466                           ;RF_Control_B1.c: 334: setRFSW_Control(2);
  7467  0BC4  3002               	movlw	2
  7468  0BC5  3194  24A1         	fcall	_setRFSW_Control
  7469                           
  7470                           ;RF_Control_B1.c: 335: break;
  7471  0BC7  0008               	return
  7472  0BC8                     l9772:	
  7473                           ;RF_Control_B1.c: 348: case 0x11:
  7474                           
  7475                           
  7476                           ;RF_Control_B1.c: 349: setRFSW_AdjControl(1);
  7477  0BC8  3001               	movlw	1
  7478  0BC9  3187  2780         	fcall	_setRFSW_AdjControl
  7479                           
  7480                           ;RF_Control_B1.c: 350: break;
  7481  0BCB  0008               	return
  7482  0BCC                     l9774:	
  7483                           ;RF_Control_B1.c: 357: case 0x21:
  7484                           
  7485                           
  7486                           ;RF_Control_B1.c: 358: setRFSW_AdjControl(2);
  7487  0BCC  3002               	movlw	2
  7488  0BCD  3187  2780         	fcall	_setRFSW_AdjControl
  7489                           
  7490                           ;RF_Control_B1.c: 372: }
  7491                           
  7492                           ;RF_Control_B1.c: 359: break;
  7493  0BCF  0008               	return
  7494  0BD0                     l9778:	
  7495  0BD0  0023               	movlb	3	; select bank3
  7496  0BD1  082F               	movf	(_RF_Data^(0+384)+15),w
  7497                           
  7498                           ; Switch size 1, requested type "space"
  7499                           ; Number of cases is 6, Range of values is 0 to 33
  7500                           ; switch strategies available:
  7501                           ; Name         Instructions Cycles
  7502                           ; simple_byte           19    10 (average)
  7503                           ; direct_byte           74     6 (fixed)
  7504                           ; jumptable            260     6 (fixed)
  7505                           ;	Chosen strategy is simple_byte
  7506  0BD2  3A00               	xorlw	0	; case 0
  7507  0BD3  1903               	skipnz
  7508  0BD4  2B72               	goto	l9760
  7509  0BD5  3A01               	xorlw	1	; case 1
  7510  0BD6  1903               	skipnz
  7511  0BD7  2BC0               	goto	l9768
  7512  0BD8  3A03               	xorlw	3	; case 2
  7513  0BD9  1903               	skipnz
  7514  0BDA  2BC4               	goto	l9770
  7515  0BDB  3A13               	xorlw	19	; case 17
  7516  0BDC  1903               	skipnz
  7517  0BDD  2BC8               	goto	l9772
  7518  0BDE  3A31               	xorlw	49	; case 32
  7519  0BDF  1903               	skipnz
  7520  0BE0  2BAB               	goto	l9766
  7521  0BE1  3A01               	xorlw	1	; case 33
  7522  0BE2  1903               	skipnz
  7523  0BE3  2BCC               	goto	l9774
  7524  0BE4  2BE5               	goto	l2392
  7525  0BE5                     l2392:	
  7526  0BE5  0008               	return
  7527  0BE6                     __end_of_setControl_Lights_Table:	
  7528                           
  7529                           	psect	text29
  7530  14A1                     __ptext29:	
  7531 ;; *************** function _setRFSW_Control *****************
  7532 ;; Defined at:
  7533 ;;		line 380 in file "../src/RF_Control_B1.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;  sw              1    wreg     unsigned char 
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;  sw              1   73[BANK0 ] unsigned char 
  7538 ;;  status          1   72[BANK0 ] unsigned char 
  7539 ;; Return value:  Size  Location     Type
  7540 ;;		None               void
  7541 ;; Registers used:
  7542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7551 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7552 ;;Total ram usage:        3 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:    6
  7555 ;; This function calls:
  7556 ;;		_getDelayOff_GO
  7557 ;;		_getDimmerLights_Status
  7558 ;;		_setBuz
  7559 ;;		_setDelayOff_GO
  7560 ;;		_setDimmerLights_SwOff
  7561 ;;		_setDimmerLights_SwOn
  7562 ;;		_setRF_DimmerLights
  7563 ;;		_setTxData
  7564 ;; This function is called by:
  7565 ;;		_setControl_Lights_Table
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           
  7570                           ;psect for function _setRFSW_Control
  7571  14A1                     _setRFSW_Control:	
  7572                           
  7573                           ;incstack = 0
  7574                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7575                           ;setRFSW_Control@sw stored from wreg
  7576  14A1  0020               	movlb	0	; select bank0
  7577  14A2  00E9               	movwf	setRFSW_Control@sw
  7578                           
  7579                           ;RF_Control_B1.c: 381: char status = 0;
  7580  14A3  01E8               	clrf	setRFSW_Control@status
  7581                           
  7582                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7583  14A4  0023               	movlb	3	; select bank3
  7584  14A5  0830               	movf	(_RF_Data^(0+384)+16),w
  7585  14A6  3A80               	xorlw	128
  7586  14A7  1D03               	skipz
  7587  14A8  2CD5               	goto	l9540
  7588                           
  7589                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7590  14A9  0020               	movlb	0	; select bank0
  7591  14AA  01DE               	clrf	setDelayOff_GO@command
  7592  14AB  0ADE               	incf	setDelayOff_GO@command,f
  7593  14AC  0023               	movlb	3	; select bank3
  7594  14AD  0831               	movf	(_RF_Data^(0+384)+17),w
  7595  14AE  0020               	movlb	0	; select bank0
  7596  14AF  00E7               	movwf	??_setRFSW_Control
  7597  14B0  0867               	movf	??_setRFSW_Control,w
  7598  14B1  00DF               	movwf	setDelayOff_GO@value
  7599  14B2  0869               	movf	setRFSW_Control@sw,w
  7600  14B3  318B  23E6  3194   	fcall	_setDelayOff_GO
  7601                           
  7602                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7603  14B6  0020               	movlb	0	; select bank0
  7604  14B7  0869               	movf	setRFSW_Control@sw,w
  7605  14B8  319C  244E  3194   	fcall	_getDimmerLights_Status
  7606  14BB  3A01               	xorlw	1
  7607  14BC  1D03               	skipz
  7608  14BD  2CE4               	goto	l9544
  7609                           
  7610                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7611  14BE  3064               	movlw	100
  7612  14BF  0020               	movlb	0	; select bank0
  7613  14C0  00A4               	movwf	setBuz@time
  7614  14C1  3000               	movlw	0
  7615  14C2  00A5               	movwf	setBuz@time+1
  7616  14C3  3001               	movlw	1
  7617  14C4  3195  25E6  3194   	fcall	_setBuz
  7618                           
  7619                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  7620  14C7  0020               	movlb	0	; select bank0
  7621  14C8  01DE               	clrf	setRF_DimmerLights@on
  7622  14C9  0ADE               	incf	setRF_DimmerLights@on,f
  7623  14CA  0869               	movf	setRFSW_Control@sw,w
  7624  14CB  3197  2742  3194   	fcall	_setRF_DimmerLights
  7625                           
  7626                           ;RF_Control_B1.c: 388: setTxData();
  7627  14CE  318F  274C  3194   	fcall	_setTxData
  7628                           
  7629                           ;RF_Control_B1.c: 389: status = 1;
  7630  14D1  0020               	movlb	0	; select bank0
  7631  14D2  01E8               	clrf	setRFSW_Control@status
  7632  14D3  0AE8               	incf	setRFSW_Control@status,f
  7633                           
  7634                           ;RF_Control_B1.c: 390: }
  7635                           ;RF_Control_B1.c: 391: } else {
  7636  14D4  2CE4               	goto	l9544
  7637  14D5                     l9540:	
  7638                           
  7639                           ;RF_Control_B1.c: 393: if (getDelayOff_GO(sw) == 1) {
  7640  14D5  0020               	movlb	0	; select bank0
  7641  14D6  0869               	movf	setRFSW_Control@sw,w
  7642  14D7  319C  245D  3194   	fcall	_getDelayOff_GO
  7643  14DA  3A01               	xorlw	1
  7644  14DB  1D03               	skipz
  7645  14DC  2CE4               	goto	l9544
  7646                           
  7647                           ;RF_Control_B1.c: 394: setDelayOff_GO(sw, 0, 0);
  7648  14DD  0020               	movlb	0	; select bank0
  7649  14DE  01DE               	clrf	setDelayOff_GO@command
  7650  14DF  01DF               	clrf	setDelayOff_GO@value
  7651  14E0  0869               	movf	setRFSW_Control@sw,w
  7652  14E1  318B  23E6  3194   	fcall	_setDelayOff_GO
  7653  14E4                     l9544:	
  7654                           
  7655                           ;RF_Control_B1.c: 395: }
  7656                           ;RF_Control_B1.c: 397: }
  7657                           ;RF_Control_B1.c: 398: if (status == 0) {
  7658  14E4  0020               	movlb	0	; select bank0
  7659  14E5  08E8               	movf	setRFSW_Control@status,f
  7660  14E6  1D03               	skipz
  7661  14E7  0008               	return
  7662                           
  7663                           ;RF_Control_B1.c: 400: setDimmerLights_SwOn(sw);
  7664  14E8  0869               	movf	setRFSW_Control@sw,w
  7665  14E9  3196  268D  3194   	fcall	_setDimmerLights_SwOn
  7666                           
  7667                           ;RF_Control_B1.c: 401: setDimmerLights_SwOff(sw);
  7668  14EC  0020               	movlb	0	; select bank0
  7669  14ED  0869               	movf	setRFSW_Control@sw,w
  7670  14EE  3194  240E         	fcall	_setDimmerLights_SwOff
  7671  14F0  0008               	return
  7672  14F1                     __end_of_setRFSW_Control:	
  7673                           
  7674                           	psect	text30
  7675  0780                     __ptext30:	
  7676 ;; *************** function _setRFSW_AdjControl *****************
  7677 ;; Defined at:
  7678 ;;		line 407 in file "../src/RF_Control_B1.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  sw              1    wreg     unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  sw              1   74[BANK0 ] unsigned char 
  7683 ;;  status          1   73[BANK0 ] unsigned char 
  7684 ;; Return value:  Size  Location     Type
  7685 ;;		None               void
  7686 ;; Registers used:
  7687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : 0/0
  7690 ;;		On exit  : 0/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;Total ram usage:        4 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    6
  7700 ;; This function calls:
  7701 ;;		_getDimmerLights_PercentToValue
  7702 ;;		_getDimmerLights_Status
  7703 ;;		_setDimmerIntr_Dimming_RF
  7704 ;;		_setDimmerIntr_MaxmumValue
  7705 ;;		_setDimmerLights_DimmingRun
  7706 ;;		_setDimmerLights_SwOff
  7707 ;;		_setDimmerLights_SwOn
  7708 ;;		_setMemory_Modify
  7709 ;;		_setProductData
  7710 ;;		_setTxData
  7711 ;; This function is called by:
  7712 ;;		_setControl_Lights_Table
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function _setRFSW_AdjControl
  7718  0780                     _setRFSW_AdjControl:	
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7722                           ;setRFSW_AdjControl@sw stored from wreg
  7723  0780  0020               	movlb	0	; select bank0
  7724  0781  00EA               	movwf	setRFSW_AdjControl@sw
  7725                           
  7726                           ;RF_Control_B1.c: 408: char status = 0;
  7727  0782  01E9               	clrf	setRFSW_AdjControl@status
  7728                           
  7729                           ;RF_Control_B1.c: 410: status = getDimmerLights_Status(sw);
  7730  0783  086A               	movf	setRFSW_AdjControl@sw,w
  7731  0784  319C  244E  3187   	fcall	_getDimmerLights_Status
  7732  0787  0020               	movlb	0	; select bank0
  7733  0788  00E7               	movwf	??_setRFSW_AdjControl
  7734  0789  0867               	movf	??_setRFSW_AdjControl,w
  7735  078A  00E9               	movwf	setRFSW_AdjControl@status
  7736                           
  7737                           ;RF_Control_B1.c: 412: if (RF_Data[9] > 0x64) {
  7738  078B  3065               	movlw	101
  7739  078C  0023               	movlb	3	; select bank3
  7740  078D  0229               	subwf	(_RF_Data^(0+384)+9),w
  7741  078E  1C03               	skipc
  7742  078F  2F97               	goto	l9556
  7743                           
  7744                           ;RF_Control_B1.c: 413: RF_Data[9] = 0x64;
  7745  0790  3064               	movlw	100
  7746  0791  0020               	movlb	0	; select bank0
  7747  0792  00E7               	movwf	??_setRFSW_AdjControl
  7748  0793  0867               	movf	??_setRFSW_AdjControl,w
  7749  0794  0023               	movlb	3	; select bank3
  7750  0795  00A9               	movwf	(_RF_Data^(0+384)+9)
  7751                           
  7752                           ;RF_Control_B1.c: 414: } else if (RF_Data[9] < 0x01) {
  7753  0796  2F9C               	goto	l9560
  7754  0797                     l9556:	
  7755  0797  08A9               	movf	(_RF_Data^(0+384)+9),f
  7756  0798  1D03               	skipz
  7757  0799  2F9C               	goto	l9560
  7758                           
  7759                           ;RF_Control_B1.c: 415: RF_Data[9] = 0x01;
  7760  079A  01A9               	clrf	(_RF_Data^(0+384)+9)
  7761  079B  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7762  079C                     l9560:	
  7763                           
  7764                           ;RF_Control_B1.c: 416: }
  7765                           ;RF_Control_B1.c: 417: setProductData(9, RF_Data[9]);
  7766  079C  0829               	movf	(_RF_Data^(0+384)+9),w
  7767  079D  0020               	movlb	0	; select bank0
  7768  079E  00E7               	movwf	??_setRFSW_AdjControl
  7769  079F  0867               	movf	??_setRFSW_AdjControl,w
  7770  07A0  00DA               	movwf	setProductData@value
  7771  07A1  3009               	movlw	9
  7772  07A2  319C  2440  3187   	fcall	_setProductData
  7773                           
  7774                           ;RF_Control_B1.c: 418: setProductData((20 + sw), RF_Data[9]);
  7775  07A5  0023               	movlb	3	; select bank3
  7776  07A6  0829               	movf	(_RF_Data^(0+384)+9),w
  7777  07A7  0020               	movlb	0	; select bank0
  7778  07A8  00E7               	movwf	??_setRFSW_AdjControl
  7779  07A9  0867               	movf	??_setRFSW_AdjControl,w
  7780  07AA  00DA               	movwf	setProductData@value
  7781  07AB  086A               	movf	setRFSW_AdjControl@sw,w
  7782  07AC  3E14               	addlw	20
  7783  07AD  319C  2440  3187   	fcall	_setProductData
  7784                           
  7785                           ;RF_Control_B1.c: 420: if (status == 1) {
  7786  07B0  0020               	movlb	0	; select bank0
  7787  07B1  0869               	movf	setRFSW_AdjControl@status,w
  7788  07B2  3A01               	xorlw	1
  7789  07B3  1D03               	skipz
  7790  07B4  2FCD               	goto	l9568
  7791                           
  7792                           ;RF_Control_B1.c: 421: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7793  07B5  0023               	movlb	3	; select bank3
  7794  07B6  0829               	movf	(_RF_Data^(0+384)+9),w
  7795  07B7  3189  2163  3187   	fcall	_getDimmerLights_PercentToValue
  7796  07BA  0020               	movlb	0	; select bank0
  7797  07BB  00E7               	movwf	??_setRFSW_AdjControl
  7798  07BC  0867               	movf	??_setRFSW_AdjControl,w
  7799  07BD  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7800  07BE  086A               	movf	setRFSW_AdjControl@sw,w
  7801  07BF  319E  2640  3187   	fcall	_setDimmerIntr_MaxmumValue
  7802                           
  7803                           ;RF_Control_B1.c: 422: setDimmerIntr_Dimming_RF(sw, 1);
  7804  07C2  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7805  07C3  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7806  07C4  0020               	movlb	0	; select bank0
  7807  07C5  086A               	movf	setRFSW_AdjControl@sw,w
  7808  07C6  3191  218B  3187   	fcall	_setDimmerIntr_Dimming_RF
  7809                           
  7810                           ;RF_Control_B1.c: 423: setTxData();
  7811  07C9  318F  274C  3187   	fcall	_setTxData
  7812                           
  7813                           ;RF_Control_B1.c: 425: } else if (status == 0) {
  7814  07CC  2FE1               	goto	l2407
  7815  07CD                     l9568:	
  7816  07CD  0020               	movlb	0	; select bank0
  7817  07CE  08E9               	movf	setRFSW_AdjControl@status,f
  7818  07CF  1D03               	skipz
  7819  07D0  2FE1               	goto	l2407
  7820                           
  7821                           ;RF_Control_B1.c: 429: setDimmerLights_DimmingRun(sw, 1);
  7822  07D1  01F4               	clrf	setDimmerLights_DimmingRun@command
  7823  07D2  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7824  07D3  086A               	movf	setRFSW_AdjControl@sw,w
  7825  07D4  319E  266F  3187   	fcall	_setDimmerLights_DimmingRun
  7826                           
  7827                           ;RF_Control_B1.c: 430: setDimmerLights_SwOn(sw);
  7828  07D7  0020               	movlb	0	; select bank0
  7829  07D8  086A               	movf	setRFSW_AdjControl@sw,w
  7830  07D9  3196  268D  3187   	fcall	_setDimmerLights_SwOn
  7831                           
  7832                           ;RF_Control_B1.c: 431: setDimmerLights_SwOff(sw);
  7833  07DC  0020               	movlb	0	; select bank0
  7834  07DD  086A               	movf	setRFSW_AdjControl@sw,w
  7835  07DE  3194  240E  3187   	fcall	_setDimmerLights_SwOff
  7836  07E1                     l2407:	
  7837                           
  7838                           ;RF_Control_B1.c: 432: }
  7839                           ;RF_Control_B1.c: 434: setProductData(11, sw);
  7840  07E1  0020               	movlb	0	; select bank0
  7841  07E2  086A               	movf	setRFSW_AdjControl@sw,w
  7842  07E3  00E7               	movwf	??_setRFSW_AdjControl
  7843  07E4  0867               	movf	??_setRFSW_AdjControl,w
  7844  07E5  00DA               	movwf	setProductData@value
  7845  07E6  300B               	movlw	11
  7846  07E7  319C  2440  3187   	fcall	_setProductData
  7847                           
  7848                           ;RF_Control_B1.c: 435: setProductData(17, product->Data[26 + sw]);
  7849  07EA  0020               	movlb	0	; select bank0
  7850  07EB  086A               	movf	setRFSW_AdjControl@sw,w
  7851  07EC  3E1A               	addlw	26
  7852  07ED  076F               	addwf	_product,w
  7853  07EE  00E7               	movwf	??_setRFSW_AdjControl
  7854  07EF  0867               	movf	??_setRFSW_AdjControl,w
  7855  07F0  0086               	movwf	6
  7856  07F1  3002               	movlw	2	; select bank4/5
  7857  07F2  0087               	movwf	7
  7858  07F3  0801               	movf	1,w
  7859  07F4  00E8               	movwf	??_setRFSW_AdjControl+1
  7860  07F5  0868               	movf	??_setRFSW_AdjControl+1,w
  7861  07F6  00DA               	movwf	setProductData@value
  7862  07F7  3011               	movlw	17
  7863  07F8  319C  2440  3187   	fcall	_setProductData
  7864                           
  7865                           ;RF_Control_B1.c: 437: setMemory_Modify(1);
  7866  07FB  3001               	movlw	1
  7867  07FC  319C  24E8         	fcall	_setMemory_Modify
  7868  07FE  0008               	return
  7869  07FF                     __end_of_setRFSW_AdjControl:	
  7870                           
  7871                           	psect	text31
  7872  1CE8                     __ptext31:	
  7873 ;; *************** function _setMemory_Modify *****************
  7874 ;; Defined at:
  7875 ;;		line 1073 in file "../src/MCU_B1.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;  command         1    wreg     unsigned char 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  command         1    3[COMMON] unsigned char 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;		None               void
  7882 ;; Registers used:
  7883 ;;		wreg, status,2, status,0
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;Total ram usage:        2 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    3
  7896 ;; This function calls:
  7897 ;;		Nothing
  7898 ;; This function is called by:
  7899 ;;		_setLog_Code
  7900 ;;		_setRFSW_AdjControl
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           
  7905                           ;psect for function _setMemory_Modify
  7906  1CE8                     _setMemory_Modify:	
  7907                           
  7908                           ;incstack = 0
  7909                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7910                           ;setMemory_Modify@command stored from wreg
  7911  1CE8  00F3               	movwf	setMemory_Modify@command
  7912                           
  7913                           ;MCU_B1.c: 1074: Memory.Modify = command == 1 ? 1 : 0;
  7914  1CE9  0873               	movf	setMemory_Modify@command,w
  7915  1CEA  3A01               	xorlw	1
  7916  1CEB  3000               	movlw	0
  7917  1CEC  1903               	skipnz
  7918  1CED  3001               	movlw	1
  7919  1CEE  00F2               	movwf	??_setMemory_Modify
  7920  1CEF  0024               	movlb	4	; select bank4
  7921  1CF0  0844               	movf	(_Memory^(0+512)+36),w
  7922  1CF1  0672               	xorwf	??_setMemory_Modify,w
  7923  1CF2  39FE               	andlw	-2
  7924  1CF3  0672               	xorwf	??_setMemory_Modify,w
  7925  1CF4  00C4               	movwf	(_Memory^(0+512)+36)
  7926                           
  7927                           ;MCU_B1.c: 1075: Memory.Time = 0;
  7928  1CF5  01C2               	clrf	(_Memory^(0+512)+34)
  7929  1CF6  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7930  1CF7  0008               	return
  7931  1CF8                     __end_of_setMemory_Modify:	
  7932                           
  7933                           	psect	text32
  7934  1E6F                     __ptext32:	
  7935 ;; *************** function _setDimmerLights_DimmingRun *****************
  7936 ;; Defined at:
  7937 ;;		line 988 in file "../src/Dimmer_B1.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  lights          1    wreg     unsigned char 
  7940 ;;  command         1    4[COMMON] unsigned char 
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;  lights          1    6[COMMON] unsigned char 
  7943 ;; Return value:  Size  Location     Type
  7944 ;;		None               void
  7945 ;; Registers used:
  7946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7952 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7956 ;;Total ram usage:        3 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    4
  7959 ;; This function calls:
  7960 ;;		_DimmerLights_SelectPointer
  7961 ;; This function is called by:
  7962 ;;		_setRFSW_AdjControl
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _setDimmerLights_DimmingRun
  7968  1E6F                     _setDimmerLights_DimmingRun:	
  7969                           
  7970                           ;incstack = 0
  7971                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7972                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7973  1E6F  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7974                           
  7975                           ;Dimmer_B1.c: 989: DimmerLights_SelectPointer(lights);
  7976  1E70  0876               	movf	setDimmerLights_DimmingRun@lights,w
  7977  1E71  319D  25AC         	fcall	_DimmerLights_SelectPointer
  7978                           
  7979                           ;Dimmer_B1.c: 990: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7980  1E73  0874               	movf	setDimmerLights_DimmingRun@command,w
  7981  1E74  3A01               	xorlw	1
  7982  1E75  3000               	movlw	0
  7983  1E76  1903               	skipnz
  7984  1E77  3001               	movlw	1
  7985  1E78  00F5               	movwf	??_setDimmerLights_DimmingRun
  7986  1E79  0020               	movlb	0	; select bank0
  7987  1E7A  0A6D               	incf	_DimmerLights,w
  7988  1E7B  0086               	movwf	6
  7989  1E7C  3001               	movlw	1	; select bank2/3
  7990  1E7D  0087               	movwf	7
  7991  1E7E  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  7992  1E7F  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7993  1E80  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7994  1E81  0801               	movf	1,w
  7995  1E82  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7996  1E83  39BF               	andlw	-65
  7997  1E84  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7998  1E85  0081               	movwf	1
  7999  1E86  0008               	return
  8000  1E87                     __end_of_setDimmerLights_DimmingRun:	
  8001                           
  8002                           	psect	text33
  8003  1D29                     __ptext33:	
  8004 ;; *************** function _getRF_KeyStatus *****************
  8005 ;; Defined at:
  8006 ;;		line 166 in file "../src/RF_Control_B1.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;		None
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  key             1    3[COMMON] unsigned char 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      unsigned char 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;Total ram usage:        3 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    3
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_setRF_Main
  8031 ;; This function uses a non-reentrant model
  8032 ;;
  8033                           
  8034                           
  8035                           ;psect for function _getRF_KeyStatus
  8036  1D29                     _getRF_KeyStatus:	
  8037                           
  8038                           ;RF_Control_B1.c: 167: char key = 0;
  8039                           
  8040                           ;incstack = 0
  8041                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8042  1D29  01F3               	clrf	getRF_KeyStatus@key
  8043                           
  8044                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8045  1D2A  01F4               	clrf	_getRF_KeyStatus$4996
  8046  1D2B  0AF4               	incf	_getRF_KeyStatus$4996,f
  8047  1D2C  0020               	movlb	0	; select bank0
  8048  1D2D  1F0C               	btfss	12,6	;volatile
  8049  1D2E  1A0C               	btfsc	12,4	;volatile
  8050  1D2F  2D34               	goto	l9996
  8051  1D30  1C0C               	btfss	12,0	;volatile
  8052  1D31  188D               	btfsc	13,1	;volatile
  8053  1D32  2D34               	goto	l9996
  8054  1D33  01F4               	clrf	_getRF_KeyStatus$4996
  8055  1D34                     l9996:	
  8056  1D34  0874               	movf	_getRF_KeyStatus$4996,w
  8057  1D35  00F2               	movwf	??_getRF_KeyStatus
  8058  1D36  0872               	movf	??_getRF_KeyStatus,w
  8059  1D37  00F3               	movwf	getRF_KeyStatus@key
  8060                           
  8061                           ;RF_Control_B1.c: 179: return key;
  8062  1D38  0873               	movf	getRF_KeyStatus@key,w
  8063  1D39  0008               	return
  8064  1D3A                     __end_of_getRF_KeyStatus:	
  8065                           
  8066                           	psect	text34
  8067  1CD8                     __ptext34:	
  8068 ;; *************** function _getBuz_GO *****************
  8069 ;; Defined at:
  8070 ;;		line 82 in file "../src/Buzzer_B1.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;		None
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;  i               2    6[COMMON] int 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  2    2[COMMON] int 
  8077 ;; Registers used:
  8078 ;;		wreg, status,2, status,0
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        6 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    3
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_setRF_Main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _getBuz_GO
  8100  1CD8                     _getBuz_GO:	
  8101                           
  8102                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8106  1CD8  0021               	movlb	1	; select bank1
  8107  1CD9  0C2E               	rrf	_Buz1^(0+128),w
  8108  1CDA  3901               	andlw	1
  8109  1CDB  00F4               	movwf	??_getBuz_GO
  8110  1CDC  01F5               	clrf	??_getBuz_GO+1
  8111  1CDD  0874               	movf	??_getBuz_GO,w
  8112  1CDE  00F6               	movwf	getBuz_GO@i
  8113  1CDF  0875               	movf	??_getBuz_GO+1,w
  8114  1CE0  00F7               	movwf	getBuz_GO@i+1
  8115                           
  8116                           ;Buzzer_B1.c: 84: return i;
  8117  1CE1  0877               	movf	getBuz_GO@i+1,w
  8118  1CE2  01F3               	clrf	?_getBuz_GO+1
  8119  1CE3  07F3               	addwf	?_getBuz_GO+1,f
  8120  1CE4  0876               	movf	getBuz_GO@i,w
  8121  1CE5  01F2               	clrf	?_getBuz_GO
  8122  1CE6  07F2               	addwf	?_getBuz_GO,f
  8123  1CE7  0008               	return
  8124  1CE8                     __end_of_getBuz_GO:	
  8125                           
  8126                           	psect	text35
  8127  1C8A                     __ptext35:	
  8128 ;; *************** function _RF_RxDisable *****************
  8129 ;; Defined at:
  8130 ;;		line 154 in file "../src/RF_Control_B1.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;		None
  8135 ;; Return value:  Size  Location     Type
  8136 ;;		None               void
  8137 ;; Registers used:
  8138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        0 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    5
  8151 ;; This function calls:
  8152 ;;		_CC2500_WriteCommand
  8153 ;; This function is called by:
  8154 ;;		_setRF_Main
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _RF_RxDisable
  8160  1C8A                     _RF_RxDisable:	
  8161                           
  8162                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8166  1C8A  0021               	movlb	1	; select bank1
  8167  1C8B  18A0               	btfsc	_RF1^(0+128),1
  8168  1C8C  2C8F               	goto	l2351
  8169  1C8D  1DA0               	btfss	_RF1^(0+128),3
  8170  1C8E  0008               	return
  8171  1C8F                     l2351:	
  8172                           
  8173                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8174  1C8F  11A0               	bcf	_RF1^(0+128),3
  8175                           
  8176                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8177  1C90  10A0               	bcf	_RF1^(0+128),1
  8178                           
  8179                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8180  1C91  3036               	movlw	54
  8181  1C92  319E  26A1  319C   	fcall	_CC2500_WriteCommand
  8182                           
  8183                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8184  1C95  303A               	movlw	58
  8185  1C96  319E  26A1         	fcall	_CC2500_WriteCommand
  8186  1C98  0008               	return
  8187  1C99                     __end_of_RF_RxDisable:	
  8188                           
  8189                           	psect	text36
  8190  0A2D                     __ptext36:	
  8191 ;; *************** function _CC2500_TxData *****************
  8192 ;; Defined at:
  8193 ;;		line 32 in file "../src/CC2500_B1.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;		None
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;  loop_e          1    7[COMMON] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;		None               void
  8200 ;; Registers used:
  8201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;Total ram usage:        2 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    5
  8214 ;; This function calls:
  8215 ;;		_CC2500_WriteByte
  8216 ;;		_CC2500_WriteCommand
  8217 ;;		_RF_Timeout_Counter
  8218 ;;		_setRF_TimeoutCleared
  8219 ;; This function is called by:
  8220 ;;		_setRF_Main
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           
  8225                           ;psect for function _CC2500_TxData
  8226  0A2D                     _CC2500_TxData:	
  8227                           
  8228                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8229                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8233  0A2D  3036               	movlw	54
  8234  0A2E  319E  26A1  318A   	fcall	_CC2500_WriteCommand
  8235                           
  8236                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8237  0A31  303B               	movlw	59
  8238  0A32  319E  26A1  318A   	fcall	_CC2500_WriteCommand
  8239                           
  8240                           ;CC2500_B1.c: 38: RC4 = 0;
  8241  0A35  0020               	movlb	0	; select bank0
  8242  0A36  120E               	bcf	14,4	;volatile
  8243                           
  8244                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8245  0A37  307F               	movlw	127
  8246  0A38  00F6               	movwf	??_CC2500_TxData
  8247  0A39  0876               	movf	??_CC2500_TxData,w
  8248  0A3A  0021               	movlb	1	; select bank1
  8249  0A3B  00C6               	movwf	_SPI0Buffer^(0+128)
  8250                           
  8251                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8252  0A3C  2A40               	goto	l9792
  8253  0A3D                     l9790:	
  8254                           
  8255                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8256  0A3D  319D  25D6  318A   	fcall	_RF_Timeout_Counter
  8257  0A40                     l9792:	
  8258  0A40  0020               	movlb	0	; select bank0
  8259  0A41  1D0E               	btfss	14,2	;volatile
  8260  0A42  2A46               	goto	l9796
  8261  0A43  0021               	movlb	1	; select bank1
  8262  0A44  1F21               	btfss	(_RF1^(0+128)+1),6
  8263  0A45  2A3D               	goto	l9790
  8264  0A46                     l9796:	
  8265                           
  8266                           ;CC2500_B1.c: 42: };
  8267                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8268  0A46  319B  2329  318A   	fcall	_setRF_TimeoutCleared
  8269                           
  8270                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8271  0A49  319E  2657  318A   	fcall	_CC2500_WriteByte
  8272                           
  8273                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8274  0A4C  0021               	movlb	1	; select bank1
  8275  0A4D  0848               	movf	_Tx_Length^(0+128),w
  8276  0A4E  00F6               	movwf	??_CC2500_TxData
  8277  0A4F  0876               	movf	??_CC2500_TxData,w
  8278  0A50  00C6               	movwf	_SPI0Buffer^(0+128)
  8279                           
  8280                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8281  0A51  319E  2657  318A   	fcall	_CC2500_WriteByte
  8282                           
  8283                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8284  0A54  01F7               	clrf	CC2500_TxData@loop_e
  8285  0A55                     l9810:	
  8286  0A55  0021               	movlb	1	; select bank1
  8287  0A56  0848               	movf	_Tx_Length^(0+128),w
  8288  0A57  0277               	subwf	CC2500_TxData@loop_e,w
  8289  0A58  1803               	btfsc	3,0
  8290  0A59  2A6C               	goto	l251
  8291                           
  8292                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8293  0A5A  0877               	movf	CC2500_TxData@loop_e,w
  8294  0A5B  3EA0               	addlw	_RF_Data& (0+255)
  8295  0A5C  0086               	movwf	6
  8296  0A5D  3001               	movlw	1	; select bank3/4
  8297  0A5E  0087               	movwf	7
  8298  0A5F  0801               	movf	1,w
  8299  0A60  00F6               	movwf	??_CC2500_TxData
  8300  0A61  0876               	movf	??_CC2500_TxData,w
  8301  0A62  0021               	movlb	1	; select bank1
  8302  0A63  00C6               	movwf	_SPI0Buffer^(0+128)
  8303                           
  8304                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8305  0A64  319E  2657  318A   	fcall	_CC2500_WriteByte
  8306  0A67  3001               	movlw	1
  8307  0A68  00F6               	movwf	??_CC2500_TxData
  8308  0A69  0876               	movf	??_CC2500_TxData,w
  8309  0A6A  07F7               	addwf	CC2500_TxData@loop_e,f
  8310  0A6B  2A55               	goto	l9810
  8311  0A6C                     l251:	
  8312                           
  8313                           ;CC2500_B1.c: 51: }
  8314                           ;CC2500_B1.c: 52: RC4 = 1;
  8315  0A6C  0020               	movlb	0	; select bank0
  8316  0A6D  160E               	bsf	14,4	;volatile
  8317                           
  8318                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8319  0A6E  3035               	movlw	53
  8320  0A6F  319E  26A1  318A   	fcall	_CC2500_WriteCommand
  8321                           
  8322                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8323  0A72  2A76               	goto	l9816
  8324  0A73                     l9814:	
  8325                           
  8326                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8327  0A73  319D  25D6  318A   	fcall	_RF_Timeout_Counter
  8328  0A76                     l9816:	
  8329  0A76  0020               	movlb	0	; select bank0
  8330  0A77  180D               	btfsc	13,0	;volatile
  8331  0A78  2A7C               	goto	l9820
  8332  0A79  0021               	movlb	1	; select bank1
  8333  0A7A  1F21               	btfss	(_RF1^(0+128)+1),6
  8334  0A7B  2A73               	goto	l9814
  8335  0A7C                     l9820:	
  8336                           
  8337                           ;CC2500_B1.c: 56: };
  8338                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8339  0A7C  319B  2329  318A   	fcall	_setRF_TimeoutCleared
  8340                           
  8341                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8342  0A7F  2A83               	goto	l9824
  8343  0A80                     l9822:	
  8344                           
  8345                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8346  0A80  319D  25D6  318A   	fcall	_RF_Timeout_Counter
  8347  0A83                     l9824:	
  8348  0A83  0020               	movlb	0	; select bank0
  8349  0A84  1C0D               	btfss	13,0	;volatile
  8350  0A85  2A89               	goto	l9828
  8351  0A86  0021               	movlb	1	; select bank1
  8352  0A87  1F21               	btfss	(_RF1^(0+128)+1),6
  8353  0A88  2A80               	goto	l9822
  8354  0A89                     l9828:	
  8355                           
  8356                           ;CC2500_B1.c: 61: };
  8357                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8358  0A89  319B  2329  318A   	fcall	_setRF_TimeoutCleared
  8359                           
  8360                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8361  0A8C  3036               	movlw	54
  8362  0A8D  319E  26A1  318A   	fcall	_CC2500_WriteCommand
  8363                           
  8364                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8365  0A90  303B               	movlw	59
  8366  0A91  319E  26A1         	fcall	_CC2500_WriteCommand
  8367                           
  8368                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8369  0A93  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8370  0A94  0008               	return
  8371  0A95                     __end_of_CC2500_TxData:	
  8372                           
  8373                           	psect	text37
  8374  089D                     __ptext37:	
  8375 ;; *************** function _CC2500_RxData *****************
  8376 ;; Defined at:
  8377 ;;		line 73 in file "../src/CC2500_B1.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  loop_f          1    7[COMMON] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;		None               void
  8384 ;; Registers used:
  8385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;Total ram usage:        2 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    5
  8398 ;; This function calls:
  8399 ;;		_CC2500_ReadByte
  8400 ;;		_CC2500_ReadStatus
  8401 ;;		_CC2500_WriteByte
  8402 ;;		_CC2500_WriteCommand
  8403 ;;		_RF_Timeout_Counter
  8404 ;;		_setRF_TimeoutCleared
  8405 ;; This function is called by:
  8406 ;;		_setRF_Main
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           
  8411                           ;psect for function _CC2500_RxData
  8412  089D                     _CC2500_RxData:	
  8413                           
  8414                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8415                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8416                           
  8417                           ;incstack = 0
  8418                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8419  089D  0020               	movlb	0	; select bank0
  8420  089E  180D               	btfsc	13,0	;volatile
  8421  089F  0008               	return
  8422                           
  8423                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8424  08A0  303B               	movlw	59
  8425  08A1  3190  20CE  3188   	fcall	_CC2500_ReadStatus
  8426                           
  8427                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8428  08A4  0021               	movlb	1	; select bank1
  8429  08A5  084B               	movf	_s_data^(0+128),w
  8430  08A6  1903               	btfsc	3,2
  8431  08A7  0008               	return
  8432                           
  8433                           ;CC2500_B1.c: 90: RC4 = 0;
  8434  08A8  0020               	movlb	0	; select bank0
  8435  08A9  120E               	bcf	14,4	;volatile
  8436                           
  8437                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8438  08AA  30FF               	movlw	255
  8439  08AB  00F6               	movwf	??_CC2500_RxData
  8440  08AC  0876               	movf	??_CC2500_RxData,w
  8441  08AD  0021               	movlb	1	; select bank1
  8442  08AE  00C6               	movwf	_SPI0Buffer^(0+128)
  8443                           
  8444                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8445  08AF  28B3               	goto	l9848
  8446  08B0                     l9846:	
  8447                           
  8448                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8449  08B0  319D  25D6  3188   	fcall	_RF_Timeout_Counter
  8450  08B3                     l9848:	
  8451  08B3  0020               	movlb	0	; select bank0
  8452  08B4  1D0E               	btfss	14,2	;volatile
  8453  08B5  28B9               	goto	l9852
  8454  08B6  0021               	movlb	1	; select bank1
  8455  08B7  1F21               	btfss	(_RF1^(0+128)+1),6
  8456  08B8  28B0               	goto	l9846
  8457  08B9                     l9852:	
  8458                           
  8459                           ;CC2500_B1.c: 95: };
  8460                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8461  08B9  319B  2329  3188   	fcall	_setRF_TimeoutCleared
  8462                           
  8463                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8464  08BC  319E  2657  3188   	fcall	_CC2500_WriteByte
  8465                           
  8466                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8467  08BF  319F  270C  3188   	fcall	_CC2500_ReadByte
  8468                           
  8469                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8470  08C2  0021               	movlb	1	; select bank1
  8471  08C3  0846               	movf	_SPI0Buffer^(0+128),w
  8472  08C4  00F6               	movwf	??_CC2500_RxData
  8473  08C5  0876               	movf	??_CC2500_RxData,w
  8474  08C6  00C5               	movwf	_Rx_Length^(0+128)
  8475                           
  8476                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8477  08C7  01F7               	clrf	CC2500_RxData@loop_f
  8478  08C8                     l9868:	
  8479  08C8  0845               	movf	_Rx_Length^(0+128),w
  8480  08C9  0277               	subwf	CC2500_RxData@loop_f,w
  8481  08CA  1803               	btfsc	3,0
  8482  08CB  28DE               	goto	l9870
  8483                           
  8484                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8485  08CC  319F  270C  3188   	fcall	_CC2500_ReadByte
  8486                           
  8487                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8488  08CF  0021               	movlb	1	; select bank1
  8489  08D0  0846               	movf	_SPI0Buffer^(0+128),w
  8490  08D1  00F6               	movwf	??_CC2500_RxData
  8491  08D2  0877               	movf	CC2500_RxData@loop_f,w
  8492  08D3  3EA0               	addlw	_RF_Data& (0+255)
  8493  08D4  0086               	movwf	6
  8494  08D5  3001               	movlw	1	; select bank3/4
  8495  08D6  0087               	movwf	7
  8496  08D7  0876               	movf	??_CC2500_RxData,w
  8497  08D8  0081               	movwf	1
  8498  08D9  3001               	movlw	1
  8499  08DA  00F6               	movwf	??_CC2500_RxData
  8500  08DB  0876               	movf	??_CC2500_RxData,w
  8501  08DC  07F7               	addwf	CC2500_RxData@loop_f,f
  8502  08DD  28C8               	goto	l9868
  8503  08DE                     l9870:	
  8504                           
  8505                           ;CC2500_B1.c: 104: }
  8506                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8507  08DE  319F  270C  3188   	fcall	_CC2500_ReadByte
  8508                           
  8509                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8510  08E1  0021               	movlb	1	; select bank1
  8511  08E2  0846               	movf	_SPI0Buffer^(0+128),w
  8512  08E3  00F6               	movwf	??_CC2500_RxData
  8513  08E4  0876               	movf	??_CC2500_RxData,w
  8514  08E5  00C4               	movwf	_RSSI^(0+128)
  8515                           
  8516                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8517  08E6  319F  270C  3188   	fcall	_CC2500_ReadByte
  8518                           
  8519                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8520  08E9  0021               	movlb	1	; select bank1
  8521  08EA  0846               	movf	_SPI0Buffer^(0+128),w
  8522  08EB  00F6               	movwf	??_CC2500_RxData
  8523  08EC  0876               	movf	??_CC2500_RxData,w
  8524  08ED  00C1               	movwf	_CRC^(0+128)
  8525                           
  8526                           ;CC2500_B1.c: 109: RC4 = 1;
  8527  08EE  0020               	movlb	0	; select bank0
  8528  08EF  160E               	bsf	14,4	;volatile
  8529                           
  8530                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8531  08F0  0021               	movlb	1	; select bank1
  8532  08F1  1BC1               	btfsc	_CRC^(0+128),7
  8533                           
  8534                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8535  08F2  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8536                           
  8537                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8538  08F3  11A0               	bcf	_RF1^(0+128),3
  8539                           
  8540                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8541  08F4  14A0               	bsf	_RF1^(0+128),1
  8542                           
  8543                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8544  08F5  3036               	movlw	54
  8545  08F6  319E  26A1  3188   	fcall	_CC2500_WriteCommand
  8546                           
  8547                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8548  08F9  303A               	movlw	58
  8549  08FA  319E  26A1         	fcall	_CC2500_WriteCommand
  8550  08FC  0021               	movlb	1	; select bank1
  8551  08FD  0008               	return
  8552  08FE                     __end_of_CC2500_RxData:	
  8553                           
  8554                           	psect	text38
  8555  10CE                     __ptext38:	
  8556 ;; *************** function _CC2500_ReadStatus *****************
  8557 ;; Defined at:
  8558 ;;		line 308 in file "../src/CC2500_B1.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  status_addr     1    wreg     unsigned char 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  status_addr     1    5[COMMON] unsigned char 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;		None               void
  8565 ;; Registers used:
  8566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;Total ram usage:        2 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    4
  8579 ;; This function calls:
  8580 ;;		_CC2500_ReadByte
  8581 ;;		_CC2500_WriteByte
  8582 ;;		_RF_Timeout_Counter
  8583 ;;		_setRF_TimeoutCleared
  8584 ;; This function is called by:
  8585 ;;		_CC2500_RxData
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           
  8590                           ;psect for function _CC2500_ReadStatus
  8591  10CE                     _CC2500_ReadStatus:	
  8592                           
  8593                           ;incstack = 0
  8594                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8595                           ;CC2500_ReadStatus@status_addr stored from wreg
  8596  10CE  00F5               	movwf	CC2500_ReadStatus@status_addr
  8597                           
  8598                           ;CC2500_B1.c: 309: RC4 = 0;
  8599  10CF  0020               	movlb	0	; select bank0
  8600  10D0  120E               	bcf	14,4	;volatile
  8601                           
  8602                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8603  10D1  0875               	movf	CC2500_ReadStatus@status_addr,w
  8604  10D2  3EC0               	addlw	192
  8605  10D3  00F4               	movwf	??_CC2500_ReadStatus
  8606  10D4  0874               	movf	??_CC2500_ReadStatus,w
  8607  10D5  0021               	movlb	1	; select bank1
  8608  10D6  00C6               	movwf	_SPI0Buffer^(0+128)
  8609                           
  8610                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8611  10D7  28DB               	goto	l9580
  8612  10D8                     l9578:	
  8613                           
  8614                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8615  10D8  319D  25D6  3190   	fcall	_RF_Timeout_Counter
  8616  10DB                     l9580:	
  8617  10DB  0020               	movlb	0	; select bank0
  8618  10DC  1D0E               	btfss	14,2	;volatile
  8619  10DD  28E1               	goto	l9584
  8620  10DE  0021               	movlb	1	; select bank1
  8621  10DF  1F21               	btfss	(_RF1^(0+128)+1),6
  8622  10E0  28D8               	goto	l9578
  8623  10E1                     l9584:	
  8624                           
  8625                           ;CC2500_B1.c: 314: };
  8626                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8627  10E1  319B  2329  3190   	fcall	_setRF_TimeoutCleared
  8628                           
  8629                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8630  10E4  319E  2657  3190   	fcall	_CC2500_WriteByte
  8631                           
  8632                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8633  10E7  319F  270C         	fcall	_CC2500_ReadByte
  8634                           
  8635                           ;CC2500_B1.c: 319: RC4 = 1;
  8636  10E9  0020               	movlb	0	; select bank0
  8637  10EA  160E               	bsf	14,4	;volatile
  8638                           
  8639                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8640  10EB  0021               	movlb	1	; select bank1
  8641  10EC  0846               	movf	_SPI0Buffer^(0+128),w
  8642  10ED  00F4               	movwf	??_CC2500_ReadStatus
  8643  10EE  0874               	movf	??_CC2500_ReadStatus,w
  8644  10EF  00CB               	movwf	_s_data^(0+128)
  8645  10F0  0008               	return
  8646  10F1                     __end_of_CC2500_ReadStatus:	
  8647                           
  8648                           	psect	text39
  8649  1F0C                     __ptext39:	
  8650 ;; *************** function _CC2500_ReadByte *****************
  8651 ;; Defined at:
  8652 ;;		line 242 in file "../src/CC2500_B1.c"
  8653 ;; Parameters:    Size  Location     Type
  8654 ;;		None
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;  loop_b          1    3[COMMON] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;		None               void
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8670 ;;Total ram usage:        2 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    3
  8673 ;; This function calls:
  8674 ;;		Nothing
  8675 ;; This function is called by:
  8676 ;;		_CC2500_RxData
  8677 ;;		_CC2500_ReadStatus
  8678 ;;		_CC2500_ReadREG
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           
  8683                           ;psect for function _CC2500_ReadByte
  8684  1F0C                     _CC2500_ReadByte:	
  8685                           
  8686                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8687                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8688                           
  8689                           ;incstack = 0
  8690                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8691  1F0C  01F3               	clrf	CC2500_ReadByte@loop_b
  8692  1F0D                     L3:	
  8693  1F0D  3008               	movlw	8
  8694  1F0E  0273               	subwf	CC2500_ReadByte@loop_b,w
  8695  1F0F  1803               	btfsc	3,0
  8696  1F10  0008               	return
  8697                           
  8698                           ;CC2500_B1.c: 245: RC1 = 1;
  8699  1F11  0020               	movlb	0	; select bank0
  8700  1F12  148E               	bsf	14,1	;volatile
  8701                           
  8702                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8703  1F13  1003               	clrc
  8704  1F14  0021               	movlb	1	; select bank1
  8705  1F15  0DC6               	rlf	_SPI0Buffer^(0+128),f
  8706                           
  8707                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8708  1F16  0020               	movlb	0	; select bank0
  8709  1F17  1D0E               	btfss	14,2	;volatile
  8710  1F18  2F1C               	goto	l9480
  8711                           
  8712                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8713  1F19  0021               	movlb	1	; select bank1
  8714  1F1A  1446               	bsf	_SPI0Buffer^(0+128),0
  8715  1F1B  2F21               	goto	l9482
  8716  1F1C                     l9480:	
  8717                           
  8718                           ;CC2500_B1.c: 249: else
  8719                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8720  1F1C  30FE               	movlw	254
  8721  1F1D  00F2               	movwf	??_CC2500_ReadByte
  8722  1F1E  0872               	movf	??_CC2500_ReadByte,w
  8723  1F1F  0021               	movlb	1	; select bank1
  8724  1F20  05C6               	andwf	_SPI0Buffer^(0+128),f
  8725  1F21                     l9482:	
  8726                           
  8727                           ;CC2500_B1.c: 251: RC1 = 0;
  8728  1F21  0020               	movlb	0	; select bank0
  8729  1F22  108E               	bcf	14,1	;volatile
  8730  1F23  3001               	movlw	1
  8731  1F24  00F2               	movwf	??_CC2500_ReadByte
  8732  1F25  0872               	movf	??_CC2500_ReadByte,w
  8733  1F26  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8734  1F27  2F0D               	goto	L3
  8735  1F28                     __end_of_CC2500_ReadByte:	
  8736                           
  8737                           	psect	text40
  8738  1DEB                     __ptext40:	
  8739 ;; *************** function _CC2500_PowerOnInitial *****************
  8740 ;; Defined at:
  8741 ;;		line 126 in file "../src/CC2500_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    6
  8762 ;; This function calls:
  8763 ;;		_CC2500_ClearRXFIFO
  8764 ;;		_CC2500_ClearTXFIFO
  8765 ;;		_CC2500_FrequencyCabr
  8766 ;;		_CC2500_InitPATable
  8767 ;;		_CC2500_InitSetREG
  8768 ;;		_CC2500_PowerRST
  8769 ;;		_CC2500_SIDLEMode
  8770 ;; This function is called by:
  8771 ;;		_main
  8772 ;;		_setRF_Main
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _CC2500_PowerOnInitial
  8778  1DEB                     _CC2500_PowerOnInitial:	
  8779                           
  8780                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8784  1DEB  3193  2384  319D   	fcall	_CC2500_PowerRST
  8785                           
  8786                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8787  1DEE  3191  21DE  319D   	fcall	_CC2500_InitSetREG
  8788                           
  8789                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8790  1DF1  319F  2762  319D   	fcall	_CC2500_InitPATable
  8791                           
  8792                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8793  1DF4  319B  2331  319D   	fcall	_CC2500_ClearTXFIFO
  8794                           
  8795                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8796  1DF7  319B  232D  319D   	fcall	_CC2500_ClearRXFIFO
  8797                           
  8798                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8799  1DFA  319B  23B9  319D   	fcall	_CC2500_FrequencyCabr
  8800                           
  8801                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8802  1DFD  3188  2000         	fcall	_CC2500_SIDLEMode
  8803  1DFF  0008               	return
  8804  1E00                     __end_of_CC2500_PowerOnInitial:	
  8805                           
  8806                           	psect	text41
  8807  0800                     __ptext41:	
  8808 ;; *************** function _CC2500_SIDLEMode *****************
  8809 ;; Defined at:
  8810 ;;		line 216 in file "../src/CC2500_B1.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;		None
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;		None
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        0 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    5
  8831 ;; This function calls:
  8832 ;;		_CC2500_WriteCommand
  8833 ;; This function is called by:
  8834 ;;		_CC2500_PowerOnInitial
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _CC2500_SIDLEMode
  8840  0800                     _CC2500_SIDLEMode:	
  8841                           
  8842                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8846  0800  3036               	movlw	54
  8847  0801  319E  26A1         	fcall	_CC2500_WriteCommand
  8848  0803  0008               	return
  8849  0804                     __end_of_CC2500_SIDLEMode:	
  8850                           
  8851                           	psect	text42
  8852  1384                     __ptext42:	
  8853 ;; *************** function _CC2500_PowerRST *****************
  8854 ;; Defined at:
  8855 ;;		line 139 in file "../src/CC2500_B1.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;		None
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;		None
  8860 ;; Return value:  Size  Location     Type
  8861 ;;		None               void
  8862 ;; Registers used:
  8863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;Total ram usage:        1 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    4
  8876 ;; This function calls:
  8877 ;;		_CC2500_WriteByte
  8878 ;;		_DelayTime_1us
  8879 ;;		_RF_Timeout_Counter
  8880 ;;		_setRF_TimeoutCleared
  8881 ;; This function is called by:
  8882 ;;		_CC2500_PowerOnInitial
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _CC2500_PowerRST
  8888  1384                     _CC2500_PowerRST:	
  8889                           
  8890                           ;CC2500_B1.c: 140: RC1 = 0;
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8894  1384  0020               	movlb	0	; select bank0
  8895  1385  108E               	bcf	14,1	;volatile
  8896                           
  8897                           ;CC2500_B1.c: 141: RC0 = 0;
  8898  1386  100E               	bcf	14,0	;volatile
  8899                           
  8900                           ;CC2500_B1.c: 142: RC4 = 1;
  8901  1387  160E               	bsf	14,4	;volatile
  8902                           
  8903                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8904  1388  300A               	movlw	10
  8905  1389  00F2               	movwf	DelayTime_1us@count
  8906  138A  3000               	movlw	0
  8907  138B  00F3               	movwf	DelayTime_1us@count+1
  8908  138C  3191  2116  3193   	fcall	_DelayTime_1us
  8909                           
  8910                           ;CC2500_B1.c: 144: RC4 = 0;
  8911  138F  0020               	movlb	0	; select bank0
  8912  1390  120E               	bcf	14,4	;volatile
  8913                           
  8914                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8915  1391  300A               	movlw	10
  8916  1392  00F2               	movwf	DelayTime_1us@count
  8917  1393  3000               	movlw	0
  8918  1394  00F3               	movwf	DelayTime_1us@count+1
  8919  1395  3191  2116  3193   	fcall	_DelayTime_1us
  8920                           
  8921                           ;CC2500_B1.c: 146: RC4 = 1;
  8922  1398  0020               	movlb	0	; select bank0
  8923  1399  160E               	bsf	14,4	;volatile
  8924                           
  8925                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8926  139A  3028               	movlw	40
  8927  139B  00F2               	movwf	DelayTime_1us@count
  8928  139C  3000               	movlw	0
  8929  139D  00F3               	movwf	DelayTime_1us@count+1
  8930  139E  3191  2116  3193   	fcall	_DelayTime_1us
  8931                           
  8932                           ;CC2500_B1.c: 148: RC4 = 0;
  8933  13A1  0020               	movlb	0	; select bank0
  8934  13A2  120E               	bcf	14,4	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8937  13A3  3030               	movlw	48
  8938  13A4  00F8               	movwf	??_CC2500_PowerRST
  8939  13A5  0878               	movf	??_CC2500_PowerRST,w
  8940  13A6  0021               	movlb	1	; select bank1
  8941  13A7  00C6               	movwf	_SPI0Buffer^(0+128)
  8942                           
  8943                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8944  13A8  2BAC               	goto	l9608
  8945  13A9                     l9606:	
  8946                           
  8947                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8948  13A9  319D  25D6  3193   	fcall	_RF_Timeout_Counter
  8949  13AC                     l9608:	
  8950  13AC  0020               	movlb	0	; select bank0
  8951  13AD  1D0E               	btfss	14,2	;volatile
  8952  13AE  2BB2               	goto	l9612
  8953  13AF  0021               	movlb	1	; select bank1
  8954  13B0  1F21               	btfss	(_RF1^(0+128)+1),6
  8955  13B1  2BA9               	goto	l9606
  8956  13B2                     l9612:	
  8957                           
  8958                           ;CC2500_B1.c: 152: };
  8959                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8960  13B2  319B  2329  3193   	fcall	_setRF_TimeoutCleared
  8961                           
  8962                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8963  13B5  319E  2657  3193   	fcall	_CC2500_WriteByte
  8964                           
  8965                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8966  13B8  2BBC               	goto	l9618
  8967  13B9                     l9616:	
  8968                           
  8969                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8970  13B9  319D  25D6  3193   	fcall	_RF_Timeout_Counter
  8971  13BC                     l9618:	
  8972  13BC  0020               	movlb	0	; select bank0
  8973  13BD  1D0E               	btfss	14,2	;volatile
  8974  13BE  2BC2               	goto	l9622
  8975  13BF  0021               	movlb	1	; select bank1
  8976  13C0  1F21               	btfss	(_RF1^(0+128)+1),6
  8977  13C1  2BB9               	goto	l9616
  8978  13C2                     l9622:	
  8979                           
  8980                           ;CC2500_B1.c: 157: };
  8981                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8982  13C2  319B  2329         	fcall	_setRF_TimeoutCleared
  8983                           
  8984                           ;CC2500_B1.c: 159: RC0 = 0;
  8985  13C4  0020               	movlb	0	; select bank0
  8986  13C5  100E               	bcf	14,0	;volatile
  8987                           
  8988                           ;CC2500_B1.c: 160: RC4 = 1;
  8989  13C6  160E               	bsf	14,4	;volatile
  8990  13C7  0008               	return
  8991  13C8                     __end_of_CC2500_PowerRST:	
  8992                           
  8993                           	psect	text43
  8994  11DE                     __ptext43:	
  8995 ;; *************** function _CC2500_InitSetREG *****************
  8996 ;; Defined at:
  8997 ;;		line 166 in file "../src/CC2500_B1.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;		None
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9002 ;;  temp2           1    1[BANK0 ] unsigned char 
  9003 ;;  temp1           1    0[BANK0 ] unsigned char 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;		None               void
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;Total ram usage:        4 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    5
  9020 ;; This function calls:
  9021 ;;		_CC2500_WriteREG
  9022 ;; This function is called by:
  9023 ;;		_CC2500_PowerOnInitial
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _CC2500_InitSetREG
  9029  11DE                     _CC2500_InitSetREG:	
  9030                           
  9031                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9032                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9033                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9037  11DE  0020               	movlb	0	; select bank0
  9038  11DF  01A2               	clrf	CC2500_InitSetREG@loop_c
  9039  11E0                     L4:	
  9040  11E0  302F               	movlw	47
  9041  11E1  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9042  11E2  1803               	btfsc	3,0
  9043  11E3  0008               	return
  9044                           
  9045                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9046  11E4  0822               	movf	CC2500_InitSetREG@loop_c,w
  9047  11E5  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9048  11E6  0084               	movwf	4
  9049  11E7  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9050  11E8  1803               	skipnc
  9051  11E9  3E01               	addlw	1
  9052  11EA  0085               	movwf	5
  9053  11EB  0800               	movf	0,w	;code access
  9054  11EC  00F7               	movwf	??_CC2500_InitSetREG
  9055  11ED  0877               	movf	??_CC2500_InitSetREG,w
  9056  11EE  00A0               	movwf	CC2500_InitSetREG@temp1
  9057                           
  9058                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9059  11EF  0822               	movf	CC2500_InitSetREG@loop_c,w
  9060  11F0  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9061  11F1  0084               	movwf	4
  9062  11F2  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9063  11F3  1803               	skipnc
  9064  11F4  3E01               	addlw	1
  9065  11F5  0085               	movwf	5
  9066  11F6  0800               	movf	0,w	;code access
  9067  11F7  00F7               	movwf	??_CC2500_InitSetREG
  9068  11F8  0877               	movf	??_CC2500_InitSetREG,w
  9069  11F9  00A1               	movwf	CC2500_InitSetREG@temp2
  9070                           
  9071                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9072  11FA  0821               	movf	CC2500_InitSetREG@temp2,w
  9073  11FB  00F7               	movwf	??_CC2500_InitSetREG
  9074  11FC  0877               	movf	??_CC2500_InitSetREG,w
  9075  11FD  00F4               	movwf	CC2500_WriteREG@value
  9076  11FE  0820               	movf	CC2500_InitSetREG@temp1,w
  9077  11FF  3190  20AC  3191   	fcall	_CC2500_WriteREG
  9078  1202  3001               	movlw	1
  9079  1203  00F7               	movwf	??_CC2500_InitSetREG
  9080  1204  0877               	movf	??_CC2500_InitSetREG,w
  9081  1205  0020               	movlb	0	; select bank0
  9082  1206  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9083  1207  29E0               	goto	L4
  9084  1208                     __end_of_CC2500_InitSetREG:	
  9085                           
  9086                           	psect	text44
  9087  1F62                     __ptext44:	
  9088 ;; *************** function _CC2500_InitPATable *****************
  9089 ;; Defined at:
  9090 ;;		line 181 in file "../src/CC2500_B1.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;		None
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;  loop_d          1    9[COMMON] unsigned char 
  9095 ;;  temp            1    8[COMMON] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        3 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    5
  9112 ;; This function calls:
  9113 ;;		_CC2500_WriteREG
  9114 ;; This function is called by:
  9115 ;;		_CC2500_PowerOnInitial
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _CC2500_InitPATable
  9121  1F62                     _CC2500_InitPATable:	
  9122                           
  9123                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9124                           ;CC2500_B1.c: 183: unsigned char temp;
  9125                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9129  1F62  01F9               	clrf	CC2500_InitPATable@loop_d
  9130  1F63                     L5:	
  9131  1F63  3008               	movlw	8
  9132  1F64  0279               	subwf	CC2500_InitPATable@loop_d,w
  9133  1F65  1803               	btfsc	3,0
  9134  1F66  0008               	return
  9135                           
  9136                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9137  1F67  0879               	movf	CC2500_InitPATable@loop_d,w
  9138  1F68  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9139  1F69  0084               	movwf	4
  9140  1F6A  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9141  1F6B  1803               	skipnc
  9142  1F6C  3E01               	addlw	1
  9143  1F6D  0085               	movwf	5
  9144  1F6E  0800               	movf	0,w	;code access
  9145  1F6F  00F7               	movwf	??_CC2500_InitPATable
  9146  1F70  0877               	movf	??_CC2500_InitPATable,w
  9147  1F71  00F8               	movwf	CC2500_InitPATable@temp
  9148                           
  9149                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9150  1F72  0878               	movf	CC2500_InitPATable@temp,w
  9151  1F73  00F7               	movwf	??_CC2500_InitPATable
  9152  1F74  0877               	movf	??_CC2500_InitPATable,w
  9153  1F75  00F4               	movwf	CC2500_WriteREG@value
  9154  1F76  303E               	movlw	62
  9155  1F77  3190  20AC  319F   	fcall	_CC2500_WriteREG
  9156  1F7A  3001               	movlw	1
  9157  1F7B  00F7               	movwf	??_CC2500_InitPATable
  9158  1F7C  0877               	movf	??_CC2500_InitPATable,w
  9159  1F7D  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9160  1F7E  2F63               	goto	L5
  9161  1F7F                     __end_of_CC2500_InitPATable:	
  9162                           
  9163                           	psect	text45
  9164  10AC                     __ptext45:	
  9165 ;; *************** function _CC2500_WriteREG *****************
  9166 ;; Defined at:
  9167 ;;		line 258 in file "../src/CC2500_B1.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;  w_addr          1    wreg     unsigned char 
  9170 ;;  value           1    4[COMMON] unsigned char 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  w_addr          1    6[COMMON] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;		None               void
  9175 ;; Registers used:
  9176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9182 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;Total ram usage:        3 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:    4
  9189 ;; This function calls:
  9190 ;;		_CC2500_WriteByte
  9191 ;;		_RF_Timeout_Counter
  9192 ;;		_setRF_TimeoutCleared
  9193 ;; This function is called by:
  9194 ;;		_CC2500_InitSetREG
  9195 ;;		_CC2500_InitPATable
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _CC2500_WriteREG
  9201  10AC                     _CC2500_WriteREG:	
  9202                           
  9203                           ;incstack = 0
  9204                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9205                           ;CC2500_WriteREG@w_addr stored from wreg
  9206  10AC  00F6               	movwf	CC2500_WriteREG@w_addr
  9207                           
  9208                           ;CC2500_B1.c: 259: RC4 = 0;
  9209  10AD  0020               	movlb	0	; select bank0
  9210  10AE  120E               	bcf	14,4	;volatile
  9211                           
  9212                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9213  10AF  0876               	movf	CC2500_WriteREG@w_addr,w
  9214  10B0  00F5               	movwf	??_CC2500_WriteREG
  9215  10B1  0875               	movf	??_CC2500_WriteREG,w
  9216  10B2  0021               	movlb	1	; select bank1
  9217  10B3  00C6               	movwf	_SPI0Buffer^(0+128)
  9218                           
  9219                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9220  10B4  28B8               	goto	l9504
  9221  10B5                     l9502:	
  9222                           
  9223                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9224  10B5  319D  25D6  3190   	fcall	_RF_Timeout_Counter
  9225  10B8                     l9504:	
  9226  10B8  0020               	movlb	0	; select bank0
  9227  10B9  1D0E               	btfss	14,2	;volatile
  9228  10BA  28BE               	goto	l9508
  9229  10BB  0021               	movlb	1	; select bank1
  9230  10BC  1F21               	btfss	(_RF1^(0+128)+1),6
  9231  10BD  28B5               	goto	l9502
  9232  10BE                     l9508:	
  9233                           
  9234                           ;CC2500_B1.c: 263: };
  9235                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9236  10BE  319B  2329  3190   	fcall	_setRF_TimeoutCleared
  9237                           
  9238                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9239  10C1  319E  2657  3190   	fcall	_CC2500_WriteByte
  9240                           
  9241                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9242  10C4  0874               	movf	CC2500_WriteREG@value,w
  9243  10C5  00F5               	movwf	??_CC2500_WriteREG
  9244  10C6  0875               	movf	??_CC2500_WriteREG,w
  9245  10C7  0021               	movlb	1	; select bank1
  9246  10C8  00C6               	movwf	_SPI0Buffer^(0+128)
  9247                           
  9248                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9249  10C9  319E  2657         	fcall	_CC2500_WriteByte
  9250                           
  9251                           ;CC2500_B1.c: 269: RC4 = 1;
  9252  10CB  0020               	movlb	0	; select bank0
  9253  10CC  160E               	bsf	14,4	;volatile
  9254  10CD  0008               	return
  9255  10CE                     __end_of_CC2500_WriteREG:	
  9256                           
  9257                           	psect	text46
  9258  1BB9                     __ptext46:	
  9259 ;; *************** function _CC2500_FrequencyCabr *****************
  9260 ;; Defined at:
  9261 ;;		line 208 in file "../src/CC2500_B1.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;		None
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;		None
  9266 ;; Return value:  Size  Location     Type
  9267 ;;		None               void
  9268 ;; Registers used:
  9269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;Total ram usage:        0 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    5
  9282 ;; This function calls:
  9283 ;;		_CC2500_WriteCommand
  9284 ;;		_DelayTime_1us
  9285 ;; This function is called by:
  9286 ;;		_CC2500_PowerOnInitial
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _CC2500_FrequencyCabr
  9292  1BB9                     _CC2500_FrequencyCabr:	
  9293                           
  9294                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9295                           
  9296                           ;incstack = 0
  9297                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9298  1BB9  3033               	movlw	51
  9299  1BBA  319E  26A1  319B   	fcall	_CC2500_WriteCommand
  9300                           
  9301                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9302  1BBD  30E8               	movlw	232
  9303  1BBE  00F2               	movwf	DelayTime_1us@count
  9304  1BBF  3003               	movlw	3
  9305  1BC0  00F3               	movwf	DelayTime_1us@count+1
  9306  1BC1  3191  2116         	fcall	_DelayTime_1us
  9307  1BC3  0008               	return
  9308  1BC4                     __end_of_CC2500_FrequencyCabr:	
  9309                           
  9310                           	psect	text47
  9311  1116                     __ptext47:	
  9312 ;; *************** function _DelayTime_1us *****************
  9313 ;; Defined at:
  9314 ;;		line 327 in file "../src/CC2500_B1.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  count           2    2[COMMON] int 
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;  j               2    6[COMMON] unsigned int 
  9319 ;;  i               2    4[COMMON] unsigned int 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;		None               void
  9322 ;; Registers used:
  9323 ;;		wreg, status,2
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9329 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9333 ;;Total ram usage:        6 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    3
  9336 ;; This function calls:
  9337 ;;		Nothing
  9338 ;; This function is called by:
  9339 ;;		_CC2500_PowerRST
  9340 ;;		_CC2500_FrequencyCabr
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           
  9345                           ;psect for function _DelayTime_1us
  9346  1116                     _DelayTime_1us:	
  9347                           
  9348                           ;CC2500_B1.c: 328: unsigned int i, j;
  9349                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9350                           
  9351                           ;incstack = 0
  9352                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9353  1116  3001               	movlw	1
  9354  1117  00F4               	movwf	DelayTime_1us@i
  9355  1118  3000               	movlw	0
  9356  1119  00F5               	movwf	DelayTime_1us@i+1
  9357  111A                     l363:	
  9358  111A  0873               	movf	DelayTime_1us@count+1,w
  9359  111B  0275               	subwf	DelayTime_1us@i+1,w
  9360  111C  1D03               	skipz
  9361  111D  2920               	goto	u11165
  9362  111E  0872               	movf	DelayTime_1us@count,w
  9363  111F  0274               	subwf	DelayTime_1us@i,w
  9364  1120                     u11165:	
  9365  1120  1803               	btfsc	3,0
  9366  1121  0008               	return
  9367                           
  9368                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9369  1122  01F6               	clrf	DelayTime_1us@j
  9370  1123  01F7               	clrf	DelayTime_1us@j+1
  9371  1124  3000               	movlw	0
  9372  1125  0277               	subwf	DelayTime_1us@j+1,w
  9373  1126  3002               	movlw	2
  9374  1127  1903               	skipnz
  9375  1128  0276               	subwf	DelayTime_1us@j,w
  9376  1129  1803               	btfsc	3,0
  9377  112A  2936               	goto	l9496
  9378  112B                     l9494:	
  9379  112B  3001               	movlw	1
  9380  112C  07F6               	addwf	DelayTime_1us@j,f
  9381  112D  3000               	movlw	0
  9382  112E  3DF7               	addwfc	DelayTime_1us@j+1,f
  9383  112F  3000               	movlw	0
  9384  1130  0277               	subwf	DelayTime_1us@j+1,w
  9385  1131  3002               	movlw	2
  9386  1132  1903               	skipnz
  9387  1133  0276               	subwf	DelayTime_1us@j,w
  9388  1134  1C03               	skipc
  9389  1135  292B               	goto	l9494
  9390  1136                     l9496:	
  9391  1136  3001               	movlw	1
  9392  1137  07F4               	addwf	DelayTime_1us@i,f
  9393  1138  3000               	movlw	0
  9394  1139  3DF5               	addwfc	DelayTime_1us@i+1,f
  9395  113A  291A               	goto	l363
  9396  113B                     __end_of_DelayTime_1us:	
  9397                           
  9398                           	psect	text48
  9399  1B31                     __ptext48:	
  9400 ;; *************** function _CC2500_ClearTXFIFO *****************
  9401 ;; Defined at:
  9402 ;;		line 194 in file "../src/CC2500_B1.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;		None
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;Total ram usage:        0 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    5
  9423 ;; This function calls:
  9424 ;;		_CC2500_WriteCommand
  9425 ;; This function is called by:
  9426 ;;		_CC2500_PowerOnInitial
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _CC2500_ClearTXFIFO
  9432  1B31                     _CC2500_ClearTXFIFO:	
  9433                           
  9434                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9438  1B31  303B               	movlw	59
  9439  1B32  319E  26A1         	fcall	_CC2500_WriteCommand
  9440  1B34  0008               	return
  9441  1B35                     __end_of_CC2500_ClearTXFIFO:	
  9442                           
  9443                           	psect	text49
  9444  1B2D                     __ptext49:	
  9445 ;; *************** function _CC2500_ClearRXFIFO *****************
  9446 ;; Defined at:
  9447 ;;		line 201 in file "../src/CC2500_B1.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;		None               void
  9454 ;; Registers used:
  9455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    5
  9468 ;; This function calls:
  9469 ;;		_CC2500_WriteCommand
  9470 ;; This function is called by:
  9471 ;;		_CC2500_PowerOnInitial
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           
  9476                           ;psect for function _CC2500_ClearRXFIFO
  9477  1B2D                     _CC2500_ClearRXFIFO:	
  9478                           
  9479                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9480                           
  9481                           ;incstack = 0
  9482                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9483  1B2D  303A               	movlw	58
  9484  1B2E  319E  26A1         	fcall	_CC2500_WriteCommand
  9485  1B30  0008               	return
  9486  1B31                     __end_of_CC2500_ClearRXFIFO:	
  9487                           
  9488                           	psect	text50
  9489  1EA1                     __ptext50:	
  9490 ;; *************** function _CC2500_WriteCommand *****************
  9491 ;; Defined at:
  9492 ;;		line 292 in file "../src/CC2500_B1.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  command         1    wreg     unsigned char 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  command         1    5[COMMON] unsigned char 
  9497 ;; Return value:  Size  Location     Type
  9498 ;;		None               void
  9499 ;; Registers used:
  9500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;Total ram usage:        2 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    4
  9513 ;; This function calls:
  9514 ;;		_CC2500_WriteByte
  9515 ;;		_RF_Timeout_Counter
  9516 ;;		_setRF_TimeoutCleared
  9517 ;; This function is called by:
  9518 ;;		_CC2500_TxData
  9519 ;;		_CC2500_RxData
  9520 ;;		_CC2500_ClearTXFIFO
  9521 ;;		_CC2500_ClearRXFIFO
  9522 ;;		_CC2500_FrequencyCabr
  9523 ;;		_CC2500_SIDLEMode
  9524 ;;		_setRF_Main
  9525 ;;		_RF_RxDisable
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function _CC2500_WriteCommand
  9531  1EA1                     _CC2500_WriteCommand:	
  9532                           
  9533                           ;incstack = 0
  9534                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9535                           ;CC2500_WriteCommand@command stored from wreg
  9536  1EA1  00F5               	movwf	CC2500_WriteCommand@command
  9537                           
  9538                           ;CC2500_B1.c: 293: RC4 = 0;
  9539  1EA2  0020               	movlb	0	; select bank0
  9540  1EA3  120E               	bcf	14,4	;volatile
  9541                           
  9542                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9543  1EA4  0875               	movf	CC2500_WriteCommand@command,w
  9544  1EA5  00F4               	movwf	??_CC2500_WriteCommand
  9545  1EA6  0874               	movf	??_CC2500_WriteCommand,w
  9546  1EA7  0021               	movlb	1	; select bank1
  9547  1EA8  00C6               	movwf	_SPI0Buffer^(0+128)
  9548                           
  9549                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9550  1EA9  2EAD               	goto	l9458
  9551  1EAA                     l9456:	
  9552                           
  9553                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9554  1EAA  319D  25D6  319E   	fcall	_RF_Timeout_Counter
  9555  1EAD                     l9458:	
  9556  1EAD  0020               	movlb	0	; select bank0
  9557  1EAE  1D0E               	btfss	14,2	;volatile
  9558  1EAF  2EB3               	goto	l9462
  9559  1EB0  0021               	movlb	1	; select bank1
  9560  1EB1  1F21               	btfss	(_RF1^(0+128)+1),6
  9561  1EB2  2EAA               	goto	l9456
  9562  1EB3                     l9462:	
  9563                           
  9564                           ;CC2500_B1.c: 298: };
  9565                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9566  1EB3  319B  2329  319E   	fcall	_setRF_TimeoutCleared
  9567                           
  9568                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9569  1EB6  319E  2657         	fcall	_CC2500_WriteByte
  9570                           
  9571                           ;CC2500_B1.c: 302: RC4 = 1;
  9572  1EB8  0020               	movlb	0	; select bank0
  9573  1EB9  160E               	bsf	14,4	;volatile
  9574  1EBA  0008               	return
  9575  1EBB                     __end_of_CC2500_WriteCommand:	
  9576                           
  9577                           	psect	text51
  9578  1B29                     __ptext51:	
  9579 ;; *************** function _setRF_TimeoutCleared *****************
  9580 ;; Defined at:
  9581 ;;		line 149 in file "../src/RF_Control_B1.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;		None               void
  9588 ;; Registers used:
  9589 ;;		status,2
  9590 ;; Tracked objects:
  9591 ;;		On entry : 0/0
  9592 ;;		On exit  : 0/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        0 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    3
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_CC2500_TxData
  9606 ;;		_CC2500_RxData
  9607 ;;		_CC2500_PowerRST
  9608 ;;		_CC2500_WriteREG
  9609 ;;		_CC2500_WriteCommand
  9610 ;;		_CC2500_ReadStatus
  9611 ;;		_CC2500_ReadREG
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _setRF_TimeoutCleared
  9617  1B29                     _setRF_TimeoutCleared:	
  9618                           
  9619                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9623  1B29  0021               	movlb	1	; select bank1
  9624  1B2A  01AC               	clrf	(_RF1^(0+128)+12)
  9625  1B2B  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9626  1B2C  0008               	return
  9627  1B2D                     __end_of_setRF_TimeoutCleared:	
  9628                           
  9629                           	psect	text52
  9630  1DD6                     __ptext52:	
  9631 ;; *************** function _RF_Timeout_Counter *****************
  9632 ;; Defined at:
  9633 ;;		line 141 in file "../src/RF_Control_B1.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;		None
  9636 ;; Auto vars:     Size  Location     Type
  9637 ;;		None
  9638 ;; Return value:  Size  Location     Type
  9639 ;;		None               void
  9640 ;; Registers used:
  9641 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9642 ;; Tracked objects:
  9643 ;;		On entry : 0/0
  9644 ;;		On exit  : 0/0
  9645 ;;		Unchanged: 0/0
  9646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;Total ram usage:        0 bytes
  9652 ;; Hardware stack levels used:    1
  9653 ;; Hardware stack levels required when called:    3
  9654 ;; This function calls:
  9655 ;;		Nothing
  9656 ;; This function is called by:
  9657 ;;		_CC2500_TxData
  9658 ;;		_CC2500_RxData
  9659 ;;		_CC2500_PowerRST
  9660 ;;		_CC2500_WriteREG
  9661 ;;		_CC2500_WriteCommand
  9662 ;;		_CC2500_ReadStatus
  9663 ;;		_CC2500_ReadREG
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _RF_Timeout_Counter
  9669  1DD6                     _RF_Timeout_Counter:	
  9670                           
  9671                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9675  1DD6  3001               	movlw	1
  9676  1DD7  0021               	movlb	1	; select bank1
  9677  1DD8  07AC               	addwf	(_RF1^(0+128)+12),f
  9678  1DD9  3000               	movlw	0
  9679  1DDA  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9680                           
  9681                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9682  1DDB  300C               	movlw	12
  9683  1DDC  3EA0               	addlw	_RF1& (0+255)
  9684  1DDD  0086               	movwf	6
  9685  1DDE  0187               	clrf	7
  9686  1DDF  3F40               	moviw [0]fsr1
  9687  1DE0  3AA8               	xorlw	168
  9688  1DE1  1D03               	skipz
  9689  1DE2  2DE5               	goto	u10855
  9690  1DE3  3F41               	moviw [1]fsr1
  9691  1DE4  3A61               	xorlw	97
  9692  1DE5                     u10855:	
  9693  1DE5  1D03               	skipz
  9694  1DE6  0008               	return
  9695                           
  9696                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9697  1DE7  01AC               	clrf	(_RF1^(0+128)+12)
  9698  1DE8  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9699                           
  9700                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9701  1DE9  1721               	bsf	(_RF1^(0+128)+1),6
  9702  1DEA  0008               	return
  9703  1DEB                     __end_of_RF_Timeout_Counter:	
  9704                           
  9705                           	psect	text53
  9706  1E57                     __ptext53:	
  9707 ;; *************** function _CC2500_WriteByte *****************
  9708 ;; Defined at:
  9709 ;;		line 226 in file "../src/CC2500_B1.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;		None
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;  loop_a          1    3[COMMON] unsigned char 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;		None               void
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;Total ram usage:        2 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:    3
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_CC2500_TxData
  9734 ;;		_CC2500_RxData
  9735 ;;		_CC2500_PowerRST
  9736 ;;		_CC2500_WriteREG
  9737 ;;		_CC2500_WriteCommand
  9738 ;;		_CC2500_ReadStatus
  9739 ;;		_CC2500_ReadREG
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           
  9744                           ;psect for function _CC2500_WriteByte
  9745  1E57                     _CC2500_WriteByte:	
  9746                           
  9747                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9748                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9752  1E57  01F3               	clrf	CC2500_WriteByte@loop_a
  9753  1E58                     L6:	
  9754  1E58  3008               	movlw	8
  9755  1E59  0273               	subwf	CC2500_WriteByte@loop_a,w
  9756  1E5A  1803               	btfsc	3,0
  9757  1E5B  0008               	return
  9758                           
  9759                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9760  1E5C  0021               	movlb	1	; select bank1
  9761  1E5D  1FC6               	btfss	_SPI0Buffer^(0+128),7
  9762  1E5E  2E62               	goto	l319
  9763                           
  9764                           ;CC2500_B1.c: 230: RC0 = 1;
  9765  1E5F  0020               	movlb	0	; select bank0
  9766  1E60  140E               	bsf	14,0	;volatile
  9767  1E61  2E64               	goto	l320
  9768  1E62                     l319:	
  9769                           
  9770                           ;CC2500_B1.c: 231: else
  9771                           ;CC2500_B1.c: 232: RC0 = 0;
  9772  1E62  0020               	movlb	0	; select bank0
  9773  1E63  100E               	bcf	14,0	;volatile
  9774  1E64                     l320:	
  9775                           
  9776                           ;CC2500_B1.c: 233: RC1 = 1;
  9777  1E64  148E               	bsf	14,1	;volatile
  9778                           
  9779                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9780  1E65  1003               	clrc
  9781  1E66  0021               	movlb	1	; select bank1
  9782  1E67  0DC6               	rlf	_SPI0Buffer^(0+128),f
  9783                           
  9784                           ;CC2500_B1.c: 235: RC1 = 0;
  9785  1E68  0020               	movlb	0	; select bank0
  9786  1E69  108E               	bcf	14,1	;volatile
  9787  1E6A  3001               	movlw	1
  9788  1E6B  00F2               	movwf	??_CC2500_WriteByte
  9789  1E6C  0872               	movf	??_CC2500_WriteByte,w
  9790  1E6D  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9791  1E6E  2E58               	goto	L6
  9792  1E6F                     __end_of_CC2500_WriteByte:	
  9793                           
  9794                           	psect	text54
  9795  1B19                     __ptext54:	
  9796 ;; *************** function _RF_Initialization *****************
  9797 ;; Defined at:
  9798 ;;		line 9 in file "../src/RF_Control_B1.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0, pclath, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        0 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    4
  9819 ;; This function calls:
  9820 ;;		_setRF_Initialization
  9821 ;; This function is called by:
  9822 ;;		_main
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _RF_Initialization
  9828  1B19                     _RF_Initialization:	
  9829                           
  9830                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9834  1B19  319B  2399         	fcall	_setRF_Initialization
  9835  1B1B  0008               	return
  9836  1B1C                     __end_of_RF_Initialization:	
  9837                           
  9838                           	psect	text55
  9839  1B99                     __ptext55:	
  9840 ;; *************** function _setRF_Initialization *****************
  9841 ;; Defined at:
  9842 ;;		line 17 in file "../src/RF_Control_B1.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;		None               void
  9849 ;; Registers used:
  9850 ;;		wreg
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9858 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;Total ram usage:        1 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    3
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_RF_Initialization
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           
  9871                           ;psect for function _setRF_Initialization
  9872  1B99                     _setRF_Initialization:	
  9873                           
  9874                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9875                           
  9876                           ;incstack = 0
  9877                           ; Regs used in _setRF_Initialization: [wreg]
  9878  1B99  3015               	movlw	21
  9879  1B9A  00F2               	movwf	??_setRF_Initialization
  9880  1B9B  0872               	movf	??_setRF_Initialization,w
  9881  1B9C  0021               	movlb	1	; select bank1
  9882  1B9D  00C8               	movwf	_Tx_Length^(0+128)
  9883                           
  9884                           ;RF_Control_B1.c: 20: RF1.RunTime = 100;
  9885  1B9E  3064               	movlw	100
  9886  1B9F  00A7               	movwf	(_RF1^(0+128)+7)
  9887  1BA0  3000               	movlw	0
  9888  1BA1  00A8               	movwf	(_RF1^(0+128)+8)
  9889  1BA2  0008               	return
  9890  1BA3                     __end_of_setRF_Initialization:	
  9891                           
  9892                           	psect	text56
  9893  1D5D                     __ptext56:	
  9894 ;; *************** function _Mcu_Initialization *****************
  9895 ;; Defined at:
  9896 ;;		line 30 in file "../src/MCU_B1.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;		None
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;		None
  9901 ;; Return value:  Size  Location     Type
  9902 ;;		None               void
  9903 ;; Registers used:
  9904 ;;		wreg, status,2, status,0, pclath, cstack
  9905 ;; Tracked objects:
  9906 ;;		On entry : 0/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;Total ram usage:        0 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:    4
  9917 ;; This function calls:
  9918 ;;		_ADC_Set
  9919 ;;		_Fosc_Set
  9920 ;;		_IOC_Set
  9921 ;;		_IO_Set
  9922 ;;		_TMR1_Set
  9923 ;;		_WDT_Set
  9924 ;; This function is called by:
  9925 ;;		_main
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _Mcu_Initialization
  9931  1D5D                     _Mcu_Initialization:	
  9932                           
  9933                           ;MCU_B1.c: 32: Fosc_Set();
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9937  1D5D  319B  2325  319D   	fcall	_Fosc_Set
  9938                           
  9939                           ;MCU_B1.c: 34: IO_Set();
  9940  1D60  319E  2687  319D   	fcall	_IO_Set
  9941                           
  9942                           ;MCU_B1.c: 36: ;;
  9943                           ;MCU_B1.c: 38: TMR1_Set();
  9944  1D63  319C  240B  319D   	fcall	_TMR1_Set
  9945                           
  9946                           ;MCU_B1.c: 40: ADC_Set();
  9947  1D66  319B  2360  319D   	fcall	_ADC_Set
  9948                           
  9949                           ;MCU_B1.c: 42: ;;
  9950                           ;MCU_B1.c: 44: ;;
  9951                           ;MCU_B1.c: 46: IOC_Set();
  9952  1D69  319B  23FF  319D   	fcall	_IOC_Set
  9953                           
  9954                           ;MCU_B1.c: 48: ;;
  9955                           ;MCU_B1.c: 50: ;;
  9956                           ;MCU_B1.c: 52: WDT_Set();
  9957  1D6C  319B  2390         	fcall	_WDT_Set
  9958  1D6E  0008               	return
  9959  1D6F                     __end_of_Mcu_Initialization:	
  9960                           
  9961                           	psect	text57
  9962  1B90                     __ptext57:	
  9963 ;; *************** function _WDT_Set *****************
  9964 ;; Defined at:
  9965 ;;		line 1092 in file "../src/MCU_B1.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;		None               void
  9972 ;; Registers used:
  9973 ;;		wreg
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9983 ;;Total ram usage:        1 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    3
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_Mcu_Initialization
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           
  9994                           ;psect for function _WDT_Set
  9995  1B90                     _WDT_Set:	
  9996                           
  9997                           ;MCU_B1.c: 1099: WDTCON = 0b00010111;;
  9998                           
  9999                           ;incstack = 0
 10000                           ; Regs used in _WDT_Set: [wreg]
 10001  1B90  3017               	movlw	23
 10002  1B91  0021               	movlb	1	; select bank1
 10003  1B92  0097               	movwf	23	;volatile
 10004                           
 10005                           ;MCU_B1.c: 1101: WDT.Enable = 1;
 10006  1B93  143F               	bsf	_WDT^(0+128),0
 10007                           
 10008                           ;MCU_B1.c: 1102: WDT.Timer = 10;
 10009  1B94  300A               	movlw	10
 10010  1B95  00F2               	movwf	??_WDT_Set
 10011  1B96  0872               	movf	??_WDT_Set,w
 10012  1B97  00C0               	movwf	(_WDT^(0+128)+1)
 10013  1B98  0008               	return
 10014  1B99                     __end_of_WDT_Set:	
 10015                           
 10016                           	psect	text58
 10017  1C0B                     __ptext58:	
 10018 ;; *************** function _TMR1_Set *****************
 10019 ;; Defined at:
 10020 ;;		line 221 in file "../src/MCU_B1.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    3
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_Mcu_Initialization
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _TMR1_Set
 10050  1C0B                     _TMR1_Set:	
 10051                           
 10052                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _TMR1_Set: [wreg]
 10056  1C0B  3041               	movlw	65
 10057  1C0C  0020               	movlb	0	; select bank0
 10058  1C0D  0098               	movwf	24	;volatile
 10059                           
 10060                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10061  1C0E  30FA               	movlw	250
 10062  1C0F  0097               	movwf	23	;volatile
 10063                           
 10064                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10065  1C10  3038               	movlw	56
 10066  1C11  0096               	movwf	22	;volatile
 10067                           
 10068                           ;MCU_B1.c: 225: TMR1IE = 1;
 10069  1C12  0021               	movlb	1	; select bank1
 10070  1C13  1411               	bsf	17,0	;volatile
 10071                           
 10072                           ;MCU_B1.c: 226: PEIE = 1;
 10073  1C14  170B               	bsf	11,6	;volatile
 10074                           
 10075                           ;MCU_B1.c: 227: GIE = 1;
 10076  1C15  178B               	bsf	11,7	;volatile
 10077  1C16  0008               	return
 10078  1C17                     __end_of_TMR1_Set:	
 10079                           
 10080                           	psect	text59
 10081  1E87                     __ptext59:	
 10082 ;; *************** function _IO_Set *****************
 10083 ;; Defined at:
 10084 ;;		line 60 in file "../src/MCU_B1.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;		None
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;		None
 10089 ;; Return value:  Size  Location     Type
 10090 ;;		None               void
 10091 ;; Registers used:
 10092 ;;		wreg, status,2
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;Total ram usage:        0 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; Hardware stack levels required when called:    3
 10105 ;; This function calls:
 10106 ;;		Nothing
 10107 ;; This function is called by:
 10108 ;;		_Mcu_Initialization
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _IO_Set
 10114  1E87                     _IO_Set:	
 10115                           
 10116                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _IO_Set: [wreg+status,2]
 10120  1E87  3077               	movlw	119
 10121  1E88  0021               	movlb	1	; select bank1
 10122  1E89  008C               	movwf	12	;volatile
 10123                           
 10124                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10125  1E8A  3007               	movlw	7
 10126  1E8B  008D               	movwf	13	;volatile
 10127                           
 10128                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10129  1E8C  300C               	movlw	12
 10130  1E8D  008E               	movwf	14	;volatile
 10131                           
 10132                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10133  1E8E  0022               	movlb	2	; select bank2
 10134  1E8F  018C               	clrf	12	;volatile
 10135                           
 10136                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10137  1E90  018D               	clrf	13	;volatile
 10138                           
 10139                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10140  1E91  018E               	clrf	14	;volatile
 10141                           
 10142                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10143  1E92  3022               	movlw	34
 10144  1E93  0023               	movlb	3	; select bank3
 10145  1E94  008C               	movwf	12	;volatile
 10146                           
 10147                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10148  1E95  018D               	clrf	13	;volatile
 10149                           
 10150                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10151  1E96  018E               	clrf	14	;volatile
 10152                           
 10153                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10154  1E97  3077               	movlw	119
 10155  1E98  0020               	movlb	0	; select bank0
 10156  1E99  008C               	movwf	12	;volatile
 10157                           
 10158                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10159  1E9A  3007               	movlw	7
 10160  1E9B  008D               	movwf	13	;volatile
 10161                           
 10162                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10163  1E9C  300C               	movlw	12
 10164  1E9D  008E               	movwf	14	;volatile
 10165                           
 10166                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10167  1E9E  0024               	movlb	4	; select bank4
 10168  1E9F  018D               	clrf	13	;volatile
 10169  1EA0  0008               	return
 10170  1EA1                     __end_of_IO_Set:	
 10171                           
 10172                           	psect	text60
 10173  1BFF                     __ptext60:	
 10174 ;; *************** function _IOC_Set *****************
 10175 ;; Defined at:
 10176 ;;		line 362 in file "../src/MCU_B1.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;		None
 10179 ;; Auto vars:     Size  Location     Type
 10180 ;;		None
 10181 ;; Return value:  Size  Location     Type
 10182 ;;		None               void
 10183 ;; Registers used:
 10184 ;;		wreg, status,2
 10185 ;; Tracked objects:
 10186 ;;		On entry : 0/0
 10187 ;;		On exit  : 0/0
 10188 ;;		Unchanged: 0/0
 10189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;Total ram usage:        0 bytes
 10195 ;; Hardware stack levels used:    1
 10196 ;; Hardware stack levels required when called:    3
 10197 ;; This function calls:
 10198 ;;		Nothing
 10199 ;; This function is called by:
 10200 ;;		_Mcu_Initialization
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           
 10205                           ;psect for function _IOC_Set
 10206  1BFF                     _IOC_Set:	
 10207                           
 10208                           ;MCU_B1.c: 363: WPUB2 = 0;
 10209                           
 10210                           ;incstack = 0
 10211                           ; Regs used in _IOC_Set: [wreg+status,2]
 10212  1BFF  0024               	movlb	4	; select bank4
 10213  1C00  110D               	bcf	13,2	;volatile
 10214                           
 10215                           ;MCU_B1.c: 383: IOCBP = 0b00000100;
 10216  1C01  3004               	movlw	4
 10217  1C02  0027               	movlb	7	; select bank7
 10218  1C03  0094               	movwf	20	;volatile
 10219                           
 10220                           ;MCU_B1.c: 384: IOCBN = 0b00000000;
 10221  1C04  0195               	clrf	21	;volatile
 10222                           
 10223                           ;MCU_B1.c: 388: IOCBF = 0b00000000;
 10224  1C05  0196               	clrf	22	;volatile
 10225                           
 10226                           ;MCU_B1.c: 390: IOCIE = 1;
 10227  1C06  158B               	bsf	11,3	;volatile
 10228                           
 10229                           ;MCU_B1.c: 391: IOCIF = 0;
 10230  1C07  100B               	bcf	11,0	;volatile
 10231                           
 10232                           ;MCU_B1.c: 392: PEIE = 1;
 10233  1C08  170B               	bsf	11,6	;volatile
 10234                           
 10235                           ;MCU_B1.c: 393: GIE = 1;
 10236  1C09  178B               	bsf	11,7	;volatile
 10237  1C0A  0008               	return
 10238  1C0B                     __end_of_IOC_Set:	
 10239                           
 10240                           	psect	text61
 10241  1B25                     __ptext61:	
 10242 ;; *************** function _Fosc_Set *****************
 10243 ;; Defined at:
 10244 ;;		line 56 in file "../src/MCU_B1.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;		None               void
 10251 ;; Registers used:
 10252 ;;		wreg
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;Total ram usage:        0 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    3
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_Mcu_Initialization
 10269 ;; This function uses a non-reentrant model
 10270 ;;
 10271                           
 10272                           
 10273                           ;psect for function _Fosc_Set
 10274  1B25                     _Fosc_Set:	
 10275                           
 10276                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10277                           
 10278                           ;incstack = 0
 10279                           ; Regs used in _Fosc_Set: [wreg]
 10280  1B25  3078               	movlw	120
 10281  1B26  0021               	movlb	1	; select bank1
 10282  1B27  0099               	movwf	25	;volatile
 10283  1B28  0008               	return
 10284  1B29                     __end_of_Fosc_Set:	
 10285                           
 10286                           	psect	text62
 10287  1B60                     __ptext62:	
 10288 ;; *************** function _ADC_Set *****************
 10289 ;; Defined at:
 10290 ;;		line 428 in file "../src/MCU_B1.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;		None               void
 10297 ;; Registers used:
 10298 ;;		wreg
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        0 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    3
 10311 ;; This function calls:
 10312 ;;		Nothing
 10313 ;; This function is called by:
 10314 ;;		_Mcu_Initialization
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _ADC_Set
 10320  1B60                     _ADC_Set:	
 10321                           
 10322                           ;MCU_B1.c: 429: ADCON1 = 0xf3;
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _ADC_Set: [wreg]
 10326  1B60  30F3               	movlw	243
 10327  1B61  0021               	movlb	1	; select bank1
 10328  1B62  009E               	movwf	30	;volatile
 10329                           
 10330                           ;MCU_B1.c: 430: FVRCON = 0xc1;
 10331  1B63  30C1               	movlw	193
 10332  1B64  0022               	movlb	2	; select bank2
 10333  1B65  0097               	movwf	23	;volatile
 10334  1B66  0008               	return
 10335  1B67                     __end_of_ADC_Set:	
 10336                           
 10337                           	psect	text63
 10338  0055                     __ptext63:	
 10339 ;; *************** function _Load_Main *****************
 10340 ;; Defined at:
 10341 ;;		line 39 in file "../src/OverLoad_B1.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;		None
 10344 ;; Auto vars:     Size  Location     Type
 10345 ;;  i               2    4[BANK0 ] int 
 10346 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10347 ;;  error           1    2[BANK0 ] unsigned char 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;		None               void
 10350 ;; Registers used:
 10351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;Total ram usage:        6 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    4
 10364 ;; This function calls:
 10365 ;;		___lwdiv
 10366 ;;		___wmul
 10367 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10368 ;;		_getDimmer_LoadGO
 10369 ;;		_getDimmer_Load_Status
 10370 ;;		_getMain_All_Error_Status
 10371 ;;		_getMain_LightsStatus
 10372 ;;		_getMain_Lights_Count
 10373 ;;		_setLoad_AH_AL_Restore
 10374 ;; This function is called by:
 10375 ;;		_main
 10376 ;; This function uses a non-reentrant model
 10377 ;;
 10378                           
 10379                           
 10380                           ;psect for function _Load_Main
 10381  0055                     _Load_Main:	
 10382                           
 10383                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10384                           
 10385                           ;incstack = 0
 10386                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10387  0055  3000               	movlw	0
 10388  0056  3192  2208  3180   	fcall	_getMain_All_Error_Status
 10389  0059  0020               	movlb	0	; select bank0
 10390  005A  00A0               	movwf	??_Load_Main
 10391  005B  0820               	movf	??_Load_Main,w
 10392  005C  00A2               	movwf	Load_Main@error
 10393                           
 10394                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10395  005D  01A3               	clrf	Load_Main@Load_Status
 10396                           
 10397                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10398  005E  0022               	movlb	2	; select bank2
 10399  005F  1C31               	btfss	_Load^(0+256),0
 10400  0060  29E9               	goto	l1807
 10401                           
 10402                           ;OverLoad_B1.c: 45: if (getMain_LightsStatus() == 0) {
 10403  0061  319C  246C  3180   	fcall	_getMain_LightsStatus
 10404  0064  3800               	iorlw	0
 10405  0065  1D03               	skipz
 10406  0066  2869               	goto	l10622
 10407                           
 10408                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10409  0067  0022               	movlb	2	; select bank2
 10410  0068  288A               	goto	l10640
 10411  0069                     l10622:	
 10412                           ;OverLoad_B1.c: 47: } else {
 10413                           
 10414                           
 10415                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10416  0069  0020               	movlb	0	; select bank0
 10417  006A  08A2               	movf	Load_Main@error,f
 10418  006B  1D03               	skipz
 10419  006C  2887               	goto	l1810
 10420  006D  319E  26D6  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10421  0070  3800               	iorlw	0
 10422  0071  1D03               	skipz
 10423  0072  2887               	goto	l1810
 10424                           
 10425                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10426  0073  0022               	movlb	2	; select bank2
 10427  0074  14B1               	bsf	_Load^(0+256),1
 10428                           
 10429                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10430  0075  319B  2352  3180   	fcall	_getDimmer_LoadGO
 10431  0078  3A01               	xorlw	1
 10432  0079  1D03               	skipz
 10433  007A  2882               	goto	l1811
 10434                           
 10435                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10436  007B  0022               	movlb	2	; select bank2
 10437  007C  1DB1               	btfss	_Load^(0+256),3
 10438  007D  1BB1               	btfsc	_Load^(0+256),7
 10439  007E  288B               	goto	l1809
 10440                           
 10441                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10442  007F  15B1               	bsf	_Load^(0+256),3
 10443                           
 10444                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10445  0080  01DA               	clrf	(_Load^(0+256)+41)
 10446                           
 10447                           ;OverLoad_B1.c: 57: }
 10448                           ;OverLoad_B1.c: 58: } else {
 10449  0081  288B               	goto	l1809
 10450  0082                     l1811:	
 10451                           
 10452                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10453  0082  0022               	movlb	2	; select bank2
 10454  0083  1FB1               	btfss	_Load^(0+256),7
 10455  0084  288B               	goto	l1809
 10456                           
 10457                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10458  0085  13B1               	bcf	_Load^(0+256),7
 10459                           
 10460                           ;OverLoad_B1.c: 61: }
 10461                           ;OverLoad_B1.c: 62: }
 10462                           ;OverLoad_B1.c: 63: } else {
 10463  0086  288B               	goto	l1809
 10464  0087                     l1810:	
 10465                           
 10466                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10467  0087  0022               	movlb	2	; select bank2
 10468  0088  1CB1               	btfss	_Load^(0+256),1
 10469  0089  288B               	goto	l1809
 10470  008A                     l10640:	
 10471                           
 10472                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10473  008A  10B1               	bcf	_Load^(0+256),1
 10474  008B                     l1809:	
 10475                           
 10476                           ;OverLoad_B1.c: 66: }
 10477                           ;OverLoad_B1.c: 67: }
 10478                           ;OverLoad_B1.c: 69: }
 10479                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10480  008B  1CB1               	btfss	_Load^(0+256),1
 10481  008C  29C5               	goto	l1817
 10482                           
 10483                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10484  008D  1531               	bsf	_Load^(0+256),2
 10485                           
 10486                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10487  008E  1E31               	btfss	_Load^(0+256),4
 10488  008F  29C3               	goto	l1818
 10489                           
 10490                           ;OverLoad_B1.c: 76: Load.Time++;
 10491  0090  3001               	movlw	1
 10492  0091  07B2               	addwf	(_Load^(0+256)+1),f
 10493  0092  3000               	movlw	0
 10494  0093  3DB3               	addwfc	((_Load+1)^(0+256)+1),f
 10495                           
 10496                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10497  0094  3000               	movlw	0
 10498  0095  0233               	subwf	((_Load+1)^(0+256)+1),w
 10499  0096  3002               	movlw	2
 10500  0097  1903               	skipnz
 10501  0098  0232               	subwf	(_Load^(0+256)+1),w
 10502  0099  1C03               	skipc
 10503  009A  0008               	return
 10504                           
 10505                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10506  009B  01B2               	clrf	(_Load^(0+256)+1)
 10507  009C  01B3               	clrf	((_Load+1)^(0+256)+1)
 10508                           
 10509                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10510  009D  1231               	bcf	_Load^(0+256),4
 10511                           
 10512                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10513  009E  3001               	movlw	1
 10514  009F  0020               	movlb	0	; select bank0
 10515  00A0  00A4               	movwf	Load_Main@i
 10516  00A1  3000               	movlw	0
 10517  00A2  00A5               	movwf	Load_Main@i+1
 10518  00A3  0825               	movf	Load_Main@i+1,w
 10519  00A4  3A80               	xorlw	128
 10520  00A5  00A0               	movwf	??_Load_Main
 10521  00A6  3080               	movlw	128
 10522  00A7  0220               	subwf	??_Load_Main,w
 10523  00A8  1D03               	skipz
 10524  00A9  28AC               	goto	u13225
 10525  00AA  3004               	movlw	4
 10526  00AB  0224               	subwf	Load_Main@i,w
 10527  00AC                     u13225:	
 10528  00AC  1803               	btfsc	3,0
 10529  00AD  28E0               	goto	l10662
 10530  00AE                     l10656:	
 10531                           
 10532                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10533  00AE  0020               	movlb	0	; select bank0
 10534  00AF  3524               	lslf	Load_Main@i,w
 10535  00B0  3E3C               	addlw	(_Load+11)& (0+255)
 10536  00B1  0086               	movwf	6
 10537  00B2  3001               	movlw	1	; select bank2/3
 10538  00B3  0087               	movwf	7
 10539  00B4  3F40               	moviw [0]fsr1
 10540  00B5  00A0               	movwf	??_Load_Main
 10541  00B6  3F41               	moviw [1]fsr1
 10542  00B7  00A1               	movwf	??_Load_Main+1
 10543  00B8  0820               	movf	??_Load_Main,w
 10544  00B9  0022               	movlb	2	; select bank2
 10545  00BA  07B6               	addwf	(_Load^(0+256)+5),f
 10546  00BB  0020               	movlb	0	; select bank0
 10547  00BC  0821               	movf	??_Load_Main+1,w
 10548  00BD  0022               	movlb	2	; select bank2
 10549  00BE  3DB7               	addwfc	((_Load+1)^(0+256)+5),f
 10550                           
 10551                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10552  00BF  0020               	movlb	0	; select bank0
 10553  00C0  3524               	lslf	Load_Main@i,w
 10554  00C1  3E46               	addlw	(_Load+21)& (0+255)
 10555  00C2  0086               	movwf	6
 10556  00C3  3001               	movlw	1	; select bank2/3
 10557  00C4  0087               	movwf	7
 10558  00C5  3F40               	moviw [0]fsr1
 10559  00C6  00A0               	movwf	??_Load_Main
 10560  00C7  3F41               	moviw [1]fsr1
 10561  00C8  00A1               	movwf	??_Load_Main+1
 10562  00C9  0820               	movf	??_Load_Main,w
 10563  00CA  0022               	movlb	2	; select bank2
 10564  00CB  07B8               	addwf	(_Load^(0+256)+7),f
 10565  00CC  0020               	movlb	0	; select bank0
 10566  00CD  0821               	movf	??_Load_Main+1,w
 10567  00CE  0022               	movlb	2	; select bank2
 10568  00CF  3DB9               	addwfc	((_Load+1)^(0+256)+7),f
 10569  00D0  3001               	movlw	1
 10570  00D1  0020               	movlb	0	; select bank0
 10571  00D2  07A4               	addwf	Load_Main@i,f
 10572  00D3  3000               	movlw	0
 10573  00D4  3DA5               	addwfc	Load_Main@i+1,f
 10574  00D5  0825               	movf	Load_Main@i+1,w
 10575  00D6  3A80               	xorlw	128
 10576  00D7  00A0               	movwf	??_Load_Main
 10577  00D8  3080               	movlw	128
 10578  00D9  0220               	subwf	??_Load_Main,w
 10579  00DA  1D03               	skipz
 10580  00DB  28DE               	goto	u13235
 10581  00DC  3004               	movlw	4
 10582  00DD  0224               	subwf	Load_Main@i,w
 10583  00DE                     u13235:	
 10584  00DE  1C03               	skipc
 10585  00DF  28AE               	goto	l10656
 10586  00E0                     l10662:	
 10587                           
 10588                           ;OverLoad_B1.c: 84: }
 10589                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10590  00E0  3003               	movlw	3
 10591  00E1  00F2               	movwf	___lwdiv@divisor
 10592  00E2  3000               	movlw	0
 10593  00E3  00F3               	movwf	___lwdiv@divisor+1
 10594  00E4  0022               	movlb	2	; select bank2
 10595  00E5  0837               	movf	((_Load+1)^(0+256)+5),w
 10596  00E6  01F5               	clrf	___lwdiv@dividend+1
 10597  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 10598  00E8  0836               	movf	(_Load^(0+256)+5),w
 10599  00E9  01F4               	clrf	___lwdiv@dividend
 10600  00EA  07F4               	addwf	___lwdiv@dividend,f
 10601  00EB  3192  229D  3180   	fcall	___lwdiv
 10602  00EE  0873               	movf	?___lwdiv+1,w
 10603  00EF  0022               	movlb	2	; select bank2
 10604  00F0  01B7               	clrf	((_Load+1)^(0+256)+5)
 10605  00F1  07B7               	addwf	((_Load+1)^(0+256)+5),f
 10606  00F2  0872               	movf	?___lwdiv,w
 10607  00F3  01B6               	clrf	(_Load^(0+256)+5)
 10608  00F4  07B6               	addwf	(_Load^(0+256)+5),f
 10609                           
 10610                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10611  00F5  3003               	movlw	3
 10612  00F6  00F2               	movwf	___lwdiv@divisor
 10613  00F7  3000               	movlw	0
 10614  00F8  00F3               	movwf	___lwdiv@divisor+1
 10615  00F9  0839               	movf	((_Load+1)^(0+256)+7),w
 10616  00FA  01F5               	clrf	___lwdiv@dividend+1
 10617  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 10618  00FC  0838               	movf	(_Load^(0+256)+7),w
 10619  00FD  01F4               	clrf	___lwdiv@dividend
 10620  00FE  07F4               	addwf	___lwdiv@dividend,f
 10621  00FF  3192  229D  3180   	fcall	___lwdiv
 10622  0102  0873               	movf	?___lwdiv+1,w
 10623  0103  0022               	movlb	2	; select bank2
 10624  0104  01B9               	clrf	((_Load+1)^(0+256)+7)
 10625  0105  07B9               	addwf	((_Load+1)^(0+256)+7),f
 10626  0106  0872               	movf	?___lwdiv,w
 10627  0107  01B8               	clrf	(_Load^(0+256)+7)
 10628  0108  07B8               	addwf	(_Load^(0+256)+7),f
 10629                           
 10630                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10631  0109  319E  26BB  3180   	fcall	_setLoad_AH_AL_Restore
 10632                           
 10633                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10634  010C  0022               	movlb	2	; select bank2
 10635  010D  0839               	movf	((_Load+1)^(0+256)+7),w
 10636  010E  0237               	subwf	((_Load+1)^(0+256)+5),w
 10637  010F  1D03               	skipz
 10638  0110  2913               	goto	u13245
 10639  0111  0838               	movf	(_Load^(0+256)+7),w
 10640  0112  0236               	subwf	(_Load^(0+256)+5),w
 10641  0113                     u13245:	
 10642  0113  1C03               	skipc
 10643  0114  0008               	return
 10644                           
 10645                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10646  0115  3005               	movlw	5
 10647  0116  3E31               	addlw	_Load& (0+255)
 10648  0117  0086               	movwf	6
 10649  0118  3001               	movlw	1	; select bank2/3
 10650  0119  0087               	movwf	7
 10651  011A  0938               	comf	(_Load^(0+256)+7),w
 10652  011B  0020               	movlb	0	; select bank0
 10653  011C  00A0               	movwf	??_Load_Main
 10654  011D  0022               	movlb	2	; select bank2
 10655  011E  0939               	comf	((_Load+1)^(0+256)+7),w
 10656  011F  0020               	movlb	0	; select bank0
 10657  0120  00A1               	movwf	??_Load_Main+1
 10658  0121  0AA0               	incf	??_Load_Main,f
 10659  0122  1903               	skipnz
 10660  0123  0AA1               	incf	??_Load_Main+1,f
 10661  0124  3F40               	moviw [0]fsr1
 10662  0125  0720               	addwf	??_Load_Main,w
 10663  0126  0022               	movlb	2	; select bank2
 10664  0127  00D0               	movwf	(_Load^(0+256)+31)
 10665  0128  3F41               	moviw [1]fsr1
 10666  0129  0020               	movlb	0	; select bank0
 10667  012A  3D21               	addwfc	??_Load_Main+1,w
 10668  012B  0022               	movlb	2	; select bank2
 10669  012C  00D1               	movwf	(_Load^(0+256)+32)
 10670                           
 10671                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10672  012D  01B6               	clrf	(_Load^(0+256)+5)
 10673  012E  01B7               	clrf	((_Load+1)^(0+256)+5)
 10674                           
 10675                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10676  012F  01B8               	clrf	(_Load^(0+256)+7)
 10677  0130  01B9               	clrf	((_Load+1)^(0+256)+7)
 10678                           
 10679                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10680  0131  1DB1               	btfss	_Load^(0+256),3
 10681  0132  298F               	goto	l10702
 10682                           
 10683                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10684  0133  3002               	movlw	2
 10685  0134  025A               	subwf	(_Load^(0+256)+41),w
 10686  0135  1803               	skipnc
 10687  0136  298F               	goto	l10702
 10688                           
 10689                           ;OverLoad_B1.c: 96: Load.Count++;
 10690  0137  3001               	movlw	1
 10691  0138  0020               	movlb	0	; select bank0
 10692  0139  00A0               	movwf	??_Load_Main
 10693  013A  0820               	movf	??_Load_Main,w
 10694  013B  0022               	movlb	2	; select bank2
 10695  013C  07DA               	addwf	(_Load^(0+256)+41),f
 10696                           
 10697                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10698  013D  319B  2359  3180   	fcall	_getDimmer_Load_Status
 10699  0140  0020               	movlb	0	; select bank0
 10700  0141  00A0               	movwf	??_Load_Main
 10701  0142  0820               	movf	??_Load_Main,w
 10702  0143  00A3               	movwf	Load_Main@Load_Status
 10703                           
 10704                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10705  0144  319C  24C8  3180   	fcall	_getMain_Lights_Count
 10706  0147  0020               	movlb	0	; select bank0
 10707  0148  00A0               	movwf	??_Load_Main
 10708  0149  0820               	movf	??_Load_Main,w
 10709  014A  0022               	movlb	2	; select bank2
 10710  014B  00DD               	movwf	(_Load^(0+256)+44)
 10711                           
 10712                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10713  014C  085A               	movf	(_Load^(0+256)+41),w
 10714  014D  3A01               	xorlw	1
 10715  014E  1D03               	skipz
 10716  014F  295A               	goto	l10688
 10717                           
 10718                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10719  0150  3002               	movlw	2
 10720  0151  0020               	movlb	0	; select bank0
 10721  0152  00A0               	movwf	??_Load_Main
 10722  0153  0820               	movf	??_Load_Main,w
 10723  0154  0022               	movlb	2	; select bank2
 10724  0155  00DC               	movwf	(_Load^(0+256)+43)
 10725                           
 10726                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10727  0156  30E8               	movlw	232
 10728  0157  00D6               	movwf	(_Load^(0+256)+37)
 10729  0158  3003               	movlw	3
 10730  0159  2965               	goto	L7
 10731  015A                     l10688:	
 10732                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10733                           
 10734  015A  085A               	movf	(_Load^(0+256)+41),w
 10735  015B  3A02               	xorlw	2
 10736  015C  1D03               	skipz
 10737  015D  298F               	goto	l10702
 10738                           
 10739                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10740  015E  085D               	movf	(_Load^(0+256)+44),w
 10741  015F  3A01               	xorlw	1
 10742  0160  1D03               	skipz
 10743  0161  2967               	goto	l10694
 10744                           
 10745                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10746  0162  3037               	movlw	55
 10747  0163  00D6               	movwf	(_Load^(0+256)+37)
 10748  0164  3000               	movlw	0
 10749  0165                     L7:	
 10750  0165  00D7               	movwf	(_Load^(0+256)+38)
 10751                           
 10752                           ;OverLoad_B1.c: 105: } else {
 10753  0166  298F               	goto	l10702
 10754  0167                     l10694:	
 10755                           
 10756                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10757  0167  0020               	movlb	0	; select bank0
 10758  0168  08A3               	movf	Load_Main@Load_Status,f
 10759  0169  1D03               	skipz
 10760  016A  2983               	goto	l10698
 10761                           
 10762                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10763  016B  0022               	movlb	2	; select bank2
 10764  016C  085D               	movf	(_Load^(0+256)+44),w
 10765  016D  0020               	movlb	0	; select bank0
 10766  016E  00A0               	movwf	??_Load_Main
 10767  016F  01A1               	clrf	??_Load_Main+1
 10768  0170  0820               	movf	??_Load_Main,w
 10769  0171  00F2               	movwf	___wmul@multiplier
 10770  0172  0821               	movf	??_Load_Main+1,w
 10771  0173  00F3               	movwf	___wmul@multiplier+1
 10772  0174  3037               	movlw	55
 10773  0175  00F4               	movwf	___wmul@multiplicand
 10774  0176  3000               	movlw	0
 10775  0177  00F5               	movwf	___wmul@multiplicand+1
 10776  0178  319F  2745  3180   	fcall	___wmul
 10777  017B  0873               	movf	?___wmul+1,w
 10778  017C  0022               	movlb	2	; select bank2
 10779  017D  01D7               	clrf	((_Load+1)^(0+256)+37)
 10780  017E  07D7               	addwf	((_Load+1)^(0+256)+37),f
 10781  017F  0872               	movf	?___wmul,w
 10782  0180  01D6               	clrf	(_Load^(0+256)+37)
 10783  0181  07D6               	addwf	(_Load^(0+256)+37),f
 10784                           
 10785                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10786  0182  298F               	goto	l10702
 10787  0183                     l10698:	
 10788  0183  0020               	movlb	0	; select bank0
 10789  0184  0823               	movf	Load_Main@Load_Status,w
 10790  0185  3A01               	xorlw	1
 10791  0186  1D03               	skipz
 10792  0187  298F               	goto	l10702
 10793                           
 10794                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10795  0188  0022               	movlb	2	; select bank2
 10796  0189  083A               	movf	(_Load^(0+256)+9),w
 10797  018A  3E37               	addlw	55
 10798  018B  00D6               	movwf	(_Load^(0+256)+37)
 10799  018C  3000               	movlw	0
 10800  018D  3D3B               	addwfc	((_Load+1)^(0+256)+9),w
 10801  018E  00D7               	movwf	((_Load+1)^(0+256)+37)
 10802  018F                     l10702:	
 10803                           
 10804                           ;OverLoad_B1.c: 110: }
 10805                           ;OverLoad_B1.c: 111: }
 10806                           ;OverLoad_B1.c: 112: }
 10807                           ;OverLoad_B1.c: 113: }
 10808                           ;OverLoad_B1.c: 114: }
 10809                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10810  018F  0022               	movlb	2	; select bank2
 10811  0190  0857               	movf	((_Load+1)^(0+256)+37),w
 10812  0191  0251               	subwf	((_Load+1)^(0+256)+31),w
 10813  0192  1D03               	skipz
 10814  0193  2996               	goto	u13325
 10815  0194  0856               	movf	(_Load^(0+256)+37),w
 10816  0195  0250               	subwf	(_Load^(0+256)+31),w
 10817  0196                     u13325:	
 10818  0196  1C03               	skipc
 10819  0197  29A5               	goto	l10712
 10820                           
 10821                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10822  0198  3001               	movlw	1
 10823  0199  0020               	movlb	0	; select bank0
 10824  019A  00A0               	movwf	??_Load_Main
 10825  019B  0820               	movf	??_Load_Main,w
 10826  019C  0022               	movlb	2	; select bank2
 10827  019D  07DB               	addwf	(_Load^(0+256)+42),f
 10828                           
 10829                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10830  019E  085B               	movf	(_Load^(0+256)+42),w
 10831  019F  025C               	subwf	(_Load^(0+256)+43),w
 10832  01A0  1803               	skipnc
 10833  01A1  0008               	return
 10834                           
 10835                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10836  01A2  01DB               	clrf	(_Load^(0+256)+42)
 10837                           
 10838                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10839  01A3  16B1               	bsf	_Load^(0+256),5
 10840                           
 10841                           ;OverLoad_B1.c: 142: }
 10842                           ;OverLoad_B1.c: 143: } else {
 10843  01A4  0008               	return
 10844  01A5                     l10712:	
 10845                           
 10846                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10847  01A5  01DB               	clrf	(_Load^(0+256)+42)
 10848                           
 10849                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10850  01A6  1DB1               	btfss	_Load^(0+256),3
 10851  01A7  0008               	return
 10852                           
 10853                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10854  01A8  3001               	movlw	1
 10855  01A9  0020               	movlb	0	; select bank0
 10856  01AA  00A0               	movwf	??_Load_Main
 10857  01AB  0820               	movf	??_Load_Main,w
 10858  01AC  0022               	movlb	2	; select bank2
 10859  01AD  07DE               	addwf	(_Load^(0+256)+45),f
 10860                           
 10861                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10862  01AE  3003               	movlw	3
 10863  01AF  025E               	subwf	(_Load^(0+256)+45),w
 10864  01B0  1C03               	skipc
 10865  01B1  0008               	return
 10866                           
 10867                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10868  01B2  01DE               	clrf	(_Load^(0+256)+45)
 10869                           
 10870                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10871  01B3  17B1               	bsf	_Load^(0+256),7
 10872                           
 10873                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10874  01B4  11B1               	bcf	_Load^(0+256),3
 10875                           
 10876                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10877  01B5  01DA               	clrf	(_Load^(0+256)+41)
 10878                           
 10879                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10880  01B6  0851               	movf	((_Load+1)^(0+256)+31),w
 10881  01B7  01BB               	clrf	((_Load+1)^(0+256)+9)
 10882  01B8  07BB               	addwf	((_Load+1)^(0+256)+9),f
 10883  01B9  0850               	movf	(_Load^(0+256)+31),w
 10884  01BA  01BA               	clrf	(_Load^(0+256)+9)
 10885  01BB  07BA               	addwf	(_Load^(0+256)+9),f
 10886                           
 10887                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10888  01BC  3003               	movlw	3
 10889  01BD  0020               	movlb	0	; select bank0
 10890  01BE  00A0               	movwf	??_Load_Main
 10891  01BF  0820               	movf	??_Load_Main,w
 10892  01C0  0022               	movlb	2	; select bank2
 10893  01C1  00DC               	movwf	(_Load^(0+256)+43)
 10894                           
 10895                           ;OverLoad_B1.c: 156: }
 10896                           ;OverLoad_B1.c: 157: }
 10897                           ;OverLoad_B1.c: 180: }
 10898                           ;OverLoad_B1.c: 181: }
 10899                           ;OverLoad_B1.c: 182: }
 10900                           ;OverLoad_B1.c: 183: } else {
 10901  01C2  0008               	return
 10902  01C3                     l1818:	
 10903                           
 10904                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10905  01C3  1631               	bsf	_Load^(0+256),4
 10906                           
 10907                           ;OverLoad_B1.c: 185: }
 10908                           ;OverLoad_B1.c: 186: } else {
 10909  01C4  0008               	return
 10910  01C5                     l1817:	
 10911                           
 10912                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10913  01C5  1D31               	btfss	_Load^(0+256),2
 10914  01C6  29D8               	goto	l10750
 10915                           
 10916                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10917  01C7  1131               	bcf	_Load^(0+256),2
 10918                           
 10919                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10920  01C8  1231               	bcf	_Load^(0+256),4
 10921                           
 10922                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10923  01C9  01B2               	clrf	(_Load^(0+256)+1)
 10924  01CA  01B3               	clrf	((_Load+1)^(0+256)+1)
 10925                           
 10926                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10927  01CB  319E  26BB  3180   	fcall	_setLoad_AH_AL_Restore
 10928                           
 10929                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10930  01CE  0022               	movlb	2	; select bank2
 10931  01CF  01DB               	clrf	(_Load^(0+256)+42)
 10932                           
 10933                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10934  01D0  01DE               	clrf	(_Load^(0+256)+45)
 10935                           
 10936                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10937  01D1  01B6               	clrf	(_Load^(0+256)+5)
 10938  01D2  01B7               	clrf	((_Load+1)^(0+256)+5)
 10939                           
 10940                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10941  01D3  01B8               	clrf	(_Load^(0+256)+7)
 10942  01D4  01B9               	clrf	((_Load+1)^(0+256)+7)
 10943                           
 10944                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10945  01D5  11B1               	bcf	_Load^(0+256),3
 10946                           
 10947                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10948  01D6  01DA               	clrf	(_Load^(0+256)+41)
 10949                           
 10950                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10951  01D7  13B1               	bcf	_Load^(0+256),7
 10952  01D8                     l10750:	
 10953                           
 10954                           ;OverLoad_B1.c: 229: }
 10955                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10956  01D8  1EB1               	btfss	_Load^(0+256),5
 10957  01D9  0008               	return
 10958                           
 10959                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10960  01DA  3001               	movlw	1
 10961  01DB  07B4               	addwf	(_Load^(0+256)+3),f
 10962  01DC  3000               	movlw	0
 10963  01DD  3DB5               	addwfc	((_Load+1)^(0+256)+3),f
 10964                           
 10965                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10966  01DE  3001               	movlw	1
 10967  01DF  0235               	subwf	((_Load+1)^(0+256)+3),w
 10968  01E0  30F4               	movlw	244
 10969  01E1  1903               	skipnz
 10970  01E2  0234               	subwf	(_Load^(0+256)+3),w
 10971  01E3  1C03               	skipc
 10972  01E4  0008               	return
 10973                           
 10974                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10975  01E5  01B4               	clrf	(_Load^(0+256)+3)
 10976  01E6  01B5               	clrf	((_Load+1)^(0+256)+3)
 10977                           
 10978                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 10979  01E7  12B1               	bcf	_Load^(0+256),5
 10980                           
 10981                           ;OverLoad_B1.c: 235: }
 10982                           ;OverLoad_B1.c: 236: }
 10983                           ;OverLoad_B1.c: 237: }
 10984                           ;OverLoad_B1.c: 238: } else {
 10985  01E8  0008               	return
 10986  01E9                     l1807:	
 10987                           
 10988                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 10989  01E9  1C20               	btfss	_myMain^(0+256),0
 10990  01EA  0008               	return
 10991                           
 10992                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 10993  01EB  1431               	bsf	_Load^(0+256),0
 10994  01EC  0008               	return
 10995  01ED                     __end_of_Load_Main:	
 10996                           
 10997                           	psect	text64
 10998  1CC8                     __ptext64:	
 10999 ;; *************** function _getMain_Lights_Count *****************
 11000 ;; Defined at:
 11001 ;;		line 466 in file "../src/Main_B1.c"
 11002 ;; Parameters:    Size  Location     Type
 11003 ;;		None
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;  status2         1    4[COMMON] unsigned char 
 11006 ;;  status1         1    3[COMMON] unsigned char 
 11007 ;;  count           1    2[COMMON] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;                  1    wreg      unsigned char 
 11010 ;; Registers used:
 11011 ;;		wreg, status,2, status,0
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;Total ram usage:        3 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    3
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_Load_Main
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _getMain_Lights_Count
 11033  1CC8                     _getMain_Lights_Count:	
 11034                           
 11035                           ;Main_B1.c: 467: char count = 0;
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11039  1CC8  01F2               	clrf	getMain_Lights_Count@count
 11040                           
 11041                           ;Main_B1.c: 471: char status1 = 0;
 11042  1CC9  01F3               	clrf	getMain_Lights_Count@status1
 11043                           
 11044                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11045  1CCA  3000               	movlw	0
 11046  1CCB  0021               	movlb	1	; select bank1
 11047  1CCC  19DE               	btfsc	_DimmerIntr1^(0+128),3
 11048  1CCD  3001               	movlw	1
 11049  1CCE  00F3               	movwf	getMain_Lights_Count@status1
 11050                           
 11051                           ;Main_B1.c: 475: char status2 = 0;
 11052  1CCF  01F4               	clrf	getMain_Lights_Count@status2
 11053                           
 11054                           ;Main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11055  1CD0  3000               	movlw	0
 11056  1CD1  19E5               	btfsc	_DimmerIntr2^(0+128),3
 11057  1CD2  3001               	movlw	1
 11058  1CD3  00F4               	movwf	getMain_Lights_Count@status2
 11059                           
 11060                           ;Main_B1.c: 500: return count = (status1 + status2);
 11061  1CD4  0873               	movf	getMain_Lights_Count@status1,w
 11062  1CD5  0774               	addwf	getMain_Lights_Count@status2,w
 11063  1CD6  00F2               	movwf	getMain_Lights_Count@count
 11064  1CD7  0008               	return
 11065  1CD8                     __end_of_getMain_Lights_Count:	
 11066                           
 11067                           	psect	text65
 11068  1B59                     __ptext65:	
 11069 ;; *************** function _getDimmer_Load_Status *****************
 11070 ;; Defined at:
 11071 ;;		line 1057 in file "../src/Dimmer_B1.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;		None
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  status          1    2[COMMON] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      unsigned char 
 11078 ;; Registers used:
 11079 ;;		wreg, status,2
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;Total ram usage:        1 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    3
 11092 ;; This function calls:
 11093 ;;		Nothing
 11094 ;; This function is called by:
 11095 ;;		_Load_Main
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           
 11100                           ;psect for function _getDimmer_Load_Status
 11101  1B59                     _getDimmer_Load_Status:	
 11102                           
 11103                           ;Dimmer_B1.c: 1058: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11104                           
 11105                           ;incstack = 0
 11106                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11107  1B59  3000               	movlw	0
 11108  1B5A  0022               	movlb	2	; select bank2
 11109  1B5B  192E               	btfsc	_Dimmer^(0+256),2	;volatile
 11110  1B5C  3001               	movlw	1
 11111  1B5D  00F2               	movwf	getDimmer_Load_Status@status
 11112                           
 11113                           ;Dimmer_B1.c: 1059: return status;
 11114  1B5E  0872               	movf	getDimmer_Load_Status@status,w
 11115  1B5F  0008               	return
 11116  1B60                     __end_of_getDimmer_Load_Status:	
 11117                           
 11118                           	psect	text66
 11119  1B52                     __ptext66:	
 11120 ;; *************** function _getDimmer_LoadGO *****************
 11121 ;; Defined at:
 11122 ;;		line 1051 in file "../src/Dimmer_B1.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;		None
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;  loadgo          1    2[COMMON] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  1    wreg      unsigned char 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;Total ram usage:        1 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    3
 11143 ;; This function calls:
 11144 ;;		Nothing
 11145 ;; This function is called by:
 11146 ;;		_Load_Main
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           
 11151                           ;psect for function _getDimmer_LoadGO
 11152  1B52                     _getDimmer_LoadGO:	
 11153                           
 11154                           ;Dimmer_B1.c: 1052: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11155                           
 11156                           ;incstack = 0
 11157                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11158  1B52  3000               	movlw	0
 11159  1B53  0022               	movlb	2	; select bank2
 11160  1B54  18AE               	btfsc	_Dimmer^(0+256),1	;volatile
 11161  1B55  3001               	movlw	1
 11162  1B56  00F2               	movwf	getDimmer_LoadGO@loadgo
 11163                           
 11164                           ;Dimmer_B1.c: 1053: return loadgo;
 11165  1B57  0872               	movf	getDimmer_LoadGO@loadgo,w
 11166  1B58  0008               	return
 11167  1B59                     __end_of_getDimmer_LoadGO:	
 11168                           
 11169                           	psect	text67
 11170  1ED6                     __ptext67:	
 11171 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11172 ;; Defined at:
 11173 ;;		line 238 in file "../src/Dimmer_B1.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;		None
 11176 ;; Auto vars:     Size  Location     Type
 11177 ;;  status          1    5[COMMON] unsigned char 
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  1    wreg      unsigned char 
 11180 ;; Registers used:
 11181 ;;		wreg, status,2, status,0
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/0
 11184 ;;		On exit  : 0/0
 11185 ;;		Unchanged: 0/0
 11186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;Total ram usage:        4 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; Hardware stack levels required when called:    3
 11194 ;; This function calls:
 11195 ;;		Nothing
 11196 ;; This function is called by:
 11197 ;;		_Load_Main
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           
 11202                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11203  1ED6                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11204                           
 11205                           ;Dimmer_B1.c: 239: char status = 0;
 11206                           
 11207                           ;incstack = 0
 11208                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11209  1ED6  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11210                           
 11211                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11212  1ED7  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2060
 11213  1ED8  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2060,f
 11214  1ED9  0021               	movlb	1	; select bank1
 11215  1EDA  1E5E               	btfss	_DimmerIntr1^(0+128),4
 11216  1EDB  1A65               	btfsc	_DimmerIntr2^(0+128),4
 11217  1EDC  2EDE               	goto	l7536
 11218  1EDD  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2060
 11219  1EDE                     l7536:	
 11220  1EDE  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2060,w
 11221  1EDF  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11222  1EE0  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11223  1EE1  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11224                           
 11225                           ;Dimmer_B1.c: 254: if (status == 0) {
 11226  1EE2  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11227  1EE3  1D03               	skipz
 11228  1EE4  2EEF               	goto	l7548
 11229                           
 11230                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11231  1EE5  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2061
 11232  1EE6  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2061,f
 11233  1EE7  1F5E               	btfss	_DimmerIntr1^(0+128),6
 11234  1EE8  1B65               	btfsc	_DimmerIntr2^(0+128),6
 11235  1EE9  2EEB               	goto	l7546
 11236  1EEA  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2061
 11237  1EEB                     l7546:	
 11238  1EEB  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2061,w
 11239  1EEC  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11240  1EED  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11241  1EEE  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11242  1EEF                     l7548:	
 11243                           
 11244                           ;Dimmer_B1.c: 266: }
 11245                           ;Dimmer_B1.c: 268: return status;
 11246  1EEF  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11247  1EF0  0008               	return
 11248  1EF1                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11249                           
 11250                           	psect	text68
 11251  1F45                     __ptext68:	
 11252 ;; *************** function ___wmul *****************
 11253 ;; Defined at:
 11254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  multiplier      2    2[COMMON] unsigned int 
 11257 ;;  multiplicand    2    4[COMMON] unsigned int 
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  product         2    6[COMMON] unsigned int 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  2    2[COMMON] unsigned int 
 11262 ;; Registers used:
 11263 ;;		wreg, status,2, status,0
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;Total ram usage:        6 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    3
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_Load_Main
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           
 11284                           ;psect for function ___wmul
 11285  1F45                     ___wmul:	
 11286                           
 11287                           ;incstack = 0
 11288                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11289  1F45  01F6               	clrf	___wmul@product
 11290  1F46  01F7               	clrf	___wmul@product+1
 11291  1F47                     l8096:	
 11292  1F47  1C72               	btfss	___wmul@multiplier,0
 11293  1F48  2F4D               	goto	l2927
 11294  1F49  0874               	movf	___wmul@multiplicand,w
 11295  1F4A  07F6               	addwf	___wmul@product,f
 11296  1F4B  0875               	movf	___wmul@multiplicand+1,w
 11297  1F4C  3DF7               	addwfc	___wmul@product+1,f
 11298  1F4D                     l2927:	
 11299  1F4D  3001               	movlw	1
 11300  1F4E                     u8575:	
 11301  1F4E  35F4               	lslf	___wmul@multiplicand,f
 11302  1F4F  0DF5               	rlf	___wmul@multiplicand+1,f
 11303  1F50  0B89               	decfsz	9,f
 11304  1F51  2F4E               	goto	u8575
 11305  1F52  3001               	movlw	1
 11306  1F53                     u8585:	
 11307  1F53  36F3               	lsrf	___wmul@multiplier+1,f
 11308  1F54  0CF2               	rrf	___wmul@multiplier,f
 11309  1F55  0B89               	decfsz	9,f
 11310  1F56  2F53               	goto	u8585
 11311  1F57  0873               	movf	___wmul@multiplier+1,w
 11312  1F58  0472               	iorwf	___wmul@multiplier,w
 11313  1F59  1D03               	skipz
 11314  1F5A  2F47               	goto	l8096
 11315  1F5B  0877               	movf	___wmul@product+1,w
 11316  1F5C  01F3               	clrf	?___wmul+1
 11317  1F5D  07F3               	addwf	?___wmul+1,f
 11318  1F5E  0876               	movf	___wmul@product,w
 11319  1F5F  01F2               	clrf	?___wmul
 11320  1F60  07F2               	addwf	?___wmul,f
 11321  1F61  0008               	return
 11322  1F62                     __end_of___wmul:	
 11323                           
 11324                           	psect	text69
 11325  129D                     __ptext69:	
 11326 ;; *************** function ___lwdiv *****************
 11327 ;; Defined at:
 11328 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;  divisor         2    2[COMMON] unsigned int 
 11331 ;;  dividend        2    4[COMMON] unsigned int 
 11332 ;; Auto vars:     Size  Location     Type
 11333 ;;  quotient        2    8[COMMON] unsigned int 
 11334 ;;  counter         1    7[COMMON] unsigned char 
 11335 ;; Return value:  Size  Location     Type
 11336 ;;                  2    2[COMMON] unsigned int 
 11337 ;; Registers used:
 11338 ;;		wreg, status,2, status,0
 11339 ;; Tracked objects:
 11340 ;;		On entry : 0/0
 11341 ;;		On exit  : 0/0
 11342 ;;		Unchanged: 0/0
 11343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11344 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11345 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;Total ram usage:        8 bytes
 11349 ;; Hardware stack levels used:    1
 11350 ;; Hardware stack levels required when called:    3
 11351 ;; This function calls:
 11352 ;;		Nothing
 11353 ;; This function is called by:
 11354 ;;		_Load_Main
 11355 ;;		_setRF_Main
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           
 11360                           ;psect for function ___lwdiv
 11361  129D                     ___lwdiv:	
 11362                           
 11363                           ;incstack = 0
 11364                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11365  129D  01F8               	clrf	___lwdiv@quotient
 11366  129E  01F9               	clrf	___lwdiv@quotient+1
 11367  129F  0873               	movf	___lwdiv@divisor+1,w
 11368  12A0  0472               	iorwf	___lwdiv@divisor,w
 11369  12A1  1903               	skipnz
 11370  12A2  2ACC               	goto	l10070
 11371  12A3  01F7               	clrf	___lwdiv@counter
 11372  12A4  0AF7               	incf	___lwdiv@counter,f
 11373  12A5                     l10058:	
 11374  12A5  1BF3               	btfsc	___lwdiv@divisor+1,7
 11375  12A6  2AB1               	goto	l10060
 11376  12A7  3001               	movlw	1
 11377  12A8                     u12075:	
 11378  12A8  35F2               	lslf	___lwdiv@divisor,f
 11379  12A9  0DF3               	rlf	___lwdiv@divisor+1,f
 11380  12AA  0B89               	decfsz	9,f
 11381  12AB  2AA8               	goto	u12075
 11382  12AC  3001               	movlw	1
 11383  12AD  00F6               	movwf	??___lwdiv
 11384  12AE  0876               	movf	??___lwdiv,w
 11385  12AF  07F7               	addwf	___lwdiv@counter,f
 11386  12B0  2AA5               	goto	l10058
 11387  12B1                     l10060:	
 11388  12B1  3001               	movlw	1
 11389  12B2                     u12095:	
 11390  12B2  35F8               	lslf	___lwdiv@quotient,f
 11391  12B3  0DF9               	rlf	___lwdiv@quotient+1,f
 11392  12B4  0B89               	decfsz	9,f
 11393  12B5  2AB2               	goto	u12095
 11394  12B6  0873               	movf	___lwdiv@divisor+1,w
 11395  12B7  0275               	subwf	___lwdiv@dividend+1,w
 11396  12B8  1D03               	skipz
 11397  12B9  2ABC               	goto	u12105
 11398  12BA  0872               	movf	___lwdiv@divisor,w
 11399  12BB  0274               	subwf	___lwdiv@dividend,w
 11400  12BC                     u12105:	
 11401  12BC  1C03               	skipc
 11402  12BD  2AC3               	goto	l10066
 11403  12BE  0872               	movf	___lwdiv@divisor,w
 11404  12BF  02F4               	subwf	___lwdiv@dividend,f
 11405  12C0  0873               	movf	___lwdiv@divisor+1,w
 11406  12C1  3BF5               	subwfb	___lwdiv@dividend+1,f
 11407  12C2  1478               	bsf	___lwdiv@quotient,0
 11408  12C3                     l10066:	
 11409  12C3  3001               	movlw	1
 11410  12C4                     u12115:	
 11411  12C4  36F3               	lsrf	___lwdiv@divisor+1,f
 11412  12C5  0CF2               	rrf	___lwdiv@divisor,f
 11413  12C6  0B89               	decfsz	9,f
 11414  12C7  2AC4               	goto	u12115
 11415  12C8  3001               	movlw	1
 11416  12C9  02F7               	subwf	___lwdiv@counter,f
 11417  12CA  1D03               	btfss	3,2
 11418  12CB  2AB1               	goto	l10060
 11419  12CC                     l10070:	
 11420  12CC  0879               	movf	___lwdiv@quotient+1,w
 11421  12CD  01F3               	clrf	?___lwdiv+1
 11422  12CE  07F3               	addwf	?___lwdiv+1,f
 11423  12CF  0878               	movf	___lwdiv@quotient,w
 11424  12D0  01F2               	clrf	?___lwdiv
 11425  12D1  07F2               	addwf	?___lwdiv,f
 11426  12D2  0008               	return
 11427  12D3                     __end_of___lwdiv:	
 11428                           
 11429                           	psect	text70
 11430  1B16                     __ptext70:	
 11431 ;; *************** function _Load_Initialization *****************
 11432 ;; Defined at:
 11433 ;;		line 9 in file "../src/OverLoad_B1.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;		None
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;		None
 11438 ;; Return value:  Size  Location     Type
 11439 ;;		None               void
 11440 ;; Registers used:
 11441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;Total ram usage:        0 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:    4
 11454 ;; This function calls:
 11455 ;;		_setLoad_AH_AL_Restore
 11456 ;; This function is called by:
 11457 ;;		_main
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           
 11462                           ;psect for function _Load_Initialization
 11463  1B16                     _Load_Initialization:	
 11464                           
 11465                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11466                           
 11467                           ;incstack = 0
 11468                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11469  1B16  319E  26BB         	fcall	_setLoad_AH_AL_Restore
 11470  1B18  0008               	return
 11471  1B19                     __end_of_Load_Initialization:	
 11472                           
 11473                           	psect	text71
 11474  1EBB                     __ptext71:	
 11475 ;; *************** function _setLoad_AH_AL_Restore *****************
 11476 ;; Defined at:
 11477 ;;		line 266 in file "../src/OverLoad_B1.c"
 11478 ;; Parameters:    Size  Location     Type
 11479 ;;		None
 11480 ;; Auto vars:     Size  Location     Type
 11481 ;;  i               1    3[COMMON] unsigned char 
 11482 ;; Return value:  Size  Location     Type
 11483 ;;		None               void
 11484 ;; Registers used:
 11485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11486 ;; Tracked objects:
 11487 ;;		On entry : 0/0
 11488 ;;		On exit  : 0/0
 11489 ;;		Unchanged: 0/0
 11490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11494 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;Total ram usage:        2 bytes
 11496 ;; Hardware stack levels used:    1
 11497 ;; Hardware stack levels required when called:    3
 11498 ;; This function calls:
 11499 ;;		Nothing
 11500 ;; This function is called by:
 11501 ;;		_Load_Initialization
 11502 ;;		_Load_Main
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506                           
 11507                           ;psect for function _setLoad_AH_AL_Restore
 11508  1EBB                     _setLoad_AH_AL_Restore:	
 11509                           
 11510                           ;OverLoad_B1.c: 267: char i;
 11511                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11512                           
 11513                           ;incstack = 0
 11514                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11515  1EBB  01F3               	clrf	setLoad_AH_AL_Restore@i
 11516  1EBC                     L8:	
 11517  1EBC  3005               	movlw	5
 11518  1EBD  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11519  1EBE  1803               	btfsc	3,0
 11520  1EBF  0008               	return
 11521                           
 11522                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11523  1EC0  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11524  1EC1  3E3C               	addlw	(_Load+11)& (0+255)
 11525  1EC2  0086               	movwf	6
 11526  1EC3  3001               	movlw	1	; select bank2/3
 11527  1EC4  0087               	movwf	7
 11528  1EC5  3000               	movlw	0
 11529  1EC6  3FC0               	movwi [0]fsr1
 11530  1EC7  3FC1               	movwi [1]fsr1
 11531                           
 11532                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11533  1EC8  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11534  1EC9  3E46               	addlw	(_Load+21)& (0+255)
 11535  1ECA  0086               	movwf	6
 11536  1ECB  3001               	movlw	1	; select bank2/3
 11537  1ECC  0087               	movwf	7
 11538  1ECD  30FF               	movlw	255
 11539  1ECE  3FC0               	movwi [0]fsr1
 11540  1ECF  30FF               	movlw	255
 11541  1ED0  3FC1               	movwi [1]fsr1
 11542  1ED1  3001               	movlw	1
 11543  1ED2  00F2               	movwf	??_setLoad_AH_AL_Restore
 11544  1ED3  0872               	movf	??_setLoad_AH_AL_Restore,w
 11545  1ED4  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11546  1ED5  2EBC               	goto	L8
 11547  1ED6                     __end_of_setLoad_AH_AL_Restore:	
 11548                           
 11549                           	psect	text72
 11550  1BF3                     __ptext72:	
 11551 ;; *************** function _LED_Main *****************
 11552 ;; Defined at:
 11553 ;;		line 47 in file "../src/LED_B1.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;		None               void
 11560 ;; Registers used:
 11561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        0 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    5
 11574 ;; This function calls:
 11575 ;;		_setLED_Main
 11576 ;; This function is called by:
 11577 ;;		_main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _LED_Main
 11583  1BF3                     _LED_Main:	
 11584                           
 11585                           ;LED_B1.c: 53: setLED_Main(1);
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11589  1BF3  3001               	movlw	1
 11590  1BF4  3193  2343  319B   	fcall	_setLED_Main
 11591                           
 11592                           ;LED_B1.c: 56: setLED_Main(2);
 11593  1BF7  3002               	movlw	2
 11594  1BF8  3193  2343  319B   	fcall	_setLED_Main
 11595                           
 11596                           ;LED_B1.c: 62: setLED_Main(99);
 11597  1BFB  3063               	movlw	99
 11598  1BFC  3193  2343         	fcall	_setLED_Main
 11599  1BFE  0008               	return
 11600  1BFF                     __end_of_LED_Main:	
 11601                           
 11602                           	psect	text73
 11603  1343                     __ptext73:	
 11604 ;; *************** function _setLED_Main *****************
 11605 ;; Defined at:
 11606 ;;		line 221 in file "../src/LED_B1.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  led             1    wreg     unsigned char 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;  led             1    6[COMMON] unsigned char 
 11611 ;; Return value:  Size  Location     Type
 11612 ;;		None               void
 11613 ;; Registers used:
 11614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;Total ram usage:        3 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:    4
 11627 ;; This function calls:
 11628 ;;		_LedPointSelect
 11629 ;; This function is called by:
 11630 ;;		_LED_Main
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           
 11635                           ;psect for function _setLED_Main
 11636  1343                     _setLED_Main:	
 11637                           
 11638                           ;incstack = 0
 11639                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11640                           ;setLED_Main@led stored from wreg
 11641  1343  00F6               	movwf	setLED_Main@led
 11642                           
 11643                           ;LED_B1.c: 222: LedPointSelect(led);
 11644  1344  0876               	movf	setLED_Main@led,w
 11645  1345  319F  2728  3193   	fcall	_LedPointSelect
 11646                           
 11647                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11648  1348  0021               	movlb	1	; select bank1
 11649  1349  0843               	movf	_LED^(0+128),w
 11650  134A  0086               	movwf	6
 11651  134B  3001               	movlw	1	; select bank2/3
 11652  134C  0087               	movwf	7
 11653  134D  1C81               	btfss	1,1
 11654  134E  0008               	return
 11655                           
 11656                           ;LED_B1.c: 224: LED->Time++;
 11657  134F  0A43               	incf	_LED^(0+128),w
 11658  1350  0086               	movwf	6
 11659  1351  3001               	movlw	1	; select bank2/3
 11660  1352  0087               	movwf	7
 11661  1353  3001               	movlw	1
 11662  1354  0781               	addwf	1,f
 11663  1355  3141               	addfsr 1,1
 11664  1356  1803               	skipnc
 11665  1357  0A81               	incf	1,f
 11666                           
 11667                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11668  1358  0A43               	incf	_LED^(0+128),w
 11669  1359  0086               	movwf	6
 11670  135A  3001               	movlw	1	; select bank2/3
 11671  135B  0087               	movwf	7
 11672  135C  3F40               	moviw [0]fsr1
 11673  135D  00F4               	movwf	??_setLED_Main
 11674  135E  3F41               	moviw [1]fsr1
 11675  135F  00F5               	movwf	??_setLED_Main+1
 11676  1360  3000               	movlw	0
 11677  1361  0275               	subwf	??_setLED_Main+1,w
 11678  1362  3019               	movlw	25
 11679  1363  1903               	skipnz
 11680  1364  0274               	subwf	??_setLED_Main,w
 11681  1365  1C03               	skipc
 11682  1366  0008               	return
 11683                           
 11684                           ;LED_B1.c: 226: LED->Time = 0;
 11685  1367  0A43               	incf	_LED^(0+128),w
 11686  1368  0086               	movwf	6
 11687  1369  3001               	movlw	1	; select bank2/3
 11688  136A  0087               	movwf	7
 11689  136B  3000               	movlw	0
 11690  136C  3FC0               	movwi [0]fsr1
 11691  136D  3FC1               	movwi [1]fsr1
 11692                           
 11693                           ;LED_B1.c: 228: if (led == 1) {
 11694  136E  0876               	movf	setLED_Main@led,w
 11695  136F  3A01               	xorlw	1
 11696  1370  1D03               	skipz
 11697  1371  2B75               	goto	l1151
 11698                           
 11699                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11700  1372  3008               	movlw	8
 11701  1373  0020               	movlb	0	; select bank0
 11702  1374  068C               	xorwf	12,f
 11703  1375                     l1151:	
 11704                           
 11705                           ;LED_B1.c: 230: }
 11706                           ;LED_B1.c: 233: if (led == 2) {
 11707  1375  0876               	movf	setLED_Main@led,w
 11708  1376  3A02               	xorlw	2
 11709  1377  1D03               	skipz
 11710  1378  2B7C               	goto	l1152
 11711                           
 11712                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11713  1379  3080               	movlw	128
 11714  137A  0020               	movlb	0	; select bank0
 11715  137B  068E               	xorwf	14,f
 11716  137C                     l1152:	
 11717                           
 11718                           ;LED_B1.c: 235: }
 11719                           ;LED_B1.c: 243: if (led == 99) {
 11720  137C  0876               	movf	setLED_Main@led,w
 11721  137D  3A63               	xorlw	99
 11722  137E  1D03               	skipz
 11723  137F  0008               	return
 11724                           
 11725                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11726  1380  3020               	movlw	32
 11727  1381  0020               	movlb	0	; select bank0
 11728  1382  068D               	xorwf	13,f
 11729  1383  0008               	return
 11730  1384                     __end_of_setLED_Main:	
 11731                           
 11732                           	psect	text74
 11733  1BE7                     __ptext74:	
 11734 ;; *************** function _LED_Initialization *****************
 11735 ;; Defined at:
 11736 ;;		line 31 in file "../src/LED_B1.c"
 11737 ;; Parameters:    Size  Location     Type
 11738 ;;		None
 11739 ;; Auto vars:     Size  Location     Type
 11740 ;;		None
 11741 ;; Return value:  Size  Location     Type
 11742 ;;		None               void
 11743 ;; Registers used:
 11744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11745 ;; Tracked objects:
 11746 ;;		On entry : 0/0
 11747 ;;		On exit  : 0/0
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;Total ram usage:        0 bytes
 11755 ;; Hardware stack levels used:    1
 11756 ;; Hardware stack levels required when called:    6
 11757 ;; This function calls:
 11758 ;;		_setLED_Initialization
 11759 ;; This function is called by:
 11760 ;;		_main
 11761 ;; This function uses a non-reentrant model
 11762 ;;
 11763                           
 11764                           
 11765                           ;psect for function _LED_Initialization
 11766  1BE7                     _LED_Initialization:	
 11767                           
 11768                           ;LED_B1.c: 33: setLED_Initialization(1);
 11769                           
 11770                           ;incstack = 0
 11771                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11772  1BE7  3001               	movlw	1
 11773  1BE8  319C  24B8  319B   	fcall	_setLED_Initialization
 11774                           
 11775                           ;LED_B1.c: 36: setLED_Initialization(2);
 11776  1BEB  3002               	movlw	2
 11777  1BEC  319C  24B8  319B   	fcall	_setLED_Initialization
 11778                           
 11779                           ;LED_B1.c: 42: setLED_Initialization(99);
 11780  1BEF  3063               	movlw	99
 11781  1BF0  319C  24B8         	fcall	_setLED_Initialization
 11782  1BF2  0008               	return
 11783  1BF3                     __end_of_LED_Initialization:	
 11784                           
 11785                           	psect	text75
 11786  1CB8                     __ptext75:	
 11787 ;; *************** function _setLED_Initialization *****************
 11788 ;; Defined at:
 11789 ;;		line 69 in file "../src/LED_B1.c"
 11790 ;; Parameters:    Size  Location     Type
 11791 ;;  led             1    wreg     unsigned char 
 11792 ;; Auto vars:     Size  Location     Type
 11793 ;;  led             1    6[COMMON] unsigned char 
 11794 ;; Return value:  Size  Location     Type
 11795 ;;		None               void
 11796 ;; Registers used:
 11797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11798 ;; Tracked objects:
 11799 ;;		On entry : 0/0
 11800 ;;		On exit  : 0/0
 11801 ;;		Unchanged: 0/0
 11802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;Total ram usage:        1 bytes
 11808 ;; Hardware stack levels used:    1
 11809 ;; Hardware stack levels required when called:    5
 11810 ;; This function calls:
 11811 ;;		_LedPointSelect
 11812 ;;		_setLED
 11813 ;; This function is called by:
 11814 ;;		_LED_Initialization
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           
 11819                           ;psect for function _setLED_Initialization
 11820  1CB8                     _setLED_Initialization:	
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11824                           ;setLED_Initialization@led stored from wreg
 11825  1CB8  00F6               	movwf	setLED_Initialization@led
 11826                           
 11827                           ;LED_B1.c: 70: LedPointSelect(led);
 11828  1CB9  0876               	movf	setLED_Initialization@led,w
 11829  1CBA  319F  2728  319C   	fcall	_LedPointSelect
 11830                           
 11831                           ;LED_B1.c: 71: LED->Enable = 1;
 11832  1CBD  0021               	movlb	1	; select bank1
 11833  1CBE  0843               	movf	_LED^(0+128),w
 11834  1CBF  0086               	movwf	6
 11835  1CC0  3001               	movlw	1	; select bank2/3
 11836  1CC1  0087               	movwf	7
 11837  1CC2  1401               	bsf	1,0
 11838                           
 11839                           ;LED_B1.c: 72: setLED(led, 0);
 11840  1CC3  01F4               	clrf	setLED@command
 11841  1CC4  0876               	movf	setLED_Initialization@led,w
 11842  1CC5  3197  27A1         	fcall	_setLED
 11843  1CC7  0008               	return
 11844  1CC8                     __end_of_setLED_Initialization:	
 11845                           
 11846                           	psect	text76
 11847  1236                     __ptext76:	
 11848 ;; *************** function _Flash_Memory_Main *****************
 11849 ;; Defined at:
 11850 ;;		line 974 in file "../src/MCU_B1.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;		None
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;		None
 11855 ;; Return value:  Size  Location     Type
 11856 ;;		None               void
 11857 ;; Registers used:
 11858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;Total ram usage:        1 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:    6
 11871 ;; This function calls:
 11872 ;;		_Flash_Memory_Modify
 11873 ;;		_getMain_LightsStatus
 11874 ;; This function is called by:
 11875 ;;		_main
 11876 ;; This function uses a non-reentrant model
 11877 ;;
 11878                           
 11879                           
 11880                           ;psect for function _Flash_Memory_Main
 11881  1236                     _Flash_Memory_Main:	
 11882                           
 11883                           ;MCU_B1.c: 975: if (Memory.Modify == 1) {
 11884                           
 11885                           ;incstack = 0
 11886                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11887  1236  0024               	movlb	4	; select bank4
 11888  1237  1C44               	btfss	(_Memory^(0+512)+36),0
 11889  1238  0008               	return
 11890                           
 11891                           ;MCU_B1.c: 976: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11892  1239  319C  246C  3192   	fcall	_getMain_LightsStatus
 11893  123C  3A00               	xorlw	0
 11894  123D  3000               	movlw	0
 11895  123E  1903               	skipnz
 11896  123F  3001               	movlw	1
 11897  1240  00F8               	movwf	??_Flash_Memory_Main
 11898  1241  0DF8               	rlf	??_Flash_Memory_Main,f
 11899  1242  0024               	movlb	4	; select bank4
 11900  1243  0844               	movf	(_Memory^(0+512)+36),w
 11901  1244  0678               	xorwf	??_Flash_Memory_Main,w
 11902  1245  39FD               	andlw	-3
 11903  1246  0678               	xorwf	??_Flash_Memory_Main,w
 11904  1247  00C4               	movwf	(_Memory^(0+512)+36)
 11905                           
 11906                           ;MCU_B1.c: 977: if (Memory.GO == 1) {
 11907  1248  1CC4               	btfss	(_Memory^(0+512)+36),1
 11908  1249  2A63               	goto	l1422
 11909                           
 11910                           ;MCU_B1.c: 978: Memory.Runtime = 1;
 11911  124A  15C4               	bsf	(_Memory^(0+512)+36),3
 11912                           
 11913                           ;MCU_B1.c: 979: Memory.Time++;
 11914  124B  3001               	movlw	1
 11915  124C  07C2               	addwf	(_Memory^(0+512)+34),f
 11916  124D  3000               	movlw	0
 11917  124E  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11918                           
 11919                           ;MCU_B1.c: 980: if (Memory.Time == 25) {
 11920  124F  3022               	movlw	34
 11921  1250  3E20               	addlw	_Memory& (0+255)
 11922  1251  0086               	movwf	6
 11923  1252  3002               	movlw	2	; select bank4/5
 11924  1253  0087               	movwf	7
 11925  1254  3F40               	moviw [0]fsr1
 11926  1255  3A19               	xorlw	25
 11927  1256  1D03               	skipz
 11928  1257  2A5A               	goto	u12895
 11929  1258  3F41               	moviw [1]fsr1
 11930  1259  3A00               	xorlw	0
 11931  125A                     u12895:	
 11932  125A  1D03               	skipz
 11933  125B  0008               	return
 11934                           
 11935                           ;MCU_B1.c: 981: Memory.Time = 0;
 11936  125C  01C2               	clrf	(_Memory^(0+512)+34)
 11937  125D  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11938                           
 11939                           ;MCU_B1.c: 982: Memory.Modify = 0;
 11940  125E  1044               	bcf	(_Memory^(0+512)+36),0
 11941                           
 11942                           ;MCU_B1.c: 983: Memory.GO = 0;
 11943  125F  10C4               	bcf	(_Memory^(0+512)+36),1
 11944                           
 11945                           ;MCU_B1.c: 984: Flash_Memory_Modify();
 11946  1260  3194  2454         	fcall	_Flash_Memory_Modify
 11947                           
 11948                           ;MCU_B1.c: 985: }
 11949                           ;MCU_B1.c: 986: } else {
 11950  1262  0008               	return
 11951  1263                     l1422:	
 11952                           
 11953                           ;MCU_B1.c: 987: if (Memory.Runtime == 1) {
 11954  1263  1DC4               	btfss	(_Memory^(0+512)+36),3
 11955  1264  0008               	return
 11956                           
 11957                           ;MCU_B1.c: 988: Memory.Runtime = 0;
 11958  1265  11C4               	bcf	(_Memory^(0+512)+36),3
 11959                           
 11960                           ;MCU_B1.c: 989: Memory.Time = 0;
 11961  1266  01C2               	clrf	(_Memory^(0+512)+34)
 11962  1267  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11963  1268  0008               	return
 11964  1269                     __end_of_Flash_Memory_Main:	
 11965                           
 11966                           	psect	text77
 11967  1454                     __ptext77:	
 11968 ;; *************** function _Flash_Memory_Modify *****************
 11969 ;; Defined at:
 11970 ;;		line 1047 in file "../src/MCU_B1.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;  i               1    7[COMMON] unsigned char 
 11975 ;; Return value:  Size  Location     Type
 11976 ;;		None               void
 11977 ;; Registers used:
 11978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;Total ram usage:        2 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:    5
 11991 ;; This function calls:
 11992 ;;		_Flash_Memory_Erasing
 11993 ;;		_Flash_Memory_Read
 11994 ;;		_Flash_Memory_Write
 11995 ;;		_setMemory_Data
 11996 ;; This function is called by:
 11997 ;;		_Flash_Memory_Main
 11998 ;; This function uses a non-reentrant model
 11999 ;;
 12000                           
 12001                           
 12002                           ;psect for function _Flash_Memory_Modify
 12003  1454                     _Flash_Memory_Modify:	
 12004                           
 12005                           ;MCU_B1.c: 1048: char i = 0;
 12006                           
 12007                           ;incstack = 0
 12008                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12009  1454  01F7               	clrf	Flash_Memory_Modify@i
 12010                           
 12011                           ;MCU_B1.c: 1049: for (i = 0; i < 32; i++) {
 12012  1455  01F7               	clrf	Flash_Memory_Modify@i
 12013  1456  3020               	movlw	32
 12014  1457  0277               	subwf	Flash_Memory_Modify@i,w
 12015  1458  1803               	btfsc	3,0
 12016  1459  2C6E               	goto	l7812
 12017  145A                     l7806:	
 12018                           
 12019                           ;MCU_B1.c: 1050: Memory.Data[i] = Flash_Memory_Read(i);
 12020  145A  0877               	movf	Flash_Memory_Modify@i,w
 12021  145B  319D  2583  3194   	fcall	_Flash_Memory_Read
 12022  145E  00F6               	movwf	??_Flash_Memory_Modify
 12023  145F  0877               	movf	Flash_Memory_Modify@i,w
 12024  1460  3E20               	addlw	_Memory& (0+255)
 12025  1461  0086               	movwf	6
 12026  1462  3002               	movlw	2	; select bank4/5
 12027  1463  0087               	movwf	7
 12028  1464  0876               	movf	??_Flash_Memory_Modify,w
 12029  1465  0081               	movwf	1
 12030  1466  3001               	movlw	1
 12031  1467  00F6               	movwf	??_Flash_Memory_Modify
 12032  1468  0876               	movf	??_Flash_Memory_Modify,w
 12033  1469  07F7               	addwf	Flash_Memory_Modify@i,f
 12034  146A  3020               	movlw	32
 12035  146B  0277               	subwf	Flash_Memory_Modify@i,w
 12036  146C  1C03               	skipc
 12037  146D  2C5A               	goto	l7806
 12038  146E                     l7812:	
 12039                           
 12040                           ;MCU_B1.c: 1051: }
 12041                           ;MCU_B1.c: 1052: setMemory_Data(0, product->Data[12]);
 12042  146E  0020               	movlb	0	; select bank0
 12043  146F  086F               	movf	_product,w
 12044  1470  0086               	movwf	6
 12045  1471  3002               	movlw	2	; select bank4/5
 12046  1472  0087               	movwf	7
 12047  1473  3002               	movlw	2	; select bank4/5
 12048  1474  3F4C               	moviw [12]fsr1
 12049  1475  00F2               	movwf	setMemory_Data@data
 12050  1476  3000               	movlw	0
 12051  1477  319B  23AE  3194   	fcall	_setMemory_Data
 12052                           
 12053                           ;MCU_B1.c: 1053: setMemory_Data(1, product->Data[13]);
 12054  147A  0020               	movlb	0	; select bank0
 12055  147B  086F               	movf	_product,w
 12056  147C  0086               	movwf	6
 12057  147D  3002               	movlw	2	; select bank4/5
 12058  147E  0087               	movwf	7
 12059  147F  3002               	movlw	2	; select bank4/5
 12060  1480  3F4D               	moviw [13]fsr1
 12061  1481  00F2               	movwf	setMemory_Data@data
 12062  1482  3001               	movlw	1
 12063  1483  319B  23AE  3194   	fcall	_setMemory_Data
 12064                           
 12065                           ;MCU_B1.c: 1054: setMemory_Data(2, product->Data[14]);
 12066  1486  0020               	movlb	0	; select bank0
 12067  1487  086F               	movf	_product,w
 12068  1488  0086               	movwf	6
 12069  1489  3002               	movlw	2	; select bank4/5
 12070  148A  0087               	movwf	7
 12071  148B  3002               	movlw	2	; select bank4/5
 12072  148C  3F4E               	moviw [14]fsr1
 12073  148D  00F2               	movwf	setMemory_Data@data
 12074  148E  3002               	movlw	2
 12075  148F  319B  23AE  3194   	fcall	_setMemory_Data
 12076                           
 12077                           ;MCU_B1.c: 1060: if (Memory.LoopSave == 1) {
 12078  1492  0024               	movlb	4	; select bank4
 12079  1493  1D44               	btfss	(_Memory^(0+512)+36),2
 12080  1494  2C99               	goto	l1445
 12081                           
 12082                           ;MCU_B1.c: 1061: Memory.LoopSave = 0;
 12083  1495  1144               	bcf	(_Memory^(0+512)+36),2
 12084                           
 12085                           ;MCU_B1.c: 1062: myMain.FirstOpen = 0;
 12086  1496  0022               	movlb	2	; select bank2
 12087  1497  11A0               	bcf	_myMain^(0+256),3
 12088                           
 12089                           ;MCU_B1.c: 1063: myMain.First = 0;
 12090  1498  12A0               	bcf	_myMain^(0+256),5
 12091  1499                     l1445:	
 12092                           
 12093                           ;MCU_B1.c: 1065: }
 12094                           ;MCU_B1.c: 1066: GIE = 0;
 12095  1499  138B               	bcf	11,7	;volatile
 12096                           
 12097                           ;MCU_B1.c: 1067: Flash_Memory_Erasing();
 12098  149A  319B  23DB  3194   	fcall	_Flash_Memory_Erasing
 12099                           
 12100                           ;MCU_B1.c: 1068: Flash_Memory_Write();
 12101  149D  3191  21B4         	fcall	_Flash_Memory_Write
 12102                           
 12103                           ;MCU_B1.c: 1069: GIE = 1;
 12104  149F  178B               	bsf	11,7	;volatile
 12105  14A0  0008               	return
 12106  14A1                     __end_of_Flash_Memory_Modify:	
 12107                           
 12108                           	psect	text78
 12109  1BDB                     __ptext78:	
 12110 ;; *************** function _Flash_Memory_Erasing *****************
 12111 ;; Defined at:
 12112 ;;		line 1036 in file "../src/MCU_B1.c"
 12113 ;; Parameters:    Size  Location     Type
 12114 ;;		None
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;		None
 12117 ;; Return value:  Size  Location     Type
 12118 ;;		None               void
 12119 ;; Registers used:
 12120 ;;		wreg, status,2, status,0, pclath, cstack
 12121 ;; Tracked objects:
 12122 ;;		On entry : 0/0
 12123 ;;		On exit  : 0/0
 12124 ;;		Unchanged: 0/0
 12125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;Total ram usage:        0 bytes
 12131 ;; Hardware stack levels used:    1
 12132 ;; Hardware stack levels required when called:    4
 12133 ;; This function calls:
 12134 ;;		_Flash_Memory_Unlock
 12135 ;; This function is called by:
 12136 ;;		_Flash_Memory_Modify
 12137 ;; This function uses a non-reentrant model
 12138 ;;
 12139                           
 12140                           
 12141                           ;psect for function _Flash_Memory_Erasing
 12142  1BDB                     _Flash_Memory_Erasing:	
 12143                           
 12144                           ;MCU_B1.c: 1037: CFGS = 0;
 12145                           
 12146                           ;incstack = 0
 12147                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12148  1BDB  0023               	movlb	3	; select bank3
 12149  1BDC  1315               	bcf	21,6	;volatile
 12150                           
 12151                           ;MCU_B1.c: 1038: PMADRH = 0x30;
 12152  1BDD  3030               	movlw	48
 12153  1BDE  0092               	movwf	18	;volatile
 12154                           
 12155                           ;MCU_B1.c: 1039: PMADRL = 0x00;
 12156  1BDF  0191               	clrf	17	;volatile
 12157                           
 12158                           ;MCU_B1.c: 1040: FREE = 1;
 12159  1BE0  1615               	bsf	21,4	;volatile
 12160                           
 12161                           ;MCU_B1.c: 1041: WREN = 1;
 12162  1BE1  1515               	bsf	21,2	;volatile
 12163                           
 12164                           ;MCU_B1.c: 1042: Flash_Memory_Unlock();
 12165  1BE2  319B  2387         	fcall	_Flash_Memory_Unlock
 12166                           
 12167                           ;MCU_B1.c: 1043: WREN = 0;
 12168  1BE4  0023               	movlb	3	; select bank3
 12169  1BE5  1115               	bcf	21,2	;volatile
 12170  1BE6  0008               	return
 12171  1BE7                     __end_of_Flash_Memory_Erasing:	
 12172                           
 12173                           	psect	text79
 12174  0532                     __ptext79:	
 12175 ;; *************** function _Flash_Memory_Initialization *****************
 12176 ;; Defined at:
 12177 ;;		line 933 in file "../src/MCU_B1.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;  i               1   59[BANK0 ] unsigned char 
 12182 ;; Return value:  Size  Location     Type
 12183 ;;		None               void
 12184 ;; Registers used:
 12185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        2 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    6
 12198 ;; This function calls:
 12199 ;;		_Flash_Memory_Read
 12200 ;;		_Flash_Memory_Write
 12201 ;;		_getDimmerLights_ValueToPercent
 12202 ;;		_setMemory_Data
 12203 ;; This function is called by:
 12204 ;;		_main
 12205 ;; This function uses a non-reentrant model
 12206 ;;
 12207                           
 12208                           
 12209                           ;psect for function _Flash_Memory_Initialization
 12210  0532                     _Flash_Memory_Initialization:	
 12211                           
 12212                           ;MCU_B1.c: 934: char i = 0;
 12213                           
 12214                           ;incstack = 0
 12215                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12216  0532  0020               	movlb	0	; select bank0
 12217  0533  01DB               	clrf	Flash_Memory_Initialization@i
 12218                           
 12219                           ;MCU_B1.c: 935: if (Flash_Memory_Read(31) == 0xaa) {
 12220  0534  301F               	movlw	31
 12221  0535  319D  2583  3185   	fcall	_Flash_Memory_Read
 12222  0538  3AAA               	xorlw	170
 12223  0539  1D03               	skipz
 12224  053A  2DA4               	goto	l10462
 12225                           
 12226                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12227  053B  3000               	movlw	0
 12228  053C  319D  2583  3185   	fcall	_Flash_Memory_Read
 12229  053F  0020               	movlb	0	; select bank0
 12230  0540  00DA               	movwf	??_Flash_Memory_Initialization
 12231  0541  086F               	movf	_product,w
 12232  0542  3E0C               	addlw	12
 12233  0543  0086               	movwf	6
 12234  0544  3002               	movlw	2	; select bank4/5
 12235  0545  0087               	movwf	7
 12236  0546  085A               	movf	??_Flash_Memory_Initialization,w
 12237  0547  0081               	movwf	1
 12238                           
 12239                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12240  0548  3001               	movlw	1
 12241  0549  319D  2583  3185   	fcall	_Flash_Memory_Read
 12242  054C  0020               	movlb	0	; select bank0
 12243  054D  00DA               	movwf	??_Flash_Memory_Initialization
 12244  054E  086F               	movf	_product,w
 12245  054F  3E0D               	addlw	13
 12246  0550  0086               	movwf	6
 12247  0551  3002               	movlw	2	; select bank4/5
 12248  0552  0087               	movwf	7
 12249  0553  085A               	movf	??_Flash_Memory_Initialization,w
 12250  0554  0081               	movwf	1
 12251                           
 12252                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12253  0555  3002               	movlw	2
 12254  0556  319D  2583  3185   	fcall	_Flash_Memory_Read
 12255  0559  0020               	movlb	0	; select bank0
 12256  055A  00DA               	movwf	??_Flash_Memory_Initialization
 12257  055B  086F               	movf	_product,w
 12258  055C  3E0E               	addlw	14
 12259  055D  0086               	movwf	6
 12260  055E  3002               	movlw	2	; select bank4/5
 12261  055F  0087               	movwf	7
 12262  0560  085A               	movf	??_Flash_Memory_Initialization,w
 12263  0561  0081               	movwf	1
 12264                           
 12265                           ;MCU_B1.c: 944: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12266  0562  3034               	movlw	52
 12267  0563  3188  20FE  3185   	fcall	_getDimmerLights_ValueToPercent
 12268  0566  0020               	movlb	0	; select bank0
 12269  0567  00DA               	movwf	??_Flash_Memory_Initialization
 12270  0568  085A               	movf	??_Flash_Memory_Initialization,w
 12271  0569  00DB               	movwf	Flash_Memory_Initialization@i
 12272                           
 12273                           ;MCU_B1.c: 945: product->Data[21] = i;
 12274  056A  085B               	movf	Flash_Memory_Initialization@i,w
 12275  056B  00DA               	movwf	??_Flash_Memory_Initialization
 12276  056C  086F               	movf	_product,w
 12277  056D  3E15               	addlw	21
 12278  056E  0086               	movwf	6
 12279  056F  3002               	movlw	2	; select bank4/5
 12280  0570  0087               	movwf	7
 12281  0571  085A               	movf	??_Flash_Memory_Initialization,w
 12282  0572  0081               	movwf	1
 12283                           
 12284                           ;MCU_B1.c: 946: product->Data[22] = i;
 12285  0573  085B               	movf	Flash_Memory_Initialization@i,w
 12286  0574  00DA               	movwf	??_Flash_Memory_Initialization
 12287  0575  086F               	movf	_product,w
 12288  0576  3E16               	addlw	22
 12289  0577  0086               	movwf	6
 12290  0578  3002               	movlw	2	; select bank4/5
 12291  0579  0087               	movwf	7
 12292  057A  085A               	movf	??_Flash_Memory_Initialization,w
 12293  057B  0081               	movwf	1
 12294                           
 12295                           ;MCU_B1.c: 947: product->Data[23] = i;
 12296  057C  085B               	movf	Flash_Memory_Initialization@i,w
 12297  057D  00DA               	movwf	??_Flash_Memory_Initialization
 12298  057E  086F               	movf	_product,w
 12299  057F  3E17               	addlw	23
 12300  0580  0086               	movwf	6
 12301  0581  3002               	movlw	2	; select bank4/5
 12302  0582  0087               	movwf	7
 12303  0583  085A               	movf	??_Flash_Memory_Initialization,w
 12304  0584  0081               	movwf	1
 12305                           
 12306                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12307  0585  086F               	movf	_product,w
 12308  0586  3E0C               	addlw	12
 12309  0587  0086               	movwf	6
 12310  0588  3002               	movlw	2	; select bank4/5
 12311  0589  0087               	movwf	7
 12312  058A  0801               	movf	1,w
 12313  058B  3AFF               	xorlw	255
 12314  058C  1D03               	skipz
 12315  058D  0008               	return
 12316  058E  086F               	movf	_product,w
 12317  058F  3E0D               	addlw	13
 12318  0590  0086               	movwf	6
 12319  0591  3002               	movlw	2	; select bank4/5
 12320  0592  0087               	movwf	7
 12321  0593  0801               	movf	1,w
 12322  0594  3AFF               	xorlw	255
 12323  0595  1D03               	skipz
 12324  0596  0008               	return
 12325  0597  086F               	movf	_product,w
 12326  0598  3E0E               	addlw	14
 12327  0599  0086               	movwf	6
 12328  059A  3002               	movlw	2	; select bank4/5
 12329  059B  0087               	movwf	7
 12330  059C  0801               	movf	1,w
 12331  059D  3AFF               	xorlw	255
 12332  059E  1D03               	skipz
 12333  059F  0008               	return
 12334                           
 12335                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12336  05A0  0022               	movlb	2	; select bank2
 12337  05A1  15A0               	bsf	_myMain^(0+256),3
 12338                           
 12339                           ;MCU_B1.c: 951: myMain.First = 1;
 12340  05A2  16A0               	bsf	_myMain^(0+256),5
 12341                           
 12342                           ;MCU_B1.c: 952: }
 12343                           ;MCU_B1.c: 953: } else {
 12344  05A3  0008               	return
 12345  05A4                     l10462:	
 12346                           
 12347                           ;MCU_B1.c: 954: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12348  05A4  3034               	movlw	52
 12349  05A5  3188  20FE  3185   	fcall	_getDimmerLights_ValueToPercent
 12350  05A8  0020               	movlb	0	; select bank0
 12351  05A9  00DA               	movwf	??_Flash_Memory_Initialization
 12352  05AA  085A               	movf	??_Flash_Memory_Initialization,w
 12353  05AB  00DB               	movwf	Flash_Memory_Initialization@i
 12354                           
 12355                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12356  05AC  30FF               	movlw	255
 12357  05AD  00DA               	movwf	??_Flash_Memory_Initialization
 12358  05AE  085A               	movf	??_Flash_Memory_Initialization,w
 12359  05AF  00F2               	movwf	setMemory_Data@data
 12360  05B0  3000               	movlw	0
 12361  05B1  319B  23AE  3185   	fcall	_setMemory_Data
 12362                           
 12363                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12364  05B4  30FF               	movlw	255
 12365  05B5  0020               	movlb	0	; select bank0
 12366  05B6  00DA               	movwf	??_Flash_Memory_Initialization
 12367  05B7  085A               	movf	??_Flash_Memory_Initialization,w
 12368  05B8  00F2               	movwf	setMemory_Data@data
 12369  05B9  3001               	movlw	1
 12370  05BA  319B  23AE  3185   	fcall	_setMemory_Data
 12371                           
 12372                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12373  05BD  30FF               	movlw	255
 12374  05BE  0020               	movlb	0	; select bank0
 12375  05BF  00DA               	movwf	??_Flash_Memory_Initialization
 12376  05C0  085A               	movf	??_Flash_Memory_Initialization,w
 12377  05C1  00F2               	movwf	setMemory_Data@data
 12378  05C2  3002               	movlw	2
 12379  05C3  319B  23AE  3185   	fcall	_setMemory_Data
 12380                           
 12381                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12382  05C6  30FF               	movlw	255
 12383  05C7  0020               	movlb	0	; select bank0
 12384  05C8  00DA               	movwf	??_Flash_Memory_Initialization
 12385  05C9  085A               	movf	??_Flash_Memory_Initialization,w
 12386  05CA  00F2               	movwf	setMemory_Data@data
 12387  05CB  3003               	movlw	3
 12388  05CC  319B  23AE  3185   	fcall	_setMemory_Data
 12389                           
 12390                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12391  05CF  30FF               	movlw	255
 12392  05D0  0020               	movlb	0	; select bank0
 12393  05D1  00DA               	movwf	??_Flash_Memory_Initialization
 12394  05D2  085A               	movf	??_Flash_Memory_Initialization,w
 12395  05D3  00F2               	movwf	setMemory_Data@data
 12396  05D4  3004               	movlw	4
 12397  05D5  319B  23AE  3185   	fcall	_setMemory_Data
 12398                           
 12399                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12400  05D8  30FF               	movlw	255
 12401  05D9  0020               	movlb	0	; select bank0
 12402  05DA  00DA               	movwf	??_Flash_Memory_Initialization
 12403  05DB  085A               	movf	??_Flash_Memory_Initialization,w
 12404  05DC  00F2               	movwf	setMemory_Data@data
 12405  05DD  3005               	movlw	5
 12406  05DE  319B  23AE  3185   	fcall	_setMemory_Data
 12407                           
 12408                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12409  05E1  30AA               	movlw	170
 12410  05E2  0020               	movlb	0	; select bank0
 12411  05E3  00DA               	movwf	??_Flash_Memory_Initialization
 12412  05E4  085A               	movf	??_Flash_Memory_Initialization,w
 12413  05E5  00F2               	movwf	setMemory_Data@data
 12414  05E6  301F               	movlw	31
 12415  05E7  319B  23AE  3185   	fcall	_setMemory_Data
 12416                           
 12417                           ;MCU_B1.c: 962: product->Data[21] = i;
 12418  05EA  0020               	movlb	0	; select bank0
 12419  05EB  085B               	movf	Flash_Memory_Initialization@i,w
 12420  05EC  00DA               	movwf	??_Flash_Memory_Initialization
 12421  05ED  086F               	movf	_product,w
 12422  05EE  3E15               	addlw	21
 12423  05EF  0086               	movwf	6
 12424  05F0  3002               	movlw	2	; select bank4/5
 12425  05F1  0087               	movwf	7
 12426  05F2  085A               	movf	??_Flash_Memory_Initialization,w
 12427  05F3  0081               	movwf	1
 12428                           
 12429                           ;MCU_B1.c: 963: product->Data[22] = i;
 12430  05F4  085B               	movf	Flash_Memory_Initialization@i,w
 12431  05F5  00DA               	movwf	??_Flash_Memory_Initialization
 12432  05F6  086F               	movf	_product,w
 12433  05F7  3E16               	addlw	22
 12434  05F8  0086               	movwf	6
 12435  05F9  3002               	movlw	2	; select bank4/5
 12436  05FA  0087               	movwf	7
 12437  05FB  085A               	movf	??_Flash_Memory_Initialization,w
 12438  05FC  0081               	movwf	1
 12439                           
 12440                           ;MCU_B1.c: 964: product->Data[23] = i;
 12441  05FD  085B               	movf	Flash_Memory_Initialization@i,w
 12442  05FE  00DA               	movwf	??_Flash_Memory_Initialization
 12443  05FF  086F               	movf	_product,w
 12444  0600  3E17               	addlw	23
 12445  0601  0086               	movwf	6
 12446  0602  3002               	movlw	2	; select bank4/5
 12447  0603  0087               	movwf	7
 12448  0604  085A               	movf	??_Flash_Memory_Initialization,w
 12449  0605  0081               	movwf	1
 12450                           
 12451                           ;MCU_B1.c: 965: GIE = 0;
 12452  0606  138B               	bcf	11,7	;volatile
 12453                           
 12454                           ;MCU_B1.c: 966: Flash_Memory_Write();
 12455  0607  3191  21B4         	fcall	_Flash_Memory_Write
 12456                           
 12457                           ;MCU_B1.c: 967: GIE = 1;
 12458  0609  178B               	bsf	11,7	;volatile
 12459                           
 12460                           ;MCU_B1.c: 968: myMain.FirstOpen = 1;
 12461  060A  0022               	movlb	2	; select bank2
 12462  060B  15A0               	bsf	_myMain^(0+256),3
 12463                           
 12464                           ;MCU_B1.c: 969: myMain.First = 1;
 12465  060C  16A0               	bsf	_myMain^(0+256),5
 12466  060D  0008               	return
 12467  060E                     __end_of_Flash_Memory_Initialization:	
 12468                           
 12469                           	psect	text80
 12470  1BAE                     __ptext80:	
 12471 ;; *************** function _setMemory_Data *****************
 12472 ;; Defined at:
 12473 ;;		line 1084 in file "../src/MCU_B1.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  address         1    wreg     unsigned char 
 12476 ;;  data            1    2[COMMON] unsigned char 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;  address         1    4[COMMON] unsigned char 
 12479 ;; Return value:  Size  Location     Type
 12480 ;;		None               void
 12481 ;; Registers used:
 12482 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12488 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;Total ram usage:        3 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    3
 12495 ;; This function calls:
 12496 ;;		Nothing
 12497 ;; This function is called by:
 12498 ;;		_Flash_Memory_Initialization
 12499 ;;		_Flash_Memory_Modify
 12500 ;; This function uses a non-reentrant model
 12501 ;;
 12502                           
 12503                           
 12504                           ;psect for function _setMemory_Data
 12505  1BAE                     _setMemory_Data:	
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12509                           ;setMemory_Data@address stored from wreg
 12510  1BAE  00F4               	movwf	setMemory_Data@address
 12511                           
 12512                           ;MCU_B1.c: 1085: Memory.Data[address] = data;
 12513  1BAF  0872               	movf	setMemory_Data@data,w
 12514  1BB0  00F3               	movwf	??_setMemory_Data
 12515  1BB1  0874               	movf	setMemory_Data@address,w
 12516  1BB2  3E20               	addlw	_Memory& (0+255)
 12517  1BB3  0086               	movwf	6
 12518  1BB4  3002               	movlw	2	; select bank4/5
 12519  1BB5  0087               	movwf	7
 12520  1BB6  0873               	movf	??_setMemory_Data,w
 12521  1BB7  0081               	movwf	1
 12522  1BB8  0008               	return
 12523  1BB9                     __end_of_setMemory_Data:	
 12524                           
 12525                           	psect	text81
 12526  11B4                     __ptext81:	
 12527 ;; *************** function _Flash_Memory_Write *****************
 12528 ;; Defined at:
 12529 ;;		line 1017 in file "../src/MCU_B1.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;		None
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;  i               1    3[COMMON] unsigned char 
 12534 ;; Return value:  Size  Location     Type
 12535 ;;		None               void
 12536 ;; Registers used:
 12537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;Total ram usage:        2 bytes
 12548 ;; Hardware stack levels used:    1
 12549 ;; Hardware stack levels required when called:    4
 12550 ;; This function calls:
 12551 ;;		_Flash_Memory_Unlock
 12552 ;; This function is called by:
 12553 ;;		_Flash_Memory_Initialization
 12554 ;;		_Flash_Memory_Modify
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558                           
 12559                           ;psect for function _Flash_Memory_Write
 12560  11B4                     _Flash_Memory_Write:	
 12561                           
 12562                           ;MCU_B1.c: 1018: char i = 0;
 12563                           
 12564                           ;incstack = 0
 12565                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12566  11B4  01F3               	clrf	Flash_Memory_Write@i
 12567                           
 12568                           ;MCU_B1.c: 1019: CFGS = 0;
 12569  11B5  0023               	movlb	3	; select bank3
 12570  11B6  1315               	bcf	21,6	;volatile
 12571                           
 12572                           ;MCU_B1.c: 1020: PMADRH = 0x30;
 12573  11B7  3030               	movlw	48
 12574  11B8  0092               	movwf	18	;volatile
 12575                           
 12576                           ;MCU_B1.c: 1021: PMDATH = 0;
 12577  11B9  0194               	clrf	20	;volatile
 12578                           
 12579                           ;MCU_B1.c: 1022: FREE = 0;
 12580  11BA  1215               	bcf	21,4	;volatile
 12581                           
 12582                           ;MCU_B1.c: 1023: LWLO = 1;
 12583  11BB  1695               	bsf	21,5	;volatile
 12584                           
 12585                           ;MCU_B1.c: 1024: WREN = 1;
 12586  11BC  1515               	bsf	21,2	;volatile
 12587                           
 12588                           ;MCU_B1.c: 1025: for (i = 0; i < 32; i++) {
 12589  11BD  01F3               	clrf	Flash_Memory_Write@i
 12590  11BE  3020               	movlw	32
 12591  11BF  0273               	subwf	Flash_Memory_Write@i,w
 12592  11C0  1803               	btfsc	3,0
 12593  11C1  29D7               	goto	l1436
 12594  11C2                     l7342:	
 12595                           
 12596                           ;MCU_B1.c: 1026: PMADRL = i;
 12597  11C2  0873               	movf	Flash_Memory_Write@i,w
 12598  11C3  0023               	movlb	3	; select bank3
 12599  11C4  0091               	movwf	17	;volatile
 12600                           
 12601                           ;MCU_B1.c: 1027: PMDATL = Memory.Data[i];
 12602  11C5  0873               	movf	Flash_Memory_Write@i,w
 12603  11C6  3E20               	addlw	_Memory& (0+255)
 12604  11C7  0086               	movwf	6
 12605  11C8  3002               	movlw	2	; select bank4/5
 12606  11C9  0087               	movwf	7
 12607  11CA  0801               	movf	1,w
 12608  11CB  0093               	movwf	19	;volatile
 12609                           
 12610                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12611  11CC  319B  2387  3191   	fcall	_Flash_Memory_Unlock
 12612  11CF  3001               	movlw	1
 12613  11D0  00F2               	movwf	??_Flash_Memory_Write
 12614  11D1  0872               	movf	??_Flash_Memory_Write,w
 12615  11D2  07F3               	addwf	Flash_Memory_Write@i,f
 12616  11D3  3020               	movlw	32
 12617  11D4  0273               	subwf	Flash_Memory_Write@i,w
 12618  11D5  1C03               	skipc
 12619  11D6  29C2               	goto	l7342
 12620  11D7                     l1436:	
 12621                           
 12622                           ;MCU_B1.c: 1029: }
 12623                           ;MCU_B1.c: 1030: LWLO = 0;
 12624  11D7  0023               	movlb	3	; select bank3
 12625  11D8  1295               	bcf	21,5	;volatile
 12626                           
 12627                           ;MCU_B1.c: 1031: Flash_Memory_Unlock();
 12628  11D9  319B  2387         	fcall	_Flash_Memory_Unlock
 12629                           
 12630                           ;MCU_B1.c: 1032: WREN = 0;
 12631  11DB  0023               	movlb	3	; select bank3
 12632  11DC  1115               	bcf	21,2	;volatile
 12633  11DD  0008               	return
 12634  11DE                     __end_of_Flash_Memory_Write:	
 12635                           
 12636                           	psect	text82
 12637  1B87                     __ptext82:	
 12638 ;; *************** function _Flash_Memory_Unlock *****************
 12639 ;; Defined at:
 12640 ;;		line 996 in file "../src/MCU_B1.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;		None
 12643 ;; Auto vars:     Size  Location     Type
 12644 ;;		None
 12645 ;; Return value:  Size  Location     Type
 12646 ;;		None               void
 12647 ;; Registers used:
 12648 ;;		wreg
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;Total ram usage:        0 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; Hardware stack levels required when called:    3
 12661 ;; This function calls:
 12662 ;;		Nothing
 12663 ;; This function is called by:
 12664 ;;		_Flash_Memory_Write
 12665 ;;		_Flash_Memory_Erasing
 12666 ;; This function uses a non-reentrant model
 12667 ;;
 12668                           
 12669                           
 12670                           ;psect for function _Flash_Memory_Unlock
 12671  1B87                     _Flash_Memory_Unlock:	
 12672                           
 12673                           ;MCU_B1.c: 997: PMCON2 = 0x55;
 12674                           
 12675                           ;incstack = 0
 12676                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12677  1B87  3055               	movlw	85
 12678  1B88  0023               	movlb	3	; select bank3
 12679  1B89  0096               	movwf	22	;volatile
 12680                           
 12681                           ;MCU_B1.c: 998: PMCON2 = 0xaa;
 12682  1B8A  30AA               	movlw	170
 12683  1B8B  0096               	movwf	22	;volatile
 12684                           
 12685                           ;MCU_B1.c: 999: WR = 1;
 12686  1B8C  1495               	bsf	21,1	;volatile
 12687                           
 12688                           ;MCU_B1.c: 1000: __nop();
 12689  1B8D  0000               	nop
 12690                           
 12691                           ;MCU_B1.c: 1001: __nop();
 12692  1B8E  0000               	nop
 12693  1B8F  0008               	return
 12694  1B90                     __end_of_Flash_Memory_Unlock:	
 12695                           
 12696                           	psect	text83
 12697  1D83                     __ptext83:	
 12698 ;; *************** function _Flash_Memory_Read *****************
 12699 ;; Defined at:
 12700 ;;		line 1005 in file "../src/MCU_B1.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  address         1    wreg     unsigned char 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  address         1    4[COMMON] unsigned char 
 12705 ;;  ret             1    5[COMMON] unsigned char 
 12706 ;;  i               1    3[COMMON] unsigned char 
 12707 ;; Return value:  Size  Location     Type
 12708 ;;                  1    wreg      unsigned char 
 12709 ;; Registers used:
 12710 ;;		wreg, status,2
 12711 ;; Tracked objects:
 12712 ;;		On entry : 0/0
 12713 ;;		On exit  : 0/0
 12714 ;;		Unchanged: 0/0
 12715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12720 ;;Total ram usage:        4 bytes
 12721 ;; Hardware stack levels used:    1
 12722 ;; Hardware stack levels required when called:    3
 12723 ;; This function calls:
 12724 ;;		Nothing
 12725 ;; This function is called by:
 12726 ;;		_Flash_Memory_Initialization
 12727 ;;		_Flash_Memory_Modify
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           
 12732                           ;psect for function _Flash_Memory_Read
 12733  1D83                     _Flash_Memory_Read:	
 12734                           
 12735                           ;incstack = 0
 12736                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12737                           ;Flash_Memory_Read@address stored from wreg
 12738  1D83  00F4               	movwf	Flash_Memory_Read@address
 12739                           
 12740                           ;MCU_B1.c: 1006: char i = 0, ret = 0;
 12741  1D84  01F3               	clrf	Flash_Memory_Read@i
 12742  1D85  01F5               	clrf	Flash_Memory_Read@ret
 12743                           
 12744                           ;MCU_B1.c: 1007: PMADRH = 0x30;
 12745  1D86  3030               	movlw	48
 12746  1D87  0023               	movlb	3	; select bank3
 12747  1D88  0092               	movwf	18	;volatile
 12748                           
 12749                           ;MCU_B1.c: 1008: PMADRL = address;
 12750  1D89  0874               	movf	Flash_Memory_Read@address,w
 12751  1D8A  0091               	movwf	17	;volatile
 12752                           
 12753                           ;MCU_B1.c: 1009: CFGS = 0;
 12754  1D8B  1315               	bcf	21,6	;volatile
 12755                           
 12756                           ;MCU_B1.c: 1010: RD = 1;
 12757  1D8C  1415               	bsf	21,0	;volatile
 12758                           
 12759                           ;MCU_B1.c: 1011: i = PMDATH;
 12760  1D8D  0814               	movf	20,w	;volatile
 12761  1D8E  00F2               	movwf	??_Flash_Memory_Read
 12762  1D8F  0872               	movf	??_Flash_Memory_Read,w
 12763  1D90  00F3               	movwf	Flash_Memory_Read@i
 12764                           
 12765                           ;MCU_B1.c: 1012: ret = PMDATL;
 12766  1D91  0813               	movf	19,w	;volatile
 12767  1D92  00F2               	movwf	??_Flash_Memory_Read
 12768  1D93  0872               	movf	??_Flash_Memory_Read,w
 12769  1D94  00F5               	movwf	Flash_Memory_Read@ret
 12770                           
 12771                           ;MCU_B1.c: 1013: return ret;
 12772  1D95  0875               	movf	Flash_Memory_Read@ret,w
 12773  1D96  0008               	return
 12774  1D97                     __end_of_Flash_Memory_Read:	
 12775                           
 12776                           	psect	text84
 12777  0454                     __ptext84:	
 12778 ;; *************** function _Exception_Main *****************
 12779 ;; Defined at:
 12780 ;;		line 509 in file "../src/Main_B1.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;		None
 12783 ;; Auto vars:     Size  Location     Type
 12784 ;;  i               2    4[BANK3 ] int 
 12785 ;;  i               2    2[BANK3 ] int 
 12786 ;;  lights          1    6[BANK3 ] unsigned char 
 12787 ;;  error           1    1[BANK3 ] unsigned char 
 12788 ;;  count           1    0[BANK3 ] unsigned char 
 12789 ;; Return value:  Size  Location     Type
 12790 ;;		None               void
 12791 ;; Registers used:
 12792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12793 ;; Tracked objects:
 12794 ;;		On entry : 0/0
 12795 ;;		On exit  : 0/0
 12796 ;;		Unchanged: 0/0
 12797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12799 ;;      Locals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Totals:         0       1       0       0       7       0       0       0       0       0       0       0       
      +0       0
 12802 ;;Total ram usage:        8 bytes
 12803 ;; Hardware stack levels used:    1
 12804 ;; Hardware stack levels required when called:    6
 12805 ;; This function calls:
 12806 ;;		_getDimmerLights_Line
 12807 ;;		_getDimmerLights_Status
 12808 ;;		_getMain_All_Error_Status
 12809 ;;		_getMain_LightsStatus
 12810 ;;		_setBuz
 12811 ;;		_setDimmerLights_SwOff
 12812 ;;		_setLED
 12813 ;; This function is called by:
 12814 ;;		_main
 12815 ;; This function uses a non-reentrant model
 12816 ;;
 12817                           
 12818                           
 12819                           ;psect for function _Exception_Main
 12820  0454                     _Exception_Main:	
 12821                           
 12822                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12823                           
 12824                           ;incstack = 0
 12825                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12826  0454  3000               	movlw	0
 12827  0455  3192  2208  3184   	fcall	_getMain_All_Error_Status
 12828  0458  0020               	movlb	0	; select bank0
 12829  0459  00E7               	movwf	??_Exception_Main
 12830  045A  0867               	movf	??_Exception_Main,w
 12831  045B  0023               	movlb	3	; select bank3
 12832  045C  00E8               	movwf	Exception_Main@error^(0+384)
 12833                           
 12834                           ;Main_B1.c: 511: char lights = 0, count = 2;
 12835  045D  01ED               	clrf	Exception_Main@lights^(0+384)
 12836  045E  3002               	movlw	2
 12837  045F  0020               	movlb	0	; select bank0
 12838  0460  00E7               	movwf	??_Exception_Main
 12839  0461  0867               	movf	??_Exception_Main,w
 12840  0462  0023               	movlb	3	; select bank3
 12841  0463  00E7               	movwf	Exception_Main@count^(0+384)
 12842                           
 12843                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12844  0464  0022               	movlb	2	; select bank2
 12845  0465  1DAB               	btfss	(_myMain^(0+256)+11),3
 12846  0466  2C76               	goto	l10778
 12847                           
 12848                           ;Main_B1.c: 513: if (error == 0) {
 12849  0467  0023               	movlb	3	; select bank3
 12850  0468  08E8               	movf	Exception_Main@error^(0+384),f
 12851  0469  1D03               	skipz
 12852  046A  0008               	return
 12853                           
 12854                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12855  046B  0022               	movlb	2	; select bank2
 12856  046C  11AB               	bcf	(_myMain^(0+256)+11),3
 12857                           
 12858                           ;Main_B1.c: 519: setLED(99, 10);
 12859  046D  300A               	movlw	10
 12860  046E  0020               	movlb	0	; select bank0
 12861  046F  00E7               	movwf	??_Exception_Main
 12862  0470  0867               	movf	??_Exception_Main,w
 12863  0471  00F4               	movwf	setLED@command
 12864  0472  3063               	movlw	99
 12865  0473  3197  27A1         	fcall	_setLED
 12866                           
 12867                           ;Main_B1.c: 521: }
 12868                           ;Main_B1.c: 522: } else {
 12869  0475  0008               	return
 12870  0476                     l10778:	
 12871                           
 12872                           ;Main_B1.c: 523: if (error != 0) {
 12873  0476  0023               	movlb	3	; select bank3
 12874  0477  0868               	movf	Exception_Main@error^(0+384),w
 12875  0478  1903               	btfsc	3,2
 12876  0479  0008               	return
 12877                           
 12878                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12879  047A  0022               	movlb	2	; select bank2
 12880  047B  15AB               	bsf	(_myMain^(0+256)+11),3
 12881                           
 12882                           ;Main_B1.c: 527: setLED(99, 11);
 12883  047C  300B               	movlw	11
 12884  047D  0020               	movlb	0	; select bank0
 12885  047E  00E7               	movwf	??_Exception_Main
 12886  047F  0867               	movf	??_Exception_Main,w
 12887  0480  00F4               	movwf	setLED@command
 12888  0481  3063               	movlw	99
 12889  0482  3197  27A1  3184   	fcall	_setLED
 12890                           
 12891                           ;Main_B1.c: 529: switch (error) {
 12892  0485  2D27               	goto	l10826
 12893  0486                     l10784:	
 12894                           ;Main_B1.c: 530: case 2:
 12895                           
 12896                           
 12897                           ;Main_B1.c: 531: if (getMain_LightsStatus() == 1) {
 12898  0486  319C  246C  3184   	fcall	_getMain_LightsStatus
 12899  0489  3A01               	xorlw	1
 12900  048A  1D03               	skipz
 12901  048B  2C95               	goto	l10788
 12902                           
 12903                           ;Main_B1.c: 532: setBuz(10, 300);
 12904  048C  302C               	movlw	44
 12905  048D  0020               	movlb	0	; select bank0
 12906  048E  00A4               	movwf	setBuz@time
 12907  048F  3001               	movlw	1
 12908  0490  00A5               	movwf	setBuz@time+1
 12909  0491  300A               	movlw	10
 12910  0492  3195  25E6  3184   	fcall	_setBuz
 12911  0495                     l10788:	
 12912                           
 12913                           ;Main_B1.c: 533: }
 12914                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12915  0495  0023               	movlb	3	; select bank3
 12916  0496  01E9               	clrf	Exception_Main@i^(0+384)
 12917  0497  01EA               	clrf	(Exception_Main@i+1)^(0+384)
 12918  0498                     l10798:	
 12919  0498  086A               	movf	(Exception_Main@i+1)^(0+384),w
 12920  0499  3A80               	xorlw	128
 12921  049A  0020               	movlb	0	; select bank0
 12922  049B  00E7               	movwf	??_Exception_Main
 12923  049C  3080               	movlw	128
 12924  049D  0267               	subwf	??_Exception_Main,w
 12925  049E  1D03               	skipz
 12926  049F  2CA3               	goto	u13455
 12927  04A0  0023               	movlb	3	; select bank3
 12928  04A1  0867               	movf	Exception_Main@count^(0+384),w
 12929  04A2  0269               	subwf	Exception_Main@i^(0+384),w
 12930  04A3                     u13455:	
 12931  04A3  1803               	btfsc	3,0
 12932  04A4  2CC5               	goto	u13450
 12933                           
 12934                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12935  04A5  0023               	movlb	3	; select bank3
 12936  04A6  0869               	movf	Exception_Main@i^(0+384),w
 12937  04A7  3E01               	addlw	1
 12938  04A8  319C  244E  3184   	fcall	_getDimmerLights_Status
 12939  04AB  3A01               	xorlw	1
 12940  04AC  1D03               	skipz
 12941  04AD  2CBF               	goto	l10796
 12942                           
 12943                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12944  04AE  0020               	movlb	0	; select bank0
 12945  04AF  086D               	movf	_DimmerLights,w
 12946  04B0  0086               	movwf	6
 12947  04B1  3001               	movlw	1	; select bank2/3
 12948  04B2  0087               	movwf	7
 12949  04B3  1401               	bsf	1,0
 12950                           
 12951                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12952  04B4  0A6D               	incf	_DimmerLights,w
 12953  04B5  0086               	movwf	6
 12954  04B6  3001               	movlw	1	; select bank2/3
 12955  04B7  0087               	movwf	7
 12956  04B8  1001               	bcf	1,0
 12957                           
 12958                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12959  04B9  0023               	movlb	3	; select bank3
 12960  04BA  0869               	movf	Exception_Main@i^(0+384),w
 12961  04BB  3E01               	addlw	1
 12962  04BC  3194  240E  3184   	fcall	_setDimmerLights_SwOff
 12963  04BF                     l10796:	
 12964  04BF  3001               	movlw	1
 12965  04C0  0023               	movlb	3	; select bank3
 12966  04C1  07E9               	addwf	Exception_Main@i^(0+384),f
 12967  04C2  3000               	movlw	0
 12968  04C3  3DEA               	addwfc	(Exception_Main@i+1)^(0+384),f
 12969  04C4  2C98               	goto	l10798
 12970  04C5                     u13450:	
 12971  04C5  0023               	movlb	3	; select bank3
 12972  04C6  0008               	return
 12973  04C7                     l10800:	
 12974                           ;Main_B1.c: 544: case 3:
 12975                           
 12976                           ;Main_B1.c: 541: }
 12977                           ;Main_B1.c: 542: }
 12978                           ;Main_B1.c: 543: break;
 12979                           
 12980                           
 12981                           ;Main_B1.c: 546: setBuz(5, 300);
 12982  04C7  302C               	movlw	44
 12983  04C8  0020               	movlb	0	; select bank0
 12984  04C9  00A4               	movwf	setBuz@time
 12985  04CA  3001               	movlw	1
 12986  04CB  00A5               	movwf	setBuz@time+1
 12987  04CC  3005               	movlw	5
 12988  04CD  3195  25E6  3184   	fcall	_setBuz
 12989                           
 12990                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 12991  04D0  319C  247B  3184   	fcall	_getDimmerLights_Line
 12992  04D3  0020               	movlb	0	; select bank0
 12993  04D4  00E7               	movwf	??_Exception_Main
 12994  04D5  0867               	movf	??_Exception_Main,w
 12995  04D6  0023               	movlb	3	; select bank3
 12996  04D7  00ED               	movwf	Exception_Main@lights^(0+384)
 12997                           
 12998                           ;Main_B1.c: 548: if (lights == 0) {
 12999  04D8  08ED               	movf	Exception_Main@lights^(0+384),f
 13000  04D9  1D03               	skipz
 13001  04DA  2D0C               	goto	l10818
 13002                           
 13003                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13004  04DB  01EB               	clrf	Exception_Main@i_3390^(0+384)
 13005  04DC  01EC               	clrf	(Exception_Main@i_3390+1)^(0+384)
 13006  04DD                     l10816:	
 13007  04DD  086C               	movf	(Exception_Main@i_3390+1)^(0+384),w
 13008  04DE  3A80               	xorlw	128
 13009  04DF  0020               	movlb	0	; select bank0
 13010  04E0  00E7               	movwf	??_Exception_Main
 13011  04E1  3080               	movlw	128
 13012  04E2  0267               	subwf	??_Exception_Main,w
 13013  04E3  1D03               	skipz
 13014  04E4  2CE8               	goto	u13485
 13015  04E5  0023               	movlb	3	; select bank3
 13016  04E6  0867               	movf	Exception_Main@count^(0+384),w
 13017  04E7  026B               	subwf	Exception_Main@i_3390^(0+384),w
 13018  04E8                     u13485:	
 13019  04E8  1803               	btfsc	3,0
 13020  04E9  2D0A               	goto	u13480
 13021                           
 13022                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13023  04EA  0023               	movlb	3	; select bank3
 13024  04EB  086B               	movf	Exception_Main@i_3390^(0+384),w
 13025  04EC  3E01               	addlw	1
 13026  04ED  319C  244E  3184   	fcall	_getDimmerLights_Status
 13027  04F0  3A01               	xorlw	1
 13028  04F1  1D03               	skipz
 13029  04F2  2D04               	goto	l10814
 13030                           
 13031                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13032  04F3  0020               	movlb	0	; select bank0
 13033  04F4  086D               	movf	_DimmerLights,w
 13034  04F5  0086               	movwf	6
 13035  04F6  3001               	movlw	1	; select bank2/3
 13036  04F7  0087               	movwf	7
 13037  04F8  1401               	bsf	1,0
 13038                           
 13039                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13040  04F9  0A6D               	incf	_DimmerLights,w
 13041  04FA  0086               	movwf	6
 13042  04FB  3001               	movlw	1	; select bank2/3
 13043  04FC  0087               	movwf	7
 13044  04FD  1001               	bcf	1,0
 13045                           
 13046                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13047  04FE  0023               	movlb	3	; select bank3
 13048  04FF  086B               	movf	Exception_Main@i_3390^(0+384),w
 13049  0500  3E01               	addlw	1
 13050  0501  3194  240E  3184   	fcall	_setDimmerLights_SwOff
 13051  0504                     l10814:	
 13052  0504  3001               	movlw	1
 13053  0505  0023               	movlb	3	; select bank3
 13054  0506  07EB               	addwf	Exception_Main@i_3390^(0+384),f
 13055  0507  3000               	movlw	0
 13056  0508  3DEC               	addwfc	(Exception_Main@i_3390+1)^(0+384),f
 13057  0509  2CDD               	goto	l10816
 13058  050A                     u13480:	
 13059  050A  0023               	movlb	3	; select bank3
 13060  050B  0008               	return
 13061  050C                     l10818:	
 13062                           ;Main_B1.c: 556: }
 13063                           ;Main_B1.c: 557: }
 13064                           ;Main_B1.c: 558: } else {
 13065                           
 13066                           
 13067                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13068  050C  0023               	movlb	3	; select bank3
 13069  050D  086D               	movf	Exception_Main@lights^(0+384),w
 13070  050E  319C  244E  3184   	fcall	_getDimmerLights_Status
 13071  0511  3A01               	xorlw	1
 13072  0512  1903               	btfsc	3,2
 13073  0513  2D16               	goto	l10820
 13074  0514  0023               	movlb	3	; select bank3
 13075  0515  0008               	return
 13076  0516                     l10820:	
 13077                           
 13078                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 13079  0516  0020               	movlb	0	; select bank0
 13080  0517  086D               	movf	_DimmerLights,w
 13081  0518  0086               	movwf	6
 13082  0519  3001               	movlw	1	; select bank2/3
 13083  051A  0087               	movwf	7
 13084  051B  1401               	bsf	1,0
 13085                           
 13086                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 13087  051C  0A6D               	incf	_DimmerLights,w
 13088  051D  0086               	movwf	6
 13089  051E  3001               	movlw	1	; select bank2/3
 13090  051F  0087               	movwf	7
 13091  0520  1001               	bcf	1,0
 13092                           
 13093                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 13094  0521  0023               	movlb	3	; select bank3
 13095  0522  086D               	movf	Exception_Main@lights^(0+384),w
 13096  0523  3194  240E         	fcall	_setDimmerLights_SwOff
 13097  0525  0023               	movlb	3	; select bank3
 13098  0526  0008               	return
 13099  0527                     l10826:	
 13100                           ;Main_B1.c: 568: }
 13101                           
 13102                           ;Main_B1.c: 565: }
 13103                           ;Main_B1.c: 566: }
 13104                           ;Main_B1.c: 567: break;
 13105                           
 13106  0527  0023               	movlb	3	; select bank3
 13107  0528  0868               	movf	Exception_Main@error^(0+384),w
 13108                           
 13109                           ; Switch size 1, requested type "space"
 13110                           ; Number of cases is 2, Range of values is 2 to 3
 13111                           ; switch strategies available:
 13112                           ; Name         Instructions Cycles
 13113                           ; simple_byte            7     4 (average)
 13114                           ; direct_byte           13     9 (fixed)
 13115                           ; jumptable            263     9 (fixed)
 13116                           ;	Chosen strategy is simple_byte
 13117  0529  3A02               	xorlw	2	; case 2
 13118  052A  1903               	skipnz
 13119  052B  2C86               	goto	l10784
 13120  052C  3A01               	xorlw	1	; case 3
 13121  052D  1903               	skipnz
 13122  052E  2CC7               	goto	l10800
 13123  052F  2D31               	goto	l1689
 13124  0530  0008               	return
 13125  0531                     l1689:	
 13126  0531  0008               	return
 13127  0532                     __end_of_Exception_Main:	
 13128                           
 13129                           	psect	text85
 13130  1C7B                     __ptext85:	
 13131 ;; *************** function _getDimmerLights_Line *****************
 13132 ;; Defined at:
 13133 ;;		line 954 in file "../src/Dimmer_B1.c"
 13134 ;; Parameters:    Size  Location     Type
 13135 ;;		None
 13136 ;; Auto vars:     Size  Location     Type
 13137 ;;  line            1    3[COMMON] unsigned char 
 13138 ;; Return value:  Size  Location     Type
 13139 ;;                  1    wreg      unsigned char 
 13140 ;; Registers used:
 13141 ;;		wreg, status,2
 13142 ;; Tracked objects:
 13143 ;;		On entry : 0/0
 13144 ;;		On exit  : 0/0
 13145 ;;		Unchanged: 0/0
 13146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13151 ;;Total ram usage:        2 bytes
 13152 ;; Hardware stack levels used:    1
 13153 ;; Hardware stack levels required when called:    3
 13154 ;; This function calls:
 13155 ;;		Nothing
 13156 ;; This function is called by:
 13157 ;;		_Exception_Main
 13158 ;; This function uses a non-reentrant model
 13159 ;;
 13160                           
 13161                           
 13162                           ;psect for function _getDimmerLights_Line
 13163  1C7B                     _getDimmerLights_Line:	
 13164                           
 13165                           ;Dimmer_B1.c: 955: char line = 0;
 13166                           
 13167                           ;incstack = 0
 13168                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13169  1C7B  01F3               	clrf	getDimmerLights_Line@line
 13170                           
 13171                           ;Dimmer_B1.c: 957: if (DimmerLights1.Line == 1) {
 13172  1C7C  0023               	movlb	3	; select bank3
 13173  1C7D  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13174  1C7E  2C82               	goto	l930
 13175                           
 13176                           ;Dimmer_B1.c: 958: line = 1;
 13177  1C7F  01F3               	clrf	getDimmerLights_Line@line
 13178  1C80  0AF3               	incf	getDimmerLights_Line@line,f
 13179                           
 13180                           ;Dimmer_B1.c: 959: }
 13181  1C81  2C88               	goto	l931
 13182  1C82                     l930:	
 13183                           
 13184                           ;Dimmer_B1.c: 962: else if (DimmerLights2.Line == 1) {
 13185  1C82  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13186  1C83  2C88               	goto	l931
 13187                           
 13188                           ;Dimmer_B1.c: 963: line = 2;
 13189  1C84  3002               	movlw	2
 13190  1C85  00F2               	movwf	??_getDimmerLights_Line
 13191  1C86  0872               	movf	??_getDimmerLights_Line,w
 13192  1C87  00F3               	movwf	getDimmerLights_Line@line
 13193  1C88                     l931:	
 13194                           
 13195                           ;Dimmer_B1.c: 964: }
 13196                           ;Dimmer_B1.c: 971: return line;
 13197  1C88  0873               	movf	getDimmerLights_Line@line,w
 13198  1C89  0008               	return
 13199  1C8A                     __end_of_getDimmerLights_Line:	
 13200                           
 13201                           	psect	text86
 13202  1F7F                     __ptext86:	
 13203 ;; *************** function _DimmerLights_Main *****************
 13204 ;; Defined at:
 13205 ;;		line 737 in file "../src/Dimmer_B1.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;		None
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;		None
 13210 ;; Return value:  Size  Location     Type
 13211 ;;		None               void
 13212 ;; Registers used:
 13213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13214 ;; Tracked objects:
 13215 ;;		On entry : 0/0
 13216 ;;		On exit  : 0/0
 13217 ;;		Unchanged: 0/0
 13218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;Total ram usage:        0 bytes
 13224 ;; Hardware stack levels used:    1
 13225 ;; Hardware stack levels required when called:    8
 13226 ;; This function calls:
 13227 ;;		_getLoad_OK
 13228 ;;		_getMain_All_Error_Status
 13229 ;;		_getMain_LightsStatus
 13230 ;;		_setDimmerLights_Main
 13231 ;; This function is called by:
 13232 ;;		_main
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           
 13237                           ;psect for function _DimmerLights_Main
 13238  1F7F                     _DimmerLights_Main:	
 13239                           
 13240                           ;Dimmer_B1.c: 740: if (Dimmer.LoadGO == 1) {
 13241                           
 13242                           ;incstack = 0
 13243                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13244  1F7F  0022               	movlb	2	; select bank2
 13245  1F80  1CAE               	btfss	_Dimmer^(0+256),1	;volatile
 13246  1F81  2F97               	goto	l10434
 13247                           
 13248                           ;Dimmer_B1.c: 741: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13249  1F82  319B  234B  319F   	fcall	_getLoad_OK
 13250  1F85  3A01               	xorlw	1
 13251  1F86  1903               	skipnz
 13252  1F87  2F95               	goto	l875
 13253  1F88  3000               	movlw	0
 13254  1F89  3192  2208  319F   	fcall	_getMain_All_Error_Status
 13255  1F8C  3800               	iorlw	0
 13256  1F8D  1D03               	skipz
 13257  1F8E  2F95               	goto	l875
 13258  1F8F  319C  246C  319F   	fcall	_getMain_LightsStatus
 13259  1F92  3800               	iorlw	0
 13260  1F93  1D03               	skipz
 13261  1F94  2F97               	goto	l10434
 13262  1F95                     l875:	
 13263                           
 13264                           ;Dimmer_B1.c: 742: Dimmer.LoadGO = 0;
 13265  1F95  0022               	movlb	2	; select bank2
 13266  1F96  10AE               	bcf	_Dimmer^(0+256),1	;volatile
 13267  1F97                     l10434:	
 13268                           
 13269                           ;Dimmer_B1.c: 743: }
 13270                           ;Dimmer_B1.c: 744: }
 13271                           ;Dimmer_B1.c: 748: setDimmerLights_Main(1);
 13272  1F97  3001               	movlw	1
 13273  1F98  3189  21C8  319F   	fcall	_setDimmerLights_Main
 13274                           
 13275                           ;Dimmer_B1.c: 752: setDimmerLights_Main(2);
 13276  1F9B  3002               	movlw	2
 13277  1F9C  3189  21C8         	fcall	_setDimmerLights_Main
 13278  1F9E  0008               	return
 13279  1F9F                     __end_of_DimmerLights_Main:	
 13280                           
 13281                           	psect	text87
 13282  09C8                     __ptext87:	
 13283 ;; *************** function _setDimmerLights_Main *****************
 13284 ;; Defined at:
 13285 ;;		line 762 in file "../src/Dimmer_B1.c"
 13286 ;; Parameters:    Size  Location     Type
 13287 ;;  lights          1    wreg     unsigned char 
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;  lights          1   71[BANK0 ] unsigned char 
 13290 ;; Return value:  Size  Location     Type
 13291 ;;		None               void
 13292 ;; Registers used:
 13293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13294 ;; Tracked objects:
 13295 ;;		On entry : 0/0
 13296 ;;		On exit  : 0/0
 13297 ;;		Unchanged: 0/0
 13298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13303 ;;Total ram usage:        1 bytes
 13304 ;; Hardware stack levels used:    1
 13305 ;; Hardware stack levels required when called:    7
 13306 ;; This function calls:
 13307 ;;		_DimmerLights_SelectPointer
 13308 ;;		_getDimmerLights_Allow_Condition
 13309 ;;		_getMain_LightsStatus
 13310 ;;		_setDimmerLights_Dimming
 13311 ;;		_setDimmerLights_OnOff
 13312 ;; This function is called by:
 13313 ;;		_DimmerLights_Main
 13314 ;; This function uses a non-reentrant model
 13315 ;;
 13316                           
 13317                           
 13318                           ;psect for function _setDimmerLights_Main
 13319  09C8                     _setDimmerLights_Main:	
 13320                           
 13321                           ;incstack = 0
 13322                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13323                           ;setDimmerLights_Main@lights stored from wreg
 13324  09C8  0020               	movlb	0	; select bank0
 13325  09C9  00E7               	movwf	setDimmerLights_Main@lights
 13326                           
 13327                           ;Dimmer_B1.c: 764: DimmerLights_SelectPointer(lights);
 13328  09CA  0867               	movf	setDimmerLights_Main@lights,w
 13329  09CB  319D  25AC  3189   	fcall	_DimmerLights_SelectPointer
 13330                           
 13331                           ;Dimmer_B1.c: 765: if (DimmerLights->Trigger == 1) {
 13332  09CE  0020               	movlb	0	; select bank0
 13333  09CF  086D               	movf	_DimmerLights,w
 13334  09D0  0086               	movwf	6
 13335  09D1  3001               	movlw	1	; select bank2/3
 13336  09D2  0087               	movwf	7
 13337  09D3  1C81               	btfss	1,1
 13338  09D4  29F4               	goto	l10112
 13339                           
 13340                           ;Dimmer_B1.c: 766: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13341  09D5  0867               	movf	setDimmerLights_Main@lights,w
 13342  09D6  3192  22D3  3189   	fcall	_getDimmerLights_Allow_Condition
 13343  09D9  3800               	iorlw	0
 13344  09DA  1D03               	skipz
 13345  09DB  0008               	return
 13346                           
 13347                           ;Dimmer_B1.c: 767: DimmerLights->Trigger = 0;
 13348  09DC  0020               	movlb	0	; select bank0
 13349  09DD  086D               	movf	_DimmerLights,w
 13350  09DE  0086               	movwf	6
 13351  09DF  3001               	movlw	1	; select bank2/3
 13352  09E0  0087               	movwf	7
 13353  09E1  1081               	bcf	1,1
 13354                           
 13355                           ;Dimmer_B1.c: 768: if (DimmerLights->Switch == 1) {
 13356  09E2  086D               	movf	_DimmerLights,w
 13357  09E3  0086               	movwf	6
 13358  09E4  3001               	movlw	1	; select bank2/3
 13359  09E5  0087               	movwf	7
 13360  09E6  1D01               	btfss	1,2
 13361  09E7  29EE               	goto	l10110
 13362                           
 13363                           ;Dimmer_B1.c: 769: setDimmerLights_OnOff(lights, 1);
 13364  09E8  01E3               	clrf	setDimmerLights_OnOff@command
 13365  09E9  0AE3               	incf	setDimmerLights_OnOff@command,f
 13366  09EA  0867               	movf	setDimmerLights_Main@lights,w
 13367  09EB  318D  2563         	fcall	_setDimmerLights_OnOff
 13368                           
 13369                           ;Dimmer_B1.c: 770: } else {
 13370  09ED  0008               	return
 13371  09EE                     l10110:	
 13372                           
 13373                           ;Dimmer_B1.c: 771: setDimmerLights_OnOff(lights, 0);
 13374  09EE  0020               	movlb	0	; select bank0
 13375  09EF  01E3               	clrf	setDimmerLights_OnOff@command
 13376  09F0  0867               	movf	setDimmerLights_Main@lights,w
 13377  09F1  318D  2563         	fcall	_setDimmerLights_OnOff
 13378                           
 13379                           ;Dimmer_B1.c: 772: }
 13380                           ;Dimmer_B1.c: 773: }
 13381                           ;Dimmer_B1.c: 774: } else {
 13382  09F3  0008               	return
 13383  09F4                     l10112:	
 13384                           
 13385                           ;Dimmer_B1.c: 775: if (getMain_LightsStatus() == 1) {
 13386  09F4  319C  246C  3189   	fcall	_getMain_LightsStatus
 13387  09F7  3A01               	xorlw	1
 13388  09F8  1D03               	skipz
 13389  09F9  2A20               	goto	l10124
 13390                           
 13391                           ;Dimmer_B1.c: 776: if (DimmerLights->DimmingTrigger == 1) {
 13392  09FA  0020               	movlb	0	; select bank0
 13393  09FB  086D               	movf	_DimmerLights,w
 13394  09FC  0086               	movwf	6
 13395  09FD  3001               	movlw	1	; select bank2/3
 13396  09FE  0087               	movwf	7
 13397  09FF  1E01               	btfss	1,4
 13398  0A00  0008               	return
 13399                           
 13400                           ;Dimmer_B1.c: 777: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13401  0A01  0867               	movf	setDimmerLights_Main@lights,w
 13402  0A02  3192  22D3  3189   	fcall	_getDimmerLights_Allow_Condition
 13403  0A05  3800               	iorlw	0
 13404  0A06  1D03               	skipz
 13405  0A07  0008               	return
 13406                           
 13407                           ;Dimmer_B1.c: 778: DimmerLights->DimmingTrigger = 0;
 13408  0A08  0020               	movlb	0	; select bank0
 13409  0A09  086D               	movf	_DimmerLights,w
 13410  0A0A  0086               	movwf	6
 13411  0A0B  3001               	movlw	1	; select bank2/3
 13412  0A0C  0087               	movwf	7
 13413  0A0D  1201               	bcf	1,4
 13414                           
 13415                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingSwitch == 1) {
 13416  0A0E  086D               	movf	_DimmerLights,w
 13417  0A0F  0086               	movwf	6
 13418  0A10  3001               	movlw	1	; select bank2/3
 13419  0A11  0087               	movwf	7
 13420  0A12  1E81               	btfss	1,5
 13421  0A13  2A1A               	goto	l10122
 13422                           
 13423                           ;Dimmer_B1.c: 780: setDimmerLights_Dimming(lights, 1);
 13424  0A14  01E3               	clrf	setDimmerLights_Dimming@status
 13425  0A15  0AE3               	incf	setDimmerLights_Dimming@status,f
 13426  0A16  0867               	movf	setDimmerLights_Main@lights,w
 13427  0A17  3194  24F1         	fcall	_setDimmerLights_Dimming
 13428                           
 13429                           ;Dimmer_B1.c: 781: } else {
 13430  0A19  0008               	return
 13431  0A1A                     l10122:	
 13432                           
 13433                           ;Dimmer_B1.c: 782: setDimmerLights_Dimming(lights, 0);
 13434  0A1A  0020               	movlb	0	; select bank0
 13435  0A1B  01E3               	clrf	setDimmerLights_Dimming@status
 13436  0A1C  0867               	movf	setDimmerLights_Main@lights,w
 13437  0A1D  3194  24F1         	fcall	_setDimmerLights_Dimming
 13438                           
 13439                           ;Dimmer_B1.c: 783: }
 13440                           ;Dimmer_B1.c: 784: }
 13441                           ;Dimmer_B1.c: 785: }
 13442                           ;Dimmer_B1.c: 786: } else {
 13443  0A1F  0008               	return
 13444  0A20                     l10124:	
 13445                           
 13446                           ;Dimmer_B1.c: 787: if (DimmerLights->DimmingTrigger == 1) {
 13447  0A20  0020               	movlb	0	; select bank0
 13448  0A21  086D               	movf	_DimmerLights,w
 13449  0A22  0086               	movwf	6
 13450  0A23  3001               	movlw	1	; select bank2/3
 13451  0A24  0087               	movwf	7
 13452  0A25  1E01               	btfss	1,4
 13453  0A26  0008               	return
 13454                           
 13455                           ;Dimmer_B1.c: 788: DimmerLights->DimmingTrigger = 0;
 13456  0A27  086D               	movf	_DimmerLights,w
 13457  0A28  0086               	movwf	6
 13458  0A29  3001               	movlw	1	; select bank2/3
 13459  0A2A  0087               	movwf	7
 13460  0A2B  1201               	bcf	1,4
 13461  0A2C  0008               	return
 13462  0A2D                     __end_of_setDimmerLights_Main:	
 13463                           
 13464                           	psect	text88
 13465  0D63                     __ptext88:	
 13466 ;; *************** function _setDimmerLights_OnOff *****************
 13467 ;; Defined at:
 13468 ;;		line 796 in file "../src/Dimmer_B1.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;  lights          1    wreg     unsigned char 
 13471 ;;  command         1   67[BANK0 ] unsigned char 
 13472 ;; Auto vars:     Size  Location     Type
 13473 ;;  lights          1   70[BANK0 ] unsigned char 
 13474 ;; Return value:  Size  Location     Type
 13475 ;;		None               void
 13476 ;; Registers used:
 13477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13478 ;; Tracked objects:
 13479 ;;		On entry : 0/0
 13480 ;;		On exit  : 0/0
 13481 ;;		Unchanged: 0/0
 13482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;Total ram usage:        4 bytes
 13488 ;; Hardware stack levels used:    1
 13489 ;; Hardware stack levels required when called:    6
 13490 ;; This function calls:
 13491 ;;		_getDimmerLights_PercentToValue
 13492 ;;		_getDimmerLights_ValueToPercent
 13493 ;;		_setDimmerIntr_ControlStatus
 13494 ;;		_setDimmerIntr_DimmingValue
 13495 ;;		_setDimmerIntr_Dimming_RF
 13496 ;;		_setDimmerIntr_MaxmumValue
 13497 ;;		_setDimmerLights_Line
 13498 ;;		_setLED
 13499 ;;		_setProductData
 13500 ;;		_setRF_DimmerLights
 13501 ;;		_setTxData
 13502 ;; This function is called by:
 13503 ;;		_setDimmerLights_Main
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           
 13508                           ;psect for function _setDimmerLights_OnOff
 13509  0D63                     _setDimmerLights_OnOff:	
 13510                           
 13511                           ;incstack = 0
 13512                           ; Regs used in _setDimmerLights_OnOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13513                           ;setDimmerLights_OnOff@lights stored from wreg
 13514  0D63  0020               	movlb	0	; select bank0
 13515  0D64  00E6               	movwf	setDimmerLights_OnOff@lights
 13516                           
 13517                           ;Dimmer_B1.c: 798: if (command == 1) {
 13518  0D65  0863               	movf	setDimmerLights_OnOff@command,w
 13519  0D66  3A01               	xorlw	1
 13520  0D67  1D03               	skipz
 13521  0D68  2DC4               	goto	l9934
 13522                           
 13523                           ;Dimmer_B1.c: 799: setDimmerIntr_ControlStatus(lights, 1);
 13524  0D69  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13525  0D6A  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13526  0D6B  0866               	movf	setDimmerLights_OnOff@lights,w
 13527  0D6C  3191  2162  318D   	fcall	_setDimmerIntr_ControlStatus
 13528                           
 13529                           ;Dimmer_B1.c: 800: setLED(lights, 0);
 13530  0D6F  01F4               	clrf	setLED@command
 13531  0D70  0020               	movlb	0	; select bank0
 13532  0D71  0866               	movf	setDimmerLights_OnOff@lights,w
 13533  0D72  3197  27A1  318D   	fcall	_setLED
 13534                           
 13535                           ;Dimmer_B1.c: 804: Dimmer.Load_Status = 1;
 13536  0D75  0022               	movlb	2	; select bank2
 13537  0D76  152E               	bsf	_Dimmer^(0+256),2	;volatile
 13538                           
 13539                           ;Dimmer_B1.c: 805: setDimmerLights_Line(lights);
 13540  0D77  0020               	movlb	0	; select bank0
 13541  0D78  0866               	movf	setDimmerLights_OnOff@lights,w
 13542  0D79  319D  254B  318D   	fcall	_setDimmerLights_Line
 13543                           
 13544                           ;Dimmer_B1.c: 810: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13545  0D7C  3034               	movlw	52
 13546  0D7D  0020               	movlb	0	; select bank0
 13547  0D7E  00E4               	movwf	??_setDimmerLights_OnOff
 13548  0D7F  0864               	movf	??_setDimmerLights_OnOff,w
 13549  0D80  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13550  0D81  0866               	movf	setDimmerLights_OnOff@lights,w
 13551  0D82  319D  25C1  318D   	fcall	_setDimmerIntr_DimmingValue
 13552                           
 13553                           ;Dimmer_B1.c: 811: if (DimmerLights->DimmingRun == 1) {
 13554  0D85  0020               	movlb	0	; select bank0
 13555  0D86  0A6D               	incf	_DimmerLights,w
 13556  0D87  0086               	movwf	6
 13557  0D88  3001               	movlw	1	; select bank2/3
 13558  0D89  0087               	movwf	7
 13559  0D8A  1F01               	btfss	1,6
 13560  0D8B  2DAD               	goto	l9930
 13561                           
 13562                           ;Dimmer_B1.c: 812: DimmerLights->DimmingRun = 0;
 13563  0D8C  0A6D               	incf	_DimmerLights,w
 13564  0D8D  0086               	movwf	6
 13565  0D8E  3001               	movlw	1	; select bank2/3
 13566  0D8F  0087               	movwf	7
 13567  0D90  1301               	bcf	1,6
 13568                           
 13569                           ;Dimmer_B1.c: 813: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13570  0D91  0866               	movf	setDimmerLights_OnOff@lights,w
 13571  0D92  3E14               	addlw	20
 13572  0D93  076F               	addwf	_product,w
 13573  0D94  00E4               	movwf	??_setDimmerLights_OnOff
 13574  0D95  0864               	movf	??_setDimmerLights_OnOff,w
 13575  0D96  0086               	movwf	6
 13576  0D97  3002               	movlw	2	; select bank4/5
 13577  0D98  0087               	movwf	7
 13578  0D99  0801               	movf	1,w
 13579  0D9A  3189  2163  318D   	fcall	_getDimmerLights_PercentToValue
 13580  0D9D  0020               	movlb	0	; select bank0
 13581  0D9E  00E5               	movwf	??_setDimmerLights_OnOff+1
 13582  0D9F  0865               	movf	??_setDimmerLights_OnOff+1,w
 13583  0DA0  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13584  0DA1  0866               	movf	setDimmerLights_OnOff@lights,w
 13585  0DA2  319E  2640  318D   	fcall	_setDimmerIntr_MaxmumValue
 13586                           
 13587                           ;Dimmer_B1.c: 814: setDimmerIntr_Dimming_RF(lights, 1);
 13588  0DA5  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13589  0DA6  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13590  0DA7  0020               	movlb	0	; select bank0
 13591  0DA8  0866               	movf	setDimmerLights_OnOff@lights,w
 13592  0DA9  3191  218B  318D   	fcall	_setDimmerIntr_Dimming_RF
 13593                           
 13594                           ;Dimmer_B1.c: 815: } else {
 13595  0DAC  2DE5               	goto	l9950
 13596  0DAD                     l9930:	
 13597                           
 13598                           ;Dimmer_B1.c: 816: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13599  0DAD  3034               	movlw	52
 13600  0DAE  0020               	movlb	0	; select bank0
 13601  0DAF  00E4               	movwf	??_setDimmerLights_OnOff
 13602  0DB0  0864               	movf	??_setDimmerLights_OnOff,w
 13603  0DB1  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13604  0DB2  0866               	movf	setDimmerLights_OnOff@lights,w
 13605  0DB3  319E  2640  318D   	fcall	_setDimmerIntr_MaxmumValue
 13606                           
 13607                           ;Dimmer_B1.c: 817: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13608  0DB6  3034               	movlw	52
 13609  0DB7  3188  20FE  318D   	fcall	_getDimmerLights_ValueToPercent
 13610  0DBA  0020               	movlb	0	; select bank0
 13611  0DBB  00E4               	movwf	??_setDimmerLights_OnOff
 13612  0DBC  0864               	movf	??_setDimmerLights_OnOff,w
 13613  0DBD  00DA               	movwf	setProductData@value
 13614  0DBE  0866               	movf	setDimmerLights_OnOff@lights,w
 13615  0DBF  3E14               	addlw	20
 13616  0DC0  319C  2440  318D   	fcall	_setProductData
 13617                           
 13618                           ;Dimmer_B1.c: 818: }
 13619                           ;Dimmer_B1.c: 820: } else if (command == 0) {
 13620  0DC3  2DE5               	goto	l9950
 13621  0DC4                     l9934:	
 13622  0DC4  0020               	movlb	0	; select bank0
 13623  0DC5  08E3               	movf	setDimmerLights_OnOff@command,f
 13624  0DC6  1D03               	skipz
 13625  0DC7  2DE5               	goto	l9950
 13626                           
 13627                           ;Dimmer_B1.c: 821: setDimmerIntr_ControlStatus(lights, 0);
 13628  0DC8  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13629  0DC9  0866               	movf	setDimmerLights_OnOff@lights,w
 13630  0DCA  3191  2162  318D   	fcall	_setDimmerIntr_ControlStatus
 13631                           
 13632                           ;Dimmer_B1.c: 822: setLED(lights, 1);
 13633  0DCD  01F4               	clrf	setLED@command
 13634  0DCE  0AF4               	incf	setLED@command,f
 13635  0DCF  0020               	movlb	0	; select bank0
 13636  0DD0  0866               	movf	setDimmerLights_OnOff@lights,w
 13637  0DD1  3197  27A1  318D   	fcall	_setLED
 13638                           
 13639                           ;Dimmer_B1.c: 827: if (lights == 1) {
 13640  0DD4  0020               	movlb	0	; select bank0
 13641  0DD5  0866               	movf	setDimmerLights_OnOff@lights,w
 13642  0DD6  3A01               	xorlw	1
 13643  0DD7  1D03               	skipz
 13644  0DD8  2DDB               	goto	l9944
 13645                           
 13646                           ;Dimmer_B1.c: 828: RA7 = 0;
 13647  0DD9  138C               	bcf	12,7	;volatile
 13648                           
 13649                           ;Dimmer_B1.c: 830: }
 13650  0DDA  2DDF               	goto	l900
 13651  0DDB                     l9944:	
 13652                           
 13653                           ;Dimmer_B1.c: 833: else if (lights == 2) {
 13654  0DDB  0866               	movf	setDimmerLights_OnOff@lights,w
 13655  0DDC  3A02               	xorlw	2
 13656  0DDD  1903               	btfsc	3,2
 13657                           
 13658                           ;Dimmer_B1.c: 834: RB4 = 0;
 13659  0DDE  120D               	bcf	13,4	;volatile
 13660  0DDF                     l900:	
 13661                           
 13662                           ;Dimmer_B1.c: 835: }
 13663                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 0;
 13664  0DDF  0022               	movlb	2	; select bank2
 13665  0DE0  112E               	bcf	_Dimmer^(0+256),2	;volatile
 13666                           
 13667                           ;Dimmer_B1.c: 841: setDimmerLights_Line(0);
 13668  0DE1  3000               	movlw	0
 13669  0DE2  319D  254B  318D   	fcall	_setDimmerLights_Line
 13670  0DE5                     l9950:	
 13671                           
 13672                           ;Dimmer_B1.c: 843: }
 13673                           ;Dimmer_B1.c: 846: setRF_DimmerLights(lights, command);
 13674  0DE5  0020               	movlb	0	; select bank0
 13675  0DE6  0863               	movf	setDimmerLights_OnOff@command,w
 13676  0DE7  00E4               	movwf	??_setDimmerLights_OnOff
 13677  0DE8  0864               	movf	??_setDimmerLights_OnOff,w
 13678  0DE9  00DE               	movwf	setRF_DimmerLights@on
 13679  0DEA  0866               	movf	setDimmerLights_OnOff@lights,w
 13680  0DEB  3197  2742  318D   	fcall	_setRF_DimmerLights
 13681                           
 13682                           ;Dimmer_B1.c: 847: setTxData();
 13683  0DEE  318F  274C         	fcall	_setTxData
 13684  0DF0  0008               	return
 13685  0DF1                     __end_of_setDimmerLights_OnOff:	
 13686                           
 13687                           	psect	text89
 13688  17A1                     __ptext89:	
 13689 ;; *************** function _setLED *****************
 13690 ;; Defined at:
 13691 ;;		line 76 in file "../src/LED_B1.c"
 13692 ;; Parameters:    Size  Location     Type
 13693 ;;  led             1    wreg     unsigned char 
 13694 ;;  command         1    4[COMMON] unsigned char 
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  led             1    5[COMMON] unsigned char 
 13697 ;; Return value:  Size  Location     Type
 13698 ;;		None               void
 13699 ;; Registers used:
 13700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13701 ;; Tracked objects:
 13702 ;;		On entry : 0/0
 13703 ;;		On exit  : 0/0
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13706 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13709 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13710 ;;Total ram usage:        2 bytes
 13711 ;; Hardware stack levels used:    1
 13712 ;; Hardware stack levels required when called:    4
 13713 ;; This function calls:
 13714 ;;		_LedPointSelect
 13715 ;; This function is called by:
 13716 ;;		_setDimmerLights_OnOff
 13717 ;;		_setLED_Initialization
 13718 ;;		_Exception_Main
 13719 ;;		_setSw_Initialization
 13720 ;; This function uses a non-reentrant model
 13721 ;;
 13722                           
 13723                           
 13724                           ;psect for function _setLED
 13725  17A1                     _setLED:	
 13726                           
 13727                           ;incstack = 0
 13728                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13729                           ;setLED@led stored from wreg
 13730  17A1  00F5               	movwf	setLED@led
 13731                           
 13732                           ;LED_B1.c: 77: LedPointSelect(led);
 13733  17A2  0875               	movf	setLED@led,w
 13734  17A3  319F  2728  3197   	fcall	_LedPointSelect
 13735                           
 13736                           ;LED_B1.c: 78: if (command == 0) {
 13737  17A6  08F4               	movf	setLED@command,f
 13738  17A7  1D03               	skipz
 13739  17A8  2FBB               	goto	l9706
 13740                           
 13741                           ;LED_B1.c: 80: if (led == 1) {
 13742  17A9  0875               	movf	setLED@led,w
 13743  17AA  3A01               	xorlw	1
 13744  17AB  1D03               	skipz
 13745  17AC  2FAF               	goto	l9698
 13746                           
 13747                           ;LED_B1.c: 84: RA3 = 1;
 13748  17AD  0020               	movlb	0	; select bank0
 13749  17AE  158C               	bsf	12,3	;volatile
 13750  17AF                     l9698:	
 13751                           
 13752                           ;LED_B1.c: 86: }
 13753                           ;LED_B1.c: 89: if (led == 2) {
 13754  17AF  0875               	movf	setLED@led,w
 13755  17B0  3A02               	xorlw	2
 13756  17B1  1D03               	skipz
 13757  17B2  2FB5               	goto	l9702
 13758                           
 13759                           ;LED_B1.c: 93: RC7 = 1;
 13760  17B3  0020               	movlb	0	; select bank0
 13761  17B4  178E               	bsf	14,7	;volatile
 13762  17B5                     l9702:	
 13763                           
 13764                           ;LED_B1.c: 95: }
 13765                           ;LED_B1.c: 107: if (led == 99) {
 13766  17B5  0875               	movf	setLED@led,w
 13767  17B6  3A63               	xorlw	99
 13768  17B7  1D03               	skipz
 13769  17B8  2FBB               	goto	l9706
 13770                           
 13771                           ;LED_B1.c: 111: RB5 = 1;
 13772  17B9  0020               	movlb	0	; select bank0
 13773  17BA  168D               	bsf	13,5	;volatile
 13774  17BB                     l9706:	
 13775                           
 13776                           ;LED_B1.c: 113: }
 13777                           ;LED_B1.c: 115: }
 13778                           ;LED_B1.c: 116: if (command == 1) {
 13779  17BB  0874               	movf	setLED@command,w
 13780  17BC  3A01               	xorlw	1
 13781  17BD  1D03               	skipz
 13782  17BE  2FD1               	goto	l9720
 13783                           
 13784                           ;LED_B1.c: 118: if (led == 1) {
 13785  17BF  0875               	movf	setLED@led,w
 13786  17C0  3A01               	xorlw	1
 13787  17C1  1D03               	skipz
 13788  17C2  2FC5               	goto	l9712
 13789                           
 13790                           ;LED_B1.c: 122: RA3 = 0;
 13791  17C3  0020               	movlb	0	; select bank0
 13792  17C4  118C               	bcf	12,3	;volatile
 13793  17C5                     l9712:	
 13794                           
 13795                           ;LED_B1.c: 124: }
 13796                           ;LED_B1.c: 127: if (led == 2) {
 13797  17C5  0875               	movf	setLED@led,w
 13798  17C6  3A02               	xorlw	2
 13799  17C7  1D03               	skipz
 13800  17C8  2FCB               	goto	l9716
 13801                           
 13802                           ;LED_B1.c: 131: RC7 = 0;
 13803  17C9  0020               	movlb	0	; select bank0
 13804  17CA  138E               	bcf	14,7	;volatile
 13805  17CB                     l9716:	
 13806                           
 13807                           ;LED_B1.c: 133: }
 13808                           ;LED_B1.c: 145: if (led == 99) {
 13809  17CB  0875               	movf	setLED@led,w
 13810  17CC  3A63               	xorlw	99
 13811  17CD  1D03               	skipz
 13812  17CE  2FD1               	goto	l9720
 13813                           
 13814                           ;LED_B1.c: 149: RB5 = 0;
 13815  17CF  0020               	movlb	0	; select bank0
 13816  17D0  128D               	bcf	13,5	;volatile
 13817  17D1                     l9720:	
 13818                           
 13819                           ;LED_B1.c: 151: }
 13820                           ;LED_B1.c: 153: }
 13821                           ;LED_B1.c: 154: if (command == 10) {
 13822  17D1  0874               	movf	setLED@command,w
 13823  17D2  3A0A               	xorlw	10
 13824  17D3  1D03               	skipz
 13825  17D4  2FF5               	goto	l9736
 13826                           
 13827                           ;LED_B1.c: 155: LED->GO = 0;
 13828  17D5  0021               	movlb	1	; select bank1
 13829  17D6  0843               	movf	_LED^(0+128),w
 13830  17D7  0086               	movwf	6
 13831  17D8  3001               	movlw	1	; select bank2/3
 13832  17D9  0087               	movwf	7
 13833  17DA  1081               	bcf	1,1
 13834                           
 13835                           ;LED_B1.c: 156: LED->Time = 0;
 13836  17DB  0A43               	incf	_LED^(0+128),w
 13837  17DC  0086               	movwf	6
 13838  17DD  3001               	movlw	1	; select bank2/3
 13839  17DE  0087               	movwf	7
 13840  17DF  3000               	movlw	0
 13841  17E0  3FC0               	movwi [0]fsr1
 13842  17E1  3FC1               	movwi [1]fsr1
 13843                           
 13844                           ;LED_B1.c: 158: if (led == 1) {
 13845  17E2  0875               	movf	setLED@led,w
 13846  17E3  3A01               	xorlw	1
 13847  17E4  1D03               	skipz
 13848  17E5  2FE9               	goto	l9728
 13849                           
 13850                           ;LED_B1.c: 162: RA3 = 1;
 13851  17E6  0020               	movlb	0	; select bank0
 13852  17E7  158C               	bsf	12,3	;volatile
 13853                           
 13854                           ;LED_B1.c: 164: }
 13855  17E8  2FEF               	goto	l9732
 13856  17E9                     l9728:	
 13857                           
 13858                           ;LED_B1.c: 167: else if (led == 2) {
 13859  17E9  0875               	movf	setLED@led,w
 13860  17EA  3A02               	xorlw	2
 13861  17EB  1D03               	skipz
 13862  17EC  2FEF               	goto	l9732
 13863                           
 13864                           ;LED_B1.c: 171: RC7 = 1;
 13865  17ED  0020               	movlb	0	; select bank0
 13866  17EE  178E               	bsf	14,7	;volatile
 13867  17EF                     l9732:	
 13868                           
 13869                           ;LED_B1.c: 173: }
 13870                           ;LED_B1.c: 185: if (led == 99) {
 13871  17EF  0875               	movf	setLED@led,w
 13872  17F0  3A63               	xorlw	99
 13873  17F1  1D03               	skipz
 13874  17F2  2FF5               	goto	l9736
 13875                           
 13876                           ;LED_B1.c: 189: RB5 = 1;
 13877  17F3  0020               	movlb	0	; select bank0
 13878  17F4  168D               	bsf	13,5	;volatile
 13879  17F5                     l9736:	
 13880                           
 13881                           ;LED_B1.c: 191: }
 13882                           ;LED_B1.c: 193: }
 13883                           ;LED_B1.c: 194: if (command == 11) {
 13884  17F5  0874               	movf	setLED@command,w
 13885  17F6  3A0B               	xorlw	11
 13886  17F7  1D03               	skipz
 13887  17F8  0008               	return
 13888                           
 13889                           ;LED_B1.c: 195: LED->GO = 1;
 13890  17F9  0021               	movlb	1	; select bank1
 13891  17FA  0843               	movf	_LED^(0+128),w
 13892  17FB  0086               	movwf	6
 13893  17FC  3001               	movlw	1	; select bank2/3
 13894  17FD  0087               	movwf	7
 13895  17FE  1481               	bsf	1,1
 13896  17FF  0008               	return
 13897  1800                     __end_of_setLED:	
 13898                           
 13899                           	psect	text90
 13900  1F28                     __ptext90:	
 13901 ;; *************** function _LedPointSelect *****************
 13902 ;; Defined at:
 13903 ;;		line 7 in file "../src/LED_B1.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;  led             1    wreg     unsigned char 
 13906 ;; Auto vars:     Size  Location     Type
 13907 ;;  led             1    3[COMMON] unsigned char 
 13908 ;; Return value:  Size  Location     Type
 13909 ;;		None               void
 13910 ;; Registers used:
 13911 ;;		wreg
 13912 ;; Tracked objects:
 13913 ;;		On entry : 0/0
 13914 ;;		On exit  : 0/0
 13915 ;;		Unchanged: 0/0
 13916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;Total ram usage:        2 bytes
 13922 ;; Hardware stack levels used:    1
 13923 ;; Hardware stack levels required when called:    3
 13924 ;; This function calls:
 13925 ;;		Nothing
 13926 ;; This function is called by:
 13927 ;;		_setLED_Initialization
 13928 ;;		_setLED
 13929 ;;		_setLED_Main
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           
 13934                           ;psect for function _LedPointSelect
 13935  1F28                     _LedPointSelect:	
 13936                           
 13937                           ;incstack = 0
 13938                           ; Regs used in _LedPointSelect: [wreg]
 13939                           ;LedPointSelect@led stored from wreg
 13940  1F28  00F3               	movwf	LedPointSelect@led
 13941                           
 13942                           ;LED_B1.c: 9: if (led == 1) {
 13943  1F29  0873               	movf	LedPointSelect@led,w
 13944  1F2A  3A01               	xorlw	1
 13945  1F2B  1D03               	skipz
 13946  1F2C  2F32               	goto	l1117
 13947                           
 13948                           ;LED_B1.c: 10: LED = &VarLED1;
 13949  1F2D  3068               	movlw	_VarLED1& (0+255)
 13950  1F2E  00F2               	movwf	??_LedPointSelect
 13951  1F2F  0872               	movf	??_LedPointSelect,w
 13952  1F30  0021               	movlb	1	; select bank1
 13953  1F31  00C3               	movwf	_LED^(0+128)
 13954  1F32                     l1117:	
 13955                           
 13956                           ;LED_B1.c: 11: }
 13957                           ;LED_B1.c: 14: if (led == 2) {
 13958  1F32  0873               	movf	LedPointSelect@led,w
 13959  1F33  3A02               	xorlw	2
 13960  1F34  1D03               	skipz
 13961  1F35  2F3B               	goto	l1118
 13962                           
 13963                           ;LED_B1.c: 15: LED = &VarLED2;
 13964  1F36  306C               	movlw	_VarLED2& (0+255)
 13965  1F37  00F2               	movwf	??_LedPointSelect
 13966  1F38  0872               	movf	??_LedPointSelect,w
 13967  1F39  0021               	movlb	1	; select bank1
 13968  1F3A  00C3               	movwf	_LED^(0+128)
 13969  1F3B                     l1118:	
 13970                           
 13971                           ;LED_B1.c: 16: }
 13972                           ;LED_B1.c: 24: if (led == 99) {
 13973  1F3B  0873               	movf	LedPointSelect@led,w
 13974  1F3C  3A63               	xorlw	99
 13975  1F3D  1D03               	skipz
 13976  1F3E  0008               	return
 13977                           
 13978                           ;LED_B1.c: 25: LED = &VarErrLED;
 13979  1F3F  3064               	movlw	_VarErrLED& (0+255)
 13980  1F40  00F2               	movwf	??_LedPointSelect
 13981  1F41  0872               	movf	??_LedPointSelect,w
 13982  1F42  0021               	movlb	1	; select bank1
 13983  1F43  00C3               	movwf	_LED^(0+128)
 13984  1F44  0008               	return
 13985  1F45                     __end_of_LedPointSelect:	
 13986                           
 13987                           	psect	text91
 13988  118B                     __ptext91:	
 13989 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 13990 ;; Defined at:
 13991 ;;		line 180 in file "../src/Dimmer_B1.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;  lights          1    wreg     unsigned char 
 13994 ;;  command         1    2[COMMON] unsigned char 
 13995 ;; Auto vars:     Size  Location     Type
 13996 ;;  lights          1    4[COMMON] unsigned char 
 13997 ;; Return value:  Size  Location     Type
 13998 ;;		None               void
 13999 ;; Registers used:
 14000 ;;		wreg, status,2, status,0
 14001 ;; Tracked objects:
 14002 ;;		On entry : 0/0
 14003 ;;		On exit  : 0/0
 14004 ;;		Unchanged: 0/0
 14005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14006 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14009 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14010 ;;Total ram usage:        3 bytes
 14011 ;; Hardware stack levels used:    1
 14012 ;; Hardware stack levels required when called:    3
 14013 ;; This function calls:
 14014 ;;		Nothing
 14015 ;; This function is called by:
 14016 ;;		_setDimmerLights_OnOff
 14017 ;;		_setRFSW_AdjControl
 14018 ;; This function uses a non-reentrant model
 14019 ;;
 14020                           
 14021                           
 14022                           ;psect for function _setDimmerIntr_Dimming_RF
 14023  118B                     _setDimmerIntr_Dimming_RF:	
 14024                           
 14025                           ;incstack = 0
 14026                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14027                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14028  118B  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14029                           
 14030                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14031  118C  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14032  118D  3A01               	xorlw	1
 14033  118E  1D03               	skipz
 14034  118F  29A0               	goto	l9376
 14035                           
 14036                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14037  1190  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14038  1191  3A01               	xorlw	1
 14039  1192  3000               	movlw	0
 14040  1193  1903               	skipnz
 14041  1194  3001               	movlw	1
 14042  1195  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14043  1196  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14044  1197  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14045  1198  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14046  1199  0021               	movlb	1	; select bank1
 14047  119A  085E               	movf	_DimmerIntr1^(0+128),w
 14048  119B  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14049  119C  39BF               	andlw	-65
 14050  119D  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14051  119E  00DE               	movwf	_DimmerIntr1^(0+128)
 14052                           
 14053                           ;Dimmer_B1.c: 184: }
 14054  119F  0008               	return
 14055  11A0                     l9376:	
 14056                           
 14057                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14058  11A0  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14059  11A1  3A02               	xorlw	2
 14060  11A2  1D03               	skipz
 14061  11A3  0008               	return
 14062                           
 14063                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14064  11A4  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14065  11A5  3A01               	xorlw	1
 14066  11A6  3000               	movlw	0
 14067  11A7  1903               	skipnz
 14068  11A8  3001               	movlw	1
 14069  11A9  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14070  11AA  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14071  11AB  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14072  11AC  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14073  11AD  0021               	movlb	1	; select bank1
 14074  11AE  0865               	movf	_DimmerIntr2^(0+128),w
 14075  11AF  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14076  11B0  39BF               	andlw	-65
 14077  11B1  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14078  11B2  00E5               	movwf	_DimmerIntr2^(0+128)
 14079  11B3  0008               	return
 14080  11B4                     __end_of_setDimmerIntr_Dimming_RF:	
 14081                           
 14082                           	psect	text92
 14083  1DC1                     __ptext92:	
 14084 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14085 ;; Defined at:
 14086 ;;		line 48 in file "../src/Dimmer_B1.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  lights          1    wreg     unsigned char 
 14089 ;;  value           1    2[COMMON] unsigned char 
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;  lights          1    4[COMMON] unsigned char 
 14092 ;; Return value:  Size  Location     Type
 14093 ;;		None               void
 14094 ;; Registers used:
 14095 ;;		wreg
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;Total ram usage:        3 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    3
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		_setDimmerLights_OnOff
 14112 ;; This function uses a non-reentrant model
 14113 ;;
 14114                           
 14115                           
 14116                           ;psect for function _setDimmerIntr_DimmingValue
 14117  1DC1                     _setDimmerIntr_DimmingValue:	
 14118                           
 14119                           ;incstack = 0
 14120                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14121                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14122  1DC1  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14123                           
 14124                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14125  1DC2  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14126  1DC3  3A01               	xorlw	1
 14127  1DC4  1D03               	skipz
 14128  1DC5  2DCC               	goto	l6898
 14129                           
 14130                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14131  1DC6  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14132  1DC7  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14133  1DC8  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14134  1DC9  0021               	movlb	1	; select bank1
 14135  1DCA  00E2               	movwf	(_DimmerIntr1^(0+128)+4)
 14136                           
 14137                           ;Dimmer_B1.c: 52: }
 14138  1DCB  0008               	return
 14139  1DCC                     l6898:	
 14140                           
 14141                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14142  1DCC  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14143  1DCD  3A02               	xorlw	2
 14144  1DCE  1D03               	skipz
 14145  1DCF  0008               	return
 14146                           
 14147                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14148  1DD0  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14149  1DD1  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14150  1DD2  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14151  1DD3  0021               	movlb	1	; select bank1
 14152  1DD4  00E9               	movwf	(_DimmerIntr2^(0+128)+4)
 14153  1DD5  0008               	return
 14154  1DD6                     __end_of_setDimmerIntr_DimmingValue:	
 14155                           
 14156                           	psect	text93
 14157  1162                     __ptext93:	
 14158 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14159 ;; Defined at:
 14160 ;;		line 30 in file "../src/Dimmer_B1.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;  lights          1    wreg     unsigned char 
 14163 ;;  command         1    2[COMMON] unsigned char 
 14164 ;; Auto vars:     Size  Location     Type
 14165 ;;  lights          1    4[COMMON] unsigned char 
 14166 ;; Return value:  Size  Location     Type
 14167 ;;		None               void
 14168 ;; Registers used:
 14169 ;;		wreg, status,2, status,0
 14170 ;; Tracked objects:
 14171 ;;		On entry : 0/0
 14172 ;;		On exit  : 0/0
 14173 ;;		Unchanged: 0/0
 14174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14175 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;Total ram usage:        3 bytes
 14180 ;; Hardware stack levels used:    1
 14181 ;; Hardware stack levels required when called:    3
 14182 ;; This function calls:
 14183 ;;		Nothing
 14184 ;; This function is called by:
 14185 ;;		_setDimmerLights_OnOff
 14186 ;; This function uses a non-reentrant model
 14187 ;;
 14188                           
 14189                           
 14190                           ;psect for function _setDimmerIntr_ControlStatus
 14191  1162                     _setDimmerIntr_ControlStatus:	
 14192                           
 14193                           ;incstack = 0
 14194                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14195                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14196  1162  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14197                           
 14198                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14199  1163  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14200  1164  3A01               	xorlw	1
 14201  1165  1D03               	skipz
 14202  1166  2977               	goto	l6890
 14203                           
 14204                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14205  1167  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14206  1168  3A01               	xorlw	1
 14207  1169  3000               	movlw	0
 14208  116A  1903               	skipnz
 14209  116B  3001               	movlw	1
 14210  116C  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14211  116D  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14212  116E  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14213  116F  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14214  1170  0021               	movlb	1	; select bank1
 14215  1171  085E               	movf	_DimmerIntr1^(0+128),w
 14216  1172  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14217  1173  39F7               	andlw	-9
 14218  1174  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14219  1175  00DE               	movwf	_DimmerIntr1^(0+128)
 14220                           
 14221                           ;Dimmer_B1.c: 34: }
 14222  1176  0008               	return
 14223  1177                     l6890:	
 14224                           
 14225                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14226  1177  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14227  1178  3A02               	xorlw	2
 14228  1179  1D03               	skipz
 14229  117A  0008               	return
 14230                           
 14231                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14232  117B  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14233  117C  3A01               	xorlw	1
 14234  117D  3000               	movlw	0
 14235  117E  1903               	skipnz
 14236  117F  3001               	movlw	1
 14237  1180  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14238  1181  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14239  1182  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14240  1183  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14241  1184  0021               	movlb	1	; select bank1
 14242  1185  0865               	movf	_DimmerIntr2^(0+128),w
 14243  1186  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14244  1187  39F7               	andlw	-9
 14245  1188  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14246  1189  00E5               	movwf	_DimmerIntr2^(0+128)
 14247  118A  0008               	return
 14248  118B                     __end_of_setDimmerIntr_ControlStatus:	
 14249                           
 14250                           	psect	text94
 14251  0963                     __ptext94:	
 14252 ;; *************** function _getDimmerLights_PercentToValue *****************
 14253 ;; Defined at:
 14254 ;;		line 1014 in file "../src/Dimmer_B1.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;  value           1    wreg     unsigned char 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;  value           1   54[BANK0 ] unsigned char 
 14259 ;;  i               3   55[BANK0 ] float 
 14260 ;; Return value:  Size  Location     Type
 14261 ;;                  1    wreg      unsigned char 
 14262 ;; Registers used:
 14263 ;;		wreg, status,2, status,0, pclath, cstack
 14264 ;; Tracked objects:
 14265 ;;		On entry : 0/0
 14266 ;;		On exit  : 0/0
 14267 ;;		Unchanged: 0/0
 14268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;Total ram usage:        6 bytes
 14274 ;; Hardware stack levels used:    1
 14275 ;; Hardware stack levels required when called:    5
 14276 ;; This function calls:
 14277 ;;		___awtoft
 14278 ;;		___ftadd
 14279 ;;		___ftdiv
 14280 ;;		___ftmul
 14281 ;;		___ftneg
 14282 ;;		___fttol
 14283 ;; This function is called by:
 14284 ;;		_setDimmerLights_OnOff
 14285 ;;		_setRFSW_AdjControl
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289                           
 14290                           ;psect for function _getDimmerLights_PercentToValue
 14291  0963                     _getDimmerLights_PercentToValue:	
 14292                           
 14293                           ;incstack = 0
 14294                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14295                           ;getDimmerLights_PercentToValue@value stored from wreg
 14296  0963  0020               	movlb	0	; select bank0
 14297  0964  00D6               	movwf	getDimmerLights_PercentToValue@value
 14298                           
 14299                           ;Dimmer_B1.c: 1022: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14300  0965  3000               	movlw	0
 14301  0966  00D7               	movwf	getDimmerLights_PercentToValue@i
 14302  0967  3010               	movlw	16
 14303  0968  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14304  0969  3042               	movlw	66
 14305  096A  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14306                           
 14307                           ;Dimmer_B1.c: 1023: i /= 100;
 14308  096B  3000               	movlw	0
 14309  096C  00A6               	movwf	___ftdiv@f2
 14310  096D  30C8               	movlw	200
 14311  096E  00A7               	movwf	___ftdiv@f2+1
 14312  096F  3042               	movlw	66
 14313  0970  00A8               	movwf	___ftdiv@f2+2
 14314  0971  0857               	movf	getDimmerLights_PercentToValue@i,w
 14315  0972  00A9               	movwf	___ftdiv@f1
 14316  0973  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14317  0974  00AA               	movwf	___ftdiv@f1+1
 14318  0975  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14319  0976  00AB               	movwf	___ftdiv@f1+2
 14320  0977  318D  25F1  3189   	fcall	___ftdiv
 14321  097A  0020               	movlb	0	; select bank0
 14322  097B  0826               	movf	?___ftdiv,w
 14323  097C  00D7               	movwf	getDimmerLights_PercentToValue@i
 14324  097D  0827               	movf	?___ftdiv+1,w
 14325  097E  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14326  097F  0828               	movf	?___ftdiv+2,w
 14327  0980  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14328                           
 14329                           ;Dimmer_B1.c: 1025: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14330  0981  0856               	movf	getDimmerLights_PercentToValue@value,w
 14331  0982  00D4               	movwf	??_getDimmerLights_PercentToValue
 14332  0983  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14333  0984  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14334  0985  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14335  0986  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14336  0987  1903               	skipnz
 14337  0988  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14338  0989  0854               	movf	??_getDimmerLights_PercentToValue,w
 14339  098A  3E64               	addlw	100
 14340  098B  00A0               	movwf	___awtoft@c
 14341  098C  3000               	movlw	0
 14342  098D  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14343  098E  00A1               	movwf	___awtoft@c+1
 14344  098F  3190  208A  3189   	fcall	___awtoft
 14345  0992  0020               	movlb	0	; select bank0
 14346  0993  0820               	movf	?___awtoft,w
 14347  0994  00A9               	movwf	___ftmul@f2
 14348  0995  0821               	movf	?___awtoft+1,w
 14349  0996  00AA               	movwf	___ftmul@f2+1
 14350  0997  0822               	movf	?___awtoft+2,w
 14351  0998  00AB               	movwf	___ftmul@f2+2
 14352  0999  0857               	movf	getDimmerLights_PercentToValue@i,w
 14353  099A  00A6               	movwf	___ftmul@f1
 14354  099B  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14355  099C  00A7               	movwf	___ftmul@f1+1
 14356  099D  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14357  099E  00A8               	movwf	___ftmul@f1+2
 14358  099F  3186  26CC  3189   	fcall	___ftmul
 14359  09A2  0020               	movlb	0	; select bank0
 14360  09A3  0826               	movf	?___ftmul,w
 14361  09A4  00B6               	movwf	___ftneg@f1
 14362  09A5  0827               	movf	?___ftmul+1,w
 14363  09A6  00B7               	movwf	___ftneg@f1+1
 14364  09A7  0828               	movf	?___ftmul+2,w
 14365  09A8  00B8               	movwf	___ftneg@f1+2
 14366  09A9  319B  237E  3189   	fcall	___ftneg
 14367  09AC  0020               	movlb	0	; select bank0
 14368  09AD  0836               	movf	?___ftneg,w
 14369  09AE  00BC               	movwf	___ftadd@f2
 14370  09AF  0837               	movf	?___ftneg+1,w
 14371  09B0  00BD               	movwf	___ftadd@f2+1
 14372  09B1  0838               	movf	?___ftneg+2,w
 14373  09B2  00BE               	movwf	___ftadd@f2+2
 14374  09B3  3000               	movlw	0
 14375  09B4  00B9               	movwf	___ftadd@f1
 14376  09B5  3050               	movlw	80
 14377  09B6  00BA               	movwf	___ftadd@f1+1
 14378  09B7  3042               	movlw	66
 14379  09B8  00BB               	movwf	___ftadd@f1+2
 14380  09B9  3183  235E  3189   	fcall	___ftadd
 14381  09BC  0020               	movlb	0	; select bank0
 14382  09BD  0839               	movf	?___ftadd,w
 14383  09BE  00C6               	movwf	___fttol@f1
 14384  09BF  083A               	movf	?___ftadd+1,w
 14385  09C0  00C7               	movwf	___fttol@f1+1
 14386  09C1  083B               	movf	?___ftadd+2,w
 14387  09C2  00C8               	movwf	___fttol@f1+2
 14388  09C3  318C  24DC         	fcall	___fttol
 14389  09C5  0020               	movlb	0	; select bank0
 14390  09C6  0846               	movf	?___fttol,w
 14391  09C7  0008               	return
 14392  09C8                     __end_of_getDimmerLights_PercentToValue:	
 14393                           
 14394                           	psect	text95
 14395  06CC                     __ptext95:	
 14396 ;; *************** function ___ftmul *****************
 14397 ;; Defined at:
 14398 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;  f1              3    6[BANK0 ] float 
 14401 ;;  f2              3    9[BANK0 ] float 
 14402 ;; Auto vars:     Size  Location     Type
 14403 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14404 ;;  sign            1   21[BANK0 ] unsigned char 
 14405 ;;  cntr            1   20[BANK0 ] unsigned char 
 14406 ;;  exp             1   16[BANK0 ] unsigned char 
 14407 ;; Return value:  Size  Location     Type
 14408 ;;                  3    6[BANK0 ] float 
 14409 ;; Registers used:
 14410 ;;		wreg, status,2, status,0, pclath, cstack
 14411 ;; Tracked objects:
 14412 ;;		On entry : 0/0
 14413 ;;		On exit  : 0/0
 14414 ;;		Unchanged: 0/0
 14415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14416 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14418 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14419 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;Total ram usage:       16 bytes
 14421 ;; Hardware stack levels used:    1
 14422 ;; Hardware stack levels required when called:    4
 14423 ;; This function calls:
 14424 ;;		___ftpack
 14425 ;; This function is called by:
 14426 ;;		_getDimmerLights_PercentToValue
 14427 ;; This function uses a non-reentrant model
 14428 ;;
 14429                           
 14430                           
 14431                           ;psect for function ___ftmul
 14432  06CC                     ___ftmul:	
 14433                           
 14434                           ;incstack = 0
 14435                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14436  06CC  0020               	movlb	0	; select bank0
 14437  06CD  0826               	movf	___ftmul@f1,w
 14438  06CE  00AC               	movwf	??___ftmul
 14439  06CF  0827               	movf	___ftmul@f1+1,w
 14440  06D0  00AD               	movwf	??___ftmul+1
 14441  06D1  0828               	movf	___ftmul@f1+2,w
 14442  06D2  00AE               	movwf	??___ftmul+2
 14443  06D3  1003               	clrc
 14444  06D4  0D2D               	rlf	??___ftmul+1,w
 14445  06D5  0D2E               	rlf	??___ftmul+2,w
 14446  06D6  00AF               	movwf	??___ftmul+3
 14447  06D7  082F               	movf	??___ftmul+3,w
 14448  06D8  00B0               	movwf	___ftmul@exp
 14449  06D9  08B0               	movf	___ftmul@exp,f
 14450  06DA  1D03               	skipz
 14451  06DB  2EE3               	goto	l9182
 14452  06DC  3000               	movlw	0
 14453  06DD  00A6               	movwf	?___ftmul
 14454  06DE  3000               	movlw	0
 14455  06DF  00A7               	movwf	?___ftmul+1
 14456  06E0  3000               	movlw	0
 14457  06E1  00A8               	movwf	?___ftmul+2
 14458  06E2  0008               	return
 14459  06E3                     l9182:	
 14460  06E3  0829               	movf	___ftmul@f2,w
 14461  06E4  00AC               	movwf	??___ftmul
 14462  06E5  082A               	movf	___ftmul@f2+1,w
 14463  06E6  00AD               	movwf	??___ftmul+1
 14464  06E7  082B               	movf	___ftmul@f2+2,w
 14465  06E8  00AE               	movwf	??___ftmul+2
 14466  06E9  1003               	clrc
 14467  06EA  0D2D               	rlf	??___ftmul+1,w
 14468  06EB  0D2E               	rlf	??___ftmul+2,w
 14469  06EC  00AF               	movwf	??___ftmul+3
 14470  06ED  082F               	movf	??___ftmul+3,w
 14471  06EE  00B5               	movwf	___ftmul@sign
 14472  06EF  08B5               	movf	___ftmul@sign,f
 14473  06F0  1D03               	skipz
 14474  06F1  2EF9               	goto	l9188
 14475  06F2  3000               	movlw	0
 14476  06F3  00A6               	movwf	?___ftmul
 14477  06F4  3000               	movlw	0
 14478  06F5  00A7               	movwf	?___ftmul+1
 14479  06F6  3000               	movlw	0
 14480  06F7  00A8               	movwf	?___ftmul+2
 14481  06F8  0008               	return
 14482  06F9                     l9188:	
 14483  06F9  0835               	movf	___ftmul@sign,w
 14484  06FA  3E7B               	addlw	123
 14485  06FB  00AC               	movwf	??___ftmul
 14486  06FC  082C               	movf	??___ftmul,w
 14487  06FD  07B0               	addwf	___ftmul@exp,f
 14488  06FE  0826               	movf	___ftmul@f1,w
 14489  06FF  00AC               	movwf	??___ftmul
 14490  0700  0827               	movf	___ftmul@f1+1,w
 14491  0701  00AD               	movwf	??___ftmul+1
 14492  0702  0828               	movf	___ftmul@f1+2,w
 14493  0703  00AE               	movwf	??___ftmul+2
 14494  0704  3010               	movlw	16
 14495  0705                     u10645:	
 14496  0705  36AE               	lsrf	??___ftmul+2,f
 14497  0706  0CAD               	rrf	??___ftmul+1,f
 14498  0707  0CAC               	rrf	??___ftmul,f
 14499  0708  0B89               	decfsz	9,f
 14500  0709  2F05               	goto	u10645
 14501  070A  082C               	movf	??___ftmul,w
 14502  070B  00AF               	movwf	??___ftmul+3
 14503  070C  082F               	movf	??___ftmul+3,w
 14504  070D  00B5               	movwf	___ftmul@sign
 14505  070E  0829               	movf	___ftmul@f2,w
 14506  070F  00AC               	movwf	??___ftmul
 14507  0710  082A               	movf	___ftmul@f2+1,w
 14508  0711  00AD               	movwf	??___ftmul+1
 14509  0712  082B               	movf	___ftmul@f2+2,w
 14510  0713  00AE               	movwf	??___ftmul+2
 14511  0714  3010               	movlw	16
 14512  0715                     u10655:	
 14513  0715  36AE               	lsrf	??___ftmul+2,f
 14514  0716  0CAD               	rrf	??___ftmul+1,f
 14515  0717  0CAC               	rrf	??___ftmul,f
 14516  0718  0B89               	decfsz	9,f
 14517  0719  2F15               	goto	u10655
 14518  071A  082C               	movf	??___ftmul,w
 14519  071B  00AF               	movwf	??___ftmul+3
 14520  071C  082F               	movf	??___ftmul+3,w
 14521  071D  06B5               	xorwf	___ftmul@sign,f
 14522  071E  3080               	movlw	128
 14523  071F  00AC               	movwf	??___ftmul
 14524  0720  082C               	movf	??___ftmul,w
 14525  0721  05B5               	andwf	___ftmul@sign,f
 14526  0722  17A7               	bsf	___ftmul@f1+1,7
 14527  0723  17AA               	bsf	___ftmul@f2+1,7
 14528  0724  30FF               	movlw	255
 14529  0725  05A9               	andwf	___ftmul@f2,f
 14530  0726  30FF               	movlw	255
 14531  0727  05AA               	andwf	___ftmul@f2+1,f
 14532  0728  3000               	movlw	0
 14533  0729  05AB               	andwf	___ftmul@f2+2,f
 14534  072A  3000               	movlw	0
 14535  072B  00B1               	movwf	___ftmul@f3_as_product
 14536  072C  3000               	movlw	0
 14537  072D  00B2               	movwf	___ftmul@f3_as_product+1
 14538  072E  3000               	movlw	0
 14539  072F  00B3               	movwf	___ftmul@f3_as_product+2
 14540  0730  3007               	movlw	7
 14541  0731  00AC               	movwf	??___ftmul
 14542  0732  082C               	movf	??___ftmul,w
 14543  0733  00B4               	movwf	___ftmul@cntr
 14544  0734                     l9200:	
 14545  0734  1C26               	btfss	___ftmul@f1,0
 14546  0735  2F3C               	goto	l9204
 14547  0736  0829               	movf	___ftmul@f2,w
 14548  0737  07B1               	addwf	___ftmul@f3_as_product,f
 14549  0738  082A               	movf	___ftmul@f2+1,w
 14550  0739  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14551  073A  082B               	movf	___ftmul@f2+2,w
 14552  073B  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14553  073C                     l9204:	
 14554  073C  3001               	movlw	1
 14555  073D                     u10675:	
 14556  073D  36A8               	lsrf	___ftmul@f1+2,f
 14557  073E  0CA7               	rrf	___ftmul@f1+1,f
 14558  073F  0CA6               	rrf	___ftmul@f1,f
 14559  0740  0B89               	decfsz	9,f
 14560  0741  2F3D               	goto	u10675
 14561  0742  3001               	movlw	1
 14562  0743                     u10685:	
 14563  0743  35A9               	lslf	___ftmul@f2,f
 14564  0744  0DAA               	rlf	___ftmul@f2+1,f
 14565  0745  0DAB               	rlf	___ftmul@f2+2,f
 14566  0746  0B89               	decfsz	9,f
 14567  0747  2F43               	goto	u10685
 14568  0748  3001               	movlw	1
 14569  0749  02B4               	subwf	___ftmul@cntr,f
 14570  074A  1D03               	btfss	3,2
 14571  074B  2F34               	goto	l9200
 14572  074C  3009               	movlw	9
 14573  074D  00AC               	movwf	??___ftmul
 14574  074E  082C               	movf	??___ftmul,w
 14575  074F  00B4               	movwf	___ftmul@cntr
 14576  0750                     l9212:	
 14577  0750  1C26               	btfss	___ftmul@f1,0
 14578  0751  2F58               	goto	l9216
 14579  0752  0829               	movf	___ftmul@f2,w
 14580  0753  07B1               	addwf	___ftmul@f3_as_product,f
 14581  0754  082A               	movf	___ftmul@f2+1,w
 14582  0755  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14583  0756  082B               	movf	___ftmul@f2+2,w
 14584  0757  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14585  0758                     l9216:	
 14586  0758  3001               	movlw	1
 14587  0759                     u10715:	
 14588  0759  36A8               	lsrf	___ftmul@f1+2,f
 14589  075A  0CA7               	rrf	___ftmul@f1+1,f
 14590  075B  0CA6               	rrf	___ftmul@f1,f
 14591  075C  0B89               	decfsz	9,f
 14592  075D  2F59               	goto	u10715
 14593  075E  3001               	movlw	1
 14594  075F                     u10725:	
 14595  075F  36B3               	lsrf	___ftmul@f3_as_product+2,f
 14596  0760  0CB2               	rrf	___ftmul@f3_as_product+1,f
 14597  0761  0CB1               	rrf	___ftmul@f3_as_product,f
 14598  0762  0B89               	decfsz	9,f
 14599  0763  2F5F               	goto	u10725
 14600  0764  3001               	movlw	1
 14601  0765  02B4               	subwf	___ftmul@cntr,f
 14602  0766  1D03               	btfss	3,2
 14603  0767  2F50               	goto	l9212
 14604  0768  0831               	movf	___ftmul@f3_as_product,w
 14605  0769  00F2               	movwf	___ftpack@arg
 14606  076A  0832               	movf	___ftmul@f3_as_product+1,w
 14607  076B  00F3               	movwf	___ftpack@arg+1
 14608  076C  0833               	movf	___ftmul@f3_as_product+2,w
 14609  076D  00F4               	movwf	___ftpack@arg+2
 14610  076E  0830               	movf	___ftmul@exp,w
 14611  076F  00AC               	movwf	??___ftmul
 14612  0770  082C               	movf	??___ftmul,w
 14613  0771  00F5               	movwf	___ftpack@exp
 14614  0772  0835               	movf	___ftmul@sign,w
 14615  0773  00AD               	movwf	??___ftmul+1
 14616  0774  082D               	movf	??___ftmul+1,w
 14617  0775  00F6               	movwf	___ftpack@sign
 14618  0776  3188  203D         	fcall	___ftpack
 14619  0778  0872               	movf	?___ftpack,w
 14620  0779  0020               	movlb	0	; select bank0
 14621  077A  00A6               	movwf	?___ftmul
 14622  077B  0873               	movf	?___ftpack+1,w
 14623  077C  00A7               	movwf	?___ftmul+1
 14624  077D  0874               	movf	?___ftpack+2,w
 14625  077E  00A8               	movwf	?___ftmul+2
 14626  077F  0008               	return
 14627  0780                     __end_of___ftmul:	
 14628                           
 14629                           	psect	text96
 14630  14F1                     __ptext96:	
 14631 ;; *************** function _setDimmerLights_Dimming *****************
 14632 ;; Defined at:
 14633 ;;		line 852 in file "../src/Dimmer_B1.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  lights          1    wreg     unsigned char 
 14636 ;;  status          1   67[BANK0 ] unsigned char 
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;  lights          1   69[BANK0 ] unsigned char 
 14639 ;; Return value:  Size  Location     Type
 14640 ;;		None               void
 14641 ;; Registers used:
 14642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14648 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14652 ;;Total ram usage:        3 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:    6
 14655 ;; This function calls:
 14656 ;;		_getDimmerIntr_DimmingValue
 14657 ;;		_getDimmerLights_ValueToPercent
 14658 ;;		_setBuz
 14659 ;;		_setDimmerIntr_Dimming_Sw
 14660 ;;		_setDimmerIntr_MaxmumValue
 14661 ;;		_setDimmerLights_Line
 14662 ;;		_setProductData
 14663 ;;		_setRF_DimmerLights
 14664 ;;		_setRF_TransceiveGO
 14665 ;;		_setTxData
 14666 ;; This function is called by:
 14667 ;;		_setDimmerLights_Main
 14668 ;; This function uses a non-reentrant model
 14669 ;;
 14670                           
 14671                           
 14672                           ;psect for function _setDimmerLights_Dimming
 14673  14F1                     _setDimmerLights_Dimming:	
 14674                           
 14675                           ;incstack = 0
 14676                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14677                           ;setDimmerLights_Dimming@lights stored from wreg
 14678  14F1  0020               	movlb	0	; select bank0
 14679  14F2  00E5               	movwf	setDimmerLights_Dimming@lights
 14680                           
 14681                           ;Dimmer_B1.c: 853: if (status == 1) {
 14682  14F3  0863               	movf	setDimmerLights_Dimming@status,w
 14683  14F4  3A01               	xorlw	1
 14684  14F5  1D03               	skipz
 14685  14F6  2D0A               	goto	l9958
 14686                           
 14687                           ;Dimmer_B1.c: 854: setDimmerIntr_Dimming_Sw(lights, 1);
 14688  14F7  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14689  14F8  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 14690  14F9  0865               	movf	setDimmerLights_Dimming@lights,w
 14691  14FA  3190  20F1  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14692                           
 14693                           ;Dimmer_B1.c: 857: setRF_TransceiveGO(0);
 14694  14FD  3000               	movlw	0
 14695  14FE  319C  24A8  3194   	fcall	_setRF_TransceiveGO
 14696                           
 14697                           ;Dimmer_B1.c: 859: setBuz(1, 100);
 14698  1501  3064               	movlw	100
 14699  1502  0020               	movlb	0	; select bank0
 14700  1503  00A4               	movwf	setBuz@time
 14701  1504  3000               	movlw	0
 14702  1505  00A5               	movwf	setBuz@time+1
 14703  1506  3001               	movlw	1
 14704  1507  3195  25E6         	fcall	_setBuz
 14705                           
 14706                           ;Dimmer_B1.c: 860: } else if (status == 0) {
 14707  1509  0008               	return
 14708  150A                     l9958:	
 14709  150A  0020               	movlb	0	; select bank0
 14710  150B  08E3               	movf	setDimmerLights_Dimming@status,f
 14711  150C  1D03               	skipz
 14712  150D  0008               	return
 14713                           
 14714                           ;Dimmer_B1.c: 861: setDimmerIntr_Dimming_Sw(lights, 0);
 14715  150E  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14716  150F  0865               	movf	setDimmerLights_Dimming@lights,w
 14717  1510  3190  20F1  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14718                           
 14719                           ;Dimmer_B1.c: 864: Dimmer.Load_Status = 0;
 14720  1513  0022               	movlb	2	; select bank2
 14721  1514  112E               	bcf	_Dimmer^(0+256),2	;volatile
 14722                           
 14723                           ;Dimmer_B1.c: 865: setDimmerLights_Line(lights);
 14724  1515  0020               	movlb	0	; select bank0
 14725  1516  0865               	movf	setDimmerLights_Dimming@lights,w
 14726  1517  319D  254B  3194   	fcall	_setDimmerLights_Line
 14727                           
 14728                           ;Dimmer_B1.c: 868: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 14729  151A  0020               	movlb	0	; select bank0
 14730  151B  0865               	movf	setDimmerLights_Dimming@lights,w
 14731  151C  319D  256F  3194   	fcall	_getDimmerIntr_DimmingValue
 14732  151F  0020               	movlb	0	; select bank0
 14733  1520  00E4               	movwf	??_setDimmerLights_Dimming
 14734  1521  0864               	movf	??_setDimmerLights_Dimming,w
 14735  1522  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14736  1523  0865               	movf	setDimmerLights_Dimming@lights,w
 14737  1524  319E  2640  3194   	fcall	_setDimmerIntr_MaxmumValue
 14738                           
 14739                           ;Dimmer_B1.c: 869: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 14740  1527  0020               	movlb	0	; select bank0
 14741  1528  0865               	movf	setDimmerLights_Dimming@lights,w
 14742  1529  319D  256F  3194   	fcall	_getDimmerIntr_DimmingValue
 14743  152C  3188  20FE  3194   	fcall	_getDimmerLights_ValueToPercent
 14744  152F  0020               	movlb	0	; select bank0
 14745  1530  00E4               	movwf	??_setDimmerLights_Dimming
 14746  1531  0864               	movf	??_setDimmerLights_Dimming,w
 14747  1532  00DA               	movwf	setProductData@value
 14748  1533  0865               	movf	setDimmerLights_Dimming@lights,w
 14749  1534  3E14               	addlw	20
 14750  1535  319C  2440  3194   	fcall	_setProductData
 14751                           
 14752                           ;Dimmer_B1.c: 879: setRF_DimmerLights(lights, 1);
 14753  1538  0020               	movlb	0	; select bank0
 14754  1539  01DE               	clrf	setRF_DimmerLights@on
 14755  153A  0ADE               	incf	setRF_DimmerLights@on,f
 14756  153B  0865               	movf	setDimmerLights_Dimming@lights,w
 14757  153C  3197  2742  3194   	fcall	_setRF_DimmerLights
 14758                           
 14759                           ;Dimmer_B1.c: 880: setTxData();
 14760  153F  318F  274C         	fcall	_setTxData
 14761  1541  0008               	return
 14762  1542                     __end_of_setDimmerLights_Dimming:	
 14763                           
 14764                           	psect	text97
 14765  0F4C                     __ptext97:	
 14766 ;; *************** function _setTxData *****************
 14767 ;; Defined at:
 14768 ;;		line 183 in file "../src/RF_Control_B1.c"
 14769 ;; Parameters:    Size  Location     Type
 14770 ;;		None
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  i               1    0        unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;		None               void
 14775 ;; Registers used:
 14776 ;;		wreg, fsr1l, fsr1h
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:        1 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    3
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_setDimmerLights_OnOff
 14793 ;;		_setDimmerLights_Dimming
 14794 ;;		_getRxData
 14795 ;;		_setControl_Lights_Table
 14796 ;;		_setRFSW_Control
 14797 ;;		_setRFSW_AdjControl
 14798 ;; This function uses a non-reentrant model
 14799 ;;
 14800                           
 14801                           
 14802                           ;psect for function _setTxData
 14803  0F4C                     _setTxData:	
 14804                           
 14805                           ;RF_Control_B1.c: 184: char i;
 14806                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 14807                           
 14808                           ;incstack = 0
 14809                           ; Regs used in _setTxData: [wregfsr1]
 14810  0F4C  0021               	movlb	1	; select bank1
 14811  0F4D  1C20               	btfss	_RF1^(0+128),0
 14812  0F4E  0008               	return
 14813                           
 14814                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 14815  0F4F  1520               	bsf	_RF1^(0+128),2
 14816                           
 14817                           ;RF_Control_B1.c: 199: RF_Data[0] = 0x63;
 14818  0F50  3063               	movlw	99
 14819  0F51  00F2               	movwf	??_setTxData
 14820  0F52  0872               	movf	??_setTxData,w
 14821  0F53  0023               	movlb	3	; select bank3
 14822  0F54  00A0               	movwf	_RF_Data^(0+384)
 14823                           
 14824                           ;RF_Control_B1.c: 200: RF_Data[1] = 0x02;
 14825  0F55  3002               	movlw	2
 14826  0F56  00F2               	movwf	??_setTxData
 14827  0F57  0872               	movf	??_setTxData,w
 14828  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 14829                           
 14830                           ;RF_Control_B1.c: 202: RF_Data[2] = product->Data[2];
 14831  0F59  0020               	movlb	0	; select bank0
 14832  0F5A  086F               	movf	_product,w
 14833  0F5B  0086               	movwf	6
 14834  0F5C  3002               	movlw	2	; select bank4/5
 14835  0F5D  0087               	movwf	7
 14836  0F5E  3002               	movlw	2	; select bank4/5
 14837  0F5F  3F42               	moviw [2]fsr1
 14838  0F60  0023               	movlb	3	; select bank3
 14839  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 14840                           
 14841                           ;RF_Control_B1.c: 203: RF_Data[3] = product->Data[3];
 14842  0F62  0020               	movlb	0	; select bank0
 14843  0F63  086F               	movf	_product,w
 14844  0F64  0086               	movwf	6
 14845  0F65  3002               	movlw	2	; select bank4/5
 14846  0F66  0087               	movwf	7
 14847  0F67  3002               	movlw	2	; select bank4/5
 14848  0F68  3F43               	moviw [3]fsr1
 14849  0F69  0023               	movlb	3	; select bank3
 14850  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 14851                           
 14852                           ;RF_Control_B1.c: 204: RF_Data[4] = product->Data[4];
 14853  0F6B  0020               	movlb	0	; select bank0
 14854  0F6C  086F               	movf	_product,w
 14855  0F6D  0086               	movwf	6
 14856  0F6E  3002               	movlw	2	; select bank4/5
 14857  0F6F  0087               	movwf	7
 14858  0F70  3002               	movlw	2	; select bank4/5
 14859  0F71  3F44               	moviw [4]fsr1
 14860  0F72  0023               	movlb	3	; select bank3
 14861  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 14862                           
 14863                           ;RF_Control_B1.c: 205: RF_Data[5] = product->Data[5];
 14864  0F74  0020               	movlb	0	; select bank0
 14865  0F75  086F               	movf	_product,w
 14866  0F76  0086               	movwf	6
 14867  0F77  3002               	movlw	2	; select bank4/5
 14868  0F78  0087               	movwf	7
 14869  0F79  3002               	movlw	2	; select bank4/5
 14870  0F7A  3F45               	moviw [5]fsr1
 14871  0F7B  0023               	movlb	3	; select bank3
 14872  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 14873                           
 14874                           ;RF_Control_B1.c: 206: RF_Data[6] = product->Data[6];
 14875  0F7D  0020               	movlb	0	; select bank0
 14876  0F7E  086F               	movf	_product,w
 14877  0F7F  0086               	movwf	6
 14878  0F80  3002               	movlw	2	; select bank4/5
 14879  0F81  0087               	movwf	7
 14880  0F82  3002               	movlw	2	; select bank4/5
 14881  0F83  3F46               	moviw [6]fsr1
 14882  0F84  0023               	movlb	3	; select bank3
 14883  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 14884                           
 14885                           ;RF_Control_B1.c: 207: RF_Data[7] = product->Data[7];
 14886  0F86  0020               	movlb	0	; select bank0
 14887  0F87  086F               	movf	_product,w
 14888  0F88  0086               	movwf	6
 14889  0F89  3002               	movlw	2	; select bank4/5
 14890  0F8A  0087               	movwf	7
 14891  0F8B  3002               	movlw	2	; select bank4/5
 14892  0F8C  3F47               	moviw [7]fsr1
 14893  0F8D  0023               	movlb	3	; select bank3
 14894  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 14895                           
 14896                           ;RF_Control_B1.c: 208: RF_Data[8] = product->Data[8];
 14897  0F8F  0020               	movlb	0	; select bank0
 14898  0F90  086F               	movf	_product,w
 14899  0F91  0086               	movwf	6
 14900  0F92  3002               	movlw	2	; select bank4/5
 14901  0F93  0087               	movwf	7
 14902  0F94  3002               	movlw	2	; select bank4/5
 14903  0F95  3F48               	moviw [8]fsr1
 14904  0F96  0023               	movlb	3	; select bank3
 14905  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 14906                           
 14907                           ;RF_Control_B1.c: 209: RF_Data[9] = product->Data[9];
 14908  0F98  0020               	movlb	0	; select bank0
 14909  0F99  086F               	movf	_product,w
 14910  0F9A  0086               	movwf	6
 14911  0F9B  3002               	movlw	2	; select bank4/5
 14912  0F9C  0087               	movwf	7
 14913  0F9D  3002               	movlw	2	; select bank4/5
 14914  0F9E  3F49               	moviw [9]fsr1
 14915  0F9F  0023               	movlb	3	; select bank3
 14916  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 14917                           
 14918                           ;RF_Control_B1.c: 210: RF_Data[10] = product->Data[10];
 14919  0FA1  0020               	movlb	0	; select bank0
 14920  0FA2  086F               	movf	_product,w
 14921  0FA3  0086               	movwf	6
 14922  0FA4  3002               	movlw	2	; select bank4/5
 14923  0FA5  0087               	movwf	7
 14924  0FA6  3002               	movlw	2	; select bank4/5
 14925  0FA7  3F4A               	moviw [10]fsr1
 14926  0FA8  0023               	movlb	3	; select bank3
 14927  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 14928                           
 14929                           ;RF_Control_B1.c: 211: RF_Data[11] = product->Data[11];
 14930  0FAA  0020               	movlb	0	; select bank0
 14931  0FAB  086F               	movf	_product,w
 14932  0FAC  0086               	movwf	6
 14933  0FAD  3002               	movlw	2	; select bank4/5
 14934  0FAE  0087               	movwf	7
 14935  0FAF  3002               	movlw	2	; select bank4/5
 14936  0FB0  3F4B               	moviw [11]fsr1
 14937  0FB1  0023               	movlb	3	; select bank3
 14938  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 14939                           
 14940                           ;RF_Control_B1.c: 212: RF_Data[12] = product->Data[12];
 14941  0FB3  0020               	movlb	0	; select bank0
 14942  0FB4  086F               	movf	_product,w
 14943  0FB5  0086               	movwf	6
 14944  0FB6  3002               	movlw	2	; select bank4/5
 14945  0FB7  0087               	movwf	7
 14946  0FB8  3002               	movlw	2	; select bank4/5
 14947  0FB9  3F4C               	moviw [12]fsr1
 14948  0FBA  0023               	movlb	3	; select bank3
 14949  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 14950                           
 14951                           ;RF_Control_B1.c: 213: RF_Data[13] = product->Data[13];
 14952  0FBC  0020               	movlb	0	; select bank0
 14953  0FBD  086F               	movf	_product,w
 14954  0FBE  0086               	movwf	6
 14955  0FBF  3002               	movlw	2	; select bank4/5
 14956  0FC0  0087               	movwf	7
 14957  0FC1  3002               	movlw	2	; select bank4/5
 14958  0FC2  3F4D               	moviw [13]fsr1
 14959  0FC3  0023               	movlb	3	; select bank3
 14960  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 14961                           
 14962                           ;RF_Control_B1.c: 214: RF_Data[14] = product->Data[14];
 14963  0FC5  0020               	movlb	0	; select bank0
 14964  0FC6  086F               	movf	_product,w
 14965  0FC7  0086               	movwf	6
 14966  0FC8  3002               	movlw	2	; select bank4/5
 14967  0FC9  0087               	movwf	7
 14968  0FCA  3002               	movlw	2	; select bank4/5
 14969  0FCB  3F4E               	moviw [14]fsr1
 14970  0FCC  0023               	movlb	3	; select bank3
 14971  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 14972                           
 14973                           ;RF_Control_B1.c: 215: RF_Data[15] = product->Data[15];
 14974  0FCE  0020               	movlb	0	; select bank0
 14975  0FCF  086F               	movf	_product,w
 14976  0FD0  0086               	movwf	6
 14977  0FD1  3002               	movlw	2	; select bank4/5
 14978  0FD2  0087               	movwf	7
 14979  0FD3  3002               	movlw	2	; select bank4/5
 14980  0FD4  3F4F               	moviw [15]fsr1
 14981  0FD5  0023               	movlb	3	; select bank3
 14982  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 14983                           
 14984                           ;RF_Control_B1.c: 216: RF_Data[16] = product->Data[16];
 14985  0FD7  0020               	movlb	0	; select bank0
 14986  0FD8  086F               	movf	_product,w
 14987  0FD9  0086               	movwf	6
 14988  0FDA  3002               	movlw	2	; select bank4/5
 14989  0FDB  0087               	movwf	7
 14990  0FDC  3002               	movlw	2	; select bank4/5
 14991  0FDD  3F50               	moviw [16]fsr1
 14992  0FDE  0023               	movlb	3	; select bank3
 14993  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 14994                           
 14995                           ;RF_Control_B1.c: 217: RF_Data[17] = product->Data[17];
 14996  0FE0  0020               	movlb	0	; select bank0
 14997  0FE1  086F               	movf	_product,w
 14998  0FE2  0086               	movwf	6
 14999  0FE3  3002               	movlw	2	; select bank4/5
 15000  0FE4  0087               	movwf	7
 15001  0FE5  3002               	movlw	2	; select bank4/5
 15002  0FE6  3F51               	moviw [17]fsr1
 15003  0FE7  0023               	movlb	3	; select bank3
 15004  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15005                           
 15006                           ;RF_Control_B1.c: 218: RF_Data[18] = product->Data[18];
 15007  0FE9  0020               	movlb	0	; select bank0
 15008  0FEA  086F               	movf	_product,w
 15009  0FEB  0086               	movwf	6
 15010  0FEC  3002               	movlw	2	; select bank4/5
 15011  0FED  0087               	movwf	7
 15012  0FEE  3002               	movlw	2	; select bank4/5
 15013  0FEF  3F52               	moviw [18]fsr1
 15014  0FF0  0023               	movlb	3	; select bank3
 15015  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15016                           
 15017                           ;RF_Control_B1.c: 219: RF_Data[19] = product->Data[19];
 15018  0FF2  0020               	movlb	0	; select bank0
 15019  0FF3  086F               	movf	_product,w
 15020  0FF4  0086               	movwf	6
 15021  0FF5  3002               	movlw	2	; select bank4/5
 15022  0FF6  0087               	movwf	7
 15023  0FF7  3002               	movlw	2	; select bank4/5
 15024  0FF8  3F53               	moviw [19]fsr1
 15025  0FF9  0023               	movlb	3	; select bank3
 15026  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15027                           
 15028                           ;RF_Control_B1.c: 220: RF_Data[20] = 210;
 15029  0FFB  30D2               	movlw	210
 15030  0FFC  00F2               	movwf	??_setTxData
 15031  0FFD  0872               	movf	??_setTxData,w
 15032  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15033  0FFF  0008               	return
 15034  1000                     __end_of_setTxData:	
 15035                           
 15036                           	psect	text98
 15037  1CA8                     __ptext98:	
 15038 ;; *************** function _setRF_TransceiveGO *****************
 15039 ;; Defined at:
 15040 ;;		line 472 in file "../src/RF_Control_B1.c"
 15041 ;; Parameters:    Size  Location     Type
 15042 ;;  command         1    wreg     unsigned char 
 15043 ;; Auto vars:     Size  Location     Type
 15044 ;;  command         1    3[COMMON] unsigned char 
 15045 ;; Return value:  Size  Location     Type
 15046 ;;		None               void
 15047 ;; Registers used:
 15048 ;;		wreg, status,2, status,0
 15049 ;; Tracked objects:
 15050 ;;		On entry : 0/0
 15051 ;;		On exit  : 0/0
 15052 ;;		Unchanged: 0/0
 15053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;Total ram usage:        2 bytes
 15059 ;; Hardware stack levels used:    1
 15060 ;; Hardware stack levels required when called:    3
 15061 ;; This function calls:
 15062 ;;		Nothing
 15063 ;; This function is called by:
 15064 ;;		_setDimmerLights_Dimming
 15065 ;; This function uses a non-reentrant model
 15066 ;;
 15067                           
 15068                           
 15069                           ;psect for function _setRF_TransceiveGO
 15070  1CA8                     _setRF_TransceiveGO:	
 15071                           
 15072                           ;incstack = 0
 15073                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15074                           ;setRF_TransceiveGO@command stored from wreg
 15075  1CA8  00F3               	movwf	setRF_TransceiveGO@command
 15076                           
 15077                           ;RF_Control_B1.c: 473: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15078  1CA9  0873               	movf	setRF_TransceiveGO@command,w
 15079  1CAA  3A01               	xorlw	1
 15080  1CAB  3000               	movlw	0
 15081  1CAC  1903               	skipnz
 15082  1CAD  3001               	movlw	1
 15083  1CAE  00F2               	movwf	??_setRF_TransceiveGO
 15084  1CAF  0DF2               	rlf	??_setRF_TransceiveGO,f
 15085  1CB0  0DF2               	rlf	??_setRF_TransceiveGO,f
 15086  1CB1  0021               	movlb	1	; select bank1
 15087  1CB2  0820               	movf	_RF1^(0+128),w
 15088  1CB3  0672               	xorwf	??_setRF_TransceiveGO,w
 15089  1CB4  39FB               	andlw	-5
 15090  1CB5  0672               	xorwf	??_setRF_TransceiveGO,w
 15091  1CB6  00A0               	movwf	_RF1^(0+128)
 15092  1CB7  0008               	return
 15093  1CB8                     __end_of_setRF_TransceiveGO:	
 15094                           
 15095                           	psect	text99
 15096  1742                     __ptext99:	
 15097 ;; *************** function _setRF_DimmerLights *****************
 15098 ;; Defined at:
 15099 ;;		line 455 in file "../src/RF_Control_B1.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  lights          1    wreg     unsigned char 
 15102 ;;  on              1   62[BANK0 ] unsigned char 
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;  lights          1   66[BANK0 ] unsigned char 
 15105 ;;  status          1   65[BANK0 ] unsigned char 
 15106 ;; Return value:  Size  Location     Type
 15107 ;;		None               void
 15108 ;; Registers used:
 15109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15110 ;; Tracked objects:
 15111 ;;		On entry : 0/0
 15112 ;;		On exit  : 0/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;Total ram usage:        5 bytes
 15120 ;; Hardware stack levels used:    1
 15121 ;; Hardware stack levels required when called:    4
 15122 ;; This function calls:
 15123 ;;		_setProductData
 15124 ;; This function is called by:
 15125 ;;		_setDimmerLights_OnOff
 15126 ;;		_setDimmerLights_Dimming
 15127 ;;		_setRFSW_Control
 15128 ;; This function uses a non-reentrant model
 15129 ;;
 15130                           
 15131                           
 15132                           ;psect for function _setRF_DimmerLights
 15133  1742                     _setRF_DimmerLights:	
 15134                           
 15135                           ;incstack = 0
 15136                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15137                           ;setRF_DimmerLights@lights stored from wreg
 15138  1742  0020               	movlb	0	; select bank0
 15139  1743  00E2               	movwf	setRF_DimmerLights@lights
 15140                           
 15141                           ;RF_Control_B1.c: 456: char status = 1;
 15142  1744  01E1               	clrf	setRF_DimmerLights@status
 15143  1745  0AE1               	incf	setRF_DimmerLights@status,f
 15144                           
 15145                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15146  1746  0862               	movf	setRF_DimmerLights@lights,w
 15147  1747  3EFF               	addlw	-1
 15148  1748  0A89               	incf	9,f
 15149  1749  2F4C               	goto	u11060
 15150  174A                     u11065:	
 15151  174A  1003               	clrc
 15152  174B  0DE1               	rlf	setRF_DimmerLights@status,f
 15153  174C                     u11060:	
 15154  174C  3EFF               	addlw	-1
 15155  174D  1D03               	skipz
 15156  174E  2F4A               	goto	u11065
 15157                           
 15158                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15159  174F  0862               	movf	setRF_DimmerLights@lights,w
 15160  1750  00DF               	movwf	??_setRF_DimmerLights
 15161  1751  085F               	movf	??_setRF_DimmerLights,w
 15162  1752  00DA               	movwf	setProductData@value
 15163  1753  300B               	movlw	11
 15164  1754  319C  2440  3197   	fcall	_setProductData
 15165                           
 15166                           ;RF_Control_B1.c: 461: setProductData(17, product->Data[26 + lights]);
 15167  1757  0020               	movlb	0	; select bank0
 15168  1758  0862               	movf	setRF_DimmerLights@lights,w
 15169  1759  3E1A               	addlw	26
 15170  175A  076F               	addwf	_product,w
 15171  175B  00DF               	movwf	??_setRF_DimmerLights
 15172  175C  085F               	movf	??_setRF_DimmerLights,w
 15173  175D  0086               	movwf	6
 15174  175E  3002               	movlw	2	; select bank4/5
 15175  175F  0087               	movwf	7
 15176  1760  0801               	movf	1,w
 15177  1761  00E0               	movwf	??_setRF_DimmerLights+1
 15178  1762  0860               	movf	??_setRF_DimmerLights+1,w
 15179  1763  00DA               	movwf	setProductData@value
 15180  1764  3011               	movlw	17
 15181  1765  319C  2440  3197   	fcall	_setProductData
 15182                           
 15183                           ;RF_Control_B1.c: 462: if (on == 1) {
 15184  1768  0020               	movlb	0	; select bank0
 15185  1769  085E               	movf	setRF_DimmerLights@on,w
 15186  176A  3A01               	xorlw	1
 15187  176B  1D03               	skipz
 15188  176C  2F8C               	goto	l9400
 15189                           
 15190                           ;RF_Control_B1.c: 463: setProductData(9, product->Data[20 + lights]);
 15191  176D  0862               	movf	setRF_DimmerLights@lights,w
 15192  176E  3E14               	addlw	20
 15193  176F  076F               	addwf	_product,w
 15194  1770  00DF               	movwf	??_setRF_DimmerLights
 15195  1771  085F               	movf	??_setRF_DimmerLights,w
 15196  1772  0086               	movwf	6
 15197  1773  3002               	movlw	2	; select bank4/5
 15198  1774  0087               	movwf	7
 15199  1775  0801               	movf	1,w
 15200  1776  00E0               	movwf	??_setRF_DimmerLights+1
 15201  1777  0860               	movf	??_setRF_DimmerLights+1,w
 15202  1778  00DA               	movwf	setProductData@value
 15203  1779  3009               	movlw	9
 15204  177A  319C  2440  3197   	fcall	_setProductData
 15205                           
 15206                           ;RF_Control_B1.c: 464: setProductData(15, (product->Data[15] | status));
 15207  177D  0020               	movlb	0	; select bank0
 15208  177E  086F               	movf	_product,w
 15209  177F  3E0F               	addlw	15
 15210  1780  0086               	movwf	6
 15211  1781  3002               	movlw	2	; select bank4/5
 15212  1782  0087               	movwf	7
 15213  1783  0801               	movf	1,w
 15214  1784  0461               	iorwf	setRF_DimmerLights@status,w
 15215  1785  00DF               	movwf	??_setRF_DimmerLights
 15216  1786  085F               	movf	??_setRF_DimmerLights,w
 15217  1787  00DA               	movwf	setProductData@value
 15218  1788  300F               	movlw	15
 15219  1789  319C  2440         	fcall	_setProductData
 15220                           
 15221                           ;RF_Control_B1.c: 465: } else {
 15222  178B  0008               	return
 15223  178C                     l9400:	
 15224                           
 15225                           ;RF_Control_B1.c: 466: setProductData(9, 0x00);
 15226  178C  0020               	movlb	0	; select bank0
 15227  178D  01DA               	clrf	setProductData@value
 15228  178E  3009               	movlw	9
 15229  178F  319C  2440  3197   	fcall	_setProductData
 15230                           
 15231                           ;RF_Control_B1.c: 467: setProductData(15, (product->Data[15]&(~status)));
 15232  1792  0020               	movlb	0	; select bank0
 15233  1793  086F               	movf	_product,w
 15234  1794  3E0F               	addlw	15
 15235  1795  0086               	movwf	6
 15236  1796  3002               	movlw	2	; select bank4/5
 15237  1797  0087               	movwf	7
 15238  1798  0961               	comf	setRF_DimmerLights@status,w
 15239  1799  0501               	andwf	1,w
 15240  179A  00DF               	movwf	??_setRF_DimmerLights
 15241  179B  085F               	movf	??_setRF_DimmerLights,w
 15242  179C  00DA               	movwf	setProductData@value
 15243  179D  300F               	movlw	15
 15244  179E  319C  2440         	fcall	_setProductData
 15245  17A0  0008               	return
 15246  17A1                     __end_of_setRF_DimmerLights:	
 15247                           
 15248                           	psect	text100
 15249  1D4B                     __ptext100:	
 15250 ;; *************** function _setDimmerLights_Line *****************
 15251 ;; Defined at:
 15252 ;;		line 924 in file "../src/Dimmer_B1.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  lights          1    wreg     unsigned char 
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;  lights          1    2[COMMON] unsigned char 
 15257 ;; Return value:  Size  Location     Type
 15258 ;;		None               void
 15259 ;; Registers used:
 15260 ;;		wreg
 15261 ;; Tracked objects:
 15262 ;;		On entry : 0/0
 15263 ;;		On exit  : 0/0
 15264 ;;		Unchanged: 0/0
 15265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;Total ram usage:        1 bytes
 15271 ;; Hardware stack levels used:    1
 15272 ;; Hardware stack levels required when called:    3
 15273 ;; This function calls:
 15274 ;;		Nothing
 15275 ;; This function is called by:
 15276 ;;		_setDimmerLights_OnOff
 15277 ;;		_setDimmerLights_Dimming
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           
 15282                           ;psect for function _setDimmerLights_Line
 15283  1D4B                     _setDimmerLights_Line:	
 15284                           
 15285                           ;incstack = 0
 15286                           ; Regs used in _setDimmerLights_Line: [wreg]
 15287                           ;setDimmerLights_Line@lights stored from wreg
 15288  1D4B  00F2               	movwf	setDimmerLights_Line@lights
 15289                           
 15290                           ;Dimmer_B1.c: 925: Dimmer.LoadGO = 1;
 15291  1D4C  0022               	movlb	2	; select bank2
 15292  1D4D  14AE               	bsf	_Dimmer^(0+256),1	;volatile
 15293                           
 15294                           ;Dimmer_B1.c: 927: DimmerLights1.Line = 0;
 15295  1D4E  0023               	movlb	3	; select bank3
 15296  1D4F  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 15297                           
 15298                           ;Dimmer_B1.c: 930: DimmerLights2.Line = 0;
 15299  1D50  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 15300                           
 15301                           ;Dimmer_B1.c: 936: if (lights == 1) {
 15302  1D51  0872               	movf	setDimmerLights_Line@lights,w
 15303  1D52  3A01               	xorlw	1
 15304  1D53  1D03               	skipz
 15305  1D54  2D57               	goto	l7008
 15306                           
 15307                           ;Dimmer_B1.c: 937: DimmerLights1.Line = 1;
 15308  1D55  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 15309                           
 15310                           ;Dimmer_B1.c: 938: }
 15311  1D56  0008               	return
 15312  1D57                     l7008:	
 15313                           
 15314                           ;Dimmer_B1.c: 941: else if (lights == 2) {
 15315  1D57  0872               	movf	setDimmerLights_Line@lights,w
 15316  1D58  3A02               	xorlw	2
 15317  1D59  1D03               	skipz
 15318  1D5A  0008               	return
 15319                           
 15320                           ;Dimmer_B1.c: 942: DimmerLights2.Line = 1;
 15321  1D5B  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 15322  1D5C  0008               	return
 15323  1D5D                     __end_of_setDimmerLights_Line:	
 15324                           
 15325                           	psect	text101
 15326  1E40                     __ptext101:	
 15327 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15328 ;; Defined at:
 15329 ;;		line 86 in file "../src/Dimmer_B1.c"
 15330 ;; Parameters:    Size  Location     Type
 15331 ;;  lights          1    wreg     unsigned char 
 15332 ;;  value           1   58[BANK0 ] unsigned char 
 15333 ;; Auto vars:     Size  Location     Type
 15334 ;;  lights          1   60[BANK0 ] unsigned char 
 15335 ;; Return value:  Size  Location     Type
 15336 ;;		None               void
 15337 ;; Registers used:
 15338 ;;		wreg
 15339 ;; Tracked objects:
 15340 ;;		On entry : 0/0
 15341 ;;		On exit  : 0/0
 15342 ;;		Unchanged: 0/0
 15343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15344 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;Total ram usage:        3 bytes
 15349 ;; Hardware stack levels used:    1
 15350 ;; Hardware stack levels required when called:    3
 15351 ;; This function calls:
 15352 ;;		Nothing
 15353 ;; This function is called by:
 15354 ;;		_setDimmerLights_OnOff
 15355 ;;		_setDimmerLights_Dimming
 15356 ;;		_setRFSW_AdjControl
 15357 ;; This function uses a non-reentrant model
 15358 ;;
 15359                           
 15360                           
 15361                           ;psect for function _setDimmerIntr_MaxmumValue
 15362  1E40                     _setDimmerIntr_MaxmumValue:	
 15363                           
 15364                           ;incstack = 0
 15365                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15366                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15367  1E40  0020               	movlb	0	; select bank0
 15368  1E41  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15369                           
 15370                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15371  1E42  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15372  1E43  3A01               	xorlw	1
 15373  1E44  1D03               	skipz
 15374  1E45  2E4C               	goto	l9368
 15375                           
 15376                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15377  1E46  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15378  1E47  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15379  1E48  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15380  1E49  0021               	movlb	1	; select bank1
 15381  1E4A  00E3               	movwf	(_DimmerIntr1^(0+128)+5)
 15382                           
 15383                           ;Dimmer_B1.c: 90: }
 15384  1E4B  0008               	return
 15385  1E4C                     l9368:	
 15386                           
 15387                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 15388  1E4C  0020               	movlb	0	; select bank0
 15389  1E4D  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15390  1E4E  3A02               	xorlw	2
 15391  1E4F  1D03               	skipz
 15392  1E50  0008               	return
 15393                           
 15394                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 15395  1E51  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15396  1E52  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15397  1E53  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15398  1E54  0021               	movlb	1	; select bank1
 15399  1E55  00EA               	movwf	(_DimmerIntr2^(0+128)+5)
 15400  1E56  0008               	return
 15401  1E57                     __end_of_setDimmerIntr_MaxmumValue:	
 15402                           
 15403                           	psect	text102
 15404  10F1                     __ptext102:	
 15405 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15406 ;; Defined at:
 15407 ;;		line 162 in file "../src/Dimmer_B1.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;  lights          1    wreg     unsigned char 
 15410 ;;  command         1    2[COMMON] unsigned char 
 15411 ;; Auto vars:     Size  Location     Type
 15412 ;;  lights          1    4[COMMON] unsigned char 
 15413 ;; Return value:  Size  Location     Type
 15414 ;;		None               void
 15415 ;; Registers used:
 15416 ;;		wreg, status,2, status,0
 15417 ;; Tracked objects:
 15418 ;;		On entry : 0/0
 15419 ;;		On exit  : 0/0
 15420 ;;		Unchanged: 0/0
 15421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15422 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;Total ram usage:        3 bytes
 15427 ;; Hardware stack levels used:    1
 15428 ;; Hardware stack levels required when called:    3
 15429 ;; This function calls:
 15430 ;;		Nothing
 15431 ;; This function is called by:
 15432 ;;		_setDimmerLights_Dimming
 15433 ;; This function uses a non-reentrant model
 15434 ;;
 15435                           
 15436                           
 15437                           ;psect for function _setDimmerIntr_Dimming_Sw
 15438  10F1                     _setDimmerIntr_Dimming_Sw:	
 15439                           
 15440                           ;incstack = 0
 15441                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15442                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15443  10F1  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15444                           
 15445                           ;Dimmer_B1.c: 164: if (lights == 1) {
 15446  10F2  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15447  10F3  3A01               	xorlw	1
 15448  10F4  1D03               	skipz
 15449  10F5  2904               	goto	l6918
 15450                           
 15451                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15452  10F6  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15453  10F7  3A01               	xorlw	1
 15454  10F8  3000               	movlw	0
 15455  10F9  1903               	skipnz
 15456  10FA  3001               	movlw	1
 15457  10FB  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15458  10FC  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15459  10FD  0021               	movlb	1	; select bank1
 15460  10FE  085E               	movf	_DimmerIntr1^(0+128),w
 15461  10FF  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15462  1100  39EF               	andlw	-17
 15463  1101  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15464  1102  00DE               	movwf	_DimmerIntr1^(0+128)
 15465                           
 15466                           ;Dimmer_B1.c: 166: }
 15467  1103  0008               	return
 15468  1104                     l6918:	
 15469                           
 15470                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 15471  1104  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15472  1105  3A02               	xorlw	2
 15473  1106  1D03               	skipz
 15474  1107  0008               	return
 15475                           
 15476                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 15477  1108  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15478  1109  3A01               	xorlw	1
 15479  110A  3000               	movlw	0
 15480  110B  1903               	skipnz
 15481  110C  3001               	movlw	1
 15482  110D  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15483  110E  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15484  110F  0021               	movlb	1	; select bank1
 15485  1110  0865               	movf	_DimmerIntr2^(0+128),w
 15486  1111  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15487  1112  39EF               	andlw	-17
 15488  1113  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15489  1114  00E5               	movwf	_DimmerIntr2^(0+128)
 15490  1115  0008               	return
 15491  1116                     __end_of_setDimmerIntr_Dimming_Sw:	
 15492                           
 15493                           	psect	text103
 15494  08FE                     __ptext103:	
 15495 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15496 ;; Defined at:
 15497 ;;		line 1030 in file "../src/Dimmer_B1.c"
 15498 ;; Parameters:    Size  Location     Type
 15499 ;;  value           1    wreg     unsigned char 
 15500 ;; Auto vars:     Size  Location     Type
 15501 ;;  value           1   54[BANK0 ] unsigned char 
 15502 ;;  i               3   55[BANK0 ] float 
 15503 ;; Return value:  Size  Location     Type
 15504 ;;                  1    wreg      unsigned char 
 15505 ;; Registers used:
 15506 ;;		wreg, status,2, status,0, pclath, cstack
 15507 ;; Tracked objects:
 15508 ;;		On entry : 0/0
 15509 ;;		On exit  : 0/0
 15510 ;;		Unchanged: 0/0
 15511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15515 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15516 ;;Total ram usage:        6 bytes
 15517 ;; Hardware stack levels used:    1
 15518 ;; Hardware stack levels required when called:    5
 15519 ;; This function calls:
 15520 ;;		___awtoft
 15521 ;;		___ftadd
 15522 ;;		___ftdiv
 15523 ;;		___ftneg
 15524 ;;		___fttol
 15525 ;; This function is called by:
 15526 ;;		_setDimmerLights_OnOff
 15527 ;;		_setDimmerLights_Dimming
 15528 ;;		_Flash_Memory_Initialization
 15529 ;; This function uses a non-reentrant model
 15530 ;;
 15531                           
 15532                           
 15533                           ;psect for function _getDimmerLights_ValueToPercent
 15534  08FE                     _getDimmerLights_ValueToPercent:	
 15535                           
 15536                           ;incstack = 0
 15537                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 15538                           ;getDimmerLights_ValueToPercent@value stored from wreg
 15539  08FE  0020               	movlb	0	; select bank0
 15540  08FF  00D6               	movwf	getDimmerLights_ValueToPercent@value
 15541                           
 15542                           ;Dimmer_B1.c: 1038: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 15543  0900  3000               	movlw	0
 15544  0901  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15545  0902  3010               	movlw	16
 15546  0903  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15547  0904  3042               	movlw	66
 15548  0905  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15549                           
 15550                           ;Dimmer_B1.c: 1039: i /= 100;
 15551  0906  3000               	movlw	0
 15552  0907  00A6               	movwf	___ftdiv@f2
 15553  0908  30C8               	movlw	200
 15554  0909  00A7               	movwf	___ftdiv@f2+1
 15555  090A  3042               	movlw	66
 15556  090B  00A8               	movwf	___ftdiv@f2+2
 15557  090C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15558  090D  00A9               	movwf	___ftdiv@f1
 15559  090E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15560  090F  00AA               	movwf	___ftdiv@f1+1
 15561  0910  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15562  0911  00AB               	movwf	___ftdiv@f1+2
 15563  0912  318D  25F1  3188   	fcall	___ftdiv
 15564  0915  0020               	movlb	0	; select bank0
 15565  0916  0826               	movf	?___ftdiv,w
 15566  0917  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15567  0918  0827               	movf	?___ftdiv+1,w
 15568  0919  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15569  091A  0828               	movf	?___ftdiv+2,w
 15570  091B  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15571                           
 15572                           ;Dimmer_B1.c: 1041: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 15573  091C  0856               	movf	getDimmerLights_ValueToPercent@value,w
 15574  091D  00D4               	movwf	??_getDimmerLights_ValueToPercent
 15575  091E  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 15576  091F  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 15577  0920  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 15578  0921  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 15579  0922  1903               	skipnz
 15580  0923  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 15581  0924  0854               	movf	??_getDimmerLights_ValueToPercent,w
 15582  0925  3E34               	addlw	52
 15583  0926  00A0               	movwf	___awtoft@c
 15584  0927  3000               	movlw	0
 15585  0928  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 15586  0929  00A1               	movwf	___awtoft@c+1
 15587  092A  3190  208A  3188   	fcall	___awtoft
 15588  092D  0020               	movlb	0	; select bank0
 15589  092E  0820               	movf	?___awtoft,w
 15590  092F  00A9               	movwf	___ftdiv@f1
 15591  0930  0821               	movf	?___awtoft+1,w
 15592  0931  00AA               	movwf	___ftdiv@f1+1
 15593  0932  0822               	movf	?___awtoft+2,w
 15594  0933  00AB               	movwf	___ftdiv@f1+2
 15595  0934  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15596  0935  00A6               	movwf	___ftdiv@f2
 15597  0936  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15598  0937  00A7               	movwf	___ftdiv@f2+1
 15599  0938  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15600  0939  00A8               	movwf	___ftdiv@f2+2
 15601  093A  318D  25F1  3188   	fcall	___ftdiv
 15602  093D  0020               	movlb	0	; select bank0
 15603  093E  0826               	movf	?___ftdiv,w
 15604  093F  00B6               	movwf	___ftneg@f1
 15605  0940  0827               	movf	?___ftdiv+1,w
 15606  0941  00B7               	movwf	___ftneg@f1+1
 15607  0942  0828               	movf	?___ftdiv+2,w
 15608  0943  00B8               	movwf	___ftneg@f1+2
 15609  0944  319B  237E  3188   	fcall	___ftneg
 15610  0947  0020               	movlb	0	; select bank0
 15611  0948  0836               	movf	?___ftneg,w
 15612  0949  00BC               	movwf	___ftadd@f2
 15613  094A  0837               	movf	?___ftneg+1,w
 15614  094B  00BD               	movwf	___ftadd@f2+1
 15615  094C  0838               	movf	?___ftneg+2,w
 15616  094D  00BE               	movwf	___ftadd@f2+2
 15617  094E  3000               	movlw	0
 15618  094F  00B9               	movwf	___ftadd@f1
 15619  0950  30C8               	movlw	200
 15620  0951  00BA               	movwf	___ftadd@f1+1
 15621  0952  3042               	movlw	66
 15622  0953  00BB               	movwf	___ftadd@f1+2
 15623  0954  3183  235E  3188   	fcall	___ftadd
 15624  0957  0020               	movlb	0	; select bank0
 15625  0958  0839               	movf	?___ftadd,w
 15626  0959  00C6               	movwf	___fttol@f1
 15627  095A  083A               	movf	?___ftadd+1,w
 15628  095B  00C7               	movwf	___fttol@f1+1
 15629  095C  083B               	movf	?___ftadd+2,w
 15630  095D  00C8               	movwf	___fttol@f1+2
 15631  095E  318C  24DC         	fcall	___fttol
 15632  0960  0020               	movlb	0	; select bank0
 15633  0961  0846               	movf	?___fttol,w
 15634  0962  0008               	return
 15635  0963                     __end_of_getDimmerLights_ValueToPercent:	
 15636                           
 15637                           	psect	text104
 15638  0CDC                     __ptext104:	
 15639 ;; *************** function ___fttol *****************
 15640 ;; Defined at:
 15641 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15642 ;; Parameters:    Size  Location     Type
 15643 ;;  f1              3   38[BANK0 ] float 
 15644 ;; Auto vars:     Size  Location     Type
 15645 ;;  lval            4   47[BANK0 ] unsigned long 
 15646 ;;  exp1            1   51[BANK0 ] unsigned char 
 15647 ;;  sign1           1   46[BANK0 ] unsigned char 
 15648 ;; Return value:  Size  Location     Type
 15649 ;;                  4   38[BANK0 ] long 
 15650 ;; Registers used:
 15651 ;;		wreg, status,2, status,0
 15652 ;; Tracked objects:
 15653 ;;		On entry : 0/0
 15654 ;;		On exit  : 0/0
 15655 ;;		Unchanged: 0/0
 15656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15659 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15660 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15661 ;;Total ram usage:       14 bytes
 15662 ;; Hardware stack levels used:    1
 15663 ;; Hardware stack levels required when called:    3
 15664 ;; This function calls:
 15665 ;;		Nothing
 15666 ;; This function is called by:
 15667 ;;		_getDimmerLights_PercentToValue
 15668 ;;		_getDimmerLights_ValueToPercent
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           
 15673                           ;psect for function ___fttol
 15674  0CDC                     ___fttol:	
 15675                           
 15676                           ;incstack = 0
 15677                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15678  0CDC  0020               	movlb	0	; select bank0
 15679  0CDD  0846               	movf	___fttol@f1,w
 15680  0CDE  00CA               	movwf	??___fttol
 15681  0CDF  0847               	movf	___fttol@f1+1,w
 15682  0CE0  00CB               	movwf	??___fttol+1
 15683  0CE1  0848               	movf	___fttol@f1+2,w
 15684  0CE2  00CC               	movwf	??___fttol+2
 15685  0CE3  1003               	clrc
 15686  0CE4  0D4B               	rlf	??___fttol+1,w
 15687  0CE5  0D4C               	rlf	??___fttol+2,w
 15688  0CE6  00CD               	movwf	??___fttol+3
 15689  0CE7  084D               	movf	??___fttol+3,w
 15690  0CE8  00D3               	movwf	___fttol@exp1
 15691  0CE9  08D3               	movf	___fttol@exp1,f
 15692  0CEA  1D03               	skipz
 15693  0CEB  2CF5               	goto	l9240
 15694  0CEC  3000               	movlw	0
 15695  0CED  00C9               	movwf	?___fttol+3
 15696  0CEE  3000               	movlw	0
 15697  0CEF  00C8               	movwf	?___fttol+2
 15698  0CF0  3000               	movlw	0
 15699  0CF1  00C7               	movwf	?___fttol+1
 15700  0CF2  3000               	movlw	0
 15701  0CF3  00C6               	movwf	?___fttol
 15702  0CF4  0008               	return
 15703  0CF5                     l9240:	
 15704  0CF5  0846               	movf	___fttol@f1,w
 15705  0CF6  00CA               	movwf	??___fttol
 15706  0CF7  0847               	movf	___fttol@f1+1,w
 15707  0CF8  00CB               	movwf	??___fttol+1
 15708  0CF9  0848               	movf	___fttol@f1+2,w
 15709  0CFA  00CC               	movwf	??___fttol+2
 15710  0CFB  3017               	movlw	23
 15711  0CFC                     u10765:	
 15712  0CFC  36CC               	lsrf	??___fttol+2,f
 15713  0CFD  0CCB               	rrf	??___fttol+1,f
 15714  0CFE  0CCA               	rrf	??___fttol,f
 15715  0CFF  0B89               	decfsz	9,f
 15716  0D00  2CFC               	goto	u10765
 15717  0D01  084A               	movf	??___fttol,w
 15718  0D02  00CD               	movwf	??___fttol+3
 15719  0D03  084D               	movf	??___fttol+3,w
 15720  0D04  00CE               	movwf	___fttol@sign1
 15721  0D05  17C7               	bsf	___fttol@f1+1,7
 15722  0D06  30FF               	movlw	255
 15723  0D07  05C6               	andwf	___fttol@f1,f
 15724  0D08  30FF               	movlw	255
 15725  0D09  05C7               	andwf	___fttol@f1+1,f
 15726  0D0A  3000               	movlw	0
 15727  0D0B  05C8               	andwf	___fttol@f1+2,f
 15728  0D0C  0846               	movf	___fttol@f1,w
 15729  0D0D  00CF               	movwf	___fttol@lval
 15730  0D0E  0847               	movf	___fttol@f1+1,w
 15731  0D0F  00D0               	movwf	___fttol@lval+1
 15732  0D10  0848               	movf	___fttol@f1+2,w
 15733  0D11  00D1               	movwf	___fttol@lval+2
 15734  0D12  01D2               	clrf	___fttol@lval+3
 15735  0D13  308E               	movlw	142
 15736  0D14  02D3               	subwf	___fttol@exp1,f
 15737  0D15  1FD3               	btfss	___fttol@exp1,7
 15738  0D16  2D33               	goto	l9260
 15739  0D17  0853               	movf	___fttol@exp1,w
 15740  0D18  3A80               	xorlw	128
 15741  0D19  3E8F               	addlw	143
 15742  0D1A  1803               	skipnc
 15743  0D1B  2D25               	goto	l9258
 15744  0D1C  3000               	movlw	0
 15745  0D1D  00C9               	movwf	?___fttol+3
 15746  0D1E  3000               	movlw	0
 15747  0D1F  00C8               	movwf	?___fttol+2
 15748  0D20  3000               	movlw	0
 15749  0D21  00C7               	movwf	?___fttol+1
 15750  0D22  3000               	movlw	0
 15751  0D23  00C6               	movwf	?___fttol
 15752  0D24  0008               	return
 15753  0D25                     l9258:	
 15754  0D25  3001               	movlw	1
 15755  0D26                     u10795:	
 15756  0D26  36D2               	lsrf	___fttol@lval+3,f
 15757  0D27  0CD1               	rrf	___fttol@lval+2,f
 15758  0D28  0CD0               	rrf	___fttol@lval+1,f
 15759  0D29  0CCF               	rrf	___fttol@lval,f
 15760  0D2A  0B89               	decfsz	9,f
 15761  0D2B  2D26               	goto	u10795
 15762  0D2C  3001               	movlw	1
 15763  0D2D  00CA               	movwf	??___fttol
 15764  0D2E  084A               	movf	??___fttol,w
 15765  0D2F  07D3               	addwf	___fttol@exp1,f
 15766  0D30  1903               	btfsc	3,2
 15767  0D31  2D4C               	goto	l9270
 15768  0D32  2D25               	goto	l9258
 15769  0D33                     l9260:	
 15770  0D33  3018               	movlw	24
 15771  0D34  0253               	subwf	___fttol@exp1,w
 15772  0D35  1C03               	skipc
 15773  0D36  2D49               	goto	l9268
 15774  0D37  3000               	movlw	0
 15775  0D38  00C9               	movwf	?___fttol+3
 15776  0D39  3000               	movlw	0
 15777  0D3A  00C8               	movwf	?___fttol+2
 15778  0D3B  3000               	movlw	0
 15779  0D3C  00C7               	movwf	?___fttol+1
 15780  0D3D  3000               	movlw	0
 15781  0D3E  00C6               	movwf	?___fttol
 15782  0D3F  0008               	return
 15783  0D40                     l9266:	
 15784  0D40  3001               	movlw	1
 15785  0D41                     u10825:	
 15786  0D41  35CF               	lslf	___fttol@lval,f
 15787  0D42  0DD0               	rlf	___fttol@lval+1,f
 15788  0D43  0DD1               	rlf	___fttol@lval+2,f
 15789  0D44  0DD2               	rlf	___fttol@lval+3,f
 15790  0D45  0B89               	decfsz	9,f
 15791  0D46  2D41               	goto	u10825
 15792  0D47  3001               	movlw	1
 15793  0D48  02D3               	subwf	___fttol@exp1,f
 15794  0D49                     l9268:	
 15795  0D49  08D3               	movf	___fttol@exp1,f
 15796  0D4A  1D03               	skipz
 15797  0D4B  2D40               	goto	l9266
 15798  0D4C                     l9270:	
 15799  0D4C  084E               	movf	___fttol@sign1,w
 15800  0D4D  1903               	btfsc	3,2
 15801  0D4E  2D5A               	goto	l9274
 15802  0D4F  09CF               	comf	___fttol@lval,f
 15803  0D50  09D0               	comf	___fttol@lval+1,f
 15804  0D51  09D1               	comf	___fttol@lval+2,f
 15805  0D52  09D2               	comf	___fttol@lval+3,f
 15806  0D53  0ACF               	incf	___fttol@lval,f
 15807  0D54  1903               	skipnz
 15808  0D55  0AD0               	incf	___fttol@lval+1,f
 15809  0D56  1903               	skipnz
 15810  0D57  0AD1               	incf	___fttol@lval+2,f
 15811  0D58  1903               	skipnz
 15812  0D59  0AD2               	incf	___fttol@lval+3,f
 15813  0D5A                     l9274:	
 15814  0D5A  0852               	movf	___fttol@lval+3,w
 15815  0D5B  00C9               	movwf	?___fttol+3
 15816  0D5C  0851               	movf	___fttol@lval+2,w
 15817  0D5D  00C8               	movwf	?___fttol+2
 15818  0D5E  0850               	movf	___fttol@lval+1,w
 15819  0D5F  00C7               	movwf	?___fttol+1
 15820  0D60  084F               	movf	___fttol@lval,w
 15821  0D61  00C6               	movwf	?___fttol
 15822  0D62  0008               	return
 15823  0D63                     __end_of___fttol:	
 15824                           
 15825                           	psect	text105
 15826  1B7E                     __ptext105:	
 15827 ;; *************** function ___ftneg *****************
 15828 ;; Defined at:
 15829 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15830 ;; Parameters:    Size  Location     Type
 15831 ;;  f1              3   22[BANK0 ] float 
 15832 ;; Auto vars:     Size  Location     Type
 15833 ;;		None
 15834 ;; Return value:  Size  Location     Type
 15835 ;;                  3   22[BANK0 ] float 
 15836 ;; Registers used:
 15837 ;;		wreg
 15838 ;; Tracked objects:
 15839 ;;		On entry : 0/0
 15840 ;;		On exit  : 0/0
 15841 ;;		Unchanged: 0/0
 15842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15843 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15847 ;;Total ram usage:        3 bytes
 15848 ;; Hardware stack levels used:    1
 15849 ;; Hardware stack levels required when called:    3
 15850 ;; This function calls:
 15851 ;;		Nothing
 15852 ;; This function is called by:
 15853 ;;		_getDimmerLights_PercentToValue
 15854 ;;		_getDimmerLights_ValueToPercent
 15855 ;; This function uses a non-reentrant model
 15856 ;;
 15857                           
 15858                           
 15859                           ;psect for function ___ftneg
 15860  1B7E                     ___ftneg:	
 15861                           
 15862                           ;incstack = 0
 15863                           ; Regs used in ___ftneg: [wreg]
 15864  1B7E  0020               	movlb	0	; select bank0
 15865  1B7F  0838               	movf	___ftneg@f1+2,w
 15866  1B80  0437               	iorwf	___ftneg@f1+1,w
 15867  1B81  0436               	iorwf	___ftneg@f1,w
 15868  1B82  1903               	skipnz
 15869  1B83  0008               	return
 15870  1B84  3080               	movlw	128
 15871  1B85  06B8               	xorwf	___ftneg@f1+2,f
 15872  1B86  0008               	return
 15873  1B87                     __end_of___ftneg:	
 15874                           
 15875                           	psect	text106
 15876  0DF1                     __ptext106:	
 15877 ;; *************** function ___ftdiv *****************
 15878 ;; Defined at:
 15879 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15880 ;; Parameters:    Size  Location     Type
 15881 ;;  f2              3    6[BANK0 ] float 
 15882 ;;  f1              3    9[BANK0 ] float 
 15883 ;; Auto vars:     Size  Location     Type
 15884 ;;  f3              3   17[BANK0 ] float 
 15885 ;;  sign            1   21[BANK0 ] unsigned char 
 15886 ;;  exp             1   20[BANK0 ] unsigned char 
 15887 ;;  cntr            1   16[BANK0 ] unsigned char 
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  3    6[BANK0 ] float 
 15890 ;; Registers used:
 15891 ;;		wreg, status,2, status,0, pclath, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15897 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;Total ram usage:       16 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    4
 15904 ;; This function calls:
 15905 ;;		___ftpack
 15906 ;; This function is called by:
 15907 ;;		_getDimmerLights_PercentToValue
 15908 ;;		_getDimmerLights_ValueToPercent
 15909 ;; This function uses a non-reentrant model
 15910 ;;
 15911                           
 15912                           
 15913                           ;psect for function ___ftdiv
 15914  0DF1                     ___ftdiv:	
 15915                           
 15916                           ;incstack = 0
 15917                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15918  0DF1  0020               	movlb	0	; select bank0
 15919  0DF2  0829               	movf	___ftdiv@f1,w
 15920  0DF3  00AC               	movwf	??___ftdiv
 15921  0DF4  082A               	movf	___ftdiv@f1+1,w
 15922  0DF5  00AD               	movwf	??___ftdiv+1
 15923  0DF6  082B               	movf	___ftdiv@f1+2,w
 15924  0DF7  00AE               	movwf	??___ftdiv+2
 15925  0DF8  1003               	clrc
 15926  0DF9  0D2D               	rlf	??___ftdiv+1,w
 15927  0DFA  0D2E               	rlf	??___ftdiv+2,w
 15928  0DFB  00AF               	movwf	??___ftdiv+3
 15929  0DFC  082F               	movf	??___ftdiv+3,w
 15930  0DFD  00B4               	movwf	___ftdiv@exp
 15931  0DFE  08B4               	movf	___ftdiv@exp,f
 15932  0DFF  1D03               	skipz
 15933  0E00  2E08               	goto	l9140
 15934  0E01  3000               	movlw	0
 15935  0E02  00A6               	movwf	?___ftdiv
 15936  0E03  3000               	movlw	0
 15937  0E04  00A7               	movwf	?___ftdiv+1
 15938  0E05  3000               	movlw	0
 15939  0E06  00A8               	movwf	?___ftdiv+2
 15940  0E07  0008               	return
 15941  0E08                     l9140:	
 15942  0E08  0826               	movf	___ftdiv@f2,w
 15943  0E09  00AC               	movwf	??___ftdiv
 15944  0E0A  0827               	movf	___ftdiv@f2+1,w
 15945  0E0B  00AD               	movwf	??___ftdiv+1
 15946  0E0C  0828               	movf	___ftdiv@f2+2,w
 15947  0E0D  00AE               	movwf	??___ftdiv+2
 15948  0E0E  1003               	clrc
 15949  0E0F  0D2D               	rlf	??___ftdiv+1,w
 15950  0E10  0D2E               	rlf	??___ftdiv+2,w
 15951  0E11  00AF               	movwf	??___ftdiv+3
 15952  0E12  082F               	movf	??___ftdiv+3,w
 15953  0E13  00B5               	movwf	___ftdiv@sign
 15954  0E14  08B5               	movf	___ftdiv@sign,f
 15955  0E15  1D03               	skipz
 15956  0E16  2E1E               	goto	l9146
 15957  0E17  3000               	movlw	0
 15958  0E18  00A6               	movwf	?___ftdiv
 15959  0E19  3000               	movlw	0
 15960  0E1A  00A7               	movwf	?___ftdiv+1
 15961  0E1B  3000               	movlw	0
 15962  0E1C  00A8               	movwf	?___ftdiv+2
 15963  0E1D  0008               	return
 15964  0E1E                     l9146:	
 15965  0E1E  3000               	movlw	0
 15966  0E1F  00B1               	movwf	___ftdiv@f3
 15967  0E20  3000               	movlw	0
 15968  0E21  00B2               	movwf	___ftdiv@f3+1
 15969  0E22  3000               	movlw	0
 15970  0E23  00B3               	movwf	___ftdiv@f3+2
 15971  0E24  3089               	movlw	137
 15972  0E25  0735               	addwf	___ftdiv@sign,w
 15973  0E26  00AC               	movwf	??___ftdiv
 15974  0E27  082C               	movf	??___ftdiv,w
 15975  0E28  02B4               	subwf	___ftdiv@exp,f
 15976  0E29  0829               	movf	___ftdiv@f1,w
 15977  0E2A  00AC               	movwf	??___ftdiv
 15978  0E2B  082A               	movf	___ftdiv@f1+1,w
 15979  0E2C  00AD               	movwf	??___ftdiv+1
 15980  0E2D  082B               	movf	___ftdiv@f1+2,w
 15981  0E2E  00AE               	movwf	??___ftdiv+2
 15982  0E2F  3010               	movlw	16
 15983  0E30                     u10565:	
 15984  0E30  36AE               	lsrf	??___ftdiv+2,f
 15985  0E31  0CAD               	rrf	??___ftdiv+1,f
 15986  0E32  0CAC               	rrf	??___ftdiv,f
 15987  0E33  0B89               	decfsz	9,f
 15988  0E34  2E30               	goto	u10565
 15989  0E35  082C               	movf	??___ftdiv,w
 15990  0E36  00AF               	movwf	??___ftdiv+3
 15991  0E37  082F               	movf	??___ftdiv+3,w
 15992  0E38  00B5               	movwf	___ftdiv@sign
 15993  0E39  0826               	movf	___ftdiv@f2,w
 15994  0E3A  00AC               	movwf	??___ftdiv
 15995  0E3B  0827               	movf	___ftdiv@f2+1,w
 15996  0E3C  00AD               	movwf	??___ftdiv+1
 15997  0E3D  0828               	movf	___ftdiv@f2+2,w
 15998  0E3E  00AE               	movwf	??___ftdiv+2
 15999  0E3F  3010               	movlw	16
 16000  0E40                     u10575:	
 16001  0E40  36AE               	lsrf	??___ftdiv+2,f
 16002  0E41  0CAD               	rrf	??___ftdiv+1,f
 16003  0E42  0CAC               	rrf	??___ftdiv,f
 16004  0E43  0B89               	decfsz	9,f
 16005  0E44  2E40               	goto	u10575
 16006  0E45  082C               	movf	??___ftdiv,w
 16007  0E46  00AF               	movwf	??___ftdiv+3
 16008  0E47  082F               	movf	??___ftdiv+3,w
 16009  0E48  06B5               	xorwf	___ftdiv@sign,f
 16010  0E49  3080               	movlw	128
 16011  0E4A  00AC               	movwf	??___ftdiv
 16012  0E4B  082C               	movf	??___ftdiv,w
 16013  0E4C  05B5               	andwf	___ftdiv@sign,f
 16014  0E4D  17AA               	bsf	___ftdiv@f1+1,7
 16015  0E4E  30FF               	movlw	255
 16016  0E4F  05A9               	andwf	___ftdiv@f1,f
 16017  0E50  30FF               	movlw	255
 16018  0E51  05AA               	andwf	___ftdiv@f1+1,f
 16019  0E52  3000               	movlw	0
 16020  0E53  05AB               	andwf	___ftdiv@f1+2,f
 16021  0E54  17A7               	bsf	___ftdiv@f2+1,7
 16022  0E55  30FF               	movlw	255
 16023  0E56  05A6               	andwf	___ftdiv@f2,f
 16024  0E57  30FF               	movlw	255
 16025  0E58  05A7               	andwf	___ftdiv@f2+1,f
 16026  0E59  3000               	movlw	0
 16027  0E5A  05A8               	andwf	___ftdiv@f2+2,f
 16028  0E5B  3018               	movlw	24
 16029  0E5C  00AC               	movwf	??___ftdiv
 16030  0E5D  082C               	movf	??___ftdiv,w
 16031  0E5E  00B0               	movwf	___ftdiv@cntr
 16032  0E5F                     l9160:	
 16033  0E5F  3001               	movlw	1
 16034  0E60                     u10585:	
 16035  0E60  35B1               	lslf	___ftdiv@f3,f
 16036  0E61  0DB2               	rlf	___ftdiv@f3+1,f
 16037  0E62  0DB3               	rlf	___ftdiv@f3+2,f
 16038  0E63  0B89               	decfsz	9,f
 16039  0E64  2E60               	goto	u10585
 16040  0E65  0828               	movf	___ftdiv@f2+2,w
 16041  0E66  022B               	subwf	___ftdiv@f1+2,w
 16042  0E67  1D03               	skipz
 16043  0E68  2E6F               	goto	u10595
 16044  0E69  0827               	movf	___ftdiv@f2+1,w
 16045  0E6A  022A               	subwf	___ftdiv@f1+1,w
 16046  0E6B  1D03               	skipz
 16047  0E6C  2E6F               	goto	u10595
 16048  0E6D  0826               	movf	___ftdiv@f2,w
 16049  0E6E  0229               	subwf	___ftdiv@f1,w
 16050  0E6F                     u10595:	
 16051  0E6F  1C03               	skipc
 16052  0E70  2E78               	goto	l9168
 16053  0E71  0826               	movf	___ftdiv@f2,w
 16054  0E72  02A9               	subwf	___ftdiv@f1,f
 16055  0E73  0827               	movf	___ftdiv@f2+1,w
 16056  0E74  3BAA               	subwfb	___ftdiv@f1+1,f
 16057  0E75  0828               	movf	___ftdiv@f2+2,w
 16058  0E76  3BAB               	subwfb	___ftdiv@f1+2,f
 16059  0E77  1431               	bsf	___ftdiv@f3,0
 16060  0E78                     l9168:	
 16061  0E78  3001               	movlw	1
 16062  0E79                     u10605:	
 16063  0E79  35A9               	lslf	___ftdiv@f1,f
 16064  0E7A  0DAA               	rlf	___ftdiv@f1+1,f
 16065  0E7B  0DAB               	rlf	___ftdiv@f1+2,f
 16066  0E7C  0B89               	decfsz	9,f
 16067  0E7D  2E79               	goto	u10605
 16068  0E7E  3001               	movlw	1
 16069  0E7F  02B0               	subwf	___ftdiv@cntr,f
 16070  0E80  1D03               	btfss	3,2
 16071  0E81  2E5F               	goto	l9160
 16072  0E82  0831               	movf	___ftdiv@f3,w
 16073  0E83  00F2               	movwf	___ftpack@arg
 16074  0E84  0832               	movf	___ftdiv@f3+1,w
 16075  0E85  00F3               	movwf	___ftpack@arg+1
 16076  0E86  0833               	movf	___ftdiv@f3+2,w
 16077  0E87  00F4               	movwf	___ftpack@arg+2
 16078  0E88  0834               	movf	___ftdiv@exp,w
 16079  0E89  00AC               	movwf	??___ftdiv
 16080  0E8A  082C               	movf	??___ftdiv,w
 16081  0E8B  00F5               	movwf	___ftpack@exp
 16082  0E8C  0835               	movf	___ftdiv@sign,w
 16083  0E8D  00AD               	movwf	??___ftdiv+1
 16084  0E8E  082D               	movf	??___ftdiv+1,w
 16085  0E8F  00F6               	movwf	___ftpack@sign
 16086  0E90  3188  203D         	fcall	___ftpack
 16087  0E92  0872               	movf	?___ftpack,w
 16088  0E93  0020               	movlb	0	; select bank0
 16089  0E94  00A6               	movwf	?___ftdiv
 16090  0E95  0873               	movf	?___ftpack+1,w
 16091  0E96  00A7               	movwf	?___ftdiv+1
 16092  0E97  0874               	movf	?___ftpack+2,w
 16093  0E98  00A8               	movwf	?___ftdiv+2
 16094  0E99  0008               	return
 16095  0E9A                     __end_of___ftdiv:	
 16096                           
 16097                           	psect	text107
 16098  035E                     __ptext107:	
 16099 ;; *************** function ___ftadd *****************
 16100 ;; Defined at:
 16101 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16102 ;; Parameters:    Size  Location     Type
 16103 ;;  f1              3   25[BANK0 ] float 
 16104 ;;  f2              3   28[BANK0 ] float 
 16105 ;; Auto vars:     Size  Location     Type
 16106 ;;  exp1            1   37[BANK0 ] unsigned char 
 16107 ;;  exp2            1   36[BANK0 ] unsigned char 
 16108 ;;  sign            1   35[BANK0 ] unsigned char 
 16109 ;; Return value:  Size  Location     Type
 16110 ;;                  3   25[BANK0 ] float 
 16111 ;; Registers used:
 16112 ;;		wreg, status,2, status,0, pclath, cstack
 16113 ;; Tracked objects:
 16114 ;;		On entry : 0/0
 16115 ;;		On exit  : 0/0
 16116 ;;		Unchanged: 0/0
 16117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16118 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16121 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16122 ;;Total ram usage:       13 bytes
 16123 ;; Hardware stack levels used:    1
 16124 ;; Hardware stack levels required when called:    4
 16125 ;; This function calls:
 16126 ;;		___ftpack
 16127 ;; This function is called by:
 16128 ;;		_getDimmerLights_PercentToValue
 16129 ;;		_getDimmerLights_ValueToPercent
 16130 ;; This function uses a non-reentrant model
 16131 ;;
 16132                           
 16133                           
 16134                           ;psect for function ___ftadd
 16135  035E                     ___ftadd:	
 16136                           
 16137                           ;incstack = 0
 16138                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16139  035E  0020               	movlb	0	; select bank0
 16140  035F  0839               	movf	___ftadd@f1,w
 16141  0360  00BF               	movwf	??___ftadd
 16142  0361  083A               	movf	___ftadd@f1+1,w
 16143  0362  00C0               	movwf	??___ftadd+1
 16144  0363  083B               	movf	___ftadd@f1+2,w
 16145  0364  00C1               	movwf	??___ftadd+2
 16146  0365  1003               	clrc
 16147  0366  0D40               	rlf	??___ftadd+1,w
 16148  0367  0D41               	rlf	??___ftadd+2,w
 16149  0368  00C2               	movwf	??___ftadd+3
 16150  0369  0842               	movf	??___ftadd+3,w
 16151  036A  00C5               	movwf	___ftadd@exp1
 16152  036B  083C               	movf	___ftadd@f2,w
 16153  036C  00BF               	movwf	??___ftadd
 16154  036D  083D               	movf	___ftadd@f2+1,w
 16155  036E  00C0               	movwf	??___ftadd+1
 16156  036F  083E               	movf	___ftadd@f2+2,w
 16157  0370  00C1               	movwf	??___ftadd+2
 16158  0371  1003               	clrc
 16159  0372  0D40               	rlf	??___ftadd+1,w
 16160  0373  0D41               	rlf	??___ftadd+2,w
 16161  0374  00C2               	movwf	??___ftadd+3
 16162  0375  0842               	movf	??___ftadd+3,w
 16163  0376  00C4               	movwf	___ftadd@exp2
 16164  0377  0845               	movf	___ftadd@exp1,w
 16165  0378  1903               	btfsc	3,2
 16166  0379  2B86               	goto	l9070
 16167  037A  0844               	movf	___ftadd@exp2,w
 16168  037B  0245               	subwf	___ftadd@exp1,w
 16169  037C  1803               	skipnc
 16170  037D  2B8D               	goto	l9074
 16171  037E  0345               	decf	___ftadd@exp1,w
 16172  037F  3AFF               	xorlw	255
 16173  0380  0744               	addwf	___ftadd@exp2,w
 16174  0381  00BF               	movwf	??___ftadd
 16175  0382  3019               	movlw	25
 16176  0383  023F               	subwf	??___ftadd,w
 16177  0384  1C03               	skipc
 16178  0385  2B8D               	goto	l9074
 16179  0386                     l9070:	
 16180  0386  083C               	movf	___ftadd@f2,w
 16181  0387  00B9               	movwf	?___ftadd
 16182  0388  083D               	movf	___ftadd@f2+1,w
 16183  0389  00BA               	movwf	?___ftadd+1
 16184  038A  083E               	movf	___ftadd@f2+2,w
 16185  038B  00BB               	movwf	?___ftadd+2
 16186  038C  0008               	return
 16187  038D                     l9074:	
 16188  038D  0844               	movf	___ftadd@exp2,w
 16189  038E  1903               	btfsc	3,2
 16190  038F  0008               	return
 16191  0390  0845               	movf	___ftadd@exp1,w
 16192  0391  0244               	subwf	___ftadd@exp2,w
 16193  0392  1803               	skipnc
 16194  0393  2B9C               	goto	l9080
 16195  0394  0344               	decf	___ftadd@exp2,w
 16196  0395  3AFF               	xorlw	255
 16197  0396  0745               	addwf	___ftadd@exp1,w
 16198  0397  00BF               	movwf	??___ftadd
 16199  0398  3019               	movlw	25
 16200  0399  023F               	subwf	??___ftadd,w
 16201  039A  1803               	btfsc	3,0
 16202  039B  0008               	return
 16203  039C                     l9080:	
 16204  039C  3006               	movlw	6
 16205  039D  00BF               	movwf	??___ftadd
 16206  039E  083F               	movf	??___ftadd,w
 16207  039F  00C3               	movwf	___ftadd@sign
 16208  03A0  1BBB               	btfsc	___ftadd@f1+2,7
 16209  03A1  17C3               	bsf	___ftadd@sign,7
 16210  03A2  1BBE               	btfsc	___ftadd@f2+2,7
 16211  03A3  1743               	bsf	___ftadd@sign,6
 16212  03A4  17BA               	bsf	___ftadd@f1+1,7
 16213  03A5  30FF               	movlw	255
 16214  03A6  05B9               	andwf	___ftadd@f1,f
 16215  03A7  30FF               	movlw	255
 16216  03A8  05BA               	andwf	___ftadd@f1+1,f
 16217  03A9  3000               	movlw	0
 16218  03AA  05BB               	andwf	___ftadd@f1+2,f
 16219  03AB  17BD               	bsf	___ftadd@f2+1,7
 16220  03AC  30FF               	movlw	255
 16221  03AD  05BC               	andwf	___ftadd@f2,f
 16222  03AE  30FF               	movlw	255
 16223  03AF  05BD               	andwf	___ftadd@f2+1,f
 16224  03B0  3000               	movlw	0
 16225  03B1  05BE               	andwf	___ftadd@f2+2,f
 16226  03B2  0844               	movf	___ftadd@exp2,w
 16227  03B3  0245               	subwf	___ftadd@exp1,w
 16228  03B4  1803               	skipnc
 16229  03B5  2BD8               	goto	l9102
 16230  03B6                     l9092:	
 16231  03B6  3001               	movlw	1
 16232  03B7                     u10405:	
 16233  03B7  35BC               	lslf	___ftadd@f2,f
 16234  03B8  0DBD               	rlf	___ftadd@f2+1,f
 16235  03B9  0DBE               	rlf	___ftadd@f2+2,f
 16236  03BA  0B89               	decfsz	9,f
 16237  03BB  2BB7               	goto	u10405
 16238  03BC  3001               	movlw	1
 16239  03BD  02C4               	subwf	___ftadd@exp2,f
 16240  03BE  0844               	movf	___ftadd@exp2,w
 16241  03BF  0645               	xorwf	___ftadd@exp1,w
 16242  03C0  1903               	skipnz
 16243  03C1  2BD3               	goto	l9100
 16244  03C2  3001               	movlw	1
 16245  03C3  02C3               	subwf	___ftadd@sign,f
 16246  03C4  0843               	movf	___ftadd@sign,w
 16247  03C5  3907               	andlw	7
 16248  03C6  1903               	btfsc	3,2
 16249  03C7  2BD3               	goto	l9100
 16250  03C8  2BB6               	goto	l9092
 16251  03C9                     l9098:	
 16252  03C9  3001               	movlw	1
 16253  03CA                     u10435:	
 16254  03CA  36BB               	lsrf	___ftadd@f1+2,f
 16255  03CB  0CBA               	rrf	___ftadd@f1+1,f
 16256  03CC  0CB9               	rrf	___ftadd@f1,f
 16257  03CD  0B89               	decfsz	9,f
 16258  03CE  2BCA               	goto	u10435
 16259  03CF  3001               	movlw	1
 16260  03D0  00BF               	movwf	??___ftadd
 16261  03D1  083F               	movf	??___ftadd,w
 16262  03D2  07C5               	addwf	___ftadd@exp1,f
 16263  03D3                     l9100:	
 16264  03D3  0845               	movf	___ftadd@exp1,w
 16265  03D4  0644               	xorwf	___ftadd@exp2,w
 16266  03D5  1903               	btfsc	3,2
 16267  03D6  2BFD               	goto	l3117
 16268  03D7  2BC9               	goto	l9098
 16269  03D8                     l9102:	
 16270  03D8  0845               	movf	___ftadd@exp1,w
 16271  03D9  0244               	subwf	___ftadd@exp2,w
 16272  03DA  1803               	skipnc
 16273  03DB  2BFD               	goto	l3117
 16274  03DC                     l9104:	
 16275  03DC  3001               	movlw	1
 16276  03DD                     u10465:	
 16277  03DD  35B9               	lslf	___ftadd@f1,f
 16278  03DE  0DBA               	rlf	___ftadd@f1+1,f
 16279  03DF  0DBB               	rlf	___ftadd@f1+2,f
 16280  03E0  0B89               	decfsz	9,f
 16281  03E1  2BDD               	goto	u10465
 16282  03E2  3001               	movlw	1
 16283  03E3  02C5               	subwf	___ftadd@exp1,f
 16284  03E4  0844               	movf	___ftadd@exp2,w
 16285  03E5  0645               	xorwf	___ftadd@exp1,w
 16286  03E6  1903               	skipnz
 16287  03E7  2BF9               	goto	l9112
 16288  03E8  3001               	movlw	1
 16289  03E9  02C3               	subwf	___ftadd@sign,f
 16290  03EA  0843               	movf	___ftadd@sign,w
 16291  03EB  3907               	andlw	7
 16292  03EC  1903               	btfsc	3,2
 16293  03ED  2BF9               	goto	l9112
 16294  03EE  2BDC               	goto	l9104
 16295  03EF                     l9110:	
 16296  03EF  3001               	movlw	1
 16297  03F0                     u10495:	
 16298  03F0  36BE               	lsrf	___ftadd@f2+2,f
 16299  03F1  0CBD               	rrf	___ftadd@f2+1,f
 16300  03F2  0CBC               	rrf	___ftadd@f2,f
 16301  03F3  0B89               	decfsz	9,f
 16302  03F4  2BF0               	goto	u10495
 16303  03F5  3001               	movlw	1
 16304  03F6  00BF               	movwf	??___ftadd
 16305  03F7  083F               	movf	??___ftadd,w
 16306  03F8  07C4               	addwf	___ftadd@exp2,f
 16307  03F9                     l9112:	
 16308  03F9  0845               	movf	___ftadd@exp1,w
 16309  03FA  0644               	xorwf	___ftadd@exp2,w
 16310  03FB  1D03               	skipz
 16311  03FC  2BEF               	goto	l9110
 16312  03FD                     l3117:	
 16313  03FD  1FC3               	btfss	___ftadd@sign,7
 16314  03FE  2C0F               	goto	l9116
 16315  03FF  30FF               	movlw	255
 16316  0400  06B9               	xorwf	___ftadd@f1,f
 16317  0401  30FF               	movlw	255
 16318  0402  06BA               	xorwf	___ftadd@f1+1,f
 16319  0403  30FF               	movlw	255
 16320  0404  06BB               	xorwf	___ftadd@f1+2,f
 16321  0405  3001               	movlw	1
 16322  0406  07B9               	addwf	___ftadd@f1,f
 16323  0407  3000               	movlw	0
 16324  0408  1803               	skipnc
 16325  0409  3001               	movlw	1
 16326  040A  07BA               	addwf	___ftadd@f1+1,f
 16327  040B  3000               	movlw	0
 16328  040C  1803               	skipnc
 16329  040D  3001               	movlw	1
 16330  040E  07BB               	addwf	___ftadd@f1+2,f
 16331  040F                     l9116:	
 16332  040F  1F43               	btfss	___ftadd@sign,6
 16333  0410  2C21               	goto	l9120
 16334  0411  30FF               	movlw	255
 16335  0412  06BC               	xorwf	___ftadd@f2,f
 16336  0413  30FF               	movlw	255
 16337  0414  06BD               	xorwf	___ftadd@f2+1,f
 16338  0415  30FF               	movlw	255
 16339  0416  06BE               	xorwf	___ftadd@f2+2,f
 16340  0417  3001               	movlw	1
 16341  0418  07BC               	addwf	___ftadd@f2,f
 16342  0419  3000               	movlw	0
 16343  041A  1803               	skipnc
 16344  041B  3001               	movlw	1
 16345  041C  07BD               	addwf	___ftadd@f2+1,f
 16346  041D  3000               	movlw	0
 16347  041E  1803               	skipnc
 16348  041F  3001               	movlw	1
 16349  0420  07BE               	addwf	___ftadd@f2+2,f
 16350  0421                     l9120:	
 16351  0421  01C3               	clrf	___ftadd@sign
 16352  0422  0839               	movf	___ftadd@f1,w
 16353  0423  07BC               	addwf	___ftadd@f2,f
 16354  0424  083A               	movf	___ftadd@f1+1,w
 16355  0425  3DBD               	addwfc	___ftadd@f2+1,f
 16356  0426  083B               	movf	___ftadd@f1+2,w
 16357  0427  3DBE               	addwfc	___ftadd@f2+2,f
 16358  0428  1FBE               	btfss	___ftadd@f2+2,7
 16359  0429  2C3C               	goto	l9130
 16360  042A  30FF               	movlw	255
 16361  042B  06BC               	xorwf	___ftadd@f2,f
 16362  042C  30FF               	movlw	255
 16363  042D  06BD               	xorwf	___ftadd@f2+1,f
 16364  042E  30FF               	movlw	255
 16365  042F  06BE               	xorwf	___ftadd@f2+2,f
 16366  0430  3001               	movlw	1
 16367  0431  07BC               	addwf	___ftadd@f2,f
 16368  0432  3000               	movlw	0
 16369  0433  1803               	skipnc
 16370  0434  3001               	movlw	1
 16371  0435  07BD               	addwf	___ftadd@f2+1,f
 16372  0436  3000               	movlw	0
 16373  0437  1803               	skipnc
 16374  0438  3001               	movlw	1
 16375  0439  07BE               	addwf	___ftadd@f2+2,f
 16376  043A  01C3               	clrf	___ftadd@sign
 16377  043B  0AC3               	incf	___ftadd@sign,f
 16378  043C                     l9130:	
 16379  043C  083C               	movf	___ftadd@f2,w
 16380  043D  00F2               	movwf	___ftpack@arg
 16381  043E  083D               	movf	___ftadd@f2+1,w
 16382  043F  00F3               	movwf	___ftpack@arg+1
 16383  0440  083E               	movf	___ftadd@f2+2,w
 16384  0441  00F4               	movwf	___ftpack@arg+2
 16385  0442  0845               	movf	___ftadd@exp1,w
 16386  0443  00BF               	movwf	??___ftadd
 16387  0444  083F               	movf	??___ftadd,w
 16388  0445  00F5               	movwf	___ftpack@exp
 16389  0446  0843               	movf	___ftadd@sign,w
 16390  0447  00C0               	movwf	??___ftadd+1
 16391  0448  0840               	movf	??___ftadd+1,w
 16392  0449  00F6               	movwf	___ftpack@sign
 16393  044A  3188  203D         	fcall	___ftpack
 16394  044C  0872               	movf	?___ftpack,w
 16395  044D  0020               	movlb	0	; select bank0
 16396  044E  00B9               	movwf	?___ftadd
 16397  044F  0873               	movf	?___ftpack+1,w
 16398  0450  00BA               	movwf	?___ftadd+1
 16399  0451  0874               	movf	?___ftpack+2,w
 16400  0452  00BB               	movwf	?___ftadd+2
 16401  0453  0008               	return
 16402  0454                     __end_of___ftadd:	
 16403                           
 16404                           	psect	text108
 16405  108A                     __ptext108:	
 16406 ;; *************** function ___awtoft *****************
 16407 ;; Defined at:
 16408 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;  c               2    0[BANK0 ] int 
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;  sign            1    5[BANK0 ] unsigned char 
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  3    0[BANK0 ] float 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, pclath, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        6 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    4
 16429 ;; This function calls:
 16430 ;;		___ftpack
 16431 ;; This function is called by:
 16432 ;;		_getDimmerLights_PercentToValue
 16433 ;;		_getDimmerLights_ValueToPercent
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           
 16438                           ;psect for function ___awtoft
 16439  108A                     ___awtoft:	
 16440                           
 16441                           ;incstack = 0
 16442                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16443  108A  0020               	movlb	0	; select bank0
 16444  108B  01A5               	clrf	___awtoft@sign
 16445  108C  1FA1               	btfss	___awtoft@c+1,7
 16446  108D  2895               	goto	l9058
 16447  108E  09A0               	comf	___awtoft@c,f
 16448  108F  09A1               	comf	___awtoft@c+1,f
 16449  1090  0AA0               	incf	___awtoft@c,f
 16450  1091  1903               	skipnz
 16451  1092  0AA1               	incf	___awtoft@c+1,f
 16452  1093  01A5               	clrf	___awtoft@sign
 16453  1094  0AA5               	incf	___awtoft@sign,f
 16454  1095                     l9058:	
 16455  1095  0820               	movf	___awtoft@c,w
 16456  1096  00F2               	movwf	___ftpack@arg
 16457  1097  0821               	movf	___awtoft@c+1,w
 16458  1098  00F3               	movwf	___ftpack@arg+1
 16459  1099  01F4               	clrf	___ftpack@arg+2
 16460  109A  308E               	movlw	142
 16461  109B  00A3               	movwf	??___awtoft
 16462  109C  0823               	movf	??___awtoft,w
 16463  109D  00F5               	movwf	___ftpack@exp
 16464  109E  0825               	movf	___awtoft@sign,w
 16465  109F  00A4               	movwf	??___awtoft+1
 16466  10A0  0824               	movf	??___awtoft+1,w
 16467  10A1  00F6               	movwf	___ftpack@sign
 16468  10A2  3188  203D         	fcall	___ftpack
 16469  10A4  0872               	movf	?___ftpack,w
 16470  10A5  0020               	movlb	0	; select bank0
 16471  10A6  00A0               	movwf	?___awtoft
 16472  10A7  0873               	movf	?___ftpack+1,w
 16473  10A8  00A1               	movwf	?___awtoft+1
 16474  10A9  0874               	movf	?___ftpack+2,w
 16475  10AA  00A2               	movwf	?___awtoft+2
 16476  10AB  0008               	return
 16477  10AC                     __end_of___awtoft:	
 16478                           
 16479                           	psect	text109
 16480  083D                     __ptext109:	
 16481 ;; *************** function ___ftpack *****************
 16482 ;; Defined at:
 16483 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16484 ;; Parameters:    Size  Location     Type
 16485 ;;  arg             3    2[COMMON] unsigned um
 16486 ;;  exp             1    5[COMMON] unsigned char 
 16487 ;;  sign            1    6[COMMON] unsigned char 
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;		None
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  3    2[COMMON] float 
 16492 ;; Registers used:
 16493 ;;		wreg, status,2, status,0
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:        8 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    3
 16506 ;; This function calls:
 16507 ;;		Nothing
 16508 ;; This function is called by:
 16509 ;;		___awtoft
 16510 ;;		___ftadd
 16511 ;;		___ftdiv
 16512 ;;		___ftmul
 16513 ;; This function uses a non-reentrant model
 16514 ;;
 16515                           
 16516                           
 16517                           ;psect for function ___ftpack
 16518  083D                     ___ftpack:	
 16519                           
 16520                           ;incstack = 0
 16521                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16522  083D  0875               	movf	___ftpack@exp,w
 16523  083E  1903               	btfsc	3,2
 16524  083F  2845               	goto	l8900
 16525  0840  0874               	movf	___ftpack@arg+2,w
 16526  0841  0473               	iorwf	___ftpack@arg+1,w
 16527  0842  0472               	iorwf	___ftpack@arg,w
 16528  0843  1D03               	skipz
 16529  0844  2856               	goto	l8906
 16530  0845                     l8900:	
 16531  0845  3000               	movlw	0
 16532  0846  00F2               	movwf	?___ftpack
 16533  0847  3000               	movlw	0
 16534  0848  00F3               	movwf	?___ftpack+1
 16535  0849  3000               	movlw	0
 16536  084A  00F4               	movwf	?___ftpack+2
 16537  084B  0008               	return
 16538  084C                     l8904:	
 16539  084C  3001               	movlw	1
 16540  084D  00F7               	movwf	??___ftpack
 16541  084E  0877               	movf	??___ftpack,w
 16542  084F  07F5               	addwf	___ftpack@exp,f
 16543  0850  3001               	movlw	1
 16544  0851                     u9995:	
 16545  0851  36F4               	lsrf	___ftpack@arg+2,f
 16546  0852  0CF3               	rrf	___ftpack@arg+1,f
 16547  0853  0CF2               	rrf	___ftpack@arg,f
 16548  0854  0B89               	decfsz	9,f
 16549  0855  2851               	goto	u9995
 16550  0856                     l8906:	
 16551  0856  30FE               	movlw	254
 16552  0857  0574               	andwf	___ftpack@arg+2,w
 16553  0858  1903               	btfsc	3,2
 16554  0859  286F               	goto	l3088
 16555  085A  284C               	goto	l8904
 16556  085B                     l8908:	
 16557  085B  3001               	movlw	1
 16558  085C  00F7               	movwf	??___ftpack
 16559  085D  0877               	movf	??___ftpack,w
 16560  085E  07F5               	addwf	___ftpack@exp,f
 16561  085F  3001               	movlw	1
 16562  0860  07F2               	addwf	___ftpack@arg,f
 16563  0861  3000               	movlw	0
 16564  0862  1803               	skipnc
 16565  0863  3001               	movlw	1
 16566  0864  07F3               	addwf	___ftpack@arg+1,f
 16567  0865  3000               	movlw	0
 16568  0866  1803               	skipnc
 16569  0867  3001               	movlw	1
 16570  0868  07F4               	addwf	___ftpack@arg+2,f
 16571  0869  3001               	movlw	1
 16572  086A                     u10015:	
 16573  086A  36F4               	lsrf	___ftpack@arg+2,f
 16574  086B  0CF3               	rrf	___ftpack@arg+1,f
 16575  086C  0CF2               	rrf	___ftpack@arg,f
 16576  086D  0B89               	decfsz	9,f
 16577  086E  286A               	goto	u10015
 16578  086F                     l3088:	
 16579  086F  30FF               	movlw	255
 16580  0870  0574               	andwf	___ftpack@arg+2,w
 16581  0871  1903               	btfsc	3,2
 16582  0872  287C               	goto	l8916
 16583  0873  285B               	goto	l8908
 16584  0874                     l8914:	
 16585  0874  3001               	movlw	1
 16586  0875  02F5               	subwf	___ftpack@exp,f
 16587  0876  3001               	movlw	1
 16588  0877                     u10035:	
 16589  0877  35F2               	lslf	___ftpack@arg,f
 16590  0878  0DF3               	rlf	___ftpack@arg+1,f
 16591  0879  0DF4               	rlf	___ftpack@arg+2,f
 16592  087A  0B89               	decfsz	9,f
 16593  087B  2877               	goto	u10035
 16594  087C                     l8916:	
 16595  087C  1FF3               	btfss	___ftpack@arg+1,7
 16596  087D  2874               	goto	l8914
 16597  087E  1875               	btfsc	___ftpack@exp,0
 16598  087F  2886               	goto	l3094
 16599  0880  30FF               	movlw	255
 16600  0881  05F2               	andwf	___ftpack@arg,f
 16601  0882  307F               	movlw	127
 16602  0883  05F3               	andwf	___ftpack@arg+1,f
 16603  0884  30FF               	movlw	255
 16604  0885  05F4               	andwf	___ftpack@arg+2,f
 16605  0886                     l3094:	
 16606  0886  1003               	clrc
 16607  0887  0CF5               	rrf	___ftpack@exp,f
 16608  0888  0875               	movf	___ftpack@exp,w
 16609  0889  00F7               	movwf	??___ftpack
 16610  088A  01F8               	clrf	??___ftpack+1
 16611  088B  01F9               	clrf	??___ftpack+2
 16612  088C  3010               	movlw	16
 16613  088D                     u10065:	
 16614  088D  35F7               	lslf	??___ftpack,f
 16615  088E  0DF8               	rlf	??___ftpack+1,f
 16616  088F  0DF9               	rlf	??___ftpack+2,f
 16617  0890  0B89               	decfsz	9,f
 16618  0891  288D               	goto	u10065
 16619  0892  0877               	movf	??___ftpack,w
 16620  0893  04F2               	iorwf	___ftpack@arg,f
 16621  0894  0878               	movf	??___ftpack+1,w
 16622  0895  04F3               	iorwf	___ftpack@arg+1,f
 16623  0896  0879               	movf	??___ftpack+2,w
 16624  0897  04F4               	iorwf	___ftpack@arg+2,f
 16625  0898  0876               	movf	___ftpack@sign,w
 16626  0899  1903               	btfsc	3,2
 16627  089A  0008               	return
 16628  089B  17F4               	bsf	___ftpack@arg+2,7
 16629  089C  0008               	return
 16630  089D                     __end_of___ftpack:	
 16631                           
 16632                           	psect	text110
 16633  1D6F                     __ptext110:	
 16634 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16635 ;; Defined at:
 16636 ;;		line 66 in file "../src/Dimmer_B1.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;  lights          1    wreg     unsigned char 
 16639 ;; Auto vars:     Size  Location     Type
 16640 ;;  lights          1    4[COMMON] unsigned char 
 16641 ;;  value           1    3[COMMON] unsigned char 
 16642 ;; Return value:  Size  Location     Type
 16643 ;;                  1    wreg      unsigned char 
 16644 ;; Registers used:
 16645 ;;		wreg, status,2
 16646 ;; Tracked objects:
 16647 ;;		On entry : 0/0
 16648 ;;		On exit  : 0/0
 16649 ;;		Unchanged: 0/0
 16650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;Total ram usage:        3 bytes
 16656 ;; Hardware stack levels used:    1
 16657 ;; Hardware stack levels required when called:    3
 16658 ;; This function calls:
 16659 ;;		Nothing
 16660 ;; This function is called by:
 16661 ;;		_setDimmerLights_Dimming
 16662 ;; This function uses a non-reentrant model
 16663 ;;
 16664                           
 16665                           
 16666                           ;psect for function _getDimmerIntr_DimmingValue
 16667  1D6F                     _getDimmerIntr_DimmingValue:	
 16668                           
 16669                           ;incstack = 0
 16670                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16671                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16672  1D6F  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16673                           
 16674                           ;Dimmer_B1.c: 67: char value = 0;
 16675  1D70  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16676                           
 16677                           ;Dimmer_B1.c: 69: if (lights == 1) {
 16678  1D71  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16679  1D72  3A01               	xorlw	1
 16680  1D73  1D03               	skipz
 16681  1D74  2D78               	goto	l6908
 16682                           
 16683                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 16684  1D75  0021               	movlb	1	; select bank1
 16685  1D76  0862               	movf	(_DimmerIntr1^(0+128)+4),w
 16686  1D77  2D7E               	goto	L9
 16687  1D78                     l6908:	
 16688                           ;Dimmer_B1.c: 71: }
 16689                           
 16690                           
 16691                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 16692  1D78  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16693  1D79  3A02               	xorlw	2
 16694  1D7A  1D03               	skipz
 16695  1D7B  2D81               	goto	l730
 16696                           
 16697                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 16698  1D7C  0021               	movlb	1	; select bank1
 16699  1D7D  0869               	movf	(_DimmerIntr2^(0+128)+4),w
 16700  1D7E                     L9:	
 16701  1D7E  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16702  1D7F  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16703  1D80  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16704  1D81                     l730:	
 16705                           
 16706                           ;Dimmer_B1.c: 76: }
 16707                           ;Dimmer_B1.c: 83: return value;
 16708  1D81  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16709  1D82  0008               	return
 16710  1D83                     __end_of_getDimmerIntr_DimmingValue:	
 16711                           
 16712                           	psect	text111
 16713  1C6C                     __ptext111:	
 16714 ;; *************** function _getMain_LightsStatus *****************
 16715 ;; Defined at:
 16716 ;;		line 374 in file "../src/Main_B1.c"
 16717 ;; Parameters:    Size  Location     Type
 16718 ;;		None
 16719 ;; Auto vars:     Size  Location     Type
 16720 ;;  status          1    2[COMMON] unsigned char 
 16721 ;; Return value:  Size  Location     Type
 16722 ;;                  1    wreg      unsigned char 
 16723 ;; Registers used:
 16724 ;;		wreg, status,2, status,0
 16725 ;; Tracked objects:
 16726 ;;		On entry : 0/0
 16727 ;;		On exit  : 0/0
 16728 ;;		Unchanged: 0/0
 16729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;Total ram usage:        1 bytes
 16735 ;; Hardware stack levels used:    1
 16736 ;; Hardware stack levels required when called:    3
 16737 ;; This function calls:
 16738 ;;		Nothing
 16739 ;; This function is called by:
 16740 ;;		_DimmerLights_Main
 16741 ;;		_setDimmerLights_Main
 16742 ;;		_Flash_Memory_Main
 16743 ;;		_Exception_Main
 16744 ;;		_Load_Main
 16745 ;; This function uses a non-reentrant model
 16746 ;;
 16747                           
 16748                           
 16749                           ;psect for function _getMain_LightsStatus
 16750  1C6C                     _getMain_LightsStatus:	
 16751                           
 16752                           ;Main_B1.c: 375: char status = 0;
 16753                           
 16754                           ;incstack = 0
 16755                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16756  1C6C  01F2               	clrf	getMain_LightsStatus@status
 16757                           
 16758                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 16759  1C6D  3000               	movlw	0
 16760  1C6E  0023               	movlb	3	; select bank3
 16761  1C6F  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 16762  1C70  3001               	movlw	1
 16763  1C71  00F2               	movwf	getMain_LightsStatus@status
 16764                           
 16765                           ;Main_B1.c: 395: if (status == 0) {
 16766  1C72  08F2               	movf	getMain_LightsStatus@status,f
 16767  1C73  1D03               	skipz
 16768  1C74  2C79               	goto	l9906
 16769                           
 16770                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 16771  1C75  3000               	movlw	0
 16772  1C76  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 16773  1C77  3001               	movlw	1
 16774  1C78  00F2               	movwf	getMain_LightsStatus@status
 16775  1C79                     l9906:	
 16776                           
 16777                           ;Main_B1.c: 397: }
 16778                           ;Main_B1.c: 421: return status;
 16779  1C79  0872               	movf	getMain_LightsStatus@status,w
 16780  1C7A  0008               	return
 16781  1C7B                     __end_of_getMain_LightsStatus:	
 16782                           
 16783                           	psect	text112
 16784  12D3                     __ptext112:	
 16785 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16786 ;; Defined at:
 16787 ;;		line 885 in file "../src/Dimmer_B1.c"
 16788 ;; Parameters:    Size  Location     Type
 16789 ;;  lights          1    wreg     unsigned char 
 16790 ;; Auto vars:     Size  Location     Type
 16791 ;;  lights          1    7[COMMON] unsigned char 
 16792 ;;  allow           1    8[COMMON] unsigned char 
 16793 ;; Return value:  Size  Location     Type
 16794 ;;                  1    wreg      unsigned char 
 16795 ;; Registers used:
 16796 ;;		wreg, status,2, status,0, pclath, cstack
 16797 ;; Tracked objects:
 16798 ;;		On entry : 0/0
 16799 ;;		On exit  : 0/0
 16800 ;;		Unchanged: 0/0
 16801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;Total ram usage:        6 bytes
 16807 ;; Hardware stack levels used:    1
 16808 ;; Hardware stack levels required when called:    4
 16809 ;; This function calls:
 16810 ;;		_getLoad_OK
 16811 ;; This function is called by:
 16812 ;;		_setDimmerLights_Main
 16813 ;; This function uses a non-reentrant model
 16814 ;;
 16815                           
 16816                           
 16817                           ;psect for function _getDimmerLights_Allow_Condition
 16818  12D3                     _getDimmerLights_Allow_Condition:	
 16819                           
 16820                           ;incstack = 0
 16821                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16822                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16823  12D3  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16824                           
 16825                           ;Dimmer_B1.c: 886: char allow = 0;
 16826  12D4  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16827                           
 16828                           ;Dimmer_B1.c: 892: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16829  12D5  01F4               	clrf	_getDimmerLights_Allow_Condition$2145
 16830  12D6  0AF4               	incf	_getDimmerLights_Allow_Condition$2145,f
 16831  12D7  319B  234B  3192   	fcall	_getLoad_OK
 16832  12DA  3800               	iorlw	0
 16833  12DB  1D03               	skipz
 16834  12DC  2AE1               	goto	l7202
 16835  12DD  0022               	movlb	2	; select bank2
 16836  12DE  18AE               	btfsc	_Dimmer^(0+256),1	;volatile
 16837  12DF  2AE1               	goto	l7202
 16838  12E0  01F4               	clrf	_getDimmerLights_Allow_Condition$2145
 16839  12E1                     l7202:	
 16840  12E1  0874               	movf	_getDimmerLights_Allow_Condition$2145,w
 16841  12E2  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16842  12E3  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16843  12E4  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16844                           
 16845                           ;Dimmer_B1.c: 896: if (allow == 0) {
 16846  12E5  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16847  12E6  1D03               	skipz
 16848  12E7  2B08               	goto	l7226
 16849                           
 16850                           ;Dimmer_B1.c: 897: if (lights == 1) {
 16851  12E8  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16852  12E9  3A01               	xorlw	1
 16853  12EA  1D03               	skipz
 16854  12EB  2AF7               	goto	l7216
 16855                           
 16856                           ;Dimmer_B1.c: 898: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16857  12EC  01F5               	clrf	_getDimmerLights_Allow_Condition$2146
 16858  12ED  0AF5               	incf	_getDimmerLights_Allow_Condition$2146,f
 16859  12EE  0023               	movlb	3	; select bank3
 16860  12EF  1A47               	btfsc	_DimmerLights2^(0+384),4
 16861  12F0  2AF5               	goto	l7214
 16862  12F1  0021               	movlb	1	; select bank1
 16863  12F2  1A65               	btfsc	_DimmerIntr2^(0+128),4
 16864  12F3  2AF5               	goto	l7214
 16865  12F4  01F5               	clrf	_getDimmerLights_Allow_Condition$2146
 16866  12F5                     l7214:	
 16867  12F5  0875               	movf	_getDimmerLights_Allow_Condition$2146,w
 16868  12F6  2B05               	goto	L10
 16869  12F7                     l7216:	
 16870                           ;Dimmer_B1.c: 899: } else if (lights == 2) {
 16871                           
 16872  12F7  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16873  12F8  3A02               	xorlw	2
 16874  12F9  1D03               	skipz
 16875  12FA  2B08               	goto	l7226
 16876                           
 16877                           ;Dimmer_B1.c: 900: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16878  12FB  01F6               	clrf	_getDimmerLights_Allow_Condition$2147
 16879  12FC  0AF6               	incf	_getDimmerLights_Allow_Condition$2147,f
 16880  12FD  0023               	movlb	3	; select bank3
 16881  12FE  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16882  12FF  2B04               	goto	l7224
 16883  1300  0021               	movlb	1	; select bank1
 16884  1301  1A5E               	btfsc	_DimmerIntr1^(0+128),4
 16885  1302  2B04               	goto	l7224
 16886  1303  01F6               	clrf	_getDimmerLights_Allow_Condition$2147
 16887  1304                     l7224:	
 16888  1304  0876               	movf	_getDimmerLights_Allow_Condition$2147,w
 16889  1305                     L10:	
 16890  1305  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16891  1306  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16892  1307  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16893  1308                     l7226:	
 16894                           
 16895                           ;Dimmer_B1.c: 901: }
 16896                           ;Dimmer_B1.c: 902: }
 16897                           ;Dimmer_B1.c: 919: return allow;
 16898  1308  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16899  1309  0008               	return
 16900  130A                     __end_of_getDimmerLights_Allow_Condition:	
 16901                           
 16902                           	psect	text113
 16903  1B4B                     __ptext113:	
 16904 ;; *************** function _getLoad_OK *****************
 16905 ;; Defined at:
 16906 ;;		line 246 in file "../src/OverLoad_B1.c"
 16907 ;; Parameters:    Size  Location     Type
 16908 ;;		None
 16909 ;; Auto vars:     Size  Location     Type
 16910 ;;  ok              1    2[COMMON] unsigned char 
 16911 ;; Return value:  Size  Location     Type
 16912 ;;                  1    wreg      unsigned char 
 16913 ;; Registers used:
 16914 ;;		wreg, status,2
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;Total ram usage:        1 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; Hardware stack levels required when called:    3
 16927 ;; This function calls:
 16928 ;;		Nothing
 16929 ;; This function is called by:
 16930 ;;		_DimmerLights_Main
 16931 ;;		_getDimmerLights_Allow_Condition
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           
 16936                           ;psect for function _getLoad_OK
 16937  1B4B                     _getLoad_OK:	
 16938                           
 16939                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 16940                           
 16941                           ;incstack = 0
 16942                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16943  1B4B  3000               	movlw	0
 16944  1B4C  0022               	movlb	2	; select bank2
 16945  1B4D  1BB1               	btfsc	_Load^(0+256),7
 16946  1B4E  3001               	movlw	1
 16947  1B4F  00F2               	movwf	getLoad_OK@ok
 16948                           
 16949                           ;OverLoad_B1.c: 248: return ok;
 16950  1B50  0872               	movf	getLoad_OK@ok,w
 16951  1B51  0008               	return
 16952  1B52                     __end_of_getLoad_OK:	
 16953                           
 16954                           	psect	text114
 16955  1208                     __ptext114:	
 16956 ;; *************** function _getMain_All_Error_Status *****************
 16957 ;; Defined at:
 16958 ;;		line 425 in file "../src/Main_B1.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  command         1    wreg     unsigned char 
 16961 ;; Auto vars:     Size  Location     Type
 16962 ;;  command         1    7[COMMON] unsigned char 
 16963 ;;  status          1    8[COMMON] unsigned char 
 16964 ;; Return value:  Size  Location     Type
 16965 ;;                  1    wreg      unsigned char 
 16966 ;; Registers used:
 16967 ;;		wreg, status,2, status,0
 16968 ;; Tracked objects:
 16969 ;;		On entry : 0/0
 16970 ;;		On exit  : 0/0
 16971 ;;		Unchanged: 0/0
 16972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16976 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16977 ;;Total ram usage:        7 bytes
 16978 ;; Hardware stack levels used:    1
 16979 ;; Hardware stack levels required when called:    3
 16980 ;; This function calls:
 16981 ;;		Nothing
 16982 ;; This function is called by:
 16983 ;;		_DimmerLights_Main
 16984 ;;		_Exception_Main
 16985 ;;		_Load_Main
 16986 ;;		_setTemp_Main
 16987 ;;		_getRxData
 16988 ;;		_setSw_Main
 16989 ;; This function uses a non-reentrant model
 16990 ;;
 16991                           
 16992                           
 16993                           ;psect for function _getMain_All_Error_Status
 16994  1208                     _getMain_All_Error_Status:	
 16995                           
 16996                           ;incstack = 0
 16997                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16998                           ;getMain_All_Error_Status@command stored from wreg
 16999  1208  00F7               	movwf	getMain_All_Error_Status@command
 17000                           
 17001                           ;Main_B1.c: 426: char status = 0;
 17002  1209  01F8               	clrf	getMain_All_Error_Status@status
 17003                           
 17004                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17005  120A  08F8               	movf	getMain_All_Error_Status@status,f
 17006  120B  1D03               	skipz
 17007  120C  2A1F               	goto	l9678
 17008  120D  0877               	movf	getMain_All_Error_Status@command,w
 17009  120E  3A02               	xorlw	2
 17010  120F  1903               	skipnz
 17011  1210  2A1F               	goto	l9678
 17012                           
 17013                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17014  1211  0021               	movlb	1	; select bank1
 17015  1212  18CC               	btfsc	_Temp^(0+128),1
 17016  1213  2A17               	goto	l9676
 17017  1214  01F3               	clrf	_getMain_All_Error_Status$3378
 17018  1215  01F4               	clrf	_getMain_All_Error_Status$3378+1
 17019  1216  2A1B               	goto	l1657
 17020  1217                     l9676:	
 17021  1217  3002               	movlw	2
 17022  1218  00F3               	movwf	_getMain_All_Error_Status$3378
 17023  1219  3000               	movlw	0
 17024  121A  00F4               	movwf	_getMain_All_Error_Status$3378+1
 17025  121B                     l1657:	
 17026  121B  0873               	movf	_getMain_All_Error_Status$3378,w
 17027  121C  00F2               	movwf	??_getMain_All_Error_Status
 17028  121D  0872               	movf	??_getMain_All_Error_Status,w
 17029  121E  00F8               	movwf	getMain_All_Error_Status@status
 17030  121F                     l9678:	
 17031                           
 17032                           ;Main_B1.c: 439: }
 17033                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17034  121F  08F8               	movf	getMain_All_Error_Status@status,f
 17035  1220  1D03               	skipz
 17036  1221  2A34               	goto	l1658
 17037  1222  0877               	movf	getMain_All_Error_Status@command,w
 17038  1223  3A03               	xorlw	3
 17039  1224  1903               	skipnz
 17040  1225  2A34               	goto	l1658
 17041                           
 17042                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17043  1226  0022               	movlb	2	; select bank2
 17044  1227  1AB1               	btfsc	_Load^(0+256),5
 17045  1228  2A2C               	goto	l9686
 17046  1229  01F5               	clrf	_getMain_All_Error_Status$3379
 17047  122A  01F6               	clrf	_getMain_All_Error_Status$3379+1
 17048  122B  2A30               	goto	l1662
 17049  122C                     l9686:	
 17050  122C  3003               	movlw	3
 17051  122D  00F5               	movwf	_getMain_All_Error_Status$3379
 17052  122E  3000               	movlw	0
 17053  122F  00F6               	movwf	_getMain_All_Error_Status$3379+1
 17054  1230                     l1662:	
 17055  1230  0875               	movf	_getMain_All_Error_Status$3379,w
 17056  1231  00F2               	movwf	??_getMain_All_Error_Status
 17057  1232  0872               	movf	??_getMain_All_Error_Status,w
 17058  1233  00F8               	movwf	getMain_All_Error_Status@status
 17059  1234                     l1658:	
 17060                           
 17061                           ;Main_B1.c: 446: }
 17062                           ;Main_B1.c: 462: return status;
 17063  1234  0878               	movf	getMain_All_Error_Status@status,w
 17064  1235  0008               	return
 17065  1236                     __end_of_getMain_All_Error_Status:	
 17066                           
 17067                           	psect	text115
 17068  1BA3                     __ptext115:	
 17069 ;; *************** function _DimmerLights_Initialization *****************
 17070 ;; Defined at:
 17071 ;;		line 593 in file "../src/Dimmer_B1.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;		None
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;		None
 17076 ;; Return value:  Size  Location     Type
 17077 ;;		None               void
 17078 ;; Registers used:
 17079 ;;		wreg, status,2, status,0, pclath, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;Total ram usage:        0 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    4
 17092 ;; This function calls:
 17093 ;;		_DimmerIntr_Initialization
 17094 ;;		_setDimmerLights_Initialization
 17095 ;; This function is called by:
 17096 ;;		_main
 17097 ;; This function uses a non-reentrant model
 17098 ;;
 17099                           
 17100                           
 17101                           ;psect for function _DimmerLights_Initialization
 17102  1BA3                     _DimmerLights_Initialization:	
 17103                           
 17104                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17105                           
 17106                           ;incstack = 0
 17107                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17108  1BA3  3001               	movlw	1
 17109  1BA4  3190  2067  319B   	fcall	_setDimmerLights_Initialization
 17110                           
 17111                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17112  1BA7  3002               	movlw	2
 17113  1BA8  3190  2067  319B   	fcall	_setDimmerLights_Initialization
 17114                           
 17115                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17116  1BAB  3190  2068         	fcall	_DimmerIntr_Initialization
 17117  1BAD  0008               	return
 17118  1BAE                     __end_of_DimmerLights_Initialization:	
 17119                           
 17120                           	psect	text116
 17121  1067                     __ptext116:	
 17122 ;; *************** function _setDimmerLights_Initialization *****************
 17123 ;; Defined at:
 17124 ;;		line 609 in file "../src/Dimmer_B1.c"
 17125 ;; Parameters:    Size  Location     Type
 17126 ;;  lights          1    wreg     unsigned char 
 17127 ;; Auto vars:     Size  Location     Type
 17128 ;;  lights          1    0[COMMON] unsigned char 
 17129 ;; Return value:  Size  Location     Type
 17130 ;;		None               void
 17131 ;; Registers used:
 17132 ;;		wreg
 17133 ;; Tracked objects:
 17134 ;;		On entry : 0/0
 17135 ;;		On exit  : 0/0
 17136 ;;		Unchanged: 0/0
 17137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17142 ;;Total ram usage:        0 bytes
 17143 ;; Hardware stack levels used:    1
 17144 ;; Hardware stack levels required when called:    3
 17145 ;; This function calls:
 17146 ;;		Nothing
 17147 ;; This function is called by:
 17148 ;;		_DimmerLights_Initialization
 17149 ;; This function uses a non-reentrant model
 17150 ;;
 17151                           
 17152                           
 17153                           ;psect for function _setDimmerLights_Initialization
 17154  1067                     _setDimmerLights_Initialization:	
 17155                           
 17156                           ;incstack = 0
 17157                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17158  1067  0008               	return
 17159  1068                     __end_of_setDimmerLights_Initialization:	
 17160                           
 17161                           	psect	text117
 17162  1068                     __ptext117:	
 17163 ;; *************** function _DimmerIntr_Initialization *****************
 17164 ;; Defined at:
 17165 ;;		line 7 in file "../src/Dimmer_B1.c"
 17166 ;; Parameters:    Size  Location     Type
 17167 ;;		None
 17168 ;; Auto vars:     Size  Location     Type
 17169 ;;		None
 17170 ;; Return value:  Size  Location     Type
 17171 ;;		None               void
 17172 ;; Registers used:
 17173 ;;		wreg
 17174 ;; Tracked objects:
 17175 ;;		On entry : 0/0
 17176 ;;		On exit  : 0/0
 17177 ;;		Unchanged: 0/0
 17178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;Total ram usage:        1 bytes
 17184 ;; Hardware stack levels used:    1
 17185 ;; Hardware stack levels required when called:    3
 17186 ;; This function calls:
 17187 ;;		Nothing
 17188 ;; This function is called by:
 17189 ;;		_DimmerLights_Initialization
 17190 ;; This function uses a non-reentrant model
 17191 ;;
 17192                           
 17193                           
 17194                           ;psect for function _DimmerIntr_Initialization
 17195  1068                     _DimmerIntr_Initialization:	
 17196                           
 17197                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17198                           
 17199                           ;incstack = 0
 17200                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17201  1068  3007               	movlw	7
 17202  1069  00F2               	movwf	??_DimmerIntr_Initialization
 17203  106A  0872               	movf	??_DimmerIntr_Initialization,w
 17204  106B  0021               	movlb	1	; select bank1
 17205  106C  00E1               	movwf	(_DimmerIntr1^(0+128)+3)
 17206                           
 17207                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17208  106D  3034               	movlw	52
 17209  106E  00F2               	movwf	??_DimmerIntr_Initialization
 17210  106F  0872               	movf	??_DimmerIntr_Initialization,w
 17211  1070  00E3               	movwf	(_DimmerIntr1^(0+128)+5)
 17212                           
 17213                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17214  1071  3010               	movlw	16
 17215  1072  00F2               	movwf	??_DimmerIntr_Initialization
 17216  1073  0872               	movf	??_DimmerIntr_Initialization,w
 17217  1074  00E4               	movwf	(_DimmerIntr1^(0+128)+6)
 17218                           
 17219                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17220  1075  3034               	movlw	52
 17221  1076  00F2               	movwf	??_DimmerIntr_Initialization
 17222  1077  0872               	movf	??_DimmerIntr_Initialization,w
 17223  1078  00E2               	movwf	(_DimmerIntr1^(0+128)+4)
 17224                           
 17225                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17226  1079  3007               	movlw	7
 17227  107A  00F2               	movwf	??_DimmerIntr_Initialization
 17228  107B  0872               	movf	??_DimmerIntr_Initialization,w
 17229  107C  00E8               	movwf	(_DimmerIntr2^(0+128)+3)
 17230                           
 17231                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17232  107D  3034               	movlw	52
 17233  107E  00F2               	movwf	??_DimmerIntr_Initialization
 17234  107F  0872               	movf	??_DimmerIntr_Initialization,w
 17235  1080  00EA               	movwf	(_DimmerIntr2^(0+128)+5)
 17236                           
 17237                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17238  1081  3010               	movlw	16
 17239  1082  00F2               	movwf	??_DimmerIntr_Initialization
 17240  1083  0872               	movf	??_DimmerIntr_Initialization,w
 17241  1084  00EB               	movwf	(_DimmerIntr2^(0+128)+6)
 17242                           
 17243                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17244  1085  3034               	movlw	52
 17245  1086  00F2               	movwf	??_DimmerIntr_Initialization
 17246  1087  0872               	movf	??_DimmerIntr_Initialization,w
 17247  1088  00E9               	movwf	(_DimmerIntr2^(0+128)+4)
 17248  1089  0008               	return
 17249  108A                     __end_of_DimmerIntr_Initialization:	
 17250                           
 17251                           	psect	text118
 17252  1B76                     __ptext118:	
 17253 ;; *************** function _DelayOff_Main *****************
 17254 ;; Defined at:
 17255 ;;		line 41 in file "../src/DelayOff_B1.c"
 17256 ;; Parameters:    Size  Location     Type
 17257 ;;		None
 17258 ;; Auto vars:     Size  Location     Type
 17259 ;;		None
 17260 ;; Return value:  Size  Location     Type
 17261 ;;		None               void
 17262 ;; Registers used:
 17263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17264 ;; Tracked objects:
 17265 ;;		On entry : 0/0
 17266 ;;		On exit  : 0/0
 17267 ;;		Unchanged: 0/0
 17268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;Total ram usage:        0 bytes
 17274 ;; Hardware stack levels used:    1
 17275 ;; Hardware stack levels required when called:    7
 17276 ;; This function calls:
 17277 ;;		_DlyOff_Main
 17278 ;; This function is called by:
 17279 ;;		_main
 17280 ;; This function uses a non-reentrant model
 17281 ;;
 17282                           
 17283                           
 17284                           ;psect for function _DelayOff_Main
 17285  1B76                     _DelayOff_Main:	
 17286                           
 17287                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17288                           
 17289                           ;incstack = 0
 17290                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17291  1B76  3001               	movlw	1
 17292  1B77  318B  2300  319B   	fcall	_DlyOff_Main
 17293                           
 17294                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17295  1B7A  3002               	movlw	2
 17296  1B7B  318B  2300         	fcall	_DlyOff_Main
 17297  1B7D  0008               	return
 17298  1B7E                     __end_of_DelayOff_Main:	
 17299                           
 17300                           	psect	text119
 17301  0B00                     __ptext119:	
 17302 ;; *************** function _DlyOff_Main *****************
 17303 ;; Defined at:
 17304 ;;		line 61 in file "../src/DelayOff_B1.c"
 17305 ;; Parameters:    Size  Location     Type
 17306 ;;  sw              1    wreg     unsigned char 
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  sw              1   73[BANK0 ] unsigned char 
 17309 ;; Return value:  Size  Location     Type
 17310 ;;		None               void
 17311 ;; Registers used:
 17312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17313 ;; Tracked objects:
 17314 ;;		On entry : 0/0
 17315 ;;		On exit  : 0/0
 17316 ;;		Unchanged: 0/0
 17317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;Total ram usage:        3 bytes
 17323 ;; Hardware stack levels used:    1
 17324 ;; Hardware stack levels required when called:    6
 17325 ;; This function calls:
 17326 ;;		_DelayOffPointSelect
 17327 ;;		_getDimmerLights_Status
 17328 ;;		_setBuz
 17329 ;;		_setDimmerLights_SwOff
 17330 ;;		_setDimmerLights_SwOn
 17331 ;; This function is called by:
 17332 ;;		_DelayOff_Main
 17333 ;; This function uses a non-reentrant model
 17334 ;;
 17335                           
 17336                           
 17337                           ;psect for function _DlyOff_Main
 17338  0B00                     _DlyOff_Main:	
 17339                           
 17340                           ;incstack = 0
 17341                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17342                           ;DlyOff_Main@sw stored from wreg
 17343  0B00  0020               	movlb	0	; select bank0
 17344  0B01  00E9               	movwf	DlyOff_Main@sw
 17345                           
 17346                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17347  0B02  0869               	movf	DlyOff_Main@sw,w
 17348  0B03  319D  2597  318B   	fcall	_DelayOffPointSelect
 17349                           
 17350                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17351  0B06  0021               	movlb	1	; select bank1
 17352  0B07  0842               	movf	_DelayOff^(0+128),w
 17353  0B08  0086               	movwf	6
 17354  0B09  3001               	movlw	1	; select bank2/3
 17355  0B0A  0087               	movwf	7
 17356  0B0B  1C81               	btfss	1,1
 17357  0B0C  0008               	return
 17358                           
 17359                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17360  0B0D  0842               	movf	_DelayOff^(0+128),w
 17361  0B0E  3E02               	addlw	2
 17362  0B0F  0086               	movwf	6
 17363  0B10  3001               	movlw	1	; select bank2/3
 17364  0B11  0087               	movwf	7
 17365  0B12  3001               	movlw	1
 17366  0B13  0781               	addwf	1,f
 17367  0B14  3141               	addfsr 1,1
 17368  0B15  1803               	skipnc
 17369  0B16  0A81               	incf	1,f
 17370                           
 17371                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17372  0B17  0842               	movf	_DelayOff^(0+128),w
 17373  0B18  3E02               	addlw	2
 17374  0B19  0086               	movwf	6
 17375  0B1A  3001               	movlw	1	; select bank2/3
 17376  0B1B  0087               	movwf	7
 17377  0B1C  3F40               	moviw [0]fsr1
 17378  0B1D  0020               	movlb	0	; select bank0
 17379  0B1E  00E7               	movwf	??_DlyOff_Main
 17380  0B1F  3F41               	moviw [1]fsr1
 17381  0B20  00E8               	movwf	??_DlyOff_Main+1
 17382  0B21  300B               	movlw	11
 17383  0B22  0268               	subwf	??_DlyOff_Main+1,w
 17384  0B23  30B8               	movlw	184
 17385  0B24  1903               	skipnz
 17386  0B25  0267               	subwf	??_DlyOff_Main,w
 17387  0B26  1C03               	skipc
 17388  0B27  0008               	return
 17389                           
 17390                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17391  0B28  0021               	movlb	1	; select bank1
 17392  0B29  0842               	movf	_DelayOff^(0+128),w
 17393  0B2A  3E02               	addlw	2
 17394  0B2B  0086               	movwf	6
 17395  0B2C  3001               	movlw	1	; select bank2/3
 17396  0B2D  0087               	movwf	7
 17397  0B2E  3000               	movlw	0
 17398  0B2F  3FC0               	movwi [0]fsr1
 17399  0B30  3FC1               	movwi [1]fsr1
 17400                           
 17401                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17402  0B31  3001               	movlw	1
 17403  0B32  0020               	movlb	0	; select bank0
 17404  0B33  00E7               	movwf	??_DlyOff_Main
 17405  0B34  0021               	movlb	1	; select bank1
 17406  0B35  0842               	movf	_DelayOff^(0+128),w
 17407  0B36  3E04               	addlw	4
 17408  0B37  0086               	movwf	6
 17409  0B38  3001               	movlw	1	; select bank2/3
 17410  0B39  0087               	movwf	7
 17411  0B3A  0020               	movlb	0	; select bank0
 17412  0B3B  0867               	movf	??_DlyOff_Main,w
 17413  0B3C  0781               	addwf	1,f
 17414                           
 17415                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17416  0B3D  0021               	movlb	1	; select bank1
 17417  0B3E  0842               	movf	_DelayOff^(0+128),w
 17418  0B3F  3E04               	addlw	4
 17419  0B40  0086               	movwf	6
 17420  0B41  3001               	movlw	1	; select bank2/3
 17421  0B42  0087               	movwf	7
 17422  0B43  0A42               	incf	_DelayOff^(0+128),w
 17423  0B44  0084               	movwf	4
 17424  0B45  3001               	movlw	1	; select bank2/3
 17425  0B46  0085               	movwf	5
 17426  0B47  0800               	movf	0,w
 17427  0B48  0201               	subwf	1,w
 17428  0B49  1C03               	skipc
 17429  0B4A  0008               	return
 17430                           
 17431                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17432  0B4B  0842               	movf	_DelayOff^(0+128),w
 17433  0B4C  3E04               	addlw	4
 17434  0B4D  0086               	movwf	6
 17435  0B4E  3001               	movlw	1	; select bank2/3
 17436  0B4F  0087               	movwf	7
 17437  0B50  0181               	clrf	1
 17438                           
 17439                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17440  0B51  0842               	movf	_DelayOff^(0+128),w
 17441  0B52  0086               	movwf	6
 17442  0B53  3001               	movlw	1	; select bank2/3
 17443  0B54  0087               	movwf	7
 17444  0B55  1081               	bcf	1,1
 17445                           
 17446                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 17447  0B56  3064               	movlw	100
 17448  0B57  0020               	movlb	0	; select bank0
 17449  0B58  00A4               	movwf	setBuz@time
 17450  0B59  3000               	movlw	0
 17451  0B5A  00A5               	movwf	setBuz@time+1
 17452  0B5B  3001               	movlw	1
 17453  0B5C  3195  25E6  318B   	fcall	_setBuz
 17454                           
 17455                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17456  0B5F  0020               	movlb	0	; select bank0
 17457  0B60  0869               	movf	DlyOff_Main@sw,w
 17458  0B61  319C  244E  318B   	fcall	_getDimmerLights_Status
 17459  0B64  3A01               	xorlw	1
 17460  0B65  1D03               	skipz
 17461  0B66  0008               	return
 17462                           
 17463                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17464  0B67  0020               	movlb	0	; select bank0
 17465  0B68  0869               	movf	DlyOff_Main@sw,w
 17466  0B69  3196  268D  318B   	fcall	_setDimmerLights_SwOn
 17467                           
 17468                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17469  0B6C  0020               	movlb	0	; select bank0
 17470  0B6D  0869               	movf	DlyOff_Main@sw,w
 17471  0B6E  3194  240E         	fcall	_setDimmerLights_SwOff
 17472  0B70  0008               	return
 17473  0B71                     __end_of_DlyOff_Main:	
 17474                           
 17475                           	psect	text120
 17476  168D                     __ptext120:	
 17477 ;; *************** function _setDimmerLights_SwOn *****************
 17478 ;; Defined at:
 17479 ;;		line 649 in file "../src/Dimmer_B1.c"
 17480 ;; Parameters:    Size  Location     Type
 17481 ;;  sw              1    wreg     unsigned char 
 17482 ;; Auto vars:     Size  Location     Type
 17483 ;;  sw              1    9[BANK0 ] unsigned char 
 17484 ;;  idle            1    8[BANK0 ] unsigned char 
 17485 ;; Return value:  Size  Location     Type
 17486 ;;		None               void
 17487 ;; Registers used:
 17488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17489 ;; Tracked objects:
 17490 ;;		On entry : 0/0
 17491 ;;		On exit  : 0/0
 17492 ;;		Unchanged: 0/0
 17493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17495 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17497 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17498 ;;Total ram usage:        5 bytes
 17499 ;; Hardware stack levels used:    1
 17500 ;; Hardware stack levels required when called:    5
 17501 ;; This function calls:
 17502 ;;		_DimmerLights_SelectPointer
 17503 ;;		_setBuz
 17504 ;; This function is called by:
 17505 ;;		_DlyOff_Main
 17506 ;;		_setControl_Lights_Table
 17507 ;;		_setRFSW_Control
 17508 ;;		_setRFSW_AdjControl
 17509 ;;		_setSw_Main
 17510 ;; This function uses a non-reentrant model
 17511 ;;
 17512                           
 17513                           
 17514                           ;psect for function _setDimmerLights_SwOn
 17515  168D                     _setDimmerLights_SwOn:	
 17516                           
 17517                           ;incstack = 0
 17518                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17519                           ;setDimmerLights_SwOn@sw stored from wreg
 17520  168D  0020               	movlb	0	; select bank0
 17521  168E  00A9               	movwf	setDimmerLights_SwOn@sw
 17522                           
 17523                           ;Dimmer_B1.c: 650: char idle = 0;
 17524  168F  01A8               	clrf	setDimmerLights_SwOn@idle
 17525                           
 17526                           ;Dimmer_B1.c: 652: if (idle == 0) {
 17527  1690  08A8               	movf	setDimmerLights_SwOn@idle,f
 17528  1691  1D03               	skipz
 17529  1692  2EB7               	goto	l9336
 17530                           
 17531                           ;Dimmer_B1.c: 653: if (sw == 1) {
 17532  1693  0829               	movf	setDimmerLights_SwOn@sw,w
 17533  1694  3A01               	xorlw	1
 17534  1695  1D03               	skipz
 17535  1696  2EA4               	goto	l9326
 17536                           
 17537                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 17538  1697  01A6               	clrf	_setDimmerLights_SwOn$2117
 17539  1698  0AA6               	incf	_setDimmerLights_SwOn$2117,f
 17540  1699  0023               	movlb	3	; select bank3
 17541  169A  1A47               	btfsc	_DimmerLights2^(0+384),4
 17542  169B  2EA1               	goto	l9324
 17543  169C  0021               	movlb	1	; select bank1
 17544  169D  1A65               	btfsc	_DimmerIntr2^(0+128),4
 17545  169E  2EA1               	goto	l9324
 17546  169F  0020               	movlb	0	; select bank0
 17547  16A0  01A6               	clrf	_setDimmerLights_SwOn$2117
 17548  16A1                     l9324:	
 17549  16A1  0020               	movlb	0	; select bank0
 17550  16A2  0826               	movf	_setDimmerLights_SwOn$2117,w
 17551  16A3  2EB4               	goto	L11
 17552  16A4                     l9326:	
 17553                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 17554                           
 17555  16A4  0829               	movf	setDimmerLights_SwOn@sw,w
 17556  16A5  3A02               	xorlw	2
 17557  16A6  1D03               	skipz
 17558  16A7  2EB7               	goto	l9336
 17559                           
 17560                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 17561  16A8  01A7               	clrf	_setDimmerLights_SwOn$2118
 17562  16A9  0AA7               	incf	_setDimmerLights_SwOn$2118,f
 17563  16AA  0023               	movlb	3	; select bank3
 17564  16AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 17565  16AC  2EB2               	goto	l9334
 17566  16AD  0021               	movlb	1	; select bank1
 17567  16AE  1A5E               	btfsc	_DimmerIntr1^(0+128),4
 17568  16AF  2EB2               	goto	l9334
 17569  16B0  0020               	movlb	0	; select bank0
 17570  16B1  01A7               	clrf	_setDimmerLights_SwOn$2118
 17571  16B2                     l9334:	
 17572  16B2  0020               	movlb	0	; select bank0
 17573  16B3  0827               	movf	_setDimmerLights_SwOn$2118,w
 17574  16B4                     L11:	
 17575  16B4  00F9               	movwf	??_setDimmerLights_SwOn
 17576  16B5  0879               	movf	??_setDimmerLights_SwOn,w
 17577  16B6  00A8               	movwf	setDimmerLights_SwOn@idle
 17578  16B7                     l9336:	
 17579                           
 17580                           ;Dimmer_B1.c: 657: }
 17581                           ;Dimmer_B1.c: 658: }
 17582                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 17583  16B7  0829               	movf	setDimmerLights_SwOn@sw,w
 17584  16B8  319D  25AC  3196   	fcall	_DimmerLights_SelectPointer
 17585                           
 17586                           ;Dimmer_B1.c: 676: if (idle == 0) {
 17587  16BB  0020               	movlb	0	; select bank0
 17588  16BC  08A8               	movf	setDimmerLights_SwOn@idle,f
 17589  16BD  1D03               	skipz
 17590  16BE  0008               	return
 17591                           
 17592                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 17593  16BF  086D               	movf	_DimmerLights,w
 17594  16C0  0086               	movwf	6
 17595  16C1  3001               	movlw	1	; select bank2/3
 17596  16C2  0087               	movwf	7
 17597  16C3  1401               	bsf	1,0
 17598                           
 17599                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 17600  16C4  0A6D               	incf	_DimmerLights,w
 17601  16C5  0086               	movwf	6
 17602  16C6  3001               	movlw	1	; select bank2/3
 17603  16C7  0087               	movwf	7
 17604  16C8  1801               	btfsc	1,0
 17605  16C9  2EDA               	goto	l9344
 17606                           
 17607                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 17608  16CA  0A6D               	incf	_DimmerLights,w
 17609  16CB  0086               	movwf	6
 17610  16CC  3001               	movlw	1	; select bank2/3
 17611  16CD  0087               	movwf	7
 17612  16CE  1401               	bsf	1,0
 17613                           
 17614                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 17615  16CF  086D               	movf	_DimmerLights,w
 17616  16D0  0086               	movwf	6
 17617  16D1  3001               	movlw	1	; select bank2/3
 17618  16D2  0087               	movwf	7
 17619  16D3  1481               	bsf	1,1
 17620                           
 17621                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 17622  16D4  086D               	movf	_DimmerLights,w
 17623  16D5  0086               	movwf	6
 17624  16D6  3001               	movlw	1	; select bank2/3
 17625  16D7  0087               	movwf	7
 17626  16D8  1501               	bsf	1,2
 17627                           
 17628                           ;Dimmer_B1.c: 682: } else {
 17629  16D9  2EDF               	goto	l9346
 17630  16DA                     l9344:	
 17631                           
 17632                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 17633  16DA  0A6D               	incf	_DimmerLights,w
 17634  16DB  0086               	movwf	6
 17635  16DC  3001               	movlw	1	; select bank2/3
 17636  16DD  0087               	movwf	7
 17637  16DE  1001               	bcf	1,0
 17638  16DF                     l9346:	
 17639                           
 17640                           ;Dimmer_B1.c: 684: }
 17641                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 17642  16DF  3064               	movlw	100
 17643  16E0  00A4               	movwf	setBuz@time
 17644  16E1  3000               	movlw	0
 17645  16E2  00A5               	movwf	setBuz@time+1
 17646  16E3  3001               	movlw	1
 17647  16E4  3195  25E6         	fcall	_setBuz
 17648  16E6  0008               	return
 17649  16E7                     __end_of_setDimmerLights_SwOn:	
 17650                           
 17651                           	psect	text121
 17652  15E6                     __ptext121:	
 17653 ;; *************** function _setBuz *****************
 17654 ;; Defined at:
 17655 ;;		line 22 in file "../src/Buzzer_B1.c"
 17656 ;; Parameters:    Size  Location     Type
 17657 ;;  count           1    wreg     unsigned char 
 17658 ;;  time            2    4[BANK0 ] int 
 17659 ;; Auto vars:     Size  Location     Type
 17660 ;;  count           1    8[COMMON] unsigned char 
 17661 ;; Return value:  Size  Location     Type
 17662 ;;		None               void
 17663 ;; Registers used:
 17664 ;;		wreg, status,2, status,0, pclath, cstack
 17665 ;; Tracked objects:
 17666 ;;		On entry : 0/0
 17667 ;;		On exit  : 0/0
 17668 ;;		Unchanged: 0/0
 17669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17670 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;Total ram usage:        4 bytes
 17675 ;; Hardware stack levels used:    1
 17676 ;; Hardware stack levels required when called:    4
 17677 ;; This function calls:
 17678 ;;		___awdiv
 17679 ;; This function is called by:
 17680 ;;		_DlyOff_Main
 17681 ;;		_setDimmerLights_SwOn
 17682 ;;		_setDimmerLights_Dimming
 17683 ;;		_my_MainTimer
 17684 ;;		_Exception_Main
 17685 ;;		_setTemp_Main
 17686 ;;		_setLog_Code
 17687 ;;		_setRFSW_Control
 17688 ;;		_setSw_Main
 17689 ;; This function uses a non-reentrant model
 17690 ;;
 17691                           
 17692                           
 17693                           ;psect for function _setBuz
 17694  15E6                     _setBuz:	
 17695                           
 17696                           ;incstack = 0
 17697                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17698                           ;setBuz@count stored from wreg
 17699  15E6  00F8               	movwf	setBuz@count
 17700                           
 17701                           ;Buzzer_B1.c: 23: time /= 20;
 17702  15E7  3014               	movlw	20
 17703  15E8  00F2               	movwf	___awdiv@divisor
 17704  15E9  3000               	movlw	0
 17705  15EA  00F3               	movwf	___awdiv@divisor+1
 17706  15EB  0020               	movlb	0	; select bank0
 17707  15EC  0825               	movf	setBuz@time+1,w
 17708  15ED  01F5               	clrf	___awdiv@dividend+1
 17709  15EE  07F5               	addwf	___awdiv@dividend+1,f
 17710  15EF  0824               	movf	setBuz@time,w
 17711  15F0  01F4               	clrf	___awdiv@dividend
 17712  15F1  07F4               	addwf	___awdiv@dividend,f
 17713  15F2  3196  2639  3195   	fcall	___awdiv
 17714  15F5  0873               	movf	?___awdiv+1,w
 17715  15F6  0020               	movlb	0	; select bank0
 17716  15F7  01A5               	clrf	setBuz@time+1
 17717  15F8  07A5               	addwf	setBuz@time+1,f
 17718  15F9  0872               	movf	?___awdiv,w
 17719  15FA  01A4               	clrf	setBuz@time
 17720  15FB  07A4               	addwf	setBuz@time,f
 17721                           
 17722                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17723  15FC  0021               	movlb	1	; select bank1
 17724  15FD  1C2E               	btfss	_Buz1^(0+128),0
 17725  15FE  0008               	return
 17726                           
 17727                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17728  15FF  18AE               	btfsc	_Buz1^(0+128),1
 17729  1600  2E15               	goto	l94
 17730                           
 17731                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17732  1601  14AE               	bsf	_Buz1^(0+128),1
 17733                           
 17734                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17735  1602  01AF               	clrf	(_Buz1^(0+128)+1)
 17736  1603  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17737                           
 17738                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17739  1604  0878               	movf	setBuz@count,w
 17740  1605  00F7               	movwf	??_setBuz
 17741  1606  0877               	movf	??_setBuz,w
 17742  1607  00B1               	movwf	(_Buz1^(0+128)+3)
 17743                           
 17744                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17745  1608  0020               	movlb	0	; select bank0
 17746  1609  0825               	movf	setBuz@time+1,w
 17747  160A  0021               	movlb	1	; select bank1
 17748  160B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17749  160C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17750  160D  0020               	movlb	0	; select bank0
 17751  160E  0824               	movf	setBuz@time,w
 17752  160F  0021               	movlb	1	; select bank1
 17753  1610  01B4               	clrf	(_Buz1^(0+128)+6)
 17754  1611  07B4               	addwf	(_Buz1^(0+128)+6),f
 17755                           
 17756                           ;Buzzer_B1.c: 30: RB3 = 1;
 17757  1612  0020               	movlb	0	; select bank0
 17758  1613  158D               	bsf	13,3	;volatile
 17759                           
 17760                           ;Buzzer_B1.c: 31: } else {
 17761  1614  0008               	return
 17762  1615                     l94:	
 17763                           
 17764                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17765  1615  19AE               	btfsc	_Buz1^(0+128),3
 17766  1616  2E27               	goto	l96
 17767                           
 17768                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17769  1617  15AE               	bsf	_Buz1^(0+128),3
 17770                           
 17771                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17772  1618  0878               	movf	setBuz@count,w
 17773  1619  00F7               	movwf	??_setBuz
 17774  161A  0877               	movf	??_setBuz,w
 17775  161B  00B2               	movwf	(_Buz1^(0+128)+4)
 17776                           
 17777                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17778  161C  0020               	movlb	0	; select bank0
 17779  161D  0825               	movf	setBuz@time+1,w
 17780  161E  0021               	movlb	1	; select bank1
 17781  161F  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 17782  1620  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 17783  1621  0020               	movlb	0	; select bank0
 17784  1622  0824               	movf	setBuz@time,w
 17785  1623  0021               	movlb	1	; select bank1
 17786  1624  01B6               	clrf	(_Buz1^(0+128)+8)
 17787  1625  07B6               	addwf	(_Buz1^(0+128)+8),f
 17788                           
 17789                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17790  1626  0008               	return
 17791  1627                     l96:	
 17792  1627  1A2E               	btfsc	_Buz1^(0+128),4
 17793  1628  0008               	return
 17794                           
 17795                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17796  1629  162E               	bsf	_Buz1^(0+128),4
 17797                           
 17798                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17799  162A  0878               	movf	setBuz@count,w
 17800  162B  00F7               	movwf	??_setBuz
 17801  162C  0877               	movf	??_setBuz,w
 17802  162D  00B3               	movwf	(_Buz1^(0+128)+5)
 17803                           
 17804                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17805  162E  0020               	movlb	0	; select bank0
 17806  162F  0825               	movf	setBuz@time+1,w
 17807  1630  0021               	movlb	1	; select bank1
 17808  1631  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 17809  1632  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 17810  1633  0020               	movlb	0	; select bank0
 17811  1634  0824               	movf	setBuz@time,w
 17812  1635  0021               	movlb	1	; select bank1
 17813  1636  01B8               	clrf	(_Buz1^(0+128)+10)
 17814  1637  07B8               	addwf	(_Buz1^(0+128)+10),f
 17815  1638  0008               	return
 17816  1639                     __end_of_setBuz:	
 17817                           
 17818                           	psect	text122
 17819  1639                     __ptext122:	
 17820 ;; *************** function ___awdiv *****************
 17821 ;; Defined at:
 17822 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;  divisor         2    2[COMMON] int 
 17825 ;;  dividend        2    4[COMMON] int 
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;  quotient        2    2[BANK0 ] int 
 17828 ;;  sign            1    1[BANK0 ] unsigned char 
 17829 ;;  counter         1    0[BANK0 ] unsigned char 
 17830 ;; Return value:  Size  Location     Type
 17831 ;;                  2    2[COMMON] int 
 17832 ;; Registers used:
 17833 ;;		wreg, status,2, status,0
 17834 ;; Tracked objects:
 17835 ;;		On entry : 0/0
 17836 ;;		On exit  : 0/0
 17837 ;;		Unchanged: 0/0
 17838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17840 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17842 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;Total ram usage:        9 bytes
 17844 ;; Hardware stack levels used:    1
 17845 ;; Hardware stack levels required when called:    3
 17846 ;; This function calls:
 17847 ;;		Nothing
 17848 ;; This function is called by:
 17849 ;;		_setBuz
 17850 ;; This function uses a non-reentrant model
 17851 ;;
 17852                           
 17853                           
 17854                           ;psect for function ___awdiv
 17855  1639                     ___awdiv:	
 17856                           
 17857                           ;incstack = 0
 17858                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17859  1639  0020               	movlb	0	; select bank0
 17860  163A  01A1               	clrf	___awdiv@sign
 17861  163B  1FF3               	btfss	___awdiv@divisor+1,7
 17862  163C  2E44               	goto	l8934
 17863  163D  09F2               	comf	___awdiv@divisor,f
 17864  163E  09F3               	comf	___awdiv@divisor+1,f
 17865  163F  0AF2               	incf	___awdiv@divisor,f
 17866  1640  1903               	skipnz
 17867  1641  0AF3               	incf	___awdiv@divisor+1,f
 17868  1642  01A1               	clrf	___awdiv@sign
 17869  1643  0AA1               	incf	___awdiv@sign,f
 17870  1644                     l8934:	
 17871  1644  1FF5               	btfss	___awdiv@dividend+1,7
 17872  1645  2E4F               	goto	l8940
 17873  1646  09F4               	comf	___awdiv@dividend,f
 17874  1647  09F5               	comf	___awdiv@dividend+1,f
 17875  1648  0AF4               	incf	___awdiv@dividend,f
 17876  1649  1903               	skipnz
 17877  164A  0AF5               	incf	___awdiv@dividend+1,f
 17878  164B  3001               	movlw	1
 17879  164C  00F6               	movwf	??___awdiv
 17880  164D  0876               	movf	??___awdiv,w
 17881  164E  06A1               	xorwf	___awdiv@sign,f
 17882  164F                     l8940:	
 17883  164F  01A2               	clrf	___awdiv@quotient
 17884  1650  01A3               	clrf	___awdiv@quotient+1
 17885  1651  0873               	movf	___awdiv@divisor+1,w
 17886  1652  0472               	iorwf	___awdiv@divisor,w
 17887  1653  1903               	skipnz
 17888  1654  2E7E               	goto	l8962
 17889  1655  01A0               	clrf	___awdiv@counter
 17890  1656  0AA0               	incf	___awdiv@counter,f
 17891  1657                     l8950:	
 17892  1657  1BF3               	btfsc	___awdiv@divisor+1,7
 17893  1658  2E63               	goto	l8952
 17894  1659  3001               	movlw	1
 17895  165A                     u10115:	
 17896  165A  35F2               	lslf	___awdiv@divisor,f
 17897  165B  0DF3               	rlf	___awdiv@divisor+1,f
 17898  165C  0B89               	decfsz	9,f
 17899  165D  2E5A               	goto	u10115
 17900  165E  3001               	movlw	1
 17901  165F  00F6               	movwf	??___awdiv
 17902  1660  0876               	movf	??___awdiv,w
 17903  1661  07A0               	addwf	___awdiv@counter,f
 17904  1662  2E57               	goto	l8950
 17905  1663                     l8952:	
 17906  1663  3001               	movlw	1
 17907  1664                     u10135:	
 17908  1664  35A2               	lslf	___awdiv@quotient,f
 17909  1665  0DA3               	rlf	___awdiv@quotient+1,f
 17910  1666  0B89               	decfsz	9,f
 17911  1667  2E64               	goto	u10135
 17912  1668  0873               	movf	___awdiv@divisor+1,w
 17913  1669  0275               	subwf	___awdiv@dividend+1,w
 17914  166A  1D03               	skipz
 17915  166B  2E6E               	goto	u10145
 17916  166C  0872               	movf	___awdiv@divisor,w
 17917  166D  0274               	subwf	___awdiv@dividend,w
 17918  166E                     u10145:	
 17919  166E  1C03               	skipc
 17920  166F  2E75               	goto	l8958
 17921  1670  0872               	movf	___awdiv@divisor,w
 17922  1671  02F4               	subwf	___awdiv@dividend,f
 17923  1672  0873               	movf	___awdiv@divisor+1,w
 17924  1673  3BF5               	subwfb	___awdiv@dividend+1,f
 17925  1674  1422               	bsf	___awdiv@quotient,0
 17926  1675                     l8958:	
 17927  1675  3001               	movlw	1
 17928  1676                     u10155:	
 17929  1676  36F3               	lsrf	___awdiv@divisor+1,f
 17930  1677  0CF2               	rrf	___awdiv@divisor,f
 17931  1678  0B89               	decfsz	9,f
 17932  1679  2E76               	goto	u10155
 17933  167A  3001               	movlw	1
 17934  167B  02A0               	subwf	___awdiv@counter,f
 17935  167C  1D03               	btfss	3,2
 17936  167D  2E63               	goto	l8952
 17937  167E                     l8962:	
 17938  167E  0821               	movf	___awdiv@sign,w
 17939  167F  1903               	btfsc	3,2
 17940  1680  2E86               	goto	l8966
 17941  1681  09A2               	comf	___awdiv@quotient,f
 17942  1682  09A3               	comf	___awdiv@quotient+1,f
 17943  1683  0AA2               	incf	___awdiv@quotient,f
 17944  1684  1903               	skipnz
 17945  1685  0AA3               	incf	___awdiv@quotient+1,f
 17946  1686                     l8966:	
 17947  1686  0823               	movf	___awdiv@quotient+1,w
 17948  1687  01F3               	clrf	?___awdiv+1
 17949  1688  07F3               	addwf	?___awdiv+1,f
 17950  1689  0822               	movf	___awdiv@quotient,w
 17951  168A  01F2               	clrf	?___awdiv
 17952  168B  07F2               	addwf	?___awdiv,f
 17953  168C  0008               	return
 17954  168D                     __end_of___awdiv:	
 17955                           
 17956                           	psect	text123
 17957  140E                     __ptext123:	
 17958 ;; *************** function _setDimmerLights_SwOff *****************
 17959 ;; Defined at:
 17960 ;;		line 690 in file "../src/Dimmer_B1.c"
 17961 ;; Parameters:    Size  Location     Type
 17962 ;;  sw              1    wreg     unsigned char 
 17963 ;; Auto vars:     Size  Location     Type
 17964 ;;  sw              1   70[BANK0 ] unsigned char 
 17965 ;; Return value:  Size  Location     Type
 17966 ;;		None               void
 17967 ;; Registers used:
 17968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17969 ;; Tracked objects:
 17970 ;;		On entry : 0/0
 17971 ;;		On exit  : 0/0
 17972 ;;		Unchanged: 0/0
 17973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;Total ram usage:        1 bytes
 17979 ;; Hardware stack levels used:    1
 17980 ;; Hardware stack levels required when called:    5
 17981 ;; This function calls:
 17982 ;;		_DimmerLights_SelectPointer
 17983 ;;		_getDelayOff_GO
 17984 ;;		_setDelayOff_GO
 17985 ;; This function is called by:
 17986 ;;		_DlyOff_Main
 17987 ;;		_Exception_Main
 17988 ;;		_setControl_Lights_Table
 17989 ;;		_setRFSW_Control
 17990 ;;		_setRFSW_AdjControl
 17991 ;;		_setSw_Main
 17992 ;; This function uses a non-reentrant model
 17993 ;;
 17994                           
 17995                           
 17996                           ;psect for function _setDimmerLights_SwOff
 17997  140E                     _setDimmerLights_SwOff:	
 17998                           
 17999                           ;incstack = 0
 18000                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18001                           ;setDimmerLights_SwOff@sw stored from wreg
 18002  140E  0020               	movlb	0	; select bank0
 18003  140F  00E6               	movwf	setDimmerLights_SwOff@sw
 18004                           
 18005                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18006  1410  0866               	movf	setDimmerLights_SwOff@sw,w
 18007  1411  319D  25AC  3194   	fcall	_DimmerLights_SelectPointer
 18008                           
 18009                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18010  1414  0020               	movlb	0	; select bank0
 18011  1415  086D               	movf	_DimmerLights,w
 18012  1416  0086               	movwf	6
 18013  1417  3001               	movlw	1	; select bank2/3
 18014  1418  0087               	movwf	7
 18015  1419  1C01               	btfss	1,0
 18016  141A  0008               	return
 18017                           
 18018                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18019  141B  086D               	movf	_DimmerLights,w
 18020  141C  0086               	movwf	6
 18021  141D  3001               	movlw	1	; select bank2/3
 18022  141E  0087               	movwf	7
 18023  141F  1001               	bcf	1,0
 18024                           
 18025                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18026  1420  0A6D               	incf	_DimmerLights,w
 18027  1421  0086               	movwf	6
 18028  1422  3001               	movlw	1	; select bank2/3
 18029  1423  0087               	movwf	7
 18030  1424  1C01               	btfss	1,0
 18031  1425  2C3C               	goto	l9358
 18032                           
 18033                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18034  1426  086D               	movf	_DimmerLights,w
 18035  1427  0086               	movwf	6
 18036  1428  3001               	movlw	1	; select bank2/3
 18037  1429  0087               	movwf	7
 18038  142A  1D81               	btfss	1,3
 18039  142B  0008               	return
 18040                           
 18041                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18042  142C  086D               	movf	_DimmerLights,w
 18043  142D  0086               	movwf	6
 18044  142E  3001               	movlw	1	; select bank2/3
 18045  142F  0087               	movwf	7
 18046  1430  1181               	bcf	1,3
 18047                           
 18048                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18049  1431  086D               	movf	_DimmerLights,w
 18050  1432  0086               	movwf	6
 18051  1433  3001               	movlw	1	; select bank2/3
 18052  1434  0087               	movwf	7
 18053  1435  1601               	bsf	1,4
 18054                           
 18055                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18056  1436  086D               	movf	_DimmerLights,w
 18057  1437  0086               	movwf	6
 18058  1438  3001               	movlw	1	; select bank2/3
 18059  1439  0087               	movwf	7
 18060  143A  1281               	bcf	1,5
 18061                           
 18062                           ;Dimmer_B1.c: 701: }
 18063                           ;Dimmer_B1.c: 702: } else {
 18064  143B  0008               	return
 18065  143C                     l9358:	
 18066                           
 18067                           ;Dimmer_B1.c: 703: DimmerLights->Trigger = 1;
 18068  143C  086D               	movf	_DimmerLights,w
 18069  143D  0086               	movwf	6
 18070  143E  3001               	movlw	1	; select bank2/3
 18071  143F  0087               	movwf	7
 18072  1440  1481               	bsf	1,1
 18073                           
 18074                           ;Dimmer_B1.c: 704: DimmerLights->Switch = 0;
 18075  1441  086D               	movf	_DimmerLights,w
 18076  1442  0086               	movwf	6
 18077  1443  3001               	movlw	1	; select bank2/3
 18078  1444  0087               	movwf	7
 18079  1445  1101               	bcf	1,2
 18080                           
 18081                           ;Dimmer_B1.c: 707: if (getDelayOff_GO(sw) == 1) {
 18082  1446  0866               	movf	setDimmerLights_SwOff@sw,w
 18083  1447  319C  245D  3194   	fcall	_getDelayOff_GO
 18084  144A  3A01               	xorlw	1
 18085  144B  1D03               	skipz
 18086  144C  0008               	return
 18087                           
 18088                           ;Dimmer_B1.c: 708: setDelayOff_GO(sw, 0, 0);
 18089  144D  0020               	movlb	0	; select bank0
 18090  144E  01DE               	clrf	setDelayOff_GO@command
 18091  144F  01DF               	clrf	setDelayOff_GO@value
 18092  1450  0866               	movf	setDimmerLights_SwOff@sw,w
 18093  1451  318B  23E6         	fcall	_setDelayOff_GO
 18094  1453  0008               	return
 18095  1454                     __end_of_setDimmerLights_SwOff:	
 18096                           
 18097                           	psect	text124
 18098  0BE6                     __ptext124:	
 18099 ;; *************** function _setDelayOff_GO *****************
 18100 ;; Defined at:
 18101 ;;		line 86 in file "../src/DelayOff_B1.c"
 18102 ;; Parameters:    Size  Location     Type
 18103 ;;  sw              1    wreg     unsigned char 
 18104 ;;  command         1   62[BANK0 ] unsigned char 
 18105 ;;  value           1   63[BANK0 ] unsigned char 
 18106 ;; Auto vars:     Size  Location     Type
 18107 ;;  sw              1   69[BANK0 ] unsigned char 
 18108 ;;  k               1   68[BANK0 ] unsigned char 
 18109 ;;  j               1   67[BANK0 ] unsigned char 
 18110 ;;  i               1   66[BANK0 ] unsigned char 
 18111 ;; Return value:  Size  Location     Type
 18112 ;;		None               void
 18113 ;; Registers used:
 18114 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18115 ;; Tracked objects:
 18116 ;;		On entry : 0/0
 18117 ;;		On exit  : 0/0
 18118 ;;		Unchanged: 0/0
 18119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;Total ram usage:        8 bytes
 18125 ;; Hardware stack levels used:    1
 18126 ;; Hardware stack levels required when called:    4
 18127 ;; This function calls:
 18128 ;;		_DelayOffPointSelect
 18129 ;;		___bmul
 18130 ;;		_setProductData
 18131 ;; This function is called by:
 18132 ;;		_setDimmerLights_SwOff
 18133 ;;		_setRFSW_Control
 18134 ;; This function uses a non-reentrant model
 18135 ;;
 18136                           
 18137                           
 18138                           ;psect for function _setDelayOff_GO
 18139  0BE6                     _setDelayOff_GO:	
 18140                           
 18141                           ;incstack = 0
 18142                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18143                           ;setDelayOff_GO@sw stored from wreg
 18144  0BE6  0020               	movlb	0	; select bank0
 18145  0BE7  00E5               	movwf	setDelayOff_GO@sw
 18146                           
 18147                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 18148  0BE8  0865               	movf	setDelayOff_GO@sw,w
 18149  0BE9  319D  2597  318B   	fcall	_DelayOffPointSelect
 18150                           
 18151                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 18152  0BEC  0020               	movlb	0	; select bank0
 18153  0BED  085E               	movf	setDelayOff_GO@command,w
 18154  0BEE  3A01               	xorlw	1
 18155  0BEF  3000               	movlw	0
 18156  0BF0  1903               	skipnz
 18157  0BF1  3001               	movlw	1
 18158  0BF2  00E0               	movwf	??_setDelayOff_GO
 18159  0BF3  0021               	movlb	1	; select bank1
 18160  0BF4  0842               	movf	_DelayOff^(0+128),w
 18161  0BF5  0086               	movwf	6
 18162  0BF6  3001               	movlw	1	; select bank2/3
 18163  0BF7  0087               	movwf	7
 18164  0BF8  0020               	movlb	0	; select bank0
 18165  0BF9  0DE0               	rlf	??_setDelayOff_GO,f
 18166  0BFA  0801               	movf	1,w
 18167  0BFB  0660               	xorwf	??_setDelayOff_GO,w
 18168  0BFC  39FD               	andlw	-3
 18169  0BFD  0660               	xorwf	??_setDelayOff_GO,w
 18170  0BFE  0081               	movwf	1
 18171                           
 18172                           ;DelayOff_B1.c: 92: if (command == 1) {
 18173  0BFF  085E               	movf	setDelayOff_GO@command,w
 18174  0C00  3A01               	xorlw	1
 18175  0C01  1D03               	skipz
 18176  0C02  2C4B               	goto	l9028
 18177                           
 18178                           ;DelayOff_B1.c: 93: char i = 5, j = 0, k = 0;
 18179  0C03  3005               	movlw	5
 18180  0C04  00E0               	movwf	??_setDelayOff_GO
 18181  0C05  0860               	movf	??_setDelayOff_GO,w
 18182  0C06  00E2               	movwf	setDelayOff_GO@i
 18183  0C07  01E3               	clrf	setDelayOff_GO@j
 18184  0C08  01E4               	clrf	setDelayOff_GO@k
 18185                           
 18186                           ;DelayOff_B1.c: 94: if (value <= 0x30) {
 18187  0C09  3031               	movlw	49
 18188  0C0A  025F               	subwf	setDelayOff_GO@value,w
 18189  0C0B  1803               	skipnc
 18190  0C0C  2C2A               	goto	l9016
 18191                           
 18192                           ;DelayOff_B1.c: 95: j = value & 0x0f;
 18193  0C0D  085F               	movf	setDelayOff_GO@value,w
 18194  0C0E  390F               	andlw	15
 18195  0C0F  00E0               	movwf	??_setDelayOff_GO
 18196  0C10  0860               	movf	??_setDelayOff_GO,w
 18197  0C11  00E3               	movwf	setDelayOff_GO@j
 18198                           
 18199                           ;DelayOff_B1.c: 96: k = (value >> 4) & 0x0f;
 18200  0C12  085F               	movf	setDelayOff_GO@value,w
 18201  0C13  00E0               	movwf	??_setDelayOff_GO
 18202  0C14  3004               	movlw	4
 18203  0C15                     u10245:	
 18204  0C15  36E0               	lsrf	??_setDelayOff_GO,f
 18205  0C16  0B89               	decfsz	9,f
 18206  0C17  2C15               	goto	u10245
 18207  0C18  0860               	movf	??_setDelayOff_GO,w
 18208  0C19  390F               	andlw	15
 18209  0C1A  00E1               	movwf	??_setDelayOff_GO+1
 18210  0C1B  0861               	movf	??_setDelayOff_GO+1,w
 18211  0C1C  00E4               	movwf	setDelayOff_GO@k
 18212                           
 18213                           ;DelayOff_B1.c: 97: i = j + (k * 10);
 18214  0C1D  300A               	movlw	10
 18215  0C1E  00E0               	movwf	??_setDelayOff_GO
 18216  0C1F  0860               	movf	??_setDelayOff_GO,w
 18217  0C20  00F2               	movwf	___bmul@multiplicand
 18218  0C21  0864               	movf	setDelayOff_GO@k,w
 18219  0C22  319D  2518  318B   	fcall	___bmul
 18220  0C25  0020               	movlb	0	; select bank0
 18221  0C26  0763               	addwf	setDelayOff_GO@j,w
 18222  0C27  00E1               	movwf	??_setDelayOff_GO+1
 18223  0C28  0861               	movf	??_setDelayOff_GO+1,w
 18224  0C29  00E2               	movwf	setDelayOff_GO@i
 18225  0C2A                     l9016:	
 18226                           
 18227                           ;DelayOff_B1.c: 98: }
 18228                           ;DelayOff_B1.c: 100: DelayOff->Value = i;
 18229  0C2A  0862               	movf	setDelayOff_GO@i,w
 18230  0C2B  00E0               	movwf	??_setDelayOff_GO
 18231  0C2C  0021               	movlb	1	; select bank1
 18232  0C2D  0A42               	incf	_DelayOff^(0+128),w
 18233  0C2E  0086               	movwf	6
 18234  0C2F  3001               	movlw	1	; select bank2/3
 18235  0C30  0087               	movwf	7
 18236  0C31  0020               	movlb	0	; select bank0
 18237  0C32  0860               	movf	??_setDelayOff_GO,w
 18238  0C33  0081               	movwf	1
 18239                           
 18240                           ;DelayOff_B1.c: 101: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 18241  0C34  300F               	movlw	15
 18242  0C35  055F               	andwf	setDelayOff_GO@value,w
 18243  0C36  00E0               	movwf	??_setDelayOff_GO
 18244  0C37  0860               	movf	??_setDelayOff_GO,w
 18245  0C38  3A05               	xorlw	5
 18246  0C39  1903               	skipnz
 18247  0C3A  2C3F               	goto	l9022
 18248  0C3B  085F               	movf	setDelayOff_GO@value,w
 18249  0C3C  390F               	andlw	15
 18250  0C3D  1D03               	btfss	3,2
 18251  0C3E  2C45               	goto	l9026
 18252  0C3F                     l9022:	
 18253  0C3F  3026               	movlw	38
 18254  0C40  025F               	subwf	setDelayOff_GO@value,w
 18255  0C41  1803               	skipnc
 18256  0C42  2C45               	goto	l9026
 18257                           
 18258                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 18259  0C43  085F               	movf	setDelayOff_GO@value,w
 18260  0C44  2C47               	goto	L13
 18261  0C45                     l9026:	
 18262                           ;DelayOff_B1.c: 103: } else {
 18263                           
 18264                           
 18265                           ;DelayOff_B1.c: 104: setProductData(26 + sw, 0x05);
 18266  0C45  3005               	movlw	5
 18267  0C46  0020               	movlb	0	; select bank0
 18268  0C47                     L13:	
 18269  0C47  00E0               	movwf	??_setDelayOff_GO
 18270  0C48  0860               	movf	??_setDelayOff_GO,w
 18271  0C49  00DA               	movwf	setProductData@value
 18272  0C4A  2C4D               	goto	L12
 18273  0C4B                     l9028:	
 18274                           ;DelayOff_B1.c: 105: }
 18275                           ;DelayOff_B1.c: 106: } else {
 18276                           
 18277                           
 18278                           ;DelayOff_B1.c: 107: setProductData(sw + 26, 0);
 18279  0C4B  0020               	movlb	0	; select bank0
 18280  0C4C  01DA               	clrf	setProductData@value
 18281  0C4D                     L12:	
 18282  0C4D  0865               	movf	setDelayOff_GO@sw,w
 18283  0C4E  3E1A               	addlw	26
 18284  0C4F  319C  2440         	fcall	_setProductData
 18285                           
 18286                           ;DelayOff_B1.c: 108: }
 18287                           ;DelayOff_B1.c: 109: DelayOff->SecondTime = 0;
 18288  0C51  0021               	movlb	1	; select bank1
 18289  0C52  0842               	movf	_DelayOff^(0+128),w
 18290  0C53  3E02               	addlw	2
 18291  0C54  0086               	movwf	6
 18292  0C55  3001               	movlw	1	; select bank2/3
 18293  0C56  0087               	movwf	7
 18294  0C57  3000               	movlw	0
 18295  0C58  3FC0               	movwi [0]fsr1
 18296  0C59  3FC1               	movwi [1]fsr1
 18297                           
 18298                           ;DelayOff_B1.c: 110: DelayOff->MinuteTime = 0;
 18299  0C5A  0842               	movf	_DelayOff^(0+128),w
 18300  0C5B  3E04               	addlw	4
 18301  0C5C  0086               	movwf	6
 18302  0C5D  3001               	movlw	1	; select bank2/3
 18303  0C5E  0087               	movwf	7
 18304  0C5F  0181               	clrf	1
 18305  0C60  0008               	return
 18306  0C61                     __end_of_setDelayOff_GO:	
 18307                           
 18308                           	psect	text125
 18309  1C40                     __ptext125:	
 18310 ;; *************** function _setProductData *****************
 18311 ;; Defined at:
 18312 ;;		line 592 in file "../src/Main_B1.c"
 18313 ;; Parameters:    Size  Location     Type
 18314 ;;  address         1    wreg     unsigned char 
 18315 ;;  value           1   58[BANK0 ] unsigned char 
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;  address         1   61[BANK0 ] unsigned char 
 18318 ;; Return value:  Size  Location     Type
 18319 ;;		None               void
 18320 ;; Registers used:
 18321 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18322 ;; Tracked objects:
 18323 ;;		On entry : 0/0
 18324 ;;		On exit  : 0/0
 18325 ;;		Unchanged: 0/0
 18326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18327 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;Total ram usage:        4 bytes
 18332 ;; Hardware stack levels used:    1
 18333 ;; Hardware stack levels required when called:    3
 18334 ;; This function calls:
 18335 ;;		Nothing
 18336 ;; This function is called by:
 18337 ;;		_setDelayOff_GO
 18338 ;;		_setDimmerLights_OnOff
 18339 ;;		_setDimmerLights_Dimming
 18340 ;;		_setTemp_Main
 18341 ;;		_setLog_Code
 18342 ;;		_setControl_Lights_Table
 18343 ;;		_setRFSW_AdjControl
 18344 ;;		_setRF_DimmerLights
 18345 ;; This function uses a non-reentrant model
 18346 ;;
 18347                           
 18348                           
 18349                           ;psect for function _setProductData
 18350  1C40                     _setProductData:	
 18351                           
 18352                           ;incstack = 0
 18353                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18354                           ;setProductData@address stored from wreg
 18355  1C40  0020               	movlb	0	; select bank0
 18356  1C41  00DD               	movwf	setProductData@address
 18357                           
 18358                           ;Main_B1.c: 593: product->Data[address] = value;
 18359  1C42  085A               	movf	setProductData@value,w
 18360  1C43  00DB               	movwf	??_setProductData
 18361  1C44  085D               	movf	setProductData@address,w
 18362  1C45  076F               	addwf	_product,w
 18363  1C46  00DC               	movwf	??_setProductData+1
 18364  1C47  085C               	movf	??_setProductData+1,w
 18365  1C48  0086               	movwf	6
 18366  1C49  3002               	movlw	2	; select bank4/5
 18367  1C4A  0087               	movwf	7
 18368  1C4B  085B               	movf	??_setProductData,w
 18369  1C4C  0081               	movwf	1
 18370  1C4D  0008               	return
 18371  1C4E                     __end_of_setProductData:	
 18372                           
 18373                           	psect	text126
 18374  1D18                     __ptext126:	
 18375 ;; *************** function ___bmul *****************
 18376 ;; Defined at:
 18377 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;  multiplier      1    wreg     unsigned char 
 18380 ;;  multiplicand    1    2[COMMON] unsigned char 
 18381 ;; Auto vars:     Size  Location     Type
 18382 ;;  multiplier      1    5[COMMON] unsigned char 
 18383 ;;  product         1    4[COMMON] unsigned char 
 18384 ;; Return value:  Size  Location     Type
 18385 ;;                  1    wreg      unsigned char 
 18386 ;; Registers used:
 18387 ;;		wreg, status,2, status,0
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18393 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;Total ram usage:        4 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; Hardware stack levels required when called:    3
 18400 ;; This function calls:
 18401 ;;		Nothing
 18402 ;; This function is called by:
 18403 ;;		_setDelayOff_GO
 18404 ;;		_DelayTimejudge
 18405 ;; This function uses a non-reentrant model
 18406 ;;
 18407                           
 18408                           
 18409                           ;psect for function ___bmul
 18410  1D18                     ___bmul:	
 18411                           
 18412                           ;incstack = 0
 18413                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 18414                           ;___bmul@multiplier stored from wreg
 18415  1D18  00F5               	movwf	___bmul@multiplier
 18416  1D19  01F4               	clrf	___bmul@product
 18417  1D1A                     l8882:	
 18418  1D1A  1C75               	btfss	___bmul@multiplier,0
 18419  1D1B  2D20               	goto	l8886
 18420  1D1C  0872               	movf	___bmul@multiplicand,w
 18421  1D1D  00F3               	movwf	??___bmul
 18422  1D1E  0873               	movf	??___bmul,w
 18423  1D1F  07F4               	addwf	___bmul@product,f
 18424  1D20                     l8886:	
 18425  1D20  1003               	clrc
 18426  1D21  0DF2               	rlf	___bmul@multiplicand,f
 18427  1D22  1003               	clrc
 18428  1D23  0CF5               	rrf	___bmul@multiplier,f
 18429  1D24  08F5               	movf	___bmul@multiplier,f
 18430  1D25  1D03               	skipz
 18431  1D26  2D1A               	goto	l8882
 18432  1D27  0874               	movf	___bmul@product,w
 18433  1D28  0008               	return
 18434  1D29                     __end_of___bmul:	
 18435                           
 18436                           	psect	text127
 18437  1C5D                     __ptext127:	
 18438 ;; *************** function _getDelayOff_GO *****************
 18439 ;; Defined at:
 18440 ;;		line 115 in file "../src/DelayOff_B1.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;  sw              1    wreg     unsigned char 
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;  sw              1    4[COMMON] unsigned char 
 18445 ;;  go              1    5[COMMON] unsigned char 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  1    wreg      unsigned char 
 18448 ;; Registers used:
 18449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;Total ram usage:        2 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    4
 18462 ;; This function calls:
 18463 ;;		_DelayOffPointSelect
 18464 ;; This function is called by:
 18465 ;;		_setDimmerLights_SwOff
 18466 ;;		_setRFSW_Control
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           
 18471                           ;psect for function _getDelayOff_GO
 18472  1C5D                     _getDelayOff_GO:	
 18473                           
 18474                           ;incstack = 0
 18475                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18476                           ;getDelayOff_GO@sw stored from wreg
 18477  1C5D  00F4               	movwf	getDelayOff_GO@sw
 18478                           
 18479                           ;DelayOff_B1.c: 116: DelayOffPointSelect(sw);
 18480  1C5E  0874               	movf	getDelayOff_GO@sw,w
 18481  1C5F  319D  2597         	fcall	_DelayOffPointSelect
 18482                           
 18483                           ;DelayOff_B1.c: 117: char go = DelayOff->GO == 1 ? 1 : 0;
 18484  1C61  0021               	movlb	1	; select bank1
 18485  1C62  0842               	movf	_DelayOff^(0+128),w
 18486  1C63  0086               	movwf	6
 18487  1C64  3001               	movlw	1	; select bank2/3
 18488  1C65  0087               	movwf	7
 18489  1C66  3000               	movlw	0
 18490  1C67  1881               	btfsc	1,1
 18491  1C68  3001               	movlw	1
 18492  1C69  00F5               	movwf	getDelayOff_GO@go
 18493                           
 18494                           ;DelayOff_B1.c: 118: return go;
 18495  1C6A  0875               	movf	getDelayOff_GO@go,w
 18496  1C6B  0008               	return
 18497  1C6C                     __end_of_getDelayOff_GO:	
 18498                           
 18499                           	psect	text128
 18500  1C4E                     __ptext128:	
 18501 ;; *************** function _getDimmerLights_Status *****************
 18502 ;; Defined at:
 18503 ;;		line 982 in file "../src/Dimmer_B1.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;  lights          1    wreg     unsigned char 
 18506 ;; Auto vars:     Size  Location     Type
 18507 ;;  lights          1    4[COMMON] unsigned char 
 18508 ;;  status          1    5[COMMON] unsigned char 
 18509 ;; Return value:  Size  Location     Type
 18510 ;;                  1    wreg      unsigned char 
 18511 ;; Registers used:
 18512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18513 ;; Tracked objects:
 18514 ;;		On entry : 0/0
 18515 ;;		On exit  : 0/0
 18516 ;;		Unchanged: 0/0
 18517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;Total ram usage:        2 bytes
 18523 ;; Hardware stack levels used:    1
 18524 ;; Hardware stack levels required when called:    4
 18525 ;; This function calls:
 18526 ;;		_DimmerLights_SelectPointer
 18527 ;; This function is called by:
 18528 ;;		_DlyOff_Main
 18529 ;;		_Exception_Main
 18530 ;;		_setControl_Lights_Table
 18531 ;;		_setRFSW_Control
 18532 ;;		_setRFSW_AdjControl
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           
 18537                           ;psect for function _getDimmerLights_Status
 18538  1C4E                     _getDimmerLights_Status:	
 18539                           
 18540                           ;incstack = 0
 18541                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18542                           ;getDimmerLights_Status@lights stored from wreg
 18543  1C4E  00F4               	movwf	getDimmerLights_Status@lights
 18544                           
 18545                           ;Dimmer_B1.c: 983: DimmerLights_SelectPointer(lights);
 18546  1C4F  0874               	movf	getDimmerLights_Status@lights,w
 18547  1C50  319D  25AC         	fcall	_DimmerLights_SelectPointer
 18548                           
 18549                           ;Dimmer_B1.c: 984: char status = DimmerLights->Status == 1 ? 1 : 0;
 18550  1C52  0020               	movlb	0	; select bank0
 18551  1C53  0A6D               	incf	_DimmerLights,w
 18552  1C54  0086               	movwf	6
 18553  1C55  3001               	movlw	1	; select bank2/3
 18554  1C56  0087               	movwf	7
 18555  1C57  3000               	movlw	0
 18556  1C58  1801               	btfsc	1,0
 18557  1C59  3001               	movlw	1
 18558  1C5A  00F5               	movwf	getDimmerLights_Status@status
 18559                           
 18560                           ;Dimmer_B1.c: 985: return status;
 18561  1C5B  0875               	movf	getDimmerLights_Status@status,w
 18562  1C5C  0008               	return
 18563  1C5D                     __end_of_getDimmerLights_Status:	
 18564                           
 18565                           	psect	text129
 18566  1DAC                     __ptext129:	
 18567 ;; *************** function _DimmerLights_SelectPointer *****************
 18568 ;; Defined at:
 18569 ;;		line 572 in file "../src/Dimmer_B1.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;  lights          1    wreg     unsigned char 
 18572 ;; Auto vars:     Size  Location     Type
 18573 ;;  lights          1    3[COMMON] unsigned char 
 18574 ;; Return value:  Size  Location     Type
 18575 ;;		None               void
 18576 ;; Registers used:
 18577 ;;		wreg
 18578 ;; Tracked objects:
 18579 ;;		On entry : 0/0
 18580 ;;		On exit  : 0/0
 18581 ;;		Unchanged: 0/0
 18582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18587 ;;Total ram usage:        2 bytes
 18588 ;; Hardware stack levels used:    1
 18589 ;; Hardware stack levels required when called:    3
 18590 ;; This function calls:
 18591 ;;		Nothing
 18592 ;; This function is called by:
 18593 ;;		_setDimmerLights_SwOn
 18594 ;;		_setDimmerLights_SwOff
 18595 ;;		_setDimmerLights_DimmingOn
 18596 ;;		_setDimmerLights_Main
 18597 ;;		_getDimmerLights_Status
 18598 ;;		_setDimmerLights_DimmingRun
 18599 ;;		_setDimmerLights_Status
 18600 ;; This function uses a non-reentrant model
 18601 ;;
 18602                           
 18603                           
 18604                           ;psect for function _DimmerLights_SelectPointer
 18605  1DAC                     _DimmerLights_SelectPointer:	
 18606                           
 18607                           ;incstack = 0
 18608                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18609                           ;DimmerLights_SelectPointer@lights stored from wreg
 18610  1DAC  00F3               	movwf	DimmerLights_SelectPointer@lights
 18611                           
 18612                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18613  1DAD  0873               	movf	DimmerLights_SelectPointer@lights,w
 18614  1DAE  3A01               	xorlw	1
 18615  1DAF  1D03               	skipz
 18616  1DB0  2DB7               	goto	l9046
 18617                           
 18618                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18619  1DB1  30BE               	movlw	_DimmerLights1& (0+255)
 18620  1DB2  00F2               	movwf	??_DimmerLights_SelectPointer
 18621  1DB3  0872               	movf	??_DimmerLights_SelectPointer,w
 18622  1DB4  0020               	movlb	0	; select bank0
 18623  1DB5  00ED               	movwf	_DimmerLights
 18624                           
 18625                           ;Dimmer_B1.c: 576: }
 18626  1DB6  0008               	return
 18627  1DB7                     l9046:	
 18628                           
 18629                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18630  1DB7  0873               	movf	DimmerLights_SelectPointer@lights,w
 18631  1DB8  3A02               	xorlw	2
 18632  1DB9  1D03               	skipz
 18633  1DBA  0008               	return
 18634                           
 18635                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18636  1DBB  30C7               	movlw	_DimmerLights2& (0+255)
 18637  1DBC  00F2               	movwf	??_DimmerLights_SelectPointer
 18638  1DBD  0872               	movf	??_DimmerLights_SelectPointer,w
 18639  1DBE  0020               	movlb	0	; select bank0
 18640  1DBF  00ED               	movwf	_DimmerLights
 18641  1DC0  0008               	return
 18642  1DC1                     __end_of_DimmerLights_SelectPointer:	
 18643                           
 18644                           	psect	text130
 18645  1B6E                     __ptext130:	
 18646 ;; *************** function _DelayOff_Initialization *****************
 18647 ;; Defined at:
 18648 ;;		line 26 in file "../src/DelayOff_B1.c"
 18649 ;; Parameters:    Size  Location     Type
 18650 ;;		None
 18651 ;; Auto vars:     Size  Location     Type
 18652 ;;		None
 18653 ;; Return value:  Size  Location     Type
 18654 ;;		None               void
 18655 ;; Registers used:
 18656 ;;		wreg, status,2, status,0, pclath, cstack
 18657 ;; Tracked objects:
 18658 ;;		On entry : 0/0
 18659 ;;		On exit  : 0/0
 18660 ;;		Unchanged: 0/0
 18661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;Total ram usage:        0 bytes
 18667 ;; Hardware stack levels used:    1
 18668 ;; Hardware stack levels required when called:    5
 18669 ;; This function calls:
 18670 ;;		_DlyOff_Initialization
 18671 ;; This function is called by:
 18672 ;;		_main
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           
 18677                           ;psect for function _DelayOff_Initialization
 18678  1B6E                     _DelayOff_Initialization:	
 18679                           
 18680                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18681                           
 18682                           ;incstack = 0
 18683                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18684  1B6E  3001               	movlw	1
 18685  1B6F  319B  2335  319B   	fcall	_DlyOff_Initialization
 18686                           
 18687                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18688  1B72  3002               	movlw	2
 18689  1B73  319B  2335         	fcall	_DlyOff_Initialization
 18690  1B75  0008               	return
 18691  1B76                     __end_of_DelayOff_Initialization:	
 18692                           
 18693                           	psect	text131
 18694  1B35                     __ptext131:	
 18695 ;; *************** function _DlyOff_Initialization *****************
 18696 ;; Defined at:
 18697 ;;		line 56 in file "../src/DelayOff_B1.c"
 18698 ;; Parameters:    Size  Location     Type
 18699 ;;  sw              1    wreg     unsigned char 
 18700 ;; Auto vars:     Size  Location     Type
 18701 ;;  sw              1    4[COMMON] unsigned char 
 18702 ;; Return value:  Size  Location     Type
 18703 ;;		None               void
 18704 ;; Registers used:
 18705 ;;		wreg, status,2, status,0, pclath, cstack
 18706 ;; Tracked objects:
 18707 ;;		On entry : 0/0
 18708 ;;		On exit  : 0/0
 18709 ;;		Unchanged: 0/0
 18710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;Total ram usage:        1 bytes
 18716 ;; Hardware stack levels used:    1
 18717 ;; Hardware stack levels required when called:    4
 18718 ;; This function calls:
 18719 ;;		_DelayOffPointSelect
 18720 ;; This function is called by:
 18721 ;;		_DelayOff_Initialization
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           
 18726                           ;psect for function _DlyOff_Initialization
 18727  1B35                     _DlyOff_Initialization:	
 18728                           
 18729                           ;incstack = 0
 18730                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18731                           ;DlyOff_Initialization@sw stored from wreg
 18732  1B35  00F4               	movwf	DlyOff_Initialization@sw
 18733                           
 18734                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18735  1B36  0874               	movf	DlyOff_Initialization@sw,w
 18736  1B37  319D  2597         	fcall	_DelayOffPointSelect
 18737  1B39  0008               	return
 18738  1B3A                     __end_of_DlyOff_Initialization:	
 18739                           
 18740                           	psect	text132
 18741  1D97                     __ptext132:	
 18742 ;; *************** function _DelayOffPointSelect *****************
 18743 ;; Defined at:
 18744 ;;		line 7 in file "../src/DelayOff_B1.c"
 18745 ;; Parameters:    Size  Location     Type
 18746 ;;  sw              1    wreg     unsigned char 
 18747 ;; Auto vars:     Size  Location     Type
 18748 ;;  sw              1    3[COMMON] unsigned char 
 18749 ;; Return value:  Size  Location     Type
 18750 ;;		None               void
 18751 ;; Registers used:
 18752 ;;		wreg
 18753 ;; Tracked objects:
 18754 ;;		On entry : 0/0
 18755 ;;		On exit  : 0/0
 18756 ;;		Unchanged: 0/0
 18757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18761 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18762 ;;Total ram usage:        2 bytes
 18763 ;; Hardware stack levels used:    1
 18764 ;; Hardware stack levels required when called:    3
 18765 ;; This function calls:
 18766 ;;		Nothing
 18767 ;; This function is called by:
 18768 ;;		_DlyOff_Initialization
 18769 ;;		_DlyOff_Main
 18770 ;;		_setDelayOff_GO
 18771 ;;		_getDelayOff_GO
 18772 ;; This function uses a non-reentrant model
 18773 ;;
 18774                           
 18775                           
 18776                           ;psect for function _DelayOffPointSelect
 18777  1D97                     _DelayOffPointSelect:	
 18778                           
 18779                           ;incstack = 0
 18780                           ; Regs used in _DelayOffPointSelect: [wreg]
 18781                           ;DelayOffPointSelect@sw stored from wreg
 18782  1D97  00F3               	movwf	DelayOffPointSelect@sw
 18783                           
 18784                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18785  1D98  0873               	movf	DelayOffPointSelect@sw,w
 18786  1D99  3A01               	xorlw	1
 18787  1D9A  1D03               	skipz
 18788  1D9B  2DA2               	goto	l8874
 18789                           
 18790                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18791  1D9C  305F               	movlw	_DlySw1& (0+255)
 18792  1D9D  00F2               	movwf	??_DelayOffPointSelect
 18793  1D9E  0872               	movf	??_DelayOffPointSelect,w
 18794  1D9F  0021               	movlb	1	; select bank1
 18795  1DA0  00C2               	movwf	_DelayOff^(0+128)
 18796                           
 18797                           ;DelayOff_B1.c: 11: }
 18798  1DA1  0008               	return
 18799  1DA2                     l8874:	
 18800                           
 18801                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18802  1DA2  0873               	movf	DelayOffPointSelect@sw,w
 18803  1DA3  3A02               	xorlw	2
 18804  1DA4  1D03               	skipz
 18805  1DA5  0008               	return
 18806                           
 18807                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18808  1DA6  30E2               	movlw	_DlySw2& (0+255)
 18809  1DA7  00F2               	movwf	??_DelayOffPointSelect
 18810  1DA8  0872               	movf	??_DelayOffPointSelect,w
 18811  1DA9  0021               	movlb	1	; select bank1
 18812  1DAA  00C2               	movwf	_DelayOff^(0+128)
 18813  1DAB  0008               	return
 18814  1DAC                     __end_of_DelayOffPointSelect:	
 18815                           
 18816                           	psect	text133
 18817  13C8                     __ptext133:	
 18818 ;; *************** function _Buzzer_Main *****************
 18819 ;; Defined at:
 18820 ;;		line 46 in file "../src/Buzzer_B1.c"
 18821 ;; Parameters:    Size  Location     Type
 18822 ;;		None
 18823 ;; Auto vars:     Size  Location     Type
 18824 ;;		None
 18825 ;; Return value:  Size  Location     Type
 18826 ;;		None               void
 18827 ;; Registers used:
 18828 ;;		wreg, status,2, status,0
 18829 ;; Tracked objects:
 18830 ;;		On entry : 0/0
 18831 ;;		On exit  : 0/0
 18832 ;;		Unchanged: 0/0
 18833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18837 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18838 ;;Total ram usage:        1 bytes
 18839 ;; Hardware stack levels used:    1
 18840 ;; Hardware stack levels required when called:    3
 18841 ;; This function calls:
 18842 ;;		Nothing
 18843 ;; This function is called by:
 18844 ;;		_main
 18845 ;; This function uses a non-reentrant model
 18846 ;;
 18847                           
 18848                           
 18849                           ;psect for function _Buzzer_Main
 18850  13C8                     _Buzzer_Main:	
 18851                           
 18852                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18853                           
 18854                           ;incstack = 0
 18855                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18856  13C8  0021               	movlb	1	; select bank1
 18857  13C9  1CAE               	btfss	_Buz1^(0+128),1
 18858  13CA  0008               	return
 18859                           
 18860                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18861  13CB  3001               	movlw	1
 18862  13CC  07AF               	addwf	(_Buz1^(0+128)+1),f
 18863  13CD  3000               	movlw	0
 18864  13CE  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18865                           
 18866                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18867  13CF  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18868  13D0  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18869  13D1  1D03               	skipz
 18870  13D2  2BD5               	goto	u8615
 18871  13D3  0834               	movf	(_Buz1^(0+128)+6),w
 18872  13D4  022F               	subwf	(_Buz1^(0+128)+1),w
 18873  13D5                     u8615:	
 18874  13D5  1C03               	skipc
 18875  13D6  0008               	return
 18876                           
 18877                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18878  13D7  01AF               	clrf	(_Buz1^(0+128)+1)
 18879  13D8  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18880                           
 18881                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18882  13D9  12AE               	bcf	_Buz1^(0+128),5
 18883  13DA  0020               	movlb	0	; select bank0
 18884  13DB  1D8D               	btfss	13,3	;volatile
 18885  13DC  2BDF               	goto	l8116
 18886  13DD  0021               	movlb	1	; select bank1
 18887  13DE  16AE               	bsf	_Buz1^(0+128),5
 18888  13DF                     l8116:	
 18889                           
 18890                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18891  13DF  0021               	movlb	1	; select bank1
 18892  13E0  1AAE               	btfsc	_Buz1^(0+128),5
 18893  13E1  2C07               	goto	l104
 18894                           
 18895                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18896  13E2  08B1               	movf	(_Buz1^(0+128)+3),f
 18897  13E3  1D03               	skipz
 18898  13E4  2C03               	goto	l105
 18899                           
 18900                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18901  13E5  1DAE               	btfss	_Buz1^(0+128),3
 18902  13E6  2BF3               	goto	l106
 18903                           
 18904                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18905  13E7  11AE               	bcf	_Buz1^(0+128),3
 18906                           
 18907                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18908  13E8  0832               	movf	(_Buz1^(0+128)+4),w
 18909  13E9  00F2               	movwf	??_Buzzer_Main
 18910  13EA  0872               	movf	??_Buzzer_Main,w
 18911  13EB  00B1               	movwf	(_Buz1^(0+128)+3)
 18912                           
 18913                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18914  13EC  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18915  13ED  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18916  13EE  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18917  13EF  0836               	movf	(_Buz1^(0+128)+8),w
 18918  13F0  01B4               	clrf	(_Buz1^(0+128)+6)
 18919  13F1  07B4               	addwf	(_Buz1^(0+128)+6),f
 18920                           
 18921                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18922  13F2  0008               	return
 18923  13F3                     l106:	
 18924  13F3  1E2E               	btfss	_Buz1^(0+128),4
 18925  13F4  2C01               	goto	l108
 18926                           
 18927                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18928  13F5  122E               	bcf	_Buz1^(0+128),4
 18929                           
 18930                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18931  13F6  0833               	movf	(_Buz1^(0+128)+5),w
 18932  13F7  00F2               	movwf	??_Buzzer_Main
 18933  13F8  0872               	movf	??_Buzzer_Main,w
 18934  13F9  00B1               	movwf	(_Buz1^(0+128)+3)
 18935                           
 18936                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18937  13FA  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18938  13FB  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18939  13FC  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18940  13FD  0838               	movf	(_Buz1^(0+128)+10),w
 18941  13FE  01B4               	clrf	(_Buz1^(0+128)+6)
 18942  13FF  07B4               	addwf	(_Buz1^(0+128)+6),f
 18943                           
 18944                           ;Buzzer_B1.c: 62: } else {
 18945  1400  0008               	return
 18946  1401                     l108:	
 18947                           
 18948                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18949  1401  10AE               	bcf	_Buz1^(0+128),1
 18950                           
 18951                           ;Buzzer_B1.c: 64: }
 18952                           ;Buzzer_B1.c: 65: } else {
 18953  1402  0008               	return
 18954  1403                     l105:	
 18955                           
 18956                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18957  1403  16AE               	bsf	_Buz1^(0+128),5
 18958                           
 18959                           ;Buzzer_B1.c: 68: RB3 = 1;
 18960  1404  0020               	movlb	0	; select bank0
 18961  1405  158D               	bsf	13,3	;volatile
 18962                           
 18963                           ;Buzzer_B1.c: 69: }
 18964                           ;Buzzer_B1.c: 70: } else {
 18965  1406  0008               	return
 18966  1407                     l104:	
 18967                           
 18968                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18969  1407  12AE               	bcf	_Buz1^(0+128),5
 18970                           
 18971                           ;Buzzer_B1.c: 73: RB3 = 0;
 18972  1408  0020               	movlb	0	; select bank0
 18973  1409  118D               	bcf	13,3	;volatile
 18974                           
 18975                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18976  140A  3001               	movlw	1
 18977  140B  0021               	movlb	1	; select bank1
 18978  140C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18979  140D  0008               	return
 18980  140E                     __end_of_Buzzer_Main:	
 18981                           
 18982                           	psect	text134
 18983  1B13                     __ptext134:	
 18984 ;; *************** function _Buzzer_Initialization *****************
 18985 ;; Defined at:
 18986 ;;		line 11 in file "../src/Buzzer_B1.c"
 18987 ;; Parameters:    Size  Location     Type
 18988 ;;		None
 18989 ;; Auto vars:     Size  Location     Type
 18990 ;;		None
 18991 ;; Return value:  Size  Location     Type
 18992 ;;		None               void
 18993 ;; Registers used:
 18994 ;;		None
 18995 ;; Tracked objects:
 18996 ;;		On entry : 0/0
 18997 ;;		On exit  : 0/0
 18998 ;;		Unchanged: 0/0
 18999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;Total ram usage:        0 bytes
 19005 ;; Hardware stack levels used:    1
 19006 ;; Hardware stack levels required when called:    3
 19007 ;; This function calls:
 19008 ;;		Nothing
 19009 ;; This function is called by:
 19010 ;;		_main
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           
 19015                           ;psect for function _Buzzer_Initialization
 19016  1B13                     _Buzzer_Initialization:	
 19017                           
 19018                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19019                           
 19020                           ;incstack = 0
 19021                           ; Regs used in _Buzzer_Initialization: []
 19022  1B13  0021               	movlb	1	; select bank1
 19023  1B14  142E               	bsf	_Buz1^(0+128),0
 19024  1B15  0008               	return
 19025  1B16                     __end_of_Buzzer_Initialization:	
 19026                           
 19027                           	psect	intentry
 19028  0004                     __pintentry:	
 19029 ;; *************** function _ISR *****************
 19030 ;; Defined at:
 19031 ;;		line 112 in file "../src/MCU_B1.c"
 19032 ;; Parameters:    Size  Location     Type
 19033 ;;		None
 19034 ;; Auto vars:     Size  Location     Type
 19035 ;;		None
 19036 ;; Return value:  Size  Location     Type
 19037 ;;		None               void
 19038 ;; Registers used:
 19039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19040 ;; Tracked objects:
 19041 ;;		On entry : 0/0
 19042 ;;		On exit  : 0/0
 19043 ;;		Unchanged: 0/0
 19044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19049 ;;Total ram usage:        1 bytes
 19050 ;; Hardware stack levels used:    1
 19051 ;; Hardware stack levels required when called:    2
 19052 ;; This function calls:
 19053 ;;		_IOC_ISR
 19054 ;;		_TMR1_ISR
 19055 ;; This function is called by:
 19056 ;;		Interrupt level 1
 19057 ;; This function uses a non-reentrant model
 19058 ;;
 19059                           
 19060  0004                     _ISR:	
 19061                           
 19062                           ;incstack = 0
 19063                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19064  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19065  0005  3180               	pagesel	$
 19066  0006  0020               	movlb	0	; select bank0
 19067  0007  087F               	movf	127,w
 19068  0008  00F1               	movwf	??_ISR
 19069                           
 19070                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19071  0009  198B               	btfsc	11,3	;volatile
 19072  000A  1C0B               	btfss	11,0	;volatile
 19073  000B  2813               	goto	i1l1384
 19074  000C  0027               	movlb	7	; select bank7
 19075  000D  1D16               	btfss	22,2	;volatile
 19076  000E  2813               	goto	i1l1384
 19077                           
 19078                           ;MCU_B1.c: 116: IOC_ISR();
 19079  000F  319B  23CF  3180   	fcall	_IOC_ISR
 19080                           
 19081                           ;MCU_B1.c: 117: }
 19082  0012  281B               	goto	i1l1387
 19083  0013                     i1l1384:	
 19084                           
 19085                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 19086  0013  0021               	movlb	1	; select bank1
 19087  0014  1C11               	btfss	17,0	;volatile
 19088  0015  281B               	goto	i1l1387
 19089  0016  0020               	movlb	0	; select bank0
 19090  0017  1C11               	btfss	17,0	;volatile
 19091  0018  281B               	goto	i1l1387
 19092                           
 19093                           ;MCU_B1.c: 126: TMR1_ISR();
 19094  0019  319F  27DF         	fcall	_TMR1_ISR
 19095  001B                     i1l1387:	
 19096                           ;MCU_B1.c: 127: }
 19097                           ;MCU_B1.c: 143: return;
 19098                           
 19099  001B  0871               	movf	??_ISR,w
 19100  001C  0020               	movlb	0	; select bank0
 19101  001D  00FF               	movwf	127
 19102  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19103  001F  0009               	retfie
 19104  0020                     __end_of_ISR:	
 19105                           
 19106                           	psect	text136
 19107  1FDF                     __ptext136:	
 19108 ;; *************** function _TMR1_ISR *****************
 19109 ;; Defined at:
 19110 ;;		line 231 in file "../src/MCU_B1.c"
 19111 ;; Parameters:    Size  Location     Type
 19112 ;;		None
 19113 ;; Auto vars:     Size  Location     Type
 19114 ;;		None
 19115 ;; Return value:  Size  Location     Type
 19116 ;;		None               void
 19117 ;; Registers used:
 19118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19119 ;; Tracked objects:
 19120 ;;		On entry : 0/0
 19121 ;;		On exit  : 0/0
 19122 ;;		Unchanged: 0/0
 19123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19128 ;;Total ram usage:        0 bytes
 19129 ;; Hardware stack levels used:    1
 19130 ;; Hardware stack levels required when called:    1
 19131 ;; This function calls:
 19132 ;;		_DimmerLights_MOSFET_TMR_1
 19133 ;;		_DimmerLights_MOSFET_TMR_2
 19134 ;; This function is called by:
 19135 ;;		_ISR
 19136 ;; This function uses a non-reentrant model
 19137 ;;
 19138                           
 19139                           
 19140                           ;psect for function _TMR1_ISR
 19141  1FDF                     _TMR1_ISR:	
 19142                           
 19143                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 19144                           
 19145                           ;incstack = 0
 19146                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19147  1FDF  30FA               	movlw	250
 19148  1FE0  0020               	movlb	0	; select bank0
 19149  1FE1  0097               	movwf	23	;volatile
 19150                           
 19151                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 19152  1FE2  3038               	movlw	56
 19153  1FE3  0096               	movwf	22	;volatile
 19154                           
 19155                           ;MCU_B1.c: 235: TMR1IF = 0;
 19156  1FE4  1011               	bcf	17,0	;volatile
 19157                           
 19158                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 19159  1FE5  3195  2542  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19160                           
 19161                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 19162  1FE8  3195  2594  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19163                           
 19164                           ;MCU_B1.c: 254: Timer1.Count++;
 19165  1FEB  3001               	movlw	1
 19166  1FEC  0021               	movlb	1	; select bank1
 19167  1FED  07BB               	addwf	(_Timer1^(0+128)+1),f
 19168  1FEE  3000               	movlw	0
 19169  1FEF  3DBC               	addwfc	((_Timer1+1)^(0+128)+1),f
 19170                           
 19171                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 19172  1FF0  3001               	movlw	1
 19173  1FF1  3EBA               	addlw	_Timer1& (0+255)
 19174  1FF2  0086               	movwf	6
 19175  1FF3  0187               	clrf	7
 19176  1FF4  3F40               	moviw [0]fsr1
 19177  1FF5  3AC8               	xorlw	200
 19178  1FF6  1D03               	skipz
 19179  1FF7  2FFA               	goto	u872_25
 19180  1FF8  3F41               	moviw [1]fsr1
 19181  1FF9  3A00               	xorlw	0
 19182  1FFA                     u872_25:	
 19183  1FFA  1D03               	skipz
 19184  1FFB  0008               	return
 19185                           
 19186                           ;MCU_B1.c: 256: Timer1.Count = 0;
 19187  1FFC  01BB               	clrf	(_Timer1^(0+128)+1)
 19188  1FFD  01BC               	clrf	((_Timer1+1)^(0+128)+1)
 19189                           
 19190                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 19191  1FFE  143A               	bsf	_Timer1^(0+128),0
 19192  1FFF  0008               	return
 19193  2000                     __end_of_TMR1_ISR:	
 19194                           
 19195                           	psect	text137
 19196  1594                     __ptext137:	
 19197 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19198 ;; Defined at:
 19199 ;;		line 1249 in file "../src/Dimmer_B1.c"
 19200 ;; Parameters:    Size  Location     Type
 19201 ;;		None
 19202 ;; Auto vars:     Size  Location     Type
 19203 ;;		None
 19204 ;; Return value:  Size  Location     Type
 19205 ;;		None               void
 19206 ;; Registers used:
 19207 ;;		wreg, status,2, status,0
 19208 ;; Tracked objects:
 19209 ;;		On entry : 0/0
 19210 ;;		On exit  : 0/0
 19211 ;;		Unchanged: 0/0
 19212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19217 ;;Total ram usage:        1 bytes
 19218 ;; Hardware stack levels used:    1
 19219 ;; This function calls:
 19220 ;;		Nothing
 19221 ;; This function is called by:
 19222 ;;		_TMR1_ISR
 19223 ;; This function uses a non-reentrant model
 19224 ;;
 19225                           
 19226                           
 19227                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19228  1594                     _DimmerLights_MOSFET_TMR_2:	
 19229                           
 19230                           ;Dimmer_B1.c: 1250: if (DimmerIntr2.Start == 1) {
 19231                           
 19232                           ;incstack = 0
 19233                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19234  1594  0021               	movlb	1	; select bank1
 19235  1595  1D65               	btfss	_DimmerIntr2^(0+128),2
 19236  1596  2DA1               	goto	i1l7666
 19237                           
 19238                           ;Dimmer_B1.c: 1251: DimmerIntr2.Count++;
 19239  1597  3001               	movlw	1
 19240  1598  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19241  1599  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19242  159A  07E6               	addwf	(_DimmerIntr2^(0+128)+1),f
 19243                           
 19244                           ;Dimmer_B1.c: 1252: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19245  159B  3035               	movlw	53
 19246  159C  0266               	subwf	(_DimmerIntr2^(0+128)+1),w
 19247  159D  1C03               	skipc
 19248  159E  2DA1               	goto	i1l7666
 19249                           
 19250                           ;Dimmer_B1.c: 1253: DimmerIntr2.Count = 0;
 19251  159F  01E6               	clrf	(_DimmerIntr2^(0+128)+1)
 19252                           
 19253                           ;Dimmer_B1.c: 1254: DimmerIntr2.Start = 0;
 19254  15A0  1165               	bcf	_DimmerIntr2^(0+128),2
 19255  15A1                     i1l7666:	
 19256                           
 19257                           ;Dimmer_B1.c: 1255: }
 19258                           ;Dimmer_B1.c: 1256: }
 19259                           ;Dimmer_B1.c: 1258: if (DimmerIntr2.GO == 1) {
 19260  15A1  1C65               	btfss	_DimmerIntr2^(0+128),0
 19261  15A2  2DAE               	goto	i1l996
 19262                           
 19263                           ;Dimmer_B1.c: 1259: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19264  15A3  0869               	movf	(_DimmerIntr2^(0+128)+4),w
 19265  15A4  0266               	subwf	(_DimmerIntr2^(0+128)+1),w
 19266  15A5  1C03               	skipc
 19267  15A6  0008               	return
 19268                           
 19269                           ;Dimmer_B1.c: 1260: DimmerIntr2.GO = 0;
 19270  15A7  1065               	bcf	_DimmerIntr2^(0+128),0
 19271                           
 19272                           ;Dimmer_B1.c: 1261: DimmerIntr2.Tune = 1;
 19273  15A8  14E5               	bsf	_DimmerIntr2^(0+128),1
 19274                           
 19275                           ;Dimmer_B1.c: 1263: if (DimmerIntr2.ControlStatus == 1) {
 19276  15A9  1DE5               	btfss	_DimmerIntr2^(0+128),3
 19277  15AA  0008               	return
 19278                           
 19279                           ;Dimmer_B1.c: 1264: RB4 = 0;
 19280  15AB  0020               	movlb	0	; select bank0
 19281  15AC  120D               	bcf	13,4	;volatile
 19282                           
 19283                           ;Dimmer_B1.c: 1266: }
 19284                           ;Dimmer_B1.c: 1267: }
 19285                           ;Dimmer_B1.c: 1268: } else {
 19286  15AD  0008               	return
 19287  15AE                     i1l996:	
 19288                           
 19289                           ;Dimmer_B1.c: 1269: if (DimmerIntr2.Tune == 1) {
 19290  15AE  1CE5               	btfss	_DimmerIntr2^(0+128),1
 19291  15AF  0008               	return
 19292                           
 19293                           ;Dimmer_B1.c: 1270: DimmerIntr2.Tune = 0;
 19294  15B0  10E5               	bcf	_DimmerIntr2^(0+128),1
 19295                           
 19296                           ;Dimmer_B1.c: 1271: DimmerIntr2.TuneTime++;
 19297  15B1  3001               	movlw	1
 19298  15B2  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19299  15B3  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19300  15B4  07E7               	addwf	(_DimmerIntr2^(0+128)+2),f
 19301                           
 19302                           ;Dimmer_B1.c: 1272: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19303  15B5  0868               	movf	(_DimmerIntr2^(0+128)+3),w
 19304  15B6  0267               	subwf	(_DimmerIntr2^(0+128)+2),w
 19305  15B7  1C03               	skipc
 19306  15B8  0008               	return
 19307                           
 19308                           ;Dimmer_B1.c: 1273: DimmerIntr2.TuneTime = 0;
 19309  15B9  01E7               	clrf	(_DimmerIntr2^(0+128)+2)
 19310                           
 19311                           ;Dimmer_B1.c: 1274: if (DimmerIntr2.Dimming_Sw == 1) {
 19312  15BA  1E65               	btfss	_DimmerIntr2^(0+128),4
 19313  15BB  2DD2               	goto	i1l1002
 19314                           
 19315                           ;Dimmer_B1.c: 1275: if (DimmerIntr2.Dimming_Status == 0) {
 19316  15BC  1AE5               	btfsc	_DimmerIntr2^(0+128),5
 19317  15BD  2DC9               	goto	i1l7690
 19318                           
 19319                           ;Dimmer_B1.c: 1276: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19320  15BE  3034               	movlw	52
 19321  15BF  0269               	subwf	(_DimmerIntr2^(0+128)+4),w
 19322  15C0  1803               	skipnc
 19323  15C1  2DC7               	goto	i1l1004
 19324                           
 19325                           ;Dimmer_B1.c: 1277: DimmerIntr2.DimmingValue++;
 19326  15C2  3001               	movlw	1
 19327  15C3  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19328  15C4  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19329  15C5  07E9               	addwf	(_DimmerIntr2^(0+128)+4),f
 19330                           
 19331                           ;Dimmer_B1.c: 1278: } else {
 19332  15C6  0008               	return
 19333  15C7                     i1l1004:	
 19334                           
 19335                           ;Dimmer_B1.c: 1279: DimmerIntr2.Dimming_Status = 1;
 19336  15C7  16E5               	bsf	_DimmerIntr2^(0+128),5
 19337                           
 19338                           ;Dimmer_B1.c: 1280: }
 19339                           ;Dimmer_B1.c: 1281: } else {
 19340  15C8  0008               	return
 19341  15C9                     i1l7690:	
 19342                           
 19343                           ;Dimmer_B1.c: 1282: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19344  15C9  3011               	movlw	17
 19345  15CA  0269               	subwf	(_DimmerIntr2^(0+128)+4),w
 19346  15CB  1C03               	skipc
 19347  15CC  2DD0               	goto	i1l1007
 19348                           
 19349                           ;Dimmer_B1.c: 1283: DimmerIntr2.DimmingValue--;
 19350  15CD  3001               	movlw	1
 19351  15CE  02E9               	subwf	(_DimmerIntr2^(0+128)+4),f
 19352                           
 19353                           ;Dimmer_B1.c: 1284: } else {
 19354  15CF  0008               	return
 19355  15D0                     i1l1007:	
 19356                           
 19357                           ;Dimmer_B1.c: 1285: DimmerIntr2.Dimming_Status = 0;
 19358  15D0  12E5               	bcf	_DimmerIntr2^(0+128),5
 19359                           
 19360                           ;Dimmer_B1.c: 1286: }
 19361                           ;Dimmer_B1.c: 1287: }
 19362                           ;Dimmer_B1.c: 1288: } else if (DimmerIntr2.Dimming_RF == 1) {
 19363  15D1  0008               	return
 19364  15D2                     i1l1002:	
 19365  15D2  1F65               	btfss	_DimmerIntr2^(0+128),6
 19366  15D3  0008               	return
 19367                           
 19368                           ;Dimmer_B1.c: 1289: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19369  15D4  086A               	movf	(_DimmerIntr2^(0+128)+5),w
 19370  15D5  0269               	subwf	(_DimmerIntr2^(0+128)+4),w
 19371  15D6  1803               	skipnc
 19372  15D7  2DDD               	goto	i1l7698
 19373                           
 19374                           ;Dimmer_B1.c: 1290: DimmerIntr2.DimmingValue++;
 19375  15D8  3001               	movlw	1
 19376  15D9  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19377  15DA  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19378  15DB  07E9               	addwf	(_DimmerIntr2^(0+128)+4),f
 19379                           
 19380                           ;Dimmer_B1.c: 1291: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19381  15DC  0008               	return
 19382  15DD                     i1l7698:	
 19383  15DD  0869               	movf	(_DimmerIntr2^(0+128)+4),w
 19384  15DE  026A               	subwf	(_DimmerIntr2^(0+128)+5),w
 19385  15DF  1803               	skipnc
 19386  15E0  2DE4               	goto	i1l1013
 19387                           
 19388                           ;Dimmer_B1.c: 1292: DimmerIntr2.DimmingValue--;
 19389  15E1  3001               	movlw	1
 19390  15E2  02E9               	subwf	(_DimmerIntr2^(0+128)+4),f
 19391                           
 19392                           ;Dimmer_B1.c: 1293: } else {
 19393  15E3  0008               	return
 19394  15E4                     i1l1013:	
 19395                           
 19396                           ;Dimmer_B1.c: 1294: DimmerIntr2.Dimming_RF = 0;
 19397  15E4  1365               	bcf	_DimmerIntr2^(0+128),6
 19398  15E5  0008               	return
 19399  15E6                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19400                           
 19401                           	psect	text138
 19402  1542                     __ptext138:	
 19403 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19404 ;; Defined at:
 19405 ;;		line 1180 in file "../src/Dimmer_B1.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;		None
 19408 ;; Auto vars:     Size  Location     Type
 19409 ;;		None
 19410 ;; Return value:  Size  Location     Type
 19411 ;;		None               void
 19412 ;; Registers used:
 19413 ;;		wreg, status,2, status,0
 19414 ;; Tracked objects:
 19415 ;;		On entry : 0/0
 19416 ;;		On exit  : 0/0
 19417 ;;		Unchanged: 0/0
 19418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19423 ;;Total ram usage:        1 bytes
 19424 ;; Hardware stack levels used:    1
 19425 ;; This function calls:
 19426 ;;		Nothing
 19427 ;; This function is called by:
 19428 ;;		_TMR1_ISR
 19429 ;; This function uses a non-reentrant model
 19430 ;;
 19431                           
 19432                           
 19433                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19434  1542                     _DimmerLights_MOSFET_TMR_1:	
 19435                           
 19436                           ;Dimmer_B1.c: 1181: if (DimmerIntr1.Start == 1) {
 19437                           
 19438                           ;incstack = 0
 19439                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19440  1542  0021               	movlb	1	; select bank1
 19441  1543  1D5E               	btfss	_DimmerIntr1^(0+128),2
 19442  1544  2D4F               	goto	i1l7612
 19443                           
 19444                           ;Dimmer_B1.c: 1182: DimmerIntr1.Count++;
 19445  1545  3001               	movlw	1
 19446  1546  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19447  1547  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19448  1548  07DF               	addwf	(_DimmerIntr1^(0+128)+1),f
 19449                           
 19450                           ;Dimmer_B1.c: 1183: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19451  1549  3035               	movlw	53
 19452  154A  025F               	subwf	(_DimmerIntr1^(0+128)+1),w
 19453  154B  1C03               	skipc
 19454  154C  2D4F               	goto	i1l7612
 19455                           
 19456                           ;Dimmer_B1.c: 1184: DimmerIntr1.Count = 0;
 19457  154D  01DF               	clrf	(_DimmerIntr1^(0+128)+1)
 19458                           
 19459                           ;Dimmer_B1.c: 1185: DimmerIntr1.Start = 0;
 19460  154E  115E               	bcf	_DimmerIntr1^(0+128),2
 19461  154F                     i1l7612:	
 19462                           
 19463                           ;Dimmer_B1.c: 1186: }
 19464                           ;Dimmer_B1.c: 1187: }
 19465                           ;Dimmer_B1.c: 1189: if (DimmerIntr1.GO == 1) {
 19466  154F  1C5E               	btfss	_DimmerIntr1^(0+128),0
 19467  1550  2D5C               	goto	i1l967
 19468                           
 19469                           ;Dimmer_B1.c: 1190: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19470  1551  0862               	movf	(_DimmerIntr1^(0+128)+4),w
 19471  1552  025F               	subwf	(_DimmerIntr1^(0+128)+1),w
 19472  1553  1C03               	skipc
 19473  1554  0008               	return
 19474                           
 19475                           ;Dimmer_B1.c: 1191: DimmerIntr1.GO = 0;
 19476  1555  105E               	bcf	_DimmerIntr1^(0+128),0
 19477                           
 19478                           ;Dimmer_B1.c: 1192: DimmerIntr1.Tune = 1;
 19479  1556  14DE               	bsf	_DimmerIntr1^(0+128),1
 19480                           
 19481                           ;Dimmer_B1.c: 1194: if (DimmerIntr1.ControlStatus == 1) {
 19482  1557  1DDE               	btfss	_DimmerIntr1^(0+128),3
 19483  1558  0008               	return
 19484                           
 19485                           ;Dimmer_B1.c: 1195: RA7 = 0;
 19486  1559  0020               	movlb	0	; select bank0
 19487  155A  138C               	bcf	12,7	;volatile
 19488                           
 19489                           ;Dimmer_B1.c: 1197: }
 19490                           ;Dimmer_B1.c: 1198: }
 19491                           ;Dimmer_B1.c: 1199: } else {
 19492  155B  0008               	return
 19493  155C                     i1l967:	
 19494                           
 19495                           ;Dimmer_B1.c: 1200: if (DimmerIntr1.Tune == 1) {
 19496  155C  1CDE               	btfss	_DimmerIntr1^(0+128),1
 19497  155D  0008               	return
 19498                           
 19499                           ;Dimmer_B1.c: 1201: DimmerIntr1.Tune = 0;
 19500  155E  10DE               	bcf	_DimmerIntr1^(0+128),1
 19501                           
 19502                           ;Dimmer_B1.c: 1202: DimmerIntr1.TuneTime++;
 19503  155F  3001               	movlw	1
 19504  1560  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19505  1561  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19506  1562  07E0               	addwf	(_DimmerIntr1^(0+128)+2),f
 19507                           
 19508                           ;Dimmer_B1.c: 1203: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19509  1563  0861               	movf	(_DimmerIntr1^(0+128)+3),w
 19510  1564  0260               	subwf	(_DimmerIntr1^(0+128)+2),w
 19511  1565  1C03               	skipc
 19512  1566  0008               	return
 19513                           
 19514                           ;Dimmer_B1.c: 1204: DimmerIntr1.TuneTime = 0;
 19515  1567  01E0               	clrf	(_DimmerIntr1^(0+128)+2)
 19516                           
 19517                           ;Dimmer_B1.c: 1205: if (DimmerIntr1.Dimming_Sw == 1) {
 19518  1568  1E5E               	btfss	_DimmerIntr1^(0+128),4
 19519  1569  2D80               	goto	i1l973
 19520                           
 19521                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.Dimming_Status == 0) {
 19522  156A  1ADE               	btfsc	_DimmerIntr1^(0+128),5
 19523  156B  2D77               	goto	i1l7636
 19524                           
 19525                           ;Dimmer_B1.c: 1207: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19526  156C  3034               	movlw	52
 19527  156D  0262               	subwf	(_DimmerIntr1^(0+128)+4),w
 19528  156E  1803               	skipnc
 19529  156F  2D75               	goto	i1l975
 19530                           
 19531                           ;Dimmer_B1.c: 1208: DimmerIntr1.DimmingValue++;
 19532  1570  3001               	movlw	1
 19533  1571  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19534  1572  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19535  1573  07E2               	addwf	(_DimmerIntr1^(0+128)+4),f
 19536                           
 19537                           ;Dimmer_B1.c: 1209: } else {
 19538  1574  0008               	return
 19539  1575                     i1l975:	
 19540                           
 19541                           ;Dimmer_B1.c: 1210: DimmerIntr1.Dimming_Status = 1;
 19542  1575  16DE               	bsf	_DimmerIntr1^(0+128),5
 19543                           
 19544                           ;Dimmer_B1.c: 1211: }
 19545                           ;Dimmer_B1.c: 1212: } else {
 19546  1576  0008               	return
 19547  1577                     i1l7636:	
 19548                           
 19549                           ;Dimmer_B1.c: 1213: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19550  1577  3011               	movlw	17
 19551  1578  0262               	subwf	(_DimmerIntr1^(0+128)+4),w
 19552  1579  1C03               	skipc
 19553  157A  2D7E               	goto	i1l978
 19554                           
 19555                           ;Dimmer_B1.c: 1214: DimmerIntr1.DimmingValue--;
 19556  157B  3001               	movlw	1
 19557  157C  02E2               	subwf	(_DimmerIntr1^(0+128)+4),f
 19558                           
 19559                           ;Dimmer_B1.c: 1215: } else {
 19560  157D  0008               	return
 19561  157E                     i1l978:	
 19562                           
 19563                           ;Dimmer_B1.c: 1216: DimmerIntr1.Dimming_Status = 0;
 19564  157E  12DE               	bcf	_DimmerIntr1^(0+128),5
 19565                           
 19566                           ;Dimmer_B1.c: 1217: }
 19567                           ;Dimmer_B1.c: 1218: }
 19568                           ;Dimmer_B1.c: 1219: } else if (DimmerIntr1.Dimming_RF == 1) {
 19569  157F  0008               	return
 19570  1580                     i1l973:	
 19571  1580  1F5E               	btfss	_DimmerIntr1^(0+128),6
 19572  1581  0008               	return
 19573                           
 19574                           ;Dimmer_B1.c: 1220: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19575  1582  0863               	movf	(_DimmerIntr1^(0+128)+5),w
 19576  1583  0262               	subwf	(_DimmerIntr1^(0+128)+4),w
 19577  1584  1803               	skipnc
 19578  1585  2D8B               	goto	i1l7644
 19579                           
 19580                           ;Dimmer_B1.c: 1221: DimmerIntr1.DimmingValue++;
 19581  1586  3001               	movlw	1
 19582  1587  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19583  1588  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19584  1589  07E2               	addwf	(_DimmerIntr1^(0+128)+4),f
 19585                           
 19586                           ;Dimmer_B1.c: 1222: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19587  158A  0008               	return
 19588  158B                     i1l7644:	
 19589  158B  0862               	movf	(_DimmerIntr1^(0+128)+4),w
 19590  158C  0263               	subwf	(_DimmerIntr1^(0+128)+5),w
 19591  158D  1803               	skipnc
 19592  158E  2D92               	goto	i1l984
 19593                           
 19594                           ;Dimmer_B1.c: 1223: DimmerIntr1.DimmingValue--;
 19595  158F  3001               	movlw	1
 19596  1590  02E2               	subwf	(_DimmerIntr1^(0+128)+4),f
 19597                           
 19598                           ;Dimmer_B1.c: 1224: } else {
 19599  1591  0008               	return
 19600  1592                     i1l984:	
 19601                           
 19602                           ;Dimmer_B1.c: 1225: DimmerIntr1.Dimming_RF = 0;
 19603  1592  135E               	bcf	_DimmerIntr1^(0+128),6
 19604  1593  0008               	return
 19605  1594                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19606                           
 19607                           	psect	text139
 19608  1BCF                     __ptext139:	
 19609 ;; *************** function _IOC_ISR *****************
 19610 ;; Defined at:
 19611 ;;		line 397 in file "../src/MCU_B1.c"
 19612 ;; Parameters:    Size  Location     Type
 19613 ;;		None
 19614 ;; Auto vars:     Size  Location     Type
 19615 ;;		None
 19616 ;; Return value:  Size  Location     Type
 19617 ;;		None               void
 19618 ;; Registers used:
 19619 ;;		status,2, status,0, pclath, cstack
 19620 ;; Tracked objects:
 19621 ;;		On entry : 0/0
 19622 ;;		On exit  : 0/0
 19623 ;;		Unchanged: 0/0
 19624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;Total ram usage:        0 bytes
 19630 ;; Hardware stack levels used:    1
 19631 ;; Hardware stack levels required when called:    1
 19632 ;; This function calls:
 19633 ;;		_DimmerLights_MOSFET_IOC_1
 19634 ;;		_DimmerLights_MOSFET_IOC_2
 19635 ;; This function is called by:
 19636 ;;		_ISR
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           
 19641                           ;psect for function _IOC_ISR
 19642  1BCF                     _IOC_ISR:	
 19643                           
 19644                           ;MCU_B1.c: 398: IOCBF2 = 0;
 19645                           
 19646                           ;incstack = 0
 19647                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19648  1BCF  0027               	movlb	7	; select bank7
 19649  1BD0  1116               	bcf	22,2	;volatile
 19650                           
 19651                           ;MCU_B1.c: 399: IOCIF = 0;
 19652  1BD1  100B               	bcf	11,0	;volatile
 19653                           
 19654                           ;MCU_B1.c: 401: if (myMain.PowerON == 1) {
 19655  1BD2  0022               	movlb	2	; select bank2
 19656  1BD3  1C20               	btfss	_myMain^(0+256),0
 19657  1BD4  0008               	return
 19658                           
 19659                           ;MCU_B1.c: 407: DimmerLights_MOSFET_IOC_1();
 19660  1BD5  319C  2424  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19661                           
 19662                           ;MCU_B1.c: 412: DimmerLights_MOSFET_IOC_2();
 19663  1BD8  319C  2432         	fcall	_DimmerLights_MOSFET_IOC_2
 19664  1BDA  0008               	return
 19665  1BDB                     __end_of_IOC_ISR:	
 19666                           
 19667                           	psect	text140
 19668  1C32                     __ptext140:	
 19669 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19670 ;; Defined at:
 19671 ;;		line 1302 in file "../src/Dimmer_B1.c"
 19672 ;; Parameters:    Size  Location     Type
 19673 ;;		None
 19674 ;; Auto vars:     Size  Location     Type
 19675 ;;		None
 19676 ;; Return value:  Size  Location     Type
 19677 ;;		None               void
 19678 ;; Registers used:
 19679 ;;		None
 19680 ;; Tracked objects:
 19681 ;;		On entry : 0/0
 19682 ;;		On exit  : 0/0
 19683 ;;		Unchanged: 0/0
 19684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19689 ;;Total ram usage:        0 bytes
 19690 ;; Hardware stack levels used:    1
 19691 ;; This function calls:
 19692 ;;		Nothing
 19693 ;; This function is called by:
 19694 ;;		_IOC_ISR
 19695 ;; This function uses a non-reentrant model
 19696 ;;
 19697                           
 19698                           
 19699                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19700  1C32                     _DimmerLights_MOSFET_IOC_2:	
 19701                           
 19702                           ;Dimmer_B1.c: 1303: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19703                           
 19704                           ;incstack = 0
 19705                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19706  1C32  0021               	movlb	1	; select bank1
 19707  1C33  1965               	btfsc	_DimmerIntr2^(0+128),2
 19708  1C34  0008               	return
 19709  1C35  0020               	movlb	0	; select bank0
 19710  1C36  1D0D               	btfss	13,2	;volatile
 19711  1C37  0008               	return
 19712                           
 19713                           ;Dimmer_B1.c: 1304: DimmerIntr2.Start = 1;
 19714  1C38  0021               	movlb	1	; select bank1
 19715  1C39  1565               	bsf	_DimmerIntr2^(0+128),2
 19716                           
 19717                           ;Dimmer_B1.c: 1305: DimmerIntr2.GO = 1;
 19718  1C3A  1465               	bsf	_DimmerIntr2^(0+128),0
 19719                           
 19720                           ;Dimmer_B1.c: 1307: if (DimmerIntr2.ControlStatus == 1) {
 19721  1C3B  1DE5               	btfss	_DimmerIntr2^(0+128),3
 19722  1C3C  0008               	return
 19723                           
 19724                           ;Dimmer_B1.c: 1308: RB4 = 1;
 19725  1C3D  0020               	movlb	0	; select bank0
 19726  1C3E  160D               	bsf	13,4	;volatile
 19727  1C3F  0008               	return
 19728  1C40                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19729                           
 19730                           	psect	text141
 19731  1C24                     __ptext141:	
 19732 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19733 ;; Defined at:
 19734 ;;		line 1233 in file "../src/Dimmer_B1.c"
 19735 ;; Parameters:    Size  Location     Type
 19736 ;;		None
 19737 ;; Auto vars:     Size  Location     Type
 19738 ;;		None
 19739 ;; Return value:  Size  Location     Type
 19740 ;;		None               void
 19741 ;; Registers used:
 19742 ;;		None
 19743 ;; Tracked objects:
 19744 ;;		On entry : 0/0
 19745 ;;		On exit  : 0/0
 19746 ;;		Unchanged: 0/0
 19747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19752 ;;Total ram usage:        0 bytes
 19753 ;; Hardware stack levels used:    1
 19754 ;; This function calls:
 19755 ;;		Nothing
 19756 ;; This function is called by:
 19757 ;;		_IOC_ISR
 19758 ;; This function uses a non-reentrant model
 19759 ;;
 19760                           
 19761                           
 19762                           ;psect for function _DimmerLights_MOSFET_IOC_1
 19763  1C24                     _DimmerLights_MOSFET_IOC_1:	
 19764                           
 19765                           ;Dimmer_B1.c: 1234: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19766                           
 19767                           ;incstack = 0
 19768                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 19769  1C24  0021               	movlb	1	; select bank1
 19770  1C25  195E               	btfsc	_DimmerIntr1^(0+128),2
 19771  1C26  0008               	return
 19772  1C27  0020               	movlb	0	; select bank0
 19773  1C28  1D0D               	btfss	13,2	;volatile
 19774  1C29  0008               	return
 19775                           
 19776                           ;Dimmer_B1.c: 1235: DimmerIntr1.Start = 1;
 19777  1C2A  0021               	movlb	1	; select bank1
 19778  1C2B  155E               	bsf	_DimmerIntr1^(0+128),2
 19779                           
 19780                           ;Dimmer_B1.c: 1236: DimmerIntr1.GO = 1;
 19781  1C2C  145E               	bsf	_DimmerIntr1^(0+128),0
 19782                           
 19783                           ;Dimmer_B1.c: 1238: if (DimmerIntr1.ControlStatus == 1) {
 19784  1C2D  1DDE               	btfss	_DimmerIntr1^(0+128),3
 19785  1C2E  0008               	return
 19786                           
 19787                           ;Dimmer_B1.c: 1239: RA7 = 1;
 19788  1C2F  0020               	movlb	0	; select bank0
 19789  1C30  178C               	bsf	12,7	;volatile
 19790  1C31  0008               	return
 19791  1C32                     __end_of_DimmerLights_MOSFET_IOC_1:	
 19792  007E                     btemp	set	126	;btemp
 19793  007E                     pic14e$flags	set	126
 19794  007E                     wtemp	set	126
 19795  007E                     wtemp0	set	126
 19796  0080                     wtemp1	set	128
 19797  0082                     wtemp2	set	130
 19798  0084                     wtemp3	set	132
 19799  0086                     wtemp4	set	134
 19800  0088                     wtemp5	set	136
 19801  007F                     wtemp6	set	127
 19802  007E                     ttemp	set	126
 19803  007E                     ttemp0	set	126
 19804  0081                     ttemp1	set	129
 19805  0084                     ttemp2	set	132
 19806  0087                     ttemp3	set	135
 19807  007F                     ttemp4	set	127
 19808  007E                     ltemp	set	126
 19809  007E                     ltemp0	set	126
 19810  0082                     ltemp1	set	130
 19811  0086                     ltemp2	set	134
 19812  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      80
    BANK1            80      2      78
    BANK2            80      0      80
    BANK3            80      7      78
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    DimmerIntr	PTR struct Dimmer_Interrut size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_AdjControl->_setDimmerLights_SwOff
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setRF_DimmerLights
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_Exception_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  154151
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1589
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3971
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    3971
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7898
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7898
                                             71 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      93
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   53279
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   53279
                                              0 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   49003
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3792
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   44939
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13801
                                             71 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23230
                                             71 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     201
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2053
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1011
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0     985
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   11976
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7263
                                             71 BANK0      1     1      0
                                              0 BANK3      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   51918
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   51586
                                             71 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32519
                                             67 BANK0      4     3      1
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     278
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     152
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   14033
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3075
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   18530
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     432
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   10958
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     525
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     219
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3315
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4080
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    2720
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2433
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    7542
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    7542
                                             71 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
                             _setBuz
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1889
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3751
                                             70 BANK0      1     1      0
         _DimmerLights_SelectPointer
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       8     6      2    3469
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     290
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setBuz
         ___awdiv
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         ___bmul
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
             _getDelayOff_GO
               _DelayOffPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _getDimmerLights_ValueToPercent (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _getDimmerLights_ValueToPercent (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      7      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     191      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     191      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Dec 30 17:02:49 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0074  
               getMain_Lights_Count@count 0072                                        l94 1615  
                                      l96 1627                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10CE                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006E  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1C7B  
                  __end_of_setDelayOff_GO 0C61                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 09C8                      _setDimmerLights_Line 1D4B  
                            ___ftadd@sign 0043                                       l104 1407  
                                     l105 1403                                       l106 13F3  
                                     l108 1401                                       l320 1E64  
                                     l251 0A6C                      _setDimmerLights_SwOn 168D  
                                     l319 1E62                                       l363 111A  
                                     l730 1D81                                       l900 0DDF  
                                     l930 1C82                                       l931 1C88  
                                     l875 1F95                                       _GIE 005F  
                                     _CRC 00C1                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C3  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00BF              getDimmerLights_Status@lights 0074  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1E6F  
                   _Buzzer_Initialization 1B13                           __end_of_ADC_Set 1B67  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 118B  
             _setDimmerIntr_ControlStatus 1162                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1BDB                     _setDimmerLights_OnOff 0D63  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l1117 1F32  
                                    l1118 1F3B                                      l1151 1375  
                                    l1152 137C                                      l1422 1263  
                                    l2321 06C6                                      l1436 11D7  
                                    l3117 03FD                                      l1445 1499  
                                    l2325 062D                                      l2326 066E  
                                    l1630 083B                                      l2351 1C8F  
                                    l2407 07E1                                      l1810 0087  
                                    l1811 0082                           __end_of_IOC_Set 1C0B  
                                    l1662 1230                                      l3094 0886  
                                    l2366 0AFE                                      l1807 01E9  
                                    l3088 086F                                      l2392 0BE5  
                                    l2384 0B81                                      l1657 121B  
                                    l1817 01C5                                      l1809 008B  
                                    l2385 0B90                                      l2705 1E07  
                                    l1658 1234                                      l1818 01C3  
                                    l2378 1299                                      l2727 0354  
                                    l1689 0531                                      l2729 0232  
                                    l1973 0F46                                      l2927 1F4D  
                                    l7008 1D57                                      l7202 12E1  
                                    l1978 0F40                                      l7214 12F5  
                                    l7224 1304                                      l7216 12F7  
                                    l7226 1308                                      l8116 13DF  
                                    l9100 03D3                     _setDimmerLights_SwOff 140E  
                                    l9022 0C3F                                      l9110 03EF  
                                    l9102 03D8                                      l7342 11C2  
                                    l9016 0C2A                                      l9120 0421  
                                    l9112 03F9                                      l9104 03DC  
                                    l9200 0734                                      l9026 0C45  
                                    l9130 043C                                      l7442 1E20  
                                    l9028 0C4B                                      l9116 040F  
                                    l9140 0E08                                      l9212 0750  
                                    l9204 073C                                      l9046 1DB7  
                                    l9070 0386                                      l9080 039C  
                                    l9160 0E5F                                      l9240 0CF5  
                                    l9400 178C                                      l9216 0758  
                                    l8096 1F47                                      l7536 1EDE  
                                    l7456 1FAC                                      l9058 1095  
                                    l9074 038D                                      l9146 0E1E  
                                    l7546 1EEB                                      l7466 1FB9  
                                    l7458 1FAE                                      l9324 16A1  
                                    l6908 1D78                                      l9092 03B6  
                                    l9260 0D33                                      l7812 146E  
                                    l7548 1EEF                                      l7468 1FBD  
                                    l9334 16B2                                      l9326 16A4  
                                    l9270 0D4C                                      l6918 1104  
                                    l9182 06E3                                      l7806 145A  
                                    l9502 10B5                                      l9344 16DA  
                                    l9336 16B7                                      l9168 0E78  
                                    l9504 10B8                                      l9346 16DF  
                                    l9098 03C9                                      l9274 0D5A  
                                    l9266 0D40                                      l9258 0D25  
                                    l6890 1177                                      l8900 0845  
                                    l9268 0D49                                      l9188 06F9  
                                    l9508 10BE                                      l9612 13B2  
                                    l9540 14D5                     _myMain_Initialization 1C99  
                                    l9358 143C                                      l9702 17B5  
                                    l9462 1EB3                                      l9622 13C2  
                                    l9606 13A9                                      l8904 084C  
                                    l9368 1E4C                                      l9376 11A0  
                                    l9712 17C5                                      l9720 17D1  
                                    l9456 1EAA                                      l9616 13B9  
                                    l9608 13AC                                      l9480 1F1C  
                                    l9560 079C                                      l9544 14E4  
                                    l8914 0874                                      l8906 0856  
                                    l6898 1DCC                                      l9706 17BB  
                                    l9458 1EAD                                      l9618 13BC  
                                    l9482 1F21                                      l9810 0A55  
                                    l8940 164F                                      l8916 087C  
                                    l8908 085B                                      l9732 17EF  
                                    l9716 17CB                                      l9580 10DB  
                                    l9820 0A7C                                      l9556 0797  
                                    l8950 1657                                      l8934 1644  
                                    l9494 112B                                      l9822 0A80  
                                    l9814 0A73                                      l8952 1663  
                                    l9728 17E9                                      l9736 17F5  
                                    l9496 1136                                      l9584 10E1  
                                    l9824 0A83                                      l9816 0A76  
                                    l9568 07CD                                      l9760 0B72  
                                    _CFGS 0CAE                                      l8874 1DA2  
                                    l8882 1D1A                                      l8962 167E  
                                    l9906 1C79                                      l9930 0DAD  
                                    l9578 10D8                                      l9770 0BC4  
                                    l9676 1217                                      l9852 08B9  
                                    l9828 0A89                                      l9772 0BC8  
                                    l8886 1D20                                      l8966 1686  
                                    l8958 1675                                      l9686 122C  
                                    l9678 121F                                      l9950 0DE5  
                                    l9934 0DC4                                      l9870 08DE  
                                    l9846 08B0                                      l9790 0A3D  
                                    l9774 0BCC                                      l9766 0BAB  
                                    l9944 0DDB                                      l9848 08B3  
                                    l9792 0A40                                      l9768 0BC0  
                            __CFG_WDTE$ON 0000                                      l9698 17AF  
                                    l9778 0BD0                                      l9868 08C8  
                                    l9796 0A46                                      l9958 150A  
                                    l9996 1D34                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u8615 13D5                                      u8575 1F4E  
                                    u8585 1F53                                      _LWLO 0CAD  
                                    u9995 0851                                      _RSSI 00C4  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E87                _setDimmerLights_DimmingRun 1E6F  
                                    _Buz1 00AE                                      _Load 0131  
                                    _Temp 00CC                                      _main 16E7  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0B71  
                         __end_of_RF_Main 1B1F                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B99  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 07FF  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2145 0074      _getDimmerLights_Allow_Condition$2146 0075  
    _getDimmerLights_Allow_Condition$2147 0076                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 130A  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 12D3                    _getDimmerLights_Status 1C4E  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1BFF  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 007B  
                                   l10110 09EE                                     l10112 09F4  
                                   l10040 0ADA                                     l10016 0AAB  
                                   l10122 0A1A                                     l10124 0A20  
                                   l10060 12B1                                     l10028 0AC4  
                                   l10220 0F15                                     l10070 12CC  
                                   l10310 06BF                                     l10222 0F17  
                                   l10232 0F2C                                     l10066 12C3  
                                   l10058 12A5                                     l10330 1E12  
                                   l10234 0F2D                                     l10172 1F02  
                                   l10326 1E0C                                     l10190 0EB6  
                                   l10166 1EF9                                     l10360 025F  
                                   l10344 021C                                     l10168 1EFC  
                                   l10434 1F97                                     l10282 067D  
                                   l10370 0291                                     l10268 0669  
                                   l10462 05A4                                     l10702 018F  
                                   l10622 0069                                     l10542 0CA2  
                                   l10534 0C7F                                     l10800 04C7  
                                   l10712 01A5                                     l10640 008A  
                                   l10296 06A7                                     l10384 02CF  
                                   l10394 0301                                     l10562 0CD6  
                                   l10546 0CAB                                     l10820 0516  
                                   l10814 0504                                     l10750 01D8  
                                   l10662 00E0                     ?_setDimmerLights_Main 0070  
                                   l10816 04DD                                     l10656 00AE  
                                   l10576 1334                                     l10818 050C  
                                   l10826 0527                                     l10594 081C  
                                   l10694 0167                                     l10784 0486  
                                   l10688 015A                                     l10778 0476  
                                   l10698 0183                                     l10890 1716  
                                   l10796 04BF                                     l10788 0495  
                                   l10798 0498                                     l10886 170B  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005E  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0265  
                         __end_of___awdiv 168D                           __end_of___ftadd 0454  
                         __end_of___ftdiv 0E9A                           __end_of___ftneg 1B87  
                                   u10015 086A                                     u10115 165A  
                                   u10035 0877                                     u10135 1664  
                                   u10145 166E                                     u10065 088D  
                                   u10155 1676                                     u11060 174C  
                                   u10245 0C15                                     u10405 03B7  
                         __end_of___ftmul 0780                                     u11065 174A  
                                   u12105 12BC                                     u10435 03CA  
                                   u12115 12C4                           ___awdiv@divisor 0072  
                                   u10605 0E79                                     u11165 1120  
                                   _T1CON 0018                                     u10465 03DD  
                                   u10715 0759                                     u12075 12A8  
                                   u13035 132B                                     u10565 0E30  
                         __end_of___fttol 0D63                                     u10725 075F  
                                   u10645 0705                                     u13045 133A  
                                   u10495 03F0                                     u10575 0E40  
                                   u10655 0715                                     u12095 12B2  
                                   u12415 0EFD                                     u10585 0E60  
                                   u10825 0D41                                     u13225 00AC  
                                   u10595 0E6F                                     u10675 073D  
                                   u13235 00DE                                     u12435 0F1D  
                                   u10765 0CFC                                     u10685 0743  
                                   u13325 0196                                     u13245 0113  
                                   u12525 0649                                     u13085 0833  
                                   u10855 1DE5                                     u13450 04C5  
                                   u10795 0D26                                     u12555 0696  
                                   u13455 04A3                                     u11855 1E3A  
                                   u13480 050A                                     u13485 04E8  
                                   _IOCBF 0396                                     u12935 0C8F  
                                   _IOCBN 0395                                     u12895 125A  
                                   _IOCBP 0394                                     u12985 0CC3  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 12D3                                     i1l973 1580  
                                   i1l975 1575                                     i1l967 155C  
                                   i1l984 1592                                     i1l978 157E  
                                   i1l996 15AE                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1E40  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0963  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 08FE  
                        __end_of_TMR1_ISR 2000                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C17  
                                   _getAD 1EF1                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1D18  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1CD8                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
            __end_of_getMain_LightsStatus 1C7B             __end_of_setLED_Initialization 1CC8  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 1742               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0060               __size_of_setRF_TransceiveGO 0010  
                  ??_Flash_Memory_Erasing 0072               ??_setDimmerLights_DimmingOn 0074  
                      ??_CC2500_SIDLEMode 0076                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 1742  
                     ?_setRF_DimmerLights 005E                          __end_of_Fosc_Set 1B29  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0063  
                          _Exception_Main 0454                          ?_CC2500_WriteREG 0074  
                               ??_ADC_Set 0072                      _setSw_Initialization 1B67  
                                  ??_main 007A                             ___fttol@sign1 004E  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0B71  
                          _setMemory_Data 1BAE                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 14F1  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00DE                               _DimmerIntr2 00E5  
                __size_of_setRFSW_Control 0050                        _RF_Timeout_Counter 1DD6  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0063  
                    ??_setRF_DimmerLights 005F                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0B00                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 007A                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0074  
                   _getDimmer_Load_Status 1B59                                 ??_WDT_Set 0072  
                        __end_of___awtoft 10AC                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 089D                  _getMain_All_Error_Status 1208  
                                  _IOCBF2 1CB2                                    i1l1002 15D2  
                                  i1l1004 15C7                                    i1l1013 15E4  
                                  i1l1007 15D0                                    i1l1384 0013  
                                  i1l1387 001B                                    i1l7612 154F  
                                  i1l7644 158B                                    i1l7636 1577  
                                  i1l7690 15C9                                    i1l7666 15A1  
                                  i1l7698 15DD                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0198                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E87  
                                  u872_25 1FFA                                    _WDTCON 0097  
                    Exception_Main@i_3390 01EB                        DelayTime_1us@count 0072  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1E00                                    _Dimmer 012E  
                                  _DlySw1 015F                                    _DlySw2 01E2  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1D6F  
                     __end_of_Buzzer_Main 140E                                    _Memory 0220  
                                  _Timer1 00BA                                    ___bmul 1D18  
                  __end_of_Exception_Main 0532                      Load_Main@Load_Status 0023  
                    Exception_Main@lights 01ED                                    ___wmul 1F45  
                               ??___awdiv 0076                                 ??___ftadd 003F  
            __size_of_DelayOffPointSelect 0015                                 ??___ftdiv 002C  
                               ??___ftneg 007A                                 ??___ftmul 002C  
                               ??___fttol 004A              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0072                                 ??___lwdiv 0076  
                  ??_setDimmerLights_Main 007A                    ??_setDimmerLights_Line 0072  
                                  _r_data 00CA   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1EF1  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1ED6  
                                  _s_data 00CB                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 17A1                                    _myMain 0120  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 1BB9  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 15E6                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1B19          ??_setDimmerLights_Initialization 0072  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 11B4  
        __end_of_setDimmerIntr_Dimming_Sw 1116                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 113B                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1D08  
             getMain_Lights_Count@status1 0073               getMain_Lights_Count@status2 0074  
                   __end_of_SwPointSelect 1E2A              __size_of_Flash_Memory_Modify 004D  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0072                                _TouchPower 1E00  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0051  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$4996 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2117 0026  
               _setDimmerLights_SwOn$2118 0027                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1FBF                             __end_of_getAD 1F0C  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1BE7                           _getSw_KeyStatus 1F9F  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0064  
           ??_Flash_Memory_Initialization 005A                ?_DimmerLights_MOSFET_IOC_1 0070  
              ?_DimmerLights_MOSFET_IOC_2 0070                      _getMain_Lights_Count 1CC8  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01ED  
       setDimmerIntr_ControlStatus@lights 0074                ?_DimmerLights_MOSFET_TMR_1 0070  
              ?_DimmerLights_MOSFET_TMR_2 0070                        __size_of_getBuz_GO 0010  
                    _getMain_LightsStatus 1C6C                 _setDimmerIntr_MaxmumValue 1E40  
              __end_of_set_TimeoutCleared 1B3F           setDimmerIntr_MaxmumValue@lights 005C  
                      __size_of_getRxData 006B                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1C40  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0075                       _Temp_Initialization 1B1F  
                      ??_CC2500_WriteByte 0072                                __pbssBANK0 006D  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13C8  
                       ??_setRFSW_Control 0067               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1B25                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B6E  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 006D                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 16E7  
                          _getDelayOff_GO 1C5D                       _CC2500_WriteCommand 1EA1  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 108A  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0C61                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1B4B                        __size_of_setTxData 00B4  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B60  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 130A  
      __end_of_DimmerLights_SelectPointer 1DC1                _DimmerLights_SelectPointer 1DAC  
                              ??_WDT_Main 0072                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1BA3         __end_of_DimmerLights_MOSFET_IOC_1 1C32  
       __end_of_DimmerLights_MOSFET_IOC_2 1C40                        _setRFSW_AdjControl 0780  
                  __end_of_setProductData 1C4E         __end_of_DimmerLights_MOSFET_TMR_1 1594  
       __end_of_DimmerLights_MOSFET_TMR_2 15E6             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 1BCF                                   _IOC_Set 1BFF  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0063  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1236                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1D83                    __size_of_CC2500_RxData 0061  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1B1C  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1B90           __end_of_setControl_Lights_Table 0BE6  
                         setRF_Main@error 00ED                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1542  
                 ??_setLoad_AH_AL_Restore 0072              __end_of_CC2500_FrequencyCabr 1BC4  
                         __size_of_IO_Set 001A         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1CE8  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C6C                                   _VarLED1 0168  
                                 _VarLED2 016C            __end_of_getDimmerLights_Status 1C5D  
                       __end_of_getRxData 0B00                   __end_of_getSw_KeyStatus 1FBF  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 0067                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 1639                                   ___ftadd 035E  
                                 ___ftdiv 0DF1                                   ___ftneg 1B7E  
                         __size_of___wmul 001D                                   ___ftmul 06CC  
                                 ___fttol 0CDC                       __end_of_Switch_Main 1BCF  
                                 ___lwdiv 129D                   ??_Buzzer_Initialization 0072  
                         _getRF_KeyStatus 1D29                                ??___awtoft 0023  
                              ??___ftpack 0077                           __size_of_setLED 005F  
                    setRFSW_AdjControl@sw 006A                           __size_of_setBuz 0053  
                                 __ptext1 0804                                   __ptext2 1C99  
                                 __ptext3 130A                                   __ptext4 0C61  
                                 __ptext5 1EF1                                   __ptext6 1D08  
                                 __ptext7 0002                                   __ptext8 1B22  
                                 __ptext9 0E9A                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0064                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 1269                 __end_of_Flash_Memory_Read 1D97  
                 ??_setDimmerLights_SwOff 007A                                _setRF_Main 060E  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 1B76  
                       _DimmerLights_Main 1F7F            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 1B3A                __end_of_CC2500_ClearRXFIFO 1B31  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 1B35  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 006F                            _LedPointSelect 1F28  
                     _DelayOffPointSelect 1D97                                   clrloop0 1B46  
          __size_of_Switch_Initialization 000D             __end_of_Switch_Initialization 1C24  
                    end_of_initialization 0051                 ??_DelayOff_Initialization 0075  
                       _CC2500_InitSetREG 11DE                             _DelayTime_1us 1116  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 11DE  
      __size_of_setDimmerLights_DimmingOn 0027                                   init_ram 1B3F  
              __end_of_setRF_TransceiveGO 1CB8                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 007A                      Flash_Memory_Read@ret 0075  
                                 initloop 1B40                                _setSw_Main 01ED  
                   CC2500_ReadByte@loop_b 0073                    setDimmerLights_SwOn@sw 0029  
                       _CC2500_ReadStatus 10CE                      Flash_Memory_Modify@i 0077  
                   _setLED_Initialization 1CB8                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0076                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001C                             _CC2500_RxData 089D  
                           _CC2500_TxData 0A2D                       ??_CC2500_InitSetREG 0077  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 1454                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0072  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1B87  
                     ??_CC2500_ReadStatus 0074                    ??_getMain_LightsStatus 0072  
                 CC2500_InitSetREG@loop_c 0022                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0076  
                  setSw_Initialization@sw 0076                 __end_of_DimmerLights_Main 1F9F  
                      _Mcu_Initialization 1D5D                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B2D                      __end_of_my_MainTimer 083D  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1F45                  __size_of_CC2500_WriteREG 0022  
        getDimmerIntr_DimmingValue@lights 0074          setDimmerIntr_DimmingValue@lights 0074  
               __end_of_CC2500_InitSetREG 1208                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 005F  
                          ?_DelayTime_1us 0072                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 10F1  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0074  
         getMain_All_Error_Status@command 0077                               ___ftdiv@exp 0034  
       __end_of_setDimmerLights_DimmingOn 1162                          ??_Exception_Main 0067  
                          __end_of_IO_Set 1EA1                      _setRF_Initialization 1B99  
                      _setMemory_LoopSave 1CF8                               _Switch_Main 1BC4  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D3A                          ??_setMemory_Data 0073  
                             ___ftmul@exp 0030                     _CC2500_PowerOnInitial 1DEB  
             ??_DimmerIntr_Initialization 0072                      ??_Mcu_Initialization 0073  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D29  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 1F62                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0065  
                          __end_of_setLED 1800             __size_of_setDimmerLights_Line 0012  
           __size_of_setDimmerLights_SwOn 005A                            __end_of_setBuz 1639  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1BB9                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 14A1  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0055  
                             __end_of_ISR 0020                          _getDimmer_LoadGO 1B52  
                   ??_Flash_Memory_Modify 0076              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0072                __end_of_CC2500_InitPATable 1F7F  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0072  
                   ??_Flash_Memory_Unlock 0072                      __end_of_setTemp_Main 0F4C  
                          ??_RF_RxDisable 0076    __end_of_getDimmerLights_PercentToValue 09C8  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 0963  
                     __size_of_getLoad_AD 007B                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 0056                       __size_of_getLoad_OK 0007  
                      _set_TimeoutCleared 1B3A         __end_of_setDimmerIntr_MaxmumValue 1E57  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 0164                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0039                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 1B22  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0072  
                               _Rx_Length 00C5                     setProductData@address 005D  
                     Exception_Main@count 01E7                       Exception_Main@error 01E8  
                                ??___bmul 0073                                  ??___wmul 0076  
                  __size_of_SwPointSelect 0015                                 _Tx_Length 00C8  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1236  
                        _CC2500_SIDLEMode 0800                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1CE8                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00EC  
               setRF_TransceiveGO@command 0073                             __pcstackBANK3 01E7  
                           __pcstackBANK4 0265                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1068                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0069  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 0071  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1C24  
               _DimmerLights_MOSFET_IOC_2 1C32                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 1542                 _DimmerLights_MOSFET_TMR_2 1594  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1ED6  
                setRFSW_AdjControl@status 0069                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006F                            getRxData@error 006C  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1B29  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 01E9  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00BE  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                              setBuz@time 0024                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1CD8                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 060E               _Flash_Memory_Initialization 0532  
                                ?___awdiv 0072                                 __ptext100 1D4B  
                               __ptext101 1E40                                 __ptext110 1D6F  
                               __ptext102 10F1                                 __ptext111 1C6C  
                               __ptext103 08FE                                 __ptext120 168D  
                               __ptext112 12D3                                 __ptext104 0CDC  
                               __ptext121 15E6                                 __ptext113 1B4B  
                               __ptext105 1B7E                                 __ptext130 1B6E  
                               __ptext122 1639                                 __ptext114 1208  
                               __ptext106 0DF1                                 __ptext131 1B35  
                               __ptext123 140E                                 __ptext115 1BA3  
                               __ptext107 035E                                 __ptext140 1C32  
                               __ptext132 1D97                                 __ptext124 0BE6  
                               __ptext116 1067                                 __ptext108 108A  
                               __ptext141 1C24                                 __ptext133 13C8  
                               __ptext125 1C40                                 __ptext117 1068  
                               __ptext109 083D                                  ?___ftadd 0039  
                               __ptext134 1B13                                 __ptext126 1D18  
                               __ptext118 1B76                                 __ptext127 1C5D  
                               __ptext119 0B00                                 __ptext136 1FDF  
                               __ptext128 1C4E                                 __ptext137 1594  
                               __ptext129 1DAC                                 __ptext138 1542  
                               __ptext139 1BCF                                 _getRxData 0A95  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 14F1                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B16                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1E15  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D83              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D6F                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 008E                                 _r_address 00C9  
           __end_of_setDimmerLights_OnOff 0DF1            __size_of_setDimmerLights_SwOff 0046  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1454  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1CA8  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0078  
                           _SwPointSelect 1E15                       __end_of_setLED_Main 1384  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1B22                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1BF3  
                         SwPointSelect@sw 0073                                 clear_ram0 1B45  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 0804                                 _setTxData 0F4C  
     __end_of_DimmerLights_Initialization 1BAE               _DimmerLights_Initialization 1BA3  
                      _CC2500_ClearRXFIFO 1B2D                        _CC2500_ClearTXFIFO 1B31  
                setRF_DimmerLights@lights 0062                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D4B                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0061  
    __size_of_setDimmerIntr_ControlStatus 0029               __size_of_setRFSW_AdjControl 007F  
     __size_of_setDimmerIntr_DimmingValue 0015                        _Flash_Memory_Write 11B4  
                              ?_getRxData 0070                              ??_getLoad_AD 0076  
                                _TMR1_ISR 1FDF                    CC2500_InitSetREG@temp1 0020  
                  CC2500_InitSetREG@temp2 0021                              ??_getLoad_OK 0072  
                                _TMR1_Set 1C0B                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1CA8  
                                _RF_Count 00BD                      __end_of_RF_RxDisable 1C99  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 1EBB  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1D08  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0075  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B2  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 007B  
                                _DelayOff 00C2                              setSw_Main@sw 0069  
                             ??_Load_Main 0020                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0078                          __size_of_IOC_Set 000C  
            __end_of_Flash_Memory_Erasing 1BE7                            ?_SwPointSelect 0070  
                             getAD@adcon0 0075                               getAD@adcon1 0072  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 129D                     _DlyOff_Initialization 1B35  
                    ??_CC2500_ClearRXFIFO 0076                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 118B               setDimmerLights_OnOff@lights 0066  
                _setDimmerIntr_Dimming_Sw 10F1                                  _Fosc_Set 1B25  
                        __size_of_WDT_Set 0009                     setRFSW_Control@status 0068  
                      __end_of_getLoad_AD 0CDC                        __end_of_getLoad_OK 1B52  
                   _Switch_Initialization 1C17         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 1343  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1E57                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0015                      ??_setRF_TransceiveGO 0072  
            Flash_Memory_Initialization@i 005B                                  _SwDetect 00C7  
                             ??_Temp_Main 007A                         setRFSW_Control@sw 0069  
           _getMain_All_Error_Status$3378 0073             _getMain_All_Error_Status$3379 0075  
                __end_of_getDimmer_LoadGO 1B59                       _Load_Initialization 1B16  
        ??_getDimmerLights_ValueToPercent 0054           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0075                              _setTemp_Main 0E9A  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0036  
                setDimmerLights_SwOn@idle 0028                                  ___awtoft 108A  
                        ??_LedPointSelect 0072                                  ___ftpack 083D  
           __size_of_getMain_Lights_Count 0010                    getDimmer_LoadGO@loadgo 0072  
           __size_of_getMain_LightsStatus 000F                         getTemp_AD@channel 0077  
                            ??_setRF_Main 00EC                      CC2500_WriteREG@value 0074  
                             _setLED_Main 1343                __end_of_setRF_DimmerLights 17A1  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B60                          setDelayOff_GO@sw 0065  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0077                                  __ptext10 1B1F  
                                __ptext11 07FF                                  __ptext20 1E00  
                                __ptext12 1BC4                                  __ptext21 1B3A  
                                __ptext13 01ED                                  __ptext30 0780  
                                __ptext22 1E2A                                  __ptext14 1D3A  
                                __ptext31 1CE8                                  __ptext23 1B1C  
                                __ptext15 113B                                  __ptext40 1DEB  
                                __ptext32 1E6F                                  __ptext24 060E  
                                __ptext16 1F9F                                  __ptext41 0800  
                                __ptext33 1D29                                  __ptext25 0A95  
                                __ptext17 1E15                                  __ptext50 1EA1  
                                __ptext42 1384                                  __ptext34 1CD8  
                                __ptext26 1269                                  __ptext18 1C17  
                                __ptext51 1B29                                  __ptext43 11DE  
                                __ptext35 1C8A                                  __ptext27 1CF8  
                                __ptext19 1B67                                  __ptext60 1BFF  
                                __ptext52 1DD6                                  __ptext44 1F62  
                                __ptext36 0A2D                                  __ptext28 0B71  
                                __ptext61 1B25                                  __ptext53 1E57  
                                __ptext45 10AC                                  __ptext37 089D  
                                __ptext29 14A1                                  __ptext70 1B16  
                                __ptext62 1B60                                  __ptext54 1B19  
                                __ptext46 1BB9                                  __ptext38 10CE  
                                __ptext71 1EBB                                  __ptext63 0055  
                                __ptext55 1B99                                  __ptext47 1116  
                                __ptext39 1F0C                                  __ptext80 1BAE  
                                __ptext72 1BF3                                  __ptext64 1CC8  
                                __ptext56 1D5D                                  __ptext48 1B31  
                                __ptext81 11B4                                  __ptext73 1343  
                                __ptext65 1B59                                  __ptext57 1B90  
                                __ptext49 1B2D                                  __ptext90 1F28  
                                __ptext82 1B87                                  __ptext74 1BE7  
                                __ptext66 1B52                                  __ptext58 1C0B  
                                __ptext91 118B                                  __ptext83 1D83  
                                __ptext75 1CB8                                  __ptext67 1ED6  
                                __ptext59 1E87                                  __ptext92 1DC1  
                                __ptext84 0454                                  __ptext76 1236  
                                __ptext68 1F45                                  __ptext93 1162  
                                __ptext85 1C7B                                  __ptext77 1454  
                                __ptext69 129D                                  __ptext94 0963  
                                __ptext86 1F7F                                  __ptext78 1BDB  
                                __ptext95 06CC                                  __ptext87 09C8  
                                __ptext79 0532                                  __ptext96 14F1  
                                __ptext88 0D63                                  __ptext97 0F4C  
                                __ptext89 17A1                                  __ptext98 1CA8  
                                __ptext99 1742                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C8A              __end_of_setDimmerLights_Main 0A2D  
            __end_of_setDimmerLights_Line 1D5D              __end_of_setDimmerLights_SwOn 16E7  
                            ??_setSw_Main 0067                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1D3A  
      __size_of_DimmerIntr_Initialization 0022                  __end_of_CC2500_SIDLEMode 0804  
              setDimmerLights_Main@lights 0067               __end_of_DelayOffPointSelect 1DAC  
              CC2500_WriteCommand@command 0075                           _CC2500_ReadByte 1F0C  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1F62  
                __end_of_setMemory_Modify 1CF8      _getAll_DimmerIntr_Dimming_Sw_RF$2060 0073  
    _getAll_DimmerIntr_Dimming_Sw_RF$2061 0074                        __end_of_setRF_Main 06CC  
                             ??_getBuz_GO 0074               __size_of_Mcu_Initialization 0012  
      __size_of_DimmerLights_MOSFET_IOC_1 000E        __size_of_DimmerLights_MOSFET_IOC_2 000E  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006B  
                            getLoad_OK@ok 0072                __end_of_RF_Timeout_Counter 1DEB  
      __size_of_DimmerLights_MOSFET_TMR_1 0052        __size_of_DimmerLights_MOSFET_TMR_2 0052  
                                main@argc 0265                                  main@argv 0267  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$5955 0073  
                    _getSw_KeyStatus$5956 0074       getDimmerLights_ValueToPercent@value 0056  
                         _CC2500_PowerRST 1384                  __size_of_getSw_KeyStatus 0020  
      __end_of_setDimmerIntr_DimmingValue 1DD6                _setDimmerIntr_DimmingValue 1DC1  
             __end_of_Flash_Memory_Modify 14A1                               _setLog_Code 1269  
             __end_of_Flash_Memory_Unlock 1B90                           ??_SwPointSelect 0072  
                         _CC2500_WriteREG 10AC                        __end_of_setSw_Main 035E  
                   ??_Load_Initialization 0074           getDimmerLights_PercentToValue@i 0057  
     __size_of_setDimmerLights_DimmingRun 0018                             _Transceive_OK 03D1  
                  ?_DlyOff_Initialization 0070                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0072                setDimmerLights_Line@lights 0072  
                 setDimmerLights_SwOff@sw 0066               __size_of_setMemory_LoopSave 0010  
                                intlevel1 0000                      ??_CC2500_InitPATable 0077  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0062  
                         setDelayOff_GO@j 0063                           setDelayOff_GO@k 0064  
                 ??_CC2500_PowerOnInitial 007A    __end_of_setDimmerLights_Initialization 1068  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1067  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B19  
                             getLoad_AD@i 0023                               getLoad_AD@j 0022  
                             getLoad_AD@k 0021                      _Flash_Memory_Erasing 1BDB  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00C6  
                 __size_of_Exception_Main 00DE           __end_of_DelayOff_Initialization 1B76  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B7E  
                     ??_RF_Initialization 0073                   __size_of_setMemory_Data 000B  
                          _setDelayOff_GO 0BE6               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0075          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0072      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0067  
                   setMemory_Data@address 0074                     __end_of_DelayTime_1us 113B  
                 __end_of_CC2500_ReadByte 1F28              __end_of_setSw_Initialization 1B6E  
                         _Timeout_Counter 1E2A           __size_of_getDimmerLights_Status 000F  
         getDimmerLights_ValueToPercent@i 0057                              _RF_RxDisable 1C8A  
              __end_of_LED_Initialization 1BF3            __end_of_setTemp_Initialization 0800  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 1B1C  
                   __end_of_CC2500_RxData 08FE                     __end_of_CC2500_TxData 0A95  
                   _setLoad_AH_AL_Restore 1EBB                   __end_of_CC2500_PowerRST 13C8  
